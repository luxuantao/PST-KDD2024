<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main"></title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">34269BD7FD098905DCF543F384A35FC6</idno>
					<idno type="DOI">10.2307/2273659</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T15:58+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>A FILTER LAMBDA MODEL AND THE COMPLETENESS OF TYPE ASSIGNMENT 1 HENK BARENDREGT, MARIO COPPO AND MARIANGIOLA DEZANI-CIANCAGLINI</p><p>In <ref type="bibr">[6, p. 317</ref>] Curry described a formal system assigning types to terms of the type-free A-calculus. In <ref type="bibr">[11]</ref> Scott gave a natural semantics for this type assignment and asked whether a completeness result holds.</p><p>Inspired by <ref type="bibr" target="#b3">[4]</ref> and <ref type="bibr" target="#b4">[5]</ref> we extend the syntax and semantics of the Curry types in such a way that filters in the resulting type structure form a domain in the sense of Scott <ref type="bibr">[12]</ref>. We will show that it is possible to turn the domain of types into a A-model, among other reasons because all A-terms possess a type. This model gives the completeness result for the extended system. By a conservativity result the completeness for Curry's system follows.</p><p>Independently Hindley <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b8">[9]</ref> has proved both completeness results using term models. His method of proof is in some sense dual to ours.</p><p>For A-calculus notation see <ref type="bibr">[1]</ref>. §1. Curry type assignment.</p><p>1.1. DEFINITION, (i) The Curry type schemes form the smallest set T c such that 1-&lt;po, ?&gt;i &gt; • • • e T c (type variables). 2. a, z e T c =&gt; (a -+ z) e T c .</p><p>(ii) A Curry statement is an expression of the form oM where a eT c and Me A (set of type free A-terms). M is the subject and a the predicate of a M.</p><p>A basis B is a set of Curry statements with only variables as subjects.</p><p>(iii) A Curry type assignment is denned by the following natural deduction system, see e.g. [10, Chapter I, §2A],</p><formula xml:id="formula_0">(-•I) [a x] ( -E ) Q-*TM ffN : z(MN) zM (*) a -* z he. M (EQ^) oM</formula><p>M^pN aN (*) if x not free in assumptions on which zM depends other than ax.</p><p>(iv) If ffM is derivable from a basis B, then we write B \c aM. If Dis a derivation showing this, then we write D: B \c oM.</p><p>We assume that the reader is familiar with the notion of /l-model (weakly extensional A-algebra) and the interpretation of /l-terms in them. See [1] or <ref type="bibr" target="#b6">[7]</ref>. (ii) Let -T: {p,| / e co} -»• PD = {X|A' £ £&gt;}. Then^the interpretation of ae T c in ^# via V, denoted \o~\-f e PD, is defined as follows.</p><p>i. hpiif = f % ) .</p><p>2. la^zjf = {deD\Veela}fd-eelz]f}.</p><formula xml:id="formula_1">(iii) Jf, $, r t= a M iff IMJf e lajf, Jt, J , f N 5</formula><p>iff Ji, f, -T (= (TX for all ax e 5, fi |= &lt;TM iff VJ(, { , f N 5 ^, | , -T N ffA/. We will show the following completeness result: B ( -c oM o B t= cM. The soundness (=&gt;) has been proved in <ref type="bibr" target="#b1">[2]</ref>. §2. Extended type assignment.</p><p>2.1. DEFINITION, (i) The set T of extended types is inductively defined by 1 • #&gt;o&gt; &lt;Pu • • • 6 2 " type variables, a i e r type constant. 2. a, i e r = &gt; ( ^: ) e r , ( f f ( l T ) e r . (ii) A statement is of the form oM with creT, M eA. A basis is a set of statements with only variables as subjects.</p><p>The semantics for T c is extended to T. 2.2. DEFINITION, (i) Let y . {&lt;p t } -» PD, where D is the domain of a A-model Jl. Then for &lt;j 6 T the set [&lt;r] f £ £ is defined by adding to 1.2(ii):</p><p>3. Iwjf = Z&gt;.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">a&gt; n T]# = yjf n w#.</head><p>(ii) As before one defines Ji, £, T (= &lt;? M; J{, £, *" N fi and 5 (= «TM. In order to introduce the formal system of extended type assignment one first defines a preorder&lt;on T. The intended interpretation of a &lt; z is V^#, f" [ajf-£ 2.3. DEFINITION, (i) The relation &lt; on 7 is inductively defined by (i.e. is the smallest relation satisfying):</p><formula xml:id="formula_2">T &lt; Z, Z &lt; CO, CO &lt; CO -* CO, t &lt; z f\ z, a f] z &lt; a, a f] t &lt; z, (&lt;j -&gt; p) fl (ff -* T) &lt; a -* (p (1 T), a&lt;t&lt;p=&gt;a&lt;p, o&lt;o',z&lt;z'=&gt;o[\z&lt;o' [\ z', a' &lt; a, z &lt; z' =&gt; a -&gt; z &lt; a' -* z'• (ii) a ~ r &lt;=&gt; a &lt; z &lt; a.</formula><p>Note that, e.g., {a -* p) fl {a -&gt; r) ~ a -» (p fl T); &lt;W ~ a -&gt; &lt;w; a fl (p fl r) ~ (&lt;x fl p) fl 7. r may be considered modulo ~ ; then &lt; becomes a partial order.</p><formula xml:id="formula_3">(ii) (//i -» vi) fl • • • fl (//» -* v n ) &lt; a -&gt; z and z^w, then there are / 2 , . .., M { 1 , . . . , « } SMCA f/wf /i,-j fl • • • fl /A* ^ ff a«^ v tl fl • • • fl v it &lt; z.</formula><p>PROOF, (i) Define Q £ T inductively by: coeO; peQ =&gt; a -&gt; peO; a,p&amp;Q=&gt; a [\ peQ. Note that ae£? =*• a ~ co. By induction on the definition of &lt; one can show a e 0, a &lt; z =&gt; z e Q. It follows that ae Qo a ~ &lt;o. The rest is clear.</p><p>(ii) By induction on the definition of &lt;, one can show for n, n', m, rri &gt; 0 that for all / e {1, . . . , « ' } one has</p><formula xml:id="formula_4">[(fa -vi) n • • • no*--o n^j n • • • n*&gt;&gt;. &lt; (&lt;7i -»n) n • • • n (&lt;v -» T»/) n ?&gt;; n • • • n *»&gt;;, n ^n -n * and T, •* CD =&gt; 3/ 1; . . . , i k e {1, . . . , n) ^ fl • • • f] fx ik &gt; a t and v h fl • • • D v,-4 &lt; r j .</formula><p>Then the result follows. • 2.5. DEFINITION (i) Extended type assignment is defined by the following natural deduction system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>(-&gt;I)</head><p>[&lt;rx]     It is interesting to compare Hindley's completeness proof with ours. He takes as a model a term model (cf. [1, 4.1.17]) and as valuations</p><formula xml:id="formula_5">(-E) a-*zMaN ; ~fMN"~" zM_ (*) a -* z Xx.M (fl 1 ) ffMzM (f)E) ffjl</formula><formula xml:id="formula_6">Mn n • • • n /*,-, -v (HE) fi ik x \ &lt; k &lt; p v ik M 1 &lt; k &lt; p (HD v h n ••• n V, P A/ (&lt;)</formula><formula xml:id="formula_7">"TApi) = {[M] IB+ \-9i M}, fax) = [x],</formula><p>where [M] = {NeA\M = p N] and B + is a particular extension of B. Then he shows</p><formula xml:id="formula_8">M ^ = {[M]\B+ \-aM}, IMJ H = [M].</formula><p>REMARK. It is easy to prove that the filter model is a continuous A-model; see [1, §19.3], (J^ is even an algebraic complete lattice). By an argument similar to the one in <ref type="bibr" target="#b2">[3]</ref>, we have Th (.F) = 3g (cf. [1, §16.4]). For the partial order &lt;=, in the model &amp; one has Q £ 1 c |. Therefore {&amp;, s ) is different from (Pw, £ ) and G», s ) s ( J -&lt;=). §4. Conservativity. Using a Prawitz normalization argument it will be shown that extended type assignment is conservative over that of Curry. Then the completeness for the latter theory follows from 3.10.</p><p>First we modify the extended type assignment theory. 4.1. DEFINITION, (i) A large basis is an arbitrary set of statements aM with a e Tand M e A. To emphasize the difference, bases as in 1.1 (i) and 2. l(ii) are called small.</p><p>(ii) Consider the type assignment system of 2.5 and replace rule ( &lt; ) by</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>(to)</head><p>aM M -**p v N oN B \-* aM denotes derivability in the resulting system where we allow B to be large. PROOF. The only thing to show is that ( &lt; ) is a derived rule in the | -* system: if cr &lt; z, then aM \-* zM. This is done by induction on the definition of &lt; using rule (fa).</p><p>EXAMPLE. Let a -• r &lt; a' -» z be a consequence of a' &lt; a and z &lt; %' • Then one has the following deduction: -" REMARK. By Remark 2.10 the converse of 4.2 is also true if B is a small basis. We do not need this result, however. For large bases the modified system is somewhat stronger than the system of §2 with large bases: &lt;p 0 foc.zx \-* y&gt; 0 z, &lt;p 0 Xx.zx [/-&lt;p 0 z . (i) An -+ -cut in D is a statement occurrence pZ in D which is the major premise of (-• E) and is obtained by ( -&gt; I) and immediately followed by k &gt; 0 applications of (fa). The length of this cut is k + 1.</p><p>(ii) An (~1 -cut a n d ' t s length are defined similarly, (iii) The degree of a cut pZ is \p\, the number of symbols in p.</p><p>(iv) The ordinal of D is 0(D) = w \p\ + m, where | p| is the highest degree of a cut in D and m is the sum of the lengths of cuts with degree \p\; 0(D) = 0 if D does not contain a cut.</p><p>(v) D is normal if 0(D) = 0.  (ii) Similarly. • REMARKS, (i) A semantical proof of 4.13(ii) using soundness and the model Pw is also possible.</p><p>(ii) It is easy to show that \-&lt;po -» &lt;p 0 Mo M = ^ Xx.x. Therefore type assignment is a recursively enumerable but not recursive theory (in fact .^-complete).</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>1. 2 .</head><label>2</label><figDesc>DEFINITION. Let Jt = (D, •, [ ] &gt; be a A-model. (i) If f is the valuation of variables of A in D, then IMJf e D is the interpretation of M in Jt via £. Usually we omit the superscript M.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>2. 8 .</head><label>8</label><figDesc>LEMMA, (i) B \-xMN =&gt; 3 &lt;r e T: [5 | -a -&gt; xM and B\-aN]. (ii) Suppose W , xeT [B \J {ax} \-xM =&gt; B (J {ax} \-xN] and x not in B; then Vp e T [B \-p Xx.M =&gt; B \-p Xx.N]. (iii) If x is not in B then B ( -a -» x Xx.MO B U {ax} \-xM. PROOF, (i) By induction on the derivation of xMN. The only interesting case is when the last applied rule is (f)l), i.e. x = x\ fl ^2-Then XjMN x 2 MN x\ fl *2 MN is the last step. By the induction hypothesis there are o\, a^ such that B \-a t •-* x,-M, B f -a,N for / = 1, 2. Then B \-a\ fl &lt;x 2 Wand B \-(ai -&gt; n ) fl (&lt;?z -* x-i)M. It is easy to verify that ( f f i -^i ) n (ff2-*T 2 ) &lt; (ffi n 02) -* (TI n ^)&gt; so we can take a = a\ C\ oz-(ii) Induction on the derivation of plx.M. The only nontrivial case is (-&gt;I). Then the result follows from the assumption. (iii) (&lt;=) By rule (-&gt;T). (=&gt;) We may suppose that x ^ w. Let D: B \-a -* x Xx. M. Let fa -&gt; ViXx.M (1 &lt;, i &lt; n) be all the statements in D on which a -* xlx.M depends and which are conclusions of (-&gt;I): p.i -* VjXx.M The statement a -» xXx.M is derived from the ^u, -&gt; v t Xx.M using only rules (f^)' (f|E) and ( &lt; ) . By 2.7(iii) it follows that . ( ^ -&gt;• vi) fl • • • fl ( ^ -•• v B ) &lt; ff -» r and hence, by Lemma 2.4(H), there are i lt ..., i p such that //,, fl • • • fl fti p 2: ff and v ix fl • • • fl Vi ^ 7. Hence we can construct D': B \J {ax} ( -rM as follows:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>3. 5 .</head><label>5</label><figDesc>THEOREM. (J^, •, [ ]&gt; is a l-model, i.e. (i) M f = £(*); (ii) [MJV]] f = [ M ] r [ A f ] e : (iii) Ux.MJ r d= [ M ] 5 ( l / d ) ; (iv) (VxeFF(M). [x] € = M f , ) =&gt; [M] f = [M] f ,; (v) |Ux.M] f = 1 ^. M[x := &gt;&gt;]]?&gt; //&gt; «of in M; (vi) [ W e J*" lMJf lx/ii = [#]«&lt;,«&gt;] =* U*.M] f = Ux.N];. PROOF, (i) If z e HXJ f , i.e., B ( \-zx, then by 2.7(h) z is in the filter (generated by) £(x). The converse is trivial. (ii) If z e IMNJs, i.e. 5 f h-rMN, then by 2.8(i) 3o-e |[JV] f ^r e [MJ e , i.e. r e [ M ] f • [A^]f. The converse is trivial. (iii) r e i.MJ^( x/d) oB^( x/d) \-zM o B^ \J {ax\a e d} \-zM, where B^ = B $ -{ax\ae£(x)} o f i j l j {ffx} f -rAf for some &lt;7 e rf (use compactness and that d is a filter) o Bf \-a -* z Xx.M for some aed (use 2.8(iii)) oB^\-a -* z hc.M (use 2.9) o &lt; ; -* r 6 [ l x . M ] { for some aed o r e [/U.A/Ifrf. (iv) Trivial by 2.9. (v) Trivial. (vi) Assume the LHS and p e IXx.MJ^. Then p e lXx.NJ ( by 2.8(ii). By symmetry we are done. • 3.6. DEFINITION, (i) f 0 (#&gt;.) = We^ltfV erf}. (ii) Given a basis B, define $Ax)={0eT\B\-ax} (e&amp;).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>3. 7 .</head><label>7</label><figDesc>LEMMA, (i) V&lt;je T [a] ra ={de^\a ed}. (ii) B \-a M &lt;s&gt; B iie) \-a M. (iii) &amp;, £ B , r 0 N B. PROOF, (i) By induction on a. (ii), (iii). Easy. • 3.8. COROLLARY. The following is a derived rule for extended type assignment aM M = S N (EQ.) -"JIT-PROOF. Suppose M =pN and B ( -aM. Then B (iB) ( -aM, hence a e [A/] ?B = [iVJ eB since J^ is a A-model. So J5 I -crN. • 3.9. COROLLARY, (i) a &lt; xoVJt, -r \a\f £ l%\$. (ii) a ~ zoVJt, ir lajf = izjf. PROOF. (i)(=&gt;)3.1(i). («=)Take Jt = &amp;, ~r = *T 0 and note that {p \ a &lt; p} is a filter e [o-]^-0 . (ii) By (i). • 3.10. COMPLETENESS THEOREM. B \-aM o B N aM. PROOF. (=&gt;) 3.1(H). (&lt;=) fi (= ff M =&gt; &amp;, $ B , -r 0 |= aM by 3.7(iii) =&gt; [3/]{ f l e[a]^0 =*&lt;Te[MJ fB by 3.7(i) =&gt; 5 | -&lt;TM by 3.7(H). •</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>4. 2 .</head><label>2</label><figDesc>LEMMA. B \-aM =&gt; B \-* aM.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>4. 3 .</head><label>3</label><figDesc>DEFINITION. Let D: B | -* aM.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>• 4.6. LEMMA Let D:B[-* OM. Then there is a deduction D[x : -L]: B[x : ~ L] \-* aM[x :-L] by replacing all free occurrences of x by L. Moreover D[x :•= L] has the same tree structure and same ordinal as D (e.g. D is normal iff D[x : = L] is normal). -**p commutes with -**^v, see [1, §3.3.]. • 4.8. LEMMA. Let D: B\~* oM have ordinal 0(D) # 0. Then there is an M' and D' with l.Af-^Af', 2.D':B\-*oM', 3. O(D') &lt; 0(D). PROOF. Since 0(D) / 0, there is a cut in D. Let |p| be the highest cut degree in D and consider an innermost cut pZ with this degree (i.e. in the subderivation of this cut there are only cuts of lower degree). If the length of pZ is &gt; 2, then one can perform two consecutive applications of (/fy) at once obtaining a derivation D': B f -* aM with lower ordinal. If the length of pZ is = 2, then D has as subderivation D x or D 2 as in 4.4 with the cut pZ being o\ [\ a 2 M or a -&gt; zXx.M. If pZ is the fl-cut 01 fl o 2 .M, then replace D x by -*&amp;-(|9?) o-Ji and one obtains a derivation D': B \~* oM with lower ordinal (the only possibly created cut has degree l^l &lt; \oi fl o 2 \ -\p\).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>It will be shown that &lt;J% •, [ ] &gt; is a /l-model. In order to do so we apply the method of Hindley and Longo by defining directly [Af] f and show that this satisfies conditions (i)-( v i)</figDesc><table><row><cell cols="2">2.9. LEMMA. If B\-aM, then B f M \-aM, where B \ M = {ax eB\x e</cell></row><row><cell>FV(M)}.</cell><cell></cell></row><row><cell>PROOF. Induction on the derivations.</cell><cell>•</cell></row><row><cell cols="2">2.10. REMARK. If M -**^M' and B \-zM, then B \-zM' (subject reduction</cell></row><row><cell cols="2">theorem). We do not need this fact, however.</cell></row><row><cell>§3. The filter model.</cell><cell></cell></row><row><cell cols="2">3.1. PROPOSITION, (i) a &lt; z =&gt; VM, r lalf £ Izjf.</cell></row><row><cell>(ii) (Soundness). B \-aM = &gt; 5 N aM.</cell><cell></cell></row><row><cell cols="2">PROOF, (i) Induction on the definition of &lt;,.</cell></row><row><cell>(ii) Induction on derivations, using (i).</cell><cell>•</cell></row><row><cell>3.2. DEFINITION, (i) ^ = {d\d is a filter},</cell><cell></cell></row><row><cell>(ii) For d h d 2 s^ define</cell><cell></cell></row><row><cell>di-d</cell><cell></cell></row><row><cell>xM</cell><cell>•</cell></row></table><note><p><p>2 = {z e r | 3 a e d 2 a -* z e d x }.</p>3.3. LEMMA. d lt d 2 e J 5 " =&gt; d^-d 2 e #". PROOF. Easy. • m U\-3.4. DEFINITION, (i) Let £ be a valuation in &lt;F. Then fi f = {ax | a e £(*)}. (ii) For M e A define [Af]] f = {a \B ( \-aM} (e &amp; by 2.7(i)).</p></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>2.4. LEMMA, (i) a -* z ~ co &lt;* z ~ co;</p></note>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>If pZ is the -* -cut a -* x kx.M, then replace D 2 by oN using 4.6 and 4.7. Since PN -+&gt;p L the subjects in part of the rest of D have to be reduced (by (/fy)) in order to match xL. In this way one obtains a derivation D': B\-* aM' with M -**$&gt; M' and 0(D') &lt; 0(D). Duplicated cuts have degree &lt;\p\ (since pZ is innermost); possibly created cuts have degree \a\ or \x\ &lt; \o -* T\ = \p\-Some extra applications of (firj) may be needed in D' but only if xPN is followed by (f)I). But then no cut will be longer.</p><p>If the length of pZ is 1, then the argument is slightly simpler. The extended types allow us to characterize terms having a normal form or head normal form; the proof follows <ref type="bibr" target="#b4">[5]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.12.">LEMMA. Let D: B \-* xM with D normal, x */• CD and xM not obtained by (-» I) or (f) I) immediately followed by k &gt; 0 applications of (/3?y). Then M is of the form xMi • • • M".</head><p>PROOF. Induction on D. The only interesting cases are when the last steps in D are (-» E) or (f) E) followed by k &gt; 0 applications of(^yf). If it is (-+ E) then xM comes from a-*xP, aQ, with a -* xP either an assumption in B (then P is a variable); or the induction hypothesis applies (a -&gt; xP is not obtained by (-&gt; I) since D is normal, nor by (f) I)). The case (f]E) is treated similarly. </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">The lambda calculus, its syntax and semantics</title>
		<author>
			<persName><forename type="first">H</forename><surname>Barendregt</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1981">1981</date>
			<pubPlace>North-Holland, Amsterdam</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Type-assignment in the lambda-calculus; Syntax and semantics</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">B</forename><surname>Ben-Yelles</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1979">1979</date>
		</imprint>
		<respStmt>
			<orgName>University College of Swansea</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Doctoral Thesis</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Functional characterization of some semantic equalities inside ^.-calculus, Automata, languages and programming</title>
		<author>
			<persName><forename type="first">M</forename><surname>Coppo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dezani-Ciancaglini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Salle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">E</forename><surname>Maurer</surname></persName>
		</editor>
		<imprint>
			<biblScope unit="volume">71</biblScope>
			<biblScope unit="page" from="133" to="146" />
			<date type="published" when="1979">1979</date>
			<publisher>Berlin and New York</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Principal type schemes and l-calculus semantics, To H.B. Curry, Essays in combinatory logic, lambda-calculus and formalism</title>
		<author>
			<persName><forename type="first">M</forename><surname>Coppo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dezani-Ciancaglini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Venneri</surname></persName>
		</author>
		<editor>R. Hindley and J.P. Seldin</editor>
		<imprint>
			<date type="published" when="1980">1980</date>
			<publisher>Academic Press</publisher>
			<biblScope unit="page" from="535" to="560" />
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Functional characters of solvable terms</title>
	</analytic>
	<monogr>
		<title level="s">Zeitschrift fur Mathematische Logik und Grundlagen der Mathematik</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="45" to="58" />
			<date type="published" when="1981">1981</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Combinatory logic. I</title>
		<author>
			<persName><forename type="first">H</forename><surname>Curry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Feys</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1958">1958</date>
			<pubPlace>North-Holland, Amsterdam</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Lambda calculus models and extensionality</title>
		<author>
			<persName><forename type="first">R</forename><surname>Hindley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Longo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Zeitschrift fur Mathematische Logik und Grundlagen der Mathematik</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="289" to="310" />
			<date type="published" when="1980">1980</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">The completeness theorem for typing A-terms</title>
		<author>
			<persName><forename type="first">R</forename><surname>Hindley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theoretical Computer Science</title>
		<imprint/>
	</monogr>
	<note>to appear</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<author>
			<persName><forename type="first">M</forename><surname>Dezani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Montanari</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">A semantics for Coppo-Dezani type assignment, International symposium on programming</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting><address><addrLine>Berlin and New York</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1982">1982</date>
			<biblScope unit="volume">137</biblScope>
			<biblScope unit="page" from="212" to="226" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Natural deduction, a proof-theoretical study, Almquist &amp; Wiksell</title>
		<author>
			<persName><forename type="first">D</forename><surname>Prawitz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Scott</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Lectures Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">C</forename><surname>Bohm</surname></persName>
		</editor>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="page">369</biblScope>
			<date type="published" when="1965">1965. 1975. 1980</date>
			<publisher>Springer-Verlag. Berlin and New York</publisher>
			<pubPlace>Stockholm</pubPlace>
		</imprint>
		<respStmt>
			<orgName>University of Oxford</orgName>
		</respStmt>
	</monogr>
	<note>Open problem n° II 4, X-calculus and computer science theory. Lectures on a mathematical theory of computation</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
