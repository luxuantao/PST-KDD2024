<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Towards A Classification Model for Component-Based Software Engineering Research</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Gerald</forename><surname>Kotonya</surname></persName>
							<email>halls1@comp.lancs.ac.uk</email>
							<affiliation key="aff0">
								<orgName type="department">Ian Sommerville and Steve Hall Computing Department</orgName>
								<orgName type="institution">Lancaster University</orgName>
								<address>
									<addrLine>gerald</addrLine>
									<country key="GB">UK</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Towards A Classification Model for Component-Based Software Engineering Research</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">B82DF67222B8F918B5AAC8D63B426C1B</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T16:20+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Accurate and timely information is a key motivator in the widespread adoption of CBSE technology in Europe. Although there are overlaps and informal communications between researchers and adopters of CBSE technology in Europe, there is no systematic mechanism for information interchange between the two. CBSEnet is a European Union initiative to create an Internet-based forum for the exchange of information between researchers and adopters of CBSE. This paper describes a proposed classification model for CBSE research that will form the basis for structuring the CBSEnet knowledge base.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Component-based software engineering is being proposed as a means of improving software quality and reducing development costs. The drive to use components to construct software systems stems from a 'parts' philosophy derived from traditional engineering disciplines that promises instant productivity gains, accelerated time to market and lower development costs. However lack of accurate and timely information is hampering the widespread adoption of CBSE technology in Europe. In the past 3 years the European Union sponsored more than 20 research projects in CBSE under its Information Society Technologies (IST) Programme <ref type="bibr">[25]</ref>. Although there are overlaps and informal communications between research initiatives throughout Europe, there is no systematic mechanism for information interchange between researchers and adopters of CBSE technology. We believe that researchers and potential adopters of CBSE could benefit from a more systematic approach to information interchange. Consequently, CBSEnet is a European Union sponsored initiative, which aims to:</p><p>Create a European-wide forum for the exchange of information between researchers, developers working in the area of CBSE. Suggest how CBSE technologies could improve software engineering processes in different domains.</p><p>Propose future research requirements for the development and deployment of CBSE technologies.</p><p>Central to these aims is the creation of a knowledge base to publish results and research issues on CBSE electronically. The knowledge base is accessible via the Internet and will be structured according to a CBSE classification model, which will in turn, be organised according to issues specific to CBSE. The short-term objective of the classification model is to provide a mechanism for establishing the current state of CBSE. Its long-term objective is to provide a basis for identifying gaps between CBSE problems and existing solutions. This paper focuses mainly on the short-term aims of the classification model; to provide a scheme for classifying CBSE research results.</p><p>The model is expressed in terms of CBSE research results, application domains and CBSE aspects to provide a schema that relates research results to relevant CBSE aspects and software domains (Figure <ref type="figure" target="#fig_0">1</ref>). The prototype is implemented as part of the CBSEnet Web portal and is supported by query and visualisation mechanisms <ref type="bibr">[26]</ref>.</p><p>Six types of research results are identified in the model, comprising conference and journal articles, technical reports, white papers, books and tools. Each research result is identified by bibliographical information, location and optional project. The model relates research results to 8 CBSE aspects comprising concepts, processes, roles, product concerns and business concerns, technology, off-the-shelf components and related development paradigms. These have further been decomposed into more than 50 sub-aspects. We have also identified 16 application domains ranging from avionics to embedded systems through to utilities. The model maps application domains to the relevant CBSE aspects through the problem being researched.</p><p>The rest of the paper is organised as follows: Section 2 defines the CBSE aspects used in the model. Section 3 describes the application domains. Section 4 describes a simple method and an example for using the classification model. Section 5 provides a summary and some concluding thoughts.   A component supports a provided interface if the component contains implementations of all operations defined by that interface. A component needs a required interface if the component requests an interaction defined in that interface and expects some other component to support that interface. A component may be unable to provide an interface if one of its required interfaces is unfulfilled <ref type="bibr" target="#b1">[2]</ref>. (v) Contracts. A contract specifies behavioural composition in terms of participating components, contractual obligations for each participant, invariants, and operations to instantiate the contract. Contracts provide a powerful mechanism for isolating, modifying and combining cohesive units of behaviour to support the reuse and refinement of software components <ref type="bibr" target="#b2">[3]</ref>. (vi) Service. A service is an abstraction of a set of functions that is designed to achieve some logical purpose <ref type="bibr" target="#b22">[23]</ref>. For example a printing service embraces functionalities related to printing.</p><p>A service is represented as a set of access interfaces. A printing service, for example, may be offered through a number of interfaces:</p><p>Printing of text files Management of the printing spool area Installation of a new printing device. (vii) Architecture. Components are designed on a predefined architecture so that they can interoperate with other components and/or frameworks. There are three different views of the architecture: Runtime. This includes frameworks and models that provide runtime services for componentbased systems. Design-time. This includes the applicationspecific view of components, such as functional interfaces and component dependencies.</p><p>Compose-time. This includes all the elements needed to assemble a system from components, including generators and other build-time services; a component framework may provide some of these services <ref type="bibr" target="#b3">[4]</ref>. (viii) Patterns. A design pattern is a way of reusing abstract knowledge about a problem and its solution. It is a description of the problem and the essence of its solution. Patterns can be considered at different levels of abstraction. An architectural pattern expresses a fundamental structural organisation or schema for software components. It provides a set of predefined subsystems, specifies their responsibilities, and includes rules and guidelines for organising the relationships among them. A design pattern provides a scheme for refining the subsystems or components of a software system, or the relationships between them. It describes commonly recurring structure of interacting components that solves a general design problem within a particular context <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b8">9]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">CBSE Processes</head><p>The CBSE process consists of two separate but related processes. The first is concerned with the analysis of application domains and the development of domain-related components (i.e. development for reuse). The second process is concerned with assembling software systems from prefabricated (off-the-shelf) components (development with reuse). The two processes are linked via a component market <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b10">11]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Development for reuse</head><p>The component development process is concerned with developing generic and domain-specific components. To achieve successful software reuse, commonalities of related systems must be discovered and represented in a form that can be exploited in developing similar systems. Domain commonalities are used to develop models or software components that can be used to develop systems in the domain. Once reusable components are created, they can be made available within organisations or on the open market as commercial components.</p><p>For organisations to achieve the benefits of sharing and reusing components a successful reuse strategy must include the following: </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Development with reuse</head><p>Figure <ref type="figure" target="#fig_3">2</ref> shows our suggested component-based application development process. It develops some of the early ideas on component-based development <ref type="bibr" target="#b3">[4]</ref> to provide a scalable process with a clear separation of concerns. The negotiation phase attempts to find an acceptable trade-off amongst multiple (often) competing development attributes. The planning phase sets out a justification, objectives, strategies (methods and resources to achieve development objectives) and tactics (start and end dates, and tasks with duration) for the project.</p><p>The development phase implements the agenda set out in the planning phase. Essential issues to be addressed in phase include: (i) Requirements. The process of eliciting and defining requirements for a component-based system. The process includes requirements elicitation, requirements scoping, requirements modelling and specification. (ii) Designing system architecture. The process of partitioning system requirements (services and constraints) into logical "components" or "subsystems" <ref type="bibr" target="#b21">[22]</ref>. Formal Architecture Description Languages (ADLs) have emerged as an effective mechanism for describing architectural elements and their relationships, and for supporting their refinement through levels of abstraction <ref type="bibr" target="#b20">[21]</ref> (iii) Composition. The process of replacing abstract design components with "concrete" off-the-shelf components. Off-the-shelf software components are packaged in many different forms (e.g. function libraries, frameworks and legacy applications). The composition process must devise mechanisms for integrating the different components without compromising the system quality (i.e. ensuring that the components conform to the adopted component model). The integration process may make use of some "gluing technology", which may be unrelated to the components, to provide an interface between components. (iv) Verification. The verification process is intended to ensure that there is an acceptable match between the software components used to build the system and the system being built. The verification process varies in focus and detail across the development cycle. At the requirements stage, verification is used to establish the availability of software components and viability of a component-based solution. At the design stage verification is concerned with ensuring that the design matches the system context (i.e. in terms of non-functional requirements, architectural concerns and business concerns). This may require detailed blackbox testing of the software components and architectural analysis of the design. At the composition stage verification translates to design validation, through component assembly testing and system testing.</p><p>In summary, component-verification regimes should serve 8 aims <ref type="bibr" target="#b10">[11]</ref>:</p><p>Availability. Establishing the availability of potential off-the-shelf software solutions. Asset management. Providing a framework for managing the acquisition, usage and evolution software components. The inventory of software components, versions, where they reside, and the financial obligations licenses associated with them, are a critical aspect of system management <ref type="bibr" target="#b7">[8]</ref>.</p><p>Evolution. Providing schemes for assessing the cost and difficulty of evolving component-based systems. Software component producers and customer organisations are motivated by different objectives to evolve their software, which makes it difficult for user organisations to anticipate and to plan for change. Successful commercial software components have a wide user base. One of the advantages of this is to spread the cost of the component across many users. However, this also means that for the most part, the evolution of third-party components is influenced by diverse user organisations whose interests may not overlap <ref type="bibr" target="#b1">[2]</ref>.</p><p>Quality control. This involves providing quality control procedure and standards to address the problem of the fault identification, repair, and the tracking of system of fixes. Configuration management. Providing a framework for tracking and controlling the versions of blackbox software components and custom software installed at all locations for the system.</p><p>Market research. The different vendor-customer evolution cycles present a particularly difficult system management problem. Vendor evolution cycles are largely driven by market changes. This process is intended to provide a framework for factoring market research into the process. Market research is essential in anticipating the availability of new commercial hardware and software products, and providing a framework for determining the timescale and kind of changes that will be made to the commercial components that are already in a componentbased system <ref type="bibr" target="#b7">[8]</ref>.</p><p>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">Roles</head><p>The radical departure from the conventional software development process has created new roles and stakeholders. The most significant are the roles of the component developer and application developer. Unlike conventional software development where the two roles occupy the same development process, in CBSE, the component developer and the application developer may operate in separate processes <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b13">14]</ref>. This has created a situation in which the system developer has limited knowledge of the software components used to construct a system, and therefore little control over their functionality and the evolution of the system. Other roles created by CBSE include component brokers, component vendors, system integrators and component certification authorities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6">Business and Product concerns</head><p>Concerns in component-based development range from risks in adopting the technology, to difficulties in establishing the quality of third party software components, through to problems of managing component-based systems <ref type="bibr" target="#b6">[7]</ref>. These concerns may be broadly divided into product and business concerns. Business concerns are associated with the risk of adopting software component technology and events that may result in loss of business through failure to realise business objectives or, in the case of developer organisations, failure to deliver a system on time or within budget. Product concerns are related to the quality of component technologies used to build the system, for example, unreliable components <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b19">20]</ref>. Technology and business risks are not mutually exclusive. Some risks may be related to both the business and technology. It is also important to note that business and product concerns sometimes oppose each other, for example, a business risk might be failure to meet a market window and a possible risk reduction strategy may be faster development using component-based development <ref type="bibr" target="#b12">[13]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.7">TECHNOLOGY</head><p>Technology reflects issues related to component technology standards, tool support, development environments and methods.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.8">OFF-THE-SHELF SOFTWARE COMPONENTS</head><p>This aspect is concerned with issues that affect the procurement and utility of Off-The-Shelf software components including COTS (Commercial-Off-The-Shelf) components. These include documentation, classification, legal, market, repository, component quality (dependability, performance, timeliness, usability, maintainability, etc) and trust issues.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.9">RELATED DEVELOPMENT PARADIGMS</head><p>Describes complimentary and related development paradigms. Of particular interest are relationships between CBSE and service-centric software engineering, model-driven, aspect-oriented and agent-based software development.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Application Domains</head><p>Several taxonomies for application domains have been proposed <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b18">19]</ref>. Perhaps the best known of these are the taxonomies proposed by Digital, IBM and Reifer <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b16">17]</ref>. Digital and IBM have proposed taxonomies that are focused on business information systems. Reifer has proposed a taxonomy that is driven by real-time and scientific applications. However, there is little consistent basis for classification, across the taxonomies and within them. The main reason for this is that many of them contain elements related to both the application (problem area) and the implementation of the solution.</p><p>In Digital's application taxonomy, "capital assets", "physical resources" and "cost accounting" are listed under "accounting". It is not clear whether these represent applications or application areas. Like other taxonomies, Reifer's application taxonomy suffers from the use of inconsistent classification criteria. For example, under data processing, we see "accounting" which is usually regarded as an application domain, followed by "banking and finance", which represents one or more industries. The lack of taxonomic structure suggests that the originators of the taxonomies did recognise this distinction. To address this problem, a number of task groups have been setup under the umbrella of the Object Management Group (OMG) to identify relevant standards, business architectures, research and technologies in various application domains <ref type="bibr" target="#b18">[19]</ref>.</p><p>The application taxonomy used in the CBSE classification model (Table <ref type="table" target="#tab_2">1</ref>) is a combination of the IBM, Reifer and those defined under the OMG task groups. Our taxonomy is intended to act as a starting point for identifying application domains and is by no means definitive. A section of this taxonomy is shown in Table <ref type="table" target="#tab_2">1</ref>. For core CBSE aspects enter , for peripheral aspects enter (Table <ref type="table" target="#tab_3">4</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Domain</head><p>adopters of CBSE technology, there is no systematic mechanism for information interchange between researchers and adopters of CBSE technology. This paper has provided an overview of CBSEnet, a EU sponsored initiative to create a European wide forum for the exchange of information between researchers and adopters of CBSE. We have also described a CBSE classification model, a key component of CBSEnet. The CBSE classification model has a short-term objective of providing a mechanism for establishing the current state of CBSE and a long-term objective of providing a basis for identifying gaps between problems in CBSE and proposed solutions as means for new research. In this paper we have focused largely on the short-term objective. We have proposed a simple but effective solution for classifying CBSE research results based on an integrated framework that relates research results to relevant application domains and specific aspects in CBSE. We have demonstrated using examples from 4 IST projects how the model can be used to classify research results. The solution has been implemented as part of the CBSEnet Web portal and includes extensive visualisation and query facilities. The implementation is being extended to include statistical analysis and a scheme for gap analysis.</p><p>The classification model represents our first pass at defining a scheme for structuring CBSE research results; we believe the model will be refined over the coming months and evolve to address other aspects of CBSE as the technology evolves. We are currently in the using the model to classify research results from 20 IST research projects on CBSE spanning the last 3 years.</p><p>( </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1</head><label>1</label><figDesc>Figure 1 Classification model for CBSE research</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Component</head><label></label><figDesc>Model (CCM) and the Web service model<ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b23">24]</ref>. (iii) Component model implementation. Denotes the dedicated set of executable software elements required to support the execution of components that conform to the model. Model implementations enforce the interaction and composition standards defined by the model and provide run-time management services. (iv) Component interface. Specifies a flow of dependencies from components that implement services to the components that use these services.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>Viability. Establishing the viability of a component-based solution for the application. Discovery. Exposing undocumented features and faults in the software components. Specification verification. Verifying vendor data/specification. Fitness for purpose. Establishing how well the component capabilities fit in with the system needs. Masking. Establishing the extent to which it is possible to mask out unwanted component features. Adequacy. Setting out realistic test adequacy criteria that take into account the resources available and criticality of the component being tested. Early validation. Early component verification and validation to minimise repair delays caused by slow repair-response times. (v) Management. The process of managing assets, system configurations, change, and assuring quality.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 2 -</head><label>2</label><figDesc>Figure 2 Component-based application development process</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>standard Internet protocols. Specifically, a web service is a stack of emerging standards that describe a service-oriented, component based application architecture. (ii) Component model. Defines specific interaction and composition standards for components</head><label></label><figDesc></figDesc><table><row><cell>Research result</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>CBSE aspect</cell></row><row><cell>Identifier: String Authors: String</cell><cell>1..*</cell><cell></cell><cell>associated with</cell><cell cols="2">1..*</cell><cell>Identifier: String Description: String</cell></row><row><cell>Abstract: String</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Location: URL[]</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Project: String</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">associated with</cell><cell>1..*</cell></row><row><cell cols="2">0..*</cell><cell></cell><cell>results in</cell><cell cols="2">1</cell><cell>Problem 1</cell></row><row><cell>1</cell><cell></cell><cell></cell><cell>addresses</cell><cell cols="2">1..*</cell><cell>Identifier: String</cell></row><row><cell cols="2">1..*</cell><cell></cell><cell>identifies</cell><cell>*</cell><cell></cell><cell>Description: String Contribution: String</cell></row><row><cell cols="2">1..*</cell><cell>1..*</cell><cell>domain Application</cell><cell>1..*</cell><cell>*</cell><cell>Research_problem: Boolean</cell></row><row><cell></cell><cell cols="2">associated with</cell><cell>Identifier: String</cell><cell>generates</cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell>Description: String</cell><cell></cell><cell></cell><cell>Short-term objective</cell></row><row><cell></cell><cell></cell><cell></cell><cell>Gap analysis</cell><cell></cell><cell></cell><cell>Long-term objective</cell></row><row><cell cols="7">1. Assess nature of problem (i.e. fundamental or engineering)</cell></row><row><cell cols="5">2. Assess potential contribution to CBSE understanding</cell><cell></cell></row><row><cell cols="4">3. Assess difficulty (feasibility)</cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>A</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">controller component governs the time sequence of</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">other events. A top-level control module and a</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">scheduler are examples of controller components</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">[22]. A Web service is a reusable software</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">component that semantically encapsulates discrete</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">functionality</cell><cell>and</cell><cell>is</cell><cell>distributed</cell><cell>and</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">programmatically accessible over [2]. A</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">component may have an explicit context</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">dependency on the operating system or some other</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">software component. An interaction standard</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">specifies the type of explicit context dependencies a</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">component may have. Interface standards are the</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">mandatory requirements employed and enforced to</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">enable software components directly interact with</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">other software components. An interface standard</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">declares what can comprise an interface. A</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">component has two basic interfaces: a required and</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">a provided interface. Composition standards define</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">how the components can be composed to create a</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">larger structure and how a producer can substitute</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">one component to replace another that already</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">exists within the structure. Examples of component</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">models include EJB, COM+ (.NET) CORBA</cell></row></table><note><p>table. A manager component contains a state and a number of associated operations. When invoked, these operations use or update the state, and this state is retained between successive invocations of the manager's operations. Abstract data types and servers are examples of manager components. Proceedings of the 29th EUROMICRO Conference "New Waves in System Architecture" (EUROMICRO'03) 1089-6503/03 $17.00 © 2003 IEEE</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 1 Application domains 4 Using the classification model</head><label>1</label><figDesc></figDesc><table><row><cell></cell><cell>Application</cell><cell></cell></row><row><cell>Avionics</cell><cell>Air traffic control</cell><cell></cell></row><row><cell></cell><cell>Electronic warfare</cell><cell></cell></row><row><cell>Command and Control</cell><cell>Space</cell><cell></cell></row><row><cell></cell><cell>Satellite</cell><cell></cell></row><row><cell></cell><cell>Other</cell><cell></cell></row><row><cell>Embedded systems</cell><cell>Operating systems</cell><cell></cell></row><row><cell></cell><cell>I/O controllers</cell><cell></cell></row><row><cell></cell><cell>ASIC</cell><cell></cell></row><row><cell></cell><cell>Other</cell><cell></cell></row><row><cell>Electronic commerce</cell><cell>Agents</cell><cell></cell></row><row><cell></cell><cell>Brokerage</cell><cell></cell></row><row><cell></cell><cell>Electronic Data Interchange</cell><cell></cell></row><row><cell>Finance</cell><cell>Accounting</cell><cell></cell></row><row><cell></cell><cell>Banking</cell><cell></cell></row><row><cell></cell><cell>Insurance</cell><cell></cell></row><row><cell>Healthcare</cell><cell>Emergency care</cell><cell></cell></row><row><cell></cell><cell>Home care</cell><cell></cell></row><row><cell></cell><cell>Primary care</cell><cell></cell></row><row><cell>Real-time</cell><cell>Controllers</cell><cell></cell></row><row><cell></cell><cell>Sensors</cell><cell></cell></row><row><cell></cell><cell>Signal processors</cell><cell></cell></row><row><cell>Simulation</cell><cell>Environmental simulators</cell><cell></cell></row><row><cell></cell><cell>War-gaming</cell><cell></cell></row><row><cell>Telecommunications</cell><cell>Network management</cell><cell></cell></row><row><cell></cell><cell>Network engineering</cell><cell></cell></row><row><cell>Utilities</cell><cell cols="2">Transmission, distribution, marketing and</cell></row><row><cell></cell><cell cols="2">retailing functions of electric, water and gas</cell></row><row><cell></cell><cell>utilities.</cell><cell></cell></row><row><cell></cell><cell>The approach works as follows:</cell><cell></cell></row><row><cell></cell><cell cols="2">1. Identify the research item and its type (e.g. book,</cell></row><row><cell>This section illustrates how the CBSE classification</cell><cell cols="2">conference/workshop article, journal article,</cell></row><row><cell>model works in practice. The example uses three tables</cell><cell cols="2">technical report, white paper, or tool) -Table 2.</cell></row><row><cell>to relate research result, application domain and CBSE</cell><cell cols="2">2. Identify and rank the application domains</cell></row><row><cell>aspects. The tables have been simplified to model only</cell><cell cols="2">associated with the research result in (1). For core</cell></row><row><cell>limited attributes in each case. A simplified example</cell><cell>application domains enter</cell><cell>, for peripheral</cell></row><row><cell>using research results from 4 EU sponsored IST projects</cell><cell cols="2">application domains enter . A research result</cell></row><row><cell>on CBSE is used to illustrate the model. Because of</cell><cell cols="2">associated with the general category should not</cell></row><row><cell>space limitations we can only show a few details,</cell><cell cols="2">appear in another category (Table 3).</cell></row><row><cell>however, more examples can be found in CBSEnet</cell><cell cols="2">3. Identify and rank the CBSE aspects addressed by or</cell></row><row><cell>portal [25].</cell><cell cols="2">closely associated with the research result in (1).</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 4</head><label>4</label><figDesc>3) Identifying and ranking CBSE aspects associated with the research results (We are unable to show all the aspects here due to lack of space) Mapping ranked research results to relevant CBSE aspects</figDesc><table><row><cell></cell><cell></cell><cell></cell><cell cols="4">Research result</cell></row><row><cell></cell><cell></cell><cell>CADL</cell><cell>Designer</cell><cell>CORex</cell><cell>PECOS</cell><cell>OOSPICE</cell><cell>BIT</cell></row><row><cell></cell><cell></cell><cell>Architecture</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>Component</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>Concepts</cell><cell>Component model Component model implementation Contracts Interface</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>Service</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>Patterns</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>Requirements</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>Design</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>Process</cell><cell>Composition Management Verification</cell><cell></cell><cell></cell><cell></cell></row><row><cell>CBSE Aspect</cell><cell>Roles</cell><cell>Procurement Deployment Broker Designer Developer Integrator</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>Maintainer</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>Business</cell><cell>Adoption Cost Risk Scalability</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>Adaptability</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>Availability</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>Product</cell><cell>Compositionality Efficiency Interoperability</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>Reliability</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>Security</cell><cell></cell><cell></cell><cell></cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>Proceedings of the 29th EUROMICRO Conference "New Waves in System Architecture" (EUROMICRO'03) 1089-6503/03 $17.00 © 2003 IEEE</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENT</head><p>The work described here has been carried out under the EU IST Programme 2001-35485, Component-Based Software Engineering Network. We would like to acknowledge the contributions of our partners: Ingegneria Informatica S.p.A, Athens Technology Center S.A, ESI, SINTEF, and MTA SZTAKI.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"> <ref type="bibr" target="#b0">(1)</ref> <p>Identifying the research result item and its type </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Summary and conclusion</head><p>Lack of timely and accurate information is hampering the widespread adoption of CBSE technology in Europe. In the last 3 years the EU under its IST programme has sponsored more than 20 research projects covering many aspects of CBSE. However, despite overlaps of interest between researchers and</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Contemporary application domain taxonomies</title>
		<author>
			<persName><forename type="first">R</forename><surname>Glass</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Vessey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="63" to="76" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">T</forename><surname>Heinman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">T</forename><surname>Council</surname></persName>
		</author>
		<title level="m">Componentbased Software Engineering: Putting the pieces together</title>
		<imprint>
			<publisher>Addison-Wesley</publisher>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<author>
			<persName><forename type="first">D'</forename><surname>Souza</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">F</forename><surname>Wills</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">C</forename></persName>
		</author>
		<title level="m">Objects, Components, and Frameworks With UML: The Catalysis Approach</title>
		<imprint>
			<publisher>Addison-Wesley</publisher>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The current state of CBSE</title>
		<author>
			<persName><forename type="first">A</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">C</forename><surname>Wallnau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">5</biblScope>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<author>
			<persName><forename type="first">L</forename><surname>Coker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Hayes-Roth</surname></persName>
		</author>
		<title level="m">Services first, components second!&quot;, OMG-DARPA Workshop on Compositional Software Architectures</title>
		<imprint>
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">COTS-Based System Development: Processes and Problems</title>
		<author>
			<persName><forename type="first">G</forename><surname>Kotonya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hutchinson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Onyino</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Sawyer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of 4 th International Information Society Conference: Development and Reengineering of Information Systems</title>
		<meeting>of 4 th International Information Society Conference: Development and Reengineering of Information Systems<address><addrLine>Ljubljana, Slovenia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-10">Oct. 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The challenges of using COTS software in component-based development</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Voas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page">44</biblScope>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">R</forename><surname>Vigder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M</forename><surname>Gentleman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Dean</surname></persName>
		</author>
		<title level="m">COTS Software Integration: State of the Art</title>
		<imprint>
			<date type="published" when="1996">1996</date>
		</imprint>
		<respStmt>
			<orgName>Institute for Information Technology, National Research Council, Canada</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">E</forename><surname>Johnson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Frameworks = (Components + Patterns)</title>
		<imprint>
			<date type="published" when="1997">1997</date>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="page" from="39" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Disposable information systems: The future of software maintenance?</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Voas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal Of Software Maintenance-Research And Practice</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="143" to="150" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">An Approach to Analysing and Testing Componentbased Systems</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Harrold</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sinha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Workshop on Testing Distributed Component-based Systems, ICSE&apos;99</title>
		<meeting><address><addrLine>Los Angeles, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-05">May 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">PORE: Procurement-oriented requirements engineering method for the component-based systems engineering development paradigm</title>
		<author>
			<persName><forename type="first">C</forename><surname>Ncube</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">A M</forename><surname>Maiden</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE International Workshop on Component-Based Software Engineering</title>
		<meeting>IEEE International Workshop on Component-Based Software Engineering<address><addrLine>Los Angeles, California, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-05">May 1999</date>
			<biblScope unit="page" from="1" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A strategy for managing risk in component-based systems</title>
		<author>
			<persName><forename type="first">G</forename><surname>Kotonya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Rashid</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE 26 th Euromicro Conference</title>
		<meeting>IEEE 26 th Euromicro Conference<address><addrLine>Warsaw, Poland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-09">September 2001</date>
			<biblScope unit="page" from="12" to="21" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Componentbased software engineering</title>
		<author>
			<persName><forename type="first">W</forename><surname>Kozaczynski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Booch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page">34</biblScope>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<author>
			<persName><surname>Ibm Corp</surname></persName>
		</author>
		<title level="m">Industry applications and Abstracts</title>
		<meeting><address><addrLine>White Plains, N.Y.</addrLine></address></meeting>
		<imprint>
			<publisher>IBM Corp</publisher>
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Productivity and Quality Survey</title>
		<author>
			<persName><forename type="first">Reifer</forename><surname>Consultants</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990">1990</date>
			<pubPlace>El Segundo, California</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<author>
			<persName><surname>Afips</surname></persName>
		</author>
		<title level="m">Taxonomy of Computer Science Engineering</title>
		<meeting><address><addrLine>Arlington, Va</addrLine></address></meeting>
		<imprint>
			<publisher>American Federation of Information Processing Societies</publisher>
			<date type="published" when="1980">1980</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">OMG in Motion</title>
		<author>
			<persName><surname>Omg</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000-07">July 2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
	</analytic>
	<monogr>
		<title level="m">ISO/IEC Standards 9126 (Information Technology) -Software Product Evaluation-Quality Characteristics and Guidelines for their use, 1991) and 14598 (Information Technology -Software Product Evaluation: Part I</title>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="volume">4</biblScope>
		</imprint>
	</monogr>
	<note>Process for Acquirers</note>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<idno>IEEE Std. 1061-1992</idno>
		<title level="m">IEEE Standard for Software Quality Metrics Methodology</title>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Press</publisher>
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">A Classication and comparison Framework for Software Architecture Description Languages</title>
		<author>
			<persName><forename type="first">N</forename><surname>Medvidovic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">N</forename><surname>Taylor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Trans. IEEE Software Eng</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="70" to="93" />
			<date type="published" when="2000-01">January 2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Software engineering</title>
		<author>
			<persName><forename type="first">I</forename><surname>Sommerville</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001">2001</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Component-based system development lecture</title>
		<author>
			<persName><forename type="first">T</forename><surname>Saridakis</surname></persName>
		</author>
		<ptr target="http://www.cs.hut.fi/~saridaki/pdf/CBD-LectureNo5.pdf" />
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Introduction to Web Services Architecture</title>
		<author>
			<persName><forename type="first">K</forename><surname>Gottschalk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Graham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Kreger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Snell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM Systems Journal</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
