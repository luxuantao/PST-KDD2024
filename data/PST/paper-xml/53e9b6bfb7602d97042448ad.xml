<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Enhancing Visual Analysis of Network Traffic Using a Knowledge Representation</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Ling</forename><surname>Xiao</surname></persName>
							<email>lingxiao@cs.stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">Stanford University</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">John</forename><surname>Gerth</surname></persName>
							<email>gerth@cs.stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">Stanford University</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Pat</forename><surname>Hanrahan</surname></persName>
							<email>hanrahan@cs.stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">Stanford University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Enhancing Visual Analysis of Network Traffic Using a Knowledge Representation</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">E49598CD9F775ECF03853F6175CB4DB4</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T14:59+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.6.9 [Visualization] information visualization</term>
					<term>H.5.0 [Information Interfaces and Presentation] general network traffic visualization</term>
					<term>visual analysis</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper presents a network traffic analysis system that couples visual analysis with a declarative knowledge representation. The system supports multiple iterations of the sense-making loop of analytic reasoning by allowing users to save discoveries as they are found and to reuse them in future iterations. We will show how the knowledge representation can be used to improve both the visual representations and the basic analytical tasks of filtering and changing level of detail. We will describe how the system can be used to produce models of network patterns, and show results from classifying one day of network traffic in our laboratory.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>INTRODUCTION</head><p>The last decade has seen a rapid growth in both the volume and variety of network traffic, while at the same time it is becoming ever more important for analysts to understand network behaviors to provide quality of service, security, and misuse monitoring. To aid analysts in these tasks, researchers are seeking better visual analysis techniques for network traffic.</p><p>The sense-making loop of information visualization is critical for analysis <ref type="bibr" target="#b5">[6]</ref>. The loop involves a repeated sequence of hypothesis, experiment, and discovery. However, current visual analysis systems for network traffic do not support sense-making well because they provide no means for analysts to save their discoveries and build upon them. As such, it becomes the analyst's burden to remember and reason about the multitude of patterns observed during visual analysis, which quickly becomes impossible in the large datasets typical of network traffic.</p><p>In this paper we present a network traffic visualization system that enables previous visual discoveries to be used in analysis. The system accomplishes this by allowing the analyst to interactively create models of observed patterns, which are stored in a reusable knowledge base. The reuse of knowledge creates the analytical cycle as summarized in Figure <ref type="figure" target="#fig_0">1</ref>. In addition to facilitating the sense-making loop, knowledge representations can afford more insightful visualizations that the analyst can use to discover more complex and subtle patterns.</p><p>To illustrate its effectiveness, we will present the results of using our system to analyze a day of network traffic from our laboratory. This paper will be structured as follows: Section 2 will provide an overview of the analysis process supported by the system; Section 3 will give a sampling of related work in this area; Section 4 will describe the system's knowledge representation; Section 5 will explain the interactive model creation process; Section 6 will present a pilot study which used the system to analyze one day of network traffic in our laboratory; Section 7 will discuss the shortcomings of the current implementation; and Section 8 will conclude the paper and provide future research directions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">SYSTEM OVERVIEW</head><p>The system supports the analysis cycle outlined in Figure <ref type="figure" target="#fig_0">1</ref>. In explaining the system, we will use the following terms: a pattern refers to an ordered sequence of events that can be described by a model in a declarative language; thus, a model is a general description of a pattern; and a clause is a logical sentence realizing a model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Stage 1 -Discover Pattern:</head><p>The analyst uses the visualization to discover patterns in the data. For example, in a temporal visualization of HTTP connections, the analyst might see a sequence of connections bunched together in time and infer that this represents the load of a web page, since a web page often makes additional connections as it loads the URLs for images, ads, etc.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Stage 2 -Construct Model:</head><p>Once a pattern is discovered, the analyst constructs a model for the pattern. To capture the pattern exhibited by a web page load, the analyst selects one horizontal sequence of marks from the visualization. The system then identifies predefined predicates that are true for the selected events. In this example the following predicates are identified: "from same IP", "to same IP", "temporal locality", "source port locality", "destination port HTTP".</p><p>The analyst then engages in an interactive loop to create a clause describing the pattern from the identified predicates: </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Stage 2.1 -Construction:</head><p>The analyst constructs a candidate model of the pattern. In the web page example, the analyst may choose the single predicate "to same IP", after which the system updates the visualization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Stage 2.2 -Evaluation:</head><p>The analyst evaluates the candidate model and refines it if needed. Here the analyst may see that the clause "to same IP" is too broad and needs to be further qualified, so he incrementally conjuncts other predicates such as "temporal locality", "from same IP" and "source port locality".</p><p>The analyst continues iterations of Construction and Evaluation until he converges on an accurate description of the pattern.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Stage 3 -Update Knowledge Base:</head><p>The analyst commits the clause produced in Stage 2 into the knowledge base by giving the pattern a name, e.g. WebPageLoad. The system then labels all instances of the pattern in the data, and produces abstract events representing instances of the pattern. The analyst can then use the labels and abstract events in subsequent visual analysis. Thus, in each iteration of the analysis cycle the system incrementally incorporates the analyst's discoveries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">RELATED WORK</head><p>Visualizations of internet network traffic patterns have existed for over a decade <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b16">17]</ref>. Early visualizations were aimed at understanding overall network loads and topology. These have evolved into tools for monitoring quality of service at the scale of the major network trunks <ref type="bibr" target="#b11">[12]</ref>. More recently a variety of visualizations have been developed in both the research <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b9">10]</ref> and commercial worlds <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b17">18]</ref> to help analysts understand traffic at different scales ranging from the corporate intranet down to individual machines.</p><p>To produce classification models that correspond to analysts' domain knowledge, researchers have also proposed visual data mining systems. PBC <ref type="bibr" target="#b0">[1]</ref> and PaintingClass <ref type="bibr" target="#b20">[21]</ref> both allow the analyst to use interactive visualization to produce decision trees.</p><p>The declarative language of our system is based on event patterns, which we model using clauses in first order logic <ref type="bibr" target="#b6">[7]</ref>. There are numerous event pattern languages such as GEM <ref type="bibr" target="#b14">[15]</ref>, RAPIDE <ref type="bibr" target="#b13">[14]</ref>, and SEL <ref type="bibr" target="#b22">[23]</ref>.</p><p>Our event structure is very similar to that found in Complex Event Processing <ref type="bibr" target="#b13">[14]</ref>, which uses the RAPIDE event pattern language to describe patterns based on events organized in a Concept Abstraction Hierarchy. This abstraction process creates a hierarchical organization of events that summarizes and correlates lower level events with more abstract higher level events for multiple levels of detail. CEP has been used for event correlation on network event streams to facilitate analysis, reduce false alarms, and detect coordinated attacks.</p><p>As a whole, our work is most closely related to that found in NVisionIP <ref type="bibr" target="#b21">[22]</ref> which has recently added monitoring of user actions <ref type="bibr" target="#b12">[13]</ref>. In NVisionIP the analyst's selection actions are recorded as a pattern tree using a rule set based on the well-known Berkeley Packet Filter language <ref type="bibr" target="#b15">[16]</ref>. These patterns may be saved in a file and subsequently applied to other network datasets, thereby permitting the analyst to capture the value of a particular set of filtering operations as reusable knowledge. We expand the notion of reuse by using a knowledge representation that goes beyond flow attributes, and is extended as the analyst leverages the knowledge base to perform visual analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">KNOWLEDGE REPRESENTATION</head><p>In this section we will describe the type of network traffic that the system analyzes and the knowledge representation used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Data</head><p>The system is designed for the analysis of network flow data. Flow data is increasingly used in network analysis because it does not contain packet payloads and is therefore more scalable. Moreover, flow data also avoids many of the social and legal issues associated with packet content recording and is more robust in the face of encryption <ref type="bibr" target="#b10">[11]</ref>.</p><p>In our system we collect flows produced by the open source Argus <ref type="bibr" target="#b2">[3]</ref> sensor; storing them with anonymized IP addresses in a relational database where the rows are events and the columns are fields. The fields of a flow table are shown in Table <ref type="table" target="#tab_0">1</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Pattern Language</head><p>The system uses a declarative event pattern language (EPL) based on first-order logic. First-order logic is a well-studied knowledge representation that is both amenable to automated reasoning, and relatively easy for analysts to understand <ref type="bibr" target="#b8">[9]</ref>. Patterns are described using clauses composed of logical connectives and predicates. For example, the following clause describes a special case of the web page load pattern involving only two flows.</p><p>SimpleWebPageLoad(x,y) = identical_source_IP(x,y) AND identical_destination_IP(x,y) AND time_within_2_seconds(x,y) AND ( destination_port_80(x) AND destination_port_80(y))</p><p>Free variables represent network events. The clause above describes two flows from the same IP, to the same IP, within 2 seconds of each other, and both to port 80 (associated with HTTP traffic). In first-order logic, predicates cannot take parameters as arguments; therefore it is necessary to create separate predicates for each parameter value. While tedious, we have found that most parameters we desire require only a few values.</p><p>We distinguish four types of predicates. Unary predicates have only one argument; n-ary predicates have multiple arguments, but the number of arguments is fixed (currently limited to 5); sequential predicates accept a partially ordered set of events as arguments; and group predicates accept an unordered set of events as arguments.</p><p>Sequential and group predicates describe patterns composed of repetitive sequences of events with no pre-determined length. This type of pattern is very common in network traffic due to the structure of protocols. Using sequential and group predicates, we can generalize the clause above for SimpleWebPageLoad as: To model network traffic, the system is initialized with a set of predicates, such as those shown in Table <ref type="table" target="#tab_0">1</ref>. The predicates describe a variety of traffic characteristics: some about the source or destination, the type of connection, the characteristics of the traffic, temporal relations and trends, variability etc. Others are provided for efficiency. The system also provides an interface for analysts to add their own predicates.</p><formula xml:id="formula_0">WebPageLoad(x1,x2,…) = identical_source_IP(x1,</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.3</head><p>Update Knowledge Base To update the knowledge base with a pattern, the system searches for instances of the pattern in the data, which are true groundings of the pattern's clause.</p><p>To search for true groundings of a clause, we first convert the clause into a disjunction of conjunctions, and then ground each conjunction independently. We use one of two strategies to ground a conjunction depending on the type of predicates in the conjunction. We do not currently handle conjunctions involving n-ary with sequential or group predicates; and conjunctions involving only unary and group predicates.</p><p>For conjunctions of unary and n-ary predicates, we convert the clause into a SQL query that returns a superset of the true groundings. We then evaluate the clause on each of the returned groundings to determine its truth value.</p><p>Each sequential predicate is defined with an ordering function. For example, a temporal predicate would have a time based ordering. To ground a conjunction involving sequential predicates, we compute an ordering of the events from the sequential predicates' order functions, such that true groundings of the clause are a run. We then perform a scan through the ordered events for runs, and evaluate the clause on each run. For efficiency, we do not consider subsequences of runs.</p><p>For each pattern instance found, the system associates the name of the pattern with the constituent events of the pattern instance.</p><p>The system will then create a higher level event representing each pattern instance in a new event table. For example, if the sets of flows {a,b,c} and {d,e} both satisfied the WebPageLoad clause, we will create a higher level event abc that corresponds to {a,b,c}, and another event de that corresponds to {d,e}. Intuitively the event abc represents the web access event that caused the flows {a,b,c} to be observed, and similarly for {d,e}. The most primitive events are the Argus flows themselves.</p><p>The attributes of higher level events are computed from their constituent lower level events. The names of attributes are semantically unique in the system. For example, the "first time" of a higher level event is the earliest "first time" of its constituent events, and therefore is semantically equivalent. Predicates are defined in terms of attributes, and are applicable to event types that have the required attributes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">MODEL CREATION</head><p>Once a visual pattern is discovered, the analyst constructs a model by selecting the pattern directly on the visualization, and then exploring the model space by iteratively constructing and evaluating candidate clauses; eventually converging to a clause that he believes captures the pattern.</p><p>In this section, we demonstrate this approach by extending the event hierarchy we started with WebPageLoad events in Section 2 to encompass web crawls made by search engines.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5.1</head><p>Selecting Patterns To discover patterns, the analysts may employ a variety of visualizations, including scatter plots, Gantt charts, and parallel plots. Due to the strong temporal nature of network event analysis, we have found that event diagrams are especially useful. An event diagram is a plot that maps time on the X-axis and a dimension or measure on the Y-axis using a circular mark for each event.</p><p>Once a pattern is found, the analyst selects an instance of the pattern by directly indicating the set of marks on the visualization with a mouse, either individually or by capturing groups in boxes.</p><p>In the web crawl scenario, an analyst might be looking at an event diagram showing WebPageLoad events to local IP's (on the Y-axis). The analyst observes that there are numerous horizontal strings of events, corresponding to rapid bursts of WebPageLoad events, each of which might be an example of a web crawl. He selects one string of events as shown below.   Identifying Predicates After selecting the pattern, the analyst is shown (1) a list of predicates that describe the pattern along with (2) the details of the selected events (see Figure <ref type="figure" target="#fig_2">2</ref>)</p><p>To identify predicates that describe the pattern, each predicate in the knowledge base is tested on the selected events. Different strategies are used depending on predicate type.</p><p>The system returns a unary predicate if it is satisfied by over 90% of the selected events.</p><p>The system returns an n-ary, sequential, or group predicate if it can be satisfied by the selected events. The truth value of predicates with multiple arguments depends on the assignment order of events to arguments. Therefore, to determine if a predicate can be satisfied by a set of events, we would need to evaluate the predicate on all permutations of the events. To reduce computation cost and maintain interactive response time, the system imposes constraints for identifying n-ary, sequential and group predicates.</p><p>To test an n-ary predicate, all possible permutations of the events are evaluated; however, at most 120 permutations are required, since the number of arguments for n-ary predicates is limited to 5.</p><p>To test a sequential predicate, we sort the events using the predicate's order function, and evaluate the predicate on the ordered events.</p><p>To test a group predicate, whose truth value is independent of the arguments' assignment order, only one evaluation is needed.</p><p>In the web crawl scenario, the identified predicates include: destination_port_80, destination_Stanford, identical_source_AS_number, time_sequence_30s, time_sequence_60s, more_than_4_events, more_than_32_events</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Creating a Clause</head><p>To create a clause describing the pattern, the analyst interactively constructs and evaluates candidate clauses, which are currently limited to conjunctions. To generate a candidate conjunction, the analyst selects a combination of identified predicates using the interface shown in Figure <ref type="figure" target="#fig_2">2</ref>. The system then updates the visualization to display groups of events that satisfy the current clause. The analyst uses the visualization to evaluate the clause, and decide what, if any, refinement is required. The process of refinement and visual evaluation is repeated until the analyst converges on a satisfactory model of the pattern.</p><p>This interactive process is inspired by dynamic queries, which allow users to explore the query space by manipulating the query parameters with widgets that correspond to the schema of the query in a tightly coupled manner. The tight coupling provides value in a number of ways: consistent affordances; rapid, incremental, and reversible interactions; continuous display of the information space; progressive refinements; and others <ref type="bibr" target="#b19">[20]</ref>.</p><p>In our system, the model space consists of all conjunctions that can be formed from the identified predicates. The interface allows users to add and remove predicates from the candidate clause through selection and de-selection. Each change is incremental and reversible, and every change to the candidate clause is reflected on the visualization canvas.</p><p>In the web crawl scenario, the analyst knows that a web crawl accesses numerous pages possibly from multiple web servers in quick succession. Therefore, he selects the predicates "time sequence 60 seconds" and "more than 4 events". The groups of events satisfying the conjunction are shown below, where each group is a uniform color surrounded by a bounding box.</p><p>Unfortunately, this simple conjunction is satisfied by several spurious event groups. In particular, the purple rectangle has captured multiple bursts that are more likely to be two web crawls, and the small boxes on the right are such short sequences of WebPageLoad events that they are more likely due to human navigation. Therefore, the analyst refines the clause by selecting "more than 32 events" and "time sequence 30 seconds".</p><p>Since this conjunction is more restrictive, only two groups of events satisfy the clause, as shown below where each box encloses a rapid and lengthy sequence of WebPageLoad events characteristic of a web crawl. Note that a web crawl may involve several web servers (circles at different Y values). This is because web pages frequently reference pages from other web servers.</p><p>Once the analyst has converged on a clause that describes the pattern, he names the pattern, and commits the clause to the knowledge base. In the web crawl scenario, the final clause is: The predicate "identical source AS number" generalizes the pattern to other source ASN's of HTTP requests beside Google.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5.4</head><p>Updating the Knowledge Base Once the analyst creates a model, the system updates the knowledge base as described in Section 4.3. The Gantt chart below shows the clause capturing web crawls from Google (ASN 15169) and Inktomi (ASN 14776).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">PILOT STUDY</head><p>To investigate the effectiveness of enhancing visual analysis using a knowledge representation, we conducted a pilot study using real network traffic. The goal of the pilot study was to visually identify network event patterns and produce pattern models that can be used to classify traffic. We were interested in the accuracy of the resulting classification and the overall usability of the system for this task.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Input Data</head><p>The data for the study consisted of all network flows in our laboratory over a 24 hour workday. We chose this sample to have a variety of network behaviors with different machines and a time span that is familiar but interesting for an analyst. Some summary statistics for the dataset are shown in Table <ref type="table" target="#tab_3">3</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6.2</head><p>Traffic Classification Before we started the pilot study, we discussed the types of network behaviors that are likely to be observed with our network staff. Based on their input, we defined an initial set of a hundred predicates that captured the characteristics of those behaviors (a subset was shown earlier in Table <ref type="table" target="#tab_1">2</ref>).</p><p>Using these predicates and the interactive analysis cycle of Figure <ref type="figure" target="#fig_0">1</ref>, we produced the 21 models listed in Table <ref type="table" target="#tab_4">4</ref>. These models were able to classify approximately 80% of the flows in the sample dataset. Most of the models were simple conjunctions, two of which are shown here: We found that the process of interactive analysis stimulated the analyst to recall additional facts about network behaviors from their visual context. For example, while modeling the SSH login pattern, the analyst would create a candidate clause, see some residual traffic, perhaps an NFS auto-mount, and then realize that it too should be part of the login. We believe many of the models could not easily have been produced without an interactive analysis system.</p><formula xml:id="formula_1">FastScan(x1,x2,…) = identical_src_ip<label>(x1,x2,…) AND dest_ip_in_sequence(x1,x2,…) AND more_than_50_events(x1,x2,…) AND high_dest_ip_access_rate(x1,x2,…) AND (is_tcp(x1)</label></formula><p>To quantify the accuracy of the classification precisely, we would require an independent way of classifying the traffic on our network, which we did not have. Instead, we performed extensive visual inspection on the classified traffic, and hand-verified patterns by examining the raw data they were derived from.</p><p>The errors in our classification can be divided into the following three categories, of which the first contained the majority of cases:</p><p>1. The underlying data for the flows was faulty. This is caused by the sensor dropping data during overloaded sessions; and Argus occasionally confusing the orientation of the flows. 2. Some traffic was misclassified by errors in our models. We were often able to correct these mistakes by refining the models. 3. Some traffic could not be classified because our EPL was insufficiently expressive to describe their characteristics.</p><p>The knowledge produced is evidence that analysts can use the system to identify network behaviors and produce accurate models of the patterns exhibited by these behaviors.   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Property</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6.3</head><p>Visual Analytics During the pilot study, we identified network event patterns using visual analytic techniques that benefited from the knowledge representation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6.3.1</head><p>Changing Level of Detail by Abstraction We found that a better understanding of network behavior can be gained by focusing on high-level events instead of raw flow events. We believe this is because high-level events have less detail and reduce the complexity and noise characteristic of the voluminous low level events.</p><p>As an example of how higher-level events reveal larger patterns in the data, consider the structure of scan traffic. Figure <ref type="figure">4</ref> shows the bytes transferred for individual flows, while Figure <ref type="figure">5</ref> shows the aggregated traffic for each individual fast or slow scan. There are many fewer scan events than flow events, reducing the complexity of the display, and making the characteristics of each scan type more evident: slow scans tend to have more extreme ratios of source to destination bytes than fast scans; and fast scans tend to send and receive less data than slow scans.</p><p>To quantify the reduction in complexity, we calculated how many flow events are collapsed into each high level event by traffic type, as shown in Table <ref type="table" target="#tab_5">5</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6.3.2</head><p>Semantic Filtering We were able to form semantically meaningful filters using the model labels. To illustrate, consider these sample iterations of the analysis cycle. After each iteration, we removed newly-classified traffic to yield residuals for further analysis.</p><p>Let us assume that we are currently examining the event diagram of Figure <ref type="figure">6(a)</ref>. Using the model creation process, we produce models of the patterns shown in Figure <ref type="figure">6</ref>(b), which represent mail traffic. We then compute the residual by filtering out traffic with label "mail" from Figure <ref type="figure">6</ref>(a) to yield Figure <ref type="figure">6(c)</ref>, in which we can observe and model the patterns shown in Figure <ref type="figure">6</ref>(d) -which are scans. Then in turn, we compute the residual by filtering out traffic with label "scan" from Figure <ref type="figure">6</ref>(c), to produce Figure <ref type="figure">6(d)</ref>. This process can continue until we have labeled all the salient features in the traffic.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6.3.3</head><p>Mapping Visual Attributes As detail is abstracted away, clutter on the display is reduced. With fewer classes of data, visual attributes such as color become more effective. For example, we can map color to the class labels to produce semantically colored visualizations. Consider Figure <ref type="figure">7</ref>, an event diagram with source ports arranged vertically and where the flow events are colored by traffic label. Network analysts often ignore source ports to concentrate on the destination ports because the server port is typically indicative of the service being provided. However, once the traffic has been modeled and the labels associated with colors, the source port plot can reveal interesting aspects of program behavior. Note the orange bands of SSH attacks are so intense that they repeatedly cycle over the upper half port space, indicating an attack from a Linux machine. The blue DNS traffic shows web servers that resolve host names for their logs creating long, gently-sloping tails. Scans exhibit a variety of characteristics: when the aggressive programs create a blizzard of connections in a narrow time sequence, scans show up as vertical lines; sequential scans create long slanted lines; and slow scans appear as sparse horizontal lines.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">DISCUSSION</head><p>In this section we will focus on three points of discussion, first, performance; second, the usability of the system, and finally the expressiveness of logical models. The performance of the system is dependent on the amount of data that is being examined. In the dataset of one million events used for evaluation, the system performance was fast enough to be used interactively. Producing and updating visualizations typically take less than 30 seconds, but updating the knowledge base takes approximately 10 minutes.</p><p>Visual analysis is effective when patterns are clear. We chose Gantt charts, event diagrams, and scatter plots because they are good at displaying contiguous groupings, which are much easier to select and evaluate than those that overlap or are spread out. We want to incorporate other visualizations and selection techniques to expand the range of patterns the system can model. The effectiveness of this approach will depend on the relationship between the types of patterns that can be shown and the types of patterns that can be modeled.</p><p>The interactive model creation process described in this paper appears to work well in practice. However, we have not yet performed controlled user studies. One reason for this is that there exists no obvious comparable way to create logical clauses other than typing in a logical formula. The dynamic selection interface is much faster than using a text box. Nevertheless, it would be useful to precisely measure speed of construction, flexibility, accuracy and convenience. For these evaluations we need to create standard datasets and perhaps use datasets from more domains than just network traffic analysis.</p><p>Behavioral modeling is uncertain; especially since errors are unavoidable in network data collection, but the binary nature of logic does not capture uncertainty. It would be desirable to tag events, patterns and clauses with a confidence value. To do this, we are investigating methods of using probabilistic reasoning. One possibility is Markov Logic Networks, which can be used to perform inference from a first-order logic representation <ref type="bibr" target="#b18">[19]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">CONCLUSIONS AND FUTURE WORK</head><p>We have presented a network traffic analysis system that supports the use of previous visual discoveries to enhance visual analysis.</p><p>In particular, we have shown how analysts using our system can build upon previous visual analysis discoveries to visually explore, and analyze more complex and subtle patterns. Our plans for future work are fourfold. First, we will perform a study of the accuracy of our classifications. Second, our current implementation supports only a small fraction of visualization techniques, and we would like to extend its visualization capabilities to make patterns more salient. Third, we would like to increase the expressiveness of the EPL, so that the analyst can describe more complex patterns. Finally, we would like to describe uncertainty by extending the knowledge representation to allow for probabilistic reasoning.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. The analysis cycle supported by the system. (1) The analyst uses visualization enhanced with previous knowledge to discover patterns in the data. (2) Once a pattern is discovered, the analyst creates a model for the pattern. (3) The analyst commits the model into the knowledge base to reuse in future analysis.</figDesc><graphic coords="1,326.04,162.18,225.12,157.02" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Dest IP is DNS server (U) Src ASN is Google Connection (U) Protocol is TCP (U) Dest port is 80 Traffic measurements (U) Total bytes sent is &gt; 3000 (U) The duration is &lt; 1 s Temporal (N) One event before another (S) In tight time sequence Equality (N) Two events have the same src IP (S) Has same dest AS number Counts (G) Number of destination IP &gt; 20 Approximate (U) Data is within 2KB of 20KB Trend (S) Amount of data is increasing (S) Dest IP number is increasing Variability (G) High distinct dest port usage (G) High destination IP access rate</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. The interface that is used to create candidate clauses (Left) List of identified predicates that can be used in the pattern description clause (Right) The details of the selected events</figDesc><graphic coords="3,328.86,54.12,219.48,148.32" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>WebCrawl(x1,x2,…) = time_sequence_30s(x1,x2,…) AND more_than_32_events(x1,x2,…) AND identical_source_AS_number(x1,x2,…) AND ( is_web_access_event(x1) AND is_web_access_event(x2) AND …)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>AND is_tcp(x2) AND …) AND ( low_duration(x1) AND low_duration(x2) AND …) AND ( low_total_data(x1) AND low_total_data(x2) AND …) Portmap(x1,x2,…) = first_dest_port_111(x1,x2,…) AND identical_src_ip(x1,x2,…) AND identical_dest_ip(x1,x2,…) AND time_sequence_0.5s(x1,x2,…)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 4 .Figure 5 .Figure 6 .</head><label>456</label><figDesc>Figure 4. Relationship between the number of bytes from the source vs. the destination of an individual flow. Only flows from fast and slow scans are shown</figDesc><graphic coords="6,58.14,54.18,224.58,199.50" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 .</head><label>1</label><figDesc>Flow table fields</figDesc><table><row><cell>x2,…) AND</cell></row><row><cell>identical_destination_IP(x1,x2,…) AND</cell></row><row><cell>time_sequence_2_seconds(x1,x2,…) AND</cell></row><row><cell>( destination_port_80(x1) AND</cell></row><row><cell>Destination_port_80(x2) AND …)</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 .</head><label>2</label><figDesc>Selected predicates from the system. (U) unary predicate (N) n-ary predicate (S) sequential predicate (G) group predicate</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 3 .</head><label>3</label><figDesc>Statistics of flows collected for the pilot study.</figDesc><table><row><cell>Model Name</cell><cell># Flows</cell><cell>% of Traffic</cell></row><row><cell>Chat</cell><cell>12,527</cell><cell>1.0 %</cell></row><row><cell>DNS lookup</cell><cell>131,764</cell><cell>10.2 %</cell></row><row><cell>Fast scan</cell><cell>19,322</cell><cell>1.5 %</cell></row><row><cell>IMAP mail</cell><cell>15,885</cell><cell>1.2 %</cell></row><row><cell>LDAP query</cell><cell>121,365</cell><cell>9.4 %</cell></row><row><cell>Microsoft file access</cell><cell>57,461</cell><cell>4.4 %</cell></row><row><cell>Multicast</cell><cell>24,858</cell><cell>1.9 %</cell></row><row><cell>Printer</cell><cell>23,246</cell><cell>1.8 %</cell></row><row><cell>NFS file access</cell><cell>62,103</cell><cell>4.8 %</cell></row><row><cell>NTP time sync</cell><cell>35,027</cell><cell>2.7 %</cell></row><row><cell>Pop mail</cell><cell>1,763</cell><cell>0.1 %</cell></row><row><cell>Port scan</cell><cell>336</cell><cell>0.02 %</cell></row><row><cell>SUN portmap</cell><cell>45,273</cell><cell>3.5 %</cell></row><row><cell>Wrong direction</cell><cell>25,824</cell><cell>2.0 %</cell></row><row><cell>Sendmail</cell><cell>19,322</cell><cell>1.5 %</cell></row><row><cell>Ganglia cluster monitor</cell><cell>85,936</cell><cell>6.6 %</cell></row><row><cell>Slow scan</cell><cell>41,639</cell><cell>3.2 %</cell></row><row><cell>SSH dictionary attack</cell><cell>34,353</cell><cell>2.6 %</cell></row><row><cell>SSH successful login</cell><cell>11,479</cell><cell>0.9 %</cell></row><row><cell>Successful login</cell><cell>23,605</cell><cell>1.8 %</cell></row><row><cell>Web crawl</cell><cell>72,622</cell><cell>5.6 %</cell></row><row><cell>Web page load</cell><cell>386,652</cell><cell>29.9 %</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 4 .</head><label>4</label><figDesc>Models and percentage of traffic associated with each</figDesc><table><row><cell>Type</cell><cell>Flows</cell><cell>Events</cell><cell>Flows/Event</cell></row><row><cell>Mail</cell><cell>10,178</cell><cell>8,355</cell><cell>1.22</cell></row><row><cell>Port map</cell><cell>45,139</cell><cell>15,538</cell><cell>2.91</cell></row><row><cell>HTTP</cell><cell>375,563</cell><cell>58,019</cell><cell>6.47</cell></row><row><cell>Chat</cell><cell>12,537</cell><cell>237</cell><cell>52.90</cell></row><row><cell>Port scan</cell><cell>336</cell><cell>6</cell><cell>112.00</cell></row><row><cell>SSH Attack</cell><cell>34,353</cell><cell>89</cell><cell>385.99</cell></row><row><cell>SSH Login</cell><cell>11,479</cell><cell>23</cell><cell>499.09</cell></row><row><cell>Web Crawl</cell><cell>72,622</cell><cell>125</cell><cell>580.98</cell></row><row><cell>Scan</cell><cell>60,691</cell><cell>52</cell><cell>1167.13</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 5 .</head><label>5</label><figDesc>The number of flows per high level event, by type.</figDesc><table /></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>This work was supported by the Stanford Regional Visualization and Analytics Center (RVAC). This Center is supported by the National Visualization and Analytics Center (NVAC ™), a U.S. Department of Homeland Security program operated by the Pacific Northwest National Laboratory (PNNL), a U.S. Department of Energy Office of Science laboratory.</p><p>Thanks also to the members of the Stanford Computer Graphics Laboratory for allowing us to collect and analyze their network flow data. Figure 7. Event diagram showing mail (green), DNS (blue), scan (red), SSH logins (purple), SSH attacks (orange), and chat (indigo)</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Toward an Effective Cooperation of the User and the Computer for Classification</title>
		<author>
			<persName><forename type="first">M</forename><surname>Ankerst</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ester</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H.-P</forename><surname>Kriegel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 6th Int.l Conf. Knowledge Discovery and Data Mining (KDD 00)</title>
		<meeting>6th Int.l Conf. Knowledge Discovery and Data Mining (KDD 00)</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="179" to="188" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<ptr target="http://www.arcsight.com/whitepapers.htm" />
		<title level="m">Arcsight</title>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<ptr target="http://www.qosient.com/argus/packets.htm" />
		<title level="m">Argus</title>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Home-centric visualization of network traffic for security administration</title>
		<author>
			<persName><forename type="first">R</forename><surname>Ball</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Fink</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>North</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2004 ACM workshop on Visualization and data mining for computer security</title>
		<meeting>the 2004 ACM workshop on Visualization and data mining for computer security</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Visualizing Network Data</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">G</forename><surname>Eick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">R</forename><surname>Wilks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Transactions on Visualization and Computer Graphics</title>
		<imprint>
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Mackinlay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Shneiderman</surname></persName>
		</author>
		<title level="m">Readings in Information Visualization: Using Vision to Think</title>
		<meeting><address><addrLine>San Francisco</addrLine></address></meeting>
		<imprint>
			<publisher>Morgan Kaufmann Publishers</publisher>
			<date type="published" when="1999">1999. 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">B</forename></persName>
		</author>
		<title level="m">Enderton. A Mathematical Introduction to Logic</title>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Academic Press</publisher>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Visual traffic monitoring and evaluation</title>
		<author>
			<persName><forename type="first">R</forename><surname>Erbacher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Conference on Internet Performance and Control of Network Systems</title>
		<meeting>the Conference on Internet Performance and Control of Network Systems</meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="volume">II</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Logic foundations of artificial intelligence</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">R</forename><surname>Genesereth</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">J</forename><surname>Nilsson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1987">1987</date>
			<publisher>Morgan Kaufmann Publishers</publisher>
			<pubPlace>San Francisco</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Preserving the Big Picture: Visual Network Traffic Analysis with TNV</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Goodall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Lutters</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Rheingans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Komlodi</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">BLINC: Multilevel Traffic Classification in the Dark</title>
		<author>
			<persName><forename type="first">T</forename><surname>Karagiannis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Papagiannaki</surname></persName>
		</author>
		<author>
			<persName><surname>Faloutsos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGCOMM 2005</title>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Visualizing Internet Routing Dynamics using Link-Rank</title>
		<author>
			<persName><forename type="first">M</forename><surname>Lad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Massey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
		<idno>TR050010</idno>
		<imprint>
			<date type="published" when="2005-03">March 2005</date>
		</imprint>
	</monogr>
	<note type="report_type">UCLA Technical Report</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Closing-the-Loop in NvisionIP: Integrating Discovery and Search in Security Visualizations</title>
		<author>
			<persName><forename type="first">K</forename><surname>Lakkaraju</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Bearavolu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Slagell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Yurcik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>North</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">The Power of Events</title>
		<author>
			<persName><forename type="first">D</forename><surname>Luckham</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
			<publisher>Addison-Wesley</publisher>
			<pubPlace>San Francisco</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">GEM: A Generalized Event Monitoring Language for Distributed Systems</title>
		<author>
			<persName><forename type="first">M</forename><surname>Mansouri-Samani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sloman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEE/IOP/BCS Distributed Systems Engineering Journal</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="96" to="108" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">The BSD Packet Filter: A New Architecture for User-level Packet Capture</title>
		<author>
			<persName><forename type="first">S</forename><surname>Mccanne</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Jacobson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Winter USENIX conference</title>
		<imprint>
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Visualizing the global topoloby of the Mbone</title>
		<author>
			<persName><forename type="first">T</forename><surname>Munzner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Hoffman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Claffy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Fenner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Information Visualization</title>
		<imprint>
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<ptr target="http://www.q1labs.com/resources/white_papers.html" />
		<title level="m">Q1Labs</title>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Markov Logic Networks</title>
		<author>
			<persName><forename type="first">M</forename><surname>Richardson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Domingos</surname></persName>
		</author>
		<ptr target="http://www.cs.washington.edu/homes/pedrod/mln.pdf" />
		<imprint>
			<date type="published" when="2004">2004</date>
			<pubPlace>Seattle, WA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Department of Computer Science and Engineering, University of Washington</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Dynamic queries for visual information seeking</title>
		<author>
			<persName><forename type="first">B</forename><surname>Shneiderman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="70" to="77" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Detecting Flaws and Intruders with Visual Data Analysis</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">T</forename><surname>Teoh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">L</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">F</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">T</forename><surname>Jankun-Kelly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">5</biblScope>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">A prototype tool for visual data mining of network traffic for intrusion detection</title>
		<author>
			<persName><forename type="first">W</forename><surname>Yurcik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Lakkaraju</surname></persName>
		</author>
		<author>
			<persName><forename type="first">James</forename><surname>Barlow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jeff</forename><surname>Rosendale</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">3rd IEEE International Conference on Data Mining (ICDM) Workshop on Data Mining for Computer Security (DMSEC)</title>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">SEL, A New Event Pattern Specification Language for Event Correlation</title>
		<author>
			<persName><forename type="first">D</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">S</forename><surname>Sethi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">10th International Conference on Computer Communications and Networks</title>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
