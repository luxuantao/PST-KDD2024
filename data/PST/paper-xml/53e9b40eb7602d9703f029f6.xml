<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Multi-Robot Learning with Particle Swarm Optimization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Jim</forename><surname>Pugh</surname></persName>
							<email>jim.pugh@epfl.ch</email>
							<affiliation key="aff0">
								<orgName type="department">Swarm-Intelligent Systems Group École Polytechnique F éd érale de Lausanne</orgName>
								<address>
									<postCode>1015</postCode>
									<settlement>Lausanne</settlement>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Alcherio</forename><surname>Martinoli</surname></persName>
							<email>alcherio.martinoli@epfl.ch</email>
							<affiliation key="aff0">
								<orgName type="department">Swarm-Intelligent Systems Group École Polytechnique F éd érale de Lausanne</orgName>
								<address>
									<postCode>1015</postCode>
									<settlement>Lausanne</settlement>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Multi-Robot Learning with Particle Swarm Optimization</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">127DB9E4DAD9F6DBB321178ADB6B4230</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T02:39+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.2.9 [Artificial Intelligence]: Robotics-Autonomous vehicles; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multiagent systems Algorithms</term>
					<term>Experimentation particle swarm optimization</term>
					<term>unsupervised learning</term>
					<term>multirobot systems</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We apply an adapted version of Particle Swarm Optimization to distributed unsupervised robotic learning in groups of robots with only local information. The performance of the learning technique for a simple task is compared across robot groups of various sizes, with the maximum group size allowing each robot to individually contain and manage a single PSO particle. Different PSO neighborhoods based on limitations of real robotic communication are tested in this scenario, and the effect of varying communication power is explored. The algorithms are then applied to a group learning scenario to explore their susceptibility to the credit assignment problem. Results are discussed and future work is proposed.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Designing even simple behaviors for robots that are efficient and robust can be very difficult for humans; it is often not hard to implement a rudimentary controller that accomplishes the task, but achieving optimal performance can be very challenging. Unsupervised robotic learning allows for automated design of efficient, robust controllers, which saves much design time and effort. Unsupervised learning is also useful for allowing robots to adapt to situations where the task/environment is unknown beforehand or is constantly changing.</p><p>Genetic Algorithms (GAs) are a very common method of accomplishing machine learning and optimization. Candidate solutions to a problem are modeled as members of a population, and breeding (selection and crossover) and mutation are applied to "parents" (high performing solutions) in the population to generate "children" (new candidate solutions). GA can be used to shape an Artificial Neural Network (ANN) controller by using the parameter set as the weights, and the evaluative function as a measure of the performance of a desired robot behavior.</p><p>Particle Swarm Optimization (PSO) is a promising new optimization technique which models a set of potential problem solutions as a swarm of particles moving about in a virtual search space. The method was inspired by the movement of flocking birds and their interactions with their neighbors in the group. PSO can also be used to evolve ANN robotic controllers.</p><p>Both GA and PSO use groups of interacting virtual agents in order to achieve their optimization. In collective robotics, groups of robots interact to accomplish their goals. It may therefore be possible to implement these algorithms in a parallel distributed fashion for learning in multi-robot systems. Each robot would be responsible for several virtual agents, which it would need to evaluate at each iteration. After each set of evaluations, the robots would communicate to share the fitness information needed to progress to the next iteration of the algorithm. By running the algorithms in this fashion, we would need no external supervisor to oversee the learning process, and the speed of learning could be significantly improved, as many robots evaluating in parallel would decrease the number of required controller evaluations and therefore decrease the total learning time.</p><p>In the local neighborhood version of PSO, each particle only needs to be aware of the state of a small subset of particles in the population in order to update itself at each iteration. It may therefore be possible to implement PSO in a distributed manner where communication from any given node would only be necessary with several other nodes, making it a very scalable parallel approach. In contrast, the GA population manager must have knowledge of the entire population in order to implement standard breeding techniques, which prevents the same scalable technique from being applied.</p><p>In this paper, we explore the effectiveness of using a modified version of PSO on groups of realistically simulated robots performing distributed unsupervised learning. At the maximum group size, the number of robots is set equal to the number of particles in the PSO population, allowing each robot in the group to manage a single unique particle. We test how the performance is affected if we adapt the standard PSO neighborhood structure to more closely model what is possible in a real robot group with limited communication abilities. Section 2 provides some background on GA, PSO, unsupervised robotic learning, and multi-robot learning. Section 3 examines how the effectiveness of distributed unsupervised learning is affected by the number of robots in the group. Section 4 analyzes how the learning performance is affected by different neighborhood structures based on the limitations of robotic communication when each robot contains a single particle. Section 5 focuses on one such neighborhood structure and tests the effect of varying the communication range of the robots. Section 6 applies the algorithms to a group learning task, to see how affected they are by the credit assignment problem and to see how the communication-based neighborhoods fare in different scenarios. Section 7 discusses the implications of the results and suggests future work, and Section 8 concludes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">BACKGROUND</head><p>Genetic algorithms were originally developed in the 1960s by John Holland. The algorithms are inspired by evolution, where the fittest members of a population tend to reproduce more often than the less fit members. Candidate solutions are modeled as a population of "chromosomes". At each iteration of the algorithm, a new population is generated from the previous one. Selection of the parents of the new generation is implemented using one or more of several schemes, such as elitism (using only the top performing members of the population), Roulette Wheel sampling (stochastically choosing parents with weight proportional to performance), and rank selection (ranking chromosomes from best to worst and stochastically choosing parents with weight proportional to the rank). After parents have been chosen, crossover between the parents can occur with some probability (each chromosome is split into two, and children use one part from one parent and the other part from the other). This allows positive aspects from different chromosomes to be merged into a single chromosome. Last, mutation is applied, where each element of the chromosome may have its value randomly changed with some probability. This provides a random local search, which allows solutions to continue to improve beyond the genetic diversity that was available in the original population ( <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b14">[15]</ref>).</p><p>The original PSO method was developed by James Kennedy and Russel Eberhart ([9], <ref type="bibr" target="#b2">[3]</ref>). Every particle in the population begins with a randomized position (xi,j) and randomized velocity (vi,j) in the n-dimensional search space, where i represents the particle index and j represents the dimension in the search space. Candidate solutions are optimized by flying the particles through the virtual space, with attraction to positions in the space that yielded the best results. Each particle remembers the position at which it achieved its highest performance (x * i,j ). Each particle is also a member of some neighborhood of particles, and remembers which particle achieved the best overall position in that neighborhood (given by the index i ′ ). This neighborhood can either be a subset of the particles (local neighborhood), or all the particles (global neighborhood). For local neighborhoods, the standard method is to set neighbors in a pre-defined way (such as using particles with the closest array indices as neighbors modulo the size of the population, henceforth known as a "ring topology") regardless of the particles' positions in the search space. The equations executed by PSO at each step of the algorithm are</p><formula xml:id="formula_0">vi,j = w • (vi,j + pw • rand() • (x * i,j -xi,j) + nw • rand() • (x * i ′ ,j -xi,j)) xi,j = xi,j + vi,j</formula><p>where w is the inertia coefficient which slows velocity over time, pw is the weight given to the attraction to the previous best location of the current particle and nw is the weight given to the attraction to the previous best location of the particle neighborhood. rand() is a uniformlydistributed random number in [0, 1].</p><p>PSO has been shown to perform as well as or better than GA in several instances. Eberhart and Kennedy found PSO performs on par with GA on the Schaffer f6 function <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b8">9]</ref>. In work by Kennedy and Spears <ref type="bibr" target="#b9">[10]</ref>, a version of PSO outperforms GA in a factorial time-series experiment. Fourie showed that PSO appears to outperform GA in optimizing several standard size and shape design problems <ref type="bibr" target="#b4">[5]</ref>.</p><p>Unsupervised learning describes learning scenarios where there is no external entity which decides upon the training set inputs for the learning agent(s). Rather, inputs are generated dynamically as the agents interact with their environment. This is as opposed to supervised learning, where the inputs are generated/collected first and then used repeatedly. In supervised learning, the accuracy of the system at each iteration is usually decided by an external "teacher" evaluating the system output. The pre-defined inputs are split into two separate sets, one for training the system and the other for testing the performance. Supervised learning tends to be easier than unsupervised, as the data does not change between iterations of the algorithm and can be preselected to avoid using unusual or particularly noisy data points. However, supervised learning is not possible in situations where the input data to the system depends on the current state of the learning agent; this is the case for online robotic learning, since the robot's movements affect what its sensors will perceive.</p><p>Evolutionary algorithms have been used extensively for unsupervised learning of robotic behavior. A good survey of the work is given in <ref type="bibr" target="#b11">[12]</ref>. More specifically, standard GA has been shown to be effective in evolving simple robotic controllers <ref type="bibr" target="#b3">[4]</ref>, and modified noise-resistant versions of both GA and PSO were shown to achieve very good performance on simulated unsupervised robotic learning, outperforming the standard versions of the algorithms <ref type="bibr" target="#b17">[18]</ref>.</p><p>In collective robotics, many desired behaviors result in strong interactions between robots in the group, and the actions of one robot can significantly impact the performance of another. If a behavior is being learned and each robot is evaluating a different controller, this can give rise to the "credit assignment" problem, where robots do not know whether a good/bad fitness score was due to its own performance or to that of other robots. This effect can be particularly pronounced in cases where robots do not explicitly share their intentions through communication channels and can severely hamper the learning process. The credit assignment problem can arise in two different scenarios. The first is when robots are learning individual behaviors, but the performance of their behavior can be impacted by the actions of other robots in the group, causing an inaccurate fitness evaluation. The second is when robots are learning a group behavior with a single collective fitness. Often, it is not easy to decompose the fitness value to know which robots positively affected the performance and which didn't. An elegant way to bypass the credit assignment problem in these cases is to use "homogenous" learning (as opposed to "heterogeneous" learning), where all the robots simultaneously evaluate the same controller and therefore contribute equally to the collective score on average. While this drastically slows the learning process, it is the only way of achieving good results in some highly stochastic scenarios, such as those investigated in Hayes et al. <ref type="bibr" target="#b6">[7]</ref>.</p><p>Multi-robot learning has been used and explored in various ways. Matarić studied mechanisms to encourage individual agents in a group to act in ways to help the group performance <ref type="bibr" target="#b10">[11]</ref>. Multi-robot learning using several methods in a wide variety of scenarios has been explored ( <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b19">[20]</ref>). Techniques for increasing individual learning speed via multi-robot learning were studied in <ref type="bibr" target="#b7">[8]</ref> and <ref type="bibr" target="#b12">[13]</ref>. A modified version of a genetic algorithm has been embedded onto a 2-robot system to allow for distributed parallel learning <ref type="bibr" target="#b16">[17]</ref>. Particle swarm optimization has thus far not been used for learning in scalable multi-robot systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">VARYING THE ROBOTIC GROUP SIZE</head><p>In Pugh et al. <ref type="bibr" target="#b17">[18]</ref>, unsupervised learning was used to teach robots obstacle avoidance behavior for both a single robot and two robots co-learning. We wish to expand this to test unsupervised learning on much larger robotic groups, where the evolving candidate solutions are distributed throughout the group to achieve faster learning.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Experimental Setup</head><p>We use the noise-resistant GA and PSO algorithms from <ref type="bibr" target="#b17">[18]</ref>. GA uses elitism to select the best half of the population as the parent set, and then applies Roulette Wheel sampling to replenish the missing chromosomes. PSO uses a local neighborhood in a ring topology with one neighbor on each side. At every iteration, these algorithms reevaluate their previous best locations and parent sets for PSO and GA, respectively, combining the new fitness value with previous ones to get a more accurate measure of the actual fitness. Although this requires twice as many fitness evaluations at each iteration as their standard counterparts, this technique prevents noisy fitness evaluations from severely disrupting the learning process and gives much better results given the same amount of computational time.</p><p>We modify the noise-resistant PSO algorithm from its original form slightly: when updating the neighborhood best particle for particle i (x * i ′ ), the neighborhood best is only changed if the new neighborhood best particle (x * i ′′ ) has higher fitness than the previous best location of the current particle. In other words</p><formula xml:id="formula_1">x * i ′ = x * i ′′ only if f itness(x * i ′′ ) &gt; f itness(x *</formula><p>i ) It should be noted that this excludes the previous best location of a particle from ever being its neighborhood best. We found that this modification dramatically improved the performance of the learning over the standard update method. Although we are not certain why this is the case, it may be that the new technique encourages diversity by ensuring that every particle will have two distinct locations to which it is attracted.</p><p>The parameters for the algorithms are given in Table <ref type="table" target="#tab_0">1</ref>. We use Webots, a realistic simulator, for our robotic simulations <ref type="bibr" target="#b13">[14]</ref>, using the Khepera robot model <ref type="bibr" target="#b15">[16]</ref>. The robot(s) operate in a 2.0 m x 2.0 m square arena (see Fig. <ref type="figure" target="#fig_0">1</ref>). The robotic controller is a single-layer discrete-time artificial neural network of two neurons, one for each wheel speed, with sigmoidal output functions. The inputs are the eight infrared proximity sensors (six in front, two in back), as well as a recursive connection from the previous output of the neuron, lateral inhibitions and bias values (see Fig. <ref type="figure" target="#fig_1">2</ref>), giving us 22 weights total. Sensors have a maximum range of 5.0 cm, and sensor output varies linearly from 0.0 at maximum range to 5.12 at minimum range (0.0 cm) with 10% noise. Slip noise of 10% is applied to the wheel speed. The time step for neural updates is 128 ms. We use the fitness function used in <ref type="bibr" target="#b17">[18]</ref>. The fitness function is given by:</p><formula xml:id="formula_2">F = V • (1 - √ ∆v) • (1 -i) 0 ≤ V ≤ 1 0 ≤ ∆v ≤ 1 0 ≤ i ≤ 1</formula><p>where V is the average absolute wheel speed of both wheels, ∆v is the average of the difference between the wheel speeds, and i is the average activation value of the most active proximity sensor over the evaluation period. These factors reward robots that move quickly, turn as little as possible, and spend little time near obstacles, respectively. The terms are normalized to give a maximum fitness of 1. The evaluation period of the fitness tests for these experiments is 480 steps, or approximately 60 seconds. Between each fitness test, the position and bearing of the robots are randomly set by the simulator to ensure the randomness of the next evaluation.</p><p>We test for robot group sizes of 1, 2, 5, 10, and 20 for 100 iterations of each algorithm. Since learning is being done in parallel, this has a significant effect on the simulated time needed (∼67 hours for 1 robot compared to ∼3 hours for 20). In the case of 20 robots, each robot effectively contains a single candidate solution in the algorithm population.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Results</head><p>A comparison of the average fitnesses can be seen in Fig. <ref type="figure" target="#fig_2">3</ref>. The progress of the average population fitness throughout the learning process for a 20-robot group can be seen in Fig. <ref type="figure" target="#fig_3">4</ref>. There is no significant change in the performances of the algorithms for different robot group sizes, indicat-  ing that this technique is quite scalable. Although GA has initially faster convergence, the performance is noticeably lower than that of PSO for all group sizes. This was due to GA converging to poor solutions a large fraction of the time. A likely cause of this is the small population size (20 agents here as opposed to 60 in <ref type="bibr" target="#b17">[18]</ref>), which does not provide enough genetic diversity for GA in this scenario, while PSO, though slower, is able to converge well with much smaller population sizes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">COMMUNICATION-BASED NEIGHBORHOODS</head><p>In multi-robot scenarios, communication range is often limited. Untethered robots have a very limited amount of available energy at their disposal, and it is important to conserve this by restricting transmission power. Also, if communication range is too large, interference between signals can decrease the rate at which data can be sent. If we distribute particles in a PSO population between robots and use the standard PSO local neighborhood model, robots may be required to share information with other robots that are far from their position. Therefore, to realistically model a scalable multi-robot system, particle neighborhoods should be set in such a way that robots are not required to communicate with other robots outside of some close proximity.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Experimental Setup</head><p>We propose two such models for PSO neighborhoods to emulate realistic robot communication.</p><p>Model 1: Each robot contains one particle. At the end of each fitness evaluation, the robot selects the two robots closest to it, and uses their particles as its neighborhood for the next iteration of the algorithm. This maintains the same number of particles in the neighborhood, but allows for the neighbors to change over the course of the learning. As the physical location of the robots is independent of the particle indices, this should be roughly equivalent to randomly choosing two neighbors at each iteration of the algorithm, especially since obstacle avoidance behavior should result in a uniformly random distribution of robots within the environment.</p><p>Model 2: Each robot contains one particle. At the end of each fitness evaluation, the robot selects all robots within a fixed radius r, and uses their particles as its neighborhood for the next iteration of the algorithm. This results in a variable number of neighbors, as the robot may be close to very few or very many robots randomly. However, it is perhaps more realistic than Model 1, since for very sparse robot distributions, there may be fewer than two other robots in close proximity at times.</p><p>We compare the performance of the original neighborhood topology to the two new models, using r = 40 cm, for a group of 20 robots. We use the setup previously described.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Results</head><p>A comparison of the average fitnesses is shown in Fig. <ref type="figure" target="#fig_4">5</ref>. Both new neighborhood models achieve slightly better fitness than the original. This suggests that random neighborhood selection at each iteration is marginally superior to the fixed ring topology. The good performance of Model 2 indicates that the effectiveness of learning is not tied to keeping strictly two neighbors at each iteration. The success of these models shows that we can accomplish distributed unsupervised learning in a realistic multi-robot system. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">VARYING COMMUNICATION RANGE</head><p>We now explore the effects of varying the communication range used in Model 2. This could be accomplished in a real robotic system by varying the output power of the transmission. It is useful to know the trade-off between output power and learning performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Experimental Setup</head><p>We use communication ranges of 10 cm, 20 cm, 40 cm, 80 cm, and 160 cm. The expected number of robots within communication range are given in Table <ref type="table" target="#tab_1">2</ref>, assuming a uniformly random distribution of robots within the arena. We therefore go from almost no interparticle communication to almost full interparticle communication.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Results</head><p>The average fitnesses for different communication ranges can be seen in Fig. <ref type="figure" target="#fig_5">6</ref>. The progress of the average population fitness throughout the learning process for 10 cm, 40 cm, and 160 cm can be seen in Fig. <ref type="figure" target="#fig_6">7</ref>. Both very high and very Failure of low communication range is due to not enough information being exchanged between particles; particles end up almost exclusively using their own personal best position for learning, which causes extremely slow convergence. In the case of very high communication range, the initial convergence of the population was faster than with the shorter communication ranges, but it would often prematurely converge on a solution which did not have particularly high performance. This indicates that a global neighborhood is actually detrimental to finding very good solutions, and we therefore gain no benefit whatsoever by expanding our communication range beyond a certain point.</p><p>Both communication ranges of 40 cm and 80 cm (corresponding to average neighborhood sizes of 2.0 and 6.5 particles respectively) achieved very high fitness. Even a communication range of 20 cm, corresponding to 0.54 neighbors on average, achieved good fitness. The success of all these suggests that the effectiveness of the algorithm is not highly dependent on choosing an exact neighborhood size, making the algorithm parameters quite flexible. This is an important feature, as the communication range with real robots can vary due to obstruction and environmental effects.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">GROUP LEARNING AND CREDIT ASSIGNMENT</head><p>Obstacle avoidance is a largely single-robot behavior. The observations and actions of other robots do not impact a robot's performance, except in having to avoid robots which move into its path. We wish to explore how susceptible our algorithms are to the credit assignment problem by evolving aggregation, a behavior whose success is highly dependent on the coordinated actions of many agents in the group.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Experimental Setup</head><p>We endow the Khepera robots with the ability to detect the relative positions of other nearby robots. This measurement is completely independent of any global coordinate system, and is given solely by where other robots are from the detecting robot's point of view (for example, range, the distance to the other robot, and bearing, the angular offset from the detecting robot's forward direction). This is a capability common to many robots working in collective scenarios, and can be accomplished with fairly simple systems (e.g., <ref type="bibr" target="#b18">[19]</ref>). We add zero-mean Gaussian noise to the range and bearing, with range noise standard deviation equal to 10% of the range value and bearing noise standard deviation equal to 0.1 radians. We assume our relative positioning system is not susceptible to occlusions.</p><p>We expand the inputs to our artificial neurons to include relative positioning information. Because the number of robots within relative positioning range may vary, we use the center of mass of all detected robots as the input values. This is represented as x and y, where x is the forward-back displacement of the center of mass and y is the left-right displacement from the robot's point of view. This increases our total neural weights to 26.</p><p>The fitness value we use for this scenario is given by</p><formula xml:id="formula_3">F (i) = robRP (i) robtot</formula><p>where F (i) is the fitness of robot i, robRP (i) is the number of robots within relative positioning range of i, and robtot is the total number of robots. Therefore, a robot is rewarded for having the maximum number of other robots within relative proximity range at the end of a run. The progress of evolving aggregation behavior may be susceptible to the first type of credit assignment problem described in Section 2, where robots use individual fitness values which can be impacted by the actions of other robots in the group, causing inaccurate evaluations. We therefore wish to compare the performance of our normal heterogeneous algorithms to homogenous algorithms, an established method of overcoming the credit assignment problem where all robots use the same controller at each evaluation. We generate a group fitness for each run by averaging all the individual fitness values obtained:</p><formula xml:id="formula_4">Fg = 1 robtot i F (i)</formula><p>Because the individual and group fitness functions are wellaligned, this allows us to compare their performances in a very fair manner. While homogenous learning will drastically slow the algorithm speed since we can no longer evaluate controllers in parallel, it will immediately provide a very noise-free estimation of the effectiveness of the solution, something which may not be available in the heterogeneous case (e.g., a robot may have a very good controller, but achieves poor performance because no other robot is aggregating well).</p><p>We use an unbounded arena with 20 Khepera robots for our setup. At each evaluative run, the Kheperas are distributed randomly in a 2m x 2m square. The evaluation lasts 10 simulated seconds, and the fitness is measured at the end. Robots are capable of sensing other robots within 80 cm of them. The arena can be seen in Fig. <ref type="figure" target="#fig_7">8</ref>. We use our noise-resistant GA and PSO (with ring topology) algorithms and homogenous versions of these algorithms (HGA and HPSO, respectively), as well as the Model 1 and Model 2 neighborhood versions of the PSO algorithm. All algorithms have the same parameters used previously. Model 2 uses r = 40 cm. We run 100 iterations of the heterogeneous algorithms. Because we are using 20 robots, homogenous versions of the algorithms progress 20 times slower than the heterogeneous versions. We therefore run only 5 iterations of these algorithms to match the number of evaluative runs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Results</head><p>The final performance of all algorithms can be seen in Fig. <ref type="figure">9</ref>. The progression of GA, PSO, HGA, and HPSO over the evolution can be seen in Fig. <ref type="figure" target="#fig_9">10</ref>. All algorithms achieved good results in this scenario. For GA, the heterogeneous algorithm performed slightly worse than the homogenous version, while heterogeneous PSO performed as well as homogenous PSO on average, though with a higher standard deviation. This suggests that PSO may be less susceptible to the credit assignment problem than GA. However, as very few iterations were performed with the homogenous algorithms, it is likely HPSO would be able to achieve superior performance in longer runs. If we observe the progression of the algorithms throughout the learning process, GA initially improves more quickly, but levels off, while PSO continues to improve throughout. GA could therefore be preferable to PSO if we are only able to run very few iterations.</p><p>While the best final solutions from homogenous GA and PSO achieved very similar performances, the average population fitness for HGA was much higher than the average population fitness for HPSO throughout the learning process. This was observed in <ref type="bibr" target="#b17">[18]</ref> and is likely due to the GA population containing much less variation than the PSO population, as the local neighborhood in PSO maintains diversity and no mechanism is present in GA to accomplish this. This diversity is likely what allows PSO to continue improving after the GA population converges on some solution. Model 1 and Model 2 neighborhoods again achieved performances comparable to the standard ring topology, in spite of the very different distribution of robots in aggregation (high performing robots will be clustered together, while low performing robots may have traveled very far from the group center). The fact that these models continue to perform well is a good indication that neighborhoods based on limited communication capabilities of real robots can continue to function in a variety of scenarios. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">DISCUSSION AND OUTLOOK</head><p>Although PSO far outperformed GA in Section 2 of this paper, we suspect this is due almost exclusively to the small population size used. Indeed, the good performance of GA in Section 6 indicates that it can perform comparatively to PSO, and even better for fewer iterations. However, because of the different ways in which the population is managed, we would need to modify GA much more heavily in order to allow it to function distributedly with limited communication. Although this is certainly possible (e.g., as was done in <ref type="bibr" target="#b16">[17]</ref>), the fundamental changes to the algorithm structure make it much more likely that we will lose the useful dynamics of the algorithm, as compared to PSO, where very few modifications are needed.</p><p>By increasing the robot group size from 1 to 20 robots, we were able to decrease the behavior learning time by a factor of 20. However, using a particle population size of 20, there is no easy to further decrease the time while maintaining only local interactions. It may be possible to use 40 robots to simultaneously evaluate the 20 new particles and reevaluate 20 previous best particles, but this would require a global supervisor to manage the assignments of candidate solutions to different robots, as each robot is no longer fully in charge of a particle. Therefore, further increasing the number of robots using only local interactions would only allow us to increase the size of the population. It has yet to be explored how increasing the population size could effect the convergence time.</p><p>In our model, the progress of all the robots was synchronized (i.e., fitness evaluations began and ended at the same time). In real-world multi-robot scenarios, this often isn't the case. Therefore, it would not make sense to exchange particle information only at the end of an evaluation, as the difference in time between robots could cause major delays. A simple alternative would be to exchange particle information on the previous evaluation during the evaluation itself. This is a rather minor modification to the algorithm, and we predict it will not significantly impact the performance. In fact, robots moving about during the evaluation would likely be exposed to more robots in close proximity, which may allow them to further decrease their communication range while maintaining the same number of neighbors.</p><p>The model we use for communication in this paper is omnidirectional, immune to obstruction and error free. This corresponds to using radio transmissions in an open noiseless environment. In the real world, many other communication methods may be preferred or required. Infrared transmissions are often directional and could be blocked by other robots or by environmental obstacles. Radio could be blocked by large obstacles in some environments. Many types of communications may be susceptible to errors in noisy environments. The performance of the algorithm in these scenarios is thus far unexamined.</p><p>The scenario we used for testing susceptibility to the credit assignment problem only explored a small portion of the problem. It would be interesting to apply the algorithms to other scenarios, such those requiring specialization amongst robots or having less well-aligned group and individual fitness functions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">CONCLUSION</head><p>A modified version of the Particle Swarm Optimization algorithm was tested for unsupervised learning in groups of robots. The algorithm maintained good performance for groups of robots of various sizes. In the case of assigning a single unique particle to each robot, the performance was further improved by using PSO neighborhoods based on the limited communication abilities of real-world robots. Varying the communication range demonstrated that there is no benefit to communicating farther than a certain distance, and that the algorithm maintains high performance over a large variation of range. Applying the algorithm to a group learning task showed that it is able to overcome the credit assignment problem and that communication-based neighborhoods can perform well for non-uniform robot distributions. Implications of the results are examined and future research is suggested.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Robot arena with Khepera robots. Lines protruding from Kheperas represent proximity sensors.</figDesc><graphic coords="4,119.40,255.44,108.00,105.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Depiction of the artificial neural network used for the robot controller. Grey boxes represent proximity sensor inputs and white boxes on the sides represent the motor outputs. Curved arrows are recurrent connections and lateral inhibitions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Average of final best performances over 20 evolutions for GA and PSO with different robotic group sizes. Error bars represent standard deviation across evolutionary runs.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Average performance of population over 20 evolutions for GA and PSO with 20-robot groups.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Average of final best performances over 20 evolutions for different neighborhood models. Error bars represent standard deviation across evolutionary runs.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Average of final best performances over 20 evolutions for different communication ranges in Model 2. Error bars represent standard deviation across evolutionary runs.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Average performance of population over 20 evolutions for 10 cm, 40 cm, and 160 cm communication range in Model 2.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Aggregation arena with Khepera robots aggregating. The dimmed circle represents the relative positioning range of the white robot. All robots within this range are detectable.</figDesc><graphic coords="6,342.72,393.48,187.20,166.40" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>2 Figure 9 :</head><label>29</label><figDesc>Figure 9: Average of final best performances in aggregation over 20 evolutions. HGA and HPSO are homogenous versions of the GA and PSO algorithms. Model 1 and Model 2 are PSO with neighborhoods described in Section 4. Error bars represent standard deviation across evolutionary runs.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: Average performance of population in aggregation over 20 evolutions. HGA and HPSO are the homogenous versions of the GA and PSO algorithms.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>GA and PSO Parameters for Unsupervised Learning</figDesc><table><row><cell>GA</cell><cell></cell><cell>PSO</cell></row><row><cell>Population Size</cell><cell>20</cell><cell cols="2">Population Size 20</cell></row><row><cell cols="2">Crossover Probability 0.6</cell><cell>pw</cell><cell>2.0</cell></row><row><cell cols="2">Mutation Probability 0.15</cell><cell>nw</cell><cell>2.0</cell></row><row><cell>Mutation Range</cell><cell cols="2">[-5.0, 5.0] w</cell><cell>0.6</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 :</head><label>2</label><figDesc>Expected Number of Neighboring Particles</figDesc><table><row><cell cols="2">r (cm) Expected Number of Neighbors</cell></row><row><cell>10</cell><cell>0.14</cell></row><row><cell>20</cell><cell>0.54</cell></row><row><cell>40</cell><cell>2.0</cell></row><row><cell>80</cell><cell>6.5</cell></row><row><cell>160</cell><cell>16</cell></row><row><cell cols="2">low communication ranges achieve fairly poor performance,</cell></row><row><cell cols="2">while the intermediate ranges all achieve fairly good results.</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.">ACKNOWLEDGEMENTS</head><p>Jim Pugh and Alcherio Martinoli are currently sponsored by a Swiss NSF grant (contract Nr. PP002-68647).</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Evolving Engineering Design Trade-Offs</title>
		<author>
			<persName><forename type="first">Antonsson</forename><forename type="middle">E K</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Martinoli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ASME Fifteenth Int. Conf. on Design Theory and Methodology</title>
		<meeting>of the ASME Fifteenth Int. Conf. on Design Theory and Methodology<address><addrLine>Chicago, IL</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-09">September 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Behavioral diversity in learning robot teams</title>
		<author>
			<persName><forename type="first">T</forename><surname>Balch</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
		<respStmt>
			<orgName>College of Computing, Georgia Institute of Technology</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD Thesis</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A new optimizer using particle swarm theory</title>
		<author>
			<persName><forename type="first">R</forename><surname>Eberhart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Sixth Int. Symposium on Micro Machine and Human Science, MHS &apos;95</title>
		<meeting>of the Sixth Int. Symposium on Micro Machine and Human Science, MHS &apos;95</meeting>
		<imprint>
			<date type="published" when="1995-10-06">4-6 Oct 1995</date>
			<biblScope unit="page" from="39" to="43" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Evolution of Homing Navigation in a Real Mobile Robot</title>
		<author>
			<persName><forename type="first">D</forename><surname>Floreano</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Mondada</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Systems, Man and Cybernetics</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="396" to="407" />
			<date type="published" when="1996-06">Jun 1996</date>
		</imprint>
	</monogr>
	<note>IEEE Transactions on</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">The particle swarm optimization algorithm in size and shape optimization</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">C</forename><surname>Fourie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>Groenwold</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Struct. Multidisc. Optim</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="259" to="267" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Genetic Algorithms in Search, Optimization &amp; Machine Learning</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">E</forename><surname>Goldberg</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989">1989</date>
			<publisher>Addison-Wesley</publisher>
			<pubPlace>Reading, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Swarm Robotic Odor Localization: Off-Line Optimization and Validation with Real Robots</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">T</forename><surname>Hayes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Martinoli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">M</forename><surname>Goodman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Special Issue on Biological Robots</title>
		<editor>
			<persName><forename type="first">D</forename><surname>Mcfarland</surname></persName>
		</editor>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="427" to="441" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
	<note>Robotica</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Faster learning of control parameters through sharing experiences of autonomous mobile robots</title>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">D</forename><surname>Kelly</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Keating</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. Journal of System Science</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="783" to="793" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Particle swarm optimization</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Eberhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Neural Networks</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="1942" to="1948" />
			<date type="published" when="1995-11">1995. Nov/Dec 1995</date>
		</imprint>
	</monogr>
	<note>Proceedings</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Matching algorithms to problems: an experimental test of the particle swarm and some genetic algorithms on the multimodal problem generator</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M</forename><surname>Spears</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Conference on Evolutionary Computation</title>
		<meeting>IEEE International Conference on Evolutionary Computation<address><addrLine>Anchorage</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1998-05">May 1998</date>
			<biblScope unit="page" from="78" to="83" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Learning to Behave Socially</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Matarić</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 3rd Int. Conf. on Simulation and Adaptive Behaviors -From animals to animats 3</title>
		<meeting>of the 3rd Int. Conf. on Simulation and Adaptive Behaviors -From animals to animats 3</meeting>
		<imprint>
			<date type="published" when="1994">1994</date>
			<biblScope unit="page" from="453" to="462" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Challenges in evolving controllers for physical robots</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Matariíc</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Cliff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Robot. and Autonomous Syst</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page">6783</biblScope>
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Learning in behavior-based multi-robot systems: Policies, models, and other agents</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Matarić</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Cognitive Systems Research</title>
		<editor>
			<persName><forename type="first">Ron</forename><surname>Sun</surname></persName>
		</editor>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="81" to="93" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
	<note>Special Issue on Multi-disciplinary studies of multi-agent learning</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Webots: Professional Mobile Robot Simulation</title>
		<author>
			<persName><forename type="first">O</forename><surname>Michel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. of Advanced Robotic Systems</title>
		<imprint>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="39" to="42" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">An Introduction to Genetic Algorithms</title>
		<author>
			<persName><forename type="first">M</forename><surname>Mitchell</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996">1996</date>
			<publisher>MIT Press</publisher>
			<pubPlace>Cambridge, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Mobile robot miniaturisation: A tool for investigation in control algorithms</title>
		<author>
			<persName><forename type="first">F</forename><surname>Mondada</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Franzi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Ienne</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Third Int. Symp. on Experimental Robotics</title>
		<meeting>of the Third Int. Symp. on Experimental Robotics<address><addrLine>Kyoto, Japan</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1993-10">October, 1993</date>
			<biblScope unit="page" from="501" to="513" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Learning in multi-robot scenarios through physically embedded genetic algorithms</title>
		<author>
			<persName><forename type="first">U</forename><surname>Nehmzow</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 7th Int. Conf. on the Simulation of Adaptive Behavior: From animals to animats</title>
		<meeting>of the 7th Int. Conf. on the Simulation of Adaptive Behavior: From animals to animats</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="391" to="392" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Particle swarm optimization for unsupervised robotic learning</title>
		<author>
			<persName><forename type="first">J</forename><surname>Pugh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Martinoli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Swarm Intelligence Symposium</title>
		<imprint>
			<biblScope unit="page" from="92" to="99" />
			<date type="published" when="2005-06">June 2005</date>
			<pubPlace>Pasadena, CA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Relative Localization and Communication Module for Small-Scale Multi-Robot Systems</title>
		<author>
			<persName><forename type="first">J</forename><surname>Pugh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Martinoli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the IEEE International Conference on Robotics and Automation</title>
		<meeting>of the IEEE International Conference on Robotics and Automation<address><addrLine>Miami, Florida, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006">May 15-19, 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Layered Learning in Multi-Agent Systems</title>
		<author>
			<persName><forename type="first">P</forename><surname>Stone</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
		<respStmt>
			<orgName>School of Computer Science, Carnegie Mellon University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD Thesis</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
