<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Survey: Sharding in Blockchains</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Guangsheng</forename><surname>Yu</surname></persName>
							<email>guangsheng.yu@uts.edu.au</email>
							<affiliation key="aff0">
								<orgName type="department">The Global Big Data Technologies Centre</orgName>
								<orgName type="institution">University of Technology Sydney</orgName>
								<address>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">Food Agility CRC Ltd</orgName>
								<address>
									<postCode>81, 2007</postCode>
									<settlement>Broadway, Ultimo</settlement>
									<region>NSW</region>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">X</forename><forename type="middle">U</forename><surname>Wang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">The Global Big Data Technologies Centre</orgName>
								<orgName type="institution">University of Technology Sydney</orgName>
								<address>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">Food Agility CRC Ltd</orgName>
								<address>
									<postCode>81, 2007</postCode>
									<settlement>Broadway, Ultimo</settlement>
									<region>NSW</region>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Kan</forename><surname>Yu</surname></persName>
							<email>k.yu@latrobe.edu.au</email>
							<affiliation key="aff2">
								<orgName type="department">The Department of Computer Science and Information Technology</orgName>
								<orgName type="institution">La Trobe University</orgName>
								<address>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Wei</forename><surname>Ni</surname></persName>
							<email>wei.ni@data61.csiro.au</email>
						</author>
						<author>
							<persName><forename type="first">J</forename><forename type="middle">Andrew</forename><surname>Zhang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">The Global Big Data Technologies Centre</orgName>
								<orgName type="institution">University of Technology Sydney</orgName>
								<address>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Ren</forename><forename type="middle">Ping</forename><surname>Liu</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">The Global Big Data Technologies Centre</orgName>
								<orgName type="institution">University of Technology Sydney</orgName>
								<address>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">Food Agility CRC Ltd</orgName>
								<address>
									<postCode>81, 2007</postCode>
									<settlement>Broadway, Ultimo</settlement>
									<region>NSW</region>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Survey: Sharding in Blockchains</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">3161FF2F3E63554F3DC70D99D945A2F1</idno>
					<idno type="DOI">10.1109/ACCESS.2020.2965147</idno>
					<note type="submission">This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2020.2965147, IEEE Access This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2020.2965147, IEEE Access Guangsheng Yu et al.: Survey: Sharding in Blockchains This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2020.2965147, IEEE Access This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2020.2965147, IEEE Access Guangsheng Yu et al.: Survey: Sharding in Blockchains</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T05:04+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The Blockchain technology, featured with its decentralized tamper-resistance based on a Peer-to-Peer network, has been widely applied in financial applications, and even further been extended to industrial applications. However, the weak scalability of traditional Blockchain technology severely affects the wide adoption due to the well-known trillema of decentralization-security-scalability in Blockchains. In regards to this issue, a number of solutions have been proposed, targeting to boost the scalability while preserving the decentralization and security. They range from modifying the on-chain data structure and consensus algorithms to adding the off-chain technologies. Therein, one of the most practical methods to achieve horizontal scalability along with the increasing network size is sharding, by partitioning network into multiple shards so that the overhead of duplicating communication, storage, and computation in each full node can be avoided. This paper presents a survey focusing on sharding in Blockchains in a systematic and comprehensive way. We provide detailed comparison and quantitative evaluation of major sharding mechanisms, along with our insights analyzing the features and restrictions of the existing solutions. We also provide theoretical upper-bound of the throughput for each considered sharding mechanism. The remaining challenges and future research directions are also reviewed.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>W ORKING as distributed, incorruptible, and tamper- resistant ledgers, Blockchain technology has shown its great potential to tackle critical security and trust challenges in various applications, e.g., cryptocurrency, Internetof-Things, and edge computing <ref type="bibr" target="#b0">[1]</ref>- <ref type="bibr" target="#b2">[3]</ref>. Running over a peerto-peer network, Blockchain processes application requests in the form of Blockchain transactions <ref type="bibr" target="#b3">[4]</ref>. The transactions are mined into blocks by Blockchain miners following consensus protocols, e.g., Proof-of-Work (PoW) for permissionless Blockchains and the Practical Byzantine Fault Tolerance (PBFT) for permissioned Blockchains <ref type="bibr" target="#b4">[5]</ref>, and the blocks are chained with their hash values <ref type="bibr" target="#b0">[1]</ref>.</p><p>The throughput of a Blockchain system, defined as the number of processed transactions per second of the Blockchain, is far from practical requirements and has become a crucial limitation stopping Blockchain from being widely adopted <ref type="bibr" target="#b5">[6]</ref>. For example, Bitcoin can only handle up to approximately 10 transactions per second with its maximum block size of 1MB and average 10 minutes block period <ref type="bibr" target="#b6">[7]</ref>, which severely hinders the use of Blockchains in the high-frequency trading. To handle a great number of transactions, Blockchain has been considered as a secure base-layer (or a settlement center for cryptocurrencies) where transactions are processed off-chain and then settled in the Blockchain. For example, Lightning network and Raiden network (referring to the state-channel technology) support off-chain payments and broadcast a summary of a batch of off-chain payments to the Blockchain <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b8">[9]</ref>. Plasma (referring to the sidechain technology) builds various applications on the top of Ethereum <ref type="bibr" target="#b9">[10]</ref>. These methods, known as the Layer-2 scaling, minimize the interaction with the Blockchain to reduce the latency from the users' perspective but do not improve the throughput of Blockchains <ref type="bibr" target="#b10">[11]</ref>.</p><p>In contrast, the Layer-1 scaling is designed for improving the throughput of Blockchains from the systematic perspective. A Blockchain system can be optimized in the following ways to handle a growing amount of work.</p><p>• reducing the communication and computation overhead;</p><p>• adding resources to a single node, i.e., vertical scaling;</p><p>• adding more nodes to the Blockchain, i.e., horizontal scaling <ref type="bibr" target="#b11">[12]</ref>. Reducing overhead: New Blockchain consensus proto-cols have been developed for high Blockchain throughput by reducing the overhead. For example, every PoW winner (i.e., a miner) is eligible for several blocks rather than a single block in Bitcoin-NG <ref type="bibr" target="#b12">[13]</ref> and its variations <ref type="bibr" target="#b13">[14]</ref>, <ref type="bibr" target="#b14">[15]</ref>. The traditional PBFT consensus protocol has been developed and optimized to reduce the communication overhead and achieve high throughput in large-scale networks <ref type="bibr" target="#b15">[16]</ref>- <ref type="bibr" target="#b18">[19]</ref>. However, O(n) (n is the number of participating miners) is the lower bound that this type of technologies can reduce the overhead at most, as every participating miners have to exchange and store messages during every consensus round regardless of the route of transactions.</p><p>Vertical scaling: Bitcoin tried to improve throughput by vertical scaling methods. For example, increasing the number of allowed transactions in a single block and/or reducing the block period can improve the throughput of Bitcoin but consume more resources, e.g., storage, computation, and bandwidth, of Bitcoin nodes <ref type="bibr" target="#b19">[20]</ref>- <ref type="bibr" target="#b22">[23]</ref>. Beyond this, The Greedy Heaviest Observed Subtree (GHOST) <ref type="bibr" target="#b23">[24]</ref> is implemented by Ethereum to organize blocks in a tree instead of a chain of blocks and obtain a higher throughput <ref type="bibr" target="#b3">[4]</ref>. The GHOST is subsequently extended to the directed acyclic graph (DAG). The DAG is adopted to organize transactions where every transaction contains hash values pointing to existing transactions <ref type="bibr" target="#b24">[25]</ref>- <ref type="bibr" target="#b29">[30]</ref>. The DAG structure allows transactions to be confirmed in parallel and thus improves the network utilization ratio given the resources of a node, which improves the throughput of the entire distributed system. However, the vertical scaling methods cannot infinitely improve the throughput, as a Blockchain system is designed to run in a decentralized and homogeneous network where the security is closely dependent on the consensus across the entire network. The larger-scale the network is, the more bandwidth is needed to achieve the network synchronization, while the bandwidth is the resource that cannot be indefinitely added <ref type="bibr" target="#b19">[20]</ref>. This leads to the vertical scaling being compromised to the throughput of resources-limited nodes.</p><p>Horizontal scaling: Sharding technology, dividing a whole Blockchain into multiple shards and allowing participating nodes to process and store transactions of a few shards (i.e., only parts of the Blockchain), holds the key to horizontal scaling, also known as the scale-out technology. By taking advantage of the sharding technology that allows partial transactions processing and storage on a single node, the whole Blockchain can achieve a linearly increasing throughput with the growing number of nodes. This is important for the adoption of Blockchains providing high quantity and quality of services to the public in large-scale networks with infinite growth, which has attracted the interest of researches regarding the improvement of the Blockchain scalability.</p><p>A number of studies have proposed new sharding mechanisms. Surveys of Blockchain scalability which used to only focus on Reducing overhead and Vertical scaling have been gradually taking the sharding technology into account. However, none of them was able to focus on sharding and systematically introduce the challenges of sharding, features and restrictions of the existing solutions, and the future trends.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. OUR CONTRIBUTIONS</head><p>We provide a more systematic introduction of sharding mechanisms than existing surveys and papers. The key contributions are highlighted as follows.</p><p>1) Our work, for the first time, provides an introduction of state-of-the-art sharding mechanisms ranged from BFT-based to Nakamoto-based sharding mechanisms, while the latter has never been systematized in any of the existing surveys at the time of writing. 2) We gain our own insights analyzing the features and restrictions into the existing solutions to the intraconsensus-safety, atomicity of cross-shard transactions, and general challenges and improvements proposed by the considered sharding mechanisms. 3) We also provide a calculation to obtain the theoretical upper-bound of throughput for each considered sharding mechanism. Based on the result and the insights of the features and restrictions of each existing sharding solution, a comprehensive comparison is proposed. 4) Finally, we point out the current remaining challenges of sharding mechanisms, followed by suggestions for the future trend of designing reliable sharding mechanisms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. RELATED WORK</head><p>The relationship between the existing studies and our work is discussed. Note that, all the considered previous studies highlight the trend of scalability in the future of Blockchains, and intend to accommodate the existing solutions to scale Blockchain systems. These solutions include but not limited to upgrading Bitcoin (increasing block size or conducting Segregated Witness), scalable consensus algorithms, statechannels, and multiple sidechains structure. Previous surveys including <ref type="bibr" target="#b30">[31]</ref>- <ref type="bibr" target="#b37">[38]</ref> discuss the aforementioned solutions, but involve no information about the sharding which has been realized to be the most practical solution so far for a scale-out Blockchain system. Thus, there have been several recent studies presenting their own sharding mechanisms, as well as surveys that manage to summarize them and propose new benchmarks <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b38">[39]</ref>- <ref type="bibr" target="#b52">[53]</ref>. However, all of these studies compare the sharding with other kinds of solutions by either presenting a vague introduction of only one or two sharding mechanisms, or lacking the insights for evaluation, except <ref type="bibr" target="#b38">[39]</ref>, <ref type="bibr" target="#b42">[43]</ref>, <ref type="bibr" target="#b49">[50]</ref>, <ref type="bibr" target="#b50">[51]</ref>, <ref type="bibr" target="#b52">[53]</ref> putting more efforts on introducing sharding. <ref type="bibr" target="#b38">[39]</ref> makes use of the scale cube architecture, highlighting that the horizontal scalability should only be improved by partitioning the data and consensus. However, it only provides a vague introduction of Ethereum 2.0, and the same problem exists in <ref type="bibr" target="#b42">[43]</ref> where the consensus layer is decoupled from the ledger topology layer (which is inappropriate due to the importance of intra-consensus in a sharding system). <ref type="bibr" target="#b49">[50]</ref> presents an </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>FIGURE 1.</head><p>The sharding technology partitions the network into different groups, while each of the groups maintains its own ledger and processes and stores a disjoint set of transactions. By implementing a secure cross-shard communication protocol, such disjoint transaction sets that could not have been interacted become securely verifiable and interactively executable in parallel. Note that, nodes in some sharding mechanisms (e.g., Monoxide) can choose to participate in the processing of multiple shards and maintain their ledgers, as illustrated by the multicolored circles, while the unicolored circles denote the nodes only participating in a single shard to which they are assigned in terms of the color.</p><p>analytic model in a game-theoretical way that is designed to benchmark the existing sharding mechanisms, and aim for design guidance for future solutions. However, sharding can be thought as the "multiple committees" upon the traditional Byzantine-Faulty-Tolerance (BFT)-based consensus, as stated in <ref type="bibr" target="#b46">[47]</ref>, <ref type="bibr" target="#b49">[50]</ref>, has been outdated as <ref type="bibr" target="#b53">[54]</ref> proposes a Nakamoto-based sharding mechanism (Monoxide). A unified comparison between such Nakamoto-based sharding mechanisms and the BFT-based sharding mechanisms is also absent in <ref type="bibr" target="#b50">[51]</ref> and the most closely related survey <ref type="bibr" target="#b52">[53]</ref> (where the BFT-based sharding mechanisms are focused, as well as the corresponding randomness generators).</p><p>To the best of our knowledge, our work outweighs all the existing surveys in a more systematic way, in regards to the key concept of various sharding mechanisms, and a comprehensive comparison for practitioners based on our insights.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. PAPER OUTLINE</head><p>The rest of the paper is organized as follows. Section II briefly presents an overview of sharding technology and introduces the survey methodology. Section III presents an introduction of the considered sharding mechanisms, upon which the comparison and discussion are presented in Section IV. Section V concludes the survey.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. SHARDING REVIEW AND SURVEY METHODOLOGY A. OVERVIEW OF THE SHARDING TECHNOLOGY</head><p>Sharding is first proposed by <ref type="bibr" target="#b54">[55]</ref> and commonly used in distributed databases and cloud infrastructure. Based on the pioneering proposals <ref type="bibr" target="#b55">[56]</ref>, <ref type="bibr" target="#b56">[57]</ref> integrating sharding with permissioned and permissionless Blockchain, respectively, the sharding technology is thought to be able to partition the network into different groups (shards), so that the compulsory duplication of three resources (i.e., the communication, data storage, and computation overhead) can be avoided for each participating node, while these overheads must be incurred by all full nodes in traditional non-sharded-Blockchains. This partition is essential because the restriction incurred by the three resources owned by a single node may make the system unable to take full advantage of a scalable consensus algo-rithm. Sharding is so far one of the most practical solutions to achieve a scale-out system where the processing, storage, and computing can be conducted in parallel, as illustrated in Fig. <ref type="figure">1</ref>. As such, the capacity and throughput being linearly proportional to the number of participating nodes or the number of shards become possible, while preserving decentralization and security. However, sharding poses new challenges to Blockchains, i.e., the intra-consensus-safety, crossshard-atomicity, and the general improvements regarding the storage, latency, etc, where the detail is our concentration and is described starting from Section III.</p><p>There have been a few studies working on these challenges regarding the sharding in permissionless Blockchains <ref type="bibr" target="#b53">[54]</ref>, <ref type="bibr" target="#b56">[57]</ref>- <ref type="bibr" target="#b60">[61]</ref>, prior to which <ref type="bibr" target="#b55">[56]</ref> proposes a sharded permissioned Blockchain that will not be discussed in this survey due to its forfeit of permissionless decentralization. Rather, the sharding in permissionless Blockchains is focused.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. SURVEY METHODOLOGY</head><p>This survey focuses on sharding in permissionless Blockchains (as permissioned Blockchains do not take full advantage of the sharding technology due to the smaller network size and its forfeit of permissionless decentralization), and is based on the published research papers and other research references of Monoxide <ref type="bibr" target="#b53">[54]</ref>, Elastico <ref type="bibr" target="#b56">[57]</ref>, OmniLedger <ref type="bibr" target="#b57">[58]</ref>, Rapidchain <ref type="bibr" target="#b58">[59]</ref>, Chainspace <ref type="bibr" target="#b59">[60]</ref>, and Ethereum 2.0 <ref type="bibr" target="#b60">[61]</ref>. Our methodology can be characterized as follows.</p><p>1) We clarify the demand for high scalability in Section I, based on the well-known trillema of decentralizationsecurity-scalability in Blockchains. We discuss the potential solutions ranged from the Layer-1 scaling (onchain scaling) to Layer-2 scaling (off-chain scaling), with the former being focused in order to address the throughput issue. Upon this, we elaborate on the importance of the scale-out technology of Layer-1 scaling, i.e., sharding, which is thought to be orthogonal to any other scalable technologies, and so far the most practical solution to achieve horizontal scalability in large-scale Blockchain networks.</p><p>2) We summarize six of the most well-known and typical sharding mechanisms in large-scale permissionless Blockchains, i.e., Monoxide, Elastico, OmniLedger, Rapidchain, Chainspace, and Ethereum 2.0, which are characterized in intra-consensus-safety, cross-shardatomicity, and general improvements, respectively presented in Section III-A, Section III-B and Section III-C. 3) Based on the previous description of the considered sharding mechanisms, we provide our own insights in regards to each of the features, 1) what issues in a sharding system the features have addressed; and 2) the restrictions of these features. Besides, we provide a comparison, based on the insights and our calculation, as shown in Section IV-A, among the considered sharding mechanisms. Finally the result is characterized in Tables <ref type="table" target="#tab_2">2</ref> and<ref type="table" target="#tab_8">3</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. DESCRIPTION</head><p>As a Layer-1 solution to the scalabilty issue of Blockchain systems, and the most practical solution to push Blockchain systems to scale-out in terms of communication bandwidth, disk storage, and computation (i.e., full-sharded), there are two significant issues each sharding mechanism needs to resolve. intra-consensus-safety: how to secure the consensus algorithm inside a shard away from both the Nakamoto-based and BFT-based 1% attack <ref type="bibr" target="#b60">[61]</ref> in a scalable way, while the latter can also be corresponding to a secure randomness generation process, as discussed in Section III-A; note that 1% attack is an attack strategy in sharded networks where attackers can dominate a single shard more easily than dominating the whole network; cross-shard-atomicity: how to support the crossverification, and guarantee the Atomicity <ref type="bibr" target="#b61">[62]</ref>, <ref type="bibr" target="#b62">[63]</ref> of crossshard transactions for both unconditional transactions (simple payment) and conditional contract-oriented transactions in an efficient way (inefficient if the latency and overhead for achieving atomic-safe cross-shard transactions are higher than O(n); n denotes the number of shards being partitioned or the number of participating nodes), as discussed in Section III-B;</p><p>general improvements: based on the intra-consensussafety and cross-shard-atomicity, we focus on the improving factor N regarding the multiple of optimized global throughput for each considered sharding mechanism, while N is subject to the linear order O(n). On the other hand, the additional latency and overhead originated from the proposed solutions also reveal the new problems that sharding brings to us. In regard to this, some general improvements are discussed in Section III-C.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. INTRA-CONSENSUS PROTOCOL</head><p>Sharding significantly increases the throughput in O(n), but sacrificing security in intra-consensus protocols, i.e., the perzone security or 1% attack <ref type="bibr" target="#b53">[54]</ref>, <ref type="bibr" target="#b60">[61]</ref>. Concretely, it is cate-gorized into the Nakamoto-based 1% attack and BFT-based 1% attack.</p><p>The total amount of mining power among the network, i.e., P, guarantees the low probability for a single entity to dominate over 50% mining power. By purposely dividing the network into n partitions (shards), we can greatly increase the throughput in O(n), where rational miners tend to ideally distribute their mining power in multiple shards (at most n shards) in order for the maximum rewards. However, this also decreases the security of PoW in each shard in O(1/n). Such a system can be more prone to double-spend attack by a malicious miner that only needs to own the mining power P &gt; P/n × 50% due to the smaller shard size compared to the entire network size. This issue deteriorates as n increases in order for a larger throughput, which becomes the most serious barrier to PoW being implemented for the intraconsensus protocol of a sharding mechanism.</p><p>On the other hand, BFT-based consensus algorithms are considered instead of PoW in order to solve the security challenge, as discussed above. However, such designs introduce another kind of vulnerabilities other than that of the PoWbased one, as discussed in the following.</p><p>• It is of importance to carefully design a scheme to generate an unpredictable and unbiasable randomness without any third-parties in permissionless Blockchains.</p><p>The randomness can be used to 1) allocate validators (an alias for nodes participating in the intra-consensus process in the context of BFT-based systems) into different shards at the beginning phase and every reconfiguration phase; 2) select the leader of each shard; and 3) decide which shards a cross-shard transaction should broadcast to, etc. Without such a strictly-chosen randomness, malicious validators may be able to bias the allocation and control the elections at will, such as collusion within a shard (with a small number of validators due to the weak scalability of traditional BFTbased consensus algorithms [64], e.g., PBFT <ref type="bibr" target="#b4">[5]</ref>). • Then it ends up encountering the dilemma of BFT-based 1% attack that the weak scalability of BFT-based consensus algorithm restricts the shard size, i.e., the number of members in a shard, while too small a size can potentially decrease the security of the intra-consensus with a strict fault-tolerance (FT), as described by the following cumulative binomial distribution,</p><formula xml:id="formula_0">s(k, m, p) = P [X ≤ c] = c k=0 m k p k (1 -p) m-k , f (k, m, p) = 1 -s(k, m, p),<label>(1)</label></formula><p>where X is the random variable that represents the number of times a malicious miner is picked <ref type="bibr" target="#b12">[13]</ref>, <ref type="bibr" target="#b56">[57]</ref>, <ref type="bibr" target="#b57">[58]</ref>, <ref type="bibr" target="#b63">[65]</ref>; m denotes the shard size; c denotes the number of malicious members within a shard; and p denotes the total FT among the entire network. It is strongly suggested that s(k, m, p) should be greater than 99% <ref type="bibr" target="#b63">[65]</ref>, while only m 144 can satisfy, of which the traditional BFT-based consensus algorithm cannot be capable <ref type="foot" target="#foot_0">1</ref> . In order to resolve this, highly scalable BFT-based consensus algorithms with large shard size require more attractions. In this section, we compare and discuss the intraconsensus protocols of the considered sharding mechanisms, i.e., Monoxide, Elastico, Chainspace, OmniLedger, Rapid-Chain, and Ethereum 2.0. Note that the Shasper used in Ethereum 2.0 features its novel and engineering-oriented design that combines the two major issues (intra-consensussafety and cross-shard-atomicity) and kills two birds with one store. Elastico and Chainspace use PBFT for intra-consensus that are not discussed in detail in this section, while the randomness generator of Chainspace is not discussed as the detail is not provided in <ref type="bibr" target="#b59">[60]</ref>.</p><p>Also note that, a threat model where the attackers can refuse to participate or collude others (behave arbitrarily) takes effect in all discussed sharding mechanisms in this survey. Also, Elastico <ref type="bibr" target="#b56">[57]</ref>, OmniLedger <ref type="bibr" target="#b57">[58]</ref>, and Rapid-Chain <ref type="bibr" target="#b58">[59]</ref> assume the slowly adaptive attackers (who can only succeed to attack in a long time), while Monoxide <ref type="bibr" target="#b53">[54]</ref>, Ethereum 2.0 <ref type="bibr" target="#b60">[61]</ref>, and Chainspace <ref type="bibr" target="#b59">[60]</ref> assume a model of uncoordinated majority where all participators are game-theoretically rational, i.e., egoism (with an upperbounded fraction that can coordinate the majority). Therein Chainspace <ref type="bibr" target="#b59">[60]</ref> also introduces an audit scheme to prevent attacks from dishonest shards.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1) Nakamoto-based -Monoxide -Chu-ko-nu mining</head><p>Monoxide is the first sharding mechanism that eliminates the need for generating randomness, and implements Nakamoto consensus algorithm for its intra-consensus. It introduces a one-off bootstrapping in the beginning, to allocate each node (including miners and non-miners) into different shards based on their identity addresses. By using the proposed Chuko-nu mining, Monoxide can achieve a large-scale network with a huge number of shards and a flexible shard size. It involves a Merkle Patricia Tree (MPT) <ref type="bibr" target="#b64">[66]</ref> root consisting of all proposed blocks among multiple shards, thus the P/n can be multiplied by a factor k (k denotes the number of shards a particular miner manage to mine on). Consequently, dispersing mining power can be re-aggregated to solve the 1% attack.</p><p>Chu-ko-nu mining is inspired by the merged mining first proposed in <ref type="bibr" target="#b65">[67]</ref> and discussed in <ref type="bibr" target="#b66">[68]</ref>. Merged mining shares the mining power among a parent chain and multiple auxiliary chains based on the same kind of PoW algorithms being run. As such, those auxiliary chains with relatively smaller mining power can be protected by the total mining power of the parent chain. Likewise, Monoxide shares a similar idea but conducting the mining process across multiple parallel shards without any hierarchy. By involving an MPT root consisting of all proposed blocks among the shards that a specific miner cares about, the effective mining power can be amplified by a factor of k. Defined in <ref type="bibr" target="#b53">[54]</ref>, the effective mining power differs from the physical mining power, in the sense that the physical mining power is calculated in hashrate (the number of hash values that a miner can probe the nonce per second) which directly corresponds to the total mining power P, and the hardware performance (e.g, CPU or GPU), while the effective mining power is indirectly obtained by observing the block period and difficulty. They are expected to be equaled in a non-sharded system, while with Chu-konu mining, the normal block can be replaced by a batchchaining-block (containing the information of the involved shards, e.g., 1) the identity of each shard; 2) from/to which shard the proposed block is received/sent; and 3) the MPT proof of the proposed new block of the local shard associated with the given MPT root, etc), so that a one-off physical mining can be done to meet the different (or identical) difficulties associated with its shard. Thus, the similar block periods among the shards contribute to an effective mining power of Pk/n P as k → n, hence addressing the 1% attack.</p><p>To be specific, the PoW expression for a miner conducting Chu-ko-nu mining is described as <ref type="bibr" target="#b1">(2)</ref>,</p><formula xml:id="formula_1">H(η H(x M P T M )) ≤ γ,<label>(2)</label></formula><p>where γ denotes the PoW target corresponding to a certain difficulty; H denotes the hash function; η denotes the nonce that fulfills (2); x denotes the header content, including the aforementioned information of the involved shards and the other fields defined in the normal PoW, as well as the inbound and outbound relay transactions in regards to the crossshard communication (discussed in Section III-B1); M P T M denotes the MPT root consisting of all proposed blocks of each involved shard, i.e., [B 0 , B 1 , ..., B n-1 ] if k = n, where each proposed block excludes its η, and contains its identity and the list of relay transactions. Thus, the miner can subsequently send the finalized block to its corresponding shard with a satisfied η, as well as a proof,</p><formula xml:id="formula_2">[M P T M , η, B i , π i ],<label>(3)</label></formula><p>where π i denotes the MPT proof of B i in the given MPT with a root of M P T M . Any node can verify B i with π i , and malicious miners have to revert the history in all involved shards, i.e., from 0 to n -1 in this case, to double-spend the transactions because of M P T M being already updated with the change of leaves. Thus, the effective mining power is amplified by a factor of n. Note that, Chu-ko-nu mining can handle both the mixed and identical PoW targets of shards in one batch.</p><p>whose PoW targets have been fulfilled by the current given η, with the rest of shards whose targets have yet to be satisfied. After that, the mining process resumes, while M P T M is updated because of the just finalized blocks from shards i to j. • In the case of identical PoW targets, a miner can also finalize blocks and send them to all shards regardless of whether the given η fulfills the PoW targets or not (assume the PoW targets are asymptotically equal <ref type="foot" target="#foot_3">2</ref> , and there must be some shards accepting its block and some rejecting). In addition to this, a global subnet maintaining and broadcasting headers from all shards where all miners must participate can significantly reduce the communication overhead, by eliminating the need of π i .</p><p>Having known these two modes, it is observed that accepting/rejecting a block of a single shard is independent of the decisions from other shards, i.e., asynchronization. Such a feature greatly promotes the throughput of Monoxide in a secure way, and also allows the cross-shard-atomicity in Monoxide, i.e., Relay transactions, as discussed in Section III-B1. However, in order to meet the requirement of Pk/n P, Monoxide needs most of miners to conduct Chu-ko-nu mining across as many shards as possible, i.e., k = n in the best case. However, this implies the fact that if miners only mine on k out of n shards, i.e., Pk/n, where k n, the factor expected to amplify the effective mining power will be too small to secure the mining process, hence reducing the attack cost. On the other hand, rational miners tend to mine on all n shards to reap the maximum profit, which may also result in the power centralization due to the huge cost of bandwidth, disk storage, and computing processors that only the professional mining facilities can afford.</p><p>Insight 1. The amplification to the effective mining power relies on an incentive scheme that should encourage miners to mine across k → n shards in Chu-ko-nu mining. This also poses the issue of power centralization and additional overhead to Monoxide.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2) BFT-based -Elastico</head><p>Using BFT-based algorithms for the intra-consensus is an alternative to bypass the vulnerability of Nakamoto-based algorithm (Insight 1). Thus, including but not limited to Elastico, OmniLedger, RapidChain, Chainspace, and Ethereum 2.0 choose to implement BFT-based algorithm. Therein, Elastico uniformly (re)allocates potential validators in terms of the different least-significant bits of the unpredictable PoW solutions at the beginning of each epoch, followed by running PBFT for the intra-consensus. The randomness used during the mining is generated by a proposed distributed commit-and-xor scheme.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Consensus Algorithm -PBFT's restrictions in sharding</head><p>Due to the weak scalaibilty of PBFT, Elastico incurs an unacceptable failure probability of 8% with f (k, m, p) = f (6, 16, 0.25) based on the result of [64], while it still incurs 2.76% with f (k, m, p) = f (34, 100, 0.25) even extending to a larger-scale network of m = 100 (which can be the bottleneck <ref type="bibr" target="#b57">[58]</ref>) by running powerful servers in cloud. This security issue has been hindering Elastico to be practically used, which are greatly resolved and improved by Om-niLedger and RapidChain.</p><p>Insight 2. The traditional non-scalable PBFT incurs unacceptably high failure probability with total FT of only 25%, unless increasing the size of the consensus group, which leads to a chicken-and-egg problem due to huge communication overhead.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Generating Randomness -Distributed commit-and-xor scheme</head><p>The distributed commit-and-xor scheme is implemented for the randomness generation in Elastico. It can be categorized into the commit-and-then-reveal scheme <ref type="bibr" target="#b67">[69]</ref>, with an exception that the final result (randomness) varies depending on the different combinations of seeds λ i every validator chooses. Concretely, the randomness generation is conducted by a global subset, i.e., the final committee, and it follows the procedures shown as below.</p><p>1) Each member of the final committee chooses a random seed λ i in secret, and broadcasts Hash(λ i ) to any other members in the final committee. After that, members in the final committee agree on a single set of hash values S <ref type="bibr" target="#b68">[70]</ref>, with numbers of Hash(λ i ) ranging from [2m/3, 3m/2] (m denotes the size of the final committee) <ref type="foot" target="#foot_4">3</ref> . 2) Only if S collects at least 2m/3 signatures, every validator in the final committee reveals their own seed λ i to the public. By collecting and verifying all 2m/3 (or m/2+1) pairs of (λ i , Hash(λ i )), the final randomness can be finalized by taking an XOR operation among them. Note that, in the case of 3m/2 pairs are received, the chosen λ i values need to be attached with the PoW solution in order to verify if the randomness is matched. This is because the combination of the seeds chosen by a validator can vary (m/2 + 1 out of 3m/2). This design, however, is not perfectly unbiased. It is exponential biased and bounded by the size of λ i , i.e., |λ i |, and m. In order to prevent the attacks from biasing the randomness by deliberately choosing a specific set of m/2 + 1 values of λ i in his favor, |λ i | should be large enough as m also increases. This incurs large communication overhead, in addition to the overhead of the extra verification during PoW process. In the case of only 2m/3 values of (λ i , Hash(λ i )) being received, the lack of Verifiable Secret Sharing (VSS) <ref type="bibr" target="#b69">[71]</ref>- <ref type="bibr" target="#b73">[75]</ref> forces all senders of these 2m/3 values to be online all the time with no network outage or delay.</p><p>Insight 3. The distributed commit-and-xor scheme of Elastico has weak availability and robustness, and it is not a perfectly unbiased randomness generator unless paying more for the communication overhead.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3) BFT-based -Chainspace</head><p>Chainspace uses an optimal implementation of PBFT, Mod-SMaRt <ref type="bibr" target="#b74">[76]</ref>, which accounts for the intra-part of the S-BAC protocol proposed by Chainspace. However, Mod-SMaRt does not scale PBFT to address the issue of 1% attack. It decouples the communication and consensus primitives, while it only reduces the overhead of the latter with an unchanged overhead of O(n 2 ) by replacing the process with the Validated and Provable Consensus (VP-Consensus). In addition, the high failure probability of the intra-consensus in Elastico also takes effects in Chainspace, which restricts the use of Chainspace in a large-scale network. Note that, the stages of Propose and View change take as input the elected leader, while the detail of randomness generator is not provided in <ref type="bibr" target="#b59">[60]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4) BFT-based -OmniLedger</head><p>OmniLedger combines RandHound <ref type="bibr" target="#b75">[77]</ref> and Algorand-based Verifiable Random Function (VRF) <ref type="bibr" target="#b76">[78]</ref> to produce an unpredictable and unbiasable randomness under a 25% FT for re-allocation and leader-election of each shard and subgroup. Also, a new scalable BFT-based consensus algorithm, ByzCoinX, is proposed by optimizing ByzCoin <ref type="bibr" target="#b63">[65]</ref>, which resolves the dilemma of BFT-based 1% attack in sharding, by increasing the shard size to hundreds and up to a thousand.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Consensus Algorithm -ByzCoinX</head><p>Initially, ByzCoin <ref type="bibr" target="#b63">[65]</ref> was the first scalable consensus protocol that combines PoW and BFT algorithms in a treebased structure, by means of scalable collective signing (CoSi) <ref type="bibr" target="#b77">[79]</ref>, <ref type="bibr" target="#b78">[80]</ref>.</p><p>ByzCoinX 4 optimizes ByzCoin in terms of the better latency and more robust FT for a shard with hundreds of validators. Concretely, ByzCoinX implements a shallow tree 4 https://github.com/dedis/cothority/tree/master/byzcoinx with a fixed depth-3 and an increasing branching factor; see Fig. <ref type="figure" target="#fig_1">2</ref>. Based on the shard size, each group leader is responsible for a group forming a sub-tree with a fixed number of group members. Note that, unlike ByzCoin implementing PoW to elect the group leader within a shifting window, ByzCoinX elects each group leader by the randomness generated at the beginning of the current epoch, followed by evenly allocating the rest of the validators into each group (thus the validators account for the leaves of each sub-tree). Also, the group leaders maintain their roles until a view change phase occurs, which eliminates the shifting window, as well as the difference of keyblocks and microblocks, as defined in ByzCoin. The leaders of each sub-tree aggregate at least 2/3 signatures from its children (leaves), followed by the signature regarding each group being sent to the root (protocol leader). The decision can be finalized whenever the root receives at least 2/3 signatures from its children (group leaders).</p><p>By using such a new tree-based structure, ByzCoinX can outperform ByzCoin by a better latency for a shard with hundreds of validators due to the shorter path from leaves to the root with a fixed depth, and a robust fault-tolerance due to the increasing branching factor. When the number of validators goes above a threshold, the latency of ByzCoin outperforms that of ByzCoinX due to the increasing branching factor. On the other hand, ByzCoinX can achieve a failure probability around 1.5% with f (k, m, p) = f (48, 144, 0.25), and even 1% with f (342, 1024, 0.3) at the cost of latency, as shown in Fig. <ref type="figure">10</ref> of <ref type="bibr" target="#b57">[58]</ref>.</p><p>Insight 4. ByzCoinX improves the scalability with a lower failure probability for the intra-consensus of OmniLedger, by sacrificing the transaction latency in large-scale networks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Generating Randomness -Combination of RandHound and VRF</head><p>In order to address the issue of Insight 3, OmniLedger implements a scalable bias-resistant distributed randomness generator, RandHound <ref type="bibr" target="#b75">[77]</ref>, combined with a VRF-based leader election algorithm proposed by Algorand <ref type="bibr" target="#b76">[78]</ref>.</p><p>RandHound takes advantage of the following technologies to achieve an unbiasable and unpredictable randomness generator,</p><p>• Publicly VSS (PVSS) <ref type="bibr" target="#b71">[73]</ref> that allows participating validators to be offline during the reveal phase (as opposed to the traditional commit-and-then-reveal scheme used in Elastico), by broadcasting the secret shares of the original λ i in advanced; • Schnorr Signature <ref type="bibr" target="#b79">[81]</ref> that is the foundation of CoSi <ref type="bibr" target="#b77">[79]</ref>, <ref type="bibr" target="#b78">[80]</ref> used in ByzCoinX and the threshold signatures <ref type="bibr" target="#b80">[82]</ref>- <ref type="bibr" target="#b84">[86]</ref>, so that the communication complexity can be reduced to O(cm 2 ) from O(m 3 ) (m denotes the total number of participating validators; c denotes the size of sub-group).</p><p>Several sub-groups are created by dividing the entire group of the participating validators, with c validators conducting PVSS within their sub-groups, respectively. Thus, a client (the leader randomly elected by the VRF) can receive the secret shares based on his choice from the corresponding subgroups in a global run of CoSi. Consequently, the client can construct collective randomness by recovering the received secret shards. Meanwhile, a proof to verify the produced randomness is also recorded for third-party verifications.</p><p>OmniLedger implements a VRF-based election in order to randomly choose such a leader as the client among these participating validators. To be specific,</p><formula xml:id="formula_3">R E,view,i , π E,view,i = V RF (conf ig E ||view, sk i ),<label>(4)</label></formula><p>where conf ig E denotes the settings pre-defined by a thirdparty; sk i denotes the private key of a validator-i; view denotes a view number related to a timeout ∆; R E,view,i and π E,view,i denote the final randomness and its proof with specific epoch E and view for validator-i. By default, the validator with the smallest R E,view,i is selected to be the leader, and view increases if this round of RandHound is timeout. In the case of view &gt; 5 (proven &lt; 1% by <ref type="bibr" target="#b57">[58]</ref>), the RandHound is replaced by a coin-tossing scheme inspired by <ref type="bibr" target="#b85">[87]</ref> that only implements a typical PVSS <ref type="bibr" target="#b72">[74]</ref> in a poor complexity of order O(m 3 ). On the other hand, this protocol still relies on third-party settings conf ig E pre-defined in the genesis block to prevent the attackers from biasing the result by secretly rerunning the protocol.</p><p>Insight 5. The combination of RandHound and VRF suffers from the reliance on a third-party initial randomness predefined in the genesis block. A falling-back to an inefficient scheme occurs in the context of asynchronous networks, which limits the salability that RandHound could have guaranteed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5) BFT-based -RapidChain</head><p>RapidChain <ref type="bibr" target="#b58">[59]</ref> implements a VSS-based <ref type="bibr" target="#b69">[71]</ref> distributed random generation (DRG) protocol to agree on an unbiased randomness. On top of the DRG protocol, RapidChain addresses Insight 5 by introducing a deterministic random graph where a certain fraction (50% with high probability <ref type="bibr" target="#b58">[59]</ref>) of the number of malicious validators can be guaranteed in the initial set (the reference committee, similar to the final committee in Elastico), which will be discussed in Section III-C4. Inspired by <ref type="bibr" target="#b86">[88]</ref>, in addition, RapidChain resolves the dilemma of BFT-based consensus algorithm in sharding, by increasing the FT of the intra-consensus protocol up to 50%.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Consensus Algorithm -50% BFT with pipelining</head><p>RapidChain aims for higher FT (50% BFT) of the intraconsensus protocol to address the dilemma of BFT-based 1% attack for sharding mechanisms with a small shard size. To be specific, RapidChain runs an autonomous prescheduled scheme within a shard to agree on a timeout ∆, based on which the consensus speed can be adjusted by the system to prevent the asynchronization. This ensures </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>FIGURE 3.</head><p>RapidChain implements a synchronous BFT-based consensus protocol by pre-scheduling the timeout, based on which the consensus speed can be adjusted by the system, hence achieving FT of 50%. In addition, RapidChain significantly improves the throughput by pipelining the conseusus process, i.e., re-proposing the previous pending blocks while agreeing on the current proposed block. The dark red arrows denote that the leader gossips more than one version of Hi+1, while the yellow arrows denote pending associated with the proposed header of iteration i + 1.</p><p>a synchronous network in the long-term, in which a nonresponsive synchronous (with constant rounds) BFT-based consensus protocol with FT of 50% can be used.</p><p>However, re-proposing the pending block by the new leader in the next iteration greatly reduces the throughput by roughly half, while the current leader that is corrupted equivocates the consensus (if based on the original version of <ref type="bibr" target="#b86">[88]</ref>). In order to address this issue, the pipelining is used where pending blocks can be re-proposed along with the new block that is considered safe; see Fig. <ref type="figure">3</ref>, (H i+1 , H i+2 ) are proposed during iteration i + 2. Note that, a new proposed block is considered safe so long as it points to a pending block that has been collected m/2 + 1 votes. Also note that, a valid vote can be either,</p><p>• temporary vote: an echo associated with the proposed header, H i of iteration i; or, • permanent vote: an accept associated with the proposed header, H i of iteration i (if and only if there is only one version of header H i received from the leader, and at least m/2 + 1 echoes of the same H i received from others, tagging the header as pending otherwise). As there exist multiple versions of headers associated with a specific iteration, e.g., [H i+1 , H i+1 , H i+1 ...] of iteration i + 1, only one version is selected by the leader of iteration i + 2 to be re-proposed along with H i+2 . Here, H i+2 is considered safe as H i+1 has been collected m/2 + 1 echoes serving as a proof in iteration i + 1. Consequently, (H i+1 , H i+2 ) are accepted if any nodes have received at least m/2 + 1 echoes associated with both H i+1 and H i+2 .</p><p>Referring to (1), the design of 50% BFT achieves a failure probability around 1.5% with f (k, m, p) = f (17, 32, 0.33), and even 1% with f (51, 100, 0.39) at a cost of communication overhead. Insight 6. Differing from ByzCoinX in OmniLedger, the 50% BFT of RapidChain solves the BFT-based 1% attack by increasing the FT of intra-consensus protocol, nevertheless, this can only suit small-sized shards (not scalable with communication overhead of O(n 2 )). In addition, the prescheduled scheme defining the timeout is not conceivably proved synchronous enough to run the pipelining 50% BFT.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Generating Randomness -VSS-based DRG protocol</head><p>The proposed DRG protocol by RapidChain, in fact, only implements a basic VSS-shares scheme, where all participating validators can reconstruct the final randomness r by the share of r (the share equals to m l=1 ρ lj calculated by other validators except validator-j) received from other validators. Note that, ρ ∈ F p denoting a finite field of prime order p, and m denotes the size of the reference committee. As a result, the DRG protocol encounters a similar issue to that of any other typical VSS scheme, i.e., non-scalable (even though it suits with the 50% BFT in small-sized shards).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6) BFT-based PoS -Ethereum 2.0</head><p>Ethereum has been running publicly as the first decentralized Blockchain platform (Blockchain 2.0 <ref type="bibr" target="#b87">[89]</ref>, <ref type="bibr" target="#b88">[90]</ref>) that implements a Turing-complete programming language to develop smart contracts for the first time since 2014 <ref type="bibr" target="#b64">[66]</ref>. With the gradually rising demands of high throughput, Casper-FFG with sharding (Shasper) is proposed <ref type="bibr" target="#b60">[61]</ref> to allow the current Ethereum mainnet (a PoW-based single chain, also referred to Ethereum 1.0) to migrate to the new architecture stably and securely. Note that, we mainly focus on Shasper that has been running on testnet at the time of writing (referred to Ethereum 2.0), rather than the still-up-in-the-air Casper-CBC <ref type="bibr" target="#b89">[91]</ref>, based on which Ethereum plans to end up implementing a PoW-free Proof-of-Stake (PoS)-based sharded structure. Note that, only the intra-consensus protocol and cross-shard transactions of Shasper (referring to Phases 0-1, and Phase 4 in <ref type="bibr" target="#b90">[92]</ref>) are discussed in this paper, because the other subprotocols have not yet been finalized based on the description in <ref type="bibr" target="#b60">[61]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Consensus Algorithm -Solving the intra-consensus in a global way</head><p>Shasper also chooses to use the second method (presented in Section III-A), a BFT-based consensus algorithm, to solve the 1% attack issue of intra-consensus. Concretely, the Casper-FFG of Shasper can be regarded as a variation of BFT-based PoS consensus algorithms <ref type="bibr" target="#b76">[78]</ref>, <ref type="bibr" target="#b91">[93]</ref> with careful designs for generating randomness, as opposed to the virtualmining PoS consensus algorithms <ref type="bibr" target="#b92">[94]</ref>- <ref type="bibr" target="#b94">[96]</ref>. Note that, we assume a scalable BFT algorithm similar to ByzCoin <ref type="bibr" target="#b63">[65]</ref> and ByzCoinX of OmniLedger is used in Shasper.</p><p>Shasper decouples the member allocation and consensus process, which leads to the fact that the intra-consensus within a shard also involves those validators from other shards being the attesters. The members of attesters group associated with a specific shard can be updated every slot. This also implies that an eligible validator in Shasper should at least store all block headers (headers is called collations in Shasper) of all shards regardless of which shard this validator is allocated at the beginning of every epoch. The procedures are summarized as follows.</p><p>1) To become a validator, a node needs to deposit a certain amount of ET H (currently it is set to 32ET H [97], <ref type="bibr" target="#b96">[98]</ref>) in an official smart contract <ref type="foot" target="#foot_5">5</ref> on the original PoWbased mainnet. Having known the deposit, the system registers this node as a valid validator on a new individual chain, i.e., the beacon chain, while the beacon chain takes the role of a coordination device of the whole Shasper protocol in regards to managing the global validator pool, randomness generation, incentive, and message exchange. 2) An infrequent shuffling for the global validator pool is executed to re-allocate all validators to different shards based on the generated randomness. Such an epoch is currently set to 6.4mins <ref type="bibr" target="#b95">[97]</ref>, <ref type="bibr" target="#b97">[99]</ref>. During each epoch, a proposer is elected based on the randomness from the local validator pool in each shard every 8s slot <ref type="bibr" target="#b95">[97]</ref>.</p><p>A proposed collation containing transactions of each shard is broadcast to all attesters assigned to the same shard, followed by a finalized collation being stored in the local ledger if the consensus process succeeds. 3) In addition to the hash value of each block on the PoWbased mainnet required to be stored on the beacon chain, a checkpoint is finalized by 400 validators randomly selected from the global validator pool for each shard every 100 collations <ref type="bibr" target="#b98">[100]</ref>. After that, these selected validators aggregate all checkpoints and upload them to the beacon chain. By storing the checkpoints as well as the collation headers of all shards, the beacon chain is able to obtain the local state and a group of finalized transactions (and its corresponding receipts) of each shard, referring to the State root and Txgroup root fields in the beacon chain headers, respectively. As a result, the deterministic finality can be achieved rather than a probabilistic one that Ethereum 1.0 used to rely on. It is worth noting that the members (attesters) participating in the intra-consensus of a shard are, in fact, not limited to the indigenous validators (who have been allocated in a shard at the beginning of the epoch, and randomly selected by the generated randomness from the global pool). The group of attesters can be re-allocated for each proposed collation in a times slot, which provides the strongest security but incurs huge overhead when, 1) each shard conducts the consensus among continuously updated validators; 2) validators need to store data of more shards; and 3) the 1-slot-period reallocation has to be executed. by incurring larger overhead.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Generating Randomness -Combination of RANDAO and VDF</head><p>RANDAO <ref type="bibr" target="#b99">[101]</ref> is implemented based on the commitand-then-reveal scheme <ref type="bibr" target="#b67">[69]</ref> written in a pre-defined smart contract running on the beacon chain. To be specific, there are three functions defined in the smart contract, each of which must run in order; see Fig. <ref type="figure">4</ref>. They are described as follows, 1) Commit(): all participating validators select a seed λ in secret (e.g., the hash of the parent block), after they have been deposited 32ET H in the smart contract.</p><p>Then each of the validators runs a Verifiable Delay Function (VDF) <ref type="bibr" target="#b100">[102]</ref> as a "hash onion" <ref type="bibr" target="#b98">[100]</ref>, <ref type="bibr" target="#b101">[103]</ref>,</p><p>V DF (λ i ) = Hash(Hash(Hash(...</p><formula xml:id="formula_4">Hash(λ i )))),<label>(5)</label></formula><p>where the VDF conducts sufficient times of Hash(), e.g. 10, 000 times shown in <ref type="bibr" target="#b98">[100]</ref> for a sufficiently long period (102min <ref type="bibr" target="#b95">[97]</ref>). As such, some malicious manipulation can be significantly prevented, e.g., deciding not to reveal its commitment if k-1 i λ i is found biased to k-th validator. The unbiased randomness is guaranteed by the VDF where only the serial computing can be run regardless of the computation power that is owned by this validator. Also note that, each validator can only commit once. 2) Reveal(): validators reveal their own seed λ to the smart contract, thus the contract can verify if the seed matches up with their corresponding commitment by verifying the 10, 000 preimages,</p><formula xml:id="formula_5">Hash -1 (Hash -1 (...Hash -1 (V DF (λ i )))). (6)</formula><p>3) Generate(): the smart contract generates a randomness by adding up all λ i . Punishment is applied to those who fail to reveal their own λ in time (corresponding to the time overhead of the defined VDF). However, this design still suffers from three flaws, as shown in the following.</p><p>• A VDF consisting of n times Hash(•) incurs a computation overhead of O(n), which is inefficient. There have been a few advanced VDF schemes proposed by the recent researches <ref type="bibr" target="#b102">[104]</ref>- <ref type="bibr" target="#b104">[106]</ref>. • This design is prone to the censorship attack <ref type="bibr" target="#b105">[107]</ref>.</p><p>Malicious validators can send irrelevant transactions with a high gas fee to fill up a block. Thus, the Commit may have to be interrupted as the gas limit of the block is run out. • This design is also prone to the grinding attack <ref type="bibr" target="#b106">[108]</ref> if the seed λ is based on the hash of the parent block, because validators can send arbitrary transactions, and try to find out the most biased seed by collecting different sets of transactions.</p><p>Insight 8. Current design of randomness generator in Ethereum 2.0 incurs high computation overhead, and is overwhelmingly dependent on the incentive scheme (punishment).</p><p>It is prone to censorship attack and grinding attack, if the attack cost is acceptable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. ATOMICITY OF CROSS-SHARD</head><p>It is of importance that a sharding mechanism can support the cross-shard-verification and cross-shard transactions for validators allocated in different shards, according to the result shown in <ref type="bibr" target="#b57">[58]</ref>, <ref type="bibr" target="#b58">[59]</ref> (showing that the probability of crossshard transactions approaches to 100% as the total number of shards increases). Maintaining an individual global root chain may be one of the solutions to verification, but it does not natively support cross-shard transactions without any additional mechanism, e.g., lock/unlock operation in synchronous networks or lock-free operation in asynchronous networks. The demand for a secure protocol of cross-shard transactions gradually outweighs a naive mechanism lacking the support of cross-shard transactions (even it can achieve a high improving factor N ). Differing from the traditional database system, the support of cross-shard transactions proposes a challenge to guarantee the Atomicity of the data that was first defined in <ref type="bibr" target="#b61">[62]</ref>, <ref type="bibr" target="#b62">[63]</ref> across multiple shards. Not only a simple payment transaction involving withdraw and deposit operations needs to be atomically protected, but also the demand for the complicated conditional statements attracts more attention to the contractoriented Atomicity.</p><p>In this section, we compare and discuss the protocols to achieve cross-shard-atomicity in the considered sharding mechanisms. We focus on the design of cross-shard transaction, including Monoxide that supports asynchronous lockfree simple payment transactions; OmniLedger, RapidChain, and Ethereum 2.0 that supports simple payment transactions with lock/unlock scheme; and Chainspace that supports cross-shard operations for smart contracts (Elastico is vaguely discussed as it does not support atomic-safe crossshard transactions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1) Monoxide -Relay Transactions</head><p>In order to bypass the overhead of lock/unlock operation that greatly constrains the throughput and performance in regards to cross-shard transactions, Monoxide proposes Eventual Atomicity where a single cross-shard transaction is decoupled into an originated transaction in the local shard, and a relay transaction being put into the outbound transactions set (and hence becoming an inbound transaction when it is received by the destination shard). Rather than the immediate atomicity, Eventual Atomicity features its lock-free design and takes advantage of Chu-ko-nu mining across parallel shards in an asynchronous network, in order to maximize the global throughput via simple message exchange.</p><p>Concretely, the miners of shard a, i.e., an originate shard for a cross-shard transaction t, generate a relay transaction t r in its local outbound transaction set if the withdraw operation passes the verification. Here, the withdraw operation is verified in the form of a local transaction t l , decoupled from t, and stored in the local ledger. On the other hand, there are two additional MPT roots regarding, 1) the outbound transaction set; 2) the inbound transactions and local non-cross-shard transactions (denoted as M P T O and M P T I , respectively, and stored in the batch-chaining block defined in Chu-konu mining). By means of M P T O and M P T I , the miners of shard b, i.e., the destination shard for t, are able to verify t r via the attached proof,</p><formula xml:id="formula_6">[ShardID, ShardSize, BlockHeight, i, t r , π tr ],<label>(7)</label></formula><p>where i denotes the index of t r in the outbound transaction set generated by shard a; BlockHeight denotes the height of block B that is stored t l ; π tr denotes the MPT proof of t r in the given MPT with a root of M P T O stored in the header of B. Thus, it can be consequently observed that a crossshard transaction in Monoxide achieves an improving factor of N = n 2 as it is split into the locally-executed transactions and relay transactions expected to be outbound.</p><p>However, differing from the cross-shard transactions that can be proactively rejected by an acknowledgement from an entity (this is in charge by clients in OmniLedger, as discussed later), the chain forking in Monoxide can cause a reversion of the history and orphanize the block containing the t l that has been executed within a shard. Without any existing of acknowledgement reminding the originated shard the status of t r in the destination shard, the forking not only invalidates t r in the destination shard (if t r has been sent out before the forking occurs), but also invalidates all the subsequent cross-shard transactions relayed to any other shards. This implies the following drawbacks.</p><p>Incompatibility to Smart Contracts. There does not exist an upper-bound of timeout indicating if Eventual Atomicity of a cross-shard transaction has been finalized, leading to the incompatibility of conditional transactions, e.g., complicated operations in smart contracts.</p><p>Additional Latency. There must be λ confirmation blocks delaying the execution of the inbound transaction, i.e., t r , in order to ensure the corresponding t l in the originated shard is finalized and unlikely reverted. Also, the absence of acknowledgement and strict upper-bound of timeout deteriorates the latency and throughput due to the inevitable message loss, which incurs additional latency.</p><p>Unexpected Replay. To invalidate the inbound transactions t r and all the subsequent t r s due to the failure and reversion of t l in the originated shard, and prevent the history of all destination shards from being reverted, the history needs to be rebuilt from the genesis block of each shard. This incurs unexpected overhead even if a checkpoint scheme is introduced, e.g., the shard pruning in OmniLedger <ref type="bibr" target="#b57">[58]</ref>.</p><p>Insight 9. In order to maximize the global throughput, Eventual Atomicity achieves the lock-free asynchronous crossshard transactions at the cost of incurring Incompatibility to Smart Contracts, Additional Latency, and Unexpected Replay.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2) Elastico -No cross-shard Transactions</head><p>The elected leader of the traditional PBFT consensus algorithm in each shard finalizes and sends an agreement in regards to local transactions to a global subset, i.e., the final committee, as discussed in Section III-A2. A final global block is stored in the global ledger and broadcast to all validators among the network, so that validators can verify the transactions from other shards. However, Elastico does not provide a secure protocol to ensure the atomicity across shards via this global ledger. There will be a fund loss as an unexpected dead-lock occurs if the cross-shard transaction sent to the destination shard gets rejected.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3) OmniLedger -Atomix Protocol</head><p>To simplify the cross-shard-atomicity, OmniLedger proposes a client-driven Atomix protocol that is UTXO-based, where the communication overhead is shifted outside the shards. This indicates that the clients act as a gateway exchanging messages across multiple shards, by paying an extra cost of overhead.</p><p>Concretely, it consists of the following procedures.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1)</head><p>Initialize. A UTXO-based cross-shard-transaction is created and gossiped to all input shards (ISs) by a client, where the inputs of this transaction spend UTXOs in some ISs, while outputs create new UTXOs in some output shards (OSs). 2) Lock. The cross-shard-transaction received from the client is stored in the local ledger within the shard after the verification is conducted. Meanwhile, either a proof-of-acceptance or a proof-of-rejection is created by the shard leaders attached with the corresponding CoSi, in the case that success or failure is returned by the verification, respectively. Therein, a proof-ofacceptance contains an MPT proof and the transaction itself. 3) Unlock. to unlock the state, once it receives a proof-ofrejection from one IS.</p><p>Consequently, a cross-shard transaction containing inputs from one single IS and OS can achieve an improving factor of N = n 2 , as this transaction is only stored in two shards, i.e., this IS and OS. On the other hand, inputs and outputs of multiple ISs and OSs result in the transaction being stored among the involved shards, i.e., an improving factor of N = 1 in the worst case that the entire network is involved.</p><p>Insight 10. Atomix Protocol is, in fact, a band-aid at best. It sacrifices the support of light-weighted clients, but requires powerful performance for a client-driven exchange of messages.</p><p>Insight 11. Atomix Protocol has poorer support for UTXObased cross-shard transactions as the number of participating shards increases, which is unable to take full advantage of the UTXO format.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4) RapidChain -Three-way Confirmation</head><p>To verify a UTXO-based cross-shard transaction, there proposes a three-way confirmation in RapidChain to optimize the Atomix Protocol in OmniLedger, as shown in the bottom part of Fig. <ref type="figure" target="#fig_3">5</ref>. Concretely, k -1 sub-transactions (T x 0 and T x 2 ) destined for each committee that stores its own I i of the cross-shard transaction, with I i as the inputs and I i as the outputs, respectively, and k is the number of inputs of this cross-shard transaction, are created by the output committee, i.e., C 3 as the C out . After passing the verification on each input committees, i.e., C 2 and C 0 as the two C in (s) of the original cross-shard transaction, T x 0 and T x 2 are stored in their own local ledger, respectively. Finally, all C in (s) send the corresponding transactions back to C 3 , and end up aggregating T x 3 to be finally stored in the local ledger of C 3 .</p><p>In order to determine the improving factor N , we assume that a single committee can only be either a sender committee or a receiver committee (practically a shard can be both a sender or a receiver) at the same time for simplicity. In the worst case where a full-sized cross-shard transaction contains only the input from a single committee, C in has to send this full-sized transaction twice (each corresponds to invoking the inter-communication once), i.e, 1-st and 3-rd handshaking. On the other hand, the period from C in sending C out the cross-shard transaction to it finishing verifying the sub-transactions received, equals to the period from C out finishing verifying the original cross-shard transaction to it finishing verifying the confirmations sent by C in , i.e., one block period. It is because the original cross-shard transaction is spilt into,</p><p>• the sub-transactions that are supposed to be stored in the local ledger of each C in (a full-sized of the original cross-shard transaction with inputs from a single committee or inputs involving all committees); • the final transaction that is supposed to be stored in the local ledger of C out (another full-sized of the original cross-shard transaction) at the end of the protocol.</p><p>Consequently, either of these two kinds of transactions accounts for the intra-throughput of a committee, hence one block period, as shown by the T at the bottom of Fig. <ref type="figure" target="#fig_3">5</ref>. Therefore, an improving factor of N = n 2 can be achieved.</p><p>Insight 12. The routing table and three-way confirmation resolve the issue of OmniLedger, by significantly reducing the overhead of communication, even with a large number of participating shards in a single UTXO-based cross-shard transaction. However, by polluting specific routing tables, the eclipse attack <ref type="bibr" target="#b107">[109]</ref> becomes a concern.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5) Ethereum 2.0 -Using Receipts</head><p>Having known the beacon chain, validators can not only address the issue of intra-consensus, but also address the issue of cross-shard-atomicity, i.e., cross-verifying the normal transactions in each shard the validators care about, and enabling the cross-shard transactions. Note that, Shasper so far can only support a simple account-based (as opposed to the UTXO-based) payment transaction, while the design contract-oriented cross-shard transaction has not been finalized and presented. The cross-shard transactions in Shasper rely on the receipts. Receipts correspond to accepted cross-shard transactions that are used to verify and log the validity of the transactions' operations. Also, the result of these operations can be obtained by the involved validators conducting crossvalidation in the destination shards. By means of receipts whose identities are contained in Txgroup root field (Receipt root), the cross-shard transactions are split into multiple subtransactions being executed in the originated and destination shards, respectively. This can be regarded as a variation of the synchronous lock/unlock scheme implemented in Om-niLedger and RapidChain, while the receipts take the actual role of the lock.</p><p>Concretely, a proposed cross-shard transaction, t, is split into a group of t 1 , t 2 , and t 3 .</p><p>1) The preliminary withdraw operation is executed and stored after t 1 is verified in the originated shard (input shard, namely IS). A receipt corresponding to t 1 , denoted as r 1 , is included in Txgroup root of the latest collation being proposed by the chosen proposer. 2) Having waited for a period that t 1 has been deterministically finalized by the checkpoints (this period can be shortened to meet different requirements, which is similar to the trust-but-verify transaction validation scheme proposed in OmniLedger; see the first point of Section III-C and Insight 14), a proof-of-receipt is sent to the destination shard (output shard, namely OS) as the second sub-transaction, i.e., t 2 .</p><p>3) The OS can mark the r 1 as spent, as validators of the OS are able to verify the status of r 1 by the corresponding Txgroup root that is stored in the beacon chain, and the received proof-of-receipt. Meanwhile, the deposit operation is executed. 4) The OS sends a proof-of-response as t 3 to the original IS, indicating that the whole process of t has been finalized. Validators of the IS can finally confirm this fact by verifying the corresponding receipt of proof-ofreceipt on the beacon chain.</p><p>Consequently, a cross-shard transaction that is account-based in Ethereum 2.0 -Shasper can achieve an improving factor of N = n 3 due to the preliminary transaction, proof-of-receipt, and proof-of-response.</p><p>Insight 13. Ethereum 2.0 -Shasper introduces accountbased cross-shard transactions by implementing the global (stored by all validators) beacon chain to exchange the essential message, i.e., the receipts and proofs. However, Shasper cannot be more than a transitional version due to the disadvantage of possible overhead.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6) Chainspace -The inter-part of S-BAC</head><p>S-BAC refers to Sharded Byzantine Atomic Commit, whose intra-part makes use of an optimal PBFT, Mod-SMaRt, to handle the intra-consensus process; see Section III-A3. Upon the intra-consensus being finalized within a shard (Chainspace allocates nodes in different shards based on the objects management, as described in Section III-C6), the elected leader of the shard, the BFT-Initiator, takes responsibility for the atomicity of cross-shard transactions. It is worth noting that Chainspace makes use of the concept of BFT to ensure such atomicity, which constitutes the inter-part of S-BAC.</p><p>Concretely, it resembles the Atomix Protocol in Om-niLedger, with a crucial optimization where BFT consensus process must be conducted instead of a naive client-driven model. It consists of the following procedures.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1) Initialize and Intra-consensus An object-based cross-</head><p>shard-transaction T is created by a client and gossip to all shards that manage the input objects, upon which the intra-consensus is conducted in each of these shards with an accept or commit broadcast to other concerned shards. Objects are set to active by the matching shards if ending up a commitment of T . 2) Lock All involved objects in T are locked whenever a commit is received. 3) Unlock.</p><p>• Unlock to Commit. The lock of each involved object in T is released if and only if commit is received from all concerned shards, upon which the objects are set to inactive and the output objects are created via BFT consensus process in a certain shard.</p><p>• Unlock to Abort. The same locks are released whenever an abort is received, upon which the objects are set back to active and may be used by other subsequent transactions. Similar to the problem the Atomix Protocol of Om-niLedger has encountered, i.e., Insight 11, the improving factor upon a cross-shard transaction can be ranged from N = n to N = 1 with T containing only one input object and no object being output, and T involving all objects around the entire network, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. GENERAL IMPROVEMENTS</head><p>In this section, some general key challenges and improvements particularly proposed by the considered sharding mechanisms are listed. Such improvements can be generally implemented to address the new issues the considered sharding solutions pose to the entire system. They include transaction latency, inter-communication protocol, shards ledger pruning, decentralized bootstrapping, securing the epoch reconfiguration, and sharded smart contract.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1) Reducing Transaction Latency</head><p>Apart from the throughput, the transaction latency, referring to how long a transaction is deterministically confirmed and finalized, is most likely more sensitive to individual users. It has been shown that the BFT-based 1% attack (refers to Section III-A) can be either resolved by implementing a scalable BFT consensus, e.g., OmniLedger and Ethereum 2.0, or increasing the FT within a single shard, e.g., Rapid-Chain. However, it remains the issue of transaction latency, as described below.</p><p>• The transaction latency deteriorates as a scalable BFT consensus features a large scale shard size to address the 1% attack, according to the evaluation shown in <ref type="bibr" target="#b57">[58]</ref>, <ref type="bibr" target="#b63">[65]</ref>. Thus, Omniledger introduces the trust-but-verify transaction validation scheme running within each shard to provide the real-time transaction confirmation time, which can also be implemented in any compatible sharding scheme, such as Ethereum 2.0. Concretely, validators of a shard are split into an optimistic group and a core group. The optimistic group is further split into multiple small sub-groups (even a sub-group with only one validator is allowed), hence each sub-group can verify the transactions in a real-time manner. Subsequently, the core group conducts the second verification, where the inconsistent and malicious transactions can be censored. Note that, there can be multiple inputs from multiple optimistic sub-groups to this second verification in a concurrent manner. Finally, the transactions passing the second verification can be contained in the proposed block and stored in the local ledger.</p><p>Insight 14. The real-time transaction latency is achieved by sacrificing the security, as the further 1% attack can still happen in optimistic groups. Similar to IoTA <ref type="bibr" target="#b24">[25]</ref>, this real-time transaction latency can only be used in specific scenarios with lower security requirements.</p><p>• The transaction latency deteriorates as a non-scalable 50% BFT consensus incurs larger communication overhead. Thus, upon the 50% consensus only agreeing on a digest of the block. RapidChain implements the information dispersal algorithm (IDA)-based gossip protocol <ref type="bibr" target="#b108">[110]</ref>, <ref type="bibr" target="#b109">[111]</ref> to transmit large payload more efficiently. Concretely, the sender divides the original message into some n-equal-sized chunks, followed by applying an (m, n) erasure code scheme to encode the n chunks to m chunks. As a result, each node can reconstruct the original message by receiving valid n chunks from its neighbors with the help of some proofs, e.g, the MPT proofs, hence significantly reduces the latency.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2) Inter-Communication Protocol</head><p>Differing from the protocol to achieve the atomicity-crossshard, the inter-communication protocol focuses on the overhead of data transmission among shards. The related schemes discussed in this survey include the following two major types.</p><p>• A global root chain acting as a message distributor is implemented, while each validator (or miner in the context of Monoxide) needs to store this chain. Sharding mechanisms using this kind include Ethereum 2.0, Monoxide with identical PoW targets, and Elastico 6 .</p><p>Insight 15. The bottleneck is shifted to the global root chain due to its single-chained structure, as opposed to sharded structure. This can only be a transitional version but not a real solution.</p><p>6 Elastico maintains a final committee where the finalized block is proposed and stored in the global root chain, based on the agreement from each shard. The global chains implemented by OmniLedger and RapidChain, i.e., the identity Blockchain and reference Blockchain, respectively, do not account for this kind as the messages exchanged by these two chains are not related to the actual transactions.</p><p>• The most straightforward way is used by OmniLedger and Chainspace, i.e., full-mesh connection. This requirement tends to hold in those latency-sensitive systems, which incurs an considerable overhead. In order to bypass the full-mesh connection, RapidChain proposes a novel inter-communication protocol based on a routing table stored by each validator; see the top side of Fig. <ref type="figure" target="#fig_3">5</ref>. It is inspired by Kademlia-based <ref type="bibr" target="#b110">[112]</ref> routing protocol, where each validator in a shard maintains a routing table containing all members of its shard as well as log 2 log 2 n validators of other log 2 n shards which are distance 2 i for 0 ≤ i ≤ log 2 n -1 away. The inter-communication is conducted by having all validators in the sender shard send messages to all validators on the receiver side. By taking advantage of P2P network, the communication overhead can be significantly reduced.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3) Shards Ledger Pruning</head><p>The reason most of the existing Blockchain system with a single-chained structure <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b64">[66]</ref>, <ref type="bibr" target="#b111">[113]</ref>- <ref type="bibr">[115]</ref> tends to store the full version of its chain is that they intend to improve the communication and computation overhead of censorship and audition. Storing a full version of ledger of every shard incurs an unacceptable overhead of disk storage to validators, referring to the calculation in Section IV, as validators need to track the history of each shard in order to support the crossshard transactions, as well as the re-allocation (bootstrapping) during each epoch. To solve this, OmniLedger proposes the design of state blocks (SB).</p><p>SBs of a shard summarizes the state as well as all transactions of its shard associated with each epoch. At the end of each epoch E k , the selected leader of a shard i constructs an MPT consisting of all the transactions, while the corresponding MPT root is stored in the header of SB . As such, the body of SB i,k-1 can be pruned if SB i,k passes the verification by other validations in shard i to become the new genesis block of E k+1 . The regular blocks are also pruned as soon as SB i,k+1 is generated at the end of E k+1 , during which it is the clients' responsibility to create and store the transaction proofs to prove the existence of a past transaction to other shards for cross-shard transactions.</p><p>The design of SBs is similar to stable checkpoints in PBFT <ref type="bibr" target="#b4">[5]</ref>, fast-sync mode in Ethereum <ref type="bibr" target="#b111">[113]</ref>, and stable checkpoints of Node Hash-Chains in Chainspace <ref type="bibr" target="#b59">[60]</ref>. According to the evaluation in <ref type="bibr" target="#b59">[60]</ref>, such kind of pruning incurs an overhead of O(m+log T ) for a partial audit and O(T ) for a full audit, where m denotes the shard size, and T denotes the number of transactions. The partial audit allows any users to obtain a proof to verify the existence of any transactions in any shards; the full audit allows a full verification by replaying the entire history of a shard. However, the design of SB raises two issues, 1) the overhead of transaction proofs might become the bottleneck, but it can still be relieved by introducing the Simple Payment Verification (SPV) <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b111">[113]</ref>, several multi-hop backpointers <ref type="bibr" target="#b113">[116]</ref>- <ref type="bibr" target="#b115">[118]</ref>, or Proofs of Proof of Work (PoPoW) <ref type="bibr" target="#b116">[119]</ref>, <ref type="bibr" target="#b117">[120]</ref>; and 2) Insight 16, Insight 16. The design of State blocks faces the same problem as that of the Atomix Protocol in OmniLedger and lightclient protocol in Ethereum 1.0 (if used in Ethereum 2.0), i.e., shirking the most important duty to the client side.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4) Decentralized Bootstrapping</head><p>For sharding mechanisms involving a randomness generator that is responsible for a PoW-based entry ticket in the BFTbased intra-consensus protocol, it is important to select the initial set with an honest majority, e.g., the final committee in Elastico, and the reference committee in RapidChain 7 .</p><p>Thus, RapidChain proposes a decentralized bootstrapping in the form of sampler-graph election network <ref type="bibr" target="#b58">[59]</ref>, with only a hardcoded seed and some network settings. In such an election network, participating validators are uniformly distributed into a few groups, within each of which a PoWbased result is computed by each member based on the randomness generated by the VSS-based DRG protocol (Section III-A5) and its identification ID. Based on the result, a subgroup can be obtained for each group. Finally, a unique root group (it randomly selects the members of the reference committee) can be obtained with 50% honest majority (high probability), when this process is iterated. Consequently, the communication overhead can be improved from Ω(n 2 ) to O(n √ n) with n denoting the total number of participating validators.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5) Securing the Epoch Reconfiguration</head><p>For sharding mechanisms running a BFT-based intraconsensus protocol, (new) validators have to be swappedout and re-allocated in other shards every epoch in order to prevent attacks from slowly adaptive adversaries, i.e., attacker can corrupt or Distributed Denial of Service (DDoS)attack validators, but it takes a bounded time for such attacks to take effect. This indicates that the epoch length should be carefully designed to be lower than the bounded time.</p><p>Recall that Elastico and Chainspace do not provide such a solution, while Ethereum 2.0 solves the intra-consensus with a global validator pool by frequently updating the member participating in the intra-consensus protocol for each shard. Both of them require validators to track the status of each shard to speed up the reconfiguration phase. OmniLedger implements a random permutation scheme to swap-out the validators, ensuring the number of validators being swapped is bounded by k = log n/m at a given time, where n denotes the total number of participating validators; m denotes the number of shards. Here, new validators that require to register their ID on a global identity Blockchain are also assigned to random shards. As such, the number of remaining honest validators can be sufficient to reach consensus while some are 7 OmniLedger eliminates the necessity of an initial global set that responsible for verifying the PoW result, by using RandHound and VRF. However, an initial global randomness is still needed to derive VRF. Ethereum 2.0 builds the design on top of PoW-based mainnet, where the PoS-based Casper is used instead of PoW. swapped-out, thus the idle phase can last shorter to improve the throughput. However, this scheme incurs a significant delay and scales moderately, which cause 1-day-long epoch that does not suit highly adaptive adversaries (when the bounded time becomes smaller).</p><p>In contrast, RapidChain proposes a light-weighted reconfiguration protocol based on the Cuckoo rule <ref type="bibr" target="#b118">[121]</ref>, <ref type="bibr" target="#b119">[122]</ref>, where only a constant number of validators are allowed to move between committees in each epoch. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6) Sharded Smart Contract</head><p>None of the considered sharding mechanism has achieved the smart-contract-oriented sharded so far except Chainspace that introduces such functionality for the first time. Concretely, Chainspace, inspired by the UTXO model, proposes a new transaction structure based on new atoms Objects denoted as o. Here, o records state in the system with two kinds of unique identifier, i.e., id(o) (a cryptographically id that cannot be forged within a polynomial time) and types(o) (a pointer to a smart contract c that defines types(o)). Meanwhile, a contract c, referred to a special types of o, defines a namespace consisting of types(c) (the set of types that the specific c has defined) and a checker v denoted as v(input) → {T rue, F alse}, as shown in <ref type="bibr" target="#b8">(9)</ref>. Such v is used to verify procedures proc(c), denoted as p(input) → output (defining the operation logic, as shown in ( <ref type="formula" target="#formula_7">8</ref>)), by means of a pure function returning a Boolean value. c.p(x, r, parameters) → y, returns;</p><p>c.v(p, x, r, parameters, y, returns, dependencies)</p><formula xml:id="formula_8">→ {T rue, F alse};<label>(9)</label></formula><p>[c, p, x, r, y, parameters, returns, dependencies]</p><formula xml:id="formula_9">∈ T race ∈ T ransaction. (<label>10</label></formula><formula xml:id="formula_10">)</formula><p>Note that, x denotes the input objects that must be active beforehand, and be set to inactive when the corresponding new output objects y set to active. r denotes the reference objects that must also be active, nevertheless, the status of r remains unchanged afterward. The dependencies, in the form of a list of T races from other contracts other than c, is along with all the other items (as shown in ( <ref type="formula" target="#formula_9">10</ref>)) so that a single T race can be obtained to constitute a T ransaction.</p><p>The method to allocate nodes in different shards in Chainspace is by placing the nodes that manage, record, and verify the same set of o to a single shard, denoted as φ(o). Further, Φ(T ) is defined to denote the concerned nodes of a transaction T , where concerned nodes represent the set of nodes managing all x or r of T . To verify a transaction T , all φ(o) with o being involved in T as input or reference should ensure the active status. Meanwhile, all Φ(T ) (excluding the dependencies) should run the checker v of the corresponding contract c to validate the T races. As such, a cross-shard consensus algorithm that guarantees the atomicity of smart contracts, i.e., S-BAC, is proposed (as discussed in Section III-B6).</p><p>Insight 17. By modifying the transaction structure and involving the concept of the new atoms and objects, it can safely shard a smart contract with strong atomicity, but at the cost of considerable overhead and hence low throughput.</p><p>Up to this point, we have elaborated on the designs and protocols of each considered sharding mechanisms in terms of the intra-consensus, cross-shard atomicity, and general improvements, based on which a comprehensive comparison is presented in Table <ref type="table" target="#tab_2">2</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. EVALUATION A. THE UPPER-BOUND OF THROUGHPUT</head><p>This section estimates the theoretical upper-bound of each discussed sharding mechanism, given the outbound bandwidth, disk storage space, and CPU process capability. Note that, Chainspace is not discussed in this section, because it pays the price in poor performance to be able to achieve sharding for Turing-complete smart contracts (Insight 17).</p><p>We choose a typical compute-optimized type of servers in either AWS or Ali cloud service, i.e., c5.xlarge. It features outbound bandwidth up to 200Mbps (25MB/s) <ref type="foot" target="#foot_6">8</ref> , 4vCPU of Intel Xeon (Skylake) from 2.5GHz to 3.5GHz with Turbo boost, and 1TB basic disk storage space. This roughly costs 0.3USD/hour and 0.33USD/hour in AWS and Ali cloud service, respectively, with the storage fee around 100GB/0.01USD/hour. Table . 1 lists the notations of necessary parameters used in the calculation. We set the parameters to some values in order that bandwidth can be filled. Here, bandwidth is selected to be the upper-bound rather than disk storage and computation processing as the latter two metrics can be easily scaled in the cloud and cost much less than that of bandwidth.</p><p>Also note that the randomness generations of Elastico, OmniLedger, RapidChain, and Ethereum 2.0 are not discussed in this section, although the generation phase also incurs the overhead. This is because the generation is conducted only once in each E, resulting in a predictable data burst that can be transiently scaled (the randomness generation is discussed in detail in Section III-A).</p><p>To be specific, the basic calculation of bandwidth, disk storage, and computation processing are defined as follows,</p><p>• Bandwidth: Dedicated channel for outbound message transmitting for the intra-consensus protocol and crossshard operation on a single miner at the same time. Note that, whether a cross-shard transaction (cross-shard Tx) accounts for the intra-shard bandwidth or inter-shard bandwidth depends on whether the Tx should be inserted in local C of destination shard within a single T. • Disk storage: Data storage permanently committed to the local database, including data both in the local shard and other shards. • Computation processing: CPU computation processing mainly corresponds to the verification of each Tx and Sigs of each B or H. Without loss of generality, We consider that the verification of each Tx or Sig accounts for a single operation of computation processing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1) Monoxide</head><p>Monoxide is the only sharding mechanism that supports Nakamoto consensus protocol with PoW for the intraconsensus among the discussed mechanisms in this paper. We consider |B| = 30KB, |H| = 500B, |Tx| = 250B, |Sig| = 65B (we consider the signature format of Ethereum <ref type="bibr" target="#b64">[66]</ref>), T = 12s, n = 262, 144 = 2 18 , m = 128 and h = 1, 000, 000.  </p><formula xml:id="formula_11">O(m + n) O(m 2 + n) O(log 2 m + n) O(m 2 + m log 2 n) O(m 2 + n) O(m 2 + n) Storage Ω(|C|) ∼ O(|C| + n|C h |) O(n|C|) O(|C|) O(|C| + |Cr |) Ω(|C| + n|H| + |Cg |) ∼ O(n|C| + |Cg |) O(|C| + |C nh |)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Bandwidth</head><p>• Bandwidth overhead within each shard (intrabandwidth). This mainly corresponds to the transmitting of B within a single shard, i.e., |B| T = 2.5KB/s. • Bandwidth overhead across all shards (inter-bandwidth).</p><p>According to the eventual atomicity of cross-shard Txs, a single cross-shard Tx is split into two parts that are inserted in C of source shard and destination shard, respectively. Each of the parts accounts for its corresponding intra-shard bandwidth. Thus, this mainly corresponds to the transmitting of the verification scheme of Chu-ko-nu mining. <ref type="bibr" target="#b120">[123]</ref> provides the expressions, as shown in the following, -Mixed PoW targets of shards in one batch. This design allows miners to mine blocks in batch for different PoW targets and nonces. Blocks whose targets have been fulfilled can be sent out first, followed by the update of MPT and the further mining for those whose targets have yet to be fulfilled. This can be calculated by n(|H|+32 log 2 (n)) T = 22.4M B/s, where 32 log 2 (n) denotes the Merkle proof for Chu-ko-nu mining across shards.</p><p>-Identical PoW targets of shards in one batch <ref type="bibr" target="#b120">[123]</ref>.</p><p>In this case, the design allows miners to mine blocks in batch for all n shards simultaneously with identical PoW targets and nonce. It sacrifices the decentralization to maintain a global subnet where all miners should participate, to broadcast H of all shards. We also let n = 524, 288 = 2 19 , hence the network size can be extended more, as calculated The total bandwidth of both designs, i.e., identical and mixed PoW targets, have been upper-bounded, i.e., 20.8 &lt; 22.4 &lt; 25M B/s. Here, the intra-bandwidth can be negligible due to its small size compared with that of the inter-bandwidth. Restricted by this, Monoxide can achieve nearly 1.23M tps for mixed PoW targets, and 2.56M tps for identical PoW targets by sacrificing the decentralization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Disk Storage</head><p>As B contains H, Txs, and Sigs, implying that |B| dominates in |C|, as calculated by h|B| = |C h | = 28GB. On top of that, Chu-ko-nu mining requires miners to track and synchronize block headers of all the shards they participate in (the more the number of shards being involved, the more secure Chu-ko-nu mining is), i.e., n-1 i (| C h |) + h|B| = (n -1)h|H| + h|B|. This can be up to 119TB and 238TB for mixed and identical PoW targets, respectively. It indicates that a miner that only focuses on a single shard can reap a profit from the small disk storage, while Chu-ko-nu mining requires much more storage to guarantee security the context of cross-sharding.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Computation Processing</head><p>Monoxide may have overwhelming computation processing than the other discussed sharding mechanisms due to the use of PoW. It requires as much processing as a normal PoW in a single shard as usual <ref type="foot" target="#foot_7">9</ref> . However, the hashrate varies with the total amount of computation power in a single shard (directly proportional to m) with a nearly fixed T to prevent a high orphan rate. We consider the hashrate to be the average Bitcoin hashrate of CPU used in the considered server (Intel Xeon), i.e., 66M H/s [124]. Here, any other PoW algorithms can replace as the kind of PoW is orthogonal to Monoxide. Besides, the computation processing also corresponds to the construction of the MPT of every pending block in each shard involved in the current round of Chu-ko-nu mining, as well as the verification of every intra-shard Tx and inter-shard Tx. These two kinds of Tx both account for the throughput of a single shard (10.24tps), which can be negligible compared to the PoW process. Thus, totally a 66M H/s of affordable CPU computation processing is needed in Monoxide.</p><p>In summary, a miner only conducting normal mining may only need to spend 0.21USD/hour and 0.24USD/hour in AWS and Ali cloud, respectively. In order to extend the disk space, miners participating in Chu-ko-nu mining across all shards need to spend about 36USD/hour and 40USD/hour in AWS and Ali cloud, respectively for mixed PoW targets, and 71USD/hour and 79USD/hour in AWS and Ali cloud, respectively for identical PoW targets. By only paying the price on the extended disk storage, Monoxide can achieve nearly 1.23M tps for mixed PoW targets, and 2.56M tps for identical PoW targets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2) Elastico</head><p>Elastico is the first practical sharding mechanism where only the communication and processing are sharded while it still needs to be globally stored. We consider the intra-throughput is 1000tps (which is average among others with PBFT consensus algorithm [64]), |B| = (1000 × 10 × 250) + 2m|Sig|  <ref type="formula" target="#formula_9">10</ref>), h = 1, 000, 000, and E = 10min. The randomness is negligible due to its small size.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Bandwidth</head><p>Bootstrapping and ID generation are rarely conducted, also during which there is no block-oriented consensus being processed. On the other hand, the consensus of the final committee can use MPT root hash being transmitted to substitute B itself. Thus, the considered bandwidth here mainly corresponds to the intra-consensus protocol and cross-shard operation.</p><p>• Bandwidth overhead within each shard. This mainly corresponds to the transmitting of B during the intraconsensus within a single shard, i.e., m(|H|+|B|)+|B| T = 14M B/s. Here, an optimized PBFT can be used to prevent the block body from being broadcasting twice.</p><p>• Bandwidth overhead across all shards. The bandwidth of a single miner corresponds to n|B| at most when it is a member of the final committee, and a global ledger is run and maintained locally. This is simply calculated by n|B| T = 11M B/s. Note that, this does not indicate Elastico supports cross-shard Txs as no atomicity can be guaranteed in Elastico, leaving a likely unsafe Tx being locked forever.</p><p>• Throughput of a single shard. This is simply defined as 1000tps, as discussed previously. • Throughput of the network. This can be calculated by multiplying the intra-throughput by the improving factor of, i.e., n for Elastico. Thus, it is 1000n = 48ktps. The total bandwidth overhead of a single validator has been upper-bounded if we sum up the values of intra-bandwidth and inter-bandwidth, i.e., 14 + 11 25M B/s. Restricted by this, Elastico can achieve nearly 48ktps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Disk Storage</head><p>As no ledger pruning scheme is introduced in Elastico, the periodical reshuffling of validators make all validators have to store a global ledger, which contains all B from all shards and costs a huge amount of disk storage. This can be simply calculated by nh|B| = 104.8T B.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Computation Processing</head><p>The computation processing of PoW during the stage of reshuffling validators depends on the total amount of computation power among the entire network, given a fixed T. As PoW does not account for the intra-consensus protocol in Elastico, while it is only conducted once every E. We can neglect the computation processing of PoW in this calculation. In addition, the randomness generation is also conducted only once every E and can be negligible in this calculation (this assumption always holds for the rest of the discussed sharding mechanisms where a randomness is needed.). Thus, the following factors are considered for simplicity,</p><p>• As discussed above, Elastico does not support safe cross-shard Txs due to the of a (un)lock scheme or a relay Tx scheme introduced in Monoxide. Thus, we have the verification for every individual Tx that equals to the intra-throughput, i.e., 1000H/s. • If a considered miner is a member of the final committee, 2 × 2m|Sig| 3T 555H/s can be obtained when the verification of B during PBFT process in the normal committees and final committee are both considered. In addition, each member of the final committee needs to verify Txs that are aggregated from all m shards in the global ledger, i.e., 48kH/s. The total overhead of computation processing is roughly 50kH/s, which is even smaller than that of Monoxide, i.e., 66M H/s, and has yet to reach the bottleneck of the considered CPU.</p><p>In summary, validators participating in the final committee need to spend about 32USD/hour and 35USD/hour in AWS and Ali cloud, respectively. By paying the price on the extended disk storage, Elastico can achieve nearly 48ktps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3) OmniLedger</head><p>OmniLedger is the first practical sharding mechanism where bandwidth, storage, and processing are all sharded by means of a scalable intra-consensus, Atomix protocol, and the scheme of ledger pruning. We consider the intra-throughput is 1200tps (refers to Fig. <ref type="figure">9</ref> in <ref type="bibr" target="#b57">[58]</ref>), |B| = 32M B (refers to Table <ref type="table" target="#tab_8">3</ref> in <ref type="bibr" target="#b57">[58]</ref>), |Tx| = 500B (refers to Size of Unlock Transactions of Section IV in <ref type="bibr" target="#b57">[58]</ref>), |Sig| = 65B (this is not the size of CoSi <ref type="bibr" target="#b77">[79]</ref>), |H| = 500B, n = 48, m = 1024, h = 1, 000, 000, and E = 1day. Thus, T = 32M 1200|Tx| = 55s (nearly matches with Table <ref type="table" target="#tab_8">3</ref> in <ref type="bibr" target="#b57">[58]</ref>). The randomness is negligible due to its small size.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Bandwidth</head><p>Similar to Elastico, the considered bandwidth mainly corresponds to the intra-consensus protocol and cross-shard operation due to the conduct of Bootstrapping and ID generation for every one-day</p><p>• Bandwidth overhead within each shard. This mainly corresponds to the transmitting of |B| during the intraconsensus within a single shard. Recall that, Om-niLedger proposes ByzCoinX that implements a groupbased scheme (rather than a tree-based scheme in Byz-Coin <ref type="bibr" target="#b63">[65]</ref>), where a single shard is partitioned into multiple consensus groups. Each group leader is selected based on the randomness generated for every epoch, and is unchanged unless a view change occurs. This groupbased scheme can be a shadow-tree where the depth-3 is constant and the branching factor depends on the number of group leader. As a result, each validator only needs to broadcast B to its children in addition to a unicast of B to its parent. We consider the number of groups and group size are both √ m (refers to the same assumption of Section VI-D in <ref type="bibr" target="#b57">[58]</ref>), the intra-bandwidth can be calculated by</p><formula xml:id="formula_12">√ m|B|+|B| T = 19</formula><p>.2M B/s, i.e., the bandwidth overhead of either the prepare phase or commit phase 11 . Here, the aggregated signature is negligible due to its small size compared to |Tx|.</p><p>• Bandwidth overhead across all shards. As Atomix protocol is client-driven, the inter-bandwidth mainly corresponds to the outbound bandwidth of clients rather than validators. Thus, the inter-bandwidth for a validator can be simply regarded as a unicast to the client, i.e., |B| T = 0.554M B/s( 12 ). On the other hand, the client has to suffer from a huge amount of bandwidth overhead, i.e., n|B| T = 26.6M B/s &gt; 25M B/s, which has exceeded the upper-bound of the bandwidth of a single considered server.</p><p>• Throughput of a single shard. This is simply defined as 1200tps as discussed previously. • Throughput of the network. This can be calculated by multiplying intra-throughput by the improving factor, i.e., n 2 for OmniLedger with only one input shard and output shard involved; refer to Section III-B3. Thus, it is 1200n 2 = 28.8ktps. The total bandwidth overhead of a single validator has been upper-bounded if we sum up the values of intra-bandwidth and inter-bandwidth, i.e., 19.2+0.56 &lt; 25M B/s. Restricted 11 Txs are either transmitted in the prepare phase or commit phase, i.e., it is counted only once. 12 As CoSi is used in ByzcoinX, |B| consists of the CoSi of each Tx, i.e., 788.48B × 1.2ktps = 0.9M B, instead of 2m|Sig| 3</p><p>, where 788.48B refers to Size of Unlock Transactions of Section IV in <ref type="bibr" target="#b57">[58]</ref>. by this, OmniLedger can achieve nearly 28.8ktps, by shifting the bottleneck to clients.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Disk Storage</head><p>The disk storage in OmniLedger mainly corresponds to the ID Blockchain and the local pruned chain in each shard. We consider the size of a single ID, |ID| = 32B.</p><p>• The block height of the ID Blockchain can be calculated by, hT E = 637. Thus, |B ID,637 | = 637nm|ID| = 0.93GB. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Computation Processing</head><p>This mainly corresponds to the computing overhead of the intra-consensus (ByzcoinX) and cross-shard operation (Atomix). The computing overhead in ByzcoinX consists of the verification of signature, i.e., 2m/3+1 T = 12.4H/s and Txs, i.e., 1.2kH/s as defined. Validators log the crossshard Txs in the local ledger and mark them as (un)locked one during the Initialize and Unlock to Abort of the clientdriven Atomix protocol. This implies that the cross-shard Txs must account for the intra-Txs. As a result, a 1.2kH/s of the overhead of computation processing can be obtained, which is smaller than that of Monoxide, and has yet to reach the bottleneck of the considered CPU.</p><p>In summary, validators need to spend about 0.2USD/hour and 0.23USD/hour in AWS and Ali cloud, respectively. OmniLedger can achieve nearly 28.8ktps with fewer disk storage.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4) RapidChain</head><p>RapidChain trades-off the protocol complexity for system robustness and achieves an efficient shard-driven crossshard protocol by improving several parts of Elastico and OmniLedger. RapidChain also shards all of the bandwidth, storage, and processing. We consider the intra-throughput is 1000tps, |B| = 8M B (refers to Fig. <ref type="figure">3</ref> in <ref type="bibr" target="#b59">[60]</ref>), |Tx| = 512B, |Sig| = 65B, |H| = 500B, n = 256, m = 256, h = 1, 000, 000 and E = 1day. Thus, T = |B| 1000|Tx| = 16.4s. The randomness is negligible due to its small size.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Bandwidth</head><p>Similar to Elastico and OmniLedger, the considered bandwidth mainly corresponds to the intra-consensus protocol and cross-shard operation due to the conduct of Bootstrapping and ID generation for every one-day E.</p><p>• Bandwidth overhead within each shard. RapidChain implements the IDA to transmit Bs within a shard. We consider that the Reed-Solomon erasure codes <ref type="bibr" target="#b122">[125]</ref> used in this protocol is (255, 233), leading to an ac- By means of the IDA-based gossip protocol, only H is needed in the intra-consensus protocol based on <ref type="bibr" target="#b86">[88]</ref>. Thus, the bandwidth overhead can be calculated by m|H|×3 T = 23kB/s, which can be negligible. Note that, the multiplier 3 corresponds to 2-nd, 3-rd, and 4th consensus rounds in every iteration, as described in Section III-A5. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Disk Storage</head><p>The disk storage in RapidChain mainly corresponds to the ID in the local routing table, the local pruned chain in each shard by using the same scheme as that of OmniLedger, and the ID Blockchain for a member of the reference committee. We consider the size of a single ID to be the same as that of OmniLedger, i.e., |ID| = 32B. Computation Processing Similar to Elastico, only the reconfiguration phase incurs the computation processing of PoW in RapidChain. We can also neglect this kind of computation overhead. Thus, the computation processing overhead mainly corresponds to the following two factors,</p><p>• The verification of Txs and the corresponding Sigs, i.e., 1000H/s. • As the leader of an output committee, the Txs need to be verified when the leader first receives these Txs from input committees. However, these Txs will not be logged into the local ledger prior to the final confirmation; refer to Fig. <ref type="figure" target="#fig_3">5</ref>, which implies the fact that the verification of these cross-shard Txs should be independent to that of the local Txs, i.e., 1000(n-1) T 16kH/s.</p><p>As a result, a 16k + 1k = 17kH/s of the computation overhead can be obtained, which is still smaller than that of Monoxide, and has yet to reach the bottleneck of the considered CPU.</p><p>In RapidChain, it costs validators that participate in the reference committee nearly the same price as that of Om-niLedger, i.e., 0.2USD/hour and 0.23USD/hour in AWS and Ali cloud, respectively, but with a significant breakthrough of the global throughput of nearly 128ktps, i.e., ∼ 4.5x.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5) Ethereum 2.0</head><p>The Shasper of Ethereum 2.0 is a design that resolves the two major issues defined in Section III at the same time. Meanwhile, it also shards all of the bandwidth, storage, and processing. We (local chains and the beacon chain), n = 512, m = 8, h = 1, 000, 000 and E = 1week. In addition, We also consider the number of attesters selected in each slot (several slots in one E) is 9, the number of validators responsible for checkpoints is 400, and the checkpoint period is 100 <ref type="bibr" target="#b98">[100]</ref>. The randomness is negligible due to its small size.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Bandwidth</head><p>To reach the consensus within a shard in Ethereum 2.0, the attesters are randomly selected from the global validators pool outside the local shard. This leads to the bandwidth mainly corresponding to only the intra-consensus, as well as all the other cross-shard operation. We consider that Byz-CoinX proposed in OmniLedger is used for a large-scaled consensus group in this calculation as the actual protocol is not discussed and given in Ethereum 2.0. To be specific, We consider there exist √ 400 = 20 sub-leaders, each of which contains √ 400 = 20 children.</p><p>• Bandwidth overhead within each shard. This mainly corresponds to the transmitting of B c within a single shard, i.e., |Bc| T = 192KB/s. • Bandwidth overhead across all shard. This mainly corresponds to two parts, i.e., to reach the consensus within a shard, and to upload to the beacon chain with another consensus in a single checkpoint period. Every T = 8s, a proposer is randomly selected from the local validator pool within a shard, followed by 9 attesters are also randomly selected from the global validator pool. Note that, validators are evenly allocated in each local validator pool of each shard based on the randomness generated every E. Also note that a validator can be both a potential attester from a global pool, and a proposer selected from its local pool. The selected proposer needs to collect at least 2/3 signatures from the attesters to finalize a B c to be stored in the local ledger of this slot. This can be calculated by The three steps take at most 100T = 800s to be finished, hence the considered inter-bandwidth is </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Disk Storage</head><p>The disk storage in Ethereum 2.0 mainly corresponds to the PoW-based main chain, the beacon chain, and the local chain of each shard that a validator cares more about. We consider the considered validators are in single-shard mode 13 . We consider the size of a single ID, |ID| = 32B</p><p>• It is intended that most of the business logic and data, i.e., T xs, will be moved to the beacon chain for storage, while the original PoW-based main chain is only responsible for additional computation-based security, as well as a smart contract used to register and manage the validators. As a result, it can be regarded as a C with empty bodies (as if a light node in Ethereum <ref type="bibr" target="#b111">[113]</ref>), which accounts for about 400MB at the time of writing <ref type="bibr" target="#b123">[126]</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Computation Processing</head><p>We can neglect the PoW overhead, as a validator can involve itself in mining on the PoW-based main chain or not at will in Ethereum 2.0. Thus, the computation processing overhead mainly corresponds to the following two factors,</p><p>• A validator that is elected to be the attester to verify transactions for a single shard, without the loss of generality, can also be elected to be the attester for other shards (which is not discussed in details in any of the documents). We neglect the overhead of verifying signatures due to the small size of each group of attesters. Thus, the overhead of verifying transactions in n proposed B c s can be 787n = 403kH/s. • Every checkpoint period (100B c s of each shard) the checkpoint committee consisting of 400 validators finalizes the checkpoint of each shard. This corresponds to, the 2/3 signatures required to reach the consensus for each checkpoint in every single shard, i.e., n(400×2/3) 800 = 171H; verifying transactions incurring n|Bc| 800|Tx| = 4kH/s; uploading checkpoints to the beacon chain with the consensus, i.e., 2nm 800×3 = 3.4H/s. Note that, the verification of proposed B c s in each shard is independent to the verification of notarizing checkpoints. As a result, 408kH/s of the computation overhead can be obtained, which is smaller than that of Monoxide, and has yet to reach the bottleneck of the considered CPU.</p><p>In Ethereum 2.0, validators need to spend about 0.39USD/hour and 0.42USD/hour in AWS and Ali cloud for disk extension, respectively, to achieve nearly 134ktps. However, demand for stronger security incurs a huge overhead of disk storage for validators as they are most likely to be reallocated every 8s-slot, which forces the validators to store the ledgers of every shard. As such, the huge overhead of disk</p><p>The single-shard mode can be used rather than the super-full mode. A single-shard node processes the beacon chain blocks only, including the headers and signatures of the collation, i.e., Bc in each shard, but does not download and verify all the data of the Bcs unless it cares more about.</p><p>storage is boosted to ∼ 100T B (similar to that of Monoxide and Elastico), i.e., a super-full node <ref type="bibr" target="#b60">[61]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. COMPARISON AND DISCUSSION</head><p>This section, based on the calculation of the upper-bound of the throughput, provides a comparison among the considered sharding mechanisms, i.e., Monoxide, Elastico, OmniLedger, Rapidchain, Ethereum 2.0, and Chainspace. This comparison is also characterized as Table <ref type="table" target="#tab_8">3</ref>.</p><p>We conclude that RapidChain and Ethereum 2. Furthermore, we point out the challenges remaining unsolved practically, as well as the future trend being discussed.</p><p>1) Future Trend for Reducing the Overhead Three common pitfalls in existing sharding mechanisms prevent the system from being horizontally scaled to the theoretical upper bound due to the communication and storage overhead.</p><p>• An existing global chain that is needed to be stored by all participating miners/validators. Such a global chain tends to be responsible for all global operations, such as generating randomness, cross-validating transactions in different shards, reshuffling operation. However, this simply poses the bottleneck threat back to a single global chain, which is the root issue sharding technologies would have tried to solve. Insight 15 and SSChain <ref type="bibr" target="#b124">[127]</ref> hit this pitfall. Note that SSChain simply utilizes a two-layer architecture where a global chain is set to deal with all data migration and reshuffling operations. Trend 1: Restricting the use of a global chain in any operations, and the bottleneck requiring to be solved if used. • Requiring miners/validators to store ledgers from other shards. This is necessary in some of the existing sharding mechanisms in order to cross-validating transactions and reshuffling operation. However, it leads to miners/validators incurring high communication and storage overhead in O(n) (n is the number of shards). Insights 1, 7, 9, 10, 11, 13 hit this pitfall. Trend 2: Balancing the storage and communication overhead for miners/validators in sending cross-shard transactions and reshuffling, so that the order can be lower than O(n). One of the potential solutions might be the fraud proof that enables light nodes to be as secure as full nodes without needing to store the whole ledger <ref type="bibr" target="#b125">[128]</ref>, yet it has not been mature at the time of writing. • Allocating participating nodes to shards based on their business requirements in order to bypass the overhead of using the sharding technology. Business-driven members allocation for shards has been proposed and discussed in some designs, e.g., Ethereum 2.0 [100] 14 in order to reduce, 1) the frequency that a participating node gets swapped out; and 2) the ratio of non-cross-shard transactions, for the ease of management and lower overhead. However, this results in a very long epoch reconfiguration for participating nodes and unevenly shard size, which ultimately poses a risk of crowed transactions to a single shard as time passes and the size and throughput increases, thus hitting the bottleneck of intra-consensus. Trend 3: Avoiding simple businessdriven members allocation that risks shards suffering from crowed transactions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2) Future Trend for Strengthening the Security and Atomicity</head><p>This trend corresponds to the intra-consensus and atomicity of cross-shard transactions, respectively. We point out the potential direction on more secure intra-consensus and more efficient cross-shard transactions, as shown in the following.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Intra-consensus:</head><p>• Trend 4: Scaling the unbiased and unpredictable randomness generator in large-scale networks with as few third-party hardcoded settings as possible.</p><p>The unbiased and unpredictable randomness plays an important role in BFT-based intra-consensus design. Improving this kind of algorithms can significantly prevent the validators from being under DDoS attacks. Insights 3, 5, and 8 belong to this aspect. • Trend 5: Improving the PoW-based intra consensus, and generalizing it into other types of Nakamoto-14 A possible design proposed by Ethereum 2.0 is to merge shards that interact more frequently than others based consensus algorithms. Chu-ko-nu mining of Monoxide takes advantage of PoW to bypass the vortex of randomness, nevertheless, the security of which is dependent on the storage. As such, the future direction can be potentially decoupling the security and storage, and generalize the concept to other Nakamoto-based consensus algorithms, e.g., Proof-of-Stake.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Efficient atomicity:</head><p>• Trend 6: Enabling efficient conditional cross-shard transactions that enable contract-orient operations.</p><p>Only Chainspace and the future phase of Ethereum 2.0 claim to support such conditional cross-shard transactions so far, but at the cost of unacceptable overhead and latency, which requires more focus in the future trend.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. CONCLUSIONS</head><p>This survey highlights the importance of sharding for the design of scale-out Blockchains and systematizes the state-ofthe-art sharding mechanisms in regards to the intra-consensus security, atomicity of cross-shard transactions, and general challenges and improvements. We also proposed our calculations and insights analyzing the features and restrictions, based on which a comprehensive comparison among the considered sharding mechanisms was obtained. A list of the key observations and conclusions are as follows:</p><p>• For the first time Monoxide proposes a Nakamoto-based sharding mechanism, but at the cost of storing headers of all shards to guarantee the maximum intra-consensussafety.</p><p>• The traditional PBFT used in Elastico and Chainspace does not guarantee the intra-consensus-safety due to its weak scalability, while the BFT-based sharding mechanisms, i.e., OmniLedger, Rapidchain, and Ethereum 2.0, improve the intra-consensus-safety in the sense </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>FIGURE 2 .</head><label>2</label><figDesc>FIGURE 2. (Left) ByzCoin implements a tree with a fixed branching factor and an increasing depth. (Right) ByzCoinX implements a shadow tree with a fixed depth and an increasing branching factor.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Insight 7 .FIGURE 4 .</head><label>74</label><figDesc>FIGURE 4. Ethereum 2.0 implements RANDAO and Verifiable Delay Function to generate randomness.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>•FIGURE 5 .</head><label>5</label><figDesc>FIGURE 5. (Top) Each committee (shard) maintains a routingtable containing log 2 n other committees. The routing table improves the efficient communication among multiple shards, as described in Section III-C2. Committee C0 can locate C3 (via C2) responsible for transactions with prefix 0x11. (Bottom) To cross-validate a UTXO-based cross-shard transaction requires this transaction to be spilt in three-way confirmation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>To be specific, the reference committee (C r ) announces a PoW puzzle based on the randomness generated in epoch i -1 (R i ) by the DRG protocol, thus validators that wish to participate in epoch i + 1 those that have participated in epoch i -1 and i) can solve the puzzle and inform C r by the end of epoch i. During epoch i + 1, C r defines the active and inactive lists of validators of epoch i + 1, and swap-out a constant number of validators from one to another committee based on R i+1 generated in epoch i. Finally, C r agrees on a reference block stored in the local ledger of C r , and broadcasts it to the entire network. This design, compared to that of OmniLedger, incurs less overhead and allows a more frequent epoch reconfiguration to suit more highly adaptive adversaries.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>2 = 1 . 2 = 2 .</head><label>2122</label><figDesc>This work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/. This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2020.2965147, IEEE Access Guangsheng Yu et al.: Survey: Sharding in Blockchains by n|H| T = 20.8M B/s. • Throughput of a single shard (intra-throughput). This is simply calculated by |B| |Tx|T = 10.24tps. • Throughput of the network (inter-throughput). This can be calculated by multiplying the intra-throughput by the improving factor, i.e., n 2 for Monoxide (details refer to Section III-B1), as shown in the following, -Mixed PoW targets of shards in one batch. This can be calculated by 10.24n 23M tps, where n = 262, 144. -Identical PoW targets of shards in one batch. This can be calculated by 10.24n 56M tps, where n = 524, 288.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>3 2 .</head><label>2</label><figDesc>4M B where T = 10s and |Tx| = 250B, |H| = 500B, |Sig| = 65B, n = 48, m = 64(</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>tual | Ḃ| roughly 12 .</head><label>12</label><figDesc>5% larger than the metadata, i.e., | Ḃ| = 9M B. We further consider the parameter κ = d = m -1 = 255, where κ and d denote the number of chunks and the number of neighbours of each validator, respectively. A single MPT proof incurs a size of 32 log 2 (d) = 256B. Thus, the bandwidth overhead to gossip Bs by IDA is | Ḃ|+256d T = 0.55M B/s, where | Ḃ| can be regarded as the size of chunks, and 256B denotes the total size of a single MPT proof sent to each neighbour.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head></head><label></label><figDesc>consider |B c | (collation in a shard) = 1.5M B, |H c | = |H b | (size of a header on the beacon chain) = 500B, |Tx| = 250B, |Sig| = 256B, T = 8s</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>= 1 . 1 ) 2 ) 3 ) = 516M B. 3 )</head><label>11233</label><figDesc>7M B/s. Every checkpoint period contains 100 B c s, while the 400 validators as a global checkpoint-committee need to sign the tip B c during the checkpoint period. This is also called notarization in Ethereum 2.0. By anchoring the checkpoint, history can be deterministically finalized and cannot be reverted. Concretely, it consists of the following steps, Finalize the checkpoints. The required data size can be calculated by n(20|B c |+|B c |) = 15.75GB. Upload to the beacon chain. The required data size for the selected validators to upload the checkpoints of all shards can be calculated by n(|B c | + 400×2|Sig| Consensus on the beacon chain. The required data size can be calculated by ( √ nm|H b | + |H b |) = 31.7KB, as each validator should be aware of the body of the corresponding B c during the previous steps.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>•</head><label></label><figDesc>Each block of the beacon chain, i.e., B b needs to store H c s from all involved shards, i.e., nh|Hc| = 238GB. In addition, the IDs all active validators need to be stored in the beacon chain, i.e., 32nm = 128KB. • Validators require to download the entire local ledger of the shard in which they are allocated, i.e., h|B c | = 1.43T B.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head></head><label></label><figDesc>0 implement optimizations that reduce restrictions of Elastico and OmniLedger, which leads to RapidChain and Ethereum 2.0 being the most advanced BFT-based sharding mechanisms in terms of throughput and cost. On the other hand, Monoxide pushes the upper-bound of throughput to Mega level, and opens up a new direction of the Nakamoto-based sharding mechanisms. Chainspace has plenty of room for performance improvement for sharded-smart contract.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head></head><label></label><figDesc>This work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/. This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2020.2965147, IEEE Access Guangsheng Yu et al.: Survey: Sharding in Blockchains that scaling the traditional PBFT or increasing the fault tolerance of the traditional PBFT. • The randomness generators of all considered sharding mechanisms in this paper need strict network settings, otherwise the unpredictiability and unbiasability in scaled networks will be compromised. • Monoxide, OmniLedger, Rapidchain, and Ethereum 2.0 all propose their own solution to the issue of cross-shard transactions, none of which can support cross-shard smart contracts. Only Chainspace proposes a smartcontract-oriented sharding mechanism, but at the cost of low throughput. • All considered sharding mechanisms introduce the optimizations to address the new challenges their proposed sharding mechanisms pose to the system, i.e., latency and storage, but further improvements are necessary.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>TABLE 1 .</head><label>1</label><figDesc>Notation Definition Txs, and Sigs. Note that, |H| and |Sigs| are negligible for |B|.</figDesc><table><row><cell cols="2">Notation Definition</cell></row><row><cell>| • |</cell><cell>Size of the items</cell></row><row><cell>C H</cell><cell>Block header</cell></row><row><cell>Tx</cell><cell>Transaction</cell></row><row><cell>Sig</cell><cell>Signature</cell></row><row><cell>T</cell><cell>Block period</cell></row><row><cell>E k</cell><cell>k-th epoch</cell></row><row><cell>E</cell><cell>Epoch length</cell></row><row><cell>n</cell><cell>The number of shards</cell></row><row><cell>m</cell><cell>Size of each shard</cell></row><row><cell>h</cell><cell>Expected block height of chains among all the shards</cell></row></table><note><p>h Blockchain with a block height of h within a single shard C h Headerchain with a block height of h within a single shard B Block, including H,</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>TABLE 2 .</head><label>2</label><figDesc>A comparison regarding the protocols (ranged from the settings of intra-consensus to the design of cross-shard atomicity, as well as the corresponding overhead) among the discussed sharding mechanisms in this paper is elaborated.</figDesc><table><row><cell></cell><cell></cell><cell>Monoxide</cell><cell>Elastico</cell><cell>OmniLedger</cell><cell cols="2">RapidChain</cell><cell>Ethereum 2.0</cell><cell>Chainspace</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>Intra</cell><cell>Sync</cell><cell></cell></row><row><cell cols="2">Network model</cell><cell>Partial-sync</cell><cell>Partial-sync</cell><cell>Partial-sync</cell><cell></cell><cell></cell><cell>Partial-sync</cell><cell>Partial-sync</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>Total</cell><cell>Partial-sync</cell><cell></cell></row><row><cell>Security model</cell><cell>Threat model</cell><cell>Attackers behave arbitrarily, Uncoordinated majority</cell><cell>Attackers behave arbitrarily, slowly adaptive</cell><cell>Attackers behave arbitrarily, slowly adaptive</cell><cell cols="2">Attackers behave arbitrarily, slowly adaptive</cell><cell>Attackers behave arbitrarily, Uncoordinated majority</cell><cell>Attackers behave arbitrarily, Uncoordinated majority</cell></row><row><cell></cell><cell>Intra</cell><cell>50%</cell><cell>33%</cell><cell>33%</cell><cell>50%</cell><cell></cell><cell>33%</cell><cell>33%</cell></row><row><cell>FT</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>Total</cell><cell>50%</cell><cell>25%</cell><cell>25%</cell><cell>33%</cell><cell></cell><cell>33%</cell><cell>25%</cell></row><row><cell cols="2">Intra-Consensus Protocol</cell><cell>PoW-based Chu-ko-nu mining</cell><cell>PBFT</cell><cell>ByzCoinX</cell><cell>50% BFT</cell><cell></cell><cell>BFT-based PoS</cell><cell>MOD-SMART implementation of PBFT</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>Yes. The R i+1 is</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell>Yes. R i+1 is generated</cell><cell>generated by using</cell><cell cols="2">Yes. R i+1 is generated</cell><cell>Yes. Each R is generated</cell></row><row><cell>Randomness</cell><cell>Existence</cell><cell>No</cell><cell>by the final committee at</cell><cell>RandHound + VRF in</cell><cell cols="2">by the reference committee</cell><cell>by using RANDAO + VDF</cell><cell>Unknown</cell></row><row><cell>(R)</cell><cell></cell><cell></cell><cell>the end of epoch i</cell><cell>the beginning of epoch</cell><cell cols="2">at the end of epoch i</cell><cell>on the beacon chain</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>i+1</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>Use</cell><cell>N/A</cell><cell>1. The seed of PoW puzzle for the next epoch; 2. Select the leader during intra-consensus</cell><cell>1. Select the leader and the sub-group allocation during intra-consensus; 2. Epoch reconfiguration; 3. trust-but-verify transaction validation scheme</cell><cell cols="2">1. The seed of PoW puzzle for the next epoch; 2. Select the leader during intra-consensus; 4. Epoch reconfiguration bootstrapping; 3. Decentralized</cell><cell>1. Select the proposer of each shard; 2. Select the attesters for global pool. checkpointing from the responsible for each shard; 3. Select the validators</cell><cell>Unknown</cell></row><row><cell>Members</cell><cell>Allocation</cell><cell>One-off allocation based on the identity (address) of nodes</cell><cell>Allocation based on the least-significant bits of the result of PoW puzzles</cell><cell>Allocation based on R</cell><cell cols="2">Allocation based on the result of PoW puzzles</cell><cell>Allocation based on R</cell><cell>One-off allocation based on objects</cell></row><row><cell></cell><cell>Safe Epoch reconfigu-ration</cell><cell>N/A</cell><cell>Unsafe</cell><cell>Yes, swapping-out bounded by 2/3 at a given time</cell><cell cols="2">Yes, swapping-out a constant number of node</cell><cell>Yes</cell><cell>N/A</cell></row><row><cell cols="2">Additional global Blockchain</cell><cell>Mixed targets: No Identical targets: Yes</cell><cell>Yes, a global ledger</cell><cell>Yes, identity Blockchain</cell><cell cols="2">Yes, reference Blockchain</cell><cell>Yes, the mainnet and beacon chain</cell><cell>No</cell></row><row><cell cols="2">Transaction structure</cell><cell>Account</cell><cell>UTXO</cell><cell>UTXO</cell><cell>UTXO</cell><cell></cell><cell>Account</cell><cell>Object-driven, contract-sharded</cell></row><row><cell></cell><cell>Support</cell><cell>Yes</cell><cell>No</cell><cell>Yes</cell><cell>Yes</cell><cell></cell><cell>Yes</cell><cell>Yes</cell></row><row><cell>Cross-shard Tx</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>Method</cell><cell>Async, Lock-free</cell><cell>N/A</cell><cell>Sync, Lock/Unlock</cell><cell cols="2">Sync, Lock/Unlock</cell><cell>Sync, Lock/Unlock</cell><cell>Sync, Lock/Unlock</cell></row><row><cell></cell><cell>Communi-</cell><cell>Mixed PoW targets:</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Complexity</cell><cell>cation</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table><note><p><p>O(m + n log 2 n)</p>Identical PoW targets:</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head></head><label></label><figDesc>This work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/. This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2020.2965147, IEEE Access Guangsheng Yu et al.: Survey: Sharding in Blockchains</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>•</head><label></label><figDesc>The shard ledger pruning can be achieved by constructing an MPT with the aggregated Bs in the current E k , and end up finalizing a state block being the genesis B of E k+1 at the end of E k . Validators only need to store H of each state block, and all the regular Bs of each E. This can be calculated by h|H| + |B|E</figDesc><table><row><cell>T</cell><cell>48GB.</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>•</head><label></label><figDesc>Bandwidth overhead across all shards. The cross-shard operation of RapidChain features a routing-table maintained by every validator in each shard. Every validator communicates with other log 2 (n) 8 shards, and records log 2 log 2 (n)3 nodes of each other shard. As such, this can be 2(8×3)|B| T = 23.4M B/s. Here, the senders, in the worst case, incur a double overhead of cross-shard operation due to the "three-way confirmation"; refer to Section III-B4. Another IDA gossiping is conducted by the shard leader after receiving the cross-shard B, this can be another The total bandwidth overhead of a single validator has been upper-bounded if we sum up the values of intra-bandwidth and inter-bandwidth, i.e., 23.4 + 0.55 × 2 &lt; 25M B/s. Restricted by this, RapidChain can achieve nearly 128ktps.</figDesc><table><row><cell>| Ḃ|+256d T</cell><cell>= 0.55M B/s.</cell></row><row><cell cols="2">• Throughput of a single shard. This is simply defined as</cell></row><row><cell cols="2">1000tps, as discussed previously.</cell></row><row><cell cols="2">• Throughput of the network. This can be calculated by</cell></row><row><cell cols="2">multiplying intra-throughput by the improving factor,</cell></row><row><cell cols="2">i.e., n 2 in RapidChain (details refer to Section III-B4). Thus, it is 1000n 2 = 128ktps.</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>•</head><label></label><figDesc>The routing table of a validator stores ID of all members in its committee, as well as log 2 log 2 n validators of other log</figDesc><table /><note><p>2 n committees, i.e. 32m + 32 log 2 (log 2 (n)) log 2 (n) = 9kB. • RapidChain suggests using the shard pruning scheme proposed in OmniLedger. Thus it can be calculated by h|H| + |B|E T 42GB.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head></head><label></label><figDesc>This can be calculated by</figDesc><table><row><cell>15.75GB+516M B+31.7KB 800</cell><cell>= 20.8M B/s.</cell></row><row><cell>|Bc| |Tx|T = 787tps.</cell><cell></cell></row><row><cell cols="2">• Throughput of the network. This can be calculated by</cell></row><row><cell cols="2">multiplying intra-bandwidth by the improving factor,</cell></row><row><cell cols="2">i.e., n 3 for Ethereum 2.0 (details refer to Section III-B5). Thus, it is 787n 3 = 134ktps.</cell></row><row><cell cols="2">The total bandwidth overhead of a single validator has been</cell></row><row><cell cols="2">bounded if we sum up the values of both kinds of bandwidth</cell></row><row><cell cols="2">overhead, i.e., 192KB + 1.7M B + 20.8M B &lt; 25M B/s.</cell></row><row><cell cols="2">Restricted by this, Ethereum 2.0 can achieve nearly 134ktps.</cell></row></table><note><p>• Throughput of a single shard.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8"><head>TABLE 3 .</head><label>3</label><figDesc>This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/ACCESS.2020.2965147, IEEE Access Guangsheng Yu et al.: Survey: Sharding in Blockchains A comparison (regarding the results of throughput and cost calculated in Section IV-A) among the discussed sharding mechanisms in this paper is elaborated. Based on the result, the latency is also obtained and shown. Note that, we consider cloud servers with outbound bandwidth 25MB/s, 4vCPU of Turbo boost, and 1TB basic disk storage space (N/A: Not Available).</figDesc><table><row><cell></cell><cell></cell><cell>Monoxide</cell><cell>Elastico</cell><cell>OmniLedger</cell><cell>RapidChain</cell><cell>Ethereum 2.0</cell><cell>Chainspace</cell></row><row><cell>Shards' settings</cell><cell>Number of shards (n)</cell><cell>2 10 ∼2 18</cell><cell>&lt;10 2</cell><cell>&lt;2 6</cell><cell>&lt;2 8</cell><cell>&lt;2 9</cell><cell>&lt;10 2</cell></row><row><cell></cell><cell>Shard size (m)</cell><cell>10 2 ∼10 4</cell><cell>&lt;10 2</cell><cell>2 2 ∼2 10</cell><cell>(2 2 -1)∼2 8</cell><cell>&lt;10 2</cell><cell>&lt;10 2</cell></row><row><cell cols="2">Epoch length</cell><cell>N/A</cell><cell>∼10min</cell><cell>≥one day</cell><cell>≤one day</cell><cell>one week</cell><cell>Exists, details not provided</cell></row><row><cell></cell><cell>Transaction</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Latency</cell><cell>tion confirma-</cell><cell>23s</cell><cell>&lt;900s</cell><cell>∼100s</cell><cell>70s</cell><cell>6s∼8s [99]</cell><cell>2s</cell></row><row><cell></cell><cell>Epoch</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>reconfigu-</cell><cell>N/A</cell><cell>N/A</cell><cell>1000s</cell><cell>200∼350s</cell><cell>Unknown</cell><cell>Unknown</cell></row><row><cell></cell><cell>ration</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>Improving factor (N )</cell><cell>n/2</cell><cell>n</cell><cell>1∼n/2</cell><cell>n/2</cell><cell>n/3</cell><cell>1∼n/2</cell></row><row><cell>Upper-bound</cell><cell>Throughput</cell><cell>1.23∼2.56Mtps</cell><cell>48ktps</cell><cell>28.8ktps</cell><cell>128ktps</cell><cell>134ktps</cell><cell>&lt;400tps</cell></row><row><cell></cell><cell>Cost</cell><cell>30∼80 USD/hour</cell><cell>30∼35 USD/hour</cell><cell>0.2∼0.3 USD/hour</cell><cell>0.2∼0.3 USD/hour</cell><cell>0.4∼0.45 USD/hour</cell><cell>N/A</cell></row></table><note><p>This work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/.</p></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>A few sharding mechanisms are incurring a total</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_1"><p>25% FT based on the 33% FT in each shard, e.g., Elastico, OmniLedger, and Chainspace. This can be a BFT-based 1% attack, by dispersing validators into as many shards as possible to maximize the possibility to control some shards. Elastico and Chainspace suffer from this security issue, while OmniLedger implements a scalable BFT-based consensus algorithm to address this issue.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_2"><p>• In the case of mixed PoW targets, a miner is allowed to finalize blocks and send them to any shards i to j</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_3"><p>Rational miners tend to mine on as many shards as possible so that the PoW difficulties will be self-adapted to be identical.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_4"><p>In fact, Elastico takes the discrepancies into account, where there can be 3m/2 messages received by a validator while there are only m validators in the shard due to the network delay. In this case, other validators can choose only (3m/2)×(1/3)+1 = m/2+1 values of Hash(λ i ) to generate their own randomness. In contrast, validators receiving only 2m/3 values need to choose all 2m/3 values of Hash(λ i ) to generate their own randomness</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_5"><p>https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_depositcontract.md</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="8" xml:id="foot_6"><p>https://github.com/sivel/speedtestcli. speedtest-cli is used to test the bottleneck of inbound/outbound bandwidth on both AWS and Ali cloud. The average inbound bandwidth is 535.91Mbps, and the average outbound bandwidth is 202.56Mbps, while the latter matches with the 200Mbps displayed in the dashboard.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="9" xml:id="foot_7"><p>Although the other discussed sharding mechanisms, e.g., Elastico and RapidChain, also conduct a PoW consensus during the stage of validators allocation to prevent the sybil attack, those miners participating in intershard communication may have to compete with those who do not attend in Monoxide. This is also the reason m does not account for any calculations of Monoxide. As a result, the hashrate of PoW in Monoxide is bound to be much higher than that of in Elastico or RapidChain, which should be considered in the calculation.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="10" xml:id="foot_8"><p>This is 3 2 of the minimum number of members in each shard, as defined in<ref type="bibr" target="#b56">[57]</ref>.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_9"><p>Guangsheng Yu et al.: Survey: Sharding in Blockchains</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENT</head><p>This project was partially supported by funding from Food Agility CRC Ltd, funded under the Commonwealth Government CRC Program. The CRC Program supports industryled collaborations between industry, researchers and the community. This project was also partially supported by UCOT Australia Pty Ltd. UCOT Australia is a full-industry chain anti-counterfeiting solution operator, dedicated to research and development of technology products based on Blockchain.</p></div>
			</div>


			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This project was partially supported by funding from Food Agility CRC Ltd, funded under the Commonwealth Government CRC Program. The CRC Program supports industry-led collaborations between industry, researchers and the community. This project was also partially spported by and UCOT Australia Pty Ltd. UCOT Australia is a full-industry chain anti-counterfeiting traceability solution operator, dedicated to research and development of technology products based on Blockchain.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Bitcoin: A peer-to-peer electronic cash system</title>
		<author>
			<persName><forename type="first">S</forename><surname>Nakamoto</surname></persName>
		</author>
		<ptr target="https://bitcoin.org/bitcoin.pdf" />
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Blockchain meets iot: An architecture for scalable access management in iot</title>
		<author>
			<persName><forename type="first">O</forename><surname>Novo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Internet of Things Journal</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="1184" to="1195" />
			<date type="published" when="2018-04">April 2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Integrated blockchain and edge computing systems: A survey, some research issues and challenges</title>
		<author>
			<persName><forename type="first">R</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">R</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Si</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Communications Surveys Tutorials</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="1508" to="1532" />
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Survey on blockchain for internet of things</title>
		<author>
			<persName><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Zha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Ni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">P</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">J</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Niu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Zheng</surname></persName>
		</author>
		<ptr target="http://www.sciencedirect.com/science/article/pii/S0140366418306881" />
	</analytic>
	<monogr>
		<title level="j">Computer Communications</title>
		<imprint>
			<biblScope unit="volume">136</biblScope>
			<biblScope unit="page" from="10" to="29" />
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Practical byzantine fault tolerance</title>
		<author>
			<persName><forename type="first">M</forename><surname>Castro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Liskov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">OSDI</title>
		<imprint>
			<biblScope unit="volume">99</biblScope>
			<biblScope unit="page" from="173" to="186" />
			<date type="published" when="1999">1999. 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">The quest for scalable blockchain fabric: Proof-of-work vs. bft replication</title>
		<author>
			<persName><forename type="first">M</forename><surname>Vukolić</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International workshop on open problems in network security</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="112" to="125" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Bitcoin and beyond: A technical survey on decentralized digital currencies</title>
		<author>
			<persName><forename type="first">F</forename><surname>Tschorsch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Scheuermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Communications Surveys Tutorials</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="2084" to="2123" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">The bitcoin lightning network: Scalable off-chain instant payments</title>
		<author>
			<persName><forename type="first">J</forename><surname>Poon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Dryja</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Raiden network</title>
		<ptr target="https://raiden.network/" />
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Plasma: Scalable autonomous smart contracts</title>
		<author>
			<persName><forename type="first">J</forename><surname>Poon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Buterin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="1" to="47" />
		</imprint>
	</monogr>
	<note>White paper</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Sok: A taxonomy for layer-2 scalability related protocols for cryptocurrencies</title>
		<author>
			<persName><forename type="first">M</forename><surname>Jourenko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Kurazumi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Larangeira</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Tanaka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IACR Cryptology ePrint Archive</title>
		<imprint>
			<biblScope unit="volume">2019</biblScope>
			<biblScope unit="page">352</biblScope>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Scalable sql and nosql data stores</title>
		<author>
			<persName><forename type="first">R</forename><surname>Cattell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Acm Sigmod Record</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="12" to="27" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Bitcoin-ng: A scalable blockchain protocol</title>
		<author>
			<persName><forename type="first">I</forename><surname>Eyal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">E</forename><surname>Gencer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">G</forename><surname>Sirer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">V</forename><surname>Renesse</surname></persName>
		</author>
		<ptr target="https://www.usenix.org/conference/nsdi16/technical-sessions/presentation/eyal" />
	</analytic>
	<monogr>
		<title level="m">13th USENIX Symposium on Networked Systems Design and Implementation (NSDI 16)</title>
		<meeting><address><addrLine>Santa Clara, CA</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2016-03">Mar. 2016</date>
			<biblScope unit="page" from="45" to="59" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Snow white: Provably secure proofs of stake</title>
		<author>
			<persName><forename type="first">I</forename><surname>Bentov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Pass</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Shi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IACR Cryptology ePrint Archive</title>
		<imprint>
			<biblScope unit="volume">2016</biblScope>
			<biblScope unit="page">919</biblScope>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Ouroboros: A provably secure proof-of-stake blockchain protocol</title>
		<author>
			<persName><forename type="first">A</forename><surname>Kiayias</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Russell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>David</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Oliynykov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Annual International Cryptology Conference</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="357" to="388" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">The honey badger of bft protocols</title>
		<author>
			<persName><forename type="first">A</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Xia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Croman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security</title>
		<meeting>the 2016 ACM SIGSAC Conference on Computer and Communications Security</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="31" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Hotstuff: Bft consensus with linearity and responsiveness</title>
		<author>
			<persName><forename type="first">M</forename><surname>Yin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Malkhi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">K</forename><surname>Reiter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">G</forename><surname>Gueta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Abraham</surname></persName>
		</author>
		<idno type="DOI">10.1145/3293611.3331591</idno>
		<ptr target="http://doi.acm.org/10.1145/3293611.3331591" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2019 ACM Symposium on Principles of Distributed Computing, ser. PODC &apos;19</title>
		<meeting>the 2019 ACM Symposium on Principles of Distributed Computing, ser. PODC &apos;19<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="347" to="356" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Zyzzyva: speculative byzantine fault tolerance</title>
		<author>
			<persName><forename type="first">R</forename><surname>Kotla</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Alvisi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dahlin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Clement</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">ACM SIGOPS Operating Systems Review</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="45" to="58" />
			<date type="published" when="2007">2007</date>
			<publisher>ACM</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Algorand: Scaling byzantine agreements for cryptocurrencies</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Gilad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Hemo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Micali</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Vlachos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Zeldovich</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 26th Symposium on Operating Systems Principles</title>
		<meeting>the 26th Symposium on Operating Systems Principles</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">On scaling decentralized blockchains</title>
		<author>
			<persName><forename type="first">K</forename><surname>Croman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Decker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Eyal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">E</forename><surname>Gencer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Juels</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kosba</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Saxena</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Gün</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Sirer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName><surname>Wattenhofer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Financial Cryptography and Data Security</title>
		<editor>
			<persName><forename type="first">J</forename><surname>Clark</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">S</forename><surname>Meiklejohn</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">P</forename><forename type="middle">Y</forename><surname>Ryan</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">D</forename><surname>Wallach</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">M</forename><surname>Brenner</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">K</forename><surname>Rohloff</surname></persName>
		</editor>
		<meeting><address><addrLine>Berlin, Heidelberg; Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="106" to="125" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Bip102: Block size increase to 2mb</title>
		<author>
			<persName><forename type="first">J</forename><surname>Garzik</surname></persName>
		</author>
		<ptr target="https://github.com/bitcoin/bips/blob/master/bip-0102.mediawiki" />
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
	<note>Available</note>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Bip103: Block size following technological growth</title>
		<author>
			<persName><forename type="first">P</forename><surname>Wuille</surname></persName>
		</author>
		<ptr target="https://github.com/bitcoin/bips/blob/master/bip-0103.mediawiki" />
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Bip141: Segregated witness (consensus layer)</title>
		<author>
			<persName><forename type="first">E</forename><surname>Lombrozo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Wuille</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Secure high-rate transaction processing in bitcoin</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Sompolinsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zohar</surname></persName>
		</author>
		<editor>Financial Cryptography and Data Security, R. Böhme and T. Okamoto</editor>
		<imprint>
			<date type="published" when="2015">2015</date>
			<publisher>Springer</publisher>
			<biblScope unit="page" from="507" to="527" />
			<pubPlace>Berlin, Heidelberg; Berlin Heidelberg</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">The tangle</title>
		<author>
			<persName><forename type="first">S</forename><surname>Popov</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page">131</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Byteball: A decentralized system for storage and transfer of value</title>
		<author>
			<persName><forename type="first">A</forename><surname>Churyumov</surname></persName>
		</author>
		<ptr target="https://byteball.org/Byteball.pdf" />
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">The swirlds hashgraph consensus algorithm: Fair, fast, byzantine fault tolerance</title>
		<author>
			<persName><forename type="first">L</forename><surname>Baird</surname></persName>
		</author>
		<idno>SWIRLDS-TR-2016-01</idno>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
	<note type="report_type">Tech</note>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Spectre: A fast and scalable cryptocurrency protocol</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Sompolinsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Lewenberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zohar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IACR Cryptology ePrint Archive</title>
		<imprint>
			<biblScope unit="volume">2016</biblScope>
			<biblScope unit="page">1159</biblScope>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Phantom: A scalable blockdag protocol</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Sompolinsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zohar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IACR Cryptology ePrint Archive</title>
		<imprint>
			<biblScope unit="volume">2018</biblScope>
			<biblScope unit="page">104</biblScope>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Scaling nakamoto consensus to thousands of transactions per second</title>
		<author>
			<persName><forename type="first">C</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Long</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Yao</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1805.03870</idno>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">A multiple blockchains architecture on inter-blockchain communication</title>
		<author>
			<persName><forename type="first">L</forename><surname>Kan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Hafiz Muhammad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Siyuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Linchao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Kai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 IEEE International Conference on Software Quality, Reliability and Security Companion (QRS-C)</title>
		<imprint>
			<date type="published" when="2018-07">July 2018</date>
			<biblScope unit="page" from="139" to="145" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Blockchain challenges and opportunities: A survey</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H.-N</forename><surname>Dai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Web and Grid Services</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="352" to="375" />
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Survey of consensus protocols on blockchain applications</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">S</forename><surname>Sankar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sindhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sethumadhavan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 4th International Conference on Advanced Computing and Communication Systems (ICACCS)</title>
		<imprint>
			<date type="published" when="2017-01">Jan 2017</date>
			<biblScope unit="page" from="1" to="5" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">A survey of blockchain: Techniques, applications, and challenges</title>
		<author>
			<persName><forename type="first">W</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">G</forename><surname>Hatcher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Yu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 27th International Conference on Computer Communication and Networks (ICCCN)</title>
		<imprint>
			<date type="published" when="2018-07">July 2018</date>
			<biblScope unit="page" from="1" to="11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">A survey on consensus mechanisms and mining strategy management in blockchain networks</title>
		<author>
			<persName><forename type="first">W</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">T</forename><surname>Hoang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Xiong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Niyato</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Wen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">I</forename><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Access</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page">370</biblScope>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Blockchain: Trends and future</title>
		<author>
			<persName><forename type="first">W</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Garg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Raza</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Herbert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Kang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Knowledge Management and Acquisition for Intelligent Systems</title>
		<editor>
			<persName><forename type="first">K</forename><surname>Yoshida</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">M</forename><surname>Lee</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer International Publishing</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="201" to="210" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">An overview of blockchain technology: Architecture, consensus, and future trends</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Dai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 IEEE International Congress on Big Data (BigData Congress)</title>
		<imprint>
			<date type="published" when="2017-06">June 2017</date>
			<biblScope unit="page" from="557" to="564" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">Scalability analysis of blockchains through blockchain simulation</title>
		<author>
			<persName><forename type="first">S</forename><surname>Goswami</surname></persName>
		</author>
		<ptr target="https://digitalscholarship.unlv.edu/thesesdissertations/2976" />
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
	<note>UNLV Theses, Dissertations, Professional Papers, and Capstones</note>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">The scalability challenge of ethereum: An initial quantitative analysis</title>
		<author>
			<persName><forename type="first">M</forename><surname>Bez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Fornari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Vardanega</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2019 IEEE International Conference on Service-Oriented System Engineering (SOSE)</title>
		<imprint>
			<date type="published" when="2019-04">April 2019</date>
			<biblScope unit="page" from="167" to="176" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Blockchain tradeoffs and challenges for current and emerging applications: Generalization, fragmentation, sidechains, and scalability</title>
		<author>
			<persName><forename type="first">C</forename><surname>Worley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Skjellum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 IEEE International Conference on Internet of Things (iThings) and IEEE Green Computing and Communications (GreenCom) and IEEE Cyber</title>
		<imprint>
			<date type="published" when="2018-07">July 2018</date>
			<biblScope unit="page" from="1582" to="1587" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">A survey of scalability solutions on blockchain</title>
		<author>
			<persName><forename type="first">S</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Kwon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Cho</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 International Conference on Information and Communication Technology Convergence (ICTC)</title>
		<imprint>
			<date type="published" when="2018-10">Oct 2018</date>
			<biblScope unit="page" from="1204" to="1207" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Blockchain and scalability</title>
		<author>
			<persName><forename type="first">A</forename><surname>Chauhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><forename type="middle">P</forename><surname>Malviya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Verma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">S</forename><surname>Mor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 IEEE International Conference on Software Quality, Reliability and Security Companion (QRS-C)</title>
		<imprint>
			<date type="published" when="2018-07">July 2018</date>
			<biblScope unit="page" from="122" to="128" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Integrated blockchain and edge computing systems: A survey, some research issues and challenges</title>
		<author>
			<persName><forename type="first">R</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">R</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Si</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Communications Surveys Tutorials</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="1508" to="1532" />
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">A systematic literature review of blockchain-based applications: Current status, classification and open issues</title>
		<author>
			<persName><forename type="first">F</forename><surname>Casino</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">K</forename><surname>Dasaklis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Patsakis</surname></persName>
		</author>
		<ptr target="http://www.sciencedirect.com/science/article/pii/S0736585318306324" />
	</analytic>
	<monogr>
		<title level="j">Telematics and Informatics</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="page" from="55" to="81" />
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Analysis of the possibilities for improvement of blockchain technology</title>
		<author>
			<persName><forename type="first">D</forename><surname>Mechkaroska</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Dimitrova</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Popovska-Mitrovikj</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 26th Telecommunications Forum (TELFOR)</title>
		<imprint>
			<date type="published" when="2018-11">Nov 2018</date>
			<biblScope unit="page" from="1" to="4" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Untangling blockchain: A data processing view of blockchain systems</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">T A</forename><surname>Dinh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">C</forename><surname>Ooi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Knowledge and Data Engineering</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="1366" to="1385" />
			<date type="published" when="2018-07">July 2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">A survey of distributed consensus protocols for blockchain networks</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Xiao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Lou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">T</forename><surname>Hou</surname></persName>
		</author>
		<ptr target="http://arxiv.org/abs/1904.04098" />
	</analytic>
	<monogr>
		<title level="j">CoRR</title>
		<imprint>
			<date type="published" when="1904">1904.04098, 2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<monogr>
		<title level="m" type="main">Performance benchmarking and optimization for blockchain systems: A survey</title>
		<author>
			<persName><forename type="first">R</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C.-Z</forename><surname>Xu</surname></persName>
		</author>
		<editor>Blockchain -ICBC 2019, J. Joshi, S. Nepal, Q. Zhang, and L.-J. Zhang</editor>
		<imprint>
			<date type="published" when="2019">2019</date>
			<publisher>Springer International Publishing</publisher>
			<biblScope unit="page" from="171" to="185" />
			<pubPlace>Cham</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Survey of consensus protocols on blockchain applications</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">S</forename><surname>Sankar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sindhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sethumadhavan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 4th International Conference on Advanced Computing and Communication Systems (ICACCS)</title>
		<imprint>
			<date type="published" when="2017-01">Jan 2017</date>
			<biblScope unit="page" from="1" to="5" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">A gametheoretic analysis of shard-based permissionless blockchains</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">H</forename><surname>Manshaei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Jadliwala</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Maiti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Fooladgar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Access</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="78" to="100" />
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Metaanalysis of methods for scaling blockchain technology for automotive uses</title>
		<author>
			<persName><forename type="first">P</forename><surname>Singhal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Masih</surname></persName>
		</author>
		<ptr target="http://arxiv.org/abs/1907.02602" />
	</analytic>
	<monogr>
		<title level="j">CoRR</title>
		<imprint>
			<date type="published" when="1907">1907.02602, 2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">A survey on efficient parallelization of blockchain-based smart contracts</title>
		<author>
			<persName><forename type="first">A</forename><surname>Meneghetti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Parise</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sala</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Taufer</surname></persName>
		</author>
		<idno>abs/1904.00731</idno>
		<ptr target="http://arxiv.org/abs/1904.00731" />
	</analytic>
	<monogr>
		<title level="j">CoRR</title>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">Sok: Sharding on blockchain</title>
		<author>
			<persName><forename type="first">G</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><forename type="middle">J</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Nixon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Han</surname></persName>
		</author>
		<idno type="DOI">10.1145/3318041.3355457</idno>
		<ptr target="http://doi.acm.org/10.1145/3318041.3355457" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1st ACM Conference on Advances in Financial Technologies, ser. AFT &apos;19</title>
		<meeting>the 1st ACM Conference on Advances in Financial Technologies, ser. AFT &apos;19<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="41" to="61" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Monoxide: Scale out blockchains with asynchronous consensus zones</title>
		<author>
			<persName><forename type="first">J</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Wang</surname></persName>
		</author>
		<ptr target="https://www.usenix.org/conference/nsdi19/presentation/wang-jiaping" />
	</analytic>
	<monogr>
		<title level="m">16th USENIX Symposium on Networked Systems Design and Implementation (NSDI 19)</title>
		<meeting><address><addrLine>Boston, MA</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2019-02">Feb. 2019</date>
			<biblScope unit="page" from="95" to="112" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<analytic>
		<title level="a" type="main">Spanner: Google&amp;rsquo;s globally distributed database</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Corbett</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Dean</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Epstein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Fikes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Frost</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">J</forename><surname>Furman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ghemawat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Gubarev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Heiser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Hochschild</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Hsieh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kanthak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Kogan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Lloyd</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Melnik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Mwaura</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Nagle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Quinlan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Rolig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Saito</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Szymaniak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Taylor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Woodford</surname></persName>
		</author>
		<idno type="DOI">10.1145/2491245</idno>
		<ptr target="http://doi.acm.org/10.1145/2491245" />
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Comput. Syst</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="1" to="8" />
			<date type="published" when="2013-08">Aug. 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">Centrally banked cryptocurrencies</title>
		<author>
			<persName><forename type="first">G</forename><surname>Danezis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Meiklejohn</surname></persName>
		</author>
		<idno>abs/1505.06895</idno>
		<ptr target="http://arxiv.org/abs/1505.06895" />
	</analytic>
	<monogr>
		<title level="j">CoRR</title>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">A secure sharding protocol for open blockchains</title>
		<author>
			<persName><forename type="first">L</forename><surname>Luu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Narayanan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Baweja</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Gilbert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Saxena</surname></persName>
		</author>
		<idno type="DOI">10.1145/2976749.2978389</idno>
		<ptr target="http://doi.acm.org/10.1145/2976749.2978389" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, ser. CCS &apos;16</title>
		<meeting>the 2016 ACM SIGSAC Conference on Computer and Communications Security, ser. CCS &apos;16<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="17" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">Omniledger: A secure, scale-out, decentralized ledger via sharding</title>
		<author>
			<persName><forename type="first">E</forename><surname>Kokoris-Kogias</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Jovanovic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Gasser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Gailly</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Syta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Ford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 IEEE Symposium on Security and Privacy (SP)</title>
		<imprint>
			<date type="published" when="2018-05">May 2018</date>
			<biblScope unit="page" from="583" to="598" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">Rapidchain: Scaling blockchain via full sharding</title>
		<author>
			<persName><forename type="first">M</forename><surname>Zamani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Movahedi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Raykova</surname></persName>
		</author>
		<idno type="DOI">10.1145/3243734.3243853</idno>
		<ptr target="http://doi.acm.org/10.1145/3243734.3243853" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, ser. CCS &apos;18</title>
		<meeting>the 2018 ACM SIGSAC Conference on Computer and Communications Security, ser. CCS &apos;18<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="931" to="948" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<analytic>
		<title level="a" type="main">Chainspace: A sharded smart contracts platform</title>
		<author>
			<persName><forename type="first">M</forename><surname>Al-Bassam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Sonnino</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Bano</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Hrycyszyn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Danezis</surname></persName>
		</author>
		<idno>abs/1708.03778</idno>
		<ptr target="http://arxiv.org/abs/1708.03778" />
	</analytic>
	<monogr>
		<title level="j">CoRR</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<monogr>
		<title level="m" type="main">Ethereum sharding FAQ</title>
		<author>
			<persName><forename type="first">V</forename><surname>Buterin</surname></persName>
		</author>
		<ptr target="https://github.com/ethereum/wiki/wiki/Sharding-FAQ" />
		<imprint>
			<date type="published" when="2019-04-01">Apr. 2019, accessed on 01.08. 2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title level="a" type="main">The transaction concept: Virtues and limitations</title>
		<author>
			<persName><forename type="first">J</forename><surname>Gray</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB</title>
		<imprint>
			<date type="published" when="1981">1981</date>
			<biblScope unit="volume">81</biblScope>
			<biblScope unit="page" from="144" to="154" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<analytic>
		<title level="a" type="main">Blockbench: A framework for analyzing private blockchains</title>
		<author>
			<persName><forename type="first">T</forename><surname>Haerder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Reuter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">T A</forename><surname>Dinh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">C</forename><surname>Ooi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K.-L</forename><surname>Tan</surname></persName>
		</author>
		<idno type="DOI">10.1145/3035918.3064033</idno>
		<ptr target="http://doi.acm.org/10.1145/3035918.3064033" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2017 ACM International Conference on Management of Data, ser. SIGMOD &apos;17</title>
		<meeting>the 2017 ACM International Conference on Management of Data, ser. SIGMOD &apos;17<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1983">1983. 2017</date>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="1085" to="1100" />
		</imprint>
	</monogr>
	<note>ACM computing surveys (CSUR)</note>
</biblStruct>

<biblStruct xml:id="b63">
	<analytic>
		<title level="a" type="main">Enhancing bitcoin security and performance with strong consistency via collective signing</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">K</forename><surname>Kogias</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Jovanovic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Gailly</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Khoffi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Gasser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Ford</surname></persName>
		</author>
		<ptr target="https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/kogias" />
	</analytic>
	<monogr>
		<title level="m">25th USENIX Security Symposium (USENIX Security 16)</title>
		<meeting><address><addrLine>Austin, TX</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2016-08">Aug. 2016</date>
			<biblScope unit="page" from="279" to="296" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<analytic>
		<title level="a" type="main">Ethereum: A secure decentralised generalised transaction ledger</title>
		<author>
			<persName><forename type="first">G</forename><surname>Wood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Ethereum project yellow paper</title>
		<imprint>
			<date type="published" when="2014">2014. 2014</date>
			<biblScope unit="volume">151</biblScope>
			<biblScope unit="page" from="1" to="32" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b65">
	<monogr>
		<title level="m" type="main">in Data Privacy Management, Cryptocurrencies and Blockchain Technology</title>
		<author>
			<persName><forename type="first">A</forename><surname>Judmayer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zamyatin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Stifter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">G</forename><surname>Voyiatzis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Weippl</surname></persName>
		</author>
		<editor>J. Garcia-Alfaro, G. Navarro-Arribas, H. Hartenstein, and J. Herrera-Joancomartí</editor>
		<imprint>
			<date type="published" when="2017">2017</date>
			<publisher>Springer International Publishing</publisher>
			<biblScope unit="page" from="316" to="333" />
			<pubPlace>Cham</pubPlace>
		</imprint>
	</monogr>
	<note>Merged mining: Curse or cure?</note>
</biblStruct>

<biblStruct xml:id="b66">
	<monogr>
		<title level="m" type="main">Merged mining specification</title>
		<author>
			<persName><surname>Bitcoinwiki</surname></persName>
		</author>
		<idno>01.08.2019</idno>
		<ptr target="https://en.bitcoin.it/wiki/Merged_mining_specification" />
		<imprint>
			<date type="published" when="2015-08">Aug. 2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<analytic>
		<title level="a" type="main">Bit commitment using pseudorandomness</title>
		<author>
			<persName><forename type="first">M</forename><surname>Naor</surname></persName>
		</author>
		<idno type="DOI">10.1007/BF00196774</idno>
		<ptr target="https://doi.org/10.1007/BF00196774" />
	</analytic>
	<monogr>
		<title level="j">Journal of Cryptology</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="151" to="158" />
			<date type="published" when="1991-01">Jan 1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b68">
	<analytic>
		<title level="a" type="main">Reaching agreement in the presence of faults</title>
		<author>
			<persName><forename type="first">M</forename><surname>Pease</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Shostak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Lamport</surname></persName>
		</author>
		<idno type="DOI">10.1145/322186.322188</idno>
		<ptr target="http://doi.acm.org/10.1145/322186.322188" />
	</analytic>
	<monogr>
		<title level="j">J. ACM</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="228" to="234" />
			<date type="published" when="1980-04">Apr. 1980</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<analytic>
		<title level="a" type="main">A practical scheme for non-interactive verifiable secret sharing</title>
		<author>
			<persName><forename type="first">P</forename><surname>Feldman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">28th Annual Symposium on Foundations of Computer Science (sfcs 1987)</title>
		<imprint>
			<date type="published" when="1987-10">Oct 1987</date>
			<biblScope unit="page" from="427" to="438" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b70">
	<analytic>
		<title level="a" type="main">Non-interactive and information-theoretic secure verifiable secret sharing</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">P</forename><surname>Pedersen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology -CRYPTO &apos;91</title>
		<editor>
			<persName><forename type="first">J</forename><surname>Feigenbaum</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">Ed</forename><surname>Berlin</surname></persName>
		</editor>
		<meeting><address><addrLine>Heidelberg; Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1992">1992</date>
			<biblScope unit="page" from="129" to="140" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b71">
	<analytic>
		<title level="a" type="main">Publicly verifiable secret sharing</title>
		<author>
			<persName><forename type="first">M</forename><surname>Stadler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology -EUROCRYPT &apos;96</title>
		<editor>
			<persName><forename type="first">U</forename><surname>Maurer</surname></persName>
		</editor>
		<meeting><address><addrLine>Berlin, Heidelberg; Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1996">1996</date>
			<biblScope unit="page" from="190" to="199" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b72">
	<analytic>
		<title level="a" type="main">A simple publicly verifiable secret sharing scheme and its application to electronic voting</title>
		<author>
			<persName><forename type="first">B</forename><surname>Schoenmakers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology -CRYPTO&apos; 99</title>
		<editor>
			<persName><forename type="first">M</forename><surname>Wiener</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">Ed</forename><surname>Berlin</surname></persName>
		</editor>
		<meeting><address><addrLine>Heidelberg; Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="148" to="164" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b73">
	<analytic>
		<title level="a" type="main">Verifiable secret sharing and multiparty protocols with honest majority</title>
		<author>
			<persName><forename type="first">T</forename><surname>Rabin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ben-Or</surname></persName>
		</author>
		<idno type="DOI">10.1145/73007.73014</idno>
		<ptr target="http://doi.acm.org/10.1145/73007.73014" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twenty-first Annual ACM Symposium on Theory of Computing, ser. STOC &apos;89</title>
		<meeting>the Twenty-first Annual ACM Symposium on Theory of Computing, ser. STOC &apos;89<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1989">1989</date>
			<biblScope unit="page" from="73" to="85" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b74">
	<analytic>
		<title level="a" type="main">From byzantine consensus to bft state machine replication: A latency-optimal transformation</title>
		<author>
			<persName><forename type="first">J</forename><surname>Sousa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bessani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2012 Ninth European Dependable Computing Conference</title>
		<imprint>
			<date type="published" when="2012-05">May 2012</date>
			<biblScope unit="page" from="37" to="48" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b75">
	<analytic>
		<title level="a" type="main">Scalable bias-resistant distributed randomness</title>
		<author>
			<persName><forename type="first">E</forename><surname>Syta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Jovanovic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">K</forename><surname>Kogias</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Gailly</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Gasser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Khoffi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Fischer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Ford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 IEEE Symposium on Security and Privacy (SP)</title>
		<imprint>
			<date type="published" when="2017-05">May 2017</date>
			<biblScope unit="page" from="444" to="460" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b76">
	<analytic>
		<title level="a" type="main">Algorand: Scaling byzantine agreements for cryptocurrencies</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Gilad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Hemo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Micali</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Vlachos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Zeldovich</surname></persName>
		</author>
		<idno type="DOI">10.1145/3132747.3132757</idno>
		<ptr target="http://doi.acm.org/10.1145/3132747.3132757" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 26th Symposium on Operating Systems Principles, ser. SOSP &apos;17</title>
		<meeting>the 26th Symposium on Operating Systems Principles, ser. SOSP &apos;17<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="51" to="68" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b77">
	<analytic>
		<title level="a" type="main">Compact multi-signatures for smaller blockchains</title>
		<author>
			<persName><forename type="first">D</forename><surname>Boneh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Drijvers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Neven</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology -ASIACRYPT 2018</title>
		<editor>
			<persName><forename type="first">T</forename><surname>Peyrin</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">S</forename><surname>Galbraith</surname></persName>
		</editor>
		<meeting><address><addrLine>Cham</addrLine></address></meeting>
		<imprint>
			<publisher>Springer International Publishing</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="435" to="464" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b78">
	<analytic>
		<title level="a" type="main">Keeping authorities &quot;honest or bust&quot; with decentralized witness cosigning</title>
		<author>
			<persName><forename type="first">E</forename><surname>Syta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Tamas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Visher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">I</forename><surname>Wolinsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Jovanovic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Gasser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Gailly</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Khoffi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Ford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2016 IEEE Symposium on Security and Privacy (SP)</title>
		<imprint>
			<date type="published" when="2016-05">May 2016</date>
			<biblScope unit="page" from="526" to="545" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b79">
	<analytic>
		<title level="a" type="main">Efficient signature generation by smart cards</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">P</forename><surname>Schnorr</surname></persName>
		</author>
		<idno type="DOI">10.1007/BF00196725</idno>
		<ptr target="https://doi.org/10.1007/BF00196725" />
	</analytic>
	<monogr>
		<title level="j">Journal of Cryptology</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="161" to="174" />
			<date type="published" when="1991-01">Jan 1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b80">
	<monogr>
		<title level="m" type="main">Threshold signatures for blockchain systems</title>
		<author>
			<persName><forename type="first">C</forename><surname>Stathakopoulous</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Cachin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017">2017</date>
			<publisher>Swiss Federal Institute of Technology</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b81">
	<analytic>
		<title level="a" type="main">Threshold cryptosystems</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Desmedt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Frankel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology -CRYPTO&apos; 89 Proceedings</title>
		<editor>
			<persName><forename type="first">G</forename><surname>Brassard</surname></persName>
		</editor>
		<meeting><address><addrLine>New York, NY; New York</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1990">1990</date>
			<biblScope unit="page" from="307" to="315" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b82">
	<analytic>
		<title level="a" type="main">Robust threshold dss signatures</title>
		<author>
			<persName><forename type="first">R</forename><surname>Gennaro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Jarecki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Krawczyk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Rabin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology -EUROCRYPT &apos;96</title>
		<editor>
			<persName><forename type="first">U</forename><surname>Maurer</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">Ed</forename><surname>Berlin</surname></persName>
		</editor>
		<meeting><address><addrLine>Heidelberg; Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1996">1996</date>
			<biblScope unit="page" from="354" to="371" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b83">
	<analytic>
		<title level="a" type="main">Practical threshold signatures</title>
		<author>
			<persName><forename type="first">V</forename><surname>Shoup</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on the Theory and Applications of Cryptographic Techniques</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="207" to="220" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b84">
	<analytic>
		<title level="a" type="main">Threshold signatures, multisignatures and blind signatures based on the gap-diffie-hellman-group signature scheme</title>
		<author>
			<persName><forename type="first">A</forename><surname>Boldyreva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Public Key Cryptography -PKC 2003</title>
		<editor>
			<persName><forename type="first">G</forename><surname>Desmedt</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">Ed</forename><surname>Berlin</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">Heidelberg</forename></persName>
		</editor>
		<meeting><address><addrLine>Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="31" to="46" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b85">
	<analytic>
		<title level="a" type="main">Random oracles in constantinople: Practical asynchronous byzantine agreement using cryptography</title>
		<author>
			<persName><forename type="first">C</forename><surname>Cachin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Kursawe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Shoup</surname></persName>
		</author>
		<idno type="DOI">10.1007/s00145-005-0318-0</idno>
		<ptr target="https://doi.org/10.1007/s00145-005-0318-0" />
	</analytic>
	<monogr>
		<title level="j">Journal of Cryptology</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="219" to="246" />
			<date type="published" when="2005-07">Jul 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b86">
	<analytic>
		<title level="a" type="main">Practical synchronous byzantine consensus</title>
		<author>
			<persName><forename type="first">L</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Nayak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Abraham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Devadas</surname></persName>
		</author>
		<idno>abs/1704.02397</idno>
		<ptr target="http://arxiv.org/abs/1704.02397" />
	</analytic>
	<monogr>
		<title level="j">CoRR</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b87">
	<analytic>
		<title level="a" type="main">Blockchain : blueprint for a new economy</title>
		<author>
			<persName><forename type="first">M</forename><surname>Swan</surname></persName>
		</author>
		<ptr target="http://shop.oreilly.com/product/0636920037040.do" />
	</analytic>
	<monogr>
		<title level="j">Sebastopol, Calif.: O&apos;Reilly Media</title>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b88">
	<analytic>
		<title level="a" type="main">A survey on the security of blockchain systems</title>
		<author>
			<persName><forename type="first">X</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Wen</surname></persName>
		</author>
		<ptr target="http://www.sciencedirect.com/science/article/pii/S0167739X17318332" />
	</analytic>
	<monogr>
		<title level="j">Future Generation Computer Systems</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b89">
	<monogr>
		<title level="m" type="main">Casper-CBC FAQ</title>
		<author>
			<persName><forename type="first">V</forename><surname>Zamfir</surname></persName>
		</author>
		<ptr target="https://github.com/ethereum/cbc-casper/wiki/FAQ" />
		<imprint>
			<date type="published" when="2018-11-01">Nov. 2018, accessed on 01.08. 2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b90">
	<monogr>
		<title level="m" type="main">Sharding roadmap</title>
		<author>
			<persName><forename type="first">J</forename><surname>Ray</surname></persName>
		</author>
		<ptr target="https://github.com/ethereum/wiki/wiki/Sharding-roadmap" />
		<imprint>
			<date type="published" when="2019-03-01">Mar. 2019, accessed on 01.08. 2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b91">
	<analytic>
		<title level="a" type="main">Ouroboros: A provably secure Proof-of-Stake Blockchain Protocol</title>
		<author>
			<persName><forename type="first">A</forename><surname>Kiayias</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Russell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>David</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Oliynykov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 37th Annu. Int. Cryptology Conf. (CRYPTO &apos;17)</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="357" to="388" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b92">
	<monogr>
		<title level="m" type="main">PPcoin: peerto-peer crypto-currency with proof-of-stake</title>
		<author>
			<persName><forename type="first">S</forename><surname>King</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename></persName>
		</author>
		<ptr target="https://pdfs.semanticscholar.org/0db3/8" />
		<imprint>
			<date type="published" when="2012-08">Aug. 2012</date>
		</imprint>
	</monogr>
	<note>d32069f3341d34c35085dc009a85ba13c13.pdf</note>
</biblStruct>

<biblStruct xml:id="b93">
	<analytic>
		<title level="a" type="main">Making big data open in edges: A resource-efficient blockchain-based approach</title>
		<author>
			<persName><forename type="first">C</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Guo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Parallel and Distributed Systems</title>
		<imprint>
			<biblScope unit="page" from="1" to="1" />
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b94">
	<monogr>
		<title level="m" type="main">Reddcoin</title>
		<ptr target="https://wiki.reddcoin.com/Main_Page" />
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b95">
	<monogr>
		<title level="m" type="main">Convenience link to Casper+Sharding chain v2.1 spec</title>
		<author>
			<persName><forename type="first">V</forename><surname>Buterin</surname></persName>
		</author>
		<ptr target="https://ethresear.ch/t/convenience-link-to-casper-sharding-chain-v2-1-spec/2332" />
		<imprint>
			<date type="published" when="2018-08-01">Aug. 2018, accessed on 01.08. 2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b96">
	<monogr>
		<title level="m" type="main">Preparing for Ethereum PoS Staking in 2019</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">Y</forename><surname>Park</surname></persName>
		</author>
		<ptr target="https://medium.com/whaley-official/getting-prepared-for-ethereum-pos-staking" />
		<imprint>
			<date type="published" when="2018-12-01">Dec. 2018, accessed on 01.08. 2019</date>
		</imprint>
	</monogr>
	<note>Online. in-2019-3a3855e6a018</note>
</biblStruct>

<biblStruct xml:id="b97">
	<monogr>
		<title level="m" type="main">What to Expect When ETH&apos;s Expecting</title>
		<author>
			<persName><forename type="first">J</forename><surname>Prestwich</surname></persName>
		</author>
		<ptr target="https://hackernoon.com/what-to-expect-when-eths-expecting-80cb4951afcd" />
		<imprint>
			<date type="published" when="2019-01-01">Jan. 2019, accessed on 01.08. 2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b98">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Justin</forename><surname>Linktime</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sharding</forename><surname>Drake-Ethereum</surname></persName>
		</author>
		<author>
			<persName><surname>Youtube</surname></persName>
		</author>
		<ptr target="https://www.youtube.com/watch?v=J" />
		<imprint>
			<date>4rylD6w2S4</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b99">
	<monogr>
		<title level="m" type="main">Randao: Verifiable Random Number Generation</title>
		<ptr target="https://www.randao.org/whitepaper/Randao_v0.85_en.pdf" />
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b100">
	<analytic>
		<title level="a" type="main">Verifiable delay functions</title>
		<author>
			<persName><forename type="first">D</forename><surname>Boneh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Bonneau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Bünz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Fisch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology -CRYPTO 2018</title>
		<editor>
			<persName><forename type="first">H</forename><surname>Shacham</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><surname>Boldyreva</surname></persName>
		</editor>
		<meeting><address><addrLine>Cham</addrLine></address></meeting>
		<imprint>
			<publisher>Springer International Publishing</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="757" to="788" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b101">
	<monogr>
		<title level="m" type="main">Minimal VDF randomness beacon</title>
		<author>
			<persName><surname>Justindrake</surname></persName>
		</author>
		<idno>on 01.08.2019</idno>
		<ptr target="https://ethresear.ch/t/minimal-vdf-randomness-beacon/3566" />
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b102">
	<analytic>
		<title level="a" type="main">Efficient verifiable delay functions</title>
		<author>
			<persName><forename type="first">B</forename><surname>Wesolowski</surname></persName>
		</author>
		<ptr target="https://eprint.iacr.org/2018/623" />
	</analytic>
	<monogr>
		<title level="j">Cryptology ePrint Archive</title>
		<imprint>
			<date type="published" when="2018">2018/623, 2018</date>
		</imprint>
	</monogr>
	<note type="report_type">Report</note>
</biblStruct>

<biblStruct xml:id="b103">
	<analytic>
		<title level="a" type="main">Simple verifiable delay functions</title>
		<author>
			<persName><forename type="first">K</forename><surname>Pietrzak</surname></persName>
		</author>
		<ptr target="https://eprint.iacr.org/2018/627" />
	</analytic>
	<monogr>
		<title level="j">Cryptology ePrint Archive</title>
		<imprint>
			<date type="published" when="2018">2018/627, 2018</date>
		</imprint>
	</monogr>
	<note type="report_type">Report</note>
</biblStruct>

<biblStruct xml:id="b104">
	<analytic>
		<title level="a" type="main">Verifiable delay functions from supersingular isogenies and pairings</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">D</forename><surname>Feo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Masson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Petit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Sanso</surname></persName>
		</author>
		<ptr target="https://eprint.iacr.org/2019/166" />
	</analytic>
	<monogr>
		<title level="j">Cryptology ePrint Archive</title>
		<imprint>
			<date type="published" when="2019">2019/166, 2019</date>
		</imprint>
	</monogr>
	<note type="report_type">Report</note>
</biblStruct>

<biblStruct xml:id="b105">
	<monogr>
		<title level="m" type="main">The Problem of Censorship</title>
		<author>
			<persName><forename type="first">V</forename><surname>Buterin</surname></persName>
		</author>
		<idno>on 01.08.2019</idno>
		<ptr target="https://blog.ethereum.org/2015/06/06/the-problem-of-censorship/" />
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b106">
	<monogr>
		<title level="m" type="main">Interactive proof-of-stake</title>
		<author>
			<persName><forename type="first">A</forename><surname>Chepurnoy</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1601.00275</idno>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b107">
	<analytic>
		<title level="a" type="main">Eclipse attacks on bitcoin&apos;s peer-to-peer network</title>
		<author>
			<persName><forename type="first">E</forename><surname>Heilman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kendler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zohar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Goldberg</surname></persName>
		</author>
		<ptr target="https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/heilman" />
	</analytic>
	<monogr>
		<title level="m">24th USENIX Security Symposium (USENIX Security 15)</title>
		<meeting><address><addrLine>Washington, D.C.</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2015-08">Aug. 2015</date>
			<biblScope unit="page" from="129" to="144" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b108">
	<monogr>
		<title level="m" type="main">Scalable secure storage when half the system is faulty</title>
		<author>
			<persName><forename type="first">N</forename><surname>Alon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Kaplan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Krivelevich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Malkhi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Stern</surname></persName>
		</author>
		<editor>Automata, Languages and Programming, U. Montanari, J. D. P. Rolim, and E. Welzl</editor>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>Springer</publisher>
			<biblScope unit="page" from="576" to="587" />
			<pubPlace>Berlin, Heidelberg; Berlin Heidelberg</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b109">
	<analytic>
		<title level="a" type="main">Addendum to &quot;scalable secure storage when half the system is faulty</title>
	</analytic>
	<monogr>
		<title level="j">Information and Computation</title>
		<imprint>
			<biblScope unit="volume">174</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="1114" to="1116" />
			<date type="published" when="2002">2002. 2007</date>
		</imprint>
	</monogr>
	<note>inform. comput.</note>
</biblStruct>

<biblStruct xml:id="b110">
	<analytic>
		<title level="a" type="main">Kademlia: A peer-to-peer information system based on the xor metric</title>
		<author>
			<persName><forename type="first">P</forename><surname>Maymounkov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Mazières</surname></persName>
		</author>
		<ptr target="http://dl.acm.org/citation.cfm?id=646334.687801" />
	</analytic>
	<monogr>
		<title level="m">Revised Papers from the First International Workshop on Peer-to-Peer Systems, ser. IPTPS &apos;01</title>
		<meeting><address><addrLine>London, UK, UK</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="53" to="65" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b111">
	<analytic>
		<title level="a" type="main">Ethereum white paper: a next generation smart contract &amp; decentralized application platform</title>
		<author>
			<persName><forename type="first">V</forename><surname>Buterin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">First version</title>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b112">
	<monogr>
		<title level="m" type="main">Eos.io technical white paper v2</title>
		<ptr target="https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md" />
		<imprint>
			<date type="published" when="2018-03">2018. Mar</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b113">
	<analytic>
		<title level="a" type="main">CHAINIAC: Proactive softwareupdate transparency via collectively signed skipchains and verified builds</title>
		<author>
			<persName><forename type="first">K</forename><surname>Nikitin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Kokoris-Kogias</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Jovanovic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Gailly</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Gasser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Khoffi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Cappos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Ford</surname></persName>
		</author>
		<ptr target="https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/nikitin" />
	</analytic>
	<monogr>
		<title level="m">26th USENIX Security Symposium (USENIX Security 17)</title>
		<meeting><address><addrLine>Vancouver, BC</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2017-08">Aug. 2017</date>
			<biblScope unit="page" from="1271" to="1287" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b114">
	<monogr>
		<title level="m" type="main">Enabling blockchain innovations with pegged sidechains</title>
		<author>
			<persName><forename type="first">A</forename><surname>Back</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Corallo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Dashjr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Friedenbach</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Maxwell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Poelstra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Timón</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Wuille</surname></persName>
		</author>
		<ptr target="http://www.opensciencereview.com/papers/123/enablingblockchain-innovations-with-pegged-sidechains" />
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page">72</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b115">
	<analytic>
		<title level="a" type="main">Leapchain: Efficient blockchain verification for embedded iot</title>
		<author>
			<persName><forename type="first">E</forename><surname>Regnath</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Steinhorst</surname></persName>
		</author>
		<idno type="DOI">10.1145/3240765.3240820</idno>
		<ptr target="http://doi.acm.org/10.1145/3240765.3240820" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Conference on Computer-Aided Design, ser. ICCAD &apos;18</title>
		<meeting>the International Conference on Computer-Aided Design, ser. ICCAD &apos;18<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="volume">74</biblScope>
			<biblScope unit="page" from="1" to="74" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b116">
	<analytic>
		<title level="a" type="main">Non-interactive proofs of proofof-work</title>
		<author>
			<persName><forename type="first">A</forename><surname>Kiayias</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Zindros</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IACR Cryptology ePrint Archive</title>
		<imprint>
			<biblScope unit="volume">2017</biblScope>
			<biblScope unit="issue">963</biblScope>
			<biblScope unit="page" from="1" to="42" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b117">
	<monogr>
		<title level="m" type="main">Proofs of proofs of work with sublinear complexity</title>
		<author>
			<persName><forename type="first">A</forename><surname>Kiayias</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Lamprou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A.-P</forename><surname>Stouka</surname></persName>
		</author>
		<editor>Financial Cryptography and Data Security, J. Clark, S. Meiklejohn, P. Y. Ryan, D. Wallach, M. Brenner, and K. Rohloff</editor>
		<imprint>
			<date type="published" when="2016">2016</date>
			<publisher>Springer</publisher>
			<biblScope unit="page" from="61" to="78" />
			<pubPlace>Berlin, Heidelberg; Berlin Heidelberg</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b118">
	<analytic>
		<title level="a" type="main">Towards a scalable and robust dht</title>
		<author>
			<persName><forename type="first">B</forename><surname>Awerbuch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Scheideler</surname></persName>
		</author>
		<idno type="DOI">10.1007/s00224-008-9099-9</idno>
		<ptr target="https://doi.org/10.1007/s00224-008-9099-9" />
	</analytic>
	<monogr>
		<title level="s">Theory of Computing Systems</title>
		<imprint>
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="234" to="260" />
			<date type="published" when="2009-08">Aug 2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b119">
	<analytic>
		<title level="a" type="main">Commensal cuckoo: Secure group partitioning for large-scale services</title>
		<author>
			<persName><forename type="first">S</forename><surname>Sen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Freedman</surname></persName>
		</author>
		<idno type="DOI">10.1145/2146382.2146389</idno>
		<ptr target="http://doi.acm.org/10.1145/2146382.2146389" />
	</analytic>
	<monogr>
		<title level="j">SIGOPS Oper. Syst. Rev</title>
		<imprint>
			<biblScope unit="volume">46</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="33" to="39" />
			<date type="published" when="2012-02">Feb. 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b120">
	<monogr>
		<title level="m" type="main">Monoxide: A Solid Solution to Breaking the Blockchain Trilemma. [Blog] Notes of Decentralized Digital World</title>
		<author>
			<persName><forename type="first">W</forename><surname>Jiaming</surname></persName>
		</author>
		<ptr target="https://zhuanlan.zhihu.com/p/56065714" />
		<imprint>
			<date type="published" when="2019-01">Jan. 2019. 2019</date>
			<biblScope unit="page">8</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b121">
	<monogr>
		<title level="m" type="main">Non-specialized hardware comparison</title>
		<author>
			<persName><forename type="first">B</forename><surname>Wiki</surname></persName>
		</author>
		<ptr target="https://en.bitcoin.it/wiki/Non-specialized_hardware_comparison" />
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note>Available</note>
</biblStruct>

<biblStruct xml:id="b122">
	<analytic>
		<title level="a" type="main">Polynomial codes over certain finite fields</title>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">S</forename><surname>Reed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Solomon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the society for industrial and applied mathematics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="300" to="304" />
			<date type="published" when="1960">1960</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b123">
	<monogr>
		<title level="m" type="main">What are the Ethereum disk space needs?</title>
		<author>
			<persName><forename type="first">W</forename><surname>Lim</surname></persName>
		</author>
		<idno>on 01.08.2019</idno>
		<ptr target="https://ethereum.stackexchange.com/questions/143/what-are-the-ethereum-disk-space-needs?noredirect=1&amp;lq=1" />
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
	<note>Available</note>
</biblStruct>

<biblStruct xml:id="b124">
	<analytic>
		<title level="a" type="main">Sschain: A full sharding protocol for public blockchain without data migration overhead</title>
		<author>
			<persName><forename type="first">H</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Wang</surname></persName>
		</author>
		<ptr target="http://www.sciencedirect.com/science/article/pii/S1574119218306370" />
	</analytic>
	<monogr>
		<title level="j">Pervasive and Mobile Computing</title>
		<imprint>
			<biblScope unit="volume">59</biblScope>
			<biblScope unit="page">101055</biblScope>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b125">
	<analytic>
		<title level="a" type="main">Fraud proofs: Maximising light client security and scaling blockchains with dishonest majorities</title>
		<author>
			<persName><forename type="first">M</forename><surname>Al-Bassam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Sonnino</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Buterin</surname></persName>
		</author>
		<idno>abs/1809.09044</idno>
		<ptr target="http://arxiv.org/abs/1809.09044" />
	</analytic>
	<monogr>
		<title level="j">CoRR</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b126">
	<analytic>
		<title level="a" type="main">He received the B.Sc. degree and M.Sc degree from the University of New South Wales</title>
	</analytic>
	<monogr>
		<title level="m">His main research interests lie in blockchain consensus algorithms, scaling blockchains, privacy in blockchains and IoT application with blockchains. XU WANG received the Ph.D. and B.E. degrees in Computer Science from Beijing University of Posts and Telecommunications</title>
		<meeting><address><addrLine>Sydney, Australia; Sydney, Australia; Beijing; Beijing, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010">2011 to 2015. 2019. 2010</date>
		</imprint>
		<respStmt>
			<orgName>Faculty of Engineering and Information Technology, University of Technology ; China and Beijing Information Science and Technology University</orgName>
		</respStmt>
	</monogr>
	<note>GUANGSHENG YU is currently pursuing the Ph.D. degree with the. cyber security, complex network, social network, and network dynamics</note>
</biblStruct>

<biblStruct xml:id="b127">
	<analytic>
		<title level="a" type="main">His research interests include stochastic optimization, game theory, graph theory, as well as their applications to network and security. J. ANDREW ZHANG (M&apos;04-SM&apos;11) received B.Sc. degree from Xi&apos;an JiaoTong University</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D</forename><surname>Kan Yu Received His Ph</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Sc</surname></persName>
		</author>
		<author>
			<persName><surname>Sc</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">He was a Post-Doctoral Research Fellow with Shanghai Jiaotong University from 2005 to 2008, the Deputy Project Manager of the Bell Labs RI Center, Alcatel/Alcatel-Lucent from 2005 to 2008, and a Senior Researcher with Devices Research and Development</title>
		<title level="s">M.Sc. degree from Nanjing University of Posts and Telecommunications</title>
		<meeting><address><addrLine>Shanghai, China; China; China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1996">2014. 2000 and 2005. 2008 to 2009. 1996. 1999. 2004</date>
		</imprint>
		<respStmt>
			<orgName>Malardalen University (Sweden ; Chalmers University of Technology ; Australian National University ; University of Technology Sydney, Australia. Dr</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">respectively</note>
	<note>Zhang&apos;s research interests are in the area of signal processing for wireless com-munications and sensing. and autonomous vehicular networks. He has published 150+ papers in leading interna-tional Journals and conference proceedings, and has won 5 best paper awards for his work</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
