<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">DDoS Attacks at the Application Layer : Challenges and Research Perspectives for Safeguarding Web Applications</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Amit</forename><surname>Praseed</surname></persName>
						</author>
						<author>
							<persName><forename type="first">P</forename><surname>Santhi Thilagam</surname></persName>
						</author>
						<title level="a" type="main">DDoS Attacks at the Application Layer : Challenges and Research Perspectives for Safeguarding Web Applications</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">8E4300107138896FAE57E818225702E0</idno>
					<idno type="DOI">10.1109/COMST.2018.2870658</idno>
					<note type="submission">This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/COMST.2018.2870658, IEEE Communications Surveys &amp; Tutorials This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/COMST.2018.2870658, IEEE Communications Surveys &amp; Tutorials</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T10:21+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>application layer</term>
					<term>DDoS</term>
					<term>attacks</term>
					<term>defenses</term>
					<term>denial of service</term>
					<term>taxonomy</term>
					<term>detection</term>
					<term>web applications</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Distributed Denial of Service (DDoS) Attacks are some of the most devastating attacks against web applications. A large number of these attacks aim to exhaust the network bandwidth of the server, and are called network layer DDoS attacks. They are volumetric attacks and rely on a large volume of network layer packets to throttle the bandwidth. However, as time passed, network infrastructure became more robust and defenses against network layer attacks also became more advanced. Recently, DDoS attacks have started targeting the application layer. Unlike network layer attacks, these attacks can be carried out with a relatively low attack volume. They also utilize legitimate application layer requests, which makes it difficult for existing defense mechanisms to detect them. These attacks target a wide variety of resources at the application layer and can bring a server down much faster, and with much more stealth, than network layer DDoS attacks. Over the past decade, research on application layer DDoS attacks has focused on a few classes of these attacks. This work attempts to explore the entire spectrum of application layer DDoS attacks using critical features that aid in understanding how these attacks can be executed. defense mechanisms against the different classes of attacks are also discussed with special emphasis on the features that aid in the detection of different classes of attacks. Such a discussion is expected to help researchers understand why a particular group of features are useful in detecting a particular class of attacks.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Web applications have made information and services available to users without time or space constraints. People can now browse for information, connect with friends, buy and sell things and perform financial transactions at the comfort of their homes. Large scale e-commerce companies have capitalized on this trend and have made efforts to make their services available online. Not just competitive businesses, governments of a large number of countries have also extended their services online. With web applications powering a major share of businesses and services, it becomes crucial for organizations, business owners and individual governments to ensure that their websites (and by extension, their services) remain available to users all the time.</p><p>As web applications become increasingly important for businesses and financial institutions, they also become targets for malicious users. A large number of attackers are motivated by financial gain, because web applications are storehouses Amit Praseed and P. Santhi Thilagam are with the Department of Computer Science and Engineering, National Institute of Technology Karnataka, Surathkal, India, e-mail:amitpraseed@gmail. com;santhisocrates@gmail. com of critical, personal information like credit card numbers. However, attacks on web applications also stem from business competition, policy disagreements as well as political and social issues. These attacks attempt to disrupt the services of a web application so that its services are unavailable to the users, which leads to a loss of revenue for the organization. A single minute of downtime can cost the organization up to $22000 in revenue <ref type="bibr" target="#b0">[1]</ref>. Even more devastating is the loss of user trust or a decline in brand value for the organization. Users will not be interested in the services offered by the organization if periodic outages leave the website unusable. These type of attacks, aptly named Denial of Service (DoS) Attacks, are some of the oldest attacks known but still continue to be a major threat due to the way they evolve and grow.</p><p>In the 18 months from January 2015 to June 2016, Arbor networks reports tracking around 1,24,000 DDoS attacks every week <ref type="bibr" target="#b1">[2]</ref>. Government websites are often targets of such attacks, and the motivation is usually policy disagreements between the government and the attackers. The global hacking collective Anonymous has launched DDoS attacks against a number of government websites, most recently against the Spanish government in support of Catalan independence <ref type="bibr" target="#b2">[3]</ref>. The governments of USA <ref type="bibr" target="#b3">[4]</ref>, Ireland <ref type="bibr" target="#b4">[5]</ref>, India <ref type="bibr" target="#b5">[6]</ref> and Brazil <ref type="bibr" target="#b6">[7]</ref> have also been on the receiving end of such attacks in the past couple of years. These attacks expose the inherent weaknesses in the government infrastructure and the lack of security measures in place. Banking and e-commerce sites are also prime targets for DDoS attacks. Attacks on banking sites can effectively cripple the economy by blocking all online transactions. This presents a serious issue at a time when the general public is becoming more and more inclined towards buying and selling online. A number of US based banks were targeted by DDoS attacks in 2012 <ref type="bibr" target="#b10">[11]</ref> and customers were unable to perform transactions for hours. A similar attack hit HSBC bank in the UK in January 2016 <ref type="bibr" target="#b9">[10]</ref>. Bitcoin websites have also been targeted in the same light as banking websites <ref type="bibr" target="#b8">[9]</ref>, <ref type="bibr" target="#b16">[16]</ref>, often calling into question the feasibility of a currency with no physical existence.</p><p>DDoS attacks are perfectly capable of disrupting internet connectivity for a large number of users, sometimes even in large parts of a country. Attacking and taking down a DNS server leaves a large number of websites in the dark because users become unable to resolve domain names, as evidenced by the attack on Dyn in 2016 <ref type="bibr" target="#b11">[12]</ref>. Taking down a part of the network infrastructure can block internet connectivity as well, particularly if there are no alternate connection paths infrastructure were executed in this manner, and left large portions of the country without internet <ref type="bibr" target="#b15">[15]</ref>.</p><p>With more and more devices being powered online, it is not just computer systems that become affected by DDoS attacks. Heating systems in Finland <ref type="bibr" target="#b12">[13]</ref> and transport systems in Sweden came to a standstill <ref type="bibr" target="#b13">[14]</ref> after DDoS attacks rendered the systems inoperable. This is in line with a report from the network security company Corero in 2017 that 51% of critical infrastructure organizations in the UK were ignoring the risk of DDoS attacks <ref type="bibr" target="#b17">[17]</ref>. Table <ref type="table">I</ref> gives a summary of some of the critical DDoS attacks in the last decade.</p><p>The reason DDoS attacks remain a major threat even after so many years is because they have grown and evolved over the years. The attacks initially relied on using malformed packets or flooding the device with network layer packets. As the infrastructure became more sophisticated and defenses at the network layer became more robust against these attacks, attackers moved on to the application layer. DDoS attacks at the application layer have been on the rise for a few years. The Imperva Incapsula DDoS Threat Landscape Report 2015-16 <ref type="bibr" target="#b19">[18]</ref> indicates that nearly half of the DDoS attacks were at the application layer. The complexity of DDoS attacks at the application layer are also expected to grow over time. Application layer attacks present a more sophisticated version of DDoS attacks in the sense that they are much more similar to normal user traffic and hence pose a serious challenge in how they can be identified. The attacks are carried out using legitimate user requests, which rules out the possibility of inspecting a packet to label it as malicious or not. As a result both network layer defenses and some of the existing Web Application Firewalls (WAFs) fail to detect these attacks. The fact that these attacks can be executed using multiple protocols at the application layer, both connection oriented and connectionless, compounds the danger.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Our contributions in this work are:</head><p>• To present an integrated taxonomy of application layer DDoS attacks based on how application layer protocols and features are exploited to execute attacks. • To provide a comprehensive review of defenses against application layer DDoS attacks with special emphasis on the features that aid in detecting different types of attacks.</p><p>The rest of this paper is organized as follows: Section II provides a background of the area, providing a description of network layer and application layer DDoS attacks. Section III proposes a taxonomy of application DDoS attacks and describes the different classes of attacks. Sections IV to XI discuss the detection mechanisms in the literature today for the different types of attacks, with particular emphasis on the features that can be used to detect the attacks. Section XIII-A gives an overview of tools which aid in detecting a few classes of application layer DDoS attacks and section XIII-B discusses the different datasets that researchers can use in the area. Section XIV discusses the different metrics which are commonly used in evaluating detection mechanisms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. BACKGROUND</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Denial of Service Attacks</head><p>Denial of Service (DoS) attacks are some of the oldest attacks against web applications. The first reported use of what can be considered as a DoS attack dates back to the late 1990s <ref type="bibr" target="#b20">[19]</ref>. Since then they have evolved and grown and have become one of the most common attacks against web applications. The distinction between a DoS attack and a Distributed DoS (DDoS) attack is in the number of attackers involved. A DoS attack typically implies a small number of attackers, sometimes even a single attacker. DDoS attacks are more massive and can involve hundreds or thousands of attackers. These attackers need not be human attackers, and in most cases there are just a few human attackers. The "attackers" in this scenario refer to the systems that are being controlled by the human attackers. Systems that have been infected by malware and are acting as attackers on behalf of the real attackers are called zombies or bots. Attackers usually employ a large number of such bots to form a botnet.</p><p>The objective of a DDoS (or DoS) attack is to make a web server unavailable to legitimate users trying to access it. This can be accomplished in multiple ways, but the core idea is to exhaust one or more of the resources available with the server. These resources could include CPU or database cycles, memory, socket connections or network bandwidth. Attackers may exploit system weaknesses or protocol weaknesses to do so, or they may simply push the server to its limits by using the features provided by the web server repeatedly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Application Layer DDoS Attacks</head><p>A large number of DDoS attacks target the network bandwidth because of the ease with which it can be exhausted. Attackers simply send a large volume of network packets to the server, effectively exhausting the network bandwidth. Network layer protocols like UDP (User Datagram Protocol) and ICMP (Internet Control Message Protocol) are used for this purpose. As time passed, two things changed. Networks and servers became more robust in identifying network layer DDoS attacks and servers could afford better and increased bandwidth. An enormously large volume of requests could still exhaust the network bandwidth and take down a server, but it became more difficult to do so. The attackers responded by moving up the stack to the transport layer. SSL renegotiation attacks <ref type="bibr" target="#b21">[20]</ref> exploited the transport layer, but as time passed servers began to defend against these attacks as well. These attacks had a pattern that could be identified and generalized across platforms, and could be strictly classified as malicious.</p><p>In recent years, attackers have moved up the stack one more time giving rise to a new trend called application layer DDoS attacks. These attacks do not aim to throttle the network bandwidth, instead they attempt to exhaust server resources like CPU cycles, database cycles, memory or socket connections. There has been a huge growth in the number of application layer DDoS attacks in the recent years. Imperva Incapsula's Global DDoS Threat Landscape Report 2017 <ref type="bibr" target="#b22">[21]</ref> reports that for the fourth quarter in a row, there was a decrease in the number of network layer assaults along with another spike in the number of application layer assaults. Reports by <ref type="bibr">Kaspersky [22]</ref> mention the fact that "the cream of cybercriminal communities are now turning to Application Layer DDoS attacks".</p><p>Attacks carried out at the application layer have a few subtleties which make them unique and different from other attacks. which attempts to exhaust one resource will not affect the other resources in any way, but the system as a whole will not be able to function. As a consequence, a defense mechanism for one resource is unlikely to be effective for another resource. • Resemblance to Flash Crowds : A flash crowd is a sudden spike in legitimate user traffic to a website, most often due to some noteworthy event or a mega sale in the case of e-commerce sites. An application layer DDoS attack is often confused with a flash crowd because both of these events are associated with a spike in legitimate HTTP requests to a site. Proper identification of a DDoS attack and a flash crowd is essential for any defense mechanism because flash crowds bring valuable traffic to the website, and it would be detrimental to the website if they were wrongly labeled as DDoS traffic and blocked.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. TAXONOMY OF APPLICATION LAYER DDOS ATTACKS</head><p>A fair amount of work has gone into studying and classifying DDoS attacks at the application layer. One of the earliest surveys in the area belongs to Geneiatakis et al. <ref type="bibr" target="#b24">[23]</ref>. They presented a review of vulnerabilities in the SIP (Session Initiation Protocol) protocol which could be exploited to launch a DDoS attack. However, the work was restricted to a discussion of the avenues of attack and not the defense mechanisms against these attacks. Works by Armoogum et al. <ref type="bibr" target="#b25">[24]</ref> and Hussain et al. <ref type="bibr" target="#b26">[25]</ref> further examined the area in more detail. They also examined the different defense mechanisms that have been discussed in literature for SIP based DDoS attacks. Jensen et al. <ref type="bibr" target="#b27">[26]</ref> presented a detailed discussion of attacks on web services. They also provided details of how the SOAP (Simple Object Access Protocol) protocol could be exploited to execute DDoS attacks. In the recent years, the focus of the research community has been more towards HTTP based DDoS attacks. Aamir &amp; Zaidi <ref type="bibr" target="#b29">[28]</ref> and Zargar et al. <ref type="bibr" target="#b30">[29]</ref> both examined network and application layer attacks. Aamir and Zaidi <ref type="bibr" target="#b29">[28]</ref>, restricted the discussion to flooding attacks at the application layer. Zargar et al. <ref type="bibr" target="#b30">[29]</ref> provided a classification of attacks that included reflection attacks, flooding attacks, asymmetric attacks and slow DDoS attacks. The discussion on defense mechanisms focused on where the solution is deployed and the time of action. Wang et al. <ref type="bibr" target="#b33">[32]</ref> presented a similar  <ref type="bibr" target="#b28">[27]</ref> 2012 GET flooding and Slow DDoS attacks Discusses only a few types of attacks, does not provide an in-depth classification of attacks or defenses Aamir &amp; Zaidi <ref type="bibr" target="#b29">[28]</ref> 2013 Network and application layer attacks and defenses Limits discussion to flooding attacks, does not provide any classification Zargar et al. <ref type="bibr" target="#b30">[29]</ref> 2013 HTTP floods, reflection attacks, Slow Attacks Detection mechanisms are classified based on deployment location and time of action, does not consider asymmetric attacks the way previous works do Cambiaso et al. <ref type="bibr" target="#b31">[30]</ref> 2013 Slow DDoS Attacks Focuses discussion of primarily slow DDoS attacks, but refers to any application layer DDoS as slow, does not discuss any defensive mechanisms N. S. Vadlamani <ref type="bibr" target="#b32">[31]</ref> 2013 HTTP floods and asymmetric attacks Discusses only attacks using HTTP protocol, but neglects Slow DDoS attacks, also does not present a taxonomy of attacks or defenses Armoogum et al. <ref type="bibr" target="#b25">[24]</ref> 2014 SIP based DDoS attacks Discusses only SIP based DDoS attacks, discusses defense mechanisms but does not present a taxonomy Hussain et al. <ref type="bibr" target="#b26">[25]</ref> 2015 SIP based DDoS attacks Considers only SIP based attacks and their defense mechanisms Wang et al. <ref type="bibr" target="#b33">[32]</ref> 2015 Application layer attacks and defense mechanisms Restricts the discussion to HTTP attacks, defense mechanisms are classified only based on deployment location Mantas et al. <ref type="bibr" target="#b34">[33]</ref> 2015 Application layer attacks Does not examine any defensive mechanisms Singh et al. <ref type="bibr" target="#b35">[34]</ref> 2017 GET flooding attacks Limits the discussion to only GET flooding attacks and ignores other application layer attacks classification of attacks as <ref type="bibr" target="#b30">[29]</ref>, but only classified defense mechanisms based on point of deployment. Vadlamani <ref type="bibr" target="#b32">[31]</ref> examined the different HTTP flooding and asymmetric attacks, the different defenses against them, their merits and demerits. Mantas et al. <ref type="bibr" target="#b34">[33]</ref> provided a detailed taxonomy of application layer DDoS attacks based on target level, exploit type, attack methodology, attack volume and attack workload. However they did not discuss any defense mechanisms against these attacks. Singh et al. <ref type="bibr" target="#b35">[34]</ref> provided a detailed taxonomy of GET flooding attacks based on a number of factors. They also examined the detection features that can aid in detecting these attacks. Durcekova et al. <ref type="bibr" target="#b28">[27]</ref> presented a review of application layer DDoS attacks, but restricted the discussion to GET flooding attacks, and slow DDoS attacks. They also discussed a brief classification of defensive tactics against these attacks. Cambiaso et al. <ref type="bibr" target="#b36">[35]</ref> presented a taxonomy of slow DDoS attacks, but did not present any discussion about the defenses. A comparison of the recent attempts at classifying application layer DDoS attacks and their defensive mechanisms is given in Table <ref type="table" target="#tab_1">II</ref>.</p><p>Our work is different from the existing literature reviews in the following points:</p><p>• We provide a detailed survey of application layer DDoS attacks exploiting four major application layer protocols -HTTP, SOAP, DNS and SIP. • We present a taxonomy of application layer DDoS attacks which integrates attacks exploiting the four major application layer protocols. • We discuss the different features that can be used to detect different classes of application layer DDoS attacks, and discuss existing research works that utilize these features for attack detection.</p><p>In this work, application layer DDoS attacks have been classified on the following features:</p><p>• Nature of Exploitation : This feature analyzes how the exploit is carried out by the attacker. Attackers can find weaknesses in a system to launch DDoS attacks, or they may exploit features in the underlying protocol. In the absence of these weaknesses, attackers can simply exploit features provided by the web application to launch the attack. • Protocol : Application layer DDoS attacks have been observed mainly using four different layer 7 protocols -HTTP, SOAP, DNS and SIP. • Payload Delivery : This feature focuses on how the attacker delivers his attack payload to the target system. An attacker could directly send the attack requests to the target server, in which case the attack is said to be a direct attack. For application layer protocols which do not rely on a connection (eg. DNS), an attacker can request for a large amount of information from some server, spoofing the victim's address. This launches a stream of messages to the victim which can effectively knock it offline. This mode of attack is called reflected mode of attack. • Overhead of Attack : Attackers have to expend some amount of resources in order to launch an attack. If the amount of overhead incurred by the attacker is proportional to the damage intended on the victim, the attack is said to be symmetric. However, using specially crafted requests, the attacker can reduce the overhead incurred while maintaining, or even increasing, the damage at the victim. Such an attack is termed as an asymmetric attack. We have focused on those criteria which can help researchers better understand the inner workings of an a DDoS attack, and as such provide an understanding on how these attacks can be defended against. Figure <ref type="figure" target="#fig_0">1</ref> gives the first level breakup of application layer DDoS attacks. The attacks have been classified based on the nature of exploitation into three classes. Each of these base classes have been examined in detail in the following subsections. We have chosen the exploitation level as the root feature for the classification tree because this separates the tree into categories with little or no overlap. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Exploiting the System Weaknesses</head><p>A large number of web applications have security loopholes that can be exploited to launch attacks. These vulnerabilities can arise due to three reasons:</p><p>• Use of vulnerable software components • Use/reuse of vulnerable algorithms without patching • Programmer negligence A schematic diagram classifying attacks that exploit system weaknesses is given in Figure <ref type="figure" target="#fig_1">2</ref>.</p><p>a) Use of vulnerable software components: No web application is designed and implemented from scratch. Existing software components, like load balancers and proxies are often used as such and very little code is actually written by the developer. The use of software components with existing vulnerabilities, knowingly or unknowingly, puts the entire web application at risk. For example, earlier versions of the Apache server suffered from a vulnerability due to which an HTTP message with a large overlapping range header caused a memory exhaustion crashed the server <ref type="bibr" target="#b37">[36]</ref>. This attack is no longer feasible, because newer versions of the server have patched this vulnerability.</p><p>b) Use/reuse of vulnerable algorithms: Most web applications make use of existing algorithms for hashing or parsing input data. A lot of the time though, this code is often reused with little thought with regards to security. Vulnerabilities in algorithms come to light under certain conditions and can result in a system crash if not handled accordingly. HashDoS <ref type="bibr" target="#b38">[37]</ref> was an attack that exploited the use of vulnerable hashing algorithms in web application servers that use hashing to organize POST input parameters. In the best and average cases, insertion, and access of items in a hash table proceed in O(1) complexity, but in case a collision occurs, the hash table degenerates to a linked list with O(n) complexity. An attacker who supplies a crafted input with a large number of POST parameters can successfully cause collisions in a large number of scripting languages. This can cause the CPU to spend a large amount of time working to resolve collisions and cause a denial of service situation <ref type="bibr" target="#b39">[38]</ref>.</p><p>Another example is a coercive parsing attack on XML web services <ref type="bibr" target="#b27">[26]</ref>. At the receiver end, XML messages have to be parsed before they can be processed. Deeply nested XML packets can cause a sharp increase in CPU usage. So to bring down a SOAP server, the attacker simply sends a SOAP message with a large number of opening tags till the server goes down. Such a vulnerability exists only in a DOM based parser. A DOM based parser creates an in-memory representation of the incoming SOAP message during processing. This typically increases the message size by a factor from 2 to 30. For large messages, this expansion can result in memory exhaustion as well. A stream based parser like SAX parser does not experience such a vulnerability, because the entire document is never loaded into the memory at a time. c) Attacks exploiting Programming Negligence: A large number of web applications operate with an SQL (Structured Query Language) back-end. For these applications, SQL injection is a real threat. SQL injection is usually associated with injecting malicious data or leaking sensitive information. But it can also be used to cause a denial of service situation. All the queries issued by a user make their way to the back-end server and get executed on the database. If an attacker can make the database server perform actions which leads to an inconsistent state or even delete the entire database, the system cannot function and leads to a denial of service. This isn't the most sophisticated way of inflicting a denial of service, but sometimes the simplest attacks are the most brilliant.</p><p>The question though is : how to get the database into an inconsistent state? Let us assume the web application allows the users to search for an employee based on an employee number. The query would normally look like SELECT * FROM e m p l o y e e WHERE EmpNo = $ i n p u t $ ;</p><p>where input is the value entered by the user. Consider the case where the user enters an input like "1; DROP T ABLE employee"</p><p>The query generated internally is SELECT * FROM e m p l o y e e WHERE EmpNo = 1 ; DROP TABLE e m p l o y e e ; Since a ';' in all major SQL implementations acts as a delimiter between queries, the database server will execute both the queries and the table employee will be dropped. Such an assault is called a piggybacked query and can be used to cause a denial of service on the application.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Exploiting Protocol Features</head><p>Protocols are designed to facilitate efficient communication between different parties regardless of differences in bandwidth or computing power. Attackers can use different features of protocols, which were originally meant for efficient communication, to launch attacks and possibly create a denial of service situation. HTTP and SOAP are the two major protocols at the application layer. A classification of those attacks which exploit these protocol features are represented in Figure <ref type="figure" target="#fig_4">3</ref>.</p><p>1) Exploiting the HTTP Protocol: HTTP was designed to facilitate communication between a human user (using a web browser) and a web server. HTTP is a connection oriented protocol based on TCP, which means a TCP connection should be established before communication can proceed. This connection is maintained till the end of communication. Different features of HTTP have often been abused by attackers to launch attacks. a) Request Fragmentation: HTTP was designed with all users in mind, even those with a small bandwidth and hence HTTP allows its users to fragment an HTTP message across multiple packets. An attacker who fragments his HTTP messages into extremely small packets can keep the connection open for an arbitrarily long time. Since web applications have a predefined limit on socket connections it can maintain simultaneously, an attacker who manages to keep multiple connections open for an infinitely long time can effectively force the server to decline legitimate connections. This class of attacks are called Slow DDoS attacks and come in two varieties based on whether the attack is carried out using an HTTP request or response.</p><p>The attacks that make use of an HTTP request are called Slow Write attacks. The most famous slow write attack made an appearance after the 2009 Iranian Presidential elections and is dubbed Slowloris. These attacks were carried out by HTTP connections that sent GET requests to the server in extremely small fragments, sometimes sending individual headers one by one. A normal HTTP GET request is shown here: HTTP uses a carriage return line feed (CRLF) to denote next line and it uses two CRLF characters to denote a blank line. Typically a blank line denotes the end of the headers in an HTTP request. An attacker can simply omit the double CRLF sequence so that the server assumes the user is not done sending headers. After sending a small fragment of the HTTP headers, the attacker waits. HTTP defines a timeout for all connections, which is the time for which an HTTP connection can remain idle without being torn down. This is not a fixed number but is server dependent. Just before the server timeout duration is reached, the attacker sends the next fragment. This forces the server to maintain the connection. If executed over multiple connections the server runs out of socket connections for legitimate users. The other counterpart of a slow GET attack is a slow POST attack. A GET request has size limitations on it due to the fact that it does not have a body. A POST request on the other hand can be arbitrarily long because it has a request body. The HTTP header specifies a field called Content-Length which tells the server how long the message is going to be. The attacker sets the POST request to have an arbitrarily large value of Content -Length and then proceeds to send data in small fragments. The server is forced to maintain the connection until either the connection times out or the entire message is received. After a while the server is unable to accept any new incoming connections.</p><p>Slow DDoS attacks can also be launched on the HTTP response and are called Slow Read Attacks. The attacker sends a GET or POST request to the server and waits for a response by advertising a small network window. The web server assumes the user is on a low bandwidth connection and proceeds to send the HTTP response in small fragments. This ties up the connection until the entire data is received. If the attacker can establish multiple connections of this nature, it exhausts the socket connections on the server.</p><p>b) Connection Refresh: The effect of maintaining a connection for an undefined amount of time can be achieved by using an HTTP header field called PRAGMA <ref type="bibr" target="#b40">[39]</ref>. The HTTP PRAGMA header field tells the HTTP server and any intermediate caches that the user wants a fresh copy of the requested resource. This ensures that the request is not satisfied by any of the caches but by the web server itself, ensuring that the server has to expend processing power. Additionally, whenever an HTTP PRAGMA is issued the timeout for the connection is reset. Use of the PRAGMA field can keep connections open for an indeterminate amount of time, ensuring that socket resources get tied up. It is worth mentioning that the PRAGMA field has no visible purpose in HTTP 1.1, but is still allowed to maintain compatibility. c) Multiple Verbs: HTTP request methods initiate action at the server side, and for this reason they are sometimes called HTTP verbs. Traditionally, a single request contains of a single action or verb. In such a scenario, it is rudimentary that the more workload the attackers want to dump on the server, the more number of requests they have to send. But HTTP has a somewhat lesser known feature which allows the users to pack multiple verbs into a single HTTP request. This means that attackers can compress multiple verbs into a single request and send to the server. The server is forced to perform all the tasks that are requested, which is much more than a normal request. The advantage this presents to the attackers is that the attack volume can be cut down to a large extent, thus helping them evade detection <ref type="bibr" target="#b30">[29]</ref>, <ref type="bibr">[40]</ref>.</p><p>d) The Push for HTTP 2.0: HTTP 1.1, which is currently the standard for communicating with web servers, is expected to be phased out soon. HTTP 2.0 is poised to replace HTTP 1.1 in the coming years. Most modern browsers and servers do provide options for users to opt for HTTP 2.0. This newer version of HTTP provides a header compression mechanism to reduce the header length, and avoid message overheads. It also allows servers the freedom to push content to the client without an explicit request to save time. It also allows clients to send multiple concurrent requests simultaneously, on a single TCP connection and potentially all within a single packet.</p><p>While these features have been designed to improve the speed and efficiency of communication, there have been concerns over security. The feature which allows multiplexing of requests can be used to launch flooding attacks, and even asymmetric attacks. Beckett and Sezer <ref type="bibr" target="#b42">[41]</ref> demonstrated that HTTP 2.0 allows an attacker to carry out a much larger attack on the same hardware, with the same packet generation limitation. Imperva also reported that the slow reading vulnerability present in the older version of HTTP was still present in the newer one <ref type="bibr" target="#b43">[42]</ref>.</p><p>2) Exploiting the SOAP protocol: Just like HTTP is the standard for communication for web applications, SOAP (Simple Object Access Protocol) is the standard for communication for web services. Web services involve communication between web applications without any human interaction. This necessitates the use of a universal language which can be used on all platforms and is easily processed by servers. Readability and ease of use tends to take a back seat because of the lack of human interaction. XML and JSON are the two most commonly used notations which have universal acceptance, and of these XML takes precedence because of its reach. The SOAP protocol is primarily based on XML messages for this reason. The SOAP protocol also has security extensions which enable safe and secure transmission of XML data. However, sometimes the flexibility offered by SOAP allows malicious users to take advantage and force the server to do more work. a) Flexible Use of Security Header: WS-Security is a security specification which extends SOAP to provide integrity and confidentiality of data and specifies the different ways to use XML signatures and encryption to ensure that data remains safe and secure. One of the specifications is the addition of a security header which includes security elements such as decryption keys. WS-Security allows considerable flexibility to encrypt different parts of the message with different keys and possibly encrypt the keys themselves. All the keys must, however, be present in the security header which is encrypted with the receiver's public key. Because the specifications allow flexibility in encrypting the message parts, the security header can be very big, which is allowed by default. However, attackers can purposefully use oversized security headers to crash the system <ref type="bibr" target="#b27">[26]</ref>. This is because the security header contains the keys necessary for decryption and must be buffered while the message is processed. If the security header is extremely large the server can potentially run out of memory while processing a few malicious packets. A more dangerous attack may be to encrypt different parts of the document with different keys and then to encrypt the keys recursively. Such an attack destroys the system on two fronts. On one hand the security keys must be buffered while processing the message, and if the attacker uses a deeply nested set of encrypted keys the system can potentially run out of memory. On the other hand, each of these keys should be decrypted before the system can proceed further. Most of the encryption and decryption algorithms are computationally expensive and consume a non-negligible amount of CPU time. Such an attack can thus potentially exhaust the CPU and the memory resources available with the server.</p><p>b) External Entity Reference: XML packets were designed to be compact. However, the XML language allows the users to include a link to point to an external entity, which will be fetched and processed when the XML message is parsed and processed. This is a simple and effective way to maintain the compactness of XML, and at the same time to allow users to send larger entities for processing. However, the same can become a point of exploitation. Attackers can potentially send XML messages with an External Entity Reference pointing to a large document <ref type="bibr" target="#b44">[43]</ref>. While the message is parsed, this document is fetched. The entire XML message, of which the document is actually a part must reside in memory for processing to complete, and so with a few simple messages the attackers can ensure the system runs out of memory. A well known attack of this type is called the Billion Laughs Attack <ref type="bibr" target="#b45">[44]</ref>, and defines nested entities within an XML Data Type Definition (DTD) document to create a memory bomb. This attack causes the parser to generate an abnormally large payload, potentially overloading the application and causing a denial of service.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Exploiting System Features</head><p>DDoS attacks are simple and easy to launch in the sense that they do not rely on the existence of a flaw or a vulnerability in the web application. DDoS attacks can exploit a vulnerability or weakness in the server if one exists, but they do not need to. Every web server has a finite amount of resources at its disposal -CPU, memory, database or socket connections. If attackers can exhaust these resources by sending requests that they do not intend to use, the server has no resources available for serving legitimate demands from normal users. This makes the website unavailable for legitimate users. The most striking fact about these attacks is that even the most secure servers are vulnerable to these attacks. These attacks can proceed through the use of different protocols at the application layer -HTTP, SOAP, DNS or SIP. Of these HTTP and SOAP work with an underlying TCP connection which is connection oriented, while SIP and DNS work with the connectionless UDP protocol. Attacks exploiting server features can be broadly classified into direct and reflected attacks. A detailed taxonomy of this class of attacks is given in Figure <ref type="figure" target="#fig_5">5</ref>.</p><p>1) Direct Attacks: Direct attacks involve the attacker sending malicious requests directly to the victim server. If the attacker sends a large enough number of requests to the server, the server will be unable to process them and will crash. However, in the process the attacker needs to perform significant work in itself by sending these requests. Such attacks are said to be symmetric. The objective of the attacker is to bring down a server by using as few resources as possible. It is possible to make a server do more work by carefully crafting requests or by sending a particular stream of requests instead of random requests. Such attacks reduce the load on the attacker while maximizing the load on the target server. Such attacks are said to be asymmetric in nature. a) Symmetric DDoS Attacks: Symmetric DDoS attacks are in many ways similar to network layer DDoS attacks. The similarity lies in the fact that like network layer DDoS attacks, symmetric DDoS attacks also work by sending a large number of attack requests to the target web server, so that it is unable to process legitimate client requests. However, while network layer DDoS attacks utilize network layer protocols like ICMP, attacks at the application layer rely on protocols like HTTP, SOAP, DNS or SIP. A point of difference is that attacks at the application layer do not need to throttle the server bandwidth to cause a denial of service situation. A single HTTP request makes the server perform more work than a packet at the network layer. So the server resources become the new bottleneck in this situation and get exhausted much before the bandwidth of the server gets throttled.</p><p>HTTP flooding <ref type="bibr" target="#b46">[45]</ref> is the most common application layer DDoS attack which utilizes the HTTP protocol. This is largely due to the ease with which this attack can be executed. The simplest way of executing this attack is to repeatedly send requests to any one URL on the target web application. More often than not, it is the home page or login page that is attacked. However, a repeated stream of requests to the same URL can be easily identified and blacklisted by the server administrator. So the next line of attack is to continuously send requests to random URLs in the web application. This works in the same way as the earlier attack, but cannot be detected that easily. Tools like Low Orbit Ion Cannon(LOIC) or other stress testing tools can easily be used to launch an HTTP flood. The fact that these tools can be easily downloaded off the internet makes it much more dangerous.</p><p>SOAP or XML flooding <ref type="bibr" target="#b47">[46]</ref> works in the same way as HTTP flooding but is targeted at web services.</p><p>DNS is perhaps the most important protocol in the application layer because it aids in address resolution. A DNS server works by translating a domain name to the corresponding IP address. The fact that DNS operates on the UDP protocol makes it an open target for attacks because anyone can openly query a DNS server at any time. Attackers can easily take down a DNS server by sending a large number of queries to the DNS server. After a point of time, the DNS server cannot accept any new queries and effectively goes offline <ref type="bibr" target="#b48">[47]</ref>. This presents a much more serious problem than a single web server crashing. If a single web server goes down only that organization is affected. But when a DNS server goes down a large number of users are effectively cut off from a large part of the Internet because the address to IP resolution is the first step in accessing any web application. The attacks on Dyn DNS service in 2016 are a prime example <ref type="bibr" target="#b11">[12]</ref>. When the services of Dyn went down, a large number of popular websites including twitter and Reddit went offline for hours.</p><p>VoIP (Voice over Internet Protocol) is a new avenue of communication which offers the services provided by a Public Switched Telephone Network over the internet. Falling data costs make it much more affordable for users to use VoIP as a means of communication nowadays. Session Initiation Protocol (SIP) is the most popular protocol used in VoIP. A SIP architecture consists of a caller, a registrar, a location server, proxy server and the callee. The caller and callee are uniquely identified by their IP and URI. When a caller connects to the network, they register with the registrar server. The location server maintains a record of the location of the user agents by means of their IP. A proxy server is meant to forward the call from the caller to the callee. When a caller places a call to the callee, the caller sends a SIP INVITE message to the callee via the proxy server. The proxy server contacts the callee and at the same time sends back a TRYING message to the caller. When the callee receives the call, it starts ringing. This is indicated by a RINGING status message. When the callee accepts the call, the callee sends a 200 OK message which is responded to by an ACK message from the caller. This establishes the connection by means of a three way handshake. The users can terminate the connection by means of a BYE message which is followed by an ACK. A brief representation of the SIP architecture and the different avenues of attack is given in Figure <ref type="figure">4</ref>. There are multiple avenues for Also, the attack can be launched against the callee or against the SIP infrastructure resources like the proxy or registrar servers <ref type="bibr" target="#b24">[23]</ref>. The major issue here is that after every INVITE or REGISTER message, the connection is maintained by the server for a few minutes. This is to allow users to respond with an authentication or proceed to the next stage of connection establishment. If the attacker sends a large number of such messages, it can effectively tie up the callee or the SIP servers from accepting new connections. b) Asymmetric DDoS Attacks: All the symmetric attacks against the victims also consume a significant amount of resources for the attacker. The objective of the attacker is always to maximize the damage to the victim while minimizing the resources that have to be employed for the attack. This is where asymmetric attacks come into play. Symmetric attacks can be launched and executed without much thought, but asymmetric attacks need careful planning behind them. The idea, however, is the same -to send legitimate requests so that it ties up the resources at the target server. The difference lies in the type of requests used while executing the attack. If one special request can make the web server perform more work than usual, it is intuitive to try and send this request repeatedly. This will bring down the server faster, using fewer requests and at the same time reduces traffic volume which in turn evades detection.</p><p>Assume we have a web server that connects to a database server. The web server gives the users to search for jobs based on some search queries. To make the search better, the server employs pattern matching so that the database returns all jobs which have the words the user wants in any scenario. The internal query would look something like: SELECT TOP 10 JobPK , J o b D e s c r i p t i o n FROM JOBS a s j WHERE J o b D e s c r i p t i o n LIKE '%ASP%' ORDER BY JobPK This query will typically return the result in under a second. Note that the search term the user enters is "ASP". However, if the user enters a more complex search term, the query gets complicated. Consider a slight variation of this query as given below</p><formula xml:id="formula_0">SELECT TOP 10 JobPK , J o b D e s c r i p t i o n FROM JOBS a s j WHERE J o b D e s c r i p t i o n LIKE '%_ [ ^| ? $ %" * [(Z * m1_=]-%RT$ ) | [ { 3 4 } \ ? _ ] | | %TY-3 ( * . &gt;?_ ! ] _%' ORDER BY JobPK</formula><p>This query performs a complex comparison using regular expressions on the tuples and is likely to tie up the database for some time, possibly minutes.</p><p>We refer to the class of requests that do not put excessive load on the server as low workload requests, and the requests which do have to perform significant computation as high workload requests (In reality though, there is no such distinction, and classifying requests based on the workload is purely situational). Assuming that a high workload request performs twice the computation that a low workload request does, it would take just half the amount of requests to exhaust a server. And often times in a real server, the difference isn't a factor of two, it can be much bigger. The attackers greatly benefit from sending high workload requests to the web server because it can bring the server down with fewer resources. This attack is termed as an asymmetric workload attack. However, sending high workload requests continuously may raise the suspicion for the web administrator. This can lead to the connection being closed or blacklisted. A workaround for this is to not use a single connection to deliver multiple high workload requests. Instead, the high workload requests are distributed across multiple connections, each one delivering a small number of requests. In the worst case, each connection may deliver one single high workload request. This attack is called a Repeated One Shot attack <ref type="bibr" target="#b49">[48]</ref>, and has a two-fold effect on the server. On one hand it makes the web server to perform more computations and expend more resources. On the other hand, it ties up socket connections which cannot be released until the server has processed the requests.</p><p>Asymmetric attacks can also be executed in the same way using SOAP requests as well. The trick is to choose SOAP messages that will force the server to perform computation intensive tasks. There is another factor that comes into play for SOAP messages and that is memory. SOAP or XML messages need to be buffered in memory before they can be processed. Unusually large SOAP or XML messages can exhaust memory quickly. To avoid this, many servers will have a size restriction imposed on the XML packets that it receives. To overcome this restriction, attackers can send packets that just satisfy the packet size restriction over multiple connections. Since all of the packets need to be buffered it has the same effect as sending a single large packet but this technique flies under the radar of the defenses imposed by the web application.</p><p>Asymmetric attacks on DNS servers are relatively rare but not unheard of. These attacks focus on open recursive DNS servers. DNS servers can function as recursive or iterative servers. The two types of servers are identical except when they encounter a query to which they do not possess an IP address resolution. An iterative DNS server will find out the address of the DNS server which might potentially have the resolution and send this address over to the client. It is the client's responsibility to query the server and obtain the IP address. A recursive server on the other hand takes the burden of resolution onto itself and queries the next DNS server till it obtains a resolution. It responds with the final IP address resolution. An attacker might use this information to their advantage and query the server with domain names that are hard to resolve. In the worst case, the attacker can query the server with non-existent domain names so the server will work for a considerable amount of time with no results.</p><p>2) Reflected Attacks: For protocols working with an underlying UDP connection, address spoofing is a viable option for attackers and opens up the possibility of a reflected attack (Figure <ref type="figure">6</ref>). In such an attack, a malicious user spoofs the IP of the target server. Then it proceeds to request the service of either a DNS server or a SIP server pretending to be the victim. The DNS or SIP servers process the request and send the response to the victim directly. If the attacker sends a large number of requests to the DNS or SIP server, the victim server is flooded with a stream of responses which can render it unable to process normal client requests. This mode of attack offers two advantages for attackers. One, the attackers do not need to send direct requests to the server which means that they cannot be identified easily. This mode of attack hides </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. DEFENDING AGAINST DDOS ATTACKS AT THE APPLICATION LAYER</head><p>The increased sophistication that goes into executing an application layer DDoS attack makes it comparatively difficult to defend against these attacks. In general, there are two approaches to defend against these attacks -blocking automated requests using user puzzles, or to employ a detection mechanism to identify and block malicious users.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Blocking DDoS Attacks using User Puzzles</head><p>The primary cause of a denial of service attack is that attackers are able to send automated requests to the web server. This is accomplished through the use of botnets or using simple DDoS tools or scripts freely available on the internet. So the most basic line of defense against any sort of DDoS attack is to restrict automated requests from entering the system. A simple way to achieve this through the use of user puzzles. A user puzzle is any challenge that can be completed easily by a human user, but considerably difficult to complete for an automated system. Simple examples of user puzzles are CAPTCHAs(Completely Automated Public Turing test to tell Computers and Humans Apart) and AYAHs(Are You A Human). Although these puzzles can be broken by bots through the use of suitable image processing algorithms <ref type="bibr" target="#b50">[49]</ref>, <ref type="bibr" target="#b51">[50]</ref>, <ref type="bibr" target="#b52">[51]</ref> , this simple line of defense against DDoS attacks still works very well. This is because a majority of the DDoS attacks are simple attacks executed using available tools and do not possess the computing power required to crack these challenges.</p><p>Associated with this defensive tactic is the question of which users should be served with the challenge-response mechanism. The easiest solution is to deploy the challengeresponse mechanism for all the users who want to access your system. This is, however, a relatively inefficient solution. User puzzles significantly reduce the user experience when visiting a website. Users do not want to be burdened by having to solve a puzzle every time they visit a website. The next step would be to deliver the puzzles to only a fraction of the users. SENTRY <ref type="bibr" target="#b53">[52]</ref> uses a moderator module which supplies a challenge to a fraction of the requests it encounters. There are provisions within the defense mechanism to sample requests based on the associated workload. Additionally, the complexity of the challenge is also proportional to the workload of the request. However, the users who will be supplied with the puzzle are completely random. Another line of thought is that it is better to serve a challenge only to users who appear to be suspicious. This raises the additional question of how to determine suspicious users. Sivabalan &amp; Radcliffe <ref type="bibr" target="#b54">[53]</ref> proposed a way of detecting suspicious users based on the pages viewed and their viewing times. As long as the server load remained within limits, no user is served with a puzzle in their solution. When the server load crosses a threshold, they served suspicious users with AYAHs. This presents a calibration mechanism for their signature generation because if a user with a suspicious signature successfully solves the AYAH, the user is vindicated along with the other users who have a similar signature. On the other hand, repeated failures to solve the AYAH results in blocking of the users.</p><p>Similar defense mechanisms are used in web services as well. Suriadi et al. <ref type="bibr" target="#b55">[54]</ref> used a hash-based computation-bound puzzle, in which a client is required to find a partial preimage in a cryptographic hash function. They proposed a mechanism to include the puzzle and solution inside the SOAP header. They also used a nonce mechanism to ensure the client does not replay the solution from some other sources. Karnwal et al.</p><p>[55] used a similar idea to detect HTTP DDoS attacks against web services. Their work also focuses on other attacks like coercive parsing.</p><p>While puzzle based mechanisms like CAPTCHAs and AYAHs do work in preventing denial of service attacks, they also reduce the user experience. Hence, most of the research focus is on other approaches to solve the problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Detecting Application Layer DDoS Attacks</head><p>Detecting application layer DDoS attacks presents a significant challenge because of their low traffic volume and the use of legitimate requests. Except in the case of SOAP based attacks, it is almost impossible to detect an attack simply by examining an individual request. Rather, the complex interrelationships among a number of requests need to be modeled and studied to successfully identify an attack at the application layer. In general, attack detection can proceed in four different ways:</p><p>1) Template matching of individual requests 2) By tracking requests 3) By analyzing the request stream dynamics 4) By analyzing the request stream semantics 1) Template Matching: SOAP based DDoS attacks often aim at misusing the flexibility provided by the different security specifications. A common defense mechanism against these attacks is to specify stringent requirements that the incoming requests should obey, such as proper level of nesting or use of external entities. This is called schema hardening <ref type="bibr" target="#b27">[26]</ref>. Schema hardening has to be followed by proper verification of the schema requirements in the incoming packets. In other words, by matching each incoming request against a template, SOAP or XML based DDoS attacks can be averted to a large extent.</p><p>2) Request Tracking: Request tracking goes one step ahead of inspecting individual requests and matching them to a set template. Request tracking refers to schemes which monitor how many requests (or responses) have been received (or sent out) and possibly identifying correlations between them. Such mechanisms have been employed considerably in the detection of slow DDoS attacks, and attacks that rely on an underlying UDP connection.</p><p>3) Analyzing Request Stream Dynamics: Request dynamics analyzes a request stream "by the numbers". Such an analysis is concerned more about statistics rather than about finding meaning in the stream of requests. This refers to the features like number and type of requests, request rate, source IP distribution etc. This layer of observation focuses on the low level details of a request stream and does not focus on how a user views and accesses a web application. These mechanisms find extensive use in detecting HTTP flooding attacks.</p><p>4) Analyzing Request Stream Sematics: These detection mechanisms try to encapsulate features which represent how a user accesses the web application. A normal user does not consciously know about or manipulate his request rate or his session rate. These users are only concerned about the different resources or web pages that they need to access and the order in which they need to access them. This layer, therefore, analyzes the different pages the users have requested and the sequence in which users request web pages. In other words, these detection mechanisms attempt to find an underlying meaning behind the incoming request stream. Detection mechanisms that focus on semantics are used extensively in detecting HTTP flooding attacks, as well as HTTP asymmetric attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. DEFENDING AGAINST DDOS ATTACKS EXPLOITING</head><p>SYSTEM VULNERABILITIES Denial of service attacks can be launched exploiting a multitude of vulnerabilities in web applications. A large number of these vulnerabilities are caused by programmer negligence and lead to opportunities for attacks like SQL or XML injection. SQL injection attempts to inject malicious queries into the database system of the web application. In the context of DDoS attacks, the attacks aim to put the database in an erratic state which prevents the system from executing. There are a large number of mechanisms available to defend against SQL injection, and considerable amount of research work has gone into this area as well <ref type="bibr" target="#b57">[56]</ref>, <ref type="bibr" target="#b58">[57]</ref>, <ref type="bibr" target="#b59">[58]</ref>, <ref type="bibr" target="#b60">[59]</ref>, <ref type="bibr" target="#b61">[60]</ref>. Closely related to SQL injection is the vulnerability of XML injection. The idea and execution of the two attacks are similar -the target changes from SQL databases to XML documents or databases. Again, the detection mechanisms are similar to that of SQL injection and a significant amount of work has already gone into the area <ref type="bibr" target="#b62">[61]</ref>, <ref type="bibr" target="#b63">[62]</ref>.</p><p>Vulnerable algorithms pose another threat to web applications and attacks like HashDoS and coercive parsing attacks which exploit weaknesses in hashing and parsing algorithms provide ample proof for that. However, despite being a legitimate threat, these attacks can be mitigated quite efficiently by taking necessary precautions. For example, the HashDoS attack was ineffective on hash tables implemented using Perl because Perl used a randomized hashing algorithm which considerably reduced the chance of collisions. Similarly coercive parsing attacks can be eliminated completely by using a DOM (Document Object Model) based parsing algorithm.</p><p>A web application is made up of a large number of components like the web server, load balancer, or proxies. Any of these components could have vulnerabilities that lead to a denial of service attack. An earlier version of the Apache server was vulnerable to a Range Header attack. When presented with a large overlapping range of range values in the header, the system CPU utilization peaked and even led to the system crashing. However, system vulnerabilities are considerably rare because of an open and active development community and constant update of software components. The recent versions of Apache are not vulnerable to this attack as a result of proper patches being deployed. Attacks which exploit system vulnerabilities have already received considerable attention while addressing areas in computer security other than DDoS attacks. The inclusion of this class of attacks in the taxonomy of application layer DDoS attacks is for the sake of completeness because these vulnerabilities, though not strictly under the purview of DDoS attacks, can still be used to launched DDoS attacks. Instead of delving deep into these vulnerabilities, we choose to focus more on the other two classes of vulnerabilities -those exploiting protocol features and system features -because they have received considerably less attention and they form the bulk of application layer DDoS attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. DEFENDING AGAINST HTTP PROTOCOL VULNERABILITIES</head><p>Slow DDoS attacks are the major class of attacks that exploit the HTTP protocol. Cambiaso et al. <ref type="bibr" target="#b36">[35]</ref> created a detailed taxonomy of slow DDoS attacks. Their classification however, clubs asymmetric attacks and attacks like HashDoS attacks into the category of slow DDoS. The rationale behind that classification was that the request rate in these attacks are much less than that in normal flooding.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Preventing Slow DDoS Attacks</head><p>There are comparatively fewer research works done on detecting and defending against slow DDoS attacks. However, these attacks can be mitigated by following some preventive mechanisms such as lowering the timeout value of the server, installing suitable Apache security modules, setting up proper IPTables or IDS rules <ref type="bibr" target="#b69">[68]</ref>. Parks et al. <ref type="bibr" target="#b70">[69]</ref> conducted simulations that validate the effectiveness of slow DDoS attacks. They observed that the timeout feature in the web application is effective in reducing the magnitude of the attack but cannot stop the attack from happening.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Detecting Slow DDoS Attacks</head><p>Slow DDoS attacks are usually detected by employing a request tracking mechanism to keep track of the incomplete requests in the system at any point in time. Some works have also used an analysis of request rate (request dynamics) to identify malicious attackers.</p><p>1) Detection Mechanisms which employ Request Tracking: Tripathi et al. <ref type="bibr" target="#b66">[65]</ref> proposed that each connection be associated with a vector denoting the percentage of complete or incomplete GET and POST requests. At any instant of time, if the percentages go beyond a learned threshold, the connection is detected as suspicious. They proposed the use of Hellinger distance to perform the distance calculation. Dantas et al. <ref type="bibr" target="#b40">[39]</ref> proposed maintaining a record of the number of bytes received for each request in each connection on the server. In this case, if the server runs out of connections, it can randomly choose to either drop the incoming connection or to drop an existing connection taking into consideration the number of received and sent bytes. Their approach defends against slow GET, POST and PRAGMA attacks.</p><p>2) Detection Mechanisms which Analyze the Request Rate: Shtern et al. <ref type="bibr" target="#b64">[63]</ref> proposed a defense mechanism against slow DDoS attacks based on Software Defined Infrastructure(SDI). SDI is a setup where the network infrastructure is virtualized and the connections and routing tables can be modified on the fly using software controls. This provides a great deal of flexibility. Their approach was to direct suspicious connections to a "shark tank" where they would be analyzed further. However, their approach works only if the infrastructure is software defined and cannot be used in other cases. The work of Giralte et al. <ref type="bibr" target="#b71">[70]</ref> is one of the few works that seem to be able to detect both HTTP attacks (symmetric and asymmetric) along with Slowloris attacks. Mongelli et al. <ref type="bibr" target="#b65">[64]</ref> performed Fourier transform analysis on the incoming packet stream to identify slow DDoS attacks. Katkar et al. <ref type="bibr" target="#b67">[66]</ref> was able to identify slow read and post attacks using a Naive Bayes classifier. Oshima et al. <ref type="bibr" target="#b68">[67]</ref> proposed a method of using request entropy to identify slow DDoS attacks.</p><p>Multiple verb HTTP attacks are not featured prominently in literature because the attack is not well documented. However, it seems plausible that deep packet inspection can evade these attacks.</p><p>Slow DDoS attacks are stealthy DDoS attacks that can take down a server with minimal resources. However, defending against these attacks poses a familiar double edged sword. Reducing timeout values and limiting the number of connections continue being the basic line of defense against slow DDoS attacks, but these measures can lead to legitimate users with low bandwidths being forced to relinquishing their connections prematurely. Learning general user behavior continues to be the best defensive option but even with this option, false positives continue to come up. A summary of the detection mechanisms employed against slow DDoS attacks is featured in Table <ref type="table" target="#tab_1">III</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VII. DEFENDING AGAINST XML BASED ATTACKS</head><p>DDoS attacks against web services pose a serious threat to the financial sector because a number of payment gateways operate using web services. SOAP and JSON are two of the data interchange formats used in web services, with SOAP being the most common and JSON slowly emerging as the standard. Hence, a lot of the research work on web services has focused on SOAP. However, majority of these research works focus on how these attacks can be prevented.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Preventing XML Denial of Service Attacks</head><p>Jensen et al. <ref type="bibr" target="#b27">[26]</ref> presented a detailed description of all possible attacks on web services, not just denial of service attacks. They also propose a number of countermeasures for preventing these attacks. Most important and the most basic among these is schema hardening and proper schema validation. Every web service has a particular schema which describes the structure of an incoming message. This is usually described in the WSDL (Web Service Description Language). A lot of the time, validation of the incoming message is not performed against this schema due to performance reasons. However, performing such a validation can reduce the incidence of attacks to a large extent. The second part of the solution is schema hardening. Schema hardening involves imposing restrictions (on input size, level of nesting etc.) on the input fields. Additionally this could include removing private functions from the WSDL.</p><p>Attacks which rely on oversized security headers or cryptographic functions rely on the fact that there is virtually no limit to the number of levels of nesting that can be performed on the encryption keys or the size of the security header. This can be overcome by including a strict WS-SecurityPolicy which restricts the size of the security header and the nesting of encryption.</p><p>The major issue with XML and SOAP messages is that even if the system preprocesses them before execution, they still need to be parsed and stored beforehand. The use of a tree like representation used in DOM parsers necessitates that the entire XML message be present in memory for processing. This is basically the root of all attacks in XML. A solution for this is to use an event driven processing model using an SAX parser. This enables the system to identify an invalid message and abort processing immediately.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Detecting XML Denial of Service Attacks</head><p>Vissers et al. <ref type="bibr" target="#b72">[71]</ref> proposed a defense mechanism which incorporates a lot of the suggestions given by Jensen. They developed a mechanism to defend against HTTP and XML denial of service attacks. These two attacks can go handin-hand in the case of web services because HTTP is often used as the delivery mechanism for SOAP or XML messages. Their approach learns a normal user profile, represented by Gaussian models, of several features, such as content length, number of elements, nesting depth, longest element, attribute and namespace. There is a two stage filtering process in this system. In the first stage, the HTTP filter is examined and any abnormalities in content length are ruled out. If the message passes the first stage of processing, the second stage actually parses the messages and cross-verifies the information with that present in the HTTP header. Parsing is carried out using an SAX parser which eliminates the vulnerabilities related to memory and CPU. Padmanabhuni et al. <ref type="bibr" target="#b74">[73]</ref> proposed a solution involving header and body inspection to detect XML DoS attacks, but suggested using a more compact representation of the schema for faster processing. They selected the Patricia Trie representation for this purpose.</p><p>Ficco &amp; Rak <ref type="bibr" target="#b75">[74]</ref> analyzed the level of nested XML tags in normal SOAP messages, and created a statistical distribution of the same. If the incoming messages do not abide by the distribution, they are classified as suspicious. If these messages are accompanied by an anomalous CPU usage profile as well, the request is blocked and the system is restored to its usual state.</p><p>Chonka et al. <ref type="bibr" target="#b73">[72]</ref> used a backpropogation neural network on on XML features to identify XML DDoS attacks. They also introduced a CTB (Cloud Trace Back) mechanism which marks the requests reaching the cloud server. This is carried out using a reverse proxy server. This marking enables the cloud server to trace back the connections and block them in case of an attack.</p><p>XML and SOAP form the backbone of web services which power financial services and payment gateways. A DDoS attack targeting these systems could cause a large part of the economy to freeze. XML flooding attacks are not represented in literature but the techniques used to detect HTTP flooding could very well be extended to XML as well. What is of considerable importance is how XML and SOAP features can be exploited to launch DDoS attacks. Apart from packet inspection, there are not many defense mechanisms available for these attacks. To a large extent these attacks can be prevented by employing proper schema validation and schema checking. Table <ref type="table">IV</ref> gives a summary of detection mechanisms for XML DDoS attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VIII. DEFENDING AGAINST HTTP FLOODING ATTACKS</head><p>HTTP flooding attacks are similar to network layer flooding attacks in the sense that they rely on a large stream of requests to exhaust the server resources. However the most obvious difference is that they rely on HTTP requests instead of network packets. Even though application layer floods proceed through the use of legitimate user requests, the overall nature of a malicious request stream still differs from a legitimate flow. Detecting application layer floods essentially aims to identify these differences. This is usually done by analyzing request dynamics, request semantics or both. The various research works in the area differ according to the statistical features used, and the machine learning technique employed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Detection Mechanisms based on Request Dynamics</head><p>Since a spike in request rate is one of the biggest telltale signs of a DDoS attack, one line of research focuses on predicting the expected request rate at each instant and scrutinizing the incoming request stream using this knowledge. However, request rate alone is often not a good indicator of an attack, because sophisticated attacks can maintain the illusion of a normal request rate while launching attacks. In such cases, statistics like request entropy can be used.</p><p>1) Traffic Estimation: Wen et al. <ref type="bibr" target="#b76">[75]</ref> uses traffic estimation as the basis for detecting attacks. Their system estimates the expected traffic from historical data using a Kalman filter. If a significant deviation is witnessed from the expected traffic value, this indicates either an attack or a flash crowd. The source IP distribution provides additional evidence to determine if the flood is actually an attack or not. Ni et al. <ref type="bibr" target="#b77">[76]</ref> used an Adaptive Auto Regressive (AAR) Model to model network traffic. The estimated value is smoothed with a Kalman filter. They introduced a feature called HRPI (HTTP Requests Per IP) as the classification variable. The classification is performed using a Support Vector Machine (SVM).</p><p>2) Request Statistics: There are a large number of statistical features that have been used in detecting HTTP floods apart from just the request rate. Some of these features include the request timestamp, IP address, header fields, user agents, number of 200 OK responses, number of error responses and so on. Most research works use a combination of these features for detecting attacks. Yadav &amp; Selvakumar <ref type="bibr" target="#b78">[77]</ref> used Principal Component Analysis (PCA) and logistic regression on statistical features to identify attacks. In another work, <ref type="bibr" target="#b79">[78]</ref>, the same authors applied deep learning on these same statistical features. The authors employed a stacked autoencoder to extract latent features from the basic statistical features and used logistic regression on these features. Johnson et al. <ref type="bibr" target="#b80">[79]</ref>, <ref type="bibr" target="#b81">[80]</ref> used a multilayer perceptron (MLP) with the weights trained by a genetic algorithm. In <ref type="bibr" target="#b80">[79]</ref> the training features were HTTP GET count, entropy and variance, while in <ref type="bibr" target="#b81">[80]</ref> the features used were number of HTTP count, number of the IP addresses, constant mapping function and fixed frame length. Chwalinski et. al. <ref type="bibr" target="#b82">[81]</ref>, <ref type="bibr" target="#b83">[82]</ref> used the number of requests per resource for each user as the deciding feature and performed K-means clustering to group users into different clusters. They applied likelihood analysis and Bayes factors to determine if an incoming connection can be attributed to an existing cluster or not. A connection that cannot be attributed to any cluster is deemed as malicious. Oo et al. <ref type="bibr" target="#b84">[83]</ref> extracted features like number of packets, number of bytes, average packet size, packet rate, byte rate, time-interval variance and packet-size variance from connections. If all of these features fall within limits then the connection is most likely benign and is accepted. If all of these values fall outside acceptable limits, the connection is most probably malicious and is blocked. In other cases, where some of these features fall within the specified range and others do not, they employed an HsMM (Hidden semi Markov Model) to efficiently model and classify the connection. Lee et al. <ref type="bibr" target="#b85">[84]</ref> used Principal Component Analysis (PCA) to reduce the feature dimension and then performed clustering.</p><p>Entropy is a much used measure to determine whether a stream of requests is malicious or not. A normal user sends requests which are varying in size, speed and intent. A stream of attack requests on the other hand will be more uniform and have similar requests repeated at regular intervals. As a result, an attack stream will have lower entropy than normal user requests. Devi &amp; Yogesh <ref type="bibr" target="#b86">[85]</ref> used this information along with trust values of users to detect attacks. Zhou et al. <ref type="bibr" target="#b87">[86]</ref> also used model entropy but their work was meant for identifying attack streams in backbone web traffic. Zhao et al. <ref type="bibr" target="#b88">[87]</ref> used two measures -Entropy of URL per IP (EUPI) and Entropy of IP per URL (EIPU) for identifying flooding attacks. During a random flooding attack or a fixed URL flooding attack, EUPI would increase, thus indicating an attack. EIPU helped in distinguishing attacks and flash crowds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Detection Mechanisms based on Request Semantics</head><p>Request semantics can be further refined to consist of two classes. Mechanisms that rely on the composition of requests in a request stream, without any consideration to the sequence are much easier to use because of the reduction in data that needs to be analyzed. Mechanisms that rely on request sequence on the other hand tend to be more complex but on the whole tend to be more accurate because they can model normal human behaviour much more accurately.</p><p>1) Request Composition: Devi &amp; Yogesh <ref type="bibr" target="#b90">[89]</ref> constructed an access matrix using features like HTTP request rate, HTTP session rate, server documents that are accessed and duration for dimensionality reduction. The incoming connection is assigned a suspicion score based on how much deviation it exhibits from the output of the ICA module. Instead of blocking the connection if it does not match the learned model, this approach schedules the request accordingly. A request which matches with the learned model will have a low suspicion score and consequently will be scheduled for execution faster. A request with a high suspicion score will be scheduled much later. Beitollahi &amp; Deconinck <ref type="bibr" target="#b91">[90]</ref> follows a similar approach. The system constructs the CDF (Cumulative Distribution Function) for each of the observed features in the normal user sessions. For an incoming connection, it assigns a suspicion score for each feature based on how likely it is to have the observed value according to the CDF. The final score is the sum of the individual suspicion scores for all the features.</p><p>Beckett et al. <ref type="bibr" target="#b94">[93]</ref> presented a novel approach to detect attacks targetting database systems by observing features like the number of databases opened or closed, total and average query time etc. They used a decision tree classifier to identify malicious users based on these features.</p><p>2) Request Sequence: Ye et al. <ref type="bibr" target="#b89">[88]</ref> uses average transition probability and page popularity as features for clustering. They used Euclidean distance and Ward's linkage to match an incoming connection into a cluster. Ndibwile et al. <ref type="bibr" target="#b92">[91]</ref> proposed the use of three servers -a bait server, a decoy server and a real server -for the detection of attacks. They proposed that all traffic be directed to the bait server initially. From there, proven benign traffic is directed to the real server while suspicious traffic is routed to the decoy server. At the decoy server, traffic is authenticated using decision trees trained using known attack generation tools. Oikonomou &amp; Mirkovic <ref type="bibr" target="#b93">[92]</ref> used dynamics, semantics and decoys to weed out attackers. Dynamics refers to features like number of sessions, average pause between sessions, average number of requests per session, and average request inter arrival rate per session. Decision trees were used for classifying the incoming connections. Semantics is modeled by creating a probability graph of the website. The probability of a path is defined as the average of the probabilities of all the edges in the path. Finally, they used decoys which are invisible links or images embedded in the web page. These links are invisible to normal users and hence do not show up in the traces for normal users. However, the links are still parsed by bots and can be used to identify them.</p><p>Table <ref type="table">V</ref> gives an overview of the different research works, the features and detection mechanisms used, along with advantages and disadvantages where applicable.</p><p>HTTP flooding attacks are the most common application layer DDoS attacks. It is often possible to identify a flooding attack by observing the characteristics of the request stream. This is the reason most of the application layer firewalls can provide a great level of defense against HTTP floods. However, systems are far from immune to flooding attacks. Even at the application layer, attack volume is on the rise for flooding attacks. Though still many orders of magnitude less than the network flooding volume, the high volume HTTP floods can clog the firewalls, thus creating a new bottleneck.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IX. DEFENDING AGAINST ASYMMETRIC HTTP ATTACKS</head><p>Compared to HTTP flooding attacks, asymmetric attacks are much harder to detect. This is because of the fact that HTTP floods are marked by a sharp change in many features which can lead to its identification. Asymmetric attacks on the other hand can be executed without raising too many red flags and hence evades detection to a large extent. However, there are certain warning signs that can signal an asymmetric attack in process. Every web application has a set of normal users who browse the web application in a certain way. This means that regular users often follow certain paths in the website more often than others. In other words, certain request sequences are more likely than others. Apart from that, normal users take time to browse the web application. Between every pair of requests issued, there is an associated time gap, often called "think time" because this is when the user processes the web response and decides what to do next. These two features are often not followed in the case of a request sequence submitted by a bot. This forms the basis of identifying an asymmetric</p><p>In other words, request dynamics are unlikely to be of any use in detecting asymmetric attacks. All existing detection mechanisms use request semantics in some form. A summary of the same can be found in Table <ref type="table">VI</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Detection Mechanisms based on Request Composition</head><p>Ranjan et al. <ref type="bibr" target="#b49">[48]</ref> was one of the earliest works to take into account the workload profile of a user into account for detecting DDoS attacks. The idea was that normal users are not likely to send high workload requests continuously to the server. Their request profiles would contain interleaved low, medium and high workload requests, while the request sequence of an attacker would have a stream of high and medium workload requests. They analyzed session and request inter arrival distribution, along with client workload profile to assign suspicion scores to users. Based on the deviation of each feature from the legitimate user profile, they assigned suspicion scores to individual users. The connections were scheduled according to the suspicion scores.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Detection Mechanisms based on Request Sequence</head><p>Most of the existing works use attack-free user traces to learn how a user accesses the website. Based on this learned model, they calculate the normality of the observed request sequence, which denotes the probability that the incoming user sequence was generated by a legitimate user.</p><p>Xu et al. <ref type="bibr" target="#b95">[94]</ref> modeled the user behavior in a web application as a probabilistic graph. For each incoming connection, they observed the stream of requests and predict the future request sequence. The similarity between the predicted and observed stream of future requests is used to identify malicious users. Giralte et al. <ref type="bibr" target="#b71">[70]</ref> presented a three stage detection mechanism which utilizes statistical features, request sequence and request sequence similarity for detecting attacks. The defense and offense involved in defending against DDoS attacks is strikingly similar to a game between the attacker and the web administrator. Emami-Taba et al. <ref type="bibr" target="#b100">[99]</ref> used Game Theory to develop a set of payoff tables to model the attack scenario and used the min-max algorithm to identify attackers.</p><p>Xie &amp; Yu <ref type="bibr" target="#b96">[95]</ref> were the first to use an HsMM for the purpose of detecting denial of service attacks at the application layer. Their work constructed the HsMM from system traces and approximated the think time associated with a page as the number of inline requests the page makes. This can be seen as an approximation of page loading time. They constructed a normal distribution of the likelihoods of the observed sequences which is called Original Likelihood Distribution (OLD). The amount of deviation from the OLD is taken to be the abnormality of an observed request sequence made by a user. A similar approach was also taken by Meng et al. <ref type="bibr" target="#b101">[100]</ref>. Huang et al. <ref type="bibr" target="#b99">[98]</ref> also modeled page popularity of a website using an HsMM. They clustered the available data sets into clusters before using the features to construct an HsMM to reduce the dimensions of the data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Detection Mechanisms by Observing a Change in Page Popularity</head><p>There is another approach to detect an application layer attack which relies not on observing the request stream directly, but rather observing the effect of the request stream. Every website has a set of "hot" pages, i. e. pages which are visited more often than others. Generalizing this observation, every page in a website has a probability with which a user accesses it, which denotes how popular the page is. An attack, which does not follow normal user patterns, tends to disrupt this page popularity in haphazard ways. This provides an indirect indication of attack.</p><p>Wang et al. <ref type="bibr" target="#b98">[97]</ref> assumes each user accessing the website has an a priori click ratio which denoted the popularity of the web pages. The idea is that when a web application is under attack, the click ratio deviates from the a priori one, and this is used as the means of identification. This work uses large deviation theory to identify how probable a deviation from the a priori click ratio is. They also modeled the click ratio by means of an HsMM and employed Large Deviation theory to measure the probability of deviation. Another work by Xie and Yu <ref type="bibr" target="#b97">[96]</ref> constructed an HsMM modeling the document popularity of a web site. However, they observed that algorithms for building and operating HsMM become considerably complex when using high dimensional data. Hence to reduce the dimensionality of the input data they used traditional dimensionality reduction algorithms of PCA and ICA (Independent Component Analysis).</p><p>HsMM proves to be extremely efficient in detecting asymmetric as well as flooding attacks, but they do have some drawbacks. The detection principle involves calculating the probability of the observed sequence at each instant of time. This algorithm however, is complex and thus the overall system load will be more. In some cases, simple statistical calculations prove more efficient than using an HsMM.</p><p>Asymmetric HTTP DDoS attacks are extremely severe because of their similarity to normal human behaviour. Defenses relying on request rate and request statistics will fail to detect these attacks, and by extension they make existing web application firewalls obsolete. Identifying these attacks is a complex procedure which involves learning normal user behaviour and weeding out connections that show unnatural behaviour. However, most of the techniques used for detecting these attacks rely on an HsMM. While being highly effective, an HsMM has a large computation cost associated with it, which makes it a questionable choice for run time detection. It may also happen that the defense system becomes a bottleneck that attackers can exploit.</p><p>X. DEFENDING AGAINST DNS ATTACKS Denial of Service attacks on DNS servers are the most difficult to detect and are the most devastating. The reason they are so difficult to detect is that DNS relies on UDP messages which means that there is no concept of a connection. This essentially eliminates the possibility of pin-pointing malicious users and blocking them. The best that can be done is that the DNS server identify malicious messages and not waste any processing power in serving those requests. A summary of the detection techniques can be found in Table <ref type="table" target="#tab_1">VII</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Mitigation Approaches</head><p>Some research has gone into suggesting changes in how the DNS servers maintain records which could potentially help in mitigating attacks on DNS servers. Pappas et al. <ref type="bibr" target="#b105">[104]</ref> suggested that DNS caches be modified to cache the infrastructure records for longer periods of time. This can help mitigate the effect of denial of service attacks on a DNS server because the caching servers can still function in such a situation. Ballani &amp; Francis <ref type="bibr" target="#b106">[105]</ref> went one step further to suggest that DNS servers cache even stale data which can be of some use in case of a DNS outage. These solutions, though, do not prevent attacks on DNS servers, and are difficult to successfully implement.</p><p>Zhu et al. <ref type="bibr" target="#b107">[106]</ref> suggested negotiating a connection using TLS (Transport Layer Security) protocol for DNS communication as well. They called this extension T-DNS, which provided an enhanced privacy and security. While this attack does make it harder to execute an attack on a DNS server, it still leaves the door open for connection oriented attacks, similar to HTTP attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Detecting Attacks on DNS Servers</head><p>The major issue in detecting an attack on a DNS server is determining if the incoming request is legitimate or not. Guo et al. <ref type="bibr" target="#b108">[107]</ref> suggested incorporating cookies into DNS messages as a way of identifying if the incoming request is spoofed or not. Rastegari et al. <ref type="bibr" target="#b109">[108]</ref> developed a detection mechanism for attacks on a DNS server using neural networks. Their approach trains neural networks using features like throughput, average packet size and packet loss to identify attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>XI. DEFENDING AGAINST SIP ATTACKS</head><p>Considerable work has gone into studying and defending against SIP flooding attacks. Some of these approaches suggested subtle changes in the message structure of SIP while others attempt to detect attacks against SIP end users and proxy servers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Preventing SIP DDoS Attacks</head><p>Hussain &amp; Nait-Abdesselam <ref type="bibr" target="#b119">[118]</ref> suggested including a field called Critical Number(CN) in the REGISTER message. Every user agent must register with the registrar server before they can receive a call and the CN essentially denotes the maximum number of simultaneous calls they can receive. The proxy server will forward a call to a callee only if the callee is capable of handling the call. This approach however works only by protecting the callee. The proxy server or registrar server are still wide open to attacks. Defending the proxy server however comes with issues of its own. Chen <ref type="bibr" target="#b110">[109]</ref> proposed a finite state machine to keep track of the SIP state and ensure it doesn't go into an unidentified state. However, this mechanism has to be deployed before every proxy server which is not cost effective. An ideal solution would be deployed at the client side which will be much more cost efficient.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Detecting SIP DDoS Attacks</head><p>There are multiple strategies that have been adopted to identify attacks on the client side. A basic defense can employ request tracking and correlation of the SIP messages. Other works have also relied on analyzing the request rate (request dynamics) and modelling the SIP connection as a whole (request semantics).</p><p>1) Correlating SIP Messages: One consideration is that during an attack free execution, there is always a strict correlation between the SIP INVITE messages, the response messages and the acknowledgments. In an ideal case of course, for each INVITE message there will be exactly one response and one ACK. However, due to network delays and retransmissions this is not always the case. Geneiatakis et al. <ref type="bibr" target="#b111">[110]</ref> proposed the use of bloom filters to check whether the number of INVITE requests, responses and ACKs were  within the specified limits. Here they allowed the number of responses and ACKs to be double the number of INVITE requests to account for network losses. Sengar et al. <ref type="bibr" target="#b112">[111]</ref> identified that similar correlations exist between TCPs SYN, ACK and FIN messages as well. They used Hellinger distance to identify if the system was under attack. The data learned from the first n time slots were used to identify any malicious behavior in the next slot. If the slot proves to be benign, that slot is also incorporated into the learning data set. This is one way to identify and cope with any on the fly variations. Kumar and Thilagam <ref type="bibr" target="#b117">[116]</ref> proposed a different way of correlating SIP messages. They calculated three features -Hash Computation Efficiency (HCE), Successful URI Binding Efficiency (SUBE) and Registration Drop Efficiency (RDE) from the SIP REGISTER messages. These values are used to capture the general attitude of the server which in turn indicates an attack.</p><p>2) SIP Request Rate: Tang &amp; Cheng <ref type="bibr" target="#b113">[112]</ref> proposed a method to detect SIP flooding attacks when the attack volume does not experience a sudden spike, but rather follows a gradual increase. Most of the existing defenses would not work under these circumstances. The authors proposed the use of Multi Resolution Analysis (MRA) and decomposed the wavelet into two signals -detail signal and approximation signal. The idea was that when the system is under attack, the energy of the detail signal would rise sharply even if the attack volume rises slowly. Allawi et al. <ref type="bibr" target="#b114">[113]</ref> monitored three features in the SIP communication -request rate, percentage of requests served and average response time. The values of these parameters during the testing phase were compared with thresholds identified during the learning phase to identify an attack. Tang et al. <ref type="bibr" target="#b115">[114]</ref> used sketch data distributions of four features. Each sketch data is essentially a hash table for the SIP attribute values. The training data set was used to generate a sketch distribution which was compared with the sketch distribution generated during testing. It uses Hellinger distance to measure similarity.</p><p>3) Modeling the SIP connection: Golait &amp; Hubballi [115] modeled the SIP system using a Probabilistic Counting Deterministic Timed Automata (PCDTA). If the system follows the automata from the start state to a final state with the path probability greater than than a predetermined threshold, the connection is not anomalous. If the system enters a deadlock or enters an error state, the operation is deemed to be anomalous. Flooding attacks can be detected by using a counter associated with a transition and slow attacks can be identified by the timing probability. Semerci et al. <ref type="bibr" target="#b118">[117]</ref> monitored the SIP message history of users per time interval. They assigned each user a vector denoting the user's behaviour and the server had a state vector to denote the state of the server, which was nothing but the summary of all user activity. Any significant deviation from the state vector of the server represents an attack.</p><p>Table <ref type="table" target="#tab_1">VIII</ref> presents a summary of the different ways in which SIP flooding attacks have been detected in literature.</p><p>SIP powers a major share of the VoIP communication. Unfortunately, SIP also offers a wide variety of points where a denial of service attack can be executed. Detecting these attacks by observing merely the traffic flow volume may result in false positives, and hence sophisticated techniques which model the SIP architecture and detect anomalies are needed. However, the performance and efficacy of these techniques have to be considered to ensure it can operate in real time. Also, SIP provides multiple points of attack, all of which must be secured to ensure that the entire system works perfectly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>XII. DEFENDING AGAINST REFLECTED ATTACKS</head><p>Reflected attacks present a significant challenge in situations where the underlying transport layer protocol is connectionless. This type of attack allows the attackers the opportunity to remain hidden while simultaneously employ an asymmetric attack on the victim. In cases where the response messages reflected on to the victim is much larger than the request messages sent by the attacker, the attack is called an amplification attack. SIP reflection attacks have not been reported in literature much, and the majority of reflected attacks are accounted for by reflected DNS attacks. As a result, we focus our attention on reflected DNS attacks only.</p><p>Almost all works that attempt to defend against reflected DDoS attacks at the application layer attempt to employ some sort of request tracking mechanism. They attempt to identify some correlation between the number of requests and responses and hence try to separate legitimate users from malicious ones. The type of correlation identified, and the mechanism used to perform the correlation are what separate the different works in the area.</p><p>Kambourakis et al. <ref type="bibr" target="#b104">[103]</ref> presented a simple solution to DNS amplification attacks. They proposed that when a DNS amplification attack takes place, the targeted DNS server receives responses without having previously sent out the corresponding request. Their approach simply requires that such data (orphan pairs) be immediately classified as suspicious and discarded. Sun et al. <ref type="bibr" target="#b102">[101]</ref> used a similar approach by storing the outgoing DNS requests using a bloom filter. If the number of responses coming in is greater than the number of requests, this signifies an attack. Any response which does not match the request information stored is discarded. Khan et al. <ref type="bibr" target="#b103">[102]</ref> used chaos theory to identify the incoming DNS stream as malicious or not.</p><p>DDoS attacks against DNS extremely hard to detect and at the same time extremely devastating as well because it can potentially affect a large number of other sites and can even disrupt internet temporarily. The use of UDP which is a connectionless protocol essentially makes this a very promising line of attack for attackers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>XIII. TOOLS AND DATASETS RELATED TO APPLICATION LAYER DDOS ATTACKS A. Tools for Defending Against Application Layer DDoS Attacks</head><p>Specially designed application layer firewalls are necessary to detect application layer DDoS attacks, because these attacks can only be detected through inspecting HTTP requests and identifying patterns in the request flow. There are open source and commercial firewalls available that are able to detect and block these attacks, but these tools still focus on the primitive application layer DDoS attacks. A comparison of some of the commercial defense tools are given in Table <ref type="table" target="#tab_10">IX</ref>. There are a few open source DDoS defense tools available but they lack in strength and diversity. Apache provides a module mod_evasive which can be configured to block connections with predefined rules. For example, it could be set to block connections which send requests over a particular threshold rate, or attempt to open too many connections. HAProxy is an open source load balancer which can be configured to block malicious users in the same way. It can also detect a TCP SYN flood and Slowloris attacks. Radware has deployed an open source DDoS defense system called Opendaylight, but it depends on an SDI to operate. Google has a DDoS defense mechanism called Project Shield, which allows websites to route their traffic through Google servers, where the traffic will be filtered.</p><p>While the existing defense mechanisms do work well for the common application layer DDoS attacks like HTTP floods, they rely on predefined rules and do not consider normal user behaviour for detecting attacks. As a result, asymmetric attacks are likely to fly under the radar of these defenses.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Datasets for Application Layer DDoS</head><p>There is a dearth of datasets available for training and testing application layer DDoS defense mechanisms. While there are a wealth of network traces available, there are comparatively few application layer traces available, and most of the available datasets are old. There are a number of sources of attack free HTTP traces provided by the Internet Traffic Archives. Some of these datasets are:</p><p>• WorldCup98 -1. 3 billion Web requests recorded at servers for the 1998 World Cup. • EPA-HTTP -a day of HTTP logs from a busy WWW server.</p><p>• SDSC-HTTP -a day of HTTP logs from a busy WWW server.</p><p>• Calgary-HTTP -a year of HTTP logs from a CS departmental WWW server. • ClarkNet-HTTP -two weeks of HTTP logs from a busy Internet service provider WWW server. • NASA-HTTP -two months of HTTP logs from a busy WWW server. • Saskatchewan-HTTP -seven months of HTTP logs from a University WWW server. However, most of these datasets date back to the late 1990s or early 2000s. Shiravi et al. <ref type="bibr" target="#b120">[119]</ref> recognized this problem and generated a dataset that has been used in some of the recent research works featuring HTTP GET flood attacks <ref type="bibr" target="#b121">[120]</ref>. There are a few datasets which describe a DDoS attack which are given below.</p><p>• CAIDA : Contains approximately one hour of anonymized traffic traces from a DDoS attack on August 4, 2007. • DARPA : DARPA contains DDoS datasets of varying complexity of attack, but the dataset is from the year 2000. Apart from that, analyses on the dataset have led some researchers to suggest it does not resemble real network data. However, these datasets are not very reliable and so most of the research works have relied upon generated attack traces using existing DDoS attack generation tools. Some of these attack tools are listed below.</p><p>• Low Orbit Ion Cannon : LOIC is a simple tool which can be used to generate TCP, UDP or HTTP floods. • HULK: HULK generates a random flood attack capable of bypassing proxies and evade detection. • SIPp-DD : SIPp is a SIP traffic generation tool, which has been leveraged by the work of Stanek &amp; Kenkl <ref type="bibr" target="#b122">[121]</ref> to develop SIPp-DD. This tool is capable of generating SIP flooding attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>XIV. NECESSARY FEATURES FOR DEFENSE MECHANISMS</head><p>DDoS detection mechanisms have to work efficiently and must be capable of detecting and blocking attacks at runtime. The following features are crucial for a DDoS detection mechanism:</p><p>• Scalability: As the number of users (malicious and legitimate) rises, the load on the detection mechanism also rises. If the detection mechanism is unable to scale up to meet the growing demand, it becomes a bottleneck that the attackers can exploit. Any DDoS defense mechanism must be able to detect and block attackers in the least possible time. Apart from that the mechanism should be able to handle a large number of users and not crumble under the load of the attack. • Detection Speed : The detection mechanism must be capable of evaluating a connection swiftly to avoid delay. A long delay in turn leads to a longer response time which degrades the user experience. • Low computation overhead : The detection mechanism works in parallel with the web server and must use as little computational resources as possible. This is in line with the above point where the existence of a firewalls should not in any way degrade the quality of service. A high computation overhead also means that the firewall can be used as a bottleneck by the attackers and thus presents a new avenue of attack. • Detection Accuracy: Detection accuracy can be measured using two factors : detection rate and false negatives. Detection rate denotes how much of the attack connections the firewall recognized. False negative rate denotes the opposite, i. e. how much of the incoming attack traffic did the firewall pass on to the web server. Let N t denote the total number of attack vectors used during testing. Let N r be the total number of connections reported as malicious, and N d be the number of connections correctly reported as malicious.</p><formula xml:id="formula_1">DetectionRate(DR) = N d N t<label>(1)</label></formula><formula xml:id="formula_2">FalseNegativeRate(F N R) = N t -N d N t<label>(2)</label></formula><p>• Must not penalize legitimate users : This is a very important consideration for any organization. A DDoS attack system which labels legitimate users as malicious takes away valuable business from the organization. False Positive Rate is used to calculate the degree to which a detection system classifies legitimate users as malicious.</p><formula xml:id="formula_3">FalsePositiveRate(FPR) = N r -N d N r<label>(3)</label></formula><p>XV. CONCLUSION</p><p>In this work, a detailed description and taxonomy of application layer distributed denial of service attacks has been presented to aid researchers in better understanding and dealing with the dangers that these attacks present. A review of the existing research directions and defense mechanisms has also been presented to bring out the different features used for detecting these attacks, and the different methods of detection. Even though a reasonable amount of work has gone into detecting and defending against application layer denial of service attacks, they still remain a major threat because of the difficulty in adopting the defenses. We hope that this work will open doors for further discussion and research into this area.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Classification of Application Layer DDoS attacks based on Nature of Exploitation</figDesc><graphic coords="5,52.75,163.65,243.50,141.73" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Taxonomy of Application Layer DDoS attacks exploiting System Weaknesses</figDesc><graphic coords="5,52.74,468.07,243.53,141.73" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>&lt; s o a p e n v : E n v e l o p e x m l n s : s o a p e n v = " . . . " x m l n s : s o a p e n c : " . . . " &gt; &lt; s o a p e n v : B o d y &gt; &lt;x&gt; &lt;x&gt; &lt;x&gt; &lt;x&gt; . . . c o n t d .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>GET / i n d e x . php HTTP / 1 . 1 [ CRLF ] Pragma : no-c a c h e [ CRLF ] Cache -C o n t r o l : no-c a c h e [ CRLF ] H o s t : t e s t p h p . vulnweb . com [ CRLF ] C o n n e c t i o n : Keep-a l i v e [ CRLF ] Accept -E n c o d i n g : g z i p , d e f l a t e [ CRLF ] User -Agent : M o z i l l a / 5 . 0 ( Windows NT 6 . 1 ; WOW64) AppleWebKit / 5 3 7 . 36 (KHTML, l i k e Gecko ) Chrome / 2 8 . 0 . 1 5 0 0 . 6 3 S a f a r i / 5 3 7 . 3 6 [ CRLF ] A c c e p t : * / * [CRLF ] [ CRLF]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Taxonomy of Application Layer DDoS attacks exploiting Protocol Features</figDesc><graphic coords="8,56.69,56.08,498.63,255.10" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Taxonomy of Application Layer DDoS attacks exploiting System Features</figDesc><graphic coords="10,56.68,56.08,498.65,255.10" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>•</head><label></label><figDesc>DDoSim: DDoSim is a tool which generates an HTTP or TCP flood with either valid or invalid requests. • R-U-D-Y: R-U-D-Y which stands for 'aRe yoU Dead Yet', is used to generate a low POST attack on a web server. • Tor's Hammer: Tor's Hammer is another attack tool which uses the slow POST attack. • Pyloris: It is a python script used to test for connection exhaustion DoS vulnerabilities in HTTP, FTP, SMTP, IMAP, and Telnet. • Golden Eye: Golden Eye is a stress testing tool for HTTP protocol.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>Low Traffic Volume : Contrary to network layer DDoS attacks, where the network bandwidth becomes the bottleneck, in application layer DDoS attacks, the server resources become the bottleneck. Because of that, the server can be brought down using comparatively fewer requests, and hence the traffic volume is also low. Most of the existing DDoS detection mechanisms rely on the large traffic volume to identify attack. That approach fails in the case of application layer DDoS attack, making most of the existing DDoS detection mechanisms obsolete.• Targeted Strikes : Application layer DDoS attacks are highly targeted. The attack can be carried out on the CPU, database, memory, or socket connections. An attack</figDesc><table /><note><p>• Legitimate requests : Application layer DDoS attacks proceed through legitimate HTTP packets. There is virtually no difference between an attack request and a normal request. The only difference resides in intent, and not in content. This makes most network level packet filters and even some application layer firewalls ineffective in detecting these attacks. •</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>TABLE II COMPARISON</head><label>II</label><figDesc>OF EXISTING SURVEYS OF APPLICATION LAYER DDOS ATTACKS</figDesc><table><row><cell>Research Work</cell><cell>Year</cell><cell>Area Covered</cell><cell>Limitations</cell></row><row><cell>Geneiatakis et al. [23]</cell><cell>2006</cell><cell>SIP protocol vulnerabilities</cell><cell>Discusses security vulnerabilities leading to DDoS</cell></row><row><cell></cell><cell></cell><cell></cell><cell>attacks in the SIP architecture, no discussion on</cell></row><row><cell></cell><cell></cell><cell></cell><cell>defense mechanisms</cell></row><row><cell>Durcekova et al.</cell><cell></cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head></head><label></label><figDesc>Direct and Reflected Attacks the attackers from detection mechanisms. Second, a small, but well chosen DNS request can generate a large response. This means the attacker needs to expend less resources to flood the target server. The increase in response size compared to the request is different for different protocols and is called the amplification factor. Hence, reflected attacks are also called amplification attacks. DNS amplification attacks are the most prominent attacks in this category and present an extremely difficult challenge. Reflected SIP attacks, even though technically possible, have not been reported in literature widely.</figDesc><table><row><cell>04/09/2018</cell><cell>draw.io</cell></row><row><cell></cell><cell>Malicious</cell></row><row><cell></cell><cell>Application Layer</cell></row><row><cell></cell><cell>Requests</cell></row><row><cell></cell><cell>Target Server</cell></row><row><cell>Attack Botnet</cell><cell>Direct Attack</cell></row><row><cell></cell><cell>Target Server</cell></row><row><cell></cell><cell>Spoofed Requests</cell></row><row><cell></cell><cell>Reflected (possibly</cell></row><row><cell></cell><cell>amplified)</cell></row><row><cell>Attack Botnet</cell><cell>Responses</cell></row><row><cell></cell><cell>DNS Server</cell></row><row><cell></cell><cell>Reflected Attack</cell></row><row><cell cols="2">chrome-extension://pebppomjfocnoigkeepgbmcifnnlndla/index.html Fig. 6.</cell><cell>1/1</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_10"><head>TABLE IX COMPARISON</head><label>IX</label><figDesc>OF COMMERCIAL APPLICATION LAYER DDOS DEFENSE TOOLS</figDesc><table><row><cell>Firewall Designer</cell><cell>Slow Attacks</cell><cell>Flooding DNS Protection</cell><cell>XML Attacks</cell></row><row><cell>Imperva</cell><cell></cell><cell></cell><cell></cell></row><row><cell>Corero</cell><cell></cell><cell></cell><cell></cell></row><row><cell>Akamai</cell><cell></cell><cell></cell><cell></cell></row><row><cell>Cloudflare</cell><cell></cell><cell></cell><cell></cell></row><row><cell>Arbor</cell><cell></cell><cell></cell><cell></cell></row><row><cell>Sucuri</cell><cell></cell><cell></cell><cell></cell></row><row><cell>Fortiddos</cell><cell></cell><cell></cell><cell></cell></row><row><cell>F5</cell><cell></cell><cell></cell><cell></cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>This work is supported by the Ministry of Electronics and Information Technology (MeitY), Government of India and is part of the R&amp;D project entitled "Development of Tool for Detection of Application Layer DDoS Attacks on Web Applications" during the period 2017-2019.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Cyber Security on the Offense -A Study of IT Security Experts</title>
		<author>
			<persName><surname>Radware</surname></persName>
		</author>
		<ptr target="ools/cybersecurityontheoffense.pdf" />
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
	<note>Available</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">A</forename><surname>Networks</surname></persName>
		</author>
		<ptr target="https://www.arbornetworks.com/arbor-networks-releases-global-ddos-attack-data-for-1h-2016" />
	</analytic>
	<monogr>
		<title level="j">DDoS Attack Statistics</title>
		<imprint>
			<date type="published" when="2016">2016. 2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Anonymous Attacks Spanish Government Sites</title>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">S</forename><surname>Magazine</surname></persName>
		</author>
		<ptr target="https://www.infosecurity-magazine.com/news/anonymous-attacks-spanish/" />
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Analysis of Vikingdom DDoS Attacks on U.S. Government Sites</title>
		<author>
			<persName><surname>Incapsula</surname></persName>
		</author>
		<ptr target="https://www.incapsula.com/blog/vikingdom-ddos-attacks-us-government.html" />
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Irish Government Websites Taken Down By DDoS Attacks</title>
		<ptr target="http://www.silicon.co.uk/e-regulation/irish-government-websites-ddos-184428" />
	</analytic>
	<monogr>
		<title level="m">Silicon</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Anonymous turns its DDoS cannons on India</title>
		<author>
			<persName><surname>Register</surname></persName>
		</author>
		<ptr target="https://www.theregister.co.uk/2012/05/18/anonymousddosindiasites/" />
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">DDoS Attacks Plague Olympic &amp; Brazilian Government Websites</title>
		<author>
			<persName><surname>Corero</surname></persName>
		</author>
		<ptr target="https://www.corero.com/blog/749-ddos-attacks-plague-olympic--brazilian-government-websites.html" />
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Gits club GitHub code tub with record-breaking 1.35Tbps DDoS drub</title>
		<author>
			<persName><surname>Register</surname></persName>
		</author>
		<ptr target="https://www.theregister.co.uk/2018/03/01/githubddosb" />
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Bitcoin Gold Website Down Following DDoS Attack</title>
		<author>
			<persName><surname>Coindesk</surname></persName>
		</author>
		<ptr target="https://www.coindesk.com/bitcoin-gold-website-following-massive-ddos-attack/" />
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">HSBC suffers Online Banking Cyber Attack</title>
		<author>
			<persName><surname>Guardian</surname></persName>
		</author>
		<ptr target="https://www.theguardian.com/money/2016/jan/29/hsbc-online-banking-cyber-attack" />
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Leading US Banks targeted in DDoS Attacks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Networks</surname></persName>
		</author>
		<ptr target="https://nakedsecurity.sophos.com/2012/09/27/banks-targeted-ddos-attacks/" />
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Dyn Analysis Summary Of Friday October 21 Attack</title>
		<author>
			<persName><surname>Dyn</surname></persName>
		</author>
		<ptr target="https://dyn.com/blog/dyn-analysis-summary-of-friday-october-21-attack/" />
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Hackers leave Finnish residents cold after DDoS attack knocks out heating systems</title>
		<author>
			<persName><forename type="first">I</forename><surname>Times</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">DDoS attacks delay trains, stymie transportation services in Sweden</title>
		<author>
			<persName><surname>Scmagazine</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title/>
		<author>
			<persName><surname>Available</surname></persName>
		</author>
		<ptr target="https://www.scmagazine.com/ddos-attacks-delay-trains-stymie-transportation-services-in-sweden/article/700227/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Massive cyber-attack grinds Liberia&apos;s internet to a halt</title>
		<author>
			<persName><surname>Guardian</surname></persName>
		</author>
		<ptr target="https://www.theguardian.com/technology/2016/nov/03/cyberattack-internet-liberia-ddos-hack-botnet" />
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<author>
			<persName><forename type="first">Bitcoin</forename><surname>Forbes</surname></persName>
		</author>
		<ptr target="https://www.forbes.com/sites/leoking/2014/02/12/bitcoin-hit-by-massive-ddos-attack-as-tensions-rise/" />
		<title level="m">Hit By Massive DDoS Attack As Tensions Rise</title>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Critical infrastructure not ready for DDoS attacks: FOI data report</title>
		<author>
			<persName><surname>Guardian</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title/>
		<author>
			<persName><surname>Available</surname></persName>
		</author>
		<ptr target="https://www.scmagazineuk.com/critical-infrastructure-not-ready-for-ddos-attacks-foi-data-report/article/684838/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title/>
		<author>
			<persName><surname>Incapsula</surname></persName>
		</author>
		<ptr target="https://lp.incapsula.com/rs/804-TEY-921/images/2015-16%20" />
		<imprint>
			<date type="published" when="2015">2015. 2016</date>
		</imprint>
	</monogr>
	<note type="report_type">DDoS Threat Landscape Report</note>
	<note>DDoS%20Threat%20Landscape%20Report.pdf</note>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Denial-of-service attacks rip the internet</title>
		<author>
			<persName><forename type="first">L</forename><surname>Garber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="12" to="17" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Tls renegotiation and denial of service attacks</title>
		<author>
			<persName><forename type="first">I</forename><surname>Ristic</surname></persName>
		</author>
		<ptr target="https://blog.qualys.com/ssllabs/2011/10/31/tls-renegotiation-and-denial-of-service-attacks" />
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Global DDoS Threat Landscape Q1</title>
		<author>
			<persName><surname>Incapsula</surname></persName>
		</author>
		<ptr target="https://www.incapsula.com/ddos-report/ddos-report-q1-2017.html" />
		<imprint>
			<date type="published" when="2017">2017. 2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">Kaspersky</forename><surname>Kaspersky</surname></persName>
		</author>
		<ptr target="https://securelist.com/kaspersky-ddos-intelligence-report-for-q1-2016/74550/" />
	</analytic>
	<monogr>
		<title level="j">DDoS Intelligence Report for</title>
		<imprint>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2016">2016. 2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Survey of security vulnerabilities in session initiation protocol</title>
		<author>
			<persName><forename type="first">D</forename><surname>Geneiatakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Dagiuklas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Kambourakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Lambrinoudakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Gritzalis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">S</forename><surname>Ehlert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Sisalem</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Communications Surveys &amp; Tutorials</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="68" to="81" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Survey of practical security frameworks for defending sip based voip systems against dos/ddos attacks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Armoogum</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mohamudally</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IST-Africa Conference Proceedings</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2014">2014. 2014</date>
			<biblScope unit="page" from="1" to="11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">A comprehensive study of flooding attack consequences and countermeasures in session initiation protocol (sip)</title>
		<author>
			<persName><forename type="first">I</forename><surname>Hussain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Djahel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Naït-Abdesselam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Security and Communication Networks</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">18</biblScope>
			<biblScope unit="page" from="4436" to="4451" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A survey of attacks on web services</title>
		<author>
			<persName><forename type="first">M</forename><surname>Jensen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Gruschka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Herkenhöner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Science-Research and Development</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="185" to="197" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Sophisticated denial of service attacks aimed at application layer</title>
		<author>
			<persName><forename type="first">V</forename><surname>Durcekova</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Schwartz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Shahmehri</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012-05">2012. May 2012</date>
			<biblScope unit="page" from="55" to="60" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">A survey on ddos attack and defense strategies: from traditional schemes to current techniques</title>
		<author>
			<persName><forename type="first">M</forename><surname>Aamir</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>Zaidi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Interdisciplinary Information Sciences</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="173" to="200" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">A survey of defense mechanisms against distributed denial of service (ddos) flooding attacks</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">T</forename><surname>Zargar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Joshi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Tipper</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE communications surveys &amp; tutorials</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="2046" to="2069" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Slow dos attacks: definition and categorisation</title>
		<author>
			<persName><forename type="first">E</forename><surname>Cambiaso</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Papaleo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Chiola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Aiello</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Trust Management in Computing and Communications</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">3-4</biblScope>
			<biblScope unit="page" from="300" to="319" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">A survey on detection and defense of application layer ddos attacks</title>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">S</forename><surname>Vadlamani</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">A survey of defense mechanisms against application layer distributed denial of service attacks</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Software Engineering and Service Science (ICSESS), 2015 6th IEEE International Conference</title>
		<imprint>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="1034" to="1037" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Application-layer denial of service attacks: taxonomy and survey</title>
		<author>
			<persName><forename type="first">G</forename><surname>Mantas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Stakhanova</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Gonzalez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">H</forename><surname>Jazi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>Ghorbani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Information and Computer Security</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">2-4</biblScope>
			<biblScope unit="page" from="216" to="239" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Application layer http-get flood ddos attacks: Research landscape and challenges</title>
		<author>
			<persName><forename type="first">K</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Kumar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computers &amp; Security</title>
		<imprint>
			<biblScope unit="volume">65</biblScope>
			<biblScope unit="page" from="344" to="372" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title level="m" type="main">Taxonomy of slow dos attacks to web applications</title>
		<author>
			<persName><forename type="first">E</forename><surname>Cambiaso</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Papaleo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Aiello</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="195" to="204" />
		</imprint>
	</monogr>
	<note>Recent Trends in Computer Networks and Distributed Systems Security</note>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">Apache HTTPD Security ADVISORY</title>
		<author>
			<persName><surname>Apache</surname></persName>
		</author>
		<ptr target="https://httpd.apache.org/security/CVE-2011-3192.txt" />
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">Effective Denial of Service Attacks against Web Application Platforms</title>
		<author>
			<persName><surname>Ccc</surname></persName>
		</author>
		<ptr target="https://events.ccc.de/congress/2011/Fahrplan/events/4680.en.html" />
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Denial of service via algorithmic complexity attacks</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">A</forename><surname>Crosby</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Wallach</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="29" to="44" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">A selective defense for application layer ddos attacks</title>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">G</forename><surname>Dantas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Nigam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">E</forename><surname>Fonseca</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Intelligence and Security Informatics Conference (JISIC)</title>
		<imprint>
			<date type="published" when="2014">2014. 2014</date>
			<biblScope unit="page" from="75" to="82" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<author>
			<persName><surname>Ddos-Guard</surname></persName>
		</author>
		<ptr target="https://ddos-guard.net/en/terminology/single-request-http-flood-multiple-verb-single-request" />
		<title level="m">Single Request HTTP Flood (Multiple VERB Single Request)</title>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Http/2 cannon: Experimental analysis on http/1 and http/2 request flood ddos attacks</title>
		<author>
			<persName><forename type="first">D</forename><surname>Beckett</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sezer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 Seventh International Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="108" to="113" />
		</imprint>
	</monogr>
	<note>in Emerging Security Technologies (EST</note>
</biblStruct>

<biblStruct xml:id="b43">
	<monogr>
		<title level="m" type="main">Http/2: In-depth analysis of the top four flaws of the next generation web protocol</title>
		<author>
			<persName><surname>Imperva</surname></persName>
		</author>
		<ptr target="https://www.imperva.com/docs/ImpervaHIIHTTP2.pdf" />
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
		<title level="m" type="main">XML External Entity (XXE) Processing</title>
		<author>
			<persName><surname>Owasp</surname></persName>
		</author>
		<ptr target="https://www.owasp.org/index.php/XMLExternalEntity" />
		<imprint>
			<date type="published" when="2017">2017</date>
			<publisher>XXE) P rocessing</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Xml schema, dtd, and entity attacks: A compendium of known techniques</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">D</forename><surname>Morgan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><forename type="middle">A</forename><surname>Ibrahim</surname></persName>
		</author>
		<ptr target="http://www.vsecurity.com/download/papers/XMLDTDEntityAttacks.pdf" />
	</analytic>
	<monogr>
		<title level="m">Online</title>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Http</forename><surname>Cloudflare</surname></persName>
		</author>
		<author>
			<persName><surname>Flood Attack</surname></persName>
		</author>
		<ptr target="https://www.cloudflare.com/learning/ddos/http-flood-ddos-attack/" />
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<monogr>
		<title/>
		<author>
			<persName><surname>Ws-Attacks</surname></persName>
		</author>
		<author>
			<persName><surname>Flooding</surname></persName>
		</author>
		<ptr target="http://www.ws-attacks.org/XMLFlooding" />
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Dns</forename><surname>Incapsula</surname></persName>
		</author>
		<author>
			<persName><surname>Flooding</surname></persName>
		</author>
		<ptr target="https://www.incapsula.com/ddos/attack-glossary/dns-flood.html" />
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Ddos-shield: Ddos-resilient scheduling to counter application layer attacks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ranjan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Swaminathan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Uysal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Nucci</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Knightly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM on Networking (TON)</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="26" to="39" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Recognizing objects in adversarial clutter: Breaking a visual captcha</title>
		<author>
			<persName><forename type="first">G</forename><surname>Mori</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Malik</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings. 2003 IEEE Computer Society Conference on</title>
		<meeting>2003 IEEE Computer Society Conference on</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2003">2003. 2003</date>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="I" to="I" />
		</imprint>
	</monogr>
	<note>Computer Vision and Pattern Recognition</note>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">Breaking visual captchas with naive pattern recognition algorithms</title>
		<author>
			<persName><forename type="first">J</forename><surname>Yan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">S El</forename><surname>Ahmad</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Security Applications Conference, 2007. ACSAC 2007. Twenty-Third Annual</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="279" to="291" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">Iâ Źm not a human: Breaking the google recaptcha</title>
		<author>
			<persName><forename type="first">S</forename><surname>Sivakorn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Polakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">D</forename><surname>Keromytis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Black Hat</title>
		<imprint>
			<biblScope unit="page" from="1" to="12" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Sentry: A novel approach for mitigating application layer ddos threats</title>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Taha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Trapero</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Luna</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Suri</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Trustcom/BigDataSE/Iâ Ȃ Ń SPA</title>
		<imprint>
			<date type="published" when="2016">2016. 2016</date>
			<biblScope unit="page" from="465" to="472" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<analytic>
		<title level="a" type="main">A novel framework to detect and block ddos attack at the application layer</title>
		<author>
			<persName><forename type="first">S</forename><surname>Sivabalan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Radcliffe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">TENCON Spring Conference</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2013">2013. 2013</date>
			<biblScope unit="page" from="578" to="582" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">Defending web services against denial of service attacks using client puzzles</title>
		<author>
			<persName><forename type="first">S</forename><surname>Suriadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Stebila</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE</title>
		<imprint>
			<biblScope unit="page" from="25" to="32" />
			<date type="published" when="2011">2011. 2011</date>
			<publisher>IEEE</publisher>
		</imprint>
	</monogr>
	<note>in Web Services (ICWS)</note>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">A comber approach to protect cloud computing against xml ddos and http ddos attack</title>
		<author>
			<persName><forename type="first">T</forename><surname>Karnwal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Sivakumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Aghila</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Electrical, Electronics and Computer Science (SCEECS), 2012 IEEE Students&apos; Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="1" to="5" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">Amnesia: analysis and monitoring for neutralizing sql-injection attacks</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">G</forename><surname>Halfond</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Orso</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 20th IEEE/ACM international Conference on Automated software engineering</title>
		<meeting>the 20th IEEE/ACM international Conference on Automated software engineering</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="174" to="183" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">Using parse tree validation to prevent sql injection attacks</title>
		<author>
			<persName><forename type="first">G</forename><surname>Buehrer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">W</forename><surname>Weide</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">A</forename><surname>Sivilotti</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 5th international workshop on Software engineering and middleware</title>
		<meeting>the 5th international workshop on Software engineering and middleware</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="106" to="113" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<analytic>
		<title level="a" type="main">Sqlrand: Preventing sql injection attacks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Boyd</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Keromytis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Applied Cryptography and Network Security</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="292" to="302" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<analytic>
		<title level="a" type="main">Sql injection attack mechanisms and prevention techniques</title>
		<author>
			<persName><forename type="first">R</forename><surname>Chandrashekhar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mardithaya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Thilagam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Saha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Advanced Computing, Networking and Security</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="524" to="533" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title level="a" type="main">A classification of sql-injection attacks and countermeasures</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">G</forename><surname>Halfond</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Viegas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Orso</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Symposium on Secure Software Engineering</title>
		<meeting>the IEEE International Symposium on Secure Software Engineering</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2006">2006</date>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="13" to="15" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<analytic>
		<title level="a" type="main">Securing native xml database-driven web applications from xquery injection vulnerabilities</title>
		<author>
			<persName><forename type="first">N</forename><surname>Palsetia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Deepa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">A</forename><surname>Khan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">S</forename><surname>Thilagam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">R</forename><surname>Pais</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systems and Software</title>
		<imprint>
			<biblScope unit="volume">122</biblScope>
			<biblScope unit="page" from="93" to="109" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<analytic>
		<title level="a" type="main">Black-box detection of xquery injection and parameter tampering vulnerabilities in web applications</title>
		<author>
			<persName><forename type="first">G</forename><surname>Deepa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">S</forename><surname>Thilagam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">A</forename><surname>Khan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Praseed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">R</forename><surname>Pais</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Palsetia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Information Security</title>
		<imprint>
			<biblScope unit="page" from="1" to="16" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<analytic>
		<title level="a" type="main">Towards mitigation of low and slow application ddos attacks</title>
		<author>
			<persName><forename type="first">M</forename><surname>Shtern</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sandel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Litoiu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Bachalo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Theodorou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE</title>
		<imprint>
			<biblScope unit="page" from="604" to="609" />
			<date type="published" when="2014">2014. 2014</date>
			<publisher>IEEE</publisher>
		</imprint>
	</monogr>
	<note>in Cloud Engineering (IC2E)</note>
</biblStruct>

<biblStruct xml:id="b65">
	<analytic>
		<title level="a" type="main">Detection of dos attacks through fourier transform and mutual information</title>
		<author>
			<persName><forename type="first">M</forename><surname>Mongelli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Aiello</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Cambiaso</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Papaleo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2015 IEEE International Conference on Communications (ICC)</title>
		<imprint>
			<date type="published" when="2015-06">June 2015</date>
			<biblScope unit="page" from="7204" to="7209" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b66">
	<analytic>
		<title level="a" type="main">How secure are web servers? an empirical study of slow http dos attacks and detection</title>
		<author>
			<persName><forename type="first">N</forename><surname>Tripathi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Hubballi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Singh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2016 11th International Conference on Availability, Reliability and Security (ARES)</title>
		<imprint>
			<date type="published" when="2016-08">Aug 2016</date>
			<biblScope unit="page" from="454" to="463" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<analytic>
		<title level="a" type="main">Detection of dos/ddos attack against http servers using naive bayesian</title>
		<author>
			<persName><forename type="first">V</forename><surname>Katkar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zinjade</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Dalvi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Bafna</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Mahajan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2015 International Conference on Computing Communication Control and Automation</title>
		<imprint>
			<date type="published" when="2015-02">Feb 2015</date>
			<biblScope unit="page" from="280" to="285" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b68">
	<analytic>
		<title level="a" type="main">Early dos/ddos detection method using short-term statistics</title>
		<author>
			<persName><forename type="first">S</forename><surname>Oshima</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Nakashima</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Sueyoshi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Complex, Intelligent and Software Intensive Systems (CISIS), 2010 International Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="168" to="173" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<analytic>
		<title level="a" type="main">Evaluating security controls against http-based ddos attacks</title>
		<author>
			<persName><forename type="first">D</forename><surname>Moustis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Kotzanikolaou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IISA 2013</title>
		<imprint>
			<date type="published" when="2013-07">July 2013</date>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b70">
	<analytic>
		<title level="a" type="main">Analysis of slow read dos attack</title>
		<author>
			<persName><forename type="first">J</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Iwai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Tanaka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Kurokawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Information Theory and its Applications (ISITA), 2014 International Symposium on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="60" to="64" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b71">
	<analytic>
		<title level="a" type="main">Detecting denial of service by modelling web-server behaviour</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">C</forename><surname>Giralte</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Conde</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">M</forename><surname>De Diego</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Cabello</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computers &amp; Electrical Engineering</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="2252" to="2262" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b72">
	<analytic>
		<title level="a" type="main">Ddos defense system for web services in a cloud environment</title>
		<author>
			<persName><forename type="first">T</forename><surname>Vissers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">S</forename><surname>Somasundaram</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Pieters</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Govindarajan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Hellinckx</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Future Generation Computer Systems</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="page" from="37" to="45" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b73">
	<analytic>
		<title level="a" type="main">Cloud security defence to protect cloud computing against http-dos and xml-dos attacks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Chonka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Xiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bonti</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Network and Computer Applications</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="1097" to="1107" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b74">
	<monogr>
		<title level="m" type="main">Preventing service oriented denial of service (presodos): A proposed approach</title>
		<author>
			<persName><forename type="first">S</forename><surname>Padmanabhuni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">S</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Chatterjee</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006">2006</date>
			<publisher>IEEE</publisher>
			<biblScope unit="page" from="577" to="584" />
		</imprint>
	</monogr>
	<note>in Web Services, 2006. ICWS&apos;06</note>
</biblStruct>

<biblStruct xml:id="b75">
	<analytic>
		<title level="a" type="main">Intrusion tolerant approach for denial of service attacks to web services</title>
		<author>
			<persName><forename type="first">M</forename><surname>Ficco</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Rak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Data Compression, Communications and Processing</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="285" to="292" />
		</imprint>
	</monogr>
	<note>2011 First International Conference on</note>
</biblStruct>

<biblStruct xml:id="b76">
	<analytic>
		<title level="a" type="main">Cald: Surviving various application-layer ddos attacks that mimic flash crowd</title>
		<author>
			<persName><forename type="first">S</forename><surname>Wen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Jia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">network and system security (nss), 2010 4th international conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="247" to="254" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b77">
	<analytic>
		<title level="a" type="main">Real-time detection of applicationlayer ddos attack using time series analysis</title>
		<author>
			<persName><forename type="first">T</forename><surname>Ni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Control Science and Engineering</title>
		<imprint>
			<biblScope unit="volume">2013</biblScope>
			<biblScope unit="page">4</biblScope>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b78">
	<analytic>
		<title level="a" type="main">Detection of application layer ddos attack by modeling user behavior using logistic regression</title>
		<author>
			<persName><forename type="first">S</forename><surname>Yadav</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Selvakumar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Reliability, Infocom Technologies and Optimization (ICRITO)(Trends and Future Directions), 2015 4th International Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b79">
	<analytic>
		<title level="a" type="main">Detection of application layer ddos attack by feature learning using stacked autoencoder</title>
		<author>
			<persName><forename type="first">S</forename><surname>Yadav</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Subramanian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computational Techniques in Information and Communication Technologies (ICCTICT), 2016 International Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="361" to="366" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b80">
	<analytic>
		<title level="a" type="main">Entropy-based application layer ddos attack detection using artificial neural networks</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">Johnson</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Thongam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>De</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Entropy</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page">350</biblScope>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b81">
	<analytic>
		<title level="a" type="main">Mlp-ga based algorithm to detect application layer ddos attack</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">J</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>De</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Information Security and Applications</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="page" from="145" to="153" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b82">
	<analytic>
		<title level="a" type="main">Detection of application layer ddos attacks with clustering and bayes factors</title>
		<author>
			<persName><forename type="first">P</forename><surname>Chwalinski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Belavkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Cheng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Systems, Man, and Cybernetics (SMC)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2013">2013. 2013</date>
			<biblScope unit="page" from="156" to="161" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b83">
	<analytic>
		<title level="a" type="main">Detection of application layer ddos attack with clustering and likelihood analysis</title>
	</analytic>
	<monogr>
		<title level="m">Globecom Workshops (GC Wkshps)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2013">2013. 2013</date>
			<biblScope unit="page" from="217" to="222" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b84">
	<analytic>
		<title level="a" type="main">Enhancement of preventing application layer based on ddos attacks by using hidden semi-markov model</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">K</forename><surname>Oo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">Z</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Tun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">Z</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Portnov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Genetic and Evolutionary Computing</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="125" to="135" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b85">
	<analytic>
		<title level="a" type="main">Sequence-order-independent network profiling for detecting application layer ddos attacks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">EURASIP Journal on Wireless Communications and Networking</title>
		<imprint>
			<biblScope unit="volume">2011</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page">50</biblScope>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b86">
	<analytic>
		<title level="a" type="main">Detection of application layer ddos attacks using information theory based metrics</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">R</forename><surname>Devi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Yogesh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CS &amp; IT-CSCP</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="213" to="223" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b87">
	<analytic>
		<title level="a" type="main">Detection and defense of application-layer ddos attacks in backbone web traffic</title>
		<author>
			<persName><forename type="first">W</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Jia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Wen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Xiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Future Generation Computer Systems</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="page" from="36" to="46" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b88">
	<analytic>
		<title level="a" type="main">A classification detection algorithm based on joint entropy vector against application-layer ddos attack</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Yu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Security and Communication Networks</title>
		<imprint>
			<biblScope unit="volume">2018</biblScope>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b89">
	<analytic>
		<title level="a" type="main">Application layer ddos detection using clustering analysis</title>
		<author>
			<persName><forename type="first">C</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>She</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Science and Network Technology (ICCSNT), 2012 2nd International Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="1038" to="1041" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b90">
	<analytic>
		<title level="a" type="main">An effective approach to counter application layer ddos attacks</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">R</forename><surname>Devi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Yogesh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computing Communication &amp; Networking Technologies (ICCCNT), 2012 Third International Conference</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="1" to="4" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b91">
	<analytic>
		<title level="a" type="main">Connectionscore: a statistical technique to resist application-layer ddos attacks</title>
		<author>
			<persName><forename type="first">H</forename><surname>Beitollahi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Deconinck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Ambient Intelligence and Humanized Computing</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="425" to="442" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b92">
	<analytic>
		<title level="a" type="main">Web server protection against application layer ddos attacks using machine learning and traffic authentication</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Ndibwile</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Govardhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Okada</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Kadobayashi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Software and Applications Conference (COMPSAC)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2015">2015. 2015</date>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="261" to="267" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b93">
	<analytic>
		<title level="a" type="main">Modeling human behavior for defense against flash-crowd attacks</title>
		<author>
			<persName><forename type="first">G</forename><surname>Oikonomou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Mirkovic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications</title>
		<imprint>
			<biblScope unit="page" from="1" to="6" />
			<date type="published" when="2009">2009. 2009</date>
			<publisher>IEEE</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b94">
	<analytic>
		<title level="a" type="main">New sensing technique for detecting application layer ddos attacks targeting back-end database resources</title>
		<author>
			<persName><forename type="first">D</forename><surname>Beckett</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sezer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Mccanny</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 IEEE International Conference on Communications (ICC)</title>
		<imprint>
			<date type="published" when="2017-05">May 2017</date>
			<biblScope unit="page" from="1" to="7" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b95">
	<analytic>
		<title level="a" type="main">Detection on application layer ddos using random walk model</title>
		<author>
			<persName><forename type="first">C</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Yu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Communications (ICC)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2014">2014. 2014</date>
			<biblScope unit="page" from="707" to="712" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b96">
	<analytic>
		<title level="a" type="main">A large-scale hidden semi-markov model for anomaly detection on user browsing behaviors</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S.-Z</forename><surname>Yu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Transactions on Networking (TON)</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="54" to="65" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b97">
	<analytic>
		<title level="a" type="main">Monitoring the application-layer ddos attacks for popular websites</title>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Transactions on Networking (TON)</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="15" to="25" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b98">
	<analytic>
		<title level="a" type="main">Web ddos detection schemes based on measuring user&apos;s access behavior with large deviation</title>
		<author>
			<persName><forename type="first">J</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Long</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Global Telecommunications Conference (GLOBECOM 2011)</title>
		<imprint>
			<date type="published" when="2011">2011. 2011</date>
			<biblScope unit="page" from="1" to="5" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b99">
	<analytic>
		<title level="a" type="main">Mining web user behaviors to detect application layer ddos attacks</title>
		<author>
			<persName><forename type="first">C</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">JSW</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="985" to="990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b100">
	<analytic>
		<title level="a" type="main">Strategy-aware mitigation using markov games for dynamic application-layer attacks</title>
		<author>
			<persName><forename type="first">M</forename><surname>Emami-Taba</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Amoui</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Tahvildari</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">High Assurance Systems Engineering (HASE), 2015 IEEE 16th International Symposium on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="134" to="141" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b101">
	<analytic>
		<title level="a" type="main">Ddos attack detection system based on analysis of users&apos; behaviors for application layer</title>
		<author>
			<persName><forename type="first">B</forename><surname>Meng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Andi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Jian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Fucai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computational Science and Engineering (CSE) and Embedded and Ubiquitous Computing (EUC), 2017 IEEE International Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2017">2017</date>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="596" to="599" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b102">
	<monogr>
		<title level="m" type="main">Efficient and low-cost hardware defense against dns amplification attacks</title>
		<author>
			<persName><forename type="first">C</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Shi</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008">2008. 2008</date>
			<biblScope unit="page" from="1" to="5" />
		</imprint>
	</monogr>
	<note>in Global Telecommunications Conference, 2008. IEEE GLOBECOM</note>
</biblStruct>

<biblStruct xml:id="b103">
	<analytic>
		<title level="a" type="main">A chaotic measure for cognitive machine classification of distributed denial of service attacks</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">S</forename><surname>Khan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Ferens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Kinsner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Cognitive Informatics &amp; Cognitive Computing (ICCI* CC)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2014">2014. 2014</date>
			<biblScope unit="page" from="100" to="108" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b104">
	<analytic>
		<title level="a" type="main">Detecting dns amplification attacks</title>
		<author>
			<persName><forename type="first">G</forename><surname>Kambourakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Moschos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Geneiatakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Gritzalis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Workshop on Critical Information Infrastructures Security</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="185" to="196" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b105">
	<monogr>
		<title level="m" type="main">Enhancing dns resilience against denial of service attacks</title>
		<author>
			<persName><forename type="first">V</forename><surname>Pappas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Massey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007">2007</date>
			<publisher>IEEE</publisher>
			<biblScope unit="page" from="450" to="459" />
		</imprint>
	</monogr>
	<note>in Dependable Systems and Networks, 2007. DSN&apos;07. 37th Annual IEEE</note>
</biblStruct>

<biblStruct xml:id="b106">
	<monogr>
		<title level="m" type="main">A simple approach to dns dos mitigation</title>
		<author>
			<persName><forename type="first">H</forename><surname>Ballani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Francis</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b107">
	<analytic>
		<title level="a" type="main">T-dns: Connection-oriented dns to improve privacy and security</title>
		<author>
			<persName><forename type="first">L</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Heidemann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wessels</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Mankin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Somaiya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM Computer Communication Review</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="379" to="380" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b108">
	<analytic>
		<title level="a" type="main">Spoof detection for preventing dos attacks against dns servers</title>
		<author>
			<persName><forename type="first">F</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T.-C</forename><surname>Chiueh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Distributed Computing Systems, 2006. ICDCS 2006. 26th IEEE International Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="37" to="37" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b109">
	<monogr>
		<title level="m" type="main">Detection of denial of service attacks against domain name system using neural networks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Rastegari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">I</forename><surname>Saripan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F A</forename><surname>Rasid</surname></persName>
		</author>
		<idno type="arXiv">arXiv:0912.1815</idno>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b110">
	<analytic>
		<title level="a" type="main">Detecting dos attacks on sip systems</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">Y</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VoIP Management and Security, 2006. 1st IEEE Workshop</title>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="53" to="58" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b111">
	<analytic>
		<title level="a" type="main">Utilizing bloom filters for detecting flooding attacks against sip based services</title>
		<author>
			<persName><forename type="first">D</forename><surname>Geneiatakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Vrakas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Lambrinoudakis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">computers &amp; security</title>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="578" to="591" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b112">
	<analytic>
		<title level="a" type="main">Fast detection of denial-of-service attacks on ip telephony</title>
		<author>
			<persName><forename type="first">H</forename><surname>Sengar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wijesekera</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Jajodia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Quality of Service</title>
		<imprint>
			<biblScope unit="page" from="199" to="208" />
			<date type="published" when="2006">2006. 2006. 2006</date>
			<publisher>IEEE</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b113">
	<analytic>
		<title level="a" type="main">Quick detection of stealthy sip flooding attacks in voip networks</title>
		<author>
			<persName><forename type="first">J</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Cheng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Communications (ICC)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2011">2011. 2011</date>
			<biblScope unit="page" from="1" to="5" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b114">
	<analytic>
		<title level="a" type="main">New algorithm for sip flooding attack detection</title>
		<author>
			<persName><forename type="first">D</forename><surname>Allawi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>Rohiem</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>El-Moghazy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ghalwash</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Computer Science and Telecommunications</title>
		<imprint>
			<biblScope unit="page">3</biblScope>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b115">
	<analytic>
		<title level="a" type="main">Sip flooding attack detection with a multi-dimensional sketch design</title>
		<author>
			<persName><forename type="first">J</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Hao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Dependable and Secure Computing</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="582" to="595" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b116">
	<analytic>
		<title level="a" type="main">Detecting anomalous behavior in voip systems: A discrete event system modeling</title>
		<author>
			<persName><forename type="first">D</forename><surname>Golait</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Hubballi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Information Forensics and Security</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="730" to="745" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b117">
	<analytic>
		<title level="a" type="main">A novel approach for evaluating and detecting low rate sip flooding attack</title>
		<author>
			<persName><forename type="first">A</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Tilagam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Computer Applications</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="31" to="36" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b118">
	<analytic>
		<title level="a" type="main">An intelligent cyber security system against ddos attacks in sip networks</title>
		<author>
			<persName><forename type="first">M</forename><surname>Semerci</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">T</forename><surname>Cemgil</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Sankur</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Networks</title>
		<imprint>
			<biblScope unit="volume">136</biblScope>
			<biblScope unit="page" from="137" to="154" />
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b119">
	<analytic>
		<title level="a" type="main">Strategy based proxy to secure user agent from flooding attack in sip</title>
		<author>
			<persName><forename type="first">I</forename><surname>Hussain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Naït-Abdesselam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Wireless Communications and Mobile Computing Conference (IWCMC), 2011 7th International. IEEE</title>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="430" to="435" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b120">
	<analytic>
		<title level="a" type="main">Toward developing a systematic approach to generate benchmark datasets for intrusion detection</title>
		<author>
			<persName><forename type="first">A</forename><surname>Shiravi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Shiravi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Tavallaee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>Ghorbani</surname></persName>
		</author>
		<ptr target="http://www.sciencedirect.com/science/article/pii/S0167404811001672" />
	</analytic>
	<monogr>
		<title level="j">Computers and Security</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="357" to="374" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b121">
	<analytic>
		<title level="a" type="main">Detecting http-based application layer dos attacks on web servers in the presence of sampling</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">H</forename><surname>Jazi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Gonzalez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Stakhanova</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>Ghorbani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Networks</title>
		<imprint>
			<biblScope unit="volume">121</biblScope>
			<biblScope unit="page" from="25" to="36" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b122">
	<analytic>
		<title level="a" type="main">Amit Praseed received his B. Tech degree in Computer Science and Engineering in 2014 from College of Engineering Trivandrum, Kerala, India. He received his M. Tech degree in Computer Science and Engineering -Information Security in 2016 from National Institute of Technology (NIT) Karnataka, Surathkal, India and is currently working towards the Ph. D. degree in Computer Science at NITK. His research interests include Web Security and Information Security. P. Santhi Thilagam received her B. E. degree in</title>
		<author>
			<persName><forename type="first">J</forename><surname>Stanek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Kencl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Science and Engineering from Thiagarajar College of Engineering, Madurai, M.E. degree in Computer Science and Engineering from Anna University</title>
		<meeting><address><addrLine>Chennai, India; Karnataka, Surathkal, India</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008">2011. 2011. 2008</date>
			<biblScope unit="page" from="1" to="7" />
		</imprint>
		<respStmt>
			<orgName>Computer Science and Engineering from National Institute of Technology (NIT</orgName>
		</respStmt>
	</monogr>
	<note>Since October 1996, she has been with the Department of Computer Science and Engineering, NITK Surathkal, where she was an Assistant Professor, and became an Associate Professor in 2009. Since 2018, she is working as a Professor at NITK Surathkal. Her current research interests include Cloud Computing, Distributed Data Mining and Web Security. She was the recipient of the BITES best Ph.D. Thesis award for the year 2009 in Computer Science and Engineering Category</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
