<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Tyrolean Termination Tool</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Nao</forename><surname>Hirokawa</surname></persName>
							<email>nao.hirokawa@uibk.ac.at</email>
							<affiliation key="aff0">
								<orgName type="department">Institute of Computer Science</orgName>
								<orgName type="institution">University of Innsbruck</orgName>
								<address>
									<postCode>6020</postCode>
									<settlement>Innsbruck</settlement>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Aart</forename><surname>Middeldorp</surname></persName>
							<email>aart.middeldorp@uibk.ac.at</email>
							<affiliation key="aff0">
								<orgName type="department">Institute of Computer Science</orgName>
								<orgName type="institution">University of Innsbruck</orgName>
								<address>
									<postCode>6020</postCode>
									<settlement>Innsbruck</settlement>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Tyrolean Termination Tool</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">51A64E2906E9521ADD2196C18779DC60</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T05:13+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>This paper describes the Tyrolean Termination Tool (T T T in the sequel), the successor of the Tsukuba Termination Tool <ref type="bibr" target="#b11">[12]</ref>. We describe the differences between the two and explain the new features, some of which are not (yet) available in any other termination tool, in some detail. T T T is a tool for automatically proving termination of rewrite systems based on the dependency pair method of Arts and Giesl <ref type="bibr" target="#b2">[3]</ref>. It produces high-quality output and has a convenient web interface. The tool is available at http://cl2-informatik.uibk.ac.at/ttt T T T incorporates several new improvements to the dependency pair method. In addition, it is now possible to run the tool in fully automatic mode on a collection of rewrite systems. Moreover, besides ordinary (first-order) rewrite systems, the tool accepts simply-typed applicative rewrite systems which are transformed into ordinary rewrite systems by the recent method of Aoto and Yamada <ref type="bibr" target="#b1">[2]</ref>.</p><p>In the next section we describe the differences between the semi automatic mode and the Tsukuba Termination Tool. Section 3 describes the fully automatic mode. In Section 4 we show a termination proof of a simply-typed applicative system obtained by T T T. In Section 5 we describe how to input a collection of rewrite systems and how to interpret the resulting output. Some implementation details are given in Section 6. The final section contains a short comparison with other tools for automatically proving termination.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Semi Automatic Mode</head><p>Figure <ref type="figure" target="#fig_0">1</ref> shows the web interface.</p><p>This menu corresponds to the options that were available in the Tsukuba Termination Tool. A first difference is that we now support the dependency pair method for innermost termination <ref type="bibr" target="#b2">[3]</ref>. A second difference is that dependency A preliminary description of the Tyrolean Termination Tool appeared in the proceedings of the 7th International Workshop on Termination, Technical Report AIB-2004-07, RWTH Aachen, pages 249-268, 2004. pairs that are covered by the subterm criterion of Dershowitz <ref type="bibr" target="#b6">[7]</ref> are excluded. The other differences are described in the following paragraphs.</p><p>First of all, when approximating the (innermost) dependency graph the original estimations of <ref type="bibr" target="#b2">[3]</ref> are no longer available since the approximations described in <ref type="bibr" target="#b14">[15]</ref> generally produce smaller graphs while the computational overhead is negligible.</p><p>Secondly, the user can no longer select the cycle analysis method (all cycles separately, all strongly connected components separately, or the recursive SCC algorithm of <ref type="bibr" target="#b14">[15]</ref>). Extensive experiments reveal that the latter method outperforms the other two, so this is now the only supported method in T T T.</p><p>Finally, the default method to search for appropriate argument filterings has been changed from enumeration to the divide and conquer algorithm of <ref type="bibr" target="#b14">[15]</ref>. By using dynamic programming techniques, the divide and conquer method has been improved (cf. <ref type="bibr" target="#b14">[15]</ref>) to the extent that for most examples it is more efficient than the straightforward enumeration method. Still, there are TRSs where enumeration is more effective, so the user has the option to change the search strategy (by clicking the enumerate box).</p><p>New features include (1) a very useful criterion based on the subterm relation to discard SCCs of the dependency graph without considering any rewrite rules and (2) a very powerful modularity criterion for termination inspired by the usable rules of <ref type="bibr" target="#b2">[3]</ref> for innermost termination. These features are described in detail in <ref type="bibr" target="#b12">[13]</ref>. The first one is selected by clicking the subterm criterion box and the second by clicking the usable rules box. In addition, linear polynomial interpretations with coefficients from {-1, 0, 1} can be used as base order. In <ref type="bibr" target="#b13">[14]</ref> it is explained how polynomial interpretations with negative coefficients, like x -1 for a unary function symbol or xy for a binary function symbol, can be effectively used in connection with the dependency pair method.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Fully Automatic Mode</head><p>In this mode T T T uses a simple strategy to (recursively) solve the ordering constraints for each SCC of the approximated dependency graph. The strategy is based on the new features described in the previous section and uses LPO (both with strict and quasi-precedence) with some argument filterings <ref type="bibr" target="#b14">[15]</ref> and linear polynomial interpretations with coefficients from {-1, 0, 1} as base orders.</p><p>After computing the SCCs of the approximated (innermost) dependency graph, the strategy subjects each SCC to the following algorithm:</p><p>1. First we check whether the new subterm criterion is applicable. 2. If the subterm criterion was unsuccessful, we compute the usable rules.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">The resulting (usable rules and dependency pairs) constraints are subjected</head><p>to the natural (see <ref type="bibr" target="#b13">[14]</ref>) polynomial interpretation with coefficients from {0, 1}. 4. If the constraints could not be solved in step 3, we employ the divide and conquer algorithm for computing suitable argument filterings with respect to the some heuristic <ref type="bibr" target="#b14">[15]</ref> and LPO with strict precedence. 5. If the previous step was unsuccessful, we repeat step 3 with arbitrary polynomial interpretations with coefficients from {0, 1}. 6. Next we repeat step 4 with the variant of LPO based on quasi-precedences and a small increase in the search space for argument filterings (see below). 7. If the constraints could still not be solved, we try linear polynomial interpretations with coefficients from {-1, 0, 1}.</p><p>If only part of an SCC could be handled, we subject the resulting new SCCs recursively to the same algorithm.</p><p>If the current set of constraints can be solved in step 3 or 4, then they can also be solved in step 5 or 6, respectively, but the reverse is not true. The sole reason for adopting LPO and polynomial interpretations in alternating layers is efficiency; the search space in steps 3 and 4 is significantly smaller than in steps 5 and 6. The reason for putting the subterm criterion first is that with this criterion many SCCs can be eliminated very quickly, cf. the third paragraph of Section 6. The extension of the search space for argument filterings mentioned in step 6 is obtained by also considering the full reverse argument filtering [n, . . . , 1] for every n-ary function symbol. The advantage of this extension is that there is no need for a specialized version of LPO with right-to-left status.</p><p>The effectiveness of the automatic strategy can be seen from the data presented in Figure <ref type="figure" target="#fig_1">2</ref>, which were obtained by running T T T in fully automatic mode on the 89 terminating TRSs (66 in Section 3 and 23 in Section 4) of <ref type="bibr" target="#b3">[4]</ref>. An explanation of the data is given in Section 5.</p><p>Our automatic strategy differs from the "Meta-Combination Algorithm" described in <ref type="bibr" target="#b10">[11]</ref>; we avoid transforming SCC constraints using techniques like narrowing and instantiation because they tend to complicate the produced termination proofs. Instead, we rely on techniques (subterm criterion and polynomial interpretations with negative coefficients) that lead to termination proofs that are (relatively) easy to understand.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Simply-Typed Applicative Rewrite Systems</head><p>Besides ordinary first-order TRSs, T T T accepts simply-typed applicative rewrite systems (STARSs) <ref type="bibr" target="#b0">[1]</ref>. Applicative terms are built from variables, constants, and a single binary operator •, called application. Constants and variables are equipped with a simple type such that the rewrite rules typecheck. A typical example is provided by the following rules for the map function</p><formula xml:id="formula_0">(map • f ) • nil → nil (map • f ) • ((cons • x) • y) → (cons • (f • x)) • ((map • f ) • y)</formula><p>with the type declaration nil : α, cons :</p><formula xml:id="formula_1">β → α → α, map : (β → β) → α → α, f : β → β, x : β,</formula><p>and y : α. Here α is the list type and β the type of elements of lists. STARSs are useful to model higher-order functions in a first-order setting. As usual, the application operator • is suppressed in the notation and parentheses are removed under the "association to the left" rule. The above rules then become</p><formula xml:id="formula_2">map f nil → nil map f (cons x y) → cons (f x) (map f y)</formula><p>This corresponds to the syntax of STARSs in T T T. The types of constants must be declared by the keyword TYPES. The types of variables is automatically inferred when typechecking the rules, which follow the RULES keyword. So the above STARS would be inputted to T T T as In order to prove termination of STARSs, T T T uses the two-phase transformation developed by Aoto and Yamada <ref type="bibr" target="#b1">[2]</ref>. In the first phase all head variables (e.g. f in f x) are removed by the head variable instantiation technique. The soundness of this phase relies on the ground term existence condition, which basically states that all simple types are inhabited by at least one ground term. Users need not be concerned about this technicality as T T T automatically adds fresh constants of the appropriate types to the signature so that the ground term existence condition is satisfied. (Moreover, the termination status of the original STARS is not affected by adding fresh constants.) After the first phase an ordinary TRS is obtained in which the application symbol is the only non-constant symbol. Such TRSs are not easily proved terminating since the root symbol of every term that has at least two symbols is the application symbol and thus provides no information which could be put to good use. In the second phase applicative terms are transformed into ordinary terms by the translation to functional form technique. This technique removes all occurrences of the application symbol. We refer to <ref type="bibr" target="#b1">[2]</ref> for a complete description of the transformation. We contend ourselves with showing the Postscript output (in Figure <ref type="figure" target="#fig_3">3</ref>) produced by T T T on the following variation of combinatory logic (inspired by a recent question posted on the TYPES Forum by Jeremy Dawson):</p><formula xml:id="formula_3">TYPES I : o =&gt; o ; W : (o =&gt; o =&gt; o) =&gt; o =&gt; o ; S : (o =&gt; o =&gt; o) =&gt; (o =&gt; o) =&gt; o =&gt; o ; RULES I x -&gt; x ; W f x -&gt; f x x ; S x y z -&gt; x z (y z) ;</formula><p>Note that the types are crucial for termination; the untyped version admits the cyclic rewrite step W W W → W W W.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">A Collection of Rewrite Systems as Input</head><p>Single TRSs (or STARSs) are inputted by typing (the type declarations and) the rules into the upper left text area or by uploading a file via the browse button. Besides the original T T T syntax (which is obtained by clicking the TRS link), T T T supports the official format<ref type="foot" target="#foot_0">1</ref> of the Termination Problems Data Base. The user can also upload a zip archive. All files ending in .trs are extracted from the archive and the termination prover runs on each of these files in turn. The results are collected and presented in two tables. The first table lists for each TRS the execution time in seconds together with the status: bold green indicates success, red italics indicates failure, and gray indicates timeout. By clicking green (red ) entries the user can view the termination proof (attempt) in HTML or high-quality Postscript format. The second table gives the number of successes and failures, both with the average time spent on each TRS, the number of timeouts, and the total number of TRSs extracted from the zip archive together with the total execution time. Figure <ref type="figure" target="#fig_1">2</ref> shows the two tables for the 89 terminating TRSs in Sections 3 and 4 of <ref type="bibr" target="#b3">[4]</ref>. Here we used T T T's fully automatic mode with a timeout of 1 second (for each TRS). The experiment was performed on a PC equipped with a 2.20 GHz Mobile Intel Pentium 4 Processor -M and 512 MB of memory, using native-compiled code for Linux/Fedora.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Termination Proof Script a</head><p>Consider the simply-typed applicative TRS</p><formula xml:id="formula_4">I x → x W f x → f x x S x y z → x z (y z) over the signature I : o ⇒ o, W : (o ⇒ o ⇒ o) ⇒ o ⇒ o, and S : (o ⇒ o ⇒ o) ⇒ (o ⇒ o) ⇒ o ⇒ o.</formula><p>In order to satisfy the ground term existence condition we extend the signature by c : o ⇒ o ⇒ o and c : o. Instantiating all head variables yields the following rules:</p><formula xml:id="formula_5">I x → x W c x → c x x S c I z → c z (I z) S c (W w) z → c z (W w z) S c (S w v) z → c z (S w v z) S c (c w) z → c z (c w z)</formula><p>By transforming terms into functional form the TRS 1 :</p><formula xml:id="formula_6">I1(x) → x 2 : W2(c, x) → c2(x, x) 3 : S3(c, I, z) → c2(z, I1(z)) 4 : S3(c, W1(w), z) → c2(z, W2(w, z)) 5 : S3(c, S2(w, v), z) → c2(z, S3(w, v, z)) 6 : S3(c, c1(w), z) → c2(z, c2(w, z))</formula><p>is obtained. There are 3 dependency pairs:</p><formula xml:id="formula_7">7 : S 3 (c, I, z) → I 1 (z) 8 : S 3 (c, W1(w), z) → W 2 (w, z) 9 : S 3 (c, S2(w, v), z) → S 3 (w, v, z)</formula><p>The approximated dependency graph contains one SCC: {9}.</p><p>-Consider the SCC {9}. By taking the simple projection π with π(S 3 ) = 2, the dependency pair simplifies to</p><formula xml:id="formula_8">9 : S2(w, v) → v</formula><p>and is compatible with the proper subterm relation. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Some Implementation Details</head><p>The web interface of T T T is written in Ruby<ref type="foot" target="#foot_1">2</ref> and the termination prover underlying T T T is written in Objective Caml (OCaml),<ref type="foot" target="#foot_2">3</ref> using the third-party libraries<ref type="foot" target="#foot_3">4</ref> findlib, extlib, and pcre-ocaml. We plan to make the OCaml source code available in the near future.</p><p>The termination prover consists of about 13,000 lines of OCaml code. About 20% is used for the manipulation of terms and rules. Another 15% is devoted to graph manipulations. This part of the code is not only used to compute dependency graph approximations, but also for precedences in KBO and LPO, and for the dependency relation which is used to compute the usable rules. The various termination methods that are provided by T T T account for less than 10% each. Most of the remaining code deals with I/O: parsing the input and producing HTML and Postscript output. For the official Termination Problems Data Base format we use parsers written in OCaml by Claude Marché. A rich OCaml library for the manipulation of terms (or rose trees) and graphs would have made our task much easier! It is interesting to note that two of the original techniques that make T T T fast, the recursive SCC algorithm and the subterm criterion, account for just 13 and 20 lines, respectively. Especially the latter should be the method of first choice in any termination prover. To wit, of the 628 (full) termination problems for pure first-order term and string rewrite systems in the Termination Problems Data Base, 215 are proved terminating by the subterm criterion; the total time to check the whole collection is a mere 32 seconds (on the architecture mentioned in the previous section). Several of these 215 rewrite systems cannot be proved terminating by the latest release of CiME <ref type="bibr" target="#b4">[5]</ref>. (See the next section for a comparison between T T T and other termination provers.)</p><p>Concerning the implementation of simply-typed applicative rewrite systems, we use the Damas-Milner type reconstruction algorithm (see e.g. <ref type="bibr" target="#b16">[17]</ref>) to infer the types of variables.</p><p>We conclude this section with some remarks on the implementation of base orders in T T T. The implementation of LPO follows <ref type="bibr" target="#b11">[12]</ref> but we first check whether the current pair of terms can be oriented by the embedding order in every recursive call to LPO. This improves the efficiency by about 20%. The implementation of KBO is based on <ref type="bibr" target="#b15">[16]</ref>. We use the "method for complete description" <ref type="bibr" target="#b7">[8]</ref> to compute a suitable weight function. The implementation of polynomial interpretations with coefficients from {0, 1} is based on [6, Figure <ref type="figure" target="#fig_0">1</ref>] together with the simplification rules described in Section 4.4.1 of the same paper. The current implementation of polynomial interpretations with coefficients from {-1, 0, 1} in T T T is rather naive. We anticipate that the recent techniques of <ref type="bibr" target="#b5">[6]</ref> can be extended to handle negative coefficients.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Comparison</head><p>Needless to say, T T T is not the only available tool for proving termination of rewrite systems. In this final section we compare our tool with the other systems that participated in the TRS category<ref type="foot" target="#foot_4">5</ref> of the termination competition that was organized as part of the 7th International Workshop on Termination. <ref type="foot" target="#foot_5">6</ref>-We start our discussion with CiME <ref type="bibr" target="#b4">[5]</ref>, the very first tool for automatically proving termination of rewrite systems that is still available. CiME is a tool with powerful techniques for finding termination proofs based on polynomial interpretations in connection with the dependency pair method. Since CiME does not support (yet) the most recent insights in the dependency pair method, it is less powerful than AProVE (described below) or T T T. In contrast to T T T, CiME can handle rewrite systems with AC operators. As a matter of fact, termination is only a side-issue in CiME. Its main strength lies in completing equational theories modulo theories like AC and C. -CARIBOO <ref type="bibr" target="#b8">[9]</ref> is a tool specializing in termination proofs for a particular evaluation strategy, like innermost evaluation or the strategies used in OBJlike languages. The underlying proof method is based on an inductive process akin to narrowing, but its termination proving power comes from CiME, which is used as an external solver. T T T supports innermost termination, but no other strategies. -Matchbox <ref type="bibr" target="#b18">[19]</ref> is a tool that is entirely based on methods from formal language theory. These methods are especially useful for proving termination of string rewrite systems. Matchbox tries to establish termination or nontermination by using recent results on match-bounded rewriting <ref type="bibr" target="#b9">[10]</ref>. Matchbox is not intended as a general-purpose termination prover (as its author writes in <ref type="bibr" target="#b18">[19]</ref>). -AProVE is the most powerful tool. Besides ordinary TRSs, it can handle logic programs, conditional rewrite systems, context-sensitive rewrite systems, and it supports rewriting modulo AC. Version 1.0 of AProVE is described in <ref type="bibr" target="#b10">[11]</ref>. Of all existing tools, AProVE supports the most base orders and even offers several different algorithms implementing these. It incorporates virtually all recent refinements of the dependency pair method. AProVE has several methods that are not available in any other tool. We mention here the sizechange principle <ref type="bibr" target="#b17">[18]</ref>, transformations for dependency pairs like narrowing and instantiation, and a modular refinement where the set of usable rules is determined after a suitable argument filtering has been computed. Despite all this, last year's termination competition version of AProVE, which further includes the methods derived from match-bounded rewriting, could handle only a few more systems than T T T.</p><p>We conclude the paper by listing what we believe to be the main attractions of T T T (in no particular order):</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. A screen shot of the semi automatic mode of T T T.</figDesc><graphic coords="2,134.83,66.28,345.41,274.59" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Output produced by T T T.</figDesc><graphic coords="4,134.83,66.32,345.39,313.55" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>cons x y) -&gt; cons (f x) (map f y) ;</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>aFig. 3 .</head><label>3</label><figDesc>Fig. 3. Example output.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>http://www.lri.fr/~marche/wst2004-competition/format.html</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>http://www.ruby-lang.org/</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_2"><p>http://www.ocaml.org/</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_3"><p>http://caml.inria.fr/humps/</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_4"><p>http://www.lri.fr/~marche/wst2004-competition/webform.cgi?command=trs</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_5"><p>http://www-i2.informatik.rwth-aachen.de/WST04/</p></note>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>-T T T comes equipped with a very user-friendly web interface, -T T T produces readable and beautifully typeset proofs, -T T T is a very fast termination tool, -T T T is a very powerful tool based on relatively few techniques.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Termination of simply typed term rewriting by translation and labelling</title>
		<author>
			<persName><forename type="first">T</forename><surname>Aoto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Yamada</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 14th RTA</title>
		<meeting>14th RTA</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="volume">2706</biblScope>
			<biblScope unit="page" from="380" to="394" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Termination of simply-typed applicative term rewriting systems</title>
		<author>
			<persName><forename type="first">T</forename><surname>Aoto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Yamada</surname></persName>
		</author>
		<idno>AIB-2004-03</idno>
	</analytic>
	<monogr>
		<title level="m">Proc. 2nd HOR</title>
		<meeting>2nd HOR<address><addrLine>Aachen</addrLine></address></meeting>
		<imprint>
			<publisher>RWTH</publisher>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="61" to="65" />
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Termination of term rewriting using dependency pairs. Theoretical Computer Science</title>
		<author>
			<persName><forename type="first">T</forename><surname>Arts</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Giesl</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
			<biblScope unit="volume">236</biblScope>
			<biblScope unit="page" from="133" to="178" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">A collection of examples for termination of term rewriting using dependency pairs</title>
		<author>
			<persName><forename type="first">T</forename><surname>Arts</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Giesl</surname></persName>
		</author>
		<idno>AIB-2001-09</idno>
		<imprint>
			<date type="published" when="2001">2001</date>
			<publisher>RWTH Aachen</publisher>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">CiME version 2, 2000</title>
		<author>
			<persName><forename type="first">E</forename><surname>Contejean</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Marché</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Monate</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Urbain</surname></persName>
		</author>
		<ptr target="http://cime.lri.fr/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Mechanically proving termination using polynomial interpretations</title>
		<author>
			<persName><forename type="first">E</forename><surname>Contejean</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Marché</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A.-P</forename><surname>Tomás</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Urbain</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Research Report</title>
		<imprint>
			<biblScope unit="volume">1382</biblScope>
			<date type="published" when="2004">2004</date>
			<publisher>LRI</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Termination by abstraction</title>
		<author>
			<persName><forename type="first">N</forename><surname>Dershowitz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 20th ICLP</title>
		<meeting>20th ICLP</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="volume">3132</biblScope>
			<biblScope unit="page" from="1" to="18" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Automating the Knuth-Bendix ordering</title>
		<author>
			<persName><forename type="first">J</forename><surname>Dick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kalmus</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Martin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Acta Infomatica</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="95" to="119" />
			<date type="published" when="1990">1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">CARIBOO: An induction based proof tool for termination with strategies</title>
		<author>
			<persName><forename type="first">O</forename><surname>Fissore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Gnaedig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Kirchner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 4th PPDP</title>
		<meeting>4th PPDP</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="62" to="73" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Match-bounded string rewriting</title>
		<author>
			<persName><forename type="first">Alfons</forename><surname>Geser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dieter</forename><surname>Hofbauer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Johannes</forename><surname>Waldmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Applicable Algebra in Engineering, Communication and Computing</title>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="149" to="171" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Automated termination proofs with AProVE</title>
		<author>
			<persName><forename type="first">J</forename><surname>Giesl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Thiemann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Schneider-Kamp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Falke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 15th RTA</title>
		<meeting>15th RTA</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="volume">3091</biblScope>
			<biblScope unit="page" from="210" to="220" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Tsukuba termination tool</title>
		<author>
			<persName><forename type="first">N</forename><surname>Hirokawa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Middeldorp</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 14th RTA</title>
		<meeting>14th RTA</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="volume">2706</biblScope>
			<biblScope unit="page" from="311" to="320" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Dependency pairs revisited</title>
		<author>
			<persName><forename type="first">N</forename><surname>Hirokawa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Middeldorp</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 15th RTA</title>
		<meeting>15th RTA</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="volume">3091</biblScope>
			<biblScope unit="page" from="249" to="268" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Polynomial interpretations with negative coefficients</title>
		<author>
			<persName><forename type="first">N</forename><surname>Hirokawa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Middeldorp</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 7th AISC</title>
		<meeting>7th AISC</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="volume">3249</biblScope>
			<biblScope unit="page" from="185" to="198" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Automating the dependency pair method. Information and Computation</title>
		<author>
			<persName><forename type="first">N</forename><surname>Hirokawa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Middeldorp</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 19th CADE, volume 2741 of LNAI</title>
		<meeting>19th CADE, volume 2741 of LNAI</meeting>
		<imprint>
			<date type="published" when="2003">2005. 2003</date>
			<biblScope unit="page" from="32" to="46" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Orienting rewrite rules with the Knuth-Bendix order</title>
		<author>
			<persName><forename type="first">K</forename><surname>Korovin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Voronkov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information and Computation</title>
		<imprint>
			<biblScope unit="volume">183</biblScope>
			<biblScope unit="page" from="165" to="186" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Types and Programming Languages</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">C</forename><surname>Pierce</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
			<publisher>MIT Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Size-change termination for term rewriting</title>
		<author>
			<persName><forename type="first">R</forename><surname>Thiemann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Giesl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 14th RTA</title>
		<meeting>14th RTA</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="volume">2706</biblScope>
			<biblScope unit="page" from="264" to="278" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Matchbox: A tool for match-bounded string rewriting</title>
		<author>
			<persName><forename type="first">J</forename><surname>Waldmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 15th RTA</title>
		<meeting>15th RTA</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="volume">3091</biblScope>
			<biblScope unit="page" from="85" to="94" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
