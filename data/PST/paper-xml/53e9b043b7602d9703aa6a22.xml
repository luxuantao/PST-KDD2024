<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Modular Multiplication Without Trial Division</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Peter</forename><forename type="middle">L</forename><surname>Montgomery</surname></persName>
						</author>
						<title level="a" type="main">Modular Multiplication Without Trial Division</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note type="submission">Received December 19, 1983.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-01-03T08:36+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>1980 Mathematics Subject Classification</term>
					<term>Primary 1OA30; Secondary 68C05</term>
					<term>Key words and phrases</term>
					<term>Modular arithmetic, multiplication</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Let N &gt; 1. We present a method multiplying two integers (called N-residues) modulo N while avoiding division by N. N-residues are represented in a nonstandard way, so this method useful only if several computations are done modulo one N. The addition and subtraction algorithms are unchanged.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>1. Description. Some algorithms <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b4">[5]</ref> require extensive modular arithmetic. We propose a representation of residue classes so as to speed modular multiplication without affecting the modular addition and subtraction algorithms.</p><p>Other recent algorithms for modular arithmetic appear in <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b5">[6]</ref>.</p><p>Fix N &gt; 1. Define an N-residue to be a residue class modulo N. Select a radix R coprime to N (possibly the machine word size or a power thereof) such that R &gt; N and such that computations modulo R are inexpensive to process. Let R' and N' be integers satisfying 0 &lt; R-1 &lt; N and 0 &lt; N' &lt; R and RR-' -NN' = 1.</p><p>For 0 &lt; i &lt; N, let i represent the residue class containing iR'-mod N. This is a complete residue system. The rationale behind this selection is our ability to quickly compute TR-1 mod N from T if 0 &lt; T &lt; RN, as shown in Algorithm REDC:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>function REDC(T) m *-(Tmod R)N'mod R [so O &lt; m &lt; R] t --(T + mN)/R if t &gt; N then return t -N else return t U</head><p>To validate REDC, observe mN TN'N -Tmod R, so t is an integer. Also, tR Tmod N so t TR-' mod N. Thirdly, 0 &lt; T + mN &lt; RN + RN, so O &lt; t &lt; ,2N.</p><p>If R and N are large, then T + mN may exceed the largest double-precision value. One can circumvent this by adjusting m so -R &lt; m &lt; 0.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Given two numbers x and y between 0 and N -1 inclusive, let z = REDC(xy). Then z (xy)R-1 mod N, so (xR-1)(yR-1)</head><p>zR-1 mod N. Also, 0 &lt; z &lt; N, so z is the product of x and y in this representation.</p><p>Other algorithms for operating on N-residues in this representation can be derived from the algorithms normally used. The addition algorithm is unchanged, since xR' + yR' zR'mod N if and only if x + y z mod N. Also unchanged are</p></div>			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>This content downloaded from 128.235.251.160 on Wed, 24 Dec 2014 05:51:11 AM All use subject to JSTOR Terms and Conditions</p></note>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PETER L. MONTGOMERY</head><p>the algorithms for subtraction, negation, equality/inequality test, multiplication by an integer, and greatest common divisor with N.</p><p>To convert an integer x to an N-residue, compute xR mod N. Equivalently, compute REDC((x mod N)(R2mod N)). Constants and inputs should be converted once, at the start of an algorithm. To convert an N-residue to an integer, pad it with leading zeros and apply Algorithm REDC (thereby multiplying it by R-1 mod N).</p><p>To </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Theorems on factorization and primality testing</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Pollard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proc. Cambridge Philos. Soc</title>
		<imprint>
			<biblScope unit="volume">76</biblScope>
			<biblScope unit="page" from="521" to="528" />
			<date type="published" when="1974">1974</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A Monte Carlo method for factorization</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Pollard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BIT</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="331" to="334" />
			<date type="published" when="1975">1975</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A carry-free algorithm for finding the greatest common divisor of two integers</title>
		<author>
			<persName><forename type="first">George</forename><forename type="middle">B</forename><surname>Purdy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Math. Appl. v</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="311" to="316" />
			<date type="published" when="1983">1983</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A method for obtaining digital signatures and public-key cryptosystems</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Rivest</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Shamir</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Adleman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comm. ACM, v</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="96" to="99" />
			<date type="published" when="1978">1978. 1983</date>
		</imprint>
	</monogr>
	<note>Comm. ACM, v.</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Fast probabilistic algorithms for verification of polynomial identities</title>
		<author>
			<persName><forename type="first">J</forename></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Schwartz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Assoc. Comput. Mach., v</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="701" to="717" />
			<date type="published" when="1980">1980</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A redundant number system that speeds up modular arithmetic</title>
		<author>
			<persName><forename type="first">Gustavus</forename><forename type="middle">J</forename><surname>Simmons</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Abstracts Amer. Math. Soc</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page">27</biblScope>
			<date type="published" when="1983">1983</date>
		</imprint>
	</monogr>
	<note>Abstract 801-10-427</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
