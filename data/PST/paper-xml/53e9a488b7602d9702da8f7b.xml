<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A New Approach to Pipeline FFT Processor</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Shousheng</forename><surname>He</surname></persName>
							<email>he@tde.lth.se</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Applied Electronics</orgName>
								<orgName type="institution">Lund University</orgName>
								<address>
									<postCode>S-22100</postCode>
									<settlement>Lund</settlement>
									<country key="SE">SWEDEN</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Mats</forename><surname>Torkelson</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Applied Electronics</orgName>
								<orgName type="institution">Lund University</orgName>
								<address>
									<postCode>S-22100</postCode>
									<settlement>Lund</settlement>
									<country key="SE">SWEDEN</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A New Approach to Pipeline FFT Processor</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">EE57F0CC63AB8EFC06FB9A2FF2E4BE6D</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T16:58+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>A new VLSI architecture for real-time pipeline FFT processor is proposed. A hardware oriented radix-2 2 algorithm is derived by integrating a twiddle factor decomposition technique in the divide and conquer approach. Radix-2 2 algorithm has the same multiplicative complexity as radix-4 algorithm, but retains the butterfly structure of radix-2 algorithm. The single-path delay-feedback architecture is used to exploit the spatial regularity in signal flow graph of the algorithm. For length-N DFT computation, the hardware requirement of the proposed architecture is minimal on both dominant components: log 4 N 1 complex multipliers and N 1 complex data memory. The validity and efficiency of the architecture have been verified by simulation in hardware description language VHDL.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Pipeline FFT processor is a specified class of processors for DFT computation utilizing fast algorithms. It is characterized with real-time, non-stopping processing as the data sequence passing the processor. It is an AT 2 non-optimal approach with AT 2 = ON 3 , since the area lower bound is ON.</p><p>However, as it has been speculated <ref type="bibr" target="#b0">[1]</ref> that for real-time processing whether a new metric should be introduced since it is necessarily non-optimal given the time complexity of ON.</p><p>Although asymptotically almost all the feasible architectures have reached the area lower bound <ref type="bibr" target="#b1">[2]</ref>, the class of pipeline FFT processors has probably the smallest "constant factor" among the approaches that meet the time requirement, due to its least number, OlogN, of Arithmetic Elements (AE).</p><p>The difference comes from the fact that an AE, especially the multiplier, takes much larger area than a register in digital VLSI implementation.</p><p>It is also interesting to note the at least Ωlog N AEs are necessary to meet the real-time processing requirement due to the computational complexity of ΩN log N for FFT algorithm. Thus it has the nature of "lower bound" for AE requirement. Any "optimal" architecture for real-time processing will likely have Ωlog N AEs.</p><p>Another major area/energy consumption of the FFT pro-cessor comes from the memory requirement to buffer the input data and the intermediate result for the computation. For large size transform, this turns out to be dominating <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b3">4]</ref>. Although there is no formal proof, the area lower bound indicates that the the "lower bound" for the number of registers is likely to be ΩN. This is obviously true for any architecture implementing FFT based algorithm, since the butterfly at first stage has to take data elements separated N=r distance away from the input sequence, where r is a small constant integer, or the "radix".</p><p>Putting above arguments together, a pipeline FFT processor has necessarily Ωlog r N AEs and ΩN complex word registers. The optimal architecture has to be the one that reduces the "constant factor", or the absolute number of AEs (multipliers and adders) and memory size, to the minimum. In this paper a new approach for real-time pipeline FFT processor, the Radix-2 2 Single-path Delay Feedback, or R2 2 SDF architecture will be presented. We will begin with a brief review of previous approaches. A hardware oriented radix-2 2 algorithm is then developed by integrating a twiddle factor decomposition technique in divide and conquer approach to form a spatially regular signal flow graph (SFG). Mapping the algorithm to the cascading delay feedback structure leads to the the proposed architecture. Finally we conclude with a comparison of hardware requirement of R2 2 SDF and several other popular pipeline architectures.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. PIPELINE FFT PROCESSOR ARCHITECTURES</head><p>Before going into details of the new approach, it is beneficial to have a brief review of the various architectures for pipeline FFT processors. To avoid being influenced by the sequence order, we assume that the real-time processing task only requires the input sequence to be in normal order, and the output is allowed to be in digit-reversed (radix-2 or radix-4) order, which is permissible in such applications such as DFT based communication system <ref type="bibr" target="#b4">[5]</ref>. We also stick to the Decimation-In-Frequency (DIF) type of decomposition throughout the discussion.</p><p>The architecture design for pipeline FFT processor had been the subject of intensive research as early as in 70's when real-time processing was demanded in such application as radar signal processing <ref type="bibr" target="#b5">[6]</ref>, well before the VLSI technology had advanced to the level of system integration. Several architectures have been proposed over the last 2 decades since then, along with the increasing interest and the leap forward of the technology. Here different approaches will be put into functional blocks with unified terminology, where the additive butterfly has been separated from multiplier to show the hardware requirement distinctively, as in Fig. <ref type="figure">1</ref>. The control and twiddle factor reading mechanism have been also omitted for clarity. All data and arithmetic operations are complex, and a constraint that N is a power of 4 applies. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>(i). R2MDC(N=16) (ii). R2SDF(N=16) (iii). R4SDF(N=256) (iv). R4MDC(N=256) (v). R4SDC(N=256)</head><p>Figure <ref type="figure">1</ref>: Various schemes for pipeline FFT processor R2MDC: Radix-2 Multi-path Delay Commutator <ref type="bibr" target="#b5">[6]</ref> was probably the most straightforward approach for pipeline implementation of radix-2 FFT algorithm. The input sequence has been broken into two parallel data stream flowing forward, with correct "distance" between data elements entering the butterfly scheduled by proper delays. Both butterflies and multipliers are in 50% utilization. log 2 N 2 multipliers, log 2 N radix-2 butterflies and 3=2N 2 registers (delay elements) are required.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>R2SDF:</head><p>Radix-2 Single-path Delay Feedback <ref type="bibr" target="#b6">[7]</ref> uses the registers more efficiently by storing the butterfly output in feedback shift registers. A single data stream goes through the multiplier at every stage. It has same number of butterfly units and multipliers as in R2MDC approach, but with much reduced memory requirement: N 1 registers.</p><p>Its memory requirement is minimal.</p><p>R4SDF: Radix-4 Single-path Delay Feedback <ref type="bibr" target="#b7">[8]</ref> was proposed as a radix-4 version of R2SDF, employing CORDIC 1 iterations. The utilization of multipliers has been increased to 75% due to the storage of 3 out of radix-4 butterfly outputs. However, the utilization of the radix-4 butterfly, which is fairly complicated and contains at least 8 complex adders, is dropped to only 25%. It requires log 4 N 1 multipliers, log 4 N full radix-4 butterflies and storage of size N 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>R4MDC:</head><p>Radix-4 Multi-path Delay Commutator <ref type="bibr" target="#b5">[6]</ref> is a radix-4 version of R2MDC. It has been used as the architecture for the initial VLSI implementation of pipeline FFT processor <ref type="bibr" target="#b2">[3]</ref> and massive wafer scale integration <ref type="bibr" target="#b8">[9]</ref>. However, it suffers from low, 25%, utilization of all components, which can be compensated only in some special applications where four FFTs are being processed simultaneously. It requires 3 log 4 N multipliers, log 4 N full radix-4 butterflies and 5=2N 4 registers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>R4SDC:</head><p>Radix-4 Single-path Delay Commutator <ref type="bibr" target="#b9">[10]</ref> uses a modified radix-4 algorithm with programable 1=4 radix-4 butterflies to achieve higher, 75% utilization of multipliers.</p><p>A combined Delay-Commutator also reduces the memory requirement to 2N 2 from 5=2N 1, that of R4MDC. The butterfly and delay-commutator become relatively complicated due to programmability requirement. R4SDC has been used recently in building the largest ever single chip pipeline FFT processor for HDTV application <ref type="bibr" target="#b3">[4]</ref>.</p><p>A swift skimming through of the architectures listed above reveals the distinctive merits of the different approaches: First, the delay-feedback approaches are always more efficient than corresponding delay-commutator approaches in terms of memory utilization since the stored butterfly output can be directly used by the multipliers. Second, radix-4 algorithm based single-path architectures have higher multiplier utilization, however, radix-2 algorithm based architectures have simpler butterflies which are better utilized. The new approach developed in following sections is highly motivated by these observations. III. RADIX-2 2 DIF FFT ALGORITHM By the observations made in last section the most desirable hardware oriented algorithm will be that it has the same number of non-trivial multiplications at the same positions in the SFG as of radix-4 algorithms, but has the same butterfly structure as that of radix-2 algorithms. Strictly speaking, algorithms with this feature is not completely new. An SFG 1 The Coordinate Rotational Digital Computer with a complex "bias" factor had been obtained implicitly as the result of constant-rotation/compensation procedure using restricted CORDIC operations <ref type="bibr" target="#b10">[11]</ref>. Another algorithm combining radix-4 and radix-'4 + 2' in DIT form has been used to decrease the scaling error in R2MDC architecture, without altering the multiplier requirement <ref type="bibr" target="#b11">[12]</ref>. The clear derivation of the algorithm in DIF form with perception of reducing the hardware requirement in the context pipeline FFT processor is, however, yet to be developed.</p><p>To avoid confusing with the well known radix-2=4 split radix algorithm and the mixed radix-'4 + 2' algorithm, the notion of radix-2 2 algorithm is used to clearly reflect the structural relation with radix-2 algorithm and the identical computational requirement with radix-4 algorithm.</p><p>The DFT of size N is defined by</p><formula xml:id="formula_0">Xk = N 1 X n = 0 x n W nk N 0 k &lt; N (1)</formula><p>where W N denotes the Nth primitive root of unity, with its exponent evaluated modulo N. To make the derivation of the new algorithm clearer, consider the first 2 steps of decomposition in the radix-2 DIF FFT together. Applying a 3-dimensional linear index map,</p><formula xml:id="formula_1">n = &lt; N 2 n 1 + N 4 n 2 + n 3 &gt; N k = &lt; k 1 + 2 k 2 + 4 k 3 &gt; N (2)</formula><p>the Common Factor Algorithm (CFA) has the form of</p><formula xml:id="formula_2">X k 1 + 2k 2 + 4k 3 = N 4 1 X n 3 =0 1 X n 2 =0 1 X n 1 =0 x N 2 n 1 + N 4 n 2 +n 3 W N 2 n 1 + N 4 n 2 +n 3 k 1 +2k 2 +4k 3 N = N 4 1 X n 3 =0 1 X n 2 =0 fB k 1 N 2 N 4 n 2 + n 3 W N 4 n 2 +n 3 k 1 N gW N 4 n 2 +n 3 2k 2 +4k 3 N (3)</formula><p>where the butterfly structure has the form of</p><formula xml:id="formula_3">B k 1 N 2 N 4 n 2 + n 3 = x N 4 n 2 + n 3 + 1 k 1 x N 4 n 2 + n 3 + N 2</formula><p>If the expression within the braces of eqn. (3) is to be computed before further decomposition, an ordinary radix-2 DIF FFT results. The key idea of the new algorithm is to proceed the second step decomposition to the remaining DFT coefficients, including the "twiddle factor" W N</p><formula xml:id="formula_4">4 n 2 +n 3 k 1 N</formula><p>, to exploit the exceptional values in multiplication before the next butterfly is constructed. Decomposing the composite twiddle factor and observe that</p><formula xml:id="formula_5">W N 4 n 2 +n 3 k 1 +2k 2 +4k 3 N = W N n 2 k 3 N W N 4 n 2 k 1 + 2 k 2 N W n 3 k 1 + 2 k 2 N W 4 n 3 k 3 N = j n 2 k 1 + 2 k 2 W n 3 k 1 + 2 k 2 N W 4 n 3 k 3 N (4)</formula><p>Substituting eqn. (4) in eqn. <ref type="bibr" target="#b2">(3)</ref> and expand the summation with index n 2 . After simplification we have a set of 4 DFTs of length N=4,</p><formula xml:id="formula_6">X k 1 + 2k 2 + 4k 3 = N 4 1 X n 3 = 0 h H k 1 ; k 2 ; n 3 W n 3 k 1 + 2 k 2 N i W n 3 k 3 N 4 (5)</formula><p>where Hk 1 ; k 2 ; n 3 is expressed in eqn. <ref type="bibr" target="#b5">(6)</ref>. <ref type="formula">8</ref>) X( <ref type="formula">4</ref>) X( <ref type="formula">12</ref>) X( <ref type="formula">2</ref>) X( <ref type="formula">10</ref>) X( <ref type="formula" target="#formula_10">6</ref>) X( <ref type="formula">14</ref>) X( <ref type="formula">1</ref>) X( <ref type="formula">9</ref>) X( <ref type="formula">5</ref>) X( <ref type="formula">13</ref>) X( <ref type="formula">3</ref>) X( <ref type="formula">11</ref>) X( <ref type="formula">7</ref>) X( <ref type="formula">15</ref>)</p><formula xml:id="formula_7">I BF 0 6 9 W W W 1 3 2 3 W W W W W W W W W 0 2 4 6 0 N/4 DFT (k1=0, k2=0) N/4 DFT (k1=0, k2=1) N/4 DFT (k1=1, k2=0) N/4 DFT X(0) X(</formula><formula xml:id="formula_8">(k1=1, k2=1) x(0)</formula><p>x <ref type="bibr" target="#b0">(1)</ref> x <ref type="bibr" target="#b1">(2)</ref> x <ref type="bibr" target="#b2">(3)</ref> x <ref type="bibr" target="#b3">(4)</ref> x <ref type="bibr" target="#b4">(5)</ref> x <ref type="bibr" target="#b5">(6)</ref> x <ref type="bibr" target="#b6">(7)</ref> x <ref type="bibr" target="#b7">(8)</ref> x <ref type="bibr" target="#b8">(9)</ref> x <ref type="bibr" target="#b9">(10)</ref> x <ref type="bibr" target="#b10">(11)</ref> x <ref type="bibr" target="#b11">(12)</ref> x( <ref type="formula">13</ref>) x( <ref type="formula">14</ref>)</p><p>x( <ref type="formula">15</ref>)  <ref type="formula" target="#formula_10">6</ref>) represents the first two stages of butterflies with only trivial multiplications in the SFG, as BF I and BF II in Fig. <ref type="figure" target="#fig_1">2</ref>. After these two stages, full multipliers are required to compute the product of the decomposed twiddle factor W n 3 k 1 +2k 2 N in eqn. <ref type="bibr" target="#b4">(5)</ref>, as shown in Fig. <ref type="figure" target="#fig_1">2</ref>. Note the order of the twiddle factors is different from that of radix-4 algorithm.</p><formula xml:id="formula_9">II BF -j -j -j -j</formula><p>Applying this CFA procedure recursively to the remaining DFTs of length N=4 in eqn. ( <ref type="formula">5</ref>), the complete radix-2 2 DIF FFT algorithm is obtained. An N = 16 example is shown in Fig. <ref type="figure" target="#fig_2">3</ref> where small diamonds represent trivial multiplication by W N=4 N = j, which involves only real-imaginary swapping and sign inversion. Radix-2 2 algorithm has the feature that it has the same multiplicative complexity as radix-4 algorithms, but still retains the radix-2 butterfly structures. The multiplicative operations are in a such an arrangement that only every other stage has non-trivial multiplications. This is a great structural advantage over other algorithms when pipeline/cascade FFT architecture is under consideration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. R2 2 SDF ARCHITECTURE</head><p>Mapping radix-2 2 DIF FFT algorithm derived in last section to the R2SDF architecture discussed in section II. , a new architecture of Radix-2 2 Single-path Delay Feedback (R2 2 SDF) approach is obtained.</p><formula xml:id="formula_10">H k 1 ; k 2 ; n 3 = BF I z }| { h xn 3 + 1 k 1 x n 3 + N 2 i + j k 1 +2k 2 BF I z }| { h xn 3 + N 4 + 1 k 1 x n 3 + 3 4 N i | {z } BF II<label>(6)</label></formula><formula xml:id="formula_11">I BF x(0)</formula><p>x <ref type="bibr" target="#b0">(1)</ref> x <ref type="bibr" target="#b1">(2)</ref> x <ref type="bibr" target="#b2">(3)</ref> x <ref type="bibr" target="#b3">(4)</ref> x <ref type="bibr" target="#b4">(5)</ref> x <ref type="bibr" target="#b5">(6)</ref> x <ref type="bibr" target="#b6">(7)</ref> x <ref type="bibr" target="#b7">(8)</ref> x <ref type="bibr" target="#b8">(9)</ref> x <ref type="bibr" target="#b9">(10)</ref> x <ref type="bibr" target="#b10">(11)</ref> x <ref type="bibr" target="#b11">(12)</ref> x( <ref type="formula">13</ref>) x( <ref type="formula">14</ref>)</p><p>x( <ref type="formula">15</ref>) X(0) X( <ref type="formula">8</ref>) X( <ref type="formula">4</ref>) X( <ref type="formula">12</ref>) X( <ref type="formula">2</ref>) X( <ref type="formula">10</ref>) X( <ref type="formula" target="#formula_10">6</ref>) X( <ref type="formula">14</ref>) X( <ref type="formula">1</ref>) X( <ref type="formula">9</ref>) X( <ref type="formula">5</ref>) <ref type="formula">11</ref>) X( <ref type="formula">7</ref>) X( <ref type="formula">15</ref>) With the help of the butterfly structures shown in Fig. <ref type="figure" target="#fig_4">4</ref>, the scheduled operation of the R2 2 SDF processor in Fig. <ref type="figure">5</ref> is as follows. On first N=2 cycles, the 2-to-1 multiplexors in the first butterfly module switch to position "0", and the butterfly is idle. The input data from left is directed to the shift registers until they are filled. On next N=2 cycles, the multiplexors turn to position "1", the butterfly computes a 2-point DFT with incoming data and the data stored in the shift registers.</p><formula xml:id="formula_12">X(13) X(3) X(</formula><formula xml:id="formula_13">II BF BF BF III IV 6 9 W W 1 3 2 3 W W W W W W W 2 4 6 -j -j -j -j -j -j -j -j</formula><formula xml:id="formula_14">Z 1n = xn + x n + N=2 Z1n + N=2 = xn xn + N=2 ,0 n &lt; N = 2 (7)</formula><p>The butterfly output Z1n is sent to apply the twiddle factor, and Z1n + N=2is sent back to the shift registers to be "multiplied" in still next N=2 cycles when the first half of the next frame of time sequence is loaded in. The operation of the second butterfly is similar to that of the first one, except the "distance" of butterfly input sequence are just N=4 and the trivial twiddle factor multiplication has been implemented by real-imaginary swapping with a commutator and controlled add/subtract operations, as in Fig. <ref type="figure" target="#fig_4">4-(</ref>ii), which requires two bit control signal from the synchronizing counter. The data then goes through a full complex multiplier, working at 75% utility, accomplishes the result of first level of radix-4 DFT word by word. Further processing repeats this pattern with the distance of the input data decreases by half at each consecutive butterfly stages. After N 1 clock cycles, The complete DFT transform result streams out to the right, in bit-reversed order. The next frame of transform can be computed without pausing due to the pipelined processing of each stages.  In practical implementation, pipeline register should be inserted between each multiplier and butterfly stage to improve the performance. Shimming registers are also needed for control signals to comply with thus revised timing. The latency of the output is then increased to N 1 + 3log 4 N 1 without affecting the throughput rate.</p><formula xml:id="formula_15">(n) xi(n) xr(n+N/2) xi(n+N/2) s Zi(n) Zr(n) Zi(n+N/2) Zr(n+N/2) (i). BF2I 1 0 1 0 0 1 1 0 xr(n) xi(n) xr(n+N/2) xi(n+N/2) Zr(n+N/2) Zi(n+N/2) Zr(n) Zi(n) s t (ii). BF2II</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. CONCLUSION</head><p>In this paper, a hardware-oriented radix-2 2 algorithm is derived which has the radix-4 multiplicative complexity but retains radix-2 butterfly structure in the SFG. Based on this algorithm, a new, efficient pipeline FFT architecture, the R2 2 SDF architecture, is put forward. The hardware requirement of proposed architecture as compared with various approaches is shown in Table <ref type="table" target="#tab_0">1</ref>, where not only the number of complex The architecture has been modeled with hardware description language VHDL with generic parameters for transform size and word-length, using fixed point arithmetic and a complex array multiplier implemented with distributed arithmetic. The validity and efficiency of the proposed architecture has been verified by extensive simulation.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Butterfly with decomposed twiddle factors.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Radix-2 2 DIF FFT flow graph for N = 16</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Butterfly structure for R2 2 SDF FFT processor</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Figure 5: R2 2 SDF pipeline FFT architecture for N = 256multipliers, adders and memory size but also the control complexity are listed for comparison. For easy reading, base-4 logarithm is used whenever applicable. It shows R2 2 SDF has reached the minimum requirement for both multiplier and the storage, and only second to R4SDC for adder. This makes it an ideal architecture for VLSI implementation of pipeline FFT processors. Hardware requirement comparison</figDesc><table><row><cell></cell><cell></cell><cell>128</cell><cell cols="2">64</cell><cell>32</cell><cell cols="2">16</cell><cell>8</cell><cell></cell><cell>4</cell><cell>2</cell><cell>1</cell></row><row><cell></cell><cell>x(n)</cell><cell>BF2I</cell><cell cols="2">BF2II</cell><cell>BF2I</cell><cell cols="2">BF2II</cell><cell>BF2I</cell><cell cols="2">BF2II</cell><cell>BF2I</cell><cell>BF2II</cell><cell>X(k)</cell></row><row><cell></cell><cell></cell><cell>s</cell><cell>t</cell><cell>s</cell><cell>s</cell><cell>t</cell><cell>s</cell><cell>s</cell><cell>t</cell><cell>s</cell><cell>s</cell><cell>t</cell><cell>s</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>W1(n)</cell><cell></cell><cell>W2(n)</cell><cell></cell><cell></cell><cell>W3(n)</cell><cell></cell></row><row><cell></cell><cell>clk</cell><cell>7</cell><cell></cell><cell>6</cell><cell>5</cell><cell></cell><cell>4</cell><cell>3</cell><cell></cell><cell>2</cell><cell>1</cell><cell>0</cell></row><row><cell></cell><cell cols="2">multiplier #</cell><cell cols="2">adder #</cell><cell>memory size</cell><cell cols="2">control</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>R2MDC R2SDF R4SDF R4MDC R4SDC R2 2 SDF</cell><cell cols="4">2log 4 N 1 4 log 4 N 2log 4 N 1 4 log 4 N log 4 N 1 8 log 4 N 3log 4 N 1 8 log 4 N log 4 N 1 3 log 4 N log 4 N 1 4 log 4 N</cell><cell>3N=2 2 N 1 N 1 5N=2 4 2N 2 N 1</cell><cell cols="2">simple simple medium simple complex simple</cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Fourier transform in VLSI</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">D</forename><surname>Thompson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Comput., C</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="1047" to="1057" />
			<date type="published" when="1983-11">Nov. 1983</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A new expandable 2D systolic array for DFT computation based on symbiosis of 1D arrays</title>
		<author>
			<persName><forename type="first">S</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Torkelson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ICA 3 PP&apos;95</title>
		<meeting>ICA 3 PP&apos;95<address><addrLine>Brisbane, Australia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1995-04">Apr. 1995</date>
			<biblScope unit="page" from="12" to="19" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A radix 4 delay commutator for fast Fourier transform processor implementation</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">E</forename><surname>Swartzlander</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">K W</forename><surname>Young</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">J</forename><surname>Joseph</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE J. Solid-State Circuits</title>
		<imprint>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="702" to="709" />
			<date type="published" when="1984-10">Oct. 1984</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A fast single-chip implementation of 8192 complex point FFT</title>
		<author>
			<persName><forename type="first">E</forename><surname>Bidet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Castelain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Joanblanq</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Stenn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE J. Solid-State Circuits</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="300" to="305" />
			<date type="published" when="1995-03">Mar. 1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Principles of modulation and channel coding for digital broadcasting for mobile receivers</title>
		<author>
			<persName><forename type="first">M</forename><surname>Alard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Lassalle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">EBU Review</title>
		<imprint>
			<biblScope unit="issue">224</biblScope>
			<biblScope unit="page" from="47" to="69" />
			<date type="published" when="1987-08">Aug. 1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Theory and Application of Digital Signal Processing</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">R</forename><surname>Rabiner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Gold</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1975">1975</date>
			<publisher>Prentice-Hall, Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Pipeline and parallel-pipeline FFT processors for VLSI implementation</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">H</forename><surname>Wold</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Despain</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Comput., C</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="414" to="426" />
			<date type="published" when="1984-05">May 1984</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Fourier transform computer using CORDIC iterations</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Despain</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Comput., C</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="993" to="1001" />
			<date type="published" when="1974-10">Oct. 1974</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A radix 8 wafer scale FFT processor</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">E</forename><surname>Swartzlander</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">K</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Hikawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. VLSI Signal Processing</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">2,3</biblScope>
			<biblScope unit="page" from="165" to="176" />
			<date type="published" when="1992-05">May 1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A pipelined FFT processor for wordsequential data</title>
		<author>
			<persName><forename type="first">G</forename><surname>Bi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">V</forename><surname>Jones</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Acoust., Speech, Signal Processing</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">12</biblScope>
			<date type="published" when="1982">1982-1985, Dec. 1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Very fast Fourier transform algorithms hardware for implementation</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Despain</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Comput., C</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="333" to="341" />
			<date type="published" when="1979-05">May 1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Radix-2 FFT-pipeline architecture with raduced noise-to-signal ratio</title>
		<author>
			<persName><forename type="first">R</forename><surname>Storn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEE Proc.-Vis. Image Signal Process</title>
		<imprint>
			<biblScope unit="volume">141</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="81" to="86" />
			<date type="published" when="1994-04">Apr. 1994</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
