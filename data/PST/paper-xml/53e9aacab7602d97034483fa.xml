<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Security Enforcement Kernel for OpenFlow Networks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Phillip</forename><surname>Porras</surname></persName>
							<email>porras@csl.sri.com</email>
							<affiliation key="aff0">
								<orgName type="institution">Texas A&amp;M University</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Seungwon</forename><surname>Shin</surname></persName>
							<email>swshin@cse.tamu.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">Texas A&amp;M University</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Vinod</forename><surname>Yegneswaran</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Texas A&amp;M University</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Martin</forename><surname>Fong</surname></persName>
							<email>mwfong@csl.sri.com</email>
							<affiliation key="aff0">
								<orgName type="institution">Texas A&amp;M University</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Mabry</forename><surname>Tyson</surname></persName>
							<email>mabry.tyson@sri.com</email>
							<affiliation key="aff0">
								<orgName type="institution">Texas A&amp;M University</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Guofei</forename><surname>Gu</surname></persName>
							<email>guofei@cse.tamu.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">Texas A&amp;M University</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">†</forename><surname>Sri</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Texas A&amp;M University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">A Security Enforcement Kernel for OpenFlow Networks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">99358E84F1298B22CA00A4248781A11C</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T11:04+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>C.2.6 [COMPUTER-COMMUNICATION NETWORKS]: Internetworking Software-Defined Networking</term>
					<term>Security OpenFlow</term>
					<term>Security</term>
					<term>Policy Enforcement</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Software-defined networks facilitate rapid and open innovation at the network control layer by providing a programmable network infrastructure for computing flow policies on demand. However, the dynamism of programmable networks also introduces new security challenges that demand innovative solutions. A critical challenge is efficient detection and reconciliation of potentially conflicting flow rules imposed by dynamic OpenFlow (OF) applications. To that end, we introduce FortNOX, a software extension that provides role-based authorization and security constraint enforcement for the NOX OpenFlow controller. FortNOX enables NOX to check flow rule contradictions in real time, and implements a novel analysis algorithm that is robust even in cases where an adversarial OF application attempts to strategically insert flow rules that would otherwise circumvent flow rules imposed by OF security applications. We demonstrate the utility of FortNOX through a prototype implementation and use it to examine performance and efficiency aspects of the proposed framework.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Dynamic network orchestration, driven by the benefits for elasticity of server and desktop virtualization, delivers computing resources and network services on demand, spawned and recycled in reaction to network service requests. Frameworks such as Open-Flow (OF), which embrace the paradigm of highly programmable switch infrastructures <ref type="bibr" target="#b14">[14]</ref>, compute optimal flow routing rules from remote clients to virtually spawned computing resources. Here, the question of what network security policy is embodied across a set of OF switches is entirely a function of how the current set of OF applications will react to the incoming stream of flow requests. As the state of an OF switch must be continually reprogrammed to address the current flows, the question of what policy was embodied in the switch 5 minutes prior is as elusive to discern as what the policy will be 5 minutes into the future.</p><p>Within the OpenFlow community, the need for security policy enforcement is not lost. Efforts to develop virtual network slicing, such as in FlowVisor <ref type="bibr" target="#b22">[22]</ref> and in the Beacon OpenFlow controller <ref type="bibr" target="#b18">[18]</ref>, propose to enable secure network operations by segmenting, or slicing, network control into independent virtual machines. Each network domain is governed by a self-consistent OF application, which is architected to not interfere with OF applications that govern other network slices. In this sense, OpenFlow security is cast as a non-interference property. However, even within a given network slice the problem remains that a network operator may still want to instantiate network security constraints that must be enforced within the slice. In this paper, we assert not only that reconciliation of the needs for well-defined security policy enforcement can occur within the emerging software-defined network paradigm, but also that this paradigm offers the opportunity for radically new innovations in dynamic network defense.</p><p>The FortNOX Enforcement Kernel. We introduce a new security policy enforcement kernel (called FortNOX) as an extension to the open source NOX OpenFlow controller <ref type="bibr" target="#b10">[10]</ref>. FortNOX incorporates a live rule conflict detection engine, which mediates all Open-Flow rule insertion requests. A rule conflict is said to arise when the candidate OpenFlow rule enables or disables a network flow that is otherwise inversely prohibited (or allowed) by existing rules. Rule conflict analysis is performed using a novel algorithm, which we call alias set rule reduction, that detects rule contradictions, even in the presence of dynamic flow tunneling using set and goto actions. When such conflicts are detected, FortNOX may choose to accept or reject the new rule, depending on whether the rule insertion requester is operating with a higher security authorization than that of the authors of the existing conflicting rules. FortNOX implements role-based authentication for determining the security authorization of each OF applications (rule producer), and enforces the principle of least privilege to ensure the integrity of the mediation process.</p><p>Contributions. In summary, our paper makes the following contributions:</p><p>• Presentation of the security enforcement challenge in Open-candidate flow rule against the current set of flow rules within the Aggregate Flow We add two additional interfaces that enable FortNOX to provide enforced flow rule mediation. First, we introduce an IPC Proxy, which enables a legacy native C OF application to be instantiated as a separate process, and ideally operated from a separate nonprivileged account. The proxy interface adds a digital signature extension, enabling these applications to sign flow rule insertion requests, which then enables FortNOX to impose role separations based on these signatures. Through process separation, we are able to enforce a least privilege principle in the operation of the control infrastructure. Through the proxy mechanism, OF applications may submit new flow rule insertion requests, but these requests are mediated separately and independently, by the conflict resolution service operated within the controller.</p><p>Finally, in Section 3.5, we describe a security directive translator, which enables security applications to express flow constraint policies at a higher layer of abstraction, agnostic to the OF controller, OF protocol version, or switch state. The translator receives security directives from a security application, then translates the directive into applicable flow rules, digitally signing these rules, and forwards them to FortNOX.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Role-based Source Authentication</head><p>FortNOX recognizes by default three authorization roles among those agents that produce flow rule insertion requests. These roles may be augmented with sub-roles, as needed when deployed. The first role is that of human administrators, whose rule insertion requests are assigned the highest priority within FortNOX's conflict resolution scheme, as well as the highest flow rule priority attributes sent to the switch. Second, security applications are assigned a separate authorization role. These security applications produce flow rules that may further constrain the administrator's static network security policy based on newly perceived runtime threats, such as a malicious flow, an infected internal asset, a blacklist-worthy external entity, or an emergent malicious aggregate traffic pattern. Flow insertion requests produced by security applications are assigned a flow rule priority below that of administrator-defined flow rules. Finally, non-security-related OF applications are assigned the lowest priority.</p><p>Roles are implemented through a digital signature scheme, in which FortNOX is preconfigured with the public keys of various rule insertion sources. FortNOX augments NOX's flow rule insertion interface to incorporate a digital signature per flow request. If a legacy OF application does not choose to sign its flow rules, those rules are assigned the default role and priority of a standard OpenFlow application.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Alias Set Rule Reduction</head><p>To detect a conflict between a newly inserted candidate Open-Flow rule and the existing OpenFlow rule set, the source and destination IP addresses, their ports, and wild card members we convert all rules, including the candidate rule, into a representation we call alias reduced rules (ARRs), and then perform our conflict analysis on these ARRs. An alias reduced rule is simply a derivation of the flow rule in which we expand the rule's match criteria to explicitly incorporate set operation transformations and wildcards. An initial alias set is created, containing the first rule's IP addresses, network masks, and ports (where 0 (zero) represents any port). If the rule's action causes a field substitution via a set action, the resultant value is added to the alias set, which is then used to replace the criteria portion of the ARR. We then conduct a pairwise analysis of the candidate ARR to the current set of ARRs that represent the active rule set. If there is an intersection between both the source and address sets, the union of the respective sets is used as the subsequent rule's alias set. For example, given the OF security rule,</p><formula xml:id="formula_0">a → b drop packet (1)</formula><p>its source alias set is (a), while its destination alias set is (b). The derived rule is</p><formula xml:id="formula_1">(a) → (b) drop packet (2)</formula><p>For the candidate (evasion) rule set,</p><formula xml:id="formula_2">1 a → c set (a ⇒ a') 2 a' → c set (c ⇒ b) 3 a' → b forward packet<label>(3)</label></formula><p>the intermediate alias sets are</p><formula xml:id="formula_3">1 a → c set (a ⇒ a') (a, a') (c) 2 a' → c set (c ⇒ b) (a, a') (c, b) 3 a' → b forward packet (a, a') (c, b) forward packet<label>(4)</label></formula><p>and the derived rule is</p><formula xml:id="formula_4">(a, a') ⇒ (c, b) forward packet (5)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Rule Set Conflict Evaluation</head><p>FortNOX first performs alias set rule reduction on the candidate rule. These validity checks are then performed between the candidate ARR cRule and the set of ARRs representing the active flow rules fRule, as follows:</p><p>1. Skip any cRule/fRule pair with mismatched prototypes.</p><p>2. Skip any cRule/fRule pair whose actions are both either forward or drop packet.</p><p>3. If cRule's alias sets intersect those of fRule's, declare a conflict. Thus, given the example flow description in Equation 2 and the candidate rule set in Equation <ref type="formula">5</ref>, assuming that both rules are TCP protocol, the first candidate rule passes the first two checks. However, for the third check, because the intersection of the source and destination alias sets results in (a) and (b), respectively, the candidate rule is declared to be in conflict.</p><p>As a practical consideration, because OpenFlow rules permit both wildcard field matches and IP address network masks, determining alias set intersection involves more than simple membership equality checks. To accommodate this, we define comparison operators that determine if a field specification is (i) more encompassing ("wider"), (ii) more specific ("narrower"), (iii) equal, or (iv) unequal. Thus, an intersection occurs when the pairwise comparisons between all fields of a candidate rule are wider than, equal to, or narrower than that of the corresponding fields of the constraint table rule.</p><p>For a formalization of the above, we first define some terms: (i) Si is the i th entry of security constraints, (ii) Fi is the i th entry of flow rules, (iii) SCi,j is the j th item of the i th entry of the condition part of security constraint, (iv) SAi is the i th entry of the action part of the security constraint, (v) F Ci,j is the j th item of the i th condition part of a flow rule from unprivileged applications, and (vi) F Ai is the i th action part of the flow rule. At this time, both SCi,j and F Ci,j are sets whose elements are one of the specific value or some ranges and j ∈ {1, 2, ..., 14}. Rule contradiction is then formalized using the following notation: if there is any Si, satisfying SCi,j ∩ F Ci,j = and SAi = F Ai, for all j, thenFi is conflicted with Si (6)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Conflict Resolution</head><p>When the above alias rule reduction algorithm detects a conflict between an existing rule in the aggregate flow table and a candidate flow rule, disposition of the candidate rule is evaluated based on the authorization roles possessed by the rule insertion source. If the source of the flow rule insertion request is operating with an authorization role greater that than of the conflicted rule in the aggregate flow table, then the new candidate rule overrides the existing rule. The existing rule is purged from both the aggregate flow table and the switch, and the candidate rule is inserted into both. If the source of the insertion request is a source whose authorization role is lower than that of a conflicting rule in the aggregate flow table, then the new candidate rule is rejected, and an error is returned to the application.</p><p>If the source of the insertion requester operates with equal authorization to that of the conflicting rule in the aggregate flow table, then FortNOX enables the administrator to specify the resolution outcome. By default, the new rule will override the previous rule.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">State Table Manager</head><p>The State Table Manager and Flow Rule Timeout Callback modules manage the state of all active flow rules that are enforced by FortNOX, as well as their disposition of the rule with respect to the switch's flow table and the authorization role of the rule's producer. When a flow rule is successfully inserted into the switch, its ARR is stored in the aggregate flow table. Rules are deleted through explicit timers provided through the Security Directives Translator (below), or when found in conflict with a candidate rule inserted from a producer operating at a higher authorization level.</p><p>When a rule is entered into the aggregate flow table it has the effect of prohibiting the switch from receiving subsequent flow rules that conflict with this rule. However, the switch may currently hold a rule in its flow table that conflicts with the current flow rule. As stated earlier, the aggregate flow table includes an attribute to indicate which rules are resident in the switch's flow table. When a local rule is purged from the aggregate flow table that is also found to be resident in the flow table switch, FortNOX asks the switch to delete the lower-priority conflicting rule, and it adds the new higher-priority rule to the switch.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Security Directive Translation</head><p>The Security Directive Translator is a python interface that mediates a set of high-level threat mitigation directives into flow rules, which are then digitally signed and submitted to FortNOX. The current security directive translator implements seven security directives: block, deny, allow, redirect, quarantine, undo, constrain and info. Block implements a full duplex filter between a CIDR Block and the internal network, where the primary use for this command is in blacklist enforcement. The deny, allow, undo and info directives are similar to their firewall counterparts and capable of being refined down to an individual flow. However, these two directives are implemented using the address resolution protocol, and thus enforce both directly conflicting flows, and indirect flows involving the use of set commands designed to establish indirect tunnels.</p><p>Redirect enables a security application to tunnel all flows between a source and given target, to a new target location of the security application's choice. The switch is directed to rewrite the packet headers of all applicable flows such that the source cannot tell that its flows have been redirected to the new target. A common application for this directive includes the redirection of a malicious scanner into a honeynet. The quarantine directive enables a security application to essentially isolate an internal host from the network. It further redirects all HTTP communications that are initiated from the quarantined machine to a proxy server that may report quarantine notifications to the end user who may be operating the HTTP browser. Finally, the constrain directive enables one to deactivate all current flow rules in the switch that are not set to priority N. This directive may be used in an emergency operating mode, such as a DDoS, where during the emergency only a pre-defined set of flows should be enabled (i.e., an emergency policy can be specified and activated, overriding all other flow rules until the emergency is remediated).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">IMPLEMENTATION</head><p>FortNOX is implemented as a native C++ extension of the NOX source code in approximately 500 lines of C++ code. We modified the send_openflow_command function, whose main operation is to send OpenFlow commands to network switches, to capture flow rules from all OpenFlow applications, i.e., of both security (privileged) and non-security (unprivileged) applications. FortNOX intercepts flow rules in the function and stores them into the security constraints table if the rules are from privileged security applications (i.e., flow rules produced through the privileged path are considered trusted flow rules and are preserved as active network security constraints). If a flow rule is from an unprivileged application, FortNOX evaluates the rule to determine if a conflict exists within its security constraints table. If there are conflicts, an error message is returned to the OF application. Otherwise, the rule is forwarded to the network switches.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">EVALUATION</head><p>To analyze the performance overhead of FortNOX in conducting inline OpenFlow rule conflict analysis, we deployed our FortNOX prototype into a laboratory network operating an HP ProCurve E6600 OpenFlow-enabled switch, firmware version K.15.05.5001. We compiled FortNOX into NOX version destiny 0.9.1 (full beta), and conducted our flow rule conflict analysis using the alias set rule reduction algorithm. FortNOX was hosted on an Intel Xeon 2.67 GHz E5640 CPU with 12 GB RAM, a 1 Gbps network link, and running an Ubuntu-Server v10.10. The experiment was conducted using a dedicated packet generator and a second server used for receiving flows, both linked to OF-enabled ports on the ProCurve via 1 Gbps network links. Packet generation was performed using hping <ref type="bibr" target="#b20">[20]</ref> version 3.0.0 Alpha 2 operated from a dedicated Intel Xeon 3.2 GHz CPU running Ubuntu-Server v10.10 and directed to a similarly provisioned server. The server wass configured and provisioned roughly identical to the traffic generator.</p><p>In the experiment, our objective was to measure the computational impact of conducting flow rule conflict analysis between a candidate flow rule and an increasingly large corpus of active flow rules. To baseline the experiment, we employed NOX with an optimized module_manager.py for flow rule insertion. Mod-ule_manager.py was modified to insert 4-tuple-based flow rules into the ProCurve per unique flow request. In our baseline test, we evaluate the NOX rule insertion handling logic by generating 1000 flow rule insertions at a uniform rate of 100 new UDP flows per second, where each UDP flow caused NOX to produce a new flow rule. The UDP flows were directed at an address running the Discard service so that no response packets would be generated. Since our focus was to isolate the computational overhead of flow rule conflict evaluation, this traffic profile was selected to minimize delays due to switch-local garbage collection and switch-side buffering. The same experimental traffic profile was then run using the Fort-NOX controller where we varied the experiment by evaluating the same 1000 candidate flow rule insertions. However, this time we pre-seeded the FortNOX aggregate flow table with 1, 10, 100, 500, and 1000, unique resident flow rules, against which the set of 1000 candidate flows were evaluated for conflicts. In Figure <ref type="figure" target="#fig_0">3</ref>, we illustrate the results through a series of cumulative distribution functions representing the computational delay required to conduct full pairwise rule conflict analysis. The experiment suggests that FortNOX's conflict evaluation overhead is in the worst case linear with respect to the number of rules. Note, our experiments represent a uniform priority scenario (with no whitelisting rules) in which we force an evaluation of each incoming flow against each resident flow rule, which in practice would represent a worst case scenario. Our algorithm pre-segments active flow rules based on priorities and actions type, which in operational scenarios enables substantial prefiltering of the number of active flow rules that a candidate rule would be evaluated against (e.g., a candidate forward rule would be subject to conflict evaluation against other forward rules).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">RELATED WORK</head><p>The FortNOX security kernel is inspired by prior research focused on testing or verifying firewall and network device configuration <ref type="bibr" target="#b7">[7,</ref><ref type="bibr" target="#b13">13,</ref><ref type="bibr" target="#b2">2,</ref><ref type="bibr" target="#b23">23,</ref><ref type="bibr" target="#b1">1]</ref>, e.g., using Firewall Decision Diagrams (FDDs) <ref type="bibr" target="#b13">[13]</ref> or test case generators <ref type="bibr" target="#b21">[21,</ref><ref type="bibr" target="#b7">7]</ref>. The problem of routing misconfigurations has been well studied in the context of interdomain routing protocols like BGP. For example, researchers have investigated the problem of modeling network devices to conduct reachability analysis <ref type="bibr" target="#b2">[2,</ref><ref type="bibr" target="#b23">23]</ref>. The router configuration checker (rcc) uses constraint solving and static analysis to find faults in BGP configurations <ref type="bibr" target="#b8">[8]</ref>. Their system detects faults leading to invalid routes and invisible routes. In this space, our work is perhaps most closely related to header space analysis, a static analysis approach to detecting network misconfigurations <ref type="bibr" target="#b11">[11]</ref>.</p><p>The OpenFlow standard has as its roots a rich body of work on control-flow separation and clean-slate design of the Internet (e.g., <ref type="bibr" target="#b5">[5]</ref>, <ref type="bibr">[9]</ref>). SANE <ref type="bibr" target="#b6">[6]</ref> and Ethane <ref type="bibr" target="#b5">[5]</ref> propose new architectures for securing enterprise networks. The SANE <ref type="bibr" target="#b6">[6]</ref> protection layer proposes a fork-lift (clean-slate) approach to upgrading enterprise network security that introduces a centralized server, i.e., domain controller, to authenticate all elements in the network and grant access to services in the form of capabilities that are enforced at each switch. Ethane <ref type="bibr" target="#b5">[5]</ref> is a more practical and backwards-compatible instantiation of SANE that requires no modification to end hosts. Ethane switches reside alongside traditional network switches and communicate with the centralized controller that implements policy. Both studies may be considered as catalysts for the emergence of OpenFlow and software-defined networking. FortNOX is built over the foundations laid by these studies and shares a common objective in improving enterprise security using programmable network elements. We build our system on NOX, which is an opensource OF controller <ref type="bibr" target="#b10">[10]</ref>; however, our methodology could be extended to other architectures like Beacon <ref type="bibr" target="#b18">[18]</ref>, Maestro <ref type="bibr" target="#b3">[3]</ref>, and DevoFlow <ref type="bibr" target="#b15">[15]</ref>. FlowVisor is a platform-independent OF controller that uses network slicing to separate logical network planes, allowing multiple researchers to run experiments safely and independently in the same production OpenFlow network <ref type="bibr" target="#b22">[22]</ref>. FlowVisor cares primarily about non-interference across different logical planes (slices) but does not instantiate network security constraints within a slice. It is possible that an OF application uses packet modification functions resulting in flow rules that are applied across multiple network switches within the same slice. In such cases, we need a security enforcement kernel such as FortNOX to resolve conflicts.</p><p>The need for better policy validation and enforcement mechanisms has been touched on by prior and concurrent research efforts. The Resonance architecture enables dynamic access control and monitoring in SDN environments <ref type="bibr" target="#b16">[16]</ref>. The FlowChecker system encodes OpenFlow flow tables into Binary Decision Diagrams (BDD) and uses model checking <ref type="bibr" target="#b1">[1]</ref> to verify security properties. However, the evaluation of FlowChecker does not consider handling of set action commands, which we consider to be a significant distinguisher for OpenFlow networks. NICE provides a model-checking framework that uses symbolic execution for automating the testing of OpenFlow applications <ref type="bibr" target="#b4">[4]</ref>. More recently, researchers have proposed developing language abstractions to guarantee consistency of flow updates in software-defined networks <ref type="bibr" target="#b19">[19]</ref>. In contrast, our complementary work on the FortNOX security enforcement kernel is focused on detection of rule update conflicts and security policy violations. Veriflow proposes to slice the network into equivalence classes to efficiently check for invariant property violations <ref type="bibr" target="#b12">[12]</ref>. The alias set rule reduction algorithm of Fort-NOX is complementary to this approach.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">CONCLUSION</head><p>We motivated and presented the design of FortNOX, a software extension that empowers OF security applications with the ability to produce enforceable flow constraints. Our design incorpo-rates several critical components that are necessary for enabling security applications in OF networks including role-based authorization, rule reduction, conflict evaluation, policy synchronization, and security directive translation. Our prototype implementation demonstrates the feasibility and viability of our alias-set rule reduction approach. FortNOX rule conflict analysis imposes minimal additional latency over standard NOX, with an average overhead of less than 7 ms for evaluating a candidate flow rule against 1000 existing flow rules. FortNOX is an important first step in improving the security of OF networks, but much work remains in building out a rich suite of applications that cover a wide range of security services.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: These CDF plots present the computational latencies imposed over UDP flows by NOX and FortNOX. Five plots illustrate FortNOX performance in conducting conflict evaluation per flow against 1, 10, 100, 500 and 1000 flow rules.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>Table (Section 3.2). If the Conflict Analyzer determines that the candidate flow rule is consistent with the current network flow rules, the candidate rule is forwarded to the switch and stored in the aggregate flow table, maintained by the State Table Manager (Section 3.4). FortNOX adds a flow rule timeout callback interface to NOX, which updates the aggregate flow table when switches perform rule expiration.</figDesc><table /></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">ACKNOWLEDGMENTS</head><p>We are grateful for helpful comments from Peter Neumann and the anonymous reviewers to an earlier version of this paper. This material is based upon work supported through the U.S. Army Research Office under the Cyber-TA Research Grant No. W911NF-06-1-0316 and NSF Grant No. CNS-0954096. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the Army Research Office or the National Science Foundation.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName><surname>References</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">FlowChecker: Configuration Analysis and Verification of Federated Openflow Infrastructures</title>
		<author>
			<persName><forename type="first">E</forename><surname>Al-Shaer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Al-Haj</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 3rd ACM SafeConfig Workshop</title>
		<meeting>the 3rd ACM SafeConfig Workshop</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Network Configuration in A Box: Towards End-to-End Verification of Network Reachability and Security</title>
		<author>
			<persName><forename type="first">E</forename><surname>Al-Shaer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Marrero</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>El-Atawy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Elbadawi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Conference on Network Protocols</title>
		<meeting>the IEEE International Conference on Network Protocols</meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Maestro: A System for Scalable OpenFlow Control</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Cai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">L</forename><surname>Cox</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">E</forename><surname>Ng</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
		<respStmt>
			<orgName>Rice University Technical</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Report</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A NICE Way to Test OpenFlow Applications</title>
		<author>
			<persName><forename type="first">M</forename><surname>Canini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Venzano</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Peresini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Kostic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Symposium on Network Systems Design and Implementation</title>
		<meeting>the Symposium on Network Systems Design and Implementation</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Ethane: Taking Control of the Enterprise</title>
		<author>
			<persName><forename type="first">M</forename><surname>Casado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Freedman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pettit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGCOMM</title>
		<meeting>ACM SIGCOMM</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">SANE: A Protection Architecture for Enterprise Networks</title>
		<author>
			<persName><forename type="first">M</forename><surname>Casado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Garfinkel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Freedman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Akella</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Boneh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mckeowon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Usenix Security Symposium</title>
		<meeting>the Usenix Security Symposium</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">An Automated Framework for Validating Firewall Policy Enforcement</title>
		<author>
			<persName><forename type="first">A</forename><surname>El-Atawy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Samak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Wali</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Al-Shaer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Pham</surname></persName>
		</author>
		<author>
			<persName><surname>Li</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Detecting BGP Configuration Faults with Static Analysis</title>
		<author>
			<persName><forename type="first">N</forename><surname>Feamster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Balakrishnan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of theUsenix Symposium on Network Systems Design and Implementation</title>
		<meeting>theUsenix Symposium on Network Systems Design and Implementation</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A Clean Slate 4D Approach to Network Control and Management</title>
		<author>
			<persName><forename type="first">A</forename><surname>Greenberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Hjalmtysson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Maltz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Myers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Yan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Zhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM Computer Communications Review</title>
		<meeting>ACM Computer Communications Review</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">NOX: Towards an Operating System for Networks</title>
		<author>
			<persName><forename type="first">N</forename><surname>Gude</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Koponen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pettit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Pfaff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Casado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM Computer Communications Review</title>
		<meeting>ACM Computer Communications Review</meeting>
		<imprint>
			<date type="published" when="2008-07">July 2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Header Space Analysis: Static Checking for Networks</title>
		<author>
			<persName><forename type="first">P</forename><surname>Kazemian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Varghese</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Symposium on Network Systems Design and Implementation</title>
		<meeting>the Symposium on Network Systems Design and Implementation</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">VeriFlow: Verifying Network-Wide Invariants in Real Time</title>
		<author>
			<persName><forename type="first">A</forename><surname>Khurshid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Caesar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">B</forename><surname>Godfrey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM Sigcomm HotSDN Workshop</title>
		<meeting>ACM Sigcomm HotSDN Workshop</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Formal Verification of Firewall Policies</title>
		<author>
			<persName><forename type="first">A</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Conference on Communications (ICC)</title>
		<meeting>the International Conference on Communications (ICC)</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">OpenFlow: Enabling Innovation in Campus Networks</title>
		<author>
			<persName><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Balakrishnan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Parulkar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Peterson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Turner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM Computer Communications Review</title>
		<meeting>ACM Computer Communications Review</meeting>
		<imprint>
			<date type="published" when="2008-04">April 2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">DevoFlow: Cost-effective Flow Management for High Performance Enterprise Networks</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Mogul</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Tourrilhes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Yalagandula</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Sharma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">R</forename><surname>Curtis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Banerjee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 10th ACM Workshop on Hot Topics in Networks (HotNets)</title>
		<meeting>the 10th ACM Workshop on Hot Topics in Networks (HotNets)</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Resonance: Dynamic Access Control for Enterprise Networks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Nayak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Reimers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Feamster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Clark</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1st ACM SIGCOMM WREN Workshop</title>
		<meeting>the 1st ACM SIGCOMM WREN Workshop</meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">OpenFlow 1.1.0 Specification</title>
		<author>
			<persName><surname>Openflow</surname></persName>
		</author>
		<ptr target="http://www.openflow.org/documents/openflow-spec-v1.1.0.pdf" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title/>
		<author>
			<persName><surname>Openflowhub</surname></persName>
		</author>
		<author>
			<persName><surname>Beacon</surname></persName>
		</author>
		<ptr target="http://www.openflowhub.org/display/Beacon" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Consistent Update for Software-Defined Networks: Change You Can Believe</title>
		<author>
			<persName><forename type="first">M</forename><surname>Reitblatt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Walker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">! In Proceedings of the ACM Workshop on Hot Topics in Networks</title>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">HPing home page</title>
		<author>
			<persName><forename type="first">S</forename><surname>Sanfilippo</surname></persName>
		</author>
		<ptr target="http://www.hping.org" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Firewall Conformance Testing</title>
		<author>
			<persName><forename type="first">D</forename><surname>Senn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Basin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Caronni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IFIP TestCom</title>
		<meeting>the IFIP TestCom</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Can the Production Network Be the Testbed</title>
		<author>
			<persName><forename type="first">R</forename><surname>Sherwood</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Gibb</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K.-K</forename><surname>Yap</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Appenzeller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Casado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Parulkar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Usenix Symposium on Operating System Design and Implementation (OSDI)</title>
		<meeting>the Usenix Symposium on Operating System Design and Implementation (OSDI)</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">On Static Reachability Analysis of IP Networks</title>
		<author>
			<persName><forename type="first">G</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Zhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Maltz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Greenberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Hjalmtysson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceeding of IEEE INFOCOM</title>
		<meeting>eeding of IEEE INFOCOM</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
