<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main"></title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Center for Intelligent Systems</orgName>
								<orgName type="department" key="dep2">Department of Computer Science</orgName>
								<orgName type="institution">Technion-Israel Institute of Technology</orgName>
								<address>
									<settlement>Haifa</settlement>
									<country key="IL">Israel</country>
								</address>
							</affiliation>
						</author>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">20DDAB768CA19959044AC47E0700C9F9</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T04:24+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Sensory-Based Motion Planning with Global Proofs</head><p>Ishay Kamon, Student Member, IEEE, and Ehud Rivlin, Member, IEEE Abstract-We present DistBug, a new navigation algorithm for mobile robots which exploits range data. The algorithm belongs to the Bug family, which combines local planning with global information that guarantees convergence. Most Bug-type algorithms use contact sensors and consist of two reactive modes of motion: moving toward the target between obstacles and following obstacle boundaries. DistBug uses range data in a new "leaving condition" which allows the robot to abandon obstacle boundaries as soon as global convergence is guaranteed, based on the free range in the direction of the target. The leaving condition is tested directly on the sensor readings, thus making the algorithm simple to implement. To further improve performance, local information is utilized for choosing the boundary following direction, and a search manager is introduced for bounding the search area. The simulation results indicate a significant advantage of DistBug relative to the classical Bug2 algorithm. The algorithm was implemented and tested on a real robot, demonstrating the usefulness and applicability of our approach.</p><p>Index Terms-Mobile robots, sensor-based navigation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>A UTONOMOUS navigation of indoor mobile robots has received considerable attention in recent years. Work in this area was motivated by applications such as office cleaning, cargo delivery, etc. In realistic settings, the robot cannot base its motion planning on complete a priori knowledge of the environment. The robot must rather use its sensors to perceive the environment and plan accordingly. The two main sensorbased motion planning approaches use either global planning or local planning. Let us briefly describe these approaches and point out their limitations.</p><p>In the global sensor-based planning approach, the mobile robot builds a global world model based on sensory information and uses it for path planning <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b19">[20]</ref>, <ref type="bibr" target="#b20">[21]</ref>. This approach guarantees global convergence to the target. However, the construction and maintenance of a global model based on sensory information imposes a heavy computational burden on the robot. Moreover, the reliance on a global model for navigation requires frequent localization of the robot relative to the model, a process which is difficult to attain due to the inherent uncertainties of practical sensors <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b15">[16]</ref>. Recent works use the global approach to achieve sensor-based navigation of general robots <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b16">[17]</ref>.</p><p>In contrast, local path-planners use local sensory information in a largely reactive fashion. They are much simpler to implement than global planners, since they typically map the sensor readings directly to actions. Various examples include potential-field methods <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b7">[8]</ref>, fuzzy logic approaches <ref type="bibr" target="#b6">[7]</ref>, <ref type="bibr" target="#b14">[15]</ref>, and specialized approaches <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b2">[3]</ref>. As with any local search method, local path-planners do not guarantee global convergence to the target since they may get trapped in local minima.</p><p>Thus, the global approaches are difficult to implement, while the local ones lack a global convergence guarantee. This paper focuses on a midway approach, called the Bug approach, which was originated by Lumelsky and Stepanov <ref type="bibr" target="#b12">[13]</ref>, and subsequently studied in <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b13">[14]</ref>, and <ref type="bibr" target="#b17">[18]</ref>. This approach combines local planning with a globally convergent criterion as follows. Initially, the robot moves directly toward the target. When the robot hits an obstacle it starts to follow the obstacle boundary. The robot leaves the obstacle boundary and resumes motion toward the target only when a leaving condition, which monitors a globally convergent criterion, holds. The Bug approach reduces the reliance on a global model to the essential minimum of loop detection while augmenting the purely reactive navigation decisions with a globally convergent criterion. This approach thus minimizes the computational burden on the planner while still ensuring global convergence to the target. However, the Bug algorithms mainly use contact sensors. Range data was incorporated only at a later stage in an algorithm termed VisBug <ref type="bibr" target="#b11">[12]</ref>, which calculates shortcuts relative to the path generated by the Bug2 algorithm from <ref type="bibr" target="#b12">[13]</ref>, or to the line [Start,Target] (Fig. <ref type="figure" target="#fig_0">1</ref>).</p><p>This paper presents a new Bug algorithm, termed DistBug, which specifically exploits range data. Our main contribution is a new leaving condition which allows the robot to abandon obstacle boundaries as soon as global convergence is guaranteed, based on the free range in the direction of the target. To further improve performance, local information is utilized for choosing the boundary following direction, and a search manager is introduced for bounding the search area. As a direct result of these extensions, a significant improvement in the performance has been achieved.</p><p>The rest of this paper is organized as follows: in Section II we present the DistBug algorithm, show that it is globally convergent, and provide an upper bound for its path length. In Section III we present the experimental results. Finally, the conclusions are presented in Section IV.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. THE DistBug ALGORITHM</head><p>The DistBug algorithm navigates a point robot in a planar unknown environment populated by stationary obstacles with arbitrary shape. The robot is equipped with a range sensor with maximal detection range</p><p>The DistBug algorithm The target is unreachable. Stop.</p><p>Next we elaborate on the leaving condition. Motivated by the fact that moving along a straight path is faster and safer than boundary following, the leaving condition is designed to abandon the boundary as soon as convergence is guaranteed. The leaving condition holds when one of the following terms is satisfied: either or The first term, is triggered when the target becomes visible and can be reached directly. The second term, guarantees that the distance to the target decreases by at least Step between successive hit points, The leaving condition is based on the minimal distance achieved along the followed boundary, and not on to prevent a scenario in which the next hit point is located on a part of the boundary which was already traversed. The size of the parameter Step is discussed in Section II-A. Note that when the leaving condition holds it is physically possible to move directly toward the target, since necessarily holds. The DistBug algorithm has several practical advantages over existing Bug algorithms. It is simple to implement because it uses range data directly, in contrast to modeling the local environment in VisBug. Compared to the Bug2 and VisBug algorithms from <ref type="bibr" target="#b11">[12]</ref> and <ref type="bibr" target="#b12">[13]</ref>, the generated paths are closer to the optimal ones since the leaving condition is not based on the line and increasing the sensor range allows to leave obstacle boundaries earlier (Fig. <ref type="figure" target="#fig_0">1</ref>). To guarantee convergence to the target, the DistBug algorithm needs small amount of global information. Global positioning is necessary only during boundary following, for updating and for determining that the robot completed a loop around an obstacle. (Similar to the assumptions underlying purely local planners, we assume here that the direction from the current location to the target is known, and that the robot can determine when the target is reached.) The leaving condition is robust with respect to noise in because the parameter Step forces a significant improvement in the distance to the target. Choosing Step larger than the expected position error guarantees convergence in the presence of noise. <ref type="foot" target="#foot_0">1</ref> Note that DistBug is purely reactive when the target is visually tracked, because in this case can be extracted directly from the visual information.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Algorithm Analysis</head><p>First, we analyze the convergence of the DistBug algorithm under the assumption that the minimal distance between obstacles is</p><p>In Section II-B we will present a modified version of the leaving condition, which can be used when no a priori knowledge about the environment is available. The value of the parameter Step is set to where is the maximal detection range. We also assume that the perimeter of each obstacle is finite. Next, we prove that DistBug is complete and give an upper bound on its performance.</p><p>Lemma 2.1: If the target is reachable from a hit point the leaving condition will cause the robot to leave the obstacle after a finite-length path.</p><p>Proof: Starting from the robot uses the boundary following behavior to move along the obstacle boundary. It will eventually reach a point which is closest to along the boundary. At this point Since is reachable, it must be possible to move from directly toward hence</p><p>We next show that the leaving condition holds at considering the following three cases. If the target is visible then the term holds. If the target is not visible and no obstacle is detected in the direction of the target then</p><p>In this case the term holds because If an obstacle is detected in the direction of the target, holds because the detected obstacle must be different from the currently followed one. In this case holds because Theorem 1: DistBug always terminates after following a finite-length path.</p><p>Proof: The path generated by the algorithm consists of motion toward the target segments and boundary following segments. The path length of each motion toward the target segment is finite because it is a straight line pointing toward the target. The path length of each boundary following segment is bounded by the perimeter of the followed obstacle. To prove that the algorithm terminates after following a finite-length path, we show that there is a finite number of motion segments. It is sufficient to show that the leaving condition enables the robot to leave obstacles only a finite number of times. The first term, can be used at most once, because the robot can reach the target directly after this condition holds. The second term, can be used at most times, where After the robot hits the th obstacle it has two possibilities: either the target will be reached directly using the first term, or the robot will not be able to leave the obstacle. In the second case the robot will complete a loop around the obstacle and halt. Hence there is a finite number of motion segments, and the algorithm terminates after following a finite-length path.</p><p>Theorem 2: DistBug finds the target if it is reachable from the start point.</p><p>Proof: Every motion toward the target segment terminates either at the target or at a hit point If is reachable from Lemma 2.1 guarantees that every boundary following segment terminates at a leave point. Since the number of boundary following segments is finite and every such segment is followed by a motion toward the target segment, there is a last motion toward the target segment. This last segment terminates at the target.</p><p>Proposition 2.2: An upper bound on the path length that DistBug generates is where is the maximal obstacle perimeter from the obstacles intersecting the disc of radius centered at and is the maximal sensor range. Proof: To bound the path length of motion toward the target segments, we introduce new notations. Every leave point is associated with a reach point to which the distance in freespace is measured along the line so that A reach point is located either in freespace or on an obstacle boundary</p><p>The leaving condition guarantees that and path construction guarantees that because either is the next hit point or the robot proceeds from toward the target. We denote the starting point as and the target as for some</p><p>The accumulated sum of segments is bounded by since the start point of each segment is closer to the target than the endpoint of the previous one, and these segments all point toward</p><p>The accumulated sum of segments is bounded by because the leaving condition may hold at most times, and the length of each segment is bounded by the detection range Thus bounds the path length of motion toward the target segments.</p><p>The path length of each boundary following segment is bounded by the perimeter of the followed obstacle. The robot may hit at most obstacles, because the leaving condition may hold at most times. All the hit points are contained in the disc of radius centered at because the distance to the target decreases along motion toward the target segments. Thus the term bounds the path length of boundary following segments.</p><p>This upper bound is comparable with the upper bound for Bug2 from <ref type="bibr" target="#b12">[13]</ref>, because the robot may hit each obstacle times, where is not fixed. We may also ask what is the lower bound. In <ref type="bibr" target="#b17">[18]</ref>, Sankaranarayanan and Vidyasagar show that the worst-case lower bound on the path length of Bug-type algorithms is where is the perimeter of the th obstacle which intersects the disc of radius centered at They also propose an algorithm which uses a contact sensor and achieves this bound as its upper bound. But their algorithm is not truly reactive, as it maintains a global data structure of all the hit and leave points. In contrast, DistBug stores only the last hit point. Moreover, the same global data can be incorporated into DistBug, with a similar effect of a better bound on the path length.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Assuming No Knowledge about the Environment</head><p>When no a priori knowledge about the environment is available, setting too big a Step may prevent the robot from leaving obstacles, and thus from reaching the target. To overcome this problem we present a modified version of the leaving condition. We add a version of the leaving condition from Bug2 algorithm to our range-based leaving condition, using a boolean relation. In this way the robot can always leave an obstacle. We define CROSS (line crossing) as a boolean condition that holds if the robot meets the straight line between the last hit point and the target We define the following subconditions: and</p><p>The modified leaving condition is C1 OR C2.</p><p>A sketch of the convergence proof for the modified leaving condition now follows.</p><p>The condition alone guarantees reaching the target in a finite length path if the target is reachable (the complete proof is presented in <ref type="bibr" target="#b12">[13]</ref>). Considering any leave point as a new start, convergence is guaranteed if alone will be used after . The condition can be activated at most times along the path, thus defining at most leave points. After the last leave point defined by , the algorithm will converge using the subcondition alone.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Using Local Information and Search Management</head><p>In the following we present several extensions to the algorithm, which proved to be very effective in our experiments. First we describe a method for choosing the initial boundary  following direction based on local information, and explain why it is appropriate to use this method together with the range-based leaving condition. We then describe a local criterion for reversing the boundary following direction and a search manager for bounding the search area.</p><p>Partial use of local information may cause undesirable behavior. For a class of typical scenarios, using the proposed leaving condition while keeping a fixed boundary following direction causes the robot to traverse several times the same part of the boundary, as shown in Fig. <ref type="figure" target="#fig_1">2</ref>. In this example we assume infinite sensor range and the boundary following direction is clockwise. Moving from to the robot hits the obstacle in and follows its boundary until where the leaving condition holds, because The robot then moves from to and follows the boundary until from which it moves directly toward Note that the value of Step effects the path length in this scenario. A smaller</p><p>Step would cause the robot to perform more cycles, defining hit points between and (see for example the leave point and its corresponding hit point ). Using range data to choose the boundary following direction would significantly reduce the path length in this scenario. In the example presented above, the local information which triggers the leaving condition at is available to the robot before reaching Taking this information into account, the robot would choose the counterclockwise direction for boundary following from Based on this observation and considering we choose the initial boundary following direction based on the boundary orientation at the hit point. The robot turns to the direction which takes it closer to the target (Fig. <ref type="figure" target="#fig_2">3</ref>).</p><p>Local information can also be used during boundary following. We reverse the following direction when the current heading drives the robot away from the target, thus indicating that some part of the followed obstacle does not block the way from the robot to the target. (Similar considerations, based on a local map, are used in <ref type="bibr" target="#b18">[19]</ref>). In our experiments, the local reversing criterion is triggered when the angle between the robot heading and the direction toward the target exceeds 135 . The boundary following direction is reversed at most once after each hit point, to avoid oscillations.</p><p>The problem of path planning with incomplete knowledge can be viewed as a search problem <ref type="bibr" target="#b10">[11]</ref>. To facilitate the search we present a method for bounding the search area by "virtual obstacles," which takes inspiration from the iterative deepening approach introduced in <ref type="bibr" target="#b8">[9]</ref>. The robot first performs an exhaustive search within the bounded area. If the target is not found then the search area is enlarged. We use circles, centered at the target, as the virtual obstacles. A new virtual obstacle is defined whenever the robot hits an obstacle. When the robot first touches the virtual obstacle it reverses the boundary following direction. If the robot touches the virtual obstacle for the second time, it concludes that the target is unreachable within the current virtual obstacle, and consequently enlarges the search area. Note that the virtual obstacles are used as criteria for reversing the boundary following direction. Compared to the local criterion for reversing boundary following direction, the search manager is more robust with respect to local disturbances.</p><p>The extensions described above do not ruin the convergence of the DistBug algorithm. Choosing the initial boundary following direction has no influence on convergence. Using the local criterion for reversing the following direction, the direction can be reversed at most once after each hit point. Thus the robot can traverse the boundary at most twice after each hit point, and convergence is not disturbed. The search manager does not ruin convergence, because the search area is enlarged whenever the robot concludes that it is blocked within a virtual obstacle. Consequently, if a path to the target exists, it will eventually be contained within the search area. On the other hand, if the target is unreachable, the entire boundary segment which blocks the way to the target will eventually be contained within the search area. Therefore the robot will complete a loop around that boundary segment, conclude that the target is unreachable, and halt.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. EXPERIMENTAL RESULTS</head><p>The experimental study of the DistBug algorithm consists of simulations and experiments on a mobile robot. Simulations were performed to study the effect of the range-based leaving condition and the various extensions on the resulting paths. The simulations compared the DistBug algorithm with the classical Bug2 algorithm, showing that DistBug generates shorter and safer paths. The algorithm was also implemented on a Nomad200 robot, demonstrating the usefulness and applicability of our approach.</p><p>The performance of the DistBug algorithm was evaluated considering the average path length, which will be discussed below, and path safety, which will be discussed later. The algorithm was tested in two simulated environments. The simple environment "world1" consisted of convex nonintersecting obstacles (Fig. <ref type="figure" target="#fig_3">4</ref>), while the complex environment "world2" consisted of concave obstacles with an "office-like" shape (Fig. <ref type="figure" target="#fig_4">5</ref>). Unlimited sensor range was assumed in all the experiments, and the parameter Step was chosen as the minimal distance between obstacles. The results of path length comparison between plain versions of DistBug and Bug2 algorithms are presented in the first line of Table <ref type="table" target="#tab_0">I</ref>. The table contains the average path length over 100 runs in each environment, with randomly chosen start/target points, relative to the path length generated by Bug2. One can see that the DistBug algorithm generates shorter paths in both environments. A more significant improvement in the path length was achieved when local decisions and a search manager were added to the plain algorithm. We added our modifications one at a time to both DistBug and Bug2, and tested 100 runs in each environment. The results are summed up in Table <ref type="table" target="#tab_0">I</ref>. First, we added the method for choosing the initial boundary following direction (denoted D in Table <ref type="table" target="#tab_0">I</ref>). In the complex environment, "world2," the combination of this method and the range-based leaving condition generates paths which are significantly shorter than those generated by the Bug2 algorithm with the same modification. Next we added the local criterion for reversing the boundary following direction (denoted Rv in Table <ref type="table" target="#tab_0">I</ref>). The reversing criterion caused a significant improvement in "world2," but did not affect the results in "world1," since in most cases the convex obstacles did not drive the robot away from the target. The search manager (denoted SM in Table <ref type="table" target="#tab_0">I</ref>) was tested with the method for choosing the initial boundary following direction. The search manager generated results similar to the local reversing criterion (Fig. <ref type="figure" target="#fig_5">6</ref>). Encouraged by the significant improvement in performance of the Bug2 algorithm with the search manager, we believe that this mechanism can be successfully incorporated into other path-planning algorithms.</p><p>Path safety is an important property, which should be considered while evaluating path quality. We designed the following measure for path safety. The minimal distance from the robot to the surrounding obstacles was measured from every location along the path. The path safety for the entire path was defined as the average of this local safety distance. The bigger the average distance was-the safer was the path.  To conclude, the results show that the DistBug algorithm generates paths which are significantly shorter and safer than Bug2 paths when local information is used to choose the boundary following direction. Moreover, the DistBug algorithm regularly generates shorter paths: using local informa- tion, it performed better than Bug2 in 90% from the cases in "world1," and in 84% from the cases in "world2."</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Experiments in a Real-World Scenario</head><p>The DistBug algorithm was implemented and tested in more than 100 runs of our Nomad200 robot, demonstrating the simplicity and robustness of our approach. No model of the world was created, and the decisions were based directly on range data. The algorithm was successful in almost all the cases, driving the robot to the target location. However, several implementation problems were noticed. Most of the problems originated from the low reliability of the range sensors (sonar, infrared, and structured light) in the unstructured laboratory environment.</p><p>One of the experimental settings is presented in detail below. Several boxes created an oblique "wall" between the starting location and the target location (Fig. <ref type="figure" target="#fig_6">7</ref>). The robot reached the obstacles in point 1 and turned right. The robot then followed the obstacles until reaching the wall in point 2, where it turned away from the target. At that point the boundary following direction was reversed. The robot turned around and followed the obstacles boundary until point 3, in which the leaving condition was satisfied. From point 3 the robot moves straight to the target .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. SUMMARY AND CONCLUSIONS</head><p>We have presented DistBug, a new navigation algorithm for mobile robots which exploits range data. The algorithm belongs to the Bug family, which combines local planning with global information that guarantees convergence. The DistBug algorithm uses range-data in a new "leaving condition" which allows the robot to abandon obstacle boundaries as soon as global convergence is guaranteed, based on the free range in the direction of the target. We have proved the completeness The DistBug algorithm uses local information in a greedy way, and thus performs well in typical environments. The leaving condition allows the robot to abandon obstacles regardless of the straight line [Start, Target] which was the backbone of the Bug2 and VisBug algorithms from <ref type="bibr" target="#b12">[13]</ref> and <ref type="bibr" target="#b11">[12]</ref>. Moreover increasing the sensor range allows the robot to leave obstacle boundaries earlier. To further improve performance, we tested several extensions: local information was utilized for choosing the boundary following direction and a search manager was introduced for bounding the search area. The simulation results indicate a significant advantage of the DistBug algorithm relative to the algorithm Bug2 from <ref type="bibr" target="#b12">[13]</ref>. Moreover, the results show that the advantage of the range-based leaving condition becomes more apparent when local information is used for choosing the boundary following direction, as we have explained in Section II-C.</p><p>The DistBug algorithm has several practical advantages over existing Bug algorithms. It is simple to implement because the leaving condition is tested directly on the range readings. Global positioning is necessary only during boundary following, for updating and for determining that the robot completed a loop around an obstacle. The leaving condition is robust with respect to noise in the minimal distance to the target,</p><p>The algorithm was implemented and tested on a real robot, demonstrating the usefulness and applicability of our approach.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Comparing paths planned by the DistBug algorithm (solid line) and the VisBug algorithm (dashed line). Using DistBug, the leaving condition holds at L 1 . However, VisBug would follow the obstacle boundary until the point V , from which the line [S; T ] is visible.</figDesc><graphic coords="2,82.08,59.58,173.04,139.44" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Moving from S to T, the robot hits the obstacle in H 1 and follows the boundary until L 1 . It then moves to H 2 and follows the boundary until L 2 , from which it moves toward T.</figDesc><graphic coords="4,82.26,59.58,172.56,128.64" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Choosing the initial boundary following direction based on orientation at the hit point.</figDesc><graphic coords="4,69.90,240.48,198.00,91.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Simulation results in "world1" environment. (a) Bug2 algorithm. (b) DistBug algorithm (path length is 0.75 relative to Bug2). (c) DistBug + choosing the boundary following direction (path length is 0.62).</figDesc><graphic coords="5,191.94,272.33,217.00,194.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Simulation results in "world2" environment. (a) Bug2 algorithm. (b) DistBug algorithm (path length is 0.87 relative to Bug2). (c) DistBug + choosing the boundary following direction (path length is 0.24).</figDesc><graphic coords="6,192.24,272.33,216.00,194.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 6 .</head><label>6</label><figDesc>Fig.6. Reversing the boundary following direction. (a) DistBug + choosing the initial boundary following direction. In the second hit point the robot turned left, the "wrong" direction. (b) the path planned with the local reversing criterion. Note that the following direction was reversed in the upper corner, and the robot traversed a part of the boundary twice (path length is 0.22 relative to the original path). (c) the path planned with the search manager. The robot reversed the following direction when it touched the virtual obstacle for the first time (path length is 0.34).</figDesc><graphic coords="7,190.92,272.97,219.00,195.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. (a) The Nomad200 robot in the starting point of the experiment described below. (b) A scheme of the generated path.</figDesc><graphic coords="8,103.20,377.40,130.80,106.56" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>TABLE I AVERAGE</head><label>I</label><figDesc>PATH LENGTH OF THE DistBug ALGORITHM</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>TABLE II SAFETY</head><label>II</label><figDesc>MEASURE OF THE DistBut ALGORITHM extensions enlarged the average distance from obstacles, and hence produced safer paths.</figDesc><table /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>As we discuss in Section II-A,Step should be smaller than the minimal distance between obstacles. Otherwise, a modified leaving condition, which we present in Section II-B, should be used.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENT</head><p>The authors would like to thank M. Heymann and A. Bruckstein for very helpful discussions. The authors want to express special thanks to E. Rimon for his encouragement and helpful comments.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Motor schema based navigation for a mobile robot: An approach for programming by behavior</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Arkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Conf. Robot. Automat</title>
		<imprint>
			<date type="published" when="1987">1987</date>
			<biblScope unit="page" from="264" to="271" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Steer angle field: An approach to robust maneuvering in cluttered, unknown environments</title>
		<author>
			<persName><forename type="first">R</forename><surname>Bauer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Feiten</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Lawitzky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Robot. Autonomous Syst</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="209" to="212" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Real-time obstacle avoidance for fast mobile robots in cluttered environments</title>
		<author>
			<persName><forename type="first">J</forename><surname>Borenstein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Koren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Conf. Robot. Automat</title>
		<imprint>
			<date type="published" when="1990">1990</date>
			<biblScope unit="page" from="572" to="577" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Sensor-based planning, Part II: Incremental construction of the generalized Voronoi graph</title>
		<author>
			<persName><forename type="first">H</forename><surname>Choset</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">W</forename><surname>Burdick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Conf. Robot. Automat</title>
		<meeting><address><addrLine>Nagoya, Japan</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1995-05">May 1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Principles and techniques for sensor data fusion</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">L</forename><surname>Crowley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Demazeau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Signal Processing</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="page" from="5" to="27" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Two-dimensional robot navigation among unknown stationary polygonal obstacles</title>
		<author>
			<persName><forename type="first">G</forename><surname>Foux</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Heymann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bruckstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Robot. Automat</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="96" to="102" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Fuzzy behavior fusion for reactive control of an autonomous mobile robot: Marge</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">G</forename><surname>Goodridge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Luo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Conf. Robot. Automat</title>
		<imprint>
			<date type="published" when="1994">1994</date>
			<biblScope unit="page" from="1622" to="1627" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Real-time obstacle avoidance for manipulators and mobile robots</title>
		<author>
			<persName><forename type="first">O</forename><surname>Khatib</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Conf. Robot. Automat</title>
		<imprint>
			<date type="published" when="1985">1985</date>
			<biblScope unit="page" from="500" to="505" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Depth-first iterative-deepening: An optimal admissible tree search</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">E</forename><surname>Korf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artificial Intell</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="97" to="109" />
			<date type="published" when="1985">1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Directed Sonar Sensing for Mobile Robots Navigation</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">J</forename><surname>Leonard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">F</forename><surname>Durrant-Whyte</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992">1992</date>
			<publisher>Kluwer</publisher>
			<pubPlace>Boston, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A comparative study on the path length performance of maze-searching and robot motion planning algorithms</title>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">J</forename><surname>Lumelsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Robot. Automat</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="57" to="66" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Incorporating range sensing in the robot navigation function</title>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">J</forename><surname>Lumelsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Skewis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Syst., Man, Cybern</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="1058" to="1068" />
			<date type="published" when="1990">1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Path-planning strategies for a point mobile automaton moving amidst obstacles of arbitrary shape</title>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">J</forename><surname>Lumelsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>Stepanov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="403" to="430" />
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">An on-line and deadlock-free pathplanning algorithm based on world topology</title>
		<author>
			<persName><forename type="first">H</forename><surname>Noborio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Yoshioka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE/RSJ Conf. Intell. Robots Syst</title>
		<imprint>
			<date type="published" when="1993">1993</date>
			<biblScope unit="page" from="1425" to="1430" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Molusc: An incremental approach of fuzzy learning</title>
		<author>
			<persName><forename type="first">P</forename><surname>Reignier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. Symp. Intell. Robot. Syst</title>
		<imprint>
			<biblScope unit="page" from="178" to="186" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Concurrent localization and map building for mobile robots using ultrasonic sensors</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">D</forename><surname>Rencken</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE/RSJ Conf. Intell. Robots Syst</title>
		<imprint>
			<date type="published" when="1993">1993</date>
			<biblScope unit="page" from="2192" to="2197" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Construction of c-space roadmaps from local sensory data: What should the sensors look for?</title>
		<author>
			<persName><forename type="first">E</forename><surname>Rimon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="357" to="379" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Path planning for moving a point object amidst unknown obstacles in a plane: The universal lower bound on worst case path lengths and a classification of algorithms</title>
		<author>
			<persName><forename type="first">A</forename><surname>Sankaranarayanan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Vidyasagar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Conf. Robot. Automat</title>
		<imprint>
			<date type="published" when="1991">1991</date>
			<biblScope unit="page" from="1734" to="1941" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Fixed computation real-time sonar fusion for local navigation</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">G</forename><surname>Slack</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Conf. Robot. Automat</title>
		<imprint>
			<date type="published" when="1993">1993</date>
			<biblScope unit="page" from="123" to="129" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Optimal and efficient path planning for partially known environments</title>
		<author>
			<persName><forename type="first">A</forename><surname>Stentz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Conf. Robot. Automat</title>
		<imprint>
			<date type="published" when="1994">1994</date>
			<biblScope unit="page" from="3310" to="3317" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Using path transforms to guide the search for findpath in 2-D</title>
		<author>
			<persName><forename type="first">A</forename><surname>Zelinsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Robot. Res</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="315" to="325" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">He received the M.Sc. degree in applied mathematics and computer science from the Weizmann Institute of Science, Israel, in 1993. Since 1994, he has been a Ph.D. student with the Department of Computer Science at Technion. The subject of his thesis is incorporating local shortest path considerations in Bug-type motion planning. His research interests include sensorbased motion planning, robot navigation, and taskoriented vision</title>
	</analytic>
	<monogr>
		<title level="m">Ehud Rivlin (S&apos;90-M&apos;95) received the B.Sc. and M.Sc. degrees in computer science and the M.B.A. degree from the Hebrew University, Jerusalem, and the Ph.D. degree from the University of Maryland</title>
		<meeting><address><addrLine>Haifa, Israel; College Park. Currently; Haifa, Israel</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
	<note>His current research interests include machine vision and robot navigation</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
