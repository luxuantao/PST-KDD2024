<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Understanding Source Code Evolution Using Abstract Syntax Tree Matching *</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Iulian</forename><surname>Neamtiu</surname></persName>
							<email>neamtiu@cs.umd.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Maryland at College Park</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Michael</forename><surname>Hicks</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Maryland at College Park</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Understanding Source Code Evolution Using Abstract Syntax Tree Matching *</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">3E2BF7F0A0265CD2ECBB0ABD4642B046</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T11:38+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>F.3.2 [Logics And Meanings Of Programs]: Semantics of Programming Languages-Program Analysis Languages</term>
					<term>Measurement Source code analysis</term>
					<term>abstract syntax trees</term>
					<term>software evolution</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Mining software repositories at the source code level can provide a greater understanding of how software evolves. We present a tool for quickly comparing the source code of different versions of a C program. The approach is based on partial abstract syntax tree matching, and can track simple changes to global variables, types and functions. These changes can characterize aspects of software evolution useful for answering higher level questions. In particular, we consider how they could be used to inform the design of a dynamic software updating system. We report results based on measurements of various versions of popular open source programs, including BIND, OpenSSH, Apache, Vsftpd and the Linux kernel.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Understanding how software evolves over time can improve our ability to build and maintain it. Source code repositories contain rich historical information, but we lack effective tools to mine repositories for key facts and statistics that paint a clear image of the software evolution process.</p><p>Our interest in characterizing software evolution is motivated by two problems. First, we are interested in dynamic software updating (DSU), a technique for fixing bugs or adding features in running programs without halting service <ref type="bibr" target="#b4">[4]</ref>. DSU can be tricky for programs whose types change, so understanding how the type structure of real programs changes over time can be invaluable for weighing the merits of DSU implementation choices. Second, we are interested in a kind of "release digest" for explaining changes in a software release: what functions or variables have changed, where the hot spots are, whether or not the changes affect certain components, etc. Typical release notes can be too high level for developers, and output from diff can be too low level.</p><p>To answer these and other software evolution questions, we have developed a tool that can quickly tabulate and summarize simple changes to successive versions of C programs by partially matching their abstract syntax trees. The tool identifies the changes, additions, and deletions of global variables, types, and functions, and uses this information to report a variety of statistics.</p><p>Our approach is based on the observation that for C programs, function names are relatively stable over time. We analyze the bodies of functions of the same name and match their abstract syntax trees structurally. During this process, we compute a bijection between type and variable names in the two program versions. We then use this information to determine what changes have been made to the code. This approach allows us to report a name or type change as single difference, even if it results in multiple changes to the source code. For example, changing a variable name from x to y would cause a tool like diff to report all lines that formerly referred to x as changed (since they would now refer to y), even if they are structurally the same. Our system avoids this problem.</p><p>We have used our tool to study the evolution history of a variety of popular open source programs, including Apache, OpenSSH, Vsftpd, Bind, and the Linux kernel. This study has revealed trends that we have used to inform our design for DSU. In particular, we observed that function and global variable additions are far more frequent than deletions; the rates of addition and deletion vary from program to program. We also found that function bodies change quite frequently over time, but function prototypes change only rarely. Finally, type definitions (like struct and union declarations) change infrequently, and often in simple ways.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">APPROACH</head><p>Figure <ref type="figure">1</ref> provides an overview of our tool. We begin by parsing the two program versions to produce abstract syntax trees (ASTs), which we traverse in parallel to collect type and name mappings. With the mappings at hand, we detect  and collect changes to report to the user, either directly or in summary form. In this section, we describe the matching algorithm, illustrate how changes are detected and reported, and describe our implementation and its performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">AST Matching</head><p>Figure <ref type="figure" target="#fig_0">2</ref> presents an example of two successive versions of a program. Assuming the example on the left is the initial version, our tool discovers that the body of baz is unchanged-which is what we would like, because even though every line has been syntactically modified, the function in fact is structurally the same, and produces the same output. Our tool also determines that the type sz t has been renamed size t, the global variable count has been renamed counter, the structure foo has been renamed bar, and the function biff() has been added. Notice that if we had done a line-oriented diff instead, nearly all the lines in the program would have been marked as changed, providing little useful information.</p><p>To report these results, the tool must find a bijection between the old and new names in the program, even though functions and type declarations have been reordered and modified. To do this, the tool begins by finding function names that are common between program versions; our assumption is that function names do not change very often. The tool then uses partial matching of function bodies to determine name maps between old and new versions, and finally tries to find bijections i.e., one-to-one, onto submaps of the name maps.</p><p>We traverse the ASTs of the function bodies of the old and new versions in parallel, adding entries to a LocalNameMap and GlobalNameMap to form mappings between local variable names and global variable names, respectively. Two variables are considered equal if we encounter them in the same syntactic position in the two function bodies. For example, in Figure <ref type="figure" target="#fig_0">2</ref>   we form a TypeMap between named types (typedefs and aggregates) that are used in the same syntactic positions in the two function bodies. For example, in Figure <ref type="figure" target="#fig_0">2</ref>, the name map pair sb ↔ sf will introduce a type map pair struct foo ↔ struct bar.</p><formula xml:id="formula_0">procedure GenerateMaps(V ersion1, V ersion2) F 1 ← set of all functions in Version 1 F 2 ← set of all functions in Version 2 global T ypeM ap ← ∅ global GlobalN ameM ap ← ∅ for each function f ∈ F 1 ∩ F 2 do 8 &lt; : AST 1 ← AST of f in Version 1 AST 2 ← AST of f in Version 2 Match Ast(AST 1 , AST 2 ) procedure Match Ast(AST 1 , AST 2 ) local LocalN ameM ap ← ∅ for each (node 1 , node 2 ) ∈ (AST 1 , AST 2 ) do 8 &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &lt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; : if (node 1 , node 2 ) = (t 1 x 1 , t 2 x 2 ) //declaration then  T ypeM ap ← T ypeM ap ∪ {t 1 ↔ t 2 } LocalN ameM ap ← LocalN ameM ap ∪ {x 1 ↔ x 2 } else if (node 1 , node 2 ) = (y 1 := e 1 op e 1 , y 2 := e 2 op e 2 ) then 8 &gt; &gt; &gt; &gt; &gt; &lt; &gt; &gt; &gt; &gt; &gt; : Match Ast(e 1 ,</formula><p>We define a renaming to be a name or type pair j1 → j2 where j1 ↔ j2 exists in the bijection, j1 does not exist in the new version, and j2 does not exist in the old version. Based on this definition, our tool will report count → counter and struct foo → struct bar as renamings, rather than additions and deletions. This approach ensures that consistent renamings are not presented as changes, and that type changes are decoupled from value changes, which helps us better understand how types and values evolve.</p><p>Figure <ref type="figure" target="#fig_2">3</ref> gives pseudocode for our algorithm. We accumulate global maps TypeMap and GlobalNameMap, as well as a LocalNameMap per function body. We invoke the routine Match Ast on each function common to the two versions. When we encounter a node with a declaration t1 x1 (a declaration of variable x1 with type t1) in one AST and t2 x2 in the other AST, we require x1 ↔ x2 and t1 ↔ t2. Similarly, when matching statements, for variables y1 and y2 occurring in the same syntactic position we add type pairs in the TypeMap, as well as name pairs into LocalNameMap or GlobalNameMap, depending on the storage class of y1 and y2. LocalNameMap will help us detect functions which are identical up to a renaming of local and formal variables, and GlobalNameMap is used to detect renamings for global variables and functions. As long as the ASTs have the same shape, we keep adding pairs to maps. If we encounter an AST mismatch (the break statement on the last line of the algorithm), we stop the matching process for that function and use the maps generated from the portion of the tree that did match.</p><p>-------Global Variables ----------Version1 :</p><p>1 Version2 :</p><formula xml:id="formula_1">1 renamed : 1 -------Functions ----------------- Version1 : 1 Version2 : 2 added : 1 locals/formals name changes : 4 -------Structs/Unions ------------ Version1 : 1 Version2 : 1 renamed : 1 -------Typedefs ----------------- Version1 : 1 Version2 : 1 renamed :</formula><p>1 The problem with this algorithm is that having insufficient name or type pairs could lead to renamings being reported as additions/deletions. The two reasons why we might miss pairs are partial matching of functions and function renamings. As mentioned previously, we stop adding pairs to maps when we detect an AST mismatch, so when lots of functions change their bodies, we miss name and type pairs. This could be mitigated by refining our AST comparison to recover from a mismatch and continue matching after detecting an AST change. Because renamings are detected in the last phase of the process, functions that are renamed don't have their ASTs matched, another reason for missing pairs. In order to avoid this problem, the bijection computation and function body matching would have to be iterated until a fixpoint is reached.</p><p>In practice, however, we found the approach to be reliable. For the case studies in section 3, we have manually inspected the tool output and the source code for renamings that are improperly reported as additions and deletions due to lack of constraints. We found that a small percentage (less than 3% in all cases) of the reported deletions were actually renamings. The only exception was an early version of Apache (versions 1.2.6-1.3.0) which had significantly more renamings, with as many as 30% of the reported deletions as spurious.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Change Detection and Reporting</head><p>With the name and type bijections in hand, the tool visits the functions, global variables, and types in the two programs to detect changes and collect statistics. We categorize each difference that we report either as an addition, deletion, or change.</p><p>We report any function names present in one file and not the other as an addition, deletion, or renaming as appropriate. For functions in both files, we report that there is a change in the function body if there is a difference beyond the renamings that are represented in our name and type bijections. This can be used as an indication that the semantics of the function has changed, although this is a conservative assumption (i.e., semantics preserving transformations such as code motion are flagged as changes). In our experience, whenever the tool detects an AST mismatch, manual inspection has confirmed that the function seman-   We similarly report additions, deletions and renamings of global variables, and changes in global variable types and static initializers.</p><p>For types we perform a deep structural isomorphism check, using the type bijection to identify which types should be equal. We report additions, deletions, or changes in fields for aggregate types; additions, deletions, or changes to base types for typedefs; and additions, deletions, or changes in item values for enums.</p><p>Our tool can be configured to either report this detailed information or to produce a summary. For the example in Figure <ref type="figure" target="#fig_0">2</ref>, the summary output is presented in Figure <ref type="figure" target="#fig_3">4</ref>. In each category, Version1 represents the total number of items in the old program, and Version2 in the new program. For brevity we have omitted all statistics whose value was 0 e.g., enums, etc.</p><p>Our tool can also present summary information in the form of a density tree, which shows how changes are distributed in a project. Figure <ref type="figure" target="#fig_4">5</ref> shows the density tree for the number of struct and union fields that were added between Linux versions 2.4.20 and 2.4.21. In this diagram, changes reported at the leaf nodes (source files) are propagated up the branches, making clusters of changes easy to visualize. In this example, the include/linux/ directory and the include/linux/ide.h header file have a high density of changes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Implementation</head><p>Our tool is constructed using CIL, an OCaml framework   <ref type="figure" target="#fig_5">6</ref> shows the running time of the tool on these applications (we consider the tool's results below), plotting source code size versus running time. <ref type="foot" target="#foot_1">2</ref> The top line is the total running time while the bottom line is the portion of the running time that is due to parsing, provided by CIL (thus the difference between them is our analysis time). Our algorithm scales roughly linearly with program size, with most of the running time spent in parsing. Computing changes for two versions of the largest test program takes slightly over one minute. The total time for running the analysis on the full repository (i.e., all the versions) for Vsftpd was 21 seconds (14 versions), for OpenSSH was 168 seconds (25 versions), and for Apache was 42 seconds (8 versions).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">CASE STUDY: DYNAMIC SOFTWARE UPDATING</head><p>This section explains how we used the tool to characterize software change to guide our design of a dynamic software updating (DSU) methodology <ref type="bibr" target="#b4">[4]</ref>. We pose three questions concerning code evolution; while these are relevant for DSU, we believe they are of general interest as well. We answer these questions by using the output of our tool on the programs mentioned above, which are relevant to DSU because they are long-running.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Are function and variable deletions frequent, relative to the size of the program?</head><p>When a programmer deletes a function or variable, we would expect a DSU implementation to delete that function from the running program when it is dynamically updated. However, implementing on-line deletion is difficult, because it is not safe to delete functions that are currently in use (or will be in the future). Therefore, if definitions are rarely deleted over a long period, the benefit of cleaning up dead code may not be worth the cost of implementing a safe mechanism to do so. Figure <ref type="figure">7</ref> illustrates how OpenSSH, Vsftpd, and Apache have evolved over their lifetime. The x-axis plots time, and the y-axis plots the number of function and global variable definitions for various versions of these programs. Each graph shows the total number of functions and global variables for each release, the cumulative number of functions/variables added, and the cumulative number of functions/variables deleted (deletions are expressed as a negative number, so that the sum of deletions, additions, and the original program size will equal its current size). The rightmost points show the current size of each program, and the total number of additions and deletions to variables and functions over the program's lifetime.</p><p>According to the tool, Vsftpd and Apache delete almost no functions, but OpenSSH deletes them steadily. For the purposes of our DSU question, Vsftpd and Apache could therefore reasonably avoid removing dead code, while doing so for OpenSSH would have a more significant impact (assuming functions are similar in size). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Are changes to function prototypes frequent?</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Are changes to type definitions relatively simple?</head><p>In most DSU systems, changes to type definitions (which include struct, union, enum, and typedef declarations in C programs) require an accompanying type transformer function to be supplied with the dynamic update. Each existing value of a changed type is converted to the new representation using this transformer function. Of course, this approach presumes that such a transformer function can be easily written. If changes to type definitions are fairly complex, it may be difficult to write a transformer function. Figure <ref type="figure">9</ref> plots the relative frequency of changes to struct, union, and enum definitions (the y-axis) against the number of fields (or enumeration elements for enums) that were added or deleted in a given change (the x-axis). The y-axis is presented as a percentage of the total number of type changes across the lifetime of the program. We can see that most type changes affect predominantly one or two fields. An exception is OpenSSH, where changing more than two fields is common; it could be that writing type transformers for OpenSSH will be more difficult. We also used the tool to learn that fields do not change type frequently (not shown in the figure).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">RELATED WORK</head><p>A number of systems for identifying differences between programs have been developed. We discuss a few such systems briefly.</p><p>Yang <ref type="bibr" target="#b5">[5]</ref> developed a system for identifying "relevant" syntactic changes between two versions of a program, filtering out irrelevant ones that would be produced by diff. Yang's solution matches parse trees (similar to our system) and can even match structurally different trees using heuristics. In contrast, our system stops at the very first node mismatch in order not to introduce spurious name or type bijections. Yang's tool cannot deal with variable renaming or type changes, and in general focuses more on finding a maximum syntactic similarity between two parse trees. We take the semantics of AST nodes into account, distinguish between different program constructs (e.g., types, variables and functions) and specific changes associated with them.</p><p>Horwitz <ref type="bibr" target="#b1">[1]</ref> proposed a system for finding semantic, rather than syntactic, changes in programs. Two programs are semantically identical if the sequence of observable values they produce is the same, even if they are textually different. For example, with this approach semantics-preserving transformations such as code motion or instruction reordering would not be flagged as a change, while they would in our approach. Horwitz's algorithm runs on a limited subset of C that does not include functions, pointers, or arrays.</p><p>Jackson and Ladd <ref type="bibr" target="#b2">[2]</ref> propose a differencing tool that analyzes two versions of a procedure to identify changes in dependencies between formals, locals, and globals. Their approach is insensitive to local variable names, like our approach, but their system performs no global analysis, does not consider type changes, and sacrifices soundness for the sake of suppressing spurious differences.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">CONCLUSION</head><p>We have presented an approach to finding semantic differences between program versions based on partial abstract syntax tree matching. Our algorithm uses AST matching to determine how types and variable names in different versions of a program correspond. We have constructed a tool based on our approach and used it to analyze several popular open source projects. We have found that our tool is efficient and provides some insights into software evolution.</p><p>We have begun to extend the tool beyond matching ASTs, to measure evolution metrics such as common coupling or cohesion <ref type="bibr">[6]</ref>. We are interested in analyzing more programs, with the hope that the tool can be usefully applied to shed light on a variety of software evolution questions.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Two successive program versions</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Figure 2  presents an example of two successive versions of a program. Assuming the example on the left is the initial version, our tool discovers that the body of baz is unchanged-which is what we would like, because even though every line has been syntactically modified, the function in fact is structurally the same, and produces the same output. Our tool also determines that the type sz t has been renamed size t, the global variable count has been renamed counter, the structure foo has been renamed bar, and the function biff() has been added. Notice that if we had done a line-oriented diff instead, nearly all the lines in the program would have been marked as changed, providing little useful information.To report these results, the tool must find a bijection between the old and new names in the program, even though functions and type declarations have been reordered and modified. To do this, the tool begins by finding function names that are common between program versions; our assumption is that function names do not change very often. The tool then uses partial matching of function bodies to determine name maps between old and new versions, and finally tries to find bijections i.e., one-to-one, onto submaps of the name maps.We traverse the ASTs of the function bodies of the old and new versions in parallel, adding entries to a LocalNameMap and GlobalNameMap to form mappings between local variable names and global variable names, respectively. Two variables are considered equal if we encounter them in the same syntactic position in the two function bodies. For example, in Figure2, parallel traversal of the two versions of baz results in the LocalNameMap a ↔ d, b ↔ e, sf ↔ sb, c ↔ g and a GlobalNameMap with count ↔ counter. Similarly,</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Map Generation Algorithm</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Summary output produced for the code in Figure 2</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Density tree for struct/union field additions (Linux 2.4.20 vs. 2.4.21)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Performance</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>Figure Function and global variable additions and deletions</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>AST 1 Parser Parser AST 2 Program version 1 Program version 2 Facts Processor Type Matchings Bijection Computation</head><label></label><figDesc></figDesc><table><row><cell></cell><cell></cell><cell>Change</cell></row><row><cell></cell><cell></cell><cell></cell><cell>Changes</cell></row><row><cell></cell><cell>Name Matchings</cell><cell>Detector</cell><cell>&amp; Statistics</cell></row><row><cell></cell><cell>Figure 1: High level view of AST matching</cell><cell></cell></row><row><cell>typedef i n t s z t ; i n t count ; struct f o o { i n t i ; f l o a t f ; char c ; } ; i n t baz ( i n t a , i n t b ) { struct f o o s f ; s z t c = 2 ; s f . i = a + b + c ; count++; }</cell><cell>i n t c o u n t e r ; typedef i n t s i z e t ; struct bar { i n t i ; f l o a t f ; char c ; } ; i n t baz ( i n t d , i n t e ) { struct bar sb ; s i z e t g = 2 ; sb . i = d + e + g ; c o u n t e r ++; } void b i f f ( void ) { }</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>e 2 ) Match Ast(e 1 , e 2 ) if isLocal(y 1 ) and isLocal(y</figDesc><table /><note><p>2 ) then LocalN ameM ap ← LocalN ameM ap ∪ {y 1 ↔ y 2 } else if isGlobal(y 1 ) and isGlobal(y 2 ) then GlobalN ameM ap ← GlobalN ameM ap ∪ {y 1 ↔ y 2 } else if . . . else break</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head></head><label></label><figDesc>For each program, we graph the total number of functions, the cumulative number of functions whose body has changed, and the cumulative number of functions whose prototype has changed. As we can see from the figure, changes in prototypes are relatively infrequent for Apache and Vsftpd, especially compared to changes more generally. In contrast, functions and their prototypes have changed in OpenSSH far more rapidly, with the total number of changes over five years roughly four times the current number of functions, with a fair number of these resulting in changes in prototypes. In all cases we can see some changes to prototypes, meaning that supporting prototype changes in DSU is a good idea.</figDesc><table><row><cell>relative frequency (%)</cell><cell>0 10 20 30 40 50 60 70 80 90</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>Linux Vsftpd Apache OpenSSH Bind</cell><cell></cell></row><row><cell></cell><cell>0</cell><cell>1</cell><cell>2</cell><cell>3</cell><cell>4</cell><cell>5</cell><cell>6</cell><cell>7</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2"># fields added/deleted</cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell cols="6">Figure 9: Classifying changes to types</cell></row><row><cell cols="9">changed. If types of functions change relatively infrequently,</cell></row><row><cell cols="9">then this implementation strategy may be able to support a</cell></row><row><cell cols="9">large number of updates. Figure 8 presents graphs similar</cell></row><row><cell cols="3">to those in Figure 7.</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>Many DSU</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>methodologies cannot update a function whose type has</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>Analyzing earlier versions would have required older versions of gcc.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p><ref type="bibr" target="#b2">2</ref> Times are the average of 5 runs. The system used for experiments was a dual Xeon@2GHz with 1GB of RAM running Fedora</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_2"><p> Core 3.   </p></note>
		</body>
		<back>

			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>* This research was supported in part by NSF grants CCF-0346982 and CCF-0346989</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName><surname>References</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Identifying the semantic and textual differences between two versions of a program</title>
		<author>
			<persName><forename type="first">S</forename><surname>Horwitz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI)</title>
		<meeting>the ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI)</meeting>
		<imprint>
			<date type="published" when="1990-06">June 1990</date>
			<biblScope unit="page" from="234" to="245" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Semantic diff: A tool for summarizing the effects of modifications</title>
		<author>
			<persName><forename type="first">D</forename><surname>Jackson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Ladd</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Conference on Software Maintenance (ICSM)</title>
		<meeting>the IEEE International Conference on Software Maintenance (ICSM)</meeting>
		<imprint>
			<date type="published" when="1994-09">Sept. 1994</date>
			<biblScope unit="page" from="243" to="252" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">CIL: Intermediate Language and Tools for Analysis and Transformation of C Programs</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">C</forename><surname>Necula</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Mcpeak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">P</forename><surname>Rahul</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Weimer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Lecture Notes in Computer Science</title>
		<imprint>
			<biblScope unit="volume">2304</biblScope>
			<biblScope unit="page" from="213" to="228" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Mutatis Mutandis: Safe and flexible dynamic software updating</title>
		<author>
			<persName><forename type="first">G</forename><surname>Stoyle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hicks</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Bierman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Sewell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Neamtiu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGPLAN/SIGACT Conference on Principles of Programming Languages (POPL)</title>
		<meeting>the ACM SIGPLAN/SIGACT Conference on Principles of Programming Languages (POPL)</meeting>
		<imprint>
			<date type="published" when="2005-01">January 2005</date>
			<biblScope unit="page" from="183" to="194" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Identifying Syntactic differences Between Two Programs</title>
		<author>
			<persName><forename type="first">W</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software -Practice and Experience</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="739" to="755" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName><forename type="first">E</forename><surname>Yourdon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">L</forename><surname>Constantine</surname></persName>
		</author>
		<title level="m">Structured Design</title>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Yourdon Press</publisher>
			<date type="published" when="1979">1979</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
