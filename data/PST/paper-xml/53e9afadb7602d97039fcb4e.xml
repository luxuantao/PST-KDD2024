<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Language-Based Security on Android</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Avik</forename><surname>Chaudhuri</surname></persName>
							<email>avik@cs.umd.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Maryland at College Park</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Language-Based Security on Android</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">5549688B4DF8906118C284FA9DCB209D</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T12:22+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>D.4.6 [Operating Systems]: Security and Protection-Access controls</term>
					<term>Verification; D.3.3 [Programming Languages]: Language Constructs and Features-Control constructs General Terms Security</term>
					<term>Languages</term>
					<term>Verification data-flow security</term>
					<term>hybrid type system</term>
					<term>mobile code</term>
					<term>certified compilation</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>In this paper, we initiate a formal study of security on Android: Google's new open-source platform for mobile devices. Specifically, we present a core typed language to describe Android applications, and to reason about their dataflow security properties. Our operational semantics and type system provide some necessary foundations to help both users and developers of Android applications deal with their security concerns.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Android <ref type="bibr" target="#b2">[3]</ref> is Google's new open-source platform for mobile devices. Designed to be a complete software stack, it includes an operating system, middleware, and core applications. Furthermore, it comes with an SDK <ref type="bibr" target="#b0">[1]</ref> that provides the tools and APIs necessary to develop new applications for the platform in Java. Interestingly, Android does not distinguish between its core applications and new applications developed with the SDK; in particular, all applications can potentially interact with the underlying mobile device and share their functionality with other applications. This design is very encouraging for developers and users of new applications, as witnessed by the growing Android "market" <ref type="bibr" target="#b1">[2]</ref>. At the same time, it can be a source of concern-what do we understand about security on Android?</p><p>Indeed, suppose that Alice downloads and installs a new application, developed by Bob, on her Android-based phone.</p><p>Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. PLAS '09 June 15, Dublin, Ireland. Copyright c 2009 ACM 978-1-60558-645-8/09/06. . . $10.00 Say this application, wikinotes, interacts with a core application, notes, to publish some notes from the phone to a wiki, and to sync edits back from the wiki to the phone. Of course, Alice would not like all her notes to be published, and would not like all her published notes to be edited; for instance, her notes may include intermediate results of her ongoing lab experiments. How does she know whether it is safe to run the application? Can she trust the application to safely access her data? If she cannot, is there still a way to safely run the application? These concerns are important for Alice, because she realizes that running a malicious application on her phone can be disastrous; for instance, it may compromise the records of her experiments. Conversely, it is Bob's concern to be able to convince Alice that his application can be run safely on her phone.</p><p>This paper initiates an effort to help Alice and Bob deal with these related concerns, through a unified formal understanding of security on Android. To this end, we envision a recipe inspired by PCC <ref type="bibr" target="#b10">[11]</ref>: Bob constructs a safety proof for his application by some conservative analysis of the associated Java code, and Alice verifies the proof before installing the application. Such a recipe requires (at least) two ingredients: (1) a formal operational semantics for application code in an Android environment-this includes, in particular, formal specifications of the APIs provided by the SDK; (2) a static safety analysis for application code based on this semantics-in particular, this analysis may be formalized as a security type system for applications, and a soundness proof for such a system should provide the necessary safety proofs for well-typed applications. We take some initial steps towards composing such a recipe in this paper.</p><p>• We design a core formal language to describe and reason about Android applications abstractly. For now, we focus only on constructs that are unique to Android, while ignoring the other usual Java constructs that may appear in Android applications. This simplification allows us to study Android-specific features in isolation. Still, to reason about actual Android applications we must consider the usual Java features in combination with these features, and we plan to extend our language to include those features in the future.</p><p>• We present an operational semantics for our language.</p><p>Our semantics exposes the sophisticated control flows that underlie Android's constructs. Indeed, while the official documentation provides only a vague idea of what these constructs mean, a formal understanding of their semantics is crucial for reasoning correctly about the behavior of Android applications. We test our semantics by running our own applications on an Android emulator (included in the SDK).</p><p>• We present a type system for security in this language.</p><p>Our system exploits the access control mechanisms already provided by Android, and enforces "best practices" for developing secure applications with these mechanisms. We develop some new technical concepts, including a special notion of stack types, for this purpose.</p><p>The resulting guarantees include standard data-flow security properties for well-typed applications described in our language. We expect that these guarantees can be preserved without significant difficulty by extending our type system to handle other usual Java constructs.</p><p>As future work, we plan to extend our analysis so that it can handle application code in Java, and implement it using existing static analysis tools <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b6">7]</ref>. As envisioned above, certified installation of Android applications based on such an implementation should help both users and developers deal with their security concerns. More ambitiously, we believe that this setting provides an ideal opportunity to bring language-based security to the mainstream. Indeed, Android applications are usually small and structured, so we expect type inference to scale well on such applications; furthermore, the idea of certified installation should certainly be attractive to a growing and diverse Android community.</p><p>The rest of the paper is organized as follows. In Section 2 we present an overview of Android, focusing on the application model and security mechanisms. In Section 3 we present our formal language for Android applications. In Section 4, we present our security type system for this language, and outline key properties of typing. Finally, in Section 5, we discuss some related work and conclude.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Overview of Android 2.1 The application model</head><p>In Android's application model <ref type="bibr" target="#b0">[1]</ref>, an application is a package of components, each of which can be instantiated and run as necessary (possibly even by other applications). Components are of the following types:</p><p>Activity components form the basis of the user interface; usually, each window of the application is controlled by some activity.</p><p>Service components run in the background, and remain active even if windows are switched. Services can expose interfaces for communication with other applications.</p><p>Receiver components react asynchronously to messages from other applications.</p><p>Provider components store data relevant to the application, usually in a database. Such data can be shared across applications.</p><p>Consider, e.g., a music-player application for an Androidbased phone. This application may include several components. There may be activities for viewing the songs on the phone, and for editing the details of a particular song. There may be a service for playing a song in the background. There may be receivers for pausing a song when a call comes in, and for restarting the song when the call ends. Finally, there may be a provider for sharing the songs on the phone.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Component classes and methods</head><p>The Android SDK provides a base class for each type of component (Activity, Service, Receiver, and Provider), with methods (callbacks) that are run at various points in the life cycle of the associated component. Each component of an application is defined by extending one of the base classes, and overriding the methods in that class. In particular:</p><p>• The Activity class has methods that are run when some activity calls this activity, or returns to this activity.</p><p>• The Service class has a method that is run when some component binds to this service.</p><p>• The Receiver class has a method that is run when a message is sent to this receiver.</p><p>• The Provider class has methods to query and update the data stored by this provider.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Security mechanisms</head><p>As mentioned above, it is possible for an application to share its data and functionality across other applications, by letting such applications access its components. Clearly, these accesses must be carefully controlled for security. We now describe the key access control mechanisms provided by Android <ref type="bibr" target="#b0">[1]</ref>.</p><p>Isolation The Android operating system builds on a Linux kernel, and as such, derives several protection mechanisms from Linux. Every application runs in its own Linux process. Android starts the process when any of the application's code needs to be run, and stops the process when another application's code needs to be run. Next, each process runs on its own Java VM, so the application's code runs in isolation from the code of all other applications. Finally, each application is assigned a unique Linux UID, so the application's files are not visible to other applications. That said, it is possible for several applications to arrange to share the same UID (see below), in which case their files become visible to each other. Such applications can also arrange to run in the same process, sharing the same VM.</p><p>Permissions Any application needs explicit permissions to access the components of other applications. Crucially, such permissions are set at install time, not at run time.</p><p>The permissions required by an application are declared statically in a manifest. These permissions are set by the package installer, usually via dialogue with the user. No further decisions are made at run time; if the application's code needs a permission at run time that is not set at install time, it blocks, and its resources are reclaimed by Android.</p><p>Enforcing permissions can prevent an application from calling certain activities, binding to certain services, sending messages to certain receivers, and receiving messages from other applications or the system, and querying and updating data stored by certain providers.</p><p>Signatures Finally, any Android application must be signed with a certificate whose private key is held by the developer. The certificate does not need to be signed by a certificate authority; it is used only to establish trust between applications by the same developer. For example, such applications may share the same UID, or the same permissions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Language</head><p>We now proceed to design a core formal language to describe Android applications. To narrow our focus, we do not model general classes and methods; instead, we treat component classes and methods as primitive constructs. Furthermore, we ignore isolation and signatures, since permissions suffice to model the effects of those mechanisms in Android.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Syntax</head><p>We assume a lattice of permissions (e.g., PERMS). In Android, this lattice is implemented over sets. Components are identified by names. In Android, components are accessed through intents; an intent simply pairs the name of the component to access (action) and a value (parameter) to be passed to the component. Values include names n, variables x and a constant void. Our syntax of programs is as follows. We describe the meanings of programs informally below; a formal operational semantics appears in Section 3.2.</p><p>A program runs in an environment that maps names to component definitions. In Android, such an environment is derived from the set of applications installed on the system. Furthermore, a program runs with a permission (context). In general, the program may be run on a stack of windows (produced by calls to activities), or in a pool of threads (produced by forks). Exceptions are call or return programs, which can only be run on the stack. • The program !n checks that n is mapped to a provider of the form provider(READ, WRITE, v), and that the current context has permission READ; the value v is returned. • Dually, n := v checks that n is mapped to a provider of the form provider(READ, WRITE, v ), and that the current context has permission WRITE; n is then mapped to provider(READ, WRITE, v) in the environment.</p><p>• The program let x = t in t evaluates t, and then evaluates t with x bound to the result.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Semantics</head><p>We now present a formal small-step operational semantics. Since services can be encoded with receivers (as follows), we do not consider services any further in our development.</p><formula xml:id="formula_0">Encodings service(BIND, PERMS, λx.t) receiver(BIND, PERMS, λx.t) bind((n, v), λx.t) let x = send(⊥, (n, v)) in t</formula><p>Next, we introduce some internal syntactic categories to describe intermediate states of an Android system. Recall that a program runs with a permission, and may be run on a stack of windows or in a pool of threads.</p><p>An expression denotes code running with a particular permission (context). A thread is simply an expression. A window is of the form e, λx.e , where e is the expression currently running in the window, and λx.e is the callback invoked when a window returns control to this window. Now, a state is a tuple D; S; E, where D is an environment, S is a stack of windows, and E is a pool of threads.</p><p>Figure <ref type="figure" target="#fig_0">1</ref> shows reduction rules that formalize the semantics explained in Section 3.1. A global reduction relation, -→, describes the reduction of states. This relation depends on a local reduction relation, →, that describes the reduction of expressions under an environment and a pool of threads. In particular, call and return programs reduce under -→, and all other code reduces under →. Of specific interest are (Red let-return), (Red send), (Red call), and (Red return), that can cause data flows across contexts.</p><p>A typical initial configuration of the system is of the form D; e, λx.e ; ∅, where D is the environment defined by the set of installed applications, x is fresh, and e is of the form [ ] t; for example, t may be a choice of calls to the main activities of the installed applications, modeling code running in the "home" window of an Android-based phone.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Type system</head><p>Next, we present a system of security types for our language. Roughly, the type Any(READ, WRITE) is given to data that may flow from contexts with at most permission WRITE to contexts with at least permission READ. This type is the basis for security specifications in the language (see Theorem 4.2). For example, Any( , ) secret trusted data, Any(⊥, ) types public trusted data, and Any(⊥, ⊥) types public tainted data.</p><p>Next, we have types for each component class, that are given to names bound in the environment. The meanings of these types are given in the rules for well-formed environments below. Besides typing information, these types record the permissions required to access the associated components, so that programs that block due to access control can be identified. Such programs are vacuously safe, and are given the type Stuck. The treatment of Stuck closely follows previous work <ref type="bibr" target="#b7">[8]</ref>, and we omit the details in the sequel.</p><p>Finally, we introduce stack types. A stack type τ ⇒ τ is given to an expression running at the top of a stack; values returned by any window to this window have type τ , and values returned by this window have type τ . Note that the code run by an activity must have a stack type, since it is always run on a stack; in contrast, the code run by a receiver may or may not have a stack type.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Typing rules</head><p>Let Γ be a list that associates names and variables to unique typing hypotheses, such as n : τ or x : τ . We have the following subtyping rule, that captures safe data flows. (Other subtyping rules are not shown here.)</p><p>Figure <ref type="figure">2</ref> shows some of our typing rules. (The context PERMS is carried around to derive Stuck types, using rules that are not shown here. We also omit a subtyping rule for Stuck types, which allows us to infer any type for a stuck program.) We elaborate only on (Typ call) and (Typ return); the remaining rules rely on standard ideas, and should not be difficult to follow. A program of the form call((n, )) is given a stack type of the form τ ⇒ whenever the type of programs that may be run in a window launched by n is of the form ⇒ τ ; indeed, values returned by such a window are passed back to the window running call((n, )). Dually, the stack type of return(v) is of the form ⇒ τ whenever v is of type τ .</p><p>By (Typ stack), stack types are chained to type a stack of windows. (We assume that can be given any stack type.)</p><p>Finally, we define well-typed states.</p><p>DEFINITION 4.1. A state D; S; E is well-typed if there is Γ such that Γ D, Γ S : , and Γ e : for each e ∈ E.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Properties of typing</head><p>Our main theorem is the following data-flow security property for any sequence of reductions of a well-typed state. Informally, this theorem guarantees that a value can flow from provider n to provider n only if readers of n may already read n, and writers of n may already write n . The theorem follows from a standard subject reduction lemma.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Untyped code</head><p>Theorem 4.2 holds only for well-typed states; in particular, it assumes that all components in the environment are welltyped. In practice, this requirement may be too strict-we may wish to consider the possibility of safely running an application even if it does not typecheck.</p><p>It turns out that such applications can indeed be run safely with permission ⊥. Technically, we include a vacuous system of rules in the type system that can only be applied in a ⊥ context; these rules consider Any(⊥, ⊥) as a dynamic type, and allow previously untyped code with permission ⊥ to typecheck. Conversely, we require all occurrences of PERMS in Figure <ref type="figure">2</ref> to be non-⊥, so that our core discipline cannot be bypassed.</p><p>However, this alone is not enough to recover Theorem 4.2. Typed code can still interact with previously untyped code, and we need to control such interactions. In particular, it should not be possible for previously untyped code to consume values of type Any(READ, ) or produce values of type Any( , WRITE) if READ or WRITE are non-⊥. Fortunately, a simple set of constraints in our core discipline (omitted here) suffice to eliminate such flows. Theorem 4.2 now holds for this augmented system.</p><p>Finally, we should point out that ⊥ does not necessarily equate to "no permission" at run time. In fact, the lattice in the type system may be any order-preserving abstraction of the lattice in the operational semantics.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Discussion</head><p>In Section 1, we point out several possible security concerns of users (such as Alice) and developers (such as Bob) of Android applications. We now outline how our approach can quell those concerns. Indeed, Alice can safely run any well-typed application on her phone. By Theorem 4.2, any such application is guaranteed to preserve the secrecy and integrity of her data. If such an application does not conform to our core discipline, it necessarily runs with permission ⊥, so Alice can still safely run such an application. Conversely, the only way Bob can convince Alice that his application is safe to run on her phone is by typechecking his application.</p><p>The only other study of Android security we are aware of is <ref type="bibr" target="#b8">[9]</ref>. It reports a logic-based tool, Kirin, for determining whether the permissions declared by an application satisfy a certain global safety invariant. Typically, this invariant bans permissions that may result in data flows across applications. However, Kirin does not track data flows inside an application; thus, its analysis is necessarily less precise than ours. In particular, for an application that has several components, each of which require a disjoint set of permissions, Kirin conservatively considers the union of those permissions when deciding the safety of the application. In contrast, we track precise dependencies among the components, and thus may recognize the application to be safe even if Kirin cannot. This precision is important in the presence of signatures, which allow possibly unrelated applications to share the same set of permissions.</p><p>The approach in this paper is similar to our previous work on formalizing security on Windows Vista <ref type="bibr" target="#b7">[8]</ref>. However, while in <ref type="bibr" target="#b7">[8]</ref> we merely aim for a formal understanding of Windows Vista's security design, in this setting we can be much more ambitious, as discussed in Section 1. We plan to extend our analysis to application code in Java, and implement a certified installer for Android applications based on our analysis; we expect existing static analysis tools for Java, such as ESC/Java <ref type="bibr" target="#b9">[10]</ref>, Soot <ref type="bibr" target="#b11">[12]</ref>, and WALA <ref type="bibr" target="#b6">[7]</ref> to provide a convenient foundation for such an implementation. Furthermore, our project bears several similarities with other existing projects for mobile code security, such as Mobius <ref type="bibr" target="#b4">[5]</ref>, Jif <ref type="bibr" target="#b3">[4]</ref>, and S2MS <ref type="bibr" target="#b5">[6]</ref>. We expect that as we begin implementing our analysis, we will benefit from tools and techniques developed in the context of such projects.</p><p>In conclusion, we initiate a formal language-based study of security on Android in this paper. We believe that it is worthwhile to put in the necessary effort into bringing language-based security to the mainstream via this setting.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. Small-step operational semantics</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>t encapsulate let x = e in e evaluate E ::= ∅ | E, e pool of threads S ::= | e, λx.e :: S stack of windows</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>Types τ ::= data type Any(READ, WRITE) any Activity(CALL, τ → τ ⇒ τ ) activity Receiver(SEND, τ → T ) receiver Provider(READ, WRITE) provider Stuck stuck T ::= type τ data type τ ⇒ τ stack type</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>THEOREM 4 . 2 .</head><label>42</label><figDesc>Let D; S; E be a well-typed such that provider(READ, WRITE, m) ∈ rng(D) for some fresh name m. Suppose that D; S; E -→ D ; S ; E , such that provider(READ , WRITE , m) ∈ rng(D ).Then READ READ and WRITE WRITE .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>•</head><label></label><figDesc>The program call((n, v)) checks that n is mapped to an activity of the form activity(CALL, PERMS, λx.t, λx.t ), and that the current context has permission CALL. A new window is pushed on the stack, and the program t is run with permission PERMS and with x bound to v. • Dually, return(v) pops the current window off the stack and returns control to the previous activity; if that activity is of the form shown above, the program t is run with permission PERMS and with x bound to v.</figDesc><table /><note><p>• The program bind((n, v), λx.t ) checks that n is mapped to a service of the form service(BIND, PERMS, λx.t), and that the current context has permission BIND. The program t is run with permission PERMS and with x bound to v, and the result v is passed back to the current context; then, t is run with x bound to v in the current context. In Android, v is typically an interface to some functionality exposed by the service. Below, we encode away such services with receivers. • The program register(SEND, λx.t) creates a fresh name n, maps it to the receiver receiver(SEND, PERMS, λx.t) in the environment, and returns n; here, PERMS is the permission of the current context. • Dually, send(RECEIVE, (n, v)) checks that n is mapped to a receiver of the form receiver(SEND, PERMS, λx.t), that the current context has permission SEND, and that PERMS includes RECEIVE. The program t is run with permission PERMS, and with x bound to v.</p></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>Subtyping Γ T &lt;: T (Sub any) READ READ WRITE WRITE Γ Any(READ, WRITE) &lt;: Any(READ , WRITE ) Well-typed code Γ PERMS t : T (Typ read) Γ PERMS n : Provider(READ, WRITE) Γ PERMS !n : Any(READ, WRITE) (Typ write) Γ PERMS n : Provider(READ, WRITE) Γ PERMS v : Any(READ, WRITE) Γ PERMS n := v : Any(⊥, ) (Typ register) Γ, x : τ PERMS t : T T = Receiver(SEND, τ → T ) Γ PERMS register(SEND, λx.t) : T (Typ send)Γ PERMS n : Receiver( , τ → T ) Γ PERMS v : τ Γ PERMS send(RECEIVE, (n, v)) : T (Typ let) Γ PERMS t : τ Γ, x : τ PERMS t : T Γ PERMS let x = t in t : T (Typ fork) Γ PERMS t : τ Γ PERMS t : Any(⊥, ) (Typ choice) Γ PERMS t : T Γ PERMS t : T Γ PERMS t + t : T (Typ val-hyp) v : τ ∈ Γ Γ PERMS v : τ (Typ val-void) Γ PERMS void : Any(⊥, )(Typ call)Γ PERMS n : Activity(CALL, τ → ⇒ τ ) Γ PERMS v : τ</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>This research is supported in part by DARPA under grant ODOD.HR00110810073.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<ptr target="http://developer.android.com/index.html" />
		<title level="m">Android developers</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<ptr target="http://www.android.com/market/" />
		<title level="m">Android market</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<ptr target="http://source.android.com/" />
		<title level="m">Android project</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<ptr target="http://www.cs.cornell.edu/jif/" />
		<title level="m">The Jif project</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<ptr target="http://mobius.inria.fr/twiki/bin/view/Mobius" />
		<title level="m">The Mobius project</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<ptr target="http://www.s3ms.org/index.jsp" />
		<title level="m">The S3MS project</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<ptr target="http://wala.sourceforge.net/wiki/index.php/Main_Page" />
		<title level="m">WALA</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">A type system for data-flow integrity on Windows Vista. In PLAS&apos;08: Programming Languages and Analysis for Security</title>
		<author>
			<persName><forename type="first">A</forename><surname>Chaudhuri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Naldurg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Rajamani</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008">2008</date>
			<publisher>ACM</publisher>
			<biblScope unit="page" from="89" to="100" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Understanding Android security</title>
		<author>
			<persName><forename type="first">W</forename><surname>Enck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ongtang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Mcdaniel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Security &amp; Privacy Magazine</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="10" to="17" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Extended static checking for Java</title>
		<author>
			<persName><forename type="first">C</forename><surname>Flanagan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">R M</forename><surname>Leino</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lillibridge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Nelson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">B</forename><surname>Saxe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Stata</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PLDI&apos;02: Programming Language Design and Implementation</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="234" to="245" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Proof-carrying code</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">C</forename><surname>Necula</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">POPL&apos;97: Principles of Programming Langauges</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1997">1997</date>
			<biblScope unit="page" from="106" to="119" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Soot: A Java bytecode optimization framework</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">V</forename><surname>Rai</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
		<respStmt>
			<orgName>McGill University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Master&apos;s thesis</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
