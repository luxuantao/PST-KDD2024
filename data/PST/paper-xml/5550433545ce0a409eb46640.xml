<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Survey of Software-Defined Networking: Past, Present, and Future of Programmable Networks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Bruno</forename><surname>Astuto</surname></persName>
						</author>
						<author>
							<persName><forename type="first">A</forename><surname>Nunes</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Marc</forename><surname>Mendonca</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Xuan-Nam</forename><surname>Nguyen</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Katia</forename><surname>Obraczka</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Thierry</forename><surname>Turletti</surname></persName>
						</author>
						<title level="a" type="main">A Survey of Software-Defined Networking: Past, Present, and Future of Programmable Networks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">D5A343E3C679A8E8FB0EB8C023E4F276</idno>
					<idno type="DOI">10.1109/SURV.2014.012214.00180</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T14:54+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Software-Defined Networking</term>
					<term>programmable networks</term>
					<term>survey</term>
					<term>data plane</term>
					<term>control plane</term>
					<term>virtualization</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The idea of programmable networks has recently re-gained considerable momentum due to the emergence of the Software-Defined Networking (SDN) paradigm. SDN, often referred to as a "radical new idea in networking", promises to dramatically simplify network management and enable innovation through network programmability. This paper surveys the state-of-the-art in programmable networks with an emphasis on SDN. We provide a historic perspective of programmable networks from early ideas to recent developments. Then we present the SDN architecture and the OpenFlow standard in particular, discuss current alternatives for implementation and testing of SDN-based protocols and services, examine current and future SDN applications, and explore promising research directions based on the SDN paradigm.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>C OMPUTER networks are typically built from a large number of network devices such as routers, switches and numerous types of middleboxes (i.e., devices that manipulate traffic for purposes other than packet forwarding, such as a firewall) with many complex protocols implemented on them. Network operators are responsible for configuring policies to respond to a wide range of network events and applications. They have to manually transform these high level-policies into low-level configuration commands while adapting to changing network conditions. Often, they also need to accomplish these very complex tasks with access to very limited tools. As a result, network management and performance tuning is quite challenging and thus error-prone. The fact that network devices are usually vertically-integrated black boxes exacerbates the challenge network operators and administrators face.</p><p>Another almost unsurmountable challenge network practitioners and researchers face has been referred to as "Internet ossification". Because of its huge deployment base and the fact it is considered part of our society's critical infrastructure (just like transportation and power grids), the Internet has become extremely difficult to evolve both in terms of its physical infrastructure as well as its protocols and performance. However, as current and emerging Internet applications and services become increasingly more complex and demanding, it is imperative that the Internet be able to evolve to address these new challenges.</p><p>The idea of "programmable networks" has been proposed as a way to facilitate network evolution. In particular, Software Manuscript received June 14, 2013; revised October 28, 2013. B. A. A. Nunes, X. Nguyen and T. Turletti are with INRIA, France (e-mail: {bruno.astuto-arouche-nunes, xuan-nam.nguyen, thierry.turletti}@inria.fr) M. Mendonca and K. Obraczka are with UC Santa Cruz (e-mail: {msm, katia}@soe.ucsc.edu) Digital Object Identifier 10.1109/SURV.2014.012214.00180</p><p>Defined Networking (SDN) is a new networking paradigm in which the forwarding hardware is decoupled from control decisions. It promises to dramatically simplify network management and enable innovation and evolution. The main idea is to allow software developers to rely on network resources in the same easy manner as they do on storage and computing resources. In SDN, the network intelligence is logically centralized in software-based controllers (the control plane), and network devices become simple packet forwarding devices (the data plane) that can be programmed via an open interface (e.g., ForCES <ref type="bibr" target="#b0">[1]</ref>, OpenFlow <ref type="bibr" target="#b1">[2]</ref>, etc). SDN is currently attracting significant attention from both academia and industry. A group of network operators, service providers, and vendors have recently created the Open Network Foundation <ref type="bibr" target="#b2">[3]</ref>, an industrial-driven organization, to promote SDN and standardize the OpenFlow protocol <ref type="bibr" target="#b1">[2]</ref>. On the academic side, the OpenFlow Network Research Center <ref type="bibr" target="#b3">[4]</ref> has been created with a focus on SDN research. There have also been standardization efforts on SDN at the IETF and IRTF and other standards producing organizations.</p><p>The field of software defined networking is quite recent, yet growing at a very fast pace. Still, there are important research challenges to be addressed. In this paper, we survey the state-of-the-art in programmable networks by providing a historic perspective of the field and also describing in detail the SDN paradigm and architecture. The paper is organized as follows: in Section II, it begins by describing early efforts focusing on programmable networks. Section III provides an overview of SDN and its architecture. It also describes the OpenFlow protocol. Section IV describes existing platforms for developing and testing SDN solutions including emulation and simulation tools, SDN controller implementations, as well as verification and debugging tools. In Section V, we discuss several SDN applications in areas such as data centers and wireless networking. Finally, Section VI discusses research challenges and future directions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. EARLY PROGRAMMABLE NETWORKS</head><p>SDN has great potential to change the way networks operate, and OpenFlow in particular has been touted as a "radical new idea in networking" <ref type="bibr" target="#b4">[5]</ref>. The proposed benefits range from centralized control, simplified algorithms, commoditizing network hardware, eliminating middleboxes, to enabling the design and deployment of third-party 'apps'.</p><p>While OpenFlow has received considerable attention from industry, it is worth noting that the idea of programmable networks and decoupled control logic has been around for many years. In this section, we provide an overview of early programmable networking efforts, precursors to the current SDN paradigm that laid the foundation for many of the ideas we are seeing today.</p><p>a) Open Signaling: The Open Signaling (OPENSIG) working group began in 1995 with a series of workshops dedicated to "making ATM, Internet and mobile networks more open, extensible, and programmable" <ref type="bibr" target="#b5">[6]</ref>. They believed that a separation between the communication hardware and control software was necessary but challenging to realize; this is mainly due to vertically integrated switches and routers, whose closed nature made the rapid deployment of new network services and environments impossible. The core of their proposal was to provide access to the network hardware via open, programmable network interfaces; this would allow the deployment of new services through a distributed programming environment.</p><p>Motivated by these ideas, an IETF working group was created, which led to the specification of the General Switch Management Protocol (GSMP) <ref type="bibr" target="#b6">[7]</ref>, a general purpose protocol to control a label switch. GSMP allows a controller to establish and release connections across the switch, add and delete leaves on a multicast connection, manage switch ports, request configuration information, request and delete reservation of switch resources, and request statistics. The working group is officially concluded and the latest standards proposal, GSMPv3, was published in June 2002.</p><p>b) Active Networking: Also in the mid 1990s, the Active Networking <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b8">[9]</ref> initiative proposed the idea of a network infrastructure that would be programmable for customized services. There were two main approaches being considered, namely: (1) user-programmable switches, with inband data transfer and out-of-band management channels; and (2) capsules, which were program fragments that could be carried in user messages; program fragments would then be interpreted and executed by routers. Despite considerable activity it motivated, Active Networking never gathered critical mass and transferred to widespread use and industry deployment, mainly due to practical security and performance concerns <ref type="bibr" target="#b9">[10]</ref>.</p><p>c) DCAN: Another initiative that took place in the mid 1990s is the Devolved Control of ATM Networks (DCAN) <ref type="bibr" target="#b10">[11]</ref>. The aim of this project was to design and develop the necessary infrastructure for scalable control and management of ATM networks. The premise is that control and management functions of the many devices (ATM switches in the case of DCAN) should be decoupled from the devices themselves and delegated to external entities dedicated to that purpose, which is basically the concept behind SDNs. DCAN assumes a minimalist protocol between the manager and the network, in the lines of what happens today in proposals such as OpenFlow. More on the DCAN project can be found at <ref type="bibr" target="#b11">[12]</ref>.</p><p>Still in the lines of SDNs and the proposed decoupling of control and data plane over ATM networks, amongst others, in the work proposed in <ref type="bibr" target="#b12">[13]</ref> multiple heterogeneous control architectures are allowed to run simultaneously over single physical ATM network by partitioning the resources of that switch between those controllers. d) 4D Project: Starting in 2004, the 4D project <ref type="bibr" target="#b13">[14]</ref>, <ref type="bibr" target="#b14">[15]</ref>, <ref type="bibr" target="#b15">[16]</ref> advocated a clean slate design that emphasized separation between the routing decision logic and the protocols governing the interaction between network elements. It proposed giving the "decision" plane a global view of the network, serviced by a "dissemination" and "discovery" plane, for control of a "data" plane for forwarding traffic. These ideas provided direct inspiration for later works such as NOX <ref type="bibr" target="#b16">[17]</ref>, which proposed an "operating system for networks" in the context of an OpenFlow-enabled network.</p><p>e) NETCONF: In 2006, the IETF Network Configuration Working Group proposed NETCONF <ref type="bibr" target="#b17">[18]</ref> as a management protocol for modifying the configuration of network devices. The protocol allowed network devices to expose an API through which extensible configuration data could be sent and retrieved.</p><p>Another management protocol, widely deployed in the past and used until today, is the SNMP <ref type="bibr" target="#b18">[19]</ref>. SNMP was proposed in the late 80's and proved to be a very popular network management protocol, which uses the Structured Management Interface (SMI) to fetch data contained in the Management Information Base (MIB). It could be used as well to change variables in the MIB in order to modify configuration settings. It later became apparent that in spite of what it was originally intended for, SNMP was not being used to configure network equipment, but rather as a performance and fault monitoring tool. Moreover, multiple shortcomings were detected in the conception of SNMP, the most notable of which was its lack of strong security. This was addressed in a later version of the protocol.</p><p>NETCONF, at the time it was proposed by IETF, was seen by many as a new approach for network management that would fix the aforementioned shortcomings in SNMP. Although the NETCONF protocol accomplishes the goal of simplifying device (re)configuration and acts as a building block for management, there is no separation between data and control planes. The same can be stated about SNMP. A network with NETCONF should not be regarded as fully programmable as any new functionality would have to be implemented at both the network device and the manager so that any new functionality can be provided; furthermore, it is designed primarily to aid automated configuration and not for enabling direct control of state nor enabling quick deployment of innovative services and applications. Nevertheless, both NETCONF and SNMP are useful management tools that may be used in parallel on hybrid switches supporting other solutions that enable programmable networking.</p><p>The NETCONF working group is currently active and the latest proposed standard was published in June 2011.</p><p>f) Ethane: The immediate predecessor to OpenFlow was the SANE / Ethane project <ref type="bibr" target="#b19">[20]</ref>, which, in 2006, defined a new architecture for enterprise networks. Ethane's focus was on using a centralized controller to manage policy and security in a network. A notable example is providing identitybased access control. Similar to SDN, Ethane employed two components: a controller to decide if a packet should be forwarded, and an Ethane switch consisting of a flow table and a secure channel to the controller.</p><p>Ethane laid the foundation for what would become Software-Defined Networking. To put Ethane in the context of today's SDN paradigm, Ethane's identity-based access control would likely be implemented as an application on top of an SDN controller such as NOX <ref type="bibr" target="#b16">[17]</ref>, Maestro <ref type="bibr" target="#b20">[21]</ref>, Beacon <ref type="bibr" target="#b21">[22]</ref>, SNAC <ref type="bibr" target="#b22">[23]</ref>, Helios <ref type="bibr" target="#b23">[24]</ref>, etc.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. SOFTWARE-DEFINED NETWORKING ARCHITECTURE</head><p>Data communication networks typically consist of enduser devices, or hosts interconnected by the network infrastructure. This infrastructure is shared by hosts and employs switching elements such as routers and switches as well as communication links to carry data between hosts. Routers and switches are usually "closed" systems, often with limitedand vendor-specific control interfaces. Therefore, once deployed and in production, it is quite difficult for current network infrastructure to evolve; in other words, deploying new versions of existing protocols (e.g., IPv6), not to mention deploying completely new protocols and services is an almost insurmountable obstacle in current networks. The Internet, being a network of networks, is no exception.</p><p>As mentioned previously, the so-called Internet "ossification" <ref type="bibr" target="#b1">[2]</ref> is largely attributed to the tight coupling between the data-and control planes which means that decisions about data flowing through the network are made on-board each network element. In this type of environment, the deployment of new network applications or functionality is decidedly nontrivial, as they would need to be implemented directly into the infrastructure. Even straightforward tasks such as configuration or policy enforcement may require a good amount of effort due to the lack of a common control interface to the various network devices. Alternatively, workarounds such as using "middleboxes" (e.g., firewalls, Intrusion Detection Systems, Network Address Translators, etc.) overlayed atop the underlying network infrastructure have been proposed and deployed as a way to circumvent the network ossification effect. Content Delivery Networks (CDNs) <ref type="bibr" target="#b24">[25]</ref> are a good example.</p><p>Software-Defined Networking was developed to facilitate innovation and enable simple programmatic control of the network data-path. As visualized in Figure <ref type="figure">1</ref>, the separation of the forwarding hardware from the control logic allows easier deployment of new protocols and applications, straightforward network visualization and management, and consolidation of various middleboxes into software control. Instead of enforcing policies and running protocols on a convolution of scattered devices, the network is reduced to "simple" forwarding hardware and the decision-making network controller(s).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Current SDN Architectures</head><p>In this section, we review two well-known SDN architectures, namely ForCES <ref type="bibr" target="#b0">[1]</ref> and Openflow <ref type="bibr" target="#b1">[2]</ref>. Both OpenFlow and ForCES follow the basic SDN principle of separation between the control and data planes; and both standardize information exchange between planes. However, they are technically very different in terms of design, architecture, forwarding model, and protocol interface.</p><p>1) ForCES: The approach proposed by the IETF ForCES (Forwarding and Control Element Separation) Working Group, redefines the network device's internal architecture having the control element separated from the forwarding element. However, the network device is still represented as a single entity. The driving use case provided by the working group considers the desire to combine new forwarding hardware with third-party control within a single network device. Thus, the control and data planes are kept within close proximity (e.g., same box or room). In contrast, the control plane is ripped entirely from the network device in "OpenFlow-like" SDN systems.</p><p>ForCES defines two logic entities called the Forwarding Element (FE) and the Control Element (CE), both of which implement the ForCES protocol to communicate. The FE is responsible for using the underlying hardware to provide per-packet handling. The CE executes control and signaling functions and employs the ForCES protocol to instruct FEs on how to handle packets. The protocol works based on a masterslave model, where FEs are slaves and CEs are masters.</p><p>An important building block of the ForCES architecture is the LFB (Logical Function Block). The LFB is a well-defined functional block residing on the FEs that is controlled by CEs via the ForCES protocol. The LFB enables the CEs to control the FEs' configuration and how FEs process packets.</p><p>ForCES has been undergoing standardization since 2003, and the working group has published a variety of documents including: an applicability statement, an architectural framework defining the entities and their interactions, a modeling language defining the logical functions within a forwarding element, and the protocol for communication between the control and forwarding elements within a network element. The working group is currently active.</p><p>2) OpenFlow: Driven by the SDN principle of decoupling the control and data forwarding planes, OpenFlow <ref type="bibr" target="#b1">[2]</ref>, like ForCES, standardizes information exchange between the two planes.</p><p>In the OpenFlow architecture, illustrated in Figure <ref type="figure">2</ref>, the forwarding device, or OpenFlow switch, contains one or more flow tables and an abstraction layer that securely communicates with a controller via OpenFlow protocol. Flow tables consist of flow entries, each of which determines how packets belonging to a flow will be processed and forwarded. Flow entries typically consist of: (1) match fields, or matching rules, used to match incoming packets; match fields may contain information found in the packet header, ingress port, and metadata; (2) counters, used to collect statistics for the particular flow, such as number of received packets, number of bytes and duration of the flow; and (3) a set of instructions, or actions, to be applied upon a match; they dictate how to handle matching packets.</p><p>Upon a packet arrival at an OpenFlow switch, packet header fields are extracted and matched against the matching fields portion of the flow table entries. If a matching entry is found, the switch applies the appropriate set of instructions, or actions, associated with the matched flow entry. If the flow table look-up procedure does not result on a match, the action taken by the switch will depend on the instructions defined by the table-miss flow entry. Every flow table must contain a  The communication between controller and switch happens via OpenFlow protocol, which defines a set of messages that can be exchanged between these entities over a secure channel. Using the OpenFlow protocol a remote controller can, for example, add, update, or delete flow entries from the switch's flow tables. That can happen reactively (in response to a packet arrival) or proactively.</p><p>3) Discussion: In <ref type="bibr" target="#b25">[26]</ref>, the similarities and differences between ForCES and OpenFlow are discussed. Among the differences, they highlight the fact that the forwarding model used by ForCES relies on the Logical Function Blocks (LFBs), while OpenFlow uses flow tables. They point out that in OpenFlow actions associated with a flow can be combined to provide greater control and flexibility for the purposes of network management, administration, and development. In ForCES the combination of different LFBs can also be used to achieve the same goal.</p><p>We should also re-iterate that ForCES does not follow the same SDN model underpinning OpenFlow, but can be used to achieve the same goals and implement similar functionality <ref type="bibr" target="#b25">[26]</ref>.</p><p>The strong support from industry, research, and academia that the Open Networking Foundation (ONF) and its SDN proposal, OpenFlow, has been able to gather is quite impressive. The resulting critical mass from these different sectors has produced a significant number of deliverables in the form of research papers, reference software implementations, and even hardware. So much so that some argue that OpenFlow's SDN architecture is the current SDN de-facto standard. In line with this trend, the remainder of this section focuses on OpenFlow's SDN model. More specifically, we will describe the different components of the SDN architecture, namely: the switch, the controller, and the interfaces present on the controller for communication with forwarding devices (southbound communication) and network applications (northbound communication). Section IV also has an OpenFlow focus as it describes existing platforms for SDN development and testing, including emulation and simulation tools, SDN controller implementations, as well as verification and debugging tools. Our discussion of future SDN applications and research directions is more general and is SDN architecture agnostic.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Forwarding Devices</head><p>The underlaying network infrastructure may involve a number of different physical network equipment, or forwarding devices such as routers, switches, virtual switches, wireless access points, to name a few. In a software-defined network, such devices are often represented as basic forwarding hardware accessible via an open interface at an abstraction layer, as the control logic and algorithms are off-loaded to a controller. Such forwarding devices are commonly referred to, in SDN terminology, simply as "switches", as illustrated in Figure <ref type="figure">3</ref>.</p><p>In an OpenFlow network, switches come in two varieties: pure and hybrid. Pure OpenFlow switches have no legacy features or on-board control, and completely rely on a controller for forwarding decisions. Hybrid switches support OpenFlow in addition to traditional operation and protocols. Most commercial switches available today are hybrids.</p><p>1) Processing Forwarding Rules: Flow-based SDN architectures such as OpenFlow may utilize additional forwarding table entries, buffer space, and statistical counters that are difficult to implement in traditional ASIC switches. Some recent proposals <ref type="bibr" target="#b26">[27]</ref>, <ref type="bibr" target="#b27">[28]</ref> have advocated adding a generalpurpose CPU, either on-switch or nearby, that may be used to supplement or take over certain functions and reduce the complexity of the ASIC design. This would have the added benefit of allowing greater flexibility for on-switch processing as some aspects would be software-defined.</p><p>In <ref type="bibr" target="#b28">[29]</ref>, network processor based acceleration cards were used to perform OpenFlow switching. They proposed and described the design options and reported results that showed a 20% reduction on packet delay. In <ref type="bibr" target="#b29">[30]</ref>, an architectural design to improve look-up performance of OpenFlow switching in Linux was proposed. Preliminary results reported showed a packet switching throughput increase of up to 25% compared to the throughput of regular software-based OpenFlow switching. Another study on data-plane performance over Linux based Openflow switching was presented in <ref type="bibr" target="#b30">[31]</ref>, which compared OpenFlow switching, layer-2 Ethernet switching and layer-3 IP routing performance. Fairness, forwarding throughput and packet latency in diverse load conditions were analyzed. In <ref type="bibr" target="#b31">[32]</ref>, a basic model for the forwarding speed and blocking probability of an OpenFlow switch was derived, while the parameters for the model were drawn from measurements of switching times of current OpenFlow hardware, combined with an OpenFlow controller.</p><p>2) Installing Forwarding Rules: Another issue regarding the scalability of an OpenFlow network is memory limitation in forwarding devices. OpenFlow rules are more complex than forwarding rules in traditional IP routers. They support more flexible matchings and matching fields and also different actions to be taken upon packet arrival. A commodity switch normally supports between a few thousand up to tens of thousands forwarding rules <ref type="bibr" target="#b32">[33]</ref>. Also, Ternary Content-Addressable Memory (TCAM) has been used to support forwarding rules, which can be expensive and power-hungry. Therefore, the rule space is a bottleneck to the scalability of OpenFlow, and the optimal use of the rule space to serve a scaling number of flow entries while respecting network policies and constraints is a challenging and important topic. Some proposals address memory limitations in OpenFlow switches. Devoflow <ref type="bibr" target="#b33">[34]</ref> is an extension to OpenFlow for highperformance networks. It handles mice flows (i.e. short flows) at the OpenFlow switch and only invokes the controller in order to handle elephant flows (i.e larger flows). The performance evaluation conducted in <ref type="bibr" target="#b33">[34]</ref> showed that Devoflow uses 10 to 53 times less flow table space. In DIFANE <ref type="bibr" target="#b34">[35]</ref>, "ingress" switches redirect packets to "authority" switches that store all the forwarding rules while ingress switches cache flow table rules for future use. The controller is responsible for partitioning rules over authority switches.</p><p>Palette <ref type="bibr" target="#b35">[36]</ref> and One Big Switch <ref type="bibr" target="#b36">[37]</ref> address the rule placement problem. Their goal is to minimize the number of rules that need to be installed in forwarding devices and use end-to-end policies and routing policies as input to a rule placement optimizer. End-to-end policies consist of a set of prioritized rules dictating, for example, access control and load balancing, while viewing the whole network as a single virtual switch. Routing policies, on the other hand, dictate through what paths traffic should flow in the network. The main idea in Palette is to partition end-to-end policies into sub tables and then distribute them over the switches. Their algorithm consists of two steps: determine the number k of tables needed and then partition the rules set over k tables. One Big Switch, on the other hand, solves the rule placement problem separately for each path, choosing the paths based on network metrics (e.g. latency, congestion and bandwidth), and then combining the result to reach a global solution.  <ref type="table" target="#tab_2">Abstraction</ref> Layer Fig. <ref type="figure">3</ref>. The separated control logic can be viewed as a network operating system, upon which applications can be built to "program" the network.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. The Controller</head><p>The decoupled system has been compared to an operating system <ref type="bibr" target="#b16">[17]</ref>, in which the controller provides a programmatic interface to the network. That can be used to implement management tasks and offer new functionalities. A layered view of this model is illustrated in Figure <ref type="figure">3</ref>. This abstraction assumes the control is centralized and applications are written as if the network is a single system. It enables the SDN model to be applied over a wide range of applications and heterogeneous network technologies and physical media such as wireless (e.g. 802.11 and 802.16), wired (e.g. Ethernet) and optical networks.</p><p>As a practical example of the layering abstraction accessible through open application programming interfaces (APIs), Figure <ref type="figure" target="#fig_2">4</ref> illustrates the architecture of an SDN controller based on the OpenFlow protocol. This specific controller is a fork of the Beacon controller <ref type="bibr" target="#b21">[22]</ref> called Floodlight <ref type="bibr" target="#b37">[38]</ref>. In this figure it is possible to observe the separation between the controller and the application layers. Applications can be written in Java and can interact with the built-in controller modules via a JAVA API. Other applications can be written in different languages and interact with the controller modules via the REST API. This particular example of an SDN controller allows the implementation of built-in modules that can communicate with their implementation of the OpenFlow controller (i.e. OpenFlow Services). The controller, on the other hand, can communicate with the forwarding devices via the OpenFlow protocol through the abstraction layer present at the forwarding hardware, illustrated in Figure <ref type="figure">3</ref>.</p><p>While the aforementioned layering abstractions accessible via open APIs allow the simplification of policy enforcement and management tasks, the bindings must be closely maintained between the control and the network forwarding elements. The choices made while implementing such layering architectures can dramatically influence the performance and scalability of the network. In the following, we address some such scalability concerns and go over some proposals that aim on overcoming these challenges. We leave a more detailed discussion on the application layer and the implementation of services and policy enforcement to Section VI-C.</p><p>1) Control Scalability: An initial concern that arises when offloading control from the switching hardware is the scalability and performance of the network controller(s). The original Ethane <ref type="bibr" target="#b19">[20]</ref> controller, hosted on a commodity desktop machine, was tested to handle up to 11,000 new flow requests per second and responded within 1.5 milliseconds. A more recent study <ref type="bibr" target="#b38">[39]</ref> of several OpenFlow controller implementations (NOX-MT, Maestro, Beacon), conducted on a larger emulated network with 100,000 endpoints and up to 256 switches, found that all were able to handle at least 50,000 new flow requests per second in each of the tested scenarios. On an eightcore machine, the multi-threaded NOX-MT implementation handled 1.6 million new flow requests per second with an average response time of 2 milliseconds. As the results show, a single controller is able to handle a surprising number of new flow requests, and should be able to manage all but the largest networks. Furthermore, new controllers under development such as McNettle <ref type="bibr" target="#b39">[40]</ref> target powerful multicore servers and are being designed to scale up to large data center workloads (around 20 million flows requests per second and up to 5000 switches). Nonetheless, multiple controllers may be used to reduce latency or increase fault tolerance.</p><p>A related concern is the controller placement problem <ref type="bibr" target="#b40">[41]</ref>, which attempts to determine both the optimal number of controllers and their location within the network topology, often choosing between optimizing for average and worst case latency. The latency of the link used for communication between controller and switch is of great importance when dimensioning a network or evaluating its performance <ref type="bibr" target="#b33">[34]</ref>. That was one of the main motivations behind the work in <ref type="bibr" target="#b41">[42]</ref> which evaluated how the controller and the network perform with bandwidth and latency issues on the control link. This work concludes that bandwidth in the control link arbitrates how many flows can be processed by the controller, as well as the loss rate when under saturation conditions. The switchto-control latency on the other hand, has a major impact on the overall behavior of the network, as each switch cannot forward data until it receives the message from the controller that inserts the appropriate rules in the flow table. This interval can grow with the link latency and impact dramatically the performance of network applications.</p><p>Also, control modeling greatly impacts the network scalability. Some important scalability issues are presented in <ref type="bibr" target="#b42">[43]</ref>, along with a discussion about scalability trade-offs in software-defined network design.</p><p>2) Control models: In the following, we go over some of these SDN design options and discuss different methods of controlling a software-defined network, many of which are interrelated:  plane. Though controller-to-controller communication is not defined by OpenFlow, it is necessary for any type of distribution or redundancy in the control-plane. A physically centralized controller represents a single point of failure for the entire network; therefore, Open-Flow allows the connection of multiple controllers to a switch, which would allow backup controllers to take over in the event of a failure. Onix <ref type="bibr" target="#b43">[44]</ref> and HyperFlow <ref type="bibr" target="#b44">[45]</ref> take the idea further by attempting to maintain a logically centralized but physically distributed control plane. This decreases the look-up overhead by enabling communication with local controllers, while still allowing applications to be written with a simplified central view of the network. The potential downside are trade-offs <ref type="bibr" target="#b45">[46]</ref> related to consistency and staleness when distributing state throughout the control plane, which has the potential to cause applications that believe they have an accurate view of the network to act incorrectly. A hybrid approach, such as Kandoo <ref type="bibr" target="#b46">[47]</ref>, can utilize local controllers for local applications and redirect to a global controller for decisions that require centralized network state. This reduces the load on the global controller by filtering the number of new flow requests, while also providing the data-path with faster responses for requests that can be handled by a local control application. A software-defined network can also have some level of logical decentralization, with multiple logical controllers. An interesting type of proxy controller, called Flowvi-sor <ref type="bibr" target="#b47">[48]</ref>, can be used to add a level of network virtualization to OpenFlow networks and allow multiple controllers to simultaneously control overlapping sets of physical switches. Initially developed to allow experimental research to be conducted on deployed networks alongside production traffic, it also facilitates and demonstrates the ease of deploying new services in SDN environments. A logically decentralized control plane would be needed in an inter-network spanning multiple administrative domains. Though the domains may not agree to centralized control, a certain level of sharing may be appropriate (e.g., to ensure service level agreements are met for traffic flowing between domains).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>• Control Granularity</head><p>Traditionally, the basic unit of networking has been the packet. Each packet contains address information necessary for a network switch to make routing decisions. However, most applications send data as a flow of many individual packets. A network that wishes to provide QoS or service guarantees to certain applications may benefit from individual flow-based control. Control can be further abstracted to an aggregated flow-match, rather than individual flows. Flow aggregation may be based on source, destination, application, or any combination thereof.</p><p>In a software-defined network where network elements are controlled remotely, overhead is caused by traffic between the data-plane and control-plane. As such, using packet level granularity would incur additional delay as the controller would have to make a decision for each arriving packet. When controlling individual flows, the decision made for the first packet of the flow can be applied to all subsequent packets of that flow. The overhead may be further reduced by grouping flows together, such as all traffic between two hosts, and performing control decisions on the aggregated flows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>• Reactive vs. Proactive Policies</head><p>Under a reactive control model, such as the one proposed by Ethane <ref type="bibr" target="#b19">[20]</ref>, forwarding elements must consult a controller each time a decision must be made, such as when a packet from a new flow reaches a switch. In the case of flow-based control granularity, there will be a small performance delay as the first packet of each new flow is forwarded to the controller for decision (e.g., forward or drop), after which future packets within that flow will travel at line rate within the forwarding hardware. While the delay incurred by the first-packet may be negligible in many cases, it may be a concern if the controller is geographically remote (though this can be mitigated by physically distributing the controller <ref type="bibr" target="#b44">[45]</ref>) or if most flows are short-lived, such as single-packet flows. There are also some scalability issues in larger networks, as the controller must be able to handle a larger volume of new flow requests. Alternatively, proactive control approaches push policy rules from the controller to the switches. A good example of proactive control is DIFANE <ref type="bibr" target="#b34">[35]</ref>, which partitions rules over a hierarchy of switches, such that the controller rarely needs to be consulted about new flows and traffic is kept within the data-plane. In their experiments, DIFANE reduces first-packet delay from a 10ms average round-trip time (RTT) with a centralized NOX controller to a 0.4ms average RTT for new single-packet flows. It was also shown to increase the new flow throughput, as the tested version of NOX achieved a peak of 50,000 single-packet flows per second while the DIFANE solution achieved 800,000 single-packet flows per second. Interestingly, it was observed that the OpenFlow switch's local controller implementation becomes a bottleneck before the central NOX controller. This was attributed to the fact that commercial OpenFlow switch implementations were limited to sending 60-330 new flows requests per second at the time of their publication (2010). As shown in Figure <ref type="figure" target="#fig_3">5</ref>, a controller that acts as a network operating system must implement at least two interfaces: a "southbound" interface that allows switches to communicate with the controller and a "northbound" interface that presents an API to network control and high-level applications/services.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Southbound Communication: Controller-Switch</head><p>An important aspect of SDNs is the link between the data-plane and the control-plane. As forwarding elements are controlled by an open interface, it is important that this link remains available and secure.</p><p>The OpenFlow protocol can be viewed as one possible implementation of controller-switch interactions, as it defines the communication between the switching hardware and a network controller. For security, OpenFlow 1.3.0 provides optional support for encrypted Transport Layer Security (TLS) communication and a certificate exchange between the switches and the controller(s); however, the exact implementation and certificate format is not currently specified. Also outside the scope of the current specification are fine-grained security options regarding scenarios with multiple controllers, as there is no method specified to only grant partial access permissions to an authorized controller. We examine OpenFlow controller implementation options in greater detail in Section IV.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E. Northbound Communication: Controller-Service</head><p>External management systems or network services may wish to extract information about the underlying network or control an aspect of network behavior or policy. Additionally, controllers may find it necessary to communicate with each other for a variety of reasons. For example, an internal control application may need to reserve resources across multiple domains of control or a "primary" controller may need to share policy information with a backup, etc.</p><p>Unlike controller-switch communication, there is no currently accepted standard for northbound interactions and they are more likely to be implemented on an ad hoc basis for particular applications. We discuss this further in Section VI.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F. Standardization Efforts</head><p>Recently, several standardization organizations have been turning the spotlights towards SDN. For example, as previously mentioned, the IETF's Forwarding and Control Element Separation (ForCES) Working Group <ref type="bibr" target="#b0">[1]</ref> has been working on standardizing mechanisms, interfaces, and protocols aiming at the centralization of network control and abstraction of network infrastructure. The Open Network Foundation (ONF) <ref type="bibr" target="#b2">[3]</ref> has been trying to standardize the OpenFlow protocol. As the control plane abstracts network applications from underlying hardware infrastructure, they focus on standardizing the interfaces between: (1) network applications and the controller (i.e. northbound interface) and ( <ref type="formula">2</ref>) the controller and the switching infrastructure (i.e., southbound interface) which defines the OpenFlow protocol itself. Some of the Study Groups (SGs) of ITU's Telecommunication Standardization Sector (ITU-T) <ref type="bibr" target="#b48">[49]</ref> are currently working towards discussing requirements and creating recommendations for SDNs under different perspectives. For instance, the SG13 focuses on Future Networks, including cloud computing, mobile and next generation networks, and is establishing requirements for network virtualization. Other ITU-T SGs such as the SG11 for protocols and test specifications started, in early 2013, requirements and architecture discussions on SDN signaling. The Software-Defined Networking Research Group (SDNRG) at IRTF <ref type="bibr" target="#b49">[50]</ref> is also focusing on SDN under various perspectives with the goal of identifying new approaches that can be defined and deployed, as well as identifying future research challenges. Some of their main areas of interest include solution scalability, abstractions, security and programming languages and paradigms particularly useful in the context of SDN.</p><p>These and other working groups perform important work, coordinating efforts to evolve existing standards and proposing new ones. The goal is to facilitate smooth transitions from legacy networking technology to the new protocols and architectures, such as SDN Some of these groups, such as ITU-T's SG13, advocate the establishment of a Joint Coordination Activity on SDN (JCA-SDN) for collaboration and coordination between standardizing efforts and also taking advantage of the work performed by the Open Source Software (OSS) community, such as OpenStack [51] and OpenDayLight [52] as they start developing the building blocks for SDN implementation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. SDN DEVELOPMENT TOOLS</head><p>SDN has been proposed to facilitate network evolution and innovation by allowing rapid deployment of new services and protocols. In this section, we provide an overview of currently available tools and environments for developing SDN-based services and protocols.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Emulation and Simulation Tools</head><p>Mininet <ref type="bibr" target="#b50">[53]</ref> allows an entire OpenFlow network to be emulated on a single machine, simplifying the initial development and deployment process. New services, applications and protocols can first be developed and tested on an emulation of the anticipated deployment environment before moving to the actual hardware. By default Mininet supports OpenFlow v1.0, though it may be modified to support a software switch that implements a newer release. The ns-3 <ref type="bibr" target="#b51">[54]</ref> network simulator supports OpenFlow switches within its environment, though the current version only implements OpenFlow v0.89.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Available Software Switch Platforms</head><p>There are currently several SDN software switches available that can be used, for example, to run an SDN testbed or when developing services over SDN. Table <ref type="table" target="#tab_2">I</ref> presents a list of current software switch implementations with a brief description including implementation language and the OpenFlow standard version that the current implementation supports.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Native SDN Switches</head><p>One of the main SDN enabling technologies currently being implemented in commodity networking hardware is the Open-Flow standard. In this section we do not intend to present a detailed overview of OpenFlow enabled hardware and makers, but rather provide a list of native SDN switches currently available in the market and provide some information about them, including the version of OpenFlow they implement.</p><p>One clear evidence of industry's strong commitment to SDN is the availability of commodity network hardware that are OpenFlow enabled. Table II lists commercial switches that are currently available, their manufacturer, and the version of OpenFlow they implement.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Available Controller Platforms</head><p>Table <ref type="table" target="#tab_4">III</ref> shows a snapshot of current controller implementations. To date, all the controllers in the table support the This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.</p><p>OpenFlow protocol version 1.0, unless stated otherwise. This table also provides a brief overview of the listed controllers.</p><p>Included in Table <ref type="table" target="#tab_4">III</ref> are also two special purpose controller implementations: Flowvisor <ref type="bibr" target="#b47">[48]</ref>, mentioned previously, and RouteFlow <ref type="bibr" target="#b61">[66]</ref>. The former acts as a transparent proxy between OpenFlow switches and multiple OpenFlow controllers. It is able to create network slices and can delegate control of each slice to a different controller, also promoting isolation between slices. RouteFlow, on the other hand, is an open source project to provide virtualized IP routing over OpenFlow capable hardware. It is composed of an OpenFlow Controller application, an independent server, and a virtual network environment that reproduces the connectivity of a physical infrastructure and runs IP routing engines. The routing engines generate the forwarding information base (FIB) into the Linux IP tables according to the routing protocols configured (e.g., OSPF, BGP). An extension of RouteFlow is presented in <ref type="bibr" target="#b62">[67]</ref>, which discusses Routing Control Platforms (RCPs) in the context of OpenFlow/SDN. They proposed a controller-centric networking model along with a prototype implementation of an autonomous-system-wide abstract BGP routing service.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E. Code Verification and Debugging</head><p>Verification and debugging tools are vital resources for traditional software development and are no less important for SDN. Indeed, for the idea of portable network "apps" to be successful, network behavior must be thoroughly tested and verified.</p><p>NICE <ref type="bibr" target="#b63">[68]</ref> is an automated testing tool used to help uncover bugs in OpenFlow programs through model checking and symbolic execution.</p><p>Anteater <ref type="bibr" target="#b64">[69]</ref> takes a different approach by attempting to check network invariants that exist in the data plane, such as connectivity or consistency. The main benefit of this approach is that it is protocol-agnostic; it will also catch errors that result from faulty switch firmware or inconsistencies with the control plane communication. VeriFlow <ref type="bibr" target="#b65">[70]</ref> has a similar goal, but goes further by proposing a real-time verification tool that resides between the controller and the forwarding elements. This adds the potential benefit of being able to halt bad rules that will cause anomalous behavior before they reach the network.</p><p>Other efforts proposed debugging tools that provide insights gleaned from control plane traffic. OFRewind <ref type="bibr" target="#b66">[71]</ref> allows network events (control and data) to be recorded at different granularities and later replayed to reproduce a specific scenario, granting the opportunity to localize and troubleshoot the events that caused the network anomaly. ndb <ref type="bibr" target="#b67">[72]</ref> implements breakpoints and packet-backtraces for SDN. Just as with the popular software debugger gdb, users can pinpoint events that lead to error by pausing execution at a breakpoint, or, using a packet backtrace, show the sequence of forwarding actions seen by that packet. STS <ref type="bibr" target="#b68">[73]</ref> is a software-defined network troubleshooting simulator. It is written in python and depends on POX. It simulates the devices in a given network allowing for testing cases and identifying the set of inputs that generates a given error.</p><p>V. SDN APPLICATIONS Software-defined networking has applications in a wide variety of networked environments. By decoupling the controland data planes, programmable networks enable customized control, an opportunity to eliminate middleboxes, as well as simplified development and deployment of new network services and protocols. Below, we examine different environments for which SDN solutions have been proposed or implemented.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Enterprise Networks</head><p>Enterprises often run large networks, while also having strict security and performance requirements. Furthermore, different enterprise environments can have very different requirements, characteristics, and user population, For example, University networks can be considered a special case of enterprise networks: in such an environment, many of the connecting devices are temporary and not controlled by the University, further challenging security and resource allocation. Additionally, Universities must often provide support for research testbeds and experimental protocols.</p><p>Adequate management is critically important in Enterprise environments, and SDN can be used to programmatically enforce and adjust network policies as well as help monitor network activity and tune network performance.</p><p>Additionally, SDN can be used to simplify the network by ridding it from middleboxes and integrating their functionality within the network controller. Some notable examples of middlebox functionality that has been implemented using SDN include NAT, firewalls, load balancers <ref type="bibr" target="#b69">[74]</ref> [75], and network access control <ref type="bibr" target="#b71">[76]</ref>. In the case of more complex middleboxes with functionalities that cannot be directly implemented without performance degradation (e.g., deep packet inspection), SDN can be used to provide unified control and management <ref type="bibr" target="#b72">[77]</ref>.</p><p>The work presented in <ref type="bibr" target="#b73">[78]</ref> addresses the issues related to consistent network updates. Configuration changes are a common source of instability in networks and can lead to outages, security flaws, and performance disruptions. In <ref type="bibr" target="#b73">[78]</ref>, a set of high-level abstractions are proposed that allow network administrators to update the entire network, guaranteeing that every packet traversing the network is processed by exactly one consistent global network configuration. To support these abstractions, several OpenFlow-based update mechanisms were developed.</p><p>As discussed in earlier sections, OpenFlow evolved from Ethane <ref type="bibr" target="#b19">[20]</ref>, a network architecture designed specifically to address the issues faced by enterprise networks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Data Centers</head><p>Data centers have evolved at an amazing pace in recent years, constantly attempting to meet increasingly higher and rapidly changing demand. Careful traffic management and policy enforcement is critical when operating at such large scales, especially when any service disruption or additional delay may lead to massive productivity and/or profit loss. Due to the challenges of engineering networks of this scale and This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.  <ref type="bibr" target="#b16">[17]</ref> Python/C++ Yes Nicira The first OpenFlow controller written in Python and C++.</p><p>OpenFlow controller that has a C-based multi-threaded infrastructure MUL <ref type="bibr" target="#b56">[60]</ref> C Yes Kulcloud at its core. It supports a multi-level north-bound interface (see Section III-E) for application development. A network operating system based on Java; it provides interfaces Maestro <ref type="bibr" target="#b20">[21]</ref> Java Yes Rice University for implementing modular network control applications and for them to access and modify network state. Trema <ref type="bibr" target="#b57">[61]</ref> Ruby/C Yes NEC A framework for developing OpenFlow controllers written in Ruby and C. Beacon <ref type="bibr" target="#b21">[22]</ref> Java Yes Stanford A cross-platform, modular, Java-based OpenFlow controller that supports event-based and threaded operations. Jaxon <ref type="bibr" target="#b58">[62]</ref> Java Yes Independent Developers a Java-based OpenFlow controller based on NOX. Helios <ref type="bibr" target="#b23">[24]</ref> C No NEC An extensible C-based OpenFlow controller that provides a programmatic shell for performing integrated experiments. Floodlight <ref type="bibr" target="#b37">[38]</ref> Java Yes BigSwitch A Java-based OpenFlow controller (supports v1.3), based on the Beacon implementation, that works with physical-and virtual-OpenFlow switches. SNAC <ref type="bibr" target="#b22">[23]</ref> C++ No Nicira An OpenFlow controller based on NOX-0.4, which uses a web-based, user-friendly policy manager to manage the network, configure devices, and monitor events. An SDN operating system that aims to provide logically centralized control Ryu <ref type="bibr" target="#b59">[63]</ref> Python Yes NTT, OSRG group and APIs to create new network management and control applications. Ryu fully supports OpenFlow v1.0, v1.2, v1.3, and the Nicira Extensions. NodeFlow <ref type="bibr" target="#b60">[64]</ref> JavaScript Yes Independent Developers An OpenFlow controller written in JavaScript for Node.JS <ref type="bibr">[65]</ref>.</p><p>A simple OpenFlow controller reference implementation with Open vSwitch ovs-controller <ref type="bibr" target="#b52">[55]</ref> C Yes Independent Developers for managing any number of remote switches through the OpenFlow protocol; as a result the switches function as L2 MAC-learning switches or hubs. Flowvisor <ref type="bibr" target="#b47">[48]</ref> C Yes Stanford/Nicira Special purpose controller implementation. RouteFlow <ref type="bibr" target="#b61">[66]</ref> C++ Yes CPqD Special purpose controller implementation.</p><p>complexity to dynamically adapt to application requirements, it is often the case that data centers are provisioned for peak demand; as a result, they run well below capacity most of the time but are ready to rapidly service higher workloads.</p><p>An increasingly important consideration is energy consumption, which has a non-trivial cost in large-scale data centers. Heller et al. <ref type="bibr" target="#b74">[79]</ref> indicates that much research has been focused on improved servers and cooling (70% of total energy) through better hardware or software management, but the data center's network infrastructure (which accounts for 10-20% of the total energy cost) still consumed 3 billion kWh in 2006. They proposed ElasticTree, a network-wide power manager that utilizes SDN to find the minimum-power network subset which satisfies current traffic conditions and turns off switches that are not needed. As a result, they show energy savings between 25-62% under varying traffic conditions. One can imagine that these savings can be further increased if used in parallel with server management and virtualization; one possibility is the Honeyguide <ref type="bibr" target="#b75">[80]</ref> approach to energy optimization which uses virtual machine migration to increase the number of machines and switches that can be shutdown.</p><p>However, not all SDN solutions may be appropriate in high performance networks. While simplified traffic management and visibility are useful, it must be sensibly balanced with scalability and performance overhead. Curtis et al. <ref type="bibr" target="#b33">[34]</ref> believe that OpenFlow excessively couples central control and complete visibility, when in reality only "significant" flows need to be managed; this may lead to bottlenecks as the controldata communication adds delay to flow setup while switches are overloaded with thousands of flow table entries. Though aggressive use of proactive policies and wild-card rules may resolve that issue, it may undermine the ability of the controller to have the right granularity to effectively manage traffic and gather statistics. Their framework, DevoFlow, proposes some modest design changes to keep flows in the data plane as much as possible while maintaining enough visibility for effective flow management. This is accomplished by pushing responsibility over most flows back to the switches and adding more efficient statistics collection mechanisms, through which "significant" flows (e.g. long-lived, high-throughput) are identified and managed by the controller. In a load-balancing simulation, their solution had 10-53 times fewer flow table entries and 10-42 times fewer control messages on average over OpenFlow.</p><p>A practical example of a real application of the SDN concept and architecture in the context of data centers was presented by Google in early 2012. The company presented at the Open Network Summit <ref type="bibr" target="#b76">[81]</ref> a large scale implementation of an SDN-based network connecting its data centers. The work in <ref type="bibr" target="#b77">[82]</ref> presents in more detail the design, implementation, and evaluation of B4, a WAN connecting Google's datacenters world wide. This work describes one of the first and largest SDN deployments. The motivation was the need for customized routing and traffic engineering and the fact that the level of scalability, fault tolerance, cost efficiency and control required, could not be achieved by means of a traditional WAN architecture. A customized solution was proposed and an OpenFlow-based SDN architecture was built to control individual switches. After three years in production, B4 is shown to be efficient in the sense that it drives many links at near 100% utilization while splitting flows among multiple paths. Furthermore, the experience reported in the work shows that the bottleneck resulting from control-plane to data-plane communication and overhead in hardware programming are important issues to be considered in future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Infrastructure-based Wireless Access Networks</head><p>Several efforts have focused on ubiquitous connectivity in the context of infrastructure-based wireless access networks, such as cellular and WiFi.</p><p>For example, the OpenRoads project <ref type="bibr" target="#b78">[83]</ref>, <ref type="bibr" target="#b79">[84]</ref> envisions a world in which users could freely and seamlessly move across different wireless infrastructures which may be managed by various providers. They proposed the deployment of an SDNbased wireless architecture that is backwards-compatible, yet open and sharable between different service providers. They employ a testbed using OpenFlow-enabled wireless devices such as WiFi APs and WiMAX base stations controlled by NOX-and Flowvisor controllers and show improved performance on handover events. Their vision provided inspiration for subsequent work <ref type="bibr" target="#b80">[85]</ref> that attempts to address specific requirements and challenges in deploying a software-defined cellular network.</p><p>Odin <ref type="bibr" target="#b81">[86]</ref> introduces programmability in enterprise wireless LAN environments. In particular, it builds an access point abstraction on the controller that separates the association state from the physical access point, enabling proactive mobility management and load balancing without changes to the client.</p><p>At the other end of the spectrum, OpenRadio <ref type="bibr" target="#b82">[87]</ref> focuses on deploying a programmable wireless data plane that provides flexibility at the PHY and MAC layers (as opposed to layer-3 SDN) while meeting strict performance and time deadlines. The system is designed to provide a modular interface that is able to process traffic subsets using different protocols such as WiFi, WiMAX, 3GPP LTE-Advanced, etc. Based on the idea of separation of the decision and forwarding planes, an operator may express decision plane rules and corresponding actions, which are assembled from processing plane modules (e.g., FFT, Viterbi decoding, etc); the end result is a state machine that expresses a fully-functional protocol.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Optical Networks</head><p>Handling data traffic as flows, allows software-defined networks, and OpenFlow networks in particular, to support and integrate multiple network technologies. As a result, it is possible to provide also technology-agnostic unified control for optical transport networks and facilitating interaction between both packet and circuit-switched networks. According to the Optical Transport Working Group (OTWG) created in 2013 by the Open Network Foundation (ONF), the benefits from applying SDN and the OpenFlow standard in particular to optical transport networks include: improving optical transport network control and management flexibility, enabling deployment of third-party management and control systems, and deploying new services by leveraging virtualization and SDN <ref type="bibr" target="#b83">[88]</ref>.</p><p>There has been several attempts and proposals to control both circuit switched and packet switched networks using the OpenFlow protocol. In <ref type="bibr" target="#b84">[89]</ref> a NetFPGA <ref type="bibr" target="#b85">[90]</ref> platform is used in the proposal of a packet switching and circuit switched networks architectures based on Wavelength Selective Switching (WSS), using the OpenFlow protocol. Another control plane architecture based on OpenFlow for enabling SDN operations in optical networks was proposed in <ref type="bibr" target="#b86">[91]</ref>, which discusses specific requirements and describes implementation of OpenFlow protocol extensions to support optical transport networks.</p><p>A proof-of-concept demonstration of an OpenFlow-based wavelength path control in transparent optical networks is pre-sented in <ref type="bibr" target="#b87">[92]</ref>. In this work, virtual Ethernet interfaces (veths) are introduced. These veths, are mapped to physical interfaces of an optical node (e.g. photonic cross-connect -PXC), and enable an SDN controller (e.g. the NOX controller in this case) to operate the optical lightpaths (e.g., via the OpenFlow protocol). In their experimental setup, they quantitatively evaluate network performance metrics, such as the latency of lightpath setup and release, and verify the feasibility of routing and wavelength assignment, and the dynamic control of optical nodes in an OpenFlow-based network composed by four PXCs nodes in a mesh topology.</p><p>A Software Defined Optical Network (SDON) architecture is introduced in <ref type="bibr" target="#b89">[93]</ref> and a QoS-aware unified control protocol for optical burst switching in OpenFlow-based SDON is developed. The performance of the proposed protocol was evaluated with the conventional GMPLS-based distributed protocol and the results indicate that SDON offers an infrastructure to support unified control protocols to better optimize network performance and improve capacity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E. Home and Small Business</head><p>Several projects have examined how SDN could be used in smaller networks, such as those found in the home or small businesses. As these environments have become increasingly complex and prevalent with the widespread availability of lowcost network devices, the need for more careful network management and tighter security has correspondingly increased. Poorly secured networks may become unwitting targets or hosts for malware, while outages due to network configuration issues may cause frustration or lost business. Unfortunately, it is not practical to have a dedicated network administrator in every home and office.</p><p>Calvert et al. <ref type="bibr" target="#b90">[94]</ref> assert that the first step in managing home networks is to know what is actually happening; as such, they proposed instrumenting the network gateway/controller to act as a "Home Network Data Recorder" to create logs that may be utilized for troubleshooting or other purposes.</p><p>Feamster <ref type="bibr" target="#b91">[95]</ref> proposes that such networks should operate in a "plug in and forget" fashion, namely by outsourcing management to third-party experts, and that this could be accomplished successfully through the remote control of programmable switches and the application of distributed network monitoring and inference algorithms used to detect possible security problems.</p><p>In contrast, Mortier et al. <ref type="bibr" target="#b92">[96]</ref> believe that users desire greater understanding and control over their networks' behavior; rather than following traditional policies, a home network may be better managed by their users who better understand the dynamics and needs of their environment. Towards this goal, they created a prototype network in which SDN is used to provide users a view into how their network is being utilized while offering a single point of control.</p><p>Mehdi et al. <ref type="bibr" target="#b93">[97]</ref> argues that an Anomaly Detection System (ADS) implemented within a programmable home network provides a more accurate identification of malicious activity as compared to one deployed at the ISP; additionally, the implementation would be able to operate at line rate with no performance penalty, while, at the same time, offloading the This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.</p><p>ISP from having to monitor these large number of networks. The ADS algorithm could operate alongside other controller services, such as a HomeOS that may react to suspicious activity and report anomalies to the ISP or local administrator.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. RESEARCH CHALLENGES AND FUTURE DIRECTIONS</head><p>As SDN becomes more widely adopted and protocols such as OpenFlow are further defined, new solutions are proposed and new challenges arise. In this section we discuss various challenges posed by SDN as well as future research directions, namely: (1) controller and switch design, (2) scalability and performance in SDNs, (3) controller-service interfacing, (4) virtualization and cloud service applications, (5) information centric networking, and ( <ref type="formula">6</ref>) enabling heterogeneous networking with SDN.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Controller and Switch Design</head><p>SDN raises significant scalability, performance, robustness, and security challenges. Below we review a number of research efforts focusing on addressing these issues at the switch-and controller design level.</p><p>In DIFANE <ref type="bibr" target="#b34">[35]</ref>, flow entries are proactively pushed to switches in an attempt to reduce the number of requests to the controller. Devoflow <ref type="bibr" target="#b33">[34]</ref> proposes to handle "short-lived" flows in switches and "long-lived" flows in the controller to mitigate flow setup delay and controller overhead. The work proposed in <ref type="bibr" target="#b27">[28]</ref> advocates replacing counters on ASIC by a stream of rule-matching records and processing them in the CPU to allow efficient access to counters. FLARE <ref type="bibr" target="#b94">[98]</ref> is a new network node model focusing on "deeply programmable networks" that provides programmability for the data plane, the control plane, as well as the interface between them. The work presented in <ref type="bibr" target="#b95">[99]</ref> discusses important aspects in controller design including hierarchical control, data model, scalability, and extensibility.</p><p>As far as performance and scalability, the study presented in <ref type="bibr" target="#b96">[100]</ref> showed that one single controller can handle up to 6 million flows per second. A more recent study <ref type="bibr" target="#b97">[101]</ref>, focusing on the Beacon controller, showed that a controller can handle 12.8 million new flows per second in a 12 cores machine, with an average latency of 24.7 us for each flow. However, for increased scalability and especially for reliability and robustness purposes, it has been recognized that the logically-centralized controller must be physically distributed. Onix <ref type="bibr" target="#b43">[44]</ref>, Kando <ref type="bibr" target="#b46">[47]</ref>, and HyperFlow <ref type="bibr" target="#b44">[45]</ref> use this approach to achieve robust and scalable control plane. In <ref type="bibr" target="#b45">[46]</ref>, tradeoffs related to control distribution, such as staleness versus optimality and application logic complexity versus robustness to inconsistency are identified and quantified. In <ref type="bibr" target="#b40">[41]</ref>, the controller placement problem is discussed in terms of the number of controllers needed and where to place them in the network. In more recent work on distributed control, the need for dynamic assignment of switches to controllers is addressed in <ref type="bibr" target="#b98">[102]</ref>, which proposes an algorithm to increase or decrease the pool of controllers based on controllers' load estimates. They also propose a mechanism to dynamically handover switches from one controller to another as needed.</p><p>In <ref type="bibr" target="#b99">[103]</ref> an SDN variant inspired by MPLS was proposed along with the notions of edge controllers and fabric controllers: the former control ingress and egress switches and handle the host-network interface, while the latter handle fabric switches and the operator-network interface.</p><p>Although control and measurement are two important components of network management, little thought has gone into designing APIs for measurement. The work presented in <ref type="bibr" target="#b100">[104]</ref> proposes a software-defined traffic measurement architecture, which separates the measurement data plane from the control plane.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Software-Defined Internetworking</head><p>The Internet has revolutionized the way we, as individuals and as a society, live, work, conduct business, socialize, get entertainment, etc. As a result, the Internet is now considered part of our society's critical infrastructure much like the power, water, and transportation grids.</p><p>Scalability and performance requirements from increasingly complex applications have posed a variety of challenges difficult to address with the current Internet architecture. This has led the research community to examine "cleanslate" solutions <ref type="bibr" target="#b101">[105]</ref>. As the Internet has grown beyond the point at which a "flag day", such as the one used to "upgrade" the ARPANET with the TCP/IP protocol suite, would be realistic, another considerable challenge is evolving its physical infrastructure and protocols. A notable example is the deployment of IPv6: despite over a decade in the standards track and two worldwide deployment events, IPv4 still makes up the majority of Internet traffic.</p><p>Much of the current work on SDN examines or proposes solutions within the context of a single administrative domain which matches quite well SDN's logically centralized control model. However, environments whose administration is inherently decentralized, like the Internet, call for a control plane that is logically distributed. This will allow participating autonomous systems (ASes) to be controlled independently by their own (logically centralized and possibly physically distributed) controller. To-date, a few efforts have explored the idea of a Software-Defined Internet. For example, the work in <ref type="bibr" target="#b102">[106]</ref> proposed a software-defined Internet architecture that borrows from MPLS the distinction between network edge and core to split tasks between inter-domain and intra-domain components. As only the boundary routers and their associated controller in each domain are involved in inter-domain tasks, changes to inter-domain service models would be limited to software modifications at the inter-domain controllers rather than the entire infrastructure. Examples of how this architecture could be used to realize new Internet services such as information-centric networking, and middlebox service sharing are explored.</p><p>Another approach to inter-AS routing <ref type="bibr" target="#b103">[107]</ref> uses NOX and OpenFlow to implement BGP-like functionality. Alternatively, an extensible session protocol <ref type="bibr" target="#b104">[108]</ref> supports applicationdriven configuration of network resources across domains.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Controller-Service Interaction</head><p>While controller-switch ("southbound") interaction is fairly well defined in protocols such as OpenFlow and ForCES, there is no standard for interactions between controllers and network services or applications ("northbound"). One possible explanation is that the northbound interface is defined entirely in software, while controller-switch interactions must enable hardware implementation.</p><p>If we think of the controller as a "network operating system", then there should be a clearly defined interface by which applications can access the underlying hardware (switches), co-exist and interact with other applications, and utilize system services (e.g. topology discovery, forwarding), without requiring the application developer to know the implementation details of the controller. While there are several controllers that exist, their application interfaces are still in the early stages and independent from each other.</p><p>Some proposals (e.g., Procera <ref type="bibr" target="#b105">[109]</ref>, Frenetic <ref type="bibr" target="#b106">[110]</ref>, FML <ref type="bibr" target="#b107">[111]</ref>, Nettle <ref type="bibr" target="#b108">[112]</ref>) advocate the use of a network configuration language to express policies. For example, Procera <ref type="bibr" target="#b105">[109]</ref> builds a policy layer on top of existing controllers to interface with configuration files, GUIs, and external sensors; the proposed policy layer is responsible for converting highlevel policies to flow constraints given to be used by the controller. In <ref type="bibr" target="#b109">[113]</ref>, network configuration and management mechanisms are proposed that focus on enabling changes to network condition and state, supporting network configuration and policy definitions, and providing visibility and control over tasks for network diagnostics and troubleshooting. The specification of a northbound interface via a policy layer and a high level language such as Procera is discussed.</p><p>Additionally, the northbound API should allow applications to apply different policies to the same flow (e.g. forwarding by destination and monitoring by source IP). The work in <ref type="bibr" target="#b110">[114]</ref> proposed modularization to ensure that rules installed to perform one task do not override other rules. This was accomplished by means of an abstraction layer implemented with a language based on Frenetic.</p><p>Until a clear northbound interface standard emerges, SDN applications will continue to be developed in an "ad hoc" fashion and the concept of flexible and portable "network apps" may have to wait.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Virtualization and Cloud Services</head><p>The demand for virtualization and cloud services has been growing rapidly and attracting considerable interest from industry and academia. The challenges it presents include rapid provisioning, efficient resource management, and scalability which can be addressed using SDN's control model.</p><p>For example, FlowVisor <ref type="bibr" target="#b47">[48]</ref> and AutoSlice <ref type="bibr" target="#b111">[115]</ref> create different slices of network resources (e.g., bandwidth, topology, CPU, forwarding table), delegate them to different controllers, and enforce isolation between slices. Other SDN controllers can be used as a network backend to support virtualization in cloud operating systems, such as Floodlight for OpenStack <ref type="bibr" target="#b37">[38]</ref> and NOX for Mirage <ref type="bibr" target="#b112">[116]</ref>. FlowN <ref type="bibr" target="#b113">[117]</ref> aims to offer a scalable solution for network virtualization by providing an efficient mapping between virtual and physical networks and by leveraging scalable database systems.</p><p>In <ref type="bibr" target="#b114">[118]</ref>, an algorithm for efficient migration with bandwidth guarantees using OpenFlow was proposed. LIME <ref type="bibr" target="#b115">[119]</ref> is an SDN-based solution for live migration of Virtual Machines, which handles the network state during migration and automatically configures network devices at new locations. NetGraph <ref type="bibr" target="#b116">[120]</ref> provides a set of APIs for customers to access its virtual network functions such as real-time monitoring and diagnostics.</p><p>On the context of cloud data centers providing Infrastructure as a Service (IaaS), <ref type="bibr" target="#b117">[121]</ref> presents a management framework for resources in cloud data centers and addresses multiple management issues. In this paper, authors proposed a datacentric and event-driven architecture with open management interfaces, that leverages SDN techniques to integrate network resources into datacenter orchestration and service provisioning with the aim of improving service-level agreements and faster service delivery.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E. Information-Centric Networking</head><p>Information-Centric Networking (ICN) is a new paradigm proposed for the future architecture of the Internet, which aims to increase the efficiency of content delivery and content availability. This new concept has been popularized recently by a number of architecture proposals, such as Content-Centric Networking (CCN), also known as the Named Data Networking (NDN) project <ref type="bibr" target="#b118">[122]</ref>. Their driving motivation is that the current Internet is information-driven, yet networking technology is still focused on the idea of location-based addressing and host-to-host communication.By proposing an architecture that addresses named data rather than named hosts, content distribution is implemented directly into the network fabric rather than relying on the complicated mapping, availability, and security mechanisms currently used to map content to a single location.</p><p>The separation between information processing and forwarding in ICN is aligned with the decoupling of the data plane and control plane in SDN. The question then becomes how to combine ICN with SDN towards "Software-Defined Information-Centric Networks". A number of projects <ref type="bibr" target="#b119">[123]</ref>, <ref type="bibr" target="#b120">[124]</ref>, <ref type="bibr" target="#b121">[125]</ref>, [126], [127], [128] have proposed using SDN concepts to implement ICNs. As OpenFlow expands to support customized header matchings, SDN can be employed as a key enabling technology for ICNs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F. Heterogeneous Network Support</head><p>Future networks will become increasingly more heterogeneous, interconnecting users and applications over networks ranging from wired, infrastructure-based wireless (e.g., cellular-based networks, wireless mesh networks), to infrastructure-less wireless networks (e.g. mobile ad-hoc networks, vehicular networks). In the meantime, mobile traffic has been increasing exponentially over the past several years, and is expected to increase 18-fold by 2016, with more mobile-connected devices than the world's population, which is already a reality <ref type="bibr">[129]</ref>. As mobile devices with multiple network interfaces become commonplace, users will demand high quality communication service regardless of location or type of network access. Self-organizing networks (e.g., wireless multi-hop ad-hoc networks) may form to extend the range of infrastructure-based networks or handle episodic connectivity disruptions. Self-organizing networks may thus enable a variety of new applications such as cloud-based services, vehicular communication, community services, healthcare delivery, emergency response, and environmental monitoring, to name a few. Efficient content delivery over wireless access networks will become essential, and self-organizing networks may become a prevalent part of the future hybrid Internet.</p><p>A major challenge facing future networks is efficient utilization of resources; this is especially the case in wireless multi-hop ad-hoc networks as the available wireless capacity is inherently limited. This is due to a number of factors including the use of shared physical medium compounded, wireless channel impairments, and the absence of managed infrastructure. Though these self-organizing networks can be used to supplement or "fill the gaps" in an overburdened infrastructure <ref type="bibr">[130]</ref>, their lack of dedicated resources and shifting connectivity makes capacity sharing difficult. The heterogeneous characteristics of the underlying networks (e.g., physical medium, topology, stability) and nodes (e.g., buffer size, power limitations, mobility) also add another important factor when considering routing and resource allocation.</p><p>SDN has the potential to facilitate the deployment and management of network applications and services with greater efficiency. However, SDN techniques to-date, such as Open-Flow, largely target infrastructure-based networks. They promote a centralized control mechanism that is ill-suited to the level of decentralization, disruption, and delay present in infrastructure-less environments.</p><p>While previous work has examined the use of SDN in wireless environments, the scope has primarily focused on infrastructure-based deployments (e.g., WiMAX, Wi-Fi access points). A notable example is the OpenRoads project <ref type="bibr" target="#b78">[83]</ref>, which envisioned a world in which users could freely move between wireless infrastructures while also providing support to the network provider. Other studies such as [128], [131], <ref type="bibr">[132]</ref> have examined OpenFlow in wireless mesh environments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VII. CONCLUDING REMARKS</head><p>In this paper, we provided an overview of programmable networks and, in this context, examined the emerging field of Software-Defined Networking (SDN). We look at the history of programmable networks, from early ideas until recent developments. In particular we described the SDN architecture in detail as well as the OpenFlow <ref type="bibr" target="#b1">[2]</ref> standard. We presented current SDN implementations and testing platforms and examined network services and applications that have been developed based on the SDN paradigm. We concluded with a discussion of future directions enabled by SDN ranging from support for heterogeneous networks to Information Centric Networking (ICN).</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .Fig. 2 .</head><label>12</label><figDesc>Fig. 1. The SDN architecture decouples control logic from the forwarding hardware, and enables the consolidation of middleboxes, simpler policy management, and new functionalities. The solid lines define the data-plane links and the dashed lines the control-plane links.</figDesc><graphic coords="4,143.40,56.78,324.00,243.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. The Floodlight architecture as an example of an OpenFlow controller.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. A controller with a northbound and southbound interface.</figDesc><graphic coords="8,317.86,56.74,237.81,240.52" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>table -</head><label>-</label><figDesc></figDesc><table><row><cell>miss entry in order to handle table misses. This particular</cell></row><row><cell>entry specifies a set of actions to be performed when no</cell></row><row><cell>match is found for an incoming packet, such as dropping the</cell></row><row><cell>packet, continue the matching process on the next flow table,</cell></row><row><cell>or forward the packet to the controller over the OpenFlow</cell></row><row><cell>channel. It is worth noting that from version 1.1 OpenFlow</cell></row><row><cell>supports multiple tables and pipeline processing. Another</cell></row><row><cell>possibility, in the case of hybrid switches, i.e., switches that</cell></row><row><cell>have both OpenFlow-and non-OpenFlow ports, is to forward</cell></row><row><cell>non-matching packets using regular IP forwarding schemes.</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.</figDesc><table><row><cell>Learning</cell><cell></cell><cell cols="2">PortDown</cell><cell></cell><cell></cell><cell>OpenStack</cell></row><row><cell>Switch</cell><cell></cell><cell cols="2">Reconciliation</cell><cell></cell><cell cols="2">Quantum Plugin</cell></row><row><cell>Firewall</cell><cell></cell><cell>VNF</cell><cell>Hub</cell><cell></cell><cell></cell><cell>Circuit Pusher</cell></row><row><cell cols="3">JAVA API</cell><cell></cell><cell></cell><cell></cell></row><row><cell>Module Manager</cell><cell></cell><cell>Thread Pool</cell><cell cols="2">Packet Streamer</cell><cell>Jython Server</cell><cell>Web UI</cell><cell>Unit Tests</cell></row><row><cell>Device Manager</cell><cell cols="2">Topology Manager/ Routing</cell><cell cols="2">Link Discovery</cell><cell>Flow Cache</cell><cell>Storage Memory</cell></row><row><cell cols="2">Switches</cell><cell cols="2">Controller Memory</cell><cell cols="2">PerfMon</cell><cell>Trace</cell><cell>Counter Store</cell></row><row><cell></cell><cell></cell><cell cols="3">OpenFlow Services</cell><cell></cell></row></table><note><p><p>• Centralized vs. Distributed</p>Although protocols such as OpenFlow specify that a switch is controlled by a controller and therefore appears to imply centralization, software-defined networks may have either a centralized or distributed control-</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>TABLE I CURRENT</head><label>I</label><figDesc>SOFTWARE SWITCH IMPLEMENTATIONS COMPLIANT WITH THE OPENFLOW STANDARD.</figDesc><table><row><cell>Software Switch</cell><cell>Implementation</cell><cell>Overview</cell><cell>Version</cell></row><row><cell>Open vSwitch [55]</cell><cell>C/Python</cell><cell>Open source software switch that aims to implement a switch platform</cell><cell>v1.0</cell></row><row><cell></cell><cell></cell><cell>in virtualized server environments. Supports standard management</cell><cell></cell></row><row><cell></cell><cell></cell><cell>interfaces and enables programmatic extension and control of the</cell><cell></cell></row><row><cell></cell><cell></cell><cell>forwarding functions. Can be ported into ASIC switches.</cell><cell></cell></row><row><cell>Pantou/OpenWRT [56]</cell><cell>C</cell><cell>Turns a commercial wireless router or Access Point into an OpenFlow-enabled switch.</cell><cell>v1.0</cell></row><row><cell>ofsoftswitch13 [57]</cell><cell>C/C++</cell><cell>OpenFlow 1.3 compatible user-space software switch implementation.</cell><cell>v1.3</cell></row><row><cell>Indigo [58]</cell><cell>C</cell><cell>Open source OpenFlow implementation that runs on physical switches and uses</cell><cell>v1.0</cell></row><row><cell></cell><cell></cell><cell>the hardware features of Ethernet switch ASICs to run OpenFlow.</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>TABLE III CURRENT</head><label>III</label><figDesc>CONTROLLER IMPLEMENTATIONS COMPLIANT WITH THE OPENFLOW STANDARD.</figDesc><table><row><cell>Controller</cell><cell>Implementation</cell><cell>Open Source</cell><cell>Developer</cell><cell>Overview</cell></row><row><cell>POX [59]</cell><cell>Python</cell><cell>Yes</cell><cell>Nicira</cell><cell>General, open-source SDN controller written in Python.</cell></row><row><cell>NOX</cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>The authors would like to thank the reviewers for their careful examination of the manuscript and valuable comments which helped to considerably improve the quality of the paper. This work is partly funded by the Community Associated Team between INRIA and UCSC and the French ANR under the "ANR-13-INFR-013" project, and by NSF grant CNS 1150704.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">A</forename><surname>Doria</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Salim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Haas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Khosravi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Dong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Gopal</surname></persName>
		</author>
		<author>
			<persName><surname>Halpern</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Forwarding and Control Element Separation (ForCES) Protocol Specification. RFC</title>
		<imprint>
			<biblScope unit="volume">5810</biblScope>
			<date type="published" when="2010-03">March 2010</date>
		</imprint>
	</monogr>
	<note>Proposed Standard</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Openflow: enabling innovation in campus networks</title>
		<author>
			<persName><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Balakrishnan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Parulkar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Peterson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Turner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM Computer Commun. Review</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="69" to="74" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<ptr target="https://www.opennetworking.org/about" />
		<title level="m">Open networking foundation</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<ptr target="http://onrc.net" />
		<title level="m">Open Networking Research Center (ONRC)</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Openflow: a radical new idea in networking</title>
		<author>
			<persName><forename type="first">Thomas</forename><forename type="middle">A</forename><surname>Limoncelli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">55</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="42" to="47" />
			<date type="published" when="2012-08">August 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Open signaling for atm, internet and mobile networks (opensig&apos;98)</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">T</forename><surname>Campbell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Katzela</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Miki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Vicente</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM Computer Commun. Review</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="97" to="108" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><surname>Doria</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Hellstrand</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Sundell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Worster</surname></persName>
		</author>
		<title level="m">General Switch Management Protocol (GSMP) V3. RFC 3292 (Proposed Standard)</title>
		<imprint>
			<date type="published" when="2002-06">June 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A survey of active network research</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">L</forename><surname>Tennenhouse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">D</forename><surname>Sincoskie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Wetherall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">J</forename><surname>Minden</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Commun. Mag</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="80" to="86" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Towards an active network architecture</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">L</forename><surname>Tennenhouse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Wetherall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">DARPA Active NEtworks Conf. and Exposition</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2002">2002. 2002</date>
			<biblScope unit="page" from="2" to="15" />
		</imprint>
	</monogr>
	<note>Proc.</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Towards practical programmable packets</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">T</forename><surname>Moore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Nettles</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 20th Conf. on Computer Commun. (INFOCOM)</title>
		<meeting>20th Conf. on Computer Commun. (INFOCOM)</meeting>
		<imprint>
			<publisher>Citeseer</publisher>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<ptr target="http://www.cl.cam.ac.uk/research/srg/netos/old-projects/dcan/#pub" />
		<title level="m">Devolved Control of ATM Networks</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Switchlets and dynamic virtual atm networks</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Van Der Merwe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">M</forename><surname>Leslie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc Integrated Network Management V</title>
		<meeting>Integrated Network Management V</meeting>
		<imprint>
			<publisher>Chapman and Hall</publisher>
			<date type="published" when="1997">1997</date>
			<biblScope unit="page" from="355" to="368" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">The tempesta practical framework for network programmability</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Van Der Merwe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Rooney</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Leslie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Crosby</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Netw</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="20" to="28" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Network-wide decision making: Toward a wafer-thin control plane</title>
		<author>
			<persName><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Greenberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Hjalmtysson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Maltz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Myers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Zhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. HotNets</title>
		<meeting>HotNets</meeting>
		<imprint>
			<publisher>Citeseer</publisher>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="59" to="64" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">A clean slate 4d approach to network control and management</title>
		<author>
			<persName><forename type="first">A</forename><surname>Greenberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Hjalmtysson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Maltz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Myers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Yan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Zhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM Computer Commun. Review</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="41" to="54" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Design and implementation of a routing control platform</title>
		<author>
			<persName><forename type="first">M</forename><surname>Caesar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Caldwell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Feamster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Shaikh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Van Der Merwe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2nd conf. on Symp. on Networked Systems Design &amp; Implementation</title>
		<meeting>2nd conf. on Symp. on Networked Systems Design &amp; Implementation</meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2005">2005</date>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="15" to="28" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Nox: towards an operating system for networks</title>
		<author>
			<persName><forename type="first">N</forename><surname>Gude</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Koponen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pettit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Pfaff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Casado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM Computer Commun. Review</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="105" to="110" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">NETCONF Configuration Protocol. RFC 4741 (Proposed Standard)</title>
		<author>
			<persName><forename type="first">R</forename><surname>Enns</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006-12">December 2006</date>
		</imprint>
	</monogr>
	<note>Obsoleted by RFC 6241</note>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Case</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Fedor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">L</forename><surname>Schoffstall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Davin</surname></persName>
		</author>
		<title level="m">Simple network management protocol (snmp), rfc1157</title>
		<imprint>
			<date type="published" when="1990">1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Ethane: Taking control of the enterprise</title>
		<author>
			<persName><forename type="first">M</forename><surname>Casado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Freedman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pettit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM Computer Commun. Review</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="1" to="12" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Maestro: A system for scalable openflow control</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Cai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">L</forename><surname>Cox</surname></persName>
		</author>
		<author>
			<persName><surname>Ng</surname></persName>
		</author>
		<idno>TR10-08</idno>
		<imprint>
			<date type="published" when="2010-12">December 2010</date>
		</imprint>
		<respStmt>
			<orgName>Rice University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title/>
		<author>
			<persName><surname>Beacon</surname></persName>
		</author>
		<ptr target="https://openflow.stanford.edu/display/Beacon/Home" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<ptr target="http://www.openflow.org/wp/snac/" />
		<title level="m">Simple Network Access Control (SNAC)</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<ptr target="http://www.nec.com/" />
		<title level="m">Helios by nec</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Review: A survey on content-centric technologies for the current internet: Cdn and p2p solutions</title>
		<author>
			<persName><forename type="first">Andrea</forename><surname>Passarella</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Commun</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="32" />
			<date type="published" when="2012-01">January 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">Zhiliang</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tina</forename><surname>Tsou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jing</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xingang</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xia</forename><surname>Yin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Analysis of Comparisons between OpenFlow and ForCES</title>
		<imprint>
			<date type="published" when="2012-03">March 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Using cpu as a traffic co-processing unit in commodity switches</title>
		<author>
			<persName><forename type="first">Guohan</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rui</forename><surname>Miao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yongqiang</forename><surname>Xiong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chuanxiong</forename><surname>Guo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st workshop on Hot topics in software defined networks, HotSDN &apos;12</title>
		<meeting>1st workshop on Hot topics in software defined networks, HotSDN &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="31" to="36" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Hey, you darned counters!: get off my asic</title>
		<author>
			<persName><forename type="first">Jeffrey</forename><forename type="middle">C</forename><surname>Mogul</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Paul</forename><surname>Congdon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st workshop on Hot topics in software defined networks, HotSDN &apos;12</title>
		<meeting>1st workshop on Hot topics in software defined networks, HotSDN &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="25" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Accelerating openflow switching with network processors</title>
		<author>
			<persName><forename type="first">Yan</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pablo</forename><surname>Cascon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Eric</forename><surname>Murray</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Julio</forename><surname>Ortega</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 5th ACM/IEEE Symp. on Architectures for Networking and Commun. Syst., ANCS &apos;09</title>
		<meeting>5th ACM/IEEE Symp. on Architectures for Networking and Commun. Syst., ANCS &apos;09<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="70" to="71" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Improving pcbased openflow switching performance</title>
		<author>
			<persName><forename type="first">Voravit</forename><surname>Tanyingyong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Markus</forename><surname>Hidell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Peter</forename><surname>Sjödin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 6th ACM/IEEE Symp. on Architectures for Networking and Commun. Syst., ANCS &apos;10</title>
		<meeting>6th ACM/IEEE Symp. on Architectures for Networking and Commun. Syst., ANCS &apos;10<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="1" to="13" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Openflow switching: Data plane performance</title>
		<author>
			<persName><forename type="first">A</forename><surname>Bianco</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Birke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Giraudo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Palacin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2010 IEEE Int. Conf. Commun. (ICC)</title>
		<imprint>
			<date>May</date>
			<biblScope unit="page" from="1" to="5" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Modeling and performance evaluation of an openflow architecture</title>
		<author>
			<persName><forename type="first">M</forename><surname>Jarschel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Oechsner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Schlosser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Pries</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Goll</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Tran-Gia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Teletraffic Congress (ITC), 2011 23rd Int</title>
		<imprint>
			<biblScope unit="page" from="1" to="7" />
		</imprint>
	</monogr>
	<note>Sept</note>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Past: scalable ethernet for data centers</title>
		<author>
			<persName><forename type="first">Brent</forename><surname>Stephens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alan</forename><surname>Cox</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wes</forename><surname>Felter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Colin</forename><surname>Dixon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><surname>Carter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 8th int. conf. on Emerging networking experiments and technologies, CoNEXT &apos;12</title>
		<meeting>8th int. conf. on Emerging networking experiments and technologies, CoNEXT &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="49" to="60" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Devoflow: scaling flow management for high-performance networks</title>
		<author>
			<persName><forename type="first">Andrew</forename><forename type="middle">R</forename><surname>Curtis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jeffrey</forename><forename type="middle">C</forename><surname>Mogul</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jean</forename><surname>Tourrilhes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Praveen</forename><surname>Yalagandula</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Puneet</forename><surname>Sharma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sujata</forename><surname>Banerjee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGCOMM Comput</title>
		<imprint>
			<date type="published" when="2011-08">August 2011</date>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="page" from="254" to="265" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Scalable flow-based networking with difane</title>
		<author>
			<persName><forename type="first">M</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Freedman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGCOMM 2010 conf. on SIGCOMM</title>
		<meeting>ACM SIGCOMM 2010 conf. on SIGCOMM</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="351" to="362" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Palette: Distributing tables in software-defined networks</title>
		<author>
			<persName><forename type="first">Yossi</forename><surname>Kanizo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Hay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Isaac</forename><surname>Keslassy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">INFOCOM</title>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="545" to="549" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title level="m" type="main">Optimizing the one big switch abstraction in software-defined networks</title>
		<author>
			<persName><forename type="first">Nanxi</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhenming</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jennifer</forename><surname>Rexford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Walker</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<ptr target="http://floodlight.openflowhub.org/" />
		<title level="m">Floodlight, an open sdn controller</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">On controller performance in software-defined networks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Tootoonchian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Gorbunov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Ganjali</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Casado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sherwood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Workshop on Hot Topics in Management of Internet, Cloud, and Enterprise Networks and Services</title>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
	<note>Hot-ICE</note>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Scalable software defined network controllers</title>
		<author>
			<persName><forename type="first">Andreas</forename><surname>Voellmy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Junchang</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGCOMM 2012 conf. on Applications, technologies, architectures, and protocols for computer commun., SIGCOMM &apos;12</title>
		<meeting>ACM SIGCOMM 2012 conf. on Applications, technologies, architectures, and protocols for computer commun., SIGCOMM &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="289" to="290" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">The controller placement problem</title>
		<author>
			<persName><forename type="first">Brandon</forename><surname>Heller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rob</forename><surname>Sherwood</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nick</forename><surname>Mckeown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st workshop on Hot topics in software defined networks, HotSDN &apos;12</title>
		<meeting>1st workshop on Hot topics in software defined networks, HotSDN &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="7" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Openflow: Why latency does matter</title>
		<author>
			<persName><forename type="first">K</forename><surname>Phemius</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Bouet</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Integrated Network Management (IM 2013), 2013 IFIP/IEEE Int. Symp. on</title>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="680" to="683" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">On scalability of software-defined networking</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">H</forename><surname>Yeganeh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Tootoonchian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Ganjali</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Commun. Mag</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="136" to="141" />
			<date>February</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Onix: A distributed control platform for large-scale production networks</title>
		<author>
			<persName><forename type="first">T</forename><surname>Koponen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Casado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Gude</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Stribling</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Poutievski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ramanathan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Iwata</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Inoue</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Hama</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">OSDI</title>
		<imprint>
			<date type="published" when="2010-10">Oct, 2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Hyperflow: A distributed control plane for openflow</title>
		<author>
			<persName><forename type="first">A</forename><surname>Tootoonchian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Ganjali</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2010 internet network management conf</title>
		<meeting>2010 internet network management conf</meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="3" to="3" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Logically centralized?: state distribution trade-offs in software defined networks</title>
		<author>
			<persName><forename type="first">Dan</forename><surname>Levin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andreas</forename><surname>Wundsam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Brandon</forename><surname>Heller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nikhil</forename><surname>Handigol</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Anja</forename><surname>Feldmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st workshop on Hot topics in software defined networks, HotSDN &apos;12</title>
		<meeting>1st workshop on Hot topics in software defined networks, HotSDN &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Kandoo: a framework for efficient and scalable offloading of control applications</title>
		<author>
			<persName><forename type="first">Soheil</forename><surname>Hassas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yeganeh</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Yashar</forename><surname>Ganjali</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st workshop on Hot topics in software defined networks, HotSDN &apos;12</title>
		<meeting>1st workshop on Hot topics in software defined networks, HotSDN &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="19" to="24" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Carving research slices out of your production networks with openflow</title>
		<author>
			<persName><forename type="first">R</forename><surname>Sherwood</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Covington</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Gibb</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Flajslik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Handigol</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">Y</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Kazemian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Kobayashi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Naous</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM Computer Commun. Review</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="129" to="130" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<monogr>
		<title level="m" type="main">Itu telecommunication standardization sector&apos;s sdn portal</title>
		<ptr target="http://www.itu.int/en/ITUT/sdn/Pages/default.aspx" />
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<monogr>
		<title level="m" type="main">Software-defined networking research groupsdnrg at irtf</title>
		<ptr target="http://irtf.org/sdnrg" />
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">A network in a laptop: rapid prototyping for software-defined networks</title>
		<author>
			<persName><forename type="first">Bob</forename><surname>Lantz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Brandon</forename><surname>Heller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nick</forename><surname>Mckeown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 9th ACM SIGCOMM Workshop on Hot Topics in Netw</title>
		<meeting>9th ACM SIGCOMM Workshop on Hot Topics in Netw</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">Network simulations with the ns-3 simulator</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">R</forename><surname>Henderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lacage</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">F</forename><surname>Riley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Dowell</surname></persName>
		</author>
		<author>
			<persName><surname>Kopena</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGCOMM demonstration</title>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<monogr>
		<ptr target="http://openvswitch.org/" />
		<title level="m">Open vswitch and ovs-controller</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<monogr>
		<title level="m" type="main">Openflow 1.0 for openwrt</title>
		<author>
			<persName><surname>Pantou</surname></persName>
		</author>
		<ptr target="http://www.openflow.org/wk/index.php/Open-Flow1.0forOpenWRT" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<monogr>
		<title level="m" type="main">Open source openflow switches</title>
		<ptr target="http://www.openflowhub.org/display/Indigo/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<monogr>
		<ptr target="http://www.noxrepo.org/pox/about-pox/" />
		<title level="m">Pox</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<monogr>
		<title/>
		<author>
			<persName><surname>Mul</surname></persName>
		</author>
		<ptr target="http://sourceforge.net/p/mul/wiki/Home/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title/>
		<ptr target="https://github.com/trema/trema" />
	</analytic>
	<monogr>
		<title level="j">Trema openflow controller framework</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<monogr>
		<ptr target="http://jaxon.onuos.org/" />
		<title level="m">Jaxon:java-based openflow controller</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<monogr>
		<ptr target="http://osrg.github.com/ryu/" />
		<title level="m">Ryu</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<monogr>
		<ptr target="http://garyberger.net/?p=537" />
		<title level="m">The nodeflow openflow controller</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title level="a" type="main">Virtual routers as a service: the routeflow approach leveraging software-defined networks</title>
		<author>
			<persName><forename type="first">Marcelo</forename><forename type="middle">R</forename><surname>Nascimento</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christian</forename><forename type="middle">E</forename><surname>Rothenberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Marcos</forename><forename type="middle">R</forename><surname>Salvador</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">A</forename><surname>Carlos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sidney</forename><forename type="middle">C</forename><surname>Corrêa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Maurício</forename><forename type="middle">F</forename><surname>De Lucena</surname></persName>
		</author>
		<author>
			<persName><surname>Magalhães</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 6th Int. Conf. on Future Internet Technol., CFI &apos;11</title>
		<meeting>6th Int. Conf. on Future Internet Technol., CFI &apos;11<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="34" to="37" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<analytic>
		<title level="a" type="main">Revisiting routing control platforms with the eyes and muscles of software-defined networking</title>
		<author>
			<persName><forename type="first">Christian</forename><surname>Esteve Rothenberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Marcelo</forename><forename type="middle">Ribeiro</forename><surname>Nascimento</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Marcos</forename><forename type="middle">Rogerio</forename><surname>Salvador</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Carlos</forename><surname>Nilton Araujo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sidney</forename><surname>Corrêa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Robert</forename><surname>Cunha De Lucena</surname></persName>
		</author>
		<author>
			<persName><surname>Raszuk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st workshop on Hot topics in software defined networks, HotSDN &apos;12</title>
		<meeting>1st workshop on Hot topics in software defined networks, HotSDN &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="13" to="18" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<analytic>
		<title level="a" type="main">A nice way to test openflow applications</title>
		<author>
			<persName><forename type="first">M</forename><surname>Canini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Venzano</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Peresini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Kostic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">NSDI</title>
		<imprint>
			<date type="published" when="2012-04">Apr, 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<analytic>
		<title level="a" type="main">Debugging the data plane with anteater</title>
		<author>
			<persName><forename type="first">Haohui</forename><surname>Mai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ahmed</forename><surname>Khurshid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rachit</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matthew</forename><surname>Caesar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">Brighten</forename><surname>Godfrey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Samuel</forename><forename type="middle">Talmadge</forename><surname>King</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGCOMM 2011 conf., SIGCOMM &apos;11</title>
		<meeting>ACM SIGCOMM 2011 conf., SIGCOMM &apos;11<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="290" to="301" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b65">
	<analytic>
		<title level="a" type="main">Veriflow: verifying network-wide invariants in real time</title>
		<author>
			<persName><forename type="first">Ahmed</forename><surname>Khurshid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wenxuan</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matthew</forename><surname>Caesar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">Brighten</forename><surname>Godfrey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st workshop on Hot topics in software defined networks, HotSDN &apos;12</title>
		<meeting>1st workshop on Hot topics in software defined networks, HotSDN &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="49" to="54" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b66">
	<analytic>
		<title level="a" type="main">Ofrewind: enabling record and replay troubleshooting for networks</title>
		<author>
			<persName><forename type="first">Andreas</forename><surname>Wundsam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dan</forename><surname>Levin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Srini</forename><surname>Seetharaman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Anja</forename><surname>Feldmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2011 USENIX conf. on USENIX annu. technical conf., USENIXATC&apos;11</title>
		<meeting>2011 USENIX conf. on USENIX annu. technical conf., USENIXATC&apos;11<address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="29" to="29" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<analytic>
		<title level="a" type="main">Where is the debugger for my softwaredefined network?</title>
		<author>
			<persName><forename type="first">Nikhil</forename><surname>Handigol</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Brandon</forename><surname>Heller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Vimalkumar</forename><surname>Jeyakumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Maziéres</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nick</forename><surname>Mckeown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st workshop on Hot topics in software defined networks, HotSDN &apos;12</title>
		<meeting>1st workshop on Hot topics in software defined networks, HotSDN &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="55" to="60" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b68">
	<monogr>
		<ptr target="http://ucb-sts.github.com/sts/" />
		<title level="m">Sdn troubleshooting simulator</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<monogr>
		<title level="m" type="main">Plug-n-serve: Load-balancing web traffic using openflow</title>
		<author>
			<persName><forename type="first">N</forename><surname>Handigol</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Seetharaman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Flajslik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Johari</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
			<publisher>ACM SIGCOMM Demo</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b70">
	<analytic>
		<title level="a" type="main">Openflow-based server load balancing gone wild</title>
		<author>
			<persName><forename type="first">R</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Butnariu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop of HotICE</title>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="volume">11</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b71">
	<analytic>
		<title level="a" type="main">Resonance: Dynamic access control for enterprise networks</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">K</forename><surname>Nayak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Reimers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Feamster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Clark</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st ACM workshop on Research on enterprise networking</title>
		<meeting>1st ACM workshop on Research on enterprise networking</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="11" to="18" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b72">
	<monogr>
		<title level="m" type="main">Toward softwaredefined middlebox networking</title>
		<author>
			<persName><forename type="first">A</forename><surname>Gember</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Prabhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Ghadiyali</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Akella</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b73">
	<analytic>
		<title level="a" type="main">Abstractions for network update</title>
		<author>
			<persName><forename type="first">Mark</forename><surname>Reitblatt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nate</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jennifer</forename><surname>Rexford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Cole</forename><surname>Schlesinger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Walker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGCOMM 2012 conf. on Applications, technologies, architectures, and protocols for computer commun., SIGCOMM &apos;12</title>
		<meeting>ACM SIGCOMM 2012 conf. on Applications, technologies, architectures, and protocols for computer commun., SIGCOMM &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="323" to="334" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b74">
	<analytic>
		<title level="a" type="main">Elastictree: Saving energy in data center networks</title>
		<author>
			<persName><forename type="first">B</forename><surname>Heller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Seetharaman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Mahadevan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Yiakoumis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Sharma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Banerjee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 7th USENIX conf. on Networked systems design and implementation</title>
		<meeting>7th USENIX conf. on Networked systems design and implementation</meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="17" to="17" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b75">
	<analytic>
		<title level="a" type="main">Honeyguide: A vm migration-aware network topology for saving energy consumption in data center networks</title>
		<author>
			<persName><forename type="first">H</forename><surname>Shirayanagi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Yamada</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Kono</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Symp. Computers and Commun. (ISCC)</title>
		<imprint>
			<biblScope unit="page" from="460" to="000467" />
			<date type="published" when="2012">2012. 2012</date>
			<publisher>IEEE</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b76">
	<analytic>
		<title level="a" type="main">Inter-datacenter wan with centralized te using sdn and openflow</title>
	</analytic>
	<monogr>
		<title level="m">Open Networking Summit</title>
		<imprint>
			<date type="published" when="2012-04">April 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b77">
	<analytic>
		<title level="a" type="main">Experience with a globally-deployed software defined wan</title>
		<author>
			<persName><forename type="first">Sushant</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alok</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Subhasree</forename><surname>Mandal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Joon</forename><surname>Ong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Leon</forename><surname>Poutievski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Arjun</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Subbaiah</forename><surname>Venkata</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jim</forename><surname>Wanderer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Junlan</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Min</forename><surname>Zhu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGCOMM 2013 conf. on SIGCOMM</title>
		<meeting>ACM SIGCOMM 2013 conf. on SIGCOMM</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="3" to="14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b78">
	<analytic>
		<title level="a" type="main">Blueprint for introducing innovation into wireless mobile networks</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">K</forename><surname>Yap</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sherwood</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Kobayashi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">Y</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Handigol</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Parulkar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2nd ACM SIGCOMM workshop on Virtualized infrastructure systems and architectures</title>
		<meeting>2nd ACM SIGCOMM workshop on Virtualized infrastructure systems and architectures</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="25" to="32" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b79">
	<analytic>
		<title level="a" type="main">Openroads: Empowering research in mobile networks</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">K</forename><surname>Yap</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Kobayashi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sherwood</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">Y</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Handigol</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM Computer Commun. Review</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="125" to="126" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b80">
	<analytic>
		<title level="a" type="main">Toward software-defined cellular networks</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">E</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><forename type="middle">M</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Software Defined Networking (EWSDN)</title>
		<imprint>
			<date type="published" when="2012">2012. 2012</date>
			<biblScope unit="page" from="7" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b81">
	<analytic>
		<title level="a" type="main">Towards programmable enterprise wlans with odin</title>
		<author>
			<persName><forename type="first">Lalith</forename><surname>Suresh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Julius</forename><surname>Schulz-Zander</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ruben</forename><surname>Merz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Anja</forename><surname>Feldmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Teresa</forename><surname>Vazao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st workshop on Hot topics in software defined networks, HotSDN &apos;12</title>
		<meeting>1st workshop on Hot topics in software defined networks, HotSDN &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="115" to="120" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b82">
	<analytic>
		<title level="a" type="main">Openradio: a programmable wireless dataplane</title>
		<author>
			<persName><forename type="first">M</forename><surname>Bansal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Mehlman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Katti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Levis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st workshop on Hot topics in software defined networks</title>
		<meeting>1st workshop on Hot topics in software defined networks</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="109" to="114" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b83">
	<analytic>
		<title level="a" type="main">Optical transport working group otwg</title>
	</analytic>
	<monogr>
		<title level="m">Open Networking Foundation ONF</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b84">
	<analytic>
		<title level="a" type="main">Experimental demonstration of openflow control of packet and circuit switches</title>
		<author>
			<persName><forename type="first">V</forename><surname>Gudla</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Das</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Shastri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Parulkar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Kazovsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Yamashita</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Optical Fiber Commun. (OFC), collocated National Fiber Optic Engineers Conf., 2010 Conf. on (OFC/NFOEC)</title>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="1" to="3" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b85">
	<monogr>
		<ptr target="http://netfpga.org" />
		<title level="m">Netfpga platform</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b86">
	<analytic>
		<title level="a" type="main">Software defined optical networks technology and infrastructure: Enabling software-defined optical network operations</title>
		<author>
			<persName><forename type="first">E</forename><surname>Dimitra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Reza</forename><surname>Simeonidou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mayur</forename><surname>Nejabati</surname></persName>
		</author>
		<author>
			<persName><surname>Channegowda</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Optical Fiber Commun. Conf./National Fiber Optic Engineers Conf</title>
		<imprint>
			<publisher>Optical Society of America</publisher>
			<date type="published" when="2013">2013. 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b87">
	<analytic>
		<title level="a" type="main">Openflow-based wavelength path control in transparent optical networks: A proof-of-concept demonstration</title>
		<author>
			<persName><forename type="first">Lei</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Tsuritani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Morita</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hongxiang</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jian</forename><surname>Wu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Optical Commun</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b88">
	<monogr>
		<author>
			<persName><surname>Ecoc)</surname></persName>
		</author>
		<title level="m">th European Conf. and Exhibition on</title>
		<imprint>
			<date type="published" when="2011">2011. 2011</date>
			<biblScope unit="page" from="1" to="3" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b89">
	<analytic>
		<title level="a" type="main">Qos-aware optical burst switching in openflow based software-defined optical networks</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">N</forename><surname>Patel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">N</forename><surname>Ji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ting</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Optical Netw. Design and Modeling (ONDM), 2013 17th Int. Conf. on</title>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="275" to="280" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b90">
	<analytic>
		<title level="a" type="main">Instrumenting home networks</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">L</forename><surname>Calvert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">K</forename><surname>Edwards</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Feamster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">E</forename><surname>Grinter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Deng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM Computer Commun. Review</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="84" to="89" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b91">
	<analytic>
		<title level="a" type="main">Outsourcing home network security</title>
		<author>
			<persName><forename type="first">N</forename><surname>Feamster</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2010 ACM SIGCOMM workshop on Home networks</title>
		<meeting>2010 ACM SIGCOMM workshop on Home networks</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="37" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b92">
	<analytic>
		<title level="a" type="main">Control and understanding: Owning your home network</title>
		<author>
			<persName><forename type="first">R</forename><surname>Mortier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Rodden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Lodge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Mcauley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Rotsos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Moore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Koliousis</surname></persName>
		</author>
		<author>
			<persName><surname>Sventek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">4th Int. Conf. on Commun. Syst. and Netw. (COMSNETS)</title>
		<imprint>
			<biblScope unit="page" from="1" to="10" />
			<date type="published" when="2012">2012. 2012</date>
			<publisher>IEEE</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b93">
	<analytic>
		<title level="a" type="main">Revisiting traffic anomaly detection using software defined networking</title>
		<author>
			<persName><forename type="first">S</forename><surname>Mehdi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Khalid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Khayam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Recent Advances in Intrusion Detection</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="161" to="180" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b94">
	<monogr>
		<title level="m" type="main">Flare : Open deeply programmable network node architecture</title>
		<author>
			<persName><forename type="first">Akihiro</forename><surname>Nakao</surname></persName>
		</author>
		<ptr target="http://netseminar.stanford.edu/101812.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b95">
	<analytic>
		<title level="a" type="main">A practical experience in designing an openflow controller</title>
		<author>
			<persName><forename type="first">R</forename><surname>Bifulco</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Canonico</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Brunner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Hasselmeyer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Mir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Software Defined Networking (EWSDN)</title>
		<imprint>
			<date type="published" when="2012-10">2012. Oct</date>
			<biblScope unit="page" from="61" to="66" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b96">
	<monogr>
		<ptr target="http://www.openflow.org/wk/index.php/ControllerPerformanceComparisons" />
		<title level="m">Controller performance comparisons</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b97">
	<monogr>
		<title level="m" type="main">The beacon openflow controller</title>
		<author>
			<persName><forename type="first">David</forename><surname>Erickson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b98">
	<analytic>
		<title level="a" type="main">Towards an elastic distributed sdn controller</title>
		<author>
			<persName><forename type="first">Advait</forename><surname>Dixit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Fang</forename><surname>Hao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sarit</forename><surname>Mukherjee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">V</forename><surname>Lakshman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ramana</forename><surname>Kompella</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2nd ACM SIGCOMM workshop on Hot topics in software defined networking, HotSDN &apos;13</title>
		<meeting>2nd ACM SIGCOMM workshop on Hot topics in software defined networking, HotSDN &apos;13<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="7" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b99">
	<analytic>
		<title level="a" type="main">Fabric: a retrospective on evolving sdn</title>
		<author>
			<persName><forename type="first">Martin</forename><surname>Casado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Teemu</forename><surname>Koponen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Scott</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Amin</forename><surname>Tootoonchian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st workshop on Hot topics in software defined networks, HotSDN &apos;12</title>
		<meeting>1st workshop on Hot topics in software defined networks, HotSDN &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="85" to="90" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b100">
	<analytic>
		<title level="a" type="main">Software defined traffic measurement with opensketch</title>
		<author>
			<persName><forename type="first">Minlan</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lavanya</forename><surname>Jose</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rui</forename><surname>Miao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 10th USENIX Symp. on Networked Systems Design and Implementation, NSDI&apos;13</title>
		<meeting>10th USENIX Symp. on Networked Systems Design and Implementation, NSDI&apos;13</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b101">
	<analytic>
		<title level="a" type="main">Internet clean-slate design: what and why? SIGCOMM Comput</title>
		<author>
			<persName><forename type="first">Anja</forename><surname>Feldmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. Rev</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="59" to="64" />
			<date type="published" when="2007-07">July 2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b102">
	<analytic>
		<title level="a" type="main">Software-defined internet architecture: decoupling architecture from infrastructure</title>
		<author>
			<persName><forename type="first">Martín</forename><surname>Barath Raghavan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Teemu</forename><surname>Casado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sylvia</forename><surname>Koponen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ali</forename><surname>Ratnasamy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Scott</forename><surname>Ghodsi</surname></persName>
		</author>
		<author>
			<persName><surname>Shenker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 11th ACM Workshop on Hot Topics in Networks, HotNets-XI</title>
		<meeting>11th ACM Workshop on Hot Topics in Networks, HotNets-XI<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="43" to="48" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b103">
	<analytic>
		<title level="a" type="main">An inter-as routing component for software-defined networks</title>
		<author>
			<persName><forename type="first">R</forename><surname>Bennesby</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Fonseca</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Mota</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Passito</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Network Operations and Management Symp. (NOMS)</title>
		<imprint>
			<date type="published" when="2012">2012. 2012</date>
			<biblScope unit="page" from="138" to="145" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b104">
	<analytic>
		<title level="a" type="main">Driving software defined networks with xsp</title>
		<author>
			<persName><forename type="first">E</forename><surname>Kissel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Fernandes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Jaffee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Swany</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SDN12: Workshop on Software Defined Networks</title>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b105">
	<analytic>
		<title level="a" type="main">Procera: a language for high-level reactive network control</title>
		<author>
			<persName><forename type="first">Andreas</forename><surname>Voellmy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hyojoon</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nick</forename><surname>Feamster</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st workshop on Hot topics in software defined networks, HotSDN &apos;12</title>
		<meeting>1st workshop on Hot topics in software defined networks, HotSDN &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="43" to="48" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b106">
	<analytic>
		<title level="a" type="main">Frenetic: a network programming language</title>
		<author>
			<persName><forename type="first">Nate</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rob</forename><surname>Harrison</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><forename type="middle">J</forename><surname>Freedman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christopher</forename><surname>Monsanto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jennifer</forename><surname>Rexford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alec</forename><surname>Story</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Walker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 16th ACM SIGPLAN int. conf. on Functional programming, ICFP &apos;11</title>
		<meeting>16th ACM SIGPLAN int. conf. on Functional programming, ICFP &apos;11<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="279" to="291" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b107">
	<analytic>
		<title level="a" type="main">Practical declarative network management</title>
		<author>
			<persName><forename type="first">Timothy</forename><forename type="middle">L</forename><surname>Hinrichs</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Natasha</forename><forename type="middle">S</forename><surname>Gude</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Martin</forename><surname>Casado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><forename type="middle">C</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Scott</forename><surname>Shenker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st ACM workshop on Research on enterprise networking, WREN &apos;09</title>
		<meeting>1st ACM workshop on Research on enterprise networking, WREN &apos;09<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b108">
	<analytic>
		<title level="a" type="main">Nettle: taking the sting out of programming network routers</title>
		<author>
			<persName><forename type="first">Andreas</forename><surname>Voellmy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Paul</forename><surname>Hudak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 13th int. conf. on Practical aspects of declarative languages, PADL&apos;11</title>
		<meeting>13th int. conf. on Practical aspects of declarative languages, PADL&apos;11<address><addrLine>Berlin, Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="235" to="249" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b109">
	<analytic>
		<title level="a" type="main">Improving network management with software defined networking</title>
		<author>
			<persName><forename type="first">Hyojoon</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Feamster</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Commun. Mag</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="114" to="119" />
			<date>February</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b110">
	<analytic>
		<title level="a" type="main">Composing software-defined networks</title>
		<author>
			<persName><forename type="first">Christopher</forename><surname>Monsanto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Joshua</forename><surname>Reich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nate</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jennifer</forename><surname>Rexford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Walker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 10th USENIX Symp. on Networked Systems Design and Implementation, NSDI&apos;13</title>
		<meeting>10th USENIX Symp. on Networked Systems Design and Implementation, NSDI&apos;13</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b111">
	<analytic>
		<title level="a" type="main">Autoslice: automated and scalable slicing for software-defined networks</title>
		<author>
			<persName><forename type="first">Zdravko</forename><surname>Bozakov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Panagiotis</forename><surname>Papadimitriou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2012 ACM conf. on CoNEXT student workshop, CoNEXT Student &apos;12</title>
		<meeting>2012 ACM conf. on CoNEXT student workshop, CoNEXT Student &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="3" to="4" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b112">
	<monogr>
		<ptr target="http://www.openmirage.org/blog/announcing-mirage-openflow" />
		<title level="m">Connected cloud control: Openflow in mirage</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b113">
	<analytic>
		<title level="a" type="main">Scalable network virtualization in software-defined networks</title>
		<author>
			<persName><forename type="first">D</forename><surname>Drutskoy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Keller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Internet Comput</title>
		<imprint>
			<biblScope unit="issue">99</biblScope>
			<biblScope unit="page" from="1" to="1" />
		</imprint>
	</monogr>
	<note>PP</note>
</biblStruct>

<biblStruct xml:id="b114">
	<analytic>
		<title level="a" type="main">Walk the line: consistent network updates with bandwidth guarantees</title>
		<author>
			<persName><forename type="first">Soudeh</forename><surname>Ghorbani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matthew</forename><surname>Caesar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st workshop on Hot topics in software defined networks, HotSDN &apos;12</title>
		<meeting>1st workshop on Hot topics in software defined networks, HotSDN &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="67" to="72" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b115">
	<analytic>
		<title level="a" type="main">Live migration of an entire network (and its hosts)</title>
		<author>
			<persName><forename type="first">Eric</forename><surname>Keller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Soudeh</forename><surname>Ghorbani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matt</forename><surname>Caesar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jennifer</forename><surname>Rexford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 11th ACM Workshop on Hot Topics in Networks, HotNets-XI</title>
		<meeting>11th ACM Workshop on Hot Topics in Networks, HotNets-XI<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="109" to="114" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b116">
	<analytic>
		<title level="a" type="main">Dynamic graph query primitives for sdn-based cloudnetwork management</title>
		<author>
			<persName><forename type="first">Ramya</forename><surname>Raghavendra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jorge</forename><surname>Lobo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kang-Won</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st workshop on Hot topics in software defined networks, HotSDN &apos;12</title>
		<meeting>1st workshop on Hot topics in software defined networks, HotSDN &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="97" to="102" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b117">
	<analytic>
		<title level="a" type="main">Livecloud: A lucid orchestrator for cloud datacenters</title>
		<author>
			<persName><forename type="first">Xiang</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhi</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yaxuan</forename><surname>Qi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jun</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2012 IEEE 4th Int. Conf. Cloud Computing Technology and Science (CloudCom)</title>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="341" to="348" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b118">
	<analytic>
		<title level="a" type="main">Networking named content</title>
		<author>
			<persName><forename type="first">V</forename><surname>Jacobson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">K</forename><surname>Smetters</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Thornton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Plass</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">H</forename><surname>Briggs</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Braynard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 5th int. conf. on Emerging networking experiments and technologies</title>
		<meeting>5th int. conf. on Emerging networking experiments and technologies</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="1" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b119">
	<analytic>
		<title level="a" type="main">Efficient caching in Content-Centric Networks using OpenFlow</title>
		<author>
			<persName><forename type="first">Xuan-Nam</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Damien</forename><surname>Saucez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Thierry</forename><surname>Turletti</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2013 IEEE Conf. Computer Commun. Workshops (INFOCOM WKSHPS)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2013-04">April 2013</date>
			<biblScope unit="page" from="67" to="68" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b120">
	<analytic>
		<title level="a" type="main">Supporting information-centric functionality in software defined networks</title>
		<author>
			<persName><forename type="first">L</forename><surname>Veltri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Morabito</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Salsano</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Blefari-Melazzi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Detti</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE ICC Workshop on Software Defined Netw</title>
		<imprint>
			<date type="published" when="2012-06">June 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b121">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">N</forename><surname>Blefari-Melazzi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Detti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Mazza</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Morabito</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Salsano</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
