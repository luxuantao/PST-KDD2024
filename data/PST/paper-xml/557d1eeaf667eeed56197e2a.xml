<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main"></title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">48D748E9E19B1C46C523046E5815BC36</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T12:38+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>As used here, the term obstacle is free of the connotation of something undesired. It is borrowed from the literature on robot motion planning, where it is used widely. Although in the latter area, obstacles are something to avoid, in terrain acquisition "obstacles" may be something to be attracted to.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Dynamic Path Planning in Sensor-Based Terrain Acquisition</head><p>Ahtmct-The problem of terrain acquisition presents a special case of robot motion planning. In it, a robot that operates in an unfamiliar scene populated with a finite number of objects (obstacles) of unknown shapes and dimensions is asked to cover the scene and/or build its complete map using some sort of sensory feedback (e.g., vision) and generating as short a path during the operation as possible. Algorithms considered thus far in literature make strong assumptions about the obstacles-for example, that they are polygonal-and measure the algorithm performance in terms of the number of constraints describing obstacles, such as the number of obstacle vertices. In this paper, the terrain acquisition problem is formulated as that of continuous motion planning, and no constraints are imposed on obstacle geometry. Two algorithms are described for acquiring planar terrains with obstacles of arbitrary shape. Estimates of the algorithm performance are derived as upper bounds on the lengths of generated paths.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>HE PROBLEM of terrain acquisition is an aspect of the T more general problem of robot motion planning (robot navigation). It is stated here as follows. A point robot is placed in an unexplored planar terrain (scene) that is randomly populated with a finite number of obstacles (objects, landmarks) of arbitrary sizes and shapes. Depending on the underlying model, the terrain can be finite or infinite. The robot is required to autonomously navigate in the terrain with the purpose of building the complete terrain model (a map), i.e., the boundaries of all the obstacles.' One can envision a need for such learning automatic systems in various applications (e.g., in hazardous environments, such as mapping the extent of damage after an explosion at a nuclear power station, in military and space applications, for lawn mowing, etc.).</p><p>To gather new information, the robot uses a vision sensor. The sensor is capable of identifying coordinates of all visible points within a limited radius (radius of vision) around the robot. For example, the sensor can be a stereo vision system or a laser range finder. The robot is also capable of plotting identified obstacle boundaries on the map and making use of the current map whenever it is required. During the course of terrain acquisition, the robot is expected to cover as small a distance as possible.</p><p>A closer look at the terrain acquisition problem reveals two distinct task models, task a) and task b), both of which produce terrain maps. In task a), the map is the sole goal of the acquisition operation-consider, for example, mapping a nuclear power plant site after an explosion. In principle, if obstacles are visible from one another, the robot does not need to physically visit every point of the terrain-it can, for example, accomplish the task by walking from one obstacle to the other.</p><p>In task b), the robot is required to physically pass through or near every reachable area of the (finite) terrain-consider, for example, an automatic vacuum cleaner or lawn mower.</p><p>Here, the map of the terrain can appear as a side effect of the main operation.</p><p>Note that these two tasks reflect two different meanings of what can be called "complete exploration" of a terrain. Accordingly, the models of the environment assumed in each task can differ. In this paper, two such models, one for each task, will be considered: Model (a): Here, the terrain can be finite or infinite, and obstacles are mutually visible, that is, any pair of obstacles are connected through a sequence of obstacles that are visible from one another.</p><p>Model (b): Here, the terrain must be finite, and obstacles need not be visible from each other.</p><p>The main results presented in this paper are as follows: 1) The requirement commonly used in literature-that obstacles must be algebraic manifolds-is removed, and the problem of terrain acquisition is presented as one of continuous path planning amongst obstacles of arbitrary shapes; 2) two algorithms, one for each of the Models (a) and (b) , are formulated; 3) the algorithms' performance is analyzed, and the upper bounds on the lengths of the paths that they generate are derived as functions of the obstacle perimeters.</p><p>The terrain acquisition problem is of recent interest. Works by Brooks [l], lbrchen and Wong [2] and Oommen et al. <ref type="bibr" target="#b13">[3]</ref> are among the first in this area. Typically, the robot is assumed to be a point that operates in an environment with polygonal obstacles. In <ref type="bibr" target="#b13">[3]</ref>, the robot is capable of two elementary operations: scanning, to identify all visible obstacle vertices from its current location, and moving, to move the robot along a straight line. Under the proposed strategy, the robot moves from vertex to vertex. To acquire an environment with n obstacle vertices, the algorithm requires n scanning operations and, at most, 2(n -1) motions between the vertices. A later modification of this procedure by Rao et al. [4] extends the approach to a finite-sized circular mobile robot in the plane.</p><p>1042-296X/90/0800-0462$01 . <ref type="bibr">00</ref>  <ref type="bibr">0 1990 IEEE</ref> The assumption in the work above that obstacles in the terrain are polygons (or, in general, sets constrained by algebraic manifolds) is quite important; in its essence, it follows the "piano movers" approach to motion planning, which was developed in general form in [5]. Although it gives rise to an interesting problem of computational geometry and computational complexity, the underlying model of this approach is only one of those that appear in the context of robotics. First, real obstacles do come in arbitrary shapes. It is known that given the accuracy of approximation, the problem of approximating nonlinear surfaces with linear constraints is at least of exponential complexity <ref type="bibr">[6]</ref>. On the other hand, one may find this approximation problem rather artificial-for example, walking along an unknown smooth curve may be even easier for a robot than turning at polygon corners.</p><p>Second, the performance of planning algorithms is measured in the "piano movers" approach in terms of the total number of obstacle vertices. This is quite natural for computational geometry, but in robotics, one may prefer to measure the cost of planning simply by the length of paths generated by the robot. This way, walking, for example, around a circular obstacle or around its approximating polygon with a very large number of edges would present tasks of the same complexity. Realizing such a performance criterion requires a continuous, as opposed to discrete, formulation of the motion planning problem.</p><p>This work has been motivated by the search for a methodology that would, first, put no constraints on the shape of obstacles in the environment and, second, allow measuring algorithm performance directly in terms of the length of generated paths. Consequently, the model we assume differs from that in the work mentioned above. We draw extensively on the algorithmic machinery and tools for convergence analysis <ref type="bibr">developed in [7]</ref>. Our robot has a continuous and costless vision in a limited area around its current location as well as sufficient memory to store the current map of the terrain (this can be thought of as a pencil-and-paper drawing in the hands of a cartographer). In practice, this would simply mean that the vision operation is done in parallel with and not slower than the motion planning operation and that the robot has enough memory to store the acquired map.</p><p>Given incompleteness of input information, optimality of generated paths is ruled out in any formulation of the terrain acquisition problem [ 11-[4] including ours. Our emphasis is on convergence and completeness, as follows: Given the uncertainties assumed in our model-unknown obstacles of arbitrary shape and local input information-are procedures for terrain acquisition with guaranteed convergence feasible? If so, what would be the upper bounds on the performance of such procedures? The performance of an algorithm is assessed in terms of the length of generated paths as a function of obstacle perimeters and distances between obstacles in the environment. One can envision that in practice, such algorithms would be used as global procedures, complemented wherever possible by local heuristics.</p><p>The first algorithm presented below (the Sightseer Strategy) applies to Model (a) and is reminiscent of a sightseer who walks from one landmark to the other and then circles each landmark to see it all. The robot moves from its starting position to the nearest obstacle and circumnavigates it while acquiring more knowledge about the visible parts of the environment. This knowledge is then used to identify the nearest partially unknown obstacle and move to it. The process is then repeated till all the obstacles in the terrain are visited and fully known. The strategy converges, and its upper bound on the length of generated paths is shown to be linear in the perimeters of obstacles and distance between obstacles in the scene.</p><p>The second procedure (Seed Spreader Strategy) applies to the Model (b) and is reminiscent of a landowner who, in order to plant grass in a lawn, divides the terrain into a suitable number of rectangular strips and then covers the strips with seeds sequentially, one by one. While moving along the boundary of a strip, the robot is acquiring (that is, putting on the map) all the information that appears. If, however, it is becoming clear that some obstacle cannot be acquired fully in this fashion, the robot diverges from the current strip boundary to the obstacle, acquires it (and other obstacles if needed), returns to the strip boundary, and repeats the process. Although the upper bound of this procedure turns out to be quadratic, it will be shown that in some general cases, it is as good or better than the first algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11.">MODEL AND TERMINOLOGY</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A . Robot</head><p>The robot is a point. It can thus pass through an opening of any size between two obstacles. The robot is capable of two types of motions: linearnavigate, which means moving towards a target point along a straight line, and circumnavigate, which means moving along an obstacle boundary. The robot always knows coordinates of its current location. The robot is equipped with a vision sensor, which allows it to identify coordinates of all visible points on obstacle boundaries within a circle of radius R , , which is known as the radius of vision and is centered at the current location. (For example, the sensor can be a stereo vision system or a sensor range finder). Once a piece of an obstacle boundary is identified, the robot can register (i.e., plot) it on its incremental map. It can then make use of this information thereafter. An obstacle is said to have been acquired if its boundary is completely known and connected. The term scanner refers to the robot's sensinghision system, and scanning refers to the act of seeing. The suffix "navigate" (as in the term "circumnavigate") implies simultaneous actions of moving, scanning, and registering. As for its computational capabilities, the robot can compute the (shortest) Euclidean distances between two points, between a point and an obstacle, and between two obstacles.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B . Environment</head><p>The terrain to be explored is a planar area. The robot starts at some starting point S in the terrain. The terrain is populated with a finite but unknown number of obstacles of arbitrary shapes. Obstacles have no holes in them. (This assumption is needed simply for completeness; a robot living in a 2D space will not be able to see a hole inside a 2D obstacle). The boundary of an obstacle is a simple closed curve. Let d be the closest distance (or distance, for short) between two obstacles, and let d,,, be the maximum such distance. Since no information is available about obstacles, d,,, becomes a characteristic of the terrain. If, for example, the terrain is a rectangle, then d,,, is the length of the corresponding diagonal.</p><p>The following assumptions produce two somewhat different models of the environment. In Model (a), the terrain can be finite or infinite. At least one obstacle is visible from the robot starting position, and all the obstacles are mutually visible from each other, that is, for any pair of obstacles X and Y , there is a sequence of obstacles visible from one another that leads from X to Y. Clearly, mutual visibility is a function of the obstacle distribution in the terrain and of the radius of vision R,. In Model (b) , the terrain must be finite, and obstacles need not be visible from each other.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C . Performance Criterion</head><p>Let n be the number of obstacles that lie, wholly or partially, in the terrain, let pi be the (unknown) perimeter (i.e., the length of the boundary) of the ith obstacle, let pmax be the maximum such perimeter, and let P be the length of the path that the robot traverses in the course of terrain acquisition. The performance of an algorithm is assessed in terms of the upper bound on the length P of the generated path as a function of obstacle perimeters and distances between obstacles. Any computations due to vision, incremental map construction, planning the shortest path between obstacles, etc., are assumed to be of no cost.</p><p>Definition 1: A local direction is the direction of passing around an obstacle once the robot comes in contact with it. It can be either left or right. A local direction is chosen at the time an obstacle is encountered (contacted) and can be reversed when needed.</p><p>Definition 2: A hit point H is defined on an obstacle when, while linearnavigating towards an intermediate target, the robot contacts the obstacle at H. A leave point L is defined on an obstacle when the robot leaves the obstacle at L in order to continue its linear navigation towards the intermediate target.</p><p>Definition 3: An obstacle becomes a visited obstacle if it has been explicitly circumnavigated by the robot; otherwise, it is an unvisited obstacle. Hence, any visited obstacle must have been acquired and is completely known. Note that the opposite is not necessarily true; the robot might have completed an obstacle boundary while observing it "from afar" (e.g., while visiting other obstacles). Thus, an unvisited obstacle may be known to the robot either partially or completely. A partially known obstacle is also called incomplete; it is easily recognized from the fact that its boundary in the map presents a simple open curve; the boundary of a completely known (acquired) obstacle is a simple closed curve.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="111.">THE SIGHTSEER STRATEGY</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A . General Idea</head><p>This algorithm applies to Model (a). Consider the following hypothetical strategy. While standing at the start position, the robot scans for and registers all the visible obstacle boundaries. If nothing can be seen, the task is accomplished.</p><p>Otherwise, the robot linearnavigates toward the nearest obstacle and then circumnavigates it completely while updating the map. Then, the robot marks the obstacle as visited, finds from the map the nearest unvisited obstacle, and linearnavigates to it. The procedure repeats until no unvisited obstacles remain. If a new obstacle is encountered along the way toward the next targeted obstacle, the robot first circumnavigates the newly found obstacle and then chooses a new unvisited obstacle, which becomes the new target. On the other hand, if the robot encounters a visited obstacle on its way, it simply passes it around using a local direction that leads to a shorter path and resumes its linear-navigation motion; since the geometry of the obstacle is already known, choosing the shorter path presents no difficulties.</p><p>In each act of linear navigation, one unvisited obstacle is targeted for acquisition, and at least one unvisited obstacle is actually acquired. Since the terrain has a finite number of finite-size obstacles, and since no visited obstacle can become a target of linear-navigation, the above procedure guarantees convergence. However, as the following example demonstrates, the upper bound on the path length performance of this simple strategy is not very good. Consider a one-dimensional case with n obstacles shown in Fig. <ref type="figure" target="#fig_0">1</ref>. For simplicity, each obstacle, 0 0 , 01, . . . , O,-l, is presented as a single point.</p><p>Note that the obstacles with odd subscripts are placed to the left of 0 0 , and those with even subscripts are placed to the right of 0 0 . Let 0 1 be 2 O = 1 unit away from 0 0 , let 0 2 be 2l = 2 units away from 0 0 , let 0 3 be 22 = 4 units away from 0 1 , let O4 be 23 = 8 units away from 0 2 , etc., and finally, let O,-I be 2R-2 units away from On-3. Assume R, &gt; 2"-2 so that each pair of adjacent obstacles are visible from each other.</p><p>Starting from 0 0 , the robot can see both 0 1 and 0 2 ; it goes to 0 1 since it is closer. At 0 1 , it sees a new obstacle 0 3 but since 0 2 is now the nearest unvisited obstacle, it goes to 0 2 first. Continuing with the above procedure, all the obstacles will be eventually visited in the numerical order of their subscripts. Tracing the path, one will notice that 00 has been passed (n -1) times, 0 1 is passed ( n -2) times, etc. Clearly, the worst-case performance of this algorithm is quadratic in the number of obstacles, and hence, it is quadratic in the perimeters of obstacles and distances between obstacles.</p><p>It will be shown later that the following change in the procedure improves its performance from quadratic to linear. After the robot circumnavigates an obstacle and marks it as visited, the robot shall choose among all the visible obstacles (as opposed to all the unvisited obstacles) the nearest unvisited obstacle and explore it next; if no such obstacle exists, it simply backtracks to the latest visited obstacle and from there looks for the nearest unvisited visible obstacle. Indeed, since the next obstacle to explore is visible from the current obstacle, the robot can always find a path to it without encountering any It may happen that none of the currently identified unvisited obstacles can be seen from the robot's current position. Using the map, the robot can choose to visit one of them (e.g., the nearest). What path should the robot use to reach the obstacle? Again, this is done by backtracking via previously visited obstacles. Backtracking guarantees (see Section 111-C) that the generated path presents a spanning tree, which simplifies the algorithm.2 In addition, the straight line path segments between obstacles are bounded by the radius of vision R , .</p><p>Note that if an obstacle has not been visited but is completely known, it still cannot be marked as visited. Every unvisited obstacle must be explicitly visited because there might be some other obstacles that are visible only from it. This is shown in an example in Fig. <ref type="figure" target="#fig_1">2</ref>; in the process of circumnavigating obstacle 0 1 , the robot will completely acquire obstacle 0 2 . Nevertheless, obstacle 0 2 has to be explicitly visited since, otherwise, given the radius of vision R , , the robot will never discover obstacle 03.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Algorithm</head><p>This section contains the following notations: curr-obstacle obstacle at whose boundary the robot is positioned currently next-obstacle obstacle to be visited next prev-obstacle obstacle that has led to curr-obstacle.</p><p>In the procedure, the planning decisions, such as what obstacle to visit next, are made when the robot is either at the start point S or at an obstacle boundary. To keep track of obstacles for backtracking, a linear stack is maintained. The stack contains labels of all identified visited or unvisited obstacles. The operation a = pop(stack) removes the top item on the stack and assigns it to the item a. The operation push(a, stack) places item a on top of the stack. The procedure operates as follows.</p><p>Step 0 (Initialization).</p><p>Let curr-obstacle = S , and mark it visited. Register all the visible obstacle boundaries in the map and mark them unvisited. Go to Step I.</p><p>Step</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I (Determine the next obstacle to visit).</head><p>If no unvisited obstacles remain in the map, the map is complete; the procedure terminates. If there are no unvisited One can see that an alternative option-going straight towards the chosen unvisited obstacle-is problematic; it can produce loops in the generated paths as well as straight line path segments whose length exceeds R , . Step 4 (Circumnavigation).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Circumnavigate curr-obstacle; mark it visited. Go to Step</head><p>An example of the algorithm performance is shown in Fig.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1.</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">.</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C . Performance Analysis</head><p>Given a scene with n obstacles, the corresponding visibility graph (VG) is constructed as follows. Every obstacle forms a node in VG; point S is also treated as an obstacle and thus produces a separate node. An edge is drawn between two nodes if and only if the entities that the nodes represent are visible from each other. Given the assumption of mutual visibility of point S and obstacles, VG is a connected graph. Assuming for simplicity that point S lies on the boundary of an obsta-cle, VG has n nodes and is at most a complete graph with n(n -1) edges and at least a graph with (n -1) edges (as in Fig. <ref type="figure" target="#fig_0">1</ref>). Assign each edge a weight equal to the distance between the two corresponding obstacles. Note that any weight in this weighted finite graph is less or equal to R,, which is the vision radius. Note that the procedure that the Sightseer Strategy uses to move between obstacles is similar to the depth-first search (DFS) [8]. For n obstacles, the worst-case size of the stack is (n -1). In the algorithm, the only time the robot walks to a previously visited obstacle (node) is when it traces back to a visited obstacle by the same path segment (edge) that it had followed before but in the opposite direction. Since the reason and the result of every such trip is acquiring another unvisited obstacle, no closed loops are possible in the path. Mapped into VG, the path produces a spanning tree.</p><p>To evaluate the total path generated by the Sightseer Strategy in the course of terrain acquisition, we need to estimate the (maximum) number of times the path segments between the obstacles (that is, graph edges) are passed, and we must estimate the number of obstacle circumnavigations. It is known in graph theory that in a finite-connected graph, it is always possible to construct a cyclic directed path passing through each edge once and only once in each direction <ref type="bibr">[9]</ref>. This is true no matter whether the graph is known or unknown beforehand. One method to construct such a path is known as Tarry's rule <ref type="bibr">[9]</ref>. The rule is as follows. Mark each edge along the path, including the direction of passage. When some node g is arrived at for the first time, this entering edge should be marked in a special way. When a node g is reached, always proceed next via an edge ( g , r ) that has not been traversed before, but if it has, only traverse it in the reversed direction. However, the entering edge should be used only as a last resort when there are no other edges available.</p><p>The subgraph generated by removing all edges of VG never traversed by the Sightseer Strategy is a spanning tree (see Fig. <ref type="figure" target="#fig_6">3(b)</ref>). Applying Tarry's rule to the subgraph, one can see that DFS follows Tarry's rule exactly. Since we are dealing with a tree structure, each and every edge will be marked at some moment as an entering edge; then, each of them must be backtracked again when there are no more untraversed edges incident to it. As a result, the performance index of Tarry's rule [9] holds-each edge is traversed exactly twice, once in each direction. Since the Sightseer Strategy stops when no unvisited obstacles remain, each edge of the spanning tree will be traversed at least once and at most twice. This proves the following lemma:</p><p>Lemma 1: Under the Sightseer Strategy, a path segment between two obstacles can be traversed at most twice.</p><p>In a tree structure, each node, except for the root, is connected to its parent node by one edge; a tree structure with n nodes consists of (n -1) edges. Thus, traversing k edges leads to k nodes. Hence, the following statement.</p><p>Lemma 2: Following the Sightseer Strategy, the robot circumnavigates n obstacles at most 2(n -1) times.</p><p>Although each path segment between obstacles is traversed no more than two times, an obstacle can be visited many times. Lemma 2 provides an upper bound on the total number of</p><formula xml:id="formula_0">I ~_ _ _ _ ~-</formula><p>obstacle visits. Note that n circumnavigations that contribute to this upper bound are done for the purpose of acquiring the obstacles and their neighborhoods; the remaining (n -2) visits are due to backtracking. Since the obstacles met during the backtracking are completely known, the robot does not need to circumnavigate them completely; instead, the robot can maneuver around the obstacle via a shorter path, which is never more than half of the obstacle perimeter. Hence, the portion of the total path length due to moving around obstacles is bounded by 1.5 pj + ( n -2) '7. On the other hand, since each path segment between obstacles is bounded by min <ref type="figure">(R",</ref><ref type="figure">d,</ref><ref type="figure">,</ref><ref type="figure">,</ref>), the portion of the path length due to traveling between obstacles is bounded by 2(n -1) . min(R,, d m a x ) . Summing it up, obtain the following upper bound, see the following theorem.</p><p>Theorem 1: The total path P traversed by the robot in the process of terrain acquisition under the Sightseer Strategy algorithm is linear in the perimeters of the obstacles in the scene and is bounded by Assuming for specificity that the robot's vision is not sufficient to observe the whole terrain, min <ref type="figure">(R,</ref><ref type="figure">,</ref><ref type="figure">,</ref><ref type="figure">d,</ref><ref type="figure">,</ref><ref type="figure">,</ref></p><formula xml:id="formula_1">) = R , , this produces n ( 2 ) n -2 P = 2R,(n -1) + 1.5 c p i +pmax . -2 .</formula><p>i=l Note that choosing the nearest visible obstacle in Step 1 of the algorithm, although reasonable in actual implementations, does not effect the worst-case performance. As an illustration, observe that in the example in Fig. <ref type="figure" target="#fig_2">3</ref>(a), the algorithm performance is well above the worst-case bound; only four obstacles, 0 1 , 0 6 , 0 7 , and O S , are visited more than once during backtracking and thus appear in the third term in (2). Fig. <ref type="figure" target="#fig_2">3</ref>(b) presents the corresponding spanning tree. As another example, consider the case shown in Fig. <ref type="figure" target="#fig_0">1</ref>. The order in which the obstacles will be visited under the Sightseer Strategy algorithm is 00, 01, 0 3 , 0 5 , ' . . ,02, 0 4 , . . ., that is, obstacle 00 and each of the obstacles with odd subscripts (except the last one) is visited twice, whereas each obstacle with an even subscript is visited only once.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. THE SEED SPREADER STRATEGY</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A . General Idea</head><p>This algorithm applies to the Model (b) . Assume that the terrain is rectangular, with dimensions A by B. If the terrain has many obstacles in it, then moving from obstacle to obstacle and circumnavigating every obstacle, as in the Sightseer Strategy algorithm, may produce very long paths. On the other hand, if the obstacles are "nicely distributed" and are of "nice geometry, " then encircling a group of obstacles-for example, by a rectangular path-may make them completely known without actually visiting and circumnavigating each of them. We divide the terrain into a number of strips of equal width by a set of lines parallel, say, to the side A of the terrain. It is hoped that most of the obstacles in a strip will be acquired without actually visiting them in the course of the movement along the strip boundaries. If, however, it becomes apparent that an obstacle cannot be acquired from the strip boundaries, the obstacle is explicitly visited via a divergence route.</p><p>To choose the strip width, observe that the strip cannot be wider than 2R,; otherwise, some obstacles may be missed. Within this limit, a strip can be as narrow as one wishes. In general, very narrow strips would result as a plus in few diversions from the strip boundaries but as a minus in many obstacle crossings and hence in many obstacle circumnavigations; as another minus, there would be too many strip boundaries. On the other hand, very wide strips would result in fewer strip boundaries but in many diversions, each of which ends, again, in an obstacle circumnavigation. This suggests that there might be an optimal value for the width strip. Unfortunately, finding this value does not seem to be feasible given that it depends on the unknown and difficult-to-generalize distributions of obstacle shapes and positions.</p><p>We make the strip width equal to the radius of vision R,. One advantage of this choice is that in many cases, the robot will be able to acquire obstacles in a strip by simply moving along the strip boundaries. Exceptions will be cases with mutual obstacle occlusions and cases where parts of obstacle boundaries are not visible from the circumscribing convex hulls. If R, &gt; B, then there is only one strip, which is of width B.</p><p>By proper alignment of the axes of reference, we define the directions E, N , W , and S (for east, north, west, and south).</p><p>Define the main line (M-line) as a piecewise path that consists of south-north (SN) and east-west (EW) straight line strip boundaries, as is shown in Fig. <ref type="figure">4</ref>. Consider the M-line to be a one-dimensional space in which a metric is defined such that the distance between two points x and y, d ( x , y), is measured along M-line. If points x and y are on two different strip boundaries, with k turning points t ; , t;+2, . . . , ti+k-l along the M-line between them, then d ( x , y ) = d ( x , t ; ) + d ( t i , ti,,) + . . . + d ( f i + k -l , y ) , where d is the regular Euclidean distance.</p><p>Assume for simplicity that point S is at the SW comer of the terrain. Let S be one end of the M-line, and let T be its other end (Fig. <ref type="figure">4</ref>). Assume that S is always obstacle-free. At the beginning, the map will contain the border of the terrain and M-line; the latter is marked to distinguish it from the terrain border and obstacle boundaries. In the algorithm, the robot registers all the information that comes its way from those (one to three) strips that it can observe simultaneously. Its diversions though are organized to complete the acquisition of one strip before switching to the next strip. If no obstacles are present in the scene, the robot will learn this fact after having completed the path along the M-line from S to T. If, however, the robot encounters an unknown or an incomplete obstacle that crosses the M-line, it will circumnavigate it and then resume its motion along the M-line. If the robot encounters a completely known obstacle, it simply passes it around following a shorter path along its boundary. If the robot concludes that a given incomplete obstacle cannot be acquired directly from the M-line, it diverges to it, acquires the obsta- cle by circumnavigating it, returns to the M-line and resumes its motion along the M-line.</p><p>To define the diversion strategy, the acquisition strategy, and the local direction for handling individual obstacles, we divide obstacles into two types, depending on their locations relative to the M-line and the terrain border: 1) obstacles that lie fully inside the strips and 2) obstacles that intersect the M-line. Consider both types separately.</p><p>1) Obstacles that Lie Fully Inside the Strips: If such an obstacle cannot be acquired from the M-line, a diversion is undertaken (see obstacle 0 4 in Fig. <ref type="figure">4(a)</ref>). The diversion starts only at the "very last moment" when, according to the available information, the robot cannot expect to see the obstacle again by simply following the M-line. More specifically, the robot diverges to an obstacle only while moving along an eastern SN-oriented strip boundary, when it is about to lose sight of the obstacle. This corresponds to one of two cases: 1) when the visible obstacle boundary in question is about to go out of the robot's vision range and 2) when the boundary is occluded by another obstacle or by another part of the same obstacle. This implies that an obstacle sometimes may be acquired by diversion even though it intersects the M-line. Out of two possible local directions (right or left), any one is equally acceptable, and therefore, no special rule for its choice is needed in this case.</p><p>2) Obstacles that Intersect the M-line. In the special case when the segment of the M-line in question coincides with the terrain border, there is only one feasible local direction. For example, at the hit point H I (Fig. <ref type="figure" target="#fig_4">5</ref> ) , the direction is clearly "right," and at point H3, it is clearly "left." In such cases, the robot will ignore other obstacle intersections with the Mline-such as points H2 and L2 on Fig. <ref type="figure" target="#fig_4">5</ref>-and continue the obstacle circumnavigation until it arrives again at the terrain border (point L , ) .</p><p>If the M-line/obstacle intersection does not coincide with the terrain border, the choice of the local direction is, in principle, not important-say, it is "right." In the course of maneuvering around obstacles, the robot may switch its local direction. Switching is caused either by intersections with the terrain border (as at point ql on Fig. <ref type="figure" target="#fig_4">5</ref>) or by a decision to shorten the path along an already known obstacle boundary (as at point H s ) . In the process, some path segments may be traversed more than once (see Section IV-C).</p><p>Intersections of the M-line with an obstacle boundary form two or more crossing points, such as those with obstacle 0 6 (Fig. <ref type="figure" target="#fig_4">5</ref>). Unless the M-line ends "inside" the obstacle, the number of crossing points is even. Denote { c i } , i = 1, 2 , . . . , m , the set of crossing points numbered in the order of the intersections between the M-line and the obstacle boundary. Once the robot encounters an obstacle and defines on it the hit point H , it has to also define on it the corresponding leave point L . Both H and L are crossing points.</p><p>In general, the obstacle shape may be such that the M-line crosses it a nurfiber of times; correspondingly, a number of pairs of crossing points (Hi, Li) will be formed. Such obstacles are called complex obstacles (see obstacle 0 6 on Fig. <ref type="figure" target="#fig_4">5</ref> ) , and the corresponding segments of the M-line "inside" the obstacle are called enclosed segments (segments L7H8, L8H9 on Fig. <ref type="figure" target="#fig_4">5</ref> ) . Since some unknown obstacle may happen to be visible only from the M-line, all the enclosed M-line segments of a complex obstacle have to be traversed. Furthermore, to maintain algorithm consistency, each enclosed M-line segment has to be traversed in the direction toward T. Note that the crossing points on a complex obstacle form nodes of a graph, which is known as a local graph and is limited to this obstacle only. The graph edges are segments of the obstacle boundaries and enclosed M-line segments; each of its nodes has three adjacent edges. The term local leave point refers to a leave point incident to an enclosed M-line segment of a local graph, and global leave point refers to the leave point corresponding to the final exit of the local graph. For example, the local graph of obstacle 0 6 (Fig. <ref type="figure" target="#fig_4">5</ref>) has six vertices and eight edges; vertex L9 is the global leave point.</p><p>The necessity to explicitly visit every enclosed segment of the M-line suggests a need for a full exploration of the local graph, with a possibility of worsening the algorithm performance due to the visitation of some segments of obstacle boundaries many times. However, since Tarry's rule guarantees that any known or unknown graph can be fully explored with no more than two traverses of every edge (one in each direction (Section 111-C)), this rule is used in the algorithm to limit the path length along obstacle boundaries (see Section IV-C) while guaranteeing that each enclosed M-line segment is traversed at least once in the direction towards T.</p><p>It may happen that while exploring a local graph under Tarry's rule and moving for the first time along an enclosed Mline segment of a complex obstacle X , the robot will encounter still another obstacle Y. If Y is a complex obstacle, it has an associated local graph that must be connected with the local graph X by virtue of its sitting on at least one edge of X. Then, both local graphs will be considered parts of a bigger graph, and its processing will proceed as before, and it will still guarantee that each edge of the bigger graph is traversed at most twice.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Algorithm</head><p>This section contains the following notations: curr-obstacle is the obstacle that the robot is currently acquiring; next-obstacle is an incomplete obstacle that the robot is about to lose sight of while moving along the eastern SN boundary of a strip; curr-position is the robot's current position; S is the start position; T is the ending position; D is a point of diversion; Q is the point on the boundary of nextobstacle that is closest to D . A flag F is used to remember the fact that the robot is currently processing a complex obstacle.</p><p>Step </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C . Performance Analysis</head><p>We would like to produce an upper bound on the length of paths generated by the Seed Spreader Strategy in the course of terrain acquisition. Since the path consists of segments of the M-line, of straight-line diversions to obstacles, and of segments of obstacle boundaries due to maneuvering around obstacles, the path length is a function of the M-line length, of the number of visits to obstacles by way of diversion, and of obstacle perimeters.</p><p>Let w = min (I?", B) denote the width of a strip, and let r = ceil(B/Ru) denote the number of strips, where ceil(x) returns the smallest integer larger or equal to x. If no obstacles are present in the scene, or if all the obstacles can be fully acquired without deviating from the M-line, the total length of the generated path will be equal to the length of the M-line (see Fig. <ref type="figure">4</ref>). Otherwise, to acquire some or all the obstacles in the scene, the robot will do obstacle circumnavigation by way of diversions or otherwise, and the length of the generated path will be longer. We will first estimate the number of visits to obstacles by way of diversion. However, for a simple obstacle that does intersect the terrain borders, its circumnavigation/acquisition can produce a longer path segment but no more than 2pi (see obstacle 0 5 on Fig. <ref type="figure" target="#fig_4">5</ref>); walking back to L then adds at most another p ; . The total cost of acquiring the obstacle is thus at most 3p;.</p><p>Each obstacle can call for at most one diversion. If before the diversion the robot is at some obstacle, the corresponding leave point L is chosen in Step 3 of the algorithm as the crossing point closest to the encounter point Q. Since Q lies on some other obstacle, once the robot leaves the current obstacle at L, it will not encounter it again between points L and Q. This means that each obstacle can be visited at most once during a diversion. In a scene with n obstacles, at most n diversions are needed.</p><p>Let n j be the number of obstacles totally inside stripj, j = 1 , 2, . . . , r ; let no be the total number of obstacles crossing the M-line; let no, be the number of obstacles crossing the boundary of the strip j but not crossing the boundary of any other strips to the west of strip j . Then, no = no,. Note that n j , j = 0 , 1 , . . . , r accounts for all the obstacles in the terrain, and therefore, n = n; . Consider the acquisition process in the first strip. Since in an unfortunate case each of the no, obstacles will be spotted and acquired by way of diversion, before the robot reaches it via the M-line, then at most (no, + n l ) diversions are needed to acquire the first strip.</p><p>Number these obstacles in the order of their being visited. On the diversion to acquire the ith obstacle of the first strip, in the worst case, all the (i -1 ) already-acquired obstacles are visited. Hence, for the first strip, the total number of obstacle visits by way of diversion is bounded by</p><formula xml:id="formula_2">( 1 + 2 + . .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>. + ( n o , + n l -1 ) + n o , + n l )</head><p>, 7 *</p><p>--(no, + n1) . (no, + nl + 1)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>L</head><p>This also means that the ith obstacle will be visited (no, + n 1 -i ) times during the diversions required for acquiring the remaining (no, + nli ) obstacles of the first strip. Now, consider the acquisition process in thejth strip, j = 1, 2, 3 , . . . , r . Again, number the obstacles in strip j in the order of their being visited. Then, the ith obstacle in the strip j will be visited at most ( n j + no, -i ) times; in addition, since each of the no, obstacles can also intersect the strip boundary, it can be visited at most (n; + no,) times.</p><p>Therefore, the total number of obstacle visits for strip j is bounded by</p><formula xml:id="formula_4">k = O</formula><p>Adding together the number of visits for all the strips, obtain the total worst-case number of obstacle visits n u : Altogether, this produces the length 3p;. The worst situation appears when the last two cases are combined (a complex obstacle crosses terrain borders). This may add at most p ; resulting in the worst case cost of 4pi needed for acquisition of one obstacle.</p><formula xml:id="formula_5">+ (n; + no,) . no, k = O J -I</formula><p>n, visits are for the purpose of acquiring obstacles. The corresponding circumnavigation of obstacles will produce a path whose length is bounded by xi"=, 4 p ; . The remaining visits accounted for in (8) are the result of already-acquired obstacles being passed by during diversions to unknown obstacles. The length of the path segment related to each such passaround visit is bounded by 2pmax, where the coefficient 2 accounts for the "round trip" during the diversion. Summing together the terms above, we arrive at the following statement: Theorem 2: The total path P traversed by a robot under the Seed Spreader Strategy in an environment with n obstacles is bounded by Among the obstacle visits accounted for in (8), n =</p><p>We turn now to the evaluation of the length of generated paths. Clearly, whether or not the whole operation can be accomplished without leaving the M-line, the length of the M-line (A + r(w +A)) will appear in our estimate. A more difficult case involving the M-line is that of a complex obstacle. Since the corresponding local graph is processed in the algorithm via Tarry's rule (see above), each graph edge, including each M-line segment, may be traversed at most twice. This means that the upper bound on the path length should include a component 2(A + r(w + A ) ) .</p><p>Another set of straight-line path components relates to the diversions to obstacles. A "round trip" estimate for each such diversion gives at most 2w or, for all obstacles, at most 2nw.</p><p>Consider now the length of path segments due to the circumnavigation of obstacles. Let p ; be the perimeter of the ith obstacle, and let pmax = max { p ; } . Passing around a known obstacle produces a path component of length at most p ; . Processing unknown obstacles is more difficult. In the case of a simple obstacle that does not cross terrain borders, its circumnavigation/acquisition produces a path segment of length p ; , and then walking back to the point of departure L along the obstacle boundary can add at most p i / 2 . For the same case, passing around a known obstacle requires a path of length at most p i / 2 . Altogether, this amounts to 2p;. If, however, such a simple obstacle does intersect the terrain borders, its circumnavigation/acquisition can produce a longer path segment but no more than 2p; (see obstacle O5 on Fig. <ref type="figure" target="#fig_4">5</ref>); walking back to L then adds at most another p ; . The total cost of acquiring the obstacle is thus at most 3 p ; .</p><p>Still another case relates to the acquisition of a complex obstacle. After the obstacle is first encountered along the Mline, its first circumnavigation produces at most a path p ; . At this point, information is sufficient to generate the corresponding local graph. As mentioned above, traversing all enclosed is produced. For easier interpretation, (10) can be presented as a sum of five terms P =a1 +a2 +a3 +a4 +a5 <ref type="bibr">(11)</ref> where each term accounts for the following path segments: a1 = 2(A + B + r A ) accounts for path segments due to motion along the M-line; a2 = 2nR, accounts for straight-line path segments due to diversions from the M-line to obstacles (see, e.g., diversion to 0 4 on Fig. <ref type="figure">4(a)</ref>); a3 = 4 p ; accounts for first-time circumnavigation of obstacles (see, e.g., obstacle 0 6 on Fig. <ref type="figure" target="#fig_4">5</ref>); a4 = 2nnopmax accounts for passing around known obstacles that cross the M-line during diversions to incomplete obstacles; a5 = pmax n j ( n j -1) accounts for passing around known obstacles that lie fully inside the strips during diversions to incomplete obstacles-a case very similar to that of passing around obstacle O3 on Fig. <ref type="figure">4b</ref> on the way to the M-line after acquisition of obstacle 04. Fig. <ref type="figure">4</ref>(a) and b demonstrate a rather complex interplay between the components a, in (1 1).</p><p>As the term a5 indicates, the upper bound on the performance of this algorithm is quadratic in the number of obsta-cles and their perimeters. This is clearly worse than the upper bound of the Sightseer Strategy. In practice, however, the Seed Spreader Strategy can perform better than the Sightseer Strategy and vice versa, depending on the particular environment and the radius of vision or/and strip width (compare Figs. <ref type="figure" target="#fig_6">3</ref> and<ref type="figure">4</ref>). In some general cases considered below, the upper bound of the Seed Spreader Strategy can be improved considerably so that it becomes quite competitive. Assume for simplicity that w = R,.</p><p>First, observe that obstacle convexity helps rather insignificantly. If all the obstacles in the scene are convex, a diversion is needed only when one obstacle is occluded by another. Otherwise, any obstacle can be acquired from the M-line. Thus, in every diversion to an occluded obstacle, the robot circumnavigates and acquires at least one unvisited occluding obstacle. This means that the number of diversions is at most n, which reduces the number of visits to each obstacle by half. Unfortunately, this does not affect the quadratic term in (10). Consider, however, the following cases, which take place either by chance or because of the availability of some additional information and subsequent guided choice of the M-line or/and the borders of the terrain.</p><p>Case 1-Acquisition from the M-line: Assume that no obstacles cross strip boundaries and all the obstacles can be acquired from the M-line without explicitly visiting them by way of diversion. (Imagine, for example, that obstacles 0 3 and 0 4 did not exist in Fig. <ref type="figure">4(b)</ref>). Then, all terms in (10) and (1 1) except al vanish, and the generated path becomes a constant that is twice the length of the M-line:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>P = 2 ( A + B + r A ) .</head><p>(One can see from Figs. 4 and 5 that the coefficient "2" will appear only in the most unusual cases). In other words, if one has reason to believe that all the obstacles in the scene can be acquired directly from the M-line without resorting to diversions, the Seed Spreader Strategy may be preferable to the Sightseer Strategy.</p><p>Case 2-Diversion Paths Do Not Cross Known Obstacles: The only quadratic term in the upper bound (10) and (1 1) a5 appears because of the worst-case assumption that on the diversion to an unknown obstacle, the robot will encounter and will be forced to pass around all already-known obstacles. Such would be rare and rather artificial cases. In addition, paths of diversions might be planned more carefully to avoid encounters with known obstacles. Assuming that the diversion paths do not cross already-known obstacles, the terms a4 and a5 in (10) and (1 1) vanish, and the upper bound becomes linear in the obstacle perimeters (it gives, for example, a more realistic estimate for the length of generated path in Figs. <ref type="figure">4</ref> and<ref type="figure" target="#fig_4">5</ref>):  V. CONCLUSION The problem of terrain acquisition has been formulated here as that of continuous path planning in an uncertain environment. Within this context, two somewhat different models have been considered: a) When the terrain is finite or infinite and all the obstacles are mutually visible; b) when the terrain is finite and the obstacles are not necessarily visible from each other. Two terrain acquisition algorithms have been described (one for each of the models), and their convergence properties and performance were analyzed.</p><p>Both algorithms, ad hoc as they might look at first glance, guarantee convergence and take full advantage of the input information available within the context of the corresponding models. Given the general character of these models, the obtained performance-linear lower bound for one algorithm and quadratic for the other algorithm-looks surprisingly good.</p><p>In general, the two algorithms address different problems and thus do not replace each other. However, for a wide range of situations, both algorithms might be applicable, and this raises a question-which one should be used? One answer, in terms of the upper bounds on the length of generated paths, gives a clear bias: For one algorithm, the Sightseer Strategy, the bound is linear, and for the second algorithm, the Seed Spreader Strategy, it is quadratic in the perimeters of the obstacles in the scene. In practice, however, these estimates may be of limited help unless additional information suggests that one is dealing with a worst-case situation or with one of the special cases considered above. If, for example, obstacle circumnavigation presents a significant part of the path, the Seed Spreader Strategy may successfully compete with the Sightseer Strategy. This effect can be seen in Figs. <ref type="figure" target="#fig_6">3</ref> and<ref type="figure">4</ref>, where under the Sightseer Strategy the robot circumnavigates, as it must, all 11 (convex and nonconvex, polygonal and nonpolygonal) obstacles, whereas under the Seed Spreader Strategy, only three or even one obstacle need be circumnavigated.</p><p>From the implementation standpoint, the main question is: how realistic is the underlying model, and how computationally intensive are the described techniques? Compared with the commonly used formulation of the problem of terrain acquisition, the distinct feature of our model is that obstacles (objects, landmarks) in the robot environment do not have to be described analytically and thus can be of arbitrary shapes. We hope this removes an important stumbling block in the development of robot systems capable of dealing with uncertainties of real world applications. In addition, the presented performance criterion-the length of paths generated by the robot during its operation-seems to be more natural and realistic than the more common time-complexity measures that estimate algorithm complexity, e.g., as a function of the number of obstacle vertices.</p><p>The assumption that robot sensors provide coordinate information within a limited radius is directly tied to the existing technology of range finding and is thus quite realistic. The assumption of a point robot, though important from the theoretical standpoint, does not seem to present a serious limitation in real-world problems; consider, for example, a typical lawn mowing operation. The capability to "plot" the incoming data in the map is realizable via digitization schemes akin to those used in digital image processing.</p><p>A more stringent assumption, of course, is that the coordinates of the robot and obstacles are measured precisely-a constraint that is quite typical in the literature on motion planning algorithms. From the standpoint of path planning, the assumption can be softened somewhat, e.g., coordinate information is not crucial for following an obstacle boundary. As for map construction, recall that regular cartography is also impossible without precise registration of the cartographer. In other words, the question is not to what extent terrain acquisition algorithms can tolerate uncertainty in robot registration but rather by what means the uncertainty in registration can be made tolerable in a specific application. Although it is important, this issue goes beyond our topic; for possible approaches, refer, e.g., to <ref type="bibr" target="#b2">[12]</ref> and <ref type="bibr" target="#b3">[13]</ref>.</p><p>Of all the operations that need to be done in real time, two might be suspected of being computationally intensive: scanning visible obstacle boundaries in the field of vision and computation of the shortest distances between obstacles. Both are unavoidable and not specific to the considered methods; both were shown to allow fast efficient computation <ref type="bibr">[lo]</ref>, <ref type="bibr">[ll]</ref>.</p><p>This work raises a variety of questions that require further</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Case where the procedure sketched in Section 111-B would result in performance quadratic in obstacle perimeters and distances between obstacles.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Obstacle 0 3 can only be seen from 0 2 . Although 0 2 is completely known after exploring 01, the robot still has to visit 0 2 in order not to miss other obstacles, such as 0 3 . other obstacles. The only time it will visit a previously visited obstacle is during the backtracking. The process is repeated until no unvisited obstacles remain. The elementary operation of exploring an individual obstacle follows the approach described in [7].It may happen that none of the currently identified unvisited obstacles can be seen from the robot's current position. Using the map, the robot can choose to visit one of them (e.g., the nearest). What path should the robot use to reach the obstacle? Again, this is done by backtracking via previously visited obstacles. Backtracking guarantees (see Section 111-C) that the generated path presents a spanning tree, which simplifies the algorithm.2 In addition, the straight line path segments be-</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Example of performance of the Sightseer Strategy. (a) The operation of terrain acquisition starts at S and terminates at T; each obstacle is explicitly visited and circumnavigated; (b) the corresponding spanning tree; obstacles are numbered in the order at which they are visited.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>Example of performance of the Seed Spreader Strategy. The terrain is the same as in Fig. 3; the performance for two values of radius of vision R , is shown. Out of 1 1 obstacles, (a) only three obstacles need be explicitly circumnavigated, and (b) only two obstacles need be explicitly circumnavigated.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Seed Spreader Strategy. When M-line coincides with the terrain border, the choice of a local direction is unique; at points H I and H3, these are, respectively, "right" and ''left.'' In other cases, the choice may be uncertain; the local direction may be reversed in the course of acquiring an obstacle, such as at point 41.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>0 (Initialization)Register the terrain border in the map. Divide the terrain into strips of width min ( R " , B). Draw the M-line in the map beginning at S; the other endpoint of the M-line is T. Set F = false. Go to Step I.Step 1 (Navigating along the M-line) Navigate the M-line towards T until one of the following occurs: a) T is reached; the procedure terminates. b) A new obstacle is encountered. Let H = currposition. Go to Step 2. c) A previously visited noncomplex obstacle is encountered. Using a local direction that produces a shorter path, pass around the obstacle until the M-line is met again; iterate Step 1 . A previously visited complex obstacle is encountered. If all the enclosed M-line segments have been visited, d) then pass around the obstacle using a local direction that produces a shorter path until the M-line is again met at the global leave point; set F = false; iterate Step I. Otherwise, move along the segment of obstacle boundary to the next local leave point L chosen according to Tarry's rule; set F = true; iterate Step 1 . An incomplete obstacle to the west of the current SN oriented strip boundary is about to go out of robot's vision range. Let D = cum-position, let nextobstacle = the incomplete obstacle, and let Q = a point on next-obstacle closest to D . Go to Step 3. Step 2 (Circumnavigating an obstacle that crosses the M-line) Circumnavigate curr-obstacle; then a) If curr-obstacle is not complex, proceed to the corresponding L point via the shorter path along the obstacle boundary. Go to Step 1 . If curr-obstacle is a complex obstacle, set F = true, and proceed to the first local leave point L using Tarry's rule. Go to Step I. b) Step 3 (Diversion) Linearnavigate toward Q until one of the following occurs: a) Q is reached. Circumnavigate next-obstacle and return to Q. Choose a shorter path to D and return to D . Go to Step 1 . A previously acquired obstacle is encountered. Using a local direction that produces a shorter path, pass around the obstacle until the line DQ is met again. Iterate Step 3. An unknown or incomplete obstacle is encountered. Define a hit point H. Circumnavigate the obstacle. Choose L = c such that d ( c , Q ) = min ( d ( c ; , Q ) ) , where {ci} are the crossing points between the straight line DQ and the obstacle boundary. Choose the shorter path from H to L along the obstacle boundary; walk to L. Iterate Step 3.An example of the algorithm performance is shown in Figs.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Lemma 3 :</head><label>3</label><figDesc>The total number nu of obstacle visits required for acquiring the whole terrain using the Seed Spreader Strategy is bounded by M-line segments related to this graph may add maneuvering around some parts of the obstacle, which adds at most 2pi.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Manuscript received February 28, 1989; revised April 18, 1990. This work was supported by the National Science Foundation under Grant DMC-8712357 and Grant IRI-8805943.</p><p>The authors are with the Department of Electrical Engineering, Yale University, New Haven, CT 06520.</p><p>IEEE Log Number 9037979.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Two distinct "application" models have been presented here-one does not require complete covering of the terrain (it produces the Sightseer algorithm), whereas the other requires terrain coverage (it produces the Seed Spreader algorithm). Are there other distinct "application" models that are not reducible to ours? What are the lower bounds on the terrain acquisition problem for each "application" model? Can the presented upper bounds be improved? How can finite dimensions of the robot be incorporated into the algorithms? Although from a practical standpoint, this seems to be a secondary issue in the context of terrain acquisition, it is certainly an interesting algorithmic question. A related issue is the algorithmic effects of nonholonomic constraints on the robot motion.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A paradigm for incorporating vision in the robot navigation function</title>
		<author>
			<persName><forename type="first">V</forename><surname>Lumelsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Skewis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">P m . 1988 ZEEE Znt. Conf. Robotics Automat. (Philadelphia)</title>
		<imprint>
			<date type="published" when="1988-04">Apr. 1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A fast procedure for computing the distance between complex objects in three-dimensional space</title>
		<author>
			<persName><forename type="first">E</forename><surname>Gilbert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Johnston</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Keerthi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ZEEE J. Robotics Automat</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="193" to="203" />
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">The Stanford cart and the CMU rover</title>
		<author>
			<persName><forename type="first">H</forename><surname>Moravec</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">P m . ZEEE</title>
		<imprint>
			<biblScope unit="volume">71</biblScope>
			<date type="published" when="1983-07">July 1983</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Sonar-based real-world mapping and navigation</title>
		<author>
			<persName><forename type="first">A</forename><surname>Elfes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ZEEE J. Robotics Automat</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="249" to="265" />
			<date type="published" when="1987-06">June 1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">From 1967 to 1975, he held the academic positions of Junior Researcher and Senior Research Fellow at ICs conducting research in pattern recognition, cluster analysis, factor analysis, and control systems. Concurrently, from 1970 to 1975, he served as Adjunct Professor at Moscow Institute of Radioelectronics and Automation. From 1976 to research</title>
		<author>
			<persName><forename type="first">Vladimir</forename><forename type="middle">J</forename><surname>Lumelsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SM&apos;83) received the Ph.D. degree in applied mathematics from the Institute of Control Sciences (ICs), U.S.S.R. National Academy of Sciences</title>
		<meeting><address><addrLine>Moscow; Dearborn, MI</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1970">1970</date>
		</imprint>
	</monogr>
	<note>These questions include the following: 1980, he was with Ford Motor Company Scientific Laboratories. doing research in robotics. image urocessinp. and industrial automation</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Visual map making for a mobile robot</title>
		<author>
			<persName><forename type="first">R</forename><surname>Brooks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">P m . 1985 ZEEE Znt. Conf. Robotics Automat</title>
		<meeting><address><addrLine>St. Louis</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1985-03">Mar. 1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Low level learning for a mobile robot: Environmental model acquisition</title>
		<author>
			<persName><forename type="first">M</forename><surname>Turchen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2nd Znt. Conf. AZAppl</title>
		<meeting>2nd Znt. Conf. AZAppl</meeting>
		<imprint>
			<date type="published" when="1985-12">Dec. 1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Robot navigation in unknown terrains using learned visibility graph. Part I: The disjoint convex obstacle case</title>
		<author>
			<persName><forename type="first">J</forename><surname>Oommen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Iyenger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Kashyap</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Iyenger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Jorgensen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Weisbin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1987 ZEEE Int. Conf. Robotics Automat</title>
		<meeting>1987 ZEEE Int. Conf. Robotics Automat</meeting>
		<imprint>
			<date type="published" when="1987-04">Dec. 1987. Apr. 1987</date>
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
	<note>On terrain acquisition by a finite-sized mobile robot in plane</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">On the piano movers&apos; problem I 1 General techniques for computing topological properties of real algebraic manifolds</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">T</forename><surname>Schwartz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sharir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Advances Appl. Math.</title>
		<imprint>
			<biblScope unit="page" from="298" to="351" />
			<date type="published" when="1983-04">Apr. 1983</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A survey on advances in the theory of computational robotics</title>
		<author>
			<persName><forename type="first">J</forename><surname>Reif</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Adaptive and Laming Systems</title>
		<editor>
			<persName><forename type="first">K</forename><surname>Narendra</surname></persName>
		</editor>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Plenum</publisher>
			<date type="published" when="1986">1986</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Path planning strategies for a point mobile automaton moving amidst unknown obstacles of arbitrary shape</title>
		<author>
			<persName><forename type="first">V</forename><surname>Lumelsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>Stepanov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="403" to="430" />
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">The Design and Analysis of Computer Algorithms</title>
		<author>
			<persName><forename type="first">A</forename><surname>Aho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hopcroft</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Ullman</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Path problems</title>
		<author>
			<persName><surname>Ore</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Theory of Graphs</title>
		<imprint>
			<publisher>Colloquium Publications</publisher>
			<date type="published" when="1962">1962</date>
			<biblScope unit="volume">XXXVIII</biblScope>
		</imprint>
	</monogr>
	<note>ch</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">His research interests are in robotics, image processing, pattern recognition, and control theory. Dr. Lumelsky is a member of ACM and Robotics International of SME. I learning automata, pos? lems, learning for path gorithms in computer v Snehasis Mukhopadhyay was born near Calcutta in India in 1964</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>Reading</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">He received the B.E. degree in electronics and telecommunications engineering from Jadavpur University, Calcutta, India, in 1985 and the M.E. degree in systems science and automation from the Indian Institute of Science, Bangalore, India in 1987. Currently, he is a graduate student pursuing the Ph.D. degree in electrical engineering at Yale University</title>
		<meeting><address><addrLine>Electric Research Center, Schenectady, NY; New Haven, CT; New Haven, CT</addrLine></address></meeting>
		<imprint>
			<publisher>Addison-Wesley</publisher>
			<date type="published" when="1974">1974. 1980 to 1985</date>
		</imprint>
		<respStmt>
			<orgName>Yale University</orgName>
		</respStmt>
	</monogr>
	<note>His research interests are in learning systems including neural networks. and rible applications of learning systems in control probplanning in robotics, and application of learning alrision</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">He is currently completing the Ph.D. degree in electrical engineering at Yale University. His research interests include robot motion planning, pattern recognition, algorithm design and analysis</title>
	</analytic>
	<monogr>
		<title level="m">1985, and the M.S. and M.Phil. degrees in electrical engineering from Yale University</title>
		<meeting><address><addrLine>New Haven, CT</addrLine></address></meeting>
		<imprint>
			<publisher>Kang Sun (S&apos;</publisher>
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
	<note>He received the B.S. degree in computer science from Shanghai Jiao Tong University in 1982, the M.S. degree in computer science from Polytechnic Institute of New York, Brooklyn</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
