<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Collusive Data Leak and More: Large-scale Threat Analysis of Inter-app Communications</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Amiangshu</forename><surname>Bosu</surname></persName>
							<email>abosu@cs.siu.edu</email>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Virginia Tech</orgName>
								<address>
									<settlement>Blacksburg</settlement>
									<region>VA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Fang</forename><surname>Liu</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Daphne</forename><surname>Yao</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Gang</forename><surname>Wang</surname></persName>
							<email>gangwang@vt.edu</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Southern Illinois University</orgName>
								<address>
									<settlement>Carbondale</settlement>
									<region>IL</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Collusive Data Leak and More: Large-scale Threat Analysis of Inter-app Communications</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">F9480176970E83B73F501963803C4E77</idno>
					<idno type="DOI">10.1145/3052973.3053004</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T04:43+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Android</term>
					<term>Security</term>
					<term>Collusion</term>
					<term>Inter-component communication</term>
					<term>Inter-app communication</term>
					<term>Privilege escalation</term>
					<term>Intent</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Inter-Component Communication (ICC) provides a message passing mechanism for data exchange between Android applications. It has been long believed that inter-app ICCs can be abused by malware writers to launch collusion attacks using two or more apps. However, because of the complexity of performing pairwise program analysis on apps, the scale of existing analyses is too small (e.g., up to several hundred) to produce concrete security evidence. In this paper, we report our findings in the first large-scale detection of collusive and vulnerable apps, based on inter-app ICC data flows among 110,150 real-world apps. Our system design aims to balance the accuracy of static ICC resolution/data-flow analysis and run-time scalability. This large-scale analysis provides real-world evidence and deep insights on various types of inter-app ICC abuse. Besides the empirical findings, we make several technical contributions, including a new open-source ICC resolution tool with improved accuracy over the state-of-the-art, and a large database of inter-app ICCs and their attributes.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>An active and continuous operational effort is necessary to detect stand-alone malicious apps. A recent report showed that hundreds of Trojanized apps were missed by Google's detection and some popular DressCode apps were downloaded over 100,000 times before taken off the Google Play Market <ref type="bibr" target="#b11">[11]</ref>. In the meantime, researchers (e.g., <ref type="bibr" target="#b4">[4,</ref><ref type="bibr" target="#b5">5,</ref><ref type="bibr" target="#b19">19,</ref><ref type="bibr" target="#b20">20]</ref>) have identified more complex threats associated with app pairs, i.e., inter-app communication security.</p><p>Inter-app data-flow analyses go beyond the scope of a single app by bridging the data flows of two potentially communicating apps and analyzing the resulting longer paths for data leaks. For example, an app A accesses the location of the phone, passes the data to another app B, which sends it to an external server. Android apps typically use Inter-Component Communication (ICC), a message passing mechanism, to exchange data. Again, components within Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.</p><p>ASIA CCS <ref type="bibr">'17</ref> the same app also use ICC to communicate with each other <ref type="bibr" target="#b23">[23,</ref><ref type="bibr" target="#b35">35]</ref>. App pairs may communicate via explicit or implicit intent, depending on whether the specification describes the name of the target component (in the explicit intent) or only the attributes (in the implicit intent).</p><p>Inter-app data-flow analyses are motivated by the need for characterizing the collective security behavior of two (or more) applications. For example, to answer questions such as How many inter-app data flows are sensitive and result in external data-leaks and/or privilege escalations? Do these leaks use explicit intents or implicit intents for the communication between the pairs? What is the most commonly observed sensitive information that is leaked? There may be different reasons behind sensitive inter-app data leaks. During an intentional malware collusion, two apps would work together to complete an attack goal <ref type="bibr" target="#b24">[24]</ref>. Because of the evolving nature of attacks and defenses, this new threat is indeed conceivable. With collusion, malware writers can develop multiple benign looking apps to evade the existing single-app screening mechanisms. These apps can complement each other's privileges and accomplish attack goals. Single-app scanners (e.g., <ref type="bibr" target="#b1">[1,</ref><ref type="bibr" target="#b2">2,</ref><ref type="bibr" target="#b12">12,</ref><ref type="bibr" target="#b30">30]</ref>) cannot provide complete data-flow characterizations essential for inter-app threat analyses.</p><p>Inter-app data leaks may also be due to vulnerable apps being exploited for privilege escalations <ref type="bibr" target="#b9">[9,</ref><ref type="bibr" target="#b33">33]</ref>. Therefore, another relevant question is Can we distinguish intentional data leaks (i.e., collusion) from unintentional data leaks (due to vulnerable apps)? Answers to these questions will help securing the mobile ecosystem, but have not been answered in the literature.</p><p>The expensive nature of pairwise app analysis is a main obstacle to answering these questions. It requires an in-depth data-flow analysis for all apps, beyond the ICC interfaces. In addition, because of the intrinsic worst-case quadratic complexity (O(N 2 ), where N is the total number of apps) of the ICC linking operation, scaling the analysis to hundreds of thousands of apps is challenging. Despite recent efforts on inter-app ICC analysis, no satisfactory solution exists that can support a large-scale pairwise analysis. For instance, ApkCombiner extracts suspicious inter-app ICCs by combining multiple apps into a single app, and then performs a conventional single-app data-flow analysis <ref type="bibr" target="#b20">[20]</ref>. This approach is barely scalable, since an expensive data-flow analysis is repeated for all possible combinations of app-pairs <ref type="bibr" target="#b33">[33]</ref>. COVERT <ref type="bibr" target="#b4">[4]</ref> and DidFail <ref type="bibr" target="#b19">[19]</ref> eliminate the need for redundant data-flow analysis by analyzing each app only once. However, COVERT uses formal model checkers incurring high overhead. DidFail's experimental evaluation is small and uses an erroneous ICC intent resolution mechanism <ref type="bibr" target="#b29">[29]</ref>. Although, PRIMO predicts the likelihoods of inter-app ICC occurrences <ref type="bibr" target="#b26">[26]</ref>, it is not designed for collusion detection.</p><p>In this work, we develop a scalable and accurate tool DIAL-Droid (Database powered ICC AnaLysis for anDroid) for inter-app ICC analysis. We use DIALDroid to perform the first systematic large-scale security analysis on inter-app data-flows among 110,150 apps, including 100,206 most popular apps from the Google Play, and 9,944 malware apps from the Virus Share 1 . DIALDroid completes such a large-scale analysis within a reasonable time frame <ref type="bibr" target="#b6">(6,</ref><ref type="bibr">340</ref> total hours of program analysis and 82 minutes of ICC linking and detection). Our key design characteristics include an adaptive and pragmatic data flow analysis, highly precise ICC resolution, fast ICC matching, and ability to execute fast queries on an optimized relational database. Our paper provides empirical evidence on app collusion and privilege escalations. We summarize our contributions as follows.</p><p>• We develop an Android security tool, DIALDroid, for analyzing ICC-based sensitive inter-app data flows. Our design leverages relational database for a scalable matching of ICC entry and exit points, and fast analysis. DIALDroid outperforms state-of-art solutions (IccTA+ApkCombiner 2 and COVERT) on benchmark apps, with a higher accuracy (precision 100 %, recall 91.2%) and orders of magnitude shorter processing time.</p><p>In addition, DIALDroid's ICC extractor is more accurate than the state-of-the-art solution IC3 <ref type="bibr" target="#b28">[28]</ref>, with 28% more identified intents and 33% less failed cases.</p><p>• We use DIALDroid to analyze the sensitive inter-app ICCs among 100,206 apps from the Google Play Market, and characterize them into 6 threat categories (in Table <ref type="table" target="#tab_6">3</ref>). Our threat categorization is based on threat types (collusive data leak or privilege escalation) and intent types (explicit or implicit).</p><p>We found that collusive data leaks and privilege escalations mostly use implicit intents but did not observe any explicitintent based collusion. These findings suggest that collusive data leak research should start to examine implicit intents, rather than focusing on explicit intents (e.g., <ref type="bibr" target="#b13">[13]</ref>). Our case studies revealed a number of privilege escalation cases among same developer app pairs.</p><p>Although the total numbers of sensitive ICCs and app pairs are extremely high, the number of sender apps initiating these ICCs is surprisingly small. E.g., 1,785,102 inter-app ICCs exhibiting privilege escalation behavior (without collusive data leaks) are originated from 62 sender apps. We also had similar observations in other threat categories. We found that the majority of inter-app ICCs (&gt; 99%) do not carry any sensitive data. This property implies that the typical workload of interapp ICC analysis is much lower than the worst case workload.</p><p>• Our dataset and tools can potentially benefit the broader Android community. We have open-sourced our entire tool-suite on GitHub IccTA <ref type="bibr" target="#b21">[21]</ref> is designed for intra-app ICCs in a single app. It needs to use ApkCombiner <ref type="bibr" target="#b20">[20]</ref> to combine app-pairs for interapp ICC analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">THREAT MODEL</head><p>Before we present our threat model, we first provide a brief overview of the Android ICC architecture and how malicious apps can leverage inter-app ICCs to leak sensitive information. Components are the basic building blocks of Android apps. There are four types of components <ref type="foot" target="#foot_4">6</ref> . Activities, the most common components, represent user interfaces. Services perform background processing. Broadcast receivers respond to system-wide broadcast announcements (e.g., Wifi connected). Finally, content providers manage a shared set of application data. Components communicate using URIs and Intents, within an application (i.e., intra-app ICC) or between applications (i.e., inter-app ICC). An ICC exit point requires an intent object as a parameter. An intent is either explicit (i.e., its recipient is explicitly named) or implicit (i.e., only a general action is declared). Android system resolves intents at runtime. Android's intent resolution<ref type="foot" target="#foot_5">7</ref> is based on (1) attributes of an implicit intent (namely action, category, and data), and (2) IntentFilter fields declared in the manifests (AndroidManfest.xml) of potential receiver apps. The receiver app provides the ICC entry point. Resolving intents through string analysis is a key to the detection accuracy. Failure to identify matching ICC exit and entry points results in missed detection (i.e., false negative).</p><p>Our inter-app security analysis is oriented around identifying pairwise data flows from a sender app A to a receiver app B that result in two types of threats: collusive data leak or privilege escalation. Privilege escalation (aka the confused deputy problem) is a well-defined threat where the receiver app B gains unauthorized permissions or sensitive data as a result of its ICC communications with the sender app A <ref type="bibr" target="#b6">[6,</ref><ref type="bibr" target="#b9">9]</ref>. Although the concept of collusive data leak has been described in the literature <ref type="bibr" target="#b5">[5,</ref><ref type="bibr" target="#b24">24]</ref>, it has not been formally defined. In our work, we define collusive data leak as a threat where the receiver app B exfiltrates the sensitive data obtained from its ICC communications with the sender app A to an external destination (e.g., via disk output or network output).</p><p>Our analysis aims to detect sensitive data flows that result in privilege escalation, collusive data leak, or both. Our labeling of sensitive source and sink statements follows the SuSi project <ref type="bibr" target="#b31">[31]</ref>, based known sensitive APIs (e.g., API to access deviceID). Insensitive data flows and sensitive data flows that do not exhibit collusive data leak and privilege escalation threats are excluded from the analysis. Our threat model excludes intent spoofing, where the sender app forges intents to mislead receiver apps <ref type="bibr" target="#b9">[9]</ref>. We consider both explicit and implicit intents.</p><p>Next, we first give our definitions for the security terms used in the paper, including ICC exit leak, ICC entry leak, and sensitive ICC channel. We then give formal definitions of both privilege escalation and collusive data leak threats. Our experiments further distinguish 6 different subtypes of threats, based on various ICC and security properties (in Table <ref type="table" target="#tab_6">3</ref>).</p><p>A sensitive ICC channel refers to an ICC link between two components, from an ICC exit point (i.e., an outgoing ICC such as startActivity, bindService, and startActivityForResult) to an ICC entry point (i.e., an incoming ICC such as onActivityResult and getIntent) that transfers intents containing sensitive information. Our analysis is focused on sensitive ICC channels and excludes non-sensitive ICC channels.</p><p>A property of ICC exit leak is that an app's ICC exit point is data dependent on a sensitive data source, i.e., there exists a data-flow path from the sensitive source to the ICC exit. In the context of inter-app ICCs, we use the ICC exit leak to describe the sender app. Intuitively, ICC exit leaks identify sender apps that leak sensitive data via inter-app ICCs.</p><p>A property of ICC entry leak is that an app's ICC entry point is the source of data-flow paths of sensitive sinks that send the received data externally (e.g, via networks). In the context of interapp ICCs, we use the ICC entry leak to describe the receiver app. Intuitively, ICC entry leaks identify receiver apps that leak received data externally. Next, we use the terminology introduced above to define privilege escalation and collusion data leak.</p><p>• Collusive data leak is a threat associated with a sensitive ICC channel between a sender component A in an app and a receiver component B in another app, where A has an ICC exit leak and B leaks the received data from A via an ICC entry leak.</p><p>• Privilege escalation is a threat associated with a sensitive inter-app ICC channel between a sender component A in an app and a receiver component B in another app, where A has an ICC exit leak and B does not have the permission to access the data from A.</p><p>A collusive data leak may also result in a privilege escalation. Because of the overlap between the two threats, we further divide them into 6 sub-categories of threats in Table <ref type="table" target="#tab_6">3</ref>. Inter-app ICCs that result in neither collusive data leak or privilege escalation are not recorded. Intentional vs. Unintentional Attacks. One of the difficulties in collusion detection is to confirm the cause of an observed problematic data flow. It is well known that vulnerable sender apps (e.g., with exposed broadcast ICC interfaces) cause privilege escalations <ref type="bibr" target="#b9">[9]</ref>, i.e., the receiver app can intentionally exploit the vulnerabilities. However, intentional collusion between two apps may also result in privilege escalation. Similarly, collusive data leak may be intentional or inadvertent. Regardless of the causes, these data flows can potentially compromise the device and data security. Our large-scale empirical study helps expose and pinpoint these disguised threats.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">DIALDROID OVERVIEW</head><p>The workflow of our inter-app ICC security analysis involves four key operations: ICC ENTRY / EXIT POINT EXTRACTION, DATAFLOW ANALYSIS, DATA AGGREGATION, and ICC LEAK CAL-CULATION. They are briefly described below.</p><p>• ICC ENTRY / EXIT POINT EXTRACTION: Given an app, we extract the permissions and the attributes of the intent filters from the AndroidManifest.xml file. We perform static analysis to determine the attributes of the intents passing through ICC exit points.</p><p>• DATAFLOW ANALYSIS: We use static taint analysis to determine ICC exit leaks and ICC entry leaks in an app. We dynamically adjust the precision configuration of taint analysis to ensure the timely completion of each app.</p><p>• DATA AGGREGATION: We aggregate the data extracted in previous two steps to store in a relational MySQL database. DIALDroid database schema is composed of 42 tables and is designed to facilitate efficient storage and fast data retrieval.</p><p>• ICC LEAK CALCULATION: We use fine-grained security policies to detect potential sensitive inter-app ICC channels. Using SQL stored procedures and SQL queries, we compute ICCs with collusive data leaks and privilege escalations.</p><p>DIALDroid executes the first three steps once for each app (complexity O(N ), where N is the total number of apps being analyzed). The complexity of ICC leak calculator is O(mN ), where m is the number of apps with ICC exit leaks and in the worst case, m = N . However, for real-world apps m would several times smaller than N . In our study, we found m is 28 times smaller than N (explained in the appendix).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">ICC Entry / Exit Point Extractor</head><p>This operation identifies all the ICC end points (both entries and exits) from apps, by performing a single pass of analysis on each app. We describe our new tool IC3-DIALDroid for this purpose. We have made this tool open source. <ref type="foot" target="#foot_6">8</ref> Our ICC entry point extractor subsystem extracts the manifest file from the apk, parses the permissions requested by the app, and parses the ICC entry points of that app from IntentFilters. We use static analysis to identify intent values, similar to prior studies <ref type="bibr" target="#b28">[28,</ref><ref type="bibr" target="#b29">29,</ref><ref type="bibr" target="#b35">35]</ref>. Although our implementation uses the libraries provided by IC3, the state-of-the-art ICC extractor <ref type="bibr" target="#b28">[28]</ref>, our IC3-DIALDroid has several significant enhancements providing better robustness and higher intent discovery than IC3, which are described next.</p><p>IC3 conservatively adopts call graph generation procedure from FlowDroid skipping incremental callback analysis, which incrementally extends the call graph to include the newly discovered callbacks, and the scan is run again since callback handlers are free to register new callbacks on their own. This process is repeated until the call graph reaches a fixed point <ref type="bibr" target="#b3">[3]</ref>. One pass callback analysis improves the runtime performance of IC3. However, it results in missed intents due to imprecise Android lifecycle modeling. In comparison, IC3-DIALDroid implements incremental callback analysis, which significantly increases the number of discovered intents.</p><p>IC3-DIALDroid analyzes on Android .apks directly. It does not require the Dare tool for reverse engineering <ref type="bibr" target="#b27">[27]</ref>, and can directly extract the attributes of ICC exit points. In comparison, IC3 is dependent on the Dare tool. Although Android apps are developed in Java, those are compiled into Dalvik bytecode (a custom format developed by the Android project), instead of traditional Java class file. Thus, IC3 requires the Dalvik bytecode to be retargeted using Dare, which not only requires additional preprocessing time, but also may introduce inaccuracies <ref type="bibr" target="#b27">[27]</ref>.</p><p>We identified several defects in IC3, specifically in handling different types of real-world apks and the constraint solver's failure to reach a fixed point even after a long time for some apps. We fixed those defects and implemented code to identify and break race conditions.</p><p>We compared the performance of IC3-DIALDroid with IC3 on 29 applications from DroidBench 3.0 and 1,000 randomly selected apps with a timeout of 15 minutes for each app. Table <ref type="table" target="#tab_2">1</ref> shows a comparison between the two tools. On DroidBench, DIALDroid took 13 seconds (8.6%) less than IC3 to compute entry and exit points and identified the same number of intents. On the 1,000 randomly selected real-world apps, DIALDroid identified 28% more intents and encountered 33% less failed cases. However, due to more precise lifecycle modeling, IC3-DIALDroid spent 13.3% more time. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Dataflow Analyzer</head><p>We considered the three state-of-the-art static analysis tools for Android apps, 1) FlowDroid <ref type="bibr" target="#b3">[3]</ref>, 2) Amandroid <ref type="bibr" target="#b35">[35]</ref>, and 3) Droid-Safe <ref type="bibr" target="#b15">[15]</ref>, to build a dataflow analyzer. While DroidSafe <ref type="bibr" target="#b15">[15]</ref> claims to be the most precise static analysis tool, it is 20 to 50 times slower compared to FlowDroid and Amandroid. While both the FlowDroid and the Amandroid offered similar runtime performances, we found that FlowDroid rarely failed to analyze an app. Therefore, we build our Dataflow analyzer based on the FlowDroid, but make several pragmatic improvements. 1) Number of sources / sinks: Static taint analysis requires a set of sources (e.g., originating methods of sensitive data, such as API calls to retrieve a user's location) and a set of sinks (e.g., methods through which data can exit the application or device). The number of sources / sinks in an app impacts the taint analysis time. To manage the number of sources and sinks, the dataflow analyzer analyzes an app in two steps. First, for each of the ICC exit points, we investigate if the intents sent through that point can potentially include any sensitive information (i.e., determine the ICC exit leaks). The dataflow analyzer labels the sensitive API calls identified by SuSi <ref type="bibr" target="#b31">[31]</ref> as sources and labels all the methods that initiate ICCs as sinks. Second, for each of the ICC entry points, we investigate if the data extracted from intents can potentially flow out of the application (i.e., determine the ICC entry leaks). The dataflow analyzer labels the methods to access intent data (e.g., getIntent, and onActivityResult) as sources and labels all sinks identified by SuSi <ref type="bibr" target="#b31">[31]</ref> as sinks.</p><p>2) Retry with a less precise configuration: We used two types of configuration for the dataflow analyzer. High precision configuration: This configuration supports a contextsensitive algorithm with an access path length = 3. In this configuration, the dataflow analyzer builds the complete taint paths. (An access path is of the form a.b.c, where a is a local variable or parameter and b and c are fields. The variable a.b.c has an access path length = 2. An access path length = 0 means a simple local variable or parameter (i.e., in this case a) <ref type="bibr" target="#b3">[3]</ref>.) Low precision configuration: This configuration supports a context insensitive algorithm, which does not consider calling context. It is significantly faster, but may have false positives. In this configuration, the access path length is set to 1 and the dataflow analyzer only identifies the sources and sinks, but skips building the complete taint paths.</p><p>By default, the dataflow analyzer runs with the high precision configuration. However, if a precision-analysis fails to complete within our specified time (i.e., 5 minutes), DIALDroid abandons the analysis, and retries with the low precision configuration. To recover from possible deadlocks, we limit the analysis time for each app to 20 minutes (i.e., if the analysis for an app does not complete within 20 minutes, DIALDroid abandons that analysis).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Data Module and ICC Leak Calculator</head><p>The data module of DIALDroid aggregates the attributes of an app extracted by the ICC entry / exit point extractor (Section 3.1) and the dataflow analyzer (Section 3.2). The data module stores the aggregated data in a MySQL database. DIALDroid leverages the power of relational databases to overcome scalability issues. Relational databases provide efficient data storage. More importantly, modern relational database management systems facilitate powerful query capabilities to easily transform and retrieve data. DIALDroid uses a highly normalized database schema to efficiently store data and uses indexes on the comparison attributes to support efficient query computation. Our database is composed of 42 tables with a total of 161 attributes. A supplementary website <ref type="foot" target="#foot_7">9</ref> provides a detailed diagram of the database schema.</p><p>Algorithm 1 A SQL query to detect inter-app ICC based collusive data leaks. We implement the key calculateSensitiveChannels procedure inside the database as a SQL stored procedure. This design minimizes potential data transmission delays and leverages the speed, optimization, and efficient queries provided by the database management systems. Because all the inter-app ICC threats in our attack model concern sensitive ICC channels (specifically, requiring ICC exit leaks in sender apps), it is unnecessary to compute ICC links for the intents that cannot possibly contain any sensitive information. It drastically reduces the computation complexity.</p><p>While matching explicit intents are straightforward, the resolution of an implicit intent involves matching the action, category and data fields with compatible IntentFilter, known in the Android development guide as action test, category test, and data test, respectively. We write SQL queries to compute all the sensitive ICC links originating via implicit intent from a specific app. Due to the complex matching rules, we create two SQL procedures: categorytest(intent_id,filter_id) and datatest(intent_id,filter_id), which implement the category test and data test, respectively. Queries to compute ICC channels via explicit intents are much simpler. Algorithm 3 in the appendix shows the pseudocode for calculating sensitive ICC channels to and from an app.</p><p>For computing privilege escalations, we test if the receiver app in a sensitive ICC channel has permissions to access the data transmitted via the carried intent. For computing collusive data leaks, we check if a sensitive ICC channel is joining an ICC exit leak in an app with an ICC entry leak in another app. We show an example query for detecting collusive data leaks in Algorithm 1. In addition, our supplementary website provides scripts to generate all the SQL procedures and the SQL queries.</p><p>The intent resolution in DIALDroid is based on the libraries provided by IC3. However, in some cases, string analysis in IC3 cannot accurately determine possible values and therefore generates safe over-approximated sets (e.g., '.*', a regular expression matching any string constant) <ref type="bibr" target="#b28">[28]</ref>. A recent study found that 95% of the ICC links generated by the intents with attributes (i.e., package, component, action, or category) resolved as '.*' were infeasible <ref type="bibr" target="#b26">[26]</ref>. Therefore, the strict intent matching rules implemented by our ICC leak calculator ignores such over-approximated regular expressions. While this modification may introduce a few false negatives, it greatly reduces the number of false positives in the subsequent detection.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">EVALUATION AND FINDINGS</head><p>Our evaluation aims to answer the following questions. In addition, we also released a benchmark consisting of realworld apps for comparing the detection capabilities for collusive data leaks. Unless specified, experiments were conducted on a Dell Tower Precision 7810 workstation running Ubuntu 14.04LTS 64bit with 16 core Intel Xeon 2.4GHz CPU, 64GB RAM, and an SSD drive. We enlisted four virtual machines for the large-scale experiment in 4.8.</p><p>We evaluate both real-world apps and benchmark suites. Our three datasets are described below.</p><p>• Dataset I (Benchmarks). We evaluate benchmarks below. DroidBench 3.0: DroidBench is the most comprehensive benchmark suite to evaluate the effectiveness of Android taint analysis tools. Among the 174 test cases provide by the DroidBench 3.0 10 , 10 test-cases aim to evaluate intra-app leaks and 11 test-cases aims to evaluate inter-app collusions. ICC-Bench: ICC-Bench 12 , introduced by Amandroid <ref type="bibr" target="#b35">[35]</ref>, provides 11 test cases for Intra-app leaks. While ICC-Bench did not mention about inter-app leaks, we found and verified 9 inter-app leaks in ICC-Bench.</p><p>For inter-app ICC analysis, our comparison is on 21 inter-app ICC test cases from these benchmark suites. We also evaluate 44 intra-app ICC test cases for completeness. A test case may contain multiple ICC leaks.</p><p>• Dataset II (Google Play apps). Dataset II consists of 100,206 most downloaded Android apps (as of June, 2015) belonging to 16 popular categories from Google Play. Table <ref type="table" target="#tab_12">7</ref> in the appendix shows the distribution of the apps across the categories.</p><p>• Dataset III (All real-world apps). Dataset III (total 110,150 apps) consists of all apps from Dataset II as well as 9,944 malware apps from Virus Share.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Inter-app ICC Benchmark</head><p>Table <ref type="table" target="#tab_5">2</ref> shows the benchmark comparison results of our inter-app ICC analysis. DIALDroid has the highest precision 13 (100%), the highest recall 14 (91.2%), and the highest F-measure (0.95) among the three tools. IccTA performed poorly (12.5% recall), mainly because ApkCombiner was unable to combine the majority of the app pairs (62%). For the successfully combined apks, IccTA can only detect the inter-app leaks that are in DroidBench-IccTA (i.e., the benchmark that was developed by the same authors). Due to inaccurate intent resolutions, COVERT reported a high number of false positives (323). COVERT failed to detect all inter-app leaks from the DroidBench 3.0.</p><p>We performed manual inspection on our failed cases. Among the 21 inter-app pairs, nine lead to privilege escalation. DIALDroid was able to detect five of those with a 100% precision and 55.5% recall. DIALDroid failed to report transitive (indirect) privilege escalations (i.e., data leaked via an intermediate component with the same level of permissions as the source component). In contrast, COVERT failed to report any of those nine privilege escalations.</p><p>We compare the inter-app analysis runtime of COVERT, Ic-cTA+ApkCombiner, and DIALDroid, with 57 randomly selected apps from Google Play Market. Out of the 1,596 pairs, ApkCombiner was able to combine only 501 pairs (31%) and IccTA took 203 hours to complete on the combined apps. COVERT ran for 26 hours and then crashed during the formal model generation step <ref type="bibr" target="#b4">[4]</ref>. In comparison, DIALDroid took 6.1 hours to complete. It only abandoned two apps, as DIALDroid was unable to finish within 20 minutes during those two cases.</p><p>For completeness, benchmark evaluation on intra-app ICCs is described in Section B.1 in the appendix.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Threat Breakdown for Dataset II</head><p>We break down the threats into six disjoint categories, which are listed as threat types I to VI in Table <ref type="table" target="#tab_6">3</ref>. The categories are disjoint in that an inter-app ICC belongs to one and only one category. Some  sender apps may appear in ICCs of multiple categories. We then run DIALDroid on Dataset II (Google Play apps). For each threat type, we summarize our findings in Table <ref type="table" target="#tab_6">3</ref>. Because Google Play market is known to deploy app vetting mechanisms (e.g., Google Bouncer), it is reasonable to assume the apps in Dataset II have passed some single-app screenings.</p><p>We found no collusive data leaks or privilege escalations based on explicit intents, i.e., no inter-app ICCs of Threat Types I, II, III. This result suggests that explicit intent based collusion is very rare. (They might exist, but are out of the scope of our dataset.) Therefore, collusion analysis needs to be focused on implicit intents based ICCs, as opposed to explicit intents.</p><p>For inter-app ICCs via implicit intents, we distinguish three cases: both collusive data leak and privilege escalation in Threat IV, privilege escalation without collusive data leak in Threat Type V, and collusive data leak without privilege escalation in Threat VI. We highlight some key results next. The most severe threat type is Threat IV, where collusive data leak and privilege escalation occur simultaneously. We found 16,712 app pairs originating from 33 sender apps that exhibit both collusive data leak and privilege escalation behaviors via implicit intents. Because of the sensitive data from the sender app is leaked externally by the receiver app and the receiver app is under the disguise of having fewer permissions, apps in Threat IV is the most serious.</p><p>It is not surprising that we observe a huge number (1,785,102) of inter-app ICC channels with the privilege escalation threat in Threat V. Some app pairs may have multiple ICC channels between them. Interestingly, these 1,785,102 ICCs with privilege escalation threat originate from only 62 problematic sender apps.</p><p>For Threat Type VI (collusive data leak without privilege escalation), we found 6,783 such app pairs originating from 21 sender apps. That is, these app pairs exhibit collusive data leak behaviors; however, the receiver apps do not gain new permission privileges, i.e., the receiver apps have the authorization to access the received data. In addition, we found that a large number (20) of sender apps in Threat Type VI are also sender apps in Threat Type IV. We performed case studies for each of the Threat Types IV, V, and VI in Section 4.3. Some cases in Threat Type VI suggest that the collusive data leaks are unintentional. Cases with HTTP and SMS Sinks: We want to identify the collusive data leak cases (of Threat Types IV or VI) that exfiltrate the sensitive information to remote destinations. We recompute the results with a small set of relevant sensitive sink methods, namely java.net.URL, android.telephony.SmsManager, and org.apache.http.HttpResponse. For Threat Type IV, we found 325 problematic app pairs with 16 distinct sender apps and 32 distinct receiver apps. There are a total of 1,054 Type IV ICCs. For Threat Type VI, the numbers are smaller. We found 19 pairs, with The sender app organizes photos based on the locations where photos were taken. com.ccmass.fotoalbumgpslite retrieves user's location (i.e., getLatitude and getLongtitude, permission =android.permission.ACCESS_FINE_LOCATION) and sends that via an implicit intent (action = android.media.action.IMAGE_CAPTURE). The receiver app, which takes photos with various filters, defines an intent-filter to accept the above intent. Since com.ventri.cake.retrica have the permission to access location information, this ICC communication does not lead to escalated privileges. But upon reception, com.ventri.cake.retrica leaks the data to a log and therefore causes a collusion. We found 1,540 receiver apps that can possibly accept this intent. Among those possible receivers, 32 apps and the resulting interapp ICCs exhibit both collusive data leak and privilege escalation behaviors (Type IV), 839 apps and the resulting ICCs exhibit only privilege escalations (Type V), and 7 apps and the resulting ICCs exhibit only collusive behaviors (Type VI).</p><p>For example, br.com.coderev.acumapa, which provides an acupuncture map overlaid on the image captured by the camera, can receive this intent and write the retrieved location information to a file (Type IV). do.adoubleu.toy, which is an integrated diary and messenger app without access to user's location, can accept this intent (Type V). com.du.android, which is a to-do list management app with access to user's location, can accept this intent, extract location information sent via android.intent.extra.TEXT, and leak it to a log (Type VI).</p><p>It is extremely challenging for us to infer the true intentions behind these implicit-intent based collusive data leak or privilege escalation behaviors. Is the developer's intention malicious (e.g., for deliberately evading detection or stealing sensitive data) or benign (e.g., due to poor programming practices)? We further discuss the security implications in Section 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Statistics on ICC Exit and Entry Leaks</head><p>For Dataset III, the number of sender apps with ICC exit leaks is an order of magnitude fewer than the number of receiver apps with ICC entry leaks. Specifically, DIALDroid identified a total of 30,453 ICC exit leaks that are caused by 3,372 sender apps (3.06% of the total apps). DIALDroid identified a total of 249,263 ICC entry leaks that are caused by 32,855 receiver apps (29.82% of the total apps).</p><p>Out of the 3,372 sender apps with ICC exit leaks, 1,792 of them (≈ 1.62% of total apps) initiate sensitive ICC channels (more information in Section 4.5). Although it does not necessarily mean that the remaining apps are threat-free, as they may communicate with apps outside of our dataset, the number of problematic sender apps is somewhat surprisingly small. However, because of the use of implicit intents in the inter-app ICCs, these 1,792 sender apps generate millions of ICC links (presented in Section 4.5).</p><p>Figure <ref type="figure">1</ref> in the appendix shows the percentages of leaking apps out of each app category. For Google Play apps, Personalization has the highest percentage of apps with ICC exit leaks (in sender apps), which is only slightly lower than the Virus Share category. For ICC entry leaks in receiver apps, the percentages are rather high across all the Google Play app categories, with Photography and Business being the highest.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Statistics on Sensitive ICCs</head><p>For Dataset III, DIALDroid found 5,715,046 (≈ 5.7 million) potentially sensitive ICC channels. Most of the (≈ 99.6%) sensitive ICC channels are inter-app, and the rest are intra-app. These sensitive ICC channels originate from only 1,792 apps.</p><p>Table <ref type="table" target="#tab_8">4</ref> shows how the sender apps involved in sensitive ICC channels or collusive data leaks are distributed across different app categories for Dataset III. Intuitively, this table summarizes the problematic sender apps and their categories. We highlight the categories with at least one percentage over 7%.</p><p>For Google Play apps, Transportation (11.18%) and Travel &amp; Local (9.05%) apps initiate the most sensitive ICC channels, which is most likely due to passing the user's location information to another app. In contrast, this category has a relatively low percentage of collusive data leak cases, which indicates the location or other sensitive information being passed is likely consumed by the receiver app, as opposed to being leaked via disk output or network output. Personalization and entertainment categories have high percentages of problematic sender apps for both types of inter-app ICC threats.</p><p>In comparison, sender apps from Virus Share are involved in a substantially higher number of detected sensitive ICC channels </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6">Permission and Method Distributions</head><p>Table <ref type="table" target="#tab_9">5</ref> shows the number of different permissions leaked via all privilege escalation scenarios for Dataset III. Recall that Dataset III includes Google Play apps and apps from Virus Share. The results suggest that user's location, device information, and current cellular network information are overwhelmingly more likely to be transferred to apps that do not have corresponding access permissions. The permission ACCESS_NETWORK_STATE gives the app authorization to access NetworkManager to monitor network connections, which is useful for device fingerprinting. Similarly, the permission ACCESS_WIFI_STATE provides the access to WifiManager and can be used for fingerprinting.</p><p>Table <ref type="table" target="#tab_10">6</ref> (first two columns) shows the most common sensitive source methods in collusive data leak cases in Dataset III. Methods to uniquely identify a user (i.e., getDeviceId, getConnectionInfob and getSubscriberId) are the most common sources of ICC leaks.</p><p>Other common sources include methods to retrieve a user's location (i.e., getLastKnownLocation, getLatitude, and getLongtitude). Similarly, Table <ref type="table" target="#tab_10">6</ref> (last two columns) shows the most common sensitive sink methods. SharedPreferences and Log are the mostly used for collusive data leaks. Other APIs are related to file, network, and SMS. In Section 5, we discuss how relaxing sensitive source and sink definitions impacts the results. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.7">Unintended ICCs &amp; Inaccurate Manifests</head><p>The main source of false positives in our detection is unintended ICCs with mismatched data types. We randomly selected 10 app pairs (4 of Type IV, 5 of Type V, and 1 of Type VI) and manually investigated their decompiled source code. The pairs have distinct receiver apps. We found 5 receiver apps overclaim the types of data it can receive in their Manifest files. For those apps, the sensitive intents pass our static action test, category test, and data test, which are equivalent to Android's runtime tests. However, the code in the receiver app is not designed to process the sensitive incoming intent. At runtime, the receiver app may crash or simply do nothing. For example, for a pair with Threat Type IV, we found that the source app com.americos.selfshot sends implicit intent with data field "android.intent.extra.TEXT" containing user's device ID. However, the code in a matched receiver app qubecad.droidtocad assumes the data field in the incoming intents to be file paths. This suggests that this inter-app ICC is not intended. Unintended ICCs with mismatched data types may lead to false positives.</p><p>The fundamental reason for these false positives is loose or no restrictions on incoming data in the receiver app's Manifest file. If the format of incoming data is not well specified, then Android system is likely to assume the receiver app can receive all types of data at runtime. Judging based on our manual analysis, such cases are quite common. We discuss this issue further in Section 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.8">Runtime on 110K Apps</head><p>For scalability evaluation, we measure how long DIALDroidtakes to analyze our largest dataset, Dataset III with 110,150 apps. We used four virtual machines, each with 4 processor-cores, 64GB RAM, and 1 TB hard drive to analyze the apps. We stored the results to a MySQL database hosted on a server with an eight-core processor and 80GB RAM. The ICC Leak Calculator module of DIALDroid computed all the sensitive ICC channels among the 110,150 apps in 82 minutes. This computation is fast, because although the total number of ICC links is huge, the percentage of sensitive ones is extremely low (about 0.57% as estimated by our experiment. 15 Non-sensitive entries are not touched in the computa- <ref type="bibr" target="#b15">15</ref> We first computed all the possible ICC links originating from 1,000 randomly selected applications and obtained ≈ 21.8 million ICC links originating from those 1,000 apps. Among those ≈ 21.8 million ICC links, only 124K (≈ 0.57%) ICC links were sensitive, i.e., sensitive ICC channels as defined in Section 2. The rest of them do not carry sensitive data. tion. Our relational database schema is efficient and consumes only 6.3 GB space for storing the information for 110,150 apps.</p><p>DIALDroid was able to analyze more the 80% of the apps within five minutes. The average analysis time per app was 3.45 minutes. Figure <ref type="figure" target="#fig_3">3</ref> in the appendix shows the distribution of analysis time for the applications. Adding the individual analysis time for each app (i.e., as if all the apps were analyzed on a single machine), DIALDroid took a total of 6,339.6 hours to analyze the 110,150 apps. DIALDroid was able to complete 83.6% of the apps with a high precision configuration within five minutes (Section 3.2). For 10.7% of the apps, DIALDroid timed out in high precise configuration but was able to analyze successfully within five minutes when retried with a low precision configuration (Section 3.2). For the remaining 5.7% of the apps, DIALDroid failed to complete the analysis within the specified execution limit (20 minutes). Table <ref type="table" target="#tab_12">7</ref> in the appendix shows statistics of the apps and our program analysis. New benchmark released. In order to validate the detected collusion pairs and privilege escalations, we inspected the taint paths reported by DIALDroid. We further validated the leaks through manual inspections on the code. We converted the .apk files to .jar files using the dex2jar<ref type="foot" target="#foot_8">16</ref> tool. We decompiled the .jar files to Java source code using a Java decompiler <ref type="foot" target="#foot_9">17</ref> . We manually inspected the source codes to verify leaks. Based on our manual verification, we have compiled a benchmark suite, DIALDroid-Bench <ref type="foot" target="#foot_10">18</ref> , to test inter-app collusion. Currently, the suite contains 30 real-world apps from the Google play. To our knowledge, this is the first such benchmark using real-world apps, as opposed to proof-of-concept apps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">DISCUSSION AND LIMITATIONS</head><p>Unintentional leaks and escalations. Although the reported collusive data leak and permission escalation cases may be unintentional (e.g., due to insecure design or poor development practices), these apps still pose threats to user's sensitive data and device. Several lessons can be learned by developers in order to prevent or reduce such threats. ICC sender apps should avoid transferring sensitive data through Activity or Service based implicit intents. Permission checking is needed for Broadcast intent with sensitive information. Whenever possible, explicit intents are preferred for communicating sensitive data between apps. For receiver apps, enforcing strict restrictions for each entry point (e.g., add pathPattern in intentFilter) reduces unintended and unexpected ICCs. Sensitive source and sink definitions. The choice of sensitive source and sink impacts the number of reported ICC anomalies. A smaller set of sensitive sources and sinks generates a smaller number of alerts. For example, as shown in Table <ref type="table" target="#tab_10">6</ref>, android.util.Log accounts for 48.3% of the sensitive sinks (in receiver apps) in the detected ICC leaks. When excluding both Log and SharedPreferences from the sensitive sink list, our query returns a much reduced number (15,109) of collusive ICC links.</p><p>Our sensitive sources and sinks definitions follow SuSi <ref type="bibr" target="#b31">[31]</ref>, which includes Android logging and SharedPreferences. In the latest Android OS, the logged information is visible only to the app itself, which reduces its risk. However, advanced logging-based exploits (e.g., LogCat and CatLog) are still possible. Thus, our evaluation includes logging as a sensitive sink in our evaluation. SharedPreferences are key-value pairs maintained by the Android system. An app can read and write the value associated with the key. There are three modes for SharedPreferences: private (i.e., accessible only by the owner app), world-read (i.e., others can read), and world-write (i.e., others can read and write). In virtually all taint analyses, SharedPreference is labeled sensitive. Even if it is configured as private, other components of the same app can access it resulting in sensitive data flows.</p><p>The advantage of DIALDroid is that its database backend allows security analysts to easily adjust and customize sensitivity definitions to refine query results. In Section 4.2, we show the recomputed results with a much smaller sink set consisting of java.net.URL, android.telephony.SmsManager, and org.apache.http.HttpResponse. App chain length. Three or more apps can possibly create a chain with ICC links to leak data. For example, three apps, A, B, and C, create an ICC chain, where app A transfers sensitive information to app B via an ICC exit leak; app B then leaks that information to app C. A chain of three or more apps is a special case of two app-based ICC collusion, where the receiver app leaks data extracted from an intent by initiating another ICC (i.e., ICC entry leak with ICC initiation methods as sink). Therefore, DIALDroid reports A→B link described above as an inter-app collusion.</p><p>Among the three benchmarks evaluated in Section 4, DIAL-Droid identified following two scenarios in the ICC-Bench, where three components work together to leak sensitive information. In addition, quantitative metrics can be developed to prioritize the risks based on the type of inter-app sensitive ICC flows, through machine learning methods. PRIMO <ref type="bibr" target="#b26">[26]</ref> can also be utilized to triage the ICC links detected by DIALDroid. User applications. Although DIALDroid is for marketplace owners, Android users can also benefit from this tool. For example, enterprise users can check possible inter-app collusions using DI-ALDroid before allowing certain apps to be installed on the devices of their employees. Moreover, a large-scale public database similar to ours, when regularly updated, can be queried by users to find out possible inter-app communications to or from a particular app.</p><p>Limitations. Existing static analysis approaches are ineffective against the unintended ICCs problem caused by mismatched data (described in Section 4.7). The reason is that one needs to infer the intended data type that an app sends or receives based on how the code preceding or following an ICC. Such static semantic code inference is challenging and remains an open problem. Similar to most other approaches based on static analysis, our approach shares some inherent limitations. For example, DIAL-Droid can resolve reflective calls only if their arguments are string constants. As mentioned in Section 3.3, since our strict intent matching rules ignore overapproximated regular expressions, DIAL-Droid may fail to compute some ICC links.</p><p>As we have mentioned in Section B.1, DIALDroid loses field sensitivity when intent objects carrying sensitive information goes through ICC channels, which can result in false positive collusion identification. DIALDroid uses a regular expression string search within the ICC entry leak path for the source data keys. As we encountered in startActivity6 test case, this search may return false positives if the path contains any string that contains the key as a substring. We manually inspected 30 taint paths from real-world collusion pairs identified in our study and did not observe any such occurrence.</p><p>To enable large scale analysis, we limited our analysis time per app. Although DIALDroid failed to analyze only 5.7% of the applications within allocated time (i.e., 20 minutes), there is a possibility that some of those applications could cause collusions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">RELATED WORK</head><p>Collusion and privilege escalation. Davi et al. were the to describe the possibility of privilege escalation attacks in Android <ref type="bibr" target="#b10">[10]</ref> and Marforio et al. gave a comprehensive description of possible collusion channels, including inter-app ICC <ref type="bibr" target="#b24">[24]</ref>. Later Com-Droid provided the first comprehensive analysis of inter-app ICC based threats, including broadcast theft and activity hijacking <ref type="bibr" target="#b9">[9]</ref>. Since ComDroid analyzed individual apps, it's results may overapproximate the number of sensitive inter-app ICC flows, regardless of how the data is consumed by the receiver app. In comparison, our pairwise analysis performs end-to-end data-flow analysis, which is more fine-grained. Requiring the receiver app to have ICC entry leaks (as defined in Section 2) reduces the number of false positives (i.e., false alarms) allowing security analysts to better prioritize their investigation.</p><p>Elish et al. pointed out that collusion detection solutions may suffer from high false positives without in-depth pairwise data-flow analysis <ref type="bibr" target="#b13">[13]</ref>. Researchers pointed out a third type of inter-app ICC attacks besides collusions and privilege escalation, called private activity invocation due to the misconfiguration of the intent scopes <ref type="bibr" target="#b33">[33]</ref>. A recent study also reported the presence of collusive attacks to promote the rankings of apps in the Chinese Apple marketplace <ref type="bibr">[8]</ref>. Single-app security. For static analysis on single apps, many general-purpose solutions such as DroidSafe <ref type="bibr" target="#b15">[15]</ref> and Amandroid <ref type="bibr" target="#b35">[35]</ref> can identify sensitive data flows. Researches have also proposed several other techniques for specific detection purposes. For example, CHEX <ref type="bibr" target="#b23">[23]</ref> is focused on detecting data flows that enable component hijacking within a single app. AppIntent uses symbolic execution to determine whether a data transmission is intended by the user through analyzing its compatibility with the required GUI-operation sequences <ref type="bibr" target="#b39">[39]</ref>. AAPL <ref type="bibr" target="#b22">[22]</ref> utilizes peer voting for privacy leakage detection together with data-flow analysis. Wolfe et al. uses supervised learning to classify malware families <ref type="bibr" target="#b36">[36]</ref>.</p><p>Several researchers have also used dynamic program analysis for screening single apps. TaintDroid <ref type="bibr" target="#b14">[14]</ref> dynamically tracks the information flows and detects privacy leaks through Android system instrumentation. INTENTDROID <ref type="bibr" target="#b16">[16]</ref> utilizes debug breakpoints to dynamically detect the unsafe handling of incoming messages to identify possible component hijacking. IntentFuzzer uses fuzzing framework to identify exposed and vulnerable interfaces <ref type="bibr" target="#b38">[38]</ref>. Intel-liDroid aims to generate inputs for dynamic analysis <ref type="bibr" target="#b37">[37]</ref>. App-pair security. Most of the dynamic analysis solutions modify Android system to enforce security policies to prevent inter-app threats. XmanDroid is the first among such tools to demonstrate runtime collusion detection by enforcing policies on the combined permission set of app-pairs <ref type="bibr" target="#b5">[5]</ref>. FlaskDroid enforces mandatory access control policies to prevent privilege escalation and collusion attacks <ref type="bibr" target="#b7">[7]</ref>. IntentScope enforces security policies during dynamic intent forwarding <ref type="bibr" target="#b17">[17]</ref>.</p><p>However, these dynamic analysis based solutions are designed to analyze a small set of apps (e.g., ones that are installed on the same phone). However, these approaches do not scale to hundreds of thousands of apps. In comparison, our solution is designed for security analysts who maintain large-scale app marketplaces or even medium-scale proprietary marketplaces owned by an organization for its employees, e.g., only approved apps from the internal app marketplace are allowed to be installed.</p><p>Among the static analysis based solutions, IccTA+ApkCombiner uses a straightforward approach by two apps into a single app (e.g., using ApkCombiner <ref type="bibr" target="#b20">[20]</ref>) and then apply the existing single-app static analysis (e.g., IccTA <ref type="bibr" target="#b21">[21]</ref>) to identify inter-app threats. However, this approach performs a large number of redundant program analyses, which significantly slows down the computation as shown in our experiments. Our evaluation also shows that the combination mechanism of ApkCombiner is fragile and failed on majority of the app-pairs. DidFail <ref type="bibr" target="#b19">[19]</ref> and COVERT <ref type="bibr" target="#b4">[4]</ref>) perform the data-flow analysis only once per app. COVERT uses formal methods (namely model checking) to detect suspicious inter-app ICC flows <ref type="bibr" target="#b4">[4]</ref> but we found COVERT's formal model generation process fragile and having low scalability. DidFail <ref type="bibr" target="#b19">[19]</ref> uses an approach very similar to us, however the intent resolution and intent-matching process of DidFail performs poorly. Moreover, DidFail did not enforce security policies to reduce the search space (e.g., we only match intents that can potentially carry sensitive information), and therefore is not scalable. Finally, DidFail does not limit dynamically adjust the precision of static taint analysis, therefore often fails to complete analysis of apps even after long time. In comparison, we implement a pragmatic adaptive mechanism that dynamically determines the accuracy-performance tradeoff during static taint analysis. FUSE is aimed towards single-app analysis, but can be extended to build a multi-app information-flow graph <ref type="bibr" target="#b32">[32]</ref>. FUSE's intra-procedural string analysis is limited and error-prone. Existing inter-app analysis tools were evaluated on tens or hundred of apps and none of the tools were evaluated on 110K apps like DIALDroid.</p><p>PRIMO estimates the likelihoods of inter-app ICC connections using a probabilistic technique and provides ICC-link probabilities computed based on empirical evidence <ref type="bibr" target="#b26">[26]</ref>. Although PRIMO is not designed to be a complete ICC security detection tool, it provides useful complementary information to security analysts to focus on the risky ICCs that are the most likely to occur in practice. Others. Researchers proposed automatic patch generation for mitigating hijacking <ref type="bibr" target="#b41">[41]</ref>. Similarly, applying third-party security patches for privilege escalation and capability leaks was proposed by Mulliner et al. <ref type="bibr" target="#b25">[25]</ref>. <ref type="bibr">Kantola et al.</ref> developed a heuristic policy to guide developers in writing safer apps <ref type="bibr" target="#b18">[18]</ref>. Zhang et al. proposed monitoring network activities to identify stealth malwares <ref type="bibr" target="#b40">[40]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">CONCLUSIONS AND FUTURE WORK</head><p>We reported our findings in a large-scale inter-app ICC analysis for detecting collusions and privilege escalations. Accuracy and scalability are our key features, which we achieved through a new general-purpose Android intent resolution tool, database query systems, and pragmatic program-analysis execution management. Besides superior accuracy and runtime compared with state-of-theart solutions, our analysis produces a number of real-world collusive data leak and privilege escalation pairs and a myriad of interesting statistics on ICC security. We have open-sourced our entire toolsuite on GitHub <ref type="foot" target="#foot_11">19</ref> and have made our database available <ref type="foot" target="#foot_12">20</ref> for other researchers.  We compare the execution time of five tools in Figure <ref type="figure" target="#fig_3">3</ref>. The average is computed from three executions, for each data point. Only Amandroid's execution time was better than DIALDroid. All the tools, except Amandroid, are built on top of SOOT <ref type="bibr" target="#b34">[34]</ref>. DI-ALDroid has the fastest execution among the four SOOT-based tools.  </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>10 https://github.com/secure-software-engineering/DroidBench/ tree/develop DroidBench (IccTA): IccTA introduced 23 test cases for intra-app leaks and 6 test-cases for inter-app leaks and are available in the IccTA branch 11 of the DroidBench.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>11https://github.com/secure-software-engineering/DroidBench/ tree/iccta 12 https://github.com/fgwei/ICC-Bench 13 Precision is the percentage of identified cases that are true leaks.<ref type="bibr" target="#b14">14</ref> Recall is the percentage of present leaks that are detected.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: The distribution of DIALDroid's execution time for apps in Dataset III.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Comparisons of the averaged intra-app execution time on single-app benchmarks with four other state-of-the-art solutions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>, April 02-06, 2017, Abu Dhabi, United Arab Emirates © 2017 ACM. ISBN 978-1-4503-4944-4/17/04. . . $15.00 DOI: http://dx.doi.org/10.1145/3052973.3053004</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>3 and have made our database available4 for other researchers. Our database contains extremely rich data-flow attributes of 100,206 apps from the Google Play and 9,944 apps from the Virus Share. These attributes are extracted by Flow-</figDesc><table><row><cell>Droid static program analysis, organized into multiple rela-</cell></row><row><cell>tional tables. We envision the database being useful to both the</cell></row><row><cell>security and data mining communities to tackle open research</cell></row><row><cell>questions. In addition, we have released a benchmark suite for</cell></row></table><note><p>1 http://virusshare.com 2</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 1 :</head><label>1</label><figDesc>Comparisons of our ICC extractor tool IC3-DIALDroid with the state-of-the-art IC3, in terms of robustness, accuracy, and runtime on benchmark apps and 1,000 real-world apps. Our tool identifies 28% more intents and has 33% fewer failed cases for real-world apps.</figDesc><table><row><cell></cell><cell cols="2">DroidBench 3.0</cell><cell></cell><cell cols="3">1,000 Real-World Apps</cell></row><row><cell></cell><cell>Failed</cell><cell>Intents found</cell><cell cols="2">Time Failed</cell><cell>Intents found</cell><cell>Time</cell></row><row><cell>IC3</cell><cell>0</cell><cell>27</cell><cell>151s</cell><cell>123</cell><cell>30,640</cell><cell>43hrs</cell></row><row><cell>Ours</cell><cell>0</cell><cell>27</cell><cell>138s</cell><cell>83</cell><cell>39,080</cell><cell>48hrs</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 2 :</head><label>2</label><figDesc>Comparisons on inter-app ICC analysis with DroidBench 3.0, DroidBench (IccTA branch), and ICC-Bench. Multiple circles in one row means multiple inter-app collusions expected. An all-empty row: no inter-app collusions expected and none reported. †indicates the tool crashed on that test case. = a correct warning, *= a false warning, = a missed leak, P = a privilege escalation reported, ‡= did not test or N/A. Since we were unable to execute IccTA+ApkCombiner on most of the pairs, it's precision value is misleading and does not reflect it's actual performance.</figDesc><table><row><cell>Source App</cell><cell>Destination App</cell><cell># ICC Exit Leaks (Dest.)</cell><cell># ICC Entry Leaks (Sink)</cell><cell>Privilege Escalation</cell><cell>COVERT</cell><cell>IccTA + ApkCombiner</cell><cell>DIALDroid (Ours)</cell></row><row><cell></cell><cell></cell><cell>DroidBench 3.0</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>SendSMS</cell><cell>Echoer</cell><cell>1</cell><cell>3</cell><cell></cell><cell></cell><cell></cell><cell>P</cell></row><row><cell>StartActivityForResult1</cell><cell>Echoer</cell><cell>2</cell><cell>3</cell><cell></cell><cell></cell><cell></cell><cell>P</cell></row><row><cell>DeviceId_Broadcast1</cell><cell>Collector</cell><cell>2</cell><cell>1</cell><cell></cell><cell></cell><cell>†</cell><cell>P</cell></row><row><cell cols="2">DeviceId_ContentProvider1 Collector</cell><cell>2</cell><cell>1</cell><cell></cell><cell></cell><cell>†</cell><cell></cell></row><row><cell>DeviceId_OrderedIntent1</cell><cell>Collector</cell><cell>3</cell><cell>1</cell><cell></cell><cell></cell><cell>†</cell><cell></cell></row><row><cell>DeviceId_Service1</cell><cell>Collector</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell>†</cell><cell></cell></row><row><cell>Location1</cell><cell>Collector</cell><cell>2</cell><cell>1</cell><cell></cell><cell></cell><cell>†</cell><cell>P</cell></row><row><cell>Location_Broadcast1</cell><cell>Collector</cell><cell>3</cell><cell>1</cell><cell></cell><cell></cell><cell>†</cell><cell>P</cell></row><row><cell>Location_Service1</cell><cell>Collector</cell><cell>2</cell><cell>1</cell><cell></cell><cell></cell><cell>†</cell><cell></cell></row><row><cell cols="2">Incorrect app pairings</cell><cell></cell><cell></cell><cell></cell><cell>(172 *)</cell><cell>‡</cell><cell></cell></row><row><cell></cell><cell cols="3">DroidBench (IccTA branch)</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>startActivity1_source</cell><cell>startActivity1_sink</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>startSevice1_source</cell><cell>startService1_sink</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>sendbroadcast1_source</cell><cell>sendbroadcast1_sink</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="2">Incorrect app pairings</cell><cell></cell><cell></cell><cell></cell><cell>(104 *)</cell><cell>‡</cell><cell></cell></row><row><cell></cell><cell></cell><cell>ICC-Bench</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>implicit_action</cell><cell>implicit_src_sink</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell>†</cell><cell></cell></row><row><cell>implicit_action</cell><cell>implict_nosrc_sink</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>implicit_mix1</cell><cell>implicit_mix2</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell>†</cell><cell></cell></row><row><cell>implicit_mix2</cell><cell>implicit_mix1</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell>†</cell><cell></cell></row><row><cell>implicit_src_nosink</cell><cell>implicit_src_sink</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>implicit_src_nosink</cell><cell>impliict_nosrc_sink</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>implicit_src_nosink</cell><cell>implicit_action</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>impilicit_src_sink</cell><cell>implicit_action</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell>†</cell><cell></cell></row><row><cell>impilicit_src_sink</cell><cell>implicit_nosrc_sink</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="2">Incorrect app pairings</cell><cell></cell><cell></cell><cell></cell><cell>(47 *)</cell><cell>‡</cell><cell></cell></row><row><cell></cell><cell cols="3">Sum, Precision, Recall, and F measure</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="2">True positive ( ), higher is better</cell><cell></cell><cell></cell><cell></cell><cell>11</cell><cell>3</cell><cell>22</cell></row><row><cell cols="2">False positive (*), lower is better</cell><cell></cell><cell></cell><cell></cell><cell>323</cell><cell>0 ‡</cell><cell>0</cell></row><row><cell cols="2">False negative ( ), lower is better</cell><cell></cell><cell></cell><cell></cell><cell>12</cell><cell>20</cell><cell>2</cell></row><row><cell>Precision, p = /( +*)</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>3.3%</cell><cell>100% ‡</cell><cell>100%</cell></row><row><cell>Recall, r = /( + )</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>45.8%</cell><cell>12.5%</cell><cell>91.2%</cell></row><row><cell>F-measure = 2pr/(p+r)</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>0.06</cell><cell>0.22</cell><cell>0.95</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>Table 3 :</head><label>3</label><figDesc>Summary of problematic inter-app ICC channels in each threat category. Sender apps and receiver apps are from Google Play Market. All the ICC channels shown are sensitive with ICC exit leaks in the sender apps (as defined in Section 2). Privilege escalation and collusive data leak are defined in Section 2. The receiver app, which provides shopping advice to users, defines an intent-filter to accept the above intent. However, com.thingbuzz does not have the permission to access user's location, this ICC communication leads to escalated privileges.2) Different developers: com.biganiseed.ladder.trial → ee.showm. The sender app provides a VPN connection. com.biganiseed.ladder.trial retrieves network information (i.e., getActiveNetworkInfo, permission =android.permission.ACCESS_NETWORK_STATE) and sends that via an implicit intent (action = android.intent.action.SENDTO). The receiver app, which controls EE TV, defines an intent-filter to accept the above intent. However, ee.showm does not have the permission to access network information, this ICC communication leads to escalated privileges.</figDesc><table><row><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">Categorization</cell><cell></cell><cell>Results</cell></row><row><cell></cell><cell></cell><cell>Threat</cell><cell cols="2">Collusive</cell><cell cols="2">Privilege</cell><cell>Intent</cell><cell># of Distinct</cell><cell># of Distinct</cell><cell>Total ICC</cell><cell>Total</cell></row><row><cell></cell><cell></cell><cell>Type</cell><cell cols="2">Data Leak</cell><cell cols="2">Escalation</cell><cell>Type</cell><cell>Source App</cell><cell>Receiver App</cell><cell>Channels</cell><cell>App Pairs</cell></row><row><cell></cell><cell></cell><cell>I</cell><cell></cell><cell>Yes</cell><cell></cell><cell>Yes</cell><cell>Explicit</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell></row><row><cell></cell><cell></cell><cell>II</cell><cell></cell><cell>No</cell><cell></cell><cell>Yes</cell><cell>Explicit</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell></row><row><cell></cell><cell></cell><cell>III</cell><cell></cell><cell>Yes</cell><cell></cell><cell>No</cell><cell>Explicit</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell></row><row><cell></cell><cell></cell><cell>IV</cell><cell></cell><cell>Yes</cell><cell></cell><cell>Yes</cell><cell>Implicit</cell><cell>33</cell><cell>1,792</cell><cell>77,104</cell><cell>16,712</cell></row><row><cell></cell><cell></cell><cell>V</cell><cell></cell><cell>No</cell><cell></cell><cell>Yes</cell><cell>Implicit</cell><cell>62</cell><cell>44,514</cell><cell>1,785,102</cell><cell>1,032,321</cell></row><row><cell></cell><cell></cell><cell>VI</cell><cell></cell><cell>Yes</cell><cell></cell><cell></cell><cell></cell><cell>34,745</cell><cell>6,783</cell></row><row><cell cols="9">12 senders and 3 receivers, and a total of 63 problematic ICCs. Our</cell><cell>sites.</cell><cell>com.nextag.android retrieves the user's</cell></row><row><cell cols="9">case study in Section 4.3 gives an example SMS-based collusive</cell><cell>location(i.e.,</cell><cell>getLastKnownLocation,</cell><cell>permission</cell></row><row><cell cols="2">data leak.</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>=android.permission.ACCESS_FINE_LOCATION)</cell></row><row><cell cols="9">Same-developer Privilege Escalations: We found 200 inter-app</cell><cell>and sends that via an implicit intent (action =</cell></row><row><cell cols="9">ICCs with same-developer privilege escalation. Same developer</cell><cell>android.intent.action.MAIN, category =android.-</cell></row><row><cell cols="9">refers to that the sender and receiver apps have the same developer</cell><cell>intent.category.INFO/ android.intent.-</cell></row><row><cell cols="9">name. All such cases belong to Threat Type V and are related to location permissions (both fine and coarse). 194 ICCs appear somewhat benign, as only the country name (getCountry()) is involved. However, the other 6 privilege escalation ICCs ap-pear more serious. They involve 3 pairs of apps (1 pair from Alamex Ltd and 2 pairs from NexTag Mobile) and specific locations (getLastKnowLocation()). Our case study in Section 4.3 gives an example of the same-developer privilege escalation cases. 4.3 Case Studies</cell><cell>category.LAUNCHER). Threat TYPE VI [collusive data leak w/o escalation]</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>com.ccmass.fotoalbumgpslite→com.ventri.cake-</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>.retrica.</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">both privilege</cell></row><row><cell cols="5">escalation and collusive data leak.</cell><cell></cell><cell></cell><cell></cell></row><row><cell>2)</cell><cell cols="8">com.codalata.craigslistchecker→qubecad.-</cell></row><row><cell cols="9">droidtocad. The source app helps users search craiglist</cell></row><row><cell cols="9">worldwide. com.codalata.craigslistchecker retrieves</cell></row><row><cell cols="9">SIM serial number (i.e., getSimSerialNumber, permis-</cell></row><row><cell>sion</cell><cell></cell><cell cols="7">=android.permission.READ_PHONE_STATE)</cell></row><row><cell>and</cell><cell></cell><cell>sends</cell><cell>via</cell><cell cols="2">implicit</cell><cell>intent</cell><cell cols="2">(action=</cell></row><row><cell cols="6">android.intent.action.SEND,</cell><cell cols="3">Mime-Type=plain-</cell></row><row><cell cols="2">/text).</cell><cell cols="7">The sink app is a location recording app.</cell></row><row><cell cols="9">qubecad.droidtocad.activities.AddDocument-</cell></row><row><cell cols="9">Activity defines an intent-filter to accept the above intent. Upon</cell></row><row><cell cols="9">receiving the intent, the AddDocumentActivity activity retrieves and</cell></row><row><cell cols="9">parses the data sent via android.intent.extra.TEXT field</cell></row><row><cell cols="9">and leaks it to a log. Since the sink app does not have permission</cell></row><row><cell cols="9">to access phone state, it leads to both a privilege escalation and a</cell></row><row><cell cols="2">collusion.</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="8">Threat TYPE V [escalation w/o collusive data leak]</cell></row><row><cell cols="9">1) Same developer: com.nextag.android→com.thingbuzz.</cell></row><row><cell cols="8">Both apps are developed by the Nextag Mobile.</cell><cell>The</cell></row><row><cell cols="9">sender app compares price across different e-commerce</cell></row></table><note><p>Threat TYPE IV [escalation w/ collusive data leak] 1) com.ppgps.lite→de.ub0r.android.websms. The source app provides the real-time flight information to the pilots of paramotor, paraglider, glider or ultra light planes. com.ppgps.PPGpSActivity retrieves a user's location (i.e., getLastKnownLocation) and sends it via an implicit intent (action = android.intent.action.VIEW, Mime-Type= vnd.android-dir/mms-sms). The sink app lets a user send free or low-cost SMS messages via various web services. de.ub0r.android.websms.WebSMS defines an intent-filter to accept the above intent. Upon receiving the intent, the WebSMS activity retrieves and parses the data sent via sms_body field and leaks it via SMS to a phone number. Since the sink app does not have the permission to access location, it leads to</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head></head><label></label><figDesc>Threat TYPE IV, V, VI [vulnerable sender app] App com.koranto.mkmn provides prayer times for Muslims around the world.</figDesc><table><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="4">The MainActivity of</cell></row><row><cell cols="9">com.koranto.mkmn.activities retrieves the user's</cell></row><row><cell cols="2">location (i.e.,</cell><cell></cell><cell cols="4">getLastKnownLocation,</cell><cell cols="2">permission</cell></row><row><cell cols="8">=android.permission.ACCESS_FINE_LOCATION)</cell></row><row><cell>and</cell><cell>sends</cell><cell>it</cell><cell>via</cell><cell>an</cell><cell>implicit</cell><cell></cell><cell>intent</cell><cell>(ac-</cell></row><row><cell cols="6">tion=android.intent.action.SEND,</cell><cell cols="2">MimeType</cell><cell>=</cell></row><row><cell cols="2">text/plain).</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8"><head>Table 4 :</head><label>4</label><figDesc>The distribution of sensitive ICC channels and collusive data leaks among app categories for Dataset III. An app may have multiple sensitive ICC channels.</figDesc><table><row><cell>Category</cell><cell>% of total Apps</cell><cell>% sensitive ICC channels (origin)</cell><cell>% collusive data leaks (origin)</cell></row><row><cell>Books &amp; Reference</cell><cell>7.40%</cell><cell>0.01%</cell><cell>0.00%</cell></row><row><cell>Business</cell><cell>5.40%</cell><cell>0.00%</cell><cell>0.00%</cell></row><row><cell>Comics</cell><cell>1.87%</cell><cell>0.00%</cell><cell>0.00%</cell></row><row><cell>Communication</cell><cell>0.05%</cell><cell>0.05%</cell><cell>0.04%</cell></row><row><cell>Entertainment</cell><cell>7.43%</cell><cell>4.49%</cell><cell>8.97%</cell></row><row><cell>Lifestyle</cell><cell>6.69%</cell><cell>0.03%</cell><cell>0.11%</cell></row><row><cell>Medical</cell><cell>1.64%</cell><cell>0.00%</cell><cell>0.00%</cell></row><row><cell>Personalization</cell><cell>6.75%</cell><cell>17.09%</cell><cell>13.31%</cell></row><row><cell>Photography</cell><cell>7.30%</cell><cell>4.33%</cell><cell>6.35%</cell></row><row><cell>Productivity</cell><cell>6.88%</cell><cell>0.01%</cell><cell>0.59%</cell></row><row><cell>Shopping</cell><cell>5.75%</cell><cell>2.16%</cell><cell>1.57%</cell></row><row><cell>Social</cell><cell>6.24%</cell><cell>3.23%</cell><cell>1.84%</cell></row><row><cell>Sports</cell><cell>6.40%</cell><cell>2.14%</cell><cell>4.41%</cell></row><row><cell>Tools</cell><cell>7.36%</cell><cell>2.66%</cell><cell>7.16%</cell></row><row><cell>Transportation</cell><cell>5.74%</cell><cell>11.18%</cell><cell>3.29%</cell></row><row><cell>Travel &amp; Local</cell><cell>3.04%</cell><cell>9.05%</cell><cell>0.02%</cell></row><row><cell>Virus Share</cell><cell>9.03%</cell><cell>43.18 %</cell><cell>52.33%</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9"><head>Table 5 :</head><label>5</label><figDesc>Top permissions leaked via privilege escalation in Dataset III.</figDesc><table><row><cell>Permission</cell><cell># Cases</cell></row><row><cell>android.permission.ACCESS_FINE_LOCATION</cell><cell>1,155,301</cell></row><row><cell cols="2">android.permission.ACCESS_COARSE_LOCATION 1,163,769</cell></row><row><cell>android.permission.READ_PHONE_STATE</cell><cell>880,645</cell></row><row><cell>android.permission.ACCESS_WIFI_STATE</cell><cell>433,887</cell></row><row><cell>android.permission.ACCESS_NETWORK_STATE</cell><cell>486</cell></row><row><cell>android.permission.BLUETOOTH</cell><cell>153</cell></row><row><cell>Total:</cell><cell>3,634,241</cell></row><row><cell cols="2">and collusive data leaks, which is expected. Although they account</cell></row><row><cell cols="2">for 9.03% of the apps in Dataset III, 43.18% of the sensitive ICC</cell></row><row><cell cols="2">channels and 52.33% of the collusive data leaks are originated from</cell></row><row><cell cols="2">apps in Virus Share. The high percentage (52.33%) of collusive data</cell></row><row><cell cols="2">leaks originating from malware apps indicates that malware apps</cell></row><row><cell>actively seek and transfer sensitive information.</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_10"><head>Table 6 :</head><label>6</label><figDesc>Top sensitive source and sink methods involved in collusive data leaks in Dataset III.</figDesc><table><row><cell>Sensitive Source</cell><cell>% Sensitive Sink</cell><cell>%</cell></row><row><cell>getDeviceId</cell><cell>36.69% android.content.SharedPrefs</cell><cell>49.0%</cell></row><row><cell>getConnectionInfo</cell><cell>33.44% android.util.Log</cell><cell>48.3%</cell></row><row><cell>getSubscriberId</cell><cell>4.36% java.io.OutputStream</cell><cell>1.1%</cell></row><row><cell>getLastKnownLocation</cell><cell>4.32% java.net.URL</cell><cell>0.9%</cell></row><row><cell>getLongitude</cell><cell>4.18% java.io.FileOutputStream</cell><cell>0.7%</cell></row><row><cell>getLatitude</cell><cell>4.03% org.apache.http.HttpResponse</cell><cell>0.1%</cell></row><row><cell>getSimSerialNumber</cell><cell cols="2">3.09% android.telephony.SmsManager 0.03%</cell></row><row><cell>getLine1Number</cell><cell>2.78%</cell><cell></cell></row><row><cell>getActiveNetworkInfo</cell><cell>2.10%</cell><cell></cell></row><row><cell>getCountry</cell><cell>1.35%</cell><cell></cell></row><row><cell>others</cell><cell>3.65%</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_12"><head>Table 7 :</head><label>7</label><figDesc>Statistics of our program analysis during the scalability evaluation of DIALDroid with 110,150 real-world apps.</figDesc><table><row><cell>Category</cell><cell># Ana-lyzed</cell><cell>High-precise config.</cell><cell>Less-precise config.</cell><cell>Time-out</cell></row><row><cell>Books &amp; Reference</cell><cell>8,146</cell><cell>83.7%</cell><cell>13.8%</cell><cell>2.5%</cell></row><row><cell>Business</cell><cell>5,949</cell><cell>72.7%</cell><cell>18.0%</cell><cell>9.3%</cell></row><row><cell>Comics</cell><cell>2,057</cell><cell>80.5%</cell><cell>16.7%</cell><cell>2.8%</cell></row><row><cell>Communication</cell><cell>5,632</cell><cell>77.5%</cell><cell>13.1%</cell><cell>9.4%</cell></row><row><cell>Entertainment</cell><cell>8,189</cell><cell>77.4%</cell><cell>16.7%</cell><cell>5.9%</cell></row><row><cell>Lifestyle</cell><cell>7,368</cell><cell>76.6%</cell><cell>17.5%</cell><cell>5.9%</cell></row><row><cell>Medical</cell><cell>1,801</cell><cell>81.5%</cell><cell>13.6%</cell><cell>4.9%</cell></row><row><cell>Personalization</cell><cell>7,435</cell><cell>84.7%</cell><cell>14.1%</cell><cell>1.2%</cell></row><row><cell>Photography</cell><cell>8,041</cell><cell>79.5%</cell><cell>16.6%</cell><cell>3.9%</cell></row><row><cell>Productivity</cell><cell>7,582</cell><cell>82.6%</cell><cell>12.8%</cell><cell>4.6%</cell></row><row><cell>Shopping</cell><cell>6,336</cell><cell>77.1%</cell><cell>15.3%</cell><cell>7.6%</cell></row><row><cell>Social</cell><cell>6,870</cell><cell>71.4%</cell><cell>20.8%</cell><cell>7.8%</cell></row><row><cell>Sports</cell><cell>7,047</cell><cell>78.1%</cell><cell>16.2%</cell><cell>5.7%</cell></row><row><cell>Tools</cell><cell>8,105</cell><cell>85.0%</cell><cell>12.1%</cell><cell>2.9%</cell></row><row><cell>Transportation</cell><cell>6,323</cell><cell>81.9%</cell><cell>12.7%</cell><cell>5.4%</cell></row><row><cell>Travel &amp; Local</cell><cell>3,344</cell><cell>73.8%</cell><cell>18.5%</cell><cell>7.5%</cell></row><row><cell>Virus Share</cell><cell>9,944</cell><cell>63.7%</cell><cell>26.5%</cell><cell>9.8%</cell></row><row><cell>Total*:</cell><cell>110,150</cell><cell>83.6%</cell><cell>10.7%</cell><cell>5.7%</cell></row><row><cell cols="3">*A few apps belong to multiple categories.</cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_13"><head>Table 8 :</head><label>8</label><figDesc>Intra-application ICC test results on DroidBench (develop branch), DroidBench (IccTA branch), and ICC-Bench. Multiple circles in one row means multiple intra-app leaks expected. An all-empty row: no leaks expected and none reported. †indicates the tool crashed on that test case. = a correct warning, *= a false warning, = a missed leak</figDesc><table><row><cell>Test Case</cell><cell># ICC Exit Leaks</cell><cell># ICC Entry Leaks</cell><cell>Explicit ICC</cell><cell>COVERT</cell><cell>Amandroid</cell><cell>IccTA</cell><cell>DroidSafe</cell><cell>DIAL-Droid (Ours)</cell></row><row><cell></cell><cell></cell><cell></cell><cell cols="2">DroidBench 3.0</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>ActivityCommunication1</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>ActivityCommunication2</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell>*</cell><cell>*</cell><cell>*</cell><cell></cell></row><row><cell>ActivityCommunication3</cell><cell>1</cell><cell>5</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>*</cell><cell></cell></row><row><cell>ActivityCommunication4</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell>*</cell><cell>*</cell><cell></cell></row><row><cell>ActivityCommunication5</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>*</cell><cell></cell></row><row><cell>ActivityCommunication6</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>*</cell><cell></cell></row><row><cell>ActivityCommunication7</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>*</cell><cell></cell></row><row><cell>ActivityCommunication8</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell>*</cell><cell>*</cell><cell>*</cell><cell></cell></row><row><cell>BroadcastTaintAndLeak1</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>UnresolvableIntent1</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell cols="3">DroidBench (IccTA branch)</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>startActivity1</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>*</cell><cell></cell></row><row><cell>startActivity2</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>*</cell><cell></cell></row><row><cell>startActivity3</cell><cell>1</cell><cell>5</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>*</cell><cell></cell></row><row><cell>startActivity4</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell>*</cell><cell>**</cell><cell></cell><cell></cell></row><row><cell>startActivity5</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell>**</cell><cell></cell><cell></cell><cell></cell></row><row><cell>startActivity6</cell><cell>1</cell><cell>2</cell><cell></cell><cell>*</cell><cell>*</cell><cell>*</cell><cell>**</cell><cell>*</cell></row><row><cell>startActivity7</cell><cell>1</cell><cell>2</cell><cell></cell><cell>*</cell><cell>*</cell><cell>*</cell><cell>**</cell><cell>*</cell></row><row><cell>startActivityForResult1</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>*</cell><cell></cell></row><row><cell>startActivityForResult2</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>startActivityForResult3</cell><cell>1</cell><cell>3</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>*</cell><cell></cell></row><row><cell>startActivityForResult4</cell><cell>1</cell><cell>4</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>**</cell><cell></cell></row><row><cell>startService1</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>*</cell><cell></cell></row><row><cell>startService2</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>*</cell><cell></cell></row><row><cell>bindService1</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>*</cell><cell></cell></row><row><cell>bindService2</cell><cell>1</cell><cell>0</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>bindService3</cell><cell>0</cell><cell>0</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>bindService4</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>*</cell><cell></cell></row><row><cell>sendBroadcast1</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>***</cell><cell></cell></row><row><cell>sendStickyBroadcast1</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>*</cell><cell></cell></row><row><cell>insert1</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell>†</cell><cell>***</cell><cell></cell></row><row><cell>update1</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell>†</cell><cell>***</cell><cell></cell></row><row><cell>delete1</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell>†</cell><cell>***</cell><cell></cell></row><row><cell>query1</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell>†</cell><cell>**</cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell cols="2">ICC-Bench</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>implicit_action</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>implicit_category</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>implicit_data1</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>implicit_data2</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>implicit_mix1</cell><cell>1</cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>implicit_mix2</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>implicit_Src_Sink</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>explicit1</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>explicit_Src_Sink</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>dynamicregister1</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>dynamicregister2</cell><cell>1</cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell cols="4">Sum, Precision, Recall, and F measure</cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="2">True positive ( ), higher is better</cell><cell></cell><cell></cell><cell>11</cell><cell>24</cell><cell>35</cell><cell>43</cell><cell>32</cell></row><row><cell cols="2">False positive (*), lower is better</cell><cell></cell><cell></cell><cell>2</cell><cell>7</cell><cell>7</cell><cell>37</cell><cell>2</cell></row><row><cell cols="2">False negative ( ), lower is better</cell><cell></cell><cell></cell><cell>32</cell><cell>19</cell><cell>8</cell><cell>0</cell><cell>11</cell></row><row><cell>Precision, p = /( +*)</cell><cell></cell><cell></cell><cell></cell><cell>83.3%</cell><cell>77.4%</cell><cell>83.7%</cell><cell>53.7%</cell><cell>94.1%</cell></row><row><cell>Recall, r = /( + )</cell><cell></cell><cell></cell><cell></cell><cell>25.6%</cell><cell>55.8%</cell><cell>81.4%</cell><cell>100%</cell><cell>74.4%</cell></row><row><cell>F-measure = 2pr/(p+r)</cell><cell></cell><cell></cell><cell></cell><cell>0.39</cell><cell>0.65</cell><cell>0.82</cell><cell>0.70</cell><cell>0.83</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_0"><p>https://github.com/dialdroid-android/.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_1"><p>http://amiangshu.com/dialdroid/ inter-app collusion analysis, DIALDroid-Bench</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_2"><p>, which contains 30 real-world apps from Google Play. To our knowledge, this is the first inter-app collusion benchmark using real-world apps, as opposed to proof-of-concept apps.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_3"><p>https://github.com/dialdroid-android/dialdroid-bench/</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_4"><p>http://developer.android.com/guide/components/fundamentals.html</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="7" xml:id="foot_5"><p>http://developer.android.com/guide/components/intentsfilters.html#Resolution</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="8" xml:id="foot_6"><p>Availableat: https://github.com/dialdroid-android/ ic3-dialdroid.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="9" xml:id="foot_7"><p>https://github.com/dialdroid-android/dialdroid-db</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="16" xml:id="foot_8"><p>https://github.com/pxb1988/dex2jar</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="17" xml:id="foot_9"><p>http://jd.benow.ca/</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="18" xml:id="foot_10"><p>https://github.com/dialdroid-android/dialdroid-bench/</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="19" xml:id="foot_11"><p>https://github.com/dialdroid-android/</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="20" xml:id="foot_12"><p>http://amiangshu.com/dialdroid/</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>This research is supported by the DARPA APAC award FA8750-15-2-0076. The authors would like to thank Barbara Ryder, Xinming (Simon) Ou, Timothy Fraser, Michael Gordon, Matthew Might, and Michael Ernst for their helpful suggestions and feedback.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4:</head><p>entryP oints ← extractIntentF ilters(apkF ile)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5:</head><p>exitP oints ← identif yExitP oints(apkF ile) static analysis to determine the attributes of intents passing through the ICC exit points</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6:</head><p>Subsystem: Dataflow Analyzer</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>7:</head><p>timeout ← 300s </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. ADDITIONAL RESULTS</head><p>On average, an app in Dataset III accesses ≈ 7 sensitive APIs and invokes ≈ 13 ICC calls. Results of Kruskal-Wallis tests suggest that some categories of apps access a higher number of sensitive APIs (χ 2 = 5907.9, df = 16, p &lt; 0.001) or make a higher number of ICC calls (χ 2 = 3841.5, df = 16, p &lt; 0.001). Malware apps (in Virus Share) access a higher number of sensitive APIs or to invoke more ICC methods, as expected.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B.1 Intra-app ICC Comparisons</head><p>We compare DIALDroid with four leading single-app ICC tools (Amandroid, IccTA, DroidSafe, and COVERT). The comparison is conducted on 44 intra-app ICC test cases from the three benchmarks. Table <ref type="table">8</ref> shows the accuracy results of the five tools against the 44 intra-app test cases in three benchmarks. DIALDroid has the highest precision (94.1%), the third highest recall (74.4%), and the highest Fmeasure (0.83) among the five tools in our experiment. IccTA's intraapp detection accuracy is comparable to DIALDroid. DroidSafe achieves the highest recall (100%) supporting its claim regarding the most precise Android life cycle modeling. However, DroidSafe appeared weak on intent resolution. It reports the highest number of false positives <ref type="bibr" target="#b36">(36)</ref>. Amandroid missed the most on the leaks against the Service and Provider related test cases, suggesting likely insufficient lifecycle modeling for those two types of components.   COVERT had the poorest accuracy among the five tools, indicating inaccurate implicit intent matching as well as inadequate Android life cycle modeling. We manually inspected the cases where DIALDroid failed. DI-ALDroid primarily failed to recognize two types of data leaks. One is via fake service calls, e.g., bindService2, bindService3, and bindService4 that leak data within the same component using the onServiceConnected callback method.</p><p>The other is via static fields, e.g., ActivityCommunication1. DIALDroid failed to recognize those leaks, due to the lack of intents carrying sensitive information.</p><p>The two false positives (startActivity6, startActivity7) were due to the loss of field sensitivity. E.g., the sender stores sensitive information in a field with a key = DroidBench (e.g., intent.putExtra("DroidBench",IMEI)) but the receiver leaks DroidBench2 (e.g., Log.i(intent.getStringExtra("DroidBench2")). Due to the loss of field sensitivity, we performed a simple regular expression string search for the key (i.e., in this case DroidBench) in the ICC entry leak path. Since a search for 'DroidBench' will</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName><surname>References</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Droidapiminer: Mining API-level features for robust malware detection in Android</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Aafer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Yin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Security and Privacy in Communication Networks</title>
		<meeting>of the Security and Privacy in Communication Networks</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="86" to="103" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">DREBIN: Effective and explainable detection of Android malware in your pocket</title>
		<author>
			<persName><forename type="first">D</forename><surname>Arp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Spreitzenbarth</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hubner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Gascon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Rieck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Network and Distributed System Security Symposium (NDSS)</title>
		<meeting>of the Network and Distributed System Security Symposium (NDSS)</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for android apps</title>
		<author>
			<persName><forename type="first">S</forename><surname>Arzt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Rasthofer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Fritz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Bodden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bartel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Le Traon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Octeau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Mcdaniel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI &apos;14</title>
		<meeting>of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI &apos;14</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="259" to="269" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">COVERT: Compositional analysis of Android inter-app permission leakage</title>
		<author>
			<persName><forename type="first">H</forename><surname>Bagheri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Sadeghi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Garcia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Malek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions in Software Engineering</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="866" to="886" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">XManDroid: A new Android evolution to mitigate privilege escalation attacks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Bugiel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Davi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Dmitrienko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Fischer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A.-R</forename><surname>Sadeghi</surname></persName>
		</author>
		<idno>TR-2011-04</idno>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
		<respStmt>
			<orgName>Technische Universität Darmstadt</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Towards taming privilege-escalation attacks on Android</title>
		<author>
			<persName><forename type="first">S</forename><surname>Bugiel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Davi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Dmitrienko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Fischer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A.-R</forename><surname>Sadeghi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Shastry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Network and Distributed System Security Symposium (NDSS)</title>
		<meeting>of the Network and Distributed System Security Symposium (NDSS)</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Flexible and fine-grained mandatory access control on Android for diverse security and privacy policies</title>
		<author>
			<persName><forename type="first">S</forename><surname>Bugiel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Heuser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A.-R</forename><surname>Sadeghi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 22nd USENIX Security Symposium</title>
		<meeting>of the 22nd USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="131" to="146" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Toward Detecting Collusive Ranking Manipulation Attackers in Mobile App Markets</title>
		<author>
			<persName><forename type="first">H</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM Asia Conference on Computer and Communications Security (ASIACCS&apos; 17)</title>
		<meeting>of the ACM Asia Conference on Computer and Communications Security (ASIACCS&apos; 17)</meeting>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Analyzing inter-application communication in android</title>
		<author>
			<persName><forename type="first">E</forename><surname>Chin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">P</forename><surname>Felt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Greenwood</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 9th International Conference on Mobile systems, Applications, and Services</title>
		<meeting>of the 9th International Conference on Mobile systems, Applications, and Services</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="239" to="252" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Privilege escalation attacks on Android</title>
		<author>
			<persName><forename type="first">L</forename><surname>Davi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Dmitrienko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A.-R</forename><surname>Sadeghi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Winandy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the International Conference on Information Security</title>
		<meeting>of the International Conference on Information Security</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="346" to="360" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<author>
			<persName><forename type="first">E</forename><surname>Duan</surname></persName>
		</author>
		<ptr target="http://blog.trendmicro.com/trendlabs-security-intelligence/dresscode-potential-impact-enterprises/" />
		<title level="m">DressCode and its potential impact for enterprise</title>
		<imprint>
			<date type="published" when="2016-09">September 2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Profiling user-trigger dependence for Android malware detection</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">O</forename><surname>Elish</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Shu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">D</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">G</forename><surname>Ryder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Jiang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computers &amp; Security</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="page" from="255" to="273" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">On the need of precise inter-app ICC classification for detecting Android malware collusions</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">O</forename><surname>Elish</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">G</forename><surname>Ryder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the IEEE Mobile Security Technologies (MoST)</title>
		<meeting>of the IEEE Mobile Security Technologies (MoST)</meeting>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Taintdroid: an information-flow tracking system for realtime privacy monitoring on smartphones</title>
		<author>
			<persName><forename type="first">W</forename><surname>Enck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Gilbert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Tendulkar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B.-G</forename><surname>Chun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">P</forename><surname>Cox</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Jung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Mcdaniel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">N</forename><surname>Sheth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems (TOCS)</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page">5</biblScope>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Information flow analysis of Android applications in DroidSafe</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">I</forename><surname>Gordon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">H</forename><surname>Perkins</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Gilham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">C</forename><surname>Rinard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Network and Distributed System Security Symposium</title>
		<meeting>of the Network and Distributed System Security Symposium</meeting>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Dynamic detection of inter-application communication vulnerabilities in Android</title>
		<author>
			<persName><forename type="first">R</forename><surname>Hay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Tripp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Pistoia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM International Symposium on Software Testing and Analysis</title>
		<meeting>of the ACM International Symposium on Software Testing and Analysis</meeting>
		<imprint>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="118" to="128" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Checking intent-based communication in Android with intent space analysis</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Jing</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G.-J</forename><surname>Ahn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Doupé</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">H</forename><surname>Yi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM Asia Conference on Computer and Communications Security</title>
		<meeting>of the ACM Asia Conference on Computer and Communications Security</meeting>
		<imprint>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="735" to="746" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Reducing attack surfaces for intra-application communication in android</title>
		<author>
			<persName><forename type="first">D</forename><surname>Kantola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Chin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the second ACM workshop on Security and privacy in smartphones and mobile devices</title>
		<meeting>of the second ACM workshop on Security and privacy in smartphones and mobile devices</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="69" to="80" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Android taint flow analysis for app sets</title>
		<author>
			<persName><forename type="first">W</forename><surname>Klieber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Flynn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bhosale</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Jia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Bauer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 3rd ACM SIGPLAN International Workshop on the State of the Art in Java Program Analysis</title>
		<meeting>of the 3rd ACM SIGPLAN International Workshop on the State of the Art in Java Program Analysis</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Apkcombiner: combining multiple android apps to support inter-app analysis</title>
		<author>
			<persName><forename type="first">L</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bartel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">F</forename><surname>Bissyandé</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Le Traon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IFIP International Information Security Conference</title>
		<imprint>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="513" to="527" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">IccTA: detecting inter-component privacy leaks in Android apps</title>
		<author>
			<persName><forename type="first">L</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bartel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">F D A</forename><surname>Bissyande</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Le Traon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Arzt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Rasthofer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Bodden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Octeau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Mcdaniel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the IEEE/ACM 37th IEEE International Conference on Software Engineering</title>
		<meeting>of the IEEE/ACM 37th IEEE International Conference on Software Engineering</meeting>
		<imprint>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="280" to="291" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Checking more and alerting less: Detecting privacy leakages via enhanced data-flow analysis and peer voting</title>
		<author>
			<persName><forename type="first">K</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">P</forename><surname>Kemerlis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Qian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Jiang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Network and Distributed System Security Symposium (NDSS)</title>
		<meeting>of the Network and Distributed System Security Symposium (NDSS)</meeting>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">CHEX: Statically vetting Android apps for component hijacking vulnerabilities</title>
		<author>
			<persName><forename type="first">L</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Jiang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 2012 ACM conference on Computer and communications security</title>
		<meeting>of the 2012 ACM conference on Computer and communications security</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="229" to="240" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Analysis of the communication between colluding applications on modern smartphones</title>
		<author>
			<persName><forename type="first">C</forename><surname>Marforio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Ritzdorf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Francillon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Capkun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Annual Computer Security Applications Conference</title>
		<meeting>of the Annual Computer Security Applications Conference</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="51" to="60" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">PatchDroid: Scalable third-party security patches for Android devices</title>
		<author>
			<persName><forename type="first">C</forename><surname>Mulliner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Oberheide</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Robertson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Kirda</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Annual Computer Security Applications Conference</title>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="259" to="268" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Combining static analysis with probabilistic models to enable market-scale android inter-component analysis</title>
		<author>
			<persName><forename type="first">D</forename><surname>Octeau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Jha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dering</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Mcdaniel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bartel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Le Traon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages</title>
		<meeting>of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages</meeting>
		<imprint>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="469" to="484" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Retargeting Android applications to Java bytecode</title>
		<author>
			<persName><forename type="first">D</forename><surname>Octeau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Jha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Mcdaniel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering</title>
		<meeting>of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Composite Constant Propagation: Application to Android Inter-Component Communication Analysis</title>
		<author>
			<persName><forename type="first">D</forename><surname>Octeau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Luchaup</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dering</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Jha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Mcdaniel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the International Conference on Software Engineering (ICSE)</title>
		<meeting>of the International Conference on Software Engineering (ICSE)</meeting>
		<imprint>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="77" to="88" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Effective inter-component communication mapping in Android: An essential step towards holistic security analysis</title>
		<author>
			<persName><forename type="first">D</forename><surname>Octeau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Mcdaniel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Jha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bartel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Bodden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Le Traon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 22nd USENIX security symposium</title>
		<meeting>of the 22nd USENIX security symposium</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="543" to="558" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Using probabilistic generative models for ranking risks of Android apps</title>
		<author>
			<persName><forename type="first">H</forename><surname>Peng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Gates</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Sarma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Qi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Potharaju</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Nita-Rotaru</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Molloy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM conference on Computer and communications security</title>
		<meeting>of the ACM conference on Computer and communications security</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="241" to="252" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">A machine-learning approach for classifying and categorizing Android sources and sinks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Rasthofer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Arzt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Bodden</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Network and Distributed System Security Symposium (NDSS)</title>
		<meeting>of the Network and Distributed System Security Symposium (NDSS)</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Multi-App security analysis with FUSE: Statically detecting Android app collusion</title>
		<author>
			<persName><forename type="first">T</forename><surname>Ravitch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">R</forename><surname>Creswick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Tomb</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Foltzer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Elliott</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Casburn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM Program Protection and Reverse Engineering Workshop</title>
		<meeting>of the ACM Program Protection and Reverse Engineering Workshop</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Automatic detection of inter-application permission leaks in Android applications</title>
		<author>
			<persName><forename type="first">D</forename><surname>Sbîrlea</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">G</forename><surname>Burke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Guarnieri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Pistoia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Sarkar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM Journal of Research and Development</title>
		<imprint>
			<biblScope unit="volume">57</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="10" to="11" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Optimizing java bytecode using the soot framework: Is it feasible?</title>
		<author>
			<persName><forename type="first">R</forename><surname>Vallée-Rai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Gagnon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Hendren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Lam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Pominville</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Sundaresan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the International conference on compiler construction</title>
		<meeting>of the International conference on compiler construction</meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="18" to="34" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Amandroid: A precise and general inter-component data flow analysis framework for security vetting of Android apps</title>
		<author>
			<persName><forename type="first">F</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Roy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Ou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM SIGSAC Conference on Computer and Communications Security (CCS)</title>
		<meeting>of the ACM SIGSAC Conference on Computer and Communications Security (CCS)</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="1329" to="1341" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Comprehensive behavior profiling for proactive android malware detection</title>
		<author>
			<persName><forename type="first">B</forename><surname>Wolfe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Elish</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">D</forename><surname>Yao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the International Conference on Information Security</title>
		<meeting>of the International Conference on Information Security</meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="328" to="344" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">IntelliDroid: A targeted input generator for the dynamic analysis of Android malware</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">Y</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Lie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Network and Distributed System Security Symposium (NDSS)</title>
		<meeting>of the Network and Distributed System Security Symposium (NDSS)</meeting>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">IntentFuzzer: Detecting capability leaks of Android applications</title>
		<author>
			<persName><forename type="first">K</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Zhuge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Duan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Symposium on Information, Computer and Communications Security</title>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="531" to="536" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">AppIntent: analyzing sensitive data transmission in Android for privacy leakage detection</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Ning</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><forename type="middle">S</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM SIGSAC conference on Computer and communications security</title>
		<meeting>of the ACM SIGSAC conference on Computer and communications security</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="1043" to="1054" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Causality reasoning about network events for detecting stealthy malware activities</title>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Ramakrishnan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computers &amp; Security</title>
		<imprint>
			<biblScope unit="volume">58</biblScope>
			<biblScope unit="page" from="180" to="198" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">AppSealer: Automatic generation of vulnerability-specific patches for preventing component hijacking attacks in Android applications</title>
		<author>
			<persName><forename type="first">M</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Yin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Network and Distributed System Security Symposium (NDSS)</title>
		<meeting>of the Network and Distributed System Security Symposium (NDSS)</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
