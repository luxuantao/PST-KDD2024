<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Efficient Computation of Adaptive Threshold Surfaces for Image Binarization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Ilya</forename><surname>Blayvas</surname></persName>
							<email>blayvas@cs.technion.ac.il</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution">Technion Institute of Technology Haifa</orgName>
								<address>
									<postCode>32000</postCode>
									<country key="IL">ISRAEL</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Alfred</forename><surname>Bruckstein</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution">Technion Institute of Technology Haifa</orgName>
								<address>
									<postCode>32000</postCode>
									<country key="IL">ISRAEL</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Ron</forename><surname>Kimmel</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution">Technion Institute of Technology Haifa</orgName>
								<address>
									<postCode>32000</postCode>
									<country key="IL">ISRAEL</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Efficient Computation of Adaptive Threshold Surfaces for Image Binarization</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">D10040B99CDF70BABEFFF9FE6D186894</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T02:33+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The problem of binarization of gray level images acquired under nonuniform illumination is reconsidered. Yanowitz and Bruckstein proposed to use for image binarization an adaptive threshold surface, determined by interpolation of the image gray levels at points where the image gradient is high. The rationale is that high image gradient indicates probable object edges, and there the image values are between the object and the background gray levels. The threshold surface was determined by successive overrelaxation as the solution of the Laplace equation. This work proposes a different method to determine an adaptive threshold surface. In this new method, inspired by multiresolution approximation, the threshold surface is constructed with considerably lower computational complexity and is smooth, yielding faster image binarizations and better visual performance.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Let us consider the problem of separating the objects from the background in a gray level image I(x, y), where objects appear lighter (or darker) than the background. This can be done by constructing a threshold surface T (x, y), and constructing the binarized image B(x, y) by comparing the value of the image I(x, y) with T (x, y) at every pixel, via B(x, y) = 1 if I(x, y) &gt; T (x, y)</p><formula xml:id="formula_0">0 if I(x, y) ≤ T (x, y).<label>(1)</label></formula><p>It is clear that a fixed value of the threshold surface T (x, y) = const. can not yield satisfactory binarization results for images obtained under nonuniform illumination and/or with a nonuniform background. Yanowitz and Bruckstein in <ref type="bibr" target="#b0">[1]</ref>, motivated by the approach of Chow and Kaneko <ref type="bibr" target="#b1">[2]</ref>, proposed to construct a threshold surface by interpolating the image gray levels at the points where the image gradient is high. Indeed, high image gradients indicate probable object edges, where the image gray levels are between the object and the background levels. The threshold surface was required to in-terpolate the image gray levels at all the support points and to satisfy the Laplace equation at non-edge pixels. Such a surface was determined by a successive over-relaxation method (SOR) <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b2">3]</ref>.</p><p>Subsequent performance evaluation of several binarization methods showed that the Yanowitz-Bruckstein (YB) method was one of the best binarization methods <ref type="bibr" target="#b3">[4]</ref>. However, the computational complexity of successive overrelaxation method is expensive: O(N 3 ) for an N × N image, and the resulting binarization process is slow, especially for large images. Furthermore, the threshold surface tends to have sharp extrema at the support points, and this can degrade binarization performance.</p><p>We here follow the approach of YB and use image values at support points with high gradients to construct a threshold surface. However, we define a new threshold surface via a method inspired by multi resolution representations, like Laplacian Pyramids <ref type="bibr" target="#b4">[5]</ref> or wavelets <ref type="bibr" target="#b5">[6]</ref>. The new threshold surface is constructed as a sum of functions, formed by scaling and shifting of a predetermined function. This new threshold surface can be stored in two ways: either as an array of coefficients a ljk , or as a conventional threshold surface T (x, y), obtained as a sum of scaled and shifted versions of the given function, multiplied by appropriate coefficients a ljk .</p><p>The threshold surface coefficients a ljk are determined in O(P log(N )) time, where P is the number of support points and N 2 is the image size. These coefficients can then be used to construct the threshold surface T (x, y) over the entire image area N 2 in O(N 2 log(N )) time or to construct the threshold surface over smaller region of the image of M 2 size in only O(M 2 log(N )) time. Furthermore, the adaptive threshold surface can be made smooth over all the image domain.</p><p>This paper is organized as follows: Section 2 reviews the YB binarization method and the properties of threshold surfaces obtained by successive over-relaxation. Section 3 describes a new method, proposed to construct the threshold surface. Section 4 describes the implementation of the surface computation. Finally, Section 5 presents some experimental results, comparing the speed and binarization performance of the two methods.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">The Yanowitz-Bruckstein Binarization Method</head><p>The essential steps of the YB binarization method method are the following:</p><p>1. Find the support points {p i } of the image I(x, y), where the image gradient is higher then some threshold value G th ,</p><formula xml:id="formula_1">{p i } = {(x i , y i ) |∇I(x i , y i )| &gt; G th }.<label>(2)</label></formula><p>2. Find the threshold surface T (x, y) that equals to the image values at the support points {p i } and satisfies the Laplace equation at the rest of the image points:</p><formula xml:id="formula_2">T (p i ) = I(p i ) ∇ 2 T (x, y) = 0 if (x, y) / ∈ p i .<label>(3)</label></formula><p>The solution of (3) is found by the SOR method.</p><p>3. Determine the binarized image B(x, y) according to (1), i.e. by comparing I(x,y) with T(x,y).</p><p>The original method included also some pre-and post-processing steps (see Section 2 of <ref type="bibr" target="#b0">[1]</ref>), omitted here for the sake of clarity.</p><p>The SOR starts with an approximate solution t(x, y), and numerical iterations take it to the unique solution T (x, y) of the Laplace equation. At each iteration, j, the Laplacian value of t j (x, y) is computed in each point (that should be zero for the exact solution), multiplied by some constant 1 ≤ λ &lt; 2 and subtracted from the t j (x, y), to yield t j+1 (x, y) as proposed by Southwell in <ref type="bibr" target="#b2">[3]</ref>. Then, the values of t j+1 (p i ) at the support points {p i } are reset to be equal to the image values at these points I(p i ). Finally, the values of t i+1 (x, y) at the boundary points are set to be equal to the values of their internal neighbors, thus implementing the Newmann boundary conditions. The iterative process can be described in semi-MatLab notation as follows:</p><formula xml:id="formula_3">t 0 (x, y) = I(x, y) f or j = 1 : N, t j (x, y) = t j-1 (x, y) -λ • ∇ 2 t j-1 (x, y) t j (p i ) = I(p i ) t j (1 end, :) = t j (2 end -1, :) t j (:, 1 end) = t j (:, 2 end -1) end (4)</formula><p>Each iteration requires O(N 2 ) operations for N 2 grid points and there should be O(N ) iterations to converge to a solution, therefore, the method complexity is O(N 3 ) <ref type="bibr" target="#b0">[1]</ref>. The solution of (3) can be found in just a O(N 2 ) time using multigrid methods <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b7">8]</ref>. However it will become clear from the following paragraph that not only the speed of computation but also the properties of the threshold surface can be improved.</p><p>The general form of the solution of the (3) in the continuum limit is :</p><formula xml:id="formula_4">φ(x, y) = ψ(x, y) - P i=1 q i • log( (x -x i ) 2 + (y -y i ) 2 ). (5)</formula><p>Where ψ(x, y) is a smooth and bounded function <ref type="bibr" target="#b8">[9]</ref>. This solution has singularities at the support points. In the case of a problem discretized on a finite grid, the solution obtained by procedure (4) will be finite, yet it will have sharp extrema at the support points. These sharp extrema and especially the hanging 'valleys' between them can cause the unwanted 'ghost' objects on the binarized image. These ghost objects where eliminated by postprocessing step in <ref type="bibr" target="#b0">[1]</ref>, however, it is preferable to get rid of them already by a careful construction of the threshold surface. To illustrate sharp extremas at the support points and the hanging 'valleys' in between, Figure <ref type="figure">1</ref> shows a surface computed by SOR for 100 support points with random values in the range of 0..100. The support points were randomly scattered over a 128 × 128 grid.</p><p>Ideally, a good threshold surface should indicate the local illumination level, therefore the threshold surface constructed by the successive over-relaxation is not optimal in this sense. The next section describes a new way to construct such a threshold surface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">The New Threshold Surface</head><p>We propose to construct and represent the threshold surface in the Multi Resolution framework, as a sum of functions, obtained by scaling and shifting of the single source function. Unlike Laplacian Pyramids <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b9">10]</ref>, where the coefficients are calculated on the basis of an original signal that is a priori known, in our case the complete threshold surface is unknown in advance, but only its approximate values at the support points: T (p i ) = I(p i ). This section presents a way to construct surfaces that interpolate and approximate image values at the support points I(p i ). First, a simple interpolation algorithm is presented. However, the interpolation surface obtained is discontinuous and can not serve as a good threshold surface. Therefore, a small modification to the interpolation algorithm is next presented, that results in a continuous and smooth approximation surface.</p><p>Let us consider a unit step source function, given by</p><formula xml:id="formula_5">G 000 (x, y) = 1 if (x, y) ∈ Ω(I) 0 if (x, y) / ∈ Ω(I).<label>(6)</label></formula><p>Here Ω(I) denotes the set of all the image points (x, y) and p i denotes the i-th support point. All the other functions we shall use are generated by downscaling of this source function and shifting the downscaled functions to various positions in the image plane</p><formula xml:id="formula_6">G ljk (x, y) = G 000 (x • 2 l -j, y • 2 l -k),<label>(7)</label></formula><p>where l = 0, . . . , log 2 (N ) is a scale factor and j, k ∈ {0, . . . , 2 l -1} are spatial shifts.</p><p>The threshold surface will be given by</p><formula xml:id="formula_7">T (x, y) = log 2 (N ) l=0 2 l -1 j,k=0</formula><p>a ljk G ljk (x, y).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Interpolation Algorithm</head><p>Let us introduce an algorithm to calculate the "decomposition coefficients" a ijk in order to obtain an interpolating surface T (x, y) given as <ref type="bibr" target="#b7">(8)</ref>, that passes exactly through all the support points T (p i ) = I(p i ).</p><p>The algorithm runs as follows:</p><p>1. The decomposition coefficient a000 is set equal to the average of all the support points,</p><formula xml:id="formula_9">a000 = I(pi) = 1 P000 P 000 i=1 I(pi).<label>(9)</label></formula><p>After Step 1, every support point p (0) i is already approximated by the average a000, so it remains only to interpolate the difference between the value of every support point and the average.</p><p>2. The values of the support points are updated as follows:</p><formula xml:id="formula_10">p (1) i = p (0) i -a000. (<label>10</label></formula><formula xml:id="formula_11">)</formula><p>3. The image is divided into four "quadtree" cells, with corresponding indexes {jk} relating to the spatial position of the cell: {00, 01, 10, 11}. The average of the updated support points p (1) i of each cell jk is calculated to yield the appropriate decomposition coefficient a 1jk :</p><formula xml:id="formula_12">a 1jk = 1 P 1jk p (1) i ∈S 1jk p (1) i .<label>(11)</label></formula><p>Here p</p><p>(1) i ∈ S 1jk denotes a support point pi that belongs to the cell at the 1-st resolution level, located at the (j, k) spatial position. P 1jk denotes the number of support points in this cell.</p><p>4. After Step 3, the values of support points in each cell jk are approximated by a000 + a 1jk , so their values are updated to be:</p><formula xml:id="formula_13">p (2) i = pi -a000 -a 1jk = p (1) i -a 1jk .</formula><p>(12)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5.</head><p>Steps 3 and 4 are repeated for successive resolution levels. At every resolution level (l -1) each of the 4 l-1 cells of this level is divided into four cells to yield 4 l cells at the resolution level l. The coefficients a ljk of the cells at level l at the (j, k) spatial position are set to be equal to the average of the residual values of the support points, belonging to this cell:</p><formula xml:id="formula_14">a ljk = 1 P ljk i∈S ljk p (l) i .<label>(13)</label></formula><p>Here p (l) i</p><p>∈ S ljk denotes a support point pi that belongs to the cell at level l, located at the (j, k) spatial position. P ljk denotes the number of support points in this cell. After calculation of the coefficients a ljk , the values of the support points are updated by,</p><formula xml:id="formula_15">p (l+1) i = p (l) i -a ljk .</formula><p>(14)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6.</head><p>The procedure ends at the highest resolution level L (L = log 2 (N )), when the size of the cell equals to one pixel. At this step there is at most one support point in every cell jk, with a residual value p</p><formula xml:id="formula_16">(L) i . The coefficient a Ljk is set to a Ljk = p (L) i .</formula><p>The threshold surface, constructed in accordance with equations (6-8) with the coefficients a ljk obtained by the algorithm as described in steps 1-6, will be an interpolation surface of the support points p (0) i , i.e. it will pass through every support point. This can be proved by the following argument:</p><p>Consider some arbitrary support point p</p><p>i . The value of the threshold surface at this point will be</p><formula xml:id="formula_18">T (p i ) = L l=0 a lj l k l .<label>(15)</label></formula><p>Where, the j l k l chooses at every level l the cell that contains the p i . On the other hand, the residual value p (L+1) i of the support point p i equals to (Step 6):</p><formula xml:id="formula_19">p L+1 i = p (0)</formula><p>i -a 000 -a 1j1k1 -. . . -a LjLkL = 0, (16) which can be rewritten as</p><formula xml:id="formula_20">I(p i ) ≡ p (0) i = a 000 + a 1j1k1 + . . . + a LjLkL .<label>(17)</label></formula><p>From ( <ref type="formula" target="#formula_18">15</ref>) and (17) it follows that for an arbitrary support point p i , T (p i ) = I(p i ).</p><p>Figure <ref type="figure" target="#fig_0">2</ref> shows the interpolation surface, obtained by our method for the same set of support points that was used for the over-relaxation solution shown in Figure <ref type="figure">1</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Approximating Source Function</head><p>The method presented in the previous section yields a surface that interpolates the support points. However, the resulting interpolation surface is discontinuous. In order to obtain an n-times continuously differentiable approximation surface, the source function ( <ref type="formula" target="#formula_5">6</ref>) must be substituted by n-times continuously differentiable function vanishing together with n first derivatives at the boundary of its support. In the practical case of finite grid it is enough to consider a source function having a value and derivatives small enough at the boundary. However, there are three additional requirements from the source function.</p><p>• Approximation: It should have value close to 1 in the domain of its cell.</p><p>• Normalization: The integral of the source function over its support must be equal to the image area.</p><p>• Smoothness: It should decrease gracefully towards the boundary of its support.</p><p>The first two requirements are necessary in order to build the threshold surface approximating the support points and the third one in order to have it practically smooth. There are infinitely many possible source functions, satisfying these requirements. After some experimentation with several simple functions, we have chosen a source function with support [-1, 2] × [-1, 2], extending the image area [0, 1]×[0, 1]. Therefore, the threshold surface ( <ref type="formula" target="#formula_8">8</ref>) is constructed with scaled functions, overlapping at each resolution level. The new source function is given by</p><formula xml:id="formula_21">G 000 (x, y) = e -(x-1 2 ) 4 -(y-1 2 ) 4 2 -1 2 -1 e -(x-1 2 ) 4 -(y-1 2 ) 4 , if{x, y} ∈ [-1, 2] 2 0 if{x, y} / ∈ [-1, 2] 2 . (<label>18</label></formula><formula xml:id="formula_22">)</formula><p>The point {x, y} = { 1 2 , 1 2 } is the center of the image, spanning over [0, 1] × [0, 1]. Figure <ref type="figure" target="#fig_1">3</ref> shows the source function (18). The support points that determine the decomposition coefficients lie in the central cell [0, 1] × [0, 1], where the source function ( <ref type="formula" target="#formula_21">18</ref>) is practically flat. Eight periphery cells will overlap neighboring functions thus making the threshold surface smooth.</p><p>Figure <ref type="figure" target="#fig_2">4</ref> shows the smooth threshold surface, constructed with the source function (18) for the same set of support points that was used to construct the interpolated surfaces of Figures <ref type="figure" target="#fig_0">2</ref> and<ref type="figure">1</ref>. This figure (as well as figures 1 and 2) shows also the support points by vertical spikes. Some of the support points of Figure <ref type="figure" target="#fig_2">4</ref> are lying far from the threshold surface. This is due to the fact that support points are taken to have random values for demonstration purposes  a 000 a 100 a 101 . . . P 000 P 100 P 101 . . . and therefore the approximating surface passing between them is far from the support points in some places. In the real cases, the neighboring support points usually have similar values and approximation surface pass closer to them.</p><p>The new threshold surface is smooth. It does not necessarily pass exactly through the support, points, however this is an advantage rather than disadvantage, because if several neighboring support points have substantially different and 'noisy' values this indicates either that the threshold surface is under-sampled by the support points or that there is some error or noise in their values. In both cases there is not enough information at the support points about the threshold surface and probably the best solution is to set the threshold surface somewhere in between, like in the proposed approximation algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Implementation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Data Structures</head><p>The basic data structures are two arrays:</p><p>The first array is called coeffs (Table <ref type="table" target="#tab_0">1</ref>). It stores the decomposition coefficients of the cells a ijk in the first row and the number of support points P ljk of the corresponding cell in the second row. a ljk denotes the decomposition coefficient of the cell ljk, which is located at the (j, k) spatial position, at level l of the resolution. P ljk stores the number of support points in this cell. First column of coeffs stores the single coefficient of the lowest level a 000 and the total number of support points P ≡ P 000 . Following are four columns of coefficients of the first level (a 100 , . . . , a 111 ) and number of points in each of these cells (P 100 , . . . , P 111 ), etc.</p><p>Every support point belongs to one and only one cell lj l k l at every resolution level l. There are lg(N ) different resolution levels, starting from single cell of size N × N at level 0 to the N 2 cells of size 1 × 1 at level lg(N ).</p><formula xml:id="formula_23">p 1 p 2 • • • p p • • • • • • • • • • • • p log2(N )1 p log2(N )2 • • • p log2(N )p</formula><p>The second array, called pointarr (Table <ref type="table" target="#tab_1">2</ref>), has P columns and 1 + lg(N ) rows. Every column of pointarr contains the current value of the support point p (l) i in the first row, and the indexes ind il in other rows. These indexes refer to the cells which contain p i at every level l: coeffs[:, ind il ] = [a ljk ; P ljk ]. Figure <ref type="figure" target="#fig_3">5</ref> shows an example of a point, which belongs to cell 000 at level 0 (as every point does), cell 100 at level 1 , to cell cell 211 at level 2 etc.. This point contributes in the construction of the threshold function only through the coefficients a 000 , a 100 , a 211 , . . .. These coefficients are stored in the first row, columns 1, 2, 11, . . . of array coeffs (Table <ref type="table" target="#tab_0">1</ref>). Thereby, the column of pointsarr, corresponding to this point will have values 1, 2, 11, . . . in its second, third, fourth . . . rows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Algorithm description</head><p>1. Array pointarr (Table <ref type="table" target="#tab_1">2</ref>) is created and gradually filled. Every column i of this table contains value of the point pi in the first raw. For every point pi a cell lj il k il that contains it at each level l l=0, . . . , lg(N ) is determined . The positions of these cells in the array coeffs (Table <ref type="table" target="#tab_0">1</ref>) are filled into rows 2, . . . , N , of the i-th column of pointarr, and simultaneously, for every encountered cell the counter of the points belonging to this cell is increased in the array coeffs. This requires lg(N ) calculations of the cell index and lg(N ) increments of the point counters for each of the P support points entered into the lg(N ) cells.</p><p>2. The coefficients a ljk in the array coeffs are calculated. a000 is set to be an average value of all the points (9). Next, the value of every point in points is updated: the average value is subtracted from it <ref type="bibr" target="#b9">(10)</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.</head><p>Step 2 is repeated for a higher level l. 4. The threshold surface is built based on the coeffs and the basis function (18). This requires O(N 2 lg(N )) operations. So, an approximation surface for P support points scattered over N 2 grid points is determined as a set of coefficients using O(P lg(N )) operations and constructed explicitly, using O(N 2 lg(N )) operations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Experimental results</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Speed comparison:</head><p>The two methods, YB with adaptive threshold surface obtained by SOR and the new one with adaptive threshold sur-  face obtained by multiresolution approximation were compared for speed and quality of binarization. The programs were implemented in MATLAB 5.3 and ran on an IBM-Thinkpad-570 platform with 128MB RAM and a Pentium-II 366 MHz processor. Table <ref type="table" target="#tab_3">3</ref> presents the speed comparison results for the two methods. The test images are successively increasing portions of one of the images. The support points in all cases constituted the 1% of the image points with the highest gradients. The run times are given in seconds. For the new threshold surface approximation method, referred to as Fast Approximation or FA, two runtimes are given. The first one is the runtime for the full image binarization with the explicit threshold surface T (x, y) and it should be compared with the runtime of the SOR method. The second is the considerably shorter runtime necessary to obtain the decomposition coefficients a ijk that implicitly contain all the information about the threshold surface and can then be used for an efficient 'region-of-interest' processing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Binarization Performance:</head><p>The binarization methods were tested on several of the images from the 'images' toolbox of Matlab. A smooth parabolic function was added to the image of 'IC' in order to simulate a nonuniform illumination. About a half of the tested images showed similar visual performance of the two methods, while another half evidenced the advantage of FA. Some of the typical results, evidencing the advantage of FA are presented here.</p><p>Figures from 6 to 14 show 3 images and 6 corresponding binarization results. The size of all the images is 256 × 256. The Figures show an original image followed by two figures, showing images binarized with the threshold surfaces constructed by SOR and then by FA. The binarization processing time for images with the SOR threshold surface varied between 161.1 and 162.7 sec, while for images obtained with FA varied between 7.2 to 7.8 seconds. Obviously, the speed advantage of the Fast Approximation will be greater for larger images.</p><p>The image 'IC' is a good example of 'ghost' objects that appear as white areas between the conductor lines in the image binarized with the SOR, Figure <ref type="figure" target="#fig_11">13</ref>. They are almost absent in the image binarized with the new threshold surface and shown on Figure <ref type="figure" target="#fig_12">14</ref>.          </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 1: Solution by the Over-relaxation method</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: The source function, given by (18) .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: An approximating surface, obtained with source function (18)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Cell Hierarchy.Figure6: Barbara.</figDesc><graphic coords="6,66.71,234.45,102.87,102.87" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 :</head><label>6</label><figDesc>Figure 5: Cell Hierarchy.Figure6: Barbara.</figDesc><graphic coords="6,190.73,80.15,102.87,102.87" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Binarization of Barbara with SOR.</figDesc><graphic coords="6,66.71,398.67,102.87,102.87" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Binarization of Barbara with FA.</figDesc><graphic coords="6,190.73,398.67,102.87,102.87" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: Trees.Figure 10: Binarization of Trees with SOR.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 10 :</head><label>10</label><figDesc>Figure 9: Trees.Figure 10: Binarization of Trees with SOR.</figDesc><graphic coords="6,190.69,562.75,102.90,102.90" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 11 :</head><label>11</label><figDesc>Figure 11: Binarization of Trees with FA.</figDesc><graphic coords="6,66.71,562.89,102.87,102.87" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure</head><label></label><figDesc>Figure 12: IC.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 13 :</head><label>13</label><figDesc>Figure 13: Binarization of IC with SOR.</figDesc><graphic coords="6,325.41,74.71,102.90,102.90" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 14 :</head><label>14</label><figDesc>Figure 14: Binarization of IC with FA.</figDesc><graphic coords="6,449.44,74.71,102.90,102.90" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Array coeffs. Contains decomposition coefficients a ljk and number of support points P ljk in the cell ljk.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 :</head><label>2</label><figDesc>Array pointarr. Column i contains the indices of the cells containing p i .</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 3 :</head><label>3</label><figDesc>Runtimes of SOR and FA.</figDesc><table /></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>We would like to thank Danny Barash from HP Labs Israel, for his valuable comments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Concluding Remarks</head><p>This work proposes efficient procedures for gray level image binarization motivated by the method proposed in <ref type="bibr" target="#b0">[1]</ref>. The new threshold surface is constructed in the framework of multi-resolution analysis, with a considerably lower computational complexity and hence in a much shorter time even for small images. The new threshold surface can be made smooth and by the nature of its construction should be similar to the local illumination level. These qualities allowed us to often obtain better visual performance of the binarization process. In particular, the quantity and size of 'ghost' objects in some images was lower.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A new method for image segmentation</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">D</forename><surname>Yanowitz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Bruckstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Vision, Graphics and Image Processing</title>
		<imprint>
			<biblScope unit="volume">46</biblScope>
			<biblScope unit="page" from="82" to="95" />
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Automatic boundary detection of the left-ventricle from cineangiograms</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">K</forename><surname>Chow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Kaneko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Biomed</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="388" to="410" />
			<date type="published" when="1972">1972</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">R</forename><surname>Southwell</surname></persName>
		</author>
		<title level="m">Relaxation methods in theoretical physics</title>
		<imprint>
			<publisher>Oxford University Press</publisher>
			<date type="published" when="1946">1946</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Evaluation of binarizaiton methods for document images</title>
		<author>
			<persName><forename type="first">D</forename><surname>Trier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Taxt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Pattern Analysis and Machine Intelligence</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="312" to="315" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">The laplacian pyramid as a compact image code</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">J</forename><surname>Burt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">H</forename><surname>Adelson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Communications</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="532" to="540" />
			<date type="published" when="1983">1983</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">A Wavelet Tour of Signal Processing</title>
		<author>
			<persName><forename type="first">Stephane</forename><forename type="middle">G</forename><surname>Mallat</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999">1999</date>
			<publisher>Academic Press</publisher>
			<biblScope unit="page" from="221" to="224" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">L</forename><surname>Briggs</surname></persName>
		</author>
		<author>
			<persName><surname>Multigrid Tutorial</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1987">1987</date>
			<publisher>SIAM</publisher>
			<pubPlace>Philadelphia, PA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">An algebraic multigrid approach for image analysis</title>
		<author>
			<persName><forename type="first">R</forename><surname>Kimmel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Yavneh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal on Scientific Computing</title>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
	<note>to be submitted</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><surname>Courant</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Hilbert</surname></persName>
		</author>
		<title level="m">Methods of Mathematical Physics</title>
		<imprint>
			<publisher>Interscience Publishers</publisher>
			<date type="published" when="1953">1953</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Fast computation of the difference of low-pass transform</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">L</forename><surname>Crowley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">M</forename><surname>Stern</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on PAMI</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="1984">1984</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
