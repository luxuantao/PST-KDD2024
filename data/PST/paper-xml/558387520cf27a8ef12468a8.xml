<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">On the Relationship Between Partition and Random Testing</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">T</forename><forename type="middle">Y</forename><surname>Chen</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of IEEE</orgName>
								<address>
									<postCode>9406725</postCode>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Y</forename><forename type="middle">T</forename><surname>Yu</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of IEEE</orgName>
								<address>
									<postCode>9406725</postCode>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Gannon</surname></persName>
							<affiliation key="aff1">
								<address>
									<postCode>3052</postCode>
									<settlement>Melboume, Parkville</settlement>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">On the Relationship Between Partition and Random Testing</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">0EF45FE09A7E480C61FFC3289508A531</idno>
					<note type="submission">received February, 1994; revised July, 1994. Recommended by</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T09:08+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Partition testing</term>
					<term>random testing</term>
					<term>software testing</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Weyuker and Jeng have investigated the conditions that affect the performance of partition testing and have compared analytically the fault-detecting ability of partition testing and random testing. This paper extends and generalizes some of their results. We give more general ways of characterizing the worst case for partition testing, along with a precise characterization of when this worst case is as good as random testing. We also find that partition testing is guaranteed to perform at least as well as random testing so long as the number of test cases selected is in proportion to the size of the subdomains.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Partition testing is one of the main techniques towards selection of test data. For partition testing, the program's input domain is divided into subsets, called subdomains, and one or more representatives from each subdomain are selected to test the program. Path coverage is a typical example of partition testing.</p><p>Random testing can be viewed as a degenerate form of partition testing in the sense that there is only one "subdomain," the entire program domain. Since there is no partitioning, random testing does not bear the overhead of partitioning and of keeping track of which subdomains have been tested or not. <ref type="bibr">Duran and Ntafos [l]</ref>, and <ref type="bibr">Hamlet and Taylor [2]</ref>, performed a series of simulations and experiments to compare the effectiveness of partition testing and random testing. Their results were at first surprising to many people. They found that even when partition testing was better than random testing at finding bugs, the difference in effectiveness was marginal. Thus, when the overhead of partitioning is expensive relative to random testing, it is likely that random testing will be more cost effective than partition testing in terms of cost per fault found. <ref type="bibr">Weyuker and Jeng [3]</ref> conducted a formal analysis of partition testing strategies and compared the effectiveness of partition testing and random testing. They found that partition testing can be an excellent testing strategy or a poor one, as compared to random testing. Essentially, they found that the effectiveness of a particular partition testing strategy depends on how well that strategy groups together thefailure-causing inputs, that is, those inputs which produce incorrect outputs. In particular, partition testing is most successful when the subdomain definitions are fault-based. Their findings were very helpful in explaining the seemingly counter-intuitive results in the empirical analysis of partition testing and random testing by <ref type="bibr">Duran and Ntafos [l]</ref> as well as <ref type="bibr">Hamlet and Taylor [2]</ref>.</p><p>Based on and inspired by the work of <ref type="bibr">Weyuker and Jeng [3]</ref>, this paper is aimed at adding some new results and generalizations. The necessary notation and assumptions are introduced in Section 11.</p><p>In Section 111, we quote some of the results obtained by Weyuker and Jeng, and show how they can be extended or generalized. The practical implications and limitations of our results are discussed in Section IV.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11.">NOTATION</head><p>Since this paper is mainly a follow-up of <ref type="bibr">Weyuker and Jeng's work [3]</ref>, we basically follow their notation and recall only those definitions needed in this paper. For details, readers should refer to <ref type="bibr">Weyuker and Jeng [3]</ref>. To facilitate cross-reference, their results will be quoted with their original reference numbers and followed by (WJ), such as Observation 2 (WJ).</p><p>For any general program P, its input domain will be denoted by D and the size of D is d &gt; 0. Elements of D which produce incorrect outputs are known as failure-causing inputs, and we shall assume that there are m (0 5 m 5 d ) of them. The remaining c (= dm ) inputs will be called correct inputs. The failure rate, 8, is defined as 8 = m/d. Assume also that the total number of test cases selected is n.</p><p>When testing is done by dividing the program domain D into k (22) subdomains, these subdomains will be denoted by D, where 2 = 1 , 2 , . . . , k. Each subdomain will have size d,, contain m, (0 5 m , 5 d,) failure-causing inputs and c, (=d,m,) correct inputs, and have failure rate 8, = nz,/d,. The number of test cases selected from it is n, Q l ) . Note that, by definition,</p><formula xml:id="formula_0">n, = n.</formula><p>Since in general testing performance increases with the number of test cases, we have assumed that partition testing and random testing have the same number of test cases when they are compared.</p><p>As in Weyuker and Jeng, all subdomains are assumed to be disjoint. Therefore, d , = d , E,"=, m, = m and E:=, c, = c.</p><p>All random selections are also assumed to be independent, with replacement, and based on a uniform distribution. This means that when a test case is selected from D (Dt), the probability that it is a failure-causing input will be exactly 8 (Ot). We are interested in the probability that at least one failure-causing input is found when all test cases have been selected and executed. This will be denoted by P, for random testing, and Pp for partition testing. They are defined by the following formulas:</p><formula xml:id="formula_1">P, = 1 -( 1 -8 ) " and k Pp = 1 -r I ( 1 -e,)'". 1 = 1</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="111.">RELATIONSHIP BETWEEN PARTITION AND RANDOM TESTING</head><p>In this section, we first look at the best and worst cases for partition testing as identified by Weyuker and Jeng. We shall show that the worst case of partition testing can be more generally characterised in two different ways. The fault-detecting ability of random testing is then compared to that of the worst case of partition testing in a more precise way.</p><p>Next we look at the observation by Weyuker and Jeng which provides a sufficient condition to guarantee that partition testing is at least as good as random testing. Common partition testing strategies 0098-5589/94$04.00 0 1994 IEEE do not usually satisfy such a condition. We find, however, that the condition can be easily relaxed so that it can be satisfied by any partitioning method. We conclude this section by comparing, using some examples, the partition scheme that corresponds to Weyuker and Jeng's condition to the scheme that corresponds to our condition.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A . Best and Worst Cases of Partition Testing</head><p>Weyuker and Jeng have shown that partition testing performs best in the following situation.</p><p>Observation I: (WJ) P, is maximized if one subdomain contains only inputs that produce incorrect outputs.</p><p>An obvious consequence of this observation is that partition testing is most effective when fault-based strategies are used to partition the input domain. However, it is difficult to define good fault-based strategies that correspond to real faults.</p><p>At the other extreme, the worst case of partition testing is identified by <ref type="bibr">Weyuker and Jeng, under</ref>  As obvious, there is also an implicit assumption that n = k , or else some of the nz may be greater than 1. However, we have found that the minimum value of Pp can still be equal to m/dk = n i / ( d -n + l ) even without the assumptions n = k , d &gt;&gt; k and d &gt;&gt; m . Intuitively, we follow the same idea that only one test case is to be selected from Dk, and we try to minimize flk by making the size of Dk as large as possible. Following is a generalized form of Observation 3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>First Generalized Form of Observation</head><formula xml:id="formula_2">3: Assume that n 2 k 2 2, d 2 k , 0 5 m 5 d -n + 1 (</formula><p>that is, there are at least n -1 correct inputs), and n, 5 d, for all i. Then P, is minimized when A further generalization can be achieved even with the removal of the constraint that n, 5 d , for all i , resulting in the following form:</p><formula xml:id="formula_3">n, = n -1, d , = n, for i = 1 ,.... k -1, nk = 1 and dk = d -n + 1,</formula><formula xml:id="formula_4">Second Generalized Form of Observation 3: Assume that n 2 k 2 2, d 2 k , 0 5 m 5 d -k + 1 (that is, there are at least k -1 correct inputs). Then Pp is minimized when n, = n -1,</formula><p>with all of the m failure-causing inputs in Dk. In this case,</p><formula xml:id="formula_5">Pp = m/dk = m / ( d -k + 1).</formula><p>In this second generalized form, it may happen that there is a subdomain D , with the number of test cases selected (n,) greater than the number of elements in that subdomain (d). Although this rarely happens in practice, it is still possible in theory, as we have assumed that the selections could be done with replacement.</p><p>Since k 5 n, d -k + 1 2 dn + 1. Therefore, the value of P, in the Second Generalized Form is smaller than that of Observation 3 (WJ).</p><p>Weyuker and Jeng have argued without proof that the worst case of partition testing will, in most cases, be worse than random testing, based on the following intuition that "in the random testing case, the tester gets n attempts atfinding a bug, with each try having a likelihood of mld of finding one. In this partitioning, the tester gets only one try, with almost the same failure rate, m/(d -n + l)."</p><p>In fact, the worst case of partition testing would be better than random testing only when m is equal to a certain value. The following lemma is needed before we present this property and its formal proof.</p><formula xml:id="formula_6">Lemma 1: Let d , k , m and n be integers such that n 2 k 2 2, d 2 k , 0 5 m 5 d -k + 1. Then 1 -(1 -7 ) " 2 &amp; unless m = d -k + 1 . k -I d l = ... = dk-1 = 1, nk = 1 and dk = d -k + 1, Proof: Let A = 1 -(1 -2)7' and B = +.</formula><p>We divide the proof into cases.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Case 1: When</head><formula xml:id="formula_7">ni = d -k + 1, B = 1 &gt; A.</formula><p>Case 2: When nj = 0, B = 0 = A.</p><p>Case 3: When d = k , we must have 0 5 ni 5 1. If m = 0, this reduces to case 2 above. If n? = 1, this reduces to case 1 above.</p><formula xml:id="formula_8">Case 4: Suppose 0 &lt; m &lt; d -k + 1 and d &gt; k. Then c = d -ni &gt; k -1. Now ni &gt; 0 d &gt; c. Also, c -k + l ~- -- d -k + l (3" -d " ( c -k + 1) -C l b ( d -I; + 1) - &amp;'(d -k + 1)</formula><p>The denominator is clearly positive. Let N be the numerator of the above fraction. Then</p><formula xml:id="formula_9">N = d " ( c -k + 1) -rTL(d -k + 1)</formula><p>- <ref type="figure">-c d ( d n -' -c ' " -' ) + ( -k + l ) ( d n -c "</ref> )</p><formula xml:id="formula_10">n -2 c2dn-'-' + (-k + 1) 11 -1 2=0 n-1 z=O n-1 1 r n-2 n -1 1 + x c n p 1 j since d &gt; c &gt; 0 *=O 1 ,1-2 = ( d -c ) ( c -k ) ctdn--l-* + ( n -k)c't-l [ 2=0 2 0 since c 2 k and n 2 k.</formula><p>Hence we have N &gt; 0, and therefore A &gt; B .</p><p>0</p><formula xml:id="formula_11">Proposition I : 1)</formula><p>The minimized values of P, in Observation 3 (WJ) and the First Generalized Form of Observation 3 are not greater than P, unless ni = dn + 1 (that is, unless there are exactly n -1 correct inputs).</p><p>2) The minimized value of P, in the Second Generalized Form of Observation 3 is not greater than P, unless m = d -k + 1 (that is, unless there are exactly k -1 correct inputs). Proof: The second part of Proposition 1 follows directly from Lemma 1, and the first part is simply a special case of Lemma 1 when k = n .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>0</head><p>As a reminder, it is obvious that when m 2 dk + 1, P, = 1 irrespective of how the domain is partitioned.  <ref type="figure">,</ref><ref type="figure">,</ref><ref type="figure">,</ref><ref type="figure">,</ref><ref type="figure">,</ref><ref type="figure">,</ref><ref type="figure"></ref> is used to denote the value of P, in the worst case.</p><p>Proof: Assuming that d is large relative to m , n and k, then only case 4 in the proof of Lemma 1 is valid. Thus, we have <ref type="figure">P~/P,</ref><ref type="figure">,</ref><ref type="figure">,</ref><ref type="figure">,</ref><ref type="figure">,</ref><ref type="figure">,</ref><ref type="figure">t =</ref> </p><formula xml:id="formula_12">P, = 1 -(1 -m / d ) " M 1 -(1 -m n / d ) = mn/d, and Pp.worrt = m / ( d -k + 1) M m / ( d -k ) = ( m / d ) ( l -k / d ) -' ( m / d ) ( l + k/d). Therefore,</formula><formula xml:id="formula_13">n / ( l + k/d) = O ( n ) .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>0</head><p>Note that if only one random test is performed, P,. = 1 -(1m/d) = m/d which is only slightly less than P,.worst. Proposition 2 shows that, in the worst case, the error revealing capability of n test cases from partition testing is almost the same as that of one random test case! In fact, the constant factor is almost equal to 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. A SufJicient Condition for Partition Testing to be Better Than Random Testing</head><p>In general, we do not have a priori precise information about the distribution of the failure-causing inputs so as to assess the performance of partition testing. Despite the absence of information about the distribution of failure-causing inputs, Weyuker and Jeng did find a way of partitioning the domain that is guaranteed to be not worse than random testing. In other words, we will never do worse than random testing by having equal-sized subdomains and equal number of test data. This result gives a sufJicient condition of partition testing to be better than random testing. However, when we divide the program input domain according to the commonly accepted criteria, it is extremely unusual for the subdivisions to be of equal size. An obvious but not intuitively appealing criterion is equal size partition, that is dividing the input domain into subdomains of equal sizes. But then this method of partitioning is not fault-based. While we can indeed guard against its worst case behavior by doing so, we have no way of guaranteeing that such a partition is an effective one as it is not fault-based.</p><p>In fact, a constant ratio of the number of test cases over the size of the subdomains is sufficent to guarantee that P, 2 P,. Since equalsized subdomains and equal number of test data imply a constant ratio between them, Weyuker and Jeng's result is a special case of our result (as stated as Proposition 3 later). Furthermore, when constant ratios of n, and d, replace equalities, the corresponding part for the result about the sufficient condition of P, = P,. should then be "If, in addition, the failure rates of all subdomains are the same, so that m l / d l = . . . = m k / d k . then P, = P,.."</p><p>This is exactly Observation 7 (WJ), which is stated below for easy reference:</p><p>Observation 7: (WJ) Assume that 81 = ... = 8n. Then 8 = 8, and P, = P,.. Before we present our result, we need to prove the following lemma first as it is needed for the proof of the new result.  <ref type="figure" target="#fig_2">'"2"~;</ref><ref type="figure" target="#fig_7">''1"</ref></p><formula xml:id="formula_14">2 = d l d - -r ( m / d -n i l / d l ) = Then 02 -8 = n i 2 / d 2 -(ml + n i 2 ) / d = ("L2 ' I 1 -"rl 1'12 + m 1 d l -n L 1 d l ) ? .</formula><p>r ( 8 -01) = r6. Hence we have, <ref type="bibr">( arh)</ref>, where a = 1 -8. Without loss of generality, we shall assume r 2 1 . Then</p><formula xml:id="formula_15">-I ( r u d 1 -n t 1 a ) - 1 -P, = ( 1 -81)"1(1 -8 2 ) " 2 = [1 -( 0 -6)]""*[1 -(8 + 1-6)]"~ = [(I -8 + 6 ) , . ( 1 -8 -r6)IrL2 Let f(6) = ( a + 6 ) "</formula><formula xml:id="formula_16">f'(6) = r ( a + 6 ) " -' ( a -r 6 ) + (a + 6 ) " ' ( -r ) = r ( a + 6)7-1[(a -r 6 ) -( a + 6 ) ] = -r(i-+ l)n(a + 6)"-'</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Now</head><p>If 01 = 1 , then P, = 1 and obviously Pp 2 P,.</p><p>Assume that 81 &lt; 1 so that a + 6 &gt; 0. Then we have f'(0) = 0, f'(6) &lt; 0 for any 6 &gt; 0 and f'(6) &gt; 0 for any 6 &lt; 0.</p><p>Therefore, f ( 6 ) attains its maximum at 6 = 0. That is, for any 6, f ( 6 ) 5 f( <ref type="formula">0</ref> We now state and prove our generalized result. Proposition 3: </p><formula xml:id="formula_17">P p 2 pr.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C . Comparing the Two Partition Schemes</head><p>It is also of great interest to compare the values of Pp for the partition method of d l = . . . = dk and n = . . . = n k , and the partition method of n l / d l = ... = t i k / d h . As before, the total number of test data for these two methods are assumed to be the same. The following examples show that none of these two methods is always the best, regardless of whether the number of partitions for the first method is the same as, greater than or less than that for the second method.  Thus, we have the following proposition.</p><p>Proposition 4: The partition method of equal d, 's and equal n , 's (as described in Observation 4 (WJ)) can be better, worse or the same as the partition method of equal ( n t / d , ) ' s (as described in Proposition 3).</p><p>IV. CONCLUSION In this paper, we have extended and generalized some of the results by <ref type="bibr">Weyuker and Jeng [3]</ref>. We have given more general characterizations of the worst case for partition testing, along with a precise characterization of when this worst case is as good as random testing. The most important result of our study is to extend Observation 4 (WJ) into a theoretically more general and also a practically more applicable form. As long as we select the number of test cases proportional to the size of the subdomains, partition testing is guaranteed to be not worse than random testing.</p><p>In practice, most partition testing strategies divide the program domain into unequal-sized subdomains. If the sizes of the subdomains are known, then by Proposition 3, we know how the test cases should be distributed so that the partition method would not be worse than random testing. In many cases, however, the exact sizes of the subdomains may not be easily known. However, it is sufficient to know the ratio of the subdomain sizes in order to be able to determine the distribution of test cases. Even in the absence of the knowledge of such a ratio, we can still estimate the subdomain sizes by using the Monte-Carlo method, that is, by randomly selecting elements of the program domain and calculating the ratio of the number of elements falling into the subdomains.</p><p>As an application of Observation 4 (WJ), <ref type="bibr">Weyuker and Jeng [3]</ref> pointed out that once a partition has been made, it is possible to algorithmically construct a refinement to the partition that is guaranteed not to decrease Pp. In their algorithm, a given subdomain should be further subdivided into equal sized subdomains and an equal number of test cases should be selected from each resulting subdomain. It follows from Observation 4 (WJ) that the value of Pp for the refined partition is no worse than the original value of Pp. Since Proposition 3 is an extension of Observation 4 (WJ), their algorithm can be generalized accordingly. A given subdomain may be further subdivided into subdomains whose sizes are not necessarily equal, but the number of test cases selected should be proportional to the size of the resulting subdomains. The value of Pp for partitions refined in this way is also guaranteed to be not worse than the original value of Pp.</p><p>There is, however, a practical consideration that affects the applicability of Proposition 3. The exact ratios of the subdomain sizes may not be reducible to the ratios of small integers, thereby rendering the total number of test cases too large. For example, when k = 2, d l = 503 and d~ = 1000, then we would require 711 : n 2 = 503 : 1000.</p><p>Obviously, the smallest possible integers satisfying this equality are 503 and 1000, and so we would need 71 2 1503. Thus, the total number of test cases is at least the same as the number of elements in the entire program domain! In this example, an approximation may be achieved by making 111 : n~ = 1 : 2. Further work has to be done to investigate the effect when only approximate ratios of the subdomain sizes are used.</p><p>A similar problem occurs when some subdomains are small relative to the rest. For example, when I; = 5 , d l = 1 8 , d ~ = 20, d3 = 22,d4 = 2400 and d g = 3000, the exact ratio of the sizes of the subdomains is 9 : 10 : 11 : 1200 : 1500. According to Proposition 3, the number of test cases needed is at least 2730. Suppose now we cannot afford to execute this number of tests. There are two possible ways of reducing the number of test cases. One way is to assign one test case to each of the small subdomains and select test cases for the rest proportionately. So if we are prepared to use not more than 100 test cases, the number of test cases allocated to the subdomains would be 1, 1, 1, 40 and 50 respectively. Another way is to combine the small subdomains into one single subdomain. In this example, the first three subdomains would be combined and the sizes of the new subdomains would be 60, 2400 and 3000, and their ratio would be 1 : 40 : 50. Again, the effects of these two approaches have yet to be investigated.</p><p>V. ACKNOWLEDGMENT This work was inspired by the work of E. J. Weyuker and B. Jeng to whom the authors would like to express their gratitudes. The authors would like to thank F. T. Chan and M. F. Lau for their invaluable discussions.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>the assumptions that 1 5 n, 5 d,, d &gt;&gt; k and d &gt;&gt; m , as follows. Observation 3: (WJ) Pp is minimized when nl = . . . = nk = 1, d , = n -1, and dk = dn + 1, with all of the m failurecausing inputs in Dk. In this case, Pp = m/dk = m / ( dn + 1).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>with all of the m failure-causing inputs in Dk. In this case, Pp = m/dk = m / ( dn + 1).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Proposition 2 :</head><label>2</label><figDesc>If d &gt;&gt; m , d &gt;&gt; n and d &gt;&gt; k , then P, /Pp.worst = O ( n ) , where P,</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Observation 4 :</head><label>4</label><figDesc>(WJ) If dl = . . ' = d k and nl = ' . . = n k , then P, 2 P,.. If, in addition, the failure-causing inputs are equally divided among the subdomains, so that ml = . . . = mk, then</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Lemma2:</head><label></label><figDesc>If k = 2 and n l / d l = nz/d2, then P, 2 P,.. P, = P,.. Proof: Let ? i l / n 2 = d l / d 2 = r , and 6 = 8 -81.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>) = a'+'. Hence 1 -P, = [f(b)In2 5 [f(0)]"2 5 [(1-8)7+1]712 = ( l -e ) 7 w + n ~ --(i-8)7L1+n2 = ( 1 -0 ) ~~ = 1 -p , U If k 2 2 and n l / d l = . . . = n k / d k , , then and so P, 2 P , .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Pro08</head><label></label><figDesc>This is done by induction on k. Basis step: k = 2 Induction step: Suppose we now have a program domain D which is partitioned into k + 1 disjoint subdomains D1,. . . , Dk+l, and that n l / d l = ... = nk+l/dk+l = r. Let D' = U: =, D,, where 1 -PPI= n,"=, (1 -7)"'. By induction assumption, we have 1 -P, ' 5 1 -This follows immediately from Lemma 2. and n' = c : = , nA. Now, = ( l -P j ) ( 1 --' ;::=:&gt;""" &lt; ( l -P * ' ) ( 1--yl ) " + 1 D can be regarded as being partitioned into two disjoint subdomains D' and Dk+l. Then ni = n1' + n i k + l , d = d' + d k + l and n = n' + n k + l . Obviously, ?i'/d' = r = n k + l / d k + l . Thus, by Lemma 2, Hence 1 -P, 5 1 -, and PI&gt; 2 P, . 0 Thus, in order to guarantee that partition testing is better than random testing, it is only necessary to have the number of selected test data proportional to its corresponding partition's size, even if the partitions are of different sizes. Since d l = ... = r l k and ??I = ... = n k imply n l / d I = ... = i i k / d h , Observation 4 (WJ) is a special case of Proposition 3.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Example 1 :</head><label>1</label><figDesc>Let d = 300, k = 3, m = 10 and 71 = 6. Consider the four cases shown below. Here the partitions are equal in size in Case 1.1 and different in the other cases.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>Let d = 300, m = 10 and 71 = 6. Consider the three cases shown below. Here the partitions are equal in size in Case 3.1 and different in the other cases.</figDesc><table><row><cell>1.1</cell><cell cols="2">loo, 2, 10</cell><cell>loo, 2, 0</cell><cell>100, 2, 0</cell><cell>0.19</cell></row><row><cell>1.2</cell><cell></cell><cell>50, 1, 10</cell><cell>100, 2, 0</cell><cell>150, 3, 0</cell><cell>0.2</cell></row><row><cell>1.3</cell><cell></cell><cell>50, 1, 0</cell><cell>100, 2, 10</cell><cell>150, 3, 0</cell><cell>0.19</cell></row><row><cell>1.4</cell><cell></cell><cell>50, 1, 0</cell><cell>100, 2, 0</cell><cell>150, 3, 10</cell><cell>0.187</cell></row><row><cell cols="6">Example 2: Let d = 300, nt = 10 and 11 = 6. Consider the three</cell></row><row><cell cols="6">cases shown below. Here the partitions are equal in size in Case 2.1</cell></row><row><cell cols="4">and different in the other cases.</cell><cell></cell></row><row><cell cols="2">2.1 3</cell><cell>100,2,10</cell><cell>1 0 0 , 2 , 0</cell><cell>1 0 0 , 2 , 0</cell><cell>0.19</cell></row><row><cell cols="2">2.2 2</cell><cell>50, I , 10</cell><cell>250, 5, 0</cell><cell></cell><cell>0.2</cell></row><row><cell cols="2">2.3 2</cell><cell>50, 1, 0</cell><cell>250, 5, 10</cell><cell></cell><cell>0.185</cell></row><row><cell cols="6">Example 3: ~</cell></row><row><cell cols="2">Case k</cell><cell>d i , n1. 1111</cell><cell>d y , 112. m 2</cell><cell>d3, 1 1 3 , n73</cell><cell>Pp</cell></row><row><cell cols="2">3.1 2</cell><cell>150, 3, 10</cell><cell>150, 3, 0</cell><cell></cell><cell>0.187</cell></row><row><cell cols="2">3.2 3</cell><cell>50, 1, 10</cell><cell>50, 1, 0</cell><cell>200, 4, 0</cell><cell>0.2</cell></row><row><cell cols="2">3.3 3</cell><cell>50, 1, 0</cell><cell>50, 1, 0</cell><cell>200, 4, IO</cell><cell>0.185</cell></row></table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">An evaluation of random testing</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">W</forename><surname>Duran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">C</forename><surname>Ntafos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Software Eng</title>
		<imprint>
			<biblScope unit="page" from="438" to="444" />
			<date type="published" when="1984-07">July 1984</date>
			<publisher>SE-IO</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Partition testing does not inspire confidence</title>
		<author>
			<persName><forename type="first">R</forename><surname>Hamlet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Taylor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Software Eng</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="1402" to="1411" />
			<date type="published" when="1990-12">Dec. 1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Analyzing partition testing strategies</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">J</forename><surname>Weyuker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Jeng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">lEEE Trans. Software Eng</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="703" to="711" />
			<date type="published" when="1991-07">July 1991</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
