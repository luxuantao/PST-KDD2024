<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Comic Chat</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">David</forename><surname>Kurlander</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Microsoft Research Microsoft Research Department of Computer Science</orgName>
								<orgName type="institution">University of Washington Redmond</orgName>
								<address>
									<addrLine>One Microsoft Way One Microsoft Way</addrLine>
									<postCode>98052, 98052, 98195</postCode>
									<settlement>Redmond, Seattle</settlement>
									<region>WA, WA, WA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Tim</forename><surname>Skelly</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Microsoft Research Microsoft Research Department of Computer Science</orgName>
								<orgName type="institution">University of Washington Redmond</orgName>
								<address>
									<addrLine>One Microsoft Way One Microsoft Way</addrLine>
									<postCode>98052, 98052, 98195</postCode>
									<settlement>Redmond, Seattle</settlement>
									<region>WA, WA, WA</region>
								</address>
							</affiliation>
						</author>
						<author role="corresp">
							<persName><forename type="first">David</forename><surname>Salesin</surname></persName>
							<email>salesin@cs.washington.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Microsoft Research Microsoft Research Department of Computer Science</orgName>
								<orgName type="institution">University of Washington Redmond</orgName>
								<address>
									<addrLine>One Microsoft Way One Microsoft Way</addrLine>
									<postCode>98052, 98052, 98195</postCode>
									<settlement>Redmond, Seattle</settlement>
									<region>WA, WA, WA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Comic Chat</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">C33ADEC8E6EE34151CF8D177495216AB</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T04:48+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>CR Categories: I.3.2 [Computer Graphics]: Graphics Systemsdistributed /network graphics</term>
					<term>K.8.1 [Personal Computing]: Application Packages</term>
					<term>D.2.2 [Information Interfaces and Presentation]: Tools and Techniques-user interfaces Non-photorealistic rendering, comics, chat programs, virtual worlds, graphical histories, automated presentation, illustration, user interfaces, Internet, World Wide Web</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Comics have a rich visual vocabulary, and people find them appealing. They are also an effective form of communication. We have built a system, called Comic Chat, that represents on-line communications in the form of comics. Comic Chat automates numerous aspects of comics generation, including balloon construction and layout, the placement and orientation of comic characters, the default selection of character gestures and expressions, the incorporation of semantic panel elements, and the choice of zoom factor for the virtual camera. This paper describes the mechanisms that Comic Chat uses to perform this automation, as well as novel aspects of the program's user interface. Comic Chat is a working program, allowing groups of people to communicate over the Internet. It has several advantages over other graphical chat programs, including the availability of a graphical history, and a dynamic graphical presentation.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Computers are rapidly changing the way that people communicate, as is evidenced by the proliferation of electronic mail and the advent of the World Wide Web. As the Internet and on-line services have grown in popularity, so has another form of computer-assisted communication: electronic chat rooms. Although electronic chat programs originally supported only text-based communications, fast modems and network connections have enabled the authors of these programs to create a richer user experience through the addition of graphics <ref type="bibr" target="#b14">[14,</ref><ref type="bibr" target="#b16">16,</ref><ref type="bibr" target="#b22">22]</ref>. Participants in these new chat rooms communicate with one another not only by typing text, but also by changing the gesture or facial expression of an avatar, which serves as their graphical representation. In these chat rooms, graphics serves as a first-class form of communication-it is essential, not merely ornamental.</p><p>Considering the importance of graphics to modern chat rooms, it is a true failing that these programs provide only textual history transcripts. Histories are crucial in chat programs, since participants commonly interleave several tasks while chatting on-line. For example, people often participate in chats while writing documents, taking care of children, compiling programs, or monitoring other chat rooms. Any graphical communication that occurs while a participant is tending to another task is either lost or translated into textual form. Since there is no graphical history of the conversation, it is difficult to share the experience with non-participants, or to review the chat at a later time.</p><p>A second problem with current graphical chat programs is the requirement that participants must spend a significant amount of time doing things other than chatting. Most graphical chat programs require that participants navigate the room (or world), looking for an interesting conversation. Gestures must be specified either by hitting memorized function keys, or navigating menus or buttons. Care must be taken not to obstruct the view of other avatars, or to keep them in view. In 2D chat rooms avatars often overlap, and in 3D rooms they can accidently move behind or between other participants in the conversation.</p><p>A third aspect of graphical chat programs that can be improved upon is the relatively static nature of the graphical presentation. Although some chat rooms have animated backgrounds, the participants tend to see the same exact scene composition, at the same exact point of view, unless they or others move. Much can be done to make the view and scene composition more dynamic, and to make them reflect and enhance aspects of the conversation.</p><p>To address these problems, we have developed a new graphical representation of electronic chat rooms, based on the visual conventions of comics. Comics have a very rich tradition, and a distinctive, compelling, and entertaining visual vocabulary. Nearly everyone is familiar with the comic form, and many of its conventions have become second nature, even to the few that rarely read comics. Many of the same visual conventions are shared by comics throughout the world, which is important when choosing a graphical presentation for chat rooms on worldwide electronic networks.</p><p>We have built a system, called "Comic Chat," that automatically generates comics to depict on-line graphical chats. Relying on the rules of comic panel composition, this system chooses which avatars (presented as comic characters) to include in each panel, determines their placement and orientation, constructs word balloons of multiple types, and places these word balloons according to the rules for proper reading order. The system also chooses an appropriate camera zoom factor for each panel, decides when to begin a new panel, and selects default gestures and expressions that the participants can override. To make the chat rooms more lively and fun, Comic Chat can adjust the background or scene elements to reflect the topic of the conversation. All of the comics appearing in this paper were generated automatically by the Comic Chat system. In several instances, we felt it important to show examples of what can go wrong in constructing comics, and in these cases we generated comics by disabling components of the system.</p><p>Although the origins of comics are very old, this project was undertaken to coincide with the centennial of the modern comic strip, as commonly measured from the publication of Richard Outcault's "Yellow Kid," first appearing in 1895 in the New York World <ref type="bibr" target="#b10">[10]</ref>. This past year, the comic strip centennial has been celebrated in the U. S. with a set of commemorative stamps, the opening of the National Gallery of Caricature and Cartoon Art, and even a series of textual chat room discussions with professional comic artists <ref type="bibr" target="#b11">[11]</ref>. We consider it a fitting time to explore how on-line communications might benefit from the comic strip.</p><p>The next section describes related work. Section 3 explains the methodology that we used to select the features of comics to automate in our system. Section 4 describes how Comic Chat decides which characters to include in each panel, and how it positions and draws them. Issues related to balloon construction and layout are covered in Section 5. Section 6 addresses other important considerations in constructing panels. Section 7 discusses implementation issues. Several examples of our system's output are provided in Section 8. Finally Section 9 presents our conclusions and describes possible directions for future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">RELATED WORK</head><p>Some of the best analyses of the visual language of comics have been written by comic artists. Both McCloud <ref type="bibr" target="#b13">[13]</ref> and Eisner <ref type="bibr" target="#b4">[5]</ref> authored excellent books on the subject. Several comics have been published electronically, some of which use techniques like colortable animation and staged presentation, to achieve effects beyond the scope of traditional comics <ref type="bibr" target="#b3">[4]</ref>. Other commercial software programs allow people to author their own comics <ref type="bibr" target="#b15">[15]</ref>. However, these programs are essentially drawing programs that allow users to assemble comics from clip art-they do not attempt to automate the process of comics production.</p><p>Several computer graphics researchers have built systems to produce illustrations automatically that satisfy a specified goal. Feiner's APEX system generates 3D illustrations depicting the steps of tasks, such as equipment repair <ref type="bibr" target="#b5">[6]</ref>. Mackinlay's APT system determines the form of graph that best represents a given type of quantitative information, selecting which graphical attributes are best suited to represent that information <ref type="bibr" target="#b12">[12]</ref>. The IBIS system, developed by Seligmann and Feiner, employs a generate-and-test mechanism with backtracking, to create illustrations that satisfy a given communicative intent <ref type="bibr" target="#b19">[19]</ref>. Comic Chat also automates the construction of illustrations, but it is more special purpose, relying on domain-specific techniques.</p><p>Cassel et al. developed techniques to automate gestures and facial expressions in the animation of conversations between animated characters <ref type="bibr" target="#b2">[3]</ref>. Their system relies on a database of facts, goals, and beliefs, not only to generate aspects of the characters' animations, but also to generate the text spoken by the characters. Comic Chat also generates default gestures and facial expressions for its characters, but because the system receives unconstrained textual input, it is difficult to produce sophisticated inferences about the conversation to control gesture and expression. Instead, Comic Chat uses simple rules, based on comics and on-line chat conventions, to choose default gestures and expressions, which can be overridden by the user.</p><p>Research aimed at achieving aesthetic, non-photorealistic images is receiving increasing interest in the graphics community. Haeberli developed techniques to produce artfully painted pictures interactively from image data <ref type="bibr" target="#b7">[8]</ref>. Winkenbach and Salesin <ref type="bibr" target="#b21">[21]</ref> and Salisbury et al. <ref type="bibr" target="#b18">[18]</ref> devised methods for generating pen and ink illustrations from 3D models and images. Today, comics are also gaining recognition as an artform, and although a few comic artists are beginning to use computer-based tools, comics have not previously been targeted for computer graphics research.</p><p>A benefit of depicting chat sessions in comics form is that the primary visual representation also serves as a history transcript. Kurlander's editable graphical histories also represent the history of graphical user interaction as a series of panels <ref type="bibr" target="#b8">[9]</ref>. However, that history representation adopts no other conventions from the visual language of comics.</p><p>Comic Chat was motivated by the appearance of several graphical chat programs in recent years. Habitat, built by members of Lucasfilm's game group <ref type="bibr" target="#b16">[16]</ref>, is a virtual multi-user world, rather than simply a chat system, although providing a new means for social interaction and communication was one of the project's major goals. Habitat places a very simple word balloon over the head of the last avatar to speak. When the next avatar speaks, the earlier word balloon loses its tail and scrolls upwards. As avatars move about, their balloons do not follow. Balloon construction in Habitat is very coarse, only slightly reminiscent of comics, and no real layout is performed. Yet Habitat was revolutionary in showing that online graphical virtual communities are not only possible but worthwhile, and later incarnations of the system are popular today, including Fujitsu Habitat in Japan, and CompuServe's WorldsAway.</p><p>More recently, several companies have deployed three-dimensional graphical chat rooms. In Worlds Inc.'s WorldsChat, participants navigate a virtual space station, and see the environment from either a first-person or third-person perspective <ref type="bibr" target="#b22">[22]</ref>. All communication, however, is textual. On the Microsoft Network, V-Chat (for "Virtual Chat") provides several 2D and 3D environments. Participants can gesture and change their avatars' expressions, as well as type text to one another <ref type="bibr" target="#b14">[14]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">METHODOLOGY</head><p>To help us determine how to best represent chat sessions in the comic form, we first gathered numerous chat transcripts from an on-line service. We then read through the transcripts and annotated them with any information that we felt a computer would be able to extract easily, and that might be useful in composing the strips. Jim Woodring, a professional comic artist, took these transcripts, and illustrated a representative session.</p><p>Prior to seeing Woodring's illustrations, we were concerned that an effective comic chat representation might need to reflect deep semantics of the conversation, semantics beyond the reach of current natural language understanding technology. After reviewing the prototype illustrations, it became clear that we could produce interesting comics with only very limited semantics, and without any natural language processing. Comic styles vary so dramatically that a single system capable of producing them all is inconceivable. Instead, we undertook to mimic the style of Woodring's prototype illustrations as precisely as possible in the Comic Chat system, and we designed the architecture so that it could be readily extended to include additional styles.</p><p>Carefully reviewing the artist-drawn prototypes, we determined the design elements that require automation. These elements fall under three broad categories: characters, balloons, and panels. The following three sections address each category in turn.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">CHARACTERS</head><p>In our system, comic characters serve as avatars for the chat participants. Participants select their own character from a presupplied list. In composing the panels, several aspects of the characters need to be determined, including their gestures and expressions, which characters to draw, and their positions and orientations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Gestures and expressions</head><p>We refer to gesture as a character's body pose, and expression as its facial pose. Most of the characters in Comic Chat have a set of heads that can fit on a set of bodies; hence their expressions can be independent of their gestures. Since one of our design goals is to minimize the amount of user interaction necessary, Comic Chat picks default gestures and expressions, which the user is free to override.</p><p>When a participant types in dialogue for his or her character, Comic Chat uses this dialogue to determine a default gesture and expression. An analysis of chat transcripts revealed a number of chat-specific conventions that we could effectively exploit, and our comic artist suggested a few additional indicators: Initially, we had thought that simple punctuation would be a much better indicator for expressions in comics (for example, a "?" for questioning, or a single "!" for exclaiming). However, typically punctuation is an indicator of fairly subtle expressions, and such subtlety tends to get lost in comics. In contrast, characters pointing and waving, which occur relatively infrequently in real life, come off well in comics.</p><p>Note that since gesture and expression can be controlled independently, multiple indicators can be extracted and used from the same input. For example, "I can't make it :-(", results in a character pointing to itself and frowning. Since multiple indicators can be extracted from a single input, they may also conflict. For example, "Hi Sue, how are you?", would suggest that the character both wave and point outward. Since constructing composite gestures from many individual 2D bitmaps of body parts (left arm pose, right arm pose, etc...) makes for a nearly impossible art authoring process, Comic Chat instead uses a prioritization scheme to choose the most important gesture.</p><p>When no expression or gesture indicators are found in the utterance, the system chooses a default neutral expression and gesture.</p><p>The system has multiple neutral expressions and gestures, and cycles through these to increase the visual richness of the comics produced. Often there are multiple versions of other expressions and gestures, too. Participants can see the system-selected expression and gesture for their character as they enter text. If they would prefer to override these, they can do so with a user-interface widget that we call an emotion wheel.</p><p>The emotion wheel is a circle, with emotions distributed along its perimeter: coy, happy, laughing, shouting 1 , angry, sad, scared, and bored. At the center of the circle is neutral, and the further from the center, the greater the intensity of the emotion. The emotion wheel is similar to color choosers that distribute fully-saturated hues along the perimeter and have a shade of gray at the center. A nice aspect of the emotion wheel is that although emotion type and intensity are controlled with a single mouse movement, the results are still very intuitive.</p><p>Figure <ref type="figure" target="#fig_0">1</ref> shows the emotion wheel, along with the character feedback pane from Comic Chat's user interface. Initially, in Figure <ref type="figure" target="#fig_0">1a</ref>, the control is at the center, and the character is in a neutral pose. In Figure <ref type="figure" target="#fig_0">1b</ref>, the character becomes slightly angry, as the control is moved towards the "angry" direction on the perimeter. The character becomes much angrier in Figure <ref type="figure" target="#fig_0">1c</ref>, as the control is moved further toward the perimeter. Emotions can affect both expression and gesture, as seen in Figure <ref type="figure" target="#fig_0">1</ref>. Having both expression and gesture contribute to the portrayal of an emotion can provide many more shades of an emotion, given a limited supply of art.</p><p>In comics as in life, intense emotions can turn to actions, so it may make sense to add actions to the emotion wheel as well. For example, if the character becomes extremely angry, he or she might punch another. While this may be amusing at first, we fear it would become overly disruptive.</p><p>Actions that do not correspond to emotions, such as waving and pointing, are not accessible from the wheel. Instead, users can invoke them by mousing on the target character in any panel, and 1. Technically, shouting is not an emotion, but an action. However, we have found that it works best to include it on the wheel. then choosing the action from a pop-up menu. Since much of communication is non-verbal, Comic Chat allows gestures and expressions to be transmitted with or without accompanying text.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Characters for inclusion</head><p>Only about five characters can fit in one of our panels, and as in television and film, it is best not to show every character in every shot. It is, however, critical to show characters whenever they are speaking. Professional comic artists break this rule extremely rarely, and then typically only to make a stylistic statement. Figure <ref type="figure" target="#fig_1">2a</ref> shows an example of breaking this rule.</p><p>If a character starts speaking to someone new, it is also important to include the character (or characters) being addressed. Once the addressee has been established, he or she can optionally be omitted from subsequent panels. When a participant reacts to what is said with either a gesture or expression, the system must show this as well.</p><p>When new characters enter the chat world, they are shown immediately, whether or not they say something. This makes it clear to the other participants that they have someone new monitoring their conversation, as well as someone new with whom they may wish to speak.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Position and orientation</head><p>Once it is determined which characters should be included in the panel, the next step is to position the characters and determine the direction they should face. In comics, as in life, people talking to each other tend to face one another and be situated together. Hence, the characters in Figures <ref type="figure" target="#fig_1">2b</ref> and<ref type="figure" target="#fig_1">2c</ref> are poorly arranged, and Figure <ref type="figure" target="#fig_1">2d</ref> presents a better configuration. Of course, this rule suggests that it is important to know who is speaking to whom when rendering a conversation as comics.</p><p>Since the intended recipient of an utterance is not always apparent, participants in textual chat rooms often follow the convention of addressing each of their statements to particular individuals. Comic Chat looks for the nicknames of each of the chat participants in every utterance and tries to infer who is being addressed. (The nickname of a character appears whenever the cursor is placed over a character.) Alternatively, the user can also make the addressees explicit by selecting them with the mouse. Since there is a great deal of coherence in who is talking to whom in a conversation, this is not a significant hassle for the participants, and it also allows us to provide an option to hide all utterances not explicitly addressed to a specific participant. If someone chooses not to address their comment to specific individuals, it is interpreted as a general statement to the group, and the character is ideally made to face as many participants as possible.</p><p>We have constructed an evaluation function that considers these criteria, as well as some additional ones, and returns a lower value for better layouts. Keep in mind that the actual numbers in this function are arbitrary, but the function does capture the criteria we feel are important as well as the relative significance of the criteria. Let C be the set of characters to be included in the panel. Let a and b range over every member of C. We search for an ordering and orientation of the characters that minimizes the sum:</p><p>The Facing function penalizes conversational pairs in which the characters do not face one another or are not proximal. It is the sum of the numbers on the left whose predicate on the right is true:</p><p>4: if a has not addressed his utterance, and is not facing b.</p><p>2: if a has not addressed his utterance, and b is not facing a. 4: if a has addressed his utterance to b, and b is not facing a. 40: if a has addressed his utterance to b, and a is not facing b. 4n: if a has addressed his utterance to b, and the number of characters between them is n.</p><p>The Neighbors function discourages the system from shuffling the positions of characters from panel to panel. For each character in the sequence, we consider the characters to the left and the right, and for each of these that is different from the character last appearing there, a single point penalty is assessed. Note that maintaining consistency of positions from panel to panel is the least important consideration, and some comic artists do not feel this to be important at all. Now that we have an evaluation function, we try to find the positions and orientations of the characters that minimize it. Instead of trying every combination, we use a greedy algorithm. After placing the first character, we find which of the two possible positions (and two possible orientations in each position) is best for the second. After placing the second, we consider the three possible positions for the third, and so on. Although this technique is not guaranteed to find the best possible arrangement, it tends to do an adequate job and is fast.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Rendering</head><p>The process of rendering a character consists of composing together a head bitmap with a body bitmap at the proper offset, and flipping them if necessary to make the character face the proper direction.</p><p>There is however one subtle yet important detail. Comic artists that draw complicated backgrounds often leave a little white space around the character. This makes the character much more visible, and makes it "pop" out of the background. We call this area around the character, the halo. Figure <ref type="figure" target="#fig_2">3a</ref> shows two characters drawn without halos, and Figure <ref type="figure" target="#fig_2">3b</ref> shows two characters with halos.</p><p>For each head and body bitmap, we also save a halo mask. It is important to draw both of the halos before drawing either the head or body, since the head's halo must not overwrite any of the body, and the body's halo must not overwrite any of the head.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">BALLOONS</head><p>Word balloons are one of the most distinctive and readily recognizable elements of the comic medium. Most comic artists represent dialogue in word balloons, and these balloons are clearly critical in Comic Chat, since much of the communications between participants is still textual. This section addresses the various types of word balloons, as well as issues in their layout and construction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Types</head><p>The appearance of balloons varies dramatically from artist to artist. Some artists draw balloons as ovals, others draw rectangular balloons. Certain artists omit the traditional balloon outline, and draw a dash from the character to the words. Woodring draws balloons that flow around his text. We felt that these balloons would be ideal for Comic Chat, because every balloon is different, and the resulting variety and visual richness assist in hiding the machine-constructed origin of the panels.</p><p>Even for a given artistic style, there are several types of balloons within the comic vocabulary. Figure <ref type="figure" target="#fig_3">4</ref> shows three different balloon types in the style that we are emulating. The most basic type is the speech balloon, an example of which appears in Figure <ref type="figure" target="#fig_3">4a</ref>. The outline is solid, with the upper part (the body of the balloon) surrounding the dialogue. Emanating from the body is the tail, which points towards the speaker. Figure <ref type="figure" target="#fig_3">4b</ref> illustrates a thought balloon.</p><p>It is similar to the speech balloon, except instead of having a solid tail, its tail is composed of ovals. In some styles, the body of the thought balloon appears more like a cloud.</p><p>Figure <ref type="figure" target="#fig_3">4c</ref> shows a whisper balloon. It differs from speech balloons in having a dashed outline, which is made more visible by the presence of a halo. The text in whisper balloons is often italicized. In chat terminology, whispering means sending a message only to a select subset of the participants, and it is convenient that the comic vocabulary already has a convention for this. A fourth type of balloon is the shout balloon, which has a jagged outline (and is yet to be implemented in Comic Chat). Although other types of balloons do exist, these four are the most prevalent.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Layout</head><p>Before constructing balloons, we run a layout algorithm that determines each balloon's dimensions and placement. In the style that we are emulating, all balloons appear above the tallest character's head. However, additional constraints must be considered as well.</p><p>In comics, the relative placement of balloons determines the reading order. Because it is important in Comic Chat to convey the order of the utterances, we strictly follow the appropriate comic conventions. The rule is that balloons are read in a top-down order, and when multiple balloons are at the same height, they are read from left to right. Note that the order in which balloons are read is independent of where characters are placed in the panel.</p><p>A third point that helps constrain the placement of the balloons in Comic Chat is the style-specific requirement that some part of each balloon float at least partially over the center of the speaker's face.</p><p>We have designed a layout algorithm that takes all of these rules into account, while adding a little randomness to each layout to avoid the appearance of machine-generated regularity.</p><p>We use a greedy algorithm for placing the bodies of balloons; once the algorithm chooses a body location, it never alters it. However, the tail placement is not greedy; instead, the algorithm defers placing the tails until all the bodies have been placed. Note that using a greedy algorithm is suitable for body placement because it is fast, does a good job, and because there is no real need to pack the maximum amount of text into a panel, as cartoonists do not typically do this either. On the other hand, we originally tried using a greedy algorithm for tail placement, with poor results.</p><p>Our layout algorithm makes use of intervals, called routing channels, for ensuring that there will be enough room to place the tails once the bodies are positioned. Routing channels are disjoint-they are a partitioning of the space available for routing balloon tails. Each routing channel is associated with a balloon and indicates where that balloon's tail could be placed. For example, in Figure <ref type="figure" target="#fig_4">5a</ref>, the darkly shaded area is the original routing channel for the topmost balloon, spoken by the center character. This region spans the width of the balloon; initially, the tail could go anywhere in this region and be guaranteed not to intersect another balloon or tail. When a second character speaks (in this case, the leftmost character), the first routing channel is decreased in size in order to accommodate the second balloon, as shown in Figure <ref type="figure" target="#fig_4">5b</ref>. The third balloon, in its original position, completely covers what remains of the first routing channel, leaving no place for the first balloon's tail. Our algorithm recognizes this situation and shifts the third balloon right in order to leave enough space for the first balloon's tail. The final routing channel for all three balloons is shown in Figure <ref type="figure" target="#fig_4">5c</ref>.  The following procedure computes the horizontal placement for an array of n balloons, and sets up the routing channels R 1 ,...,R n . It returns the number of balloons that is placed successfully.</p><p>function PlaceBalloons(B, R, x, T) for j = 1 to n do w j := FindWidth(B j ); R j := [x j -w j , x j +w j ] for i = 1 to j-1 do: R j := MaxAllowable (R i , x i , R j , x j ); end for if width (R j ) &gt;= w j then R j := Position (B j , R j ) else if not SqueezeBalloon (R j , T j ) then return j-1; end if end if for i=1 to j-1 do R i := ReduceChannel (R i , x i , R j , x j ) end for end for return n end function</p><p>The PlaceBalloons function loops through each balloon, placing them one at a time. Let us assume that balloons B 1 through B j-1 have been placed, and let's look at how to place balloon B j . The first step is to choose a target width for the balloon (described in detail later), and set the largest possible routing channel that would allow the balloon's horizontal extent to pass above the center of the character's face.</p><p>Next, we trim the routing channel R j just enough to ensure that all of the previous routing channels R 1 ,...,R j-1 remain wide enough to support a tail. If the resulting routing channel R j is wider than the target width, then we have to choose a horizontal position for the balloon in the routing channel (we do this randomly); we then set the routing channel to be the horizontal extent of the balloon. Otherwise, we attempt to squeeze the balloon into a narrower channel than the original target width. If the amount of text in the balloon is too large to fit, then we give up and return the number of balloons previously placed. Finally, we reduce all of the previous routing channels to accommodate the new one.</p><p>This describes the heart of the algorithm. All that is left are the details. To choose the target width, we initially estimate the area that the body will cover, by computing the area of a single typeset line, and scaling it up by a factor of a third to account for linebreaks and leading. If the line is short, it should not be broken into multiple lines, and we assume a height of one text line. Otherwise, we determine a conservative estimate of the allowable height of this balloon by calculating the distance from the bottom of the lowest previously placed balloon to the bottom of the rectangle in which balloons can be placed. The minimum allowable width of the balloon text is the maximum of the widest word, and the balloon area divided by the allowable height. We randomly select a width between this minimum and the width of the panel.</p><p>The function below is used to trim the routing channel R j just enough to ensure that routing channel R i remains wide enough to support a tail. It ensures that the width of routing region R i is at least t, and that R i continues to contain x i :</p><formula xml:id="formula_0">function MaxAllowable (R i , x i , R j , x j ): R := R j if x i &lt; x j then R.l := max{R i .l + t, x i } else R.r := min{R i .r -t, x i } end if return R end function</formula><p>Finally, the ReduceChannel function reduces the interval R i so that it no longer overlaps R j :</p><formula xml:id="formula_1">function ReduceChannel (R i , x i , R j , x j ) R := R i if x i &lt; x j then R i .r := min{R i .r, R j .l} else R i .l := max{R i .l, R j .r} end if return R end function</formula><p>As mentioned earlier, the above algorithm finds the horizontal placement of a set of balloons. Next we calculate the vertical place- ment. The rules for proper reading order require that the new balloon be no higher than the bottom of any balloons already placed to its right, and no higher than the top of any balloons already placed to its left. We place each balloon as high as possible, such that proper reading order is maintained.</p><p>If the function fails, at least one balloon could not be successfully placed in the current panel. We check to see if the balloon can fit in a panel by itself. If it cannot, we break up the text of the balloon into smaller balloons that do fit the panel size constraint, and add ellipses to each of the new balloons to indicate that a split occurred.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Balloon body construction</head><p>Since the bodies of our balloons flow around the text that they contain, the first step of constructing balloons consists of computing the layout of this text. The artist we are emulating typically centers text in word balloons, so we first compute word breaks and then center the text on each line.</p><p>Because our goal is to create balloons that wrap smoothly around text, it makes sense to construct the bodies of these balloons with splines. After experimenting with cardinal splines and B-splines, we chose the latter, since they produce the best effect. Our artist draws moderately sharp bends in his balloon outlines, which we were able to mimic using a high B-spline tension of 5.0. When comic artists draw balloons, they always leave a margin between the text and the balloon outline, so we expand the boundaries of the text lines outward before computing the spline.</p><p>Our original attempt at balloons appeared amoeba-like, following the text too closely, responding to its every turn. We prefer balloons that flow around the text, but do not draw too much attention to themselves. In studying a set of sample balloons drawn by our artist, we determined that he avoids this problem in two ways. First, he never dips the balloon inwards towards the text on one line, just to move outwards again on the next. Second, he tends not to shift the balloon outline inwards or outwards by very small increments-instead he responds only to larger changes in the text outline.</p><p>We implemented these two additional rules, and the resulting balloons were much improved, yet still inferior to balloons that we wished to emulate. The large remaining difference between our balloons and Woodring's was the lack of small-scale perturbation in the outline. Whenever there is a long segment of the outline that does not bend in or outward with the text, Woodring adds small, low frequency waves to give the balloon additional richness. We have been able to mimic this effect by placing additional control points along these large segments, which alternately move towards and away from the text. The resulting balloons produced by Comic Chat faithfully capture Woodring's style, and examples of these balloons appear in figures throughout the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Balloon tail construction</head><p>Now that we have placed and constructed the bodies of the balloons and computed routing channels for the tails, it is time to construct the tails themselves. The tails of speech and whisper balloons are composed of arcs or straight segments, and the tails of thought balloons consist of ovals forming either an arc or a line.</p><p>The best looking balloons have tails emanating from under the bottom line of text. Depending upon the placement of the characters and balloons in a panel, it is sometimes necessary to choose a nonoptimal tail connection point, as comic artists do from time to time.</p><p>To choose the connection point of a tail, we first see if a large enough part of the last line of text spans the routing channel. If so, we choose a location further than a specified distance from the edge of the routing channel, to insure that the tail will not be exactly adjacent to other balloon bodies or tails. Failing this, we attach the tail to a piece of the balloon within the routing channel, at a small hori-zontal distance from the center of the speaking character's head. This allows us to give the tail a definite arc, but not an arc that will span diagonally over a large part of the illustration.</p><p>We construct balloon tails so that they come to a point at roughly the same height, (which of course must be below the lowest balloon), and always at least in the lowest third of the region reserved for balloons. Since the best balloon tails head directly and clearly toward the speaker, it is preferable not to have tail arcs cross over the head of the character responsible for the balloon. In our comic style, tails emanating from a part of the balloon to the left of the speaker curve counterclockwise and end above the center of the speaker's face. Tails beginning to the right of the speaker curve clockwise and end at the same point.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Rendering</head><p>Rendering a balloon is simply a matter of filling its interior (to hide a background that was drawn first), scan-converting its outline, and drawing the text. There are two important details worth mentioning. Whisper balloons have halos, and these are easily rendered by initially scan-converting the outline of the balloon with a thick, solid, white pen, before rendering the true outline with a smaller, black, dashed pen. Also, most comic artists draw balloon text in allcaps, with a very distinctive (though varying) comic lettering. We also display the text in all-caps, no matter how it was typed. A wide variety of comic fonts is available commercially and as share-ware.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">PANELS</head><p>Several additional issues should be taken into account when composing and rendering panels. These include choosing when to begin a new panel, adjusting the zoom factor of the virtual camera, and adding semantic elements to the panels.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Panel breaks</head><p>As participants specify new dialogue and body poses, Comic Chat proceeds to redraw the last panel, incorporating this additional information. At some point, however, it is necessary to start a new panel, and Comic Chat has several rules for choosing when to do so.</p><p>First, Comic Chat always begins a new panel whenever the balloon layout algorithm cannot successfully fit an additional balloon in the panel.</p><p>A second rule is that Comic Chat always starts a new panel whenever the additional input would result in too many characters in the current panel. We limit the number of characters per panel to five, since facial expressions are otherwise difficult to read. In the current implementation, Comic Chat will not draw more than one balloon for a character in a single panel, so multiple utterances from a given character is also reason to start a new panel.</p><p>Third, we also start a new panel whenever rendering the new data in the current panel would result in a loss of information. For example, if a participant specifies two different facial expressions for his or her character, then these two expressions cannot be represented in the same panel.</p><p>Finally, since we believe it desirable to have the system occasionally draw a single character in a panel, we also will break to a new panel with a given probability (15%) whenever the first utterance of the panel is longer than a few words.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Camera zoom</head><p>If movies and television were always shot with the same camera parameters, they would quickly become visually tedious, and though comics technically do not have cameras, it is still important to add variety by changing the scale at which characters and the back-ground appear. Word balloons are unaffected by the virtual zoom factor.</p><p>As in the movies, it is often important to have an establishing shot.</p><p>Whenever a new person enters a chat room, that person sees a panel showing the immediate surroundings. From time to time (about every 15 panels), we remind participants of their surroundings by generating another establishing shot. Other times, we pull in as close as possible, with the following caveats. First, we will not zoom in so far as to cut off a character at the neck; it nearly always looks better to include part of the character's shoulders. Second, we will not let an important character (one that we decided earlier must be included in the panel) be cut by the sides of the panel. Third, it is also best not to cut characters off at the ankles. In such cases it is better to pull back a little, and show the characters in their entirety. Some comic artists also prefer not to cut off characters at their knees either, but this is far from a universal rule, and we currently allow it.</p><p>Subject to the above restrictions, we pull in to the tightest shot possible. Since the number of characters selected to be included in the panels varies, as discussed in Section 4.2, the scale chosen for the panels also varies, contributing to the resulting visual richness.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Semantic elements</head><p>The pictures in human-drawn comics often reflect the words and stories that the comics tell. Since it is impossible given the current state of natural language technology to extract the semantics of arbitrary chat text, it is also impossible to automatically represent the meaning of this dialogue in pictures. However, things can still be done in composing the comics panels to reflect very simple semantic elements. In fact, we have already discussed how simple gestures and expressions can be selected automatically. Comic Chat reflects semantics in additional ways.</p><p>There is a collection of topics that seem to come up repeatedly in chat sessions. For example, where people are from, what they do for a living, sports teams, pets, and kids are all very popular topics. For each of these common topics, we can define keywords to look for, which when found alter the composition of the scene. Figure <ref type="figure" target="#fig_5">6</ref> shows three different ways that we change the panel composition whenever "Ohio" is mentioned. In Figure <ref type="figure" target="#fig_5">6a</ref>, the background is changed to a map of Ohio for the duration of a single panel. Comic artists often use such non-realistic, representational backgrounds <ref type="bibr" target="#b13">[13]</ref>. A disadvantage to this approach is that it dramatically increases the amount of art necessary to run the application, but it is still reasonable if the user has a CD-ROM drive. A second approach is shown in Figure <ref type="figure" target="#fig_5">6b</ref>, where instead of changing the entire background, a new element is added to an existing background.</p><p>Here we draw a banner for the soon-to-be-former-Cleveland Browns, which appropriately states, "Go Browns!"</p><p>In Figure <ref type="figure" target="#fig_5">6c</ref>, we introduce a little meta-character at the bottom of the panel that makes smart-allecky remarks. Our comic artist refers to him as the "Greek Chorus". Here, in response to Ohio being mentioned, he asks "What's round on the ends and hi in the middle?" This character's size and placement and its balloon position distinguish him from human participants.</p><p>The beauty of the keyword approach is that it tends to work well, independent of the meaning of the entire sentence. For example, it is fine to show a map of Ohio whether a participant said "I was born in Ohio," "I've never been to Ohio," or "My plane got stuck in Ohio." A problem with this approach is that it requires a large effort to generate enough pictures and clever remarks to have reasonable coverage. Information communicated between clients includes indices of the specific bitmaps used, as well as the symbolic gestures and expressions. When a receiving client has the same character art used by the sender, it can simply consult the bitmap indices to render the exact pose chosen by the sender. However, if the receiver does not have the same character art, the symbolic gesture and expression information is applied to a different character that does reside on the system to yield a pose with the same intent.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">IMPLEMENTATION</head><p>Comic Chat has an extensible rule set for inferring a pose from typed text. End users can define their own rules. These rules are only applied to the text that the sender types, and the resulting pose information is communicated to other clients. However, when a message is received from a text-only client, the rules are applied to that message as well to assign a reasonable gesture and pose to the text client's character.</p><p>Each Comic Chat client makes its own panel composition decisions, which are not communicated from client to client. Hence, the participants in a single conversation can see different panels representing the same communications. Although on the surface this may seem to be a poor choice, it actually makes panel display more flexible, because each participant sees a custom view of the conversation. Currently, there are several factors that affect this custom view. First, participants can customize their panel size, and since more conversation fits in larger panels, this affects panel composition. Also, because Comic Chat displays an establishing shot for new participants, the panel appearance can differ according to when the participant joined the chat. In addition, individuals can whisper to one another, and these utterances appear only to those involved.</p><p>Comic Chat works as a standalone application or in conjunction with Web browsers. People can place pointers to chat rooms on their Web pages, and clicking on such a pointer will automatically launch Comic Chat to the chat room. Because it was written as an ActiveX Document <ref type="bibr" target="#b20">[20]</ref>, Comic Chat appears as a dynamic Web page within the window frame of browsers that support this interface, such as Microsoft Internet Explorer 3.0.</p><p>Performance of Comic Chat meets our original goal of requiring less than a second to compose and draw panels on a Pentium class machine. The background and character art are kept resident on each client machine, so that they need not be transmitted over the network. Artwork for a single character can vary in size according to the size and color depth of the bitmaps, as well as the number of poses provided. We have found 50 KBytes (compressed) to be sufficient for representing a character with ten to fifteen head and body drawings. New characters and backgrounds can be loaded dynamically.</p><p>Although we focused much of our efforts on recreating a particular comics style, the system architecture was designed to allow new styles to be plugged in. Comic Chat has an object-oriented structure, and includes classes for comics pages, panels, balloons, characters, character poses, and backgrounds. Elements of our artist's style are encapsulated in sub-classes of these. However, it is important to note that large amounts of effort went into defining these sub-classes, so reproducing additional artists' styles will be easier in the future, yet far from trivial.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">EXAMPLES</head><p>This section shows three different types of chat interactions depicted by Comic Chat. The first, Figure <ref type="figure" target="#fig_6">7</ref>, is an ordinary chat exchange between two of the authors. It contains six panels of comics, including a title panel. The title panel lists the most active participants (both of them in this case), and this information is also available interactively. All aspects of these panels, including character placement, gesture and expression choice, balloon construction and layout, panel breaks, and panel zoom, were chosen automatically by the system.</p><p>The second example, Figure <ref type="figure" target="#fig_7">8</ref>, shows one person's interactions with a bot. Bots are simple computer programs, often masquerading as humans on chat channels. In some cases they perform useful functions, in others they exist to irritate other chat participants. One conversational bot is loosely modeled after the Eliza program, originally written by Joseph Weizenbaum at MIT to mimic a human psychoanalyst <ref type="bibr" target="#b1">[2]</ref>. By joining an Eliza room, chat users can receive free (and valueless) psychoanalytical help. Figure <ref type="figure" target="#fig_7">8</ref> was generated by a volunteer from a Cub Scout troop, getting a demonstration of Comic Chat. The Cub Scout appears on the left, Eliza appears on the right. We halted the demonstration after the eighth panel.</p><p>People often use chat programs for role playing and interactive fiction. Figure <ref type="figure" target="#fig_8">9</ref> is an excerpt from such a gathering on the Internet. The participants were all using textual chat clients, and their dialogue was rendered using Comic Chat. Note that the third panel of Figure <ref type="figure" target="#fig_8">9</ref> also includes a narration box, an additional comics element supported by our program. Narration boxes help to describe what is taking place in a panel. Balloons can be placed to the right and below the narration box, according to the algorithm presented earlier. IRC clients typically support a special kind of message to indicate what a participant is doing. Comic Chat looks for such messages, and places them in narration boxes. Other kinds of information could be placed in narration boxes as well, such as who is entering and leaving. The character wearing a tie in this figure is in charge of the role playing game, and is providing narration through dialogue that is rendered in balloons. Much of this could be placed in narration boxes to produce a different effect.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.">CONCLUSIONS AND FUTURE WORK</head><p>The panels produced by the methods described in this paper are acceptably composed according to comic conventions. Jim Woodring is very pleased with the results in general, and occasionally points out panels that (he claims) he would be proud to have drawn. However, we feel that reproducing the creativity and variability of a human comic artist, particularly one of Woodring's abilities, is in all practicality an unachievable goal. Nevertheless, people seem to take delight in the output of Comic Chat, and we look forward to performing user studies to compare Comic Chat to other graphical chat systems.</p><p>There are still numerous additional features that we would like to add to the system. Professional comic book artists (in contrast to most comic strip artists) tend to show a great deal of imagination in how they lay out panels on the page. Currently, Comic Chat places square panels regularly on an infinitely long page. To create more variability, we would like to alter the size and shapes of our panels, and lay them out more creatively. This could either be done algorithmically, or by selection from a pool of template pages.</p><p>Although we have distinct locations where characters can enter our comics world (including a room in a house, a pastoral scene, a balcony, a fantasy world, and a pond scene), we should have a mechanism to allow our characters to graphically transition from one scene to another. This could happen when a character decides to join a conversation elsewhere; however, the system itself, to add variety and unpredictability, might choose to move a conversation to a new location. We would also like to make the system capable of showing participants performing various activities, like having tea or swimming in a pond. This need not be under user control, and in fact putting it under user control might be a distraction to the primary chatting activity. Having the system control such activities would add variety and unpredictability, and give the participants even more to chat about.</p><p>One of the innovations of Comic Chat is that it provides a graphical transcript of an on-line conversation in which a person has participated. It could also provide a transcript of a conversation that a person might want to join. In current chat systems, after entering a chat room, prospective participants wait to see if the conversation interests them. This not only creates a distraction for the other participants, but it is potentially a waste of time if the conversation turns out not to be of interest. Instead, we could provide a graphical transcript of conversations for prospective participants to review immediately. We can take this idea further, and intersperse meanwhile panels during gaps in a Comic Chat conversation. These panels   would show snippets of conversations occurring elsewhere in the Comic Chat world (and be labeled "0($1:+,/(", following another comics convention). Of course, there is a potential privacy issue here that needs consideration.</p><p>Using more powerful technology to identify the semantics of the conversation would certainly allow us to generate better comics. Natural language processing systems would allow us to improve our choice of default expressions and gestures for the characters, and would allow Comic Chat to provide additional types of (and better targeted) semantic feedback beyond that described in Section 6.3. Many comic artists emphasize certain words in their balloons by setting them in bold type, and natural language technology could help select which words to make bold.</p><p>Comics are used for a wide variety of purposes other than entertainment, and computer-generated comics can be applied to far more than chat rooms. For example, human-drawn comics have instructed people about history <ref type="bibr" target="#b6">[7]</ref> and the repair of military equipment <ref type="bibr" target="#b0">[1]</ref>. Computer-generated comics could be used for education as well, but they could also serve as a tool in the production of interactive, collaborative fiction, a visual presentation for MUDs and other virtual worlds, and a graphical history of interactions with social or agent-based interfaces. The examples presented in Figures <ref type="figure" target="#fig_7">8</ref> and<ref type="figure" target="#fig_8">9</ref> hint at these possibilities. Automatically-generated comics could be used in computer-based help and instruction. They could also provide a graphical transcript or serve as the primary visual representation for adventure games. The leader of a large computer-supported cooperative work project tells us that he believes computer-generated comics could help people separated in space and time to collaborate on joint projects.</p><p>Comics are a rich form of communication, with a visual vocabulary that most of us have already internalized. They can also be wonderfully entertaining. We have found comics to be ideally suited as a visual representation for on-line chat rooms, but the potential application of comics to other computer-based applications is equally promising. The possibilities are vast, and we look forward to investigating other ways of combining comics and computer graphics.</p><p>A free copy of Comic Chat can be downloaded from our Web site, http://www.research.microsoft.com/comicchat.htm.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. Emotion wheel and three bodies. a) a neutral pose; b) somewhat angry; c) very angry.</figDesc><graphic coords="3,318.52,50.88,238.68,215.76" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>(Figure 2 .</head><label>2</label><figDesc>Figure 2. Three poorly composed panels, and one well-composed panel. a) missing speaker; b) conversational participants face away from each other; c) outer conversational pair is separated; d) well-composed panel.</figDesc><graphic coords="4,54.04,65.16,504.00,122.04" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. Halos. a) characters without halos; b) characters with halos, improving visibility.</figDesc><graphic coords="5,54.04,66.96,240.00,118.56" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4. Three types of balloons: a) speech balloon; b) thought balloon; c) whisper balloon.</figDesc><graphic coords="5,53.08,620.04,243.00,72.96" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 .</head><label>5</label><figDesc>Figure 5. Routing Channels. (a) Lower left balloon requests channel allocation from top balloon; (b) Lower right balloon re- quests channel allocation from top balloon; (c) Lower right balloon shifts right, routing regions successfully allocated.</figDesc><graphic coords="6,63.04,54.84,495.00,147.12" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 .</head><label>6</label><figDesc>Figure 6. Semantic elements. a) map; b) scene object; c) Greek Chorus. (b) (c) (a)</figDesc><graphic coords="8,70.48,45.00,487.56,148.20" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 .</head><label>7</label><figDesc>Figure 7. A page from a session with Comic Chat.</figDesc><graphic coords="10,100.24,55.70,409.90,617.74" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 8 .</head><label>8</label><figDesc>Figure 8. The first panels from a chat session with an Eliza bot.</figDesc><graphic coords="11,54.04,53.91,499.44,248.85" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 9 .</head><label>9</label><figDesc>Figure 9. The beginning of a fantasy role playing quest. Participants are using text IRC clients, monitored by Comic Chat.</figDesc><graphic coords="11,54.04,366.76,499.52,332.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>1. Emoticons: for</head><label></label><figDesc>example, :-) and :-( , indicate happy and sad.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>2. Chat acronyms: a. LOL</head><label></label><figDesc></figDesc><table><row><cell>(Laughing Out Loud), ROTFL (Rolling On The Floor</cell></row><row><cell>Laughing) indicate laughter</cell></row><row><cell>b. IMHO (In My Humble Opinion) results in character point-</cell></row><row><cell>ing to self.</cell></row><row><cell>c. BRB (Be Right Back) results in character waving.</cell></row><row><cell>d. &lt;g&gt; (or &lt;grin&gt;) indicates smiling.</cell></row><row><cell>3. Typesetting: All caps indicates shouting.</cell></row><row><cell>4. Punctuation: !!! indicates shouting.</cell></row><row><cell>5. Greetings: Hi, hello, bye, goodbye, welcome (at beginning of</cell></row><row><cell>sentence), result in character waving.</cell></row><row><cell>6</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>. Self-references: I (at beginning of sentence</head><label></label><figDesc></figDesc><table><row><cell>), I'll, I will, I'm, I</cell></row><row><cell>am, I'd, I would, etc... result in character pointing to self.</cell></row><row><cell>7</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>. Other-references: You (at beginning of sentence</head><label></label><figDesc></figDesc><table><row><cell>), are you,</cell></row><row><cell>will you, did you, don't you, etc... result in character pointing</cell></row><row><cell>to other.</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>Foremost, we would like to thank Jim Woodring for sharing his knowledge of comics, and creating such wonderful art for this project. Rick Rashid has been a great advocate (and occasional hacker). Thanks to George Robertson, Maarten Van Dantzich, Ben Slivka, David Thiel, Dan Ling, Jim Kajiya, and Steve Drucker for helpful comments. Comic Chat is publicly available on the Internet, largely due to the efforts of Linda Stone, Ross M. Brown, Diana Murray, Eric George, Mark Mecham, Bob Tabscott, and Albert Tan. Interaction with members of Microsoft Research and Microsoft's Virtual Worlds Group contributed to both the design and deployment of Comic Chat.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Joe&apos;s Dope: If Ya Gotta Do It</title>
		<author>
			<persName><forename type="first">M</forename><surname>Anderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Do It Right! PS: The Preventive Maintenance Monthly</title>
		<imprint>
			<date type="published" when="1976-02">February 1976</date>
			<biblScope unit="volume">279</biblScope>
			<biblScope unit="page" from="29" to="36" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">The Handbook of Artificial Intelligence</title>
		<author>
			<persName><forename type="first">A</forename><surname>Barr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">A</forename><surname>Feigenbaum</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1981">1981</date>
			<publisher>William Kaufmann, Inc</publisher>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="285" to="287" />
			<pubPlace>Los Altos, CA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Automated Conversation: Rule-based Generation of Spoken Expression, Gesture, and Spoken Intonation for Multiple Conversational Agents</title>
		<author>
			<persName><forename type="first">J</forename><surname>Cassell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Pelachaud</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Badler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Steedman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Achorn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Beckett</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Douville</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Prevost</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stone</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics Proceedings, Annual Conf. Series, ACM</title>
		<meeting><address><addrLine>Orlando, FL; New York</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994">July 24-29, 1994</date>
			<biblScope unit="page" from="413" to="420" />
		</imprint>
	</monogr>
	<note>Proceedings of SIGGRAPH &apos;94</note>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">FREEX #1</title>
		<author>
			<persName><forename type="first">Cd-Romix!</forename><surname>Inc</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993">2961. 1993</date>
			<pubPlace>Torrance, CA 90509</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Comics &amp; Sequential Art</title>
		<author>
			<persName><forename type="first">W</forename><surname>Eisner</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1985">1985</date>
			<publisher>Poorhouse Press</publisher>
			<pubPlace>Tamarac, FL</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">APEX: An Experiment in the Automated Creation of Pictorial Explanations</title>
		<author>
			<persName><forename type="first">S</forename><surname>Feiner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphics and Applications</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="29" to="37" />
			<date type="published" when="1985-11">November 1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">The Cartoon History of the Universe</title>
		<author>
			<persName><forename type="first">L</forename><surname>Gornick</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990">1990</date>
			<publisher>Doubleday</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Paint by Numbers: Abstract Image Representations</title>
		<author>
			<persName><forename type="first">P</forename><surname>Haeberli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH &apos;90</title>
		<meeting>SIGGRAPH &apos;90<address><addrLine>Dallas, TX; New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1990-08">Aug. 6-10. Aug. 1990. 1990</date>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="207" to="214" />
		</imprint>
	</monogr>
	<note>Computer Graphics</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A History of Editable Graphical Histories</title>
		<author>
			<persName><forename type="first">D</forename><surname>Kurlander</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Feiner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Watch What I Do: Programming by Demonstration</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Allen</forename><surname>Cypher</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993">1993</date>
			<publisher>MIT Press</publisher>
			<biblScope unit="page" from="405" to="413" />
			<pubPlace>Cambridge, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<author>
			<persName><forename type="first">J</forename><surname>Lent</surname></persName>
		</author>
		<author>
			<persName><surname>Oh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">What a Time It Was: The Early Days of the Funnies</title>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="16" to="22" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Yellow Kid&quot; Celebrates Century with Hectic Schedule in 1995</title>
		<author>
			<persName><forename type="first">J</forename><surname>Lent</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Witty World: International Cartoon Magazine</title>
		<imprint>
			<biblScope unit="issue">19</biblScope>
			<biblScope unit="page" from="18" to="19" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Automating the Design of Graphical Presentations of Relational Information</title>
		<author>
			<persName><forename type="first">J</forename><surname>Mackinlay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. on Graphics</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="110" to="141" />
			<date type="published" when="1986-04">April 1986</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Understanding Comics</title>
		<author>
			<persName><forename type="first">S</forename><surname>Mccloud</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993">1993</date>
			<publisher>Kitchen Sink Press</publisher>
			<pubPlace>Northampton, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Microsoft Introduces V-Chat Communications for MSN, The Microsoft Network</title>
		<imprint>
			<date type="published" when="1995">Nov. 30. 1995</date>
			<publisher>Microsoft Press Release</publisher>
			<biblScope unit="volume">98052</biblScope>
			<pubPlace>Redmond, WA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Comic Creator. Spark Interactive, 112 W</title>
		<author>
			<persName><forename type="first">R</forename><surname>Montgomery</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Gilligan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Sante Fe</title>
		<imprint>
			<publisher>San Francisco St</publisher>
			<date type="published" when="1995">1995</date>
			<biblScope unit="volume">87501</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">The Lessons of Lucasfilm&apos;s Habitat</title>
		<author>
			<persName><forename type="first">C</forename><surname>Morningstar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">R</forename><surname>Farmer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Cyberspace: First Steps. Benedikt, M</title>
		<meeting><address><addrLine>Cambridge, MA</addrLine></address></meeting>
		<imprint>
			<publisher>MIT Press</publisher>
			<date type="published" when="1991">1991</date>
			<biblScope unit="page" from="273" to="301" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Internet Relay Chat Protocol. Internet RFC #1459</title>
		<author>
			<persName><forename type="first">J</forename><surname>Oikarinen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Reed</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993-05">May 1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Interactive Pen and Ink Illustration</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">P</forename><surname>Salisbury</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">E</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Barzel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">H</forename><surname>Salesin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics Proceedings, Annual Conf. Series, ACM</title>
		<meeting><address><addrLine>Orlando, FL; New York</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994">July 24-29. 1994</date>
			<biblScope unit="page" from="101" to="108" />
		</imprint>
	</monogr>
	<note>Proceedings of SIG-GRAPH &apos;94</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Automated Generation of Intent-Based 3D Illustrations</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">D</forename><surname>Seligmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Feiner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH &apos;91</title>
		<meeting>SIGGRAPH &apos;91<address><addrLine>Las Vegas, Nevada; New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1991-07">July 28 -Aug. 2. July 1991. 1991</date>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="123" to="132" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">The Visual Programmer Puts ActiveX Documents Through Their Paces</title>
		<author>
			<persName><forename type="first">J</forename><surname>Trupin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Microsoft Systems Journal</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="55" to="76" />
			<date type="published" when="1996-06">June 1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Computer Generated Pen and Ink Illustration</title>
		<author>
			<persName><forename type="first">G</forename><surname>Winkenbach</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Salesin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics Proceedings, Annual Conf. Series, ACM</title>
		<meeting><address><addrLine>Orlando, FL; New York</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994">July 24-29. 1994</date>
			<biblScope unit="page" from="91" to="100" />
		</imprint>
	</monogr>
	<note>Proceedings of SIGGRAPH &apos;94</note>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<ptr target="http://www.worlds.net/products/wchat/readme.html" />
		<title level="m">Worlds Chat: Meet Your New Cyberfriends</title>
		<imprint>
			<publisher>Worlds, Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
