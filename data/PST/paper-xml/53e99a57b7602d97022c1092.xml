<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">GROUPKIT A Groupware Toolkit for Building Real-Time Conferencing Applications</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Mark</forename><surname>Roseman</surname></persName>
							<email>roseman@cpsc.ucalgary.ca</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Calgary Calgary</orgName>
								<address>
									<postCode>T2N 1N4</postCode>
									<region>Alberta</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Saul</forename><surname>Greenberg</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Calgary Calgary</orgName>
								<address>
									<postCode>T2N 1N4</postCode>
									<region>Alberta</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">GROUPKIT A Groupware Toolkit for Building Real-Time Conferencing Applications</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">3696D94715EBE9762E1DACC04268502B</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T13:27+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>real-time groupware</term>
					<term>toolkit</term>
					<term>development tools</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper presents our approach to the design of groupware toolkits for real-time work, and how the design is instantiated in our toolkit, GROUPKIT. The design is based on both the technical underpinnings necessary for real-time groupware, and on user-centered features identified by existing CSCW human factors work. We also present three strategies for building GROUPKIT's components. First, an extendible, object-oriented run-time architecture supports managing distributed processes and the communication between them. Second, transparent overlays offer a convenient method for adding general components to various groupware applications, for example supporting gestures via multiple cursors and annotation via sketching. Third, open protocols allow the groupware designer to create a wide range of interface and interaction policies, accommodating group differences in areas such as conference registration and floor control.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>INTRODUCTION</head><p>Real-time computer conferencing applications have been a major focus of groupware development efforts. Often motivated by CSCW research, we have recently seen the creation of numerous systems, such as shared text editors <ref type="bibr" target="#b22">[23]</ref>, freehand sketching systems <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b21">22]</ref>, structured drawing programs <ref type="bibr" target="#b14">[15]</ref>, and group support systems <ref type="bibr" target="#b23">[24]</ref>. Yet construction of these applications is fraught with difficulties. Besides all the normal problems of building single-user applications, the groupware developer must be concerned with technical issues such as synchronization, concurrency, communications, registration and more. The developer must also understand and incorporate the fundamental CSCW human factors issues identified for effective group work. Groupware toolkits are now emerging that address some of these issues. By providing the key components for common groupware needs, the toolkits can reduce development effort, enable rapid prototyping, and increase product quality of multi-user applications.</p><p>Of course, there are many potential groupware applications, and no one toolkit could cover all possibilities. In our case, we are concerned with toolkits that assist in constructing real-time work surfaces -shared visual environments where one user's actions are made immediately visible to other users <ref type="bibr" target="#b10">[11]</ref>. These work surfaces are useful in both face to face and geographically distributed meetings. At its simplest, a work surface is a "What You See Is What I See" (WYSIWIS) space <ref type="bibr" target="#b26">[27]</ref> that conference participants use for creating, importing, displaying, and interacting with their artifacts -usually text and graphics of some sort. Thus work surfaces include generic applications such as shared windows, whiteboards, structured drawing systems, and shared editors. But work surfaces can be far more powerful and specialized than that. For example, WYSIWIS could be relaxed so that people could view the work surface from different perspectives; an example would be a competitive card game <ref type="bibr" target="#b25">[26]</ref>. Specialized applications could expand the notion of work surface to include tools for voting, brainstorming, organizing ideas, and so on. This paper discusses our toolkit design philosophy, as embodied in GROUPKIT. We begin by listing a preliminary set of requirements for groupware toolkits, derived from both human factors work and technical innovations in CSCW. The following section presents an overview of GROUPKIT, with a detailed description of its technical architecture. Examples of three strategies for designing toolkit component are then given.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>TOOLKIT DESIGN REQUIREMENTS</head><p>In this section we propose and defend some of the underlying design requirements we feel are important for a real-time conferencing toolkit. We do not believe this list is complete, nor will every item be necessary for every groupware application. However, we do feel the requirements listed will apply to a wide range of real time conferencing applications, and that they provide a reasonable starting point for discussion. Requirements listed in the first section are human-centered, and those in the second are programmer-centered.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Human-centered design requirements</head><p>Supporting multi-user actions over a visual work surface.</p><p>We believe there are several general but critical activities that people do over a shared work surface, regardless of its contents. Two of these, gesturing and annotation, are described below. a) Provide support for gesturing. Researchers at Xerox PARC studied the use of conventional drawing surfaces by small groups <ref type="bibr" target="#b27">[28]</ref>. A critical finding was that participants frequently gesture over the drawing surface: to enact ideas, to signal turn-taking, to focus the attention of the group, and to reference objects on the surface. Several recent computer systems emulating group drawing surfaces support gesturing with multiple cursors appearing on all displays <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b14">15]</ref>, and their usability studies confirm the ubiquity of gesturing. We believe that gesturing can enhance communication in many diverse types of conferences, and should be supported at the toolkit level. b) Provide support for graphical annotation. The Xerox studies also noticed many instances of annotations made to existing drawings, serving both as gestures (eg underlining text while saying "this one here") and as meta-level notes. Several systems now incorporate graphical annotations of their objects. FREESTYLE users, for example, can verbally and graphically annotate bitmap snapshots; the results can be mailed to others who can then play back the transcript <ref type="bibr" target="#b8">[9]</ref>. Both PR O O F -M A R K S in vmacs <ref type="bibr" target="#b17">[18]</ref>, and the commercial MARKUP application allow comments and markup symbols to be added to written documents. As with gesturing, we believe that real-time group graphical annotation over a work surface is useful in many situations and should be supported by the toolkit.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Structuring group processes during a meeting</head><p>Some researchers believe that groupware should impose a social model of interaction on the group. This is an explicit attempt, based on management theory, to provide methods for keeping the group on task, enforcing roles and commitments, and making the group more efficient and productive. There is certainly controversy between those who believe that social protocol should be determined only by the group members (eg <ref type="bibr" target="#b6">[7]</ref>), by the software (eg <ref type="bibr" target="#b23">[24]</ref>), and somewhere in between (eg <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b13">14]</ref>). We believe that some group process primitives should be provided by the toolkit, accommodating groupware that wishes to control meeting structure. The list below discusses only a few group process requirements. c) Provide various floor control policies. Floor control or turn-taking mechanisms provide a way to mediate access to shared work items. Lauwers <ref type="bibr" target="#b18">[19]</ref> and Greenberg <ref type="bibr" target="#b13">[14]</ref> recommend that systems should "support a broad range of [floor control] policies" to suit the users' needs. Systems such as SHAREDX <ref type="bibr" target="#b9">[10]</ref> and ASPECTS (from Group Technologies) support a few different policies, while SHARE <ref type="bibr" target="#b13">[14]</ref> strives to provide complete flexibility. Floor control can be important in many situations, such as shared screens allowing only serial interaction, or systems following strict interaction models, such as a teacher controlling which students can access the work surface. d) Support different registration methods. Another part of group process controls who is allowed to join the meeting. For some meetings, anyone may be allowed to join. For others only a select group can participate, or perhaps new users must be "sponsored" by an existing user. Sometimes more spontaneous creation of conferences is desired <ref type="bibr" target="#b16">[17]</ref> while other situations require a central facilitator to handle registration <ref type="bibr" target="#b23">[24]</ref>. Toolkits should provide the flexibility to support any reasonable registration process. e) Support latecomers to the conference. A consequence of spontaneous conferences is that all users will not join the conference at the start. Provisions should exist allowing newcomers to join at any time, as well as allowing existing members to leave. Strategies must also be supported to assist the newcomers in "getting up to speed." This may involve simply sending the current conference state to the new user <ref type="bibr" target="#b14">[15]</ref> or providing summary information on how the conference has progressed over its lifetime.</p><p>Integration with conventional ways of doing work. Groupware should not impose a barrier between "individual" and "group" ways of working. For example, the system should provide group members with ready access to their individual work, and allow them to import it to a conference. Additionally, all normal communication channels (eg telephone, email) should be readily available. <ref type="bibr" target="#b3">[4]</ref>, and given the ubiquity of telephones, we should assume that a voice channel is available. While many realtime conferencing systems assume a voice channel is present, they do not explicitly support creating voice links. Ideally, there should be a mechanism in the conferencing system to establish voice conferencing -perhaps automatically when a data conference is started. Similar arguments hold for other channels that may be available such as video links.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>f) Integrate other forms of communication. V o i c e communication is an important factor in most conferences</head><p>g) Allow use of single-user applications. Soon, most computer applications may be designed to support multiple users. Unfortunately, most of today's applications support single users only. There are several reasons why single-user programs should be available in multi-user conference settings. Groupware counterparts to single-user programs may not exist; a person's work may be accessible only through a particular application; people are skilled on particular applications. Conference users should be able to view and interact with single-user systems through shared screen or shared windows eg SHARE <ref type="bibr" target="#b11">[12]</ref> and SHAREDX <ref type="bibr" target="#b9">[10]</ref>. The toolkit should provide shared windows or the means to incorporate other shared window systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Programmer-centered design requirements</head><p>Technical support of multiple and distributed processes. Most groupware, especially for geographically distributed conferences, will require an architecture where multiple (perhaps distributed) processes can communicate with each other. While most operating systems provide process control and inter-process communication, the programmer's job of initiating, maintaining and tearing down processes and their communication channels is a tedious one. As well, state information about sessions may need to survive beyond the lifetime of a single process or meeting.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>h) Provide processes for basic conference management.</head><p>Groupware applications must oversee all conference management, which include activities such as participant registration, initiation and teardown of meeting processes, communications, and so on. Groupware toolkits have placed much emphasis in providing capabilities for conference management eg LIZA <ref type="bibr" target="#b10">[11]</ref>, CONFERENCE TOOLKIT <ref type="bibr" target="#b2">[3]</ref>, and MMCONF <ref type="bibr" target="#b4">[5]</ref>. We too believe that the basic run-time infrastructure for conference management must be supplied by the toolkit. i) Provide a robust communications infrastructure. Any groupware toolkit must provide the communications facilities on which to build conferencing components. At the very least, it must be possible for any process to send messages to specific processes owned by conference users, and it is preferable if a multi-cast facility is available to broadcast a single message to all. Of course, the communications demands will depend heavily on the way the process architecture is determined. The trade-offs between centralized and replicated architectures are welldocumented <ref type="bibr" target="#b19">[20]</ref>, with centralized architectures simplifying concurrency control and replicated architectures being more efficient and robust to machine failure. j) Provide support for persistent sessions. Often computer conferences will span more than a single session, for example decision support meetings <ref type="bibr" target="#b23">[24]</ref>. It is desirable to maintain session state information over the full duration of the conference. There should exist a general mechanism whereby conference objects can be made persistent.</p><p>Technical support of a graphics model. A visual work surface will require graphical and textual primitives. Yet shared graphics require several capabilities that are not present in single user systems. k) Provide primitives to a shared graphics library. Many groupware applications require graphical library primitives for creating multi-user objects such as shared lines, rectangles, circles and text. Greenberg, Roseman et al's discussion of GROUPDRAW <ref type="bibr" target="#b14">[15]</ref> describes technical issues of a shared object-oriented drawing package, and provides their design of an abstract drawing object that can be subclassed into concrete objects such as shared lines <ref type="bibr" target="#b14">[15]</ref>. Similarly, the fine-grained editing of simple graphics and text objects in Bier and Freeman's MMM system gives insight into how shared objects should behave <ref type="bibr" target="#b0">[1]</ref>. Similar extendible graphics libraries should be provided by toolkits, so that programmers can easily create shared interactive graphical objects on the display. l) Provide object concurrency control. Many groupware conferencing systems support access to some type of shared object, be it structured graphics or a text buffer. Concurrency control is often needed to mediate access to the object, for example, two people trying to manipulate the same point on a line. In fact several concurrency schemes have already been implemented in groupware toolkits <ref type="bibr" target="#b24">[25,</ref><ref type="bibr" target="#b25">26,</ref><ref type="bibr" target="#b10">11]</ref>. Concurrency can be achieved through simple locking, transaction mechanisms, or numerous other schemes <ref type="bibr" target="#b7">[8]</ref>. In addition, the degree of concurrency and access to shared objects can be specified through the notion of flexible coupling <ref type="bibr" target="#b5">[6]</ref>. m) Separate the view of an object from its underlying representation. Many single-user graphical systems separate the properties of an object from its view on the screen. Patterson argues that this separation is critical in groupware <ref type="bibr" target="#b24">[25,</ref><ref type="bibr" target="#b25">26]</ref>, and that abstractions should be used to create an interface-independent representation of data. As a consequence, users can have multiple perspectives on the same data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>GROUPKIT</head><p>GROUPKIT is a toolkit a programmer can use to develop real-time computer conferencing applications for geographically distributed or face to face meetings. It provides not only support for basic connectivity, but also support for higher-level human factors concerns. As it is still being developed, we have not yet incorporated all our design principles. However components are provided for flexible policy conference registration, communications support, flexible floor control, and gestural and annotative communication.</p><p>GROUPKIT is written in C++, on top of the INTERVIEWS toolkit <ref type="bibr" target="#b20">[21]</ref>. Applications built using GROUPKIT will run on any machine supporting INTERVIEWS, that is, Unix workstations running X-Windows. GROUPKIT relies on the INTERVIEWS glyph mechanism for its user interface constructs. Glyphs are lightweight objects (similar to widgets in other toolkits) that are composed to make interfaces. The INTERVIEWS Dispatch library -a front end to normal Unix sockets -is used for communications. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Process and Communications Run-Time Support</head><p>GROUPKIT's technical infrastructure is based upon a replicated architecture and communications support, as illustrated in Figure <ref type="figure" target="#fig_0">1</ref>. The infrastructure supports conference registration and the subsequent communication between processes owned by conference participants. This is comparable to the communications support in RENDEZVOUS <ref type="bibr" target="#b24">[25]</ref> and the CONFERENCE TOOLKIT <ref type="bibr" target="#b2">[3]</ref>. The remainder of this section describes the infrastructure components by walking through an example scenario.</p><p>Registration. Suppose a user wants to create a shared drawing surface, perhaps to discuss a design problem with a remotely located colleague. On initiating the GROUPKITbased program, the user must first create a conference. This is done through the Registrar Client, which provides an interface to the central Registrar.</p><p>The Registrar allows the user to create, join or leave one or more conferences. The Registrar Client is responsible for implementing particular registration policies, eg deciding who enters the conference, how they do so, and what the interface looks like. While GROUPKIT allows new Clients to be programmed, it also provides a library of predefined Registrar Clients implementing particular registration policies and user interfaces. One novel aspect of this scheme is that it allows group members to use different Registrar Clients to enter a single conference.</p><p>The Registrar is an independent process (invisible to the user) that maintains a list of all conferences and their users. One central Registrar would exist at each installation. The Registrar itself is policy-free, and leaves it to the Registrar Clients to implement a particular registration policy and to present a reasonable interface to the user. This allows different policies and interfaces to be implemented in order to accommodate group differences.</p><p>Conference Initiation. In our scenario, the user has just requested a new conference through the Registrar Client, which in turn passes the request on to the Registrar. Next, the Registrar Client asks the Coordinator to create a new Conference object. The Coordinator acts as an intermediary between the Registrar Client and application Conferences, permitting multiple conferences (eg sketching and editing applications) to share a common registration mechanism. Its main duties are to create Conferences at the request of the Registrar Client, and to direct requests from the Client to the appropriate Conference.</p><p>The Coordinator then spawns a new process which instantiates a Conference object. It is the Conference object that actually runs the specific groupware application. GROUPKIT provides a generic Conference object, which the developer may subclass to provide extra functionality required by the application. In this case, the generic Conference object is used, along with a programmer-defined glyph (graphical interface) supporting a shared drawing surface.</p><p>Conference Maintenance. Other users can also create Conference objects. As each Conference locates the meeting participants via the Registrar, communications channels will be opened between all Conference objects. Facilities in the generic Conference are provided for exchanging messages with other user processes.</p><p>Communications between distributed processes are maintained by messaging objects. The two types of messaging objects ("Writer" and "Reader") provide a convenient method of communicating with processes owned by remote conference participants. These objects, derived from the INTERVIEWS Dispatch library, provide a primitive Remote Procedure Call (RPC) facility. Writer objects specify messages they can send, while Reader objects provide functions to be called when messages are received.</p><p>Conference Leaving and Termination. As with initiation, conference leaving and termination is handled through the Registrar Client. If a user wishes to leave the conference without terminating it, their Registrar Client sends the delete-user message (Figure <ref type="figure" target="#fig_0">1</ref>) to the Registrar. Some Clients may permit explicit conference termination, allowing any user to terminate the conference, while more typically the Registrar Client for the last user to leave will terminate the conference. This is done by sending a delete-conference message to the Registrar, which will be rebroadcast to any remaining users' Registrar Clients.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Overlays</head><p>GROUPKIT provides components that may be included in any Conference object through an overlay strategy. Overlays are transparent "windows" placed on top of the main application graphics shown by the Conference object. Currently, overlay components have been implemented for gestural communication (via multiple cursors over a surface) and annotative communication (via freehand drawing over a surface). The motivation is that such components could be useful for a variety of groupware applications, as mentioned earlier.</p><p>Figure <ref type="figure" target="#fig_1">2</ref> provides a conceptual picture of adding an overlay for displaying multiple cursors on an existing application graphic. The transparent cursor overlay is written as an INTERVIEWS glyph that overlays any other glyph. Neither the cursor glyph nor the main application glyph need any knowledge of the other. Input events are received by the cursor glyph, which updates cursors as necessary. The event (eg cursor motion) is then passed to the application glyph, to use as needed. The application glyph need not even know the event went through the cursor glyph. As with single-cursor window systems, event-driven drawing operations are performed normally by the application glyph, based on these events, with the cursor glyph sketching the cursors on top of the normal graphics. To incorporate the multiple cursor overlay into an application, the programmer instantiates a CursorOverlay which surrounds the application's graphic. Code in the overlay's constructor allows the CursorOverlay to communicate with remote conference objects and inquire about new conference users. This technique, also used to implement the freehand sketching overlay, seems very promising. Through the composition mechanism, adding overlay components to applications is extremely straightforward. As well, the overlays are kept separate -conceptually and in the code -from the underlying applications. Its strength is that the overlay does not interfere with the underlying graphics of the application, even if those graphics are changing. Because of this, it is a trivial matter to add, for example, annotation capabilities on top of a "live" shared terminal application. Unlike other systems that only allow annotation of screen snapshots (eg MMCONF <ref type="bibr" target="#b4">[5]</ref>), the underlying application can be fully active. It is expected that further research will suggest other components that could be transparently added to a variety of conferences.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Open Protocols</head><p>One design requirement for GROUPKIT is to provide flexible policies where appropriate, allowing group processes to be structured during a meeting, and to accommodate group differences. Open protocols provide a means of implementing this flexibility. They have three components: a controlled object, a controller object, and a protocol describing how the two communicate. The controlled object's behavior does not incorporate any policy determining how its state can be manipulated. Instead, a protocol is defined, and the object will obey any external requests made to it to change its state. The controller is just an external object that implements a particular policy by the requests it sends to the controlled object.</p><p>Currently, two components have been implemented using open protocols, a floor control module and a registration module. We concentrate here on the registration module. Figure <ref type="figure" target="#fig_2">3</ref> shows the message protocol (beside the arrows) between the Registrar (the controlled object) and its Clients (the controllers). Here, the Registrar responds to any request from its clients, allowing any client to ask the Registrar to create a new conference, or conceivably even to delete any user out of any conference. While this does make it possible to create a "super-user" version of the Client, it also provides the flexibility to create any number of other Clients interfacing to the Registrar, without making any changes to the Registrar itself. As examples of this, the implementations of both a free and a restricted registration policy are now described. Under a free registration policy, new users may join any existing conference. The implementation here is straightforward. The Registrar Client sends an add-user message to the Registrar, which is broadcast to the other Registrar Clients in the selected conference. The Registrar Client also requests the Coordinator to create a new application Conference. The Conference makes connections with the other users, and the interaction proceeds normally. In contrast, a restricted registration policy does not permit new users to join an existing conference unless "sponsored" by an existing conference participant. Here, the Registrar Client again sends an add-user message, which is rebroadcast to the other users. At this point, the local Registrar Client does not ask the Coordinator to create a new conference. The remote users are asked by their Registrar Clients if the new user should be accepted. A remote user can accept the new user, and sends them a message, prompting the new user to create the conference as before. If rejected (either explicitly or by timeout), the delete-user message is sent to the Registrar.</p><p>Floor control policies are handled similarly <ref type="bibr" target="#b13">[14]</ref>. Each user has a flag, specifying if their actions should affect the conference or not. Any user can examine or change any other user's flag. A preemptive floor control scheme for serial interaction, where a user can immediately seize control from the current floor holder, can be implemented by setting the local flag to write and setting all others to no-write. The end result is that the local user gains control of the floor until preempted by another user. A ring-passing policy, where the floor may be seized only if it is free (ie the previous floor holder has released it), is implemented by setting the local flag to write only if all others are currently set to no-write. MMCONF <ref type="bibr" target="#b4">[5]</ref> uses a similar strategy for floor control, but manipulates only a single token, thus allowing less flexibility in protocols.</p><p>Again, this strategy seems useful in general. By providing a simple protocol to change states, building new policies becomes a simple matter of expressing the policy's semantics in the language of the protocol.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>BUILDING AN EXAMPLE APPLICATION</head><p>This section describes the steps necessary to build applications using GR O U P K IT. The steps include specifying the application-specific graphical presentation and interaction, initializing objects to send and receive application messages, selecting an application Conference object, and initializing a Coordinator object.</p><p>As an illustration, we describe the construction of a simple multi-user freehand sketching program using the multiple cursor overlay. The interface is similar to GROUPSKETCH <ref type="bibr" target="#b12">[13]</ref>: multiple cursors are always visible, any user can draw at any time, and fine-grained actions are immediately visible on all displays. Note that although GROUPKIT provides a sketching overlay, for illustration we will not use it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Graphical presentation</head><p>The application needs one or more INTERVIEWS glyphs to manage the graphical presentation and user interaction aspects of the interface, as well as any internal data structures. For a freehand sketching application, this involves creating a glyph holding a bitmap, and providing tools (pencil and eraser) that respond to mouse events for changing the bitmap. To incorporate the cursor overlay, the bitmap glyph is "composed within" the cursor glyph.</p><p>Designing this part of the sketching application is comparable to designing a single user version of the group application. There are some general conventions that are helpful to follow, such as separating event handling (cause) and the result of events (effect) into different routines. This facilitates use of common routines for local and remote invocations <ref type="bibr" target="#b14">[15]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Messaging objects</head><p>Writer and Reader objects are used to send and receive application-specific messages. The routines in Writer objects are invoked as a result of local actions, for example, transmitting coordinates of a drawn line segment to the other replicated applications. Callbacks in the Reader objects interpret these messages, usually calling routines in the graphical presentation object to handle requests. In the example, the Reader instructs the sketchpad glyph to draw the line specified in the message. The standard objects must be initialized to include the required callbacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Coordinator</head><p>The Coordinator connects the registration mechanism (via the Registrar Client) to the application Conference objects running as separate processes. Available conference types must be specified to the Coordinator, using the standard X resource mechanisms (ie .XDefaults).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Application Conference</head><p>The application Conference maintains communications channels with other distributed applications. In our example, the generic GroupKit conference has sufficient functionality. The main program instantiates this object, and "attaches" to it the bitmap glyph described earlier, so that the glyph can send and receive messages.</p><p>The Conference is notified when users join or leave. Routines in the base Conference class manage the low-level socket connections between users. However, other classes may be notified when new users join or leave, to manipulate application data structures maintained for each conference user. For example, the cursor overlay uses this information to add or remove cursors as users join or leave.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>FUTURE WORK</head><p>The work presented here should be seen as an initial attempt to formalize the design and implementation of general groupware conferencing toolkits. The design requirements emphasize the important abstractions needed in real-time CSCW applications, and provide a basis for generalizing existing application or toolkit features. The three strategies presented -a run-time process and communication architecture, overlays and flexible policies -should be seen as general strategies that can be used to implement certain design features. It is expected that further design principles and strategies will evolve.</p><p>GROUPKIT has proven to be a flexible platform for testing our ideas. We have already built prototype drawing programs and shared terminals, and we will be constructing more elaborate and robust applications shortly. Currently, several of the design principles have not yet been embodied in the toolkit. Our immediate plans are to address the concurrency control issues, building a layer of support for generic shared graphical objects, that follow ideas presented in <ref type="bibr" target="#b14">[15]</ref>. Ideally, a framework for building domain-specific group graphical editors could be created, drawn from the ideas in Unidraw <ref type="bibr" target="#b28">[29]</ref>.</p><p>Some other work has focussed on blurring the distinction between synchronous and asynchronous groupware, by providing a system that determines the appropriate means of conferencing (synchronous or asynchronous) and makes available various communication channels (text, voice, video). The choices offered the user depend on environmental information (ie who is currently around, what communication channels are available). The registration mechanisms in GROUPK IT provide the flexibility to implement such a scheme.</p><p>Groupware toolkits still have a long way to go to catch up to their single-user counterparts. We look forward to the day when all toolkits will incorporate multi-user features, and its interface components (such as control panels and editing widgets) have multi-user capabilities built into them. When that day comes, the artificial distinction between single and multi-user systems will disappear.</p><p>Note: GROUPKIT will be available for anonymous ftp by conference time, from the Department of Computer Science, University of Calgary (cpsc.ucalgary.ca).</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. Communications infrastructure of GROUPKIT, showing message passing between objects. Here, objects owned by one user (rightmost Registrar Client, Coordinator, and Conference) interact with objects owned by another user, as well as the central Registrar. Small font text indicates the message passing protocol.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. Adding a multiple cursor overlay.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. Registration Protocol.</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">MMM: A User Interface Architecture for Shared Editors on a Single Screen</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">A</forename><surname>Bier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Freeman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">User Interface Software and Technology (UIST &apos;91)</title>
		<imprint>
			<date type="published" when="1991-11-13">Nov. 11-13 1991</date>
			<biblScope unit="page" from="79" to="86" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Commune: A shared drawing surface</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">A</forename><surname>Bly</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">L</forename><surname>Minneman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Conference on Office Information Systems (COIS &apos;90)</title>
		<meeting>the Conference on Office Information Systems (COIS &apos;90)</meeting>
		<imprint>
			<date type="published" when="1990">Apr. 25-27 1990</date>
			<biblScope unit="page" from="184" to="192" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Conference Toolkit: A framework for real-time conferencing</title>
		<author>
			<persName><forename type="first">A</forename><surname>Bonfiglio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Malatesa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Tisato</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1st European Conference on Computer Supported Cooperative Work (EC-CSCW &apos;89)</title>
		<meeting>the 1st European Conference on Computer Supported Cooperative Work (EC-CSCW &apos;89)</meeting>
		<imprint>
			<date type="published" when="1989-09">Sept. 1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Interactive human communication</title>
		<author>
			<persName><forename type="first">A</forename><surname>Chapanis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Scientific American</title>
		<imprint>
			<biblScope unit="volume">232</biblScope>
			<biblScope unit="page" from="36" to="42" />
			<date type="published" when="1975">1975</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">MMConf: An infrastructure for building shared applications</title>
		<author>
			<persName><forename type="first">T</forename><surname>Crowley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Baker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Forsdick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Milazzo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Tomlinson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Conference on Computer-Supported Cooperative Work (CSCW &apos;90)</title>
		<meeting>the Conference on Computer-Supported Cooperative Work (CSCW &apos;90)</meeting>
		<imprint>
			<date type="published" when="1990-10">Oct. 7-10 1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Flexible user interface coupling in collaborative systems</title>
		<author>
			<persName><forename type="first">P</forename><surname>Dewan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM CHI&apos;91 Conference on Human Factors in Computing Systems</title>
		<meeting>the ACM CHI&apos;91 Conference on Human Factors in Computing Systems</meeting>
		<imprint>
			<date type="published" when="1991-05-02">Apr. 27-May 2, 1991</date>
			<biblScope unit="page" from="41" to="48" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Structure and support in cooperative environments: The Amsterdam Conversation Environment</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">A</forename><surname>Dykstra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">P</forename><surname>Carasik</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IJMMS</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="page" from="419" to="434" />
			<date type="published" when="1991-03">Mar. 1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Groupware: Some issues and experiences</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">A</forename><surname>Ellis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">J</forename><surname>Gibbs</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">L</forename><surname>Rein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comm. ACM</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="page">1</biblScope>
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Putting innovation to work: Adoption strategies for multimedia communication systems</title>
		<author>
			<persName><forename type="first">E</forename><surname>Francik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">E</forename><surname>Rudman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Cooper</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Levine</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comm. ACM</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="page" from="37" to="63" />
			<date type="published" when="1991-12">Dec. 1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The SharedX multi-user interface user&apos;s guide, version 2.0</title>
		<author>
			<persName><forename type="first">D</forename><surname>Garfinkel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Gust</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lemon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Lowder</surname></persName>
		</author>
		<idno>no. STL-TM-89- 07</idno>
	</analytic>
	<monogr>
		<title level="j">HP Research report</title>
		<imprint>
			<date type="published" when="1989">1989</date>
			<pubPlace>Palo Alto, California</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">An Extensible Groupware Toolkit</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">J</forename><surname>Gibbs</surname></persName>
		</author>
		<author>
			<persName><surname>Liza</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM CHI&apos;89 Conference on Human Factors in Computing Systems</title>
		<meeting>the ACM CHI&apos;89 Conference on Human Factors in Computing Systems</meeting>
		<imprint>
			<date type="published" when="1989-05-04">Apr. 30-May 4 1989</date>
			<biblScope unit="page" from="29" to="35" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Sharing views and interactions with single-user applications</title>
		<author>
			<persName><forename type="first">S</forename><surname>Greenberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Conference on Office Information Systems (COIS &apos;90)</title>
		<meeting>the Conference on Office Information Systems (COIS &apos;90)</meeting>
		<imprint>
			<date type="published" when="1990">Apr. 25-27 1990</date>
			<biblScope unit="page" from="227" to="237" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">GroupSketch: A multi-user sketchpad for geographically-distributed small groups</title>
		<author>
			<persName><forename type="first">S</forename><surname>Greenberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Bohnet</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Graphics Interface</title>
		<meeting>Graphics Interface</meeting>
		<imprint>
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Personalizable groupware: Accomodating individual roles and group differences</title>
		<author>
			<persName><forename type="first">S</forename><surname>Greenberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2nd European Conference on Computer Supported Cooperative Work (EC-CSCW &apos;91)</title>
		<meeting>the 2nd European Conference on Computer Supported Cooperative Work (EC-CSCW &apos;91)</meeting>
		<imprint>
			<date type="published" when="1991-09">Sept. 1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Human and technical factors of distributed group drawing tools</title>
		<author>
			<persName><forename type="first">S</forename><surname>Greenberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Roseman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Webster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Bohnet</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Interacting with Computers</title>
		<imprint/>
	</monogr>
	<note>Special Edition on CSCW, in press</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Postmechanistic groupware primitives: rhythms, boundaries and containers</title>
		<author>
			<persName><forename type="first">P</forename><surname>Johnson-Lenz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Johnson-Lenz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IJMMS</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="page" from="385" to="418" />
			<date type="published" when="1991-03">Mar. 1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Patterns of contact and communication in scientific research collaborations</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">E</forename><surname>Kraut</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Egido</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Galegher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Intellectual Teamwork: Social Foundations of Cooperative Work</title>
		<imprint>
			<publisher>Lawrence Erlbaum Associates</publisher>
			<date type="published" when="1990">1990</date>
			<biblScope unit="page" from="149" to="172" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Visual languages for cooperation: A performing medium approach to systems for cooperative work</title>
		<author>
			<persName><forename type="first">F</forename><surname>Lakin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Intellectual Teamwork: Social Foundations of Cooperative Work</title>
		<imprint>
			<publisher>Lawrence Erlbaum Associates</publisher>
			<date type="published" when="1990">1990</date>
			<biblScope unit="page" from="453" to="488" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Lauwers</surname></persName>
		</author>
		<idno>CSL-TR-990-435</idno>
		<title level="m">Collaboration transparency in desktop teleconferencing environments</title>
		<meeting><address><addrLine>CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1990">1990</date>
		</imprint>
		<respStmt>
			<orgName>Stanford University, Computer Systems Lab</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Replicated architectures for shared window systems: A critique</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Lauwers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">A</forename><surname>Joseph</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">A</forename><surname>Lantz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">L</forename><surname>Romanow</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Conference on Office Information Systems (COIS &apos;90)</title>
		<meeting>the Conference on Office Information Systems (COIS &apos;90)</meeting>
		<imprint>
			<date type="published" when="1990">Apr. 25-27 1990</date>
			<biblScope unit="page" from="249" to="260" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>Linton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">R</forename><surname>Calder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Interrante</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Vlissides</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991-09">Sept. 1991</date>
		</imprint>
		<respStmt>
			<orgName>InterViews Reference Manual, Stanford University</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Managing a trois: A study of a multi-user drawing tool in distributed design work</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">L</forename><surname>Minneman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">A</forename><surname>Bly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM CHI&apos;91 Conference on Human Factors in Computing Systems</title>
		<meeting>the ACM CHI&apos;91 Conference on Human Factors in Computing Systems</meeting>
		<imprint>
			<date type="published" when="1991-05-02">Apr. 27-May 2 1991</date>
			<biblScope unit="page" from="217" to="224" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Issues in the Design of Computer Support for Co-Authoring and Commenting</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">M</forename><surname>Neuwirth</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Kaufer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Chandhok</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">H</forename><surname>Morris</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Conference on Computer-Supported Cooperative Work (CSCW &apos;90)</title>
		<meeting>of the Conference on Computer-Supported Cooperative Work (CSCW &apos;90)</meeting>
		<imprint>
			<date type="published" when="1990-10">Oct. 7-10 1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Electronic meeting systems to support group work</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">F</forename><surname>Nunamaker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">R</forename><surname>Dennis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">S</forename><surname>Valacich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">R</forename><surname>Vogel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">F</forename><surname>George</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="40" to="61" />
			<date type="published" when="1991-07">July 1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Rendezvous: An architecture for synchronous multi-user applications</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">F</forename><surname>Patterson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">D</forename><surname>Hill</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">L</forename><surname>Rohall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">S</forename><surname>Meeks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proce. of the Conference on Computer-Supported Cooperative Work (CSCW &apos;90)</title>
		<meeting>e. of the Conference on Computer-Supported Cooperative Work (CSCW &apos;90)</meeting>
		<imprint>
			<date type="published" when="1990-10">Oct. 7-10 1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Comparing the programming demands of single-user and multi-user applications</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">F</forename><surname>Patterson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. User Interface Software and Technology (UIST &apos;91)</title>
		<meeting>User Interface Software and Technology (UIST &apos;91)</meeting>
		<imprint>
			<date type="published" when="1991-11-13">Nov. 11-13 1991</date>
			<biblScope unit="page" from="87" to="91" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">WYSIWIS revised: Early experiences with multiuser interfaces</title>
		<author>
			<persName><forename type="first">M</forename><surname>Stefik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">G</forename><surname>Bobrow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Lanning</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Tatar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. on Office Information Systems</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="147" to="167" />
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Findings from observational studies of collaborative work</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Tang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IJMMS</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="page" from="143" to="160" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Unidraw: A Framework for Building Domain-Specific Graphical Editors</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Vlissides</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>Linton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of User Interface Software and Technology</title>
		<meeting>of User Interface Software and Technology</meeting>
		<imprint>
			<date type="published" when="1989-10">Oct. 1989</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
