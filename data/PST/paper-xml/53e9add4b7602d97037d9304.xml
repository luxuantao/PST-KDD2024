<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Design as Exploration: Creating Interface Alternatives through Parallel Authoring and Runtime Tuning</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Bj√∂rn</forename><surname>Hartmann</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution" key="instit1">Stanford University</orgName>
								<orgName type="institution" key="instit2">HCI Group</orgName>
								<address>
									<postCode>94305</postCode>
									<settlement>Stanford</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Loren</forename><surname>Yu</surname></persName>
							<email>lorenyu@cs.stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution" key="instit1">Stanford University</orgName>
								<orgName type="institution" key="instit2">HCI Group</orgName>
								<address>
									<postCode>94305</postCode>
									<settlement>Stanford</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Abel</forename><surname>Allison</surname></persName>
							<email>aallison@cs.stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution" key="instit1">Stanford University</orgName>
								<orgName type="institution" key="instit2">HCI Group</orgName>
								<address>
									<postCode>94305</postCode>
									<settlement>Stanford</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Yeonsoo</forename><surname>Yang</surname></persName>
							<email>yyang1@cs.stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution" key="instit1">Stanford University</orgName>
								<orgName type="institution" key="instit2">HCI Group</orgName>
								<address>
									<postCode>94305</postCode>
									<settlement>Stanford</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Scott</forename><forename type="middle">R</forename><surname>Klemmer</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution" key="instit1">Stanford University</orgName>
								<orgName type="institution" key="instit2">HCI Group</orgName>
								<address>
									<postCode>94305</postCode>
									<settlement>Stanford</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Design as Exploration: Creating Interface Alternatives through Parallel Authoring and Runtime Tuning</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">52D61C1A16922708AF8C3769738ACC19</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T07:58+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>ACM Classification: H.5.2. [Information Interfaces]: User Interfaces -prototyping. D.2.2 [Software Engineering]: Design Tools and Techniques -user interfaces Design</term>
					<term>Human Factors Design alternatives</term>
					<term>prototyping</term>
					<term>design tools</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Creating multiple prototypes facilitates comparative reasoning, grounds team discussion, and enables situated exploration. However, current interface design tools focus on creating single artifacts. This paper introduces the Juxtapose code editor and runtime environment for designing multiple alternatives of both application logic and interface parameters. For rapidly comparing code alternatives, Juxtapose introduces selectively parallel source editing and execution. To explore parameter variations, Juxtapose automatically creates control interfaces for "tuning" application variables at runtime. This paper describes techniques to support design exploration for desktop, mobile, and physical interfaces, and situates this work in a larger design space of tools for explorative programming. A summative study of Juxtapose with 18 participants demonstrated that parallel editing and execution are accessible to interaction designers and that designers can leverage these techniques to survey more options, faster.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>INTRODUCTION</head><p>"In engineering, enlightened trial and error, not the planning of flawless intellects, has brought most advances; this is why engineers build prototypes." -Eric <ref type="bibr">Drexler [9]</ref> When designers create multiple distinct prototypes prior to committing to a final direction, several important benefits arise. First, alternatives provide designers with a more complete understanding of a design space <ref type="bibr" target="#b11">[12]</ref>. Second, developing different "what if" scenarios enables more effective, efficient decision making within organizations <ref type="bibr" target="#b27">[28]</ref>. Third, discussing multiple prototypes helps project stake-holders better communicate their requirements <ref type="bibr" target="#b17">[18]</ref>. Finally, presenting multiple alternatives in user studies facilitates participants' ability to understand design tradeoffs and offer critical feedback <ref type="bibr" target="#b32">[33]</ref>.</p><p>Placing "enlightened trial and error" at the core of design raises the research question, how might authoring environments support designers in creating and managing design options? Traditionally, design tools have focused on creating single artifacts <ref type="bibr" target="#b29">[30]</ref>. Research in subjunctive interfaces <ref type="bibr" target="#b20">[21]</ref> pioneered techniques for parallel exploration of multiple scenarios during information exploration. Set-based interaction techniques have also been introduced for graphic design <ref type="bibr" target="#b30">[31,</ref><ref type="bibr" target="#b31">32]</ref> and 3D rendering <ref type="bibr" target="#b22">[23]</ref>. Providing alternative-aware tools for interaction design adds the challenge of working with two distinct representations: source code, where changes are authored; and the running program, where changes are observed. This paper suggests that interaction design tools can successfully scaffold exploration by managing alternatives across source and execution environments, and introduces Juxtapose, an authoring tool manifesting this idea (see Figure <ref type="figure" target="#fig_0">1</ref>). This paper makes two contributions to design tool research.</p><p>First, it introduces a programming environment in which interaction designers create and run multiple program alternatives in parallel. Juxtapose extends linked editing <ref type="bibr" target="#b33">[34]</ref>, a technique to selectively modify source duplicates simultaneously, by turning source alternatives into a set of programs that are executed in parallel (see <ref type="bibr">Figure 2,</ref><ref type="bibr">left)</ref>. The Juxtapose runtime environment enables interacting with these parallel alternatives (see Figure <ref type="figure" target="#fig_1">2</ref>, right). Second, Juxtapose introduces "tuning" of interface parameters at runtime by automatically generating a control interface for application parameters through source code analysis and language reflection. We hypothesize that runtime controls encourage real-time improvisation and exploration of the application's parameter space. Designers can save parameter settings in presets that Juxtapose maintains across alternatives and executions. To facilitate simultaneous control over multiple tuning parameters, a physical, spatially-multiplexed control surface is supported. This paper first introduces findings from formative interviews that motivate our work. We then describe the key interaction techniques for creating, executing, and modifying alternatives with Juxtapose. We describe implementations for desktop, mobile, and tangible applications. Next, we discuss tradeoffs of our approach and conclude by presenting evaluation results and an outlook to future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>FORMATIVE INTERVIEWS</head><p>To augment intuitions from our own teaching and practice, we conducted three interviews with interaction designers. Here, we briefly summarize the insights gained.</p><p>First, arriving at a satisfying user experience requires simultaneous adjustment of multiple interrelated parameters. For example, a museum installation developer shared that getting an interactive simulation to "feel right" required timeintensive experimentation with parameter settings. Similarly, an instructor for a camera-based interaction design course reported that students found adjusting recognition algorithm parameters to be a lengthy trial-and-error process.</p><p>Second, creating alternative program flows is a complementary practice to parameter tuning. In one participant's code, we saw multiple alternative code strategies living side-byside inside a single function. To try out these different approaches in succession, this interviewee would change which alternative was uncommented (i.e., active), recompile, and execute.</p><p>Lastly, all interviewees reported writing custom control interfaces for internal program variables when they were unsure how to find good values. These tuning interfaces are not actually part of the functionality of the applicationthey function exclusively as exploratory development tools.</p><p>Across the three concerns, interviewees resorted to ad-hoc practices that allowed for some degree of exploration despite a lack of tool support. The following scenario illustrates how Juxtapose can improve such exploration by explicitly addressing parameter variation, alternative creation and control interface generation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>EXPLORING OPTIONS WITH JUXTAPOSE</head><p>Tina is designing the graphical interface for a new handheld GPS device that both pedestrians and bicyclists will use. She imagines pedestrians will pan the map by tilting the device, and use buttons for zooming. Bicyclists mount the device in a fixed position on their handlebars, so they will need buttons to pan and zoom.</p><p>To try out navigation options, Tina loads her existing map prototype and clicks the Add Alternative button; this duplicates her code in a new tab. With the Linked Edit box checked, she adds a function to respond to button input. This code change propagates to both alternatives. She clears the Linked Edit checkbox so that she can write distinct input handlers in the function body of each alternative. In unlinked mode, edits only apply to the active tab. A colored background highlights code that differs between alternatives. Tina executes her designs. Juxtapose's runtime interface shows the application output of each code alternative side-by-side. One alternative is active, indicated by a red outline. Global Number and Boolean-typed variables of this alternative are displayed in a variable panel to the right of the running applications. Tina expands the entries for layer visibility, panning speed and zoom step size to reveal tuning widgets that allow her to change values of each variable interactively. Tina uses the tuning widgets to arrive at fluid pan and zoom animations. Tina also hypothesizes that bicyclists will value velocity-contingent visual and typographic levels of detail. To adjust the text sizes of multiple road types simultaneously, she moves her non-dominant hand to an external physical control board. She places one finger on each slider, and quickly moves multiple sliders simultaneously to visually understand the gestalt design tradeoffs, such as legibility and clutter. To focus in on the details of one alternative, she toggles between viewing alternatives side-by-side, and viewing just one alternative. Tina finds several promising parameter combinations for showing levels of detail and uses the snapshot panel to save them. Back in the code editor, she introduces a speed variable to simulate sensed traveling velocity, and adds code to load different snapshots from the Juxtapose environment when the speed variable changes. To constrain tuning to useful values, she adds range annotation comments, e.g., indicating that speed should vary between 1 and 30 mph. She runs her design again and selects speed for tuning. Moving the associated slider now switches between the snapshot values she previously saved. She checks the Linked Tuning box to propagate changes in simulated speed to all alternatives in parallel.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ARCHITECTURE FOR ALTERNATIVE DESIGN</head><p>This section outlines fundamental requirements for parallel editing, execution, and tuning, and describes how the Juxtapose implementation supports these techniques.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Parallel Editing</head><p>To make working with multiple code alternatives feasible, an authoring environment must keep track of code differences across alternatives, make this structure visually apparent to the user, and offer efficient interaction techniques for manipulating content across alternatives. To support these three requirements, Juxtapose extends Toomim et al.'s linked editing technique <ref type="bibr" target="#b33">[34]</ref>: alternatives are accessible through document tabs; source differences between tabs are highlighted with a shaded background; and edits can be either local to one alternative or global to all alternatives. Toomim's work focused on sharing code snippets across different locations within a project. Juxtapose instead targets creation of sets of applications based on a core of shared code. To enable interactive editing across multiple documents, Juxtapose replaces Toomim's algorithm with incremental correspondence tracking during editing and slower content differencing during compilation. The efficiency gains thus realized enable Juxtapose to run comparisons after each key press. Average times for single character-replace operations were under 1 ms with up to 5 alternatives on a 2 GHz PC running Windows Vista.</p><p>Juxtapose tracks correspondences between alternatives by partitioning all source alternatives into corresponding blocks. In linked editing, the block structure stays fixed and block content is modified in all alternatives. In unlinked editing, code blocks are subdivided and alternatives store different content in their sub-blocks (see Figure <ref type="figure" target="#fig_2">3</ref>). When inserting text while unlinked, Juxtapose's data structure splits the code into pre-and post-insertion blocks and creates a new code block for the inserted text. Juxtapose splits all alternatives, inserting an empty element into the unmodified alternatives. Deletions also split code blocks. Here, the active document represents the deletion with an empty element; the corresponding elements in the other alternatives contain the deleted text. Code modifications are expressed as deletions followed by insertions. Blocks are never merged during editing.</p><p>Incremental structure tracking performs differently than content-based matching if a user types identical code into corresponding locations in two distinct documents: contentbased approaches will mark this as a match; structure-based approaches will not. To obtain both interactive performance and content matching, Juxtapose optimizes global block structure with a slower longest-common subsequence algorithm at convenient times (i.e., when compilation is started).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Parallel Execution and Tuning</head><p>Executing a set of related interaction designs raises two principal questions: Should alternatives be presented in series or in parallel? And should users interact with these alternatives one-at-a-time or simultaneously? To investigate how different target devices offer unique opportunities for parallel input and output, we implemented versions of the Juxtapose environment for three domains: desktop interactions written in ActionScript for Adobe Flash; mobile phone interactions for Flash Lite; and physical interactions based on the Arduino microcontroller platform. The three implementations share a common editor but differ in their runtime environment. We discuss each in turn. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Desktop</head><p>Desktop PCs offer sufficient screen resolution to run alternative interactions side-by-side, analogous to application windows. Alternatives here are programs authored in Ac-tionScript 2, from which Juxtapose generates a set of Flash movie files using the MTASC compiler <ref type="bibr" target="#b4">[5]</ref>. The generated files are then embedded into the Juxtapose Java runtime interface using a Windows-native wrapper library <ref type="bibr" target="#b2">[3]</ref>. For consistency with the temporally multiplexed input of windowed operating systems, only one active alternative receives keyboard and mouse input events by default. However, Juxtapose offers the option to replicate user input across alternatives through event echoing <ref type="bibr" target="#b19">[20]</ref>. By using a provided custom mouse class, mouse events can be intercepted in the active alternative and injected into all other alternatives, which then show a ghost cursor. This parallelism only operates at the low level of mouse move and click events, which is useful when both application logic and visual layout are similar across alternatives. However, in absence of a model that translates abstract events in one application into equivalent events in another, users cannot usefully interact with different applications simultaneously. While development of an abstract input model that provides such a mapping is possible, it is unlikely to occur during prototyping, when the application specification is still in flux.</p><p>To accomplish runtime variable tuning, bi-directional data exchange between the user's application and the tuning interface is required. On startup, the application transmits variable names, types, and values to Juxtapose. The tuning interface in turn sends value updates for variables to the application whenever its widgets are used. Loading snapshots defined in the tuning interface from code is initiated by a request from the user application, followed by a response from Juxtapose. To accomplish this communication, the user adds a Juxtapose library module to their code. In our implementation, communication between the Flash application and the hosting Java environment takes place through a message-passing protocol and synchronous remote procedure call interface built on top of the Flash Player API.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Mobile Phone</head><p>For smart phones, the most useful unit of abstraction for parallel execution is not an application window on a handset, but rather the entire handset itself. The small form factor and comparatively lower cost make it attractive to leverage multiple physical devices in parallel (see Figure <ref type="figure" target="#fig_3">4</ref>). In Juxtapose mobile, developers still compose and compile applications on a PC. At runtime, the tuning interface resides on the PC, and the alternatives run on different handsets. A designer can thus rapidly switch between alternatives by putting one phone down and picking another one up. To target tuning events to an application running on one particular phone, Juxtapose offers alternative selection buttons in the runtime interface.</p><p>Our Juxtapose mobile prototype generates binaries which run on the Flash Lite 2.0 player on Nokia N93 smart phones. The desktop tuning interface and the smart phone communicate through network sockets. When designers run an application on the mobile phone, it opens a persistent TCP socket connection to the Juxtapose runtime interface on the PC. Our prototype uses Wi-Fi for simplicity. Informally, we found that the phone receives variable updates at ~5 Hz, much slower than on the PC, but still sufficient for interactive tuning. Response rates are slower because mobile devices trade off increased battery life for slower network throughput and increased latency. A limitation of the current Juxtapose mobile implementation is that users must manually upload compiled files to the phones and launch them within the Flash Lite player. This is due to restrictions of the phone's security architecture.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Physical Interactions</head><p>Many interaction designers work with microcontrollers when developing new physical interfaces because of their accessible interface to sensors and actuators. The primary difference to both desktop and mobile development is that novel physical interaction design involves building custom hardware, which is resource intensive. Consequently, designers are likely to embed multiple different opportunities for interaction into the same physical prototype.</p><p>Juxtapose supports developing for the Arduino <ref type="bibr" target="#b0">[1]</ref> platform and language, a combination popular with interaction designers and artists. Code for all alternatives is crosscompiled with the AVR-GCC compiler suite. Juxtapose for Arduino uploads and runs only one code alternative on one attached Arduino board at a time. When the designer switches between alternatives, Juxtapose transparently replaces the binary running on the microcontroller (see Figure <ref type="figure" target="#fig_5">5</ref>) through a bootloader.</p><p>Real-time tuning of variables requires a mapping from variable names to types and storage locations, which is not available in the C language that Arduino uses. Juxtapose constructs this map using a preprocessing step that transforms a user's program before compilation. The user's source code is parsed to build a table of global variable names, types, and pointers to their memory locations. The source is then wrapped in Juxtapose-specific initialization  code, into which the variable table is emitted as C code. When a variable is tuned, the embedded wrapper code uses this table to find a pointer to the correct runtime variable from its name and changes the value of the memory location. The wrapper code also contains communication functions to exchange information between microcontroller and PC through a serial port. Some price must be paid for this added flexibility. The developer has to relinquish control of a hardware serial port, and application state is lost whenever alternatives are switched. Snapshots provide a way to save and restore values across such changes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Writing Tunable Code</head><p>Ideally, programmers should be able to leverage tuning and alternatives in their project without changing their source.</p><p>In practice, tuning is invisible unless modified parameter values have some observable effect on program execution. In other words, the changed variable has to be read again and some action has to be taken based on its value after it was modified at runtime. Thus programmers may have to write additional code that is solely concerned with making their application tunable.</p><p>To help programmers express the logic for runtime updates, callback functions provide a lightweight harness: whenever a variable is tuned at runtime, the application is notified of the parameter name and its updated value. In ActionScript, this callback facility is already provided on the language level by the Object.watch() method. The following example calls a redraw routine whenever the variable tunable is updated by the Juxtapose tuning UI: Beyond callbacks, protocols to communicate information from the source code to the runtime interface enable designers to initialize the runtime UI programmatically. Programmers can initialize minimum and maximum values for Number variables through comment annotations (line 1). They can also hide variables for which tuning is not useful, e.g., counters, from the variable list (line 2). Code annota-tions have been used in other projects as a source of metainformation, e.g., for labeling different experimental conditions for user testing <ref type="bibr" target="#b21">[22]</ref>. Juxtapose currently uses code comments to capture annotations; this functionality could become part of the language definition in an alternativeaware programming language.</p><formula xml:id="formula_0">01</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Hardware Support</head><p>Three important benefits can be realized by using a dedicated external controller instead of mouse and keyboard input for parameter control. First, spatially-multiplexed input enables users to modify multiple parameters simultaneously. Second, with mouse control, tuning is mainly a hand-eye coordination task -with a dedicated control board, it turns into a motor task that leaves the eyes free to focus on the application being tuned. Third, moving the tuning UI to a dedicated controller allows for tuning of interactions that require mouse and keyboard input, e.g., adjusting the rate at which mouse wheel movement magnifies a document.</p><p>Our implementation supports a commercially available USB MIDI device <ref type="bibr" target="#b1">[2]</ref> with 16 buttons with LED status indicators, 8 rotary encoders (presently not used) and 8 motorized faders. The controller transmits input events as MIDI control change messages and receives similar control change messages to actuate sliders and toggle LED feedback. Actuation of the hardware controller is essential for saving and restoring parameter snapshots -without actuation it is impossible to recall saved parameter values and edit them incrementally. To facilitate locating a particular variable's control, the mixer was augmented with a small top-mounted projector which displays parameter names next to the appropriate controls, a technique inspired by Crider et al., <ref type="bibr" target="#b7">[8]</ref>. While a projector setup is unwieldy in practice, controllers with embedded text LCDs that can offer the same functionality are commercially available.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DESIGN SPACE &amp; DISCUSSION</head><p>The design choices made during the development of Juxtapose represent one particular point in a larger space of tools for explorative programming. In this section, we discuss assumptions made in our current design and highlight limitations of our implementation. Following Fitzmaurice's design space for graspable interfaces <ref type="bibr" target="#b9">[10]</ref>, we summarize the most salient design decisions in Table <ref type="table" target="#tab_1">1</ref>. This design space is not meant to be exhaustive -it covers the decision points encountered during prototyping and development. Nevertheless, the table suggests additional techniques, such as automatic generation of alternatives, which may be a fruitful area for future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Would Designers Really Benefit from Linked Sources?</head><p>The efficacy of linked editing in Juxtapose rests on the assumption that interaction designers create multiple alternatives of a common code document, where individual alternatives only differ in parameter settings and small sections of code. Experimenting with code in this manner only covers part of the solution space for a given problem. Different solution approaches may be based on distinct implementations. Alternatives as discussed in this paper explore options within one particular solution strategy. Are alternative designs related enough in practice to benefit from linked editing and tuning?</p><p>Beyond evidence from our formative interviews, the book Flash Math Creativity <ref type="bibr" target="#b26">[27]</ref> provides detailed examples of source code experimentation by professionals: 15 Flash designers share how they create computational designs in 56 projects. Each project starts from a single idea, e.g., animating geometric grid structures. The designers then show how they modified the initial source to explore the design space. 12 of 15 designers showed multiple alternatives for their projects (mean: 10.2 alternatives per project; range: 3 to 23). The difference between these alternatives is usually small: a change to a line of code to load different graphics from a library, alterations to parameter values, or substitutions of function calls.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Is Tuning of Numbers and Booleans Sufficient?</head><p>Juxtapose's runtime tuning focuses on direct manipulation of Boolean and Number types. Would designers benefit from more expressive abstractions and additional functionality in the tuning interface?</p><p>An underlying assumption in this work is that developers both produce the application and tune it. If they desire a more complex mapping, e.g., a logarithmic parameter scale, they may express this mapping in the source. Locating additional functionality in the source itself may be more useful since logic expressed in the tuning UI is not available when the application is run outside Juxtapose. This assessment changes if alternatives and tuning options are used by a third party, e.g., during participatory design sessions. In this case it would make sense to imbue the runtime interface with more flexibility to let users express a more complete set of modifications without editing the program source, e.g., by providing rich widgets for commonly used complex data types such as color or coordinates.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Are Code Alternatives Enough?</head><p>Perhaps the most important limitation is that Juxtapose does not offer support for managing multiple alternatives of graphical assets. Interface design is concerned with both look and feel -graphics and behavior. We believe Juxtapose is a first step towards an integrated authoring environment that offers management of alternatives across graphics and code. We leave research on such a hybrid environment to future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>USER EXPERIENCES WITH JUXTAPOSE</head><p>To evaluate the authoring approach embodied in Juxtapose, we built example prototypes using the tool (see Figure <ref type="figure" target="#fig_6">7</ref>) and conducted a summary usability study of Juxtapose for desktop applications. We recruited 18 participants, twelve male, six female. Participants were recruited from undergraduate and graduate students with HCI experience. Their ages ranged from 20 to 32 years. All but one participant had  at least working knowledge of procedural programming and all had at least some expertise in interaction design.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Study Setup</head><p>Evaluation sessions lasted approximately 75 minutes. Participants were seated at a workstation with mouse, keyboard and MIDI controller. After a demonstration of Juxtapose, participants were given three tasks. The first task was a warm-up exercise to modify a grid animation reacting to mouse movement, adapted from Flash Math Creativity <ref type="bibr" target="#b26">[27]</ref>.</p><p>Participants were asked to make changes that required both code alternatives and tuning.</p><p>The second task was a within-subject comparison that asked participants to adjust four parameters of a recursive tree drawing routine to match four specific tree shapes. The provided code was also adapted from Flash Math. For two trees, this was accomplished using the full Juxtapose interface. For the other two, participants were given the same editor without the possibility of creating alternatives or tuning. Order of assignment between Juxtapose and control conditions was counterbalanced and a random tree order was generated for each participant.</p><p>The third task asked participants to work on the mapping scenario introduced earlier. They were provided with a working ActionScript program that loaded a map containing 28 different layers of information (e.g., land areas, parks, local streets, local street names, highways). Participants were given 30 minutes to create two map navigation alternatives. They were then asked to present their maps to a researcher. Documentation contained examples for how to programmatically change visibility of layers, color and brightness, text size and formatting, and mouse interactions. Participants had to modify and add to these examples to either hardcode design decisions or to set up tunable parameters through callback functions in the source code.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Study Results</head><p>In all tasks, all participants properly applied linked and unlinked editing and tuning, with no apparent confusion. Participants commented positively on the ease of adjusting numerical parameters through tuning and the reduced iteration time this permitted. One participant commented that the explicit management of alternative documents improved on their existing practice of "half-hearted attempts to name saved [configurations] with memorable names." Today, designers commonly use layer sets as a technique for composing alternatives in graphics. A participant commented that Juxtapose brings this pattern to interaction design.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Tuning Enables More Parameter Experimentation, Faster</head><p>In the tree matching task, participants took an average of 258 seconds (œÉ: 133 s) to complete the matching in the control condition, and an average of 161 seconds (œÉ: 82 s) to complete the task with Juxtapose (see Figure <ref type="figure" target="#fig_8">8</ref>). This difference was significant (one-tailed, paired Student's t-test; p &lt; 0.01). When looking at completion times by tree (Figure <ref type="figure" target="#fig_8">8</ref>), a large completion time discrepancy for trees three and four becomes apparent. For these trees, participants quickly narrowed in on the approximate shape but frequently had trouble minimizing the remaining visual disparity when they could no longer reason about how to proceed toward the goal. Participants then often broadened their search in parameter space and diverged from the solution while looking for the right parameters to adjust. We believe that Juxtapose outperformed the control condition here because the penalty for an uncertain, diverging move was much smaller -the result could immediately be observed and corrected.</p><p>To quantify the cost of making a change, we investigated how many parameter combinations participants explored. In the control condition, on average, participants tested 2.60 parameter combinations per minute to arrive at matches (œÉ: 0.93; we counted each execution after changing source as 1 combination). In contrast, using Juxtapose, participants executed the Flash file only once, and generated parameter changes through the tuning interface. Here participants explored 64 combinations on average (œÉ: 80; we counted each variable change sent to Flash as a tuning event). The external MIDI controller generated many input events and one might contend that our definition of parameter change overestimates the number of perceptually different states explored by users. We note that participants adopted a wide range of tuning strategies -some exclusively typing in numbers in the tuning interface, others using multiple sliders simultaneously. This resulted in a wide spread of parameter changes per minute for Juxtapose (see Figure <ref type="figure" target="#fig_7">9</ref>), but even participants at lower end of the histogram explored an order of magnitude more states than the control condition.  In our mapping task, many participants began by adding instrumentation code to the provided framework to make map attributes tunable at runtime. While hard-coding design choices into source code would have been easier from a programming perspective, participants spent extra effort to make variables tunable so they could experiment at runtime. Two participants mixed strategies, making some parameters tunable while setting others in code in different alternatives when they were sure about their desired values. For example, one participant hard-coded a higher initial magnification factor in the pedestrian map interface.</p><p>Most participants preferred to set the ranges for Number variables in source code, not in the runtime interface. Only one participant used the runtime interface for this purpose. A possible explanation is that reasoning about ranges has to do with how a variable is used in the source so participants were more inclined to express ranges there.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Suggestions for Improvement</head><p>The map task also uncovered a number of usability shortcomings. In multiple instances, participants closed the runtime window to change a line of code and recompile, discovering that their runtime parameter settings from the last execution were gone. To address this, Juxtapose could automatically save the last parameter values in a snapshot when the runtime window is closed.</p><p>Participants also wished for a larger range of variables to access -for the study, only variables declared in the main application's class and variables of the root symbol were accessible for tuning. Participants thus had to introduce intermediate variables to influence other graphical objects. It would be preferable to have a "tuning mode" for direct manipulation of all graphical objects, extending ideas introduced in SUIT <ref type="bibr" target="#b25">[26]</ref>.</p><p>Many participants expressed frustration at the lack of search and undo in the source editor. Search could clearly be added. Supporting undo for documents with alternatives is not trivial and an area for future work. Multiple participants also felt that it was overly onerous to properly write the application callbacks that make a design tunable. This can be addressed in two ways. Directly modifying object fields can be handled by making all fields tunable, as suggested earlier. More complex parameter mappings however will still require callbacks: producing these callbacks can be supported through a code generation wizard.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>RELATED WORK</head><p>Our work is inspired by prior research on design tools for working with alternatives and augmented programming environments for user interfaces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Tools for Working with Alternatives</head><p>The research embodied in Juxtapose was directly motivated by Terry et al.'s prior work on tools for creating alternative solutions in image editing. Side Views <ref type="bibr" target="#b30">[31]</ref> offer command previews, e.g., for text formatting, inside a tooltip. Parameter Spectrums <ref type="bibr" target="#b30">[31]</ref> preview multiple parameter instances to help the user choose values. Similar techniques are now part of Microsoft Office 2007, attesting to the real-world impact of exploration-based tools. Parallel Pies <ref type="bibr" target="#b31">[32]</ref> enable users to embed multiple image filters into a single canvas, by subdividing the canvas into regions with different transformations. Since Juxtapose targets the domain of textual programming of interaction designs, its contributions are largely complementary. Unlike creating static visual media, the artifacts designed with Juxtapose are interactive and stateful, which requires integration between source and runtime environments.</p><p>Terry also proposed partials, an extension to Java syntax that delays assignment of values to variables until runtime <ref type="bibr" target="#b28">[29,</ref><ref type="bibr">Appendix B]</ref>. Partial variables list a set of possible values in source code; at runtime, the developer can choose between these values through a generated interface. Juxtapose extends this work by contributing both authoring environment and runtime support for specifying and manipulating alternatives.</p><p>Automatic generation of alternatives was proposed in Design Galleries <ref type="bibr" target="#b22">[23]</ref>, a browsing interface for exploring parameter spaces of 3D rendered images. Given a formal description of a set of input parameters, an output vector of image attributes to assess, and a distance metric, the Design Galleries system computes a design-space-spanning set of variations, along with a UI for structured browsing of these images. Design Galleries require developers to manually specify a set of image features to steer a dispersion algorithm; options are then generated automatically. In Juxtapose, options are created by the designer. Juxtapose makes the assumption that the results of parameter changes can be  Subjunctive interfaces <ref type="bibr" target="#b20">[21]</ref> introduced working with alternatives in information processing tasks. Multiple scenarios co-exist simultaneously and users are able to view and adjust scenarios in parallel. Clip, connect, clone <ref type="bibr" target="#b10">[11]</ref> applies these interface principles to accessing web application data, e.g., for travel planning. There are no design tools for creating subjunctive interfaces; only applications that realize these principles in different information domains.</p><p>Spreadsheets also inherently support parallel exploration through their tabular layout. Prior research has applied the spreadsheet paradigm to image manipulation <ref type="bibr" target="#b18">[19]</ref> and information visualization <ref type="bibr" target="#b5">[6]</ref>. Such graphical spreadsheets offer a more complex model of defining and modifying alternatives than Juxtapose's local-or-global editing. Investigating how a spreadsheet approach could extend to interaction design is an interesting avenue for future work.</p><p>TEAM STORM <ref type="bibr" target="#b13">[14]</ref> addresses management of multiple sketches by a team of designers during collaborative ideation. The system, consisting of individual tablet devices and a shared display wall, allows design teams to manage and discuss multiple visual ideas. Like Terry's work, the system only addresses working with static visual media -interaction can be described in these sketches, but not implemented or tested.</p><p>Authoring tools with editable design histories can also support exploration of alternatives since prior decisions can be changed at any point in the process. Design histories preserve flexibility to change the end result, but they still operate on the single document model: only a single artifact is being created. Editable histories have been developed for visual design and information architecture <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b16">17]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Development Environments</head><p>Juxtapose also relates to tools for developing user interfaces and interactive systems. Amulet <ref type="bibr" target="#b24">[25]</ref> is a GUI development environment that features a runtime Inspector <ref type="bibr" target="#b23">[24]</ref> to debug interfaces. The Inspector exposes the complete runtime application state and supports debugging of dynamic behavior, such as tracing changes in variable values over time.</p><p>Juxtapose shares the Inspector's motivation of making internal state visible and modifiable; it also shares the implementation approach of using a library to access runtime features instead of modifying the language compiler or interpreter itself. The Amulet Inspector focuses on diagnosing and correcting problems; Juxtapose emphasizes exploring variability in programs. Some tools offer "live" coding where all code and data modification happens while the program is executing. JPie <ref type="bibr" target="#b12">[13]</ref> is such an environment for Java education; ChucK <ref type="bibr" target="#b34">[35]</ref> offers live coding for music synthesis. Juxtapose shares the goal of eliminating edit-compile-test cycles in favor of realtime adjustment. Juxtapose offers less flexibility than live coding languages for editing objects and logic. Conceptually, Juxtapose makes a distinction between a low-level source representation, and a higher-level set of "knobs" used for runtime manipulation. This higher-level abstraction allows for more controlled live improvisation.</p><p>The notion of parameter snapshots exists in Isadora <ref type="bibr" target="#b6">[7]</ref>, a visual dataflow language for multimedia authoring. In Isadora, the parameter sets are predetermined by the library of data processing nodes. In Juxtapose, the programmer can define new variables for tuning in the source. Adobe's Image Foundation Toolkit <ref type="bibr" target="#b3">[4]</ref> automatically creates control sliders for scalar parameters in image processing code. In this domain, the entire specified algorithm can be rerun whenever a parameter changes. Juxtapose offers a more general approach that enables developers to control what actions to take when a variable value is changed at runtime.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>CONCLUSION AND FUTURE WORK</head><p>We have presented a set of techniques to explore and manage alternatives of programmed interaction designs in Juxtapose, a prototyping environment for user interfaces. The insight driving our research is that options have to be managed across both source and execution environments. Selective parallel editing linked with an execution environment that is aware of this parallelism enables exploration of code alternatives. Automatic generation of control interfaces and snapshots enable real-time tuning of application parameters. We demonstrated applicability of these techniques for desktop graphical user interfaces, mobile interfaces and physical computing interfaces.</p><p>Going forward, it is promising to integrate our research with prior work on graphic alternatives to create an authoring environment for both code and graphics. Another direction worth pursuing is to extend parallel editing and tuning to web applications, which could provide a way to rapidly gather empirical data on user preferences for different alternatives. Large web sites already routinely test alternatives of new features by running controlled bucket experiments: a small percentage of site visitors are exposed to a new proposed feature or layout, and results (time spent on site, purchases made) are compared with the control condition <ref type="bibr" target="#b15">[16]</ref>.</p><p>An interesting an as-of-yet unexplored research question is to what extent such comparative testing with remote users is possible during earlier prototyping stages.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. Interaction designers explore options in Juxtapose through a source code editor that supports alternative code documents (left), a runtime interface that offers parallel execution and tuning of application parameters (center), and an external controller for spatially-multiplexed input (right).</figDesc><graphic coords="1,318.78,197.28,237.60,71.04" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. In the Juxtapose source editor (left) users work with code alternatives in tabs. Users control whether modifications affect all alternatives or just the presently active one through linked editing. In the runtime interface (right) code alternatives are executed in parallel. Designers tune application parameters with automatically generated control widgets.</figDesc><graphic coords="2,55.50,54.00,504.00,171.96" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. Juxtapose's implementation of linked editing is based on maintaining block correspondences between alternatives across document modifications.</figDesc><graphic coords="3,318.30,63.78,237.60,74.04" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4. When using Juxtapose Mobile, code alternatives are executed on different phones in parallel. Variable tuning is accomplished through wireless communication between the phone and the Juxtapose tuning interface.</figDesc><graphic coords="4,56.34,530.52,237.60,142.14" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 .</head><label>6</label><figDesc>Figure 6. An external controller enables rapid surveying of multidimensional spaces. Variables names are displayed on top of assigned controls to facilitate mapping.</figDesc><graphic coords="5,315.48,54.00,244.02,116.16" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 .</head><label>5</label><figDesc>Figure 5. For microcontroller applications, Juxtapose transparently swaps out binary alternatives using a bootloader. Tuning is accomplished through code wrapping.</figDesc><graphic coords="5,55.50,54.00,228.72,115.92" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 .</head><label>7</label><figDesc>Figure 7. Example prototypes built with Juxtapose. A: Reactive grid animation, shown with parallel input. B: Map navigation on a phone. C: Alternative fisheye menus on two phones in parallel. D: Smart RGB LED fading on a microcontroller.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 9 .</head><label>9</label><figDesc>Figure 9. Study participants performed many more design parameter changes per minute with Juxtapose than without.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 8 .</head><label>8</label><figDesc>Figure 8. Study participants were faster in completing the tree matching task with Juxtapose than without.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 .</head><label>1</label><figDesc>Juxtapose design space. Choices implemented by Juxtapose are shown with a shaded background.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Does evaluation of output require real-time input? How are parameter values created? Who creates parameter-to-output mapping?</head><label></label><figDesc></figDesc><table><row><cell cols="2">Design Galleries No -output is a static image</cell><cell>Generated by dispersion algo-</cell><cell>Expert specifies for each DG instance</cell></row><row><cell></cell><cell>or a sequence of images.</cell><cell>rithm</cell><cell></cell></row><row><cell>Side Views/</cell><cell>No -output is a static image</cell><cell>Mixed initiative: parameter spec-</cell><cell>Mixed: image processing library provides primitives;</cell></row><row><cell>Parallel Pies</cell><cell></cell><cell>trums are auto-generated; de-</cell><cell>designers compose primitives in</cell></row><row><cell></cell><cell></cell><cell>signers chooses values</cell><cell>Side Views</cell></row><row><cell cols="2">Juxtapose Yes, output is a user interface</cell><cell>Designer creates values in code</cell><cell>Developers specify mapping in their source code</cell></row><row><cell></cell><cell></cell><cell>alternatives or tunes at runtime</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 2 .</head><label>2</label><figDesc>Differences between the two most related research projects and Juxtapose are based on requirements of real-time input, method of alternative generation, and source of input-output mapping.viewed instantaneously, while rendering latency motivated Design Galleries. Table 2 shows a comparative overview of Design Galleries, Terry et al.'s work, and Juxtapose.</figDesc><table /></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>This research was supported through NSF grant IIS-0745320; equipment donations from Intel and Nokia; and a SAP Stanford Graduate Fellowship for Bj√∂rn Hartmann.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<orgName type="collaboration">Arduino Physical Computing Platform</orgName>
		</author>
		<ptr target="http://www.arduino.cc" />
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">B-Control</forename></persName>
		</author>
		<ptr target="http://www.behringer.com/BCF2000" />
		<imprint>
			<date type="published" when="2000">Fader BCF2000. 2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName><surname>Emflash</surname></persName>
		</author>
		<ptr target="http://www.markelsoft.com/products/emflash" />
		<imprint>
			<date type="published" when="2007">2007</date>
			<publisher>Markelsoft</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Adobe Systems</title>
		<ptr target="http://labs.adobe.com/wiki/index.php/AIF_Toolkit" />
	</analytic>
	<monogr>
		<title level="m">Image Foundation Toolkit</title>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Motion-Twin ActionScript 2 Compiler</title>
		<author>
			<persName><surname>Mtasc</surname></persName>
		</author>
		<ptr target="http://www.mtasc.org" />
	</analytic>
	<monogr>
		<title level="m">Motion Twin Technologies</title>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Principles for Information Visualization Spreadsheets</title>
		<author>
			<persName><forename type="first">E</forename><surname>Chi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Riedl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Barry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Konstan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer Graphic and Applications</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="30" to="38" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><surname>Coniglio</surname></persName>
		</author>
		<author>
			<persName><surname>Isadora</surname></persName>
		</author>
		<ptr target="http://www.troikatronix.com/isadora.html" />
		<title level="m">Troikatronix</title>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A mixing board interface for graphics and visualization applications</title>
		<author>
			<persName><forename type="first">M</forename><surname>Crider</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Bergner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">N</forename><surname>Smyth</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>M√∂ller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">K</forename><surname>Tory</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">E</forename><surname>Kirkpatrick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Weiskopf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Graphics Interface</title>
		<meeting>Graphics Interface</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2007">2007. 2007</date>
			<biblScope unit="page" from="87" to="94" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Engines of Creation: The Coming Era of Nanotechnology</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">E</forename><surname>Drexler</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986">1986</date>
			<publisher>Anchor Books</publisher>
			<biblScope unit="page">320</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Bricks: laying the foundations for graspable user interfaces</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">W</forename><surname>Fitzmaurice</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Ishii</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">A S</forename><surname>Buxton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGCHI conference on Human factors in computing systems</title>
		<meeting>the SIGCHI conference on Human factors in computing systems</meeting>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="442" to="449" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Clip, connect, clone: combining application elements to build custom interfaces for information access</title>
		<author>
			<persName><forename type="first">J</forename><surname>Fujima</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Lunzer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Hornbaek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Tanaka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 17th annual ACM symposium on User interface software and technology</title>
		<meeting>the 17th annual ACM symposium on User interface software and technology</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="175" to="184" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Alternatives: exploring information appliances through conceptual design proposals</title>
		<author>
			<persName><forename type="first">B</forename><surname>Gaver</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Martin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGCHI conference on Human factors in computing systems</title>
		<meeting>the SIGCHI conference on Human factors in computing systems</meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="209" to="216" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">An Interactive Environment for Beginning Java Programmers</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">J</forename><surname>Goldman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science of Computer Programming</title>
		<imprint>
			<biblScope unit="volume">53</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="3" to="24" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">TEAM STORM: demonstrating an interaction model for working with multiple ideas during creative group work</title>
		<author>
			<persName><forename type="first">J</forename><surname>Hailpern</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Hinterbichler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Leppert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Cook</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">P</forename><surname>Bailey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th ACM SIGCHI conference on Creativity &amp; Cognition</title>
		<meeting>the 6th ACM SIGCHI conference on Creativity &amp; Cognition</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="192" to="202" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">R</forename><surname>Klemmer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Thomsen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Phelps-Goodman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Landay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Where Do Web Sites Come From? Capturing and Interacting with Design History. CHI: ACM Conference on Human Factors in Computing Systems</title>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Practical guide to controlled experiments on the web: listen to your customers not to the hippo</title>
		<author>
			<persName><forename type="first">R</forename><surname>Kohavi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">M</forename><surname>Henne</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Sommerfield</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th ACM SIGKDD international conference on Knowledge discovery and data mining</title>
		<meeting>the 13th ACM SIGKDD international conference on Knowledge discovery and data mining</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="959" to="967" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A Visual Language for Browsing, Undoing, and Redoing Graphical Interface Commands</title>
		<author>
			<persName><forename type="first">D</forename><surname>Kurlander</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Feiner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Visual Languages and Visual Programming</title>
		<editor>
			<persName><forename type="first">S</forename><forename type="middle">K</forename><surname>Chang</surname></persName>
		</editor>
		<meeting><address><addrLine>New York, NY</addrLine></address></meeting>
		<imprint>
			<publisher>Plenum Press</publisher>
			<date type="published" when="1990">1990</date>
			<biblScope unit="page" from="257" to="275" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">How Designers Think: The Design Process Demystified</title>
		<author>
			<persName><forename type="first">B</forename><surname>Lawson</surname></persName>
		</author>
		<imprint>
			<publisher>Architectural Press</publisher>
			<biblScope unit="page">1997</biblScope>
		</imprint>
	</monogr>
	<note>3rd ed</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Spreadsheets for images</title>
		<author>
			<persName><forename type="first">M</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 21st annual conference on Computer graphics and interactive techniques</title>
		<meeting>the 21st annual conference on Computer graphics and interactive techniques</meeting>
		<imprint>
			<date type="published" when="1994">1994</date>
			<biblScope unit="page" from="139" to="146" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Choice and Comparison Where the User Wants Them: Subjunctive Interfaces for Computer-Supported Exploration</title>
		<author>
			<persName><forename type="first">A</forename><surname>Lunzer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of INTERACT &apos;99: IFIP Conference on Human-Computer Interaction</title>
		<meeting>INTERACT &apos;99: IFIP Conference on Human-Computer Interaction</meeting>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="474" to="482" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Subjunctive interfaces: Extending applications to support parallel setup, viewing and control of alternative scenarios</title>
		<author>
			<persName><forename type="first">A</forename><surname>Lunzer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Hornbaek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer-Human Interaction</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="1" to="44" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Touchstone: exploratory design of experiments</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Mackay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Appert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Beaudouin-Lafon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Chapuis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J.-D</forename><surname>Fekete</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Guiard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGCHI conference on Human factors in computing systems</title>
		<meeting>the SIGCHI conference on Human factors in computing systems</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="1425" to="1434" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Design galleries: a general approach to setting parameters for computer graphics and animation</title>
		<author>
			<persName><forename type="first">J</forename><surname>Marks</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Andalman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 24th annual conference on Computer graphics and interactive techniques</title>
		<meeting>the 24th annual conference on Computer graphics and interactive techniques</meeting>
		<imprint>
			<date type="published" when="1997">1997</date>
			<biblScope unit="page" from="389" to="400" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">A</forename><surname>Myers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ferrency</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Mcdaniel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Dannenberg</surname></persName>
		</author>
		<ptr target="http://www.cs.cmu.edu/~amulet/papers/debugpaper.pdf" />
		<title level="m">Debugging Interactive Applications, Carnegie Mellon University 1996</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">A</forename><surname>Myers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">G</forename><surname>Mcdaniel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">S</forename><surname>Ferrency</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Faulring</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">D</forename><surname>Kyle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Mickish</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Klimovitski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Doane</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The Amulet Environment: New Models for Effective User Interface Software Development</title>
		<imprint>
			<date type="published" when="1997">1997</date>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="347" to="365" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Lessons learned from SUIT, the simple user interface toolkit</title>
		<author>
			<persName><forename type="first">R</forename><surname>Pausch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Conway</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Deline</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Information Systems</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="320" to="344" />
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<author>
			<persName><forename type="first">S</forename><surname>Rycroft</surname></persName>
		</author>
		<title level="m">Flash Math Creativity</title>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Serious Play: How the World&apos;s Best Companies Simulate to Innovate</title>
		<author>
			<persName><forename type="first">M</forename><surname>Schrage</surname></persName>
		</author>
		<imprint>
			<publisher>Harvard Business School Press</publisher>
			<biblScope unit="page">1999</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Set-Based User Interaction</title>
		<author>
			<persName><forename type="first">M</forename><surname>Terry</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
		<respStmt>
			<orgName>Georgia Institute of Technology, Computer Science Department</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Unpublished Ph.D. Thesis</note>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Recognizing creative needs in user interface design</title>
		<author>
			<persName><forename type="first">M</forename><surname>Terry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">D</forename><surname>Mynatt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th conference on Creativity &amp; Cognition</title>
		<meeting>the 4th conference on Creativity &amp; Cognition</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="38" to="44" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Side views: persistent, ondemand previews for open-ended tasks</title>
		<author>
			<persName><forename type="first">M</forename><surname>Terry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">D</forename><surname>Mynatt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 15th annual ACM symposium on User interface software and technology</title>
		<meeting>the 15th annual ACM symposium on User interface software and technology</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="71" to="80" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Variation in element and action: supporting simultaneous development of alternative solutions</title>
		<author>
			<persName><forename type="first">M</forename><surname>Terry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">D</forename><surname>Mynatt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Nakakoji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Yamamoto</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGCHI conference on Human factors in computing systems</title>
		<meeting>the SIGCHI conference on Human factors in computing systems</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="711" to="718" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Getting the right design and the design right</title>
		<author>
			<persName><forename type="first">M</forename><surname>Tohidi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Buxton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Baecker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Sellen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGCHI conference on Human Factors in computing systems</title>
		<meeting>the SIGCHI conference on Human Factors in computing systems</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="1243" to="1252" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Managing Duplicated Code with Linked Editing</title>
		<author>
			<persName><forename type="first">M</forename><surname>Toomim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Begel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">L</forename><surname>Graham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2004 IEEE Symposium on Visual Languages -Human Centric Computing (VLHCC&apos;04)</title>
		<meeting>the 2004 IEEE Symposium on Visual Languages -Human Centric Computing (VLHCC&apos;04)</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="173" to="180" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">On-the-fly programming: using code as an expressive musical instrument</title>
		<author>
			<persName><forename type="first">G</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">R</forename><surname>Cook</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2004 conference on New interfaces for musical expression</title>
		<meeting>the 2004 conference on New interfaces for musical expression</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="138" to="143" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
