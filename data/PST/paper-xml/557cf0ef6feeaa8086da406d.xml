<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">DEVS Representation of Dynamical Systems: Event-Based Intelligent Control</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<title level="a" type="main">DEVS Representation of Dynamical Systems: Event-Based Intelligent Control</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">BC45E16A3D420D1B7C01044E15E8F21C</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T05:41+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper shows how systems may be advantageously represented as discrete event models by employing DEVS (Discrete Event System Specification), a set-theoretic formalisms developed in the early 1970s. Such DEVS models provide a basis for the design of event-based logic control. In this control paradigm, the controller expects to receive confirming sensor responses to its control commands within definite time windows determined by its DEVS model of the system under control. The Dâ‚¬VS formalism is to event-based control what differential and difference equation formalisms are to conventional control. We apply the event-based control paradigm in advanced robotic and intelligent automation, showing how classical process control can be readily interfaced with rule-based symbolic reasoning systems.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Discrete event modeling is finding evermore application to the analysis and design of complex manufacturing, communication, and computer systems, among others. Powerful languages and workstations have been developed for describing such modelsfor computer simulation (see <ref type="bibr">[I]</ref> for a general review). Yet general understanding of the nature of discrete event systems per se (as distinct from their computer representations) is still in i t s relative infancy, compared to that of continuous systems. Differential equations employed to describe the latter have a long history of development whose mathematical formalization came well before the advent of the computer. In contrast, discrete event simulations were made possible by, and evolved with, thegrowing computational power of computers. The prime requirement for conducting such simulation was to be able to program a computer appropriately. Not of immediate utility, computer-independent model description formalisms for discrete event systems, paralleling the differential equations for continuous systems, were late in coming. Yet it is now being recognized that our understanding of complex systems may be greatly enhanced with such mathe-Manuscript received <ref type="bibr">February 12, 1988;</ref><ref type="bibr">revised September 26, 1988</ref>. This work was supported by NASA-Ames Cooperative Agree- ment NCC 2-525, "A Simulation Environment for Laboratory Management by Robot Organizations."</p><p>The author is with the Department of Electrical and Computer Engineering, University of Arizona, Tucson, A2 86721, USA.</p><p>I E E E Log Number 8825284.</p><p>matically based formalisms (see the editor's introduction to this issue). Since the early 1970s the author has been working on a mathematical formalism for modeling discrete event systems. The approach, inspired by the systems theory concepts of Zadeh and Dosoer [ 2 ] , Wymore [3], and others, attempted to cast both continuous and discrete event models within a common systems modeling framework. This approach was elaborated in a number of publications primarily summarized in the books [4], [ 5 ] , and is reviewed in <ref type="bibr">[6]</ref>. Systems modeling concepts were an important facet in a movement to develop a methodology under which simulation could be performed in a more principled and secure manner [7l. The recent advent of high performance artificial intelligence software and hardware has facilitated the transfer of this simulation methodology from research to practice <ref type="bibr">[8]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. DEVS FORMALISM: THE "DIFFERENTIAL EQUATIONS" OF DISCRETE EVENT SYSTEMS</head><p>The Discrete Event System Specification (DEVS) formalism introduced by <ref type="bibr">Zeigler [4]</ref> provides a means of specifying a mathematical object called a system. Basically, a system has a time base, inputs, states, and outputs, and functions for determining next states and outputs, given current states and inputs <ref type="bibr">[6]</ref>. Discrete event systems represent certain constellations of such parameters just as continuous systems do. For example, the inputs in discrete event systems occur at arbitrarily spaced moments, while those in continuous systems are piecewise continuous functions of time. The insight provided by the DEVS formalism is in the simple way that it characterizes how discrete event simulation languages specify discrete event system parameters. Having this abstraction, it is possible to design new simulation languages with better understood and sounder semantics. Indeed, DEVS-Scheme <ref type="bibr">[IO]</ref> isan implementation of the DEVS formalism in Scheme (a Lisp dialect) which enales the modeler to specify models directly in its terms. DEVS-Scheme supports building models in a hierarchical, modular manner (successively putting systems together to form larger ones), a systems-oriented approach not possible in conventional languages.</p><p>The point to be made is that, having been liberated from its computer origins, the DEVS formalism is more than just a means of constructing simulation models. It provides a formal representation of discrete event systems capable of mathematical manipulation, just as differential equations serve this role for continuous systems. Such manipulation includes behavioral analysis whereby properties of the behavior of a system are deduced by examining its structure. Although this is an area of intense investigation (evidenced bythearticles in this issue), such analysis is difficult, and direct computer simulation will remain a primary means of generating, and studying, model behavior. However, other kinds of manipulation are equally important: mathematical representations may be compared, transformed into other forms, simplified, decomposed, and reconstituted in a great variety of ways <ref type="bibr">[15]</ref>. Here, we illustrate how systems (continuous or otherwise) may be advantageously mapped into DEVS representations. Suitably operating on the structure of such DEVS models provides a basis for design of a discrete eventistic form of control logic, called event-based control. In this control paradigm, the controller expects to receive confirming sensor responses to its control commands within definite time windows determined by its DEVS model of the system under control. Since the DEVS formalism is at the heart of event-based control system design, such controllers can be readily checked by computer simulation prior to implementation. Thus the DEVS formalism plays the same role to event-based control that differential and differenceequation formalisms playto conventional control.'</p><p>This paper first reviews the DEVS formalism, then uses it to characterize conventional and event-based control logic. This is followed by a review of the procedure for representing dynamical systems as DEVS models, and its application to the design of event-based controllers. We conclude the discussion by outlining the role of this paradigm in advanced robotic and intelligent automation where continuous process control must be interfaced with symbolic reasoning systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Ill. BRIEF REVIEW OF THE DEVS FORMALISM</head><p>In the DEVS formalism, one must specify 1) basic models from which larger ones are built, and 2) how these models are connected together in hierarchical fashion. A basic model, called an atomic model, contains the following information: the set of input ports through which external events are received; the set of output ports through which external events are sent; the set of state variables and parameters: two state variables are usually present-phase and sigma (in the absence of external events the system stays in the current phase for the time given by sigma); the internal transition function, which specifies to 'The ideaof employing timewindows iswell known in computer communication systems, and apparently is also employed in biological systems [9]. The use of such windows for control is, to the author's knowledge, a recent idea. The author's acquaintance with the idea stems from several sources, including discussions with J. Hardin at Septor Co., who have implemented a manufacturing control system of this kind.</p><p>The second form of model, called a coupled model, tells how to couple (connect) several component models together to form a new model. This latter model can itself be employed as a component in a larger coupled model, thus giving rise to hierarchical construction. A coupled model contains the following information: which next state the system will transit after the time given by a sigma has elapsed; the external transition function, which specifies how the system changes state when an input is receivedthe effect is to place the system in a new phase and sigma, thus scheduling it for a next internal transition; the output function, which generates an external output just before an internal transition takes place; the time advance function which controls the timing of internal transitions-when the sigma state variable is present, this function just returnsthevalueof sigma. the set of input ports through which external events are received; the set of output ports through which external events are sent; the external input coupling, which connects the input ports of the coupled model to one or more of the input ports of the components-this directs inputs received by the coupled model to designated component models; the external output coupling, which connects output ports of components to output ports of the coupled model-thus, when an output is generated by a component, it may be sent to a designated output port of the coupled model, and be transmitted externally; the interval coupling, which connects output ports of components to input ports of other componentswhen an input is generated by a component, it may be sent to the input ports of designated components (in addition to being sent to an output port of the coupled model).</p><p>We omit the more technical aspects of the DEVS formalism and its semantics here. More detailed discussion is available in <ref type="bibr">[5]</ref>and <ref type="bibr">[lO]</ref>.Theexamplesto bediscussed should convey the flavor and power of the formalism.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. DEVS MODELING OF SAMPLED DATA CONTROL</head><p>We begin by employing the DEVS formalism to characterize both the conventional approach to sampled datacontrol, and an alternative approach, which i s the basis for more intelligent control [Ill.</p><p>Fig. <ref type="figure">1</ref> illustrates the conventional approach to control. The controller sends out a command to the data acquisition subsystem to sample the process at regular intervals. When the sampled value returns, it is stored and tested. Depending on the outcome of the test, a corrective control action command is emitted. Testing of the sampled value is performed bydeterminingwhether it lieswithin awindow, i.e., a subinterval of the sensor output range.</p><p>An informal DEVS description of the sampling logic of such a controller is in Fig. <ref type="figure">2</ref>. The description is informal in the sense that it i s not expressed in mathematical notation, although it can be converted to such a form. Informal description is a convenient tool for model design serving  the same purposes (convenience, flexibility, communication to others) that pseudocode descriptions play in software engineering.</p><p>The internal transition function specifies a periodic return to the SAMPLE phase in which the output function sends out a sampling command. The phrase "hold-in SAMPLE sample-time" stands for two actions: 1) the phase state variable is set t o SAMPLE, and 2) the sigma state variable is set to the value sample-time. This means that the model will stay in the phase SAMPLE for the duration sample-time unless interrupted by an external input. At the end of this period, the output function is called to produce a sample command. The model then once more returns to the phase SAMPLE for the duration sample-time, and so on.</p><p>Receipt of a sampled value is handled by the external transition function which compares it against the appropriate window (determined by updating a state variable, called checkstate). If the check succeeds, the model continues in its current phase. For simplicity, the model simply outputs an error message if the window check fails (deciding the corrective action to take will be the responsibility of the component receiving this message). To cause such an error message, the model first carries out an internal transition to a phase ERROR. This is a transient phase, in the sense that the model remains there for zero time duration, callingtheoutput function before it returnstothefinal PAS-SIVE phase. Note that the phase "passivate" is short for "hold-in PASSIVE infinity", i.e., an order to set the phase to PASSIVE and sigma to infinity, thus to remain in PASSIVE forever.</p><p>Note that the model starts in the SAMPLE phase with an initial value of sigma equal to the sample period; the initial value of the checkstate is some assumed value C1. The alternate form of control logic, called event-based, (Fig. <ref type="figure" target="#fig_1">3</ref>) is described by the DEVS model in Fig. <ref type="figure" target="#fig_2">4</ref>. Here, the model moves through i t s checkstates in concert with the received input, as long as that input arrives in the expected time window. Each checkstate Pi has associated with it a minimum time, tmin(Pi), and a window, window(Pi). The model starts in some assumed checkstate P I with sigma set to tmin(P1). This means that it will stay in phase WAIT P I for a duration tmin(P1 It should be noted that these forms of control are not mutually exclusive. Indeed, it is straightforward to specify a DEVS model that incorporates both periodic sampling of some sensors, and waits for interruption from these same or other sensors. require sensor output precision. Sensors can have threshold-like characteristics. Only two output states are needed, although more may be employed. However, togenerate the timewindows,theoutput statesofthesensor must beaccurately and reliably correlated with values of significant process variables. In an example we shall discuss, a sensor might respond when water reaches a fixed level in a tank. The level must be known sufficiently accurately for the purposes at hand, but the sensor need only respond reliably when this level has been reached. Since the approach dependson comparison of theclocktimewith thetimewindows, the burden of precision is placed on the clock, rather than on the sensor.</p><formula xml:id="formula_0">1 else hold-in E R R O R 0 ----------internal transition -----</formula><p>An essential advantage of event-based control is that the error messages it issues can bear important information for diagnostic purposes. This possibility arises when a DEVS model is developed for the process, and used t o determine the time windows for sensor feedback. As a side benefit, causes for other than expected responses may also be deduced. We now discuss construction of such models, and return to their use for event-based control.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. DEVS REPRESENTATION OF DYNAMICAL SYSTEMS</head><p>For concreteness, we assume that the process to be controlled is a deterministic continuous system well modeled with conventional differentional equation techniques. Moreover, we assume that the process receives input stimulations which are piecewise constant time functions (sequences of step functions). The approach t o be discussed, however, applies t o a much wider class of dynamical systems <ref type="bibr">[5]</ref>. Indeed,thecharacteristicsof asystemwhich permit it to be represented in DEVS formalism throw light o n the fundamental nature of real systems, which are typically viewed as discrete event systems.</p><p>Let Fig. <ref type="figure" target="#fig_4">6</ref> represent the state space of the system. We For the same process the threshold level Level 1 determines the first time window t,,, -t,,,.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ZEICLER EVENT-BASED INTELLIGENT CONTROL</head><p>assume that its output is a finite set. Indeed, let its output be determined by a conjunction of threshold type sensors discussed above: for each state, some of the sensors will be above threshold, and others will not. A finite set of sensors, each with a finite set of states, will yield a finite set of combinations of output states (mathematically, the cross product of the sensor states). Since the output set i s finite, it partitions the state space into a finite set of mutually exclusive blocks, as shown in Fig. <ref type="figure" target="#fig_4">6</ref>. Each block is an equivalence class of states, equivalent in the sense that they yield the same output, i.e., the same array of sensor outputs.</p><p>We now show how to construct a DEVS model to represent such a system. Let the system be in some state q residing in some output partition block as shown in Fig. <ref type="figure" target="#fig_4">6</ref>.</p><p>Let us follow the state trajectory of the system starting from state q. Since, by assumption, the system input i s piecewise constant, let the current input value be x . Then there are two events which c a n occur next: a) the state reaches, and just crosses, the boundaryoi the partition block containing 9, or b) the input changes to another constant value x', before the boundary is reached. The first case is modeled as an internal event in the DEVS model; the second as an external event. We will show that events such as these are sufficient to fully capture the input-output behavior of the system (how its input trajectories are correlated with its output trajectories, not necessarily preserving all of its internal structure).</p><p>Let a typical state of the DEVS model be a pair (q, x) which represents the current state of the modeled system and its current input value. The time advance function ta(q, x) is defined as the smallest time taken to cross the boundary indicated in a) above. The internal transition function int(q, x) is defined as (q', x), where q' is the state "just over" the boundary, belonging to the newly reached output block, reached by the continuous system in time ta(q, x ) . The output function out(9, x) is defined as the output of the original system in state q', namely the output value characteristic of the partition block it resides in. Started in state (q, x ) , the DEVS model will remain in this state for a period ta(q, x), after which it will output the value out(q, x) and transit to state int(q, x) (providing there i s no input change in the meantime). The next internal transition from state (q', x ) ( = int(q, x)) is determined in exactly the same manner as that from ( q , x). Note how this discretely changing behavior parallels that of the original system: at exactly the time points at which the original output changes values, the DEVS model outputs the new value.</p><p>Once more, start the DEVS model in a typical state (q, x).</p><p>However, this time consider case b) above, i.e., the input to the system step-changes to a constant value x' after an elapsed time e, where 0 &lt; = e &lt; = ta(q, x) (hence, before the next boundary is reached). This change in input i s presented to the DEVS model as an external event. Accordingly, its external transition function ext((q, x ) , e, x ' ) is defined as (q", x') where q" is the state in which the original system would find itself having received a constant input x for a time e. Note that by assumption, the original system remains in the same output block, while the input changes and, likewise, the DEVS model does not produce an output at the corresponding external transition. Change in output occursonlywhen theoriginal system crossesanoutput partition boundary and is produced, correspondingly, just before the DEVS model makes an internal transition. Exter-nal events to the DEVS model serve to inform it of input changes and cause transitions which update its state representation of the original system so as to remain in step with it.</p><p>It should be clear from the above construction that a discrete event model of a system affords a more efficient simulation than a differential equation model of the same svs- tern. The differential equation solution requires a step-bystep generation of successive model states, while the discrete event form computes state changes only at event times. To do this, the DEVS model employs its time-advance and internal transition function to predictthe timeand state of next boundary crossing; it also employs its external transition function to update its state when a change in input regime occurs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Obtaining the Characteristic Functions of the DEVS Model</head><p>We see that to validly represent a continuous system of the type described above by a DEVS model, we need to construct the functions ta(q, x) (time advance function), int(q, x) (internal transition function), and ext((q, x), e, x') (external transition function). There are several approaches to this depending on our knowledge of the original system.</p><p>The Original System is Analytically Tractable: If the original system differential equations have tractable analytic solutions, then we can express the external transition function analytically. Depending on the nature of the output partition,we may also be able t o obtain closed form expressionsforthetime advance function, and hence for the internal transition function.</p><p>The Original System has a Differential Equation Model Which can be Simulated in Advance: If we have a good model of the system which can be numerically solved, we can obtain tabular approximations of the required functions by performing simulation runs. The number of runs dependson thedegreeof approximation desired. Such runs yield state trajectories for constant inputs which may then be reduced to the form required by the functions.</p><p>No Model Exists but We Have Experimental Access to the Realsystem: We can obtain data for the required functions by experimenting directly with a real system to be represented by a DEVS model. To do this we outfit the system with its finite state sensors. We can employ the resulting output set as the state space of the model, or we may choose a more refined set of sensors to characterize the state. Having chosen the output and state representations, we proceed with experiments just as in the simulation case above.</p><p>The Simulation System Learns the DEVS Model Structure On-Line: Rather than simulate a model to build u p the required tables in advance, we acquire the information while running. There i s a higher level supervisory system which after each event (boundarycrossing, or external input change) decides whether enough information exists to schedule the next event (time advance and internal transition known for current state or neighboring state). If so, such scheduling replaces the original step-by-step simulation execution. In this way, all the actually encountered states are learned, and the system gradually moves over to discrete event simulation.</p><p>The complexity of the problem is greatly reduced if the placement of sensors i s such that only one (or a small number of) sensor(s) can change state at a time; inputs are allowed to change only at boundary crossings,aswould bethecase forthe useof DEVS toeventbased control (to be discussed); the system can only be started in one (or a small number of) state(s); * the system state trajectories starting from the allowable initial states access a relatively small subset of the possible states; coarse state spaces are employed and probability distributions are used to take care of the resulting uncertainties in timing, transition, and output estimates.</p><p>Example: Consider a cylindrical tank with sensors at two levels called HIGH and LOW (Fig. <ref type="figure" target="#fig_5">7</ref>). When the water level falls below LOW, a constant flow of water is to be turned on to fill the tank. When the water level reaches HIGH, this input is to be turned off. Considering the water level I, as the underlying state variable, there are three output partition classes: UNDER-FILLED = { / &lt; LOW}, FILLED = {LOW &lt; = l &lt; = HIGH}, and OVERFILLED = {HIGH &lt; I &lt; = TOP}. Given the fill rate, we can easily compute the time required t o reach the boundaries of the classes. We consider a change in fill rate (e.g., from 0 to a fixed value) as an external event. Internal transitions occur while the fill rate is constant. Note once again that the possible transitions are severely constrained when filling, since the level can only rise. Transitions during nonfilling periods are equallyconstrained, since the level can onlyfall due to leakage, evaporation, consumption by organisms, etc. However, we may not have as good an underlying model to predict boundarycrossings due to water loss, nor is one needed for control purposes, as we shall see.</p><p>Using DEVS Models of Processes to Construct Dâ‚¬VS</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Control Models</head><p>It is quite straightforward to construct DEVS models employing the event-based logic for controlling processes for which we have DEVS model representations. Returning to Fig. <ref type="figure" target="#fig_4">6</ref>, we recall that the process is outfitted with finitestate sensorswhich divide i t s state space into a finite output partition. We take the control task as moving the state from an initial position on a given boundary to a sequence, possibly cyclical, of boundaries. More concretely, this means we want the process to go through a predetermined sequence of states as reported by sensor readings. Our control logic will issue a control action as each boundarycrossing is achieved, i.e., send an appropriate input to the process in order to move it to the next desired boundary. As discussed in Section IV, rather than continuously monitor the state trajectory for each step in the sequence, the controller has a time window in which it expects the appropriate sensor state(s) to change to confirm the expected boundary crossing.</p><p>The time windows may be derived from the DEVS model of the process. Let the DEVS model state (9, x) represent a process state 9 which resides on a boundary, and an input</p><p>x which the controller wishes t o exert to drive the state to a second boundary. Then the value ta(q, x) returned by the DEVS time-advance function is the time required t o reach the desired boundary from state q under input regime x.</p><p>Since the controller knows the process state only u p to its being on thegiven boundary(i.e., onlyfrom the sensoroutputs), the time t o wait for a sensor response can only be narrowed to lie between the smallest ta(9, x ) and the largest ta(9, x) for states 9 on the boundary. Thus thewindow given by the DEVS model is the interval [min (ta(9, x)}, max (ta(9, x))l</p><p>where the min and max operators are taken over states q on the boundary in question.</p><p>Example: Continuing with the tank example, we design an event-based controller that starts filling the tank when the level reaches LOW and stops when the level reaches HIGH. Here, the boundary between UNDERFILLED and FILLED consists only of the level value LOW. Thus, in principle, there is a unique time ta(L0W + HIGH, x) (where x is the fill rate) for the level to reach HIGH, the boundary between FILLED and OVERFILLED. In practice, uncertaintiesin fill rateand in initial statewould betaken intoaccount to provide some width to such a window. When the water level drops t o the LOW level as indicated by the corresponding sensor, the controller opens the influx valve. If filling occurs normally, the HIGH sensor eventually responds within the time window just determined, and the controller closes the valve. In any other case of sensor response, the controller issues an error message for higher level consideration. This message, carrying information about which sensor caused the problem, can be employed for diagnostic purposes. For example, a too-early response of the HIGH sensor might indicate a failure of that sensor, a higher than normal fill rate, a presence of something new in the tanks, etc.</p><p>If we have a model for the rate of water loss, it can be used to provide a window for the expected time for the level to fall back from the HIGH boundary to the LOW boundary. Although the controller does not issue a command to bring the level from HIGH t o LOW, it can still use this window for diagnostic purposes. For example, too early a response from the LOW sensor might indicatea leak in the tank. Note that the larger the window, the lesser role it plays in such diagnostics. For example, the controller could uncritically accept a LOW sensor response at any time (effectively, an infinite window with initial point at 0 time) as the trigger to start filling. If the sensor is working normally, thewater level will have reached the LOW boundary, and the subsequent control action will be correct. However, if the sensor is faulty, and the water level i s not at the LOW boundary, then the subsequent time window may not reflect the actual filling time.</p><p>The proper operation of any form of controller depends on the correct responses of its sensors. In ebent-based control logic, the narrower the time windows, the better it is able to detect sensor anomalies, send diagnostic information to higher levels, and request directives. The control logic discussed is depicted in Fig. <ref type="figure" target="#fig_6">8</ref> . </p><formula xml:id="formula_1">1'1 1,IJ'h</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. THE ROLE OF EVENT-BASED CONCEPTS IN INTELLIGENT CONTROL</head><p>Event-based control is applicable to, and often more appropriate at, higher levels of control hierarchies. tional controller. In this case, the DEVS model required to "program" the event-based controller is that of the system consisting of the conventional controller and the controlled process. For example, a PID (proportional integration differentiation) controller might maintain the level of water in a tank at some reference level. However, setting of this level might be done by the event-based controller. After issuing a new set-point command, it would expect to receive a completion response within a definite time window. In this case, to derive a DEVS model, the state variable chosen might be the PID error signal. This one-dimensional space would be partitioned by an appropriate threshold sensor into a region near zero as one partition block, with its compiement as the second biock.The starting point in the second block is the difference of the desired and current levels. The required time window for the event-based controller is centered on the time taken by the PID controller to bring the starting point to the boundary with the first block. Event-based control in a layered architecture for tains the planning system which decides upon a sequence of actions in pursuit of a given goal. This sequence is developed in symbolic terms using artificial intelligence techniques and must be translated ultimately into a series of microlevel control system actuations. Event-based logic provides the intermediate layer in this translation. This logic can readily be"scheduled" bythe upper layer a s a sequence of actions, expected responses, and associated response time windows. Of course, the upper layer must have a knowledge base of DEVS models in order to generate suitable time windows. An interpreter of such a schedule can send out the proper commands to the lowest level controllers (or directly to the process), and take appropriate action vis-a-vis the expected response. This interpreter realizes the behavior characterized earlier in terms of DEVS event-based control models. In addition, the event-based logic level generates error messages that are employed for diagnostic purposes by the higher level artificial intelligence layer.</p><p>These principles are illustrated in a simulation environment capable of supporting the study of robot organizations for managing chemical, or similar, laboratories aboard a Space Station <ref type="bibr">[14]</ref>. Laboratory management includes the servicing and calibration of equipment, the set-up of experiments to external specifications, the monitoring and control of experiments in progress, the measurement of results, and finally the recording and analyzing of data. The environment should facilitate a thorough study of the problems to be encountered in assigning the responsibility of managing a non-life-critical, but mission valuable, process to an organized group of robots.</p><p>It is timely to begin exploration of advanced robot-controlled instrumentation. For example, handling fluids in orbit will be essential to many of the experiments being planned in manufacturing and biotechnology. However, the microgravity conditions of space necessitate radically different approaches t o fluid handlingthan arecommon on earth. As experience i n space accumulates, approaches and instrumentation will likely undergo continual modification, enhancement, and replacement. Thus, robots for managing such equipment must be sufficiently intelligent and flexible so that constantly changing environments can be accommodated.</p><p>In designing the robot models, we assume that necessary mobility, manipulative, and sensorycapabilities exist so that we can focus on task-related cognitive requirements. Such capacities, the focus of much current robot research, are treated at a high level of abstraction obviating the need t o solve current technological problems.</p><p>The robot cognition model is based on an "action-byexception" principlecontrol of a knowledge baseof Model-Plan Units (MPUs). Davis [I21 described a similar knowledge-based simulation environment in which agents are governed by a script (plan of actions) and a set of production rules for deciding when t o proceed from one phase of the plan to the next, which detailed actions to executewithin a phase, and what t o do if one plan has to be replaced by another one. Holland's classifier (parallel production rule) system provides concepts for sequencing robot actions [13].</p><p>The first stage in designing Model-Plan Units involves modelling of processes using the discrete event principles discussed above. We start with a particular real process, such as heating liquid in a doubly-contained bottle. We identify regions of operation such as: "there is a sufficient amount of liquid in the bottle,""the liquid has reached the desired operational temperature," "the air pressure is too high," "the bottle has exploded." A continuous dynamical model is then developed for each region based on physicochemical considerations. Boundaries between regions are then identified, and a discrete event model is specified whose internal events represent such transitions from one boundary t o another. Scheduling of such transitions is based on time-to-next-event values obtained from trajectories of the dynamical model. For example, if the initial quantity of liquid and the rate at which it heats u p are known, as well as the increase in air pressure with temperature, then the time t o reach the "air pressure too high" region can be predetermined, and hence scheduled.</p><p>For each action on the real process, a normal state trajectoryis identified in thecontinuous model, and projected into the space of sensor measurements. An envelope is determined to enclose this projected state trajectory. This envelope specifies the variation to be tolerated i n sensor measurements, while still accepting an observed trajectory as normal. For computational feasibility, sensorswith binary states (or a small set of discrete states) will be preferred, circumstances permitting. For example, for sterilizing a liquid, that liquid should be heated up to at least 70Â°C, and should be kept at that temperature for a prescribed period of time. For other reasons, it may not be advisable t o heat the liquid beyond 80Â°C. Therefore we may employ a sensor whose binary output indicates the temperature lying within, or outside of, the range 70-80Â°C. In addition to sensory boundaries, we employ timing information to determine normal operation. From estimated uncertainties in the initial state and parameters, the continuous model yields the window in which the time-to-next-event must lie for each state transition.</p><p>The plan of an MPU specifies a sequence of unit operations to be carried out to bring the real process from an initial state to a desired state. For example, an MPU for sterilizing water might specify filling a bottle with water, placing it in a heating spiral, and removing it when the required temperature of 70Â°C has been reached. Associated with each unit operation is a set of sensors for detecting its initialization and goal states, together with the time window in which each transition time must lie. If, for example, the time for the temperature sensor to change to its high state i s not within that allowed, the MPU is disabled; if the time is within bounds, the next action, removing the bottle, is carried out.</p><p>Following disablement of an MPU, other MPUs may be activatable in the prevailing state. MPUs may, for example, exist if the processing state is still a normal one; as a special case, the last activated MPU may be still have its initialization conditions satisfied. Consider, for example, a situation where the envelope timing bounds associated with the action "heat water" were exceeded because the power to the heating spiral was turned off. The selector must prevent the aborted MPU from gaining activation, and attempting indefinitely to use an inoperative heater. This might be done with a recency, or frequency-of-use component i n the selector's conflict resolution method.</p><p>Diagnostics are also associated with MPU plan abortion. These diagnostics will attempt t o discover faults which can be corrected to return the state to one in which normal operation can be resumed. Such diagnostics are guided by the sensor envelope and time window violations which caused the MPU to abort. For example, in the above situation, given that the expected heating time was exceeded, a diagnostic may deduce that the heating spiral i s not producing heat, and that one cause might be that power to it is turned off. The model underlying an MPU provides the basis for designing such diagnostic units.</p><p>A primary goal in the robot model design is to minimize the number of sensory inputs that the system must attend to a t any one time. Except at critical selection points, attention is focused on only those aspects of the environment dictated by the currently activated MPU. While an MPU behavior lies within its envelope, no other MPU can supplant it, even if its initialization conditions better fit the current situation. One of the primary goals of the project will be to judge whether these principles provide a workable basis for intelligent robot design. For example, such robots may be so single-minded as t o be incapable of flexibly responding to an unknown or changing environment.</p><p>Naturally, many unforeseen situations emerge in simulation runs. In such cases, the robot system will fail. Since the current state of the process, as viewed in the last activated MPU and its sensor readings (or a record of the most </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Event-based control.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. DEVS description of event-based control.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 5</head><label>5</label><figDesc>helps to compare the two forms of logic. The conventional sample data approach requires that the sensor reading be sufficiently precise t o becompared with the window requirements. In contrast, event-based logic does not .................................. . . . . . . . . . . . . -. . . . . . . . . . ......................................................... / .-..........</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. Representation of a continuous process by a DEVS model. A state trajectory starting at state 9 and traversing several output blocks, indicated by dashed lines, i s shown. Thetrajectorychanges in responsetoachange in input from x to x' at state 9". Scheduling times are those required to cross successive boundaries.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Cylindrical tank with sensors at two levels called HIGH and LOW.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Parameter values for tank controller.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 9 .</head><label>9</label><figDesc>Fig. 9. Event-based controller supervising a conventional controller.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 10 Fig</head><label>10</label><figDesc>Fig.10shows the role of event-based control in a layered architecture for intelligent control. The highest layer con-</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head></head><label></label><figDesc>recently activated MPUs) is available, we are in a position to analyze what went wrong. A more complete description is available in [14]. VII. CONCLUSIONS This paper has shown how systems may be advantageously represented as discrete event models by employing techniques based on the DEVS formalism. Suitably ZEIGLER: EVENT-BASED INTELLIGENT CONTROL</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>when receive value on sample-port if value is within window(check-state) then [ set check-state to next(check-state) continue</head><label></label><figDesc></figDesc><table><row><cell>h l g h r e s o l u t i o n $ L , ! sen o r s</cell></row><row><cell>Fig. 1. Conventional approach to control.</cell></row><row><cell>t h r e s h -h o l d s e n s o r s</cell></row><row><cell>Fig. 2. DEVS description of a conventional sampled data</cell></row><row><cell>control logic.</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>). If a sensor input i s received during this period, the external transition function recognizes this as an error, since it is too early for the expected sensor response. The internal transition function causes the model t o transition to phase WINDOW once tmin(P1) has elapsed without external interruption. The model is scheduled to stay in this phase for a duration given by window(P1). If a sensor input is received during this period, the external transition function tests it for validity. If the test succeeds, an appropriatecontrol command is issued from a transient phase SEND-COMMAND, checkstate is updated to P2, the WAIT phase is entered, and the model is scheduled to remain there for the appropriate duration, tmin(P2). If the test fails, an error is reported. Finally, the internal transition function causes an error transition, if the period, window(P1) has elapsed without receipt of the expected sensor input (any subsequent input would arrive too late).</figDesc><table /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>PROCEEDING5 OF THE I t t E , VOL 7 7 , NO 1, JANUARY 1989</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_1"><p>PROCEtDINC5 O F THt lCttVOL 77, NO 1, JANUARY 1989   </p></note>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>[IS] T. I . Oren, "Taxonom\, of simulation model pro' tncyclopedia of System5 arid Control, h l . Signh, Ed. York, NY: Pergamon Press. </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Discrete event simulation</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">F</forename><surname>Carzia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">R</forename><surname>Carzia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">P</forename><surname>Zeigler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">/ E â‚¬ â‚¬ Spectrum</title>
		<imprint>
			<biblScope unit="page" from="32" to="36" />
			<date type="published" when="1986-12">Dec. 1986</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">A</forename><surname>Zadeh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">A</forename><surname>Desoer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Linearsystem</forename><surname>Theor</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1963">1963</date>
			<publisher>McCraw Hill</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">W</forename><surname>Wymore</surname></persName>
		</author>
		<title level="m">A Mathematical Theory of Systems Engineering: The Elements</title>
		<meeting><address><addrLine>New York, NY</addrLine></address></meeting>
		<imprint>
			<publisher>Wiley</publisher>
			<date type="published" when="1967">1967</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">TheoryofModellingandSimulation</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">P</forename><surname>Zeiglcr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Multifaceted Modelling and Discrete Event Simulation</title>
		<meeting><address><addrLine>New York, NY; Malabar, FL; London and Orlando, FL</addrLine></address></meeting>
		<imprint>
			<publisher>Academic Press</publisher>
			<date type="published" when="1976">1976. 1985. 1984</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">System-theoretic representation of simulation models</title>
	</analytic>
	<monogr>
		<title level="m">Simulation and Model-Based Methodologies: An Integrative</title>
		<imprint>
			<date type="published" when="1984">1984</date>
			<biblScope unit="page" from="19" to="34" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Modelling and Simulation Methodology in the Artificial lntelligence Era</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">I</forename><surname>Vierv</surname></persName>
		</author>
		<editor>Elzas, T. I. Oren, and B. P. Zeigler</editor>
		<imprint>
			<date type="published" when="1984">1984</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>NewYork, NY</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Brain window language ot tireilies</title>
		<author>
			<persName><forename type="first">B</forename><surname>Soucek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">D</forename><surname>Carlson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">1. Theor. Biol</title>
		<imprint>
			<biblScope unit="volume">125</biblScope>
			<biblScope unit="page" from="93" to="103" />
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Hierarchical, modular di ling in an object oriented environment</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">P</forename><surname>Zeigler</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1987">1987</date>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="page" from="219" to="230" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Applying artiticial intelligence techniques to strategic-level gaming and simulation</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">K</forename><surname>Davis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Modelling and Simulation Methodology in the Artificial Intelligence</title>
		<editor>
			<persName><forename type="first">M</forename><forename type="middle">S</forename><surname>Era</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">T</forename><forename type="middle">I</forename><surname>Elzas</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">B</forename><forename type="middle">P</forename><surname>Oren</surname></persName>
		</editor>
		<editor>
			<persName><surname>Zeigler</surname></persName>
		</editor>
		<meeting><address><addrLine>Amsterdam, The Netherlands; New York, NY</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="1986">1986. 1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">/ : A n Introduction (with J. LV. Rozenblit, to be published by Scott, Foresman &amp; C o . ) and Kno~vledge Representalion inSimulation (with R. Reddyand T. I. Oren, Academic f&apos;ress). Dr. Zeiglcr has authored more than 100 puhlications in journals, hooks. and contercnce proceedings. His current research toruses o n modular, hierarchical modeling iormalism as a hasis ior new arc hitccturec for multiprocessor simulation, and i s supported by the National Science Foundation</title>
		<author>
			<persName><forename type="first">P</forename><surname>Bernard</surname></persName>
		</author>
		<author>
			<persName><surname>Zeigler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">North Holland, 1979) that set torth the possibilities tor coniputer support ot modeling in the 1980s. His latest book, Multifaceted Modelling and Discrete Event Simulation</title>
		<meeting><address><addrLine>Mi( higan, Ann Arbor; Tucson; London</addrLine></address></meeting>
		<imprint>
			<publisher>Academic Press</publisher>
			<date type="published" when="1969">1969. 19761. 1984</date>
		</imprint>
		<respStmt>
			<orgName>Universityot Alichigan</orgName>
		</respStmt>
	</monogr>
	<note>From 1975 to 1980, while stationcd at thc Il&apos;c,izmann Institute of h e n c e , Israel, he held a numher ot visiting appointments, including the IBh&apos;l-sponsored 5imulation Chair in Chent, Belgiurn. He has served as Acting Chairman of the Dcpartrnciit ot Computer Science at \l&apos;ayne State University, Detroit, h l l . He is currently Professor ot Flectrical arid Computer Enginccring at thc Universitv ot Arizona. Knowledge-base concepts trorii the field ot artiticial intelligence arr being employed to imf&gt;lenient multifaceted inodeling methodology. Application ot this niettiodology to the design ot organization of autonomou5 robots i s supported by NASA</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
