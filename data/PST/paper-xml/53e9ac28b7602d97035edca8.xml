<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Curve Fitting with Conic Splines</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Theo</forename><surname>Pavlidis</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Bell</forename><surname>Laboratories</surname></persName>
						</author>
						<title level="a" type="main">Curve Fitting with Conic Splines</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">AC5151CFDC2E2DFF2222828B724A4068</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T13:26+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>G.1.2 [Numerical Analysis]: Approximation</term>
					<term>1.3.6 [Computer Graphics]: Methodology and Techniques</term>
					<term>1.5.4 [Pattern Recognition]: Applications Approximation by splines, Bezier polynomials, variable knot splines, font description, interactive graphics, optical character recognition</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Conic splines are formed by arcs of conics, each defined by its endpoints and the tangents at them plus an intermediate point. Instead of the common general equation that depends on five parameters, an equation with a single parameter is used, thus simplifying significantly the curve fitting problem.</p><p>The resulting guided conics resemble Bezier polynomials and for parabolas are identical to them.</p><p>Such splines can be used conveniently both for interactive design and for automatic curve fitting. They allow circular, elliptical, and hyperbolic arcs to be included in the spline family, while the common forms using a B-spline basis allow the inclusion of parabolic arcs only. Conic splines are described either in a rational parametric or in algebraic form f(x, y) = 0. A simple estimate for the distance of a point from such a curve is given and is used to test the quality of approximations. The data to be fitted are first approximated by a polygon, and then simple heuristics are used to decide which sequences of vertices should be approximated by conics. The conics found by the applications of the heuristics are usually close approximations of the data and need no further adjustments. When adjustments are needed, the interval is split and a conic is fitted on each part. It is shown theoretically that exact knot placement at the optimal locations is less important for higher order splines than for polygons. Examples of application of the method to the fitting of font and other contours are given. Comparisons with other methods suggest that conic splines require no more knots than cubic splines for similar quality of approximation.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>The representation of curves by splines has found applications in graphics, computer-aided design and manufacturing, and numerous other fields ( <ref type="bibr" target="#b8">[1,</ref><ref type="bibr" target="#b12">5,</ref><ref type="bibr">7,</ref><ref type="bibr" target="#b26">19]</ref>, etc.). Originally, splines were given in the y = f(x) form, but this has certain disadvantages when one deals with arbitrary curves on the plane that may have "infinite" slope <ref type="bibr" target="#b13">[6]</ref>. Therefore the parametric form of representation is commonly used. The spline in the plane is defined through two scalar splines, x(t) and y(t), that have the same values of t at the knots. For example, a spline of degree n with Author's address: Theo Pavlidis, Bell Laboratories (2C-456), Murray Hill, NJ 07974. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. Â© 1983 ACM 0730-0301/83/0100-0001 $00.75 m knots may be given by the following equation: n P(t)= ~ aji(t-tj) i for tj&lt;_t&lt;_ti+l O&lt;_j&lt;_m-1.</p><p>(1.1) i=0 P(t) is a vector with elements x(t) and y(t), aji is the coefficient vector, t is the parameter, and the tj are the values of the parameter at the knots. If we use Bsplines for a basis, then the parametric equation takes the form m P(t) = Y, P~N~,,(t),</p><p>(1.2)</p><formula xml:id="formula_0">i=0</formula><p>where Ni,,(t) is the ith B-spline of degree n <ref type="bibr">[19, pp. 252-267]</ref>. This form, originally proposed by Riesenfeld <ref type="bibr" target="#b33">[26]</ref>, has been particularly popular in graphics applications and has an appealing intuitive interpretation. The coefficient vectors Pi may be interpreted as vertices of a guiding (or control) polygon and may be used in interactive graphics to control the shape of a curve. Thus they exhibit the major advantage of Bezier polynomials and are also easier to manipulate.</p><p>In spite of its popularity, the above representation has certain disadvantages. In particular, some commonly used curves, such as conics, are excluded by the formalism of eqs. <ref type="bibr">(1.1)</ref> or <ref type="bibr">(1.2)</ref>. Conics are widely used in CAD applications <ref type="bibr" target="#b10">[3,</ref><ref type="bibr">7,</ref><ref type="bibr" target="#b15">8]</ref>, and it seems that in many cases piecewise conic curves give results at least as good as those given by cubic splines. The popularity of cubic splines is due partly to historical reasons and partly to the following property: frequently, we want local approximations where the curve between two knots is specified by the location of the points and their tangents. Thus we need four degrees of freedom, and if we use the formalism y = f(x), or that of eq. (1.1), we must go to cubics (n = 3). Conics, however, have five degrees of freedom and therefore are adequate for such local fitting. (Parabolas expressed in this way have four degrees of freedom.) There are three more reasons for preferring conics: (a) conics are used to generate certain kinds of data (sometimes through "French curves"), so that our curve fitting matches the generating process; (b) conics have been studied for over two thousand years, 1 and there is wealth of mathematical results about them; and (c) it is much easier to find the intersection of a line (especially one parallel to one of the axes) with a conic than with a cubic. The solution of this problem is required in many graphics applications, and its difficulty for cubics has led to the development of the recursive subdivision algorithms <ref type="bibr" target="#b11">[4]</ref>. Cubics have a clear advantage over conics only in the following cases: (a) when continuity of curvature (or second derivative) is important, and (b) when interpolation without tangent specification is required. Then one has a system of equations like (1.2) that must be solved in order to find Pi. This system is well behaved numerically for cubics (n = 3) <ref type="bibr" target="#b38">[31]</ref> but not for quadratics (n = 2).</p><p>While conics cannot be described through polynomials of the form of eq. (1.2), they can be expressed through the following rational parametric form, often used in CAD applications <ref type="bibr" target="#b10">[3]</ref>, <ref type="bibr">[7, pp. 138-144]</ref>, <ref type="bibr">[8, pp. 21-25]</ref>:</p><formula xml:id="formula_1">xot 2 + xlt + x2 = ,<label>(1.3a)</label></formula><p>x(t) wot 2 + wl t + w2 yo t 2 + y~ t + Y2 y(t) wot 2 + w~t + w2</p><p>(1.3b) They may also be described by the algebraic form f(x,y) = 0.</p><p>(1.4)</p><p>The main result of the paper is a method for finding a mixture of conic arcs and straight-line segments approximating a given set of data points. This is described in Sections 6-8. This method is independent of the form used to describe conics and could be used with either of the two forms above. However, all parametric forms suffer from the following limitation: when splines are used to approximate a set of data points, one must establish a correspondence between the data points and the parameter t in order to compute the error. This problem does, however, disappear when the algebraic form is used. We present in Section 5 expressions for estimating the distance of a point from a conic given in algebraic form. It would seem that it would be difficult to find points of a conic given by eq. (1.4), but this is not the case. We present a solution in Section 4.</p><p>We have not attempted to design an optimal approximation algorithm for two reasons. One is that it can be shown theoretically that approximations by splines with tangent continuity at the knots have the property that error norm at suboptimal solutions is close to the error norm at the optimal ones (see Appendix B). A more important reason is that it is very difficult (if not impossible) to devise mathematical criteria for approximation that agree with the human perception of high-quality approximation. For example, the preservation of various syrmnetries or "lining-up" relations is very important for aesthetic reasons but very difficult to incorporate in an optimization algorithm. Therefore it is not advisable to make a great effort to find the optimal approximation under, say, an integral square error norm when this is not exactly what we want. For applications where highquality approximations are essential, it is necessary to include postediting of the results by a human observer. For applications where low-quality approximations suffice a suboptimal mathematical approximation could be acceptable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">DEFINITION OF CONIC SPLINES</head><p>We define conic splines by an extension of the definition of guided splines.</p><p>Definition 2.1. The following sets of points and parameters define a conic spline: (a) the vertices of a guiding polygon Vi, 0 _&lt; i _ k; (b) coefficients pi that are between zero and one and specify the location of the knot on the line segment ViVi+l, 1 _ i &lt; k; and (c) coefficients qi, between zero and one, denoting the location of a point of the curve along the line joining Vi+l with the middle of the line joining the knots before and after it, 1 _ i _&lt; k -1.</p><p>The knots K~ are then defined as</p><formula xml:id="formula_2">Ki -~ (1 -pi)Vi .-b piVi+l, (2.1)</formula><p>and together with the sides of the guiding polygon, they specify the endpoints </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>. Vi+l</head><p>and their tangents for each conic. The conic is specified completely by a fifth point:</p><formula xml:id="formula_3">I~ + Ki+I Zi = qiVi+l + (1 -qi) (2.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2) 2</head><p>We have five conditions, therefore, the conic is well defined, unless some of the guiding points are collinear (in which case the conic is reduced to linear segments). Figure <ref type="figure" target="#fig_1">1</ref> shows an example of a well defined conic. It is well known that if qi equals 0.5, then the conic is a parabola <ref type="bibr">[8, pp. 30-33]</ref>. In that case it is also easy to prove that if all the coefficients pi equal 0.5, then the conic spline is the same as a second-degree spline given by eq. (1.2) with uniform knot distribution. <ref type="bibr">[19, chap. 11]</ref>.</p><p>Next we examine various singular cases. Ifpi+l is zero, then the ith arc of the spline is the straight-line segment K/Â¥i+1. In order to have a straight-line segment with continuity of the tangents at both endpoints, we must select three guiding points along the same line. If Vi, Vi+l, and Vi+2 are collinear, then Ki and Ki+l are also on the same line, as is Zi, regardless of the value of q~. Ifp~ equals one and pi+l equals zero, then both Ki and Ki+I equal Vi+l. Also, Zi equals Vi+l, regardless of the value of qi. The ith arc then reduces to a single point and the spline exhibits a corner. This is a case of tangent discontinuity produced by knot coalescence <ref type="bibr" target="#b12">[5,</ref><ref type="bibr" target="#b32">25]</ref>. There is no way to introduce a discontinuity in the curve by further knot coalescence unless we allow values of p~ other than zero and one. If V~ coincides with V~+2, but V,+~ is different, then the spline exhibits a cusp. If qi is zero or one, then the conic arc reduces to a polygonal arc regardless of the value of pi or pi+l.</p><p>The following example illustrates one of the advantages of the new formalism.</p><p>Example 2.1. We wish to draw a curve of a desired shape in an interactive graphics system. To this end we specify first the guiding polygon (Figure <ref type="figure">2</ref>). If we were to use the form of eq. (1.2), the points where the curve intersects the sides jJ Fig. <ref type="figure">2</ref>. Specification of a guiding polygon, points through which the curve must pass, and the resulting curve.</p><p>of the polygon would not be under our direct control because they are specified by the values of the parameter t at the knots. (Also if we were to use cubics, we would not have direct control over the location of the curve or its tangents.) On the other hand, we may specify these points interactively and then use Definition 2.1 to draw the spline. We have the option of specifying the fifth point if we wish to control how close the curve passes to a vertex. In an interactive system there is no need to specify parameters pi and qi explicitly. They can be replaced by a specification of the knots and any fifth point.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">EQUATIONS THAT DESCRIBE CONICS</head><p>The customary general equation for a conic is f (x, y) = ax 2 + 2hxy + by 2 + 2ex + 2gy + c = O. <ref type="bibr">(3.1)</ref> Although there are six coefficients in eq. {3.1), one of them can be chosen arbitrarily, so that a conic has only five degrees of freedom. We assume without loss of generality that the sign of the first nonzero coefficient in eq. (3.1) is positive. It is well known that the conic is an ellipse if the quantity ab -h 2 is positive, a hyperbola if ab -h 2 is negative, and a parabola if ab -h 2 is zero. The conic is a circle if a = b and h = 0. The conic degenerates into a pair of straight lines if f(x, y) can be expressed as the product of two first-degree polynomials. In spite of its generality this form is not convenient for many applications or for proving properties about conics. We next describe some alternative representations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Matrix Equation for Conics</head><p>We use the term coordinate vector to refer to the column vector x with components x and y. If we define Q to be the matrix and g the column vector with components 2e and 2g, then eq. (3.1) becomes f(x) = x'Qx + g'x + c = 0.</p><p>(3.</p><p>3)</p><p>The primed symbol of a vector or a matrix is used to denote the transpose. Note that ab -h 2 is the determinant of Q.</p><p>The center of a conic is defined as the point with coordinate vector</p><formula xml:id="formula_4">1 Q-1 Xc = -~ g,<label>(3.4)</label></formula><p>or in scalar form</p><formula xml:id="formula_5">-eb + gh -ag + eh xc - ab -h 2 ' Yc - ab -h 2 " (3.5)</formula><p>Note that the center is not defined for parabolas. For ellipses and hyperbolas we may move the origin of the coordinates to the center and obtain a simpler form of eq. (3.3)</p><formula xml:id="formula_6">f(x) = x'Qx + cl = 0,</formula><p>where the constant Cl is given by</p><formula xml:id="formula_7">1 p 1 c1= c-~gQ- g. (3.6)<label>(3.7)</label></formula><p>The axes of a conic are parallel to the two eigenvectors of Q, and if ),max denotes the larger eigenvalue of Q and ~min the smaller, we find from eq. Note that for a circle Q is proportional to the identity matrix; thus any vector through the center is an axis. A straightforward calculation shows that the eigenvalues are given by .</p><formula xml:id="formula_8">.... in = l[a + b + x/(a -b) 2 4-4h2].</formula><p>If h is zero, then the two eigenvalues equal a and b respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Guided Form for Conics</head><p>A form that is useful for conic splines is the guided form whereby the conic is expressed through the equations of certain lines. We recall that the general form for the equation of a straight line is a,x + ayy + ao = O.</p><p>(3.9a)</p><p>If a is the two-dimensional column vector of the coefficients, then the above equation can be written in the more concise form a'x + ao --0, (</p><p>where a' denotes the transpose of the vector a. It can be shown that replacing the coordinates of any point into eq. (3.9) yields the distance of the point from the line times a constant. If a straight line is specified by the coordinates of its two The sign of d indicates the side of the line on which the point lies.</p><p>Using these expressions, we can write the equation for a guided conic. Suppose that we are given two points A and B and the tangents of the conic at points TA and TB. Since conics have five degrees of freedom, these four conditions describe a one-parameter family of conics. Let a'x + a0 = 0 be the equation of line TA, b'x + bo = 0 the equation of TB, and u'x 4-u0 = 0 the equation of chord AB. Let K be the parameter of the family of conics defined in this way. Then their equation is See <ref type="bibr">[28, pp. 234-235]</ref> and <ref type="bibr">[29, p. 72</ref>] for a proof. If we denote by C the intersection of the two tangents (Figure <ref type="figure">3</ref>), we have the following geometrical interpretation of eq. (3.13).</p><p>PROPOSITION 3.1. If A, B, and C are three points, then for each number k there exists a conic passing through A and B and tangent to A C and CB with the property that for each one of its points P, the distance of P from AB times k is the geometric mean of the distances of P from lines A C and CB.</p><p>We have used k rather than K in the statement of Proposition 3.1 because the constant includes scale factors from the equations of the lines.</p><p>For a given set of tangents and endpoints, the selection of a fifth point E, through which the curve must pass, determines K. It is possible to establish a relation between the form of the conic and the part of the plane where the point is chosen. First we observe that since two points and their tangents uniquely define a parabola, then we should be able to specify a value of K so that eq. (3.13) represents a parabola without having to select another point. A rather lengthy but straightforward calculation yields the following value of K</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1</head><p>(axby-bxay) 2 K = -~ UxUy(axby + b~ay) -U~ayby -u~a~bx" <ref type="bibr">(3.14)</ref> We can define the three lines of eq. (3.13) in terms of eq. (3.10) by using the following ordered pairs of points: A and C, B and C, and A and B. Then the big fraction of eq. (3.14) reduces to one and the value of K corresponding to the parabola is -1/4. With this specification for the lines we derive the following results.</p><p>PROPOSITION 3.2. Ira conic is defined by a triangle ABC and a fourth point E, and the equations of the lines in eq. (3.13) are like those in (3.10), then the following statements are true. K is negative whenever point E is selected in the plane sector containing chord AB. This sector is marked by a 1 in Figure <ref type="figure">3</ref>. In this case all three points E, A, and B belong to the same conic arc. The parabola divides that sector into two parts. The conic will be an ellipse only when E is in sector 1 below the parabola. In that case K will be less then -1/4. In all other cases the conic will either be a hyperbola or will degenerate into pairs of lines. If E is in sector 3, then K is negative, but E belongs to a different branch of the hyperbola than A and B. K is positive if E is located in either sector 2 or 4. Then A and B lie on different hyperbolic branches. K can be zero only if we select E on one of the tangents and the conic degenerates into a pair of lines. Also irE is selected on AB, then K is infinite and the conic degenerates to chord AB.</p><p>It is simple to prove that if the conic is a parabola, then eq. (3.13) is the same as the Bezier equation <ref type="bibr">[19, pp. 221-223]</ref>. There is another convenient form for parabolas that is related to the guided form. Let c'x + Co --0 be the equation of a line through A and parallel to the line joining C with the midpoint M of chord AB (see Figure <ref type="figure" target="#fig_4">4</ref>). Let x2 be the coordinate vector of B. Then the equation of the parabola is the points where this tangent intersects AC and BC, respectively, then the parabola is subdivided into two arcs, AF and FB, and each arc is specified again by its endpoints and tangents. This is the same as the recursive Bezier subdivision <ref type="bibr">[19, pp. 227-230</ref>].</p><formula xml:id="formula_10">(c'x + Co) 2 + (a'x + ao). (a'x2 + 1) --0 (3.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Guided Rational Parametric Form for Conics</head><p>It can be shown <ref type="bibr">[7, pp. 138-144</ref>] that the rational parametrtic form of eq. ( <ref type="formula" target="#formula_1">1</ref>.3) can be used to describe a guided conic by the following equation:</p><formula xml:id="formula_11">w0(1 -t)~ + 2wit(1 -t)xc + w2t2XB x(t) = w0(1 -t) z + 2wit(1 -t) + wzt 2 ' (3.16)</formula><p>where xA, xB, and xc are the coordinate vectors of points A, B, and C of Figure <ref type="figure">3</ref>, and w0, Wl, and w2 are the parameters whose selection specifies each particular conic belonging to the family. As a matter of fact it is the value of WoW2 w~ (3.17)</p><p>that is important--the conic does not change if we vary the wi's while keeping the above ratio fixed. It can be shown <ref type="bibr">[8, pp. 25-27]</ref> that this ratio equals qi as defined in eq. (2.2). It is straightforward to verify that x(0) = xA, x(1) = XB, Â±(0) = 2Wl/Wo(Xc --XA), and x(1) = 2wl/wz(x~ -Xc). If we denote by tE the value of t at point E with coordinate vector XE, then eq. (3.16) yields</p><formula xml:id="formula_12">(1 --tE)2Wo(XA --XE) + 2WltE(1 --tE)(Xc --XE) + t2W2(XA --XE) ----0. (3.18)</formula><p>In other words the w/s and tf can be found from the projections of vector EC on vectors AC and AB. (Note that two of the four unknowns can be chosen arbitrarily.) While these computations may involve slightly more work than finding K from eq. (3.13), we should point out that additional work is required to find the coefficients of the conic from K, while only the solution of eq. (3.18) is required for the rational parametric form.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">PLOTTING A CONIC</head><p>If we use the parametric form (1.1), then it is simple to find a sequence of points on the curve for plotting or for any other purpose. This is also the case with the parametric form of eq. (1.3), except that we require two additional divisions for each point to be plotted. Things are somewhat more complicated for nonparametric forms. The following result provides a mechanism for finding such points under the algebraic representation, provided that we already know one point on the curve.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Incremental Plotting</head><p>PROPOSITION 4.1. If an ellipse or hyperbola is given by eq. (3.6), then there exist matrices B such that if x is a point on the conic, then Bx is also a point on the same conic. All such matrices are of the form</p><formula xml:id="formula_13">B=[P+h1" bl" ] -at p -h~ ' (4.1)</formula><p>with p and r satisfying the equation</p><formula xml:id="formula_14">p2 + (ab -h2)Â¢ 2 = 1. (4.2)</formula><p>PROOF. Straightforward by showing by direct substitution that any matrtix B given by eqs. (4.1) and (4.2) satisfies also the following equation</p><formula xml:id="formula_15">B'QB = Q. (<label>4.3)</label></formula><p>This implies that Bx will also be on the conic because of eq. {3.6). It is also possible to show that this construction is equivalent to the well known geometric construction of an ellipse by means of the concentric circle method <ref type="bibr">[27, pp. 133-134]</ref>. [] A matrix B may be used to plot ellipses and hyperbolas in a numerically stable way. For this purpose â¢ is taken to be small and p near one. For ellipses one could define an angle ~ such that sin6 p = cos 0 r -, (</p><p>4a-b-h 2 while for hyperbolas we can select a variable X such that sinh X p = cosh X T -(4.4b)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4~-ab</head><p>Normalization of the coefficients of eq (3.1) so that ab -h 2 = 1 (4.5) simplifies subsequent calculations. The only difficulty occurs when the original value of ab -h 2 is near zero. From a practical viewpoint it is best in such cases to treat the conic as a parabola. For the applications discussed in this paper this is quite acceptable since we are approximating rather than interpolating curves.</p><p>At first look the use of a matrix multiplication per point seems an unduly complicated method for plotting conics. However, it is competitive with the rational parametric method. The operation Bx requires 4 scalar multiplications and 2 additions plus 2 more additions if the center is not the origin of coordinates. Equation (1.3) requires two divisions plus 6 additions, if the divided differences method is used for calculating the quadratic polynomials. 2 In contrast, some books on computer graphics contain algorithms for conic plotting that require as many as 20 operations per point (10 multiplications and 10 additions). If h = 0, (i.e., if the conic axes are parallel to the coordinate axes), and if the known point of the conic is at the tip of an axis, then Bx is reduced to the simple expression X cos 0 Y sin for an ellipse with axes X and Y. A matrix B may not be used to plot parabolas (eq. {3.6) does not hold for them), but parabolas can be plotted easily as polynomial splines. For the sake of generality we give in Appendix A a result that can be used for the incremental plotting of parabolas.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Recursive Plotting</head><p>All the plotting techniques described above assume that the coefficients of the equation describing the conic have been found. It is possible to plot a conic without having that information, at the expense of more computation per point. Such constructions are based on the following important theorem for conics. PASCAL'S THEOREM. If a hexagon is inscribed in a conic, then the three pairs of opposite sides have collinear intersections.</p><p>See <ref type="bibr">[28, pp. 245-246]</ref> or <ref type="bibr">[29, pp. 83-85]</ref> for a proof of this theorem. Thus, given five points, we may select a line on which the three intersections must lie, and then construct the sixth point. See <ref type="bibr">[28, pp. 247-248]</ref> for details. If we let two pairs of points on the hexagon coincide, then two of the sides become tangents and we have the situation shown in Figure <ref type="figure" target="#fig_5">5</ref>. There, A and B are double points and the six lines of the hexagon are paired: AC with EB, AD with BC, and DE chord AB. This is the configuration of practical interest for guided conics.</p><p>If only D is given, then we can construct E by drawing an arbitrary line through P2, finding points P1 and/)3 as intersections on that line with AC and AB, respectively, and then finding the intersection of lines AP2 and DP3. Forrest <ref type="bibr">[9]</ref> gives another algorithm based on the same principle. Since these techniques require finding the intersection of three pairs of lines for each point on the conic, they are clearly inferior to incremental plotting or parametric plotting. They become competitive only when one needs very few points and wants to avoid the overhead of finding the coefficients of the conic or of solving eq. (3.18). <ref type="bibr">2</ref> The two methods will be equally expensive if we assume a machine where a multiplication is twice and division three times as expensive as addition, or if we assume that the three operations have equal costs. These assumptions are reasonable for modern computers where the register-to-register arithmetic operation time is comparable to the time of the memory to register fetch. (E.g., pp. B-  If we wish to find the tangent at a given point, then we repeat the above construction by having D and E coincide: line DP3 will be the tangent. (In that case we would not have chosen an arbitrary line through P2, but would have found P, as the intersection of AC and BD.) These constructions provide the elements for a recursive algorithm. Given triangle ABC and a point on the conic D, we find the tangent at D and let A1 be the point where it intersects AC, and B1 the point where it intersects CB. In addition, we find two more points, D1 and/)2.</p><p>Now we have two arcs, one defined by triangle AA1D and point D~, and another defined by triangle DBIB and point D2. Since the same set of operations may be applied to each of these two arcs, we have a recursive method. It is easy to show that at each step the angle between the tangents increases; therefore the difference between the parabola defined by the triangle and all other possible conics keeps decreasing. Thus at some point we can stop the subdivision and instead complete the plotting by parabolic arcs. Furthermore we do not need to find the points D~ and D2 for the last recursion. If the number of recursions is small compared to the number of points to be plotted, then the recursive method becomes competitive since a parabolic arc can be drawn incrementally with only four operations per point, and part of the cost of the recursion can be written off against the overhead of finding the conic coefficients and initialization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">DISTANCE OF A POINT FROM A CONIC</head><p>While for a straight line with an equation of the form f(x, y) = 0, the quantity f(x, y) is proportional to the distance of a point from the line, the same is not true for conics. We present here some properties of conics that are useful for estimating such a distance. Some of these results are "new" in the sense that we could not find a reference describing them, but given the vast literature on the subject of conics it is doubtful that they have not appeared in print before. Anyway, all the proofs are straightforward applications of analytic geometry and linear algebra.</p><p>Let xo be a point on the conic, x a point not on the conic, and r a vector joining the two such that Carrying out the multiplications, and considering that, by hypothesis, f(x0) = 0, we find f(x) = 2x~Qr + r'Qr + g'r.</p><p>(5.3)</p><p>If we select x0 at the foot of the normal from x to the conic, then the length of r will be the distance of this point from the curve. Clearly, f(x) is a rather complicated function of that distance and one can construct examples where, depending on the location of x, we have different values of f(x) for the same length of r. Equation {5.3) shows that the use of f(x) as a measure of the distance of a point from a conic is not justified. Nevertheless, it can be used as a starting point for deriving simple distance estimates.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Distance of a Point from a Parabola</head><p>It is necessary to handle parabolas differently from ellipses and hyperbolas. The latter two types of conics have a center while parabolas do not. However parabolas have the property that the matrix Q has a zero eigenvalue. If we select r to be an eigenvector of Q corresponding to that eigenvalue, then Qr is zero and we have f(x) = g'r.</p><p>(5.4)</p><p>Because the direction of r is fixed, its scalar product with g is proportional to the norm of r. It can be shown easily that the eigenvector in question is parallel to line CM in Figure <ref type="figure" target="#fig_4">4</ref>. If xl and x2 are the endpoints (A and B in Figure <ref type="figure" target="#fig_4">4</ref>), and xb the point where the tangents intersect (C in Figure <ref type="figure" target="#fig_4">4</ref>), then the equation of the parabola can be written as</p><formula xml:id="formula_17">f(x) = [dy~2(x-xl) -dx~2(y _y~)]2 + [(yb -yl)(x -xl) -(xb -xl)(y -y~)] (5.5) â¢ [(xb -x,)(y2 -yl) -(yb -yl)(x2 -x,)]</formula><p>where</p><formula xml:id="formula_18">xl + Xe yl + y2 dx12 = xb and dyle = yb 2 2</formula><p>This is a special case of eq. (3.15), which produces the following result.</p><p>PaOPOSlTION 5.1. For a parabola given in the form of eq. {3.15), the quantity f(x) is proportional to the distance of the point from the parabola computed along a segment parallel to the line joining the intersection of the tangents with the midpoint of the chord (CM in Figure <ref type="figure" target="#fig_4">4</ref>). If the special form of eq. (5.5) is used, then the distance is given by the following equation:</p><formula xml:id="formula_19">D(x) = 2f(x) ~/dx~2 + dy22. (5.6) [(y2 -yl}(xb -xl) -(x2 -xl)(yb -yl)] 2</formula><p>Clearly, D(x) is a good estimate of the distance along the normal to the curve only when the foot of the normal is near point F in Figure <ref type="figure" target="#fig_4">4</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Distance of a Point from an Ellipse or a Hyperbola</head><p>For ellipses and hyperbolas we can find a useful relation for the distance of a point from the curve computed along the line joining the point and the center of the conic. Let xc be the coordinates of the center. Equation {5.1) can then be written as</p><p>x -xc = Xo -xc + r.</p><p>(5.7)</p><p>If the vectors x -xc and Xo -Xc are collinear, then there exists a nonnegative scalar Ix such that r = Ix(Xo -x~).</p><p>(5.8)</p><p>Ix exceeds one if x is "outside" the conic, and it is less than one if x is "inside" the conic. Substituting eq. ( <ref type="formula" target="#formula_21">5</ref>.8) into eq. ( <ref type="formula" target="#formula_21">5</ref>.3), and using eq. (3.4) for Xc, we find</p><formula xml:id="formula_20">f(x) = (2Ix + Ix2)(x~Qxo + g'xo +1 g,Q-lg).</formula><p>(5.9)</p><p>We shall use the symbol q(x0) to denote the expression x~Qxo + g'xo. Since Xo was assumed to be on the conic, using eq. ( <ref type="formula" target="#formula_4">3</ref>.3) we have q (Xo) = -c. Substituting this value and using eq. (3.7), we find where q(x) = f(x) -c. Clearly, the norm of the vector Xo -Xc is bounded from above and below by the size of the two axes. 3 Also, the distance of x from the curve is no greater than r, and it equals r along the axes. Therefore we can find upper and lower bounds for it. Using eq. (3.8), we find</p><formula xml:id="formula_21">f(x) = -cl(2Ix + Ix2). (<label>5</label></formula><formula xml:id="formula_22">_ 1 q(x)-I ]lami.ll&lt;D(x)&lt; - q(x)-I Ilamaxll? (5.13) - - V,</formula><p>While eq. (5.13) suggests that the distance D(x) is a monotonic function of f(x), this is strictly true only for the bounds. Thus f(x) is only a gross indicator of the 3 One can show that the angle between the normal to a conic at a point x and the line joining x with the center is at most ~r/2 -2 tan-' aJ'~. Therefore r and xo -x~ do form a small angle if the axes have comparable lengths. <ref type="bibr" target="#b11">4</ref> The reader can confirm that when an ellipse is given in the canonical form:</p><p>x2/A 2 + y2/B2 -1 = 0, then eq. {5.13} becomes</p><formula xml:id="formula_23">I ~/x2/A2 + Y2/B2 -liB &lt;--D(x) &lt;_ I ~/x2/A2 + Y2/B2 -1 [A.</formula><p>distance, and its use to specify a conic (e.g., by minimizing sums of squares of f(x) for various points), is not recommended. On the other hand, eq. ( <ref type="formula" target="#formula_21">5</ref>.13) could be used to check whether a given approximation by a conic is acceptable. If the coefficients of the conic have been normalized so that ab -h 2 = 1, then it is easily shown that the geometric mean of the two axes equals ( I Cl I ) 1/2. For points near the conic, q(x) is close to -c. Then</p><formula xml:id="formula_24">~/q(x) + v -~/c + v = ~1 + v [ qj-~ _ ~c].<label>(5.16) Â¥ c</label></formula><p>The estimate</p><formula xml:id="formula_25">Dl(x) = ~- ~c (5.17)</formula><p>is simpler to compute than D0(x), and eq. <ref type="bibr">(5.16)</ref> shows that the ratio between Do and D1 is approximately constant. Special cases of these expressions have been used in <ref type="bibr">[2]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">On the Selection of a Fifth Point for Guided Conics</head><p>The following is proved by straightforward substitutions. (5. <ref type="bibr" target="#b26">19)</ref> In other words, when we have to choose between two points (equidistant from the chord) for specifying a guided conic, it makes no difference which one of the two points we pick because both result in the same value of If(x) I for the other point and therefore yield the same value for eq. (5.14).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">APPROXIMATION BY CONIC SPLINES</head><p>Specifying a curve through a guiding (control) polygon is a method popular among experienced users--naive users, however, may prefer to draw the curve itself in a rough way and expect the automatic production of a "good looking" curve. In other applications, data must be processed without the help of a human operator. When curve fitting is to be done noninteractively, it is necessary to select the location of the knots and the other parameters by an algorithmic procedure. References <ref type="bibr">[14]</ref>, <ref type="bibr" target="#b30">[23]</ref>, and <ref type="bibr" target="#b31">[24]</ref> are three recent papers on this topic with an emphasis on graphics applications. (Reference <ref type="bibr" target="#b31">[24]</ref> contains many references to the earlier literature.) All use the parametric representation of eq. (1.1).</p><p>The selection of aij and tj is made while minimizing certain error criteria that measure how far the spline is from the given data points X~, (k = 1,..., N).</p><p>Earlier writers who have studied approximations by conics have used five parameters to define a conic and then solved a least squares minimization problem with constraints for finding the conic that fits a set of data points. {See, for example, <ref type="bibr">[2]</ref> or <ref type="bibr">[13]</ref>. Reference <ref type="bibr">[2]</ref> contains many citations to earlier papers with similar methods.) Because there is no simple expression for the distance of a point from the conic, some have used the value of f(x, y). In this paper we rely on the guided form of conics introduced in Section 3, which is a convenient form to use for conic splines because the continuity constraints are satisfied automatically. However, this simplification still leaves us with a nasty problem because both the location of the knots and the direction of the curve tangents at them are not known. We overcome this problem by first finding a polygonal approximation of the data, and then selecting the knots and their tangents on the basis of the properties of the polygon found. The major advantage of this strategy is that the expensive knot search procedure is performed for the polygons and that therefore the fitting of conics is a one-, or at most, two-pass operation.</p><p>Roughly speaking, we use the triangular inequality among functions. We find a polygon that is near our data points and then a set of conic arcs that approximates the polygon. The error norm between the last approximation and the data points is less than the sum of the error norms of the previous two approximations. Clearly, the result is not going to be as good as the result of a direct approximation. However, it is important to stop and think what "good" means when we fit curves. If we decide that good means minimizing a well-defined mathematical cost function, then the approach of this paper leaves much to be desired. However there is little agreement as to what the proper cost function is. Therefore it is counterproductive to invest significant effort in mathematical optimization if we doubt that the mathematically optimal solution is what we actually want. In design applications where shape is very important, the results will be postedited anyway, while in pattern recognition applications we are interested only in the general shape of a curve, and details of the representation are usually ignored. (E.g., one may be interested only in knowing whether an arc is convex or concave.)</p><p>We chose to start with polygonal approximation because it is much easier than approximation by higher order curves. This is true for many reasons: first, one may use interpolants rather than approximants with a significant savings in computation costs. It is well known that the maximum error with respect to the interpolant is at most twice that of the optimal approximation <ref type="bibr">[5, pp. 40-41]</ref>. That condition is achieved when there are no changes in the sign of the error; usually the maximum error from the interpolant is below that upper limit. Second, eq. (3.10) provides a very simple formula for computing the distance of a point from a line. If the data to be fitted indeed have polygonal parts, then performing the cheaper approximation first makes sense: we will do the higher order approximations only when we need them. One of the intended applications of this work is the fitting of curves on contours of alphanumeric characters of various fonts (see Section 9). Many characters, for instance Helvetica A, have no curvilinear parts. There are also some deeper reasons for using polygons for solving the knot location problem. These are described in Appendix B.</p><p>The use of a polygonal approximation to determine sequences of vertices which can be replaced by a conic has been suggested before, particularly in <ref type="bibr">[13]</ref> and <ref type="bibr" target="#b28">[21]</ref>. Pavlidis and Ali, however, stopped short of actually finding the conics, while Liao attempted to fit conics in all parts of the polygon without any prescreening. Lozover and Preiss <ref type="bibr">[14]</ref> also used a rough polygonal approximation as a first pass and then determined a cubic spline whose knots are the vertices of the polygon. In Section 7 we present criteria that use the size of the angles of the vertices and the ratio of the lengths of subsequent sides to classify a vertex as hard, soft, or break. Hard vertices are left as polygonal vertices, while groups of adjacent soft vertices are considered for approximation by conics. In addition, we label sides as breaks if they separate two conics. Section 8 includes methods for selecting the knots and tangents at them. The following is an outline of the algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Outline of Algorithm</head><p>(1) Find an approximating polygon.</p><p>(2) Classify vertices as hard, soft, or break according to the criteria of Section 7.</p><p>(3) Identify breaks from among sides joining soft vertices according to the criteria of Section 7. (4) Fit conics on all sequences of soft vertices using the method presented in Section 8. If a conic does not fit well, subdivide the interval and try again.</p><p>Since the rest of the paper does not depend on the way the polygon is found, we dispense with a discussion of polygonal approximations. We assume only that we are given N data points Xk, k = 1,..., N, a maximum error tolerance em, and that we want to determine a polygonal approximation of the data points such that for each data point there is a line within em from it. There are numerous algorithms for doing this. (See <ref type="bibr">[18]</ref> for a survey of earlier work.) The specific algorithm used in this paper is described in <ref type="bibr">[19, pp. 281-292]</ref> and is analyzed in <ref type="bibr" target="#b27">[20]</ref>. Its results have the following properties. We emphasize that the algorithm does not depend at all on the way the conic is represented and is equally adaptable to the algebraic or rational parametric forms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">CLASSIFICATION OF POLYGONAL VERTICES</head><p>The central idea of this section is that if a polygon with more than five vertices is inscribed in a conic, then there are certain relations that must be satisfied by the size of its angles and sides. If we are given an arbitrary polygon and we want to find whether parts of it can be inscribed in conic arcs, then it is reasonable to search for sequences of vertices that satisfy the relations that vertices of an inscribed polygon do. In what follows, the term hard is used to describe a polygon vertex that is unlikely to be part of a conic arc, while breaks are points where two different conic arcs may meet. We shall use properties of conics to classify polygonal vertices as hard, soft, or breaks. A soft vertex is one that is not hard. It may or may not be a break. While all our criteria are stated as heuristics, they are motivated by Pascal's theorem, stated and discussed in Section 4. If we are given two endpoints and tangents at them, the theorem implies certain bounds on the vertex size and the difference in the size of adjacent vertices. Referring to Figure <ref type="figure" target="#fig_5">5</ref>, we observe that for any triangle ABC and two points D and E inside it we have The difference becomes maximum in the limiting case when P3 tends to B and both P1 and P2 tend to C. Then DP3A approximately equals P2BA, and the difference is found to be less than ~r -ACB. However, if side DE forms a small angle with chord AB, then the right-hand side of the equation of Proposition 7.2 is near zero.</p><p>These observations lead us to some simple criteria: first, that of the size of the angle at a vertex. In principle, no matter how sharp an angle is, we can always fit a conic that passes through that vertex and the two adjacent vertices and also stays within distance em of the sides. (We have exactly five conditions.) However, such a conic is not likely to be extensible to include other vertices. If we use the guided form of conics of eq. (3.13), then we can show that the distance of the vertex from the unique parabola is proportional to the sine of the angle between the tangents. The sine function is small not only when the angle is small, but also when it is near 180 Â° . Therefore soft vertices should have angles that are near 180 Â°, not a surprising conclusion. Thus we have HEURISTIC 7.1. A vertex is classified as hard if it is less than 180 Â° -al, or greater than 180 Â° + a,, for a given angle al.</p><p>Appendix B describes some experiments demonstrating that, at least for some applications, the distribution of the size of the polygonal angles is bimodal and that there is, therefore, a certain latitude in the selection of the size of the threshold for classifying a vertex as hard or soft. If a vertex is classified as hard, then it is preserved in the final approximation and separates conics from each other. However, conics may be separated at points where there is no derivative discontinuity, and therefore the knot will be near a vertex that is not hard. We classify such vertices as breaks and find them by means of the following criteria. The first criterion for breaks is based on the ratio of side lengths. The following result is easily proven using eq. {3.6). PROPOSITION 7.3. Let 0 be the center of a conic and A and B two points on it. Let M be the middle of chord AB, and P the point where line OM intersects the conic. Find a point C such that if N is the middle of chord BC, and R the point where ON intersects the conic, then MO/PO = NO/RO.</p><formula xml:id="formula_26">(7.1)</formula><p>Then Chords AB and BC are parallel to rays {lines from the center) of a concentric conic similar to the one given.</p><p>Note that the point C may not always exist. But given A, B, C, P, and R, one can always find a conic passing through them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>COROLLARY. The ratio of the lengths of chords AB and AC is bounded by the ratio of the lengths of the axes of the given conic.</head><p>This is a particularly useful result for our purpose. Let P be a given polygon. We want to test the hypothesis that two of its sides form chords of a conic under the conditions of the theorem. Furthermore, we assume that the axes of the conic have a ratio within given limits. {This is reasonable for many applications, such as curve fitting for font description.} If the side ratio is outside these limits, then the sides cannot be chords. Since we expect the theorem to hold approximately when its hypotheses do not hold exactly, we can develop the following heuristic for distinguishing between hard and soft vertices. HEURISTIC 7.2. If the ratio of two adjacent sides exceeds a given value R1, then the vertex is classified as a break.</p><p>We can find a criterion for labeling sides as breaks by observing that since conics have no inflection points, we should always separate groups of angles that are greater than 180 Â° from those that are less than 180 Â°. A side adjacent to such a pair of angles should be classified as a break. In addition, we should define as breaks sides where the two adjacent angles are significantly different. This is dual to Heuristic 7.2. HEURISTIC 7.3. A side is classified as a break if the angles adjacent to it are on different sides of 180 Â° or they differ by more than a given threshold A1.</p><p>Many of these heuristics have been motivated by Proposition 7.2, which states that the difference between the angles is small if angle ACB of Figure <ref type="figure">3</ref> is large.</p><p>In order to ensure that this is the case, we introduce a fourth heuristic. HEURISTIC 7.4. A vertex is classified as a break if its addition to the conic would cause the angle between the two endpoint tangents to be less than a given angle A2. {Otherwise the conic arc would exceed 180 Â° -A2.) This heuristic was found to be very useful in practice. During tests we observed that conics that covered wider arcs almost always also violated the error criteria. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">FITTING A CONIC</head><p>The labeling of the vertices and sides of a polygon according to the criteria of Section 7 is a very simple operation. (The most expensive computation is the calculation of the angles of the vertices.) Suppose that A is a hard vertex, and B1,</p><p>â¢.., B, a sequence of soft vertices, as shown in Figure <ref type="figure" target="#fig_12">6</ref>. Then line AB1 is taken as the tangent of the conic at the knot near A. We must select a point on line segment AB1 at which to start the conic arc. The following heuristic has been found to give good resultsâ¢ HEURISTIC 8.1. If the ratio of side AB1 to side B1B2 is less than R1, then select the starting point of the conic at A. Otherwise select the starting point of the conic arc along segment AB~ at a distance from B~ equal to half the size of segment B1B2.</p><p>The motivation for using half the length is that this would be the optimal selection of points if we were fitting a parabola. (Recall Figure <ref type="figure" target="#fig_4">4</ref>.) If a vertex is a break, then we consider the vertices on either side. If Ao is the previous vertex, we select line AoA as the tangent and use the midpoint of the line as the starting point, unless BIB2 is less than half ofAoA~. Then we apply Heuristic 8.1. If a side has been classified as a break, then it is taken as a tangent and its midpoint is used as starting point. Similar criteria are used for the end of a sequence of soft vertices. In addition to endpoints we must select a fifth point to specify the conic completely. It is tempting to attempt the selection of these points by means of an optimization procedure. If the soft vertices have the configuration of Figure <ref type="figure" target="#fig_12">6</ref>, then their distances from the chord would not vary much, and according to Proposition 6.3 it should not matter which one we select for a fifth point. For this reason we select the vertex closest to the middle as the fifth point. Figure <ref type="figure" target="#fig_13">7</ref> lists the conic fitting procedure in detail.</p><p>After a conic is fitted, we compute the distance of the vertices from it using eq. (5.14). If the axes have significantly different lengths, then we may use eq. (5.13}. We have found that in most instances the conics fitted initially give good results, so usually there is no need to modify the approximation. If high-quality fits are desired, then the following procedure improves the fit. The set of vertices defining the conic is split into two parts separated by the vertex where the error is zero. If the conic ends in a hard vertex or a break, new conics are fitted on both parts. If the conic has been terminated because of the turn criterion (Heuristic 8.1), then the first part only is fitted and the second part is continued until a stop condition is encountered.</p><p>Intuitively, one might have expected that the interval should be split at the point of maximum error. This is the point used for polygonal approximations <ref type="bibr" target="#b27">[20]</ref>. However, things are different in the case of conics. According to basic properties of polynomial approximations, one expects two locations of maximum error <ref type="bibr" target="#b17">[10]</ref>. If we do not wish to go from one to three intervals, we have the problem of selecting one of the two maxima. Often such maxima occur not far from knots and we obtain a very unbalanced split (see the examples of Section 9). Another reason has to do with the asymptotic distribution of spline knots <ref type="bibr">[5, pp. 180-190]</ref> and <ref type="bibr">[15]</ref>. It has been shown in the y = f(x) case, that when knots are selected to minimize the integral square error (ISE), their distribution follows the k + lth derivative of the f(x), if the splines are of the kth order. For a linear spline the knot distribution follows the second derivative. Points inside an interval where the error is maximum usually have high curvature and therefore high values for the second derivative. For quadratic splines the knot distribution follows the third derivative. Maxima of the third derivative correspond to zeros of the fourth. For many functions zeros of derivatives differing by two occur near each other <ref type="bibr" target="#b17">[10]</ref>. (They coincide in the case of the sine or cosine functions.) Thus for quadratics the knots should be near inflection points, and these are more likely to occur where the error is zero.</p><p>If a curve contains no hard vertices or breaks, then the algorithm can either start at an arbitrary point and apply Heuristic 8.1 to fit conic arcs, or (at the user's option) it may fit an ellipse to the whole set of points. There is little difference between open and closed curves for the algorithm. For open curves the first and last point are simply labeled as hard.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.">INTENDED APPLICATIONS, EXAMPLES AND COMPARISONS</head><p>This paper has been motivated by four types of applications. One is curve fitting on data that are entered manually into an interactive graphics system. A second is approximation of digitized drawings for data compaction and, possibly, for eventual pattern recognition. The other two applications involve alphanumeric characters and other symbols found in documents. The first of these is font scaling. Given a set of fonts for some output device, we want to produce another set for another output device whose resolution is substantially different from the first. For example, we may want to scale fonts from a phototypesetter with a resolution of 1000 lines per inch to a bit map display that has only 100-line-perinch resolution. It is well known that direct scaling of binary images produces unsatisfactory results. If the output device has gray scale output, then we may use gray levels to produce satisfactory results <ref type="bibr" target="#b18">[11,</ref><ref type="bibr" target="#b37">30]</ref>. If it does not, then we must solve the scaling problem carefully. Knuth <ref type="bibr" target="#b19">[12]</ref> has used mathematical descriptions of fonts that can be transformed with precision to produce actual fonts. He has called such descriptions METAFONT. These descriptions can be used effectively for scaling as follows: the description is scaled while one ensures that symmetry and other important properties of the shape of the character are preserved. Then the binary matrix is generated from the scaled description. While the use of abstract descriptions has clear advantages, their derivation is rather laborious and requires that the designer be familiar with curve fitting. What we propose to do is to start with a given font from a high-resolution device (or an artist's drawing of it) and then to "decompile" it and produce a METAFONT type description for it. The selection of conic arcs for the description is not unreasonable since they have been used by font designers (see <ref type="bibr" target="#b19">[12]</ref>, Figures <ref type="figure" target="#fig_4">4</ref><ref type="figure" target="#fig_5">5</ref><ref type="figure" target="#fig_12">6</ref>). The only problem with font "decompiling" is that, according to Section 6, the error of approximation is not very sensitive to the knot location for knots where the tangent is continuous. Therefore decompiling is unlikely to provide descriptions that can be used immediately as a METAFONT, and some further human intervention will be needed.</p><p>The fourth application is recognition of alphanumeric characters using structural techniques <ref type="bibr">[18]</ref>. In order to recognize a symbol we obtain either a tracing of its contour or a tracing of its "skeleton" that results from thinning. The curves that approximate the skeleton or contour are then used for deciding the identity of the character. Such methods have been used in the past with some success <ref type="bibr" target="#b28">[21]</ref>, and we hope that better algorithms for encoding will improve the performance of the recognizers <ref type="bibr" target="#b29">[22]</ref>.</p><p>In principle, the same curve fitting algorithm could be used for both font decompiling and character recognition. There are some differences though. Font descriptions require far higher quality representations than the descriptions for character recognition, while the computing resources for font decompiling are usually much greater. 5 It is possible to take advantage of this trade-off between quality and speed by using coarser tolerance in curve fitting for recognition, approximate formulas for the computation of conics, and even approximations of simpler functions such as square root. Both the quality and speed requirements for smoothing of interactively entered data are between the extremes of font scaling and character recognition.</p><p>The algorithm has been implemented in C under the UNIX 6 operating system and run on both a PDPll/70 and a VAXll/780 machine. Figures <ref type="figure" target="#fig_14">8</ref><ref type="figure">9</ref><ref type="figure" target="#fig_7">10</ref>show examples of its application on character contours obtained from the original font descriptions. All the examples show both the conics fitted in the first attempt without corrections in (a), and after corrections in (b) and (c). The examples show clearly that splitting the interval at points where the error is zero is preferable to splitting at points where the error estimate is maximum. The approximations are represented by solid lines, overlaid on the originals, represented by dotted lines. In addition, Figure <ref type="figure" target="#fig_14">8d</ref> shows the guiding polygon. The data of these examples are similar to those used in <ref type="bibr" target="#b30">[23]</ref>, and a comparison of Figures 9 and 10 with Figures lla and 10c of that work shows that conic splines require about the same number of knots as parametric cubic splines. The new method seems to be faster, though. The whole process (polygon and conic fitting) required about one CPU second per character on the PDPll/70, and half that time on the VAXll/780. The method of <ref type="bibr" target="#b30">[23]</ref> requies about 60 seconds on a DORADO (M. Plass, personal communication). However, this comparison should be interpreted with caution, given that the tests were made on different machines, with programs written by different people and in different languages.</p><p>Figure <ref type="figure" target="#fig_1">11</ref> shows the approximation of an epicycloid, produced by the same equations as the epicycloid used in <ref type="bibr" target="#b31">[24]</ref>. It requires 15 knots after splitting some interval to bring the maximum error within 1.5 grid units. Reeves and Sermer <ref type="bibr" target="#b31">[24]</ref> have reported between 14 and 31 knots for cubic splines, depending on the accuracy. For 496 data points the total processing time was 1.5 CPU seconds on the VAXll/780. The times reported by <ref type="bibr" target="#b31">[24]</ref> are between 2 and 3 seconds. Figure <ref type="figure" target="#fig_17">12</ref> shows the application on a free-drawn contour on an interactive graphics device. There were 401 data points, and they required about the same time as the epicycloid.</p><p>Clearly, there is room for improvement, and the approximations obtained do not always have the minimum number of knots. One possibility is to label fewer vertices as hard by making the requirement more stringent. We could then attempt to fit a conic in the "arm" of the penguin in Figure <ref type="figure" target="#fig_17">12</ref>. However the increase in the number of attempts would result in an increase in computational costs. We could also have considered variations in the location of the knots and possibly of the merge intervals. Such techniques are well known (and computationally costly), and we did not want to obscure the quality of the results obtained by a simple algorithm using the conic splines.</p><p>The speed of the method is quite fast for font "decompiling," and also fast enough for interactive graphics applications. However one second per character is too slow by a factor of 100 for optical character recognition (OCR) applications. It is expected that the time can be reduced because of a smaller number of samples used per contour. The font descriptions were for the maximum point size (36) and 1000 samples per inch. Ten point characters sampled at 240 samples per inch (a commonly used resolution) will have about one-tenth the number of contour points. This introduces a speedup factor of about 10. Also, for OCR applications we need not compute the actual conics, as long as we know some of their features. The ability of the algorithm to find good conics with the first attempt is critical in this respect. Finally, some special-purpose hardware may be used for fitting lines.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>APPENDIX A. INCREMENTAL PLOTTING OF PARABOLAS</head><p>The simplest way to plot parabolas is by using divided differences on the parametric form. Then only four additions per point are required. We present an incremental technique only for the sake of generality.</p><p>PROPOSITION A1. For each parabola there exist matrices B and vectors m, such that if x is a point on the parabola, Bx + m is also a point on the same parabola.  However, it can easily be shown that given an initial point Ki, a final point Ki+l, and a guiding point Vi+l, then vectors P, R, and S are given by</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PROOF:</head><formula xml:id="formula_27">P = K/+I + Ki-2Vi+l,<label>(A7a)</label></formula><formula xml:id="formula_28">R = 2(Vi+1 -Ki),<label>(A7b)</label></formula><formula xml:id="formula_29">S = Ki.<label>(A7c)</label></formula><p>We can then use eqs. (A4) and (A5) to find B and m.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>APPENDIX B. A COMPARISON OF OPTIMAL AND SUBOPTIMAL SOLUTIONS</head><p>We list here some results that, while not directly related to the approximations used in this paper, provide some insight into why more elaborate techniques may not yield better quality approximations. If we use the integral square error (ISE) as a measure for the quality of fit, then we can express the knot location problem in terms of conventional optimization theory. Furthermore it is possible to compute explicitly the partial derivatives of the ISE with respect to the knot location in the parametric and y = f(x) cases. This was done by the author in a sequence of papers <ref type="bibr" target="#b23">[16,</ref><ref type="bibr">17]</ref>. When the y = f(x) form is used, the explicit computation of the first partial derivatives of the ISE and the application of Lagrange multipliers produce the following result.</p><p>THEOREM BI: A necessary condition for the optimal location of the knots for a continuous piecewise linear approximation is that the unconstrained optimal approximation on each subinterval results in a continuous approximation over the whole interval <ref type="bibr">[17]</ref>. This theorem does not imply that continuity constraints may be ignored during the optimization, but does suggests other ways to simplify the computation <ref type="bibr">[17]</ref>. There are no similar simplifications for higher order approximations.</p><p>Another observation is based on the computation of the matrix of the second derivatives. It is well known that if that matrix is positive definite, then a point where all the first partial derivatives are zero is a minimum. An important question in many optimization problems is the sensitivity of the cost function to deviations from the optimal location. When the optimum is found as a point where the first partials are zero, then the sensitivity is less than when the optimum is found on the boundary of a region of constraints (for example, in linear programming problems) because the larger the partial derivatives are the more the cost function varies. When we compare two optima, both found through zeros of the first derivatives, then the second derivatives provide information about the sensitivity. The larger they are, the greater the variation of the first derivatives. For the y = f(x) case the following result holds. THEOREM B2. <ref type="bibr" target="#b23">[16]</ref>. The matrix M of the second derivatives is tridiagonal. If we neglect terms that are proportional to the square of pointwise errors divided by the length of subintervals, then M reduces to a diagonal form with elements given by 2 ' Mii ~ edxi)et(x) -2er(x)er(x), (B1)</p><p>where ez stands for the error computed with the approximation to the left of the breakpoint xi and er for the approximation computed to the right. The primed terms denote derivatives with respect to x.</p><p>If the approximation is continuous, then the errors from both the left and the right are equal. Thus for a polygonal approximation the terms are proportional to the product of the pointwise error times the difference in the slopes. This leads to the not surprising conclusion that the ISE is more sensitive to the location of the knots where the slope changes by a greater amount. If we insist on slope continuity, then the right-hand side of eq. (B1) becomes zero. Then M contains only terms proportional to the square of pointwise errors divided by interval lengths. For any reasonable approximation the ratio of the pointwise error over the length of a subinterval is expected to be small compared to the difference in slopes at a vertex of a polygon. Thus the value of ISE will be less sensitive to the location of the knots. The practical conclusion of all this is that the error of approximation is less sensitive to the knot location for higher order approximations than it is for polygons. Therefore suboptimal solutions are expected to be not much worse than optimal ones and we are justified in ignoring the exact knot location problem for the conics, as long as we can obtain estimates of their approximate location.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>APPENDIX C. ON THE DISTRIBUTION OF THE SIZE OF POLYGON VERTICES</head><p>For font "decompiling" the selection of al is facilitated by an experimental observation about the size of the angles actually found in polygonal approximations of the outlines of characters from various fonts. Table <ref type="table" target="#tab_2">I</ref> summarizes these results. This table was obtained by finding the polygonal approximations for each of the 120 characters of each font with the method mentioned in Section 5. About two-thirds of the vertices in all fonts fall in the range 150-210 Â° . Direct display of the results showed that indeed these were vertices placed in the curved parts of  <ref type="table" target="#tab_2">II</ref> and<ref type="table" target="#tab_3">III</ref>.</p><p>If the distribution of angles were uniform, each 10 Â° interval would contain about 3 percent of the angles. Because of the sparsity of the distribution around 130 Â° and 230 Â° it is reasonable to assume that the vertices found by the polygonal approximation have two origins. Some correspond to true vertices of the contour (around 90 Â° or 270 Â°) and others to approximations of the curved parts. Furthermore the low density of the distribution in the in-between region suggests that we need not by very accurate in the selection of the threshold angle al. In the examples given in Section 9, we have selected al equal to 70 Â° so that angles less than 110 Â° or greater than 250 Â° are classified as hard.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>ACM</head><label></label><figDesc>Transactions on Graphics, Vol. 2, No. 1, January 1983, Pages 1-31.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Specification of a conic arc according to Definition 2.1.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>(3.6) that the norms of the two axes are, respectively,</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>AFig. 4 .</head><label>4</label><figDesc>Fig.<ref type="bibr" target="#b11">4</ref>. Illustration of the properties of a parabola defined by two points, A, and B, and the tangents of the curve at them. C is the intersection of the two tangents, M the midpoint of chord AB, and F the midpoint of segment CM.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>CFig. 5 .</head><label>5</label><figDesc>Fig. 5. Illustration of Pascal's Theorem. The endpoints of the conic arc are A and B, and C is the intersection of the tangents. P, Pz P3 is the Pascal line, while D and E are two interior vertices. (Note that A and B are double points and that the six lines of the hexagon are paired as AC with EB, AD with BC, and DE with chord AB.)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>x --x0 + r.(5.1) ACM Transactions on Graphics, Vol. 2, No. 1, January 1983. Substituting eq. (5.1) into eq. (3.3), we obtain f(x) = (x0 + r)'Q(x0 + r) + g'(Xo + r) + c. (5.2)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>. 10 )</head><label>10</label><figDesc>Elimination of Ix between Eqs. (5.8) and {5.10) yields "r"="xÂ°-Xc"l~/1-1f{X}-ci 1 II = II Xo -x~ [[ cl</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>PROPOSITION 5 . 2 .</head><label>52</label><figDesc>If the equation of the conic has been normalized so that ab -h 2 = 1, and the two axes do not differ much in length, then the distance of a point x from the conic is given approximately byD(x) = I ,/f(x) -Ca --#l el ] I = I ~/q(x) + c -cl -~/] c~ I I (5.14)Eq. (5.14) can be proved by substituting the geometric mean of the axes into eq. (5.13). It is also easily confirmed that it holds exactly when the conic is a circle. A further simplification of eq. (5.14) can be made by replacing Cl with c. To demonstrate this we can use eq. (3.7) and denote Â¼ g,Q-lg by v. Then the last expression of eq. (5.14) becomes Do(x) = ~/q(x) + v -~/c + v.(5.15)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>PROPOSITION 5 . 3 .( 5 . 18 )</head><label>53518</label><figDesc>Let Ki be the coefficient K in eq. (3.13) determined by requiring that the conic pass through the point xi. Then define ]~(x) = (a'x + ao). (b'x + b0) -Ki. (u'x + u0) 2.Let xj be another point that may be used to specify a conic. Then if xi and xj are equidistant from chord AB, fi(x~) = -fj(x,).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head></head><label></label><figDesc>(a) All data points are within distance em of a side of the polygon. (b) All vertices of the polygon are also data points. (c) It is not possible to replace two sides by one without having the maximum error exceed em.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>PROPOSITION 7 . 1 .</head><label>71</label><figDesc>Angles ADE and DEB have a sum that is greater than ~r + ACB.A simple geometric calculation using the collinearity of P1, P2, P3, shows that ADE = ~r -P2AB -DP3A and DEB = ~r -PIBA + DP3A. Subtracting the first equation from the second we find PROPOSITION 7.2. The difference between two adjacent angles of a polygon inscribed in a conic satisfies the following equation: DEB -ADE = P2AB -P2BA + 2DP3A.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. Arrangement of polygonal vertices that are considered for approximation by a conic. A and C are hard vertices and Bi is soft according to the criteria of Section 7. The broken lines are the tangents at the endpoints.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Conic Fit. Notation: flag,ew is set to one when we stop a sequence of vertices because of Heuristic 8.1. flago~d is set to one to indicate that the previous sequence of vertices was stopped because of Heuristic 8.1. P1 and P2 define the first tangent and P3 and P4 the second.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Example of fitting the contour of the letter "g" from the Times Italic font. The approximations are shown in solid lines and the original data with dots. (a) First fit without any knot adjustment. (b) Fit after some conic arcs were subdivided at the location of zero error. (c) Fit after some conic arcs were subdivided at the location of maximum error. (d) Overlay of the guiding polygon on the approximation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>ACMFig. 9 .Fig. 10 .</head><label>910</label><figDesc>Fig. 9. Example of fitting the contour of the letter "G" from the Times Roman font. (a), (b), and (c) as in Figure 8.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head></head><label></label><figDesc>It is well known that the parametric representation of a parabola has the form x(t) = Pt 2 + Rt + S (A1) ACM Transactions on Graphics, Vol. 2, No. 1, January 1983.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Fig. 12 .</head><label>12</label><figDesc>Fig.<ref type="bibr" target="#b19">12</ref>. Example of fitting a sketch entered through a digitizing tablet in an interactive graphics system.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table I .</head><label>I</label><figDesc>Distribution of Polygonal Angles for Various Fonts 29 Percent of vertices in each angle range</figDesc><table><row><cell>Font</cell><cell>+30 Â°</cell><cell cols="5">30-90 Â° 90-150 Â° 150-210 Â° 210-270 Â° 270-330 Â°</cell></row><row><cell>Times Roman</cell><cell>0.06</cell><cell>5.03</cell><cell>18.71</cell><cell>65.10</cell><cell>10.22</cell><cell>0.88</cell></row><row><cell>Times Italic</cell><cell>0.26</cell><cell>5.40</cell><cell>20.20</cell><cell>63.79</cell><cell>9.61</cell><cell>0.74</cell></row><row><cell>Helvetica</cell><cell>0.32</cell><cell>7.47</cell><cell>12.03</cell><cell>72.28</cell><cell>6.91</cell><cell>0.99</cell></row><row><cell>Spartan</cell><cell>0.00</cell><cell>7.34</cell><cell>13.32</cell><cell>69.88</cell><cell>8.13</cell><cell>1.32</cell></row><row><cell cols="6">Table II. Distributions of Polygonal Angles in Subranges"</cell><cell></cell></row><row><cell></cell><cell cols="3">Distribution in subranges</cell><cell></cell><cell></cell><cell></cell></row><row><cell>Font</cell><cell>90-110 Â°</cell><cell>110-120 Â°</cell><cell>120-130 Â°</cell><cell cols="2">130-140 Â°</cell><cell>140-150 Â°</cell></row><row><cell>Times Roman</cell><cell>304</cell><cell>38</cell><cell>37</cell><cell>82</cell><cell></cell><cell>178</cell></row><row><cell>Times Italic</cell><cell>261</cell><cell>50</cell><cell>37</cell><cell>95</cell><cell></cell><cell>238</cell></row><row><cell>Helvetica</cell><cell>243</cell><cell>14</cell><cell>12</cell><cell>8</cell><cell></cell><cell>26</cell></row><row><cell>Spartan</cell><cell>182</cell><cell>26</cell><cell>13</cell><cell>28</cell><cell></cell><cell>54</cell></row><row><cell>Times Bold</cell><cell>310</cell><cell>51</cell><cell>29</cell><cell>63</cell><cell></cell><cell>169</cell></row><row><cell>Greek</cell><cell>306</cell><cell>36</cell><cell>46</cell><cell>100</cell><cell></cell><cell>240</cell></row><row><cell></cell><cell cols="3">Distribution in subranges</cell><cell></cell><cell></cell><cell></cell></row><row><cell>Font</cell><cell>210-220 Â°</cell><cell>220-230 Â°</cell><cell>230-240 Â°</cell><cell cols="2">240-250 Â°</cell><cell>250-270 Â°</cell></row><row><cell>Times Roman</cell><cell>149</cell><cell>40</cell><cell>16</cell><cell>16</cell><cell></cell><cell>128</cell></row><row><cell>Times Italic</cell><cell>131</cell><cell>58</cell><cell>17</cell><cell>36</cell><cell></cell><cell>82</cell></row><row><cell>Helvetica</cell><cell>19</cell><cell>5</cell><cell>12</cell><cell>8</cell><cell></cell><cell>130</cell></row><row><cell>Spartan</cell><cell>26</cell><cell>15</cell><cell>16</cell><cell>17</cell><cell></cell><cell>111</cell></row><row><cell>Times Bold</cell><cell>152</cell><cell>38</cell><cell>17</cell><cell>24</cell><cell></cell><cell>144</cell></row><row><cell>Greek</cell><cell>176</cell><cell>56</cell><cell>19</cell><cell>26</cell><cell></cell><cell>152</cell></row><row><cell>~Absolute Counts.</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table III .</head><label>III</label><figDesc>Sparsest 10 Â° Range (Percent of total in parentheses)</figDesc><table><row><cell>Font</cell><cell>Between 90 and 180 Â°</cell><cell>Between 180 and 270 Â°</cell></row><row><cell>Times Roman</cell><cell>120-130 (1.08)</cell><cell>230-240 and 240-250 (0.47)</cell></row><row><cell>Times Italic</cell><cell>120-130 (1.10)</cell><cell>230-240 (0.50}</cell></row><row><cell>Helvetica</cell><cell>130-140 (0.32)</cell><cell>220-230 (0.20}</cell></row><row><cell>Spartan</cell><cell>120-130 (0.57)</cell><cell>220-230 (0.66}</cell></row><row><cell cols="3">the character outlines. A more detailed histogram in the 90Â°-150 Â° and 210Â°-270 Â°</cell></row><row><cell cols="2">reveals a bimodality, as shown in Tables</cell><cell></cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>ACM Transactions on Graphics, Vol. 2, No. 1, January 1983.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_1"><p>ACM Transactions on Graphics, Vol. 2, No. 1, January 1983.f</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_2"><p>A character recognition machine may be required to process 100 characters per second under the constraint that the total cost of the machine be under $50,000. On the other hand it is quite reasonable to expect that a mainframe machine would devote 30 seconds per character so that a complete font of 120 characters could be "decompiled" in one CPU hour.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_3"><p>UNIX is a trademark of Bell Laboratories. ACM Transactions on Graphics, Vol. 2, No. 1, January 1983.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_4"><p>ACMTransactions on Graphics, Vol. 2, No. 1, January 1983.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>I want to thank Lorinda Cherry, Ed Gilbert, Doug McIlroy, and Chris van Wyk for many helpful comments on earlier drafts of this paper, and also Robin Forrest for many comments and for bringing to my attention many of the references on the rational parametric form.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>for appropriately chosen vectors P, R, and S. Let n be a vector orthogonal to P. Taking the scalar product of both sides of eq. (A1) with n and solving with respect to t, we find</p><p>Note that n'R will be nonzero unless R is zero or collinear to P. In both cases the parabola degenerates into a straight line. If we compute now the value of x for another value of the parameter equal to t + s, and substitute t from eq. (A2), we find Both B and m depend only on s and not on t, and therefore when applied on any point of the parabola they yield another point, specifically one which is s units of the parameter later. [] This result would not have been very useful had there been no way of finding a matrix B and a vector m without resorting to the parametric representation.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">If the vertex has an angle not near 180 Â° , or if the ratio of the adjacent sides is too big, or if it differs from the next or previous vertex too much</title>
		<imprint/>
	</monogr>
	<note>then mark it</note>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Skip all unmarked vertices until either a marked vertex is reached or the angle between the first and the current polygon side is too big</title>
		<imprint/>
	</monogr>
	<note>In the latter case set the flag, ew to one</note>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">If P2 and P3 coincide, then select the parabola from P1 to P4 with tangents the lines P1 P2 and P2P4</title>
		<imprint/>
	</monogr>
	<note>Else do: 12. Select as a fifth point the vertex as close as possible to the middle between P2 and P3, or if there is no such vertex select the midpoint of the side P2 Pa</note>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">If the flagol~ is set, select Po as the midpoint of the segment P~ P2</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Else if the side P~ P2 is less than a specified multiple of the next side use P1 for Po. Else select Po on P~ P2 at a distance from P2 equal half the length of the next side</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m">Select P, in a similar way as P0, but replacing P~ by Pa and P2 by P~</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">If flag, ew equals one, then set flagold to one. Else set flagold to zero</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Set flag, ew to zero. REFERENCES</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Computer Aided Geometric Design</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">E</forename><surname>Barnhill</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">F</forename><surname>Riesenfeld</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1974">1974</date>
			<publisher>Academic Press</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Fitting conic sections to scattered data</title>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">L</forename><surname>Bookstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Gr. Image Process</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="56" to="71" />
			<date type="published" when="1979">1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Geometric Principles and Procedures for Computer Graphic Applications</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">H</forename><surname>Chasen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1978">1978</date>
			<publisher>Prentice-Hall</publisher>
			<pubPlace>Engiewood Cliffs, N. J.</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Discrete B-splines and subdivision techniques in computer-aided geometric design and computer graphics</title>
		<author>
			<persName><forename type="first">E</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Lyche</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Riesenfeld</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Gr. Image Process</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="page" from="87" to="111" />
			<date type="published" when="1980">1980</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">A Practical Guide to Splines</title>
		<author>
			<persName><forename type="first">C</forename><surname>De Boor</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1978">1978</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Convex cubic splines</title>
		<author>
			<persName><forename type="first">B</forename><surname>Dimsdale</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM J. Res. Dev</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="168" to="178" />
			<date type="published" when="1978">1978</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Computational Geometry for Design and Manufacture</title>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">D</forename><surname>Faux</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Pratt</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1979">1979</date>
			<pubPlace>Horwood, Chichester, England</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Curves and surfaces for computer-aided design</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">R</forename><surname>Forrest</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1968-07">July 1968</date>
			<pubPlace>Cambridge, England</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Cambridge Univ.</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. dissertation</note>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">R</forename><surname>Forrest</surname></persName>
		</author>
		<title level="m">Conic Sections. Draft of a book chapter</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Analysis of Numerical Methods</title>
		<author>
			<persName><forename type="first">E</forename><surname>Isaacson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">B</forename><surname>Keller</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1966">1966</date>
			<publisher>Wiley</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Filtering high quality text for display on raster scan devices</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kajiya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ullner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SIGGRAPH &quot;81</title>
		<meeting>SIGGRAPH &quot;81<address><addrLine>Dallas, Texas; New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1981-07">August 3-7. 1981</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">E</forename><surname>Knuth</surname></persName>
		</author>
		<author>
			<persName><surname>Tex</surname></persName>
		</author>
		<author>
			<persName><surname>Metafont</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1979">1979</date>
			<publisher>New Directions in Typesetting. Digital Press and American Mathematical Society</publisher>
			<pubPlace>Bedford, Mass</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">A two-stage method of fitting conic arcs and straight-line segments to digitized contours</title>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">Z</forename><surname>Liao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Pattern Recognition and Image Processing Conference</title>
		<meeting>IEEE Pattern Recognition and Image essing Conference<address><addrLine>Dallas, Texas</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1981">1981</date>
			<biblScope unit="page" from="224" to="229" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Automatic generation of a cubic B-spline representation for a general digitized curve</title>
		<author>
			<persName><forename type="first">O</forename><surname>Lozover</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Preiss</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Eurographics 81</title>
		<meeting><address><addrLine>North-Holland, New York</addrLine></address></meeting>
		<imprint>
			<publisher>Elsevier</publisher>
			<date type="published" when="1981">1981</date>
			<biblScope unit="page" from="119" to="126" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Nonlinear segmented function approximation and analysis of line patterns</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">E</forename><surname>Mcclure</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Q. Appl. Math</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="page" from="1" to="37" />
			<date type="published" when="1975">1975</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Optimal piecewise polynomial L= approximation of functions of one and two variables</title>
		<author>
			<persName><forename type="first">T</forename><surname>Pavlidis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Comput. C</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="98" to="102" />
			<date type="published" when="1975">1975</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Polygonal approximations by Newton&apos;s method</title>
		<author>
			<persName><forename type="first">T</forename><surname>Pavlidis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Comput. C</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="800" to="807" />
			<date type="published" when="1977">1977</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<author>
			<persName><forename type="first">T</forename><surname>Pavlidis</surname></persName>
		</author>
		<title level="m">Structural Pattern Recognition</title>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1977">1977</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Algorithms for Graphics and Image Processing</title>
		<author>
			<persName><forename type="first">T</forename><surname>Pavlidis</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1982">1982</date>
			<publisher>Computer Science Press</publisher>
			<pubPlace>Rockville, Md</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Curve fitting as a pattern recognition problem</title>
		<author>
			<persName><forename type="first">T</forename><surname>Pavlidis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 6th Int. Conf. Pattern Recognition</title>
		<meeting>6th Int. Conf. Pattern Recognition<address><addrLine>Munich; Silver Spring, Md</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1982-10">Oct. 1982</date>
			<biblScope unit="page" from="853" to="859" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">A hierarchical syntactic shape analyzer</title>
		<author>
			<persName><forename type="first">T</forename><surname>Pavlidis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Ali</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Pattern Anal. Mach. Intell</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="2" to="9" />
			<date type="published" when="1979">1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Vector and arc encoding of grapics and text</title>
		<author>
			<persName><forename type="first">T</forename><surname>Pavlidis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">L</forename><surname>Cherry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 6th Int. Conf. Pattern Recognition</title>
		<meeting>6th Int. Conf. Pattern Recognition<address><addrLine>Munich; Silver Spring, Md</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1982-10">Oct. 1982</date>
			<biblScope unit="page" from="610" to="613" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Curve-fitting with piecewise parametric cubics</title>
		<author>
			<persName><forename type="first">M</forename><surname>Plans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stone</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SIGGRAPH &quot;83</title>
		<meeting>SIGGRAPH &quot;83<address><addrLine>Xerox Palo Alto Research Center, Palo Alto, Calif; Detroit; New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date>July 25-29</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Efficient representation of curves in computer graphics</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">T</forename><surname>Reeves</surname></persName>
		</author>
		<author>
			<persName><surname>Sermer P</surname></persName>
		</author>
		<idno>Rep. 153/81</idno>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="1981-06">June 1981. January 1983</date>
			<pubPlace>Toronto, Canada</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Dept. of Computer Science, Univ. of Toronto</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Tech.</note>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Rice</surname></persName>
		</author>
		<title level="m">The Approximation of Functions</title>
		<meeting><address><addrLine>Reading, Mass</addrLine></address></meeting>
		<imprint>
			<publisher>Addison-Wesley</publisher>
			<date type="published" when="1969">1969</date>
			<biblScope unit="volume">2</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Applications of B-spline approximation to geometric problems of computeraided design</title>
		<author>
			<persName><forename type="first">R</forename><surname>Riesenfeld</surname></persName>
		</author>
		<idno>UTEC-CSc-73-126</idno>
		<imprint>
			<date type="published" when="1973-03">March 1973</date>
			<pubPlace>Salt Lake City, Utah</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Computer Science Dept., Univ. of Utah</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Tech. Rep.</note>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">W</forename><surname>Rule</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">A</forename><surname>Coons</surname></persName>
		</author>
		<author>
			<persName><surname>Grapics</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1961">1961</date>
			<publisher>McGraw-Hill</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">Conic Sections</title>
		<author>
			<persName><forename type="first">G</forename><surname>Salmon</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1954">1954</date>
			<publisher>Chelsea</publisher>
			<biblScope unit="volume">6</biblScope>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
	<note>th ed.</note>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title level="m" type="main">Projective Methods in Plane Analytical Geometry</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">A</forename><surname>Scott</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1961">1961</date>
			<publisher>Chelsea</publisher>
			<biblScope unit="volume">3</biblScope>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
	<note>d ed.</note>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">The display of characters using gray level sample arrays</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Warnock</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SIG-GRAPH&apos;80</title>
		<meeting>SIG-GRAPH&apos;80<address><addrLine>Seattle, Wash; New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1980">July 14-18, 1980. 1980</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">A new curve fitting method using a CRT computer display</title>
		<author>
			<persName><forename type="first">F</forename><surname>Yamaguchi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Gr. Image Process</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="425" to="437" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="1982">1982. 1983. 1983. January 1983</date>
		</imprint>
	</monogr>
	<note>Received August. revised February. accepted March</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
