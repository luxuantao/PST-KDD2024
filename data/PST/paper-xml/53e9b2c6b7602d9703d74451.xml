<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">When Random Sampling Preserves Privacy</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Kamalika</forename><surname>Chaudhuri</surname></persName>
							<email>kamalika@cs.berkeley.edu.nmishra@cs.virginia.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution">UC Berkeley</orgName>
								<address>
									<postCode>94720</postCode>
									<settlement>Berkeley</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Nina</forename><surname>Mishra</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution">University of Virginia</orgName>
								<address>
									<postCode>22904</postCode>
									<settlement>Charlottesville</settlement>
									<region>VA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">When Random Sampling Preserves Privacy</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">0F6A51BDD13F0E75594220212426926C</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T14:41+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Many organizations such as the U.S. Census publicly release samples of data that they collect about private citizens. These datasets are first anonymized using various techniques and then a small sample is released so as to enable "do-it-yourself" calculations. This paper investigates the privacy of the second step of this process: sampling. We observe that rare values -values that occur with low frequency in the table -can be problematic from a privacy perspective. To our knowledge, this is the first work that quantitatively examines the relationship between the number of rare values in a table and the privacy in a released random sample. If we require -privacy (where the larger is, the worse the privacy guarantee) with probability at least 1 -δ, we say that a value is rare if it occurs in at most Õ( 1 ) rows of the table (ignoring log factors). If there are no rare values, then we establish a direct connection between sample size that is safe to release and privacy. Specifically, if we select each row of the table with probability at most then the sample is O( )-private with high probability. In the case that there are t rare values, then the sample is Õ( δ/t)-private with probability at least 1 -δ.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Private data is collected by numerous organizations for a wide variety of purposes including reporting, data mining, scientific discoveries, etc. In some circumstances, this data is in turn released in sanitized form for public consumption. The purpose of releasing such sanitized data is to enable others to discover large-scale statistical patterns, e.g., to learn averages, variances, clusters, decision trees, while hiding small-scale information, e.g., a particular individual's salary. The question we ask is: To what extent do these sanitized datasets preserve people's privacy?</p><p>While there are numerous examples of sanitization procedures, we investigate one commonly used technique: random sampling. Some organizations routinely collect data, anonymize it, and then release a sample so that others may use the data for data mining purposes. Since samples are known to preserve statistical characteristics of the data, samples can be a useful means for studying and understanding the underlying population.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Motivating Examples</head><p>There are many examples of released samples of private data. We describe two, one from the U.S. Census and one from the Social Security Administration.</p><p>The U.S. Census Bureau releases a Public Use Microdata Sample (PUMS) <ref type="bibr" target="#b1">[2]</ref>. This dataset contains private information in occupied housing units such as age, weight, income, and race. The Census gathers this data once every 10 years, anonymizes it and then releases a 1% or 5% sample. The purpose of releasing this microdata is to allow "do-it-yourself" calculations. Our work is motivated by such releases: Can we simply select each individual with probability 0.05 to be included in the sample? What role do rare values play in deciding what to release? What size sample is safe to release?</p><p>The Social Security Administration (SSA) also releases microdata, specifically Benefits and Earnings files <ref type="bibr" target="#b10">[11]</ref>. Old-Age, Survivors, and Disability Insurance (OASDI) is a government-sponsored insurance program that individuals contribute to throughout their working careers. Benefits are paid to insured workers and family members when they retire or become disabled. This dataset contains annual earnings information for approximately 47 million individuals who receive OASDI benefits each month. Personal identifying information and distinguishing characteristics are removed or modified to prevent identification. Records are randomly permuted. The SSA then releases a 1% sample of this data.</p><p>Our work is a first attempt at formally understanding the privacy guarantees of just one step of the sanitization process: random sampling. In practice, these organizations employ multi-step anonymization processes prior to sampling that this paper does not analyze.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">The Model</head><p>We consider the following simplified setting. The sanitizer starts with a table T consisting of k distinct private values. The k values can be anything, e.g., Boolean data over log k attributes, k real numbers, etc. The sanitizer then goes through each row of the table and includes it in the sample with probability p and does nothing with probability 1 -p. The sample is then randomly permuted and released. We then ask the question: for what p can we guarantee privacy? In order to understand this question, we next define privacy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Privacy</head><p>The privacy definition that we use is motivated by <ref type="bibr" target="#b4">[5]</ref>. The authors capture the interaction between a sanitizer and a hypothetical attacker via a transcript. In our case, the transcript is a random sample S of the data. Intuitively, for any pair of tables T and T that differ in only one position, privacy is preserved if a hypothetical attacker upon seeing the transcript S is unable to distinguish between the case when the actual table is T or T . In other words, an attacker knowing all but one person i's private information does not gain much information about i upon seeing the sample.</p><p>We consider two definitions of privacy, one where a hypothetical attacker tries to distinguish between two tables that differ in one row, and the other, where a hypothetical attacker tries to distinguish between two tables that differ in c rows. We say that a sanitization scheme is (c, , δ)-private if for every table T , with probability at least 1 -δ, the scheme produces a sample S such that for any set of c rows in the table, P , and for any two sets of c assignments V and V ,</p><formula xml:id="formula_0">Pr(S|T {P →V } )</formula><p>Pr(S|T {P →V } ) ≤ 1 + . The privacy definition is discussed in Section 3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.4">Discussion</head><p>Our results do not apply in the case that the data is a collection of distinct points, say in R d . The reason is that if every point is different from every other point in the table then a sample of size even one violates the privacy of that individual. As a simple example, suppose the table consists of five private values 1, 2, 3, 4, 5 and we release the sample point 2. Then the attacker can now easily tell that the data came from the actual table versus 1, 3, 3, 4, 5 . This violates privacy since the attacker can now distinguish between two tables that differ in one row.</p><p>Problems arise even if a value is not unique, but occurs a few times in the table. We call such a value a rare value. Observing a rare value is problematic because a rare value can be assumed by only a small group of individuals, and then observing such a value can potentially increase the hypothetical attacker's confidence about the values assumed by this small select group of people. For example, consider a table in which two individuals can have a salary of one billion dollars, and an attacker knows the salary of one of them and not the other. If we release a sample in which a row with a salary of one billion dollars appears, then the confidence of the attacker about the second individual's salary increases. This is because such a sample is much more likely to have come from a table in which two people have a salary of a billion dollars than from a table in which one person's salary is a billion dollars.</p><p>Unique values are known to be problematic in the literature. Indeed, the phrase "population unique" is used to describe those individuals that are unlike anyone else in the population, e.g., 13-year-old college graduate. Population uniques are often first removed prior to data sanitization. To the best of our knowledge, we have not seen work that quantifiably links rare values to privacy. In this paper, we find such a link. If we desire privacy with probability at least 1 -δ, we define a rare value to be one that occurs less than O( 1 log( 2k δ )) times in the table. If i rows with a certain rare value v appear in the sample, it can lead to an O(i / log(2k/δ)) breach of privacy.</p><p>One way to deal with rare values is to suppress such rows from the table. Indeed, in practice, organizations remove population uniques. We do not consider such sanitization algorithms because then the decisions made by the sanitizer cannot be mimicked or simulated by the attacker -and as a result, information may be leaked<ref type="foot" target="#foot_0">3</ref> . This may seem unintuitive at first -how can private information that we do not even release breach privacy? An example illustrates the point. Suppose the sanitizer decides to suppress all values that occur &lt; 100 times, and rows 1 to 100 of a table take the value 0, and no other rows take the value 0. Let p &gt; 1/100. Now suppose that an attacker knows the value of the first 99 rows and is trying to decide what the value of the 100th row is. In this case, not seeing any row with value 0 in the sample violates the privacy of this 100th row.</p><p>Another reason why removing rare values is problematic is that just the size of the sample can leak information. In the case where the table contains n rows and 1/10th of the rows contain rare values, then the expected sample size is 9np/10 instead of np. Alternatively, if the sanitization algorithm is to draw a sample and remove "sample uniques" (those individuals that are one-of-a-kind in a sample), then if every entry in the sample is unique, then nothing may be released. Thus just the size of the sample can leak information.</p><p>Because unique and rare values can lead to privacy breaches, we assume that k the number of distinct values is much smaller than n the number of individuals in the dataset. In practice, this is not true because each individual in the table has a uniquely identifying key. The assumption that k &lt;&lt; n implies that identifying information has been removed. This is admittedly a large assumption since it is an open question what information is "identifying" (see, for example, <ref type="bibr" target="#b11">[12]</ref>). But we make this assumption so that we can focus our attention on understanding the privacy consequences of sampling.</p><p>One limitation of sampling is the probability that the sanitization algorithm fails to produce an output that preserves privacy is not negligble in n. Ideally, we would like to say that the sanitization algorithm fails with very low probability, e.g., 1/(2 n ). With random sampling, we cannot guarantee a failure probability better than 1/n. To see why, suppose the table has a unique value. If we sample each row of the table with probability p = 1/n, then the probability we pick this value is 1/n. But once a unique value appears in the sample then we have completely breached this individual's privacy. So the probability we fail is 1/n.</p><p>Even if there are no rare values at all, releasing a random sample of the data cannot preserve privacy with probability 1. As an example, consider a table that has n/2 rows with value 0 and n/2 rows with value 1, and a sample S from this table of size n/2 consisting of all 0s. The attacker knows the value of all rows in the table except for one row -that is, she is trying to decide whether the sample S came from a table with n/2 0s and n/2 1s or from a table with n/2 + 1 0s and n/2 -1 1s. The latter event is about n/2 times more likely than the former. The attacker will therefore conclude that the value of the missing row is 0, and this will lead to a breach in privacy. It turns out that when we do sampling, we cannot avoid these situations entirely except to upper bound the relatively small probability that such unlikely samples occur. We also note that the probability of failure due to the occurrence of such unlikely samples is quite small compared to the probability of failure to preserve privacy because of the occurrence of one or more rows with rare values in the sample.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.5">Contributions</head><p>Privacy For the case where an attacker tries to distinguish between two tables that differ in one row, i.e., (1, , δ)-privacy, we define a rare value as one that occurs in at most log( 2k δ ) rows of the table , where k is the number of distinct values in the table. We show that if there are no rare values, then a sampling frequency of at most preserves privacy. In the case where there are at most t rare values, we show that a sampling frequency of at most Õ( δ t ) preserves privacy. Observe that the higher the number of rare values, the lower the sampling frequency, as one would expect. We also demonstrate that the upper bound on the sampling frequency is tight up to log factors.</p><p>Furthermore, we consider the case where a hypothetical attacker already knows n -c rows of the table and the goal is (c, , δ)-privacy. Now a rare value is one that occurs in at most log( 2k δ ) +c rows of the table. We prove that when there are no rare values, a sampling frequency of at most still preserves (c, O(c ), δ)privacy. When there are at most t rare values, we show that a sampling frequency of p &lt; Õ( δ t ) is (c, O(c ), δ)-private. The proof technique is similar in both cases. We partition the values in the table T into rare, infrequent and common depending on how often they occur. We then define a good sample to be one with no rare values, with infrequent values that do not occur very frequently, and common values that occur close to expectation. We prove that if we have a good sample, we have privacy. Then we prove that with high probability, random sampling produces a good sample.</p><p>Utility For someone who is interested in discovering patterns in the released data, it is natural to ask whether sampling preserves patterns. Samples are in fact known to approximately preserve statistics about the actual table. But note again that, in practice, sampling is used in concert with other anonymization techniques. We are not making any claims about the utility of those anonymization procedures -we only discuss the utility of sampling.</p><p>When we release a random sample of the data, we are essentially releasing an estimate of the histogram -the frequency of each value v. Random sampling can estimate the frequency of each value v with an additive noise of Õ( t n δ ) when there are t rare values, and we want (1, , δ)-privacy.</p><p>Note that in contrast, <ref type="bibr" target="#b4">[5]</ref> can release the histogram of a table by adding a tiny O( 2 n ) additive noise to the frequency of each possible value, a significantly smaller additive noise. We also note that unlike sampling, the error in <ref type="bibr" target="#b4">[5]</ref> is independent of the number of rare values. Also the more privacy that is required, the better <ref type="bibr" target="#b4">[5]</ref> does compared to sampling.</p><p>If U is the total universe of values a row in the table can take, we note that <ref type="bibr" target="#b4">[5]</ref> needs to release |U | numbers in order to release a privacy-preserving histogram. We in contrast, need to release only k numbers. When the size of U is much larger than k, releasing a random sample is a more compact way of releasing the histogram.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>We partition related work according to what the sanitizer does with the private data. In the input perturbation family of methods, the private data is perturbed and published as a one-time operation. The perturbed dataset must withstand an unlimited number of queries. In the output perturbation family of methods, the sanitizer receives queries about the private dataset from an attacker. The sanitizer then outputs either the true answer, a perturbed answer, or refuses to answer altogether.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Input Perturbation</head><p>While we assume that the dataset is not a collection of distinct points in R d , another approach is to redefine privacy with respect to this higher dimensional space. Such a compelling definition is given in <ref type="bibr" target="#b2">[3]</ref> where a point is kept private if it "blends with the crowd". That paper offers simulatable methods for perturbing the input so that privacy is preserved. Several utility results are given including learning mixtures of Gaussians and k-Center clustering.</p><p>An alternate input perturbation technique was suggested in <ref type="bibr" target="#b6">[7]</ref>. That paper describes a method for modifying private data (adding and deleting purchase behavior) so as to enable the discovery of frequent itemsets while maintaining privacy. The privacy guarantees given in that paper are quite strong. But the notion of utility is strongly tied to frequent itemsets.</p><p>An input perturbation technique based on pseudorandom sketches was given in <ref type="bibr" target="#b9">[10]</ref>. The idea is that each individual takes their own data over d bits, represents it as a vector of length 2 d with a 1 in the single position corresponding to their private value and a 0 everywhere else. Each bit of this vector of length 2 d is then flipped with probability p. This perturbed vector is then replaced with a slightly biased coin that forms a seed s to a pseudorandom function. The authors show that privacy is preserved in a strong sense, i.e., for all individuals x i and for all values v, v , Pr(s|x i = v) ≈ Pr(s|x i = v ). Furthermore, various utility results are given including estimating the fraction of individuals that satisfy any conjunction of attributes, estimating the fraction of individuals that have private values ≤ x, etc.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Output Perturbation</head><p>A different method for preserving privacy is output perturbation <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b0">1,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b8">9]</ref>. One specific output perturbation result that is very relevant to this paper is due to Dwork et al <ref type="bibr" target="#b4">[5]</ref>. The authors introduce the notion of the sensitivity of a function which is how much the function f can change when one row of the data changes. Privacy is then shown to be preserved if the sanitizer answers each query with additive Laplacian noise that is proportional to the function's sensitivity. Specifically, the sanitizer returns the true answer plus Lap( sen(f ) ) where Lap(λ) is the Laplace distribution with density proportional to p(y) ∝ e -|y| λ . The more sensitive the query, the more noise is added. The sensitivity of a sequence of queries is the extent to which the sequence can change when one row of the table changes. For example, the sensitivity of a histogram is 2 since changing one row of the table at most removes a value from one bucket and adds it to another.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Preliminaries</head><p>We use the term table to mean the original unperturbed data and denote it by T . Each entry of the table is assumed to be a tuple of the form (i, j) where i is some unique identifier, e.g., SSN, name, and j is an integer that represents the individual's private data, e.g., if the data is in binary form, then one can view j as the integer representation of the binary data.</p><p>We assume that the table has n entries, where each entry can take an integer value. We assume that the total number of distinct values taken by the rows of the table is k.</p><p>We use the term sample or sanitized table to denote the result of the sanitization process that the attacker observes and we denote it by S. Note that S is a randomized object, whereas T is a deterministic input supplied to the sanitizer.</p><p>Given a table T , the goal of the sanitizer is to release a sample S of T where the sample does not give the attacker any additional information about any row of the table beyond what the attacker already knows from looking at the rest of the table.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Privacy Definition</head><p>Our definition of privacy is closely related to (1, )-privacy proposed by <ref type="bibr" target="#b4">[5]</ref> (where it was called -indistinguishability).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 1 A sanitization mechanism is (1, )-private if for every pair of tables T and T that differ in one row</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Pr[S|T ] Pr[S|T ]</head><p>≤ 1 +</p><p>Here Pr[S|T ] denotes the probability that the sanitization mechanism outputs S given as input the table T and it is taken over the random choices made by the sanitizer. This definition states that the posterior probability that the sample S came from table T is almost the same as the probability it came from table T ; therefore observing S does not enable the attacker to distinguish between these two tables reliably.</p><p>As mentioned in Section 1.4, we cannot ensure privacy with probability 1 as the table may have rare values or we may simply draw an unrepresentative sample. Consequently, we allow our sanitizer a δ probability of failure.</p><p>Definition 2 A sanitization mechanism is (1, , δ)-private if, for every table T , with probability at least 1 -δ, the mechanism produces S such that for all values v and v :</p><formula xml:id="formula_1">Pr[S|T {i→v} ] Pr[S|T {i→v } ] ≤ 1 +</formula><p>where the probability is taken over the random choices made by the sanitizer.</p><p>This definition states that regardless of the table T , with high probability, the sample S produced does not significantly help the attacker distinguish between any two values v and v for the ith individual in the table. While this quantifies over all possible values, it includes as a special case the ith individual's actual value and any other value.</p><p>Sometimes, there may be correlations between the values of a small number of rows in a database and these correlations may be known to the attacker. For example, the HIV status of a husband and wife are probably the same. This can be thought of more generally as follows. Suppose the table is partitioned into sets of rows {P i } such that if the attacker knows the value of one row in a partition P j , she knows the value of every row in the partition. In such a situation, we might want to consider an attacker who knows the value of all rows in the table except for the rows in one partition, and examine what this attacker can learn by looking at the sanitized data. This motivates the notion of (c, )-privacy proposed by <ref type="bibr" target="#b4">[5]</ref>. (c, )-privacy ensures that the probability that the sanitized data came from two tables T and T that differ in at most c rows is almost the same.</p><p>Typically, more noise is needed to achieve (c, )-privacy than is needed to achieve (1, )-privacy. This sounds counterintuitive at first; how could it be harder to guarantee privacy for an attacker who knows the value of only n -c rows of a table than it is to guarantee privacy for an attacker who knows the value of n -1 rows? This happens because we say that a violation of privacy occurs when there is a deviation from what the attacker already knows. To ensure that there is no deviation from the attacker's knowledge, we need to hide more from an attacker who knows less than from an adversary who knows more.</p><p>We can think of an analogous notion of (c, , δ)-privacy as well. The definition is identical to (1, , δ)-privacy except for any set of c rows in the table T , P i , and for any pair of states V and V the sample does not substantially help the attacker distinguish between T {Pi→V } and T {Pi→V } .</p><p>It is shown in <ref type="bibr" target="#b4">[5]</ref> that a sanitization mechanism that is (1, c )-private is also (c, )-private. This argument can be extended to show that a mechanism which is (1, c , δ c )-private is also (c, , δ)-private.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Some Notation</head><p>We use the following notation for the rest of the paper. Let n be the total number of items in the table, and let n 1 , n 2 , . . . , n k denote the number of items in the table with value 1, 2, . . . , k respectively. Let s denote the size of the sample, and s 1 , s 2 , . . . s k denote the number of items in the sample with value 1, 2, . . . , k. Let V = {v 1 , v 2 , . . . , v c } be a sequence of c values. We say that a sequence of c rows has state V if row i in the sequence has value v i .</p><p>We use the notation T {i→v} to denote a table T in which row i is set to have a value v, and T \ {i} to denote the set of all rows in table T except row i. Similarly, for a set of rows P i , we use the notation T {Pi→V } to denote a table T in which the set of rows P i have state V , and T \ {P i } to denote the set of all rows in table T except the rows in set P i .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">(1, , δ)-privacy</head><p>In this section, we show what sampling probability is (1, , δ)-private. Given , δ, a table T and k, the number of distinct values in the table, we provide p, a sampling frequency that is (1, , δ)-private.</p><p>Our guarantees can be summarized as follows.</p><p>Theorem 3 Given a table T , let α = δ 2 , k be the number of distinct values in T and t be the total number of values in T that occur less than 2 log( k α ) times. Also let = max(2(p + ), 6p) and p + &lt; 1 2 . Then, a sample S of T drawn with frequency p ≤</p><formula xml:id="formula_2">log( 1 1-α ) 4t log( k α ) is (1, , δ)-private when t &gt; 0. When t = 0, a sample S of T drawn with frequency p ≤ is (1, , δ)- private.</formula><p>We need the assumption p + &lt; 1 2 to make sure p is bounded away from 1 by a constant. (Any other constant than 1  2 would do, but would change the constants in Theorem 3. ) We want this condition because if p is too close to 1, all rows containing a certain value may appear in the sample, leading to a serious breach of privacy.</p><p>Note that for certain tables such as those consisting only of unique values, the upper bound on p according to our theorem is less than 1/n. This should be interpreted as the fact that we cannot guarantee (1, , δ)-privacy for a sample even of size 1.</p><p>The theorem shows that for a given table T and a given failure probability δ, the lower the value of p, the better the privacy guarantee. Since log( <ref type="formula" target="#formula_5">1</ref>1-α ) α, p varies linearly as δ. This means that δ, the failure probability, has to be at least n to ensure we draw a random sample even of size 1. This is expected, because in a table with a unique value v, the probability that any random sample selects this value is at least 1 n . We see in Observation 6 that this dependence of p on δ is almost tight except for the factor of log( k α ). Before we prove Theorem 3, we provide some intuition. For our proofs, we divide the set of values in the A common value v has the property that the expected number of such values in the sample S is at least Ω(log( k α )), and therefore the number of such values in the sample is tightly concentrated around its mean.</p><p>If a value v is not a common value, we can only show using Chernoff Bounds that the number of occurrences of v in T is away from its expected value by at most O(log( k α )). If about log( k α ) rows with a rare value v occur in the released sample, the posterior probability Pr[S|T {i→v} ] can increase by more than a (1+ ) fraction. To deal with this, we hide all such rows. This is achieved by making p less than the inverse of the total number of such rare values.</p><p>A value that is neither common nor rare is called an infrequent value. Such a value may appear in a sample S, but the number of such values cannot be guaranteed to be tightly concentrated around its expectation. However, releasing about O(log( k α )) rows with such a value does not lead to an breach in privacy. As we showed earlier, releasing any sample drawn from a table does not ensure (1, , δ)-privacy. We show that privacy is preserved when we draw a sample with certain properties, and such a sample occurs with high probability. A sample possessing these properties is called a good sample.</p><p>Definition 5 A good sample is one that has the following properties: (1) A rare value v does not occur. (2) An infrequent value v occurs in at most n v p+2 log( k α ) rows. (3) A common value v occurs in at most n v p + 3n v p log( k α ) rows.</p><p>In Lemma 1, we show that releasing a good sample preserves privacy. In Lemma 2, we show that a good sample occurs with high probability. Combining Lemmas 1 and 2, we get a proof of Theorem 3.</p><p>Lemma 1. Let S be a good sample drawn from table T . Then for any row i and any pair of values v and v ,</p><formula xml:id="formula_3">Pr[S|T {i→v} ] Pr[S|T {i→v } ] ≤ 1 +</formula><p>where = max(2(p + ), 6p) for p + &lt; 1 2 .</p><p>Proof. For any value u, let n 1 u be the number of rows in table T \ {i} with value u, and let s u be as usual the number of rows with value u in the sample S. Then, T {i→v} has n 1 v + 1 rows with value v and n 1 v rows with value v . We now show that since S is a good sample, s v &lt; n 1 v + 1. If row i of T takes any other value than v, this holds trivially; otherwise, we claim that at most n 1 v rows of T that take value v appear in S. If v is a rare value, there are no rows with value v in a good sample. If v is an infrequent value, the maximum number of rows with value v in the sample is at most (n 1 v +1)p+2 log( k α ) which is at most n 1 v (p+ )+p &lt; n 1 v for p+ &lt; 1/2. If v is a common value, the maximum number of rows with value v in the good sample S is at most (n</p><formula xml:id="formula_4">1 v +1)p+ 3(n 1 v + 1)p log( k α ), which is at most (n 1 v + 1)p 1 + 3 log( k α ) (n 1 v +1)p ≤ 3 2 (n 1 v + 1)p &lt; n 1 v + 1 when p &lt; 1 2 . Therefore, Pr[S|T {i→v} ] Pr[S|T {i→v } ] = n 1 v +1 sv n 1 v s v n 1 v sv n 1 v +1 s v = 1 -s v n 1 v +1 1 -sv n 1 v +1</formula><p>For a rare value v, s v = 0. Therefore,</p><formula xml:id="formula_5">1 -s v n 1 v +1 1 -sv n 1 v +1 = 1 - s v n 1 v + 1 ≤<label>1</label></formula><p>For an infrequent value v, since there are at most n</p><formula xml:id="formula_6">1 v + 1 rows with value v in the table T , s v ≤ (n 1 v + 1)p + 2 log( k α ) and n 1 v + 1 ≥ 2 log( k α ) . This implies that, sv n 1 v +1 ≤ p + and assuming p + &lt; 1/2, 1 -s v n 1 v +1 1 -sv n 1 v +1 ≤ 1 + p + 1 -(p + ) ≤ 1 + 2(p + )</formula><p>For a common value v, as there are either n 1 v or n 1 v + 1 rows with value v in the table, s v is at most (n 1 v + 1)p + 3(n 1 v + 1)p log( k α ), and (n</p><formula xml:id="formula_7">1 v + 1)p ≥ 12 log( k α ). Therefore sv n 1 v +1 ≤ 3 2 p which implies that 1 -s v n 1 v +1 1 -sv n 1 v +1 ≤ 1 + 3 2 p 1 -3 2 p ≤ 1 + 6p for p &lt; 1/2.</formula><p>We now state a condition on p that ensures S is a good sample with high probability.</p><p>Lemma 2. If the sampling frequency p &lt; log( 1 1-α ) 4t log( k α ) , the probability that a good sample is drawn is at least (1 -α) 2 .</p><p>Proof. We observe that given a fixed table T , the number of rows in S with value u is independent of the number of rows in S with any other value u .</p><p>For a common value v, the probability that S has more than n v p+ 3n v p log( k α ) rows with value v is at most e -3 log( k α )/3 = α k using Chernoff Bounds.</p><p>For an infrequent value v, the probability that S has more than n v p+2 log( k α ) rows with value v is at most e -2 log( k α )/2 = α k</p><p>Since there are k values altogether, the total probability that the sample has the requisite number of common and infrequent values is at least 1 -k • α k = 1 -α. The probability that a rare value v does not occur in S is (1 -p) nv . If there are at most t rare values, then the probability that none of these values occur in S is at least (1 -p) 2t log( k α )/ ≥ e -4pt log( k α )/ . For p &lt; log( 1 1-α ) 4t log( k α ) , this probability is at least 1 -α.</p><p>The total probability of seeing a good sample is therefore at least (1 -α) 2 .</p><p>Finally, we present an example to show that the upper bound on p is tight up to a log( k α ) factor. Observation 6 There exists a table T for which a sampling frequency p &lt; log( Since s u ≥ 1 and n u = 1 , this quantity is at most 1-2 for any &lt; 1. In other words, if we see a sample S with the property mentioned above, (1, /2)-privacy is violated.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>table T into three categories -rare values, infrequent values and common values. Definition 4 A value is said to be a common value if it occurs in at least rows of the table, where p is the sampling frequency. A value v is called a rare value if it occurs in at most 2 log( k α ) rows of the table. A value that is neither rare nor common is called an infrequent value.</figDesc><table><row><cell>12 log( k α )</cell></row><row><cell>p</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>1 1-α ) t violates (1, 2 , α)-privacy. Here t + 1 is the number of values with frequency at most 1 . We illustrate this through an example. Consider a table T with t + 2 distinct values; values 1, 2, . . . , t each occur in 1 rows, value t + 1 occurs in all the remaining rows except for one row, and value t + 2 occurs in row i. Consider a sample S drawn from this table with the property that s u &gt; 0 for some u ∈ [1, . . . , t]. Consider an attacker who knows the value of all rows of the table except for row i and is trying to find out what the value of row i is. If s t+2 &gt; 0, Pr[S|T {i→u} ] = 0 for any u other than value t + 2, and Pr[S|T {i→t+2} ] Pr[S|T {i→u} ] is unbounded. Otherwise, s t+2 = 0. Let u be a value in [1, . . . , t] for which s u &gt; 0. If n v is the number of rows with value v in the table T \ {i},</figDesc><table><row><cell>Pr[S|T {i→t+2} ] Pr[S|T {i→u} ]</cell><cell>=</cell><cell>nu su nu+1 nt+2+1 st+2 su nt+2 st+2</cell><cell>= 1 -</cell><cell>s u n u + 1</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_0"><p>The notion of simulatability is already known to be important in cryptography<ref type="bibr" target="#b7">[8]</ref> and also in privacy research<ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b2">3]</ref>.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Acknowledgements</head><p>We are very grateful to Kobbi Nissim for extensive discussions. We thank Cynthia Dwork for her insights and Amit Agarwal for early discussion. We thank Shankar Bhamidi for useful suggestions. Finally, we thank the anonymous reviewers for their many thoughtful suggestions.</p></div>
			</div>


			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Research supported in part by NSF EIA-0137761.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Now the probability of choosing a sample S with this property is <ref type="bibr">(</ref></p><p>, this probability is more than α. This means that we need a sampling frequency p &lt; log( 1 1-α ) t</p><p>to ensure (1, 2 , α)-privacy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">(c, , δ)-privacy</head><p>The techniques of <ref type="bibr" target="#b4">[5]</ref> show that a mechanism which is (1, c , δ c )-private is also (c, , δ)-private. The proof looks at a sequence of intermediate tables, each of which differs from the previous one by one row, and shows that (1, c , δ c )-privacy for each of these tables implies (c, , δ)-privacy for the original table. It is not apparent that the proof applies to us : we do not guarantee (1, , δ)-privacy for all tables for a uniform value of p, so a sampling frequency that is (1, , δ)-private for the starting table may not maintain the same , δ guarantees for an intermediate one. In this section, we show an upper bound on the sampling frequency p so that (c, , δ)-privacy is ensured. Our guarantees are better than the guarantees in <ref type="bibr" target="#b4">[5]</ref> in terms of δ and slightly worse in terms of .</p><p>As in the previous section, given , δ, a table T and k, the total number of distinct values in the table and c, we provide a sampling frequency p that is (c, , δ)-private. Our main guarantees can be summarized as follows.</p><p>Theorem 7 Given a table T , let α = 1 2 δ, k be the number of distinct values in T and t be the total number of values in T that occur less than</p><p>Then a sample S of T drawn with frequency p &lt;</p><p>) is (c, , δ)-private for t &gt; 0. When t = 0, a sample S of T drawn with frequency p ≤ is (c, , δ)-private.</p><p>We need the assumption (1 +</p><p>2 to make sure p is bounded away from 1 by a constant and also is small compared to c. (Any other constant than 1  2 would do, but would change the constants in Theorem 7. ) If p is too close to 1 or if c is too big, all rows containing a rare value may appear in the sample, leading to a serious breach of privacy.</p><p>Comparing these guarantees with those in Section 4, we observe that for a table T , a sampling frequency p that is <ref type="bibr">(1,</ref> </p><p>) , δ)-private is also (c, , δ)private. We therefore do better than the kind of bound given in <ref type="bibr" target="#b4">[5]</ref> in terms of δ and a little worse in terms of .</p><p>Consider all sets of n -c rows in table T and let n c v be the minimum number of rows with value v in any such set. In this section, we call a value v a rare value</p><p>, where p is the sampling frequency. A value that is neither rare nor common is called an infrequent value.</p><p>Just as in the previous section, we show that privacy is preserved when we draw a sample with certain properties. We call a sample possessing these properties a good sample, with the same definition as in Section 4.</p><p>In Lemma 3, we show that releasing a good sample preserves privacy. Because the definition of rare and infrequent values have changed, the fact that a good sample occurs with high probability does not automatically follow from Lemma 2. Instead in Lemma 4, we show that a good sample occurs with high probability. Combining Lemmas 3 and 4, we get a proof of Theorem 7.</p><p>Lemma 3. Let S be a good sample drawn from table T . Then for any set of c rows P i and any pair of states V and V ,</p><p>Proof. Without loss of generality, we assume that the state V has c rows with value v and no rows with value V and the state v has no rows with value v and c rows with value v . The proofs go through when this assumption does not hold, and so we simplify the notation accordingly.</p><p>For any value u, let n c u denote the number of rows in T \{P i } with value u, and let s u be the number of rows with value u in the sample S. Note that T {Pi→V } has n c v + c rows with value v and n c v rows with value v , whereas T {Pi→V } has n c v + c rows with value v and n c v rows with value v. We now show that since S is a good sample, s v &lt; n c v + 1. If the set of rows P i in T includes no row with value v, this holds trivially; otherwise, we claim that at most n c v rows of T that take value v appear in S. Note that T can have at most n c v + c rows with value v. If v is a rare value, there are no rows with value v in a good sample. If v is an infrequent value, the maximum number of rows with value v in the sample is at most (n c v + c)p + 2 log( k α ) which is at most</p><p>If v is a common value, the maximum number of rows with value v in the good sample S is at most</p><p>Because v is not a rare value, this quantity is at most 1+2c(1+</p><p>) , the probability that a good sample is drawn is at least (1 -α) 2 .</p><p>Proof. Following exactly the same argument as in Lemma 2, the probability that the number of common and infrequent values lie within the requisite bounds is at least 1 -α.</p><p>The probability that a rare value v does not occur in S is (1 -p) nv . Now there are at most c + 2 log( k α ) rows with a rare value v. If there are at most t rare values, then the probability that none of these values occur in S is at least (1 -p) 2t log( k α )/ +tc ≥ e -4pt(2 log( k α )/ +c) . For p &lt;</p><p>) , this probability is at least 1 -α.</p><p>The total probability of seeing a good sample is therefore at least (1 -α) 2 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Future Work</head><p>There are many avenues for future work. Our work assumes that the random sample is published in unperturbed form. But it is quite possible that one can draw larger random samples if noise is added to the sample. Such a technique may be useful when k is large. One would have to also understand what impact such noise would have on utility. Another direction for future research is the study of data streams where individual data points arrive in sequential, not necessarily random order and the question is how to maintain a random sample of the stream without breaching privacy. In this context, the attacker may know who the next person is in the stream, but not know their private values. Existing techniques for maintaining random samples over a stream such as reservoir sampling <ref type="bibr" target="#b12">[13]</ref> violate privacy since the sample only changes to include a new person's value when that person arrives.</p><p>Finally, in practice, prior to sampling, organizations typically employ other anonymization procedures including, for example, top-coding, where individuals with values above a certain percentage of the distribution are placed into a single category, geographic population thresholds, where individuals that live in a geographic unit below a specified population level are not disclosed, random rounding, wherein numbers that are not multiples of say 10 are randomly rounded to one of the two nearest multiples. Analysis of the privacy/utility of these multistep anonymization procedures that precede sampling would be an interesting direction for future work.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Practical privacy: the sulq framework</title>
		<author>
			<persName><forename type="first">A</forename><surname>Blum</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Dwork</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Mcsherry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Nissim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PODS</title>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="128" to="138" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Public use microdata sample (pums)</title>
		<ptr target="http://www.census.gov/Press-Release/www/2003/PUMS.html" />
		<imprint>
			<date type="published" when="2003">2003</date>
			<publisher>U.S. Census Bureau</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Toward privacy in public databases</title>
		<author>
			<persName><forename type="first">S</forename><surname>Chawla</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Dwork</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Mcsherry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Wee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Theory of Cryptography Conference</title>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="363" to="385" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Revealing information while preserving privacy</title>
		<author>
			<persName><forename type="first">I</forename><surname>Dinur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Nissim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PODS</title>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="202" to="210" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Calibrating noise to sensitivity in private data analysis</title>
		<author>
			<persName><forename type="first">C</forename><surname>Dwork</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Mcsherry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Nissim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Theory of Cryptography Conference</title>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="265" to="284" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Privacy-preserving datamining on vertically partitioned databases</title>
		<author>
			<persName><forename type="first">C</forename><surname>Dwork</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Nissim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CRYPTO</title>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="528" to="544" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Limiting privacy breaches in privacy preserving data mining</title>
		<author>
			<persName><forename type="first">A</forename><surname>Evfimievski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Gehrke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Srikant</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PODS</title>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="211" to="222" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Foundations of Cryptography, Volumes I and II</title>
		<author>
			<persName><forename type="first">O</forename><surname>Goldreich</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
			<publisher>Cambridge University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<author>
			<persName><forename type="first">K</forename><surname>Kenthapadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mishra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Nissim</surname></persName>
		</author>
		<title level="m">Simulatable auditing. In PODS</title>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="118" to="127" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Privacy via pseudorandom sketches</title>
		<author>
			<persName><forename type="first">N</forename><surname>Mishra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sandler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PODS</title>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Social Security Administration: Office of Policy Data. Benefits and earnings publicuse file</title>
		<ptr target="http://www.ssa.gov/policy/docs/microdata/earn/index.html" />
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Guaranteeing anonymity when sharing medical data, the datafly system</title>
		<author>
			<persName><forename type="first">L</forename><surname>Sweeney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings AMIA Annual Fall Symposium</title>
		<meeting>AMIA Annual Fall Symposium</meeting>
		<imprint>
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Random sampling with a reservoir</title>
		<author>
			<persName><forename type="first">J</forename><surname>Vitter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Mathematical Software</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="37" to="57" />
			<date type="published" when="1985-03">March 1985</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
