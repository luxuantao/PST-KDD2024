<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">SKYPEER: Efficient Subspace Skyline Computation over Distributed Data</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Akrivi</forename><surname>Vlachou</surname></persName>
							<email>avlachou@aueb.gr</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Informatics Athens University of Economics and Business Patision 76</orgName>
								<address>
									<postCode>10434</postCode>
									<settlement>Athens</settlement>
									<country key="GR">Greece</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Christos</forename><surname>Doulkeridis</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Informatics Athens University of Economics and Business Patision 76</orgName>
								<address>
									<postCode>10434</postCode>
									<settlement>Athens</settlement>
									<country key="GR">Greece</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Yannis</forename><surname>Kotidis</surname></persName>
							<email>kotidis@aueb.gr</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Informatics Athens University of Economics and Business Patision 76</orgName>
								<address>
									<postCode>10434</postCode>
									<settlement>Athens</settlement>
									<country key="GR">Greece</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Michalis</forename><surname>Vazirgiannis</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Informatics Athens University of Economics and Business Patision 76</orgName>
								<address>
									<postCode>10434</postCode>
									<settlement>Athens</settlement>
									<country key="GR">Greece</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="laboratory">GEMO Team INRIA/FUTURS</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">SKYPEER: Efficient Subspace Skyline Computation over Distributed Data</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">2B3F201767CD748E12DAD9D3DB49E110</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T12:05+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Skyline query processing has received considerable attention in the recent past. Mainly, the skyline query is used to find a set of non dominated data points in a multidimensional dataset. While most previous work has assumed a centralized setting, in this paper we address the efficient computation of subspace skyline queries in largescale peer-to-peer (P2P) networks, where the dataset is horizontally distributed across the peers. Relying on a superpeer architecture we propose a threshold based algorithm, called SKYPEER, which forwards the skyline query requests among peers, in such a way that the amount of transferred data is significantly reduced. For efficient subspace skyline processing, we extend the notion of domination by defining the extended skyline set, which contains all data elements that are necessary to answer a skyline query in any arbitrary subspace. We prove that our algorithm provides the exact answers and we present optimization techniques to reduce communication cost and execution time. Finally, we provide an extensive experimental evaluation showing that SKYPEER performs efficiently and provides a viable solution when a large degree of distribution is required.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Skyline queries help users make intelligent decisions over complex data, where different and often conflicting criteria are considered. Such queries return a set of interesting data points that are not dominated by any other point on all dimensions <ref type="bibr" target="#b3">[4]</ref>. Skyline queries are beneficial to distributed applications like web information systems <ref type="bibr" target="#b0">[1]</ref>. However, as the number of participating sources increases, traditional client-server solutions are prone to bottleneck risks and therefore cannot scale. Furthermore, the amount of data increases at tremendous rates, making its central assembly at one location infeasible. Last, but not least, independent information sources usually do not wish to allow uncontrolled access to their local data repositories, mainly for privacy reasons.</p><p>Consider a global-scale web-based hotel reservation system, consisting of a large set of independent servers geographically dispersed around the world. Servers accept subscriptions by travel agencies, in order to advertise their hotels. Towards this goal, servers are willing to share some information about the data stored locally, without handing over the whole dataset. Such a system could potentially provide booking services over the universal hotel database, without requiring from each travel agency to register with each server. This need becomes even more important, due to the fact that the number of providers (and therefore data) increases at tremendous rates. The challenge is to enable users to pose interesting queries, such as skylines, over this network of servers, and retrieve those results that match a possibly different (each time) set of user-defined criteria. In general, given a set of d-dimensional objects, a subspace skyline query only refers on a subset of attributes of size k ≤ d.</p><p>A promising solution for the design and deployment of global-scale applications such as the above, is the exploitation of peer-to-peer (P2P) technology. The P2P paradigm emerges as a powerful model for organizing and searching large data repositories distributed over independent sources <ref type="bibr" target="#b6">[7]</ref>. In this work we explore how subspace skyline queries can be computed efficiently over a distributed and large-scale web information system modeled as a P2P network. Our approach relies on a super-peer architecture, where each peer holds only a portion of the entire dataset. The main contributions of our work are:</p><p>• We explore the implications of processing subspace skyline queries in large scale P2P networks, since ex-isting methods that have been developed for centralized systems can not be adapted to work efficiently in a P2P environment.</p><p>• We extend the notion of domination by defining the extended skyline set, which can provably answer arbitrary subspace queries in an efficient manner. We then present our algorithm, SKYPEER, which orchestrates the processing of a subspace skyline query using extended skyline sets.</p><p>• SKYPEER utilizes a thresholding scheme, in order to facilitate pruning of dominated data across the peers. We explore different strategies for (i) threshold propagation and (ii) result merging through the P2P network.</p><p>• We provide an extensive experimental evaluation of our algorithms and compare it against a straightforward skyline computation algorithm adapted to work in P2P networks.</p><p>The rest of this paper is organized as follows: Section 2 provides an overview of related work. In Section 3 we describe the P2P architecture employed and we present a baseline algorithm for subspace skyline queries. In Section 4 we introduce the extended skyline, which provides the foundation for our algorithm presented in Section 5. Our experimental results are presented in Section 6. Finally, in Section 7 we conclude the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Related Work</head><p>Skyline computation has recently received considerable attention in the database research community. Two algorithms, BNL and DC are proposed in <ref type="bibr" target="#b3">[4]</ref>, while SFS <ref type="bibr" target="#b4">[5]</ref>, is based on the same principle as BNL, but improves performance by first sorting the data according to a monotone function. Tan et al. <ref type="bibr" target="#b15">[16]</ref> propose the first progressive techniques, namely Bitmap and Index method. In <ref type="bibr" target="#b10">[11]</ref>, an algorithm based on nearest neighbor search on the indexed dataset is presented. Then, Papadias et al. <ref type="bibr" target="#b13">[14]</ref> propose a branch and bound algorithm to progressively output skyline points on a dataset indexed by an R-Tree, with guaranteed minimum I/O cost.</p><p>Recently papers focus on algorithms to support subspace skyline retrieval. In <ref type="bibr" target="#b16">[17]</ref> SUBSKY, a non-incremental algorithm, is presented, which transforms the multi-dimensional data to one-dimensional values, and indexes the dataset with a B-Tree. Pei et al. <ref type="bibr" target="#b14">[15]</ref> and Yuan et al. <ref type="bibr" target="#b19">[20]</ref> independently propose the SKYCUBE, which consists of the skylines in all possible subspaces. In <ref type="bibr" target="#b5">[6]</ref> the problem of supporting constrained subspace skylines, which form the generalization of all meaningful skyline queries over a given dataset, was posed.</p><p>In spite of the importance of the skyline there is limited work on skyline calculation in decentralized and distributed environments. In <ref type="bibr" target="#b0">[1]</ref> an algorithm for distributed environments was proposed. Unfortunately, their assumptions are hardly applicable to large-scale P2P systems. Furthermore, while they assume a vertical partitioning of the dataset across the Web sources, data in P2P systems is, typically, horizontally partitioned across the peers.</p><p>The first work that focuses on P2P skyline computation is presented in <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b7">8]</ref>. The authors focus on Peer Data Management Systems (PDMS), where each peer provides its own data with its own schema. Their techniques provide probabilistic guarantees for the result's correctness. In comparison, our algorithms provably return exact answers to arbitrary subspace skyline computations. In <ref type="bibr" target="#b9">[10]</ref>, Huang et al. assume a setting with mobile devices communicating via an ad hoc network, and study skyline queries that involve spatial constraints. The authors present techniques that aim to reduce the costs of communication and reduce the execution time on each single device. Wu et al. <ref type="bibr" target="#b17">[18]</ref> first address the problem of parallelizing progressive skyline queries on a share-nothing architecture. Their techniques enforce the skyline partial order, so that the system pipelines participating machines during query execution and minimizes intermachine communication.</p><p>Super-peer networks <ref type="bibr" target="#b18">[19]</ref>, like KaZaa and eMule, have emerged as a viable solution for developing existing P2P systems, harnessing the merits of both centralized and decentralized systems. Edutella <ref type="bibr" target="#b12">[13]</ref> is such a super-peer approach, based on HyperCup topology, where super-peers maintain indices of peer contents and routing indices, and searching is practically achieved through routing at superpeer level. Distributed top-k retrieval <ref type="bibr" target="#b11">[12]</ref> and P2P ranking <ref type="bibr" target="#b1">[2]</ref> have also attracted attention lately, motivating and relating to our research in P2P skyline query processing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Skyline Computation in P2P Networks</head><p>Skyline query processing in P2P networks poses inherent challenges and demands non-traditional techniques due to the distribution of content and the lack of global knowledge. Relying on a super-peer architecture we propose a threshold based algorithm, called SKYPEER and its variants, for efficient computation of skyline points in arbitrary subspaces, reducing both computational time and volume of transmitted data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Preliminaries and Definitions</head><p>We assume an unstructured P2P network of N p peers. Some peers have special roles, due to their enhanced features, such as availability, storage capability and bandwidth capacity. (i = 1..N sp ), and they constitute only a small fraction of the peers in the network, i.e. N sp &lt;&lt; N p . Peers that join the network directly connect to one of the super-peers. Each super-peer maintains links to simple peers, based on the value of its degree parameter DEG p . In addition, a super-peer is connected to a limited set of at most DEG sp other super-peers (DEG sp &lt; DEG p ).</p><p>In super-peer architectures, queries are typically routed first in the super-peer backbone and afterwards, if necessary, they are distributed to the peers that are connected to the super-peers. In general, super-peers maintain information about the peers they have been assigned, so that at query time, they can process a query without having to contact all peers. Note that one important performance parameter is the super-peer topology which influences the routing performance. In this work we assume that the super-peer topology is pre-defined and we focus on the optimization of interactions among super-peers and peers.</p><p>Each peer P i holds n i d-dimensional points, denoted as a set S i (i = 1..N p ). Obviously the size of the complete set of points is n = Np i=1 n i and the dataset S is the union of all peers' datasets S i : S = ∪S i . Given a space D defined by a set of d dimensions {d 1 , d 2 , .., d d } and a dataset S on D, a point p ∈ S can be represented as p = {p <ref type="bibr" target="#b0">[1]</ref>, p <ref type="bibr" target="#b1">[2]</ref></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>., p[d]}</head><p>where p[i], is a value on dimension d i . Each non-empty subset U of D (U ⊆ D) is referred to as a subspace. Without loss of generality, we assume that skylines are computed with respect to min conditions on all dimensions and that all values are non-negative. A point p ∈ S is said to dominate another point q ∈ S on subspace U , if on each dimension</p><formula xml:id="formula_0">d i ∈ U , p[i] ≤ q[i]; and on at least one dimension d j ∈ U , p[j] &lt; q[j].</formula><p>The skyline of a subspace U ⊆ D is a set of points SKY U ⊆ S which are not dominated by any other point on subspace U . The points in SKY U are called sky-line points on subspace U . For a complete reference to the symbols used in this paper see Table <ref type="table" target="#tab_0">1</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">A Baseline Algorithm</head><p>In the rest of this paper, we denote the querying peer P init , henceforth referred to as initiator of a query <ref type="foot" target="#foot_1">1</ref> . In a distributed setting, a simple solution is that all peers send their local datasets to P init where a centralized skyline algorithm is executed. However, this approach is infeasible in a large-scale P2P system due to the high incurred costs and is not considered further as candidate solution. Therefore, our premise is to locally evaluate as many parts of the query as possible. However, accurate skyline computation over widely distributed data, demands that all data is taken into account, since even a single point neglected could be part of the skyline and, thus, prune out other points already processed. Our main observation is that a point p ∈ SKY U , only if there exists a partition S i where p is a local skyline in U . Thus, each super-peer needs to collect from the associated peers only the skyline points of all subspaces. In the next section, we define an appropriate set, called extended skyline, with low computation cost.</p><p>Given the locally stored extended skyline, each super peer individually processes a subspace skyline request and transmits the results to the query initiator. Notice that some local skyline points may not belong to the global SKY U . Thus, the query initiator needs to collect the results from all super-peers and merge them by discarding dominated points. This approach is considered as baseline, and will be henceforth referred to as "naive". In what follows we aim to improve the performance of the naive approach by reducing communication costs and processing time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Extended Skyline</head><p>In order to avoid the transmission of all data in the P2P network, we need to calculate a subset of the original dataset that contains all the skyline points for any subspace. As shown in the following two Observations <ref type="bibr" target="#b19">[20]</ref>, the set of the skyline points of the global data space is not sufficient. Observation 1. Given a set S of data points on dimension set D, for two subsets U and V of D (U ,V ⊆ D), where U ⊆ V , there is no containment relationship between SKY U and SKY V . Observation 2. Assume a set S of data points on dimension set D and two subsets U and V of D (U ,V ⊆ D) such that U ⊂ V . Each skyline point q in SKY U on dimension set V is either dominated by another skyline point p in SKY U ; or a skyline point in SKY V . Based on the above observations, a skyline point q in SKY U is either a skyline point in SKY V or there is another data point p such that p[a i ] = q[a i ] (∀a i ∈ U ) that dominates q on the dimension set V -U . Thus, a super-set of the union of all subspace skylines is the set of the global skyline points enriched with all points p for which ∃i∃q ∈ SKY D q[a i ] = p[a i ]. Consider for example Figure <ref type="figure" target="#fig_0">1(a)</ref> where e and k have the same x-value but k is a skyline point in contrast to point e which is not a skyline point in any subspace.</p><p>To reduce the computation overhead we compute a subset of the mentioned super-set that is able to answer any subspace skyline query. Therefore, we adjust the dominance definition to compute all necessary values coinstantaneously during the skyline calculation. We define the extended-skyline (ext-skyline) based on the extended domination (ext-domination) definition. Definition 1. For any dimension set U , where U ⊆ D, p ext-dominates q if on each dimension</p><formula xml:id="formula_1">d i ∈ U , p[i] &lt; q[i].</formula><p>The ext-skyline (ext-SKY U ) is set of all points that are not ext-dominated by any other.</p><p>In the following, we prove that ext-SKY D is sufficient to answer any subspace skyline query correctly. Observation 3. Every point that belongs to the skyline of U belongs also to the ext-skyline of U , i.e. SKY U ⊆ ext-SKY U . Proof: Let p ∈ SKY U and p / ∈ ext-SKY U . It follows that there is a point q that ext-dominates the point p in U . Based on the definition of the ext-skyline ∀a i ∈ U : q(a i ) &lt; p(a i ). Therefore, based on the skyline definition we conclude that p / ∈ SKY U , which leads to a contradiction. Observation 4. Every point that belongs to the skyline of a subspace V ⊆ U belongs to the ext-skyline of U , i.e. SKY V ⊆ ext-SKY U , V ⊆ U . Proof: Based on Observation 2 we distinguish two cases. If p is a skyline point in U then Observation 3 guarantees that p ∈ ext-SKY U . If p is not a skyline point in SKY U based on Observation 2 there is a skyline point q in U such that p(a i ) = q(a i ) , ∀a i ∈ U . Based on Observation 3 and the definition of ext-skyline we conclude that q ∈ ext-SKY U and p ∈ ext-SKY U .</p><p>For example, in Figure <ref type="figure" target="#fig_0">1</ref>(a), point m belongs to the extskyline, which is not the case with point e, since e is globally dominated by i, which in turn does not have any value equal to the attribute values of e. Notice, that neither e nor m belong to any subspace skyline.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">The SKYPEER Algorithm</head><p>In this section we describe our algorithm for subspace skyline computation in a P2P environment. First, in a preprocessing phase (more on this in Section 5.3) each peer P i computes the local ext-skyline of its dataset S i and sends it to the associated super-peer. The super-peer calculates its own ext-skyline, denoted as ∪ext-SKY Di (i = 0..DEG p ), by merging the local skyline results. Based on Observation 4 the local ext-skyline is sufficient for a super-peer to determine if any of its peers P i can contribute to the results of any skyline query on an arbitrary subspace U ⊆ D. In order to speed up the subspace skyline computation the multi-dimensional data is transformed into one dimensional values. This mapping is the topic of the next subsection.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.">Mapping</head><p>Recall that each super-peer maintains some portion of the dataset consisting of d-dimensional points. A query refers to a non-empty subset U of D. The values of all dimensions are assumed to be non-negative.</p><p>Inspired by <ref type="bibr" target="#b16">[17]</ref>, each d-dimensional point p is transformed to a one dimensional value f (p) based on the formula:</p><formula xml:id="formula_2">f (p) = d min i=1 (p[i])<label>(1)</label></formula><p>Let dist U (p) denote the L ∞ -distance of point p from the origin based on the dimension set U , i.e. dist U (p) = max i∈U (p[i]). Observation 5. Let p sky be a skyline point in a subspace U . A point p for which the following inequality holds cannot be a skyline point in subspace U .</p><formula xml:id="formula_3">f (p) &gt; dist U (p sky )<label>(2)</label></formula><p>In Figure <ref type="figure" target="#fig_0">1</ref>(b) we consider an example for the case of a two dimensional skyline query. Let p sky be a skyline point. The f (p sky ) value equals to 3 showing that p sky lies on the dashed line, while Observation 5 allows us to prune the shadowed area. Notice that the main difference of the proposed transformation to the one in <ref type="bibr" target="#b16">[17]</ref> is that distances are calculated based on the origin of axes, while in <ref type="bibr" target="#b16">[17]</ref> the maximum corner<ref type="foot" target="#foot_2">2</ref> is used. This method is not directly applicable to a distributed environment since the maximum corner is not known to all super-peers a priori. Recently, in <ref type="bibr" target="#b2">[3]</ref> the idea of limiting the amount of data to be read by exploiting the value of a monotone function was studied. p ← next point 12: end while 13: return SKY U</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.">Threshold-Based Skyline Computation</head><p>Since the acquisition of global knowledge is infeasible in P2P networks, a basic concept of our algorithm is to locally evaluate as many parts of the query as possible. A querying super-peer hands on the query to its neighboring super-peers along the super-peer backbone, which in turn forward the query to their adjacent super-peers, without having to maintain full query processing information. The super-peers execute the query over their local data and retrieve matching points. In the sequel we present all relevant steps in detail.</p><p>Each peer executes a local subspace skyline computation (5.2.1). The initiator peer computes the overall subspace skyline result by merging the local results (5.2.2). Finally, we present optimization techniques to reduce the communication and computation cost (5.2.3).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.1">Local Subspace Skyline Computation</head><p>Each super-peer maintains a list with the ext-skyline points of its associated peers. We assume that each super-peer can access the stored ext-skyline points in an ascending order of their f (p) values and we present an algorithm for efficient local subspace skyline computation (Algorithm 1). Note that the f (p) value is computed once based on the space D while dist U (p) refers to the queried subspace U and it is calculated during the skyline computation. During the subspace skyline computation the dominating points among the data already examined are inserted into the current subspace skyline set SKY U . The algorithm uses as a threshold the minimum value of the dist U (p) of all points in SKY U . Based on Observation 5, the algorithm terminates when threshold is smaller than the f (p) value of the next point p.</p><p>An important performance parameter is the efficiency of the dominance test, which is computationally expensive if the skyline set contains a large number of points and the dimensionality of the query is high. Notice that we need to test a point for domination only against the potential subspace skyline points SKY U that have been already found. To speed up the computation the dominance test is performed in a way similar to traditional window queries <ref type="bibr" target="#b13">[14]</ref> using a main-memory R-tree with dimensionality equal to the query dimensionality.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.2">Merging of Computed Subspace Skylines</head><p>After the initiator super-peer P init has executed a local subspace skyline computation and has collected the local subspace skyline result set of all other super-peers, P init merges the local result sets of the individual super-peers to one global result set. Algorithm 2 performs this task and prunes out those points that are dominated by points of other super-peers SP j .</p><p>We assume that each super-peer delivers its local result set as a sorted list based on the f (p) values of the local skyline points. Again the points are accessed based on their f (p) values while dominated points are discarded, until the f (p) value of the next point is larger than the threshold value. Notice that an alternative would be to merge all lists into one list, sort this list and then apply Algorithm 1, however the use of Algorithm 2 avoids these extra costs and ensures that each list is accessed only until its next element is larger than the threshold value.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.3">Optimization Techniques</head><p>As we have already mentioned, each super-peer calculates its own local subspace skyline result. In a second step, these local subspace skyline results have to be merged into a global result set, for example by the initiator super-peer. Even though the use of local skyline query results at each super-peer reduces the amount of data transmitted to the query initiator P init (naive approach), there is still a chance that a local result may contain points that do not belong to the overall skyline.</p><p>We identify two interesting improvements of the basic algorithm. Firstly, our local skyline computation algorithm is threshold-based. Let t be the threshold value at the end of the local skyline computation at the initiator. Based on Observation 5, the threshold value indicates that there is a local skyline point p sky that dominates all points with f (p) values larger that the threshold t. At the end of the local skyline computation the threshold value corresponds to the point with the minimum threshold value, i.e. the highest pruning capability. Since the data is horizontally partitioned over the super-peers the local skyline point p sky dominates all points with a f (p) value larger that the threshold t of all super-peers. Therefore, the t value is attached to the query and is used to further reduce the computation and communication cost, so that the threshold value is propagated to the super-peers and used as an initial threshold value. Consider for example, a super-peer holding points that based on the queried subspace lie near the maximum corner. If there is a small initial threshold value, the local subspace skyline computation ends immediately without returning any points, otherwise the local subspace skyline points are computed and sent back to P init . Thus, the super-peer P init first executes the local subspace skyline computation to obtain an initial value for t, and then the query is forwarded to other super-peers.</p><p>A straightforward variation of the above approach is to compute and refine the threshold on each super-peer that is processing the query, instead of forwarding P init 's fixed threshold value. Intuitively, by progressively lowering the threshold value, the pruning capability of the query would be increased at each forwarding step. This approach requires that the query is propagated only after the super-peer has finished the local skyline computation.</p><p>A second improvement applies to the merging phase, which can be performed progressively during query evaluation. Instead of forwarding all results back to P init , each super-peer merges the results of its neighbors, and forwards the merged result back to P init . The benefit is twofold. The transferred data is reduced and a time-consuming centralized merging phase is avoided.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Variant</head><p>To summarize, in Table <ref type="table" target="#tab_2">2</ref> we present our variants of the basic SKYPEER based on two major subspace skyline computation optimization criteria:</p><p>1. Threshold propagation: (i) Fixed Threshold: P init calculates its threshold t for q(U, t) and forwards the threshold value to all super-peers. (ii) Refined Threshold: P init calculates and sends its threshold to its neighboring super-peers, which do not forward it immediately to other super-peers, but rather they first compute the subspace skyline, calculate the new threshold t , and then forward q(U, t ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Merging strategy: (i) Fixed Merging at P init :</head><p>In this approach, all super-peers forward their computed subspace skyline back to P init , and P init is responsible for merging the results and computing the resulting subspace skyline for q(U ). (ii) Progressive Merging: Each super-peer merges the results it receives with its locally computed subspace skyline, before sending the results back to the super-peer from which it originally received the query.</p><p>We now introduce the SKYPEER algorithm, which runs on each super-peer SP i . A subspace skyline query q(U ) is posed by the initiator super-peer P init . The initiator superpeer first computes the skyline on its local ext-skyline ∪ ext-SKY Di (i = 0..DEG p ). This results in a threshold value t, which based on Observation 5 can be used to prune out points that cannot belong to the result of the skyline query. The threshold value is attached to the query q(U ) that becomes q(U, t) before it is forwarded to SP init 's neighbors at super-peer level. Each super-peer receiving the query, forwards it to its neighboring super-peers and executes a local threshold-based subset skyline calculation on its set of local ext-skyline points. If the RT*M variants are employed, then before forwarding the query, SP i computes the skyline on its local ext-skyline which results in a refined threshold value t (or in worst case t = t) that is attached to the query before it is send to the neighboring super-peers. The results are routed back to P init . If one of the *TPM variants is employed, SP i first merges the results it receives, before forwarding them to the peer from which it received the query.</p><p>Correctness of the algorithm: Observation 4 guarantees that there are no false negatives caused by the preprocessing phase. Observation 5 ensures that there are no false negatives during the local skyline computation and the merge phase, in contrast to the domination test that ensures that there are no false positive. Since there are no false negatives nor false positives, SKYPEER computes the exact subspace skyline results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 3 SKYPEER on super-peer SP i</head><p>1: Input: mode (FTFM, FTPM, RTFM, RTPM) Query q on subspace U with threshold t (q(U, t)) Peer from which q was received (SP q ) 2: L N ← list of all neighbors except SP q 3: if (mode ∈ {RTFM,RTPM}) or (SP i = P init ) then end if 20: end for 21: send(SP q , SKY U0 )</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.">Pre-processing Phase</head><p>In the pre-processing phase, each peer P i calculates its own ext-skyline ext-SKY Di in the original space D and sends it to the associated super-peer. Despite the fact that any of the existing centralized skyline algorithms may be applied to calculate the ext-skyline, if the domination test is replaced by the ext-domination definition, in our example we assume that Algorithm 1 is used.</p><p>The task of the super-peer is to merge the local extskyline of the individual peers to one result set that constitutes the ext-skyline of space D with respect to the dataset on the super-peer and its associated peers. Algorithm 2 merges the lists and prunes out those points of a peer P i that are ext-dominated by points of another peer P j .</p><p>We illustrate the details of peer pre-processing by means of an example. In Figure <ref type="figure" target="#fig_1">2</ref>, three peers (P A , P B , P C ) assigned to super-peer SP A and their local datasets are shown. The dimensionality of the dataset is 4. Each peer computes its local ext-skyline in the original space. The points added to the result set due to the ext-skyline definition are grey shaded. For instance, four of the five points of P A are skyline points, while A3 is included as an ext-skyline point. Similarly, for P C the skyline point is C4, while the extskyline points are C4 and C5.</p><p>In the case that a new peer P J joins the network, it is associated with a super-peer using the basic bootstrapping Extended Skyline (sorted by f(p)) Super-peer Level</p><formula xml:id="formula_4">SP A P A P B P C Peer Level X Y Z W A1 2 2 2 2 A2 1 3 2 3 A3 1 3 5 4 A4 2 3 2 1 A5 5 2 4 1 X Y Z W B1 3 1 1 3 B2 4 5 4 6 B3 2 3 3 3 B4 1 2 3 4 B5 5 5 5 5 X Y Z W C1<label>5</label></formula><formula xml:id="formula_5">X Y Z W A2 1 3 2 3 A3 1 3 5 4 A4 2 3 2 1 A5 5 2 4 1 f(p) 1 1 1 1 A1 2 2 2 2 2 X Y Z W B1 3 1 1 3 B4 1 2 3 4 B3 2 3 3 3 f(p) 1 1 2 X Y Z W C4 1 1 3 4 C5 6 6 6 4 f(p) 1 4</formula><p>Local Data protocol. If the super-peer has already executed an extskyline computation, so it has available a list of ext-skyline results of all other associated peers, the ext-skyline of P J must be merged with the existing ext-skyline at the superpeer. Notice that this merging is performed incrementally, i.e. there is no need to process again all the lists of extskyline points from all associated peers, so the additional processing cost of peer joins is very low. We intend to address peer failures in our future work.</p><note type="other">Extended Skyline</note></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Experimental Evaluation</head><p>We evaluate the performance of the SKYPEER algorithm which was implemented in Java. The simulations run on 3GHz Pentium PCs and the data was stored locally. In order to be able to test the algorithms with realistic network sizes, we ran multiple instances of the peers on the same machine and simulated the network interconnection.</p><p>The P2P network topology used in the experiments consists of N sp interconnected super-peers in a random graph topology. We used the GT-ITM topology generator <ref type="foot" target="#foot_3">3</ref> to create well-connected random graphs of N sp peers with a user-specified average connectivity (DEG sp ). In our experiments we vary the network size (N p ) from 4000 to 80000 peers, while the number of super-peers is N sp = 5% × N p (for N p ≥ 20000 we used N sp = 1% × N p ). We also tested different DEG sp values ranging from 4 to 7.</p><p>We used synthetic data collections and query workloads. The dataset was horizontally partitioned evenly among the peers. We used two different datasets: uniform and clustered. The uniform dataset includes random points in a unit space. For the clustered dataset, each super-peer picks cluster centroids randomly and all associated peers obtain points, the coordinates of which follow a Gaussian distribution on each axis with variance 0.025, and a mean equal to the corresponding coordinate of the centroid. We conduct experiments varying the dimensionality (5-10) and the  cardinality (1M-20M points) of the dataset. Given a query dimensionality, all dimension subsets have uniform probability to be requested. We generate 100 queries, and for each query a super-peer initiator is randomly selected. We measure the average: (i) skyline query processing computational time, (ii) total time (including network delay), and (iii) volume of transferred data, for all queries. Unless mentioned explicitly, we use the following default values: d = 8, k = 3, DEG sp = 4, N p = 4000, each peer holds 250 points and the dataset is uniform.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.">Pre-processing Statistics</head><p>The smaller the size of the ext-skyline, the larger the savings that we obtain in the pre-processing step. In the first experiment we consider a uniformly distributed data set over 4000 peers, while varying d. Figure <ref type="figure" target="#fig_3">3</ref>(a) illustrates the percentage of the points that belong to the ext-skyline. The peer selectivity (SEL p ) indicates the portion of the data points transmitted from the peers to the super-peers, i.e. the average number of local ext-skyline points. The super-peer selectivity (SEL sp ) represents the average number of extskyline points for each super-peer as a percentage of all the data points. We also show the percentage of data points that are ext-skyline points at a super-peer, in comparison to the total number of ext-skyline points of the associated peers, denoted (SEL sp /SEL p ).</p><p>For example for d = 7 dimensions, 59% of the data points are transmitted to the super-peers, while only a 22% actually belong to the union of all local ext-skylines at super-peer level. Clearly, for smaller values of data dimensionality, only a small portion of the points are used, thus we can prune a significant number of points during the preprocessing step. As only the ext-skyline points are stored in the super-peers, the number of data points processed at query time is a small percentage of the whole dataset, keeping our approach feasible.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.">Scalability Study</head><p>In Figure <ref type="figure" target="#fig_3">3</ref>(b), we present the performance of the SKYPEER framework in terms of computational time, neglecting network delays. The results show that the refined threshold variants (RT*M) are more costly than the fixed threshold variants (FT*M), however they are still more efficient than the naive one, because of threshold usage. Further, progressive merging (*TPM) is faster than fixed merging (*TFM) at the initiator, because the computational cost to merge all N sp lists at the initiator is higher compared to the total cost incurring at intermediate super-peers.</p><p>The plot in Figure <ref type="figure" target="#fig_3">3</ref>(c) illustrates the total response time taking into account the network delay, which depends on the size of transmitted data. We assume 4KB/sec as the network transfer bandwidth on each connection. This chart shows that progressive merging (*TPM) keeps the total response time low. In all cases the four variants of SKYPEER constantly outperform the naive algorithm. In Figure <ref type="figure" target="#fig_3">3(d)</ref>, the volume of the messages (in KB) is illustrated as a function to the dataset dimensionality for the uniform dataset. The query dimensionality varies varies from 2 to 3 and two different variations of SKYPEER are examined. The volume of the messages exchanged to retrieve the skyline result depends mainly on the merging strategy. We present the results of FTFM and FTPM as representative ones. Obviously progressive merging reduces the volume of data transferred in the network.</p><p>In the next series of experiments we examine the proposed method's scaling features with regards to query di-  mensionality. In order to study SKYPEER's behavior for larger networks, we increased the network size from 4000 to 12000 peers. Figure <ref type="figure" target="#fig_3">3</ref>(e) compares the performance of the fixed (FTFM) against the refined (RTFM) threshold variants for fixed merging. We measured the computational time needed for calculating the subspace skyline, for different query dimensionality values ranging from 2 to 4. We conclude that the fixed threshold variants perform better than the refined threshold ones, however this is due to the uniform dataset employed, which does not allow the exploitation of refining the threshold value. Then, in Figure <ref type="figure" target="#fig_3">3</ref>(f), we present a performance comparison between SKYPEER and the naive algorithm for different network sizes. The vertical axis represents the relative performance of SKYPEER as compared to the naive approach. It is clear that SKYPEER always outperforms naive, and for large networks (12000 peers) the FTPM variant is 17 times faster than naive.</p><p>Thereafter, we examined the performance of our algorithm depending on the network topology, in terms of participating peers number and connectivity degree. We tested the scalability features of SKYPEER with k for a network of 12000 peers (Figure <ref type="figure" target="#fig_5">4(a)</ref>). We measured the total response time of all algorithms for different query dimension-ality. It is obvious that progressive merging scales much better with k, providing an efficient solution as compared to the naive one.</p><p>Figures <ref type="figure" target="#fig_5">4(b</ref>) (computational time) and 4(c) (total time) show the comparative performance of SKYPEER variants against naive, when the network size is increased from 20000 to 80000 peers. The improvement factor of progressive merging (*TPM) over the naive approach increases with network size, proving the scalability of our approach.</p><p>In the next experiment, we study how different superpeer connectivity degrees (DEG sp ) affect the performance of SKYPEER. In Figures <ref type="figure" target="#fig_5">4(d</ref>) and 4(e), we experiment with a network of 4000 peers with DEG sp varying from 4 to 7. We conclude that even though the computational time is not affected by DEG sp , the total time is reduced when DEG sp increases. This is because higher DEG sp values, result in smaller routing paths, hence smaller network transfer costs.</p><p>In Figure <ref type="figure" target="#fig_5">4</ref>(f), we increased the number of points per peer (n/N p ) from 250 to 1000. We notice that the progressive merging variants clearly outperform the fixed merging ones, as the number of points per peer increases.</p><p>We also evaluate SKYPEER on a clustered dataset and the results are shown in Figure <ref type="figure" target="#fig_5">4</ref>(g). In this experiment, we generated a clustered 3-dimensional dataset and we used k = 3, in order to study the effect of subspace skylines on a clustered subspace. We use global skyline queries to avoid distortion of the clustered data distribution through the projection. As expected fixed threshold variants perform better w.r.t. computational time, however when it comes to total time, the refined threshold variants are better. This experiments indicates the usefulness of RT*M variants, when the dataset is clustered, and when the first priority is to keep the network load low. In a similar experiment, in Figure <ref type="figure" target="#fig_5">4</ref>(h), we see that RT*M variants perform better also for increasing dataset dimensionality values. Again the importance of refining threshold is elevated, when the dataset is clustered.</p><p>As expected the fixed threshold method achieves a fast overall response time. This is because, ideally, the query will reach all super-peers in the minimum possible time. Then they can immediately start the local skyline processing and return their results. It was expected that the refined threshold would lead to query pruning capability improvements, and therefore to reduce processing costs in superpeers for skyline computation and communication costs. Unexpectedly in most experiments there is no noticeable benefit. This is mainly because of the nature of the synthetic dataset, i.e. uniform dataset distributed uniformly among the peers. However in the case of clustered datasets, we see that threshold refinement leads to performance gains.</p><p>Progressive merging reduces communication costs, since some candidate skyline points are pruned out earlier. The computational cost is further reduced through the progressive merging since the fixed merging at P init is very costly because of the high number of elements. Thus, the computational cost of merging is distributed over many superpeers, instead of only to P init and thus a potential bottleneck at P init is avoided.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Conclusions</head><p>In this paper we addressed the issue of subspace skyline computation in a P2P setting. To the best of our knowledge this is the first paper to confront the combination of (i) large degree of data distribution and (ii) subspace skyline queries. We propose a threshold based algorithm, called SKYPEER, which forwards the skyline query requests among peers, in such a way that the amount of data to be transferred is significantly reduced. Additionally, the extended skyline operator, which is applicable to all skyline algorithms, provides an effective solution for retrieving a superset of all subspace skyline results. Finally our experimental evaluation shows that our algorithm, SKYPEER, is much more efficient than the baseline approach, both in terms of computational and communication costs. In our future work we will investigate how churn, in particular peer failure, affects the performance of SKYPEER.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. Skyline examples.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. Peer pre-processing example.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>Scalability with k, for FTFM and RTFM SKYPEER's relative performance to naive</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. Comparison of SKYPEER variants for different data dimensionality values.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>SKYPEER vs. naive, clustered dataset</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4. Scalability study of SKYPEER for different k, N p , DEG sp and number of points per peer.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 . Overview of symbols.</head><label>1</label><figDesc>These peers are called super-peers SP i</figDesc><table><row><cell>Symbols</cell><cell>Description</cell></row><row><cell>d</cell><cell>Data dimensionality</cell></row><row><cell>k</cell><cell>Query dimensionality</cell></row><row><cell>n</cell><cell>Cardinality of the dataset</cell></row><row><cell>S</cell><cell>Dataset</cell></row><row><cell>S i</cell><cell>Partition of dataset (i = 1..N p )</cell></row><row><cell>N p</cell><cell>Number of peers</cell></row><row><cell>N sp</cell><cell>Number of super-peers (N sp &lt;&lt; N p )</cell></row><row><cell>DEG p</cell><cell>Degree of simple peer</cell></row><row><cell>DEG sp</cell><cell>Degree of super-peer (DEG sp &lt; DEG p )</cell></row><row><cell>SKY U</cell><cell>Skyline of subspace U</cell></row><row><cell>SKY Ui</cell><cell>Skyline of subspace U on super-peer SP i</cell></row><row><cell>ext-SKY U</cell><cell>Extended skyline of U</cell></row><row><cell cols="2">ext-SKY Ui Extended skyline of U on super-peer SP i</cell></row><row><cell>t</cell><cell>Threshold</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Algorithm 1</head><label>1</label><figDesc>Local subspace skyline computation 1: Input: U denotes the query dimensions 2: SKY U ← {∅}</figDesc><table><row><cell>6:</cell><cell>if p is not dominated by any point in SKY U based</cell></row><row><cell></cell><cell>on U then</cell></row><row><cell>7:</cell><cell>remove from SKY U the points dominated by p</cell></row><row><cell>8:</cell><cell>SKY U ← SKY U ∪ {p}</cell></row><row><cell>9:</cell><cell>threshold ← min pi∈SKYU (dist U (p i ))</cell></row><row><cell>10:</cell><cell>end if</cell></row><row><cell>11:</cell><cell></cell></row></table><note><p>3: threshold ← MAX INT 4: p ← next point based on f (p) 5: while (f (p) &lt; threshold) do</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Algorithm 2</head><label>2</label><figDesc>Super-peer merging of subspace skylines 1: Input: U denotes the query dimensions 2: SKY U ← {∅} 3: threshold ← MAX INT 4: SKY U1 ...SKY UNsp the super-peers' set of local subspace skyline points 5: SKY Us ← the list with the minimum first element 6: p ← next point based on SKY Us 7: while (f (p) &lt; threshold) do threshold ← min pi∈SKYU (dist U (p i ))</figDesc><table><row><cell>8:</cell><cell>if p is not dominated by any point in SKY U on sub-</cell></row><row><cell></cell><cell>space U then</cell></row><row><cell>9:</cell><cell>remove from SKY U the points dominated by p</cell></row><row><cell>10:</cell><cell>SKY U ← SKY U ∪ {p}</cell></row><row><cell>11:</cell><cell></cell></row><row><cell>12:</cell><cell>end if</cell></row><row><cell>13:</cell><cell>SKY Us ← the list with the minimum first element</cell></row><row><cell>14:</cell><cell>p ← next point based on SKY s</cell></row><row><cell cols="2">15: end while</cell></row><row><cell cols="2">16: return SKY U</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 2 . Variants of the basic SKYPEER.</head><label>2</label><figDesc></figDesc><table><row><cell></cell><cell>Mnemonic</cell></row><row><cell>Fixed Threshold Fixed Merging</cell><cell>FTFM</cell></row><row><cell>Fixed Threshold Progressive Merging</cell><cell>FTPM</cell></row><row><cell>Refined Threshold Fixed Merging</cell><cell>RTFM</cell></row><row><cell>Refined Threshold Progressive Merging</cell><cell>RTPM</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head></head><label></label><figDesc>SKY U0 ← mergeResults(SKY Uj , SKY U0 )</figDesc><table><row><cell>4:</cell><cell>SKY U0 ← compute local skyline</cell></row><row><cell>5:</cell><cell>t ← ref ineT hreshold(t)</cell></row><row><cell cols="2">6: end if</cell></row><row><cell cols="2">7: for n i ∈ L N do</cell></row><row><cell>8:</cell><cell>send(n i , q(U, t))</cell></row><row><cell cols="2">9: end for</cell></row><row><cell cols="2">10: if mode ∈ {FTFM,FTPM} then</cell></row><row><cell>11:</cell><cell>SKY U0 ← compute local skyline</cell></row><row><cell cols="2">12: end if</cell></row><row><cell cols="2">13: for j = 1 to |L N | -1 do</cell></row><row><cell>14:</cell><cell>receive SKY Uj</cell></row><row><cell>15:</cell><cell>if mode ∈ {FTPM,RTPM} then</cell></row><row><cell>16:</cell><cell></cell></row><row><cell>17:</cell><cell>else</cell></row><row><cell>18:</cell><cell>send(SP q , SKY Uj )</cell></row><row><cell>19:</cell><cell></cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>1-4244-0803-2/07/$20.00 ©2007 IEEE.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_1"><p>Notice that even though the initiator can be a simple peer, we use P init to refer to the super-peer responsible for the simple peer.1-4244-0803-2/07/$20.00 ©2007 IEEE.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_2"><p>The right upper corner of the universe.1-4244-0803-2/07/$20.00 ©2007 IEEE.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_3"><p>Available at: http://www.cc.gatech.edu/projects/gtitm/ 1-4244-0803-2/07/$20.00 ©2007 IEEE.</p></note>
		</body>
		<back>

			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>* Partially funded by the PENED 2003 Programme of the EU and the Greek General Secretariat for Research and Technology. † Partially funded by the PENED 2003 Programme of the EU and the Greek General Secretariat for Research and Technology.</p><p>‡ Supported by the Marie Curie Intra-European Fellowship.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Efficient distributed skylining for web information systems</title>
		<author>
			<persName><forename type="first">W.-T</forename><surname>Balke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Gunzer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Zheng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of EDBT&apos;04</title>
		<meeting>EDBT&apos;04</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="256" to="273" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Progressive distributed top-k retrieval in peer-to-peer networks</title>
		<author>
			<persName><forename type="first">W.-T</forename><surname>Balke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Nejdl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Siberski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Thaden</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ICDE&apos;05</title>
		<meeting>ICDE&apos;05</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Computing the skyline without scanning the whole sky</title>
		<author>
			<persName><forename type="first">I</forename><surname>Bartolini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Ciaccia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Patella</surname></persName>
		</author>
		<author>
			<persName><surname>Salsa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CIKM&apos;06</title>
		<meeting>CIKM&apos;06</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The skyline operator</title>
		<author>
			<persName><forename type="first">S</forename><surname>Borzsonyi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Kossmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Stocker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedigns of ICDE&apos;01</title>
		<meeting>eedigns of ICDE&apos;01</meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="421" to="430" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Skyline with pre-sorting</title>
		<author>
			<persName><forename type="first">J</forename><surname>Chomicki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Godfrey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Gryz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Liang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ICDE&apos;03</title>
		<meeting>ICDE&apos;03</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="717" to="719" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Constrained subspace skyline computation</title>
		<author>
			<persName><forename type="first">E</forename><surname>Dellis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Vlachou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Vladimirskiy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Seeger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Theodoridis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CIKM&apos;06</title>
		<meeting>CIKM&apos;06</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">DESENT: Decentralized and distributed semantic overlay generation in P2P networks</title>
		<author>
			<persName><forename type="first">C</forename><surname>Doulkeridis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Nørvåg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Vazirgiannis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Journal on Selected Areas in Communications (J-SAC)</title>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
	<note>To appear in</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Processing rank-aware queries in P2P systems</title>
		<author>
			<persName><forename type="first">K</forename><surname>Hose</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Karnstedt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Koch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Sattler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Zinn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of DBISP2P&apos;05</title>
		<meeting>DBISP2P&apos;05</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="238" to="249" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Processing relaxed skylines in PDMS using distributed data summaries</title>
		<author>
			<persName><forename type="first">K</forename><surname>Hose</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Lemke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K.-U</forename><surname>Sattler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CIKM&apos;06</title>
		<meeting>CIKM&apos;06</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Skyline queries against mobile lightweight devices in MANETs</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Jensen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B.-C</forename><surname>Ooi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ICDE&apos;06</title>
		<meeting>ICDE&apos;06</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Shooting stars in the sky: an online algorithm for skyline queries</title>
		<author>
			<persName><forename type="first">D</forename><surname>Kossmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Ramsak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Rost</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of VLDB&apos;02</title>
		<meeting>VLDB&apos;02</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="275" to="286" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">KLEE: a framework for distributed top-k query algorithms</title>
		<author>
			<persName><forename type="first">S</forename><surname>Michel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Triantafillou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Weikum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of VLDB&apos;05</title>
		<meeting>VLDB&apos;05</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="637" to="648" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Super-peerbased routing and clustering strategies for RDF-based P2P networks</title>
		<author>
			<persName><forename type="first">W</forename><surname>Nejdl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Wolpers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Siberski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Schmitz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Schlosser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Brunkhorst</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Loeser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of WWW&apos;03</title>
		<meeting>WWW&apos;03</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Progressive skyline computation in database systems</title>
		<author>
			<persName><forename type="first">D</forename><surname>Papadias</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Tao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Seeger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Database Systems</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="41" to="82" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Catching the best views of skyline: A semantic approach based on decisive subspaces</title>
		<author>
			<persName><forename type="first">J</forename><surname>Pei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ester</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Tao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Procedings of VLDB&apos;05</title>
		<meeting>edings of VLDB&apos;05</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="253" to="264" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Efficient progressive skyline computation</title>
		<author>
			<persName><forename type="first">K</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Eng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B.-C</forename><surname>Ooi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of VLDB&apos;01</title>
		<meeting>VLDB&apos;01</meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="301" to="310" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">SUBSKY: Efficient computation of skylines in subspaces</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Tao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Xiao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pei</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ICDE&apos;06</title>
		<meeting>ICDE&apos;06</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Parallelizing skyline queries for scalable distribution</title>
		<author>
			<persName><forename type="first">P</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">Y</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">E</forename><surname>Abbadi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of EDBT&apos;06</title>
		<meeting>EDBT&apos;06</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="112" to="130" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Designing a super-peer network</title>
		<author>
			<persName><forename type="first">B</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Garcia-Molina</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ICDE&apos;03</title>
		<meeting>ICDE&apos;03</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page">49</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Efficient computation of the skyline cube</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of VLDB&apos;05</title>
		<meeting>VLDB&apos;05</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="241" to="252" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
