<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Workflow Recovery</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Johann</forename><surname>Eder</surname></persName>
							<email>feder@ifi.uni-klu.ac.at</email>
							<affiliation key="aff0">
								<orgName type="department">Institut f체r Informatik Universit채t</orgName>
								<address>
									<settlement>Klagenfurt</settlement>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Walter</forename><surname>Liebhart</surname></persName>
							<email>walterg@ifi.uni-klu.ac.at</email>
							<affiliation key="aff0">
								<orgName type="department">Institut f체r Informatik Universit채t</orgName>
								<address>
									<settlement>Klagenfurt</settlement>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Workflow Recovery</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">3BD2208C932D423443487B0FF37DF2D3</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T10:13+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Workflow management systems (WFMSs) more and more become the basic technology for organizations to perform their daily business processes (workflows). A consistent and reliable execution of such processes is crucial for all organizations. We claim that this can only be achieved by integrating transactional features -especially "workflow transactions" -into WFMSs. Based on this idea, we discuss in detail advanced workflow recovery concepts which are necessary for the reliable and consistent execution of business processes in the presence of failures and exceptions. Additionally, we distinguish between different workflow types and present adequate recovery concepts for each of them.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Business processes typically consist of multiple activities which have to be performed in a valid sequence. Activities themselves, represent any unit of work (e.g., a specific application program, a phone call) which may be characterized as heterogeneous, autonomous and / or distributed. Workflow management systems (WFMSs) are expected to control the execution of such business processes. In this sense, a WFMS represents a cooperative information system which handles the co-ordination and co-operation between the activities, constituting a business process. Within the process each activity has a more or less strong influence on the overall success of the process. Severe problems may arise, if failures occur (e.g. an activity does not behave in the expected manner). WFMSs should be able to react flexible on failures and they should ensure a correct and reliable execution of processes in the presence of concurrency and failures. But as has been pointed out in <ref type="bibr" target="#b10">[11]</ref>, almost none of the current commercial WFMSs support such a functionality. Similar problems have been discussed in the database area where the idea of transactions has solved many of the problems. Unfortunately, these concepts are not directly applicable in the workflow domain but they offer at least valuable ideas and concepts which are relevant for WFMSs. To guarantee reliable and consistent workflow executions the introduction of some kind of transactions in WFMSs is unavoidable. Because of the differences to traditional database transactions and also to most of the advanced transaction models we call them workflow transactions. In contrast to advanced transaction models, workflow transactions focus on issues of consistency from the business point of view rather than from a database point of view. A motivating example for the introduction of workflow transactions into WFMSs is illustrated in figure <ref type="figure">1</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 1. Motivation for Workflow Transactions</head><p>This example stresses, how complex a rather simple workflow can become by trying to handle possible failures explicitly in the process description. The workflow on the right side within the example represents the simple workflow on the left side extended with possible failure paths. Of course, it is neither possible nor intended by most workflow designers to model all failures but the process description will in any case become complex very soon -especially if the original process is more complex. By introducing workflow transactions into WFMSs this problem can be minimized considerably because workflow transactions support the automation of failure handling during runtime (this means that the right side in figure <ref type="figure">1</ref> is computed automatically during runtime).</p><p>Within this paper we present a detailed overview of workflow recovery concepts which are necessary within a transaction based workflow execution. The necessity and advantages of workflow transactions has already been discussed in <ref type="bibr" target="#b7">[8]</ref> by introducing the workflow model WAMO.</p><p>Based on this model we point out relevant recovery concepts and we also introduce recovery concepts which go beyond the model. In section 2 the Workflow Activity MOdel WAMO is briefly discussed and related work is presented. Section 3 points out specific workflow characteristics which influence workflow recovery. In section 4 we discuss workflow recovery concepts in detail. Section 5 describes possible realization concepts for workflow recovery and section 6 concludes the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Current Approaches</head><p>In this section we present a short overview of WAMO since the model is used to illustrate recovery concepts. Additionally, we discuss related work where we mention relevant approaches in the area of transaction based workflows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.">The Workflow Activity Model WAMO</head><p>The workflow activity model WAMO <ref type="bibr" target="#b7">[8]</ref> enables the workflow designer to easily model complex business processes in a simple and straightforward manner. The basic idea is to decompose a complex business process into smaller work units (activities) which themselves consist of ideally preexisting tasks. Additionally, simple control structures enriched by transactional features allow the definition of failure-tolerant processes.</p><p>WAMO's metamodel not only incorporates traditional workflow modeling features but also transactional features. A workflow typically consists of multiple activities, data objects and agents. Activities represent any abstract description of work units in the business process. Data objects (e.g. complex forms) represent the information which is exchanged between activities. An agent is either a human or any computer system which is responsible for the execution of an activity.</p><p>WAMO supports hierarchical structuring of workflows by using complex activities which consist of other (sub-) activities, representing subprocesses. Furthermore, a certain activity may take part in several other activities, especially several times in an other activity which enhances re-usability. New workflows can easily be composed by re-using activities. Additionally, complex activities support the modeling of control structures (behavior) over activities. Up to now, WAMO offers the following simple but powerful control structures: sequence, parallel, nesting, ranked choice and free choice. The choice constructs enable the modeling of alternative (contingency) activities. An alternative activity is executed only if the immediate previous activity fails. In contrast to a ranked choice, the execution order in a free choice list is computed dynamically (at run time). Elementary activities -called tasks -are activities which are not further decomposable. From the workflow designers point of view, they are black boxes which finally perform the real work within a workflow. For the rest of our discussion we do only distinguish between tasks and activities if it is really necessary. If we use the term activity, it should be clear from the context whether a complex activity is meant or an elementary task or both.</p><p>At run time activities are associated with unique identifiers and the previous described control structures define the execution order of the activities. Activities and tasks have different execution states during execution (e.g. failed, compensated) and, additionally, they are able to react on specific events (e.g start, compensate). The correct execution order of activities is fully under the control of an advanced transaction manager. The underlying advanced transactional features are very easy to handle by the workflow designer during process specification, as for example: by control structures: Control structures are simple but expressive mechanisms to handle activity coordination requirements (intra-workflow dependencies). by transaction specific features: Tasks can be specified more detailed by the storno type and force parameter. Additionally, activities which are not essential for a successful termination of the corresponding parent activity can be defined as non vital.</p><p>WAMO's transactional features focus primarily on the consistency of business processes in contrast to similar features within advanced transaction models, as for example in <ref type="bibr" target="#b22">[23,</ref><ref type="bibr" target="#b4">5]</ref>, which focus on the consistency of (multi-) database systems.</p><p>The storno type and force parameters of a task are necessary for workflow recovery (i.e., for compensation). With the storno type the workflow designer specifies how a specific task behaves in case of a compensation. There are four possibilities: Type none (1) means, that the committed task does not need to be compensated because it is not necessary from an application point of view. Type undoable (2) means that a committed task can be undone by a corresponding compensation task without any side-effects, in the sense of an inverse operation. Type compensatable (3) means that the compensation of a task leads to some sideeffects (e.g. money transfer and back transfer with transfer fees). Type critical (4) means that a task which has already terminated cannot be undone or compensated afterwards because its effects are irreversible within the current context (e.g., drilling a hole, mailing a sensitive information).</p><p>Some tasks in real world situations are always expected to terminate successfully (e.g., open an account, print a document) -although it may take several attempts. Therefore WAMO offers the task specific parameter force. Forcable tasks simplify recovery actions in case of a failure because they can be repeated and re-executed several times (specified by the workflow designer) until a positive acknowledgment is achieved -otherwise, process execution stops for manual intervention.</p><p>Another important transaction relevant feature is the concept of vital and non vital activities in order to specify the importance of a specific subactivity for its parent activity. If a non vital activity fails, the workflow can continue and make forward progress without any compensation actions. Normally, all activities within a workflow are essential and therefore vital for the parent activity. In any case, if a vital activity fails then the compensation mechanism is activated (this concept is explained in detail in section 4).</p><p>Most of the previous mentioned concepts are currently integrated into our prototype WFMS Panta Rhei <ref type="bibr" target="#b6">[7]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.">Related Work</head><p>The integration of transactions into workflows was motivated by research efforts concerning database transaction models for advanced applications, as for example summarized in <ref type="bibr" target="#b9">[10]</ref>. As stated in <ref type="bibr" target="#b1">[2]</ref> most of these models are developed from a database point of view, where preserving the consistency of the shared database by using transactions is the main objective. A basic fact behind these models is the attempt to use traditional transactions as building blocks and the focus on specific applications with sometimes rather restrictive transactional features (e.g. rigid compensation policies in <ref type="bibr" target="#b25">[26]</ref> which restrict the applicability in the workflow domain. Therefore the concepts of advanced transaction concepts cannot be applied directly.</p><p>Major work in expanding advanced transaction models for workflow requirements was done in the area of transactional workflows <ref type="bibr" target="#b23">[24,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b3">4]</ref>. Nevertheless, this work still is mainly influenced by a database point of view which leads to rather restrictive models. Modern WFMSs have to support complex, long-running business processes in a heterogeneous and/or distributed environment. As has been pointed out in <ref type="bibr" target="#b10">[11]</ref> most of these systems lack the ability to ensure correctness and reliability of the workflow execution in the presence of failures. However, currently there are several approaches to overcome this shortcoming. In the METEOR project <ref type="bibr" target="#b17">[18]</ref> a computational model for workflows is presented which captures the behavior of both, transactional and non-transactional tasks of different type. Additionally, two languages have been designed to address the important issues of inter-task dependencies, data formatting, data exchange, error handling, and recovery. Another example is IBM's Exotica project <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b2">3]</ref> which aims at exploring several research areas from advanced transaction management concepts to client/server architectures and mobile computing within the context of workflow management. The goal is to incorporate at least some of the results into the commercial WFMS IBM Flowmark <ref type="foot" target="#foot_2">1</ref> .</p><p>Concerning workflow recovery there are only a few research activities to name. A first discussion was presented in <ref type="bibr" target="#b14">[15]</ref>. Additionally, the necessity of workflow recovery concepts is slightly addressed in <ref type="bibr" target="#b10">[11]</ref> and <ref type="bibr" target="#b15">[16]</ref>. More specific work in this area is presented in <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b2">3]</ref>. Especially, the concept of business transactions, introduced in <ref type="bibr" target="#b18">[19]</ref>, describes some basic workflow recovery ideas in detail (above all partial backward recovery). Nevertheless, there exists no broad discussion about workflow recovery and this paper may be seen as a first deeper step into this important workflow area.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Workflow Characteristics influencing Workflow Recovery</head><p>In order to discuss workflow recovery concepts in detail it is first necessary to analyze the areas which influence the recovery process. First, we believe that it is not possible to present a general solution for workflow recovery because there exist different workflow types which demand different recovery approaches. Therefore, we present very briefly a workflow classification architecture which helps us to identify possible workflow types. Second, recovery actions are only necessary because of the existence of failures and exceptions. Therefore, it is absolutely necessary to analyze at least the most important failure types which may occur within workflow execution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Workflow Classification</head><p>Up to now there exists no general accepted classification framework for workflows (processes) and workflow systems. Since every classifications focuses on some specific aspects, it will always be difficult and probably impossible to give a commonly accepted classification. In <ref type="bibr" target="#b10">[11]</ref> workflows are characterized along a continuum from human-oriented to system-oriented workflows. In the first case, a workflow is mainly performed by human agents. The WFMS is expected to support the coordination and collaboration of humans who are responsible for consistent workflow results. In the second case, workflows are characterized as highly automated and computation-intensive processes which involve the integration of heterogeneous, autonomous and / or distributed information systems. Since human influence is very limited, system-oriented workflows must include software for various concurrency control and recovery techniques to ensure consistency and reliability.</p><p>Another classification distinguishes between ad hoc, administrative, and production workflow <ref type="bibr" target="#b20">[21]</ref>. The main differences between these types comprise (1) repetitiveness and predictability of workflows and tasks, (2) how the workflow is controlled (e.g., human controlled or automated) and (3) requirements for WFMS functionality. According to the previous classification ad-hoc and administrative workflows are closer to the human-oriented end of the spectrum whereas production workflows (e.g. trip reservation, loan requests, insurance claims or telecommunication processes) represent more complex business processes which communicate with different information systems and are hence closer to the system-oriented end of the continuum.</p><p>As we will see at the end of this subsection, our classification approach <ref type="bibr" target="#b8">[9]</ref> leads to similar results but it points out some specific features which are later relevant within the recovery concepts. The classification is based on two pillars: the static and the dynamic aspects of a workflow.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.1">Static Aspects of a Workflow</head><p>The static aspects of a workflow comprise all components which can be extracted from a workflow metamodel. According to WAMO's metamodel <ref type="bibr" target="#b7">[8]</ref> a workflow essentially consists of activities, data objects and agents (refer to section 2.1.). We will now look more detailed at these components:</p><p>Activities: Activities -especially tasks -describe the real work items in a process. In a first step, we have to distinguish between manual and automatic (either interactive or non interactive) tasks. Manual tasks are performed mainly by human agents. This includes in particular the manual start and manual termination of tasks. The work which is performed within a manual task is more or less fully under the control of the human agent (e.g. making a phone call, writing a letter). Hence, the WFMSs support in performing this work is rather limited and in general reduced to provide the agent with appropriate standard tools (like a text processor). On the other side, automatic tasks can be much better supported by a WFMS in the sense that the system can start automatically a task, compute the next step in the process and so on. Interactive automatic tasks are associated with specific programs (software applications) which are executed after a responsible human agent has selected the task from his worklist. During task execution the agent communicates interactively with the associated program. As soon as the program terminates also the task reaches its termination state. Non interactive automatic tasks are specific batch programs which are fully executed under the control of the WFMS -the program is started automatically by the WFMS and executed completely without human interaction.</p><p>Data objects: Within a workflow different kinds of data -primarily depending on how much the WFMS knows about the semantics of the data -are relevant. We have to distinguish between data which is manipulated within tasks and data which is needed for process execution (scheduling, etc). Of course, these different kinds of data are not necessarily disjunctive (e.g., the amount of a loan in a loan request workflow is used within tasks but also for workflow scheduling in order to find the correct path in the process). More precisely, in a workflow application we find the following data types:</p><p>-Application (case) data: The application data is consumed and produced by the various tasks (applications) in a workflow. It is further reasonable to classify application data into structured, unstructured or semi-structured data in order to investigate how easy this type of data can be used for process specification. Based on this classification it is easy to conclude that structured data (e.g. formatted data in a form) is not only suitable for application specific usage but also for process definitions.</p><p>-Process data: Process data are necessary to define and control the execution of workflows. Typical examples are the state of tasks, the start time of a task and so on.</p><p>Agents: An important function of a WFMS is to assign tasks to agents who are eligible to carry them out. The modeling and definition of agents composes very simple but also very sophisticated approaches <ref type="bibr" target="#b5">[6]</ref>. Within our classification we distinguish only between human and machine agents.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.2">Dynamic Aspects of a Workflow</head><p>The execution of a workflow mainly comprises the answer to the following question: What (activity) has to be executed when, by whom and with which data? In <ref type="bibr" target="#b13">[14]</ref> these W-questions are termed as functional (what), behavioral (when), organizational (whom) and informational (which data) perspectives. We want to emphasize that the temporal execution order of the various activities within a workflow is a central topic. Based on this perception, we informally define a workflow as the definition and/or execution of correct activity-sequences. Such sequences can be defined as follows:</p><p>Ad hoc and without a corresponding formalism: Within this approach correct activity sequences are determined by human agents ad hoc during workflow execution (at run time). Additionally, we distinguish whether the correct sequences are defined with predefined activities or not. In the first case, a workflow is composed of already defined parts at run time while in the other case the agents have the possibility to define new activities (and hence workflows) during run-time.</p><p>This concept is also valid for WFMSs which are not based on activities but on agents (e.g. email based WFMSs). In this terminology each agent has to decide who should be triggered next in order to perform some work (which corresponds to an activity).</p><p>With a corresponding formalism: Valid activity sequences are defined during workflow modeling time (at build-time) by the workflow designer. Therefore most WFMSs offer corresponding modeling tools which allow the definition of business processes based on a special formalism. Different formalisms are discussed in <ref type="bibr" target="#b8">[9]</ref>. Main differences between the various formalisms depend (1) on the available process information and (2) on the access to (structured) application data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.3">Workflow Types</head><p>By investigating several workflow systems (and the processes they support) according to our classification, we identified at least two main types of workflows which we call document-oriented and process-oriented workflows.</p><p>Document-oriented workflows are primarily composed of manual tasks and unstructured or semistructured data elements (especially documents). Task ordering and coordination is either predefined roughly at build-time or on the fly during process execution. Hence, the execution of document-oriented processes is mainly controlled by the workflow participants. They decide when a specific task is performed, which task should be executed next (in case there is a set of potential successor tasks) and who should execute the next task. The requirements for WFMSs in this area are to support the coordination and collaboration of humans who are responsible for consistent execution results.</p><p>Process-oriented workflows are much more populated by automatic tasks which manipulate above all structured or semi-structured data objects. As the processes tend to be very complex, adequate formalisms are necessary to define them. WFMSs which handle such processes are expected to control and coordinate the execution of the tasks with little or no human intervention. Therefore, various features concerning robustness, concurrency and recovery are necessary to guarantee a reliable and consistent execution. Of course, these requirements also restrict the user flexibility in executing workflows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Failure and Exceptions</head><p>Many practical experiences have proven that the handling of failures and exceptions requires a lot of time and costs. Because of this reason, the adequate treatment of this problematic is a key success factor for cooperative information systems, especially for WFMSs. Since there are so many different types of failures we first identify potential failure sources and after that we give a summarizing classification of various failure classes.</p><p>Potential failure sources in a workflow comprise (1) workflow engine failures, (2) activity failures and (3) communication failures (see figure <ref type="figure">2</ref>). The goal of recovery now is to restore the "latest consistent" state of the system in order to resume process execution. This may be exactly the state at the time the failure occurred or the latest consistent state immediately before the failure but also a new consistent state after the failure. The first two cases can be handled by some kind of crash recovery. This means for example, that all worklists are brought into the same state as they had been at the time the failure occurred or into a previous consistent state (see also <ref type="bibr" target="#b19">[20]</ref>). The third case means that activities which had been active somewhere on a client at the time the failure occurred, may have terminated in the meantime. Such activities should not be aborted in case of a workflow engine failure. Instead crash recovery must be extended by some kind of forward recovery which brings the system into the new state. After updating the worklists, process execution can be continued. To reduce the amount of work in case of recovery after a workflow engine failure it is advisable to keep process relevant information within a database management system in order to use the recovery facility of the database. The prototype workflow system Panta Rhei <ref type="bibr" target="#b6">[7]</ref> is build on top of a DBMS which simplifies crash recovery treatment. The problem of distributed activities which are executed autonomously during a workflow engine failure is more precisely discussed in <ref type="bibr" target="#b0">[1]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Activity failures comprise failures within an activity.</head><p>Activity failures are the primary subject of this paper and are therefore discussed more precisely in the rest of this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Communication failures between the scheduler and ac-</head><p>tivities are the source of another type of failure within workflow execution. The coordinated execution of distributed activities demands a stable communication between scheduler and activities. If, for example, the scheduler starts an activity, then the scheduler wants to be informed about the result of this operation. Middleware-components, like TP-monitors <ref type="bibr" target="#b11">[12]</ref> support the handling of such requirements.</p><p>As stated before, within this paper we concentrate our discussion primarily on activity failures and to some extend on communication failures. For that purpose, we will now present very briefly the results of a failure classification we discussed in <ref type="bibr" target="#b7">[8]</ref>. There, two main classes of failures concerning activities have been identified: System failures and semantic failures.</p><p>System failures comprise information technology and application failures which lead to an abnormal termination of an activity (e.g. system breakdown, division by zero, deadlocks) -the activity aborts.</p><p>Semantic failures comprise exceptions within the business process (i.e. they are not caused by informa-tion technology) which lead to a negative (but not abnormal) termination of the activity (e.g., the activity hotel reservation fails, because the hotel is already over-booked, the hotel reservation is interrupted by the user). If an activity is involved in a semantic failure then the activity fails.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Concepts for Workflow Recovery</head><p>A business process typically consists of multiple activities and each of these activities has a more or less strong influence on the overall success of the process. Severe problems may occur, if an activity does not behave in the expected manner. Since workflows may be very complex and activities are in general highly distributed, heterogeneous and autonomous, advanced recovery concepts are necessary for adequate failure-and exception handling. WFMSs are expected to support the reliable and consistent execution of workflows, but as has been pointed out in <ref type="bibr" target="#b10">[11]</ref>, up to now, most WFMSs lack such a functionality. There are only a few notable exceptions, such as IBM FlowMark <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b2">3]</ref> which offers at least some primitive recovery concepts.</p><p>Summing up, the main goal of workflow recovery is, to restore -automatically if possible -the most recent consistent process state after a system or semantic failure so that as few as possible work performed over long-durations is lost and process execution can be continued.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">Recovery after System Failures</head><p>A system failure causes a non regular, abnormal termination (abort) of one or more active activities, more precisely active tasks. If such a situation happens, the WFMS cannot proceed with its regular process execution. Instead, the workflow recovery manager (WRM) has to apply forward recovery which comprises crash recovery and forward execution. Crash recovery means that all inconsistent execution results of the interrupted and probably half-way executed tasks are removed. Therefore, in most cases some kind of rollback is necessary. In general the WRM is not responsible for a task's internal rollback process because tasks are treated as black boxes and hence it is expected that they are responsible themselves for a correct recovery (they should have their own local recovery system). Since we cannot always presume such an ideal behavior (tasks are not necessarily failure atomic) the WRM should be be able to handle such situations. Forward execution means that process execution is resumed from the "closest consistent" point where the failure occurred. This implicitly means that forward execution is applied after crash recovery.</p><p>Based on the previous concepts we now investigate specific recovery techniques within workflow execution. This investigation distinguishes between different task types: Automatic tasks: Forward recovery concerning aborted automatic tasks comprises:</p><p>-Restart of the same task. This is possible if the interrupted task is failure atomic (e.g. a DBtransaction) which means that the task is rolled back automatically or if such a rollback is not necessary because the task is idempotent (e.g. a task which formally checks a loan request form).</p><p>An idempotent tasks can be executed one or more times without changing the result which is a very comfortable feature within workflow execution.</p><p>-Start of an alternative task. If the same task cannot be restarted after a system failure it may be necessary to start another task instead which removes inconsistent side effects of the interrupted task and which tries to perform the original goal in an alternative way.</p><p>-Manual intervention: If a task is not failure atomic and there exists no alternative task then a manual intervention is necessary. This means for example, that the WRM informs a human agent (for example the process owner) who repairs the failure.</p><p>Manual tasks: Forward recovery for manual tasks primarily must be performed by the workflow participant who is responsible for the task (e.g. if a phone call is interrupted then it is the agent who is responsible to take appropriate recovery measures (e.g. to make a new phone call, to restart the word processor and load the file manually)). There are only limited possibilities to automate forward recovery for manual tasks.</p><p>To increase the success rate of a correct and automatic task recovery after a system failure the WRM should be able to restart and retry the same (or an alternative) task several times. The number of possible restarts must be defined by the workflow administrator. If a recovery of an interrupted task is not feasible within the specified retry or time limits then the recovery procedure for semantic failures is invoked (i.e. the task fails and the system failure migrates to a semantic failure).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">Recovery after Semantic Failures</head><p>A semantic or logical failure occurs, if (a) an activity fails (commits unsuccessfully) or (b) an authorized agent wants to undo (at least parts of) an active process. For the first case, the WRM has to decide whether an inconsistent state is reached or not. Depending on this decision either a complex recovery procedure has to be started or process execution can be continued. The decision whether the failed activity has produced an inconsistent state for the overall process or not depends on the "importance" of the activity in the process. For this purpose, the workflow designer has to define during process definition whether an activity is vital or not. If a vital activity fails then an inconsistent state is reached. This fact, as well as the agent triggered undo, initiates a complex recovery procedure. The main challenge thereby is, to semantically rollback already completed activities -normally in inverse order -until a consistent process state is reached from where the workflow can be continued (by executing an alternative path) or terminated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.">Recovery Concepts for Document-oriented Workflows</head><p>For a document-oriented workflow, the reason for recovery is not only a failure within an activity but also a changed situation in the world outside the system (an unexpected exception). Such an exception may for example cause an already approved business-trip to be cancelled later on. The following transaction based exception and failure mechanisms should be available within a documentoriented WFMS (see also <ref type="bibr" target="#b24">[25]</ref>):</p><p>Undo: The undo operation allows the agent to undo all work which has been done so far within the (still active) task. There are two problems: first, it is not always possible to undo a task and second, there are only primitive recovery concepts available if the tasks are of manual type (e.g. to restore an old document version).</p><p>Back: The back operation first executes an undo operation if the task is active and then the process is transferred back into the preceding process step (e.g., a document is returned to the agent in charge of the preceding task) with some additional information explaining the reason for the back operation. Now, the new "old" agent has the possibility to update some parts within the task in order to continue process execution afterwards or to use the back operation again.</p><p>Backward recover: Authorized agents should have the possibility to interrupt an active process and to delegate the process back into any previous passed state (which is the same semantics than several single backoperations). The backward process comprises the following steps:</p><p>-Visual display of the backward-recover-mode:</p><p>When a process enters the backward-recovermode then this should be made explicit visible for at least all involved agents.</p><p>-Backward recovery of the process in inverse order: The process is executed in inverse order by semantically undoing previous executed activities. Activities which do not need to be compensated are skipped.</p><p>-Decision of the further route: After all required activities have been compensated the agent who initiated the backward recover mode can reactivate the activity in order to add or change some parts. After all work is completed, the agent has to determine the next step in the process, which may be the execution of an alternative path or again a back operation.</p><p>-Forward execution: After a back or a backward recover the agent can decide to continue with process execution in a forward direction (normally on an alternative path).</p><p>Within the project "Workflow Transactions" we currently discuss the integration of at least some of the above presented concepts into the commercial WFMS CSE/Workflow<ref type="foot" target="#foot_3">2</ref> .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.">Recovery Concepts for Process-oriented Workflows</head><p>In general, workflows are structured hierarchically in order to facilitate workflow modeling and to support reuse. Workflows, or in our terminology complex activities, may consist of several logical dependent sub-activities. This means that a complex activity comprises several subactivities which together determine the success or non success of its parent-activity. A parent-activity succeeds if all, or at least its vital sub-activities succeed.</p><p>If during process execution an activity fails (commits unsuccessfully) then the WRM has to decide whether the process has reached an inconsistent state or not. This decision is very easy since an inconsistent state can only be reached if an activity fails whose relationship to its parent is vital (in other words: if a vital activity fails). Summing up, after a semantic failure, the WRM has the following possibilities to support a failure tolerant process execution: Forward execution: If the failed activity has no vital relationship then a positive and consistent termination of the corresponding parent activity can be achieved very easily by making forward progress (ignoring the failed activity) and executing the remaining child activities. The fail of the non vital activity can be tolerated without further consistency preserving measures.</p><p>Backward recovery: If the failed activity has a vital relationship then a complex recovery procedure is necessary in order to reach a consistent state again. A fail of a vital sub-activity makes a further execution of the remaining child activities obsolete. Instead, a controlled rollback has to be initiated. This means that all previous child-activities which have terminated successfully have do be undone in a correct way. Of course, this is not always possible and sometimes this will require at least human intervention. In <ref type="bibr" target="#b7">[8]</ref> the problem of irreversible side effects has been discussed and some solutions for safe process schemas have been introduced. After the recovery process at the current level has terminated (and hence all successful committed brother activities of the failed activity have been rolled back semantically), the parent activity will itself terminate unsuccessfully. This, of course, may initiate another backward recovery process at the next higher level.</p><p>Similar concepts concerning backward recovery are discussed in <ref type="bibr" target="#b18">[19]</ref>. Within this approach any collection of activities can be defined as a sphere of joint compensations, which means that all activities must either run syntactically successful or all activities must be compensated. Since the activities which belong to one sphere may be spread over the whole process and, additionally, spheres may overlap, the compensation process on the one hand seems to be more flexible but on the other hand it seems to be much more complex and hence more difficult to use.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Forward recovery</head><p>In most cases a combination of backward recovery and forward execution will be applied. Since this steps are very similar to the forward recovery concept for system failures it seems to be reasonable to use the same terminology -forward recovery -within the current context. As soon as a consistent state is reached -a non vital parent activity fails -the WRM will enforce regular process execution, probably along another execution path, in order to make forward progress. WAMO offers choice activities which are an ideal point to change from backward to forward execution. The possibility to undo only parts of a workflow is in contrast to many advanced transaction models which always undo complete workflows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Realization Requirements</head><p>An integration of transaction-specific features into a WFMS requires a certain functionality from the WFMS. Within this section, we present an overview of the most relevant WFMS requirements which are necessary for the integration of workflow transactions. Of course, not all con-cepts are required if only a partial integration of workflow transactions is intended.</p><p>Nested workflow: For modeling reasons and reusability aspects a hierarchical representation of complex workflows is an important feature. Thereby, a complex workflow is decomposed into smaller sub-workflows (activities) until elementary workflows (called tasks in WAMO) are remaining. Workflows containing other workflows are often called composite workflows. In WAMO such composite workflows are called complex activities. The execution of a hierarchical structured workflow starts at the top-level (most abstract) workflow in the hierarchy by executing the first underlying layer of sub-workflows. Complex activities are logical units of work that determine the co-ordination and data flow requirements between sub-activities. For the realization of transactional concepts, WAMO explicitly demands nested workflows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>State of activities:</head><p>As mentioned before, within nested workflows it must be distinguished between inner nodes (activities) and leaf nodes (tasks). The main difference between these types is that activities are fully controllable by the WFMS (by the transaction manager and/or scheduler) whereas tasks are only partially controllable (similar ideas are discussed in <ref type="bibr" target="#b17">[18]</ref>). This means, that for example the state of an activity can be set to commit successfully by the workflow transaction manager as soon as all sub-activities have terminated regularly, whereas the state of an already started task can only be determined by the corresponding processing entity. In order to enable transaction based workflow execution, the existence of different states of activities and tasks is necessary. The event state diagram of activities and tasks in WAMO are illustrated in figure <ref type="figure" target="#fig_2">3</ref> and<ref type="figure" target="#fig_3">4</ref>. An activity can be started if it is in the initial state startable. The start event changes the state of the activity to active. Now the corresponding childactivities are executed. After the child-activities have finished the activity terminates. In the regular case the activity will either commit successfully (succeed) or commit unsuccessfully (fail). These termination states are fully controlled by the workflow controller. The result, of course, depend on the termination states of the child-activities. Besides the regular case it is also possible that an activity is aborted by an external event (e.g., by the user) or by the system. Then the state of the activity is changed to aborting which means that all active child-activities are aborted and all successfully committed child-activities are semantically rolled back (compensated). Since a semantic roll back must be supported within transactionbased workflows, activities are equipped with the corresponding compensation concepts (for further details see <ref type="bibr" target="#b7">[8]</ref>). Tasks are elementary activities which are directly executed by an processing entity. Hence, the workflow controller can only start a task but not determine the execution result of the task. In general, a task will either succeed in the sense of commit successfully or fail in the sense of commit unsuccessfully. Additionally, a task can terminate abnormally (abort). Since the WRM has to react according to these different termination states a corresponding distinction is necessary.</p><p>Restart information for tasks: After a system failure, a task may be in an inconsistent or undefined state, which means that uncommitted side effects could exist somewhere in the system. The WRM should be able to remove all inconsistencies and to resume process execution from the nearest consistent point where the failure occurred. Therefore, the WRM needs the following information which has to be specified by the workflow designer during process modeling time:</p><p>-Which task has to be started after an abnormal task termination (e.g., the same, an alternative one or the next in the sequence)?</p><p>-How often should a task be restarted after a system failure?</p><p>-Is a manual intervention necessary?</p><p>Compensation tasks: In case of backward recovery it may be necessary to compensate (semantically undo) already committed tasks. For that reason, WAMO introduces the task specific storno-type parameter. The idea is, to associate tasks with corresponding "compensation (inverse) tasks" <ref type="bibr" target="#b16">[17]</ref> which are executed in case the original task has to be undone semantically. But there are also other kinds of compensation which have been explained in subsection 2.1. As with the original tasks, also compensation tasks should be written in such a way, that they can easily be reused in other workflows. Additionally, it must be emphasized, that it is much easier to define compensation tasks (respectively to generate them automatically) if structured data (see subsection 3.1 is manipulated within the workflow.</p><p>Within WAMO, up to now only tasks are associated with the corresponding compensation tasks. Complex activities are only responsible for a correct compensation of their child activities but the model can be extended easily in that way, that also complex activities have their own (complex) compensation activities. This concepts are similar to the idea of discrete and integral compensation in <ref type="bibr" target="#b19">[20]</ref>.</p><p>In order to guarantee a consistent recovery process, it is necessary that compensation tasks terminate successfully otherwise manual intervention is required.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Initiation of the recovery process:</head><p>A recovery process is either initiated manually by a human agent or automatically because of a system or logical failure. A manual initiation is in general triggered by activating the back or backward recover function. Since these functions have a major impact on the future workflow execution, appropriate authorization rules are necessary. This means, for example, that only specific agents are authorized to use the backward recover function and / or that the authorization profile changes dynamically during process execution. An automatic initiation of the recovery process is triggered after a system failure, a logical failure or a user cancel command.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Controlling of the recovery process:</head><p>The controlling of the recovery process is a central topic within a transaction-based workflow execution. The inverse execution of a process during backward recovery is as important as the forward execution of a business process. A backward recovery process comprises the following features:</p><p>-Initiation of the backward recovery process as explained before. -The backward execution path is based on the already executed path. In general, the backward path is the inverse of the forward path. Therefore a process history is absolutely necessary. This means, for example, that the execution states of all activities in the workflow have to be stored persistently. Tasks with the storno type "none" can be skipped during backward execution.</p><p>-The compensation tasks have to be provided with the proper application and process data. -The backward process terminates as soon as the closest consistent point is reached.</p><p>Logging: As already mentioned before, a transactionbased workflow execution demands extensive logging activities. Of course, every WFMS does some logging and some of this information can be reused within a transaction-based execution. The data which is logged should be kept in the workflow database. Logging comprises two main areas:</p><p>-Logging of process data: For the complex recovery procedure the WRM needs the information of the state of all activities (and tasks), the execution history and the agents who have performed the various activities. Normally, most of this information is already gathered by the system for process monitoring and tracking. -Logging of application data: Besides the control flow aspects also the data flow within a workflow is of major interest for the recovery process. Compensation activities have to be provided with the proper data in case of an activation. We can distinguish between the following data extensions which are necessary for a compensation activity: (1) data, which is explicitly added by the user for the purpose of the compensation process (especially within documentoriented workflows), (2) input-data of the original activity and/or of several other activities, and (3) output-data of the original activity and/or other activities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Conclusions</head><p>Workflow management systems more and more become the basic technology for organizations to perform their daily business processes (workflows). These processes tend to be of long duration, involve many users and tools over heterogeneous and distributed environments. We claim that a consistent and reliable execution of such workflows can only be achieved by integrating transactions -workflow transactions -into WFMSs. The main difference between traditional database transactions and workflow transactions is the fact, that the goal of database transactions is to transform data from one consistent state into another consistent state in the presence of failures and concurrent access, while workflow transactions aim to transform business processes from one consistent state into another consistent state.</p><p>Based on the idea of workflow transactions, we have discussed in detail advanced workflow recovery concepts which are necessary for a reliable and consistent execution of workflows in the presence of failures and exceptions. Therefore, we have analyzed different failure sources and failure classes which influence and determine the recovery concepts. Additionally, we distinguish between two main classes of workflows, document-oriented and process-oriented, because they have different requirements for workflow recovery.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 . Basic failure sources 1 .</head><label>21</label><figDesc>Figure 2. Basic failure sources</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. Event-state diagram for activities</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4. Event-state diagram for tasks</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>This research was supported by the project "Workflow Transactions" sponsored by CSE-Systems, Computer &amp; Software Engineering GmbH, Klagenfurt, Austria</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_1"><p>짤 1996 IEEE. Personal use of this material is permitted. However, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works must be obtained from the IEEE.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_2"><p>Flowmark is a trademark of International Business Machines Corp.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_3"><p>Workflow is a trademark of CSE Systems, Computer &amp; Software Engineering GmbH</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Exotica/fmdc: Handling disconnected clients in a workflow management system</title>
		<author>
			<persName><forename type="first">G</forename><surname>Alonso</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>G체nth철r</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">E</forename><surname>Abbadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Mohan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 3rd Int. Conference on Cooperative Information Systems, Vienna, Austria</title>
		<meeting>of the 3rd Int. Conference on Cooperative Information Systems, Vienna, Austria</meeting>
		<imprint>
			<date type="published" when="1995-05">May 1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Advanced transaction models in workflow contexts</title>
		<author>
			<persName><forename type="first">G</forename><surname>Alonso</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Kamath</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">E</forename><surname>Abbadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>G체nth철r</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Mohan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995">1995</date>
		</imprint>
		<respStmt>
			<orgName>IBM Almaden Research Center</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Failure handling in large scale workflow management systems</title>
		<author>
			<persName><forename type="first">G</forename><surname>Alonso</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Kamath</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">E</forename><surname>Abbadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>G체nth철r</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Mohan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995">1995</date>
		</imprint>
		<respStmt>
			<orgName>IBM Almaden Research Center</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Merging application-centric and data-centric approaches to support transaction-oriented multi-system workflows</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Breitbart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Deacon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H.-J</forename><surname>Schek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Shet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Weikum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGMOD RECORD</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="23" to="30" />
			<date type="published" when="1993-09">Sep. 1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A transaction model for active distributed object systems</title>
		<author>
			<persName><forename type="first">A</forename><surname>Buchmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Oezsu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hornick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Georgakopoulos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Manola</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Database Transaction Models for Advanced Applications</title>
		<editor>
			<persName><forename type="first">A</forename><surname>Elmagarmid</surname></persName>
		</editor>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Policy resolution in workflow management systems</title>
		<author>
			<persName><forename type="first">C</forename><surname>Bussler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Digital Technical Journal</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="26" to="49" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A workflow system based on active databases</title>
		<author>
			<persName><forename type="first">J</forename><surname>Eder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Groiss</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Nekvasil</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CON 94: Workflow Management: Challenges, Paradigms and Products</title>
		<editor>
			<persName><forename type="first">G</forename><surname>Chroust</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><surname>Benczur</surname></persName>
		</editor>
		<meeting><address><addrLine>Oldenbourg, Linz, Austria</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994">1994</date>
			<biblScope unit="page" from="249" to="265" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">The workflow activity model wamo</title>
		<author>
			<persName><forename type="first">J</forename><surname>Eder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Liebhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 3rd Int. Conference on Cooperative Information Systems</title>
		<meeting>of the 3rd Int. Conference on Cooperative Information Systems<address><addrLine>Vienna, Austria</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1995-05">May 1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">A workflow classification framework</title>
		<author>
			<persName><forename type="first">J</forename><surname>Eder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Liebhart</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996-01">Jan. 1996</date>
			<publisher>Department of Informatics</publisher>
		</imprint>
		<respStmt>
			<orgName>University of Klagenfurt</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Database Transaction Models for Advanced Applications</title>
		<author>
			<persName><forename type="first">A</forename><surname>Elmagarmid</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992">1992</date>
			<publisher>Morgan Kaufmann Publishers</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">An overview of workflow management: From process modeling to workflow automation</title>
		<author>
			<persName><forename type="first">D</forename><surname>Georgakopoulos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hornick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Shet</surname></persName>
		</author>
		<editor>A. Elmagarmid</editor>
		<imprint>
			<date type="published" when="1995">1995</date>
			<publisher>Kluwer Academic Pub</publisher>
			<biblScope unit="volume">3</biblScope>
			<pubPlace>Boston</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Transaction Processing: Concepts and Techniques</title>
		<author>
			<persName><forename type="first">J</forename><surname>Gray</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Reuter</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993">1993</date>
			<publisher>Morgan Kaufmann</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Special issue on workflow and extended transaction systems</title>
		<author>
			<persName><forename type="first">M</forename><surname>Hsu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bulletin of the Technical Committee on Data Engineering</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="1993-06">June 1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Functional and behavioral aspects of process modelling in workflow systems</title>
		<author>
			<persName><forename type="first">S</forename><surname>Jablonski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CON 94 Workflow Management: Challenges, Paradigms and Products</title>
		<editor>
			<persName><forename type="first">G</forename><surname>Chroust</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><surname>Benczur</surname></persName>
		</editor>
		<meeting><address><addrLine>Oldenburg</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Concurrency control and recovery of multidatabase work flows in telecommunication applications</title>
		<author>
			<persName><forename type="first">W</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Rusinkiewcz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Ness</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Sheth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD</title>
		<imprint>
			<date type="published" when="1993-05">May 1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Modeling, correctness &amp; system issues in supporting advanced database applications using workflow management systems</title>
		<author>
			<persName><forename type="first">M</forename><surname>Kamath</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Ramamritham</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995">1995</date>
		</imprint>
		<respStmt>
			<orgName>University of Massachusetts</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A formal approach to recovery by compensating transations</title>
		<author>
			<persName><forename type="first">H</forename><surname>Korth</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Levy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Silberschatz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 16th Int. Conference on Very Large Data Bases</title>
		<editor>
			<persName><forename type="first">D</forename><forename type="middle">M</forename></persName>
		</editor>
		<meeting>of the 16th Int. Conference on Very Large Data Bases<address><addrLine>Brisbane, Australia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1990">1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Managing heterogeneous multi-system tasks to support enterprise-wide operations</title>
		<author>
			<persName><forename type="first">N</forename><surname>Krishnakumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Shet</surname></persName>
		</author>
		<editor>A. Elmagarmid</editor>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Supporting business transactions via partial backward recovery in workflow management systems</title>
		<author>
			<persName><forename type="first">F</forename><surname>Leymann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">GI-Fachtagung: Datenbanksysteme in Buero, Technik und Wissenschaft</title>
		<editor>
			<persName><forename type="first">G</forename><surname>Lausen</surname></persName>
		</editor>
		<meeting><address><addrLine>Dresden</addrLine></address></meeting>
		<imprint>
			<publisher>Springer Verlag</publisher>
			<date type="published" when="1995-03">Mar. 1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Transaktionskonzepte f체r workflow management systeme</title>
		<author>
			<persName><forename type="first">F</forename><surname>Leymann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Geschaeftsprozessmodellierung und Workflow-Management</title>
		<editor>
			<persName><forename type="first">G</forename><forename type="middle">V J</forename><surname>Becker</surname></persName>
		</editor>
		<imprint>
			<publisher>Thomson, Germany</publisher>
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">There is more than one kind of workflow software</title>
		<author>
			<persName><forename type="first">S</forename><surname>Mccready</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computerworld</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<date type="published" when="1992-11">Nov. 1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Exotica: A project on advanced transaction management and workflow systems</title>
		<author>
			<persName><forename type="first">C</forename><surname>Mohan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Alonso</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">E</forename><surname>Abbadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>G체nth철r</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Kamath</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGOIS Bulletin</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Extending the transaction model to capture more meaning</title>
		<author>
			<persName><forename type="first">M</forename><surname>Rusinkiewicz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Elmagarmid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Leu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Litin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGMOD Record</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="1990-03">Mar. 1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">On transactional workflows</title>
		<author>
			<persName><forename type="first">M</forename><surname>Rusinkiewicz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Shet</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bulletin of the Technical Committee on Data Engineering</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Backtracking office procedures</title>
		<author>
			<persName><forename type="first">P</forename><surname>Vogel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Erfle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Int. Conference on Database and Expert System Applications (DEXA 92)</title>
		<editor>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Tjoa</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">I</forename><surname>Ramos</surname></persName>
		</editor>
		<meeting>of the Int. Conference on Database and Expert System Applications (DEXA 92)</meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Database Transaction Models for Advanced Applications</title>
		<author>
			<persName><forename type="first">H</forename><surname>Waechter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Reuter</surname></persName>
		</author>
		<editor>A. Elmagarmid</editor>
		<imprint>
			<date type="published" when="1992">1992</date>
			<publisher>Morgan Kaufmann</publisher>
		</imprint>
	</monogr>
	<note>The contract model</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
