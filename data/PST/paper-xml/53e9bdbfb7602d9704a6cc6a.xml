<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">POLYNOMIAL ALGORITHMS FOR COMPUTING THE SMITH AND HERMITE NORMAL FORMS OF AN INTEGER MATRIX* RAVINDRAN KANNANt AND ACHIM BACHEM:I</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Universitit Bonn</orgName>
								<address>
									<settlement>Bonn</settlement>
									<region>West Germany</region>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department" key="dep1">Institute for Operations Research</orgName>
								<orgName type="department" key="dep2">School of Operations Research</orgName>
								<orgName type="institution" key="instit1">University of Bonn</orgName>
								<orgName type="institution" key="instit2">Cornell University</orgName>
								<address>
									<postCode>14850</postCode>
									<settlement>Ithaca</settlement>
									<region>New York</region>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">Institute for Operations Research</orgName>
								<orgName type="institution">University of Bonn</orgName>
								<address>
									<addrLine>Nassestrasse 2</addrLine>
									<postCode>D-5300</postCode>
									<settlement>Bonn 1</settlement>
									<country>West Germany</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">POLYNOMIAL ALGORITHMS FOR COMPUTING THE SMITH AND HERMITE NORMAL FORMS OF AN INTEGER MATRIX* RAVINDRAN KANNANt AND ACHIM BACHEM:I</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">B230446E7554572AB70280A1BE2F8516</idno>
					<note type="submission">Received by the editors April 19, 1978 and in revised form September 21, 1978. This research was</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T03:10+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Smith normal form</term>
					<term>Hermite normal form</term>
					<term>polynomial algorithm</term>
					<term>Greatest Common Divisor</term>
					<term>matrix-triangulation</term>
					<term>matrix diagonalization</term>
					<term>integer matrices</term>
					<term>computational complexity</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Recently, Frumkin [9] pointed out that none of the well-known algorithms that transform an integer matrix into Smith <ref type="bibr" target="#b16">[16]</ref> or Hermite [12] normal form is known to be polynomially bounded in its running time. In fact, Blankinship [3] noticed--as an empirical fact--that intermediate numbers may become quite large during standard calculations Of these canonical forms. Here we present new algorithms in which both the number of algebraic operations and the number of (binary) digits of all intermediate numbers are bounded by polynomials in the length of the input data (assumed to be encoded in binary). These algorithms also find the multiplier-matrices K, U' and K' such that AK and U'AK' are the Hermite and Smith normal forms of the given matrix A. This provides the first proof that multipliers with small enough entries exist.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>then det (A) d 3 and 2 2) =A (mod 3) = 2 2</p><p>Comparing the GCD of all entries of A (which is 1) with the GCD of all entries of A (which is 2) indicates that A and have different Smith normal forms.</p><p>Here we present polynomial algorithms for computing the Smith and Hermite normal forms. All intermediate numbers produced by these algorithms have at most a polynomial number of digits and the number of algebraic operations (additions and multiplications) performed is also bounded by a polynomial of the length of the input.</p><p>Moreover the algorithms calculate the left and right multipliers (see description below)</p><p>and thus prove that their entries are bounded in the number of digits by a polynomial in the length of the input. We must stress however that no exponential lower bounds have been proved on existing algorithms.</p><p>2. An algorithm for Hermite normal form, An integer square matrix with a determinant of + 1 or -1 is called unimodular. Post-(pre-) multiplying an (m n) matrix by a (n n)((m m)) unimodular matrix is equivalent to performing a series of column (row) operations consisting of (cf. Newman  <ref type="bibr" target="#b15">[15]</ref>):</p><p>1. adding an integer multiple of one column (row) to another, 2. multiplying a column (row) by -1 and 3. interchanging two columns (rows). These column (row) operations are termed elementary column (row) operations.</p><p>THEORZM 1. (Hermite <ref type="bibr" target="#b12">[12]</ref>). Given a nonsingular n n integer matrix A, there exists a n n unimodular matrix K such that AK is lower triangular with positive diagonal elements. Further, each off-diagonal element of AK is nonpositive and strictly less in absolute value than the diagonal element in its row. AK is called the Hermite normal form of A (abbreviated HNF).</p><p>We now give an algorithmic procedure for calculating the Hermite normal form AK and the multiplier K. All currently known algorithms build up the Hermite normal form row by row, whereas the new algorithm HNF(n,A) (see description below) successively puts the principal minors of orders 1, , n (the submatrices consisting of the first rows and columns 1 &lt;-_&lt;-n) into Hermite normal form. So at the ith step we have the following pictures. "0" stands for a zero entry of the matrix and "," for an entrythatmaynotbezero. e.g. Bradley'salgorithm <ref type="bibr" target="#b6">[7]</ref>  , ALGORITHM HNF(n, A)" returns (HNF, K). 1. Initialize the multiplier K" K I (the n n identity matrix).</p><p>2. Permute the columns of A so that every principal minor of A is nonsingular; do the corresponding column operations on K:</p><p>Use a standard row reduction technique (Edmonds <ref type="bibr" target="#b8">[8]</ref>) or see Appendix. If the matrix is found to be singular, the algorithm terminates here.</p><p>Note. This step need not be carried out, if suitable modifications are made in the rest of the algorithm. However, in the interest of simplicity, we have inserted this step here.</p><p>3. Initialize which denotes the size of the principal minor that is already in HNF: i-1. 4. Put the (i + 1) x (i + 1) principal minor into HNF: (For any real matrix R, we denote by R the jth column of R and by R,. (or R) the element in the ith row and jth column of R).</p><p>If n then terminate else, for j 1 to 4.1. Calculate r GCD(Aii, Ai,(+I)) and integers p and q such that r pAii+ qAi,(g+l using a modified Euclidean algorithm (see Appendix) 4.2. Perform elementary column operations on A so that Ai,+x becomes zero:</p><p>D=(p -Aj,(i+l)/f) q Aj,j/r Replace column j and (i + 1) of A by the two columns of the product (AjAi+)D Replace column j and (i + 1) of K by the two columns of the product (KiKi+I)D 4.3. If j &gt; 1 then call REDUCE OFF DIAGONAL (j, A); end 5. Call REDUCE OFF DIAGONAL (i + 1, A) 6. Seti=i+landgoto4. end HNF.</p><p>ALGORITHM REDUCE OFF DIAGONAL (k, A). (For any real real number y, Ly] and [y] denote respectively the floor and ceiling of y.) 1. IfAkg&lt;0setAg=-A andKk=-Kg. We divide the proof that algorithm HNF is polynomial into two parts. First we show that intermediate numbers do not grow "too big". Using this result we prove that the number of algebraic operations (i.e. additions and multiplications) is bounded by a polynomial. The first part of the proof proceeds in 3 stages (Lemma 1-3). The simple fact stated below as a proposition is used many times in the proofs. where IIRIIthe maximum absolute value of any entry of R.</p><p>Proof. det R is the sum of n! terms each of which is at most I[R in absolute value. Since n! -&lt; n", the proposition follows.</p><p>LEMMA 1. For all 1,. , n</p><p>IIA'II-&lt;n(nllm 11) =/</p><p>(2)</p><p>Ilg'll &lt;= n (nllm 111)=" Ai(K i) (i 1,. , n) denote the matrix A(K) after the (i i) principal minor has been put into HNF by the algorithm (Note that A contains the original data.) Proof. Clearly, A' has been obtained from A' by elementary column operations on the first columns of A alone. Thus if M and N denote the (i i) principal minors of A and A respectively, there is a unimodular (i i) matrix/i such that <ref type="bibr" target="#b2">(3)</ref> M i= giI i.</p><p>N is nonsingular, hence/i is unique and is given by/g= (N)-IM .S ince is at most the maximum absolute value of a cofactor of N we obtain (using Proposition 1)" Because M is in Hermite normal form we obtain Thus flAil[ &lt;= nllA IIg ll n(nllA'[I) "/. The proof of Lemma 2 below was inspired by a proof of Edmonds <ref type="bibr" target="#b8">[8]</ref>.</p><p>LZMMA 2. At any stage of the execution of the algorithm, Proof. Let A 'j denote the matrix A after the "do loop" of Step 4 has been executed</p><p>for the values and .F irst, we prove a bound on the entries in the (i + 1) st column of A i' and using this, prove a bound on the rest of A at every stage. Let d(i, , k) be the determinant of the (/" + 1) (/" + 1) submatrix of A consisting of columns 1 through ] and column (i + 1) of A and rows 1 through j and row k of Ai. We show that there are integers ri,/" 1,. , such that (4)</p><p>A'i,l.g+l d(i, j, k)/ri for all k _-&gt; j + 1 and for all j _-&lt; i. For ] 1 it is clear that (4) holds with rl GCD (A 1,1, A 1,i/1 ). Suppose the statement i,p is valid for ]= 1, 2,..., p. Let k be such that n-&gt;k-&gt;p+2. Denote a =Ap/l,p+l, i,p i,p i,p / --Ao+1,i+1, T-" Ak,t+l and 8 A,i+I and let a,/T, 3/ and 8' be the corresponding elements of A i'+1.</p><p>A Then the matrices a y f 1 6 and 3" 6' have the same determinant and a'= GCD(a, fl), hence using the induction hypothesis 6,=a'6'__ a6-fly =ad(i'p'k)-d(i'p'P+ a' GCD(a,/3) rp GCD(a, fl)</p><formula xml:id="formula_1">+ 1 A i'p + 1 A i'p+l</formula><p>Since the last term above represents the expansion of d(i, p+ 1, k) by the (p+ 1)th column of A we obtain 16,1_-[A i,p+x ,i+11-Id(i, p / 1, k)/rp+xl, where we set ro/l roGCD(a,/3). Thus, (4) holds. Using Lemma 1 we obtain A'i+l Id(i, ], k)l &lt;=(nllAill)</p><p>=&lt; n" (n (n[lA 11])2"+1)n which gives a bound on the (i + 1)th column of A i,j. For all other columns 1 &lt;-j &lt;-we conclude [a,ii</p><formula xml:id="formula_2">[ ipA i,]</formula><p>21</p><formula xml:id="formula_3">+ [ql(n Ila 111(3"2)) ka + qA k, + &lt;_ lP n 1Al1)2,+1 (cf.</formula><p>Step 4.2 of the algorithm). Both p and q are bounded by max {[A-[ IAj, i+l l} (see Appendix). Thus, [IAII -&lt; 2n(=llA[I (6"2) f (say). This does not still account for Step 4,3. Note that REDUCE OFF DIAGONAL (j, A) increases [IAzll (the maximum absolute value of entry of column Az) by at most a factor of (1 + IIAII). Thus [IAII &lt;- f(1 +f)" -&lt; 2"f 2". Hence Lemma 2 is proved.</p><p>LEMMA 3. At any stage of the execution of the algorithm, tlgtl-&lt;-(2n IIA Proof. We have already proved (in Lemma 1) that K has small enough entries.</p><p>Each time the do loop of Step 4 is executed, (-Ai,i+/r) and (Aid/r) are bounded by 2n(1"2)[IA11[(6"2=d (cf. Lemma 2). By the modified Euclidean algorithm (see Appendix) p and q are bounded by d. Thus each execution of the do loop multiplies by at most 2d. There are at most n such multiplications before we arrive at K g/l from K i. Thus K&lt;-(2d)"n(nllAlll) n' (by Lemma 1). Again to account for Step 4.3, an argument similar to the one in Lemma 2 shows that an exponent of O(n 4) suffices.</p><p>THEOREM 2. Algorithm HNF is polynomial.</p><p>Proof of Theorem 2. Clearly the calculation in Steps 4.1, 4.2 and 4.3 of the algorithm are to be done at most n 2-times. The GCD calculation of step 4.1 is polynomial (see Appendix). Also, Step 2 of the algorithm is polynomial as shown again in the Appendix. Hence, the number of arithmetic operations as well as the number of digits of all intermediate numbers are polynomial and Theorem 2 is proved.</p><p>The algorithm HNF(n, A) is concerned with square nonsingular integer matrices. However an examination of the procedure will show that with obvious modification the algorithm works on arbitrary (m, n) integer matrix which has full row rank. In this case, the normal form is (H, 0), where 0 is a (m (nm)) block of zeros and the (m m) matrix H is in the form prescribed by Theorem 1 The algorithm for this (referred to later as H(m, n, A)) is as follows:</p><p>Use Step 2 of algorithm HNF(n, A) to permute the columns of A so that the first m principal minors are nonsingular. Call the new matrix A'. Use the steps 3-6 of the algorithm to transform the square nonsingular matrix 0I into Hermite normal form (I is an (n m) x (n m) identity and 0 an (n m) x m matrix of zeros). By Theorem 2 this is a polynomial algorithm. Return the first m rows of this HNF and all of K. Clearly using these algorithms we can transform any (m x n) integer matrix A with full column rank into a left" Hermite normal form (LHNF) using row instead of column opera- tions, i.e. A will be transformed into (/)where H is uppertriangular with positive diagonal elements. Further, each off-diagonal element of H is nonpositive and strictly less in absolute value than the diagonal element in its column. Let us denote this algorithm by LHNF (m, n,A). LHNF (m, n,A) returns UA and U where U is an (m x m) unimodular matrix and UA the left Hermite normal form. Obviously LHNF (n, m, A) is still polynomial and an analogous result to Lemma 3 holds.</p><p>3. An algorithm for Smith normal form. THEOREM 3. (Smith <ref type="bibr" target="#b16">[16]</ref>). Given a nonsingular (n n) integer matrix A, there exist (n n) unimodular matrices U, K such that S(A)= UAK is a diagonal matrix with positive diagonal elements dl, ", dn such that di divides di+l(i 1,. , n 1).</p><p>The typical step of the polynomial algorithm for the Smith normal form can be summarized in the following pictures:</p><p>.00000 0.0000 Note that this algorithm puts the bottom right (n i) x (n i) square matrix into HNF "frequently". Just after this is done each time, the product of the diagonal entries of A equals the absolute value of the determinant of the original matrix and thus each entry of A is at most this determinant in absolute value. Thus, the numbers are prevented from cumulatively building up. This repeated use of HNF is the crucial difference between the algorithm presented here and the standard algorithms (e.g. <ref type="bibr" target="#b6">[7]</ref> and <ref type="bibr" target="#b0">[1]</ref>).</p><p>In the algorithm below we use the following notation. HNF (ni, n-i, A) is the procedure which puts the bottom-right-hand minor consisting of the last (ni) rows and columns into Hermite normal form. LHNF (n i, + 1, A) is the procedure which puts the submatrix of A consisting of the last (n i) rows and the column + 1 into left Hermite normal form.</p><p>ALGORITHM SNF(n, A): returns ($(A), U, K). 1. Set U--K -I the identity matrix of order n.</p><p>2. i=-1. 3. i=i+l. Ifi=nstop.</p><p>At this stage the top-left (i x i) matrix is already in SNF and, if _-&gt; 1, Ag, divides A,, V i&lt;-j&lt;-n, i&lt;-k&lt;-_n. 4. Call LHNF(n-i, + 1, A) (returns A and U*) (</p><p>U-0 U ,U (I is an x identity matrix).</p><p>5. Call HNF(n-i, n-i, A) (returns A and K*) o)</p><p>K=K" 0 K* (I is an identity matrix).</p><p>6. If Ai+I,i+I is not the only nonzero element in column (i + 1) go to 4. 7. If Ai+l,g+l divides every element Aj.k + 1 &lt;-]&lt;-k, + 1 &lt;=k &lt;-n, go to 3, other- wise Ai+l,i+x does not divide Aj.k (say). Add column k into column + 1 in A and K. Go  Proof. Note that for a fixed every time Step 4 or 5 is passed Ai+l,i+ is replaced by a proper divisor of itself except the last and possibly the first times. Thus, for a fixed i, Steps 4 and 5 are executed at most log I[A(i)ll + 2 times where A(i) denotes the matrix A at the beginning of the ith iteration. Clearly [IA(/)ll &lt;_-max {Idet (A(0))I, IIA(0)II}, since either 0 or A(i) is in Hermite normal form. Thus we count at most 2 + log (llA(i)ll) &lt;-n log (nllA(0)[[)+ 2 calls of Step 4 and 5 for each value of i. We have therefore at most n2(log n[lA(0)l[)+ 2n passes of Steps 4 and 5. But here we use Hermite normal form algorithms and using Theorem 2 this proves Theorem 4.   THEOREM 5. The unimodular matrices U and K which the algorithm SNF returns have entries whose number of digits are bounded by a polynomial.</p><p>Proof. For every U* and K* in Steps 4 and 5 of the algorithm we have flU*f[, [IK*ll&lt;-(c.n.[lA(O)[]) '(n for some polynomial p(n) and constant c (cf. Lemma 3). By previous arguments, U and K at any stage are the product of at most n log ((nl[A(0)[I)n) of these matrices. Thus the theorem is proved.</p><p>Clearly analogous to LHNF, we can modify the algorithm SNF(n, A) in such a way that it works for arbitrary (n, m) integer matrices and remains polynomial. The details are rather elementary and are left to the reader.</p><p>We must remark that the algorithms in this paper are not meant to be efficient. The main concern has been simplicity of presentation. A computer code that includes several efficiency improvements is available from the authors. Appendix.</p><p>LEMMA A.1. IrA is a nonsingular n n matrix, then its columns can be permuted so that in the resulting matrix, all principal minors are nonsingular.</p><p>Proof. The first row of A must have at least one nonzero element. Thus after a permutation of columns, if necessary, we can assume that A is nonzero. Assume for induction that the columns of A have been permuted to give a matrix A' in which the first principal minors are nonsingular for some i, 1 _-&lt; _-&lt; n 1. Let A" be the matrix Consisting of all columns of A' and only rows 1 through (i + 1). A' is nonsingular implies that rank (A")=i+I. Thus at least one of the columns say k, among (i+1), (i + 2) , n of A" cannot be expressed as a linear combination of the first columns of A". Swapping columns k and (i + 1) in A' leads to a matrix whose first (i + 1) principal minors are nonsingular. This completes the inductive proof.</p><p>The algorithm below uses essentially the idea of the proof.</p><p>Step 2 of Algorithm HNF.</p><p>for i-1 to n det determinant of the principal minor of A /=1 do while (/" &lt;_-n) and (det 0) /=/+1 det determinant of the submatrix of A consisting of the first rows of A and columns 1 through (i-1) and column j of A end it j &gt; n, lerlninale/.A is singular ./ Interchange columns j and of A and of K. As remarked earlier, this subroutine is wasteful from the point of view of efficiency. However, it is polynomial, since determinant calculations can be done in polynomial time and at most n 2 determinants are to be computed. GCD ALGORITHM. We use any standard algorithm (e.g. <ref type="bibr" target="#b1">[2]</ref> or <ref type="bibr" target="#b5">[6]</ref>) that for any two given numbers a and b, not both zeros, find p, q and r such that r= GCD(a, b)= pa + qb. We then execute the following step:</p><p>We assume [a -&gt;_ [b[, else swap a and b.</p><p>[ql If Iq[ &gt; lal, then do" p p +b q=q-a end.</p><p>Note that we still have r pa + qb. But now, Iql &lt; lal. Thus   Iqb]&lt;[ab[, pa + qb r :=), Ipa I&lt; lab I+ Irl Thus Ipl, [q[ --&lt; a 1. The Euclidean algorithm is well-known to be polynomial and certainly the step above is also polynomial.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>2 .</head><label>2</label><figDesc>For z =l to k-1 set Kz Kz [Akz/Akk Kk set Az A [Ak/Akk Ak end REDUCE OFF DIAGONAL.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>PROPOSITION 1 .</head><label>1</label><figDesc>For any real n n matrix R, Idet R[-&lt;_(n.   </figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>p+l-&gt; * * * aO0* * * * aOO fl * * * a'O00 ***** 0* ***** 0* ***** 0* k-&gt; * * * 3/* * * * * * Y* * * * * 3/'* * 8'</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>1)th step Downloaded 12/25/12 to 132.206.27.25. Redistribution subject to SIAM license or copyright; see http://www.siam.org/journals/ojsa.php</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>THEOREM 4 .</head><label>4</label><figDesc>The algorithm SNF is polynomial.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head></head><label></label><figDesc>end.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Downloaded 12 /</head><label>12</label><figDesc>25/12 to 132.206.27.25. Redistribution subject to SIAM license or copyright; see http://www.siam.org/journals/ojsa.php</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>Downloaded 12/25/12 to 132.206.27.25. Redistribution subject to SIAM license or copyright; see http://www.siam.org/journals/ojsa.php</figDesc><table /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>Downloaded 12/25/12 to 132.206.27.25. Redistribution subject to SIAM license or copyright; see http://www.siam.org/journals/ojsa.php</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgment. The authors wish to thank Professor Les Trotter for reading the manuscript and suggesting several improvements. Thanks are due to the referee for several helpful suggestions.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Efficient algorithms for linear system calculations; Part ImSmith form and common divisor of polynomial matrices</title>
		<author>
			<persName><forename type="first">S</forename><surname>Barnette</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">S</forename><surname>Pace</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Internat. J. of Systems Sci</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="403" to="411" />
			<date type="published" when="1974">1974</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A new version of the Euclidean algorithm</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">A</forename><surname>Blankinship</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Amer. Math. Monthly</title>
		<imprint>
			<biblScope unit="volume">70</biblScope>
			<biblScope unit="page" from="742" to="745" />
			<date type="published" when="1963">1963</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Algorithm 287, Matrix triangulation with integer arithmetic I [F1]</title>
	</analytic>
	<monogr>
		<title level="j">Comm. ACM</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page">513</biblScope>
			<date type="published" when="1966">1966</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Solution of simultaneous linear diophantine equations IF4]</title>
	</analytic>
	<monogr>
		<title level="j">Comm. ACM</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page">514</biblScope>
			<date type="published" when="1966">1966</date>
		</imprint>
	</monogr>
	<note>Algorithm 288</note>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<author>
			<persName><forename type="first">E</forename><surname>Bodewig</surname></persName>
		</author>
		<title level="m">Matrix Calculus</title>
		<meeting><address><addrLine>North Holland, Amsterdam</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1956">1956</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Algorithm and bound for the greatest common divisor of n integers</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">H</forename><surname>Bradley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comm. ACM</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="433" to="436" />
			<date type="published" when="1970">1970</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Algorithms for Hermite and Smith normal matrices and linear diophantine equations</title>
		<imprint/>
	</monogr>
	<note>Math</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Comput</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="897" to="907" />
			<date type="published" when="1971">1971</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Systems of distinct representatives and linear algebra</title>
		<author>
			<persName><forename type="first">J</forename><surname>Edmonds</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Res. Nat. Bur. Standards</title>
		<imprint>
			<biblScope unit="volume">71</biblScope>
			<biblScope unit="page" from="241" to="245" />
			<date type="published" when="1967">1967</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Polynomial time algorithms in the theory of linear diophantine equations</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>Frumkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Fundamentals of Computation Theory</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">M</forename><surname>Karpinski</surname></persName>
		</editor>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1977">1977</date>
			<biblScope unit="volume">56</biblScope>
			<biblScope unit="page" from="386" to="392" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">R</forename></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">L</forename><surname>Nemhauser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Integer Programming</surname></persName>
		</author>
		<author>
			<persName><surname>Wiley</surname></persName>
		</author>
		<author>
			<persName><surname>Sons</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1972">1972</date>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Computational experience with a group theoretic integer programming algorithm</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">A</forename><surname>Gorry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">D</forename></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">F</forename><surname>Shapiro</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Math. Programming</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="171" to="192" />
			<date type="published" when="1973">1973</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Sur l&apos;introduction des variables continues dans la thgorie des Hombres</title>
		<author>
			<persName><forename type="first">C</forename><surname>Hermite</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. R. Angew. Math</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="page" from="191" to="216" />
			<date type="published" when="1851">1851</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Transfer equivalence of linear dynamical systems</title>
		<author>
			<persName><forename type="first">M</forename><surname>Heymann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Thorpe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. Control Optimization</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="19" to="40" />
			<date type="published" when="1970">1970</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">C</forename><surname>Hu</surname></persName>
		</author>
		<title level="m">Integer Programming and Network Flows</title>
		<meeting><address><addrLine>Reading, MA</addrLine></address></meeting>
		<imprint>
			<publisher>Addison-Wesley</publisher>
			<date type="published" when="1969">1969</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><surname>Newman</surname></persName>
		</author>
		<title level="m">Integral Matrices</title>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Academic Press</publisher>
			<date type="published" when="1972">1972</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">On systems of indeterminate equations and congruences</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">J S</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Philos. Trans</title>
		<imprint>
			<biblScope unit="volume">151</biblScope>
			<biblScope unit="page" from="293" to="326" />
			<date type="published" when="1861">1861</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Group representational theory in integer programming</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">A</forename><surname>Wolsey</surname></persName>
		</author>
		<idno>No. 41</idno>
		<imprint>
			<date type="published" when="1969">1969</date>
			<pubPlace>Cambridge, MA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Massachusetts Institute of Technology</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
