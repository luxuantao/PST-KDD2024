<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">His research interests are in computer networks, particularly in network optimization, multicast algorithm design, network game theory, and network coding</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Francis</forename><forename type="middle">C M</forename><surname>Lau</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Toronto</orgName>
								<address>
									<postCode>2001, 2005</postCode>
									<settlement>Toronto</settlement>
									<region>ON, in</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Calgary</orgName>
								<address>
									<settlement>Calgary</settlement>
									<region>AB</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">His research interests are in computer networks, particularly in network optimization, multicast algorithm design, network game theory, and network coding</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1109/TNET.2015.2444657</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2023-01-01T13:30+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Zongpeng Li (SM'12) received the B.E. degree in computer science and technology from Tsinghua University, Beijing, China, in 1999, and the M.S. degree in computer science and Ph.D. degree in electrical and computer engineering from the</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>An Online Auction Framework for Dynamic Resource Provisioning in Cloud Computing</head><p>Weijie Shi, Student Member, IEEE, Linquan Zhang, Student Member, IEEE, Chuan Wu, Member, IEEE, Zongpeng Li, Senior Member, IEEE, and Francis C. M. Lau, Senior Member, IEEE</p><p>Abstract-Auction mechanisms have recently attracted substantial attention as an efficient approach to pricing and allocating resources in cloud computing. This work, to the authors' knowledge, represents the first online combinatorial auction designed for the cloud computing paradigm, which is general and expressive enough to both: 1) optimize system efficiency across the temporal domain instead of at an isolated time point; and 2) model dynamic provisioning of heterogeneous virtual machine (VM) types in practice. The final result is an online auction framework that is truthful, computationally efficient, and guarantees a competitive ratio in social welfare in typical scenarios. The framework consists of three main steps: 1) a tailored primal-dual algorithm that decomposes the long-term optimization into a series of independent one-shot optimization problems, with a small additive loss in competitive ratio; 2) a randomized subframework that applies primal-dual optimization for translating a centralized cooperative social welfare approximation algorithm into an auction mechanism, retaining the competitive ratio while adding truthfulness; and 3) a primal-dual algorithm for approximating the oneshot optimization with a ratio close to . We also propose two extensions: 1) a binary search algorithm that improves the averagecase performance; 2) an improvement to the online auction framework when a minimum budget spending fraction is guaranteed, which produces a better competitive ratio. The efficacy of the online auction framework is validated through theoretical analysis and trace-driven simulation studies. We are also in the hope that the framework can be instructive in auction design for other related problems.</p><p>Index Terms-Cloud computing, combinatorial auction, resource allocation, pricing, online algorithms, truthful mechanisms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>C LOUD computing has recently emerged as a new com- puting paradigm that enables prompt and on-demand access to computing resources. As exemplified in Amazon EC2 <ref type="bibr" target="#b0">[1]</ref> and Microsoft Azure <ref type="bibr" target="#b1">[2]</ref>, cloud providers invest substantially into their datacenter infrastructure, providing a virtually unlimited "sea" of CPU, RAM, and storage resources W. Shi, C. Wu, and F. C. M. Lau are with the Department of Computer Science, The University of Hong Kong, Hong Kong (e-mail: wjshi@cs.hku.hk; cwu@cs.hku.hk; fcmlau@cs.hku.hk).</p><p>L. Zhang and Z. Li are with the Department of Computer Science, University of Calgary, Calgary, AB T2N 1N4, Canada (e-mail: linqzhan@ucalgary.ca; zongpeng@ucalgary.ca).</p><p>Color versions of one or more of the figures in this paper are available online at http://ieeexplore.ieee.org.</p><p>Digital Object Identifier 10.1109/TNET.2015.2444657</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>TABLE I AMAZON EC2 VM INSTANCES</head><p>to cloud users, often assisted by virtualization technologies. The elastic and on-demand nature of cloud computing assists cloud users to meet their dynamic and fluctuating demands with minimal management overhead, while the cloud ecosystem as a whole achieves economies of scale through cost amortization. Currently, most cloud providers adopt a fixed-price policy and charge users a fixed amount per-virtual-machine (VM) usage. For example, Table <ref type="table">I</ref> shows the available VM types at Amazon EC2 and their hourly prices at different datacenters. Despite their apparent simplicity, fixed-price policies inherently lack market agility and efficiency, failing to rapidly adapt to real-time demand-supply relation changes. Consequently, overpricing and underpricing routinely occur, which either dispel or undercharge the users, jeopardizing overall system social welfare as well as the providers' revenue.</p><p>Toward effectively discovering the market value of VMs, auction mechanisms have been at the focal point of recent literature on cloud resource allocation and pricing <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b3">[4]</ref>. Spot Instance <ref type="bibr" target="#b4">[5]</ref> is a first-step attempt to apply the auction mechanism on Amazon EC2, which was enhanced by subsequent work <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b5">[6]</ref>. A series of recent work further study auction mechanism design in cloud markets from different perspectives <ref type="bibr" target="#b6">[7]</ref>- <ref type="bibr" target="#b8">[9]</ref>. Unfortunately, all existing designs either consider one-round auctions only or model VMs as type-oblivious commodities and fail to account for the providers' ability to dynamically assemble VMs.</p><p>Cloud Auctions Should Be Online: Real-world cloud resource transactions happen either when customer demands arrive or cloud resources become available, and hence are modeled more naturally by an online auction that incorporates the time dimension. Most cloud computing customers, enterprise or individual, are on a preallocated budget for a given time period (e.g., a year or a month like that in an ad-auction <ref type="bibr" target="#b9">[10]</ref>). Thus, a customer's purchase desire drastically declines over time, which needs to be considered for a practical auction mechanism. However, most existing cloud auctions focus on a single-round auction only and ignore such temporal correlation in decision making <ref type="bibr" target="#b7">[8]</ref>.</p><p>Cloud Auctions Should Be Combinatorial: A cloud computing job in practice often demands a bundle of heterogeneous VM instances for its successful execution, and hence a cloud auction is naturally a combinatorial auction. For example, a social game application that consists of a front-end Web server layer, a load-balancing layer, and a back-end data storage layer is best served by a combination of VMs that are intended for communication-intensive, computation-intensive, and storage-intensive tasks, respectively. Such combinatorial VM auctions represent a dramatic departure of most existing VM auction designs that assume VMs are type-oblivious commodities, in that all VMs are essentially of the same type, and hence are substitutable or substitutable up to a simple multiplicative factor. Embracing heterogeneous VM types in the model further brings about the opportunity of considering dynamic resource provisioning: Decisions on VM assembling, which organizes the CPU, RAM, and Disk resource pools into typed VM instances, are no longer made randomly a priori <ref type="bibr" target="#b2">[3]</ref>, but made dynamically upon receiving user bids. Dynamic resource provisioning enables higher efficiency in cloud resource utilization, higher seller revenue for the provider, and higher social welfare for the entire cloud system.</p><p>This work generalizes and subsumes existing literature on cloud auctions by designing the first online combinatorial auction in which VMs of heterogeneous types are allocated in multiple consecutive time-slots. The final result is an online auction framework that simultaneously guarantees the following properties.</p><p>1) Truthfulness, the holy grail of auction mechanism design. It ensures that economically-motivated selfish buyers are automatically elicited to reveal their true valuations of the VMs they demand, in the bids submitted. This simplifies analysis of the resulting auction in theory and increases the predicability of auction outcomes in practice. 2) Combinatorial auctions, supporting heterogeneous VM types located at different datacenters. Besides heterogeneity in their types, another dimension of VM diversity may arise due to their geographical locations (assuming multiple datacenters). A combinatorial auction is hence necessary. 3) Dynamic resource provisioning. The number of instances of each VM type is not predefined, but dynamically adjusted as part of the auction mechanism, tailored to realtime user demand. 4) Online auction: In commercial cloud platforms, auctions are executed repeatedly and the prices change termly. Each user is subject to a practical budget limitation for a given time period. Our online auction models a long-time auction over multiple rounds that are coupled together by customer budgets. A competitive ratio of is guaranteed in typical scenarios, i.e., our online auction achieves a long-term social welfare that is at least a 1/3.30 fraction of the offline optimum. Our proposed online auction framework consists of three main modules: A) translating online optimization into a series of one-round optimization problems; B) translating an approximation algorithm for one-round optimization into a truthful auction; and C) designing an effective approximation algorithm for one-round optimization.</p><p>First, we formulate a linear integer program that characterizes the long-term social welfare optimization problem in the cloud market for VMs and formulate the dual LP of its LP relaxation (without the integer constraints). A tailored primal-dual algorithm iteratively adjusts a dual variable corresponding to each customer's budget, acting as a shadow price that signals how "tight" the latter is. A series of one-round combinatorial VM auctions are then executed under a fixed shadow price vector. Such primal-dual decoupling of the auction rounds admits a rather intuitive interpretation: The algorithm strikes to avoid prematurely depleting a user's budget, and gives higher priority to cloud customers with low budget pressures during each auction round. As a result, we prove that the decomposition introduces an additive loss to the competitive ratio bounded by . Second, for each one-round combinatorial auction problem, we employ a randomized auction subframework, which exploits the underlying packing property of one-round social welfare maximization and translates any centralized cooperative approximation algorithm into an auction, inheriting the same approximation ratio while adding truthfulness. At the core of this translation is a primal-dual optimization-based decomposition technique that decomposes an optimal fractional solution to one-round social welfare maximization into a convex combination of integral solutions, recently developed in the literature of theoretical computer science <ref type="bibr" target="#b10">[11]</ref> and successfully applied in the literature of computer networking <ref type="bibr" target="#b11">[12]</ref>. We also propose a new binary search-based technique to find the minimum feasible scale-down ratio in the fractional solution decomposition and thereby improve the average-case performance of the online auction algorithm.</p><p>Third, we design a specific approximation algorithm for oneround VM allocation by applying iterative primal-dual solution updates followed by dual fitting. The resulting algorithm is polynomial-time computable and guarantees an approximation ratio that approaches in practical scenarios. Combining all three modules together, the overall competitive ratio of the resulting online auction framework is bounded by in typical scenarios. We hope that the online auction framework proposed in this work, as well as its three components, may shed light to the design of auction mechanisms in related problem settings.</p><p>What's more, we further propose an improvement to the online auction framework in the case that a minimum budget spending fraction is guaranteed. The improved online auction algorithm uses a new method to adjust the dual variables corresponding to users' budgets over time and achieves a better competitive ratio.</p><p>The rest of the paper is organized as follows: We discuss related work in Section II, define the problem model in Section III, present the online algorithm framework and the auction algorithm in Sections IV and V, discuss an improvement of the online auction framework in Section VI, present simulations in Section VII, and conclude the paper in Section VIII.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. RELATED WORK</head><p>Auctions have been extensively studied for resource allocation in computing and network systems, which simultaneously target bidding truthfulness and economic efficiency. Classic applications of auctions are found in a wide range of research areas, such as network bandwidth allocation <ref type="bibr" target="#b12">[13]</ref>, wireless spectrum allocation <ref type="bibr" target="#b11">[12]</ref>, and wireless crowdsourcing <ref type="bibr" target="#b13">[14]</ref>.</p><p>The celebrated VCG mechanism <ref type="bibr" target="#b14">[15]</ref> is a well-known type of auction. It is essentially the only type of auction that simultaneously guarantees both truthfulness and absolute economic efficiency (social welfare maximization), through calculating the optimal allocation and a carefully designed pricing rule. However, when the underlying allocation problem is NP-hard, which is common for combinatorial auctions <ref type="bibr" target="#b15">[16]</ref>, VCG becomes computationally infeasible. When polynomial-time approximation algorithms are applied to solving the underlying allocation problem, VCG loses its truthfulness property <ref type="bibr" target="#b16">[17]</ref>. One usually needs to custom design a payment rule to work in concert with the approximation algorithm at hand to achieve truthfulness; for example, this can be done by exploiting the concept of critical bids <ref type="bibr" target="#b17">[18]</ref>. Another relatively new alternative is to resort to the LP decomposition technique <ref type="bibr" target="#b10">[11]</ref>, as done in this work, which is universally applicable to problems with a packing or covering structure.</p><p>Recently, a series of auction mechanisms are designed for VM allocation in cloud computing. Wang et al. <ref type="bibr" target="#b5">[6]</ref> apply the critical value method, and derive a mechanism that is collusionresistant, an important property in practice. Yet their work, like many others, considers only one-round auctions; and their algorithm has a competitive ratio , where is the number of VM instances. Mashayekhy et al. <ref type="bibr" target="#b18">[19]</ref> propose an online mechanism for resource allocation in clouds, also based on the critical value method, but omit a theoretical performance analysis. Shanmuganathan et al. <ref type="bibr" target="#b19">[20]</ref> introduce the concept of bundles in VM allocation. Zhang et al. <ref type="bibr" target="#b7">[8]</ref> are among the first to study dynamic VM provisioning and design a truthful single-round auction using the LP decomposition method. However, our work is more advanced than theirs in two aspects: 1) We consider the problem over a period of time, instead of just one round, and serve cloud users in an online manner. Our mechanism more closely resembles a real-world cloud market in practice. 2) We not only apply but also propose improvements to the decomposing method, which can improve the performance of the online auction in practice.</p><p>Extending single-round truthful auctions into online auctions in a straightforward way usually breaks the truthfulness property <ref type="bibr" target="#b20">[21]</ref>. The lack of future information brings a key challenge in pursuing truthfulness. For example, the VCG auction does not directly work in the online setting since the optimal allocation for the future cannot be calculated, even given unlimited computational resources. A known technique for achieving truthfulness in online auctions is based on the concept of a supply curve <ref type="bibr" target="#b21">[22]</ref>, as applied by Zhang et al. <ref type="bibr" target="#b3">[4]</ref> in their design of an online cloud auction algorithm. The bidding language and the user characteristic proposed in their work are novel and capture the heterogeneous demands in cloud market. However, they only consider a single type of VM, significantly simplifying the underlying social welfare maximization. In absence of multiple VM types, their model naturally ignores the dynamic provisioning problem. <ref type="bibr">Wang et al.</ref> propose an online auction for cloud markets <ref type="bibr" target="#b8">[9]</ref>, and their model also focuses on one type of VM only.</p><p>Many resource allocation algorithms have been proposed in cloud computing scenarios with different focuses. Alicherry et al. <ref type="bibr" target="#b22">[23]</ref> consider network load when allocating VMs in a distributed cloud system. Maguluri et al. <ref type="bibr" target="#b23">[24]</ref> tackle the randomness of arriving workloads and solve optimization problems for load balancing and VM scheduling. Xu et al. <ref type="bibr" target="#b24">[25]</ref> summarize the recent attempts in managing performance overhead in clouds. Lin et al. <ref type="bibr" target="#b25">[26]</ref>, <ref type="bibr" target="#b26">[27]</ref> study the energy efficiency in VM provisioning. VM migration overhead <ref type="bibr" target="#b27">[28]</ref> and energy consumption <ref type="bibr" target="#b28">[29]</ref> are also important practical issues in VM provisioning. In addition, data traffic commonly exists between VMs. Guo et al. <ref type="bibr" target="#b29">[30]</ref> focus on traffic variation issues in the underlying datacenter networks and solve the VM placement problem with traffic awareness. These aspects are not fully covered in the current paper, and will be investigated in our future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. PROBLEM MODEL</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Cloud System</head><p>We consider a cloud spanning geographically distributed datacenters, each with a pool of types of resources including CPU, RAM, and disk storage that can be dynamically assembled into different types of VMs for lease to cloud users. Let denote the integer set . Each VM of type is constituted by units of type-resource, for all . There are users of the cloud system, which request VMs of different types to execute their jobs. The cloud provider acts as the auctioneer and leases VMs to the users through auctions. The system runs in a time-slotted fashion within a span of , where is a potentially large number. We suppose the available amounts of resources at each datacenter are time-varying, i.e., there are units of type-resource in datacenter at time , whose value may change from one time-slot to another. <ref type="foot" target="#foot_0">1</ref> In each time-slot, one round of the auctions is carried out, where the cloud provider decides the VM allocation for the current time-slot based on user bids. The terms time-slot and round are used interchangeably.</p><p>The cloud users are bidders in the auctions, each submitting a bid containing optional bundles in each round. A bundle consists of a list of desired quantities of VMs of different types, as well as the bidder's valuation for the bundle. Specifically, let denote the number of type-VMs in datacenter that user specifies in its th bundle in time-slot , and be its valuation for this th bundle in . The th bundle in the bid of user in the auction at is described by a -tuple of elements , and . The cases where a user may join and leave (intermittent bidding) or may bid a smaller number of bundles than are all subsumed by our bid model by allowing empty bundles in the bids.</p><p>In each round, upon receiving users' bids, the cloud provider computes its resource allocation and produces the auction results,</p><p>, where if user wins bundle and 0 otherwise, as well as its payment for acquiring VMs in its winning bundle. We assume that a user can win at most one bundle among its optional bundles in each round of the auctions (given that any need for combining two or more bundles can be expressed as a separate bundle already). In addition, the VM demands in each bundle cannot be supplied partially, i.e., the cloud provider either provides all the required VMs in a bundle to the bidder or rejects the bundle.</p><p>Let denote the utility function of user in time-slot , which is decided by its valuations of the bundles and its payment at . We will present the concrete form of the utility function in Section V. We assume user has a total budget , which is a bound of its overall payment in the auctions throughout the system span under consideration, e.g., a preallocated budget for VM rental over a month or a year, which is assumed to be public information. A user's valuations in its bids are independent from its current budget level, while its current budget level will be taken into consideration at the cloud provider when allocating resources.</p><p>We list important notation in this paper in Table <ref type="table" target="#tab_1">II</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Online Auction Problem</head><p>We aim to design an online auction mechanism to be carried out by the cloud provider, which guides resource allocation in the cloud system in a round-by-round fashion through multiple consecutive rounds. The auction design targets the following properties.</p><p>1) Truthfulness (Definition 1): Bidding true valuations is a dominant strategy at the users, and consequently, both bidding strategies and auction design are simplified. 2) Individual rationality: Each bidder obtains a nonnegative utility by participating in the auction in any time-slot, i.e., . 3) Social welfare maximization: The social welfare in our system is the sum of the cloud provider's revenue, , and all the users' utility gain, , which equals aggregated user valuation of the winning bundles (under truthful bidding), . Users' payment and the provider's revenue cancel out each other. Definition 1 (Truthfulness): The auction mechanism is truthful if for any user at any time , declaring a bid that truthfully reveals its requirements of VM quantities, , and its valuations of bundles , always maximizes its expected utility, regardless of other users' bids.</p><p>We first formulate an offline social welfare optimization problem that provides the "ideal" optimal allocation strategies for the cloud provider to address users' VM demands in the entire system lifespan , assuming bids are truthful. Let be the amount of type-resource at datacenter required in user 's th bundle maximize (1)</p><formula xml:id="formula_0">s.t.</formula><p>Constraint (1a) specifies that each user can win at most one bundle each round. Constraint (1b) is the budget constraint at each user. Constraint (1c) limits the overall demand for each type of resource in the winning bundles by the amount available.</p><p>Introducing dual variable vectors , and to constraints (1a), (1b), and (1c) respectively, and ignoring the binary variable constraint (1d) temporarily, we can formulate the dual of the resulting linear program to be used in the primal-dual algorithm design in Section IV (2)</p><formula xml:id="formula_1">s.t. (2a) (2b)</formula><p>To derive an optimal solution to (1), complete knowledge about the system over its entire lifespan is needed, which is apparently not practical. In a dynamic cloud system, the provider should allocate resources on the fly, based on the current amount of available resources, 's, and users' bidding bundles including resource demands 's and valuations 's, which are not known a priori. We seek to design an online auction mechanism for real-time resource allocation, which also guarantees truthful bidding. We achieve the goals in two steps. First, in Section IV, we assume that a truthful auction mechanism to be carried out in each time-slot is known and guarantees an approximation ratio , and we propose an online algorithm framework that produces a competitive ratio of as compared to the offline optimum.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 1 The Online Algorithm Framework</head><p>for all do if otherwise Run . Let be the set of winning users, and be the index of their corresponding winning bundle, for . Define for .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>end for</head><p>Second, in Section V, we design a single-round randomized auction, which achieves the approximation ratio of as well as individual rationality and truthfulness.</p><p>IV. ONLINE ALGORITHM FRAMEWORK We design an online algorithm framework as shown in Algorithm 1, which solves the offline optimization problem (1) and its dual (2), using a subroutine running at each time-slot. We next discuss the one-round resource allocation problem to be solved by , as well as the design rationale of the online algorithm framework.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. One-Round Resource Allocation</head><p>Assuming truthful bids are known, the one-round social welfare maximization problem at time is as follows, which includes the constraints from the offline optimization problem (1) related to the current time-slot, and excludes the user budget constraints (dealt with in the online algorithm framework instead).</p><p>, a reduced valuation of user for bundle from the actual valuation adjusted according to the level of its remaining budget, is used in the objective function. The rationale will be detailed in Section IV-B. Given , the cloud provider's current resource supplies 's, and users' resource demands 's, the one-round optimization problem decides the optimal resource allocation at maximize (3)</p><formula xml:id="formula_2">s.t. (<label>3a</label></formula><formula xml:id="formula_3">) (3b)<label>(3c)</label></formula><p>Adopting the same dual variables as in the dual of (1) and omitting constraint (3c), we formulate the dual of LP (3) minimize ( <ref type="formula" target="#formula_4">4</ref>)</p><formula xml:id="formula_4">s.t. (4a)<label>(4b)</label></formula><p>The primal problem (3) is a special case of the multidimensional multiple-choice 0-1 knapsack problem <ref type="bibr" target="#b30">[31]</ref>, which is both NP-hard and, more strongly, has no fully polynomial-time approximation schemes unless <ref type="bibr" target="#b31">[32]</ref>. What we will pursue in is an auction mechanism, which not only guarantees individual rationality and truthfulness, but also employs a primal-dual approximation algorithm that solves problems (3) and ( <ref type="formula" target="#formula_4">4</ref>) to decide resource allocation in polynomial time with a small approximation ratio. We delay the discussion of the auction mechanism to Section V, but first utilize its properties when analyzing our online algorithm framework. We will show that given a competitive ratio achieved by the one-round auction mechanism, our online algorithm framework achieves a good competitive ratio.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Online Algorithm</head><p>When a good approximation algorithm for one-round resource allocation is in place, the difficulty of designing an online algorithm lies in achieving a good competitive ratio, defined as the maximum ratio between the offline optimal social welfare derived by solving (1) exactly and the social welfare produced by the online algorithm. The budget limits the bundles a user can acquire over the rounds of auctions, leading to different amounts of overall social welfare when the budget is spent in different rounds. The intuition we follow in designing the online algorithm is that inefficiency in social welfare may appear when a user's budget runs out at an early stage since its future bids become invalid after its budget depletion, narrowing down possible future allocation decisions at the provider, prohibiting larger social welfare. The ideal scenario is that each user's budget can last for all the rounds of auctions, making it possible for the cloud provider to explore the best resource allocation strategies over the entire span to approach the best overall social welfare.</p><p>Under this intuition, we should be cautious when winning a bundle suddenly exhausts a user's remaining budget. Our main idea in the online algorithm in Algorithm 1 is to associate the resource allocation in each round with the users' remaining budgets. We introduce an auxiliary variable for each user , whose value starts at 0, increases with the decrease of the remaining budget of the user, and reaches 1 when the budget is exhausted. Instead of the actual valuation of each bundle, is used in the one-round resource allocation as in <ref type="bibr" target="#b2">(3)</ref>, such that the bid from a user with a smaller remaining budget will be evaluated less at the cloud provider, leading to a lower chance of acquiring a bundle. A user's budget lasts for a longer period of time as a result.</p><p>is updated after each round of resource allocation in Algorithm 1, where . , which is the maximum ratio between the valuation of any bundle and the corresponding user's budget. We consider , given that users typically do not put a large proportion of their total budget on one bundle in one round. The increment of is carefully computed (see proof of Theorem 1), such that the budget constraint (1b) is guaranteed over the rounds of online auctions. We set dual variable in the offline dual problem (2), associated with constraint (1b), to the value of the auxiliary variable after rounds . In this way, the adjustment of in each round can be understood as the adjustment of the dual variable toward an optimal solution to the offline dual problem <ref type="bibr" target="#b1">(2)</ref>.</p><p>The performance of our online algorithm in Algorithm 1 is stated in Theorem 1, with a detailed proof in Appendix A.</p><p>Theorem 1: If we have an auction mechanism in that carries out resource allocation in each round to produce feasible solutions for (3) and ( <ref type="formula" target="#formula_4">4</ref>), and guarantees (hence the competitive ratio of the auction algorithm is also ), is -competitive for optimization <ref type="bibr" target="#b0">(1)</ref>. Here, is the objective value of the oneround resource allocation problem in (3), and is the dual objective value in (4). We note that when , the competitive ratio approaches , i.e., the long-term online optimization framework incurs only an additive loss of in competitive ratio, as compared to the one-round allocation algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. RANDOMIZED AUCTION MECHANISM</head><p>We now present a randomized auction mechanism that efficiently allocates resources according to users' bids in each time-slot and guarantees individual rationality and truthfulness. The auction mechanism in each round allocates resources according to the one-round resource allocation problem in (3) and decides the payments from the winning bidders. The classic Vickrey-Clarke-Groves (VCG) mechanism <ref type="bibr" target="#b14">[15]</ref> is a potential candidate for our auction design, which assigns items (VM bundles in our case) to bidders in a socially optimal manner by solving a corresponding resource allocation problem, charges each winner the externality it exerts on other bidders, and ensures that the optimal strategy for a bidder is to bid its true valuations. However, our allocation problem in (3) is NP-hard, and hence a VCG mechanism becomes computationally infeasible. We therefore resort to a fractional version of the VCG auction for achieving both computational efficiency (polynomial-time complexity) and economic efficiency [social welfare maximization in (3)], by applying the VCG mechanism to the LP relaxation of the integer program (3). The fractional VCG mechanism produces fractional bundle allocation results, which are not practically applicable. We further employ a primal-dual optimization-based decomposition technique that decomposes such an optimal fractional solution into a convex combination of integral solutions, and then design a randomized auction that randomly picks one from the integral solutions as the bundle allocation result in each round and retains the nice properties of a fractional VCG auction. We detail the fractional VCG auction, the decomposition technique, and the randomized auction design in Sections V-A-V-C.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Fractional VCG Auction</head><p>In the fractional VCG auction, the auctioneer solves the LP relaxation of (3) by relaxing constraint (3c) to , to decide the bundle allocation in . Let denote the resulting optimal fraction allocation, where . To compute the VCG payment from a winner, the auctioneer solves the LP relaxation again with the winner excluded from the allocation. Let denote the social welfare achieved when winner is excluded. The payment of winner , is: . The utility function of bidder in a VCG auction is typically defined as the difference between its valuation and its payment. In our online auction framework, a user's utility in each round should be related not only to its valuation and payment, but also to its remaining budget: Intuitively, smaller utility gain is appreciated if a user won a bundle when its remaining budget is small, and larger otherwise. We characterize this property using a utility function <ref type="bibr" target="#b4">(5)</ref> This utility function is consistent with the social welfare calculation in the one-round allocation problem (3). Thus, a user's budget can potentially last longer, enabling later acquirement of better bundles with the same consumption of budget (i.e., the same payment), contributing to social welfare efficiency over all rounds of auctions.</p><p>We show in Theorem 2 that under this utility function, bidding true valuations is the best strategy for each user in the fractional VCG auction. A nonnegative utility is guaranteed for each bidder, based on VCG auction theory <ref type="bibr" target="#b14">[15]</ref>.</p><p>Theorem 2: The fractional VCG auction that produces fractional allocation , and payments , is truthful and individual rational. The detailed proof can be found in Appendix B.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Decomposing the Fractional Solution</head><p>Since fractional VM bundles are impractical in real-world cloud systems, we next decompose the fractional solution into a combination of integer solutions, which will be used by our randomized auction mechanism. We apply the LP duality-based decomposition technique <ref type="bibr" target="#b10">[11]</ref>. The goal of the decomposition is to find and a set of integer solutions ( is an index set), to the one-round resource allocation problem (3), such that , and . The randomized auction in each round can choose the integer solution with probability , achieving a good competitive ratio in social welfare in expectation, as compared to that achieved by the optimal integer solution to (3). However, there in fact does not exist a convex combination of integer solutions, , that equals the fraction solution , because otherwise the expected social welfare achieved by these integer solutions equals that achieved by the fractional solution, which apparently contradicts with the fact that the fractional solution achieves a higher social welfare than any integer solution. Therefore, to achieve a feasible decomposition, we need to scale down the optimal fractional solution by a certain factor. According to <ref type="bibr" target="#b10">[11]</ref>, if there exists an approximation algorithm that solves the one-round allocation problem (3) with an approximation ratio of and guarantees (where and are the objective function values of the primal problem (3) and dual (4), respectively), we can use as </p><p>We give a simple numerical example to illustrate the decomposition. Suppose there are two users and two types of VMs. The fractional solution is (0.3, 0.7, 1, 0.7), representing that the first (second) user receives 0.3 (1) unit of VM 1 and 0.7 (0.7) unit of VM 2, respectively. It can be decomposed into two integer solutions: (1, 0, 1, 0) and (0, 1, 1, 1), with corresponding probabilities 0.3 and 0.7. However, in fact we cannot find any combination of integer solutions satisfying the one-round constraints in (3) (i.e., the integer solutions are not feasible) since the optimal fractional solution should be better than any feasible integer solution. Therefore, we have to divide the fractional solution by a factor before decomposing it.</p><p>We next present a primal-dual algorithm that solves (3) with an approximation ratio , and then discuss how to solve the decomposition problem ( <ref type="formula" target="#formula_5">6</ref>) to obtain and . 1) Primal-Dual Algorithm for One-Round Resource Allocation: Algorithm 2 is our primal-dual approximation algorithm to the NP-hard allocation problem <ref type="bibr" target="#b2">(3)</ref>. is the maximum amount of type-resource at datacenter required by any bundle in . is the minimum ratio between the total amount of available resource of a type and the amount of the resource required by one bundle. In practice, the resource pool is substantially larger than a single user's demand, and hence . The main idea of the algorithm is to introduce an auxiliary variable for each type of resource [which is the dual variable associated with constraint (3b)], acting as the unit price in allocation decision. The unit price is updated according to the remaining amount of this type of resource. The algorithm evaluates each bundle according to the unit prices and the amount of required resources and always chooses the user with a higher bid on a lower valued bundle as the winner.</p><p>Theorem 3: Algorithm 2 computes feasible primal and dual solutions for (3) and ( <ref type="formula" target="#formula_4">4</ref>) and guarantees ( and defined in Theorem 1), with . The approximation ratio of Algorithm 2 is also .</p><p>The proof of the theorem is given in Appendix C. Here, is the maximum ratio between the overall demands for any type of resource in any two bundles in a user's bid in . When are small constants and the provider's resource pool is relatively large compared to users' resource demands in the bundles, tends to . If further , or each user bids a single bundle, tends to .</p><p>2) Decomposition With LP Duality-Based Technique: To solve the decomposition problem ( <ref type="formula" target="#formula_5">6</ref>), we can first find all the possible integer solutions to (3) using some exhaustive search method, and then directly solve ( <ref type="formula" target="#formula_5">6</ref>) to derive the decomposition coefficients 's. However, this method has an exponential-time complexity since there are an exponential number of possible integer solutions , and hence an exponential number of variables in LP <ref type="bibr" target="#b5">(6)</ref>. We therefore resort to its dual, formulated in <ref type="bibr" target="#b6">(7)</ref>, where dual variables and associate with primal constraints (6a) and (6b), respectively maximize</p><p>(7b) Even though the dual <ref type="bibr" target="#b6">(7)</ref> has an exponential number of constraints, the ellipsoid method can be applied to solve it in polynomial time. The ellipsoid method obtains an optimal dual solution using a polynomial number of separating hyperplanes. Algorithm 2 acts as a key component of a separation oracle for generating these separating hyperplanes, and a feasible integer solution to (3) can be derived each time a separating hyperplane is generated <ref type="bibr" target="#b10">[11]</ref>. Hence, a polynomial number of candidate integer solutions 's are produced through the process of the ellipsoid method, and the primal problem (6) can be reduced to a linear program with a polynomial number of variables ( 's) corresponding to these integer solutions. Then, we can solve the reduced primal problem in polynomial time. The correctness of the above decomposition method is given in Lemma 1, with detailed proof and the construction of the separation oracle in Appendix D.</p><p>Lemma 1: The decomposition method correctly obtains a polynomial number of integer solutions to the oneround allocation problem (3) and the probabilities , which solve <ref type="bibr" target="#b5">(6)</ref>, in polynomial time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Randomized Auction</head><p>Algorithm 3 gives our randomized auction to be carried out in each round of the online algorithm in Algorithm 1. It selects an integer solution produced by the decomposition method with probability . The payment from a winning bidder satisfies two conditions: 1) The expectation of the payment should be equal to the scale-down fractional payment, , in order to remain truthfulness.</p><p>2) The payment</p><p>The main idea of improving to is as follows. If user spends a large fraction of its overall budget over time, the value of will be close to 1 upon termination of the online algorithm. In the original online algorithm in Algorithm 1, the value of is exponentially increased from 0 to 1 with the increase of budget consumption since we can prove that no matter what the final value of is, updating exponentially guarantees a good performance of the online algorithm. Now we know that will at least reach a value (computed according to the minimum budget expenditure based on the update formula of in Algorithm 1), and we can increase the value of linearly with the increase of budget consumption before it reaches , and then increase in the original way (as in Algorithm 1) afterwards. In this way, we can prove that a better competitive ratio can be achieved.</p><p>The properties achieved by are given in Theorem 7, with complete proof in Appendix H.</p><p>Theorem 7: in Algorithm 5 combining with in Algorithm 3 constitutes a truthful, individual rational, -competitive online auction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VII. PERFORMANCE EVALUATION</head><p>We evaluate our online auction design using trace-driven simulations. We investigate 23 types of VMs distributed in (default value 9) datacenters, assembled from three types of resources (CPU, RAM, and Disk capacity,</p><p>). Users' resource demands are extracted from Google cluster-usage data <ref type="bibr" target="#b32">[33]</ref>, which record jobs submitted to the Google cluster with information on their resource demands (CPU, RAM, Disk). We translate each job request in the Google data into a bidding bundle as follows: We generate a set of VMs in Table <ref type="table">I</ref> randomly that altogether can make up the resource demands in the job request; the valuation in the bidding bundle is calculated as the product of the total cost to acquire these VMs according to the VM charges in Table <ref type="table">I</ref> and a random coefficient in the range of [0.5, 2]. In this way, we obtain a pool of bidding bundles from the Google data. In each round of the online auctions, each user randomly picks (default 3) bundles in the pool, tags each VM in each bundle with a datacenter randomly selected from the datacenters, and bids the bundles. A user 's total budget is decided by multiplying the sum of valuations in all the bundles the user may bid in the rounds of auctions by a random coefficient in the range of [0.5, 1]. We also compute the total amount of resource of each type needed by all the bid bundles of users in each round, scale it down using a random factor in [0, 1], and distribute the overall amount of type-resource to datacenters evenly, to obtain the amount of available resource, , for each type of resource in each datacenter at each time. Note that we run random bundle selection for each user over rounds first to estimate users' budgets 's and available resources in the datacenters, 's, before running the experiments to evaluate our online auction with the obtained 's and 's. We suppose the maximum ratio between the overall demands for any type of resource in any two bundles in a user's bid in each time-slot , i.e., , is no larger than 2.5, by picking up bundles with similar resource demands for each user in the auctions, which we believe to reflect the reality better. We also suppose all users spend at least 70% of their respective budget.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Performance of Our Online Algorithms</head><p>We compare the performance of four algorithms: • Alloc, a pure online resource allocation algorithm, with the one-round resource allocation algorithm Algorithm 2 serving in the place of in in Algorithm 1; • Auc, our online auction algorithm presented in Section V-C, i.e., combined with in Algorithm 3; • AucBS, the online auction algorithm with the improved scale-down factor, i.e., adding the binary search in Algorithm 4 to the auction algorithm in ; • AucExt, the improved online auction algorithm with the improved scale-down factor, i.e., adding the binary search in Algorithm 4 to in the improved online auction algorithm in Algorithm 5. We compare these algorithms in different settings, based on the ratio between the offline optimal social welfare derived by solving (1) exactly and the overall social welfare produced by each online algorithm over rounds, which we refer to as the offline/online ratio. In each scenario, we repeat each experiment for 10 times to derive the average ratios.</p><p>We first compare the algorithms through varying the number of cloud users from 300 to 3000, while fixing the number of rounds , as illustrated in Fig. <ref type="figure" target="#fig_1">1</ref>(a). The offline/online ratio of Auc declines when is large , which is consistent with our theoretical analysis in Theorem 3: The larger the scale of the cloud system, the larger the value of , and consequently the better offline/online ratio results. When users' truthful resource demands and valuations are assumed available for free, the pure online resource allocation algorithm, Alloc, achieves an offline/online ratio close to 1, which shows that our online algorithm framework together with the one-round resource allocation algorithm performs closely to the offline optimum in social welfare, if all the cloud users are cooperative. AucBS achieves a better offline/online ratio as compared to Auc, revealing the usefulness of our improved scale-down factor based on the binary-search Algorithm 4 in decomposing the fractional solution into better integer solutions in practical scenarios. AucExt only slightly outperforms AucBs in this average-case ratio since its improvement mainly lies in the theoretical worst-case competitive ratio.</p><p>We next vary the total number of rounds our system is running for while fixing the number of users to 500. Suppose each round is 1 h. We observe in Fig. <ref type="figure" target="#fig_1">1(b</ref>) that the offline/online ratio of each algorithm always remains at similar levels, demonstrating the stable performance of our online algorithms regardless of the total number of rounds they are applied into.</p><p>We further evaluate the performance of AucBS when the number of bundles each user bids for in each round, , and the number of datacenters, , vary. Fig. <ref type="figure" target="#fig_1">1(c)</ref> shows that in general the performance of the improved online auction is better when the number of bundles is smaller. This can be explained as follows: The competitive ratio of our online auction (given in Theorem 5) is related to , the approximation ratio of the one-round resource allocation algorithm in Algorithm 2, which is further closely related to . When is smaller, is potentially smaller, and thus is smaller, leading to a lower competitive ratio of the online auction. In a practical cloud system, the bundles that a user bids are typically different representations of the user's same resource demands in a  time-slot, e.g., different bundles may specify different numbers of different types of VMs requested from different datacenters, which add up to a similar amount of each type of resource across different bundles, to serve the user's need in . Therefore, we do not expect a large value of at any time. When the value of is capped (e.g., to 2.5 in our simulation settings), the competitive ratio is bounded even when takes larger values, as shown by the similar offline/online ratios obtained when , or 5, respectively, in Fig. <ref type="figure" target="#fig_1">1(c</ref>). Fig. <ref type="figure" target="#fig_1">1(d)</ref> shows that when the total number of datacenters in the cloud system increases, the performance of our online auction degrades slightly because the approximation ratio of Algorithm 2 is larger when is larger. Nevertheless, we do not expect more than a few tens of datacenters in a real-world cloud system, and the offline/online ratio is still acceptable around 2.80 when is 10.</p><p>We note that the performance ratios obtained in our simulations are much smaller than the theoretical ratios computed based on Theorem 5, in the range of 6-7 under the same settings as used in our simulations. This promises the good performance of our online auction algorithm in practice.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Comparison to Existing Auction Mechanisms</head><p>Now we compare our online auction algorithm AucBS to another auction algorithm MUCA <ref type="bibr" target="#b5">[6]</ref>. The settings in MUCA are the most similar in the existing literature, which however is a one-round multi-unit combinatorial auction, where each user only demands one resource bundle . The main idea of MUCA is to calculate a virtual price for each bundle based on the amount of resource consumed by a bundle and a randomly assigned unit resource price, and to choose the winning bundle as the one with the highest cost efficiency, i.e., the highest valuation with the lowest virtual price. The competitive ratio of MUCA is</p><p>, where is the total number of available VM instances. In order to do a fair comparison between MUCA and our online algorithm, we run MUCA as a subroutine instead of in the same online algorithm framework in Algorithm 1; for multiple bundles submitted by one user, the MUCA subroutine greedily chooses the most cost-efficient available bundle.</p><p>Fig. <ref type="figure" target="#fig_0">2</ref>(a) compares AucBS and MUCA to different numbers of datacenters, . The performance of AucBS is always better than MUCA. With more datacenters, the offline/online ratio of AucBS increases slower than MUCA, exhibiting that our algorithm handles multiple datacenters better. The reason is that the competitive ratio of our algorithm mainly depends on , which increases with very slowly , while the competitive ratio of MUCA is close to , which increases significantly with .</p><p>Fig. <ref type="figure" target="#fig_0">2</ref>(b) compares the performance of both algorithms when they run for different overall time. We observe that the performance of AucBS is again better and the ratios of both algorithms are quite stable with different time lengths.</p><p>Finally, we compare our algorithm AucBS to another online auction algorithm, COCA <ref type="bibr" target="#b3">[4]</ref>. The main idea of COCA is to calculate an estimated payment for user's requested resources based on a pricing curve and accept users with positive utility as winners. The original COCA model focuses on one type of resource; for fair comparison, we extend this method to multiple types of resources and multiple resource bundles, create a pricing curve for each type of resource with a coefficient assigned following the unit price of the respective resource in real-world cloud services [34], and always choose the bundle with the largest utility for each user. Note that we simply follow the underlying pricing curve method of COCA, and assign coefficients in an intuitive fashion. In this way, the extended COCA algorithm retains similar characteristics (such as truthfulness), but its theoretical performance in social welfare is no longer guaranteed. Before presenting the simulation comparison, we compare the extended COCA algorithm and our AucBS from a theoretical perspective: the theoretical performance of COCA depends on the ratio between the highest and lowest unit valuations, while AucBS is not influenced by the distribution of user valuations. However, the performance of AucBS is negatively affected when is small (e.g., when</p><p>) since becomes larger, while the performance of COCA is the same for any values of .</p><p>We compare the offline/online ratio achieved by the two algorithms by taking the average over 10 times of run of each experiment. Fig. <ref type="figure" target="#fig_2">2(c</ref>) shows that the advantage of AucBS is clearer at larger values of . This is because more datacenters result in more types of resources (CPU/RAM/disk at different datacenters are treated as different types of resources), and COCA handles multiple types of resources in a simple intuitive fashion, which becomes less efficient when the number of types becomes larger. Fig. <ref type="figure" target="#fig_2">2(d</ref>) reveals that the performance of AucBS is again consistently better under different numbers of bundles, .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VIII. CONCLUDING DISCUSSIONS</head><p>This work presents the first online combinatorial auction for the VM market in cloud computing. It advances the state-of-the-art of cloud auction design in that all previous VM auction mechanisms are either one-round only or simplify VMs into type-oblivious good (and hence circumvent the challenge imposed by combinatorial auctions). Our online auction comprises three components. First, we design an intuition-driven primal-dual algorithm for translating the online social welfare optimization problem into a series of one-round optimizations, incurring only a small additive penalty in competitive ratio. Second, we apply a randomized auction subframework that can translate a cooperative approximation algorithm to the one-round optimization into an auction. Third, we apply a greedy primal-dual algorithm that approximates the one-round social welfare optimization. We also propose two extensions to the basic online auction framework to further improve the competitive ratio. Our overall online VM auction guarantees a theoretical competitive ratio close to 3.30 in typical scenarios, and its design may shed light on similar auction problems in related settings.</p><p>Finally, we briefly discuss practical implementation concerns of dynamic VM provisioning in real-world cloud systems. Latencies for resource partitioning are incurred for VM provisioning, which are a common issue in IaaS cloud provisioning. To realistically reduce such latencies before a VM can be ready to run, a practical solution is to maintain pools of preassembled VMs with typical resource configurations (e.g., summarized according to historical user demands) and do hotplug of CPU/RAM/disk <ref type="bibr" target="#b33">[35]</ref> upon user's requests to produce customized VMs. Hotplug of CPU and RAM is highly efficient, while the preparation for the hard disk requires longer time. Nevertheless, users' demands for disk capacity are typically more uniform than those for CPU and RAM, which allows the cloud provider to prepare some "standard" sizes of virtual disks in advance (e.g., 256 GB, 512 GB, etc.). In this way, the latency for dynamic VM provisioning can be reduced to as low as a few seconds, which is ignorable compared to the hours of VM rental periods. In addition, our work does not deal with server provisioning, according to the practical knowledge that decisions on switching servers on or off are typically made at much larger time intervals than VM provisioning, e.g., once per month or so in Amazon EC2 cloud according to discussions with Amazon employees. We plan to pursue auction mechanism design for two-time-scale decision making and resource allocation in our future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>APPENDIX A PROOF OF THEOREM 1</head><p>We prove the correctness and the competitiveness of by proving three claims.</p><p>1) At the end of the algorithm, it produces feasible solution for dual (2). 2) Let be the value of the objective function in (1) after th iteration, , the same for in dual <ref type="bibr" target="#b1">(2)</ref>. Then, satisfies , at any round.</p><p>3) The algorithm produces an almost feasible solution for primal <ref type="bibr" target="#b0">(1)</ref>. Specifically, its outputs satisfy (1a), (1c), and (1d). For constraint (1b), we achieve a slightly weaker property : For all user Proof of (1): Since no matter whether or , constraint (4a) guarantees Also notice is nondecreasing with , so (2a) holds.</p><p>Proof of ( <ref type="formula">2</ref>): At time . Substitute for , and we get claim <ref type="bibr" target="#b1">(2)</ref>. Proof of (3): Constraints (1a), (1c), (1d) are guaranteed by the constraints in <ref type="bibr" target="#b2">(3)</ref>. In order to analyze the property about constraint (1b), we prove the following: <ref type="bibr" target="#b7">(8)</ref> We prove (8) by induction. Equation (8) holds for apparently. Suppose it holds for , then for : If , the inequality holds since both sides are still the same value at time . If :</p><p>Comparing this to our target (8), obviously we only need to show: . We utilize the inequality: Since , we prove <ref type="bibr" target="#b7">(8)</ref>. Now we utilize the inequality (8) to prove claim <ref type="bibr" target="#b2">(3)</ref>. For some user , suppose is the first time . Then by <ref type="bibr" target="#b7">(8)</ref>,</p><p>. The algorithm never gives user any new bundles once , since the weight in will be set to 0. Hence, . We know is the first time user 's total winning bids exceeding its budget and finishes the proof of claim (3). Since the increment of valuation is the minimum between user's valuation and his remaining budget, total social welfare should be at least</p><p>. By claim 2:</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Algorithm 2 A</head><label>2</label><figDesc>Primal-Dual Algorithm to Solve One-round Allocation Problem (3) scaling factor, and rest assured that a feasible solution to the following decomposition problem exists:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Performance of Alloc, Auc, AucBS, and AucExt (a) under different number of users, (b) under different number of rounds, (c) with different number of bundles, and (d) with different number of datacenters.</figDesc><graphic url="image-3.png" coords="10,43.02,64.14,504.00,115.98" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Performance comparison between AucBS, MUCA, and COCA (a) under different number of datacenters, (b) under different number of rounds, (c) under different number of datacenters, and (d) under different number of bundles.</figDesc><graphic url="image-4.png" coords="10,43.02,211.14,504.00,118.98" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic url="image-2.png" coords="4,40.98,92.10,246.00,277.02" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>Manuscript received June 25, 2014; revised December 01, 2014; February 17, 2015; and May 12, 2015; accepted May 28, 2015; approved by IEEE/ACM TRANSACTIONS ON NETWORKING Editor U. Ayesta. Date of publication July 01, 2015; date of current version August 16, 2016. This work was supported in part by a grant from Hong Kong RGC under the contract HKU 718513 and NSERC Grant 10006298.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>TABLE II NOTATION</head><label>II</label><figDesc></figDesc><table /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0">The varying amounts of resources may be caused by removal or addition of servers, due to failure and recovery, or potential reservation or release of resources for special purposes, e.g., as part of a hybrid cloud of an enterprise.</note>
		</body>
		<back>

			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>M'93-SM'03) received the Ph.D. degree in computer science from the University of Waterloo, Waterloo, ON, Canada, in 1986. He has been a faculty member with the Department of Computer Science, The University of Hong Kong, Hong Kong, since 1987, where he served as the Department Chair from 2000 to 2005. He was an Honorary Chair Professor with the Institute of Theoretical Computer Science, Tsinghua University, Beijing, China, from 2007 to 2010.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Algorithm 3 One-Round Randomized Auction in 1: Solve LP relaxation of (3), with . Denote the fractional solution by . 2: Calculate the fractional payment by VCG payment rule. 3: Solve the pair of primal-dual decomposition LPs in <ref type="bibr" target="#b5">(6)</ref> and <ref type="bibr" target="#b6">(7)</ref> using the ellipsoid method, using Algorithm 2 as a separation oracle, and derive a polynomial number of integer solutions to (3), , and the corresponding decomposition coefficients . 4: Choose with probability 5:</p><p>should be no larger than 's valuation of its winning bundle in order to guarantee individual rationality. The following theorem provides the properties achieved by the randomized auction, with proof in Appendix E.</p><p>Theorem 4: runs in polynomial time and is truthful, individual rational, and -competitive. Our online auction results when we plug in the one-round randomized auction into the online algorithm framework in Algorithm 1. The competitive ratio of the online auction can be derived readily from Theorem 1 using , the competitive ratio of the one-round randomized auction given in Theorem 4.</p><p>Theorem 5: in Algorithm 1 combining with in Algorithm 3 constitutes a truthful, individual rational, -competitive online auction. The complete proof of Theorem 5 can be found in Appendix F. We note that when , the competitive ratio tends to . Following the discussions on Theorem 3 in Section V-B.1, when tends to , the competitive ratio of the online auction tends to .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Improving the Scale-Down Factor</head><p>We have decomposed the fractional solution in Section V-B after scaling it down by the approximation ratio of the one-round allocation Algorithm 2, such that a feasible solution to the decomposition problem ( <ref type="formula">6</ref>) is guaranteed. According to Theorem 5, the scale-down factor is closely related to the competitive ratio of our online auction, such that a smaller scale-down factor leads to a better competitive ratio. However, a scale-down factor smaller than may not guarantee a feasible decomposition. We therefore design a binary search algorithm in Algorithm 4 to compute the smallest scale-down factor that enables feasible decomposition.</p><p>The algorithm is designed based on a property of the scaledown factor, as given in Theorem 6 (proof in Appendix G). With its monotonicity, we can find the smallest, feasible scaledown factor using binary search (with arbitrary small error). We should note that this trial-and-error method may improve the performance of our online auction algorithm on average in practice, but does not change the theoretical competitive ratio </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Run</head><p>. Let be the set of winning users, and be the index of their corresponding winning bundle, for</p><p>. Define for all .</p><p>end for in Theorem 5 in the worst case. We will investigate the effectiveness of the improved scale-down factor in our trace-driven simulations.</p><p>Theorem 6: If the fractional allocation can be decomposed under scale-down factor , then it can also be decomposed under any factor .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. IMPROVEMENT OF THE ONLINE ALGORITHM FRAMEWORK WITH MINIMUM BUDGET SPENDING</head><p>In this section, we propose an improvement of the online algorithm framework when additional information on users' budget spending is available <ref type="bibr" target="#b9">[10]</ref>. Suppose that each user's total spending over rounds is at least a fraction of its budget. Specifically, user is going to use at least an amount of its overall budget, where . When this minimum budget spending guarantee is in place, we design an improved online algorithm framework , as given in Algorithm 5. We show that this improved online algorithm can achieve a better worst-case competitive ratio , where is the minimum budget spending fraction among all users, as compared to the competitive ratio of the original online auction given in Theorem 5. For example, in the case that , the additive loss in the competitive ratio brought by , as compared to the one-round auction , is ; if we know that all users are going to spend at least % of their respective budget, the additive loss brought by the improved online auction is approximately 0.099.</p><p>, and recall , we have . Thus, the social welfare is at least . By duality, the approximation ratio of is .</p><p>APPENDIX B PROOF OF THEOREM 2 Suppose user 's bid is , then we can calculate the value of by definition. We omit this calculation process in our proof and directly assume that user submits bid and other users submit bids . Then, according to the payment rule , user 's utility can be calculated as:</p><p>. is calculated by maximizing , which is the total social welfare. Hence, is greater than because the latter is the maximum social welfare with the same amount of resources and one less user. Thus, . Next we compare the utility under the truthful bid and a false bid. Suppose user submits a false bid . Then, the fractional allocation decision becomes . His utility under false bid is calculated similarly:</p><p>The difference of these two utilities is Again, maximizes social welfare, so , and .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>APPENDIX C PROOF OF THEOREM 3</head><p>Constraints (3a) and (3c) are obviously never violated. We study the constraint (3b). Suppose in iteration is the first bid that violates constraint (3b) when added to the allocation. This means such that . We know , so . Hence, .</p><p>, where represents the value of before iteration . Thus, constraint (3b) is never violated. The feasibility of the dual (4) is more complicated because the solution is not always feasible during the iterations. However, the dual variables are feasible after scaling down, which is described in the following lemma.</p><p>Lemma 2: If is the dual solution before iteration , then is a feasible solution to the dual (4), where is defined as , and is the set of is the selected user in iteration .</p><p>Proof: We have . Note that we choose the by choosing the maximum ratio of and a summation. Therefore, , and . So: . Thus, is feasible to dual (4). Now we are ready to prove the final conclusion of Theorem 3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Let</head><p>. Let be the optimal solution to the dual (4). Let be the bundle selected in iteration . Totally iterations are executed.</p><p>Case . Hence, . We utilize the inequality:</p><p>here, and repeat this process: . Note that and , so . Hence, . Also note that . According to the weak duality, this finishes the proof of Theorem 3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>APPENDIX D SEPARATION ORACLE AND PROOF OF LEMMA 1</head><p>First, we describe the separation oracle. In each iteration of the ellipsoid method, a possible solution of <ref type="bibr" target="#b6">(7)</ref> is generated, and is given as the input of the seperation oracle. The separation oracle we present in Algorithm 6 judges whether this solution is feasible. If it is not feasible, the oracle returns a conflict constraint as the separation plane, i.e., a set of . We use as the separation plane. If the objective value is larger than 1, we need to find a set of that satisfies . Remember the input and makes the objective value larger than 1:</p><p>. Hence, we find a conflict constraint if we can find satisfies . Return "NO" and 7: EndIf</p><p>The following is the detailed proof of Lemma 1. We first show that for any , we can find in polynomial time a feasible integer allocation such that . Note the here can be negative value, so we cannot invoke directly. So we define</p><p>. Then, we use , with input vector to get satisfying . Also note that satisfies . Thus, we find an integer solution . Next we show the optimal value of (7), and hence of ( <ref type="formula">6</ref>) is exactly 1. Here is a feasible solution with value 1:</p><p>, so the optimal value is at least 1. Then, we claim that it is at most 1: suppose . Then, we can find an integer solution using the previous method such that , which contradicts constraint (7a). Finally we show the function of our designed oracle is correct. Two cases are obvious: objective value equals 1 and smaller than 1. When larger than 1, the oracle generates and calls . The correctness of this method has been discussed. Therefore, this oracle solves <ref type="bibr" target="#b6">(7)</ref> as we expect.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>APPENDIX E PROOF OF THEOREM 4</head><p>We calculate the expectation of his utility:</p><p>. His utility cannot be increased by false bid. Hence, the scaled-down auction is also truthful. The social welfare under the fractional VCG auction is . Now we calculate the expected social welfare under randomized auction:</p><p>. This proves the competitive ratio since the social welfare under optimal fractional solution is larger than under integer solution. Next we show the individual rationality. First note that the definition guarantees . Then, we calculate user 's utility under random choice .</p><p>In order to prove , we only need to prove .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>APPENDIX F PROOF OF THEOREM 5</head><p>The only difference between Theorems 5 and 1 is we introduce randomness here. Recall the proof of Theorem 1, the only claim affected by randomness is claim <ref type="bibr" target="#b1">(2)</ref>. We analyze the expectation of the increment on the primal and dual and . At time . , which finishes our proof.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>APPENDIX G PROOF OF THEOREM 6</head><p>Suppose with scale-down ratio is decomposed into a set of integer allocations . Then, . We obtain ratio by adding a "zero" allocation into the decomposition set . The possibilities are adjusted:</p><p>. The possibility of the "zero" allocation is . We can verify that the new decomposition set, with new possibilities is a decomposition for ratio .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>APPENDIX H PROOF OF THEOREM 7</head><p>First we prove to be at least . Whenever , we update by:</p><p>. Its total valuation is , and we have . Then, we prove the three claims just similar to the proof in Appendix A. Proofs of the first two claims are trivially similar. Now we prove the third claim by inductively prove the following inequality relation: Suppose user has spent fraction of budget. If . If</p><p>. The first case is proved by monotonicity. The second case can be proved by induction, similar to Appendix A.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Amazon Elastic Compute Cloud</title>
		<ptr target="http://aws.amazon.com/ec2/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Windows Azure</title>
		<ptr target="http://www.windowsazure.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Core-selecting auction design for dynamically allocating heterogeneous VMs in cloud computing</title>
		<author>
			<persName><forename type="first">H</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Wu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE CLOUD</title>
				<meeting>IEEE CLOUD</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="152" to="159" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A framework for truthful online auctions in cloud computing with heterogeneous user demands</title>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE IN-FOCOM</title>
				<meeting>IEEE IN-FOCOM</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="1510" to="1518" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Amazon EC2 spot instances</title>
		<ptr target="http://aws.amazon.com/ec2/spot-instances/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">When cloud meets eBay: Towards effective pricing for cloud computing</title>
		<author>
			<persName><forename type="first">Q</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Meng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE INFOCOM</title>
				<meeting>IEEE INFOCOM</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="936" to="944" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Combinatorial auction-based mechanisms for VM provisioning and allocation in clouds</title>
		<author>
			<persName><forename type="first">S</forename><surname>Zaman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Grosu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE/ACM CCGrid</title>
				<meeting>IEEE/ACM CCGrid</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="729" to="734" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Dynamic resource provisioning in cloud computing: A randomized auction approach</title>
		<author>
			<persName><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Wu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE INFOCOM</title>
				<meeting>IEEE INFOCOM</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="433" to="441" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Revenue maximization with dynamic auctions in IaaS cloud markets</title>
		<author>
			<persName><forename type="first">W</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE ICDCS</title>
				<meeting>IEEE ICDCS</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Online primal-dual algorithms for maximizing ad-auctions revenue</title>
		<author>
			<persName><forename type="first">N</forename><surname>Buchbinder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">S</forename><surname>Naor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Annu. Eur. Symp</title>
				<meeting>Annu. Eur. Symp</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="253" to="264" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Truthful and near-optimal mechanism design via linear programming</title>
		<author>
			<persName><forename type="first">R</forename><surname>Lavi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Swamy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE FOCS</title>
				<meeting>IEEE FOCS</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="595" to="604" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Truthful spectrum auction design for secondary networks</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE INFOCOM</title>
				<meeting>IEEE INFOCOM</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="873" to="881" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Auction-based P2P VoD streaming: Incentives and optimal scheduling</title>
		<author>
			<persName><forename type="first">C</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Qiu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">C M</forename><surname>Lau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Trans. Multimedia Comput., Commun., Appl</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">15</biblScope>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
	<note>no 14</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">TRAC: Truthful auction for location-aware collaborative sensing in mobile crowdsourcing</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">M</forename><surname>Ni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">V</forename><surname>Vasilakos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE INFOCOM</title>
				<meeting>IEEE INFOCOM</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="1231" to="1239" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Counterspeculation, auctions, and competitive sealed tenders</title>
		<author>
			<persName><forename type="first">W</forename><surname>Vickrey</surname></persName>
		</author>
		<idno type="DOI">10.1111/j.1540-6261.1961.tb02789.x</idno>
	</analytic>
	<monogr>
		<title level="j">J. Finance</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="1961">1961</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Computationally manageable combinational auctions</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">H</forename><surname>Rothkopf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Pekeč</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">M</forename><surname>Harstad</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Manage. Sci</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="1131" to="1147" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Truthful approximation mechanisms for restricted combinatorial auctions</title>
		<author>
			<persName><forename type="first">A</forename><surname>Mu'alem</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Nisan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Games Econ. Behav</title>
		<imprint>
			<biblScope unit="volume">64</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="612" to="631" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Truth revelation in approximately efficient combinatorial auctions</title>
		<author>
			<persName><forename type="first">D</forename><surname>Lehmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">I</forename><surname>Oćallaghan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Shoham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. ACM</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="577" to="602" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Incentive-compatible online mechanism for resource provisioning and allocation in cloud</title>
		<author>
			<persName><forename type="first">L</forename><surname>Mashayekhy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M</forename><surname>Nejad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Grosu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">V</forename><surname>Vasilakos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE CLOUD</title>
				<meeting>IEEE CLOUD</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="312" to="319" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Defragmenting the cloud using demand-based resource allocation</title>
		<author>
			<persName><forename type="first">G</forename><surname>Shanmuganathan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Gulati</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Varman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIG-METRICS</title>
				<meeting>ACM SIG-METRICS</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="67" to="80" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Algorithmic Game Theory</title>
		<author>
			<persName><forename type="first">N</forename><surname>Nisan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007">2007</date>
			<publisher>Cambridge Univ. Press</publisher>
			<pubPlace>Cambridge, U.K.</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Competitive analysis of incentive compatible on-line auctions</title>
		<author>
			<persName><forename type="first">R</forename><surname>Lavi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Nisan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM EC</title>
				<meeting>ACM EC</meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="233" to="241" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Network aware resource allocation in distributed clouds</title>
		<author>
			<persName><forename type="first">M</forename><surname>Alicherry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Lakshman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE INFOCOM</title>
				<meeting>IEEE INFOCOM</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="963" to="971" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Stochastic models of load balancing and scheduling in cloud computing clusters</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">T</forename><surname>Maguluri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Srikant</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Ying</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE INFOCOM</title>
				<meeting>IEEE INFOCOM</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="702" to="710" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Managing performance overhead of virtual machines in cloud computing: A survey, state of the art, and future directions</title>
		<author>
			<persName><forename type="first">F</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">V</forename><surname>Vasilakos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE</title>
				<meeting>IEEE</meeting>
		<imprint>
			<date type="published" when="2014-01">Jan. 2014</date>
			<biblScope unit="volume">102</biblScope>
			<biblScope unit="page" from="11" to="31" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">GreenDCN: A general framework for achieving energy efficiency in data center networks</title>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE J. Sel. Areas Commun</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="4" to="15" />
			<date type="published" when="2014-01">Jan. 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Joint virtual machine assignment and traffic engineering for green data center networks</title>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">V</forename><surname>Vasilakos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Hou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Perform. Eval. Rev</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="107" to="112" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">iAware: Making live migration of virtual machines interference-aware in the cloud</title>
		<author>
			<persName><forename type="first">F</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Comput</title>
		<imprint>
			<biblScope unit="volume">63</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="3012" to="3025" />
			<date type="published" when="2013-12">Dec. 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">On arbitrating the power-performance tradeoff in SaaS clouds</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE INFOCOM</title>
				<meeting>IEEE INFOCOM</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="872" to="880" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">A cooperative game based allocation for sharing data center networks</title>
		<author>
			<persName><forename type="first">J</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Zeng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Lui</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Jin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE IN-FOCOM</title>
				<meeting>IEEE IN-FOCOM</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="2139" to="2147" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">A column generation method for the multiple-choice multi-dimensional Knapsack problem</title>
		<author>
			<persName><forename type="first">N</forename><surname>Cherfi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hifi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Optimiz. Appl</title>
		<imprint>
			<biblScope unit="volume">46</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="51" to="73" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Complexity of approximation algorithms for combinatorial problems: A survey</title>
		<author>
			<persName><forename type="first">G</forename><surname>Gens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Levner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGACT News</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="52" to="65" />
			<date type="published" when="1980">1980</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Google cluster data</title>
		<ptr target="http://www.cloudsigma.com" />
	</analytic>
	<monogr>
		<title level="m">CloudSigma: Cloud servers on a powerful IaaS platform</title>
				<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Weijie Shi (S&apos;14) received the B.E. degree in computer science and technology from Tsinghua University</title>
		<author>
			<persName><forename type="first">"kvm Cpu</forename><surname>Hotplug</surname></persName>
		</author>
		<ptr target="http://www.linux-kvm.org/page/CPUHotPlug" />
	</analytic>
	<monogr>
		<title level="m">His research interests include cloud computing and mechanism design</title>
				<meeting><address><addrLine>Beijing, China; Hong Kong</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
		<respStmt>
			<orgName>University of Hong Kong</orgName>
		</respStmt>
	</monogr>
	<note>and is currently pursuing the Ph.D. degree in computer science at the</note>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<author>
			<persName><forename type="first">Linquan</forename><surname>Zhang</surname></persName>
			<affiliation>
				<orgName type="collaboration">game theory</orgName>
			</affiliation>
		</author>
		<title level="m">2010, and the M.Phil. degree in computer science from the University of Hong Kong</title>
				<meeting><address><addrLine>Beijing, China; Hong Kong; Calgary, AB, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
		<respStmt>
			<orgName>computer science and technology from Tsinghua University ; University of Calgary</orgName>
		</respStmt>
	</monogr>
	<note>His research interests are mainly in cloud computing</note>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">She is currently an Associate Professor with the</title>
		<author>
			<persName><forename type="first">Chuan</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">;</forename><forename type="middle">B E</forename></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">E</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2000 and 2002, respectively, and the Ph.D. degree in electrical and computer engineering from the University of Toronto</title>
				<meeting><address><addrLine>Beijing, China; Toronto, ON, Canada; Hong Kong</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
		<respStmt>
			<orgName>degrees in computer science and technology from Tsinghua University ; Department of Computer Science, The University of Hong Kong</orgName>
		</respStmt>
	</monogr>
	<note>Her research interests include cloud computing and online/mobile social network</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
