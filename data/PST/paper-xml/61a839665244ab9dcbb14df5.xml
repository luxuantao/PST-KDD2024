<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">SHOW YOUR WORK: SCRATCHPADS FOR INTERMEDI-ATE COMPUTATION WITH LANGUAGE MODELS</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2021-11-30">30 Nov 2021</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Maxwell</forename><surname>Nye</surname></persName>
							<email>mnye@mit.edu.max</email>
						</author>
						<author>
							<persName><forename type="first">Anders</forename><forename type="middle">Johan</forename><surname>Andreassen</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Google Research</orgName>
								<orgName type="institution">Blueshift Team</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Guy</forename><surname>Gur-Ari</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Google Research</orgName>
								<orgName type="institution">Blueshift Team</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Henryk</forename><surname>Michalewski</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Google Research</orgName>
								<address>
									<country>Brain Team</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Jacob</forename><surname>Austin</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Google Research</orgName>
								<address>
									<country>Brain Team</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">David</forename><surname>Bieber</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Google Research</orgName>
								<address>
									<country>Brain Team</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">David</forename><surname>Dohan</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Google Research</orgName>
								<address>
									<country>Brain Team</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Aitor</forename><surname>Lewkowycz</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Google Research</orgName>
								<orgName type="institution">Blueshift Team</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Maarten</forename><surname>Bosma</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Google Research</orgName>
								<address>
									<country>Brain Team</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">David</forename><surname>Luan</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Google Research</orgName>
								<address>
									<country>Brain Team</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Charles</forename><surname>Sutton</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Google Research</orgName>
								<address>
									<country>Brain Team</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Augustus</forename><surname>Odena</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Google Research</orgName>
								<address>
									<country>Brain Team</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><surname>Mit</surname></persName>
						</author>
						<title level="a" type="main">SHOW YOUR WORK: SCRATCHPADS FOR INTERMEDI-ATE COMPUTATION WITH LANGUAGE MODELS</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2021-11-30">30 Nov 2021</date>
						</imprint>
					</monogr>
					<idno type="arXiv">arXiv:2112.00114v1[cs.LG]</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2022-12-25T13:23+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Large Language Model state: {} line: def remove_Occ(s</term>
					<term>ch): state: {&quot;remove_Occ&quot;: &quot;&lt;callable_object remove_Occ&gt;&quot;} line: output = remove_Occ(&quot;PHP&quot;</term>
					<term>&quot;P&quot;) state: {&quot;ch&quot;: &quot;P&quot;</term>
					<term>&quot;s&quot;: &quot;PHP&quot;} line: for i in range(len(s)): state: {&quot;ch&quot;: &quot;P&quot;</term>
					<term>&quot;s&quot;: &quot;PHP&quot;</term>
					<term>&quot;i&quot;: 0} line: if (s[i] == ch): state: {&quot;ch&quot;: &quot;P&quot;</term>
					<term>&quot;s&quot;: &quot;PHP&quot;</term>
					<term>&quot;i&quot;: 0} line: s = s[0 : i] + s[i + 1:] state: {&quot;ch&quot;: &quot;P&quot;</term>
					<term>&quot;s&quot;: &quot;HP&quot;</term>
					<term>&quot;i&quot;: 0} line: break state: {&quot;ch&quot;: &quot;P&quot;</term>
					<term>&quot;s&quot;: &quot;HP&quot;</term>
					<term>&quot;i&quot;: 0} line: for i in range(len(s) -1</term>
					<term>-1</term>
					<term>-1): state: {&quot;ch&quot;: &quot;P&quot;</term>
					<term>&quot;s&quot;: &quot;HP&quot;</term>
					<term>&quot;i&quot;: 1} line: if (s[i] == ch): state: {&quot;ch&quot;: &quot;P&quot;</term>
					<term>&quot;s&quot;: &quot;HP&quot;</term>
					<term>&quot;i&quot;: 1} line: s = s[0 : i] + s[i + 1:] state: {&quot;ch&quot;: &quot;P&quot;</term>
					<term>&quot;s&quot;: &quot;H&quot;</term>
					<term>&quot;i&quot;: 1} line: break state: {&quot;ch&quot;: &quot;P&quot;</term>
					<term>&quot;s&quot;: &quot;H&quot;</term>
					<term>&quot;i&quot;: 1} line: return s state: {&quot;remove_Occ&quot;: &quot;&lt;callable_object remove_Occ&gt;&quot;</term>
					<term>&quot;output&quot;: &quot;H&quot;}</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Large pre-trained language models perform remarkably well on tasks that can be done "in one pass", such as generating realistic text <ref type="bibr" target="#b5">(Brown et al., 2020)</ref> or synthesizing computer programs <ref type="bibr" target="#b6">(Chen et al., 2021;</ref><ref type="bibr" target="#b1">Austin et al., 2021)</ref>. However, they struggle with tasks that require unbounded multi-step computation, such as adding integers <ref type="bibr" target="#b5">(Brown et al., 2020)</ref> or executing programs <ref type="bibr" target="#b1">(Austin et al., 2021)</ref>. Surprisingly, we find that these same models are able to perform complex multistep computations-even in the few-shot regime-when asked to perform the operation "step by step", showing the results of intermediate computations. In particular, we train Transformers to perform multi-step computations by asking them to emit intermediate computation steps into a "scratchpad". On a series of increasingly complex tasks ranging from long addition to the execution of arbitrary programs, we show that scratchpads dramatically improve the ability of language models to perform multi-step computations.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Large Transformer-based language models exhibit surprisingly impressive capabilities <ref type="bibr" target="#b9">(Devlin et al., 2019;</ref><ref type="bibr" target="#b5">Brown et al., 2020)</ref>, including the ability to generate code that solves simple programming problems <ref type="bibr" target="#b6">(Chen et al., 2021;</ref><ref type="bibr" target="#b1">Austin et al., 2021)</ref>. However, these models struggle to perform multistep algorithmic calculations, especially those that require precise reasoning and unbounded computation. For example, GPT-3 struggles to perform few-shot addition on numbers with greater than three digits <ref type="bibr" target="#b5">(Brown et al., 2020)</ref>. Similarly, large-scale language models struggle to predict the result of executing Python code, even code which is a solution to a programming task the model is able to solve <ref type="bibr" target="#b1">(Austin et al., 2021)</ref>. Likewise, standard recurrent and graph neural networks fail to systematically generalize when predicting the output of simple programs with loops <ref type="bibr" target="#b4">(Bieber et al., 2020)</ref>. So language models can to some extent write code, but do not seem to accurately represent the semantics of the code they write, because they cannot predict its execution. This has motivated research on networks that can perform algorithmic reasoning <ref type="bibr" target="#b11">(Graves et al., 2014;</ref><ref type="bibr" target="#b27">Zaremba &amp; Sutskever, 2014;</ref><ref type="bibr" target="#b4">Bieber et al., 2020)</ref>. Neural networks that accurately represent the semantics of programs could enable a variety of downstream tasks, including program synthesis <ref type="bibr" target="#b8">(Devlin et al., 2017)</ref>, program analysis <ref type="bibr" target="#b0">(Allamanis et al., 2018)</ref>, and other algorithmic reasoning tasks <ref type="bibr" target="#b22">(Velickovic &amp; Blundell, 2021)</ref>.</p><p>Why do large language models struggle with algorithmic reasoning tasks? We suggest that this is at least partly due to a limitation of the way the Transformer architecture is applied to these tasks: the Fill in the ??? below: assert remove_Occ("PHP","P") == ??? assert remove_Oct("PHP", "P") == "H"</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DIRECT EXECUTION PREDICTION SCRATCHPAD TRACING</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Large Language Model</head><p>Figure <ref type="figure">1</ref>: Overview of our scratchpad approach applied to predicting code execution and comparison to direct execution prediction. Top: Previous work has shown that large pre-trained models achieve poor performance when asked to directly predict the result of executing given computer code <ref type="bibr" target="#b1">(Austin et al., 2021)</ref>. Bottom: In this work, we show that training models to use a scratchpad and predict the program execution trace line-by-line can lead to large improvements in execution prediction performance. N.B. Although the example above only has one loop iteration for each loop, all loops are unrolled across time.</p><p>model is asked to perform these tasks in one forward pass. Given a fixed number of layers and a fixed amount of computation time, the model cannot adapt the amount of compute spent on a problem to its difficulty before producing an output. 1 Prior work <ref type="bibr" target="#b10">(Graves, 2016;</ref><ref type="bibr">Banino et al., 2021)</ref> has explored neural architectures that explicitly allow for dynamically chosen amounts of computation time to be dedicated to different sub-tasks. In this work, we propose a different approach-one that can exploit existing Transformer architectures and large few-shot-capable language models-we modify the task design rather than the model or training procedure.</p><p>Our proposal is simple: Allow the model to produce an arbitrary sequence of intermediate tokens, which we call a scratchpad, before producing the final answer. For example, on addition problems, the scratchpad contains the intermediate results from a standard long addition algorithm (see Figure <ref type="figure">2</ref>). To train the model, we encode the intermediate steps of the algorithm as text and use standard supervised training.</p><p>This paper makes the following contributions:</p><p>• We introduce (Section 2) the notion of a "scratchpad" for Transformers, in order to make them better at performing complex discrete computations without modifying the underlying architecture.</p><p>1 Transformers perform a computation which is quadratic in the length of the input sequence, so are theoretically unable to perfectly simulate algorithms which have greater time complexity than O(n 2 ). However, it is unclear how relevant this theoretical bound is in practice; neural sequence prediction is approximate, and Transformers may be large enough in practice to effectively memorize the correct solutions for a relevant subspace of the possible inputs (e.g., all inputs up to a certain size).</p><p>• We show (Section 3) that scratchpads help Transformers learn to perform long addition in the fine-tuning regime, and in particular that they improve out-of-distribution generalization to larger problem instances.</p><p>• We also find (Section 4) that scratchpads help Transformers perform a somewhat higher level task: polynomial evaluation. This is true in both the few-shot and fine-tuning regimes.</p><p>• Finally, we move to a much more general context and show (Section 5) that training Transformers to emit full program traces line by line annotated with local variables dramatically improves their ability to predict the result of executing a given computer program on a particular input. This application in some sense subsumes the others.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">METHOD</head><p>In this work we consider two related problems: algorithm induction <ref type="bibr" target="#b11">(Graves et al., 2014;</ref><ref type="bibr" target="#b10">2016;</ref><ref type="bibr" target="#b13">Kurach et al., 2016;</ref><ref type="bibr" target="#b12">Kaiser &amp; Sutskever, 2016)</ref> and learning to execute <ref type="bibr" target="#b27">(Zaremba &amp; Sutskever, 2014;</ref><ref type="bibr" target="#b4">Bieber et al., 2020)</ref>. The goal of both problems is for the neural network to learn to emulate a function f , which is "algorithmic" in the sense that it can be represented by a short program, such as addition or polynomial evaluation, from input-output behavior. In neural algorithm induction, the goal is to learn a single algorithm, and each training example gives a single input and desired output represented as strings. Therefore, the training data is</p><formula xml:id="formula_0">D = {x i , f (x i )} N i=1 .</formula><p>For learning to execute, we want the model to produce the result of a program, represented as source code, on some input. If each π i is the source code of a program f i , then the training data is</p><formula xml:id="formula_1">D = {(π i , x i , f i (x i ))} N i=1</formula><p>(it is common for each f i to have multiple input-output examples, but we omit this to lighten notation).</p><p>The main idea of this paper is that to solve a given algorithmic task, we simply encode the intermediate steps of the algorithm as text and train the model to emit them to a buffer that we call a "scratchpad." For example, let us consider the algorithmic induction task of learning long addition. To teach a model to add 29 to 57, a training example may look like the text in Figure <ref type="figure">2</ref>, where the steps of the grade-school long addition algorithm are written out explicitly.</p><p>Input: 2 9 + 5 7 Target: &lt;scratch&gt; 2 9 + 5 7 , C: 0 2 + 5 , 6 C: 1 # added 9 + 7 = 6 carry 1 , 8 6 C: 0 # added 2 + 5 + 1 = 8 carry 0 0 8 6 &lt;/scratch&gt; 8 6</p><p>Figure <ref type="figure">2</ref>: Example of input and target for addition with a scratchpad. The carry is recorded in the digit following "C:". Comments (marked by #) are added for clarity and are not part of the target.</p><p>Learning to execute tasks can be encoded in a similar way, except now we add the source code π i before the input, scratchpad, and desired output. An example of a training example for a learning to execute task is shown in Figure <ref type="figure">1</ref>.</p><p>At training time, the model will be given the input plus target for standard likelihood-based training. At test time, the model will be given only the input and will be required to predict the target, e.g., by beam search or temperature sampling. In principle, any sequence model could be used for this. In this work, we choose to use decoder-only Transformer language models, but other sequence models could be effective, such as encoder-decoder models <ref type="bibr" target="#b18">(Raffel et al., 2019)</ref>, or recurrent networks.</p><p>Adding a scratchpad has several potential advantages: First, the model has adaptive computation time, that is, it can now process the information for as long as needed, depending on the complexity of the task given the input. Second, the model can store the intermediate state of its computation in the scratch buffer and refer back to it by attending to its context. This removes the need to store all intermediate state in activations. Third, by forcing the model to output concrete intermediate states by sampling from the generative model, we aim to reduce the propagation and compounding of small errors, because states are quantized to token embeddings. Compounded errors can show up in methods-like Neural Turing Machines <ref type="bibr" target="#b11">(Graves et al., 2014)</ref>-that use recurrence to support extended computations. Finally, examining a model's scratchpad output can help us identify common errors and correct them by revising the scratchpad format. We found this ability to interpret errors to be useful in this work. For all experiments, we used pre-trained dense decoder-only Transformer language models, ranging in size from 2 million to 137 billion parameters. These models were pre-trained on web documents and dialog data, and correspond to the models used in <ref type="bibr" target="#b1">Austin et al. (2021)</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">ADDITION</head><p>As a first task, we consider integer addition. The baseline addition task presents two numbers as the input, and the target is their sum. For example:<ref type="foot" target="#foot_0">2</ref> </p><p>Input: 2 9 + 5 7 Target: 8 6</p><p>We implement the scratchpad by including the intermediate steps of the long addition algorithm in the target, as in Figure <ref type="figure">2</ref>. We train several models on integer addition problems with inputs that have 1-8 digits. We then test performance on in-distribution addition problems (with up to 8 digit inputs), and on out-of-distribution problems with 9 and 10 digit inputs. The models were fine-tuned on 100k examples for 5k steps with batch size 32. There are 10k in-distribution test examples, and 1k test examples for each out-of-distribution task. We examine the performance as a function of model size, ranging from 2M to 1B parameters. We compare performance to a baseline which includes the input and target numbers, but no intermediate scratchpad steps.</p><p>Results Figure <ref type="figure" target="#fig_0">3</ref> compares the performance of the scratchpad algorithm with the baseline. We see that beyond a critical model size, models are able to solve the addition task using the scratchpad, while models trained without a scratchpad fail to do so even at the largest tested scale. On the out-ofdistribution tasks (9-10 digit addition), we find that models trained without scratchpad completely fail, while models trained with scratchpad show consistent improvement as a function of model size.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">POLYNOMIAL EVALUATION</head><p>Next we focus on a slightly higher-level task: evaluating polynomials. Inspired by the "polynomial evaluation" subproblem in <ref type="bibr" target="#b20">Saxton et al. (2019)</ref>, we generate a dataset of polynomials of degree less than or equal to three, with integer coefficients and inputs constrained to the range [−10, 10]. We also restrict outputs to the range [−1000, 1000]. We generate a training dataset of 10,000 polynomials and a test dataset of size 2,000. An example scratchpad target for this task is shown in Figure <ref type="figure" target="#fig_1">4</ref>, with each term of the polynomial evaluated separately. As in the previous section, we compare the results of direct execution with the results of using the scratchpad. In this experiment, we evaluate in the few-shot regime using a 137B parameter pre-trained decoder-only model, as previous work indicates that very large models may be able to perform additions and multiplications with 3 or fewer digits few-shot <ref type="bibr" target="#b5">(Brown et al., 2020)</ref>. We use n = 4 example problems in the few-shot prompt. We also evaluate in the fine-tuning regime with an 8B parameter model fine-tuned for 2000 steps on the training set. The results of both evaluations are shown in Table <ref type="table" target="#tab_1">1</ref>. We find that scratchpad execution outperforms direct execution significantly in both the few-shot and fine-tuning regimes.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">EXECUTING PYTHON PROGRAMS</head><p>We have shown that scratchpads can help algorithm induction, that is, they can help models learn to implement a particular algorithm with direct algorithm-specific supervision. But needing to handdesign the intermediate states for every new task is sub-optimal. In this section, we evaluate whether a model can learn to implement a new algorithm by executing arbitrary code. To test this capability, we follow the problem setup from <ref type="bibr" target="#b1">Austin et al. (2021)</ref>, in which language models are asked to predict the result of executing a given Python program on a particular input. Language models performed poorly at this task, even on programs which are solutions to a programming tasks the model is able to solve. Here we show that the scratchpad technique can dramatically improve the ability of language models to execute programs.</p><p>Direct execution prediction Our main baseline is the direct execution prediction procedure explored in <ref type="bibr" target="#b1">Austin et al. (2021)</ref>. Models are shown the source code for a function, and asked to predict the output of running the function on specific inputs. For example, the function in Figure <ref type="figure">1</ref> takes as input a string s and a character ch, and removes the first and last instances of the character ch from the string s. The direct execution prompt and target for this task are shown in the "Direct Execution Prediction" box in Figure <ref type="figure">1</ref>. A task is considered solved under this regime if the model correctly outputs the target string.</p><p>Execution prediction via scratchpad tracing As discussed above, direct execution prediction requires the model to correctly output the result of executing the entire function in a single pass. Direct execution prediction has been shown to perform poorly on Python programs in <ref type="bibr" target="#b1">Austin et al. (2021)</ref>. We therefore design a scratchpad formulation of the execution task, in which models predict the output of a program by first predicting the sequence of intermediate states computed during the program's execution. Formally, we train models to predict an alternating sequence of 1) the ordered sequence of source code lines executed, and 2) the state of the local variables after each line is executed. We call this object the program's trace, and it allows us to track both the control flowthe sequence of operations executed-and how the state changes as a result of each operation. We represent the trace as a string, with the line of code reproduced directly, and the state information represented as a JSON dictionary.<ref type="foot" target="#foot_1">3</ref> For example, the "Scratchpad Tracing" box in Figure <ref type="figure">1</ref> contains the tracing prompt and trace target for the function discussed above.</p><p>Concretely, for each function to be traced, the prompt is formed by printing the function definition, followed by a line which calls the function on a particular input: output = fn name(input value), where fn name and input value are replaced with the corresponding function name and input value. In Figure <ref type="figure">1</ref>, note how the correct output of remove Occ("PHP","P") is shown in the last line of the trace, assigned to the variable "output". A tracing example is considered to have the correct execution output if the encoding of the value assigned to the variable output in the last line is a semantic match with the target output value (here, "output": "P"). We consider a task to be executed correctly if all given input-output examples are correctly executed. We can also test  whether there is a "trace exact match" between the model prediction and the ground truth trace, by a) semantically comparing each state in the trace to the corresponding state in the ground truth trace, and b) comparing the sequence of source code lines predicted with the ground truth sequence.</p><p>Experimental setup As a proof-of-concept, we first show that scratchpad tracing greatly improves execution performance on synthetic Python data. Then, we compare scratchpad tracing and execution on the human-written Python problems from <ref type="bibr" target="#b1">Austin et al. (2021)</ref>. We find that a novel data augmentation technique that uses programs generated by the model as additional training data can significantly increase tracing performance on real data, whereas this augmentation technique hurts performance for direct execution. Finally, we show that incorporating tracing data from additional sources further improves tracing performance, indicating that the scratchpad tracing technique explored here may scale well with more data.</p><p>For all experiments on Python code, we use a Transformer model with around 137 billion parameters, a context window of 1024 tokens and a limit of 512 generation tokens. Unless otherwise stated, all fine-tuning runs used a batch size of 8192 tokens and a learning rate of 3e-5, and model inference was performed with decoding temperature set to T = 0, equivalent to greedy decoding.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">SCRATCHPAD BEATS DIRECT EXECUTION FOR SYNTHETIC PYTHON PROGRAMS</head><p>In our first experiment, we test the few-shot and fine-tuned execution capabilities of our models on simple synthetic Python programs. This provides a proof-of-concept for our tracing technique.</p><p>We use a dataset of synthetic Python programs modified from <ref type="bibr" target="#b4">Bieber et al. (2020)</ref>. These programs include small integers (0, 1, and 2), simple while loops, and if statements. We construct a corpus of synthetic programs to mimic the size of the MBPP dataset in <ref type="bibr" target="#b1">Austin et al. (2021)</ref>, with 400 training programs, 100 validation programs, and 200 test programs. For each program, three random integer inputs are sampled from the range 0 to 9.</p><p>We test execution and scratchpad tracing under both few-shot and fine-tuning conditions. For fewshot experiments, the prompt contains three examples of previous tracing problems, as shown in Appendix C. For fine-tuned experiments, we fine-tune models to convergence on the training split, as judged by validation perplexity.</p><p>For the few-shot scratchpad experiment, we noticed that models would not assign the variable name output to the final value in the trace, and would instead continue using v0 (the name of the variable returned in the function f) as the variable name for the final output line. We therefore modified the accuracy criterion from checking whether the value of output in the last line of the trace is correct, to checking whether the value of v0 is correct. (Under naive scoring, the few-shot tracing accuracy is roughly zero.) An example of this behavior is shown in Appendix D.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Results</head><p>Table <ref type="table" target="#tab_2">2</ref> shows our results on synthetic Python problems. In both few-shot and fine-tuned settings, the scratchpad tracing technique leads to higher overall execution accuracy on the 200 test problems. Fine-tuning also improves performance more for the scratchpad tracing technique than it does for direct execution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">SCRATCHPAD BEATS DIRECT EXECUTION FOR REAL PROGRAMS</head><p>In our second set of experiments, we explore how well the scratchpad performs compared to execution on real data. Our main evaluation dataset is the MBPP dataset, introduced in <ref type="bibr" target="#b1">Austin et al. (2021)</ref>. MBPP consists of 1000 programming problems, each of which contains a natural language specification, a ground-truth Python program, and three input-output test cases. These programs involve computation using a large variety of types, including ints, strings, floats, dictionaries, tuples, and more, and include many language features and control-flow structures, such as loops, comprehensions, library imports, API calls and recursion. The evaluation split of the MBPP dataset contains 500 tasks. In order to separate out effects of the generation window size, we report all evaluation metrics on the subset of these tasks for which the ground-truth trace fits within the generation window of the model for all three of the input-output examples. This leaves a subset of 212 test tasks. Increasing generation and context window length is an important issue for Transformer-based models, but we view it as orthogonal and leave it for future work.  <ref type="table">3</ref> show the results of this experiment. Neither the scratchpad model or the direct execution model achieve good performance (5% and 10% output accuracy, respectively), and direct execution outperforms the scratchpad model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.1">PERFORMANCE IS POOR</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.2">SAMPLED PROGRAMS MAKE GOOD SCRATCHPAD TRAINING DATA</head><p>Next, we employ a data augmentation technique to increase the size of the training dataset: We first run few-shot synthesis on the 374 MBPP training tasks using the pre-trained 137B model, as described in <ref type="bibr" target="#b1">Austin et al. (2021)</ref>. For each task, we sample and record 80 candidate programs {P s } from the model at temperature T = 0.5. We can then create a new execution datapoint using the candidate program P s , the original three inputs for the task {x i } i=1,2,3 , and the three new outputs which result from running the candidate program on the original three inputs: {y inew } i=1,2,3 , where y inew = P s (x i ). We discard any candidate programs for which execution results in an error. Note that the outputs of y inew may or may not be equal to the original outputs, depending on the computation performed by the generated program P s . Therefore, this augmented direct execution dataset has both additional new programs and new outputs compared to the original dataset. We can analogously create a tracing dataset for our scratchpad model by tracing the execution of each candidate program P s on each x i . This process produces much larger tracing and execution datasets with 17k new programs, which we refer to as MBPP-aug.</p><p>Conceptually, we have augmented the dataset using a combination of tools already available to us, namely a) the neural model, and b) program execution via a Python interpreter. We fine-tune direct execution and scratchpad models on this new augmented dataset MBPP-aug, using the same process as above.</p><p>The "MBPP-aug" columns in Table <ref type="table">3</ref> show the results of this experiment. While the direct execution approach suffers a decrease in accuracy when trained on this additional data, the performance of the scratchpad model is greatly improved; the model trained on the augmented data solves more than three times the number of tasks as the model trained on only the original MBPP programs. We also note that if we measure the raw correctness across samples, the model already achieves 26.8% exact trace match, which is surprisingly high.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">SCRATCHPAD TRAINING MAKES GOOD USE OF LARGE DATASETS</head><p>In this section, we examine whether collecting additional tracing data from human-written programs further improves tracing performance. This will allow us to understand whether the tracing procedure here is likely to scale well when slightly out-of-distribution tracing data is added to the fine-tuning set. We experiment using two datasets:</p><p>Table <ref type="table">3</ref>: Comparison of models fine-tuned on different data sets and evaluated on MBPP programs. We report "per-task" execution and tracing accuracies, which require all examples to be correctly executed/traced. We additionally report "per-example" accuracies, which correspond to the total fraction of test examples which are executed/traced correctly across the dataset. We find that training scratchpad models on an dataset augmented with samples from the model significantly improves performance for the scratchpad model, while it harms the direct execution model. Combining tracing training data from several sources further improves scratchpad model performance.  While this dataset does not provide examples of the high-level, multi-line control flow of a trace, the data provides good supervision for modeling the execution of individual lines of code, which is a key component of tracing. This data was collected by Fraser Greenlee, and can be accessed here.</p><p>CodeNet The Project CodeNet dataset <ref type="bibr" target="#b17">(Puri et al., 2021)</ref> consists of millions of user submissions to approximately 4,000 coding problems. These submissions include both correct and incorrect solutions to programming problems. However, from the experiment with MBPP-aug above, we know that incorrect or broken programs can still provide a useful training signal. We additionally improved our tracing technique to allow tracing programs with errors; when an error is reached, the error message is added to the end of the trace text and tracing is stopped. We extracted a total of 670,904 traces from the CodeNet data. For each dataset, we first fine-tune the model on these datasets, and then perform a second fine-tuning on MBPP-aug until convergence.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Results</head><p>Results are shown in Table <ref type="table">3</ref>. As above, we report execution accuracy across tasks. We additionally report trace accuracy across tasks, to understand the extent to which the entire trace is accurately predicted. We also report the raw execution and trace accuracy across all test examples, as an additional metric to compare models.</p><p>Training on either the single-line dataset or the CodeNet dataset alone seem to both provide gains over MBPP-aug (23.4% and 25.2% tasks executed correctly, respectively). However, combining both CodeNet and the single-line dataset seems lead to the highest performance; tracing produces the correct final output for 26.6% of the tasks, and nearly a quarter of the tasks (24.6%) are traced perfectly for all three examples. These results seem promising: the neural network can often exactly trace programs. In particular, greedily decoding from the best model produces the exact correct trace for almost 42% of all traces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">RELATED WORK</head><p>The tasks in this paper can be viewed as exploring one criticism of large language models, namely, to what extent do they simply rely on surface-level statistical correlations on text, without learning semantics or world knowledge <ref type="bibr" target="#b3">(Bender &amp; Koller, 2020</ref>)? In response, <ref type="bibr" target="#b15">Li et al. (2021)</ref> provide evidence that pre-trained language models do indeed construct approximate representations of the semantics of the situations they describe in text. In the context of programs, <ref type="bibr" target="#b1">Austin et al. (2021)</ref> approach this question by exploring the learning to execute task on MBPP, which we consider in Section 5.2. The idea behind this task was to explore whether neural models for synthesis that generate code could also execute it. While that work finds existing models perform poorly at predicting execution, we show that adding a scratchpad allows these models to perform better.</p><p>Work in learning to execute has considered whether off-the-shelf recurrent neural networks <ref type="bibr" target="#b27">(Zaremba &amp; Sutskever, 2014)</ref> or more specialized architectures <ref type="bibr" target="#b7">(Dehghani et al., 2018;</ref><ref type="bibr" target="#b4">Bieber et al., 2020;</ref><ref type="bibr" target="#b25">Wang et al., 2020)</ref> have an inductive bias that is sufficiently well suited for executing and reasoning about arbitrary code. The related problem of neural algorithm induction has attracted considerable interest <ref type="bibr" target="#b11">(Graves et al., 2014;</ref><ref type="bibr" target="#b13">Kurach et al., 2016;</ref><ref type="bibr" target="#b12">Kaiser &amp; Sutskever, 2016;</ref><ref type="bibr" target="#b11">Graves et al., 2016;</ref><ref type="bibr" target="#b19">Reed &amp; de Freitas, 2016;</ref><ref type="bibr" target="#b23">Veličković et al., 2020a;</ref><ref type="bibr" target="#b5">b)</ref>. This work proposes new neural architectures, inspired by theoretical models of computation, whose inductive bias allows them to more easily learn algorithm induction tasks. Several methods for algorithm induction specifically add adaptive computation time to sequence models <ref type="bibr" target="#b10">(Graves, 2016;</ref><ref type="bibr" target="#b7">Dehghani et al., 2018;</ref><ref type="bibr">Banino et al., 2021)</ref>. In particular, universal transformers include adaptive computation time, and are evaluated both on algorithm induction and on learning to execute tasks <ref type="bibr" target="#b7">(Dehghani et al., 2018)</ref>. In contrast, a scratchpad is a simple way both to provide a transformer model with adaptive computation time, and also to provide supervision about how to use that additional computation, without requiring modification to the underlying architecture.</p><p>Algorithm induction has also been connected to pre-trained models. <ref type="bibr" target="#b16">Lu et al. (2021)</ref> show that Transformers can be used to some extent as universal computation engines, by pre-training on natural language, and fine-tuning a small fraction of the weights on non-language tasks, including simple algorithm induction tasks. Finally, supervised approaches to semantic parsing <ref type="bibr" target="#b27">(Zelle &amp; Mooney, 1996;</ref><ref type="bibr" target="#b28">Zettlemoyer &amp; Collins, 2005;</ref><ref type="bibr" target="#b14">Kwiatkowksi et al., 2010;</ref><ref type="bibr" target="#b26">Wong &amp; Mooney, 2006)</ref> predict the text of a database query, which can then be executed to answer a natural language question.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">LIMITATIONS AND FUTURE WORK</head><p>Context window size In this work, we limit our experiments to problems where the scratchpad text fits within the model generation window (512 tokens). However, many problems require very long scratchpad generations. Therefore, fully realizing the potential of the scratchpad technique may require further improvements in transformer generation window size. This is an active area of research in NLP <ref type="bibr" target="#b21">(Tay et al., 2020)</ref>, and improvements would be beneficial for the scratchpad technique.</p><p>Learning to use the scratchpad without supervision A clear next step is to try to learn to use the scratchpad without direct supervision. A simple method would be to use reinforcement learning (RL) techniques: models would be rewarded for correctly answering questions, with reward inversely proportional to the number of scratchpad tokens used. We would hope that learning to use the scratchpad would be a transferable skill; for example, a model could potentially use the algorithm it learned to perform long addition to succeed at polynomial evaluation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">CONCLUSION</head><p>In this work we showed-through experiments on long addition, polynomial evaluation, and Python code execution-that allowing models to read from and write to a simple scratchpad can improve their performance on algorithmic tasks. Such models may be a first step toward combining the knowledge-compression capabilities of large language models with reasoning capabilities, in order to build models that understand code as well as write it. This could be useful for a variety of applications that require both working with natural language and reasoning about program semantics, such as program synthesis, neural-guided program analysis, and interactive programming assistants.</p><p>The scratchpad technique presented here might not take us all the way toward that goal, but we hope it is an important step.  </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Using a scratchpad significantly improves the performance of pre-trained Transformerbased models on addition, including their ability to generalize out of the training distribution to numbers with more digits. Models were trained on 1-8 digit addition. The baseline models were trained without intermediate scratchpad steps.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Example of polynomial evaluation with a scratchpad. Each term in the polynomial is computed separately and then added.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Example synthetic Python program.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Top: examples of single line data. Bottom: example CodeNet submission. Single-line programs This dataset consists of roughly 9 million examples of single-line Python transformations. Figure 6 (Top) shows examples of these transformations. Each transformation consists of an initial set of variables and corresponding values, a single line of Python (together these form the input), and the new set of variables and values which results from running the line (the target). When training on single-line data, we do not introduce intermediate scratchpad steps.While this dataset does not provide examples of the high-level, multi-line control flow of a trace, the data provides good supervision for modeling the execution of individual lines of code, which is a key component of tracing. This data was collected by Fraser Greenlee, and can be accessed here.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Long addition ablation results. Here, we comparing the baseline and scratchpad results to a model that is first fine-tuned on the scratchpad and then subsequently fine-tuned to perform direct execution (the baseline). The intermediate scratchpad training seem to not have any significant effect on the overall performance, indicating that the extra training-time information seen by the scratchpad model does not seem solely responsible for the scratchpad model's performance.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 :</head><label>1</label><figDesc>Results for polynomial evaluation task. Scratchpad outperforms direct prediction whether using fine-tuning or few-shot.</figDesc><table><row><cell></cell><cell cols="2">Few-shot Fine-tuning</cell></row><row><cell cols="2">Direct prediction 8.8%</cell><cell>31.8%</cell></row><row><cell>Scratchpad</cell><cell>20.1%</cell><cell>50.7%</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 2 :</head><label>2</label><figDesc>Synthetic tracing and execution results. Scratchpad outperforms direct prediction both for few-shot and fine-tuned. The accuracy criterion for the few-shot scratchpad condition was slightly modified, see the text of Section 5.1 for more details.</figDesc><table><row><cell></cell><cell cols="2">Few-shot Fine-tuned</cell></row><row><cell cols="2">Direct prediction 11%</cell><cell>20%</cell></row><row><cell>Scratchpad</cell><cell>26.5%*</cell><cell>41.5%</cell></row></table><note>*</note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head></head><label></label><figDesc>IN THE VERY-LOW-DATA REGIME In our first experiment with the MBPP data, we train a scratchpad tracing model on the 374 training tasks (3 examples per task, so 1122 overall examples). We discard all training examples which exceed the context window. We compare overall execution results against a model trained on the same 374 training tasks to perform direct execution. The columns labeled "MBPP" for Direct Execution and Scratchpad in Table</figDesc><table /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_0">We introduce spaces between the digits to ensure that each digit is mapped to a separate token.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_1">Some objects cannot be represented using this JSON representation. Some objects (such as tuples) are represented by the closest JSON data type (in this case, lists). Other objects, such as user-constructed objects, are represented by a placeholder string, e.g., "&lt;object myObject&gt;". Functions are also represented as strings, e.g., "&lt;callable object f&gt;".</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>We thank Fraser Greenlee for constructing the single-line programs dataset, and Kevin Murphy for bringing this dataset to our attention.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A EFFECTS OF SCRATCHPAD EXECUTION TRAINING ON SYNTHESIS PERFORMANCE</head><p>To measure the extent to which fine-tuning on the tracing task described above affects the model's ability to perform program synthesis, we ran a few-shot synthesis experiment using the "MBPPaug + CodeNet + single line" model. Specifically, we performed few-shot synthesis on the MBPP dataset, as described in <ref type="bibr" target="#b1">Austin et al. (2021)</ref>. For each MBPP synthesis task, 80 candidate programs are sampled from the model (T = 0.5), and the task is considered solved if any of the candidate programs satisfy all three test cases. For more details, see <ref type="bibr" target="#b1">Austin et al. (2021)</ref>. The "MBPP-aug + CodeNet + single line" model achieved an overall synthesis accuracy of 54%, compared to the 62% accuracy of the original few-shot model in <ref type="bibr" target="#b1">Austin et al. (2021)</ref>. This indicates that the scratchpad execution training does not completely disrup the model's ability to perform other few-shot tasks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B LONG ADDITION ABLATION STUDY</head><p>In our long addition experiments in Section 3, we compared a model that was trained to perform "direct execution" (the baseline) vs a model trained to use a scratchpad. Since the model trained to use the scratchpad gets an additional signal from all the intermediate steps shown, we also study what happens if the scratchpad model is subsequently trained to perform direct execution (i.e., directly output the target without using the scratchpad). The result is shown in Figure <ref type="figure">7</ref> where we followed the same training procedure as for the original direct execution baseline and scratchpad models. We see no significant benefits from doing any intermediate training using a scratchpad. This indicates that the extra training-time information seen by the scratchpad model does not seem solely responsible for the scratchpad model's improved performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C EXAMPLE FEW-SHOT PROMPT FOR SYNTHETIC PYTHON EXPERIMENTS</head><p>Below is an example of a prompt for few-shot synthetic Python synthesis problems:</p><p>Consider the following Python function:</p><p>What is the execution trace?</p><p>[BEGIN] state: {} line: def f(v0): state: {"f": "&lt;callable_object f&gt;"} line: output = f(6) state: {"v0": 6} line: v0 += 0 state: {"v0": 6} line: v4 = 2 state: {"v0": 6, "v4": 2} line: while v4 &gt; 0: state: {"v0": 6, "v4": 2} line:</p><p>v4 -= 1 state: {"v0": 6, "v4": 1} line: v0 *= 2 state: {"v0": 12, "v4": 1} line: while v4 &gt; 0: state: {"v0": 12, "v4": 1} line:</p><p>v4 -= 1 state: {"v0": 12, "v4": 0} line: v0 *= 2 state: {"v0": 24, "v4": 0} line: while v4 &gt; 0: state: {"v0": 24, "v4": 0} line: return v0 state: {"f": "&lt;callable_object f&gt;", "output": 24}</p><p>[DONE] Consider the following Python function:</p><p>What is the execution trace?</p><p>[BEGIN] state: {} line: def f(v0): state: {"f": "&lt;callable_object f&gt;"} line: output = f(4) state: {"v0": 4} line: v0 -= 0 state: {"v0": 4} line: v0 += 2 state: {"v0": 6} line: v0 -= 0 state: {"v0": 6} line: return v0 state: {"f": "&lt;callable_object f&gt;", "output": 6}</p><p>[DONE]</p><p>Consider the following Python function:</p><p>What is the execution trace?</p><p>[BEGIN] state: {} line: def f(v0): state: {"f": "&lt;callable_object f&gt;"} line: output = f(4) state: {"v0": 4} line: v0 -= 0 state: {"v0": 4} line: v8 = 2 state: {"v0": 4, "v8": 2} line: while v8 &gt; 0: state: {"v0": 4, "v8": 2} line:</p><p>v8 -= 1 state: {"v0": 4, "v8": 1} line: v0 *= 1 state: {"v0": 4, "v8": 1} line: while v8 &gt; 0: state: {"v0": 4, "v8": 1} line:</p><p>v8 -= 1 state: {"v0": 4, "v8": 0} line: v0 *= 1 state: {"v0": 4, "v8": 0} line: while v8 &gt; 0: state: {"v0": 4, "v8": 0} line: return v0 state: {"f": "&lt;callable_object f&gt;", "output": 4} The model produces the following trace:</p><p>state: {"v0": 8} line: def f(v0): state: {"v0": 8, "f": "&lt;function f at 0x00BFC1C0&gt;"} line: v0 += 2 state: {"v0": 10} line: v0 *= 2 state: {"v0": 20} line: v0 *= 1 state: {"v0": 20} line: return v0 state: {"f": "&lt;function f at 0x00BFC1C0&gt;", "v0": 20}</p><p>Note that this trace is exactly correct, except for the last line: where the model predicted "v0": 20, the correct output is "output": 20. Because this type of error consistently occurs in the few-shot synthetic Python experiments, we modified the evaluation script slightly to consider this output to be correct.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Learning to represent programs with graphs</title>
		<author>
			<persName><forename type="first">Miltiadis</forename><surname>Allamanis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Marc</forename><surname>Brockschmidt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mahmoud</forename><surname>Khademi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Learning Representations (ICLR)</title>
				<imprint>
			<date type="published" when="2018-02">February 2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Program synthesis with large language models</title>
		<author>
			<persName><forename type="first">Jacob</forename><surname>Austin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Augustus</forename><surname>Odena</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Maxwell</forename><surname>Nye</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Maarten</forename><surname>Bosma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Henryk</forename><surname>Michalewski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Dohan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ellen</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Carrie</forename><surname>Cai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Terry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Quoc</forename><surname>Le</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2108.07732</idno>
		<imprint>
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Pondernet: Learning to ponder</title>
		<author>
			<persName><forename type="first">Andrea</forename><surname>Banino</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jan</forename><surname>Balaguer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Charles</forename><surname>Blundell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">8th ICML Workshop on Automated Machine Learning (AutoML)</title>
				<imprint>
			<biblScope unit="page">2021</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Climbing towards NLU: On meaning, form, and understanding in the age of data</title>
		<author>
			<persName><forename type="first">Emily</forename><forename type="middle">M</forename><surname>Bender</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alexander</forename><surname>Koller</surname></persName>
		</author>
		<idno type="DOI">10.18653/v1/2020.acl-main.463</idno>
		<ptr target="https://aclanthology.org/2020.acl-main.463" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics</title>
				<meeting>the 58th Annual Meeting of the Association for Computational Linguistics</meeting>
		<imprint>
			<publisher>Association for Computational Linguistics</publisher>
			<date type="published" when="2020-07">July 2020</date>
			<biblScope unit="page" from="5185" to="5198" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Learning to execute programs with instruction pointer attention graph neural networks</title>
		<author>
			<persName><forename type="first">David</forename><surname>Bieber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Charles</forename><surname>Sutton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hugo</forename><surname>Larochelle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Daniel</forename><surname>Tarlow</surname></persName>
		</author>
		<ptr target="https://proceedings.neurips.cc/paper/2020/file/62326dc7c4f7b849d6f013ba46489d6c-Paper.pdf" />
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
				<editor>
			<persName><forename type="first">H</forename><surname>Larochelle</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">M</forename><surname>Ranzato</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">R</forename><surname>Hadsell</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Balcan</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">H</forename><surname>Lin</surname></persName>
		</editor>
		<imprint>
			<publisher>Curran Associates, Inc</publisher>
			<date type="published" when="2020">2020</date>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="page" from="8626" to="8637" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Language models are few-shot learners</title>
		<author>
			<persName><forename type="first">Tom</forename><forename type="middle">B</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Benjamin</forename><surname>Mann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nick</forename><surname>Ryder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Melanie</forename><surname>Subbiah</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jared</forename><surname>Kaplan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Prafulla</forename><surname>Dhariwal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Arvind</forename><surname>Neelakantan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pranav</forename><surname>Shyam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Girish</forename><surname>Sastry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Amanda</forename><surname>Askell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sandhini</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ariel</forename><surname>Herbert-Voss</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gretchen</forename><surname>Krueger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tom</forename><surname>Henighan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rewon</forename><surname>Child</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aditya</forename><surname>Ramesh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Daniel</forename><forename type="middle">M</forename><surname>Ziegler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jeffrey</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Clemens</forename><surname>Winter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christopher</forename><surname>Hesse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mark</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Eric</forename><surname>Sigler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mateusz</forename><surname>Litwin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Scott</forename><surname>Gray</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Benjamin</forename><surname>Chess</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jack</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christopher</forename><surname>Berner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sam</forename><surname>Mccandlish</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alec</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dario</forename><surname>Amodei</surname></persName>
		</author>
		<idno>CoRR, abs/2005.14165</idno>
		<ptr target="https://arxiv.org/abs/2005.14165" />
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Mark</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jerry</forename><surname>Tworek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Heewoo</forename><surname>Jun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Qiming</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Henrique</forename><surname>Ponde</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jared</forename><surname>Kaplan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Harri</forename><surname>Edwards</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yura</forename><surname>Burda</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nicholas</forename><surname>Joseph</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Greg</forename><surname>Brockman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alex</forename><surname>Ray</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Raul</forename><surname>Puri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gretchen</forename><surname>Krueger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Petrov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Heidy</forename><surname>Khlaaf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Girish</forename><surname>Sastry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pamela</forename><surname>Mishkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Brooke</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Scott</forename><surname>Gray</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nick</forename><surname>Ryder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mikhail</forename><surname>Pavlov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alethea</forename><surname>Power</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lukasz</forename><surname>Kaiser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mohammad</forename><surname>Bavarian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Clemens</forename><surname>Winter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Philippe</forename><surname>Tillet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Felipe</forename><surname>Such</surname></persName>
		</author>
		<ptr target="http://arxiv.org/abs/2107.03374" />
		<editor>Josh Achiam, Vedant Misra, Evan Morikawa, Alec Radford, Matthew Knight, Miles Brundage, Mira Murati, Katie Mayer, Peter Welinder, Bob McGrew, Dario Amodei, Sam McCandlish, Ilya Sutskever, and Wojciech Zaremba</editor>
		<imprint>
			<date type="published" when="2021-07">Jan Leike. July 2021</date>
			<pubPlace>Dave Cummings, Matthias Plappert, Fotios Chantzis, Elizabeth Barnes, Ariel Herbert-Voss, Will Guss, Alex Nichol, Igor Babuschkin, Suchir Balaji, Shantanu Jain, Andrew Carr</pubPlace>
		</imprint>
	</monogr>
	<note>Evaluating large language models trained on code</note>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Universal transformers</title>
		<author>
			<persName><forename type="first">Mostafa</forename><surname>Dehghani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stephan</forename><surname>Gouws</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Oriol</forename><surname>Vinyals</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jakob</forename><surname>Uszkoreit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Łukasz</forename><surname>Kaiser</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018-07">July 2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Jacob</forename><surname>Devlin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathan</forename><surname>Uesato</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Surya</forename><surname>Bhupatiraju</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rishabh</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Abdel-Rahman</forename><surname>Mohamed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pushmeet</forename><surname>Kohli</surname></persName>
		</author>
		<idno>CoRR, abs/1703.07469</idno>
		<ptr target="http://arxiv.org/abs/1703.07469" />
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">BERT: Pre-training of deep bidirectional transformers for language understanding</title>
		<author>
			<persName><forename type="first">Jacob</forename><surname>Devlin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ming-Wei</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kenton</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kristina</forename><surname>Toutanova</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">North American Chapter of the Association for Computational Linguistics: Human Language Technologies</title>
		<title level="s">Long and Short Papers</title>
		<imprint>
			<date type="published" when="2019">2019</date>
			<biblScope unit="volume">1</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Adaptive computation time for recurrent neural networks</title>
		<author>
			<persName><forename type="first">Alex</forename><surname>Graves</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1603.08983</idno>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Hybrid computing using a neural network with dynamic external memory</title>
		<author>
			<persName><forename type="first">Alex</forename><surname>Graves</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Greg</forename><surname>Wayne</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ivo</forename><surname>Danihelka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alex</forename><surname>Graves</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Greg</forename><surname>Wayne</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Malcolm</forename><surname>Reynolds</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tim</forename><surname>Harley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ivo</forename><surname>Danihelka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Agnieszka</forename><surname>Grabska-Barwinska</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sergio</forename><forename type="middle">Gomez</forename><surname>Colmenarejo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Edward</forename><surname>Grefenstette</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tiago</forename><surname>Ramalho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><surname>Agapiou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Adrià</forename><surname>Puigdomènech Badia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Karl</forename><forename type="middle">Moritz</forename><surname>Hermann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yori</forename><surname>Zwols</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Georg</forename><surname>Ostrovski</surname></persName>
		</author>
		<idno>CoRR, abs/1410.5401</idno>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">538</biblScope>
			<biblScope unit="issue">7626</biblScope>
			<biblScope unit="page" from="471" to="476" />
			<date type="published" when="2014">2014. 2016</date>
			<publisher>Koray Kavukcuoglu, and Demis Hassabis</publisher>
		</imprint>
	</monogr>
	<note>Neural turing machines</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Neural gpus learn algorithms</title>
		<author>
			<persName><forename type="first">Lukasz</forename><surname>Kaiser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">4th International Conference on Learning Representations, ICLR 2016</title>
				<meeting><address><addrLine>San Juan, Puerto Rico</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2016">May 2-4, 2016. 2016</date>
		</imprint>
	</monogr>
	<note>Conference Track Proceedings</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Neural random-access machines</title>
		<author>
			<persName><forename type="first">Karol</forename><surname>Kurach</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Marcin</forename><surname>Andrychowicz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Learning Representations, (ICLR)</title>
				<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Inducing probabilistic CCG grammars from logical form with higher-order unification</title>
		<author>
			<persName><forename type="first">Tom</forename><surname>Kwiatkowksi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Luke</forename><surname>Zettlemoyer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sharon</forename><surname>Goldwater</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mark</forename><surname>Steedman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing</title>
				<meeting>the 2010 Conference on Empirical Methods in Natural Language Processing</meeting>
		<imprint>
			<date type="published" when="2010-10">October 2010</date>
			<biblScope unit="page" from="1223" to="1233" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Implicit representations of meaning in neural language models</title>
		<author>
			<persName><forename type="first">Belinda</forename><forename type="middle">Z</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Maxwell</forename><surname>Nye</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jacob</forename><surname>Andreas</surname></persName>
		</author>
		<idno>ArXiv, abs/2106.00737</idno>
		<imprint>
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Pretrained transformers as universal computation engines</title>
		<author>
			<persName><forename type="first">Kevin</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aditya</forename><surname>Grover</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pieter</forename><surname>Abbeel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Igor</forename><surname>Mordatch</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2021-03">March 2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Project CodeNet: A Large-Scale AI for code dataset for learning a diversity of coding tasks</title>
		<author>
			<persName><forename type="first">Ruchir</forename><surname>Puri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><forename type="middle">S</forename><surname>Kung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Geert</forename><surname>Janssen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wei</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Giacomo</forename><surname>Domeniconi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Vladmir</forename><surname>Zolotov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Julian</forename><surname>Dolby</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jie</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mihir</forename><surname>Choudhury</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lindsey</forename><surname>Decker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Veronika</forename><surname>Thost</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Luca</forename><surname>Buratti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Saurabh</forename><surname>Pujar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ulrich</forename><surname>Finkler</surname></persName>
		</author>
		<ptr target="http://arxiv.org/abs/2105.12655" />
		<imprint>
			<date type="published" when="2021-05">May 2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Exploring the limits of transfer learning with a unified text-to-text transformer</title>
		<author>
			<persName><forename type="first">Colin</forename><surname>Raffel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Noam</forename><surname>Shazeer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Adam</forename><surname>Roberts</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Katherine</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sharan</forename><surname>Narang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Matena</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yanqi</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wei</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Peter</forename><forename type="middle">J</forename><surname>Liu</surname></persName>
		</author>
		<idno>CoRR, abs/1910.10683</idno>
		<ptr target="http://arxiv.org/abs/1910.10683" />
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Neural programmer-interpreters</title>
		<author>
			<persName><forename type="first">Scott</forename><surname>Reed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nando</forename><surname>De Freitas</surname></persName>
		</author>
		<ptr target="http://arxiv.org/pdf/1511.06279v3" />
	</analytic>
	<monogr>
		<title level="m">International Conference on Learning Representations (ICLR)</title>
				<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Analysing mathematical reasoning abilities of neural models</title>
		<author>
			<persName><forename type="first">David</forename><surname>Saxton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Edward</forename><surname>Grefenstette</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Felix</forename><surname>Hill</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pushmeet</forename><surname>Kohli</surname></persName>
		</author>
		<idno>CoRR, abs/1904.01557</idno>
		<ptr target="http://arxiv.org/abs/1904.01557" />
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Long range arena: A benchmark for efficient transformers</title>
		<author>
			<persName><forename type="first">Yi</forename><surname>Tay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mostafa</forename><surname>Dehghani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Samira</forename><surname>Abnar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yikang</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dara</forename><surname>Bahri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Philip</forename><surname>Pham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jinfeng</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Liu</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sebastian</forename><surname>Ruder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Donald</forename><surname>Metzler</surname></persName>
		</author>
		<idno>CoRR, abs/2011.04006</idno>
		<ptr target="https://arxiv.org/abs/2011.04006" />
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Neural algorithmic reasoning</title>
		<author>
			<persName><forename type="first">Petar</forename><surname>Velickovic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Charles</forename><surname>Blundell</surname></persName>
		</author>
		<idno>CoRR, abs/2105.02761</idno>
		<ptr target="https://arxiv.org/abs/2105.02761" />
		<imprint>
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<author>
			<persName><forename type="first">Petar</forename><surname>Veličković</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lars</forename><surname>Buesing</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matthew</forename><forename type="middle">C</forename><surname>Overlan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Razvan</forename><surname>Pascanu</surname></persName>
		</author>
		<title level="m">Oriol Vinyals, and Charles Blundell. Pointer graph networks</title>
				<imprint>
			<date type="published" when="2020">2020a</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Neural execution of graph algorithms</title>
		<author>
			<persName><forename type="first">Petar</forename><surname>Veličković</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rex</forename><surname>Ying</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matilde</forename><surname>Padovano</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Raia</forename><surname>Hadsell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Charles</forename><surname>Blundell</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2020">2020b</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Learning semantic program embeddings with graph interval neural network</title>
		<author>
			<persName><forename type="first">Yu</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Fengjuan</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Linzhang</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ke</forename><surname>Wang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Learning for semantic parsing with statistical machine translation</title>
		<author>
			<persName><forename type="first">Yuk</forename><surname>Wah</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wong</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Raymond</forename><forename type="middle">J</forename><surname>Mooney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the main conference on Human Language Technology Conference of the North American Chapter</title>
		<title level="s">the Association of Computational Linguistics</title>
		<meeting>the main conference on Human Language Technology Conference of the North American Chapter<address><addrLine>Morristown, NJ, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computational Linguistics</publisher>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Learning to parse database queries using inductive logic programming</title>
		<author>
			<persName><forename type="first">Wojciech</forename><surname>Zaremba</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName><forename type="first">;</forename><surname>Zelle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Mooney</surname></persName>
		</author>
		<idno>ArXiv, abs/1410.4615</idno>
	</analytic>
	<monogr>
		<title level="m">National Conference on Artificial Intelligence (AAAI)</title>
				<imprint>
			<date type="published" when="1996">2014. 1996</date>
		</imprint>
	</monogr>
	<note>Learning to execute</note>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Learning to map sentences to logical form: Structured classification with probabilistic categorial grammars</title>
		<author>
			<persName><forename type="first">S</forename><surname>Luke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Zettlemoyer</surname></persName>
		</author>
		<author>
			<persName><surname>Collins</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Uncertainty in Artificial Intelligence</title>
				<imprint>
			<date type="published" when="2005-07">July 2005</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
