<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Approximate Model Checking of Stochastic Hybrid Systemsg</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Alessandro</forename><surname>Abate</surname></persName>
							<email>a.abate@tudelft.nl</email>
							<affiliation key="aff0">
								<orgName type="department">Delft Center for Systems and Control</orgName>
								<address>
									<settlement>Delft</settlement>
									<country key="NL">The Netherlands</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Joost-Pieter</forename><surname>Katoen</surname></persName>
							<email>katoen@cs.rwth-aachen.de</email>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">RWTH Aachen University</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">John</forename><surname>Lygeros</surname></persName>
							<email>lygeros@control.ee.ethz.ch</email>
							<affiliation key="aff2">
								<orgName type="laboratory">Automatic Control Laboratory</orgName>
								<orgName type="institution">ETH Zurich</orgName>
								<address>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Maria</forename><surname>Prandini</surname></persName>
							<email>prandini@elet.polimi.it</email>
							<affiliation key="aff3">
								<orgName type="department">Dipartimento di Elettronica e Informazione</orgName>
								<orgName type="institution">Politecnico di Milano</orgName>
								<address>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Approximate Model Checking of Stochastic Hybrid Systemsg</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">B4CA137C1F96631B0A3B6C131C6B62C3</idno>
					<idno type="DOI">10.3166/EJC.16.624-641</idno>
					<note type="submission">Received 5 May 2009; Accepted 18 February 2010 Recommended by J. Lunze, D.W. Clarke</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T10:41+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Stochastic Hybrid Systems</term>
					<term>Model Checking</term>
					<term>Probabilistic Invariance</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>A method for approximate model checking of stochastic hybrid systems with provable approximation guarantees is proposed. We focus on the probabilistic invariance problem for discrete time stochastic hybrid systems and propose a two-step scheme. The stochastic hybrid system is first approximated by a finite state Markov chain. The approximating chain is then model checked for probabilistic invariance. Under certain regularity conditions on the transition and reset kernels governing the dynamics of the stochastic hybrid system, the invariance probability computed using the approximating Markov chain is shown to converge to the invariance probability of the original stochastic hybrid system, as the grid used in the approximation gets finer. A bound on the convergence rate is also provided. The performance of the two-step approximate model checking procedure is assessed on a case study of a multi-room heating system.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Stochastic hybrid systems are a broad and widely applicable class of dynamical systems that involve the interaction of discrete, continuous, and probabilistic dynamics. Because of their generality, stochastic hybrid systems have found applications in many areas, including telecommunication networks, manufacturing systems, transportation, and biological systems (see, for example, <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b12">13]</ref> for an overview). The importance of stochastic hybrid systems in applications has motivated a significant research effort into the foundations, analysis and control methods for this class of systems. Among the different problems addressed in this effort, of particular interest for the present paper are the problems of reachability and invariance, i.e., the characterization of the probability that the state of a stochastic hybrid system will reach (or, respectively, remain) in a specific region of the state space (see, for example, <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b30">31,</ref><ref type="bibr" target="#b31">32]</ref>).</p><p>The development of computational tools is a crucial step in the application to practical problems of the new theoretical results that have emerged in the study of stochastic hybrid systems. Ideally such tools should be based on solid theoretical foundations, to quantify for instance the level of approximation introduced during the computation process. The tools should, however, also be versatile and efficient enough to be used on realistic applications. Many of the methods proposed in the area of stochastic hybrid systems for achieving this objective are based on numerical computations. These involve either imposing a grid on the state space, thus turning an infinite state problem into an approximate finite state one (see, for example, <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b31">32]</ref> for reachability problems of the type considered here), or carrying out Monte-Carlo simulations to obtain empirical estimates of quantities such as expected values of reach probabilities (see <ref type="bibr" target="#b26">[27]</ref> for an application of such methods). An alternative approach to the problem of verification of stochastic hybrid systems is based on satisfiability modulo theory, <ref type="bibr" target="#b18">[19]</ref>. In <ref type="bibr" target="#b30">[31]</ref>, certain functions of the state are used to determine upper bounds on the invariance probability.</p><p>Even though computational tools based on numerical methods typically come with explicit approximation guarantees, their versatility and their computational requirements often limit their applicability to practical problems. To address a wider range of problems one would ideally like to combine numerical approximation with symbolic computation techniques that can be used to test a wider range of properties and that have been optimized for computational efficiency. Model checking is an interesting class of methods in this context. Model checking methods <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b13">14]</ref> provide the means to algorithmically check whether a system satisfies a wide range of properties related to its evolution in time. In the context of reachability, model checking typically involves constructing forward/backward reachable sets based on a model of the system. More generally, model checkers can be employed to verify whether a model of the system satisfies various properties expressed in an appropriate temporal logic <ref type="bibr" target="#b28">[29,</ref><ref type="bibr" target="#b29">30]</ref>.</p><p>A key difficulty in deploying model checking methods to hybrid systems is our ability to "compute" with sets, i.e., to represent sets of states and propagate them through the system dynamics. For finite state systems this is not an issue, at least conceptually. Storing and manipulating sets of states can be done either naively by enumeration, or in a more sophisticated way by using efficient representations such as binary decision diagrams; as a consequence, model checking tools for deterministic, discrete time, finite state systems have been available for many years <ref type="bibr" target="#b23">[24]</ref> and have been successfully used in numerous applications. For systems whose state involves infinite or uncountable components it is sometimes possible to obtain an equivalent finite state representation on which finite state model checking methods can be applied. Even though several such classes of systems are known to exist in the deterministic setting <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b20">21]</ref>, very little is known in the stochastic context. Here model checking is typically limited to finite state Markov chains or decision processes, either in continuous or in discrete time <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr" target="#b25">26]</ref>.</p><p>The aim of the present paper is to take a first step toward combining numerical methods for approximate computation in stochastic hybrid systems with model checking methods developed to test temporal logic properties for finite state Markov chains. For the time being we concentrate on discrete time stochastic hybrid systems and finite time invariance specifications; current work focuses on extending the results to a wider range of properties of interest coded in the Probabilistic Computational Tree Logic (PCTL) <ref type="bibr" target="#b19">[20]</ref>. The main idea is simple: given a stochastic hybrid system, we use numerical tools to generate a finite state Markov chain, together with guarantees on the level of approximation introduced in the process. The properties of the Markov chain (in our case the probability of remaining in a certain region of the state space) are then analyzed using a model checker. The result is combined with the approximation guarantees to provide an overall guarantee about the probability of satisfying the original property of interest for the stochastic hybrid system.</p><p>The material is organized in six sections. After this brief introduction, in Section 2 we describe the class of stochastic hybrid systems that we will consider, formally define the invariance problem of interest, and present some basic results on the characterization of its solution using a multiplicative cost function. Section 3 concentrates on numerical methods that can be used to approximately solve the invariance problem, with special emphasis on quantifying the error introduced in the process. Section 4 illustrates the model checking method and shows how it can be applied to (approximately) solve the original invariance problem. The approximate model checking approach is then applied to a benchmark problem in Section 5, and its computational complexity is quantitatively assessed. Finally, Section 6 outlines some further directions of investigation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Probabilistic Invariance for Stochastic</head><p>Hybrid Systems</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.">Discrete Time Stochastic Hybrid System Modelling Framework</head><p>We consider a discrete time stochastic hybrid system (DTSHS) model, inspired by <ref type="bibr" target="#b1">[2]</ref>. The main difference with the model introduced in <ref type="bibr" target="#b1">[2]</ref> is that here we consider autonomous systems, without control inputs. The state of a DTSHS comprises a discrete and a continuous component. The discrete component takes values in a finite set Q; the elements of Q will be referred to as "modes." The continuous component of the state in each mode q ∈ Q lies in an Euclidean space R n(q) , whose dimension n(q) is determined by a bounded map n : Q → N. The hybrid state space is then given by the disjoint union of the Euclidean spaces associated to each mode, that is</p><formula xml:id="formula_0">S := q∈Q {q} × R n(q) .</formula><p>Let B(S) denote the σ -algebra generated by the subsets of S of the form ∪ q∈Q {q} × A q , where A q ∈ B(R n(q) ) is a Borel set in R n (q) . One can show <ref type="bibr" target="#b15">[16]</ref> that S can be endowed with a metric that is equivalent to the usual Euclidean metric when restricted to each component R n (q) , making (S, B(S)) a Borel space (i.e. homeomorphic to a Borel subset of a complete separable metric space).</p><p>The continuous state of a DTSHS evolves according to a probabilistic law specific to the current mode. A discrete transition from one mode to a different one may occur according to another probabilistic law; such a transition will cause a modification of the probabilistic law governing the continuous state dynamics. Furthermore, such a mode transition induces a probabilistic reset of the continuous state to a value in the Euclidean space associated with the new mode. The following definition formalizes this description.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 1 (DTSHS):</head><p>A discrete time stochastic hybrid system is a collection H = (Q, n, Init, T x , T q , R), where</p><formula xml:id="formula_1">• Q := {q 1 , q 2 , . . . , q m } with m ∈ N, represents the discrete state space; • n : Q → N assigns to each discrete state q ∈ Q the dimension of the continuous state space R n(q) ; • Init : B(S) → [0, 1]</formula><p>is a probability measure on S for the initialization of the solution process; •) given S. It assigns to each s = (q, x) ∈ S a probability measure, T x (•|s), on the Borel space (R n(q) , B(R n(q) )). The function T x (A|(q, •)) is assumed to be Borel measurable, for all q ∈ Q and all A ∈ B(R n(q) ); •) given S × Q, that assigns to each s ∈ S and q ∈ Q, a probability measure, R(•|s, q ), on the Borel space (R n(q ) , B(R n(q ) )). The function R(A|(q, •), q ) is assumed to be Borel measurable for all q, q ∈ Q and all A ∈ B(R n(q ) ).</p><formula xml:id="formula_2">• T x : B(R n(•) ) × S → [0, 1] is a conditional stochastic kernel on R n(</formula><formula xml:id="formula_3">• T q : Q×S → [0, 1] is a conditional discrete stochastic kernel on Q given S, which assigns to each s ∈ S a probability distribution, T q (•|s), over Q; • R : B(R n(•) )×S ×Q → [0, 1] is a conditional stochas- tic kernel on R n(</formula><p>We consider the evolution of this model over a finite time horizon [0, N] and define the semantics of the DTSHS algorithmically. In the sequel, we shall use boldface to denote random variables and normal typeset to denote sample values.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 2 (Execution of a DTSHS):</head><p>Consider a DTSHS H = (Q, n, Init, T x , T q , R) and a time horizon q) is an execution of H if its sample paths are obtained according to the following algorithm:</p><formula xml:id="formula_4">[0, N]. A stochastic process {s(k) = (q(k), x(k)), k ∈ [0, N]} with values in S = ∪ q∈Q {q}×R n(</formula><formula xml:id="formula_5">set k = 0; extract a value (q k , x k ) ∈ S for (q(k), x(k))</formula><p>according to Init(•); while k &lt; N do extract a value q k+1 ∈ Q for q(k + 1)</p><formula xml:id="formula_6">according to T q (• |(q k , x k )); if q k+1 = q k , then extract a value x k+1 ∈ R n(q k+1 ) for x(k + 1) according to T x (• |(q k , x k )); else extract a value x k+1 ∈ R n(q k+1 ) for x(k + 1) according to R(• |(q k , x k ), q k+1 ); k → k + 1; end.</formula><p>By appropriately defining the discrete transition kernel T q , it is possible to model situations such as "spontaneous jumps" (which are events that may occur during the continuous state evolution), as well as "forced jumps" (which are events that must occur, for instance when the continuous state exits some prescribed domain). For the spontaneous transitions, the fact that a discrete transition from q to q = q is enabled at (q, x) ∈ S can be encoded by the condition T q (q |(q, x)) &gt; 0. For the forced transitions, one typically associates an "invariant set" Inv(q) ⊆ R n(q) with mode q ∈ Q. The interpretation is that the discrete state can keep the value q as long as the continuous state lies in the set Inv(q); when this condition is violated the discrete state will have to switch to a different value. This requirement can be expressed by setting T q (q|(q, x)) = 0 for all x ∈ Inv(q).</p><p>To simplify the notation, let us introduce a conditional stochastic kernel T s : B(S) × S → [0, 1] on S, given S, defined by</p><formula xml:id="formula_7">T s ({q } × A q | (q, x)) = T x (A q |(q, x))T q (q |(q, x)), if q = q R(A q |(q, x), q )T q (q |(q, x)), if q = q, (<label>1</label></formula><formula xml:id="formula_8">)</formula><p>for all A q ∈ B(R n(q ) ), q ∈ Q, and (q, x) ∈ S. One can verify that the kernel T s assigns to each s = (q, x) ∈ S a probability measure on the Borel space (S, B(S)); moreover, under the conditions of Definition 1 the function T s (A|(q, •)) is Borel measurable for all A ∈ B(S) and all q ∈ Q. </p><formula xml:id="formula_9">k → k + 1; end.</formula><p>It follows that a DTSHS H = (Q, n, Init, T x , T q , R) defines a Markov process with state space S = ∪ q∈Q {q} × R n(q) and transition probability kernel T s : B(S) × S → [0, 1]. The execution {s(k), k ∈ [0, N]} is a stochastic process defined on the canonical sample space = S N+1 , endowed with the σ -algebra, B( ), generated by the product topology, and with a probability measure P uniquely defined by the transition kernel T s and the initial measure Init <ref type="bibr" target="#b8">[9,</ref><ref type="bibr">Proposition 7.45</ref>]. In particular, we will use the notation P s 0 for the probability measure associated with the deterministic initial condition s 0 ∈ S, i.e., Init(•) = δ s 0 (•).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.">Formulation of the Probabilistic Invariance Problem</head><p>We consider the following invariance problem: determine the probability that the state of a DTSHS H will remain within a certain "safe" set during the time horizon [0, N], starting from an arbitrarily selected initial condition s 0 ∈ S. The probabilistic invariance problem of interest can actually be referred to as a probabilistic safety problem. An invariance problem can be regarded as the dual of a reachability problem; this duality is formally discussed in <ref type="bibr" target="#b1">[2]</ref>. Consider a compact Borel set A ∈ B(S), representing a safe set. Our goal is setting up an invariance computation procedure to determine the probability that the execution associated with the initial condition s 0 ∈ S will remain within A during the time horizon [0, N]:</p><formula xml:id="formula_10">p s 0 (A) := P s 0 {s(k) ∈ A for all k ∈ [0, N]}. (<label>2</label></formula><formula xml:id="formula_11">)</formula><p>If p s 0 (A) ≥ , ∈ (0, 1], we say that the system initialized at s 0 is safe with an probabilistic guarantee. Notice that the value of the probability p s 0 (A) depends on the initial condition. For a given ∈ (0, 1], we can define as the probabilistic safe set with safety level the set</p><formula xml:id="formula_12">S( ) = {s 0 ∈ S : p s 0 (A) ≥ }<label>(3)</label></formula><p>of those initial conditions s 0 that are safe with an probabilistic guarantee. We show that the problem of computing p s 0 (A) can be solved through a backward iterative procedure by representing p s 0 (A) as a multiplicative function.</p><p>Let 1I C : S → {0, 1} denote the indicator function of set C ⊆ S:</p><formula xml:id="formula_13">1I C (s) = 1, if s ∈ C, and 1I C (s) = 0, if s ∈ C. Observe that N k=0 1I A (s k ) = 1, if s k ∈ A for all k ∈ [0, N] 0, otherwise,</formula><p>where</p><formula xml:id="formula_14">s k ∈ S, k ∈ [0, N].</formula><p>Then, the quantity p s 0 (A) in ( <ref type="formula" target="#formula_10">2</ref>) can be expressed as the expectation with respect to the probability measure P s 0 of the Bernoulli random variable N k=0 1I A (s(k)):</p><formula xml:id="formula_15">p s 0 (A) = E s 0 N k=0 1I A (s(k)) . (<label>4</label></formula><formula xml:id="formula_16">)</formula><p>Consider the sequence of functions V k : S → [0, 1], k = 0, 1, . . . , N, defined by:</p><formula xml:id="formula_17">V k (s) = 1I A (s) S N-k N l=k+1 1I A (s l ) N-1 l=k+1 T s (ds l+1 | s l ) × T s (ds k+1 |s), s ∈ S, k = 0, 1, . . . , N -1,<label>(5)</label></formula><formula xml:id="formula_18">V N (s) = 1I A (s), s ∈ S.</formula><p>It is easily seen that for any k ∈ {0, 1, . . . , N}, V k (s) represents the probability that an execution of the DTSHS remains within the safe set A over the residual time horizon [k, N], starting from s at time k. Following the dynamic programming terminology, we call V k (s) the value function at time k. In particular, V 0 (s) = E s [ N l=0 1I A (s(l))], s ∈ S, evaluated at s = s 0 returns the quantity of interest p s 0 (A), and the probabilistic safe set with safety level defined in (3) can be expressed as S( ) = {s 0 ∈ S : V 0 (s 0 ) ≥ }.</p><p>The following result states that the value functions can be determined through a backward recursive procedure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Proposition 1 ([2], Lemma 1):</head><p>The value functions V k : S → [0, 1], k = 0, 1 . . . , N -1, defined in (5) can be computed through the following backward recursion:</p><formula xml:id="formula_19">V k (s) = 1I A (s) S V k+1 (s k+1 )T s (ds k+1 |s), s ∈ S, (6) initialized with V N (s) = 1I A (s), s ∈ S.</formula><p>Since an explicit analytic solution to the recursion in equation ( <ref type="formula">6</ref>) is generally impossible to find, the computational aspects to the problem are of key importance to its implementation. In Section 3 we design an approximation scheme for the numerical solution of the stochastic invariance problem. To this purpose, it is important to note that the value function</p><formula xml:id="formula_20">V k : S → [0, 1] satisfies V k (s) = 0, if s ∈ S \ A, for any k ∈ [0, N].</formula><p>As a consequence, the recursive equation ( <ref type="formula">6</ref>) in Proposition 1 can be restricted to the compact set A:</p><formula xml:id="formula_21">V k (s) = A V k+1 (s k+1 )T s (ds k+1 |s), s ∈ A, k = 0, 1, . . . , N -1,<label>(7)</label></formula><formula xml:id="formula_22">V N (s) = 1, s ∈ A.</formula><p>The advantage of confining computations to the compact set A is that we can adopt a finite discretization of the continuous state component in the numerical scheme that approximates the quantity of interest. Moreover, under suitable regularity conditions on the transition kernels, the V k functions can be shown to be Lipschitz continuous over A. This property (valid only within A, given the discontinuity when passing from a safe state within A to an unsafe state outside A) is used for determining bounds on the approximated numerical solution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Estimation of Invariance Probability by Finite State Markov Chain Approximation</head><p>We introduce a numerical scheme for estimating the invariance probability p s 0 (A) defined in (2). The scheme is based on a Discrete Time Markov Chain (DTMC) approximation of the original DTSHS. The proof that the estimated invariance probability converges to p s 0 (A) is inspired by <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b7">8]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Approximating Markov Chain</head><p>Let the safe set A ∈ B(S) be given by A = ∪ q∈Q {q} × A q with A q ∈ B(R n(q) ). Recall that A is assumed to be compact. The size of the continuous state space within A is measured by λ := max q∈Q L(A q ), where L(A q ) &lt; ∞ denotes the finite Lebesgue measure of the set A q ⊂ R n(q) . Assume for simplicity that A q = ∅ for all q ∈ Q.</p><p>Since A is compact, we can introduce a finite partition of each compact set A q ⊂ R n(q) , q ∈ Q, by taking A q = ∪ m q i=1 A q,i , where A q,i , i = 1, . . . , m q , are pairwise disjoint Borel sets A q,i ∈ B(R n(q) ), with A q,i ∩ A q,j = ∅, ∀i = j. Denote with δ q,i the diameter of the set A q,i , that is δ q,i = sup{ xx : x, x ∈ A q,i }, and define the grid size parameter by δ := max i=1,...,m q ,q∈Q δ q,i .</p><p>The collection of sets G := {G q,i := {q} × A q,i , i = 1, . . . , m q , q ∈ Q} represents a partition of the safe set A. For each element G q,i of the partition, we select a representative point (q, v q,i ) ∈ G q,i . The set A δ := {(q, v q,i ), i = 1, . . . , m q , q ∈ Q} is the discretized version of the safe set A. We denote with ξ : A → A δ the map that associates to s ∈ G q,i ⊂ A the corresponding discrete state (q, v q,i ) ∈ A δ , and with : A δ → G the set-valued map that associates to (q, v q,i ) ∈ A δ the set G q,i to which (q, v q,i ) belongs.</p><p>We next introduce the state space Z δ and the transition probability function T δ : Z δ × Z δ → [0, 1] of a stochastic automaton that approximates the original DTSHS for the purpose of probabilistic invariance computation. The state space of the stochastic automaton is defined as Z δ := A δ ∪ {φ}, where φ is a discrete state representing the set of all states in the hybrid state space S that are outside the safe set A. Notice that the compactness assumption on A ensures that the set Z δ is finite.</p><p>The transition probability function</p><formula xml:id="formula_23">T δ : Z δ × Z δ → [0, 1] is defined as follows: T δ (z |z) = ⎧ ⎪ ⎪ ⎪ ⎨ ⎪ ⎪ ⎪ ⎩ T s ( (z )|z), i fz ∈ A δ and z ∈ A δ 1 -z∈A δ T s ( (z)|z), if z = φ and z ∈ A δ 1, if z = z = φ 0, if z ∈ A δ and z = φ,<label>(8)</label></formula><p>and satisfies z ∈Z δ T δ (z |z) = 1, for all z ∈ Z δ . Note that φ is an absorbing state and the probability that the stochastic automaton evolves from a safe state z ∈ A δ to a safe state z ∈ A δ is defined as the probability that the original DTSHS will enter the safe set (z ) ⊂ A in one time step starting from z.</p><p>The execution during the time horizon [0, N] of the stochastic finite automaton associated with the initial con-</p><formula xml:id="formula_24">dition z 0 ∈ Z δ is a Markov chain {z(k), k ∈ [0, N]} defined on the probability space (Z N+1 δ , σ (Z N+1 δ ), P δ,z 0 ), where σ (Z N+1 δ ) is the σ -algebra associated to Z N+1 δ ,</formula><p>and the probability measure P δ,z 0 is uniquely defined by the initial condition z 0 and the transition probability function T δ .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Convergence Result</head><p>Consider an initial condition s 0 ∈ A for the DTSHS. Let z 0 = ξ(s 0 ) ∈ A δ be the discrete state corresponding to s 0 . We show that, under certain regularity conditions on the DTSHS, the probability</p><formula xml:id="formula_25">p δ,z 0 (A δ ) := P δ,z 0 {z(k) ∈ A δ for all k ∈ [0, N]} (9)</formula><p>computed on the approximating Markov chain initialized at z 0 = ξ(s 0 ) converges to the invariance probability of interest p s 0 (A) of the DTSHS initialized at s 0 ∈ A, as the grid size parameter δ tends to zero. We also provide an expression for the rate of convergence. Suppose that the stochastic kernels T x and R on the continuous component of the hybrid state admit density t x and r, and that t x and r, as well as the stochastic kernel T q , satisfy the following Lipschitz condition.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Assumption 1:</head><p>1. |T q (q|(q, x)) -T q (q|(q, x ))| ≤ h 1 xx , for all (q, x), (q, x ) ∈ A, and</p><formula xml:id="formula_26">q ∈ Q, 2. |t x (x|(q, x)) -t x (x|(q, x ))| ≤ h 2 x -x ,</formula><p>for all (q, x), (q, x ), (q, x) ∈ A, 3. |r(x|(q, x), q)r(x|(q, x ), q)| ≤ h 3 xx , for all (q, x), (q, x ), (q, x) ∈ A, and q = q ∈ Q, </p><formula xml:id="formula_27">where</formula><formula xml:id="formula_28">|V k ((q, x))-V k ((q, x ))| ≤ K x-x , ∀ (q, x), (q, x ) ∈ A, (<label>10</label></formula><formula xml:id="formula_29">)</formula><formula xml:id="formula_30">for any k ∈ [0, N]. The constant K is given by K = mh 1 + λ h 2 + (m -1)h 3</formula><p>, where m is the cardinality of Q and λ is the Lebesgue measure of the continuous state space within A.</p><p>Proof: Since V N (s) = V N (s ) = 1, for all s, s ∈ A, then, the inequality in <ref type="bibr" target="#b9">(10)</ref> is trivially satisfied for k = N. For any k ∈ [0, N -1], (q, x), (q, x ) ∈ A, from the backward recursion <ref type="bibr" target="#b6">(7)</ref>, the definition (1) of T s , and the fact that V k+1 (s) = 0 for all s ∈ S\A, we have:</p><formula xml:id="formula_31">|V k ((q, x)) -V k ((q, x ))| = A V k+1 (s)T s (ds|(q, x)) - A V k+1 (s)T s (ds|(q, x )) = T q (q|(q, x)) A q V k+1 (q, x)T x (d x|(q, x)) + q =q</formula><p>T q (q|(q, x)) A q V k+1 (q, x)R(d x|(q, x), q)</p><p>-T q (q|(q, x ))</p><formula xml:id="formula_32">A q V k+1 (q, x)T x (d x|(q, x )) - q =q</formula><p>T q (q|(q, x )) A q V k+1 (q, x)R(d x|(q, x ), q)</p><p>≤ T q (q|(q, x))</p><formula xml:id="formula_33">A q V k+1 (q, x)T x (d x|(q, x))</formula><p>-T q (q|(q, x ))</p><formula xml:id="formula_34">A q V k+1 (q, x)T x (d x|(q, x )) + q =q</formula><p>T q (q|(x, q)) A q V k+1 (q, x)R(d x|(q, x), q)</p><p>-T q (q|(q, x ))</p><formula xml:id="formula_35">A q V k+1 (q, x)R(d x|(q, x ), q) . (<label>11</label></formula><formula xml:id="formula_36">)</formula><p>We next show two intermediate results that will be useful for proving the Lipschitz property for V k . The following chain of inequalities can be easily proven using the fact that |V k+1 (•)| ≤ 1 and Assumption 1:</p><formula xml:id="formula_37">A q V k+1 (q, x)T x (d x|(q, x)) - A q V k+1 (q, x)T x (d x|(q, x )) ≤ A q |V k+1 (q, x)| T x (d x|(q, x)) -T x (d x|(q, x )) ≤ A q T x (d x|(q, x)) -T x (d x|(q, x )) ≤ λh 2 x -x .</formula><p>Similarly, we have that</p><formula xml:id="formula_38">A q V k+1 (q, x)R(d x|(q, x), q) - A q V k+1 (q, x)R(d x|(q, x ), q) ≤ λh 3 x -x .</formula><p>Recall now that the product of two functions α, β : E → R that are Lipschitz continuous over a compact set E of an Euclidean space, with Lipschitz constants respectively h α and h β , satisfies:</p><formula xml:id="formula_39">|α(w 1 )β(w 1 ) -α(w 2 )β(w 2 )| ≤ h α sup w∈E |β(w)| + h β sup w∈E |α(w)| w 1 -w 2 .</formula><p>Applying this inequality to the two terms in the righthand side of equation <ref type="bibr" target="#b10">(11)</ref> with α(w) = T q (q|(q, w)), and with either β(w) = A q V k+1 (q, x)T x (d x|(q, w)) or β(w) = A q V k+1 (q, x)R(d x|(q, w), q), it follows that</p><formula xml:id="formula_40">|V k ((q, x)) -V k ((q, x ))| ≤ mh 1 + λ h 2 + (m -1)h 3 x -x ,</formula><p>which concludes the proof.</p><p>Based on Theorem 1, we can finally prove the main convergence result.</p><p>Theorem 2: Under Assumption 1, the invariance probability p s 0 (A) for the DTSHS initialized at s 0 ∈ A satisfies</p><formula xml:id="formula_41">p s 0 (A) -p δ,z 0 (A δ ) ≤ γ δ,</formula><p>where p δ,z 0 (A δ ) is the invariance probability for the approximating Markov chain with grid size δ initialized at the discrete state z 0 = ξ(s 0 ) ∈ A δ , and γ = NK.</p><p>Proof: Fix δ &gt; 0 and consider the MC on <ref type="bibr" target="#b7">(8)</ref>. Given that φ is an absorbing state, the invariance probability p δ,z 0 (A δ ) in ( <ref type="formula">9</ref>) of the approximating Markov chain can be computed as</p><formula xml:id="formula_42">Z δ = A δ ∪ {φ} with transition probability T δ : Z δ × Z δ → [0, 1] defined in</formula><formula xml:id="formula_43">p δ,z 0 (A δ ) = P δ,z 0 {z(N) ∈ A δ }. Let V δ,k : Z δ → [0, 1]</formula><p>, for all k ∈ [0, N], represent the conditional probability that a Markov chain execution of the automaton that takes the value z at time k will be within the safe set A δ at time N. Clearly, the invariance probability of interest can be computed as p δ,z 0</p><formula xml:id="formula_44">(A δ ) = V δ,0 (z 0 ). More- over, V δ,N (z) = 1 A δ (z), z ∈ Z δ , and, for k ∈ [0, N -1], V δ,k : Z δ → [0, 1] satisfies the following recursive equation V δ,k (z) = z ∈Z δ T δ (z |z)V δ,k+1 (z ). Given that V δ,k (φ) = 0, k ∈ [0, N], we have that V δ,k (z) = z ∈A δ T δ (z |z)V δ,k+1 (z ), z ∈ A δ , k = 0, 1, . . . , N -1, (<label>12</label></formula><formula xml:id="formula_45">) V δ,N (z) = 1, z ∈ A δ ,</formula><p>which is the discretized version of the backward iteration <ref type="bibr" target="#b6">(7)</ref>.</p><p>Let us introduce the piecewise constant function Vk (s) = V δ,k (ξ(s)), s ∈ A. We next prove by induction on k that</p><formula xml:id="formula_46">|V k (s) -Vk (s)| ≤ (N -k)Kδ, (<label>13</label></formula><formula xml:id="formula_47">)</formula><p>holds for any k = 0, 1, . . . , N. The claim then follows by setting k = 0 in equation ( <ref type="formula" target="#formula_46">13</ref>) and recalling that p s 0 (A) = V 0 (s 0 ) and p δ,z 0</p><formula xml:id="formula_48">(A δ ) = V δ,0 (ξ(s 0 )). Since V N (s) = VN (s) = 1, s ∈ A, then, equation (13) trivially holds for k = N. Let us suppose by induction hypothesis that V k+1 (s) -Vk+1 (s) ≤ (N -k -1)Kδ, s ∈ A, for k + 1 &lt; N. Observe that |V k (s) -Vk (s)| = |V k (s) -Vk (ξ(s))| ≤ |V k (s) -V k (ξ(s))| + |V k (ξ(s)) -Vk (ξ(s))|, s ∈ A. (<label>14</label></formula><formula xml:id="formula_49">)</formula><p>By Theorem 1, it is easily seen that the first term in the right hand-side of this equation is bounded by</p><formula xml:id="formula_50">|V k (s) -V k (ξ(s))| ≤ Kδ, s ∈ A.</formula><p>For the second term, by the backward recursions ( <ref type="formula" target="#formula_21">7</ref>) and ( <ref type="formula" target="#formula_44">12</ref>), and the definition of the approximating Markov chain transition probability function <ref type="bibr" target="#b7">(8)</ref>, we get</p><formula xml:id="formula_51">|V k (ξ(s)) -Vk (ξ(s))| = A V k+1 (w)T s (dw|ξ(s)) - z∈A δ T δ (z|ξ(s)) Vk+1 (z) = A V k+1 (w)T s (dw|ξ(s)) - A Vk+1 (w)T s (dw|ξ(s)) ≤ A V k+1 (w) -Vk+1 (w) T s (dw|ξ(s)) ≤ (N -k -1)Kδ, s ∈ A,</formula><p>where the last inequality follows from the induction hypothesis. By plugging these two bounds into equation ( <ref type="formula" target="#formula_48">14</ref>), the proof of ( <ref type="formula" target="#formula_46">13</ref>) is completed.</p><p>Notice that the quality of the approximation by the numerical procedure improves as the grid size parameter δ decreases. The rate of convergence is linear in δ and depends on the Lipschitz constants h 1 , h 2 , and h 3 in Assumption 1 through the K constant defined in Theorem 1. This is not surprising because the value function V 0 over the set A is approximated by a piecewise constant function through the discretization process, and we expect such a piecewise constant approximation to be more accurate for a smoother V 0 function. As the time horizon grows, the approximation error propagates. This is taken into account by the constant γ in Theorem 2, which grows linearly with the time-horizon length N.</p><p>Though the bound in Theorem 2 is conservative, it holds uniformly over A, which allows one to approximate the probabilistic safe set S( ), ∈ (0, 1], defined in (3) by model checking the invariance property of the approximating finite state Markov chain. This is detailed in Section 4.3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Finite State Markov Chain Model Checking</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">Logical Specification Of Probabilistic Invariance</head><p>A powerful and efficient analysis technique for assessing a large variety of properties, including probabilistic invariance, on discrete time and finite state stochastic automata generating Markov chains is model checking <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b13">14]</ref>. Let us consider a stochastic automaton with state space Z and transition probability function</p><formula xml:id="formula_52">T : Z × Z → [0, 1].</formula><p>The execution of the automaton associated with some initial condition z ∈ Z is a DTMC whose sample paths z 0 , z 1 , z 2 , . . . , satisfy z 0 = z and T (z i+1 |z i ) &gt; 0, i = 0, 1, . . . . The model checking approach to probabilistic verification consists in specifying the property of interest in terms of a probabilistic temporal logic formula, and in computing the set of initial conditions of the stochastic automaton such that the corresponding DTMC executions satisfy that formula.</p><p>According to the Probabilistic Computation Tree Logic (PCTL) <ref type="bibr" target="#b19">[20]</ref>, the probabilistic invariance property for a DTMC with safe set D ⊂ Z can be expressed by the formula</p><formula xml:id="formula_53">P ≥ ≤N D ,<label>(15)</label></formula><p>which holds in the state z whenever the DTMC execution associated with the initial condition z satisfies the sub-formula denotes that state z satisfies formula <ref type="bibr" target="#b14">(15)</ref>.</p><p>Similarly, the path formula 3 asserts that at some point a state satisfying formula is reached. Let D be the complement of D in Z, i.e., the set of unsafe states. Then, D = ¬ D with ¬ denoting logical negation. A path z 0 , z 1 , . . . satisfies 3 D if some of its states are unsafe. 3 D thus expresses a reachability specification over the unsafe set D. The duality between probabilistic invariance and probabilistic reachability <ref type="bibr" target="#b1">[2]</ref> can be expressed in PCTL as:</p><formula xml:id="formula_54">P ≥ ≤N D ≡ P ≤1-3 ≤N D . (<label>16</label></formula><formula xml:id="formula_55">)</formula><p>More complex properties can be stated in a similar manner via logical specifications. For instance, assume that we are interested in the reachability of a desired set C via some set B of admissible states within the bounded time horizon [0, N], with probability at least . This is expressed by the formula:</p><formula xml:id="formula_56">P ≥ B U ≤N C ,</formula><p>involving the so-called bounded-until operator (U ≤N ).</p><p>Intuitively, a path satisfies B U ≤N C if it reaches a desired state (in C) within [0, N] while all states prior to this state are admissible (in B). If N = ∞, then the unbounded-until operator (U ) poses no finite time restriction on reaching set C, as long as it is reached via an admissible path.</p><p>In general, the syntax of PCTL is as follows. Let N be a natural number or ∞, ∼ a binary comparison operator such as &lt;, ≤, or, dually, &gt; ≥, and ∈ [0, 1]. A formula in PCTL is built up from the basic state formula true and from the generic atomic proposition a, and can be obtained by combining two PCTL-formulae by conjunction (∧), by prefixing a PCTL-formula with negation (¬), or by considering a path formula characterized by the operator U ≤N and contained in a P-context parameterized by a probability ( ) and a binary comparison operator (∼):</p><formula xml:id="formula_57">::= true a ∧ ¬ P ∼ U ≤N .</formula><p>Note that ≤N is the dual operator to 3 ≤N , and that 3 ≤N can be defined as true U ≤N . Based on ( <ref type="formula" target="#formula_54">16</ref>), the probabilistic invariance property can then be expressed in terms of the bounded-until operator as</p><formula xml:id="formula_58">P ≥ ≤N D ≡ P ≤1-true U ≤N ¬ D . (<label>17</label></formula><formula xml:id="formula_59">)</formula><p>Given that the other usual boolean connectives such as disjunction, implication, and equivalence can be derived in the usual way, e.g., ∨ = ¬(¬ ∧ ¬ ), this completes the logic. The formal semantics of the logic falls outside the scope of this paper and can be found in <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b19">20]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">Model-Checking Algorithm</head><p>In this section, we summarize the model-checking algorithm for PCTL over DTMCs, which is based on <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b19">20]</ref>. The inputs to the algorithm are a MC with finite state space Z and transition probability function T : Z × Z → [0, 1], and a PCTL formula . The states of the DTMC are assumed to be labeled with sets of atomic propositions. The output is the set of states satisfying formula : Sat( ) = {z ∈ Z | z |= }. PCTL model checking is carried out by recursively computing the set Sat( ), in the same way as verifying the non-probabilistic temporal logic CTL <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b13">14]</ref> from which PCTL originates. This is done by means of a bottom-up recursive algorithm over the parse tree of . Each node of this tree is labeled with a sub-formula of , the root node is labeled with , and the leaves are either labeled with true or some atomic proposition a. Starting from the leaves of the tree, the set of states satisfying each sub-formula is computed recursively moving upwards towards the root. For most of the operators in the logic, such as negation and conjunction, this step is The main difficulty is represented by the sub-formulas involving the P ∼ (•) operator. For the sake of this paper, we concentrate on boundeduntil formulas since we are interested in model-checking the probabilistic invariance property <ref type="bibr" target="#b16">(17)</ref>.</p><p>Consider the problem of checking the formula P ∼ U ≤N with N &lt; ∞. Let π k (z) denote the probability that the DTMC execution of the stochastic automaton starting from z at time k reaches a -state within the residual time horizon [k, N] via paths of all -states. The set of states Sat P ∼ U ≤N can then be expressed in terms of π 0 (•) as: Sat P ∼ U ≤N = {z ∈ Z : π 0 (z) ∼ }. In turn, it is easily seen that</p><formula xml:id="formula_60">π k (z) = ⎧ ⎪ ⎪ ⎪ ⎨ ⎪ ⎪ ⎪ ⎩ 1, if z |= 0, if (k = N and z |= ¬ ) or z |= ¬ ∧ ¬ z ∈Z T (z |z)π k+1 (z ), otherwise, so that π 0 (•) can be recursively computed backwards, starting from π N (•) = 1I Sat( ) (•).</formula><p>The following alternative approach shows how the probability π 0 (z), z ∈ Z, can be expressed and computed in terms of the transient probabilities of a suitably defined DTMC. Given a PCTL formula ϒ, consider the transition probability function T [ϒ] : Z × Z → [0, 1] defined as:</p><formula xml:id="formula_61">T [ϒ](z |z) = ⎧ ⎪ ⎨ ⎪ ⎩ T (z |z), if z |= ¬ϒ 1, if z |= ϒ and z = z 0, otherwise.</formula><p>Clearly, this modified transition probability function makes all the states satisfying ϒ absorbing. For the purpose of model-checking the formula P ∼ U ≤N , one can then make all ¬( ∨ )-states and all -states absorbing by considering</p><formula xml:id="formula_62">T [ϒ](•|•) with ϒ = ¬ ∨ , since ¬ ∨ = ¬( ∨ ) ∨ .</formula><p>The ¬( ∨ )-states are defined as absorbing since U ≤N is violated as soon as some state is visited that neither satisfies nor ; whereas the -states are defined as absorbing since, once a -state is reached (along a -path) in at most N steps, then U ≤N holds, regardless of which states will be visited later on.</p><p>As a result of this construction, for any z ∈ Z, the probability π 0 (z) can be computed as the probability that the DTMC with transition probability function T [¬ ∨ ](•|•) starting from z at time 0 will be within Sat( ) at time N. The probability distribution at time k of this DTMC can be expressed as</p><formula xml:id="formula_63">k z := e z • P[¬ ∨ ] k ,</formula><p>where e z is a row probability vector whose elements are all equal to 0 except for a single one corresponding to state z, and P[¬ ∨ ] is the one-step transition probability matrix obtained by appropriately arranging in different columns the sequences {T [¬ ∨ ](z |z), z ∈ Z} corresponding to the different z ∈ Z. Finally, the probability of interest π 0 (z) can be computed as</p><formula xml:id="formula_64">π 0 (z) = N z • e = e z • P[¬ ∨ ] N •e ,</formula><p>where e is a column vector that characterizes Sat( ), i.e., each element of e takes values in {0, 1} and is equal to 1 if it corresponds to z |= , and 0 otherwise. The complexity of model checking the PCTL formula P ∼ U ≤N then mainly depends on the size of the one-step transition probability matrix P[¬ ∨ ]. Determining the set of states that satisfy P ∼ U ≤N in fact amounts to computing P[¬ ∨ ] N •e . In order to exploit the possible sparsity of P[¬ ∨ ], i.e. the presence of many zero elements in such a matrix, the product P[¬ ∨ ] N •e is typically computed in an iterative fashion:</p><formula xml:id="formula_65">P[¬ ∨ ]•(. . . (P[¬ ∨ ]•e )).</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.">Approximation of the Probabilistic Safe Set</head><p>We next describe a computational procedure to determine a conservative approximation of the safe set S( ) = {s 0 ∈ S : p s 0 (A) ≥ }, ∈ (0, 1), of a DTSHS by model checking the invariance property of the approximating finite state Markov chain.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 1 (probabilistic safe set approximation):</head><p>select η &gt; 0 such that η 2 ∈ (0, 1 -); select δ &gt; 0 such that γ δ ≤ η 2 (cf. Theorem 2 for the definition of γ ); construct the approximating Markov chain with grid size δ according to the procedure in Section 3.1; use the model checker to compute Z δ (</p><formula xml:id="formula_66">+ η 2 ) = z 0 ∈ Z δ : z 0 |= P ≤1-( + η 2 ) true U ≤N ¬ A δ ; define the approximating safe set as Ŝη ( ) = s 0 ∈ S : ξ(s 0 ) ∈ Z δ ( + η 2 ) .</formula><p>Theorem 3: Under Assumption 1, for any ∈ (0, 1), the safe set approximation Ŝη ( ) obtained through Algorithm 1 satisfies S( + η) ⊆ Ŝη ( ) ⊆ S( ).</p><p>Proof: By Theorem 2 and the condition γ δ ≤ η 2 in the second step of Algorithm 1, we have that</p><formula xml:id="formula_67">|p s 0 (A) -p δ,z 0 (A δ )| ≤ γ δ ≤ η 2 , z 0 = ξ(s 0 ), s 0 ∈ A. (<label>18</label></formula><formula xml:id="formula_68">)</formula><p>Let s 0 ∈ Ŝη ( ). Then, by construction,</p><formula xml:id="formula_69">z 0 = ξ(s 0 ) ∈ Z δ ( + η 2 ) and, hence, z 0 |= P ≤1-( + η 2 )</formula><p>true U ≤N ¬ A δ . Since, according to the PCTL syntax, P ≤1-( + η</p><p>2 ) true U ≤N ¬ A δ is equivalent to the probabilistic invariance formula</p><formula xml:id="formula_70">P ≥ + η 2 ≤N A δ , this implies that p δ,z 0 (A δ ) ≥ + η 2 . (<label>19</label></formula><formula xml:id="formula_71">)</formula><p>Bound <ref type="bibr" target="#b18">(19)</ref> combined with (18) leads to p s 0 (A) ≥ ; hence, Ŝη ( ) ⊆ S( ). Suppose now that s 0 ∈ S( + η). Then, p s 0 (A) ≥ + η and, by <ref type="bibr" target="#b17">(18)</ref>, p δ,z 0 (A δ ) ≥ + η 2 with z 0 = ξ(s 0 ). This in turn implies that z 0 = ξ(s 0 ) ∈ Z δ ( + η 2 ), and, by the last step in Algorithm 1, that s 0 ∈ Ŝη ( ). Hence, S( + η) ⊆ Ŝη ( ).</p><p>Theorem 3 is easy to interpret based on the approximation result in Theorem 2. It simply states that, in order to guarantee a certain safety level ∈ (0, 1) for the original DTSHS, we have to require a higher safety level + η 2 for the approximating Markov chain so as to compensate for the approximation error η 2 introduced by the gridding procedure.</p><p>Note that η can be made arbitrarily small at the cost of decreasing the grid size parameter δ. However, the gap between the two sets S( + η) and S( ) (measured e.g. by max q∈Q L( X q ) with X q = {x ∈ A q : (q, x) ∈ S( ) \ S( + η)}) may still be arbitrarily large if p s 0 (A) defining S( ) happens to be flat around those values of s 0 mapping into .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Remark 1: In the case when</head><p>= 1, one can obtain an over-approximation Ŝη ( ) of S( ) satisfying S( ) ⊆ Ŝη ( ) ⊆ S( -γ δ) by choosing δ &gt; 0 and following the last three steps of Algorithm 1 with η = 0.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Case Study: The Multi-Room Heating Problem</head><p>We present the results of a computational study for a multi-room heating benchmark introduced in <ref type="bibr" target="#b17">[18]</ref>, based on a model proposed by <ref type="bibr" target="#b27">[28]</ref>. The objective is to assess the performance of approximate model checking for the verification of probabilistic invariance of DTSHSs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.">Description of the Multi-Room Heating System</head><p>We study a DTSHS model for the temperature evolution in a building with h rooms. Each room is equipped with a heater and each heater switches between the ON and OFF conditions depending on the temperature in the room. The state of the system is hybrid, with the discrete state component representing the status of the h heaters and the continuous state component representing the average temperatures in the h rooms. The discrete state space is given by Q = {ON, OFF} h . The continuous state space is R h , irrespectively of the discrete state value (that is, n(q) = h for all q ∈ Q). Thus, the hybrid state space is</p><formula xml:id="formula_72">S = Q × R h .</formula><p>We suppose that the average temperature of each room, say room i, evolves according to the following stochastic difference equation during the finite time horizon [0, N]:</p><formula xml:id="formula_73">x i (k + 1) = x i (k) + b i (x a -x i (k)) + i =j a ij (x j (k) -x i (k)) + c i 1I Q i (q(k)) + w i (k),<label>(20)</label></formula><p>where x a represents the ambient temperature (assumed to be constant and equal for the whole building) and <ref type="formula" target="#formula_73">20</ref>) is the discrete time version of the stochastic differential equation in <ref type="bibr" target="#b27">[28]</ref> with sample time interval t. The quantities b i , a ij , and c i are nonnegative constants representing the average heat transfer rate from room i to the ambient (b i ) and to room j = i (a ij ), and the heat rate supplied to room i by the heater in room i (c i ), all rescaled by t and normalized with respect to the thermal capacity of room i. The values taken by the a ij constants reflect the room layout, for instance a ij = 0 if rooms i and j are not adjacent. The disturbance {w i (k), k = 0, . . . , N} affecting the temperature evolution in room i is assumed to be a sequence of independent identically distributed Gaussian random variables with zero mean and variance ν 2 proportional to t. Furthermore, with no loss of generality we suppose that the disturbances w i and w j affecting the temperature of different rooms (i = j) are independent.</p><formula xml:id="formula_74">1I Q i (•) is the indicator function of set Q i = {(q 1 , . . . , q h ) ∈ Q : q i = ON}. Equation (</formula><p>It is worth noticing that while a state-dependent disturbance could be easily modeled through the DTSHS in Definition 1, modeling a disturbance with time-varying characteristics would require to extend the DTSHS model and consider time-varying transition kernels. Though conceptually simple, this extension is not included in this paper to keep the notations simple while explaining the approximate model checking approach.</p><p>The continuous transition kernel T x describing the evolution of the continuous state x = (x 1 , x 2 , . . . , x h ) can be easily derived from <ref type="bibr" target="#b19">(20)</ref>. To this purpose, let N (•; μ, V ) denote the Gaussian measure over (R h , B(R h )), with mean μ ∈ R h and covariance matrix V ∈ R h×h . Then, T x :</p><formula xml:id="formula_75">B(R h ) × S → [0, 1] can be expressed as T x (• |(q, x)) = N (•; x + x + (q), ν 2 I),<label>(21)</label></formula><p>where ∈ R h×h , (q) ∈ R h , and I ∈ R h×h is the identity matrix. For i = 1, . . . , h, the element in row i and column j of matrix is given by [ ] ij = a ij , if j = i, and</p><formula xml:id="formula_76">[ ] ij = -(b i + k =i,k∈Q a ik ), if j = i. For i = 1, . . . , h,</formula><p>the i th element of vector (q), q = (q 1 , q 2 , . . . , q h ) ∈ Q, is given by [ (q)] i = b i x a + c i , if q i = ON, and [ (q)] i = b i x a , if q i = OFF. The reset kernel is set to coincide with the transition kernel in the current mode, irrespectively of the status to which the heaters possibly switch: R(• |(q, x), q ) = T x (• |(q, x)), for any q, q ∈ Q, and any x ∈ R h . As for the discrete state evolution, we suppose that each heater switches status based on the temperature of the room where it is located, and independently of the other heaters. This is modeled taking the discrete transition kernel T q : Q × S → [0, 1] as the product of h conditional stochastic kernels T q,i : {ON, OFF} × ({ON, OFF} × R) → [0, 1] governing the switching of each single heater. More precisely, we set</p><formula xml:id="formula_77">T q (q |(q, x)) = h i=1 T q,i (q i |(q i , x i )),<label>(22)</label></formula><p>q = (q 1 , q 2 , . . . , q h ), q = (q 1 , q 2 , . . . </p><formula xml:id="formula_78">, q h ) ∈ Q, x = (x 1 , x 2 , . . . , x h ) ∈ R h , where T q,i (q i |(q i , x i )) = σ i (x i ), q i = OFF, 1 -σ i (x i ), q i = ON<label>(23)</label></formula><formula xml:id="formula_79">α i 3 4 x l i + 1 4 x u i 1 2 (x l i + x u i ) 1 4 x l i + 3 4 x u i (low) (medium)<label>(high)</label></formula><p>with σ i : R → [0, 1] a sigmoidal function given by</p><formula xml:id="formula_80">σ i (y) = y d i α d i i + y d i , y ∈ R.<label>(24)</label></formula><p>Function σ i (y), y ∈ R, is parameterized by a "threshold" parameter α i and a "steepness" parameter d i &gt; 0. α i is the value of y at which the probability of the heater changing status becomes equal to 0.5, whereas d i is related to the slope of the sigmoidal function at y = α i (which amounts to d i /(4α i )). Three possible sets of values for α i and d i are reported in Table <ref type="table" target="#tab_3">1</ref>. We shall refer to the three possible values for the steepness parameter d i respectively as flat, gradual, and steep, in increasing order, and, similarly, to those for the threshold α i respectively as low, medium, and high, again in increasing order. The values for the threshold α i are determined as a convex combination of the temperatures x l i and x u i , x l i &lt; x u i , defining the desired temperature range</p><formula xml:id="formula_81">[x l i , x u i ] in room i.</formula><p>In the examples to follow, temperature is measured in degrees Celsius and t = 0.25 minutes.</p><p>Figure <ref type="figure" target="#fig_1">1</ref> represents a sample path of the Markov process generated by the DTSHS model of a 2-room heating system, when q(0) and x(0) are extracted uniformly from</p><formula xml:id="formula_82">Q and [x l 1 , x u 1 ] × [x l 2 , x u 2 ] = [17, 22] × [16, 23] ⊆ R 2</formula><p>, respectively. The sample paths over the time horizon [0, N] of length N = 100 of both the discrete and the continuous components of the hybrid execution are plotted: the blue/darker color is associated with room 1, whereas the red/lighter color with room 2. The adopted functions σ 1 (•) and σ 2 (•) are reported in Fig. <ref type="figure" target="#fig_2">2,</ref> and<ref type="figure">correspond</ref>  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.">Model Checking Probabilistic Invariance</head><p>In this section, we analyze the probabilistic invariance property of the h-room heating system by applying model checking to an approximation of the DTSHS in the form of a Markov chain.    probability function T δ : Z δ × Z δ → [0, 1] of the approximating Markov chain is defined in <ref type="bibr" target="#b7">(8)</ref> based on the transition kernels of the DTSHS modeling the multi-room heating system. The PCTL formula for the approximating Markov chain that has to be verified is given by</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>We consider a safe set A ⊂ S as</head><formula xml:id="formula_83">A = Q × [x l 1 , x u 1 ] × • • • × [x l h , x u h ], where [x l i , x u i ]</formula><formula xml:id="formula_84">P ≤1-( + η 2 ) true U ≤N ¬ A δ . (<label>25</label></formula><formula xml:id="formula_85">)</formula><p>where A δ characterizes the safe set A δ . This probabilistic specification can be model-checked by computing p z 0 (A δ ) for all z 0 ∈ A δ . As pointed out at the end of Section 4.2, the complexity involved in model checking formula ( <ref type="formula" target="#formula_84">25</ref>) is then mainly determined by the size and sparsity of the one-step transition probability matrix is equal to the one-step transition probability matrix of the approximating Markov chain. The size of this square matrix is given by the cardinality 2 h l h + 1 of Z δ , whereas its sparsity depends on the kernels T x (through the noise variance ν 2 ) and T q (through the parameters α i , d i ). The sparsity can also be tuned according to the choice of a tolerance parameter, henceforth denoted with tol, by setting equal to zero all the transition probabilities smaller than tol (and re-normalizing the resulting probability matrix).</p><formula xml:id="formula_86">P δ [¬true ∨ ¬ A δ ] = P δ [¬ A δ ] built</formula><p>The results reported in this section refer to computations performed on a 3.4 GHz Intel Pentium 4 with a 1GB RAM. The Markov chain approximation scheme is implemented in MATLAB and the one-step transition probability matrix is passed to the MRMC software <ref type="bibr" target="#b21">[22]</ref> for model checking. For performance assessment, we consider p z 0 (A δ ), z 0 ∈ A δ , as output of the MRMC software, and plot an interpolated version of it, namely the corresponding estimate of p s 0 (A), s 0 ∈ A, for illustrative purposes.</p><p>We start considering the case of h = 2 rooms with the parameters listed at the end of Section 5.1. By choosing a discretization level l = 10, we obtain an approximating Markov chain with 2 2 • 10 2 + 1 = 401 states and a onestep transition probability matrix with 401 2 = 160801 elements. Table <ref type="table" target="#tab_4">2</ref> reports the number of non-zero onestep transition probabilities for different combinations of the steepness and threshold parameters with d 1 = d 2 and α 1 = α 2 , and tol = 10 -5 . Note that the sparsity of the one-step transition matrix is particularly sensitive to the value taken by d i . In particular, the matrix sparsity increases with d i . However, the computational benefits of increased sparsity may be offset by the requirements for finer gridding in this case, since the Lipschitz constant of T q is directly proportional to d i (see equation ( <ref type="formula" target="#formula_88">26</ref>)).</p><p>Figures <ref type="figure" target="#fig_4">3</ref> and<ref type="figure">4</ref> represent the estimate of the invariance probability p s 0 (A) with s 0 = (q 0 , x 0 ). In Fig. <ref type="figure" target="#fig_4">3</ref>, the steepness and threshold parameters are chosen as gradual and medium for both rooms. The plots represent the invariance probability as a function of x 0 over <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b21">22]</ref> × <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b22">23]</ref>, for the four possible values of the initial mode q 0 . The running time of the overall approximate model checking procedure was 1.534 seconds, which includes both the time spent for building the approximating Markov chain and that for running the model checking algorithm. Figure <ref type="figure">4</ref> represents the average of p (q 0 ,x 0 ) (A) with respect to q 0 , as a function of x 0 over <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b21">22]</ref>× <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b22">23]</ref>, for the 9 possible combinations of α i and d i reported in Table <ref type="table" target="#tab_3">1</ref>. Visual inspection suggests that the invariance probability is maximized when α i is medium and d i is steep (second line, right-most plot): this configuration corresponds to sigmoidal functions defining the discrete transition kernel that rapidly saturate (to zero or to one) as soon as the temperature differs from the middle ones.</p><p>We next evaluate the scalability of the two-stage approximate model checking procedure in terms of both computational time and memory usage as determined by three fundamental parameters: the time horizon length N, the number of rooms h, and the discretization level l. More specifically, we fix two parameters and examine how computing time scales with the other one. Note that if we fix h and l and let N grow, only the computing time involved in the model checking stage increases, since the size of the Markov chain is fixed. The value taken by h and l instead affects the computing times of both the Markov chain approximation and the model checking stages. The computing time heavily depends on the size of the approximating Markov chain, but also on the tolerance parameter tol and on the steepness and threshold parameters. The results are reported for tol = 10 -5 , and for steepness and threshold parameters respectively set equal to gradual and medium in all rooms.</p><p>Table <ref type="table" target="#tab_6">3</ref> reports the computing time for the two-stage approximate model checking procedure as a function of the time horizon length N in the case of h = 2 rooms and a discretization level l = 10. Given that, for fixed l and h, N affects only the computing time of the model checking stage, it appears that the bottleneck of the overall . The plots represent the estimate of p (q 0 ,x 0 ) (A) as a function of x 0 over <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b21">22]</ref> × <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b22">23]</ref>, for mode q 0 = (OFF, OFF) (top-left plot), q 0 = (OFF, ON) (top-right plot), q 0 = (ON, OFF) (bottom-left plot), and q 0 = (ON, ON) (bottom-right plot). approach resides in the Markov chain approximation stage.</p><p>Table <ref type="table" target="#tab_7">4</ref> reports computing time and memory usage as a function of the discretization level l (N = 50 and h = 2). Memory usage is evaluated in terms of multiples of 8 Bytes since MATLAB uses 8 Bytes to store a double type associated to each element of the transition probability matrix. The results show how the computing time deteriorates as the discretization level l increases.</p><p>Table <ref type="table" target="#tab_8">5</ref> reports computing time and memory usage as a function of the number of rooms h (N = 50 and l = 5). The parameters defining the transition kernels for the additional rooms have the same values of those used in the 2-room case. The results show a stronger dependence of the computing time on the number of room h than on the discretization level l. This is due to the fact that the size 2 h l h + 1 of the approximating Markov chain scales exponentially with h and only polynomially with l. Interestingly, if one considers of l and h mapping into the same size of the Markov chain, then, the computing time is larger for larger values of l. This is for instance the case for l = 50, h = 2 and l = 5, h = 4, respectively corresponding to a computing time of 54.3 min (see Table <ref type="table" target="#tab_7">4</ref>) and 32 min (see Table <ref type="table" target="#tab_8">5</ref>). The reason for this behavior can be found in the different sparsity of the one-step transition probability matrices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.">Computational Complexity</head><p>In this section, we determine the size of the approximating Markov chain needed to approximate the probabilistic safety set S( ) of the multi-room heating system up to some given tolerance η. The size of the approximating Markov chain determines the memory usage requirements posed on the approximate model checking procedure. It represents also a good indicator of the computational effort involved in such a procedure, though the computing time depends not only on the size but also on the sparsity of the one-step transition matrix of the approximating Markov chain. Computations are performed with reference to the case when the temperature limits x l i and x u i , and the steepness and threshold parameters d i and α i are the same for all rooms i = 1, 2, . . . , h. We shall denote these common values as x l , x u , d, and α, respectively, and set := x ux l . The size of the approximating Markov chain for the multi-room heating system is given by 2 h l h + 1 where h is the number of rooms and l is the number of intervals in which the temperature range [x l , x u ] is uniformly divided. We shall now express l as a function of η and of the parameters characterizing the DTSHS model of the multi-room heating system.</p><p>Fix η &gt; 0. Then, according to the second step of Algorithm 1 the grid size parameter δ should satisfy δ ≤ η 2γ Fig. <ref type="figure">4</ref>. Invariance probability in the time horizon [0, 50] for a 2-room heating system with discretization level l = 10 and tol = 10 -5 . The plots represent the average of p (q 0 ,x 0 ) (A) with respect to q 0 as a function of x 0 over <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b21">22]</ref> × <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b22">23]</ref>, for different values of α i and d i (the pairs are chosen to be the same in both rooms), as reported in the corresponding position of the table below.  with γ given by Theorem 2. Each region A q of the safe set A is given by the hypercube [x l , x u ] h and is discretized uniformly in l h hypercubes. Then δ is the diameter of an hdimensional hypercube of size l and satisfies δ ≤ √ h l , which leads to l</p><formula xml:id="formula_87">≥ √ h δ = 2 √ h γ η</formula><p>. The parameter γ in Theorem 2 is given by γ = NK = N mh 1 + λ h 2 + (m -1)h 3 , where m = 2 h is the cardinality of Q and λ = h is the Lebesgue measure of the hypercube [x l , x u ] h . As for the Lipschitz constants h 1 , h 2 and h 3 in Assumption 1, h 2 and h 3 take the same value since t x (x |(q, x)) = r(x |(q, x), q ), and they satisfy the following bounds, which are proven in Appendix A:</p><formula xml:id="formula_88">h 1 ≤ √ h d 4α , (<label>26</label></formula><formula xml:id="formula_89">)</formula><formula xml:id="formula_90">h 2 = h 3 ≤ 1 (2π) h/2 e 1/2 ν h+1 I + 2 . (<label>27</label></formula><formula xml:id="formula_91">)</formula><p>We then get that From this expression, it is evident that the proposed approach suffers from the curse of dimensionality. In particular, the dependency of the memory requirements on the number of room h is super-exponential. This is not surprising, given that the approximating Markov chain is obtained by gridding the safe set A = 2 h × [x l , x u ] h .</p><formula xml:id="formula_92">γ ≤ 2 h N √ h d 4α + h I + 2 (2π) h/2 e</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Concluding Remarks</head><p>In this paper, we take an initial step toward the development of a fully automatic procedure for the approximate verification of stochastic hybrid systems. We showed how the probabilistic invariance of discrete time stochastic hybrid systems can be studied by building an approximating DTMC which can be analyzed using model checking methods. Under certain regularity conditions on the transition and reset kernels of the stochastic hybrid system, the proposed procedure for approximate model checking provides an estimate of the invariance probability together with a certificate of guaranteed accuracy.</p><p>The results proposed here are a first step in the desired direction. Several problems need to be overcome to make the method applicable in practice. Some of these problems are practical. In our current implementation, the construction of the approximating Markov chain is done using rather crude, custom-made approximation methods. An efficient implementation of this process which works seamlessly with the highly optimized model checking tools would definitely improve the applicability of the method. On the theoretical front, several challenges have to be addressed, among them developing similar procedures that work with a wider range of properties (beyond reachability and invariance) and methods for dealing with continuous time stochastic hybrid systems. The former will most likely require an appropriate characterization of the properties of interest as the expected value of appropriate cost functions. For the latter, a numerical scheme based on a Markov chain approximation <ref type="bibr" target="#b24">[25]</ref> has been recently introduced in <ref type="bibr" target="#b31">[32]</ref> for the purpose of reachability analysis of continuous time stochastic hybrid systems; however, these results are confined to a particular class of stochastic hybrid systems and are only asymptotic.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Appendix</head><p>A.1. Proof of Equation <ref type="bibr" target="#b25">(26)</ref>  <ref type="bibr" target="#b25">(26)</ref>  <ref type="bibr" target="#b25">(26)</ref> The Lipschitz constant h 1 in Assumption 1 is bounded by the maximum of the gradient norm of the stochastic kernel T q (q |(q, x)) in ( <ref type="formula" target="#formula_77">22</ref>) as a function of x ∈ R h . The gradient of T q (q |(q, x)) with respect to x is given by ∂T q (q |(q, x)) ∂x</p><formula xml:id="formula_93">= ⎡ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎣</formula><p>∂T q,1 (q 1 |(q 1 , x 1 )) ∂x 1 h i=2 T q,i (q i |(q i , x i ))</p><p>∂T q,2 (q 2 |(q 2 , x 2 )) ∂x 2 h i=1,i =2</p><p>T q,i (q i |(q i , x i ))</p><p>. . . ∂T q,h (q h |(q h , x h )) ∂x h h-1 i=1 T q,i (q i |(q i , x i ))</p><formula xml:id="formula_94">⎤ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎦</formula><p>, q = (q 1 , q 2 , . . . , q h ), q = (q 1 , q 2 , . . . , q h ) ∈ Q, x = (x 1 , x 2 , . . . , x h ) ∈ R h .</p><p>From the definition of T q,i (q i |(q i , x i )) in Eq. ( <ref type="formula" target="#formula_78">23</ref>) we get ∂T q,i (q i |(q i , x i )) ∂x i ≤ max Since h i=1,i =j T q,i (q i |(q i , x i )) ≤ 1, then</p><formula xml:id="formula_95">∂T q (q |(q, x)) ∂x ≤ h i=1 ∂T q,i (q i |(q i , x i )) ∂x i 2 ≤ √ h d 4α ,</formula><p>which concludes the proof of Eq. <ref type="bibr" target="#b25">(26)</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.2. Proof of Equation (27) (27) (27)</head><p>The Lipschitz constants h 2 = h 3 are bounded by the maximum of the gradient norm of the density t x (x |(q, x)) as a function of x ∈ R h . From <ref type="bibr" target="#b20">(21)</ref> we have that we can conclude that h 2 = h 3 ≤ max</p><formula xml:id="formula_96">t x (x |(q, x)) = 1 (2π) h/2 ν h e -x -(x+ x+ (q)) 2</formula><p>x ,x∈R h ,q∈Q ∂t x (x |(q, x)) ∂x ≤ 1 (2π) h/2 e 1/2 ν h+1 I + 2 .</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>to steep d 1 and medium α 1 parameters for the first room (d 1 = 100, α 1 = 19.5), and to steep d 2 and high α 2 parameters for the second room (d 2 = 100, α 2 = 21.25). The parameters involved in the definition (21) of the continuous transition kernel T x (and, hence, the reset kernel R) are set equal to a 12 = a 21 = 0.0625, b 1 = 0.0375, b 2 = 0.025, c 1 = 0.65, c 2 = 0.6, and x a = 6, and the noise standard deviation is set equal to ν = 0.25.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. A sample path of the DTSHS modeling the 2-room heating system during the time horizon [0, 100] min. The blue/darker color is associated with the dynamics of room 1, whereas the red/lighter color with those of room 2. The evolution of both the discrete and the continuous components is plotted.</figDesc><graphic coords="12,82.82,95.47,420.43,288.55" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Plots of the sigmoidal functions σ 1 (•) (top) and σ 2 (•) (bottom) with d 1 = 100, α 1 = 19.5, and d 2 = 100, α 2 = 21.25.</figDesc><graphic coords="12,173.36,446.35,240.49,198.91" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>is the desired temperature range in room i. The approximating Markov chain has state space Z δ = A δ ∪ {φ}, where A δ is the discretized version of set A with grid size δ and state φ represents the set of all states outside A. Set A δ is determined by partitioning [x l 1 , x u 1 ]×• • •×[x l h , x u h ] into rectangular regions, uniformly dividing each interval [x l 1 , x u 1 ] into l equal parts. The cardinality of the resulting state space Z δ = A δ ∪ {φ} is then 2 h l h + 1. The transition</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Invariance probability in the time horizon [0, 50] for a 2-room heating system with medium threshold and gradual steepness parameters, discretization level l = 10, and tol = 10 -5. The plots represent the estimate of p (q 0 ,x 0 ) (A) as a function of x 0 over<ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b21">22]</ref> ×<ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b22">23]</ref>, for mode q 0 = (OFF, OFF) (top-left plot), q 0 = (OFF, ON) (top-right plot), q 0 = (ON, OFF) (bottom-left plot), and q 0 = (ON, ON) (bottom-right plot).</figDesc><graphic coords="14,64.82,95.53,456.43,259.51" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>∂t x (x |(q, x)) ∂x = 1 (2π) h/2 ν h+2 (I + ) × x -(x + x + (q)) e -x -(x+ x+ (q)) set w := x -(x + x + (q)).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>≤N D with probability at least equal to ∈ [0, 1]. The state formula D characterizes the safe set D, i.e., D holds in state z if and only if z ∈ D. A sample path of the DTMC satisfies the path formula ≤N D if its first N states all belong to D, i.e. they are all safe. The symbol should be read as "always".</figDesc><table><row><cell cols="3">The validity of a formula in a state is formally defined</cell></row><row><cell cols="3">by means of a satisfaction relation, denoted by |=. For</cell></row><row><cell>instance,</cell><cell></cell><cell></cell></row><row><cell>z |= P ≥</cell><cell>≤N</cell><cell>D</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 1 .</head><label>1</label><figDesc>Possible choices for the steepness and threshold parameters d i and α i</figDesc><table><row><cell>d i</cell><cell>1 (flat)</cell><cell>10 (gradual)</cell><cell>100 (steep)</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 2 .</head><label>2</label><figDesc>Number of non-zero one-step transition probabilities out of 160801 (h = 2, l = 10), when the tolerance parameter is tol = 10 -5</figDesc><table><row><cell>α i \d i</cell><cell>flat</cell><cell>gradual</cell><cell>steep</cell></row><row><cell>low</cell><cell>21285</cell><cell>20696</cell><cell>10602</cell></row><row><cell>medium</cell><cell>21303</cell><cell>20975</cell><cell>11475</cell></row><row><cell>high</cell><cell>21306</cell><cell>20704</cell><cell>11112</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head></head><label></label><figDesc>from the modified transition probability function T δ [¬ A δ ] of the approximating Markov chain. Since ¬ A δ = {φ} and φ is an absorbing state for the approximating Markov chain, then T δ [¬ A δ ] coincides with T δ and, in turn, P δ [¬ A δ ]</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>Table 3 .</head><label>3</label><figDesc>Computing time versus time horizon length N (h = 2, = 10)</figDesc><table><row><cell cols="2">Time horizon length N 10</cell><cell>50</cell><cell>100</cell><cell>500</cell><cell>1000</cell><cell>5000</cell></row><row><cell>Computing time</cell><cell>1.</cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table><note><p>532 [sec] 1.534 [sec] 1.535 [sec] 1.544 [sec] 1.554 [sec] 1.656 [sec]</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Table 4 .</head><label>4</label><figDesc>Computing time and memory usage versus discretization levell (h = 2, N = 50)</figDesc><table><row><cell>Discretization level l</cell><cell>5</cell><cell>1 0</cell><cell>2 0</cell><cell>5 0</cell></row><row><cell>Computing time</cell><cell>0.21 [sec]</cell><cell>1.534 [sec]</cell><cell>39.87 [sec]</cell><cell>54.3 [min]</cell></row><row><cell>Memory usage (×8 Bytes)</cell><cell>101 2</cell><cell>401 2</cell><cell>1601 2</cell><cell>10001 2</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8"><head>Table 5 .</head><label>5</label><figDesc>Computing time and memory usage versus number of rooms h (N = 50, l = 5)</figDesc><table><row><cell>Number of rooms h</cell><cell>1</cell><cell>2</cell><cell>3</cell><cell>4</cell><cell>5</cell></row><row><cell>Computing time</cell><cell>0.08 [sec]</cell><cell>0.21 [sec]</cell><cell>12.6 [sec]</cell><cell>32 [min]</cell><cell>10.8 [hr]</cell></row><row><cell>Memory usage (×8 Bytes)</cell><cell>11 2</cell><cell>101 2</cell><cell>1001 2</cell><cell>10001 2</cell><cell>100001 2</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9"><head></head><label></label><figDesc>1/2 ν h+1 , which leads to the following conservative bound on l:</figDesc><table><row><cell>l ≥</cell><cell>2 h+1 √ η</cell><cell>hN</cell><cell>√</cell><cell>h</cell><cell>d 4α</cell><cell>+ h</cell><cell>I + (2π) h/2 e 1/2 ν h+1 . 2</cell></row><row><cell cols="8">As a consequence, the memory usage is of the order of 2 h 2 h h/2 N h h η h √ h d I+ 2 4α + h (2π) h/2 e 1/2 ν h+1</cell></row></table><note><p><p>h</p>.</p></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>Research supported by the European Commission under project iFly FP6-TREN-037180, under Marie Curie grant MANTRAS 249295, by NWO under VENI grant 016.103.020, and by the Swiss National Science Foundation under grant 200021-122072.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Computational approaches to reachability analysis of stochastic hybrid systems</title>
		<author>
			<persName><forename type="first">A</forename><surname>Abate</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Amin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Prandini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lygeros</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sastry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Hybrid Systems: Computation and Control, number 4416 in Lecture Notes in Computer Sciences</title>
		<editor>
			<persName><forename type="first">A</forename><surname>Bemporad</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><surname>Bicchi</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">G</forename><surname>Buttazzo</surname></persName>
		</editor>
		<meeting><address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="4" to="17" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Probabilistic reachability and safety for controlled discrete time stochastic hybrid systems</title>
		<author>
			<persName><forename type="first">A</forename><surname>Abate</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Prandini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lygeros</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sastry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Automatica</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="2724" to="2734" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">The algorithmic analysis of hybrid systems</title>
		<author>
			<persName><forename type="first">R</forename><surname>Alur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Courcoubetis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Halbawachs</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">A</forename><surname>Henzinger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">H</forename><surname>Ho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Nicollin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Olivero</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Sifakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Yovine</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theor Comput Sci</title>
		<imprint>
			<biblScope unit="volume">138</biblScope>
			<biblScope unit="page" from="3" to="34" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A theory of timed automata</title>
		<author>
			<persName><forename type="first">R</forename><surname>Alur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Dill</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theor Comput Sci</title>
		<imprint>
			<biblScope unit="volume">126</biblScope>
			<biblScope unit="page" from="183" to="235" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Discrete abstractions of hybrid systems</title>
		<author>
			<persName><forename type="first">R</forename><surname>Alur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">A</forename><surname>Henzinger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Lafferriere</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">J</forename><surname>Pappas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proc IEEE</title>
		<imprint>
			<biblScope unit="volume">88</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="971" to="984" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Principles of Model Checking</title>
		<author>
			<persName><forename type="first">C</forename><surname>Baier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J-P</forename><surname>Katoen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008">2008</date>
			<publisher>MIT Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Approximate symbolic model checking of continous-time Markov chains</title>
		<author>
			<persName><forename type="first">C</forename><surname>Baier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J-P</forename><surname>Katoen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Hermanns</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Concurrency Theory, number 1664 in Lecture Notes in Computer Sciences</title>
		<editor>
			<persName><forename type="first">Jcm</forename><surname>Baeten</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">S</forename><surname>Mauw</surname></persName>
		</editor>
		<meeting><address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="146" to="162" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Convergence of discretization procedures in dynamic programming</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">P</forename><surname>Bertsekas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans Autom Control</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="415" to="419" />
			<date type="published" when="1975">1975</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Stochastic Optimal Control: The Discrete-Time Case</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">P</forename><surname>Bertsekas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">E</forename><surname>Shreve</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Athena Scientific</title>
		<imprint>
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m">Stochastic Hybrid Systems: Theory and Safety Critical Applications. Number 337 in Lecture Notes in Control and Information Sciences</title>
		<editor>
			<persName><forename type="first">Hap</forename><surname>Blom</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><surname>Lygeros</surname></persName>
		</editor>
		<meeting><address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Extended stochastic hybrid systems and their reachability problem</title>
		<author>
			<persName><forename type="first">M</forename><surname>Bujorianu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Hybrid Systems: Computation and Control, number 2993 in Lecture Notes in Computer Sciences</title>
		<editor>
			<persName><forename type="first">R</forename><surname>Alur</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">G</forename><forename type="middle">J</forename><surname>Pappas</surname></persName>
		</editor>
		<meeting><address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="234" to="249" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Reachability questions in piecewise deterministic Markov processes</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">L</forename><surname>Bujorianu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lygeros</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Hybrid Systems: Computation and Control, number 2623 in Lecture Notes in Computer Sciences</title>
		<editor>
			<persName><forename type="first">O</forename><surname>Maler</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><surname>Pnueli</surname></persName>
		</editor>
		<meeting><address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="126" to="140" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m">Stochastic Hybrid Systems. Number 24 in Control Engineering</title>
		<editor>
			<persName><forename type="first">C</forename><forename type="middle">G</forename><surname>Cassandras</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><surname>Lygeros</surname></persName>
		</editor>
		<meeting><address><addrLine>Boca Raton</addrLine></address></meeting>
		<imprint>
			<publisher>CRC Press</publisher>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">M</forename><surname>Clarke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Grumberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Peled</surname></persName>
		</author>
		<author>
			<persName><surname>Model</surname></persName>
		</author>
		<author>
			<persName><surname>Checking</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999">1999</date>
			<publisher>MIT Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">The complexity of probabilistic verification</title>
		<author>
			<persName><forename type="first">C</forename><surname>Courcoubetis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Yannakakis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J ACM</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="857" to="907" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Markov Models and Optimization</title>
		<author>
			<persName><forename type="first">Mha</forename><surname>Davis</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993">1993</date>
			<publisher>Chapman &amp; Hall/CRC Press</publisher>
			<pubPlace>London</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Formal Verification of Probabilistic Systems</title>
		<author>
			<persName><forename type="first">L</forename><surname>De Alfaro</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
		<respStmt>
			<orgName>Department of Computer Science, Stanford University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Benchmarks for hybrid systems verifications</title>
		<author>
			<persName><forename type="first">A</forename><surname>Fehnker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Ivančić</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Hybrid Systems: Computation and Control</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">R</forename><surname>Alur</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">G</forename><forename type="middle">J</forename><surname>Pappas</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer Verlag</publisher>
			<date type="published" when="2004">2004</date>
			<biblScope unit="volume">2993</biblScope>
			<biblScope unit="page" from="326" to="341" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Stochastic satisfiability modulo theory: A novel technique for the analysis of probabilistic hybrid systems</title>
		<author>
			<persName><forename type="first">M</forename><surname>Fränzle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Hermanns</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Teige</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Hybrid Systems: Computation and Control</title>
		<editor>
			<persName><forename type="first">M</forename><surname>Egerstedt</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">B</forename><surname>Misra</surname></persName>
		</editor>
		<meeting><address><addrLine>Berlin, Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="172" to="186" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">A logic for reasoning about time and reliability</title>
		<author>
			<persName><forename type="first">H</forename><surname>Hansson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Jonsson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Form Asp Comput</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="512" to="535" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">What&apos;s decidable about hybrid automata</title>
		<author>
			<persName><forename type="first">T</forename><surname>Henzinger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Kopke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Puri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Varaiya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J Comput Syst Sci</title>
		<imprint>
			<biblScope unit="volume">57</biblScope>
			<biblScope unit="page" from="94" to="124" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">A Markov reward model checker</title>
		<author>
			<persName><forename type="first">J-P</forename><surname>Katoen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Khattri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">S</forename><surname>Zapreev</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Quantitative Evaluation of Systems (QEST)</title>
		<meeting><address><addrLine>Los Alamos, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="243" to="244" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Computational methods for reachability analysis of stochastic hybrid systems</title>
		<author>
			<persName><forename type="first">K</forename><surname>Koutsoukos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Riley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Hybrid Systems: Computation and Control</title>
		<title level="s">Lecture Notes in Computer Sciences</title>
		<editor>
			<persName><forename type="first">J</forename><surname>Hespanha</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><surname>Tiwari</surname></persName>
		</editor>
		<meeting><address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="377" to="391" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">P</forename><surname>Kurshan</surname></persName>
		</author>
		<title level="m">Computer-Aided Verification of Coordinating Processes; the Automata-Theoretic Approach</title>
		<imprint>
			<publisher>Princeton University Press</publisher>
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Numerical Methods for Stochastic Control Problems in Continuous Time</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">J</forename><surname>Kushner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">G</forename><surname>Dupuis</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001">2001</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Verifying quantitative properties of continuous probabilistic timed automata</title>
		<author>
			<persName><forename type="first">M</forename><surname>Kwiatkowska</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Norman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Segala</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Sproston</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CONCUR&apos;00, number 1877 in Lecture Notes in Computer Sciences</title>
		<meeting><address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="123" to="137" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Monte Carlo optimization for conict resolution in air traffic control</title>
		<author>
			<persName><forename type="first">A</forename><surname>Lecchini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Glover</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lygeros</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Maciejowski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans Intell Transp Syst</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="470" to="482" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Electric load model synthesis by diffusion approximation of a high-order hybrid-state stochastic system</title>
		<author>
			<persName><forename type="first">R</forename><surname>Malhame</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C-Y</forename><surname>Chong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans Autom Control</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="854" to="860" />
			<date type="published" when="1985">1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">The Temporal Logic of Reactive and Concurrent Systems: Specification</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Manna</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Pnueli</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992">1992</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>Berlin</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Temporal Verification of Reactive Systems: Safety</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Manna</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Pnueli</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995">1995</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">A framework for worstcase and stochastic safety verification using barrier certificates</title>
		<author>
			<persName><forename type="first">S</forename><surname>Prajna</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Jadbabaie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">J</forename><surname>Pappas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans Autom Control</title>
		<imprint>
			<biblScope unit="volume">52</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="1415" to="1428" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Stochastic reachability: Theory and numerical approximation</title>
		<author>
			<persName><forename type="first">M</forename><surname>Prandini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Stochastic hybrid systems</title>
		<imprint>
			<publisher>Taylor &amp; Francis Group/CRC Press</publisher>
			<date type="published" when="2006">2006</date>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="107" to="138" />
		</imprint>
	</monogr>
	<note>Lygeros J</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
