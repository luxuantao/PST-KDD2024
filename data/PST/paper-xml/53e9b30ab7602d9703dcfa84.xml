<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">paper was recommended for publication by Associate Editor C. Chu and Editor H. Ding upon evaluation of the reviewers&apos; comments</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">X</forename><forename type="middle">Q</forename><surname>Zuo</surname></persName>
						</author>
						<author>
							<persName><forename type="first">G</forename><forename type="middle">X</forename><surname>Zhang</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Computer School</orgName>
								<orgName type="institution">Beijing University of Posts and Telecommunications</orgName>
								<address>
									<postCode>100876</postCode>
									<settlement>Beijing</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Institute of Microelectronics of Chinese Academy of Sciences</orgName>
								<address>
									<postCode>100029</postCode>
									<settlement>Beijing</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="institution">IBM T. J. Watson Research Center</orgName>
								<address>
									<postCode>10598</postCode>
									<settlement>Yorktown Heights</settlement>
									<region>NY</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">paper was recommended for publication by Associate Editor C. Chu and Editor H. Ding upon evaluation of the reviewers&apos; comments</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">A5BA04BFEC9440E4413E894A33E5E1AD</idno>
					<idno type="DOI">10.1109/TASE.2013.2272758</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T17:18+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Self-Adaptive Learning PSO-Based Deadline Constrained Task Scheduling for Hybrid IaaS Cloud Xingquan Zuo, Member, IEEE, Guoxiang Zhang, and Wei Tan, Member, IEEE Abstract-Public clouds provide Infrastructure as a Service (IaaS) to users who do not own sufficient compute resources. IaaS achieves the economy of scale by multiplexing, and therefore faces the challenge of scheduling tasks to meet the peak demand while preserving Quality-of-Service (QoS). Previous studies proposed proactive machine purchasing or cloud federation to resolve this problem. However, the former is not economic and the latter for now is hardly feasible in practice. In this paper, we propose a resource allocation framework in which an IaaS provider can outsource its tasks to External Clouds (ECs) when its own resources are not sufficient to meet the demand. This architecture does not require any formal inter-cloud agreement that is necessary for the cloud federation. The key issue is how to allocate users' tasks to maximize the profit of IaaS provider while guaranteeing QoS. This problem is formulated as an integer programming (IP) model, and solved by a self-adaptive learning particle swarm optimization (SLPSO)-based scheduling approach. In SLPSO, four updating strategies are used to adaptively update the velocity of each particle to ensure its diversity and robustness. Experiments show that, SLPSO can improve a cloud provider's profit by 0.25%-11.56% compared with standard PSO; and by 2.37%-16.71% for problems of nontrivial size compared with CPLEX under reasonable computation time.</p><p>Note to Practitioners-IaaS has become an important paradigm in cloud computing and there are many commercial offerings such as Amazon EC2, IBM Smart Cloud Enterprise, and Microsoft Azure. IaaS providers are facing a big challenge on how to schedule their resources to meet the demand and at the same time guarantee the QoS promised. We propose a framework allowing an IaaS provider to outsource its workloads to external clouds when its own resources are not sufficient. A SLPSO is used to effectively schedule inter-cloud resources. This framework is more practical compared with cloud federation because it does not need any business agreement to be reached in advance. The scheduling approach is able to find the optimal or suboptimal allocation scheme of internal and external resources to maximize the profit of IaaS providers, and can greatly improve the quality of scheduling solution.</p><p>Index Terms-Hybrid cloud, infrastructure as a service (IaaS) cloud, particle swarm optimization (PSO), task scheduling.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>C LOUD computing promises to deliver large-scale com- putational resources over network using a pay-as-you-go model. In addition, cloud computing can reduce the overall IT cost thanks to the economy of scale. These characteristics attract an increasing number of individuals and corporations to rent cloud service to run their applications.</p><p>As an important part of cloud computing, Infrastructure as a Service (IaaS) becomes very popular as the foundation for higher level services such as Platform as a Service (PaaS) and Software as a Service (SaaS) <ref type="bibr" target="#b0">[1]</ref>. IaaS providers such as Amazon EC2 and IBM Smart Cloud Enterprise <ref type="bibr" target="#b1">[2]</ref>, allow users to rent resources in the form of Virtual Machines (VMs). They can offer different VM types that are characterized by machine configuration, QoS and pricing model. One typical representative is Amazon EC2 which can provide three kinds of pricing models: on-demand, reserved and spot <ref type="bibr" target="#b2">[3]</ref>. However, from an IaaS provider's perspective, the arriving of users' requests is aperiodic and the number and types of VM instances requested are hard to predict. Thus, there may be a moment at which one IaaS cloud receives massive requests which it cannot satisfy with its resources while guaranteeing promised QoS.</p><p>A straightforward solution for a cloud provider is to over-purchase resources in advance, which is not cost-efficient <ref type="bibr" target="#b3">[4]</ref>. Another solution is Cloud Federation <ref type="bibr" target="#b2">[3]</ref> that allows providers to trade their resources through federation agreement. In this paradigm, providers can overcome their resource limitation by outsourcing requests to other members in the federation. However, this federation is not easy to achieve at present, due to the lack of inter-operation standard and players' motivation to federate <ref type="bibr" target="#b4">[5]</ref>.</p><p>To make an IaaS cloud itself elastic, we propose a cloud resources allocation framework to allow it to utilize external clouds. In this framework, an IaaS cloud has its own private cloud, and is able to outsource its tasks to other cloud providers called external clouds (ECs) when its local resources are not sufficient. Each task has a strict deadline to meet, so that the resource allocation problem can be considered as a deadline constrained task scheduling (DCTS) one. An integer programming formulation of the DCTS problem is established, with the objective of maximizing the profit of the private cloud on the premise of guaranteeing QoS. We first solve this formulation using the optimization package CPLEX, and found that the time to obtain a solution is very short for small-size problems, while increases exponentially with the growth of the number of tasks. A particle swarm optimization (PSO) based scheduling approach is proposed to solve this problem. PSO has the advantages of easily realizing and quickly converging, so that this scheduling approach is able to get an optimal or suboptimal solution in a shorter computational time than CPLEX for large size problems. However, standard PSO easily traps into local optima and also is not robust for difficult problem instances. To overcome the disadvantage of standard PSO, a self-adaptive learning PSO (SLPSO)-based scheduling approach is proposed. SLPSO uses four velocity updating strategies to effectively escape from local optima and improve the solution quality.</p><p>The rest of this paper is organized as follows. Section II presents a framework of resources allocation in a hybrid cloud environment. In Section III, the IP model of the DCTS is presented. The SLPSO-based scheduling approach is introduced in Section IV. The experimental results are given in Section V. Section VI reviews related work and conclusions are given in Section VII.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. SOLUTION FRAMEWORK</head><p>From an IaaS provider's perspective, the private cloud refers to its own resources, and ECs refer to other clouds to outsource.</p><p>The framework of resources allocation is shown in Fig. <ref type="figure" target="#fig_0">1</ref>. ECs offer a public interface for creating and managing VM instances within their proprietary infrastructure. Inside the private cloud, the User Interface component is an interface through which users' application requests (i.e., tasks) are received. User tasks are forwarded to the Request Manager which collects and manages all accepted users' requests. The Resource Monitor component monitors the cloud resource pool, including CPU pool, Memory pool, Storage pool and I/O bandwidth pool. The cloud interface collects pricing models of ECs and sends tasks to ECs when necessary. The Scheduler component is to schedule tasks to the private cloud or ECs to maximize profit. This scheduling problem is a deadline constrained task scheduling one.</p><p>First, the Scheduler component collects scheduling data from the Request Manager, Resource Monitor and Cloud Interface, and then makes a decision to allocate each task to either the private cloud or one of the ECs. If a task needs to be allocated to an EC, pricing models of ECs are sent to the scheduler through the Cloud Interface to help determine a specific EC to outsource.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. PROBLEM DEFINITION</head><p>Our solution focuses on batch workloads, more specifically, a bag of independent tasks, each of which can be large-scale data processing, scientific simulation, or image/video rendering. This type of bag-of-tasks is very common in enterprise applications such as customer behavior mining, or sensor data analysis to predict machines failure in IT infrastructure <ref type="bibr" target="#b5">[6]</ref>. Workloads that are not covered by our model include tightly coupled tasks, complex workflows, and online transaction processing (OLTP).</p><p>Each submitted application consists of a number of embarrassingly parallel and independent tasks and has a strict deadline by when all its consisting tasks must be finished. Each task requires to be executed in one VM instance type.</p><p>Suppose that is a set of cloud providers. Assume is the private cloud and are ECs. is a set of VM types and is a set of applications. Each application has a strict deadline and runtime , and consists of a task set . Time is explicitly represented in the IP model by introducing time slots with a granularity of 1 h. Let be the maximum number of time slots, we have . The objective is to allocate the applications to to maximize the profit of . Each task must be allocated to one . Once a task begins to execute, it cannot be interrupted, so that its running slots are consecutive. In any time slot , resources used by all task executed in cannot exceed the total resources of and from the perspective of , all its ECs has infinite sources. To formulate this problem, problem parameters and decision variables are defined in Tables <ref type="table">I</ref> and<ref type="table">II</ref>, respectively.</p><p>The problem can be formulated as the following IP model.</p><p>(</p><p>(</p><p>(5)</p><formula xml:id="formula_2">TABLE I PROBLEM PARAMETERS TABLE II DECISION VARIABLES (6) (7) (8) (9) (10) (11)</formula><p>The first term of the objective function <ref type="bibr" target="#b0">(1)</ref> represents the income of and the second one means its cost. Constraint (2) guarantees that each task is allocated to exactly one cloud provider. Constrain (3) ensures that each task is finished before its deadline. Constraints ( <ref type="formula">4</ref>)-( <ref type="formula">6</ref>) guarantee that each task is nonpreemptable, i.e., a task is executed without any interruption. Constraints <ref type="bibr" target="#b6">(7)</ref> and ( <ref type="formula">8</ref>) are applied to to ensure it does not use CPUs and memory beyond its capacity, in each slot. Finally, ( <ref type="formula">9</ref>)- <ref type="bibr" target="#b10">(11)</ref> give definitions of the decision variables.</p><p>From the formulation, we can see that the problem is a task allocation one. Solving such problems using a mathematical programming approach will take a large amount of computational time for a large size problem. This nature prohibits the use of mathematical programming in this scenario where tasks need to be scheduled in a real-time manner.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. SELF-ADAPTIVE LEARNING PSO-BASED SCHEDULING APPROACH</head><p>PSO, inspired by the social behavior of bird flocking, fish schooling and swarm theory, is a population-based optimization technique <ref type="bibr" target="#b6">[7]</ref>, and has been applied to various complex optimization problems <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b8">[9]</ref>. PSO has the advantages of quick convergence, high-precision solutions, and relatively easy being implementation.</p><p>Here, we use a self-adaptive learning PSO-based scheduling approach. In SLPSO, each particle represents the set of priorities of all tasks, and flies in the search space with dynamically adjusted velocity according to its own and other companions' flying experiences. The priorities represented by each particle are used to allocate tasks to the private cloud or ECs. The purpose of SLPSO is to produce a particle (i.e., a set of priorities) to allocate cloud resources in the most effective manner. To improve the search capability, the velocity updating strategy of each particle is selected from a set of candidate strategies according to their execute probabilities that are changed adaptively during the swarm evolution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Standard PSO</head><p>In standard PSO, each individual in the swarm is treated as a particle in a D-dimensional search space, and represented by a three tuple . and denote the position and velocity of particle , respectively.</p><p>represents the personal best (pbest) of particle (that is, the best position achieved by particle ).</p><p>denotes the global best (gbest), namely, the best position tracked by the entire swarm. The value of each element in the vector can be clamped to the range of to control the excessive roaming of particle outside the search space, and updated by <ref type="bibr" target="#b11">(12)</ref> where denotes the number of particles and is the dimension of particles. and are uniformly distributed random number whose range is [0, 1]. and are learning factors. is the individual cognition component, representing the search ability of the particle itself, and is the social communication component representing the influence from the social environment. is the inertia weight to avoid unlimited growth of particle's velocity.</p><p>The particle flies toward a new position according to <ref type="bibr" target="#b12">(13)</ref>, and each value of the new position should not exceed the range of <ref type="bibr" target="#b12">(13)</ref> At the beginning, the position and velocity of each particle in the swarm are initialized randomly. Then, each particle is led by its own flying experience (pbest) and the best particle (gbest), i.e., updated by ( <ref type="formula">12</ref>) and ( <ref type="formula">13</ref>). This process is repeated until a user-defined stopping criterion is reached. The steps of standard PSO is as follows.</p><p>Step 1) Randomly initialize position and velocity of all particles.</p><p>Step 2) Evaluate the fitness values of all particles; let each particle's pbest be its current position; let gbest be the best one among all particles.</p><p>Step 3) Updated each particle's velocity and position using ( <ref type="formula">12</ref>) and ( <ref type="formula">13</ref>).</p><p>Step 4) Calculate the fitness values of all particles.</p><p>Step 5) Update pbest. For each particle, if the fitness value of its new position is better than that of its pbest, then replace its pbest by the new position.</p><p>Step 6) Update gbest. For each particle, if the fitness value of its new position is better than that of the gbest, then replace the gbest by the new position.</p><p>Step 7) If the stopping criterion is satisfied, output gbest and its fitness value; otherwise, go to Step 3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. SLPSO-Based Scheduling Approach</head><p>Although standard PSO has been widely applied to scientific and engineering domains, its robustness, i.e., its ability to deal with problems with different characteristics, is still not satisfactory. In addition, it is easy to trap into local optima for some difficult problems. The DCTS problem is a hard problem and not easy to obtain its optimal solution. Hence, an improved PSO with a better search capability and robustness is necessary to effectively solve this problem. A measure to improve global search capability and avoid local optima is to increase the diversity of swarm's particles. To increase its robustness, an effective way is to make the PSO have the capability of self-adaptive learning.</p><p>General speaking, self-adaptive learning of PSO can be realized by the following strategies <ref type="bibr" target="#b9">[10]</ref>: 1) adaptively adjusting parameters, for example in <ref type="bibr" target="#b8">[9]</ref> and <ref type="bibr" target="#b10">[11]</ref>, linear and nonlinear methods are proposed to adaptively adjust algorithm parameters; 2) designing different population topologies <ref type="bibr" target="#b11">[12]</ref>- <ref type="bibr" target="#b14">[15]</ref>; 3) utilizing a multipopulation instead of a single population in basic PSO <ref type="bibr" target="#b15">[16]</ref>- <ref type="bibr" target="#b18">[19]</ref>; 4) incorporating bio-inspired mechanisms into the basic PSO <ref type="bibr" target="#b19">[20]</ref>- <ref type="bibr" target="#b21">[22]</ref>; and 5) combining PSO with other adaptive techniques, such as the velocity updating strategies in <ref type="bibr" target="#b22">[23]</ref>.</p><p>Based on the work in <ref type="bibr" target="#b22">[23]</ref>, in this paper a self-adaptive learning PSO-based scheduling approach is proposed to solve the DCTS problem. Four modified velocity updating strategies are used to improve the global search capability and robustness.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1) Velocity Updating Strategies: a) Strategy 1:</head><p>The first strategy used is the differencebased velocity updating strategy (DbV) <ref type="bibr" target="#b22">[23]</ref> that can avoid progressive velocity changing. This strategy makes each particle explore in a wider range by updating the velocity based on the difference information of particles, and the velocity is updated by ( <ref type="formula">14</ref>) <ref type="bibr" target="#b14">(15)</ref> where is a standard normally distributed random number in the range of [0, 1]; and are the th variables of two randomly selected particles from the swarm in the th generation, respectively. Equation ( <ref type="formula">14</ref>) is used to obtain the different information of two selected particles.</p><p>b) Strategy 2: The second strategy is the one used in standard PSO, as shown in <ref type="bibr" target="#b11">(12)</ref>, to learn the global information by some particles to speed up algorithm convergence.</p><p>c) Strategy 3: The third strategy is the one used in the comprehensive learning particle swarm optimizer (CLPSO) <ref type="bibr" target="#b23">[24]</ref>, in which each dimension of particle learns from its pbest or other particle's pbest by a tournament selection method. To reduce the complexity, we randomly select a particle's pbest for all dimensions, instead of selecting a particle's pbest for each dimension. The velocity is updated as follows: <ref type="bibr" target="#b15">(16)</ref> where is uniformly distributed real number in [0, 1];</p><p>is the pbest of a randomly selected particle. d) Strategy 4: It has been investigated in <ref type="bibr" target="#b23">[24]</ref> that exploration range of particles in CLPSO is very large for almost all problems, resulting in a slow convergence. Therefore, Wang et al. <ref type="bibr" target="#b22">[23]</ref> develop a new variant that searches a relatively smaller region, named PSO-CL-pbest. To reduce this strategy's complexity, we randomly select a particle's pbest for all dimensions. The velocity updating strategy is as follows: <ref type="bibr" target="#b16">(17)</ref> where is an uniformly distributed real number in [0, 1] and is the pbest of a randomly selected particle. 2) Selection of Velocity Updating Strategies: Each velocity updating strategy has an execution probability , which is the probability of choosing the strategy to update a particle. Initially, we assign equal probabilities for all the four strategies, namely , and set their accumulators as . Every a fixed number of generations (that is, ), execution probability of the th strategy is updated by (18) <ref type="bibr" target="#b18">(19)</ref> where learning rate is used to control the learning speed of execution probabilities; is divided by to ensure that this term is smaller than 1. This updating method ensures that execution probabilities of the strategies able to produce higher quality solutions are increased along with swarm evolution. Suppose there are pop_size particles in the swarm. At each generation, each particle is updated by a velocity updating strategy selected by the execution probability, and then all particles are sorted according to their fitness values in a descending order. The th particle is assigned a weight by <ref type="bibr" target="#b19">(20)</ref> to make a particle with a higher fitness value have a larger weight <ref type="bibr" target="#b19">(20)</ref> The weight of each particle is added to the accumulator of the velocity strategy applied to this particle, i.e., , and then is used to update . This adaptive strategy of velocity updating is able to increase the probability of choosing suitable velocity updating strategies and at the same time decrease those unsuitable.</p><p>3) Solution Representation: Each application contains many tasks, such that all applications can be considered as a set of tasks, i.e., . A particle is expressed as a TN dimensions vector and each dimension (position) represents a task. A position with a larger value means the task denoted by this position has a higher priority and needs to be first picked and assigned in the scheduling process.</p><p>The ranked-order value (ROV) rule <ref type="bibr" target="#b24">[25]</ref> is used to decode a particle into a permutation of tasks to evaluate this particle <ref type="bibr" target="#b25">[26]</ref>. For example, for a problem with five tasks , the th particle is denoted by . The position has the greatest value, such that the task represented by is assigned a rank value one, as shown in Table <ref type="table" target="#tab_0">III</ref>; then is assigned a rank value two. Similarly, the rank values of 3, 4, and 5 are assigned to and , respectively. Thus, we can obtain a priority sequence of tasks, . 4) Evaluation Function: When using the SLPSO to optimize the task permutation to maximize the profit of , an evaluation function is necessary to calculate the fitness value of each particle in the swarm.</p><p>Each task in the set is allocated to one according to its priority expressed by the code of a particle. We try to allocate each task to because the cost of is the lowest among all clouds. If has available resources to meet a task's demand during its runtime, then the task is allocated to ; otherwise, the task is allocated to an EC with minimal cost that is chosen by <ref type="bibr" target="#b20">(21)</ref> where means the application that the th task belongs to. After completing allocation of all the tasks, the profit of is treated as the fitness value of the particle. The pseudocode of evaluation process is as follows.</p><p>a) Initialization: let . b) Calculate the total income by <ref type="bibr" target="#b21">(22)</ref> c) Calculate the total cost: Sort the task set in an ascending order according to the rank values represented by the code of a particle.</p><p>Let the th task in be and its start time be , .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>For to</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>While</head><p>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>For each</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>If ( or )</head><p>.</p><p>Break for.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>End If</head><p>End For</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>If</head><p>Calculate the cost for task by Update and for each . Break While.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>End If</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>End While</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>If</head><p>Select the EC with minimum cost using <ref type="bibr" target="#b20">(21)</ref>. Use the roulette wheel method to select a velocity updating strategy for according to the probability in <ref type="bibr" target="#b18">(19)</ref>. Update the position and speed of using the selected strategy, obtaining .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Calculate the cost of task by</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>End</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>If ( is better than )</head><p>is replaced by .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>End If</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>If ( is better than gbest)</head><p>Replace gbest by .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>End If</head><p>If ( is better than its pbest)</p><p>Replace the pbest by .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>End If End For</head><p>For ( : pop_size)</p><p>Update the accumulator by in <ref type="bibr" target="#b19">(20)</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>End For If ( mod )</head><p>For ( : 4) Update using ( <ref type="formula">18</ref>) and ( <ref type="formula">19</ref>). Let .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>End For</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>End If</head><p>Let .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>End While</head><p>c) Output the gbest to schedule the tasks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. EXPERIMENTAL RESULTS AND ANALYSIS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Experiment Design</head><p>To verify the effectiveness of our approach, we apply it to several problem instances. VM instance types and the private cloud and EC's prices are set based on our observation on public clouds, and are given in Tables IV-VI. Two types of resources, i.e., CPU and memory are chosen because they are two most typical configurations in choosing a VM instance in cloud <ref type="bibr" target="#b26">[27]</ref>, <ref type="bibr" target="#b27">[28]</ref>.    Three problem instances are designed. Instance 1 consists of 8 applications and its parameters are shown in Table <ref type="table" target="#tab_3">VII</ref>. VM instance type requested by each application is randomly selected from the above three VM types. In order to restrict the search space, the deadline of each application is a uniformly distributed random integer between 1 h and 5 h. To ensure the deadline of each application is longer than its runtime, the runtime is chosen as a uniformly distributed integer between 1 h and its deadline. We set the number of CPU to be 20 and the size of memory to be 40 GB simulate the situation of resource shortage. Instance 2 consists of 5 applications and instance 3 of 10. Their parameters are shown in Table <ref type="table" target="#tab_4">VIII</ref>.</p><p>Problem instance 1 is a small size one, which is used to compare our approach with the exact approach (CPLEX 12.0) to show whether our approach is able to find the optimal solutions. Problem instances 2 and 3 are large size ones, and are used to demonstrate SLPSO's ability of handling large size problems which cannot be properly handled by CPLEX. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Methods Compared</head><p>The SLPSO-based scheduling approach (SLPSO-SA) is compared with standard PSO-based scheduling approach (SPSO-SA), as well as IBM ILOG CPLEX 12.0 (a mathematical programming solver). SPSO-SA is constructed by replacing the SLPSO part of SLPSO-SA with standard PSO.</p><p>SLPSO-SA and SPSO-SA are given the same setting of parameters, as shown in Table <ref type="table" target="#tab_5">IX</ref>. and are set to 2.0 as suggested in <ref type="bibr" target="#b28">[29]</ref>. should be in the range of [0.2, 1.2] according to <ref type="bibr" target="#b29">[30]</ref>, and is assigned to 0.4 here. For all problem instances, the termination criteria of SLPSO and standard PSO are to reach the maximal number of generations (maxGen).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Experiment Results</head><p>SLPSO-SA and SPSO-SA are programmed in Matlab 7.0 and run on a PC with 64-bit Intel core i5 CPU and 4 GB memory using Windows 7 operation system. For each of the three problem instances, each of the two algorithms carries out ten independent runs. The formulation of the DCTS problem is realized by the optimization programming language (opl) and solved by CPLEX 12.0 that is also run on this PC.</p><p>1) Problem Instance 1: For this small size instance, CPLEX can obtain its optimal solution within a reasonable time. The average profit obtained in the ten runs of SLPSO-SA and SPSO-SA and their average runtime are given in Table <ref type="table">X</ref>. We can see that the average profit obtained by SLPSO-SA is 4.908, which is very close to the optimal profit found by CPLEX.</p><p>From Table <ref type="table">X</ref>, we can observe that the runtime of SLPSO-SA is longer than that of SPSO-SA. This is because for small size problem instance the time used by fitness evaluation part is short (about 3 s) and running PSO operations occupies a large proportion of total runtime. SLPSO has more additional operations than Standard PSO, resulting in taking more time to find a solution. However, we observe that the runtime of SLPSO-SA is very close to that of SPSO-SA when solving large size problem instances 2 and 3.</p><p>Since we obtain the optimal solution of this problem instance, we can further calculate the offline error (OE) and standard deviation (SD) of solutions found by SLPSO-SA and SPSO-SA by ( <ref type="formula">23</ref>) and <ref type="bibr" target="#b23">(24)</ref>, respectively. ( <ref type="formula">23</ref>)  where represents the number of runs; is the profit of the solution obtained in the th run and prof is the optimal profit obtained by CPLEX. <ref type="bibr" target="#b23">(24)</ref> where mean_prof is the average profit obtained in the runs. The OE and SD of solutions obtained by the two algorithms are given in Table <ref type="table" target="#tab_6">XI</ref>. The profits achieved by both algorithms are very close to the optimal one. The OE and SD of SLPSO-SA is much smaller than those of SPSO-SA, which shows that SLPSO-SA has more powerful search capability than SPSO-SA and is able to obtain more stable solutions.</p><p>2) Problem Instances 2 and 3: Problem instances 2 and 3 consist of more tasks and consumes more resources than instance 1. Since CPLEX cannot obtain their optimal solutions with a reasonable computational time, the maximal runtime of CPLEX is restricted as 5 h and 10 h for the two problem instances, respectively. Table <ref type="table" target="#tab_7">XII</ref> gives the average profit and runtime in ten runs of SPSO-SA and SLPSO-SA for these two instances.</p><p>We can see that the average profit obtained by SLPSO-SA is higher than that of SPSO-SA. This is because SLPSO has more powerful search capability thanks to the adaptive strategy to update velocity for each particle. The runtime of SLPSO-SA is similar to that of SPSO-SA because in this case the time for running operations of SLPSO only takes a small part of total run time, and the run time is dominated by fitness evaluation. From Table <ref type="table" target="#tab_7">XII</ref>, we can observe that although CPLEX runs much longer time (5 and 10 h), it still cannot obtain a good enough solution.</p><p>To further compare the performance of SLPSO-SA and SPSO-SA, the runtime of SPSO-SA is set to be identical and twice to that of SLPSO-SA, respectively, in both experiments. For problem instances 2 and 3, the runtime of CPLEX is set as three times and five times of SLPSO-SA, respectively. The profits obtained by the three methods are given in Table <ref type="table" target="#tab_8">XIII</ref>. It can be seen that SLPSO-SA gets the best results for instances 2 and 3, and CPLEX is able to obtain the best results for instance 1.   Since SPSO-SA is prone to stick at local optima, it cannot converge to a good solution even its runtime is twice as that of SLPSO-SA. Although the runtime of SLPSO-SA is a bit longer than that of SPSO-SA, it can be considered as a suitable price for SLPSO-SA to achieve a much better solution. CPLEX can tackle small-size problems very efficiently, but it cannot obtain satisfactory solutions for large size problems within a reasonable computational time. For problem instances 2 and 3, given a much longer time than the other two approaches, CPLEX still cannot obtain good solutions.</p><p>3) Algorithm Convergence and Utilization Rate: To show the global exploration capability of SLPSO for this problem, the average evolutionary curves of standard PSO and SLPSO, for three problem instances, are shown in Figs. <ref type="figure" target="#fig_3">2, 3,</ref> and<ref type="figure" target="#fig_4">4</ref>, respectively. The horizontal axis represents the number of evaluations and the vertical axis represents the profit value. It can be observed that, in early iterations standard PSO can converge more quickly than SLPSO but cannot continuously evolve the swarm in later iterations; while SLPSO is able to evolve the swarm continuously to find a better solution.</p><p>The utilization rate of CPU or Memory at the th time slot for the private cloud is calculated by <ref type="bibr" target="#b24">(25)</ref> where is the number of CPU or the size of memory requested by task ; total_res is the total CPU or memory in the private cloud; if task runs in the th time slot, then ; otherwise, . The average utilization rate of CPU or Memory is calculated by <ref type="bibr" target="#b25">(26)</ref> Table XIV gives both CPU and memory utilization rates for SLPSO-SA and SPSO-SA. It can be seen that SLPSO-SA can achieve a higher resource utilization ratio.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. RELATED WORK</head><p>Resource and task scheduling play a key role in cloud computing. Clouds often consists of large amount of resources such as processors, memory, storage, and software. In the meanwhile, clouds handle a lot of concurrent tasks. To ensure the service At present, many researches have been studied to effectively allocate cloud resources for a single cloud <ref type="bibr" target="#b30">[31]</ref>- <ref type="bibr" target="#b32">[33]</ref>. Nathani et al. <ref type="bibr" target="#b30">[31]</ref> proposed an algorithm to deal with deadline-sensitive task scheduling to improve the resource utilization of an IaaS provider. The deadline-sensitive policy in Haizea (http://haizea.cs.uchicago.edu) is improved by a swapping and backfilling method, which is able to accept more task requests comparing to existing algorithms in Haizea. This scheduling approach solves the limited resources problem by rejecting user requests, resulting in decreasing users' expectation. Zhao et al. <ref type="bibr" target="#b31">[32]</ref> proposed a genetic algorithm-based approach to schedule independent and dividable tasks to minimize the maximal complement time of all tasks, but did not consider the case of resource limitation. In <ref type="bibr" target="#b32">[33]</ref>, Li suggested that the job scheduling system should use cloud resources as few as possible to reduce the cost while meeting the requirement of QoS. In <ref type="bibr" target="#b33">[34]</ref>, power consumption in an IaaS cloud was reduced through optimizing the mapping between a VM instance and a physical server. In <ref type="bibr" target="#b34">[35]</ref>, resource reservation strategy was suggested by making use of previous log records. All the above studies focused on the local resources allocation in a single IaaS cloud, and do not consider scheduling tasks amongst different clouds. In these solutions, an IaaS provider will reject task requests when its resources are not sufficient to complete those tasks; however, this has a negative impact on its promised QoS and reputation <ref type="bibr" target="#b35">[36]</ref>.</p><p>In order to enhance clouds' elasticity and reliability, resource and task scheduling among multiple clouds has been studied. Lee et al. <ref type="bibr" target="#b36">[37]</ref> suggested a three-tier cloud structure, which consists of resource providers, service providers and consumers. The scheduling strategies of service requests should satisfy minimum cost of a service provider. The concept of cloud federation was proposed in <ref type="bibr" target="#b2">[3]</ref> and <ref type="bibr" target="#b3">[4]</ref>, which supplements local resources by integrating multiple clouds. In <ref type="bibr" target="#b2">[3]</ref>, a resource scheduling policy among clouds was proposed to increase profit of IaaS providers by terminating spot VMs. These methods are not easy to be applied to practice before standardization and cooperation agreements are published and signed by all members of cloud federation. Some researcher has studied resource allocation among different clouds from a cloud user's perspective. Bossche et al. <ref type="bibr" target="#b26">[27]</ref> presented a model of outsourcing tasks to public clouds to minimize cost from a cloud user's perspective. They used mathematical programming approach to solve this problem, which cannot deal with large problem size. Sotomayor et al. <ref type="bibr" target="#b37">[38]</ref> transformed an organization's existing infrastructure into a hybrid cloud model by supplementing local infrastructure with computing capacity from the other public clouds. In <ref type="bibr" target="#b38">[39]</ref>, a cloud broker is proposed to minimize users' budget through sending tasks to multiple cloud providers.</p><p>From cloud providers' perspective, effectively allocating limited resources is important to maximize its profit and guarantee the QoS. To the best of our knowledge, our research is the first one on building a framework to outsource tasks to external clouds from an IaaS provider's perspective to maximize profit and guarantee user-level QoS.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VII. CONCLUSION</head><p>In this paper, an integer programming model is established for the resources allocation problem of an IasS cloud in a hybrid cloud environment. A self-adaptive learning PSO (SLPSO)-based scheduling approach for this problem is proposed. In SLPSO, each dimension of a particle represents a task and a particle as a whole represents all tasks' priorities. This approach is able to obtain a high quality scheduling solution by adaptively selecting velocity updating strategies to update each particle. The produced solution is able to guarantee user-level QoS and improve IaaS providers' credibility and economic benefit. Experimental results show that the approach is effective and efficient for this problem. Its results are better than standard PSO, and those obtained by CPLEX for large problem size under a reasonable runtime.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Component view of a hybrid cloud framework.</figDesc><graphic coords="2,39.00,64.14,249.00,244.98" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>5 )</head><label>5</label><figDesc>Steps of SLPSO-Based Scheduling Approach: In this approach, each particle needs to select one of the four velocity updating strategies to update its speed and position. The execution probabilities of selecting those strategies are changed adaptively by the performance feedback of particles, as introduced in Section IV-B2. Pseudocode of the SLPSO-based scheduling approach is described as follows.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Average evolutionary curves for problem instance 1.</figDesc><graphic coords="8,52.98,185.16,221.06,177.96" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Average evolutionary curves for problem instance 2.</figDesc><graphic coords="8,52.98,399.12,221.06,172.98" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Average evolutionary curves for problem instance 3.</figDesc><graphic coords="8,317.04,185.10,221.00,174.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>TABLE III PARTICLE</head><label>III</label><figDesc>CODING AND DECODING</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>TABLE VI</head><label>VI</label><figDesc></figDesc><table><row><cell>ECS' PRICE</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>TABLE VII PARAMETERS</head><label>VII</label><figDesc></figDesc><table /><note><p>OF PROBLEM INSTANCE 1</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>TABLE VIII PARAMETERS</head><label>VIII</label><figDesc>OF PROBLEM INSTANCES 2 AND 3</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>TABLE IX PARAMETERS</head><label>IX</label><figDesc>OF SLPSO-SA AND SPSO-SA TABLE X COMPARISON OF AVERAGE PROFIT AND RUNTIME FOR PROBLEM INSTANCE 1</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>TABLE XI COMPARISON</head><label>XI</label><figDesc>OF OE AND SD FOR PROBLEM INSTANCE 1</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>TABLE XII COMPARISON</head><label>XII</label><figDesc>OF AVERAGE PROFIT AND RUNTIME FOR PROBLEM INSTANCES 2 AND 3</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8"><head>TABLE XIII COMPARISON</head><label>XIII</label><figDesc>OF THREE APPROACHES WITHIN LIMITED RUNTIME</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9"><head>TABLE XIV COMPARISON</head><label>XIV</label><figDesc>OF CPU AND MEMORY UTILIZATION RATES OF SLPSO-SA AND SPSO-SA quality and economic benefit, resource and task scheduling is a fundamental challenge in cloud computing.</figDesc><table /></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENT</head><p>The authors would like to thank Dr. C. Liu, R. Zhong and F. Xiang with the Computer School of Beijing University of Posts and Telecommunications for suggestions on the framework of cloud resources allocation.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Cloud computing: A study of infrastructure as a service (IaaS)</title>
		<author>
			<persName><forename type="first">S</forename><surname>Bhardwaj</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Jain</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Eng. Inf. Technol</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="60" to="63" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Cloud computing and emerging IT platforms: Vision, hype, and reality for delivering computing as the 5th utility</title>
		<author>
			<persName><forename type="first">R</forename><surname>Buyya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">S</forename><surname>Yeo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Venugopal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Broberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Future Generation Comput. Syst</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="599" to="616" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Resource provisioning policies to increase IaaS provider&apos;s profit in a federated cloud environment</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">N</forename><surname>Toosi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">N</forename><surname>Calheiros</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">K</forename><surname>Thulasiram</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Buyya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Int. Conf. High Perform</title>
		<meeting>IEEE Int. Conf. High Perform<address><addrLine>Banff, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="279" to="287" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Policy-Driven Service Placement Optimization in Federated Cloud</title>
		<author>
			<persName><forename type="first">D</forename><surname>Breitgand</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Maraschini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Tordsson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011">2011</date>
			<publisher>IBM Research Report</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">The problem with cloud-computing standardization</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ortiz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="13" to="16" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">GridBatch: Cloud computing for large-scale data-intensive batch applications</title>
		<author>
			<persName><forename type="first">H</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Orban</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Int. Symp. Cluster Comput. Grid</title>
		<meeting>IEEE Int. Symp. Cluster Comput. Grid</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="295" to="305" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Particle swarm optimization</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Eberhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Conf. Neural Netw</title>
		<meeting>IEEE Conf. Neural Netw<address><addrLine>Piscataway, NJ</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="1942" to="1948" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Empirical study of particle swarm optimization</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Eberhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Congr</title>
		<meeting>IEEE Congr<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="1945" to="1950" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A newly self-adaptive strategy for the PSO</title>
		<author>
			<persName><forename type="first">R</forename><surname>Xiao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Yu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Int. Conf. Natural Comput</title>
		<meeting>Int. Conf. Natural Comput</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="396" to="400" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A novel particle swarm optimizer using optimal for foraging theory</title>
		<author>
			<persName><forename type="first">B</forename><surname>Niu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>He</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proc. Comput. Intell. Bioinformat</title>
		<imprint>
			<biblScope unit="page" from="61" to="71" />
			<date type="published" when="2006">2006</date>
			<pubPlace>Kunming, China</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Self-organizing hierarchical particle swarm optimizer with time-varying acceleration coefficients</title>
		<author>
			<persName><forename type="first">A</forename><surname>Ratnaweera</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">K</forename><surname>Halgamuge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">C</forename><surname>Watson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Evol. Comput</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="240" to="255" />
			<date type="published" when="2004-06">Jun. 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Small worlds and mega-minds: Effects of neighborhood topology on particle swarm performance</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Congr</title>
		<meeting>IEEE Congr<address><addrLine>Piscataway, NJ, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="1931" to="1938" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Population structure and particle swarm performance</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Mendes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Congr</title>
		<meeting>IEEE Congr<address><addrLine>Honolulu, HI, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="1671" to="1676" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Particle swarm optimizer with neighborhood operator</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">N</forename><surname>Suganthan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Congr</title>
		<meeting>IEEE Congr<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="1958" to="1962" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Multiobjective optimization using dynamic neighborhood particle swarm optimization</title>
		<author>
			<persName><forename type="first">X</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Eberhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Congr</title>
		<meeting>IEEE Congr<address><addrLine>Honolulu, HI, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="1677" to="1681" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">On the improved performances of the particle swarm optimization algorithms with adaptive parameters, cross-over operator sand root mean square (RMS) variants for computing optimal control of a class of hybrid systems</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">S</forename><surname>Arumugam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">V C</forename><surname>Rao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Appl. Soft Comput</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="324" to="336" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Construction of fuzzy models for dynamic systems using multi-population cooperative particle swarm optimizer</title>
		<author>
			<persName><forename type="first">B</forename><surname>Niu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">L</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><forename type="middle">X</forename><surname>He</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc.Int. Conf. Fuzzy Syst. Knowl. Discovery</title>
		<meeting>.Int. Conf. Fuzzy Syst. Knowl. Discovery<address><addrLine>Changsha, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="987" to="1000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Multi-population cooperative particle swarm optimization</title>
		<author>
			<persName><forename type="first">B</forename><surname>Niu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">L</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><forename type="middle">X</forename><surname>He</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Eur. Conf. Advances Artif. Life</title>
		<meeting>Eur. Conf. Advances Artif. Life<address><addrLine>Canterbury, UK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="874" to="883" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A cooperative approach to particle swarm optimization</title>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">V D</forename><surname>Bergh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">P</forename><surname>Engelbrecht</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Evol. Comput</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="225" to="239" />
			<date type="published" when="2004-06">Jun. 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">A particle swarm optimizer with passive congregation</title>
		<author>
			<persName><forename type="first">S</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><forename type="middle">H</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">Y</forename><surname>Wen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Saunders</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Paton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Biosystems</title>
		<imprint>
			<biblScope unit="volume">78</biblScope>
			<biblScope unit="issue">1-3</biblScope>
			<biblScope unit="page" from="135" to="147" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Hybrid particle swarm optimizer with mass extinction</title>
		<author>
			<persName><forename type="first">X</forename><forename type="middle">F</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Int. Conf. Commun., Circuits, Syst</title>
		<meeting>Int. Conf. Commun., Circuits, Syst<address><addrLine>Chengdu, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="1170" to="1173" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Hybrid particle swarm optimizer with breeding and subpopulations</title>
		<author>
			<persName><forename type="first">M</forename><surname>Lbjerg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">K</forename><surname>Rasmussen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Krink</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proc. Genetic Evol. Comput. Conf</title>
		<imprint>
			<biblScope unit="page" from="469" to="476" />
			<date type="published" when="2001">2001</date>
			<pubPlace>San Francisco, CA, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Self-adaptive learning based particle swarm optimization</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Weise</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Tian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Inf. Sci</title>
		<imprint>
			<biblScope unit="volume">181</biblScope>
			<biblScope unit="issue">20</biblScope>
			<biblScope unit="page" from="4515" to="4538" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Comprehensive learning particle swarm optimizer for global optimization of multimodal function</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">J</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">K</forename><surname>Qin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Baskar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Evol. Comput</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="281" to="295" />
			<date type="published" when="2006-06">Jun. 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">An effective PSO-based memetic algorithm for flow shop scheduling</title>
		<author>
			<persName><forename type="first">B</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Jin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. System, Man, Cybern., Part B: Cybern</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="985" to="997" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Genetic algorithms and random keys for sequencing and optimization</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Bean</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ORSA J. Computing</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="154" to="160" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Cost-optimal scheduling in hybrid IaaS clouds for deadline constrained workload</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">V</forename><surname>Bossche</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Vanmechelen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Broeckhove</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Int. Conf. Cloud Comput</title>
		<meeting>IEEE Int. Conf. Cloud Comput<address><addrLine>Miami, FL</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="228" to="235" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Real time elastic cloud management for limited resources</title>
		<author>
			<persName><forename type="first">S</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Guo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Int. Conf. Cloud Comput., Washington</title>
		<meeting>IEEE Int. Conf. Cloud Comput., Washington</meeting>
		<imprint>
			<publisher>DC, USA</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="622" to="629" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Optimal PSO for collective robotic search applications</title>
		<author>
			<persName><forename type="first">S</forename><surname>Doctor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">K</forename><surname>Venayagamoorthy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">G</forename><surname>Gudise</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Congr</title>
		<meeting>IEEE Congr<address><addrLine>San Diego, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="1390" to="1395" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Parameter selection in particle swarm optimization</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Eberhard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Annu. Conf. Evol. Program</title>
		<meeting>Annu. Conf. Evol. Program</meeting>
		<imprint>
			<date type="published" when="1998">1998</date>
			<biblScope unit="page" from="591" to="601" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Policy based resource allocation in IaaS cloud</title>
		<author>
			<persName><forename type="first">A</forename><surname>Nathani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Chaudhary</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Somani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Future Generation Comput. Syst</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="94" to="103" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Independent tasks scheduling based on genetic algorithm in cloud computing</title>
		<author>
			<persName><forename type="first">C</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Int. Conf. Wireless Commun</title>
		<meeting>Int. Conf. Wireless Commun<address><addrLine>Marrakech, Morocco</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="1" to="4" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">An optimistic differentiated service job scheduling system for cloud computing service users and providers</title>
		<author>
			<persName><forename type="first">L</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Int. Conf. Multimedia and Ubiquitous Eng</title>
		<meeting>Int. Conf. Multimedia and Ubiquitous Eng<address><addrLine>Qingdao, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="295" to="299" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Design and implementation of adaptive power-aware virtual machine provisioner (APA-VMP) using swarm intelligence</title>
		<author>
			<persName><forename type="first">R</forename><surname>Jeyarani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Nagavent</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">V</forename><surname>Ram</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Future Generation Comput. Syst</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="811" to="821" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Dynamic resource scheduling and workflow management in cloud computing</title>
		<author>
			<persName><forename type="first">X</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Int. Conf</title>
		<meeting>Int. Conf<address><addrLine>Sydney, Australia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="440" to="448" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">A distributed multiple dimensional QoS constrained resource scheduling optimization policy in computational grid</title>
		<author>
			<persName><forename type="first">C</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Comput. Syst. Sci</title>
		<imprint>
			<biblScope unit="volume">72</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="706" to="726" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">A dynamic priority scheduling algorithm on service request scheduling in cloud computing</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Int. Conf. Electron</title>
		<meeting>Int. Conf. Electron<address><addrLine>Harbin, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="4665" to="4669" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Virtual infrastructure management in private and hybrid cloud</title>
		<author>
			<persName><forename type="first">B</forename><surname>Sotomayor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">S</forename><surname>Montero</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">M</forename><surname>Llorente</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Foster</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Internet Comput</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="14" to="22" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Optimal virtual machine placement across multiple cloud providers</title>
		<author>
			<persName><forename type="first">S</forename><surname>Chaisiri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Niyato</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Asia-Pacific Service Comput. Conf</title>
		<meeting>IEEE Asia-Pacific Service Comput. Conf<address><addrLine>Singapore</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="103" to="110" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">He is currently an Associate Professor with the Computer School</title>
		<author>
			<persName><forename type="first">Xingquan</forename><surname>Zuo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">M&apos;09) received the Ph</title>
		<meeting><address><addrLine>China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004">2004. 2004 to 2006. 2012 to 2013</date>
		</imprint>
		<respStmt>
			<orgName>Harbin Institute of Technology, Harbin ; Beijing University of Posts and Telecommunications ; Tsinghua University</orgName>
		</respStmt>
	</monogr>
	<note>he was a Postdoctoral Research Fellow with the Automation Department. he was a Visiting Scholar with the Industrial and System Engineering Department</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
