<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">An improved iterated greedy algorithm with a Tabu-based reconstruction strategy for the no-wait flowshop scheduling problem</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2015-02-12">12 February 2015</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Jian-Ya</forename><surname>Ding</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Automation</orgName>
								<orgName type="institution">Tsinghua University</orgName>
								<address>
									<postCode>100084</postCode>
									<settlement>Beijing</settlement>
									<country key="CN">PR China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Shiji</forename><surname>Song</surname></persName>
							<email>shijis@mail.tsinghua.edu.cn</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Automation</orgName>
								<orgName type="institution">Tsinghua University</orgName>
								<address>
									<postCode>100084</postCode>
									<settlement>Beijing</settlement>
									<country key="CN">PR China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Jatinder</forename><forename type="middle">N D</forename><surname>Gupta</surname></persName>
							<email>guptaj@uah.edu</email>
							<affiliation key="aff1">
								<orgName type="department">College of Business Administration</orgName>
								<orgName type="institution">University of Alabama in Huntsville</orgName>
								<address>
									<postCode>35899</postCode>
									<settlement>Huntsville</settlement>
									<region>AL</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Rui</forename><surname>Zhang</surname></persName>
							<email>r.zhang@ymail.com</email>
							<affiliation key="aff2">
								<orgName type="department">School of Economics and Management</orgName>
								<orgName type="institution">Nanchang University</orgName>
								<address>
									<postCode>330031</postCode>
									<settlement>Nanchang</settlement>
									<country key="CN">PR China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Raymond</forename><surname>Chiong</surname></persName>
							<email>raymond.chiong@newcastle.edu.au</email>
							<affiliation key="aff3">
								<orgName type="department" key="dep1">School of Design</orgName>
								<orgName type="department" key="dep2">Communication and Information Technology</orgName>
								<orgName type="institution">The University of Newcastle</orgName>
								<address>
									<postCode>2308</postCode>
									<settlement>Callaghan</settlement>
									<region>NSW</region>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Cheng</forename><surname>Wu</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Automation</orgName>
								<orgName type="institution">Tsinghua University</orgName>
								<address>
									<postCode>100084</postCode>
									<settlement>Beijing</settlement>
									<country key="CN">PR China</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">An improved iterated greedy algorithm with a Tabu-based reconstruction strategy for the no-wait flowshop scheduling problem</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2015-02-12">12 February 2015</date>
						</imprint>
					</monogr>
					<idno type="MD5">96151D095ADFA1FA5C99AFD88BA02E14</idno>
					<idno type="DOI">10.1016/j.asoc.2015.02.006</idno>
					<note type="submission">Received 12 July 2014 Received in revised form 28 January 2015 Accepted 1 February 2015</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T11:32+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>No-wait flow shop Iterated greedy algorithm Tabu search Makespan</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper proposes a Tabu-mechanism improved iterated greedy (TMIIG) algorithm to solve the nowait flowshop scheduling problem with a makespan criterion. The idea of seeking further improvement in the iterated greedy (IG) algorithm framework is based on the observation that the construction phase of the original IG algorithm may not achieve good performance in escaping from local minima when incorporating the insertion neighborhood search. To overcome this limitation, we have modified the IG algorithm by utilizing a Tabu-based reconstruction strategy to enhance its exploration ability. A powerful neighborhood search method that involves insert, swap, and double-insert moves is then applied to obtain better solutions from the reconstructed solution in the previous step. Empirical results on several benchmark problem instances and those generated randomly confirm the advantages of utilizing the new reconstruction scheme. In addition, our results also show that the proposed TMIIG algorithm is relatively more effective in minimizing the makespan than other existing well-performing heuristic algorithms.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>The no-wait flowshop scheduling problem (NWFSP) is an important branch of 'zero buffer' scheduling problems. It arises due to the processing characteristics of certain products, where each process follows the previous one immediately <ref type="bibr" target="#b0">[1]</ref>. Application domains of the NWFSP include chemical processing <ref type="bibr" target="#b1">[2]</ref>, plastic molding <ref type="bibr" target="#b2">[3]</ref>, food processing <ref type="bibr" target="#b2">[3]</ref> and steel rolling <ref type="bibr" target="#b3">[4]</ref>. Apart from these conventional industries, the NWFSP is also important for some advanced manufacturing systems such as just-in-time production systems <ref type="bibr" target="#b4">[5]</ref>, flexible manufacturing systems <ref type="bibr" target="#b5">[6]</ref>, and robotic cells <ref type="bibr" target="#b6">[7]</ref> where jobs are continuously processed with no in-process waiting time. In this study, we consider the NWFSP with the objective of minimizing the makespan. The makespan of a schedule is defined as the completion time of the last job leaving the system. This criterion is important and widely studied, since a minimum makespan usually implies a high utilization of the machines and thus results in low processing costs.</p><p>The NWFSP is a typical example of combinatorial optimization problems <ref type="bibr" target="#b7">[8]</ref>. When the problem size increases, these problems become complicated and are difficult to solve by exact methods like branch-and-bound or mixed integer programming techniques. To tackle this challenge, quite a number of metaheuristic methods have been designed, since they are usually able to find a high quality solution for middle-and large-scale problems within reasonable computational time. Representative algorithms include the genetic algorithm (GA) <ref type="bibr" target="#b8">[9]</ref>, estimation of distribution algorithm (EDA) <ref type="bibr" target="#b9">[10]</ref>, discrete particle swarm optimization (DPSO) <ref type="bibr" target="#b10">[11]</ref>, block-based evolutionary algorithm (BBEA) <ref type="bibr" target="#b11">[12]</ref>, discrete artificial bee colony algorithm (DABC) <ref type="bibr" target="#b12">[13]</ref>, and ant colony optimization (ACO) <ref type="bibr" target="#b13">[14]</ref>, among others. These algorithms have produced competitive results for many combinatorial optimization problems.</p><p>Although population-based metaheuristic algorithms can provide excellent results, they are in general fairly sophisticated and very sensitive to algorithm parameters such as the crossover probability, mutation probability and population size <ref type="bibr" target="#b14">[15]</ref>. This makes it difficult to obtain the same results when re-implementing a reported algorithm. As Pan and Ruiz <ref type="bibr" target="#b15">[16]</ref> pointed out, simple and easily adaptable algorithms are highly desirable. The iterated greedy (IG) algorithm <ref type="bibr" target="#b16">[17]</ref> is an example of such algorithms. It can provide comparable or even better computational results with simple and general search mechanisms.</p><p>The IG algorithm consists of two main phases: destruction and construction. In the destruction phase, some elements are removed from the current solution. In the construction phase, the removed elements are reinserted into the solution by applying a greedy constructive heuristic. A local search phase to improve the reconstructed solution may also be integrated into the algorithm's framework. Although the local search is optional, we have observed that it contributes significantly to the effectiveness of the IG algorithm. As reported by some related work in the literature (e.g., see <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b17">18]</ref>), the IG algorithm with a local search step performs better than when no local search is used. In addition, most of the relevant studies have incorporated local search into the algorithm framework, e.g., see <ref type="bibr" target="#b16">[17]</ref><ref type="bibr" target="#b17">[18]</ref><ref type="bibr" target="#b18">[19]</ref><ref type="bibr" target="#b19">[20]</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b21">22]</ref>. These results indicate that the local search step is an important component of the IG algorithm. In this regard, the IG algorithm can also be viewed as a method that iteratively applies a neighborhood search scheme to obtain a local optimal solution and a greedy perturbation scheme to escape from local minima.</p><p>Despite its simplicity and effectiveness, the IG algorithm has obvious limitations when solving large-scale problems. On the one hand, the algorithm adopts a "single solution" search strategy with a greedy insertion reconstruction technique. It may not achieve good solution diversity compared to population-based search methods. On the other hand, a neighborhood search method is usually applied once the reconstruction phase is completed, which over emphasizes on the exploration of discovered local minima regions. These facts indicate that it may be beneficial if the exploitation ability of the IG algorithm is improved.</p><p>The above-mentioned limitations of the IG algorithm motivate us to investigate for further improvement of the algorithm's structure. In the original perturbation scheme, randomly removed jobs are reinserted greedily into the current partial solution one by one to build a complete solution. However, we notice that this insertion reconstruction strategy is similar to the commonly used neighborhood search method based on insert moves. It may lead to repeated and excessive search as well as poor exploitation in the search process, since the algorithm may get stuck at local minima solutions with respect to insertion operations. To overcome this, we propose a Tabu-based construction method in the perturbation scheme to avoid repeated search and introduce solution diversities. More precisely, a succession of Tabu lists are built and maintained in the construction phase to prevent each removed object from being inserted at previously visited positions. After the reconstruction, a more powerful neighborhood structure based on insert, swap and double-insert moves is adopted to further enhance the exploration ability.</p><p>The contributions of this work can be summarized as follows:</p><p>• We have modified the structure of the IG algorithm by introducing a Tabu-based insertion strategy in the reconstruction phase. Advantages of utilizing the new reconstruction scheme are confirmed via empirical results on benchmark problem instances of the NWFSP. • We have analyzed the performance of the proposed Tabumechanism improved iterated greedy (TMIIG) algorithm and reported computational results comparing it against other wellperforming algorithms for the NWFSP. Our results show that the proposed algorithm is the most effective one. In addition, we have updated 43 new upper bound solutions for the benchmark instances of the NWFSP, which can be a good reference for other studies in the future.</p><p>The rest of the paper is organized as follows. The next section provides the problem formulation and a literature review on the NWFSP with a makespan criterion. In Section 3, we present the TMIIG algorithm for the problem at hand. The effectiveness of the proposed algorithm is verified through numerical experiments and results are discussed in Section 4. Finally, Section 5 summarizes the paper and highlights some possible future research directions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Background</head><p>In Section 2.1, we formally define the NWFSP with a makespan criterion. Then, we review the relevant literature in Section 2.2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.">Problem formulation</head><p>The NWFSP is described as follows. There are n jobs to be processed sequentially through m machines in the same order. Every job j (j = 1, 2, . . ., n) requires a predetermined processing time p i,j on every machine i (i = 1, 2, . . ., m). Setup times are independent of the processing sequence of the jobs and are included in the processing times. Each machine can execute at most one job at a time and a job can only be processed on one machine at a time. To satisfy the no-wait constraint, each job must be processed without any waiting time between consecutive operations. This implies that the start of a job must be delayed on the first machine when necessary. In this work, the target of scheduling is to minimize the makespan denoted as C max (or C m,n ), which equals the finishing time of the last job on the last machine. In addition, most assumptions related to the permutation flowshop scheduling problem described in <ref type="bibr" target="#b22">[23]</ref> are applicable to this problem.</p><p>The no-wait characteristic of the problem ensures that the completion time difference between adjacent jobs is determined by the processing times of the two jobs, regardless of the other jobs in the permutation. Thus, a completion time distance can be defined between each pair of jobs. The completion time distance from job i to job j is calculated as follows <ref type="bibr" target="#b23">[24]</ref>:</p><formula xml:id="formula_0">D i,j = max k=1,...,m m h=k (p h,j -p h,i ) + p k,i .<label>(1)</label></formula><p>It is worth noting that all the completion time distances can be calculated in advance and the time complexity is O(mn 2 ). A schedule for this problem can be expressed as a job permutation = [ (1), (2), . . ., (n)], where (k) ∈ {1, 2, . . ., n} and (k) /</p><formula xml:id="formula_1">= (k ), ∀ k / = k .</formula><p>It is clear that the makespan of a feasible schedule = [ (1), . . ., (n)] is given by</p><formula xml:id="formula_2">C max ( ) = C m,n ( ) = n j=2 D [j-1],[j] + m k=1 p (1),k ,</formula><p>where D [j-1],[j] represents the completion time distance between the (j -1)th and jth jobs in schedule , i.e. D (j-1), (j) .</p><p>To simplify the expression of the makespan, a dummy job (0), which has zero processing time on all machines, is introduced at the beginning of permutation . Thus, the schedule is redefined as = [ (0), (1), . . ., (n)]. With the above developments, we obtain the objective function (makespan) of a permutation as follows:</p><formula xml:id="formula_3">C max ( ) = C max ( ) = n i=1 D [j-1],[j] ,<label>(2)</label></formula><p>where D [0], <ref type="bibr" target="#b0">[1]</ref> is defined as Let denote the set of all n ! possible permutation schedules in the solution space for the NWFSP. The problem is then to find a permutation schedule * ∈ such that:</p><formula xml:id="formula_4">D [0],[1] = m k=1 p (1),k .</formula><formula xml:id="formula_5">C max ( * ) = min ∈ C max ( ).</formula><p>To provide a better understanding of the problem formulation, we present in Fig. <ref type="figure" target="#fig_0">1</ref> the Gantt chart of a no-wait flowshop with three machines and three jobs. It is clear that the makespan can be easily obtained by summing up the three completion time distances (D [0], <ref type="bibr" target="#b0">[1]</ref> , D <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b1">[2]</ref> and D <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b2">[3]</ref> ) marked in the figure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.">Literature review</head><p>The NWFSP is known to be NP-hard <ref type="bibr" target="#b24">[25,</ref><ref type="bibr" target="#b25">26]</ref>. Due to its NP-hard nature, exact algorithms require unacceptably large computational time for solving even moderate-size problems. Therefore, in recent years, a great deal of research attention has been given to the development and testing of various heuristics and metaheuristics. Heuristic methods start from an initial (seed) schedule of a few jobs. By appending and/or inserting new jobs to a known partial schedule at each step, they finally arrive at a complete schedule. Important heuristics for the no-wait flowshop to minimize the makespan have been developed by Bonney and Gundry <ref type="bibr" target="#b26">[27]</ref>, King and Spachis <ref type="bibr" target="#b27">[28]</ref>, Gangadharan and Rajendran <ref type="bibr" target="#b28">[29]</ref>, Rajendran <ref type="bibr" target="#b1">[2]</ref>, Bertolissi <ref type="bibr" target="#b29">[30]</ref> and Laha and Chakraborty <ref type="bibr" target="#b30">[31]</ref>. It is noticeable that some constructive heuristics for the regular flowshop problem, like the one proposed by Nawaz et al. <ref type="bibr" target="#b31">[32]</ref>, can also be adapted to minimize the makespan in the NWFSP.</p><p>Compared to constructive heuristics, metaheuristic methods can usually obtain better quality solutions for this problem, and thus have gained increasing research emphasis. In 2003, Aldowaisan and Allahverdi <ref type="bibr" target="#b32">[33]</ref> proposed two methods based on the GA and simulated annealing (SA). In the same year, Schuster and Framinan <ref type="bibr" target="#b33">[34]</ref> developed the variable neighborhood search (VNS) and hybrid GA and SA (GASA) methods. Both approaches outperform the best existing heuristics for the NWFSP with a makespan criterion. Later in 2005, Grabowski and Pempera <ref type="bibr" target="#b34">[35]</ref> presented two algorithms based on descending search and three other methods based on Tabu search (TS). These five methods can perform better than the VNS and GASA methods, and are widely cited for experimental comparison in the subsequent literature. In 2007, Liu et al. <ref type="bibr" target="#b35">[36]</ref> proposed several hybrid algorithms based on particle swarm optimization (PSO) and Nawaz-Enscore-Ham (NEH) heuristic. The hybrid PSO (HPSO) algorithm is superior to VNS and GASA as well.</p><p>More recently, quite a number of metaheuristics have been proposed for the NWFSP. In 2008, Pan et al. <ref type="bibr" target="#b10">[11]</ref> presented a DPSO algorithm for the NWFSP. They also hybridized the variable neighborhood descent (VND) algorithm based on swap and insert neighborhood structures with DPSO to further enhance its searching ability. The DPSO VND algorithm is able to outperform some existing heuristics and metaheuristics based on the makespan and total flowtime criteria. In the same year, Pan et al. <ref type="bibr" target="#b18">[19]</ref> designed an improved IG algorithm (IIGA). They showed that the performance of the IIGA is comparable with the DPSO VND algorithm. In 2009, Qian et al. <ref type="bibr" target="#b36">[37]</ref> proposed a hybrid differential evolution (HDE) approach based on parallel evolution and problem-dependent local exploitation. Their computational results show that the HDE algorithm is superior to the HPSO algorithm. In 2010, Tseng and Lin <ref type="bibr" target="#b37">[38]</ref> proposed a hybrid GA (HGA), which hybridizes a GA and an insertion-based local search method with cut-and-repair. In 2011, Jarboui et al. <ref type="bibr" target="#b38">[39]</ref> proposed another hybrid algorithm based on the GA and VNS (GA-VNS). They showed that both hybrid algorithms can outperform the five methods proposed by Grabowski and Pempera. In 2012, Samarghandi and ElMekkawy <ref type="bibr" target="#b39">[40]</ref> proposed a hybrid TS and PSO algorithm and utilized a new coding and decoding technique to improve its efficiency. Their numerical results indicate that the TS-PSO method performs better than other heuristics and metaheuristics proposed before 2008.</p><p>From this concise literature review, we have obtained the following insights:</p><p>• Integer programming is seldom utilized to solve the NWFSP. Most of the previous studies on this topic focus on designing heuristics and metaheuristics. As a result, the effectiveness of newly proposed algorithms is generally verified by comparing the upper bound solutions provided by existing well-performing methods. Thus, it is meaningful to make a fair comparison among the existing promising searching approaches and present a set of upto-date upper bounds as a reference for future research on the problem. • According to computational results reported in the studies we have reviewed, the most promising solution methods appear to be those metaheuristics proposed after the year of 2008. It seems that the DPSO VND , IIGA, HDE, HGA, GA-VNS and TS/PSO methods are the state-of-the-art algorithms for the NWFSP with a makespan criterion. Therefore, the proposed solution approach will be compared to these effective algorithms from the literature.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Tabu-mechanism improved iterated greedy algorithm</head><p>This section presents the details of our TMIIG algorithm for solving the NWFSP with a makespan criterion. The proposed algorithm consists of the following three phases: a modified NEH algorithm to generate an initial schedule, a Tabu-based reconstruction technique to help avoid local minima, and a neighborhood search method to improve the current solution. The reconstruction phase and the neighborhood search phase continue until a pre-defined termination condition is met. In this section, we first describe each phase of the proposed algorithm and the stopping criterion used. Then, we present the steps of the proposed TMIIG algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Initial solution</head><p>The NEH algorithm is an effective constructive heuristic algorithm for minimizing the makespan in a flowshop with an infinite storage buffer at each stage. Starting from an initial sort of jobs in non-increasing order of their total processing times, it constructs a complete solution by inserting these jobs one by one into the current partial schedule.</p><p>The original NEH algorithm is based on the hypothesis that jobs with larger total processing times should have higher priorities. However, inspired by the work of Framinan et al. <ref type="bibr" target="#b40">[41]</ref>, we found that the standard deviation of processing times of a job on different machines can significantly affect the makespan of a schedule. Therefore, we deploy a new priority rule based on standard deviations to obtain the initial job sequence. The standard deviation STD j for each job j is defined as follows:</p><formula xml:id="formula_6">STD j = 1 m -1 m i=1 (p i,j -AVG j ) 2 ,<label>(3)</label></formula><p>where AVG j = 1 m m i=1 p ij . Algorithm 1 describes the procedures of the modified NEH (MNEH) algorithm based on the above developments. </p><formula xml:id="formula_7">C j = D k-1 (j-1), 0 (k) + D 0 (k), k-1 (j) -D k-1 (j-1), k-1 (j) , j = 1, . . ., k, j * = arg min j=1,...,k C j ,</formula><p>where k-1 (0) and k-1 (k) are dummy jobs, which have zero processing time on all machines. Then, insert 0 (k) into sequence k-1 at position j * and denote the generated new sequence as k . 5: end for Output: sequence n and Cmax( n ) Since the completion time distance matrix (D i,j ) n×n can be calculated in advance, the main computational burden of the NEH algorithm lies in the inserting process of Steps 3-5. By considering the acceleration method for job insertion in <ref type="bibr" target="#b41">[42]</ref>, the NEH algorithm can be completed in O(n 2 ) computational effort.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Tabu-based reconstruction</head><p>The original IG algorithm generates a sequence of solutions by iteratively applying a greedy constructive heuristic that contains destruction and construction phases. In these two phases, some jobs are removed from a complete sequence and then reinserted into the obtained partial sequence using the NEH-insertion method. However, this reconstruction mechanism may fail to overcome local minima since it utilizes a similar mechanism as in the neighborhood search phase, which may lead to repeated search. Due to this, a new reconstruction technique that forbids some insert positions is proposed as follows.</p><p>Once the initial solution is obtained, we create a Tabu list TL j for each job j. When inserted into the partial sequence, job j is not allowed to be placed at a position immediately after any job in the Tabu list TL j . In each iteration, the Tabu list for each removed job is updated.</p><p>To start the reconstruction, d jobs (d ∈ {1, . . ., n -1}) are randomly selected and removed from the current complete candidate solution containing all n jobs. For each removed job (say (j)), the job that immediately precedes it (say (j -1)) is added to its Tabu list (say TL (j) ). Each Tabu list has a maximum length ML (ML &lt; n), which is a parameter to be tuned. Once the number of elements in a Tabu list TL j exceeds ML, the first element in TL j will be removed from this list.</p><p>The removed d jobs form a partial sequence R in the same order that they were selected. The partial solution of with nd jobs left also forms another partial sequence denoted as D in its original order of jobs. Next, the jobs in R are re-inserted into D one after another. These jobs will be inserted at the positions such that the makespan of the partial sequence is minimized while the Tabu constraint is not violated. An illustration is provided in Fig. <ref type="figure" target="#fig_2">2</ref> to help achieve a better understanding of the proposed Tabu based reconstruction method. Assume that the removed jobs are R = <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b1">2]</ref> and that the initial sequence is = [3, 6, 1, 4, 2, 7, 5] as shown in Fig. <ref type="figure" target="#fig_2">2(a)</ref>. Also assume that the maximum length of the Tabu list is ML = 3 and that the original Tabu lists for the removed jobs are TL 6 = {5, 4, 0} and TL 2 = {6}. Job 0 in the figure means that the first position in the sequence is prohibited. According to the Tabu mechanism, TL 6 and TL 2 are updated as TL 6 = {4, 0, 3} and TL 2 = {6, 4}. Restricted by the updated Tabu lists, job 6 and job 2 are reinserted into the sequence as depicted in Fig. <ref type="figure" target="#fig_2">2(b-c</ref>). Crosses in the figure indicate that the corresponding insertion position is prohibited. Note that we require ML nd, which implies that there are always some possible slots for the insertion of a job. As we can see from this example, previously visited insertion positions are excluded by the easily implemented Tabu mechanism. Despite its simplicity, this method is able to improve the performance of the IG algorithm significantly as revealed by the computational experiments reported in Section 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 2. Tabu based reconstruction</head><p>Input: Tabu list TL j (j = 1, . . ., n), sequence , number of removed jobs d. 1: Set R =∅ and D = . 2: for k = 1 to d do 3: Select a job (without repetition) at a random position j in . Add (j -1) to the end of Tabu list TL (j) . Insert job (j) at the end of sequence R and remove it from sequence D . 4: if Length(TL (j) ) &gt; ML then 5:</p><p>Delete the first element in TL (j) 6: end if 7: end for 8: for k = 1 to d 9: Evaluate each of the possible inserting positions of job R (k) that is not prohibited by the Tabu list TL R (k) . Insert job R (k) into D at the position with the smallest resulting makespan among the evaluated solutions. 10: end for Output: sequence D .</p><p>The procedure of the Tabu-based reconstruction strategy is given in Algorithm 2. Note that only the Tabu lists for the removed jobs are updated, and thus lines 2-7 only take O(d) time. The main computational burden in this reconstruction procedure lies in lines 8-10, where each of the possible inserting positions is evaluated. By considering a similar acceleration method as in the implementation of the MNEH algorithm, the reconstruction phase in each iteration can be completed in O(dn) time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">Neighborhood search</head><p>The schedule obtained in the reconstruction phase may not be a good enough solution, since there can be better sequences in its neighborhood. Therefore, a local search method is adopted to further improve the current sequence. In particular, the VNS method is applied to find more promising solutions in the solution space through changing neighborhood structures during the search process.</p><p>The selection of neighborhood structures can greatly influence the performance of the VNS method <ref type="bibr" target="#b42">[43]</ref>. Since a neighborhood is usually defined based on moves of jobs, the search process can benefit much from suitably selected moves. Among various types of moves considered in the literature, insert and pair-wise swap moves are most commonly used for the NWFSP. The neighborhood based on insert moves is defined by enumerating all possible pairs of positions j, k ∈ {1, . . ., n} in sequence (j / = k), where job (j) is removed and then reinserted at position k. The neighborhood based on swap moves is defined in a similar manner, which considers exchanging the positions of two jobs in the sequence.</p><p>In this work, the selected VNS moves contain not only the insert and swap moves <ref type="bibr" target="#b41">[42]</ref>, but also the rarely tested double-insert moves <ref type="bibr" target="#b30">[31,</ref><ref type="bibr" target="#b43">44]</ref>. The double-insert move considers removing two consecutive jobs from positions j and j + 1 (j = 1, . . ., n -1) and reinserting them together into positions k and k + 1 (k = 1, . . ., n -1, and k &gt; j + 1 or k &lt; j) in the same order.</p><p>Let denote the original sequence, and I (k, j), S (k, j) and DI (k, j) denote the sequences after the insert, swap and doubleinsert moves, respectively. It can be deduced from Eq. ( <ref type="formula" target="#formula_3">2</ref>) that the makespan increment caused by the above operations is given as follows:</p><p>Insert move:</p><formula xml:id="formula_8">C max = C max ( I (k, j)) -C max ( ) = D [k-1][j] + D [j][k] -D [k-1][k] + D [j-1][j+1] -D [j-1][j] -D [j][j+1]<label>(4)</label></formula><p>Swap move:</p><formula xml:id="formula_9">C max = C max ( S (k, j)) -C max ( ) = ⎧ ⎪ ⎨ ⎪ ⎩ D [k-1][j] + D [j][k] + D [k][j+1] -D [k-1][k] -D [k][j] -D [j][j+1] , if j = k + 1, D [j-1][k] + D [k][j] + D [j][k+1] -D [j-1][j] -D [j][k] -D [k][k+1] , if j = k -1, D [k-1][j] + D [j][k+1] + D [j-1][k] + D [k][j+1] -D [k-1][k] -D [k][k+1] -D [j-1][j] -D [j][j+1] ,</formula><p>otherwise.</p><p>(</p><p>Double insert moves:</p><formula xml:id="formula_11">C max = C max ( DI (k, j)) -C max ( ) = D [k-1][j] + D [j+1][k] -D [k-1][k] + D [j-1][j+2] -D [j-1][j] -D [j+1][j+2]<label>(6)</label></formula><p>It is noticeable that, although the number of neighborhood solutions is quite large, the computational time for evaluating them is acceptable if the above-mentioned accelerating techniques are utilized. According to Eqs. ( <ref type="formula" target="#formula_8">4</ref>)-( <ref type="formula" target="#formula_11">6</ref>), the makespan increments of insert, swap and double-insert moves can be calculated in O(1) time. Thus, the evaluation of neighborhood solutions is accelerated and the computational complexity of the local search phase can be reduced to O(n 2 ). The procedure of the proposed neighborhood search phase is described in Algorithm 3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 3. Neighborhood search</head><p>Input: sequence . 1: Set the swap neighborhood structure as N1, the insert neighborhood structure as N2 and the double-insert as N3. 2: while l 3 do 3:</p><p>Find the best neighbor solution of in N l ( ). 4:</p><p>if Cmax( ) &lt; Cmax( ) then 5:</p><p>Set = and l = 1. 6: else 7:</p><p>Set l = l + 1. 8:</p><p>end if 9: end while Output: sequence .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.">Acceptance and stopping criteria</head><p>After a new sequence is generated by the local search procedure, a decision of whether to accept it as the incumbent solution for the next iteration needs to be made. Inspired by the SA method <ref type="bibr" target="#b44">[45]</ref>, an acceptance criterion, which allows the acceptance of a slightly worse solution, is adopted in this work. In this acceptance criterion, is accepted with a probability of</p><formula xml:id="formula_12">p = min exp C max ( ) -C max ( ) T , 1 ,</formula><p>where is the solution of the current iteration and T is a constant temperature. Following the suggestions of Osman and Potts <ref type="bibr" target="#b45">[46]</ref>, the temperature is set as follows:</p><formula xml:id="formula_13">T = n j=1 m k=1 p kj 10 • m • n • T 0 ,</formula><p>where T 0 is a parameter to be adjusted. The maximum computational time is the stopping criterion adopted in this work. The proposed TMIIG algorithm stops when the maximum running time is reached. The final output solution by the algorithm is the best (i.e., one with the minimum makespan) in all iterations along the search process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5.">Overview of the TMIIG algorithm</head><p>Based on the above developments, the complete procedure of the proposed TMIIG algorithm is described in Algorithm 4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 4. The TMIIG algorithm 1:</head><p>(Initial solution): Generate an initial sequence using the MNEH algorithm (described in Algorithm 1). Let be the solution obtained in this step.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2:</head><p>Initialize all the Tabu lists as empty sets: </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3:</head><p>while the termination condition is not met do 4:</p><p>(Tabu based reconstruction): With respect to the Tabu lists, apply the Tabu-based reconstruction method (described in Algorithm 2) to sequence in order to construct another complete sequence . Update the Tabu lists. 5:</p><p>(Neighborhood search): Use the neighborhood search method (described in Algorithm 3) that hybridizes the insert, swap, and double-insert moves to improve sequence in the previous step. The improved solution is denoted as . 6:</p><p>(Acceptance): Set = with the probability of</p><formula xml:id="formula_14">p = 1, if &lt; 0, e -/T , if ≥ 0, where = Cmax( ) -Cmax( ). 7:</formula><p>end while Output: The best solution found.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Computational evaluation</head><p>This section describes the experimental settings and results obtained by the TMIIG algorithm for solving the NWFSP with a makespan criterion. Firstly, the experimental setup and the tested data set are described in Section 4.1. Then, the computational results are reported according to the following aspects:</p><p>• Calibration of the algorithm parameters.</p><p>• Assessment of the contribution of the proposed Tabu based reconstruction and neighborhood search method. • Comparison of the effectiveness of the proposed algorithm with that of some existing well-performing algorithms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">Experimental setup</head><p>The proposed algorithm and procedures were coded using C++, and the computational experiments were executed on a personal computer (PC) with an Intel Core (TM) CPU running at 3.20 GHz in a Windows 7 Operating System environment. To compare the performance of our proposed algorithm with other approaches, we conducted experiments using benchmark problems (rec01, rec03, . . ., rec41) from the OR-Library provided by Reeves <ref type="bibr" target="#b46">[47]</ref>. This benchmark set consists of 21 problem instances with seven different sizes, ranging from 20 jobs and five machines to 75 jobs and 20 machines. For each size, three instances are provided. Considering that the above problem instances are of relatively small scale, the Taillard benchmark set was also adopted for testing the algorithm's performance. This benchmark set consists of 120 problem instances with 12 different sizes, ranging from 20 jobs and five machines to 500 jobs and 20 machines. For each size, 10 instances are provided. We carried out 10 independent replications for the proposed TMIIG algorithm on each of the above instances, and the termination condition was set as the maximum running time t max = n 2 /2 ms.</p><p>Note that a different data set has been considered for parameter calibration and assessment of algorithm components, so as to avoid overfitting in the results. We applied Taillard's problem generation method <ref type="bibr" target="#b47">[48]</ref> to randomly generate instances of 20 different combinations of n and m, with m ∈ {5, 10, 15, 20}, n ∈ {40, 80, 120, 160, 200} and processing times uniformly distributed from 1 to 99. For each size, five instances were generated, resulting in a total of 100 instances.</p><p>To compare the results obtained from the experiments, the average relative percentage deviation (ARPD) was collected for measuring the average relative quality of the solutions. The ARPD is calculated as follows:</p><formula xml:id="formula_15">ARPD = 1 R R r=1 C r -C * R C * R × 100,<label>(7)</label></formula><p>where C r is the solution generated by a specific algorithm in the rth (r = 1, 2, . . ., R) experiment for a given problem size, and C * R is the best solution found so far. Obviously, the less the value of ARPD is, the better the algorithm's performance is.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">Parameter calibration</head><p>Since the performance of the proposed algorithm will be influenced by the selection of parameter values, preliminary experiments were conducted under a set of potential parameter values to find the best combinations of d, T 0 and ML. Specifically, we implemented the Design of Experiments method <ref type="bibr" target="#b48">[49]</ref> to analyze the effect of these factors on the ARPD. To this end, a full factorial design was considered with the factors at the following levels: d ∈ {3, 6, 9, 12, 15, 18}, T 0 ∈ {0.2, 0.6, 1.0, 1.4, 1.8} and ML ∈ {0, 1, 2, 3, 4}. These factors yield a total of 6 × 5 ×5 = 150 different configurations for the proposed TMIIG algorithm. For every instance in the generated data set, five replications of each algorithm were tested and the ARPD values were recorded. The experimental results were analyzed by means of a multifactor analysis of variance (ANOVA) technique. A major advantage of the ANOVA technique is that it calculates the magnitude of the F-ratio, which is a clear indicator of significance when the p-value is close to zero. More precisely, a large F-ratio indicates that the analyzed factor has a considerable effect on the response variable. To apply ANOVA, we checked its three main hypotheses, i.e., normality, homoscedasticity and independence of residuals. Statistical analysis showed that all of the three hypotheses could be accepted. The ANOVA results for our parameter calibration experiment are given in Table <ref type="table" target="#tab_0">1</ref>.</p><p>According to Table <ref type="table" target="#tab_0">1</ref>, the length of the Tabu list, i.e., parameter ML, results in the largest F-ratio. This implies that parameter ML is the most important factor that affects the average performance of the TMIIG algorithm. Therefore, a 95% confidence interval plot for the ARPD value under different selections of parameter ML is provided in Fig. <ref type="figure" target="#fig_4">3</ref>. It is observed from this figure that the choice of ML = 0 gives a much worse ARPD value than those obtained by non-zero values of parameter ML. This result clearly indicates the importance of incorporating the Tabu mechanism in the construction phase in the original IG algorithm.</p><p>Similar comparisons were conducted for parameters d and T 0 . A 95% confidence interval plot for the ARPD value under different selections of parameter d is provided in Fig. <ref type="figure" target="#fig_5">4</ref> and the corresponding figure for parameter T 0 is provided in Fig. <ref type="figure" target="#fig_6">5</ref>. It is clear from Fig. <ref type="figure" target="#fig_5">4</ref> that too small or too large a value of d would lead to deterioration of the algorithm's performance and the choice of d = 6 gives the best result. Fig. <ref type="figure" target="#fig_6">5</ref> suggests that the value T 0 = 0.6 gives the best average performance. In addition, no statistical difference is observed  between the selection of T 0 = 0.6 and T 0 = 1.0. This suggests that the algorithm is robust for the temperature parameter in the range [0.6, 1.0].</p><p>Based on the above results, the final parameter settings used in our proposed TMIIG algorithm are as follows: d = 6, ML = 1, and T 0 = 0.6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.">Effectiveness of algorithm components</head><p>To test the effectiveness of the proposed Tabu based reconstruction procedure, computational experiments were designed as follows. For each instance, the proposed TMIIG algorithm was evaluated twice. In the first trial, the algorithm was executed as described in the previous sections without any modification. In the second trial, however, it was executed by setting the Tabu length to zero and thus the effect of the Tabu mechanism disappeared. By comparing the experimental results of these two trials, the contribution of the Tabu mechanism can be clearly ascertained. For notational simplicity, the algorithm without the Tabu mechanism is referred to as TMIIG NT . The two algorithms were tested on the aforementioned generated data set with five independent replications on each instance.</p><p>We present a 95% confidence interval plot in Fig. <ref type="figure" target="#fig_7">6</ref> to show the performances of the TMIIG and TMIIG NT algorithms. As shown in the figure, the TMIIG algorithm achieves a smaller average ARPD value of 0.29, compared to the corresponding value of 0.56 for TMIIG NT . In addition, it can also be observed from the figure that the TMIIG algorithm outperforms TMIIG NT from a statistical viewpoint. This result suggests that the Tabu mechanism contributes significantly to the effectiveness of the TMIIG algorithm.</p><p>Next, we tested the effectiveness of the proposed neighborhood search method. The computational experiments were designed as  follows. For each instance, the proposed TMIIG algorithm was evaluated four times. In the first trial, the algorithm was executed without any modification. In the following trials, however, it was executed with neighborhood structures selected to be based on insert, swap, and hybrid insert-swap moves, denoted by TMIIG I , TMIIG S , and TMIIG IS respectively. By comparing the experimental results of these four trials, we can obtain a fair comparison between different selections of the neighborhood structures. Fig. <ref type="figure" target="#fig_8">7</ref> shows a 95% confidence interval plot of the four tested algorithms with different neighborhood structures. This figure clearly illustrates that it is of statistical significance that the TMIIG algorithm outperforms TMIIG I , TMIIG S and TMIIG IS , which indicates that incorporating double-insert moves in the neighborhood search step does help to improve the performance of the algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.">Comparison with existing algorithms</head><p>Firstly, the effectiveness of the proposed MNEH algorithm was tested. Table <ref type="table" target="#tab_1">2</ref> provides a detailed comparison of NEH and MNEH on the Taillard's 120 problem instances. We observe from this table that MNEH outperforms the NEH algorithm by 0.35% on average. It can also be seen that 10 out of 12 average makespans of MNEH are smaller than those of NEH, indicating that MNEH is superior to NEH. It is worth noting that these improvements are obtained without any additional computation efforts.</p><p>Then, we tested the effectiveness and efficiency of the proposed TMIIG algorithm in searching for better quality schedules. To do so, we compared its computational results with some existing algorithms: the DPSO VND <ref type="bibr" target="#b10">[11]</ref>, IIGA <ref type="bibr" target="#b18">[19]</ref>, HDE <ref type="bibr" target="#b36">[37]</ref>, HGA <ref type="bibr" target="#b37">[38]</ref>, GA-VNS <ref type="bibr" target="#b38">[39]</ref> and TS/PSO <ref type="bibr" target="#b39">[40]</ref>. These algorithms are the present state-ofthe-art algorithms for the NWFSP.</p><p>Since all of the six compared algorithms have previously been tested on the 21 benchmark instances from Reeves, numerical  comparisons were first conducted on this data set. To this end, we collected the computational results of the compared algorithms from the relevant literature <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b36">[37]</ref><ref type="bibr" target="#b37">[38]</ref><ref type="bibr" target="#b38">[39]</ref><ref type="bibr" target="#b39">[40]</ref>. It is noticeable that these studies reported their results with respect to different upper bound solutions: some compared their results with the makespan value provided by Rajendran <ref type="bibr" target="#b1">[2]</ref>, while the others compared the results with their best obtained results. We carefully recorded the actual makespan value of each compared algorithm according to the literature and listed the best results (including the TMIIG algorithm) for the 21 benchmark instances. The ARPD values of all these algorithms were recalculated based on the listed best values according to Eq. ( <ref type="formula" target="#formula_15">7</ref>). Thus, a valid comparison on ARPD values among them is possible. Table <ref type="table" target="#tab_2">3</ref> shows the experimental results for the seven algorithms in comparison. As can be seen in the table, the total average of ARPD by the proposed TMIIG algorithm is 0.09, which is superior to the corresponding values of 0.16, 0.19, 0.19, 0.24, 0.47 and 0.26 obtained by the IIGA, DPSO VND , GA-VNS, HGA, TS/PSO and HDA, respectively. Considering that the computational time consumed by these tested algorithms generally does not exceed one second on average, time consumption is not the main issue for this problem. Therefore, we conclude that the proposed TMIIG algorithm can outperform these state-of-the-art algorithms for the NWFSP in minimizing the makespan.</p><p>Note that the instances from the Reeves benchmark set are of relatively small scale and easy to solve in most cases, and the average performance of different algorithms tends to be quite similar. To further demonstrate the effectiveness of the TMIIG algorithm, numerical comparisons were conducted on the Taillard benchmark set <ref type="bibr" target="#b47">[48]</ref>, which contains a good number of large-scale instances. In particular, the proposed algorithm was compared with the IIGA, DPSO VND and GA-VNS algorithms. These are the best existing algorithms among the six considered in the previous comparison. Since only the performance of the GA-VNS algorithm was reported on Taillard's instances in the literature in detail, we re-implemented the IIGA and DPSO VND for comparison purposes. To distinguish from their original versions, the two re-implemented algorithms are denoted by IIGA * and DPSO * VND respectively. The computational results of GA-VNS were taken from <ref type="bibr" target="#b38">[39]</ref>, where the experiments were executed on a PC with a 3.2 GB processor. As per <ref type="bibr" target="#b38">[39]</ref>, the same maximum computational time (t max = n 2 /2 ms) was allowed for executing the GA-VNS algorithm.</p><p>Table <ref type="table">4</ref> summarizes the computational results for the abovementioned algorithms, where the upper bounds are taken from <ref type="bibr" target="#b38">[39]</ref>. As revealed in the table, the total ARPD average obtained by the proposed TMIIG algorithm is 0.14, superior to the corresponding values of 0.42, 0.67 and 0.37 obtained by the IIGA, GA-VNS and DPSO VND respectively. In other words, the proposed TMIIG algorithm is able to outperform the IIGA, GA-VNS and DPSO VND in solution quality in the average sense. Probing further into the statistics in the table shows that the four compared algorithms achieve similar results for the small-scale instances (n = 20), while the proposed TMIIG algorithm outperforms the other algorithms at a considerable margin for instances of middle and large scale. Since all the algorithms were executed in a similar computational environment with the same running time, these results again indicate that the proposed TMIIG algorithm is superior to the algorithms compared for solving the NWFSP with a makespan criterion.</p><p>Given that the proposed TMIIG algorithm is competitive against other state-of-the-art algorithms, new upper bound solutions have been discovered through the extensive computation tests. These solutions are reported in Table <ref type="table">5</ref>, where the improved upper bounds are highlighted in bold. The original upper bounds in the table </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. A Gantt chart of a no-wait flowshop.</figDesc><graphic coords="3,49.70,56.43,216.00,86.11" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Algorithm 1 .</head><label>1</label><figDesc>The MNEH algorithm 1: Generate an initial sequence by arranging the jobs in non-increasing order of the new priority index, STD j given in Eq. (3). Denote this sequence as 0 = [ 0 (1), 0 (2), . . ., 0 (n)]. 2: Select the first two jobs in 0 and evaluate the two possible partial sequences of the two jobs. The sequence with the smaller makespan will become the current partial sequence 2 = [ 2 (1), 2 (2)]. 3: for k = 3 to n do 4: Find the best position j * of inserting 0 (k) into the current partial sequence k-1 by the following equation:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. An illustration of the Tabu-based reconstruction method.</figDesc><graphic coords="4,336.00,55.66,204.00,200.88" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>TL j : = ∅ , j = 1, . . ., n. Set the temperature T := T0 • j /(10 • n • m).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. 95% Confidence interval for different selections of parameter ML.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. 95% Confidence interval for different selections of parameter d.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. 95% Confidence interval for different selections of parameter T0.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. 95% Confidence interval for the TMIIG, and TMIIGNT algorithms.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. 95% Confidence interval for the TMIIGI, TMIIGS, TMIIGIS and TMIIG algorithms.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1</head><label>1</label><figDesc>ANOVA results for the experiment on parameter calibration of the TMIIG algorithm.</figDesc><table><row><cell>Source</cell><cell>Df</cell><cell>Sum of</cell><cell>Mean</cell><cell>F-ratio</cell><cell>p-Value</cell></row><row><cell></cell><cell></cell><cell>squares</cell><cell>square</cell><cell></cell><cell></cell></row><row><cell>Main effects</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>A:d</cell><cell>5</cell><cell>46.0411</cell><cell>9.2082</cell><cell cols="2">100.4300 0.0000</cell></row><row><cell>B:T0</cell><cell>4</cell><cell>13.1675</cell><cell>3.2919</cell><cell>35.9000</cell><cell>0.0000</cell></row><row><cell>C:ML</cell><cell>4</cell><cell>213.2652</cell><cell>53.3163</cell><cell cols="2">581.5200 0.0000</cell></row><row><cell>Interactions</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>AB</cell><cell>20</cell><cell>0.7311</cell><cell>0.0366</cell><cell>0.4000</cell><cell>0.9920</cell></row><row><cell>AC</cell><cell>20</cell><cell>274.1942</cell><cell>13.7097</cell><cell cols="2">149.5300 0.0000</cell></row><row><cell>BC</cell><cell>16</cell><cell>0.6905</cell><cell>0.0432</cell><cell>0.4700</cell><cell>0.9620</cell></row><row><cell>ABC</cell><cell>80</cell><cell>2.8585</cell><cell>0.0357</cell><cell>0.3900</cell><cell>1.0000</cell></row><row><cell>Residual</cell><cell>14,850</cell><cell>1361.5033</cell><cell>0.0917</cell><cell></cell><cell></cell></row><row><cell cols="2">Total (corrected) 14,999</cell><cell>1912.4514</cell><cell></cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2</head><label>2</label><figDesc>Comparison of the NEH and MNEH algorithms.</figDesc><table><row><cell>n × m</cell><cell cols="2">Average makespan</cell><cell>Average improvement</cell></row><row><cell></cell><cell></cell><cell></cell><cell>ratio (%)</cell></row><row><cell></cell><cell>NEH</cell><cell>MNEH</cell><cell></cell></row><row><cell>20 × 5</cell><cell>1540.50</cell><cell>1543.60</cell><cell>-0.20</cell></row><row><cell>20 × 10</cell><cell>2053.90</cell><cell>2052.90</cell><cell>0.05</cell></row><row><cell>20 × 20</cell><cell>3062.50</cell><cell>3089.50</cell><cell>-0.88</cell></row><row><cell>50 × 5</cell><cell>3520.40</cell><cell>3472.70</cell><cell>1.36</cell></row><row><cell>50 × 10</cell><cell>4522.00</cell><cell>4478.60</cell><cell>0.96</cell></row><row><cell>50 × 20</cell><cell>6230.40</cell><cell>6156.90</cell><cell>1.18</cell></row><row><cell>100 × 5</cell><cell>6719.00</cell><cell>6674.20</cell><cell>0.67</cell></row><row><cell>100 × 10</cell><cell>8537.10</cell><cell>8515.00</cell><cell>0.26</cell></row><row><cell>100 × 20</cell><cell>11,247.20</cell><cell>11,247.30</cell><cell>0.00</cell></row><row><cell>200 × 10</cell><cell>16,354.60</cell><cell>16,263.80</cell><cell>0.56</cell></row><row><cell>200 × 20</cell><cell>21,089.70</cell><cell>21,028.80</cell><cell>0.29</cell></row><row><cell>500 × 20</cell><cell>49,710.50</cell><cell>49,680.40</cell><cell>0.06</cell></row><row><cell>Average</cell><cell>NA</cell><cell>NA</cell><cell>0.35</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 3</head><label>3</label><figDesc>Comparison of results based on Reeve's bechmark set with a makespan criterion.</figDesc><table><row><cell>Name</cell><cell>n × m</cell><cell>Best</cell><cell>IIGA</cell><cell></cell><cell>DPSOVND</cell><cell></cell><cell>GA-VNS</cell><cell></cell><cell>HGA</cell><cell></cell><cell>TS/PSO</cell><cell></cell><cell>HDE</cell><cell></cell><cell>TMIIG</cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell>ARPD</cell><cell>Time</cell><cell>ARPD</cell><cell>Time</cell><cell>ARPD</cell><cell>Time</cell><cell>ARPD</cell><cell>Time</cell><cell>ARPD</cell><cell>Time</cell><cell>ARPD</cell><cell>Time</cell><cell>ARPD</cell><cell>Time</cell></row><row><cell>Rec1</cell><cell>20 × 5</cell><cell>1526</cell><cell>0.00</cell><cell>0.02</cell><cell>0.00</cell><cell>0.01</cell><cell>0.00</cell><cell>0.01</cell><cell>0.00</cell><cell>0.01</cell><cell>0.00</cell><cell>0.34</cell><cell>0.00</cell><cell>3.10</cell><cell>0.00</cell><cell>0.20</cell></row><row><cell>Rec3</cell><cell>20 × 5</cell><cell>1361</cell><cell>0.00</cell><cell>0.02</cell><cell>0.00</cell><cell>0.00</cell><cell>0.00</cell><cell>0.00</cell><cell>0.00</cell><cell>0.01</cell><cell>0.00</cell><cell>0.31</cell><cell>0.00</cell><cell>3.10</cell><cell>0.00</cell><cell>0.20</cell></row><row><cell>Rec5</cell><cell>20 × 5</cell><cell>1511</cell><cell>0.01</cell><cell>0.02</cell><cell>0.02</cell><cell>0.02</cell><cell>0.01</cell><cell>0.00</cell><cell>0.00</cell><cell>0.01</cell><cell>0.42</cell><cell>0.28</cell><cell>0.09</cell><cell>3.10</cell><cell>0.00</cell><cell>0.20</cell></row><row><cell>Rec7</cell><cell>20 × 10</cell><cell>2042</cell><cell>0.00</cell><cell>0.02</cell><cell>0.00</cell><cell>0.00</cell><cell>0.00</cell><cell>0.01</cell><cell>0.00</cell><cell>0.01</cell><cell>0.20</cell><cell>0.38</cell><cell>0.00</cell><cell>3.90</cell><cell>0.00</cell><cell>0.20</cell></row><row><cell>Rec9</cell><cell>20 × 10</cell><cell>2042</cell><cell>0.00</cell><cell>0.02</cell><cell>0.00</cell><cell>0.00</cell><cell>0.02</cell><cell>0.02</cell><cell>0.00</cell><cell>0.01</cell><cell>0.00</cell><cell>0.40</cell><cell>0.00</cell><cell>3.80</cell><cell>0.00</cell><cell>0.20</cell></row><row><cell>Rec11</cell><cell>20 × 10</cell><cell>1881</cell><cell>0.00</cell><cell>0.02</cell><cell>0.00</cell><cell>0.01</cell><cell>0.00</cell><cell>0.01</cell><cell>0.00</cell><cell>0.01</cell><cell>0.21</cell><cell>0.39</cell><cell>0.15</cell><cell>3.90</cell><cell>0.00</cell><cell>0.20</cell></row><row><cell>Rec13</cell><cell>20 × 15</cell><cell>2545</cell><cell>0.00</cell><cell>0.02</cell><cell>0.00</cell><cell>0.01</cell><cell>0.00</cell><cell>0.01</cell><cell>0.00</cell><cell>0.01</cell><cell>0.11</cell><cell>0.42</cell><cell>0.00</cell><cell>5.10</cell><cell>0.00</cell><cell>0.20</cell></row><row><cell>Rec15</cell><cell>20 × 15</cell><cell>2529</cell><cell>0.00</cell><cell>0.02</cell><cell>0.00</cell><cell>0.00</cell><cell>0.00</cell><cell>0.01</cell><cell>0.00</cell><cell>0.01</cell><cell>0.17</cell><cell>0.40</cell><cell>0.00</cell><cell>5.20</cell><cell>0.00</cell><cell>0.20</cell></row><row><cell>Rec17</cell><cell>20 × 15</cell><cell>2587</cell><cell>0.00</cell><cell>0.02</cell><cell>0.00</cell><cell>0.00</cell><cell>0.00</cell><cell>0.01</cell><cell>0.00</cell><cell>0.01</cell><cell>0.04</cell><cell>0.44</cell><cell>0.00</cell><cell>5.20</cell><cell>0.00</cell><cell>0.20</cell></row><row><cell>Rec19</cell><cell>30 × 10</cell><cell>2850</cell><cell>0.00</cell><cell>0.04</cell><cell>0.19</cell><cell>0.02</cell><cell>0.11</cell><cell>0.00</cell><cell>0.00</cell><cell>0.03</cell><cell>0.72</cell><cell>0.51</cell><cell>0.06</cell><cell>10.40</cell><cell>0.00</cell><cell>0.45</cell></row><row><cell>Rec21</cell><cell>30 × 10</cell><cell>2821</cell><cell>0.18</cell><cell>0.04</cell><cell>0.11</cell><cell>0.04</cell><cell>0.09</cell><cell>0.02</cell><cell>0.28</cell><cell>0.03</cell><cell>0.17</cell><cell>0.49</cell><cell>0.18</cell><cell>10.20</cell><cell>0.07</cell><cell>0.45</cell></row><row><cell>Rec23</cell><cell>30 × 10</cell><cell>2700</cell><cell>0.00</cell><cell>0.04</cell><cell>0.05</cell><cell>0.05</cell><cell>0.07</cell><cell>0.05</cell><cell>0.00</cell><cell>0.03</cell><cell>0.07</cell><cell>0.53</cell><cell>0.12</cell><cell>10.40</cell><cell>0.00</cell><cell>0.45</cell></row><row><cell>Rec25</cell><cell>30 × 15</cell><cell>3593</cell><cell>0.01</cell><cell>0.04</cell><cell>0.05</cell><cell>0.03</cell><cell>0.00</cell><cell>0.02</cell><cell>0.00</cell><cell>0.03</cell><cell>0.52</cell><cell>0.55</cell><cell>0.03</cell><cell>15.00</cell><cell>0.00</cell><cell>0.45</cell></row><row><cell>Rec27</cell><cell>30 × 15</cell><cell>3431</cell><cell>0.01</cell><cell>0.05</cell><cell>0.25</cell><cell>0.06</cell><cell>0.08</cell><cell>0.07</cell><cell>0.00</cell><cell>0.03</cell><cell>0.18</cell><cell>0.58</cell><cell>0.18</cell><cell>14.80</cell><cell>0.01</cell><cell>0.45</cell></row><row><cell>Rec29</cell><cell>30 × 15</cell><cell>3291</cell><cell>0.01</cell><cell>0.06</cell><cell>0.09</cell><cell>0.02</cell><cell>0.13</cell><cell>0.06</cell><cell>0.00</cell><cell>0.03</cell><cell>0.29</cell><cell>0.61</cell><cell>0.20</cell><cell>14.90</cell><cell>0.03</cell><cell>0.45</cell></row><row><cell>Rec31</cell><cell>50 × 10</cell><cell>4311</cell><cell>0.28</cell><cell>0.11</cell><cell>0.33</cell><cell>0.33</cell><cell>0.42</cell><cell>0.34</cell><cell>0.54</cell><cell>0.27</cell><cell>1.01</cell><cell>1.29</cell><cell>0.55</cell><cell>3.80</cell><cell>0.13</cell><cell>1.25</cell></row><row><cell>Rec33</cell><cell>50 × 10</cell><cell>4428</cell><cell>0.67</cell><cell>0.10</cell><cell>0.53</cell><cell>0.34</cell><cell>0.62</cell><cell>0.36</cell><cell>0.68</cell><cell>0.25</cell><cell>0.98</cell><cell>1.91</cell><cell>0.87</cell><cell>3.70</cell><cell>0.30</cell><cell>1.25</cell></row><row><cell>Rec35</cell><cell>50 × 10</cell><cell>4397</cell><cell>0.15</cell><cell>0.10</cell><cell>0.29</cell><cell>0.34</cell><cell>0.40</cell><cell>0.30</cell><cell>0.62</cell><cell>0.23</cell><cell>0.63</cell><cell>1.85</cell><cell>0.74</cell><cell>3.70</cell><cell>0.19</cell><cell>1.25</cell></row><row><cell>Rec37</cell><cell>75 × 20</cell><cell>8014</cell><cell>0.69</cell><cell>0.18</cell><cell>0.77</cell><cell>1.16</cell><cell>0.82</cell><cell>0.35</cell><cell>1.33</cell><cell>1.45</cell><cell>1.21</cell><cell>3.42</cell><cell>0.81</cell><cell>14.70</cell><cell>0.33</cell><cell>2.81</cell></row><row><cell>Rec39</cell><cell>75 × 20</cell><cell>8428</cell><cell>0.62</cell><cell>0.18</cell><cell>0.71</cell><cell>0.99</cell><cell>0.65</cell><cell>0.98</cell><cell>0.91</cell><cell>1.28</cell><cell>1.32</cell><cell>3.51</cell><cell>0.71</cell><cell>14.60</cell><cell>0.46</cell><cell>2.81</cell></row><row><cell>Rec41</cell><cell>75 × 20</cell><cell>8442</cell><cell>0.75</cell><cell>0.18</cell><cell>0.65</cell><cell>0.88</cell><cell>0.62</cell><cell>1.12</cell><cell>0.75</cell><cell>1.07</cell><cell>1.52</cell><cell>3.50</cell><cell>0.73</cell><cell>14.70</cell><cell>0.44</cell><cell>2.81</cell></row><row><cell>Average</cell><cell></cell><cell></cell><cell>0.16</cell><cell>0.06</cell><cell>0.19</cell><cell>0.21</cell><cell>0.19</cell><cell>0.18</cell><cell>0.24</cell><cell>0.23</cell><cell>0.47</cell><cell>1.05</cell><cell>0.26</cell><cell>8.21</cell><cell>0.09</cell><cell>0.79</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>This work is supported by the National Natural Science Foundation of China under Grants 61273233, 61473141 and 61104176, as well as the Research Foundation for the Doctoral Program of Higher Education under Grants 20120002110035 and 20130002130010.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>are taken directly from <ref type="bibr" target="#b38">[39]</ref>. As can be seen in the table, we have updated a total of 43 new best solutions for the NWFSP on Taillard's data set. These best values can be a reference for future work along this line of research. Interested readers are referred to the online supplementary material of this work on the journal's website to access the sequences of jobs relative to these updated upper bounds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Conclusion and future work</head><p>In this paper, we have presented an improved iterated greedy algorithm with a Tabu reconstruction strategy for the NWFSP with a makespan criterion. Unlike many other reported population-based metaheuristics in the literature, the proposed TMIIG algorithm is simple and can be easily replicated. Despite its simplicity, the developed algorithm provides promising computational results.</p><p>The good performance of the TMIIG algorithm largely depends on the Tabu-based reconstruction strategy in the algorithm framework. This reconstruction technique improves the exploitation ability of the algorithm and leads to better performance when compared to other well-performing algorithms. Therefore, this work not only provides a suitable metaheuristic for solving the NWFSP, but also shows a promising direction for improving the performance of the IG algorithm for other problems.</p><p>Several issues deserve further investigation. First, it would be interesting to implement the Tabu-based reconstruction method for improving the performance of other metaheuristics. Second, it would be meaningful to consider more powerful problemdependent neighborhood search approaches to strengthen the exploration ability of various algorithms for solving the NWFSP. Third, developing similar algorithms for other scheduling problems involving different processing configurations and/or different objective functions is a potential research direction. Finally, the idea of combining Tabu-based mechanisms with the IG algorithm for other combinatorial optimization problems could a worthwhile avenue for future research.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Appendix A. Supplementary Data</head><p>Supplementary data associated with this article can be found, in the online version, at http://dx.doi.org/10.1016/j.asoc.2015.02.006.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Scheduling: Theory, Algorithms, and Systems</title>
		<author>
			<persName><forename type="first">M</forename><surname>Pinedo</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">2012</date>
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A no-wait flowshop scheduling heuristic to minimize makespan</title>
		<author>
			<persName><forename type="first">C</forename><surname>Rajendran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Oper. Res. Soc</title>
		<imprint>
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="472" to="478" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A survey of machine scheduling problems with blocking and no-wait in process</title>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">G</forename><surname>Hall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Sriskandarajah</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Oper. Res</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="510" to="525" />
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Minimizing total tardiness in no-wait flowshops</title>
		<author>
			<persName><forename type="first">T</forename><surname>Aldowaisan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Allahverdi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Found, Comput. Decis. Sci</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="page" from="149" to="162" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">The just-in-time scheduling problem in a flow-shop scheduling system</title>
		<author>
			<persName><forename type="first">D</forename><surname>Shabtay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">216</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="521" to="532" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">No-wait flexible flowshop scheduling with no-idle machines</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Xing</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Bai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Oper. Res. Lett</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="609" to="614" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Scheduling no-wait robotic cells with two and three machines</title>
		<author>
			<persName><forename type="first">A</forename><surname>Agnetis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">123</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="303" to="314" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><surname>Schrijver</surname></persName>
		</author>
		<title level="m">Combinatorial Optimization: Polyhedra and Efficiency</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Integrating dominance properties with genetic algorithms for parallel machine scheduling problems with setup times</title>
		<author>
			<persName><forename type="first">P.-C</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S.-H</forename><surname>Chen</surname></persName>
		</author>
		<idno type="DOI">10.1016/j.asoc.2010.03.003</idno>
		<ptr target="http://dx.doi.org/10.1016/j.asoc.2010.03.003" />
	</analytic>
	<monogr>
		<title level="j">Appl. Soft Comput</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="1263" to="1274" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">An effective estimation of distribution algorithm for the multimode resource-constrained project scheduling problem</title>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Fang</surname></persName>
		</author>
		<idno type="DOI">10.1016/j.asoc.2010.03.003</idno>
	</analytic>
	<monogr>
		<title level="j">Comput. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="449" to="460" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A discrete particle swarm optimization algorithm for the no-wait flowshop scheduling problem</title>
		<author>
			<persName><forename type="first">Q.-K</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Fatih Tasgetiren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y.-C</forename><surname>Liang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="2807" to="2839" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A block-based evolutionary algorithm for flow-shop scheduling problem</title>
		<author>
			<persName><forename type="first">P.-C</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M.-H</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">K</forename><surname>Tiwari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Appl. Soft Comput</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="4536" to="4547" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A discrete artificial bee colony algorithm for the lot-streaming flow shop scheduling problem</title>
		<author>
			<persName><forename type="first">Q.-K</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Fatih Tasgetiren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">N</forename><surname>Suganthan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">J</forename><surname>Chua</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Inf. Sci</title>
		<imprint>
			<biblScope unit="volume">181</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="2455" to="2468" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A new ant colony algorithm for makespan minimization in permutation flow shops</title>
		<author>
			<persName><forename type="first">F</forename><surname>Ahmadizar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Ind. Eng</title>
		<imprint>
			<biblScope unit="volume">63</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="355" to="361" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m">Natural Intelligence for Scheduling, Planning and Packing Problems</title>
		<editor>
			<persName><forename type="first">R</forename><surname>Chiong</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">S</forename></persName>
		</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="volume">250</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Local search methods for the flowshop scheduling problem with flowtime minimization</title>
		<author>
			<persName><forename type="first">Q.-K</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ruiz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">222</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="31" to="43" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A simple and effective iterated greedy algorithm for the permutation flowshop scheduling problem</title>
		<author>
			<persName><forename type="first">R</forename><surname>Ruiz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">177</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="2033" to="2049" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">An iterated greedy heuristic for the sequence dependent setup times flowshop problem with makespan and weighted tardiness objectives</title>
		<author>
			<persName><forename type="first">R</forename><surname>Ruiz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">187</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="1143" to="1159" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">An improved iterated greedy algorithm for the no-wait flow shop scheduling problem with makespan criterion</title>
		<author>
			<persName><forename type="first">Q.-K</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B.-H</forename><surname>Zhao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Adv. Manuf. Technol</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">7-8</biblScope>
			<biblScope unit="page" from="778" to="786" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">An iterated greedy algorithm for the flowshop scheduling problem with blocking</title>
		<author>
			<persName><forename type="first">I</forename><surname>Ribas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Companys</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Tort-Martorell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Omega</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="293" to="301" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Accelerated methods for total tardiness minimisation in no-wait flowshops</title>
		<author>
			<persName><forename type="first">J</forename><surname>Ding</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">N</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Wu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Prod. Res</title>
		<imprint>
			<biblScope unit="volume">53</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="1002" to="1018" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">A variable iterated greedy algorithm with differential evolution for the no-idle permutation flowshop scheduling problem</title>
		<author>
			<persName><forename type="first">M</forename><surname>Fatih Tasgetiren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q.-K</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">N</forename><surname>Suganthan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Buyukdagli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="1729" to="1743" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Flowshop scheduling research after five decades</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">N D</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">F</forename><surname>Stafford</surname><genName>Jr</genName></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">169</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="699" to="711" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Solution of the flowshop-scheduling problem with no intermediate queues</title>
		<author>
			<persName><forename type="first">D</forename><surname>Wismer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Oper. Res</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="689" to="697" />
			<date type="published" when="1972">1972</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Computer and Intractability: A Guide to the NP-Completeness</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">R</forename><surname>Garey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Johnson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990">1990</date>
			<publisher>WH Freeman and Company</publisher>
			<pubPlace>New York, NY</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">The three-machine no-wait flow shop is NP-complete</title>
		<author>
			<persName><forename type="first">H</forename><surname>Röck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Assoc. Comput. Mach</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="336" to="345" />
			<date type="published" when="1984">1984</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Solutions to the constrained flowshop sequencing problem</title>
		<author>
			<persName><forename type="first">M</forename><surname>Bonney</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Gundry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Oper. Res. Q</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="869" to="883" />
			<date type="published" when="1976">1976</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Heuristics for flow-shop scheduling</title>
		<author>
			<persName><forename type="first">J</forename><surname>King</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Spachis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Prod. Res</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="345" to="357" />
			<date type="published" when="1980">1980</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Heuristic algorithms for scheduling in the nowait flowshop</title>
		<author>
			<persName><forename type="first">R</forename><surname>Gangadharan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Rajendran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Prod. Econ</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="285" to="290" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Heuristic algorithm for scheduling in the no-wait flow-shop</title>
		<author>
			<persName><forename type="first">E</forename><surname>Bertolissi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Mater. Process. Technol</title>
		<imprint>
			<biblScope unit="volume">107</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="459" to="465" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">A constructive heuristic for minimizing makespan in no-wait flow shop scheduling</title>
		<author>
			<persName><forename type="first">D</forename><surname>Laha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><forename type="middle">K</forename><surname>Chakraborty</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Adv. Manuf. Technol</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="issue">1-2</biblScope>
			<biblScope unit="page" from="97" to="109" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">A heuristic algorithm for the m-machine, n-job flow-shop sequencing problem</title>
		<author>
			<persName><forename type="first">M</forename><surname>Nawaz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Enscore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Ham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Omega</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="91" to="95" />
			<date type="published" when="1983">1983</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">New heuristics for no-wait flowshops to minimize makespan</title>
		<author>
			<persName><forename type="first">T</forename><surname>Aldowaisan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Allahverdi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="1219" to="1231" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Approximative procedures for no-wait job shop scheduling</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">J</forename><surname>Schuster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Framinan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Oper. Res. Lett</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="308" to="318" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Some local search algorithms for no-wait flowshop problem with makespan criterion</title>
		<author>
			<persName><forename type="first">J</forename><surname>Grabowski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pempera</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="2197" to="2212" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">An effective PSO-based memetic algorithm for flow shop scheduling</title>
		<author>
			<persName><forename type="first">B</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y.-H</forename><surname>Jin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Syst. Man Cybern. B: Cybern</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="18" to="27" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">A DE-based approach to no-wait flow-shop scheduling</title>
		<author>
			<persName><forename type="first">B</forename><surname>Qian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Ind. Eng</title>
		<imprint>
			<biblScope unit="volume">57</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="787" to="805" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">A hybrid genetic algorithm for no-wait flowshop scheduling problem</title>
		<author>
			<persName><forename type="first">L.-Y</forename><surname>Tseng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y.-T</forename><surname>Lin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Prod. Econ</title>
		<imprint>
			<biblScope unit="volume">128</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="144" to="152" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">A hybrid genetic algorithm for solving no-wait flowshop scheduling problems</title>
		<author>
			<persName><forename type="first">B</forename><surname>Jarboui</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Eddaly</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Siarry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Adv. Manuf. Technol</title>
		<imprint>
			<biblScope unit="volume">54</biblScope>
			<biblScope unit="issue">9-12</biblScope>
			<biblScope unit="page" from="1129" to="1143" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">A meta-heuristic approach for solving the no-wait flow-shop problem</title>
		<author>
			<persName><forename type="first">H</forename><surname>Samarghandi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">Y</forename><surname>Elmekkawy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Prod. Res</title>
		<imprint>
			<biblScope unit="volume">50</biblScope>
			<biblScope unit="issue">24</biblScope>
			<biblScope unit="page" from="7313" to="7326" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Different initial sequences for the heuristic of Nawaz, Enscore and Ham to minimize makespan idletime or flowtime in the static permutation flowshop sequencing problem</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Framinan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Leisten</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Rajendran</surname></persName>
		</author>
		<idno type="DOI">10.1080/00207540210161650</idno>
		<ptr target="http://dx.doi.org/10.1080/00207540210161650" />
	</analytic>
	<monogr>
		<title level="j">Int. J. Prod. Res</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="page" from="121" to="148" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Heuristic for no-wait flow shops with makespan minimization</title>
		<author>
			<persName><forename type="first">X</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Wu</surname></persName>
		</author>
		<idno type="DOI">10.1080/00207540210161650</idno>
	</analytic>
	<monogr>
		<title level="j">Int. J. Prod. Res</title>
		<imprint>
			<biblScope unit="volume">46</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="2519" to="2530" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Variable neighborhood search</title>
		<author>
			<persName><forename type="first">N</forename><surname>Mladenovi Ć</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Hansen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="1097" to="1100" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Effective heuristics for the no-wait flow shop scheduling problem with total flow time minimization</title>
		<author>
			<persName><forename type="first">K</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Suganthan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Adv. Manuf. Technol</title>
		<imprint>
			<biblScope unit="volume">66</biblScope>
			<biblScope unit="issue">9-12</biblScope>
			<biblScope unit="page" from="1563" to="1572" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">J</forename><surname>Van Laarhoven</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">H</forename><surname>Aarts</surname></persName>
		</author>
		<title level="m">Simulated Annealing</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Simulated annealing for permutation flow-shop scheduling</title>
		<author>
			<persName><forename type="first">I</forename><surname>Osman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Potts</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Omega</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="551" to="557" />
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Genetic algorithms and neighbourhood search</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">R</forename><surname>Reeves</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Evolutionary Computing</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1994">1994</date>
			<biblScope unit="page" from="115" to="130" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Benchmarks for basic scheduling problems</title>
		<author>
			<persName><forename type="first">E</forename><surname>Taillard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">64</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="278" to="285" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<monogr>
		<title level="m" type="main">Design and Analysis of Experiments</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">C</forename><surname>Montgomery</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008">2008</date>
			<publisher>John Wiley &amp; Sons</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
