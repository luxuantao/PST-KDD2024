<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">On computing the latest starting times and floats of activities in a network with imprecise durations</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2004-09-15">15 September 2004</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Paweł</forename><surname>Zieliński</surname></persName>
							<email>pziel@im.pwr.wroc.pl</email>
							<affiliation key="aff0">
								<orgName type="department">Institute of Mathematics</orgName>
								<orgName type="institution">Wrocław University of Technology</orgName>
								<address>
									<addrLine>Wybrzeże Wyspiańskiego 27</addrLine>
									<postCode>50-370</postCode>
									<settlement>Wrocław</settlement>
									<country key="PL">Poland</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">On computing the latest starting times and floats of activities in a network with imprecise durations</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2004-09-15">15 September 2004</date>
						</imprint>
					</monogr>
					<idno type="MD5">C9FBE5F115C14F57DAFF08D12CB87CDA</idno>
					<idno type="DOI">10.1016/j.fss.2004.08.007</idno>
					<note type="submission">Received 19 December 2003; received in revised form 8 June 2004; accepted 23 August 2004</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T14:10+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Project management and scheduling</term>
					<term>Data intervals</term>
					<term>Critical path analysis</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The paper deals with the problems of computing the intervals of possible values of the latest starting times and floats of activities in networks with imprecise durations, represented by means of interval or fuzzy numbers. So far, these problems have been completely solved when the networks are series parallel. We propose new polynomial algorithms for determining the intervals of the latest starting times in general networks. We also present some complexity results for floats (the computation of floats is probably intractable) and describe some polynomially solvable cases. Then we extend the results to networks with fuzzy durations.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>In this paper we wish to investigate the problems of computing the intervals (bounds) of possible values of the latest starting times and floats of activities in networks with uncertain durations modeled by fuzzy or interval numbers. These problems have attracted a considerable attention since the late 1970s, particularly because of their importance in project scheduling. So far, attempts to solve the problems have been mainly based on the critical path method (CPM) <ref type="bibr" target="#b15">[16]</ref> with formulas for the forward and the backward recursions, where the crisp arithmetic is replaced with the interval (fuzzy) arithmetic <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b17">18,</ref><ref type="bibr" target="#b19">20]</ref>. For such straightforward extension of CPM method, it turns out that the forward recursion correctly computes the sets of possible values of the earliest starting times of activities but the backward recursion, with interval minimum and subtraction, fails to compute the sets of possible values of the latest starting times of activities. So, the intervals of floats can no longer be recovered from the intervals containing the earliest and latest starting times. The first attempt to obtain a correct solution has been made in <ref type="bibr" target="#b1">[2]</ref>. There has been provided a possibilistic representation of the problem of determining the fuzzy latest starting times of activities and their floats, a difficulty connected to it has been pointed out, but without proposing any solution methods. At present these problems have been completely solved when the networks are series parallel (see <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b8">9]</ref>). There have been provided O(n) algorithms for both problems. In <ref type="bibr" target="#b8">[9]</ref> some heuristic methods for computing the intervals of possible values of the latest starting times and floats of activities in general networks have been proposed. Here, we give O(mn) algorithms for computing the intervals of possible values of the latest starting times of activities in general networks. We also present complexity results for floats (the computation of floats is probably intractable) and describe some polynomially solvable cases.</p><p>The paper is organized as follows. Section 2 formally defines the problems that we consider. Section 2.1 discusses some difficulties in the interval (fuzzy) CPM. Section 2.2 gives an O(mn) time algorithm for computing the lower bound on the latest starting times of a single activity in a general network. Section 2.3 gives an O(mn) time algorithm for computing the upper bound on the latest starting times of a single activity in a general network. Section 2.4 shows that the problem of determining the bounds on the float of an activity cannot be approximated within a factor smaller than 1 and describes some polynomially solvable cases. Section 3 extends the results to the networks with fuzzy durations. Section 4 concludes the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">The latest starting times and floats of activities in a network with duration intervals</head><p>A network G = V , A , being a project activity-on-arc model, is given. V is the set of nodes (events), |V | = n, and A is the set of arcs (activities), |A| = m. The network G is a directed, connected and acyclic graph. The set V = {1, 2, . . . , n} is labeled in such a way that i &lt; j for each activity (i, j ) ∈ A. Weights of the arcs (activity durations) (i, j ) ∈ A are to be chosen from intervals D ij = [d ij , d ij ], d ij 0, two nodes 1 and n are distinguished as the initial and final node, respectively.</p><p>We introduce some additional notations. • denotes a configuration of activity durations d ij ∈ D ij , (i, j ) ∈ A, while d ij ( ) denotes the duration of activity (i, j ) in configuration . • D is the set of possible configurations of the activity durations, i.e. D is the Cartesian product of corresponding intervals D ij , (i, j ) ∈ A. • P is the set of all paths in G from node 1 to node n.</p><p>• P (k, l) is the set of all paths in G from node 1 to node n, which use activity (k, l) ∈ A.</p><p>• l p ( ) denotes the length of a path p ∈ P in configuration , l p ( ) = (i,j )∈p d ij ( ).</p><p>• Succ(i) (resp. P rec(i)) refers to the set of nodes that immediately follow (resp. precede) node i ∈ V .</p><p>• SU CC(i, j ) (resp. P REC(i, j )) stands for the set of all arcs that come after (resp. before) (i, j ) ∈ A.</p><p>We study two problems which have been originally stated in <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b8">9]</ref>. The first one is that of determining the interval T l kl (bounds) of possible values of the latest starting times t l kl for a given activity (k, l) ∈ A, i.e. the interval T l kl = [t l kl , t l kl ] formed by the t l kl = min t l kl ( ) and t l kl = max t l kl ( ), where min and max are taken over the set of possible configurations D. t l kl ( ) is the latest starting time of activity (k, l) in configuration . The latest time t l kl ( ) is computed by means of the formula t l kl ( ) = t l l ( ) -d kl ( ), where t l l ( ) is the latest moment of occurrence of event l in configuration .</p><p>The second problem is that of determining the interval F kl (bounds) of possible values of floats (total floats) f kl for a given activity (k, l) ∈ A, i.e. the interval F kl = [f kl , f kl ] formed by the f kl = min f kl ( ) and f kl = max f kl ( ), where min and max are taken over all possible configurations of the activity durations D. f kl ( ) is the float of activity (k, l) in configuration . Float f kl ( ) is determined by means of the formula f kl ( ) = t l l ( ) -t e k ( ) -d kl ( ), where t e k ( ) and t l l ( ) are the earliest and the latest moments of occurrence of events k ∈ V and l ∈ V , respectively, in configuration .</p><p>In view of above formulations, we may define four subproblems. PLBLST: Compute the lower bound on the latest starting time t l kl of a given activity (k, l) ∈ A, t l kl = min ∈D t l kl ( ). PUBLST: Compute the upper bound on the latest starting time t l kl of a given activity (k, l) ∈ A, t l kl = max ∈D t l kl ( ). PLBF: Compute the lower bound on float f kl of a given activity (k, l) ∈ A, f kl = min ∈D f kl ( ). PUBF: Compute the upper bound on float f kl of a given activity (k, l) ∈ A, f kl = max ∈D f kl ( ).</p><p>When we say an activity (k, l) ∈ A is critical in the usual sense (or shortly critical) for configuration ∈ D, we mean that it has float f kl ( ) = 0 in G after replacing the time intervals D ij by exact values d ij ( ), (i, j ) ∈ A. Similarly, a path p ∈ P is critical in the usual sense for configuration ∈ D if and only if all activities belonging to p are critical in the usual sense for configuration (or equivalently p is the longest path in G for configuration ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.">Difficulties in the interval CPM</head><p>In this section we indicate some difficulties in the interval CPM. However, we emphasize that all the considerations are also valid for the fuzzy CPM. When we say the interval (fuzzy) CPM, we mean the classical CPM method with formulas for the forward and the backward recursions, where the crisp arithmetic is replaced with the interval (fuzzy) arithmetic. For such extension of CPM method, it turns out that the forward recursion correctly computes the sets of possible values of the earliest moments when the events may occur <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b12">13]</ref> but the backward recursion fails to compute the sets of possible values of the latest moments when the events may occur and latest starting times of activities <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b17">18,</ref><ref type="bibr" target="#b19">20]</ref>. These times turn more and more imprecise while getting closer to the end of the calculation. Sometimes these times may be interval numbers with negative elements. Thus, the sets of possible values of floats cannot be obtained from the earliest and latest moments when the events may occur and the interval durations. This anomaly is caused by an interactivity of interval variables.</p><p>Let us consider an one activity network with interval duration D 12 = <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2]</ref>. We obtain several dependencies among the interval variables, which follow from the forward recursion</p><formula xml:id="formula_0">T e 1 = [0, 0], T e 2 = T e 1 ⊕ D 12 = [1, 2],<label>(1)</label></formula><p>where T e 1 and T e 2 are the intervals of possible values of the earliest moments when events 1 and 2 may occur, respectively, and from the backward recursion</p><formula xml:id="formula_1">T l 2 = T e 2 = [1, 2],<label>(2)</label></formula><formula xml:id="formula_2">T l 1 = T l 12 = T l 2 D 12 = [ -1, 1],<label>(3)</label></formula><formula xml:id="formula_3">F 12 = T l 2 D 12 T e 1 = [ -1, 1],<label>(4)</label></formula><p>where T l 1 and T l 2 are the intervals of possible values of the latest moments when events 1 and 2 may occur, respectively. Because of assignment (2) variable T l 2 and variable D 12 (see ( <ref type="formula" target="#formula_0">1</ref>)) become interactive. So, for this reason we cannot obtain the sets of possible values of the latest starting times of activity <ref type="bibr" target="#b0">(1,</ref><ref type="bibr" target="#b1">2)</ref> by calculating the difference between the set of possible values of the latest moment when event 2 may occur and of duration D 12 (see <ref type="bibr" target="#b2">(3)</ref>). Similarly for the set of possible values of floats of the activity (see ( <ref type="formula" target="#formula_3">4</ref>)). We get the sets of possible values of latest starting times and floats of the activity equal to [ -1, 1]. Thus the results are far from the expected [0, 0].</p><p>Several authors tried to cope with this problem (see <ref type="bibr" target="#b2">[3]</ref> for a brief survey and a full bibliography). Kaufmann and Gupta <ref type="bibr" target="#b14">[15]</ref>, Hapke et al. <ref type="bibr" target="#b13">[14]</ref> and Rommelfanger <ref type="bibr" target="#b20">[21]</ref> suggest substitutes to the interval (fuzzy) subtraction, so as to improve the situation, but these techniques remain ad hoc. Nasution <ref type="bibr" target="#b18">[19]</ref> resorts to symbolic computations on the variable duration times. However, this technique is unwieldy and highly combinatorial.</p><p>In Sections 2.2 and 2.3, we give O(mn) algorithms, which correctly determine the sets of possible values of the latest starting times of an activity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.">Determination of the minimal latest starting time of an activity</head><p>We first describe a problem closely related to PLBLST, that is the problem of evaluating possible criticality of an activity. We provide a solution for it, in some special case, that allows us to construct a polynomial algorithm for solving PLBLST.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.1.">Problem of evaluating the possible criticality of an activity-a polynomially solvable case</head><p>Let us recall the notions of the possible criticality of activities and paths in network G.</p><p>Definition 1. An activity (k, l) ∈ A (resp. a path p ∈ P ) is possibly critical in G if and only if there exists a configuration of times ∈ D such that (k, l) (resp. p) is critical in G in the usual sense for .</p><p>The possible criticality have been thoroughly investigated in <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b5">6]</ref>. The problem of the possible criticality for a path is polynomially solvable. Unfortunately, the same problem for an activity turns out to be strongly N P-complete for general networks and remains N P-complete even when a network is restricted to be planar (see <ref type="bibr" target="#b6">[7]</ref>). In <ref type="bibr" target="#b10">[11]</ref> a polynomial algorithm has been provided only in case of series-parallel networks.</p><p>The following proposition is obvious:</p><p>Proposition 1. An activity (k, l) ∈ A is possibly critical in G if and only if it belongs to some possibly critical path p ∈ P .</p><p>Lemma 1 gives necessary and sufficient conditions for establishing the possible criticality of a given path p ∈ P .</p><p>Lemma 1 (Chanas and Zieliński <ref type="bibr" target="#b5">[6]</ref>). A path p ∈ P is possibly critical in G if and only if p is critical in the usual sense for configuration ∈ D determined in the following way:</p><formula xml:id="formula_4">d ij ( ) = d ij for (i, j ) ∈ p, d ij for (i, j ) / ∈ p.</formula><p>Let us focus on a network G, in which some duration intervals are precisely given. It is worth noticing that in the problem of evaluating possible criticality of activity (k, l) durations of activities (i, j ) ∈ A \ P REC(k, l) \ SU CC(k, l) \ {(k, l)} may be always fixed at their lower bounds for all configurations of times. It follows directly from Definition 1, Propositions 6 and 7. If additionally activities (i, j ) ∈ P REC(k, l) have precise durations (d ij = d ij ), then we can show that in this case the considered problem is polynomially solvable. For such a network, we define the set of possible configurations of activity durations and denote it by D s kl (x), x 0. D s kl (x) is the Cartesian product of time intervals D ij , (i, j ) ∈ A, given as follows:</p><formula xml:id="formula_5">D ij =    [d ij , d ij ] for (i, j ) ∈ SU CC(k, l), [x, x] for (i, j ) = (k, l), [d ij , d ij ] otherwise.<label>(5)</label></formula><p>Similarly, we define the set of possible configurations of activity durations D p kl (x) if activities (i, j ) ∈ SU CC(k, l) have precise durations. D p kl (x) is the Cartesian product of D ij , (i, j ) ∈ A, given as follows:</p><formula xml:id="formula_6">D ij =    [d ij , d ij ] for (i, j ) ∈ P REC(k, l), [x, x] for (i, j ) = (k, l), [d ij , d ij ] otherwise. (<label>6</label></formula><formula xml:id="formula_7">)</formula><p>We are thus led to the following obvious property. Hence the problem of evaluating the possible criticality of (k, l) in G, in which the durations of activities (i, j ) ∈ P REC(k, l) (resp. (i, j ) ∈ SU CC(k, l)) are precisely given, boils down to the one in G, in which the durations of activities (i, j ) ∈ A \ SU CC(k, l) (resp. (i, j ) ∈ A \ P REC(k, l)) are fixed (see <ref type="bibr" target="#b4">(5)</ref>, <ref type="bibr" target="#b5">(6)</ref> and Proposition 2).</p><p>We now give a polynomial algorithm (Algorithm 1) for asserting whether an activity (k, l) ∈ A is possibly critical in G, under the assumption that activities (i, j ) ∈ SU CC(k, l) have precise durations. The logic of Algorithm 1 is to find a configuration ∈ D s kl (d kl ) in which (k, l) is critical in the usual sense. To find a configuration a node labeling is performed with convenient setting of the activity durations. A node i ∈ V is labeled true if the longest path from node 1 to i uses activity (k, l) in a systematically constructed configuration , and false otherwise. The duration of activity (i, j ) ∈ A is set to its upper bound if node i is labeled true, and to its lower bound otherwise, except for (k, l). In this case the duration of (k, l) is set to its upper bound. It is worth pointing out that the algorithm is crucial and it will be substantially used in a algorithm for solving PLBLST. We will illustrate it with an example in Section 2.2.2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 1 Asserting whether an activity is possibly critical</head><formula xml:id="formula_8">Require: A network G = V , A , a specified activity (k, l) ∈ A, time intervals D ij = [d ij , d ij ], (i, j ) ∈ A. Ensure: A configuration ∈ D s kl (d kl ), P ossCritical = true if (k, l) is possibly critical, f alse otherwise. PHASE 1: 1: t e 1 ← 0; label(1) ← f alse; 2: for j ← 2 to l -1 do 3:</formula><p>for all i ∈ P rec(j ) do 4: The correctness Algorithm 1 follows directly from Lemma 2.</p><formula xml:id="formula_9">d ij ← d ij</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 2. Let activities (i, j ) ∈ P REC(k, l) have precise durations. Activity (k, l) is possibly critical in network G if and only if Algorithm 1 returns P ossCritical = true for (k, l).</head><p>Proof. ( ⇒)Assume that the activity (k, l) is possibly critical in G in which activities (i, j ) ∈ P REC(k, l) have precise durations. Then there exists a possibly critical path p * ∈ P (k, l) (see Proposition 1). Hence the path p * is critical in the usual sense in G in the configuration ∈ D s kl (d kl ) determined as in Lemma 1 (see Proposition 2). Consequently the length of p * fulfills the following inequality:</p><formula xml:id="formula_10">l p * ( ) l p ( ) for all p / ∈ P (k, l). (<label>7</label></formula><formula xml:id="formula_11">)</formula><p>We claim that Algorithm 1 returns P ossCritical = true for (k, l). To prove this, assume on the contrary that Algorithm 1 returns P ossCritical = f alse. Note that it also returns label(i), i = 1, . . . , n. Let ∈ D s kl (d kl ) be a configuration of activity durations after the termination of Algorithm 1. P ossCritical = f alse, and so either label(l) = f alse or label(n) = f alse.</p><p>Consider the case when label(l) = f alse. Then, (k, l) does not lie on any critical path in configuration , t e l ( ) = t e k ( ) + d kl ( ) (see <ref type="bibr">Algorithm 1,</ref><ref type="bibr">rows: 15,</ref><ref type="bibr" target="#b15">16)</ref>. From this and the fact that</p><formula xml:id="formula_12">d ij ( ) = d ij ( ) for (i, j ) ∈ SU CC(k, l), , ∈ D s kl (d kl )</formula><p>, it follows that there exists a path in , which is longer than p * , contrary to <ref type="bibr" target="#b6">(7)</ref>.</p><p>Consider the case when label(n) = f alse. Then, label(l) = true. Let us choose the subpath of p * from k to r, we denote it by p * kr , whose nodes i ∈ p * kr are labeled true except for start node k and end node r (label(k) = f alse and label(r) = f alse). Such subpath exists, since p * ∈ P and label</p><formula xml:id="formula_13">(n) = f alse. Hence durations d ij ( ) of activities (i, j ) ∈ p * kr are equal to d ij (see Algorithm 1, rows: 13, 22). The result is d ij ( ) = d ij ( ) for (i, j ) ∈ p *</formula><p>kr . This equality also holds for (i, j ) ∈ SU CC(k, l). Since label(r) = f alse, there exists a path p 1r from 1 to r that does not use (k, l), with activities durations in at their lower bounds and of a length longer than the length of p * 1r in (see Algorithm 1, rows: 27, 28, 31). Let us concatenate p 1r with the subpath of p * from r to n. Then we obtain the path p ∈ P , p / ∈ P (k, l), with the length l p ( ) such that l p * ( ) &lt; l p ( ). It is clear that this inequality holds in , contrary to <ref type="bibr" target="#b6">(7)</ref>. Thus we arrive to contradiction, since p * traversing (k, l) is not critical in .</p><p>(⇐ ) Assume that Algorithm 1 returns P ossCritical = true for (k, l) and a configuration ∈ D s kl (d kl ). Then, label(l) = true and label(n) = true. Hence, there exist a longest path from 1 to l that uses (k, l) and a path from l to n whose nodes are labeled true in (see Algorithm 1, rows: 27, 28, 29). These paths form a critical path containing (k, l) which is, by Definition 1, possibly critical one. By Proposition 1, (k, l) is possibly critical.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>It is clear that the running time of Algorithm 1 is O(m).</head><p>Remark 1. The algorithm distinguishing whether an activity (k, l) is possibly critical in G with activities (i, j ) ∈ SU CC(k, l) having precise durations, can be identical to Algorithm 1. It is enough to reverse arcs in network G and carry out the computations from node n down to 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.2.">A polynomial algorithm for determining the lower bound on the latest starting time of an activity</head><p>We now present an algorithm for solving PLBLST. Let us recall an important result, given by Dubois et al. <ref type="bibr" target="#b8">[9]</ref>, that allows to reduce the set of configurations D. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 2 Computing the minimal latest starting time of an activity</head><formula xml:id="formula_14">Require: A network G = V , A , a specified activity (k, l) ∈ A, time intervals D ij = [d ij , d ij ], (i, j ) ∈ A Ensure:</formula><p>The minimal latest starting time of (k, l), t l kl . 1: f kl ← 0;</p><p>Check possible criticality of (k, l). 2: call Algorithm 1; 3: while P ossCritical = f alse do 4: if label(l) = true then 5:</p><p>← min{t e j -t e i - In each iteration of Algorithm 2 the duration of (k, l) is suitably augmented (row 9) and the possible criticality of (k, l) is tested. The testing boils down to applying Algorithm 1 (rows: 2, 11). This process is repeated until (k, l) becomes possibly critical. Then from Lemma 3, we immediately obtain its minimal   latest starting time. Note that, Algorithm 1 returns either a configuration of durations in which (k, l) is critical or a configuration that makes (k, l) as close as possible to being critical, stored in variables d ij , (i, j ) ∈ A. It also returns node labels label(i) and the earliest moments of the occurrence of events t e i , i = 1, . . . , n, in these configurations. If P ossCritical = f alse, i.e. either label(l) = f alse or label(n) = f alse, then duration d kl (or equivalently the earliest moment when event l occurs t e l ), in the obtained configuration, is augmented by quantity (row 9) being the minimum over free floats of activities whose the start and end node are labeled true and false, respectively (rows 5 or 7). This means that there exist the longest paths traversing (k, l) from node 1 to the start nodes of all these activities in the returned configuration. After increasing the duration of (k, l) in the next call of Algorithm 1 at least one of the end nodes of the activities will be labeled true. The aim is to label true node n (to construct a configuration in which (k, l) will be critical) in consecutive calls. It is worth noticing that in row 11 only PHASE 2 of Algorithm 1 is called, because the earliest moments of the occurrence of events t e i , node labels label(i), and durations d ij , for i, j l, computed in the first call (row 2) remain unchanged.</p><formula xml:id="formula_15">d ij | (i, j ) ∈ A, label(i) = true, label(j ) = f</formula><p>To clarify Algorithm 2, we apply it to the network in Fig. <ref type="figure" target="#fig_1">1</ref>. Activity (2, 3) is distinguished. The network after the first, second and third call of Algorithm 1 is given in Figs. <ref type="figure" target="#fig_12">2, 3</ref> and<ref type="figure" target="#fig_4">4</ref>, respectively. Nodes labeled true after the calls of Algorithm 1 are black, activities whose free floats are computed in row 5 (see Algorithm 2) are marked with a dashed line, durations of activities that are at their upper bounds are in Proof. To prove that a quantity t e k + f kl , computed by Algorithm 2 (row 13), is the minimal latest starting time of activity (k, l), we only need to show, by Lemma 3, that f kl is the minimal nonnegative real number such that (k, l) with duration equal to d kl + f kl becomes possibly critical.</p><p>We use a proof by contradiction. Suppose that there exists a nonnegative real number f kl such that (k, l) becomes possibly critical for a duration equals d kl + f kl and</p><formula xml:id="formula_16">f kl &lt; f kl . (<label>8</label></formula><formula xml:id="formula_17">)</formula><p>Let us denote by q the number of calls of Algorithm 1 in Algorithm 2. This yields f kl = q-1 i=1 i (see Algorithm 2, row 10). Note that for the duration of (k, l) equal to d kl + q-2 i=1 i , Algorithm 1 asserts that (k, l) is not possibly critical. Additionally, it returns a configuration of durations , ∈ D s kl (d kl + q-2 i=1 i ), node labels label i ( ), i = 1, . . . , n (label i ( ) temporary stands for the label of i in configuration ). For the duration of (k, l) equal to d kl + f kl , Algorithm 1 asserts the possible criticality of (k, l) and returns a configuration of durations , ∈ D s kl (d kl +f kl ), node labels label i ( ), i = 1, . . . , n. Since (k, l) is possibly critical for d kl + f kl , but for d kl + q-2 i=1 i (k, l) is not, we have f kl &gt; q-2 i=1 i . Consequently f kl = q-2 i=1 i + ( &gt; 0). Moreover, from the way of determining configurations and by Algorithm 1 for d kl + q-2 i=1 i and d kl + q-2 i=1 i + , respectively, we deduce that there exists at least one activity (i , j ) ∈ A such that</p><formula xml:id="formula_18">label i ( ) = true, label j ( ) = f alse, label i ( ) = true, label j ( ) = true or label j ( ) = f alse, label j ( ) = true for (i , j ) = (k, l)</formula><p>with free float</p><formula xml:id="formula_19">t e j ( ) -t e i ( ) -d i j ( ) .<label>(9)</label></formula><p>We now focus on the stage after (q -2)th call of Algorithm 1. Algorithm 2 in rows 5 or 7 determines q-1 = min{t e j ( ) -t e i ( ) -d ij ( ) | (i, j ) = (k, l), label i ( ) = true, label j ( ) = f alse or (i, j ) = (k, l), label j ( ) = f alse}. Combining this and (9), we conclude q-1 . Hence q-2 i=1 i + q-1 q-2 i=1 i + and therefore f kl f kl , contrary to <ref type="bibr" target="#b7">(8)</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 5. The running time of Algorithm 2 is O(mn).</head><p>Proof. In each call of Algorithm 1 at least one node is labeled true that in previous calls was labeled false (nodes labeled true in previous calls have unchanged labels in consecutive calls). Thus, Algorithm</p><formula xml:id="formula_20">1 (O(m)) is invoked, in Algorithm 2, O(n) times (until label(n) = true).</formula><p>Hence the entire complexity of Algorithm 2 is O(mn).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.">Determination of the maximal latest starting time of an activity</head><p>We now pass on to the problem of computing an upper bound on the latest starting times of an activity. We first examine a problem closely related to it, that of evaluating the necessary criticality of an activity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.1.">Problem of evaluating the necessary criticality of an activity-a polynomially solvable case</head><p>Let us recall the notions of the necessary criticality of activities and paths in the network G.</p><p>Definition 2. An activity (k, l) ∈ A (resp. a path p ∈ P ) is necessarily critical in G if and only if for every configuration of times ∈ D, (k, l) (resp. p) is critical in G in the usual sense.</p><p>The notions of the necessary criticality, both with respect to paths and activities, have been analyzed in <ref type="bibr" target="#b2">[3]</ref>. The problem of the necessary criticality for a path can be solved in polynomial time. Unfortunately, the one for an activity does not seem to be such. The question of proving this fact is still open. In <ref type="bibr" target="#b10">[11]</ref> a polynomial algorithm has been provided only for series-parallel networks.</p><p>Let us consider a polynomially solvable case of the problem of evaluating the necessary criticality of distinguished activity (k, l). From Definition 2, Propositions 6 and 7 follow that durations of activities (i, j ) ∈ A \ P REC(k, l) \ SU CC(k, l) \ {(k, l)} may be always fixed at their upper bounds for all configurations of times in network G. If we additionally assume that activities (i, j ) ∈ P REC(k, l) in G have precise durations (d ij = d ij ), then we can show that in this special case the problem of asserting necessary criticality of (k, l) is polynomially solvable. For such a network, we define the set of possible configurations of activity durations and denote it by D s kl (x), x 0. D s kl (x) is the Cartesian product of D ij , (i, j ) ∈ A, given as follows:</p><formula xml:id="formula_21">D ij =    [d ij , d ij ] for (i, j ) ∈ SU CC(k, l), [x, x] for (i, j ) = (k, l), [d ij , d ij ] otherwise. (<label>10</label></formula><formula xml:id="formula_22">)</formula><p>In the same manner, we can define the set of possible configurations of activity durations D p kl (x), x 0, if activities (i, j ) ∈ SU CC(k, l) have precise durations. D p kl (x) is the Cartesian product of D ij , (i, j ) ∈ A, given as follows:</p><formula xml:id="formula_23">D ij =    [d ij , d ij ] for (i, j ) ∈ P REC(k, l), [x, x] for (i, j ) = (k, l), [d ij , d ij ] otherwise. (<label>11</label></formula><formula xml:id="formula_24">)</formula><p>We have thus proved the following property: Thus, the problem of evaluating the necessary criticality of (k, l) in G, in which the durations of activities (i, j ) ∈ P REC(k, l) (resp. (i, j ) ∈ SU CC(k, l)) are precisely given, boils down to the one in G, in which the durations of activities (i, j ) ∈ A \ SU CC(k, l) (resp. (i, j ) ∈ A \ P REC(k, l)) are fixed (see Proposition 4 and ( <ref type="formula" target="#formula_21">10</ref>), ( <ref type="formula" target="#formula_23">11</ref>)).</p><p>Algorithm 3 enables us to assert whether an activity (k, l) is necessarily critical in G, under the assumption that activities (i, j ) ∈ SU CC(k, l) have precise durations. The main idea of an algorithm (Algorithm 3) which can evaluate the necessary criticality of activity (k, l) is to find a configuration ∈ D s kl (d kl ) in which (k, l) is not critical in the usual sense. If such a configuration is successfully determined then (k, l) is not necessarily critical, otherwise it is. The algorithm is similar in spirit to Algorithm 1. The approach here applied is complementary to the one inAlgorithm 1. To find a configuration , node labeling is performed with a convenient setting of the activity durations. A node i ∈ V is labeled true if the longest path from node 1 to i uses activities parallel to (k, l), and it is longer than all paths from 1 to i traversing (k, l), in a systematically constructed configuration , and false otherwise. The duration of activity (i, j ) ∈ A is set to its upper bound if node i is labeled true, and to its lower bound otherwise, except for (k, l). In this case the duration of (k, l) is set to its lower bound. We will illustrate the algorithm with an example in Section 2.3.2. The correctness of Algorithm 3 follows from the following lemma: Lemma 6. Let activities (i, j ) ∈ P REC(k, l) have precise durations. Activity (k, l) is not necessarily critical in G if and only if Algorithm 3 returns NecCritical = f alse for (k, l).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 3 Asserting whether an activity is necessarily critical</head><formula xml:id="formula_25">Require: A network G = V , A , a specified activity (k, l) ∈ A, time intervals D ij = [d ij , d ij ], (i, j ) ∈ A. Ensure: A configuration ∈ D s kl (d kl ), NecCritical = true if (k,</formula><p>Proof. ( ⇒) Suppose the assertion of the lemma is false, i.e. NecCritical = true. We denote the configuration of the activity durations after the termination by ∈ D s kl (d kl ). By assumption, activity (k, l) is not necessarily critical in G in which activities (i, j ) ∈ P REC(k, l) have precise durations, hence there exists a configuration * ∈ D s kl (d kl ) such that none of the critical paths uses (k, l) in * (see <ref type="bibr">Proposition 4)</ref>. Consequently there exists a critical path p * , that traverses activities parallel to (k, l), p * / ∈ P (k, l), with the length l p * ( * ) satisfying the following inequality</p><formula xml:id="formula_26">l p * ( * ) &gt; l p ( * ) for all p ∈ P (k, l). (<label>12</label></formula><formula xml:id="formula_27">)</formula><p>Moreover, p * is possibly critical and therefore it is critical in the configuration ∈ D s kl (d kl ) determined as in Lemma 1. It easy to check that inequality <ref type="bibr" target="#b11">(12)</ref> holds in . ( <ref type="formula" target="#formula_26">12</ref>) now becomes l p * ( ) &gt; l p ( ) for all p ∈ P (k, l).</p><p>(</p><formula xml:id="formula_28">)<label>13</label></formula><p>Note that <ref type="bibr" target="#b12">(13)</ref> states that (k, l) is not necessarily critical.</p><p>Let us choose a subpath of p * from 1 to r, we denote it by p * 1r , whose nodes i ∈ p * 1r are labeled true except for end node r. p * 1r exists, since p ∈ P and NecCritical = true and in consequence label(n) = f alse (see Algorithm 3, row 34). Hence durations d ij ( ) of activities (i, j ) ∈ p * 1r are equal to their upper bounds (see <ref type="bibr">Algorithm 3,</ref><ref type="bibr">rows: 4,</ref><ref type="bibr">22)</ref>. This forces d ij ( ) = d ij ( ) for all (i, j ) ∈ p * 1r . The same equality holds for all (i, j ) / ∈ SU CC(k, l), since , ∈ D s kl (d kl ). Since label(r) = f alse, there exists a path p 1r from 1 to r that uses (k, l) with durations in at their lower bounds and of the length greater or equal to the length p * 1r in (see Algorithm 3, rows: 27, 28, 29). If we now concatenate p 1r with the subpath of p * from r to n then we obtain the path p ∈ P (k, l) with the length l p ( ) such that l p * ( ) l p ( ). It is easily seen that this inequality holds for configuration , contrary to <ref type="bibr" target="#b12">(13)</ref>. Then label(l) = true or label(n) = true. From this, it may be concluded that none of the critical paths uses (k, l) in * (see <ref type="bibr">Algorithm 3,</ref><ref type="bibr">rows: 14,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr">27,</ref><ref type="bibr">28,</ref><ref type="bibr">31)</ref>. By Proposition 4, (k, l) is not necessarily critical. This completes the proof.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>It is evident that the running time of Algorithm 3 is O(m).</head><p>Remark 2. The algorithm asserting whether an activity (k, l) is necessarily critical in G with activities (i, j ) ∈ SU CC(k, l) having precise durations can be identical to Algorithm 3. It is sufficient to reverse arcs in network G and carry out the computations from node n down to 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.2.">A polynomial algorithm for determining the upper bound on the latest starting time of an activity</head><p>Here, we propose an algorithm for solving PUBLST. Let us recall an important result, given by Dubois et al. <ref type="bibr" target="#b8">[9]</ref>, that allows to reduce the set of configurations D. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 4 Computing the maximal latest starting time of an activity</head><formula xml:id="formula_29">Require: A network G = V , A , a specified activity (k, l) ∈ A, time intervals D ij = [d ij , d ij ], (i, j ) ∈ A Ensure:</formula><p>The maximal latest starting time of (k, l), t l kl . 1: f kl ← 0;</p><p>Check necessary criticality of (k, l). 2: call Algorithm 3; 3: while NecCritical = f alse do 4: if label(l) = true then 5:</p><p>← t e l -t e k -d kl 6: else 7:</p><p>← min{t e j -t e i - </p><formula xml:id="formula_30">d ij |(i, j ) ∈ A, label(i) = f alse, label(j ) =</formula><formula xml:id="formula_31">(d kl + f * kl ), (k, l) is still not critical, which contradicts the assumption that (k, l) is critical for all ∈ D s kl (d kl + f * kl ). Case 2: f * kl &gt; max ∈D s kl (d kl ) f kl ( ). Thus (k, l) is critical with duration d kl + max ∈D s kl (d kl ) f kl ( ), for all ∈ D s kl (d kl + max ∈D s kl (d kl ) f kl ( ))</formula><p>, and therefore it is necessarily critical. This contradicts the assumption that f * kl is the minimal number such that (k, l) becomes necessarily critical. In each iteration of Algorithm 4, the duration of (k, l) is suitably increased (row 9) and its necessary criticality is evaluated. The evaluation boils down to applying Algorithm 3. This process is repeated until (k, l) becomes necessarily critical. Then Lemma 7 gives the maximal latest starting time of (k, l). Note that, Algorithm 3 tries to construct a configuration in which (k, l) is not critical, i.e. none of the longest paths uses (k, l), but it may fail (NecCritical = true). In this case (k, l) is necessarily critical. Algorithm 3 returns the configuration of durations stored in variables d ij , (i, j ) ∈ A, node labels label(i) and the earliest moments of the occurrence of events t e i , i = 1, . . . , n. If NecCritical = f alse, i.e. either label(l) = true or label(n) = true, then duration d kl (or equivalently the earliest moment when event l occurs t e l ), in the returned configuration, is augmented by quantity (row 9) being the minimum over free floats of activities whose the start and the end node are labeled false and true, respectively (rows 5 or 7). This means that none of the longest paths from node 1 to the end nodes of all these activities uses (k, l) in the obtained configuration. After augmenting the duration of (k, l) in the next call of Algorithm 3 at least one of the end nodes of the activities will be labeled false. The aim is to label false node n (to cause the failure of Algorithm 3 in constructing a configuration in which (k, l) is not critical) in consecutive calls. It is worth noticing that in row 11 only PHASE 2 of Algorithm 3 is called, because the earliest moments of the occurrence of events t e i , node labels label(i), and durations d ij , for i, j l, computed in the first call (row 2) remain unchanged.</p><p>We now clarify Algorithm 4 by an illustrative example. Consider the network in Fig. <ref type="figure" target="#fig_1">1</ref>. Activity (2, 3) is distinguished. The network after the first, second and third call of Algorithm 3 is given in Figs. <ref type="figure">5,</ref><ref type="figure">6</ref> and 7, respectively. Nodes labeled true after the calls of Algorithm 3 are black, activities whose free floats are computed in row 7 (see Algorithm 4) are marked with a dashed line, durations of activities that are at their upper bounds are in bold print. Activity (2, 3) is not necessarily critical with the durations equal to 1 and 6. For both, Algorithm 3 successfully determined the configurations in which there exists the critical path, 1 → 6 → 7, that uses activities parallel to (2, 3) with the length greater than the lengths of all paths crossing (2, 3) (see Figs. <ref type="figure">5,</ref><ref type="figure">6</ref>). (2, 3) becomes necessarily critical with the duration equal to 13, since the algorithm could not find such a configuration (see Fig. <ref type="figure" target="#fig_7">7</ref>). The number f 23 = 12, in Fig. <ref type="figure" target="#fig_7">7</ref>, is the minimal one such that added to d 23 , makes (2, 3) necessarily critical. From this and Lemma 7, we obtain the maximal latest starting time t l 23 = 16.</p><p>Lemma 8. Algorithm 4 finds t l kl .</p><p>Proof. The proof goes in the similar manner to the one of Lemma 4. Namely, it suffices to show that f kl , computed by Algorithm 4 (row 13), is the minimal nonnegative real number such that (k, l) with duration equal to d kl + f kl becomes necessarily critical. Then, making use of Lemma 7, we immediately obtain the maximal latest starting time of (k, l). Suppose, by contradiction, that there exists a nonnegative real number f kl such that (k, l) becomes necessarily critical with d kl + f kl and satisfying the following inequality:</p><formula xml:id="formula_32">f kl &lt; f kl . (<label>14</label></formula><formula xml:id="formula_33">)</formula><p>We denote the number of calls of Algorithm 3 in Algorithm 4 by q. This clearly forces f kl = q-1 i=1 i (see Algorithm 4, row 10). For the duration of (k, l) equals d kl + q-2 i=1 i , Algorithm 3 asserts that (k, l) is not necessarily critical. Furthermore, it returns a configuration of durations , ∈ D s kl (d kl + q-2 i=1 i ), node labels label i ( ), i = 1, . . . , n. For the duration of (k, l) equal to d kl + f kl , Algorithm 3 asserts the necessary criticality of (k, l) and returns a configuration of durations , ∈ D s kl (d kl + f kl ), node labels label i ( ), i = 1, . . . , n. Since (k, l) is necessary critical for d kl + f kl , but for d kl + q-2 i=1 i (k, l) is not, we see f kl &gt; q-2 i=1 i . Thus f kl = q-2 i=1 i + ( &gt; 0). From the way of determining configurations and by Algorithm 3 for d kl + q-2 i=1 i and d kl + q-2 i=1 i + , respectively, we conclude that there exists at least one activity (i , j ) ∈ A such that label i ( ) = f alse, label j ( ) = true, label i ( ) = f alse, label j ( ) = f alse or label j ( ) = true, label j ( ) = f alse for (i , j ) = (k, l) and satisfying t e j ( ) -t e i ( )</p><formula xml:id="formula_34">-d i j ( ) . (<label>15</label></formula><formula xml:id="formula_35">)</formula><p>We now consider the stage after (q -2)th call of Algorithm 3. Algorithm 4 (rows 5 or 7) computes q-1 = min{t e j ( ) -t e i ( ) -d ij ( ) | (i, j ) = (k, l), label i ( ) = f alse, label j ( ) = true or (i, j ) = (k, l), label j ( ) = true}. From this and (15), it follows that q-1 . Consequently q-2 i=1 i + q-1 q-2 i=1 i + and therefore f kl f kl , contrary to <ref type="bibr" target="#b13">(14)</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 9. The running time of Algorithm 4 is O(mn).</head><p>Proof. The proof proceeds in the same manner as the one of Lemma 5. In each call of Algorithm 3 at least one node is labeled false. Thus, Algorithm 3 (O(m)) is invoked, in Algorithm 4, O(n) times (until label(n) = f alse). Hence, the complexity of Algorithm 4 is O(mn).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4.">Determination of bounds on float of an activity</head><p>This section deals with the problem of determining the bounds on float of a given activity. That is, we consider the problems PLBF and PUBF, announced at the beginning of Section 2. We prove that one cannot approximate PLBF within a factor smaller than 1. Successively, we show that PLBF and PUBF are polynomially solvable in some special cases.</p><p>There are obvious connections between the notions of criticality and the bounds on float of an activity. Proposition 6. An activity (k, l) ∈ A is possibly (resp. necessarily) critical in G if and only if f kl = 0 (resp. f kl = 0).</p><p>From the above proposition, it may be concluded that PLBF is at least as hard, if not harder than the problem of the possible criticality of an activity and, similarly, PUBF is at least as hard as the problem of the necessary criticality of an activity. Accordingly, PLBF is strongly N P-hard for general networks and remains N P-hard even if the network G is restricted to be planar and regular of degree three (see <ref type="bibr" target="#b6">[7]</ref>). Unfortunately, a question still unanswered is whether PUBF is polynomially solvable for general and planar networks. In <ref type="bibr" target="#b8">[9]</ref> some heuristic methods for PLBF and PUBF have been proposed. At present, these problems are effectively solvable for networks having a special topology, namely the one of series-parallel graphs, for which the provided algorithms are polynomial <ref type="bibr" target="#b10">[11]</ref>.</p><p>We define the set of possible configurations of activity durations D kl (x) (resp. D kl (x)), x 0, to be the Cartesian product of corresponding time intervals D ij , (i, j ) ∈ A, given as follows:</p><formula xml:id="formula_36">D ij =    [d ij , d ij ] for (i, j ) ∈ P REC(k, l) ∪ SU CC(k, l), [x, x] for (i, j ) = (k, l), [d ij , d ij ] otherwise   D ij =    [d ij , d ij ] for (i, j ) ∈ P REC(k, l) ∪ SU CC(k, l), [x, x] for (i, j ) = (k, l), [d ij , d ij ] otherwise   .</formula><p>The following proposition due to Dubois et al. <ref type="bibr" target="#b8">[9]</ref>. It is worth pointing out that the reduction of the set of the possible configurations D to D kl (d kl ) and to D kl (d kl ) (Proposition 7) is not sufficient to keep PLBF from being N P-complete and it does not allow to answer the question about the complexity of PUBF.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4.1.">Inapproximability</head><p>The negative result for PLBL encourages us to look for approximation algorithms for this problem. Unfortunately, one cannot approximate PLBF within a factor smaller than 1.</p><p>Given a minimization problem P, let opd P (I ) denote the optimal solution value for some instance I of P and for a solution y of I, let val P (I, y) denote the associated value. Given a constant ∈ (0, 1), a -approximation algorithm for P is an algorithm that applied to any instance I of P, runs in time bounded by polynomial in the size of I and produces a solution y whose value fulfills inequality val P (I, y) 1  1-opd P (I ). If such an algorithm exists, we say that P is approximable within (see for instance <ref type="bibr" target="#b0">[1]</ref>).</p><p>A negative approximation result is stated in the following theorem:</p><p>Theorem 1. If P = N P then it is not possible to approximate PLBF within ∈ (0, 1), even when G is restricted to a planar network.</p><p>Proof. See Appendix.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4.2.">Some solvable special cases</head><p>We now study special cases of PLBF and PUBF for which polynomial algorithms for general networks exist.</p><p>Our basic assumption is that activities from set P REC(k, l) have precise durations in network G, d ij = d ij for all (i, j ) ∈ P REC(k, l), where (k, l) ∈ A is a specified activity.  If activities (i, j ) ∈ SU CC(k, l) have precise durations, where (k, l) ∈ A is a specified activity, then PLBF and PUBF are also polynomially solvable. It is sufficient to reverse the arcs in network G and apply Algorithms 2 and 4, respectively, with certain modifications in Algorithms 1 and 3 (see Remarks 1 and 2) together with Lemma 11.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">The latest starting times and the floats of activities in a network with fuzzy durations</head><p>Now we focus on the fuzzy case. All the elements of the network G are the same as in the interval case except for the activity durations, which are determined by means of fuzzy numbers dij , (i, j ) ∈ A, which imprecisely determine durations of activities (i, j ) ∈ A. Fuzzy number dij expresses uncertainty connected with the ill-known activity duration modeled by this number. It generates a possibility distribution for the sets of values containing the unknown activity duration. More formally, we say that the assertion of the form "d ij is dij ", where d ij is a variable and dij is a fuzzy number, generates the possibility distribution of d ij with respect to the following formula (see <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b7">8]</ref>):</p><formula xml:id="formula_37">(d ij = x) = dij (x), x ∈ R + .</formula><p>Let be a configuration of activity durations in the network with activity times d ij ∈ R + , (i, j ) ∈ A. Thus, the (joint) possibility distribution over configurations, induced by the dij 's, is ( ) = min (i,j )∈A Dij (d ij ), ∈ R m + . Hence, the possibility distribution describing possible values for the latest starting The MPARTITION is defined as follows: INPUT: A finite set A of positive integers, A = {a 1 , . . . , a q }, having the overall sum of 2b (A is allowed to have equal positive integers) and a positive integer K &lt; q. QUESTION: Is there a subset A ⊂ A that sums up exactly to b and |A | = K?</p><p>It is well known that MPARTITION is N P-complete (see for instance <ref type="bibr" target="#b11">[12]</ref> and comments on PARTI-TION given there).</p><p>We use the proof by contradiction. Suppose that for some &lt; 1, there is a -approximation algorithm for PLBF. The idea of the proof is to use the algorithm to construct a polynomial algorithm to solve MPARTITION. Since MPARTITION is N P-complete, we get a contradiction if P = N P.</p><p>We now polynomially transform an instance of MPARTITION to an instance of PLBF for a planar network.</p><p>The transformation is divided into 2 steps. In the first one we associate to each instance of MPARTITION a directed, acyclic, planar network G = A , V with 4q +3 nodes (events) labeled 1, 2, . . . , 4q +3. The construction of G is the same as in <ref type="bibr" target="#b6">[7]</ref> (the proof of Theorem 1). In the second step we transform network G , into G = A , V . That is, we multiply the interval bounds by 1  1-M, where M is a sufficiently large number (for instance M = q + 1), and add 1 to the interval bounds of activity (2q + 2, 4q + 3) (see Fig. <ref type="figure" target="#fig_10">8</ref>). Activities (2i, 2(2q -i + 2)), i = 1, . . . , q, have time intervals [ M 1-(q q j =i+1 a j + q -i + 1), M  1-(q q j =i+1 a j + q -i + 1)], the one-point intervals have been written in Fig. <ref type="figure" target="#fig_10">8</ref> as precise times, (2q + 1, 2q + 3) is a specified activity.</p><p>For graph G , constructed in the first step, the following equivalence holds. For graph G , constructed in the second step, the following claim may be proved: The proof of Claim 2 proceeds in the same manner as Claim 1 (see the proof of Theorem 1 in <ref type="bibr" target="#b6">[7]</ref>).</p><p>Consider what happens when we run the -approximation algorithm for PLBF on G . If there exists a subset A ⊂ A that sums up exactly to b and |A | = K then the algorithm returns the float of activity (2q + 1, 2q + 3) whose value is at most 1/(1 -). Otherwise this value is at least M/(1 -). In effect, we have given a polynomial time algorithm for MPARTITION. This contradicts the fact that MPARTITION is N P-complete, unless P = N P. This completes proof.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. A network with duration intervals.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. The network, given in Fig. 1, after the first call of Algorithm 1 in Algorithm 2.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 3 .Fig. 4 . 5 . 4 .</head><label>3454</label><figDesc>Fig.3. The network, given in Fig.1, after the second call of Algorithm 1 in Algorithm 2.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Proposition 4 .</head><label>4</label><figDesc>Let activities (i, j ) ∈ P REC(k, l) (resp. (i, j ) ∈ SU CC(k, l)) have precise durations. Activity (k, l) is not necessarily critical in G if and only if there exists a configuration ∈ D s kl (d kl ) (resp. ∈ D p kl (d kl )) such that none of critical paths, in , uses (k, l).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>(</head><label></label><figDesc>⇐ ) Assume that Algorithm 3 returns NecCritical = f alse and a configuration * ∈ D s kl (d kl ).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>5 Fig. 5 . 5 ∆ 7 Fig. 6 .</head><label>55576</label><figDesc>Fig. 5. The network, given in Fig. 1, after the first call of Algorithm 3 in Algorithm 4.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. The network, given in Fig. 1, after the third call of Algorithm 3-PHASE 2-in Algorithm 4.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Proposition 7 .</head><label>7</label><figDesc>f kl = min ∈D kl (d kl ) f kl ( ) (resp. f kl = max ∈D kl (d kl ) f kl ( )) Moreover, the minimum (resp. the maximum) f kl ( ) is attained on the vertices of the hyper-rectangle D kl (d kl ) (resp. D kl (d kl )).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head></head><label></label><figDesc>(x) = D s kl (x) (resp. D kl (x) = D s kl (x)).Hence and Lemma 10 we conclude that f kl = f * kl (resp. f kl = f * kl ).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. The network G .</figDesc><graphic coords="22,109.96,95.83,321.36,410.40" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Claim 1 .Claim 1 .</head><label>11</label><figDesc>There exists a subset A ⊂ A which sums up exactly to b and |A | = K if and only if the activity(2q + 1, 2q + 3) is possibly critical in G .By Proposition 6, we obtain another formulation (from the point of view of floats). There exists a subset A ⊂ A which sums up exactly to b and |A | = K if and only if the lower bound on the float of activity (2q + 1, 2q + 3) is zero.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Claim 2 .</head><label>2</label><figDesc>If there exists a subset A ⊂ A that sums up exactly to b and |A | = K then the lower bound on the float of activity (2q+ 1, 2q + 3) is equal to 1, f 2q+1 2q+3 = 1, in G . Otherwise it is at least M/(1 -).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Proposition 2. Let activities</head><label></label><figDesc></figDesc><table><row><cell>(i, j ) ∈ P REC(k, l) (resp. (i, j ) ∈ SU CC(k, l)) have precise durations. Activity (k, l) is possibly critical in G if and only if there exists a configuration ∈ D s kl (d kl ) (resp. ∈ D p kl (d kl )) such that (k, l) is critical in the usual sense for in G.</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>The key to constructing the algorithm for computing t l kl is Lemma 3. The idea of the algorithm (Algorithm 2) is based on this lemma. It consists in finding the minimal nonnegative real number f * kl that added to the upper bound of duration interval of a specified (k, l) makes it possibly critical.</figDesc><table><row><cell>Lemma 3. Let f  *  kl be the minimal nonnegative real number such that (k, l) with a duration d kl + f  *  kl becomes possibly critical. Then t e k + f  *  kl = min ∈D s kl ( ), where t e k is the earliest moment when kl (d kl ) t l event k occurs.</cell></row><row><cell>Proof. Let us observe that t l kl ( ) = t e k + f kl ( ) for all ∈ D s kl (d kl ). This follows from the fact that t e k ( ) is equal to t e k for all ∈ D s kl (d kl ). Thus to prove t e k + f  *  kl = min ∈D s kl (d kl ) t l kl ( ), we only need to show that f  *  kl = min ∈D s kl (d kl ) f kl ( ). Assume on the contrary that f  *  kl = min ∈D s kl (d kl ) f kl ( ). Let us consider two cases.</cell></row><row><cell>Case 1: f  *  kl &lt; min ∈D s kl (d</cell></row></table><note><p>Proposition 3. t l kl = min ∈D s kl (d kl ) t l kl ( ). Moreover, the minimum t l kl ( ) is attained on the vertices of the hyper-rectangle D s kl (d kl ). kl ) f kl ( ). The result is min ∈D s kl (d kl ) f kl ( ) &gt; 0 and consequently (k, l) with duration d kl + f * kl is not critical for all ∈ D s kl (d kl + f * kl ). This contradicts the possible criticality of (k, l). Case 2: f * kl &gt; min ∈D s kl (d kl ) f kl ( ). Hence there exists a configuration ∈ D s kl (d kl ) such that f * kl &gt; f kl ( ). Let us increase the duration of (k, l) from d kl to d kl + f kl ( ) in . For this new configuration, say , ∈ D s kl (d kl + f kl ( )), (k, l) is critical and therefore it is possibly critical. This contradicts the assumption that f * kl is the minimal number such that (k, l) with duration d kl + f * kl becomes possibly critical.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head></head><label></label><figDesc>l) is necessarily critical f alse otherwise.</figDesc><table><row><cell cols="2">PHASE 1: 1 ← 0; label(1) ← true; 1: t e 2: for j ← 2 to l -1 do</cell></row><row><cell cols="2">3: for all i ∈ P rec(j ) do</cell></row><row><cell>4:</cell><cell>d ij ← d ij</cell></row><row><cell cols="2">5: end for 6: t e j ← max{t e i + d ij | i ∈ P rec(j )}; label(j ) ← true</cell></row><row><cell cols="2">7: end for</cell></row><row><cell cols="2">8: for all i ∈ P rec(l) do</cell></row><row><cell>9:</cell><cell>if i = k then</cell></row><row><cell>10:</cell><cell>d il ← d il</cell></row><row><cell cols="2">11: end if</cell></row><row><cell cols="2">12: end for</cell></row><row><cell cols="2">13: d kl ← d kl ; 14: t e l ← max{t e 15: if t e l = t e k + d kl then 16: NecCritical ← f alse; exit</cell></row><row><cell cols="2">17: end if</cell></row><row><cell></cell><cell>PHASE 2:</cell></row><row><cell cols="2">18: label(l) ← f alse;</cell></row><row><cell cols="2">19: for j ← l + 1 to n do</cell></row><row><cell cols="2">20: for all i ∈ P rec(j ) do</cell></row><row><cell>21:</cell><cell>if label(i) = true then</cell></row><row><cell>22:</cell><cell>d ij ← d ij</cell></row><row><cell>23:</cell><cell>else</cell></row><row><cell>24:</cell><cell>d ij ← d ij</cell></row><row><cell>25:</cell><cell>end if</cell></row><row><cell cols="2">26: end for 27: t e j ← max{t e i + d ij | i ∈ P rec(j )}; 28: if {i | i ∈ P rec(j ), label(i) = f alse, t e j = t e i + d ij } = ∅ then</cell></row><row><cell>29:</cell><cell>label(j ) ← f alse</cell></row><row><cell cols="2">30: else</cell></row><row><cell>31:</cell><cell>label(j ) ← true</cell></row><row><cell cols="2">32: end if</cell></row><row><cell cols="2">33: end for</cell></row><row><cell cols="2">34: NecCritical ← not label(n);</cell></row></table><note><p>i + d il | i ∈ P rec(l)}; label(l) ← true;</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head></head><label></label><figDesc>Algorithm 4) is based on Lemma 7. It consists in determining the minimal nonnegative real number f * kl that added to the lower bound of the duration interval of a specified activity (k, l) makes it necessarily critical. Suppose on the contrary that f * kl = max ∈D s kl (d kl ) f kl ( ). Then we should consider the following two cases. Case 1: f * kl &lt; max ∈D s kl (d kl ) f kl ( ). This implies that there exists a configuration ∈ D which gives f kl ( ) &gt; 0. Consequently (k, l) is not critical in . Let us increase the duration of (k, l) from d kl to d kl + f * kl in . For this new configuration, say , ∈ D</figDesc><table><row><cell>true}</cell></row><row><cell>8: end if 9: t e l ← t e l + ; 10: f kl ← f kl + ;</cell></row><row><cell>Check necessary criticality of (k, l) with implicitly</cell></row><row><cell>increased duration d kl + f kl .</cell></row><row><cell>11: call only PHASE 2 of Algorithm 3</cell></row><row><cell>12: end while 13: t l kl ← t e k + f Lemma 7. Let f  kl becomes necessarily critical. Then t e k + f  *  kl = max ∈D s kl ( ), where t e k is the earliest moment when kl (d kl ) t l event k occurs.</cell></row><row><cell>Proof. Our proof starts with the observation that t l kl ( ) = t e k + f kl ( ), for all observation follows from the fact that t e k ( ) = t e k , for all ∈ D s kl (d kl ). Hence in order to prove t e ∈ D s kl (d kl ). The k + f  *  kl = max ∈D s kl (d kl ) t l kl ( ), it suffices to show that f  *  kl = max ∈D s kl (d kl ) f kl ( ). s kl (d kl ) such</cell></row><row><cell>that f  *  kl &lt; f kl ( ),</cell></row></table><note><p><p>kl ; f kl equals f * kl</p>The main idea of the algorithm for determining t l kl of a given activity (k, l) ∈ A (* kl be the minimal nonnegative real number such that (k, l) with a duration d kl + f * s kl</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Lemma 10 .</head><label>10</label><figDesc>Assume that activities (i, j ) ∈ P REC(k, l) have precise durations and f * kl is the minimal nonnegative real number such that (k, l) with a duration equal to d kl + f * kl (resp. d kl + f * kl ) becomes possibly (resp. necessary) critical. Then f kl = f * kl (resp. f kl = f * kl ). The proof of this equality runs in the same manner as the one of Lemma 3 (resp. Lemma 7). Assume that activities (i, j ) ∈ P REC(k, l) have precise durations. Then Algorithm 2 (resp. Algorithm 4) finds f kl , f kl = t l kl -t e k (resp. f kl , f kl = t l kl -t e k ).</figDesc><table><row><cell>Proof. From the assumption that activities (i, j ) ∈ P REC(k, l) have precise durations, we get D kl (x) = D s kl (x) (resp. D kl (x) = D s kl (x)). Thus it suffices to show that f  *  kl = min ∈D s kl = kl (d kl ) f kl ( ) (resp. f  *  max ∈D s kl (d kl ) f kl ( )). Lemma 11. Proof. Algorithm 2 (resp. Algorithm 4) finds t l kl (resp. t l kl ) by Lemma 4 (resp. Lemma 8). That t l kl = t e k + f  *  kl (resp. t l kl = t e k + f  *  kl ), where f</cell></row></table><note><p>* kl is the minimal nonnegative real number such that (k, l) with a duration equal to d kl + f * kl (resp. d kl + f * kl ) becomes possibly (resp. necessary) critical over the set D s kl (d kl + f * kl ) (resp. D s kl (d kl + f * kl )), follows from Lemma 3 (resp. Lemma 7). We thus get f * kl = t l kl -t e k (resp. f * kl = t l kl -t e k ). Activities (i, j ) ∈ P REC(k, l) have precise durations, and so D kl</p></note></figure>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>times t l kl (resp. float f kl ) of an activity (k, l) is defined in following way (see <ref type="bibr" target="#b8">[9]</ref>):</p><p>where t l kl ( ) (resp. f kl ( )) is the latest starting time (resp. the float) of (k, l) in configuration . The above fuzzy quantities (possibility distributions) can be determined via the use of -cuts. That is, a method (in the interval case) computes -cuts, T l kl ( ) and Fkl ( ), of each fuzzy latest starting time T l kl and float Fkl in a network with duration intervals dij ( ) = [d ij ( ), d ij ( )], (i, j ) ∈ A. Then the fuzzy quantities, T l kl and Fkl , are reconstructed from their -cuts. This approach makes sense since intervals T l kl ( ) = [t l kl ( ), t l kl ( )] and Fkl ( ) = [f kl ( ), f kl ( )] are nested. Such an approach has been proposed in <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b8">9]</ref> and corresponding polynomial algorithms have been provided for networks having a special topology, namely series-parallel ones. It is worth pointing out that the main difficulty of determining fuzzy project characteristics, when fuzzy numbers represent ill-known processing times, does not lie in the introduction of fuzzy sets. It is already present when only usual intervals are involved. Solving the interval valued case is the main difficulty. Thus, the fuzzy latest starting time T l kl , i.e. its -cuts, in general networks can be determined by means of the algorithm for computing the bounds on the latest starting times (Algorithms 2 and 4), described in Sections 2.2 and 2.3.</p><p>As far as the determination of fuzzy float Fkl is concerned, the problem does not seem to be easy, because it is more general than the one, in the interval case, of computing bounds on floats. Hence, the determination of Fkl is N P-hard. However, in some cases one can determine Fkl , that is in cases in which computing the bounds on floats is polynomially solvable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Conclusion</head><p>In this paper, we have considered the problems of computing the bounds on the latest starting times and the floats of activities in a network with imprecise durations represented by means of interval or fuzzy numbers. We have proposed O(mn) time algorithms for computing the intervals of the possible values of the latest starting times of an activity in general networks with interval durations. So far, there have existed polynomial algorithms only for networks having a series-parallel topology. Furthermore, we have proved that the problem of computing the bounds on the floats of an activity in networks with interval durations cannot be approximated within a factor smaller than 1 and described some polynomially solvable cases.</p><p>We have also shown how to use the proposed algorithms for computing the fuzzy latest starting times of activities in a network with activity durations given in the form of fuzzy numbers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Appendix</head><p>Proof of Theorem 1.</p><p>The proof is inspired by the N P-completeness proof of the problem of the possible criticality of an activity, presented in <ref type="bibr" target="#b6">[7]</ref> (Theorem 1). A polynomial reduction from a certain modified PARTITION problem , denoted MPARTITION, to the one of evaluating possible criticality was proposed.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Approximate solution of NP optimization problems</title>
		<author>
			<persName><forename type="first">G</forename><surname>Ausiello</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Crescezi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Protasi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theoret. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">150</biblScope>
			<biblScope unit="page" from="1" to="55" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Fuzzy Pert</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">J</forename><surname>Buckley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Applications of Fuzzy Set Methodologies in Industrial Engineering</title>
		<editor>
			<persName><forename type="first">G</forename><forename type="middle">W</forename><surname>Evans</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">W</forename><surname>Karwowski</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">M</forename><forename type="middle">R</forename><surname>Wilhelm</surname></persName>
		</editor>
		<meeting><address><addrLine>Amsterdam-Oxford-New York-Tokyo</addrLine></address></meeting>
		<imprint>
			<publisher>Elsevier</publisher>
			<date type="published" when="1989">1989</date>
			<biblScope unit="page" from="103" to="114" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">On the sure criticality of tasks in activity networks with imprecise durations</title>
		<author>
			<persName><forename type="first">S</forename><surname>Chanas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Dubois</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Zieliński</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Systems Man</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="page" from="393" to="407" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
	<note>Cybern. Part B: Cybern.</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The use of fuzzy variables in PERT</title>
		<author>
			<persName><forename type="first">S</forename><surname>Chanas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kamburowski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Fuzzy Sets and Systems</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="1" to="19" />
			<date type="published" when="1981">1981</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Critical path analysis in the network with fuzzy activity times</title>
		<author>
			<persName><forename type="first">S</forename><surname>Chanas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Zieliński</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Fuzzy Sets and Systems</title>
		<imprint>
			<biblScope unit="volume">122</biblScope>
			<biblScope unit="page" from="195" to="204" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">The computational complexity of the criticality problems in a network with interval activity times</title>
		<author>
			<persName><forename type="first">S</forename><surname>Chanas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Zieliński</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">European J. of Oper. Res</title>
		<imprint>
			<biblScope unit="volume">136</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="541" to="550" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">On the hardness of evaluating criticality of activities in a planar network with duration intervals</title>
		<author>
			<persName><forename type="first">S</forename><surname>Chanas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Zieliński</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Oper. Res. Lett</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="page" from="53" to="59" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Fuzzy scheduling: Modelling flexible constraints vs. coping with incomplete knowledge</title>
		<author>
			<persName><forename type="first">D</forename><surname>Dubois</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Fargier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Fortemps</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">European J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">147</biblScope>
			<biblScope unit="page" from="231" to="252" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">On latest starting times and floats in activity networks with ill-known durations</title>
		<author>
			<persName><forename type="first">D</forename><surname>Dubois</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Fargier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Galvagnon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">European J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">147</biblScope>
			<biblScope unit="page" from="266" to="280" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<author>
			<persName><forename type="first">D</forename><surname>Dubois</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Prade</surname></persName>
		</author>
		<title level="m">Fuzzy Sets and Systems: Theory and Applications</title>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Academic Press</publisher>
			<date type="published" when="1980">1980</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<author>
			<persName><forename type="first">H</forename><surname>Fargier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Galvagnon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Dubois</surname></persName>
		</author>
		<title level="m">Fuzzy PERT in series-parallel graphs, 9th IEEE Internat. Conf. Fuzzy Systems</title>
		<meeting><address><addrLine>San Antonio, TX</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="717" to="722" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Computers and Intractability: A Guide to the Theory of NP-Completeness</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">R</forename><surname>Garey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Johnson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1979">1979</date>
			<publisher>W.H. Freemam and Co</publisher>
			<pubPlace>San Francisco</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Fuzzy network planning</title>
		<author>
			<persName><forename type="first">I</forename><surname>Gazdik</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Reliability</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="page" from="304" to="313" />
			<date type="published" when="1983">1983</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Fuzzy project scheduling system for software development</title>
		<author>
			<persName><forename type="first">M</forename><surname>Hapke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Jaszkiewicz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Słowiński</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Fuzzy Sets and Systems</title>
		<imprint>
			<biblScope unit="volume">67</biblScope>
			<biblScope unit="page" from="101" to="117" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><surname>Kaufmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M</forename><surname>Gupta</surname></persName>
		</author>
		<title level="m">Fuzzy Mathematical Models in Engineering and Management Science</title>
		<meeting><address><addrLine>North-Holland, Amsterdam</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Critical path planning and Scheduling</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Kelley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">R</forename><surname>Walker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Eastern Joint Comput. Conf</title>
		<meeting>Eastern Joint Comput. Conf</meeting>
		<imprint>
			<date type="published" when="1959">1959</date>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="160" to="172" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Using PERT as an Approximation of Fuzzy Project-Network Analysis</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">S</forename><surname>Mccahon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Eng. Manage</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="page" from="146" to="153" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Project network analysis with fuzzy activity times</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">S</forename><surname>Mccahon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">S</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Math. Appl</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="829" to="838" />
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Fuzzy Critical Path Method</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">H</forename><surname>Nasution</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Systems Man</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="48" to="57" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
	<note>Cybernetics</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Using fuzzy sets theory in a scheduling problem: a case study</title>
		<author>
			<persName><forename type="first">H</forename><surname>Prade</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Fuzzy Sets and Systems</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="153" to="165" />
			<date type="published" when="1979">1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<author>
			<persName><forename type="first">H</forename><surname>Rommelfanger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Network analysis and information flow in fuzzy environment</title>
		<imprint>
			<date type="published" when="1994">1994</date>
			<biblScope unit="volume">67</biblScope>
			<biblScope unit="page" from="119" to="128" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
