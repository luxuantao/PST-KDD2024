<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Parallel Genetic Algorithms on Programmable Graphics Hardware</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Qizhi</forename><surname>Yu</surname></persName>
							<email>qizhi.yu@gmail.com</email>
							<affiliation key="aff0">
								<orgName type="department">College of Computer Science</orgName>
								<orgName type="institution">Zhejiang University</orgName>
								<address>
									<postCode>310027</postCode>
									<settlement>Hangzhou</settlement>
									<country key="CN">P.R. China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Chongcheng</forename><surname>Chen</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Spatial Information Research Center of Fujian Province</orgName>
								<orgName type="institution">Fuzhou University</orgName>
								<address>
									<postCode>350002</postCode>
									<settlement>Fuzhou</settlement>
									<country key="CN">P.R.China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Zhigeng</forename><surname>Pan</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">College of Computer Science</orgName>
								<orgName type="institution">Zhejiang University</orgName>
								<address>
									<postCode>310027</postCode>
									<settlement>Hangzhou</settlement>
									<country key="CN">P.R. China</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Spatial Information Research Center of Fujian Province</orgName>
								<orgName type="institution">Fuzhou University</orgName>
								<address>
									<postCode>350002</postCode>
									<settlement>Fuzhou</settlement>
									<country key="CN">P.R.China</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Parallel Genetic Algorithms on Programmable Graphics Hardware</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">B02895E5662F31C22A7C95683846323B</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T15:07+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Parallel genetic algorithms are usually implemented on parallel machines or distributed systems. This paper describes how finegrained parallel genetic algorithms can be mapped to programmable graphics hardware found in commodity PC. Our approach stores chromosomes and their fitness values in texture memory on graphics card. Both fitness evaluation and genetic operations are implemented entirely with fragment programs executed on graphics processing unit in parallel. We demonstrate the effectiveness of our approach by comparing it with compatible software implementation. The presented approach allows us benefit from the advantages of parallel genetic algorithms on low-cost platform.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Genetic algorithms (GAs) are robust search algorithms inspired by the analogy of natural evolutionary processes <ref type="bibr" target="#b0">[1]</ref>. They have demonstrated to be particularly successful in the optimization problems. As many GA solutions require a significant amount of computation time, a number of parallel genetic algorithms (PGAs) have been proposed in past decades <ref type="bibr" target="#b1">[2]</ref> <ref type="bibr" target="#b2">[3]</ref>. These algorithms differ principally from the classical sequential genetic algorithm, but they seem to have even better optimization quality <ref type="bibr" target="#b3">[4]</ref>. Previous proposed parallel implementations usually rely on parallel computers, distributed systems or specialized GA hardware which are not easily available to the common users. The goal of this paper is to implement PGA by utilizing graphics hardware found in PC.</p><p>The graphics processors (GPUs) on today's commodity video cards have evolved into an extremely powerful and flexible processor. Modern GPUs perform floating-point calculations much faster than today's CPUs <ref type="bibr" target="#b4">[5]</ref>. Furthermore, instead of offering a fixed set of functions, current GPUs allow a large amount of programmability <ref type="bibr" target="#b5">[6]</ref>. These desirable properties have attracted lots of research efforts to utilize GPUs for various non-graphics applications in recent years <ref type="bibr" target="#b6">[7]</ref>[8] <ref type="bibr" target="#b8">[9]</ref>[10] <ref type="bibr" target="#b10">[11]</ref> <ref type="bibr" target="#b11">[12]</ref>. Previous research work has already shown that GPUs are especially adept at SIMD computation applied to grid data <ref type="bibr" target="#b8">[9]</ref>. Therefore, we can envision that some type of parallel genetic algorithms should be a good fit for commodity programmable GPUs.</p><p>In this paper, we present a novel implementation of fine-grained parallel genetic algorithm on the GPU. Real-coded individuals of a population are represented as a set of 2D texture maps. We perform BLX-Î± crossover and nonuniform mutation by executing a fragment program on every pixel at each step in a SIMD-like fashion. Thus, when application related fitness evaluation is assumed to be implemented on GPU, the GA iterations can run entirely on GPU. We will demonstrate the effectiveness of GPU implementation by applying it to function optimization problem. Relative to software implementation, a speedup of about 15 times has been achieved with population size 512 2 .</p><p>The rest of the paper is organized as follow: The subsequent section gives background of both genetic algorithms and graphics hardware to facilitate understanding of our implementation. In Section 3, we describe the proposed GPUbased implementation. Section 4 presents performance results, and the paper concludes with suggestions for future work in Section 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Genetic Algorithms</head><p>A simple GA starts with a population of solutions encoded in one of many ways. The GA determines each string's strength based on an objective function and performs one or more of three genetic operators on certain strings in the population. As described in Golberg <ref type="bibr" target="#b12">[13]</ref>: in general terms, a genetic algorithm consists of four parts.</p><p>1. Generate an initial population. 2. Select pair of individuals based on the fitness function. 3. Produce next generation from the selected pairs by applying pre-selected genetic operators. 4. If the termination condition is satisfied stop, else go to step 2.</p><p>The termination condition can be either:</p><p>1. No improvement in the solution after a certain number of generation. 2. The solution converges to a pre-determined threshold.</p><p>In real-code GA, a solution is directly represented as a vector of real-parameter decision variable <ref type="bibr" target="#b13">[14]</ref>. This coding scheme is particularly natural when tackling optimization problems of parameters with variable in continuous domains.</p><p>It has long been noted that genetic algorithms are well suited for parallel execution. There are three main type of parallel GAs: master-slave, fine-grained, and coarse-grained <ref type="bibr" target="#b1">[2]</ref>. In a master-slave model, there is a single population just as in sequential GA, but the evaluation of fitness is distributed among several processors. In a coarse-grained model, the GA population is divided into multiple subpopulations. Each subpopulation evolves independently, with only occasional exchanges of individuals between subpopulations. In a fine-grained model, individuals are commonly mapped onto a 2D lattice, with one individual per node. Selection and crossover are restricted to a small and overlapping neighborhood. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Graphics Hardware</head><p>Graphics hardware is originally designed for accelerating rendering images. Figure <ref type="figure" target="#fig_0">1</ref> shows a simplified pipeline of modern programmable GPU. First, commands, textures, and vertex data are received from the host CPU through shared buffers in system memory or local frame-buffer memory. The vertex processor allow for a program to be applied to each vertex in the object, performing transformations and any other per-vertex operation the user specifies. Vertices are then grouped into primitives, which are point, lines, or triangles. Next, rasterization is the process of determining the set of pixels covered by a geometric primitive. After this, the results of rasterization stage, a set of fragments, are processed by a program which runs in the programmable fragment processor. Meanwhile, the programmable fragment processor also supports texturing operations which enable the processor to access a texture image using a set of texture coordinates. Finally, the raster operations stage performs a sequence of per-fragment operations immediately before updating the frame buffer.</p><p>Graphics cards hardware have features which help parallelism. A GPU contains a multiple number of pixel pipelines which process data in parallel (sixteen in our case). These pixel pipelines are each SIMD processing elements, carrying out operations typically on four color components in parallel <ref type="bibr" target="#b4">[5]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">A Real-coded Parallel Genetic Algorithm on the GPU</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Algorithm Overview</head><p>In this paper, we adopt the fine-grained parallel model suitable for SIMD implementation. A typical fine-grained parallel GA has been proposed and studied in <ref type="bibr" target="#b3">[4]</ref>. We adopt a 2D toroidal grid as the spatial population structure where each grid point contains one individual. The neighborhood defined on the grid Fig. <ref type="figure">2</ref>. Spatial population structure and neighborhood shape always contains 5 individuals: the considered one plus the North, East, West, and South individuals (see Figure <ref type="figure">2</ref>).</p><p>The crossover operator defines the procedure for generating a child from two parent genomes. For each individual, the best individual in its neighborhood will be selected as one of the parents, while the other one is itself.</p><p>Several crossover operators can be defined for real representation: averaging crossover, uniform crossover and blend crossover <ref type="bibr" target="#b13">[14]</ref>. In this work, blend crossover is used. Let us assume that and are two chromosomes that have been selected to apply crossover to them. Blend crossover operator randomly selects a value for each offspring gene y i , using a uniform distribution within the range:</p><formula xml:id="formula_0">[C min + Î± â¢ I, C max -Î± â¢ I]</formula><p>where</p><formula xml:id="formula_1">C min = min{x 1 i , x 2 i }, C max = max{x 1 i , x 2 i }, I = C max -C min ,</formula><p>and Î± is the tunable parameter, the higher the value of Î± the more explorative the search.</p><p>Mutation operation is the final step of genetic operation. The role of mutation in GA is to restore lost or unexpected genetic material into a population to prevent the premature convergence of GA to a local result. Some of the commonly used mutation operators for real-coded GA are reviewed in <ref type="bibr" target="#b13">[14]</ref>. In our approach, a non-uniform mutation <ref type="bibr" target="#b14">[15]</ref> is adopted. If the operator is applied at generation step t and tmax is the maximum number of generations then the new value of the i-th gene in an individual will be:</p><formula xml:id="formula_2">y i = { x i + Î´ â¢ (U i -x i ) x i -Î´ â¢ (x i -L i ) Ï = 0 Ï = 1</formula><p>where Ï is a random number taking value 0 or 1 with equal probability, L i and U i are the lower bound and upper bound of x i , and</p><formula xml:id="formula_3">Î´ = 1 -r (1-t/tmax) b</formula><p>where r is a random number within the range [0, 1] and b is a user defined parameter.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Representation of Population</head><p>In this section we describe the internal representation of population. If the GPU is to perform GA operators for us, the first thing we need to do is to represent population data in a format that is accessible by the GPU. The general idea is to store population in a set of texture maps and to exploit fragment programs to implement genetic operators.</p><p>In our representation, the chromosome of each individual is sequentially divided into several segments which are distributed in a number of textures with the same position (see Figure <ref type="figure" target="#fig_1">3</ref>). Every segment contains four genes packed into a single pixel's RGBA channels. We call those textures population textures. Another 2D texture map, called fitness texture, is used to hold the fitness scores of each individual in the population. The position of the fitness of a particular individual maps to the position of the individual in the population.</p><p>The proposed representation enables the efficient computation of genetic operators. It has several advantages: First, it naturally keeps 2D grid topology of the population described in Section 3.1. Second, for each individual, fragment programs of genetic operators only need lookup considered pixel or near neighborhood pixels in each texture map. Thus it keeps the memory footprint of each fragment as low as possible to efficiently utilize texture cache. Third, packing of four concessive genes in one texel makes use of the wide SIMD computations carried out by the GPU. Up to four times as many genes can be processed simultaneously.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Fitness Evaluation</head><p>It is important to emphasize that our framework is designed for solving problems whose fitness function can be implemented entirely in GPU. Only in this case can we avoid the bottleneck of reading population data from graphics hardware to system memory in each iteration of GA. On the other hand, executing fitness evaluation on GPU can take advantage of the GPU's parallel processing capabilities, Implementation of fitness evaluation on GPU is application related. In some cases, such as solving function optimizer problems, fitness evaluation can be easily implemented in a single fragment program. For more complicated applications, we refer readers to a homepage of research on general purpose use of GPU (http://www.gpgpu.org). After the fragment program responsible for fitness evaluation has been executed, the fitness values are stored in fitness texture. This texture is then redisplayed in following rendering pass, and other fragment program is run to perform genetic operators.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Random Numbers Generator</head><p>As described above in Section 3.1, we can find random numbers are involved in both crossover and mutation operator. However, current graphics hardware does not provide the function for generating random numbers. We use the Linear Congruential Generator (LCG) to generate pseudo-random numbers <ref type="bibr" target="#b15">[16]</ref>:</p><formula xml:id="formula_4">I j+1 = a â¢ I j + c (mod m)</formula><p>where m is called the modulus, and a and c are multiplier and the increment respectively. LCG can be implemented in a simple fragment program. We store a matrix of random numbers in a texture called random texture. It is updated once by the fragment program in each iteration of GA loop.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Genetic Operators</head><p>Selection, crossover and mutation operators described in Section 3.1 can be easily mapped to a single fragment program. The fragment program needs lookup population textures, fitness texture and random texture described in above sections. System parameters such as mutation probabilities and crossover probabilities etc. are passed to the fragment program by uniform parameters. We invoke the fragment program by rendering a screen-parallel quadrilateral. The result is written into a new population texture.</p><p>In our implementation, for a population represented by n population textures, n rendering passes have to be performed in every generation of GA. In each rendering pass, four genes of each chromosome are processed parallelly. This is possible because the crossover operator and mutation operator we used all can be performed on independent gene.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Experimental Results</head><p>Our performance results were measured using an AMD Athlon 2500+ CPU with 512M RAM and an NVidia GeForce 6800GT GPU. The GPU-based implementation was developed with Cg code <ref type="bibr" target="#b5">[6]</ref>. We used the Colville minimization problem as benchmark. It is defined as: where -18 â¤ x i â¤ 10, i = 1, 2, 3, 4; with the global solution (1, 1, 1, 1) and f (1, 1, 1, 1) = 0.</p><formula xml:id="formula_5">f (x) = 100(x 2 1 -x 2 ) 2 + (1 -x 1 ) 2 + 90(x 2 3 -x4) 2 + (1 -x 3 ) 2 + 10.1((1 -x2) 2 + (1 -x 4 ) 2 ) + 19.8(x2 -1)(x4 -1)</formula><p>GPU-based implementation was compared with software implementation running on single CPU with different population size. GA parameters are shown in Table <ref type="table" target="#tab_0">1</ref>. Figure <ref type="figure" target="#fig_2">4</ref> shows GPU-based implementation is much faster than the software implementation. We see that speedup increases as we increase the population size. Table <ref type="table" target="#tab_1">2</ref> shows performance improvement of the GPU-based implementation stems from both genetic operators and fitness evaluation. The results also show that when the population size is 32 2 , fitness evaluation of GPU-based implementation is slower than that of software version. This happens because when the objective function is simple and meanwhile the population is small, the evaluation time is mainly consumed by the overhead of graphics pipeline.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>In this work, we have presented a novel implementation of parallel genetic algorithms on commodity graphics hardware. Our approach gives a representation of population suitable for GPU processing. All genetic operators have been implemented on GPU. Tests on a function optimization problem show that the larger the population size is, the better speedup over the software implementation can be achieved. Our work has provided a powerful but inexpensive hardware platform for implementation of PGAs. We believe the solution is promising because programmable GPUs are on a much faster performance growth than CPUs.</p><p>There are still several constrains in our approach. For problems whose fitness function is not suitable for GPU implementation, the performance of our method will be seriously limited because of the bottleneck of transferring data between system memory and video memory in each GA loop. Another limitation is that commonly used binary encoding scheme of GAs seems hard to be implemented on the GPU because there is no bit-operator supported in current GPUs.</p><p>In the future, we will apply the presented approach in real-world problems such as GA-based image processing <ref type="bibr" target="#b16">[17]</ref>. Another future work is further implementations of other variants of genetic algorithms. Using GPU cluster <ref type="bibr" target="#b17">[18]</ref> to perform parallel genetic algorithms is also of interest.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. The programmable graphics pipeline</figDesc><graphic coords="3,88.24,51.90,254.90,149.80" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. The representation of chromosomes in a population as a set of 2D textures is shown.</figDesc><graphic coords="5,55.24,51.86,320.90,138.20" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. The effects of population size on the run time (500 generations)</figDesc><graphic coords="8,89.68,51.96,252.00,161.50" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 .</head><label>1</label><figDesc>GA Parameters</figDesc><table><row><cell></cell><cell cols="2">Parameters</cell><cell></cell><cell>Value</cell></row><row><cell></cell><cell cols="2">Crossover Rate</cell><cell></cell><cell>1.0</cell></row><row><cell></cell><cell cols="2">Mutation Rate</cell><cell></cell><cell>0.05</cell></row><row><cell></cell><cell cols="3">Blend Crossover Parameter Î±</cell><cell>0.5</cell></row><row><cell></cell><cell cols="3">Non-uniform Mutation Parameter b</cell><cell>3</cell></row><row><cell cols="3">Population Size Genetic Operators</cell><cell cols="3">Fitness Evaluation</cell></row><row><cell></cell><cell cols="5">GPU(s) CPU(s) Speedup GPU(s) CPU(s) Speedup</cell></row><row><cell>32 2</cell><cell>0.211 0.296</cell><cell>1.4x</cell><cell cols="2">0.044 0.013</cell><cell>0.3x</cell></row><row><cell>64 2</cell><cell>0.262 1.201</cell><cell>5.8x</cell><cell cols="2">0.046 0.062</cell><cell>1.4x</cell></row><row><cell>128 2</cell><cell>0.444 5.230</cell><cell>11.8x</cell><cell cols="2">0.074 0.587</cell><cell>7.9x</cell></row><row><cell>256 2</cell><cell cols="2">1.187 21.209 17.9x</cell><cell cols="2">0.176 2.725</cell><cell>15.4x</cell></row><row><cell>512 2</cell><cell cols="2">4.075 81.882 20.1x</cell><cell cols="3">0.602 10.299 17.1x</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 .</head><label>2</label><figDesc>Time cost and speed up for different GA module (500 generations)</figDesc><table /></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Acknowlegement</head><p>This project is co-supported by 973 Program (No.2002CB312100) and Excellent Youth Teacher Program of MOE in China.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Adaptation in Natural and Artificial Systems</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">H</forename><surname>Holland</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992">1992</date>
			<publisher>MIT Press</publisher>
			<pubPlace>Cambridge, MA, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">A survey of parallel genetic algorithms</title>
		<author>
			<persName><forename type="first">M</forename><surname>Tomassini</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995">1995</date>
			<publisher>World Scientific III</publisher>
			<biblScope unit="page" from="87" to="118" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Parallel genetic algorithms: advances, computing rends, applications and perspectives</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Konfrst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Parallel and Distributed Processing Symposium</title>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page">162</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A massively parallel genetic algorithms: Implementation and first analysis</title>
		<author>
			<persName><forename type="first">P</forename><surname>Spiessens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Manderick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Int. Conf. Genetic Algorithms</title>
		<meeting><address><addrLine>San Diego</addrLine></address></meeting>
		<imprint>
			<publisher>Morgan Kaufmann Publishers</publisher>
			<date type="published" when="1991">1991</date>
			<biblScope unit="page" from="279" to="285" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">GPU Gems: Programming Techniques, Tips, and Tricks for Real-Time Graphics</title>
		<author>
			<persName><forename type="first">R</forename><surname>Fernando</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
			<publisher>Addison Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><surname>Fermando</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Kilgard</surname></persName>
		</author>
		<title level="m">The Cg Tutorial</title>
		<imprint>
			<publisher>Addision-Wesley</publisher>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Using modern graphics architectures for general-purpose computing: a framework and analysiy</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">J</forename><surname>Thompson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Hahn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Oskin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Internaltional Symposium on Microarchitecture</title>
		<meeting><address><addrLine>Istanbul, Turkey</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="306" to="317" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Linear algebra operators for gpu implementation of numerical algorithms</title>
		<author>
			<persName><forename type="first">J</forename><surname>Krger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="908" to="916" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Harris</surname></persName>
		</author>
		<title level="m">Real-Time Cloud Simulation and Rendering. Dissertaion, University of North Carolina at Chapel Hill</title>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Sparse matrix solvers on the gpu: Conjugate gradients and multigrid</title>
		<author>
			<persName><forename type="first">J</forename><surname>Bolz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Farmer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Grinspun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Schroder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Schrder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="917" to="924" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Nonlinear optimization framework for image-based modeling on programmable graphics hardware</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">E</forename><surname>Hillesland</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Molinov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Grzeszczuk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="925" to="934" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Fast computation of database operations using graphics processors</title>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">K</forename><surname>Govindaraju</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Lloyd</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Manocha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Management of Data</title>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="215" to="226" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Genetic Algorithms in Search Optimization and Machine Learning</title>
		<author>
			<persName><forename type="first">D</forename><surname>Goldberg</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989">1989</date>
			<publisher>Addison Wesley</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Survey on multiobjective evolutionary and real coded genetic algorithms</title>
		<author>
			<persName><forename type="first">M</forename><surname>Raghuwanshi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Kakde</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 8th Asia Pacific Symposium on Intelligent and Evolutionary Systems</title>
		<meeting><address><addrLine>Cairns, Australia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Genetic Algorithms + Data Structures = Evolution Programs. 3rd edn</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Michalewicz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996">1996</date>
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">H</forename><surname>Press</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">A</forename><surname>Teukolsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">T</forename><surname>Vetterling</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">P</forename><surname>Flannery</surname></persName>
		</author>
		<title level="m">Numerical Recipes in C++: The Art of Scientific Computing</title>
		<imprint>
			<publisher>Cambridge University Press</publisher>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Color image filtering and enhancement based on genetic algorithms</title>
		<author>
			<persName><forename type="first">R</forename><surname>Lukac</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">N</forename><surname>Plataniotis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Smolka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">N</forename><surname>Venetsanopoulos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 2004 IEEE International Symposium on Circuits and Systems</title>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Parallel computation on a cluster of gpus</title>
		<author>
			<persName><forename type="first">M</forename><surname>Houston</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Fatahalian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Sugerman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Buck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Workshop on General-Purpose Computing on Graphics Processors</title>
		<editor>
			<persName><forename type="first">A</forename><surname>Lastra</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">M</forename><surname>Lin</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">D</forename><surname>Manocha</surname></persName>
		</editor>
		<meeting><address><addrLine>Los Angeles, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page">50</biblScope>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
