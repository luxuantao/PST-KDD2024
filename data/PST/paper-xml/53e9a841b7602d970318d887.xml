<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Experiences with Worm Propagation Simulations</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Arno</forename><surname>Wagner</surname></persName>
							<email>wagner@tik.ee.ethz.ch</email>
							<affiliation key="aff0">
								<orgName type="laboratory">Computer Engineering and Networks Laboratory</orgName>
								<orgName type="institution">Swiss Federal Institute of Technology Zurich ETH-Zentrum</orgName>
								<address>
									<postCode>CH-8092</postCode>
									<settlement>Zurich</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Bernhard</forename><surname>Plattner</surname></persName>
							<email>plattner@tik.ee.ethz.ch</email>
							<affiliation key="aff0">
								<orgName type="laboratory">Computer Engineering and Networks Laboratory</orgName>
								<orgName type="institution">Swiss Federal Institute of Technology Zurich ETH-Zentrum</orgName>
								<address>
									<postCode>CH-8092</postCode>
									<settlement>Zurich</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Roman</forename><surname>Hiestand</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Computer Engineering and Networks Laboratory</orgName>
								<orgName type="institution">Swiss Federal Institute of Technology Zurich ETH-Zentrum</orgName>
								<address>
									<postCode>CH-8092</postCode>
									<settlement>Zurich</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Experiences with Worm Propagation Simulations</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">7F2758479BC8D20A373A1668C2D1E717</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T05:26+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>D.4.6 [Operating Systems]: Security and Protection-Invasive software (e.g., viruses, worms, Trojan horses)</term>
					<term>K.6.5 [Management of Computing and Information Systems]: Security and Protection-Invasive software (e.g., viruses, worms, Trojan horses)</term>
					<term>I.6 [Computing Methodologies]: Simulation and Modeling Internet Worms, Simulation, Bandwidth, Latency</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Fast Internet worms are a relatively new threat to Internet infrastructure and hosts. We discuss motivation and possibilities to study the behaviour of such worms and degrees of freedom that worm writers have. To facilitate the study of fast worms we have designed a simulator. We describe the design of this simulator and discuss practical experiences we have made with it and compare observation of past worms with simulated behaviour. One specific feature of the simulator is that the Internet model used can represent network bandwidth and latency constraints.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Internet worms, such as Code Red <ref type="bibr" target="#b1">[2]</ref> or more recently the Sapphire <ref type="bibr" target="#b2">[3]</ref> are an emerging threat to Internet hosts and infrastructure. These worms can compromise very large numbers of hosts in a short time, down to a few minutes <ref type="bibr" target="#b14">[16]</ref>.</p><p>The compromised hosts can then be used to perform other attacks, like massively Distributed Denial-of-Service attacks <ref type="bibr" target="#b7">[9,</ref><ref type="bibr" target="#b3">4]</ref>.</p><p>Study of the behaviour of a worm during its propagation phase is important for several reasons. One is the creation of early warning systems that can detect a propagating worm, and in an ideal case also can give preliminary propagation analysis and perhaps even a captured specimen. Today such systems do not exist and significant work will be needed to turn them into a reality. Another interesting aspect is threat analysis with regard to speed and number of hosts a worm can compromise in a specific time frame. Prediction and analysis of collateral damage, e.g. ARP-floods in badly configured subnets, is also an aspect that needs to be looked into.</p><p>Since worms observed in the past cover only a small portion of the possible parameter space, it is important for countermeasure design to be able to roughly predict characteristics a worm can have.</p><p>We believe that simulation is a key tool here and discuss experiences made and insights gained with a prototypical simulation tool for worm propagation.</p><p>The paper structure is as follows. We start with a more detailed discussion of the motivations why worm behaviour prediction is important in Section 2. Section 3 goes more into the possibilities how worm propagation can be studied. Section 4 examines the relevant parameter-space and how these parameters relate to worm behaviour. In Section 5 we present the implemented simulator and give insights into experiences made with it in Section 6. Finally we briefly discuss the effects of IPv6 in Section 7 and give an overview of related work in Section 8. Section 9 finishes the paper with a conclusion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">WHY PREDICT WORM BEHAVIOUR?</head><p>The benefits of predicting worm behaviour are numerous:</p><p>• Better understanding of the behaviour of worms observed in the past</p><p>• Estimations of a worm's threat potential</p><p>• Estimations of the impact of future worms on the Internet</p><p>• Basis of the design of detection mechanisms for worm spreading</p><p>• Determination of parameters relevant for worm characterisation</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Traffic Prediction</head><p>Traffic prediction for the worm spreading phase helps to estimate the decrease in performance of an affected network. Slow spreading worms might not even be visible in traffic monitoring tools as they are well hidden in regular traffic variations. However, if specific characteristics of a worm are known, a detection might still be possible.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Speed Prediction</head><p>The Sapphire worm infected more than 90% of all vulnerable hosts in the Internet within 10 minutes <ref type="bibr" target="#b8">[10]</ref>. Since manual intervention is too slow to deal with this, there is a need for semi-or full-automatic tools that detect and analyse a spreading worm and activate countermeasures in near real-time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Threat Evaluation</head><p>Given that modern worms have the potential to infect most vulnerable hosts in the Internet within a short time, these worms pose a real threat to the Internet infrastructure. It is important to determine what the possibilities and limitations of this attack tool are to concentrate countermeasure efforts in the most vulnerable places.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">SIMULATION AND ALTERNATIVES</head><p>We will now discuss different ways to study the characteristics of a piece of self-propagating code.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Mathematical Models</head><p>The most powerful approach is probably the creation of a realistic mathematical model that allows behaviour prediction in a closed form, i.e. with no or very little iteration. The problem with this approach is that such models are not generally available and are usually hard or even impossible to create.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Testbeds</head><p>Testbeds allow to actually set free some self-replicating code in an isolated and limited environment and to observe its behaviour. The most obvious limit of a testbed is that it cannot be created in a size approaching the size of the Internet. Another serious problem is that a testbed needs to use real self-propagating code, which is difficult to obtain. There are also legal and moral problems with creating and handling such code.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Real World "Experiments"</head><p>If a testbed is too limited, why not use the Internet itself? While worm code authors certainly take this freedom, this is not an option for scientific study because of the damage being done. In a very limited sense the use of the whole Internet is possible, namely in observing the behaviour of worms that have been set free by people not hampered by ethical considerations. We have observation equipment in place in a moderately sized backbone network to observe the next Internet outbreaks. See Section 8 for further details.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Simulation</head><p>In a sense simulation is a mathematical model in which some of the functions used rely heavily on iteration. In order to reduce computational complexity abstraction and approximation of the inner mechanisms of the object studied is often used. This allows computation of functions that are not well understood in a mathematical sense. The analytical approach of mathematical modelling is replaced with an experimental approach, in which scenarios are simulated and then analysed. Simulation is often a very effective tool to understand complex processes.</p><p>A significant drawback of simulation is that due to abstraction the simulation results can differ significantly from real behaviour of the system under study. A way to verify and optimise simulation accuracy is to simulate events that have been observed in the real system and compare simulation outputs to the measured data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">WORM CHARACTERISTICS</head><p>There is significant freedom in worm design. For this paper we do not care about the specific vulnerabilities exploited for system compromise, but only about time, bandwidth and transport protocol used by a worm.</p><p>A worm writer basically implements the following process:</p><p>1. Identify a vulnerable host 2. Compromise the target host</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Transfer the worm and activate it</head><p>For some vulnerabilities all these steps can be combined into a single network packet, as was done in the case of the Sapphire. For others, the steps have to be done separately.</p><p>We believe that for the study of worm propagation a very abstract view of these steps is sufficient. Steps 2 and 3 can be modelled as exchange of a specific amount of data with a specific protocol and optional time delay. Step 1 is a little more complicated, but can still be modelled disregarding vulnerability details.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>TCP vs. UDP</head><p>The main choice in the transport protocol is whether it is connection-oriented or not, for simplicity represented by TCP and UDP. For worms that infect a distributed application, like a P2P system, other models might be needed <ref type="bibr" target="#b15">[17]</ref>. The protocol used is usually directly determined by the vulnerability that is exploited by the worm.</p><p>For the case of UDP, resource consumption in the attacking host is small. A typical scenario is to send out UDP packets to random hosts, while keeping very little state information for each target, or none at all if the attack can be executed by sending a single UDP packet. Disadvantages are that the size of a UDP packet is constrained to around 50 kiB<ref type="foot" target="#foot_0">1</ref> and data packets with a payload larger than 1472 Bytes will be transported using IP-fragmentation.</p><p>Use of TCP incurs penalties for connection establishment, timeouts and error handling. On the plus side there is no data size limit. The most significant disadvantage of TCP is that a connection attempt to a non-existing host fails only after a long timeout and consumes OS resources until it does. There are ways around this, but they require that the worm implements its own modified version of TCP, which makes worm design more difficult and increases worm size.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Amount of Data Transferred</head><p>The time a worm needs to propagate after a vulnerable target has been identified depends mainly on worm size and available bandwidth. Additional delays may be present, e.g. if a reboot of the attacked host is needed. Data transfers form a specific signature of a worm and can be used for detection purposes. Obviously, a large worm will generally propagate significantly slower and far more visible, so worm writers will often aim to write small worms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Scanning Strategy</head><p>The scanning strategy is the method used to select the next host to be probed. One end of the spectrum is random scanning, which selects a next IP address at random. This is one of the most primitive strategies. Surprisingly, worm authors have often failed to write clean random scanners <ref type="bibr" target="#b8">[10,</ref><ref type="bibr" target="#b1">2]</ref>. Mistakes include constant PRNG seeding after propagation and use of inferior PRNGs with non-even value distribution. Random scanning has also been implemented with preference for addresses in the same subnet and other modifications.</p><p>On the other end of the spectrum is partial or full predetermination of the target sequence. The worm operator does a stealthy reconnaissance creating a list of vulnerable hosts. The list of targets, called hitlist, is then added to the worm. Each new copy of the worm created in propagation then gets a part of the remaining hitlist to work on.</p><p>Hitlist scanning can be used to speed up the initial slow phase of worm propagation. It does not work so well in later phases, when a lot of infected hosts are active. It is possible to combine an initial propagation mechanism based on a moderately-sized hitlist with a random scanning method that takes over when the hitlist has been processed. The main disadvantage of using hitlists is that their creation might be detected, leading to countermeasures before the worm is set free.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Latency vs. Bandwidth Limit</head><p>Even though Code Red I and Sapphire both used random scanning, their propagation speed was different by several orders of magnitude. The number of Sapphire infected hosts doubled initially every 8.5 seconds while the Code Red Iv2 worm population had an initial doubling time of about 37 minutes <ref type="bibr" target="#b8">[10]</ref>. The reason for this difference lies in the choice of the transport protocol and in the size of the transferred worm code.</p><p>Sapphire uses a single UDP packet with a total size of 404 bytes. Since there is no connection establishment with UDP, the spreading speed is mostly independent of latency but strongly dependent on bandwidth. An infected host can send as many infection packets as its network link and protocol stack allow.</p><p>Code Red uses TCP, which implies the use of a three way handshake for connection establishment. Consequentially latency is the main limit on propagation speed. In addition OS constraints limit the number of parallel connection attempts that can be made. Latency limited worms can also become bandwidth limited when their scanning traffic ex-ceeds network resources. For Code Red this happened after about 15 hours.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">SIMULATOR DESIGN</head><p>The simulator is started from the command line under X11. It was developed under Linux, but should run under most Unix-like operating systems without modification. It first reads the parameter values and then opens two plot windows. The speed plot shows the number of infected hosts vs. time and the traffic plot shows the total scanning and infection traffic vs. time. Plain text output is also available. The simulator code is available upon request to the authors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Simulator Structure</head><p>Our aim was to create a modular and flexible simulator that can easily be extended. We chose the scripting language Perl as basis for the implementation, since it is well suited for rapid prototyping and is fast enough for our purposes as our evaluation in 6.2 shows. Perl modules are used to structure the code and to facilitate extensions. Plotting is done with gnuplot. A pipe is kept open to each instance of gnuplot and automatically<ref type="foot" target="#foot_1">2</ref> flushed to generate an updated plot when the simulator has finished a number of iteration steps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Internet Model</head><p>The Internet model is at the very core of our simulator. We were looking for a model that is complex enough to represent prevalent characteristics of today's Internet. At the same time it had to be simple enough to enable efficient simulations. Inspired by the Napster and Gnutella P2P client connection measurements in <ref type="bibr" target="#b13">[15]</ref> we chose a model that abstracts from single hosts.  Our model divides the Internet into n different groups of hosts that belong to sub-networks with similar characteristics. Each host group has two defining parameters: bandwidth and latency. The bandwidth and latency of a connection between any two groups are chosen as the minimum bandwidth and maximum latency of the groups. Figure <ref type="figure" target="#fig_0">1</ref> shows a 4-group configuration of the Internet model that is used in our simulator. Details of the host distribution can be found in Table <ref type="table" target="#tab_1">1</ref>. We also specified a 10-group configuration, given in Table <ref type="table" target="#tab_2">2</ref>. The average bandwidth per host in Table <ref type="table" target="#tab_1">1</ref> is 1157 kbit/s for Napster and 1544 kbit/s for Gnutella, for Table <ref type="table" target="#tab_2">2</ref> it is 1176 kbit/s.</p><p>The given percentages are measurements from <ref type="bibr" target="#b13">[15]</ref> and assume that the user population of Napster and Gnutella are representative for the whole Internet. The differences between the Napster and the Gnutella numbers show that this approach is not very accurate. Still these are the best figures we were able to find.</p><p>The details of the underlying measurements as well as more information on host characteristics in the Napster and Gnutella P2P filesharing systems can be found in <ref type="bibr" target="#b13">[15]</ref>. For continued usefulness of the model and the simulator these numbers will have to be updated from time to time. Our Internet model turned out to be powerful enough to simulate many cases of worm behaviour. Still for some cases modifications were needed to get realistic results, as discussed in Section 6.</p><p>The model could easily be extended to support asymmetric connections in order to simulate ADSL or Cable modem connections that e.g. in some European countries have a downstream speed which is two to four times faster than the upstream speed. Also, the TCP slow start behaviour is not modelled. However, as most worms are rather of small size, it could be represented by choosing a lower bandwidth than the actually available bandwidth.</p><p>The nature of our Internet model is well suited for a quantitative analysis of worm spreading, however it is not suited for traffic prediction for a specific host. </p><note type="other">Bandwidth</note></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Implemented Worm Parameters</head><p>Table <ref type="table" target="#tab_4">3</ref> provides an overview of all worm and Internet parameters implemented by our simulator and gives their value range.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Implemented Scanning Strategies</head><p>The simulator implements three different scanning strategies, namely Random Scanning with even distribution, Hitlist Scanning with a user-defined hitlist and Local Forced Scanning that scans local IP addresses with a higher rate than remote addresses.</p><p>The effect of hosts being already infected during worm spreading is taken into account by reducing the success probability of an infection attempt:</p><formula xml:id="formula_0">P (infect) := |vulnerable hosts| -|infected hosts| |all hosts|<label>(1)</label></formula><p>For each time step the simulator sums up the infection probabilities, as defined in (1), for each host scanned to determine the number of newly infected hosts. An error is introduced here because two scanning hosts could select the same target in a time step. This error is small as long as the number of vulnerable hosts is significantly lower than the number of all hosts. Therefore ( <ref type="formula" target="#formula_0">1</ref>) is presently used in the simulator.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Output and Reporting</head><p>The simulator produces a text file that describes all parameter values for the simulation, as well as numeric data files suitable for Gnuplot input. In addition the graphical plots are displayed and updated on the screen while the simulation is in progress.</p><p>Traffic: The traffic plot shows the total traffic generated by the scanning and propagation of the simulated worm over time.</p><p>Spreading Speed: The spreading speed plot shows the total number of infected hosts over time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.6">Simulator Limitations</head><p>The simulator assumes an even distribution of the vulnerable hosts over the different speed groups. The Code Red worms attacked many installations of the IIS web server with the owners of the hosts not even aware they were running a web server, because IIS had been installed as part of other software packages. Accordingly the vulnerable hosts were pretty evenly distributed over all speed groups. However if a worm targets an application that is only installed on hosts that are specifically designated as servers, the vulnerable hosts will tend to be in the faster groups.</p><p>Countermeasures by network and host operators are not modelled in the simulator. The effects of such countermeasures will vary heavily depending on human behaviour and technical parameters and hence can hardly be modeled reliably.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">PRACTICAL EXPERIENCES</head><p>In order to test and validate the simulator design and implementation, we did a number of practical experiments. Most are centered around the Code Red and Sapphire worms and variants of these, since they are probably the best understood fast worms that have been observed in the wild.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Impact of Internet Model</head><p>The Internet model serves as an approximation of the real Internet. Since precise overall Internet bandwidth and latency figures are not available, the model also serves as a method to estimate bandwidth and latency based on a limited observation of these characteristics in real distributed  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Sapphire</head><p>Sapphire is bandwidth-limited. Its propagation speed is roughly linear with the bandwidth directly available to the already infected hosts. When a high number of hosts has been infected, there can also be additional limitations because of ISP and backbone bandwidth limits. We assume a vulnerable population of 75,000 hosts.</p><p>Figure <ref type="figure" target="#fig_2">2</ref> shows a simulation graph obtained with the 10group Internet model from Table <ref type="table" target="#tab_2">2</ref>. The initially infected population was 100 hosts distributed over the different speeds according to group size. The simulation deviates significantly from the observed propagation speed of the Sapphire in <ref type="bibr" target="#b8">[10]</ref>, likely because the Internet has gotten faster since the Napster measurements were taken. If the 100 initially  infected hosts are chosen from the fastest group and in addition the fastest group is enlarged to 10% (taking evenly from the other groups) the initial doubling time is about 6 seconds and the scanning rate after 3 minutes is about 50 million per second, giving a very rough approximation for the observed Sapphire behaviour. The simulation then reaches an infec-tion level of 90% after about 275 seconds. Figures <ref type="figure" target="#fig_4">3</ref> and<ref type="figure" target="#fig_6">4</ref> show the resulting infection and traffic plots. It can be seen that the lack of fast hosts cause the propagation speed to be sub-exponential.  From these experiments we conclude that the initially infected population (obtained via hitlist or pre-infection) while critical for the propagation speed, need not be large. 100 fast vulnerable hosts are probably easy to find. From there on plain random scanning is quite effective.</p><p>To demonstrate the possibilities of the simulator, we give some more examples. The parameters are the same as for the second simulation above. Figure <ref type="figure">5</ref> shows Sapphire with 15,000 vulnerable hosts. The worm now needs about 1030 seconds for a 90% infection degree. This demonstrates that UDP worms with random scanning can still be used for relatively small vulnerable populations.</p><p>Figure <ref type="figure">6</ref> demonstrates the effect of an infection latency, for example a reboot after infection, here chosen to be 100 seconds. Infection of 90% of the vulnerable hosts now takes about 660 seconds, which shows that even with a significant infection latency the worm is still quite fast.   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Code Red</head><p>To validate our simulator's results for TCP-based worms, we tried to approximate the behaviour of Code Red Iv2.</p><p>Therefore we combined data from different analyses in order to choose the most accurate parameters for our simulation. The plot by CAIDA <ref type="bibr" target="#b9">[11]</ref> as shown in Figure <ref type="figure" target="#fig_8">7</ref> was used as a reference to estimate the simulator's accuracy. For the simulation we assumed 360,000 vulnerable hosts <ref type="bibr" target="#b6">(7)</ref>. The TCP timeout of CodeRed Iv2 was set to 21 seconds ( <ref type="bibr" target="#b18">[20]</ref>) and the number of parallel threads sending out scanning packets was set to 100 ( <ref type="bibr" target="#b11">[13]</ref>). TCP resending was disabled and a time step of 1s for the simulation was defined.   <ref type="figure" target="#fig_8">7</ref> shows where these countermeasures begin to affect the worm's spreading.</p><p>The logscale plot in Figure <ref type="figure" target="#fig_12">9</ref> shows nicely the exponential increase in he number infected hosts.</p><p>Finally in the traffic log as shown in Figure <ref type="figure" target="#fig_13">10</ref>, it can be observed that at the saturation level of 360,000 infected   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.1">Parameter Variations</head><p>A simulation of CodeRed Iv2 with the 10-group model showed only negligible differences to the 4-group case. A decrease of CodeRed's worm size to the size of Slammer showed only a slight decrease in the generated traffic. This is not surprising as the rather large worm code only propagates to vulnerable hosts and hence most of the traffic is caused by scanning other hosts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Simulator Performance</head><p>Simulator performance varies widely with the input parameters. We did most of our experiments on an AthlonXP 2200+ under Linux 2.4., with a time resolution of 50ms for the UDP simulations and 1 second for the TCP simulations.</p><p>For UDP simulations we have observed a simulation runtime of below 20% simulated time for a 4 group model. With a 10-group model overall simulation time was still lower than simulated time in many cases. A high infection latency time is the one factor that slows down things massively, since more state has to be kept. Reducing the time resolution drastically speeds things up, which allows to balance accuracy against performance. We believe that simulator performance is good enough for many applications.</p><p>The Perl-based implementation allows easy modification if a need to simulate additional effects arises. We feel that this flexibility is more important than the benefits of a faster implementation with a compiled language. However the simulator presented here is not suitable for a simulation with a large number of host groups, that e.g. model individual subnets. But we are not aware of speed and topology statistics that could be used as basis of such a model. Even if they were available, we think that Internet topology is too unstable for such a detailed model to stay usable without frequent and possibly costly updates.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">IPV6 AND RANDOM SCANNING</head><p>IPv6 offers a 128 bit address space <ref type="bibr" target="#b12">[14,</ref><ref type="bibr">8]</ref>. It is not quite clear how much structure will be contained in addresses actually assigned to hosts in the future. For example only 1/8 of the address space is currently assigned to global unicast addresses. Furthermore 64 bits may be used for interface identification. In case of an 48 bit MAC address, there are significantly less than 48 bits of randomness in these 64 bits, although the structure is not very simple. Still we expect that random scanning will be ineffective with wide deployment of IPv6. One possible way around this problem is already in use by email-based worms. The idea is to use locally known addresses as targets. Addresses can be found in local DNS caches, ARP caches, currently open connections, web browser bookmarks, contact lists of P2P systems and other places. It remains to be seen how effective such mechanisms are and whether worms can achieve fast propagation speeds under IPv6 without resorting to large hitlists.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">RELATED WORK</head><p>Generally speaking the Internet is difficult to simulate, a good overview can be found in <ref type="bibr" target="#b6">[7]</ref>. Still with a narrow focus the task becomes easier. In <ref type="bibr" target="#b18">[20]</ref> there is a simulationbased analysis of the Code Red worm using methods from epidemiology.</p><p>One of the first to recognise the immense threat worms are to the Internet is N. C. Weaver who coined the term "Warhol Worm" <ref type="bibr" target="#b17">[19]</ref> for very fast worms. This work is extended in <ref type="bibr" target="#b14">[16]</ref>.</p><p>Since worms can be used to compromise a large number of hosts, they can be used in direct preparation of massively Distributed Denial of Service attacks. There is a lot of work that shows the possibilities to fight (D)DoS attacks in endsystems or end-networks. For example, many variants of IPtraceback deal with the problem of identifying the sender of spoofed IP packets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DDoSVax</head><p>The simulator described in this paper was created in the context of a research project called DDoSVax <ref type="bibr" target="#b5">[6]</ref>. The project deals with detection, analysis and countermeasures for DDoS attacks, as well as worms used in preparation of such attacks. The focus is on backbone networks and consequentially on massive network events that are visible on the backbone level.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.">CONCLUSION</head><p>Understanding worms and their propagation mechanisms is a relatively new research area with significant impact on Internet stability. It is likely to grow even more important when worm writers get more experienced and outbreaks get more common. Because software engineering techniques can only mitigate part of the risks and are often not even applied to any reasonable degree, many hosts will remain vulnerable. The only solution dealing with the residual risk is for the Internet infrastructure to obtain defensive mechanisms. For the specific problems of worms, early detection is the key to any defence <ref type="bibr" target="#b10">[12]</ref>.</p><p>We have shown that simulation relying on a relatively simple Internet-model and implemented in a scripting language can provide valuable insights into worm propagation events.</p><p>One problem is that relatively few global outbreaks of fast worms have been observed so far, and the observation detail was not very good in these cases. But there are certainly more fast Internet worms to be expected. We are working on better observation equipment and we will use measurement data gathered in the future to refine and improve future versions of the simulator.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Example for a configuration of our Internet model</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Sapphire: Infection Speed</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Sapphire: Speed with adjusted model</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 4</head><label>4</label><figDesc>Figure 4: Sapphire: Traffic with adjusted model</figDesc><graphic coords="6,324.00,107.90,224.70,168.53" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 5 Figure 6 :</head><label>56</label><figDesc>Figure 5: Sapphire: 15,000 vulnerable hosts</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Code Red Iv2: Measurements of infected hosts by CAIDA</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Code Red Iv2: Infection speed simulation matches measurements Our results for the number of infected hosts against time using the 4-group (Napster-based) model are shown in Figure 8 and closely matches the reference plot. The plot does not show the effects of countermeasures put into place by network and host administrators that are present in CAIDA's plot. The arrow in Figure7shows where these countermeasures begin to affect the worm's spreading.The logscale plot in Figure9shows nicely the exponential increase in he number infected hosts.Finally in the traffic log as shown in Figure10, it can be observed that at the saturation level of 360,000 infected</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: Code Red Iv2: Infection speed simulation matches measurements</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: Code Red Iv2: Traffic simulation</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 : Internet models with 4 groups</head><label>1</label><figDesc></figDesc><table><row><cell cols="3">Bandwidth Napster Gnutella</cell><cell>Latency</cell></row><row><cell>64 kbit/s</cell><cell>32%</cell><cell cols="2">10% 1,000 ms</cell></row><row><cell>128 kbit/s</cell><cell>5%</cell><cell>14%</cell><cell>300 ms</cell></row><row><cell>1 Mbit/s</cell><cell>38%</cell><cell>38%</cell><cell>100 ms</cell></row><row><cell>3 Mbit/s</cell><cell>25%</cell><cell>38%</cell><cell>60 ms</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 2 : Internet model with 10 groups</head><label>2</label><figDesc></figDesc><table><row><cell></cell><cell cols="2">Napster Latency</cell></row><row><cell>14.4 kbit/s</cell><cell cols="2">4% 1000 ms</cell></row><row><cell>28.8 kbit/s</cell><cell cols="2">1% 1000 ms</cell></row><row><cell>33.6 kbit/s</cell><cell cols="2">1% 1000 ms</cell></row><row><cell>56 kbit/s</cell><cell cols="2">23% 1000 ms</cell></row><row><cell>64 kbit/s</cell><cell cols="2">3% 1000 ms</cell></row><row><cell>128 kbit/s</cell><cell>2%</cell><cell>300 ms</cell></row><row><cell>256 kbit/s</cell><cell>44%</cell><cell>300 ms</cell></row><row><cell>512 kbit/s</cell><cell>14%</cell><cell>100 ms</cell></row><row><cell>1.544 Mbit/s</cell><cell>5%</cell><cell>60 ms</cell></row><row><cell>44.736 Mbit/s</cell><cell>2%</cell><cell>60 ms</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 3 :</head><label>3</label><figDesc>Simulation ParametersInternet applications, in our case P2P filesharing. It turned out that the Internet models needed to be adjusted to some degree to get realistic simulation results.</figDesc><table /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>This is OS dependent. We found that e.g. Solaris has a limit around 50 kiB, Linux a little higher. 64 kiB is the definite protocol limit.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>This can be done in Perl by using select(G); $| = 1;, with G being the handle of the pipe.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10.">ACKNOWLEDGEMENTS</head><p>Part of the DDoSVax project <ref type="bibr" target="#b5">[6]</ref> is funded by SWITCH.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Characteristics of Network Traffic Flow Anomalies</title>
		<author>
			<persName><forename type="first">P</forename><surname>Barford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Plonka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGCOMM Internet Measurement Workshop</title>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<author>
			<persName><surname>Caida</surname></persName>
		</author>
		<author>
			<persName><surname>Caida</surname></persName>
		</author>
		<ptr target="http://www.caida.org/analysis/security/code-red/" />
		<title level="m">Analysis of Code-Red</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">CERT Advisory CA-2003-04 MS-SQL Server Worm</title>
		<author>
			<persName><surname>Cert</surname></persName>
		</author>
		<ptr target="http://www.cert.org/advisories/CA-2003-04.html" />
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Defending against Flooding-Based Distributed Denial-of-Service Attacks: A Tutorial</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">K C</forename><surname>Chang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Communications Magazine</title>
		<imprint>
			<date type="published" when="2002-10">October 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">CERT Advisory CA-2001-19 &quot;Code Red</title>
		<author>
			<persName><forename type="first">R</forename><surname>Danyliw</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Householder</surname></persName>
		</author>
		<ptr target="http://www.cert.org/advisories/CA-2001-19.html" />
	</analytic>
	<monogr>
		<title level="j">Worm Exploiting Buffer Overflow In IIS Indexing Service DLL</title>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<ptr target="http://www.tik.ee.ethz.ch/~ddosvax/" />
		<title level="m">DDoSVax</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Difficulties in Simulating the Internet</title>
		<author>
			<persName><forename type="first">S</forename><surname>Floyd</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Paxson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Transactions on Networking</title>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">A Taxonomy of DDoS Attacks and DDoS Defense Mechanisms</title>
		<author>
			<persName><forename type="first">J</forename><surname>Mirkovic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Reiher</surname></persName>
		</author>
		<ptr target="http://www.lasr.cs.ucla.edu/ddos/ucla_tech_report_020018.pdf" />
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Inside the slammer worm</title>
		<author>
			<persName><forename type="first">D</forename><surname>Moore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Paxson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Savage</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Shannon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Staniford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Weaver</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Security and Privacy</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="33" to="39" />
			<date type="published" when="2003-07">July 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Code-Red: a case study on the spread and victims of an Internet worm</title>
		<author>
			<persName><forename type="first">D</forename><surname>Moore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Shannon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Brown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM/USENIX Internet Measurement Workshop</title>
		<meeting>the ACM/USENIX Internet Measurement Workshop<address><addrLine>Marseille, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-11">November 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Internet Quarantine: Requirements for Containing Self-Propagating Code</title>
		<author>
			<persName><forename type="first">D</forename><surname>Moore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Shannon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Voelker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Savage</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2003 IEEE Infocom Conference</title>
		<meeting>the 2003 IEEE Infocom Conference<address><addrLine>San Francisco, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-04">April 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><surname>Permeh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Maiffret</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Permeh</surname></persName>
		</author>
		<ptr target="http://www.eeye.com/html/Research/Advisories/AL20010717.html" />
		<title level="m">eEye Digital Security Advisory .ida Code Red Worm</title>
		<imprint>
			<date type="published" when="2001-07">July 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Internet Protocol Version 6 (IPv6) Addressing Architecture</title>
	</analytic>
	<monogr>
		<title level="j">RFC</title>
		<imprint>
			<biblScope unit="volume">3513</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A measurement study of peer-to-peer file sharing systems</title>
		<author>
			<persName><forename type="first">S</forename><surname>Saroiu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">K</forename><surname>Gummadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">D</forename><surname>Gribble</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Multimedia Computing and Networking 2002 (MMCN &apos;02)</title>
		<meeting>Multimedia Computing and Networking 2002 (MMCN &apos;02)<address><addrLine>San Jose, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-01">January 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">How to 0wn the Internet in Your Spare Time</title>
		<author>
			<persName><forename type="first">S</forename><surname>Staniford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Paxson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Weaver</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. USENIX Security Symposium</title>
		<meeting>USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Peer-to-peer systems as attack platform for distributed denial-of-service</title>
		<author>
			<persName><forename type="first">A</forename><surname>Wagner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Plattner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SACT Workshop</title>
		<meeting><address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Programming Perl, 2nd Edition</title>
		<author>
			<persName><forename type="first">L</forename><surname>Wall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Christiansen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Schwarz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996">1996</date>
			<pubPlace>O&apos;Reilly</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">C</forename><surname>Weaver</surname></persName>
		</author>
		<ptr target="http://www.cs.berkeley.edu/~nweaver/warhol.html" />
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Code Red Worm Propagation Modeling and Analysis</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">C</forename><surname>Zou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Gong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Towsley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th ACM conference on Computer and communications security</title>
		<meeting>the 9th ACM conference on Computer and communications security<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-11">November 2002</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
