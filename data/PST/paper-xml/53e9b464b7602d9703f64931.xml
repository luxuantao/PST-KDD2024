<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Computing the Types of the Relationships between Autonomous Systems</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Giuseppe</forename><surname>Di Battista</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Dipartimento di Informatica e Automazione</orgName>
								<orgName type="institution">Università di Roma Tre</orgName>
								<address>
									<settlement>Rome</settlement>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Maurizio</forename><surname>Patrignani</surname></persName>
							<email>patrigna@dia.uniroma3.it</email>
							<affiliation key="aff0">
								<orgName type="department">Dipartimento di Informatica e Automazione</orgName>
								<orgName type="institution">Università di Roma Tre</orgName>
								<address>
									<settlement>Rome</settlement>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Maurizio</forename><surname>Pizzonia</surname></persName>
							<email>pizzonia@dia.uniroma3.it</email>
							<affiliation key="aff0">
								<orgName type="department">Dipartimento di Informatica e Automazione</orgName>
								<orgName type="institution">Università di Roma Tre</orgName>
								<address>
									<settlement>Rome</settlement>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Computing the Types of the Relationships between Autonomous Systems</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">A243CDF6BF135AFE185478424B97914A</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T04:23+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We investigate the problem of computing the types of the relationships between Internet Autonomous Systems. We refer to the model introduced in [1], [2] that bases the discovery of such relationships on the analysis of the AS paths extracted from the BGP routing tables. We characterize the time complexity of the above problem, showing both NP-completeness results and efficient algorithms for solving specific cases. Motivated by the hardness of the general problem, we propose heuristics based on a novel paradigm and show their effectiveness against publicly available data sets. The experiments put in evidence that our heuristics performs significantly better than state of the art heuristics.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>An Autonomous System (AS) is a portion of Internet under a single administrative authority. Currently, there are more than 10, 000 ASes and their number is rapidly growing. They interact to coordinate the IP traffic delivery, exchanging routing information with a protocol called Border Gateway Protocol (BGP) <ref type="bibr" target="#b2">[3]</ref>.</p><p>Several authors (see, e.g. <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b4">[5]</ref>) have pointed out that the relationships between ASes can be roughly classified into categories that have both a commercial and a technical flavor. A pair of ASes such that one sells/offers Internet connectivity to the other is said to have a provider-customer relationship. If two ASes simply provide connectivity between their respective customers are said to have a peer-to-peer relationship. Finally, if two ASes offer each other Internet connectivity are said to be siblings. Of course, this classification does not capture all the shades of the possible commercial agreements and technical details that govern the traffic exchanges between ASes but should be considered as an important attempt toward understanding the Internet structure.</p><p>Since many applications would benefit from the knowledge about the Internet structure, the research on the subject has recently produced many contributions. More specifically, there is a wide research area focusing on the discovery of the topology underlying the Internet structure, either at the AS and at the router level (see, for example, <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b6">[7]</ref>, <ref type="bibr" target="#b7">[8]</ref>).</p><p>Other researchers concentrate more directly on the above mentioned relationships and on the hierarchy that they induce Work partially supported by European Commission -Fet Open project COSIN -COevolution and Self-organisation In dynamical Networks -IST-2001-33555, by "Progetto ALINWEB: Algoritmica per Internet e per il Web", MIUR Programmi di Ricerca Scientifica di Rilevante Interesse Nazionale, and by "The Multichannel Adaptive Information Systems (MAIS) Project", MIUR Fondo per gli Investimenti della Ricerca di Base. on the set of ASes. Govindan and Reddy <ref type="bibr" target="#b5">[6]</ref> study the interplay between the degree of the ASes and their rank in the hierarchy, where the degree of an AS is the number of ASes that have some kind of relationship with it. Gao <ref type="bibr" target="#b0">[1]</ref> studies, for the first time, the following problem. ASes are the vertices of a graph (AS graph) where two ASes are adjacent if they exchange routing information; the edges of such a graph should be labeled in order to reflect the type of relationship they have. In order to infer the relationships between ASes, Gao uses the information on the degree of ASes together with the AS paths extracted from the BGP routing tables. An AS path is the sequence of the ASes traversed by a connectivity offer (BGP announcement). In <ref type="bibr" target="#b0">[1]</ref> a heuristic is presented together with experimental results. An analysis on the properties of the labeled graphs obtained with such heuristics is provided in <ref type="bibr" target="#b8">[9]</ref>.</p><p>Subramanian et al. <ref type="bibr" target="#b1">[2]</ref> formally define, as a minimization problem, a slightly simplified version of the problem addressed in <ref type="bibr" target="#b0">[1]</ref> and conjecture its NP-completeness. They also propose a heuristic based on the observation of the Internet from multiple vantage points, which does not rely on the degree of the ASes. Further, they validate the results obtained by the heuristic against a rich collection of data sets.</p><p>This paper contributes to the line of research opened in <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b1">[2]</ref>. Namely, its main results are the following.</p><p>• We solve a problem explicitly stated in <ref type="bibr" target="#b1">[2]</ref>. Namely, we characterize the complexity of determining the relationships between ASes while minimizing the number of "anomalies". In particular:</p><p>-We show that such a problem is NP-complete in the general case; -We produce a linear time algorithm for determining the AS relationships in the case in which the problem admits a solution without anomalies; and -We use such a linear time algorithm to show that for large portions of the Internet (e.g., data obtained from single points of view) it is often possible to determine the relationships between ASes with no anomalies.</p><p>• We introduce heuristics, based on a novel approach, for determining the relationships between ASes with a small number of anomalies. • We experimentally show that the proposed approach leads to heuristics that performs significantly better than the cutting edge heuristics of <ref type="bibr" target="#b1">[2]</ref>.</p><p>The paper is structured as follows. Section II describes the addressed problem. Sections III and IV show an algorithm for testing if the problem admits a solution with no anomalies, and show how to find a solution if it exists. In Section V we prove the NP-completeness of the problem in the general case. Section VI shows new heuristics and compare the results with the state of the art. Finally, Section VII contains conclusions and open problems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. PROBLEM DESCRIPTION</head><p>A prefix is a block of destination IP addresses. An Internet Autonomous System (AS) applies local policies to select the best route for each prefix and to decide whether to export this route to neighboring ASes.</p><p>Several authors have pointed out that ASes typically have provider-customer or peer-to-peer relationships (see, e.g. <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b1">[2]</ref>). A customer exports to a provider its routes and the routes learned from its own customers, but does not export routes learned from other providers or peers. A provider exports to a customer its routes, the routes learned from the other customers, its providers, and its peers. Peers export to each other their own routes and the routes learned from their customers but do not export the routes learned from their providers and other peers.</p><p>Consider the AS paths that are associated with the BGP announcements of the routes. If all the ASes adopted export policies according to the above model, then the AS paths would have a peculiar structure <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b1">[2]</ref>. Namely, (1) no AS path can contain more than one pair of ASes having a peerto-peer relationship; and (2) once a provider-customer or a peer-to-peer pair of ASes is met in the AS path, no customerprovider can be found in the remaining part of it.</p><p>Further, the above mentioned peculiarities of the AS paths have been formally stated in a theorem of <ref type="bibr" target="#b0">[1]</ref>, that has been also re-casted in <ref type="bibr" target="#b1">[2]</ref>. A graph-theoretic formulation of the same theorem will be given in what follows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Type-of-Relationship problem</head><p>The relationships between ASes in the Internet may be represented as a graph G whose edges are either directed or undirected. Each vertex is an AS, a directed edge from vertex u to vertex v indicates that u is a customer of v (providercustomer relationship), and an undirected edge between vertex w and vertex z indicates that w and z are peers (peer-topeer relationship). A BGP AS path corresponds to a path on G. Suppose path p is composed by the sequence of vertices v 1 , . . . , v n , then p is valid if it is of one of the following two types.</p><p>Type 1: p is composed by a (possibly empty) sequence of forward edges followed by a (possibly empty) sequence of backward edges; more formally, there exists a vertex v i of p such that for j ∈ 1, . . . , i -1 edge (v j , v j+1 ) is directed from v j to v j+1 and for j ∈ i, . . . , n -1 edge (v j , v j+1 ) is directed from v j+1 to v j . (See Figure <ref type="figure" target="#fig_0">1</ref>.a). Type 2: p is composed by a (possibly empty) sequence of forward edges, followed by an undirected edge, followed by a (possibly empty) sequence of backward edges; more formally, there exists a vertex v i of p such that for j ∈ 1, . . . , i -</p><formula xml:id="formula_0">1 edge (v j , v j+1 ) is di- rected from v j to v j+1 , edge (v i , v i+1</formula><p>) is undirected, and for j ∈ i+1, . . . , n-1 edge (v j , v j+1 ) is directed from v j+1 to v j . (See Figure <ref type="figure" target="#fig_0">1</ref>.b). See Figure <ref type="figure" target="#fig_0">1</ref> for examples of Type 1 and of Type 2 paths. An invalid path is a path that is not valid. At this point the above mentioned theorem <ref type="bibr" target="#b1">[2]</ref> can be restated as follows: if every AS obeys the customer, peer, and provider export policies, then every advertised path is either of Type 1 or of Type 2.</p><p>However, the Internet is more complex. To give a few examples: ASes operated by the same company can have a sibling relationship, where each AS exports all its routes to the other; two ASes may agree a backup relationship between them, to overcome possible failures; or ASes may have peering relationships through intermediate ASes. However, finding out which is the portion of Internet that obeys the customer, peer, and provider export policies can be considered as the first step toward a complete comprehension of the relationships between ASes. Such motivations have pushed the authors of <ref type="bibr" target="#b1">[2]</ref> toward identifying the following problem.</p><p>Type-of-Relationship (ToR) Problem <ref type="bibr" target="#b1">[2]</ref>: Given an undirected graph G and a set of paths P , give an orientation to some of the edges of G to minimize the number of invalid paths in P . Figure <ref type="figure" target="#fig_1">2</ref> shows an instance of the ToR problem for which an orientation without invalid paths cannot be found. In particular, each orientation of edge (AS701, AS5056) yields at least one invalid path. Suppose, in fact, that edge (AS701, AS5056) was directed from AS701 to AS5056. Path AS5056, AS701, AS4926, AS6461, AS2914, AS174, AS14318 (drawn solid in the figure) would be valid only if edge (AS4926, AS6461) was directed from AS6461 to AS4926. Similarly, path AS5056, AS701, AS6461, AS4926, AS4270, AS4387 (drawn dotted in the figure) would be valid only if edge (AS4926, AS6461) was directed from AS4926 to AS6461. Hence, we have a contradiction, since edge (AS4926, AS6461) should have opposite orientations. Now, suppose that edge (AS701, AS5056) was undirected. The same arguments apply, leading to the same contradiction. Finally, suppose that edge  (AS701, AS5056) was directed from AS5056 to AS701. It is easy to see that in this case we have a contradiction on the orientation of edge (AS1, AS1239). Figure <ref type="figure" target="#fig_2">3</ref> shows an instance of the ToR problem that admits an orientation without invalid paths. Figures <ref type="figure">4</ref> and<ref type="figure">5</ref>  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Simplifying the problem</head><p>The Type-of-Relationship Problem is a minimization problem. In order to studying it, following a standard technique <ref type="bibr" target="#b10">[11]</ref>, we consider its corresponding decision version as follows. ToR-D Problem: Given an undirected graph G, a set of paths P , and an integer k, test if it is possible to give an orientation to some of the edges of G so that the number of invalid paths in P is at most k. One of the ingredients that make the ToR-D problem difficult is the presence of both directed and undirected edges. Fortunately, the problem can be simplified by "ignoring" the undirected edges, without loosing its generality. Namely, the ToR-D problem admits a solution if and only if the following simpler problem admits one.</p><p>ToR-D-simple Problem: Given an undirected graph G, a set of paths P , and an integer k, test if it is possible to give an orientation to all the edges of G so that the number of invalid paths in P is at most k. Notice that the ToR-D-simple problem considers Type 1 paths only.</p><p>In fact, consider an orientation of the edges of G that is a solution for the ToR-D-simple problem. It is clear that the same orientation is also a solution for the ToR-D problem. Conversely, consider an orientation of some of the edges of G that is a solution for the ToR-D problem and let (u, v) be an edge of G that is undirected. Consider any path p of P through (u, v). Two cases are possible: either p is valid or p is invalid.</p><p>If p is valid (see Figure <ref type="figure" target="#fig_4">6</ref>), then it is a Type 2 path and all the edges of p preceding u are forward edges, while all the edges of p following v are backward edges. If (u, v) is arbitrarily oriented, then the only effect on p is of transforming it from Type 2 to Type 1. Hence, the number of invalid paths does not increase. If p is invalid and (u, v) is arbitrarily oriented either it becomes valid or it remains invalid. In this case the number of invalid paths does not increase. The same process can be repeated on all the undirected edges, until an orientation of G that is a solution for ToR-D-simple is found. To better understand the relation between the two problems, observe that the above consideration suggests that for each partial orientation of G that is a solution of ToR-D with n undirected edges there exist 2 n orientations that are a solution for ToR-D-simple.</p><p>Further, we can pick an orientation that is a solution for ToR-D-simple and consider it as a solution for ToR-D. Then, we can refine such a solution looking for edges whose orientation can be removed without increasing the number of anomaly paths. A necessary and sufficient condition, that is also easy to test, for removing the orientation of a single directed edge (u, v) is the following. Consider all the paths through (u, v) and all the edges following (u, v) in such paths. Edge (u, v) can be made undirected if such edges are all directed toward v.</p><p>The above discussion justifies a two steps approach where in the first step a solution is found for ToR-D-simple and in the second step peering edges are discovered.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. TESTING WHETHER AN AS GRAPH ADMITS A HIERARCHICAL STRUCTURE WITHOUT PATH ANOMALIES</head><p>In Section II we have seen that the problem of detecting the types of relationships between ASes can be tackled by studying the ToR problem, its decision version ToR-D, and a simpler problem called ToR-D-simple. The relations among such problems have also been discussed. In this section we show that problem ToR-D-simple (and, consequently, ToR-D) can be solved efficiently when k = 0, that is when we want to check if G admits an orientation where all the paths are valid (i.e., there are 0 invalid paths).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Path anomalies and boolean formulas</head><p>Observe that a path p on G composed by the sequence of vertices v 1 , . . . , v n is of Type 1 if and only if it does not exist a vertex v i (i = 2, . . . , n -1) of p such that the two edges of p incident on v i are directed away from v i . Hence, to impose that p is valid it suffices to rule out such a configuration. Based on this observation ToR-D-simple can be mapped to a 2SAT problem <ref type="bibr" target="#b10">[11]</ref>.</p><p>In the 2SAT problem you are given a set X of boolean variables and a formula in conjunctive normal form. Such a formula is composed by clauses of two literals, where a literal is a variable or a negated variable. You are asked to find a truth assignment for the boolean variables in X so that the formula is satisfied.</p><p>The mapping of ToR-D-simple to 2SAT is a two step process. First, all the edges of G are arbitrarily (for example randomly) oriented. Second, a boolean formula is constructed so to represent the constraints that each path imposes on the orientation of G in order to be a path of Type 1. The construction is performed as follows.</p><p>• For each directed edge (v i , v j ) of G a variable x i,j is introduced. A true value for x i,j means that, in the final orientation, (v i , v j ) will be directed from v i to v j (that is, the direction of the initial arbitrary orientation will be preserved), while a false value means that (v i , v j ) will be directed from v j to v i (that is, the direction of the initial arbitrary orientation will be reversed). • Consider a path p ∈ P and three consecutive vertices v i-1 , v i , v i+1 of p. Four cases are possible, according to the arbitrary orientations that we have given to the edges between v i-1 , v i , and v i+1 .</p><p>-Both edges are directed toward v i , i.e. such directed edges are</p><formula xml:id="formula_1">(v i-1 , v i ) and (v i+1 , v i ). We introduce clause x i-1,i ∨ x i+1,i . -Both edges are directed away from v i , i.e. such directed edges are (v i , v i-1 ) and (v i , v i+1 ). We in- troduce clause x i,i-1 ∨ x i,i+1</formula><p>. -One edge is directed toward v i and the other toward v i+1 , i.e. such directed edges are</p><formula xml:id="formula_2">(v i-1 , v i ) and (v i , v i+1 ). We introduce clause x i-1,i ∨ x i,i+1</formula><p>. -One edge is directed toward v i-1 and the other toward v i , i.e. such directed edges are (v i , v i-1 ) and (v i+1 , v i ). We introduce clause x i,i-1 ∨ x i+1,i . In this way we introduce n -2 clauses for each path of P with n vertices. We impose that all the constraints are simultaneously satisfied by considering the boolean "and" of all the clauses. Since each clause has two literals, we have mapped the ToR-D problem to a 2SAT formula.</p><p>As an example consider a path composed by five vertices v 1 , . . . , v 5 and suppose that the initial orientation step has </p><p>x 1,2 x 3,2 x 3,4 x 4,5 given to the edges of the path a direction as follows: (v 1 , v 2 ), (v 3 , v 2 ), (v 3 , v 4 ), and (v 4 , v 5 ). We have variables x 1,2 , x 3,2 , x 3,4 , and x 4,5 (see Figure <ref type="figure" target="#fig_5">7</ref>.a). Applying the above procedure we obtain the following 2SAT formula:</p><formula xml:id="formula_4">1 v 2 v 3 v 4 v v 5 x 1,2 x 3,2 x 4,5 x 3,4 x 3,2 x 3,4 1 v 2 v 3 v 4 v v 5 1,<label>2 3,2 3,4 4,5 x</label></formula><formula xml:id="formula_5">(x 1,2 ∨ x 3,2 ) ∧ (x 3,2 ∨ x 3,4 ) ∧ (x 3,4 ∨ x 4,5</formula><p>). Consider the truth assignment x 1,2 = true, x 3,2 = false, x 3,4 = false, and x 4,5 = false. It is easy to see that it satisfies the formula and that it corresponds to an orientation of the edges of the path toward vertex v 3 (see Figure <ref type="figure" target="#fig_5">7</ref>.b). On the other hand, consider the truth assignment x 1,2 = true, x 3,2 = false, x 3,4 = false, and x 4,5 = true. It is easy to see that it does not satisfy the formula and that it corresponds to an orientation of the edges of the path that is not consistent with Type 1 (see Figure <ref type="figure" target="#fig_5">7</ref>.c).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Computational aspects</head><p>Problem 2SAT may be efficiently solved by using the well known result in <ref type="bibr" target="#b11">[12]</ref> that maps 2SAT into a problem on a suitable directed graph G 2SAT . Observe that G and G 2SAT are different graphs.</p><p>Although this result is clearly illustrated in the literature, we give here a brief description of it, that will help the reader to better understand the algorithms described in Sections IV, and VI.</p><p>Graph G 2SAT has two nodes for each boolean variable x of 2SAT, corresponding to its two literals x and x. Further, for each clause of the form l 1 ∨ l 2 , where l 1 and l 2 are literals, the two directed edges (l 1 , l 2 ) and (l 2 , l 1 ) are introduced. Intuitively, edge (l 1 , l 2 ) represents the logical implication l 1 → l 2 , while edge (l 2 , l 1 ) represents l 2 → l 1 . Problem 2SAT admits a solution if and only if for no variable x there is a directed cycle in G 2SAT containing both x and x (i.e. a logical contradiction).</p><p>Testing, for each variable, if there exists a cycle containing its two literals can be quite time consuming. However, fortunately, the problem of testing for all the variables in 2SAT whether such a cycle exists in G 2SAT can be efficiently solved by computing <ref type="bibr" target="#b12">[13]</ref> the strongly connected components of G 2SAT and by testing for each variable if x and x are in the same strongly connected component. We recall that a strongly connected component of a directed graph is a maximal set of vertices such that for each pair u, v of vertices of the set there exists a directed path from u to v and vice versa. Computing the strongly connected components of a directed graph can be done in time linear in the size of the graph <ref type="bibr" target="#b12">[13]</ref>.</p><p>From a theoretical point of view, it comes out that ToR-Dsimple (and, as a consequence, ToR-D) with k = 0, i.e. the problem of deciding if a graph G of n vertices and m edges admits an orientation so that all the paths of a set P are valid, can be solved in O(n + m + q) time, where q is the sum of the lengths of the paths of P .</p><p>More practically, we have implemented the above algorithm by exploiting a facility from the Leda <ref type="bibr" target="#b13">[14]</ref> software library that efficiently computes the strongly connected component of a directed graph and that labels each vertex of the graph with an integer that identifies the component it belongs to. Hence, testing for a variable x if x and x are in the same strongly connected component is performed by testing whether they have the same label.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Experiments</head><p>This section illustrates the first group of experiments of this paper. Such experiments have the purpose of understanding if at least for partial views of the Internet graph the ToR problem admits a solution without invalid paths. This is important, in our opinion, at least for the following reason. Even if it is unlikely that the entire Internet AS graph could be classified in terms of customer-provider and peer-to-peer relationships without exceptions (and we will see evidence of this in the remainder of this paper), it is unclear if this is possible for what is visible from a specific observation point ("vantage point" in <ref type="bibr" target="#b1">[2]</ref>) of the network.</p><p>The test bed consists of BGP data sets obtained as follows. Each data set is extracted from the BGP routing table of a Looking Glass server. First, the output of the "show ip bgp" command is collected. Second, a file of AS paths is computed by discarding the prefix column and all the BGP attributes different from the AS path. Duplicate ASes arising from prepending <ref type="bibr" target="#b2">[3]</ref> are removed in each path. Note that duplicated paths may be present in the set.</p><p>There are many Looking Glass servers on the Internet and it is very difficult to say which are the most representative. In order to compare our work with previous results, we have chosen to use the collection of ten BGP data sets obtained from Telnet Looking Glass servers already adopted as a test bed in <ref type="bibr" target="#b1">[2]</ref>. Such test beds are periodically collected and publicly distributed by the authors <ref type="bibr" target="#b14">[15]</ref>.</p><p>For each data set we have constructed a different AS graph (a partial view of the global AS graph) by using only the adjacencies contained in the AS paths of the specific data set. Table <ref type="table" target="#tab_1">I</ref> shows the main features of the graphs constructed from the ten data sets. Note that values of Tables I and IV of <ref type="bibr" target="#b1">[2]</ref> and values computed from data available in <ref type="bibr" target="#b14">[15]</ref> (and that are presented in the aforementioned Table I of this paper) appear to be slightly different.</p><p>Table <ref type="table" target="#tab_2">II</ref> shows the results of the experiments. Observe that for all the partial views, but the one of the University of Oregon server <ref type="bibr" target="#b15">[16]</ref>, the ToR problem admits a solution without invalid paths. In fact, the server of the University of Oregon is not just a Looking Glass that gives a view of Internet from a specific point of observation, but it offers an integrated view obtained from 52 peering sessions with routers spread on 39 different ASes. This clearly indicates that integrating information from different points of view makes the problem much more difficult.</p><p>Figure <ref type="figure">8</ref> shows six rows extracted from the routing table of the U. of Oregon dated <ref type="bibr">Apr 18, 2001</ref>. Observe that the six paths are exactly those used in Figure <ref type="figure" target="#fig_1">2</ref> to give an example of an instance of the ToR problem that does not admit an orientation without invalid paths.</p><p>It is worth noting that we have conducted all the experiments on a PC Pentium III with 1 GB of RAM. Each of the above experiments required a few seconds of computation time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. COMPUTING THE AS RELATIONSHIPS</head><p>In Section III we have seen how problem ToR-D can be solved efficiently when k = 0, that is when we want to check if G admits an orientation where all the paths are valid (i.e., there are 0 invalid paths). We can do that solving a simpler problem, called ToR-D-simple.</p><p>In this section we deal with the problem of determining the relationships between ASes in the assumption that ToR-D admits a solution without anomalies. Essentially, this is a two steps process. In the first step an orientation that solves ToR-Dsimple is computed. In the second step peering relationships are discovered by examining the solution computed for ToR-D-simple.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Finding an orientation for ToR-D-simple</head><p>If a solution for ToR-D-simple exists, computing it is an easy task. Since we mapped ToR-D-simple to 2SAT, we can find a solution to ToR-D-simple by computing a truth assignment for the boolean variables of the corresponding 2SAT instance. A standard method <ref type="bibr" target="#b11">[12]</ref> for computing such assignment is the following. A function f (v) can be computed for all the vertices of the graph G 2SAT associated with 2SAT (see Section III-B) such that, for any two vertices u and v, if there exists a directed path from u to v, then f (u) ≤ f (v). A true value is assigned to variable x if f (x) &gt; f(x), a false value otherwise. The satisfiability of 2SAT guarantees that f (x) = f (x).</p><p>Function f can be efficiently computed by exploiting the decomposition of the graph into strongly connected components and by computing a special ordering, called topological sorting <ref type="bibr" target="#b13">[14]</ref>, on the directed acyclic graph of the components.</p><p>Of course, an instance of the problem ToR-D-simple may admit several different solutions. The structure of the problem constraints some variables to have the same truth values in all x' 1 x' 2</p><p>x" 2</p><p>x" 1</p><p>x' 3 x" 3</p><p>x' 4</p><p>x" 4 Fig. <ref type="figure">9</ref>. The instance of the ToR-D-simple problem corresponding to the instance (</p><formula xml:id="formula_6">x 1 ∨ x 2 ) ∧ (x 2 ∨ x 3 ) ∧ (x 2 ∨ x 4 ) ∧ (x 1 ∨ x 4 ) ∧ (x 3 ∨ x 4 ) of the MAX2SAT-D problem.</formula><p>edges of the graph with k invalid paths corresponds to an assignment of the boolean variables with k unsatisfied clauses.</p><p>Conversely, suppose to have an assignment for the boolean variables in X that leaves k clauses of the MAX2SAT-D instance unsatisfied. If variable x i is positive, direct edge (x i , x i ) toward x i , otherwise direct it toward x i . Each satisfied clause corresponds to a four vertex path whose first and last edge are not simultaneously directed toward its first and last vertices, respectively, and an orientation for the intermediate edge of the path can be easily found so that the path is valid. Thus, an assignment for the boolean variables that leaves k clauses of the MAX2SAT-D instance unsatisfied corresponds to an orientation of the ToR-D-simple problem with k invalid paths.</p><p>Since it can be shown that the ToR-D-simple problem belongs to the class NP (it is easy to count the invalid paths yielded by a given orientation), it follows that the ToR-Dsimple problem is NP-complete.</p><p>Observe that, although we used a reduction of the MAX2SAT-D problem to show the NP-hardness of the ToR-D-simple problem, an instance of the ToR-D-simple problem can not be always mapped to an instance of the MAX2SAT-D problem (for example, when two paths have one internal edge in common).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. HEURISTICS FOR COMPUTING THE AS RELATIONSHIPS</head><p>In Section V we have seen that the ToR-D problem is computationally hard and in Section III we have seen that, even if portions of Internet admit a hierarchical structure without anomalies, when the data set becomes large, such a "strong" structure does not exist (see, e.g., the AS 3582 in Table <ref type="table" target="#tab_2">II</ref>).</p><p>This section aims at giving a method for discovering the AS relationships in a big chunk of Internet with a small number of invalid paths. Observe that, even if heuristics are known for solving the MAX2SAT problem (see, e.g., <ref type="bibr" target="#b16">[17]</ref>), they cannot be straightforwardly applied to ToR-D. In fact, maximizing the number of satisfied clauses of the 2SAT formula does not necessarily imply maximizing the number of valid paths. Another approach would be to reduce ToR-D to a problem called Maximum Number of Satisfiable Formulas, where a collection of formulas in conjunctive normal form is given, and the target is to maximize the number of satisfied formulas. However, that problem has been shown to be not approximable in <ref type="bibr" target="#b17">[18]</ref> and we were not able to find in the literature effective and efficient heuristics for that problem.</p><p>As a reference data set, with the purpose of comparing our results with previous contributions, we consider the same portion of Internet taken into account in <ref type="bibr" target="#b1">[2]</ref>. Namely, we consider the union of all the paths of the Telnet Looking Glasses of Table <ref type="table" target="#tab_1">I</ref> (version of <ref type="bibr">Apr 18, 2001)</ref>. The total number of paths of the data set is 3, 423, 460, involving 10, 916 ASes. The graph of the adjacencies between ASes contains 23, 761 edges. We measure the effectiveness of our heuristics against such quite large data set.</p><p>The target of the proposed heuristics is the computation of a maximal set of paths (subset of the given set of paths) such that ToR-D with k = 0 admits a solution. A set of paths is maximal if no path can be added to the set without introducing anomalies.</p><p>A simple strategy for computing a maximal set of paths is the following. Starting from the empty set, add all the paths one-by-one, each time testing if the set admits an orientation without anomalies. The test can be performed in linear time by exploiting the algorithm presented in Section III. If the insertion of a path makes the set not orientable, then it is discarded, otherwise it is added to the set. At the end of the process we have a maximal set of paths. However, this simple strategy is unfeasible. In fact we would have to run the testing algorithm millions of times. Even if each run takes one second, we could wait a couple of weeks to have the maximal set.</p><p>Motivated by the above discussion, we propose a two steps approach. First, we compute a very large (albeit not maximal) set of valid paths with an ad-hoc technique. Second, we check if the discarded paths can be reinserted with the method described above.</p><p>The computation of the initial very large set of valid paths is performed as follows. Initialize P with the set of all the paths.</p><p>1) Construct the G 2SAT graph considering all the adjacencies of P . 2) Set-up the following data structure: for each undirected edge (v i , v j ) of the AS adjacency graph keep the number of paths traversing (v i , v j ); call it covering of (v i , v j ). 3) Compute the strongly connected components of G 2SAT (e.g., with the algorithm in <ref type="bibr" target="#b12">[13]</ref>). 4) Identify each variable x such that x and x are in the same strongly connected component of G 2SAT .</p><p>5) Select among those variables the variable x i,j whose corresponding edge (v i , v j ) has the smallest covering and remove all the paths that cover such an edge from P . Execute steps (1) through <ref type="bibr" target="#b4">(5)</ref> until no strongly connected component contains both the literals of the same variable.</p><p>Observe that at each iteration, since we remove all the paths traversing a specific edge of the AS graph, the literals associated with such an edge disappear from G 2SAT .</p><p>In our data set the starting G 2SAT graph contains 47, 522 nodes and 375, 100 edges. It contains one strongly connected component with 2, 156 literals and 12, 570 edges. The other components contain just one literal. The set of valid paths computed during the first step contains 3, 423, 460 paths. During the second step 222, 764 paths have been re-inserted without causing anomalies. The final maximal set of paths contains 3, 399, 389 paths.</p><p>After computing a maximal set of paths we have computed an orientation for the edges of the AS graph obtained from those paths, using the technique illustrated in Section IV. A fragment of the computed orientation has been used already in this paper for the example of Figures <ref type="figure">4</ref> and<ref type="figure">5</ref>. Further, following the experimental guideline of <ref type="bibr" target="#b1">[2]</ref> we have done two types of checks of the quality of such orientation:</p><p>1) We checked how many paths of the original ten data sets are valid and the percentage of invalid paths. 2) We checked how good is the computed orientation against four additional data sets that were not input of the heuristic algorithm. Such extra group of data sets is, again, available from <ref type="bibr" target="#b14">[15]</ref> and contains data from AS1755, AS2516, AS2548, and AS6893. Table <ref type="table" target="#tab_2">III</ref> shows that the heuristics described above leaves a very small percentage of invalid paths. In particular, it performs significantly better, in terms of invalid paths, than the cutting edge heuristics of <ref type="bibr" target="#b1">[2]</ref>. The invalid paths are about halved for ASes 1, 1755, and 2516, are about one third for AS 7018, and are one fourth or less for ASes 2548 and 6893. These results are, in our opinion, even stronger if we consider that the percentages of anomalies provided by <ref type="bibr" target="#b1">[2]</ref> do not count as invalid Type 2 paths containing two consecutive undirected edges instead of one <ref type="bibr" target="#b18">[19]</ref>. The basis of such relaxation of the model is that two ASes may have an "indirect peering", that is a peer-to-peer relationship through an intermediate one.</p><p>Using the condition discussed in Section II-B we have also found edges that can be made undirected still preserving the quality of the solution and have found 3, 936 edges that can be considered as candidates for being peering edges.</p><p>It is worth noting that we have conducted all the experiments with the same platform described in Section III. The above experiment, involving 3, 423, 460 paths, required a computation time of about 10 hours.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VII. CONCLUSIONS AND OPEN PROBLEMS</head><p>In this paper we introduced a novel approach for computing the relationships between Autonomous Systems starting from a set of AS paths, so that the number of invalid paths is kept small. Also, we proved that the corresponding minimization problem is NP-complete in the general case (as conjectured in <ref type="bibr" target="#b1">[2]</ref>).</p><p>Our approach consists of mapping the problem into a 2SAT formulation, which can be exploited in several ways. For example, a solution for the 2SAT formulation can be found in linear time, if it exists, determining a solution to the original problem without invalid paths. Also, we take advantage of the theoretical insight gained with the 2SAT formulation to conceive new heuristics for the general case which we experimentally prove to be more effective than previously presented approaches.</p><p>Further details on the experiments, the used source code, and the data sets are available from the Website http://www.dia.uniroma3.it/∼compunet and in <ref type="bibr" target="#b19">[20]</ref>.</p><p>The classification of AS relationships in the Internet is a hot research topic. Its relevance is confirmed by the interest of other research groups on the same subject. In <ref type="bibr" target="#b20">[21]</ref> analogous and independently discovered results concerning the time complexity of the general problem and the linearity in the case of all valid paths are shown. However, while such work puts more emphasys on the approximability of the problem, we focus more on the engineering and the experimentation of an effective heuristic approach.</p><p>Several problems remain open. We think it is interesting to understand why the portion of the Internet seen from a single observation point is very often orientable without invalid paths. Is that a matter of size or there is a more subtle property that can be formally studied? Also, the recognition of AS relationships can probably take advantage of further information provided by the BGP routing tables, for example, the size of the prefixes. Can this lead to a prefix-driven formulation of the problem instead of the as-path driven formulation adopted until now? Further, it could be interesting to improve existing tools for the visualization of the AS graph (see, e.g., <ref type="bibr" target="#b21">[22]</ref>) in order to provide information about the relationships between ASes.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. An example of Type 1 (a) and of Type 2 (b) path.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. An instance of the ToR problem that does not admit an orientation without invalid paths. The six paths of the instance are represented with different line styles.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. An instance of the ToR problem that admits an orientation without invalid paths. The four paths of the instance are represented with different line styles.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .Fig. 5 .</head><label>45</label><figDesc>Fig. 4. An orientation for the graph of Figure 3. Note that all the paths are valid.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. An undirected edge (u, v) of a solution of the ToR-D problem. The two paths traversing (u, v) are represented one with a solid line and the other with a dot-dashed line. Both paths are valid.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. (a) An initial orientation for a five vertices path and the boolean variables associated with its edges. The orientation shown in (b), which makes the path valid, corresponds to the truth assignment x 1,2 = true, x 3,2 = false, x 3,4 = false, and x 4,5 = false, which satisfies formula (x 1,2 ∨ x 3,2 )∧(x 3,2 ∨x 3,4 )∧(x 3,4 ∨x 4,5 ) associated with the path. Conversely, the orientation shown in (c), which makes the path invalid, corresponds to the truth assignment x 1,2 = true, x 3,2 = false, x 3,4 = false, and x 4,5 = true, which does not satisfy the formula.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>TABLE I TELNET</head><label>I</label><figDesc>LOOKING GLASS SERVERS AND CORRESPONDING AS GRAPHS.</figDesc><table><row><cell>AS #</cell><cell>AS Name</cell><cell cols="2">Apr 18, 2001</cell><cell></cell><cell></cell><cell>Apr 6, 2002</cell><cell></cell></row><row><cell></cell><cell></cell><cell># Vertices</cell><cell># Edges</cell><cell># Paths</cell><cell># Vertices</cell><cell># Edges</cell><cell># Paths</cell></row><row><cell>1</cell><cell>Genuity</cell><cell>10,203</cell><cell>13,001</cell><cell>58,156</cell><cell>12,700</cell><cell>15,946</cell><cell>63,744</cell></row><row><cell>1740</cell><cell>CERFnet</cell><cell>10,007</cell><cell>13,416</cell><cell>70,830</cell><cell cols="2">not available</cell><cell></cell></row><row><cell>3549</cell><cell>Globalcrossing</cell><cell>10,288</cell><cell>13,039</cell><cell>60,409</cell><cell>12,533</cell><cell>16,025</cell><cell>76,572</cell></row><row><cell>3582</cell><cell>U. of Oregon</cell><cell>10,826</cell><cell>22,440</cell><cell>2,584,230</cell><cell>13,055</cell><cell>27,277</cell><cell>4,600,981</cell></row><row><cell>3967</cell><cell>Exodus Comm.</cell><cell>10,387</cell><cell>18,401</cell><cell>254,123</cell><cell>12,616</cell><cell>21,527</cell><cell>339,023</cell></row><row><cell>4197</cell><cell>Global Online Japan</cell><cell>10,288</cell><cell>13,004</cell><cell>55,060</cell><cell>12,518</cell><cell>15,628</cell><cell>59,745</cell></row><row><cell>5388</cell><cell>Energis Squared</cell><cell>10,411</cell><cell>13,259</cell><cell>58,832</cell><cell>12,659</cell><cell>16,822</cell><cell>117,003</cell></row><row><cell>7018</cell><cell>AT&amp;T</cell><cell>9,252</cell><cell>12,117</cell><cell>120,283</cell><cell>11,706</cell><cell>15,429</cell><cell>170,325</cell></row><row><cell>8220</cell><cell>COLT Internet</cell><cell>8,376</cell><cell>10,932</cell><cell>46,606</cell><cell>12,660</cell><cell>18,421</cell><cell>154,855</cell></row><row><cell>8709</cell><cell>Exodus, Europe</cell><cell>10,333</cell><cell>15,006</cell><cell>114,931</cell><cell>12,555</cell><cell>18,175</cell><cell>126,370</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>TABLE II TESTING</head><label>II</label><figDesc>IF THE TOR PROBLEM HAS A SOLUTION WITHOUT INVALID PATHS FOR SEVERAL BGP ROUTING TABLES.</figDesc><table><row><cell>AS #</cell><cell>AS Name</cell><cell cols="2">Orientable w/o anomalies</cell></row><row><cell></cell><cell></cell><cell>Apr 18, 2001</cell><cell>Apr 6, 2002</cell></row><row><cell>1</cell><cell>Genuity</cell><cell>yes</cell><cell>yes</cell></row><row><cell>1740</cell><cell>CERFnet</cell><cell>yes</cell><cell>not available</cell></row><row><cell>3549</cell><cell>Globalcrossing</cell><cell>yes</cell><cell>yes</cell></row><row><cell>3582</cell><cell>U. of Oregon</cell><cell>no</cell><cell>no</cell></row><row><cell>3967</cell><cell>Exodus Comm.</cell><cell>yes</cell><cell>yes</cell></row><row><cell>4197</cell><cell>Global Online J.</cell><cell>yes</cell><cell>yes</cell></row><row><cell>5388</cell><cell>Energis Squared</cell><cell>yes</cell><cell>yes</cell></row><row><cell>7018</cell><cell>AT&amp;T</cell><cell>yes</cell><cell>yes</cell></row><row><cell>8220</cell><cell>COLT Internet</cell><cell>yes</cell><cell>yes</cell></row><row><cell>8709</cell><cell>Exodus, Europe</cell><cell>yes</cell><cell>yes</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>We are grateful to the authors of <ref type="bibr" target="#b1">[2]</ref> for their help. Also, we would like to thank Andrea Vitaletti and Debora Donato for interesting conversations.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>the solutions, while other variables may assume any true/false assignment. Coming back to problem ToR-D-simple, this means that some edges have a constrained customer-provider orientation, while others may assume different orientations. Interestingly, the proposed approach permits to "explore" the solutions space. Namely, if some knowledge is available on the customer-provider relationships between ASes, it is easy to force the solution to respect such constraints. For example, suppose to know in advance that AS v i is a customer of AS v j and suppose that in the initial arbitrary orientation edge (v i , v j ) is directed from v i to v j . We can impose that the solution respects the constraint by adding to the 2SAT formula associated with Problem ToR-D-simple the clause (x i,j ∨x i,j ). Of course, adding constraints to the problem decreases the size of the solution space and may lead to unsatisfiable instances.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Discovering the peering relationships</head><p>A solution for the ToR-D-simple problem provides an orientation for all the edges of the AS graph (customer-provider relationships). However, as described in Section II-B, it is possible to refine the obtained solution reintroducing peering relationships. In such a section a sufficient condition has been given for modifying a directed edge into an undirected edge still having a solution for ToR-D.</p><p>Several different criteria can be adopted to measure the quality of a solution once peerings are reintroduced. For example, one could say that a solution is especially interesting if many peering have been discovered. Unfortunately, it can be shown that, given a solution for a ToR-D-simple instance, i.e., with no peerings, the problem of producing a solution for the corresponding ToR-D instance that maximizes the number of the peering edges is a hard one.</p><p>We prove it using a reduction from the INDEPENDENT-SET problem, in which you are given a graph with nodes in N and arcs in A and you are asked to find a subset of the nodes of size k such that no two nodes of the subset are adjacent. To build the instance of the ToR-D-simple problem corresponding to the instance of the INDEPENDENT-SET problem we introduce an edge (v i , v top ) for each node n i ∈ N and we introduce a path v i , v top , v j for each arc (n i , n j ) ∈ A. The edges of the ToR-D-simple instance can be directed toward vertex v top in order to have a solution with no invalid path. It can be easily shown that the problem of reintroducing k peering edges without increasing the number of invalid paths is equivalent to the problem of finding an independent set of size k. We omit the details of the proof for the sake of brevity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. THE DIFFICULTY OF MINIMIZING PATH ANOMALIES</head><p>The ToR problem was conjectured to be NP-complete in <ref type="bibr" target="#b1">[2]</ref>. In Section III we have shown that finding a solution with zero invalid path (provided that it exists) is a tractable problem. In this section we show that the ToR problem is NP-complete in the general case, that is, when it does not admit an orientation without invalid paths. In order to prove that the ToR problem is NP-hard we reduce the NP-complete problem MAX2SAT to it.</p><p>In the remaining part of this section, following a standard technique when dealing with optimization problems <ref type="bibr" target="#b10">[11]</ref>, we refer to their decision versions. For ToR we already defined in Section II the ToR-D and ToR-D-simple problems (we will use the latter one). As for MAX2SAT, its decision version of MAX2SAT-D can be defined as follows. You are given a set X of boolean variables and a collection C of disjunctive clauses, each one of 2 literals, where a literal is a variable or a negated variable. You are asked to find a truth assignment for the boolean variables in X so that the number of unsatisfied clauses of C is at most k, where k is a positive integer.</p><p>Given an instance of the MAX2SAT-D problem, we will produce an instance of the ToR-D-simple problem, such that an orientation with k invalid paths exists iff an assignment with k unsatisfied clauses of MAX2SAT-D can be found. For each variable x i ∈ X we introduce two vertices x i and x i . For each clause l 1 ∨ l 2 we introduce a path of four vertices as follows. If l 1 is the negated literal of variable x i , then the first two vertices of the path will be x i and x i , otherwise they will be x i and x i . Similarly, if l 2 is the negated literal of variable x j , then the last two vertices of the path will be x j and x j , otherwise they will be x j and x j . Figure <ref type="figure">9</ref> shows an example of an instance of the MAX2SAT-D problem and the corresponding instance of the ToR-Dsimple problem.</p><p>Given an orientation for the edges of the graph, if edge (x i , x i ) is directed from x i to x i , then we associate a true value with the corresponding boolean variable x i , otherwise we associate a false value. Observe that, given an orientation for the edges of the graph, if the first edge of the four-vertex path is directed toward the first vertex of the path, then the first literal of the corresponding clause is false. Analogously, if the last edge of the path is directed toward the last vertex of the path, then the second literal of the clause is false.</p><p>If a path is valid, then its first and its last edges are not simultaneously directed toward the first vertex and the last vertex, respectively. It follows that, if a path is valid, the corresponding clause is satisfied. Thus, an orientation for the</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">On inferring autonomous system relationships in the internet</title>
		<author>
			<persName><forename type="first">L</forename><surname>Gao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Transactions on Networking</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="733" to="745" />
			<date type="published" when="2001-12">Dec 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Characterizing the internet hierarchy from multiple vantage points</title>
		<author>
			<persName><forename type="first">L</forename><surname>Subramanian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Katz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE INFOCOM</title>
		<meeting>IEEE INFOCOM</meeting>
		<imprint>
			<date type="published" when="2002">2002. 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Inter-Domain Routing in the Internet</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">W</forename><surname>Stewart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BGP</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<date type="published" when="1999">1999</date>
			<publisher>Addison-Wesley</publisher>
			<pubPlace>Reading, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Scalable router configuration for the internet</title>
		<author>
			<persName><forename type="first">C</forename><surname>Alaettinoglu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE IC3N</title>
		<meeting>IEEE IC3N</meeting>
		<imprint>
			<date type="published" when="1996-10">October 1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Interconnection, peering, and settlements</title>
		<author>
			<persName><forename type="first">G</forename><surname>Huston</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. INET</title>
		<meeting>INET</meeting>
		<imprint>
			<date type="published" when="1999-06">June 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">An analysis of internet inter-domain topology and route stability</title>
		<author>
			<persName><forename type="first">R</forename><surname>Govindan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Reddy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE INFOCOM 1997</title>
		<meeting>IEEE INFOCOM 1997</meeting>
		<imprint>
			<date type="published" when="1997-04">April 1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Heuristics for internet map discovery</title>
		<author>
			<persName><forename type="first">R</forename><surname>Govindan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Tangmunarunkit</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE INFOCOM 2000</title>
		<meeting>IEEE INFOCOM 2000</meeting>
		<imprint>
			<date type="published" when="2000-03">March 2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Dynamic distance maps of the internet</title>
		<author>
			<persName><forename type="first">W</forename><surname>Theilmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Rothermel</surname></persName>
		</author>
		<idno>nec.com/theilmann00dynamic.html</idno>
	</analytic>
	<monogr>
		<title level="m">IEEE INFOCOM 2000</title>
		<meeting><address><addrLine>Tel-Aviv, Israel</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2000-03">March 2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">On the hierarchical structure of the logical internet graph</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Ge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">R</forename><surname>Figueiredo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Jaiswal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Gao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SPIE ITCom</title>
		<meeting>SPIE ITCom</meeting>
		<imprint>
			<date type="published" when="2001">2001. 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Inherently safe backup routing with BGP</title>
		<author>
			<persName><forename type="first">L</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">G</forename><surname>Griffin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE INFOCOM</title>
		<imprint>
			<date type="published" when="2001-04">2001. Apr 2001</date>
			<biblScope unit="page" from="547" to="556" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Computers and Intractability: A Guide to the Theory of NP-Completeness</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">R</forename><surname>Garey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Johnson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1979">1979</date>
			<publisher>W. H. Freeman</publisher>
			<pubPlace>New York, NY</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A linear-time algorithm for testing the truth of certain quantified boolean formulas</title>
		<author>
			<persName><forename type="first">B</forename><surname>Aspvall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Plass</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">E</forename><surname>Tarjan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information Processing Letters</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="121" to="123" />
			<date type="published" when="1979">1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Data Structures and Algorithms</title>
		<author>
			<persName><forename type="first">K</forename><surname>Mehlhorn</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1984">1984</date>
			<publisher>Springer Publishing Company</publisher>
			<biblScope unit="page" from="1" to="3" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">LEDA: A Platform for Combinatorial and Geometric Computing</title>
		<author>
			<persName><forename type="first">K</forename><surname>Mehlhorn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Näher</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999">1999</date>
			<publisher>Cambridge University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Characterizing the internet hierarchy from multiple vantage points</title>
		<ptr target="http://www.cs.berkeley.edu/∼sagarwal/research/BGP-hierarchy/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">University of Oregon RouteViews project</title>
		<ptr target="http://www.routeviews.org" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Approximating the value of two prover proof systems, with applications to max 2sat and max dicut</title>
		<author>
			<persName><forename type="first">U</forename><surname>Feige</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Goemans</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of 3rd Israel Symposium on the Theory of Computing and Systems</title>
		<meeting>of 3rd Israel Symposium on the Theory of Computing and Systems</meeting>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="182" to="189" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">On the approximability of NP-complete optimization problems</title>
		<author>
			<persName><forename type="first">V</forename><surname>Kann</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992">1992</date>
			<pubPlace>Stockholm</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Department of Numerical Analysis and Computing Science, Royal Institute of Technology</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. dissertation</note>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">L</forename><surname>Subramanian</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>personal communication</note>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Computing the types of the relationships between autonomous systems</title>
		<author>
			<persName><forename type="first">G</forename><surname>Di Battista</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Patrignani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Pizzonia</surname></persName>
		</author>
		<idno>RT-DIA-73-2002</idno>
		<imprint>
			<date type="published" when="2002-07">July 2002</date>
		</imprint>
		<respStmt>
			<orgName>Università di Roma Tre</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
	<note>Dipartimento di Informatica e Automazione</note>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Classifying customer-provider relationships in the internet</title>
		<author>
			<persName><forename type="first">T</forename><surname>Erlebach</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Hall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Schank</surname></persName>
		</author>
		<idno>TIK-145</idno>
		<imprint>
			<date type="published" when="2002-07">July 2002</date>
			<publisher>ETH Zurich</publisher>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Visualization of the high level structure of the internet with hermes</title>
		<author>
			<persName><forename type="first">A</forename><surname>Carmignani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Di Battista</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Didimo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Matera</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Pizzonia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. of Graph Algorithms and Applications</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="281" to="311" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
