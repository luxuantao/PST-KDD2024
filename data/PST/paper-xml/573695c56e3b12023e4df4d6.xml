<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Monkey King Evolution: A new memetic evolutionary algorithm and its application in vehicle fuel consumption optimization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Zhenyu</forename><surname>Meng</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Department of Computer Science</orgName>
								<orgName type="department" key="dep2">Shenzhen Graduate School</orgName>
								<orgName type="institution">Harbin Institute of Technology</orgName>
								<address>
									<settlement>Shenzhen</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Jeng-Shyang</forename><surname>Pan</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Department of Computer Science</orgName>
								<orgName type="department" key="dep2">Shenzhen Graduate School</orgName>
								<orgName type="institution">Harbin Institute of Technology</orgName>
								<address>
									<settlement>Shenzhen</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">College of Information Science and Engineering</orgName>
								<orgName type="institution">Fujian University of Technology</orgName>
								<address>
									<settlement>Fuzhou</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Monkey King Evolution: A new memetic evolutionary algorithm and its application in vehicle fuel consumption optimization</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">F6F82AF5BDFC9B47E811555E8243C1E5</idno>
					<idno type="DOI">10.1016/j.knosys.2016.01.009</idno>
					<note type="submission">Received 14 July 2015 Revised 7 December 2015 Accepted 8 January 2016</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T06:24+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>Benchmark function Fuel consumption Monkey King Evolutionary Algorithm Number of function evaluation Particle swarm variants Vehicle navigation</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Optimization algorithms are proposed to tackle different complex problems in different areas. In this paper, we firstly put forward a new memetic evolutionary algorithm, named Monkey King Evolutionary (MKE) Algorithm, for global optimization. Then we make a deep analysis of three update schemes for the proposed algorithm. Finally we give an application of this algorithm to solve least gasoline consumption optimization (find the least gasoline consumption path) for vehicle navigation. Although there are many simple and applicable optimization algorithms, such as particle swarm optimization variants (including the canonical PSO, Inertia Weighted PSO, Constriction Coefficients PSO, Fully Informed Particle Swarm, Comprehensive Learning Particle Swarm Optimization, Dynamic Neighborhood Learning Particle Swarm). These algorithms are less powerful than the proposed algorithm in this paper. 28 benchmark functions from BBOB2009 and CEC2013 are used for the validation of robustness and accuracy. Comparison results show that our algorithm outperforms particle swarm optimizer variants not only on robustness and optimization accuracy, but also on convergence speed. Benchmark functions of CEC2008 for large scale optimization are also used to test the large scale optimization characteristic of the proposed algorithm, and it also outperforms others. Finally, we use this algorithm to find the least gasoline consumption path in vehicle navigation, and conducted experiments show that the proposed algorithm outperforms A * algorithm and Dijkstra algorithm as well.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Optimization algorithms in evolutionary computation are equipped with a meta-heuristic or stochastic optimization or memetic optimization character, and they belong to the family of trial and error problem solvers and distinguished by the use of a population of candidate solutions. Particles of these algorithms have two main character components, one is exploitation, and the other exploration. Particle Swarm Optimization (PSO) is a powerful evolutionary computational algorithm introduced by Kennedy and Eberhart in <ref type="bibr" target="#b0">[1]</ref>. The canonical PSO does not use cross over and mutation operations, and particles in the population produce the next generation by learning from their history best and global best of the population experience. The moving velocity is used to make a balance between the exploitation and exploration of a particle.</p><p>As the PSO algorithm is simple, easy to implement and it also has been empirically performed well on many optimization problems since its inception, many researches have learned about the technique and proposed many variants, or new versions of PSO. <ref type="bibr" target="#b1">[2]</ref> proposed a new optimizer using particle swarm theory, and examined how the changes in the paradigm affected the number of iteration required to meet an error criterion. <ref type="bibr" target="#b2">[3]</ref> presented a modified particle swarm optimizer with an inertia weight of particle velocity, a 2-dimension 4000-iteration conducted experiment showed that the smaller inertia weight made it converged fast if PSO could find the global optimum. When the inertia weight was small, PSO paid more attention on exploitation and when the inertia weight was larger, PSO paid more on exploration. Moderate value of weight made PSO had the best chance to find the global optimum with a moderate number of iteration. Empirically, inertia weight was set as a decreasing function of iteration instead of a fixed constant. Eberhart and Shi <ref type="bibr" target="#b3">[4]</ref> made a comparison between inertia weights and constriction factors in particle swarm optimization, and the experiments showed that constriction coefficient k = 0.7298 and the constant c 1 = c 2 = 2.05 was a good choice <ref type="bibr" target="#b4">[5]</ref>. PSO trajectories and topologies had been deeply analyzed for the importance of the convergence. Kennedy <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b6">7]</ref> claimed that PSO with a small neighborhood might perform better on complex problems, while PSO with a large neighborhood would perform better on simple problems. Suganthan <ref type="bibr" target="#b7">[8]</ref> proposed a neighbor operator particle swarm optimization, and the operator calculated the particles distance and particles learned from the neighborhood. Mendes et al. <ref type="bibr" target="#b8">[9]</ref> proposed a fully informed particle swarm, valuable information was gained from the particle neighbor and the convergence speed improved by this variant of particle swarm optimization. Mendes <ref type="bibr" target="#b9">[10]</ref> gave a deep analysis on population topologies and their influence in particle swarm performance in his doctoral thesis. Other variants such as dynamic multi-swarm optimizer <ref type="bibr" target="#b10">[11]</ref> and optimizer proposed in <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b12">13]</ref> performed better to solve shifted-rotated benchmark functions, multi-optimization problems and multi-modal functions respectively. There are also all kinds of applications using PSO to tackle different tasks in different fields. Ref. <ref type="bibr" target="#b13">[14]</ref> is an application of optimization traffic lights program with PSO, <ref type="bibr" target="#b14">[15]</ref> shows an application to tackle complex network clustering by multi-objective discrete particle swarm optimization, and <ref type="bibr" target="#b15">[16]</ref> proposed a binary particle swarm optimization algorithm for optimizing the echo state network.</p><p>There are more and more optimization algorithms proposed to tackle specific tough problems, and PSO is a popular one with developing variants from its inception in 1995. PSO variants proposed in recent years for specific problem optimization are much more complicated with huge time consumption than the canonical one, but the optimization results are not so satisfying either on optimization accuracy or on convergence speed. A property that is appealing than just being able to convergence to the optimum when elapsed time approaches infinity, is to guarantee that a good solution can be found with a low number of function evaluations <ref type="bibr" target="#b9">[10]</ref>. Simple optimization algorithms with powerful capacity and robust <ref type="bibr" target="#b16">[17]</ref> are much popular both for academic researches and engineers. So in this paper, we proposed the MKE algorithm, which has a better convergence speed and convergence accuracy with the similar time complexity in comparison with variants of PSO.</p><p>With the development of industry technology, there are more and more cars driving on the road. Traffic navigation becomes a hot topic for city governors and researchers. Different approaches have been advanced to tackle congestion and traffic emergency, which aim for better performance of the traffic networks. The desires of different roles in the traffic networks are different. City governors often emphasize on the output of the total networks, while some of the single drivers pay more attention to least travel time or travel distance and most of them pay attention to least fuel expense. As we know that large fuel consumption occurs when cars are in traffic jams, and how to make a navigation while avoiding congestion in the traffic networks not only achieve good output of the total traffic networks, but also save the drivers' money, and this is an optimization problem. Ref. <ref type="bibr" target="#b17">[18]</ref> shows some evolutionary thoughts to tackle vehicle routing problem using a different model of a static network. In this paper we advance models and fitness functions of the traveling fuel consumption for a path in vehicle navigation. The conducted experiments show that our method outperforms A * <ref type="bibr" target="#b18">[19]</ref> and Dijkstra <ref type="bibr" target="#b19">[20]</ref> in finding the least fuel consumption path of the real-time navigation. The main contributions of the paper include:</p><p>1. A new memetic evolutionary algorithm is advanced for global optimization and it outperforms state-of-the-art PSO variants not only on the robustness and accuracy but also on the convergence speed (Test on BBoB2009 <ref type="bibr" target="#b20">[21]</ref> and CEC2013 <ref type="bibr" target="#b21">[22]</ref> benchmark functions on real parameter optimization). 2. The proposed algorithm has a large scale optimization property that can be well used to tackle large scale optimization problems and it can be easily paralleled on distributed computing systems to boost the calculation speed (Test on CEC2008 <ref type="bibr" target="#b22">[23]</ref> benchmark functions on large scale optimization). The rest of the paper is organized as follows, Section 2 presents the related works. Section 3 presents the detailed algorithm of Monkey King Evolution. Section 4 presents the navigation model and fuel consumption fitness function. Section 5 gives a comparative view and analysis and Section 6 shows the final conclusion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Related works</head><p>Considerable developments have occurred since the inception of canonical PSO <ref type="bibr" target="#b0">[1]</ref>. The canonical PSO is based on swarm intelligence and was inspired by the seeking food behavior of a flock of birds. Individual bird is only influenced by its historical best and the global best of the population, and the evolution equation is shown in Eq. ( <ref type="formula" target="#formula_0">1</ref>). The canonical PSO is simple and easy to implement, but the convergence is not good enough or even rather bad to complicated problems.</p><formula xml:id="formula_0">V t+1 i ← V t i + c 1 * (X t f b -X t i ) + c 2 * (X t gb -X t i ); X t+1 i ← X t i + V t+1 i ;<label>(1)</label></formula><p>In order to accelerate the convergence speed of the canonical PSO, an inertial weighted PSO <ref type="bibr" target="#b2">[3]</ref> was proposed with the evolution equation shown in Eq. ( <ref type="formula" target="#formula_1">2</ref>). Almost all the PSO variants like constraint coefficient PSO (Eq. ( <ref type="formula" target="#formula_2">3</ref>)), FIPS (Eq. ( <ref type="formula">4</ref>)), Comprehensive Learning PSO <ref type="bibr" target="#b11">[12]</ref> (CLPSO, learning form personal best and others' best), Cooperative PSO <ref type="bibr" target="#b23">[24]</ref> (CPSO, decomposing dimension vector as multiple swarm), Dynamic Neighborhood Learning PSO <ref type="bibr" target="#b12">[13]</ref> (dynamic neighborhood topology enabled exploration) use particle topology/relationship for evolution, we can also get the topology perception from Eqs. ( <ref type="formula" target="#formula_0">1</ref>)- <ref type="bibr" target="#b3">(4)</ref>.</p><formula xml:id="formula_1">v t+1 i ← ω * v t i + c 1 * (X t f b -X t i ) + c 2 * (X t gb -X t i ); X t+1 i ← X t i + v t+1 i ;<label>(2)</label></formula><formula xml:id="formula_2">v t+1 i ← χ * (v t i + ϕ 1 * (X f b -X t i ) + ϕ 2 * (X gb -X t i )); X t+1 i ← X t i + v t+1 i ;<label>(3)</label></formula><formula xml:id="formula_3">⎧ ⎪ ⎪ ⎪ ⎪ ⎨ ⎪ ⎪ ⎪ ⎪ ⎩ v(t + 1) = χ * (v(t) + ϕ * (p m -x(t ))) x(t + 1) = x(t ) + v(t + 1) ϕ k = U[0, ϕ max |N| ], ∀k ∈ N p m = k∈N ω(k)ϕ k ⊗ p m k∈N ω(k)ϕ k (4)</formula><p>Topology/relationship plays a very important role in the performance of a PSO variant, and proposed topologies up to date still do not make the full exploration of the search region. Some of the algorithms (CPSO, SLPSO) mentioned above need extra computation expense. For example, the computation time complexity of CPSO is about D (D is the dimension number) times larger than PSO, IW-PSO, CCPSO, FIPS, CLPSO, and DNLPSO, and the performance of it does not improved significantly. Moreover, the PSO variants also have a fatal weakness that the performance does not improve with the increase of population size, so is the weakness of these algorithms for parallel computing. For traffic navigation, Wireless Sensor Networks (WSNs) consisting a number of sensor nodes are used to monitoring a local area and getting the traffic information with little infrastructure <ref type="bibr" target="#b24">[25]</ref>. There are often two different types of the structure, one Please cite this article as: Z. Meng, J.-S. Pan, Monkey King Evolution: A new memetic evolutionary algorithm and its application in vehicle fuel consumption optimization, Knowledge-Based Systems (2016), http://dx.doi.org/10.1016/j.knosys.2016.01.009 is unstructured and the other is structured one. The unstructured ones are that contains a dense collection of sensor nodes, and the nodes may be deployed in an ad-hoc manner. For the structured ones, the nodes are deployed in pre-planned manners. The structured style with few nodes can be deployed for traffic information gathering with nodes placed at specific locations to provide coverage. Fig. <ref type="figure" target="#fig_0">1</ref> shows the four-lane road with sensors in the urban traffic network. The WSN communicates with a local area network or wide area network through a gate way. The road-side sensor acts as the end device to collect the traffic information and the intersection node sensor acts as a coordinator and transfers the collected traffic information to the gateway. The gateway acts as a bridge connecting the WSN and other networks, and it enables the data to be processed or stored by other resources. The traffic model used in this paper is simulated on SUMO platform and grid networks. Congestion analysis and least fuel navigation are based on the traffic information collected form the WSNs of urban area.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">The memetic Monkey King Evolutionary Algorithm</head><p>The Monkey King Evolutionary(MKE) Algorithm proposed in this paper is inspired by the action of the Monkey King, a character of a Chinese famous mythological novel, named Journey to the West. The novel relates the amazing adventures of the priest Sanzang as travels west in search of Buddhist Sutras with his three disciples, and Monkey King is the most capable disciple. The journey of the four is supposed to be dangerous and will-steeling. When Monkey King is in trouble, he can transform into different small monkeys to deal with the tough problem, and each small monkey can give a feedback solution to the Monkey King, so the Monkey King can select the best solution for the trouble. The Monkey King algorithm is an updated and more powerful version of Ebb-Tide-Fish algorithm <ref type="bibr" target="#b25">[26]</ref>. It is the same as Ebb-Tide-Fish algorithm that there are also only a small amount of particles labeled as Monkey King particles in Monkey King Evolutionary Algorithm. We use a population rate R to define the proportion of particles in the population labeled as Monkey King particles. The Monkey King labels are randomly initialized with the sum equaling to R * PopSize, PopSize denotes the population size. In the evolutionary algorithm, each Monkey King particle transforms to a small group of monkeys for exploitation while other particles in the population are for exploration. After each Monkey King particle's exploitation, the particle becomes a normal particle of the population, and then we randomly select R * PopSize particles from the population to change their labels to be new Monkey King particles.</p><p>In the MKE algorithm, the number of small monkeys that a Monkey King particle transforms to is C * D, C is a constant value while D is the number of dimensions. A larger C value means the Monkey King Particle does more exploitation of a local area and it performs better on multi-modal functions, but it usually increases the computational complexity. Empirically C = 3 is a good choice for lower dimension optimizations. The searching behaviors of par-  ticles in the population are shown in Fig. <ref type="figure" target="#fig_1">2</ref>, different particle labels mean different search styles. The labeled S and X particles in Fig. <ref type="figure" target="#fig_1">2</ref> are denoted as Monkey King particle and common particle respectively. The evolution equation of Monkey King particles and common particles are listed in Eqs. ( <ref type="formula">5</ref>), ( <ref type="formula">6</ref>) and ( <ref type="formula">7</ref>) respectively. This kind of update scheme is denoted as Monkey King Evolution version 1 (MKE_v1). X sm (i) in Eq. ( <ref type="formula">6</ref>) denotes the ith "small monkey" particle of the C × D small monkeys group. All these "small monkey" particles have the same values as X MK, G (a Gth-generation Monkey King particle). The "small monkey" particles search the vicinity range of X MK, G by following evolution equation Eq. ( <ref type="formula">5</ref>), and X MK, G is updated by X MK,G+1 , the selected optimum value from the C × D "small monkey" particles. For the normal particle, evolution follows Eq. <ref type="bibr" target="#b6">(7)</ref>. X k, pbest denotes the historical best of kth particle in the population, F is the fluctuation coefficient of direction vector (the vector from current position to the global best position). A particle's historical best motion trajectory is shown in Fig. <ref type="figure" target="#fig_2">3</ref>, and the pseudo-code of the algorithm is shown below in Algorithm 1. <ref type="foot" target="#foot_0">1</ref>X sm (i) ={x 1 , x 2 , . . . , x j , . . . , x D }, x j →x j ± 0.2 * rand() * x j , j ∈ D.</p><p>(5)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ARTICLE IN PRESS</head><p>JID: KNOSYS [m5G; <ref type="bibr">February 5, 2016;</ref><ref type="bibr">16:18]</ref> Algorithm 1 Pseudo-code of the Monkey King Evolution Algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Initialization:</head><p>Initialize the searching space R(r 1 , r 2 , . . . , r d ) and the benchmark function f (X ).</p><p>Iteration:</p><p>1: while exeT ime &lt; MaxIteration do 2:</p><p>if exeT ime = 1 then  if exeT ime &gt; 1 then 6:</p><p>for pSize = 1 : PopSize do 7:</p><p>if label i == 1 then 8:</p><p>Monkey king particle evolution (e.g. Eqs. ( <ref type="formula">5</ref>) and ( <ref type="formula">6</ref>)). Common particle evolution (e.g. Eq. ( <ref type="formula">7</ref>)).</p><p>12:</p><formula xml:id="formula_4">end if 13:</formula><p>Generate Monkey King and change its flag. Calculate the fitness value and update X pbest . 17:</p><p>Update the optima with coordinate X gbest . 18: end while Output:</p><p>The global optima X gbest and f (X gbest ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Table 1</head><p>The probability of newly added number of Monkey King particles after one of 50 Monkey King particles finishing its exploitation.  </p><formula xml:id="formula_5">X k,G+1 = X k,pbest + F * rand() * (X gbest -X k,G ) (7)</formula><p>Monkey King particles of the population are used as perturbation factors to achieve better optimization results within less computational time, so the proportion rate R is very small. We examine two cases: one is R * PopSize = 1, which means there is only one Monkey King particle in the population. The other is R * PopSize &gt; 1, we take R * PopSize = 2 for analysis. In this case R * PopSize = 2, we take PopSize = 100 for example, the initial number of Monkey King particles is 2. According to the algorithm, when one Monkey King particle changes its label to normal particle, two other particles in the population are selected and labeled as Monkey King. The number of Monkey King particles is increasing until a certain threshold. We suppose there are half Monkey King particles and half normal particles in the population with the number each 50 particles. When one of the Monkey King particle finishes exploitation and changes its label to normal, two other particles are selected to change their normal labels to be Monkey King labels. Table <ref type="table">1</ref> shows the probability of the number of new added Monkey King particles, so the expectation is 0.74. The balance number n of Monkey King particles satisfies Eq. ( <ref type="formula" target="#formula_6">8</ref>), so n = 63. Fig. <ref type="figure">4</ref> shows the number of Monkey King in the population with respect to R * PopSize = 1 and </p><formula xml:id="formula_6">R * PopSize = 2. 2 × C 2 100-n C 2 100 + C 1 n × C 1 100-n C 2 100 = 0.5<label>(8)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Benchmark functions</head><p>There are many benchmark functions for the validation of new algorithms, these benchmark functions are usually uni-modal functions, multi-modal functions, separable functions, nonseparable functions, symmetrical functions, asymmetrical functions, and even composition functions. Fig. <ref type="figure">5</ref> shows a 2-dimension multimodal schaffer function. In this paper, we use 28 benchmark functions, including uni-modal function, multi-modal function, separable functions, nonseparable functions, symmetry functions and asymmetry functions. The equations of the functions and the minimum values in search domain R of the functions are given in Tables <ref type="table">2</ref> and<ref type="table" target="#tab_1">3</ref>, respectively. The detailed description of these benchmark functions can be found in BBOB2009 noiseless function definitions <ref type="bibr" target="#b20">[21]</ref> and CEC2013 problem definition <ref type="bibr" target="#b21">[22]</ref>.</p><p>We also use CEC2008 benchmark functions for the validation of the scale invariant property of the proposed algorithm, and the good large scale optimization property makes the algorithm outperform others on large-scale optimization especially for the application, fuel optimization, in this paper. The optima of CEC2008 benchmark functions are listed in Table <ref type="table" target="#tab_2">4</ref>.</p><p>All the experiments are conducted on a PC with Intel(R) Core(TM)2 Duo CPU T6670@ 2.2 Hz on RedHat Linux Enterprise Edition 5.5 Operating System, and all the algorithms are Please cite this article as: Z. Meng, J.-S. Pan, Monkey King Evolution: A new memetic evolutionary algorithm and its application in vehicle fuel consumption optimization, Knowledge-Based Systems (2016), http://dx.doi.org/10.1016/j.knosys.2016.01.009</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ARTICLE IN PRESS</head><p>JID: KNOSYS [m5G; <ref type="bibr">February 5, 2016;</ref><ref type="bibr">16:18]</ref> Table <ref type="table">2</ref> Benchmark functions.</p><p>No. Name Benchmark function Sphere function</p><formula xml:id="formula_7">f 1 (x) = D i=1 z 2 i + f * 1 , Z = X -O Rot-Hi-Con-Elliptic function f 2 (x) = D i=1 (10 6 ) i-1 D-1 z 2 i + f * 2 , Z = Tosz (M 1 (X -O)) Rot-Be-Cigar function f 3 (x) = z 2 1 + 10 6 D i=2 z 2 i + f * 3 , Z = M 2 T 0.5 asy (M 1 (X -O)) Rot-Discuss function f 4 (x) = 10 6 z 2 1 + D i=2 z 2 i + f * 4 , Z = Tosz (M 1 (X -O)) Dif-Powers function f 5 (x) = D i=1 |z i | 2+4 i-1 D-1 + f * 5 , Z = X -O Rot-Ros function f 6 (x) = D-1 i=1 (100(z 2 i -z i+1 ) 2 + (z i -1) 2 ) + f * 6 , Z = M 1 ( 2.048(X-O) 100 ) + 1 Rot-Schaffers F7 function f 7 (x) = ( 1 D-1 D-1 i=1 ( √ z i + √ z i sin 2 (50z 0.2 i ))) 2 + f * 7 , z i = y 2 i + y 2 i+1 , Y = 10 M 2 T 0.5 asy (M 1 (X -O)) Rot-Ackley's function f 8 (x) = -20exp(-0.2 1 D D i=1 z 2 i ) -exp( 1 D i=1 Dcos(2π z i )) + 20 + e + f * 8 Z = 10 M 2 T 0.5 asy (M 1 (X -O)) Rot-weierstrass function f 9 (x) = D i=1 ( kmax k=0 [a k cos(2π b k (z i + 0.5))]) -D kmax k=0 [a k cos(2π b k 0.5)] + f * 9 a = 0.5, b = 3, kmax = 20, Z = 10 M 2 T 0.5 asy (M 1 0.5(X-O) 100 ) Rot-Griewank's function f 10 (x) = D i=1 z 2 i 4000 -D i=1 cos( zi √ i ) + 1 + f * 10 , Z = 100 M 1 600(X-O) 100 Rastrigin's function f 11 (x) = D i=1 (z 2 i -10cos(2π z i ) + 10) + f * 11 , Z = 10 T 0.2 asy (Tosz ( 5.12(X-O) 100 )) Rot-Rastrigin's function f 12 (x) = D i=1 (z 2 i -10cos(2π z i ) + 10) + f * 12 , Z = M 1 10 M 2 T 0.2 asy (Tosz (M 1 5.12(X-O)<label>100</label></formula><p>)) Non-Rot-Rastrigin's function</p><formula xml:id="formula_8">f 13 (x) = D i=1 (z 2 i -10cos(2π z i ) + 10) + f * 13 , Z = M 1 10 M 2 T 0.2 asy (Tosz (Y )) x = M 1 5.12(X-O) 100</formula><p>,</p><formula xml:id="formula_9">y i = xi , i f xi ≤ 0.5 round(2 xi )/2, i f xi &gt; 0.5 Schwefel's function f 14 (Z) = 418.9829 * D -D i=1 g(z i ) + f * 14 , Z = 10 ( 100(X-O) 100 ) + 4.209687462275036e + 002 Rot-Schwefel's function f 15 (Z) = 418.9829 * D -D i=1 g(z i ) + f * 15 , Z = 10 M 1 ( 100(X-O) 100 ) + 4.209687462275036e + 002 Rot-Katsuura function f 16 (x) = 10 D 2 D i=1 (1 + i j = 132 |2 j zi -round(2 j zi )| 2 j ) 10 D1.2 -10 D 2 + f * 16 Z = M 2 100 (M 1 ( 5(X-O) 100 )) Lun-Bi-Rastrigin function f 17 (x) = min( D i=1 y 2 0 , dD + s D i=1 y 2 1 ) + 10(D -D i=1 cos(2π ẑi )) + f * 17 y 0 = ( xi -μ 0 ), y 1 = ( xi -μ 1 ), z = 100 ( x -μ 0 ) Rot-Lun-Bi-Rastrigin function f 18 (x) = min( D i=1 y 2 0 , dD + s D i=1 y 2 1 ) + 10(D -D i=1 cos(2π ẑi )) + f * 18 y 0 = ( xi -μ 0 ), y 1 = ( xi -μ 1 ), z = M 2 100 (M 1 ( x -μ 0 )) Rot-Exp-Gri-plus-Rosenbrock's function f 19 (x) = g 1 (g 2 (z 1 , z 2 )) + g 1 (g 2 (z 2 , z 3 )) + • • • + g 1 (g 2 (z D , z 1 )) + f * 19 g 1 (x) = D i=1 x 2 i 4000 -D i=1 cos( xi √ i ) + 1, z = M 1 ( 5(x-o) 100 ) + 1 Rot-Exp-Scaffer's F6 function f 20 (x) = g(z 1 , z 2 ) + g(z 2 , z 3 ) + . . . + g(z D , z 1 ) + f * 20 g(x, y) = 0.5 + sin 2 ( √ x 2 +y 2 )-0.5 (1+0.001(x 2 +y 2 )) 2 , Z = M 2 T 0.5 asy (M 1 (X -O)) Composition function 1 f (x) = n i=1 ω i * [λ i g i (x) + bias i ] + f * f i = f i -f * i , g i = f 6 , g 2 = f 5 , g 3 = f 3 , g 4 = f 4 , g 5 = f 1 Composition function 2 f (x) = n i=1 ω i * [λ i g i (x) + bias i ] + f * f i = f i -f * i , g 1-3 = f 14 Composition function 3 f (x) = n i=1 ω i * [λ i g i (x) + bias i ] + f * f i = f i -f * i , g 1-3 = f 15 Composition function 4 f (x) = n i=1 ω i * [λ i g i (x) + bias i ] + f * f i = f i -f * i , g 1 = f 15 , g 2 = f 12 , g 3 = f 9 , σ = [20, 20, 20] Composition function 5 f (x) = n i=1 ω i * [λ i g i (x) + bias i ] + f * f i = f i -f * i , g 1 = f 15 , g 2 = f 12 , g 3 = f 9 , σ = [10, 30, 50] Composition function 6 f (x) = n i=1 ω i * [λ i g i (x) + bias i ] + f * f i = f i -f * i , g 1 = f 15 , g 2 = f 12 , g 3 = f 2 , g 4 = f 9 , g 5 = f 10 Composition function 7 f (x) = n i=1 ω i * [λ i g i (x) + bias i ] + f * f i = f i -f * i , g 1 = f 10 , g 2 = f 12 , g 3 = f 15 , g 4 = f 9 , g 5 = f 1 Composition function 8 f (x) = n i=1 ω i * [λ i g i (x) + bias i ] + f * f i = f i -f * i , g 1 = f 19 , g 2 = f 7 , g 3 = f 15 , g 4 = f 20 , g 5 = f 1 implemented in Matlab 2011b Unix version.</formula><p>The fitness error values that smaller than "eps" (eps = 2.2204e -016) are considered as zeros herein.</p><p>When we test the MKE_v1 with R * PopSize = 1 using these benchmark functions, experiment results show that MKE_v1 has better accuracy and convergence speed for lower dimension functions and un-rotated functions than canonical PSO algorithm. In order to improve the performance, we propose an updated version named MKE_v2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Updated version of memetic MKE Algorithm</head><p>As we know, Monkey King in Chinese famous mythological novel, Journey to the West, is the most powerful disciple of priest Sanzang. Accordingly, we appoint the global best in the population of each iteration to be Monkey King particle instead of randomly generated ones that in MKE_v1, this version is named MKE_v2. Before the illustration of the evolution equation in MKE_v2, we give some definitions first, X denotes the coordinate matrix of all particles in the population with the coordinate of ith particle X i = {x 1 , x 2 , . . . , x D } to be the ith row vector of it. There are ps row vectors in X as the population size is ps. X MK,G denotes the Monkey King matrix, and there are C × D vectors in the matrix. Each vector in X MK,G is X MK, G with the value equaling to X gbest, G (the particle that has global best fitness value). Eq. ( <ref type="formula">9</ref>) shows the equation of X and X MK,G .</p><formula xml:id="formula_10">X = ⎡ ⎢ ⎣ X 1 X 2 ... X ps ⎤ ⎥ ⎦ X MK,G = ⎡ ⎢ ⎣ X MK,G X MK,G ... X MK,G ⎤ ⎥ ⎦ C×D (9)</formula><p>Please cite this article as: Z. <ref type="bibr">Meng</ref>  Now, we get back to illustrate the evolution scheme of MKE_v2. The local search/exploitation is implemented by Eq. ( <ref type="formula" target="#formula_11">10</ref>). X di f f is the exploitation matrix, generated by the difference of two random matrices X r1 and X r2 . An illustration of two dimension X di f f is shown in Fig. <ref type="figure" target="#fig_11">6</ref>. X r1 and X r2 are generated by randomly selecting C × D row vectors from X (select without replacement), the earlier selected row vectors of X appears in the front rows of X r1 and X r2 . FC is the fluctuation coefficient of the exploitation matrix.</p><p>X MK,G+1 (i) denotes the i th row vector of X MK,G+1 . The next generation (X MK,G+1 ) of X MK, G is updated by the row vector that find the optimum value among row vectors in X MK,G+1 . The common particles still use the same update scheme mentioned in MKE_v1 with the equation shown in Eq. <ref type="bibr" target="#b6">(7)</ref>.</p><formula xml:id="formula_11">X di f f = ( X r1 -X r2 ) X MK,G+1 = X MK,G + FC * X di f f X MK,G+1 = opt{ X MK,G+1 (i)}, i = 1, 2, . . . ,C × D (<label>10</label></formula><formula xml:id="formula_12">)</formula><p>In the conducted experiment, we use C = 3, F = 5, FC = 0.5 and C = 3, F = 2, FC = 2 to make comparisons. The optimization results of the 28 benchmark functions with 10-dimension after 10,000 generations are shown in Table <ref type="table" target="#tab_3">5</ref>. For each function we run 20 times and the best minimum and mean minimum of the 20-run fitness errors are listed in the table. We can see that the optimization results are not good enough only by employing the exploitation of the Monkey King particle (global best particle), though  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">Monkey King Evolution version3</head><p>In this version, common particles are equipped with the same exploitation behavior as Monkey King particles, in other words, the particles are equivalent. Exploration and exploitation are implemented simultaneously by affine-like transformation (In affine transformation, f: X → Y, is of the form X → MX + b. Here in this paper we use a new affine-like transformation style X → M X + Bias, Bias = M B, denotes multiplication of corresponding matrix elements, same as ". * " operation in Matlab), and all particles in the population use a matrix M for this transformation. We also give some definitions before the introduction of the evolution equation in MKE_v3. X gbest,G denotes the replicated global best matrix, and there are ps vectors in the matrix. Each vector in X gbest,G is with the same value X gbest, G (the coordinate of the particle that has global best fitness value). X G denotes the G th generation of X, X is the coordinate matrix, which is the same as the one mentioned in MKE_v2. Eq. <ref type="bibr" target="#b10">(11)</ref> shows the equation of X gbest,G , and Eq. ( <ref type="formula" target="#formula_13">12</ref>) shows the evolution scheme in MKE_v3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>X</head><formula xml:id="formula_13">= ⎡ ⎢ ⎣ X 1 X 2 ... X ps ⎤ ⎥ ⎦ X gbest,G = ⎡ ⎢ ⎣ X gbest,G X gbest,G ... X gbest,G ⎤ ⎥ ⎦ (11) ⎧ ⎪ ⎪ ⎪ ⎨ ⎪ ⎪ ⎪ ⎩ X di f f = ( X r1 -X r2 ) X gbest,G+1 = X gbest,G + FC * X di f f X G+1 = M X G + Bias Bias = M X gbest,G+1<label>(12)</label></formula><p>X di f f er also denotes the exploitation matrix, but X r1 and X r2 have extended meanings with the ones introduced in MKE_v2. X r1 and X r2 here in MKE_v3 extend the row sizes from C × D to ps (the population size). In this case, the randomly selecting row vectors from X to X r1 and X r2 can be implemented by randomly permutating row vectors of X.</p><p>M is the transformation matrix, and it is transformed from a matrix M tmp which is generated by the multiplication of orthogonal eigen-vector matrix P and diagonal eigen-value matrix (M tmp = P T P).</p><p>= diag(d 1 , d 2 , . . . , d D ) is a diagonal eigen-value matrix and used for the amplification of the difference matrix. For simplicity, M tmp is initialized by a lower triangular matrix with the elements equaling to ones. Eq. ( <ref type="formula">13</ref>) gives an example to show the transformation for M tmp to M with particle population size equaling to D. There are two steps for the transformation, the first step is to randomly permute the elements of each D-dimension row vector in M tmp , and the second step is to randomly permute the row vectors with the elements of each row vector unchanged, so we can get M.</p><formula xml:id="formula_14">M tmp = ⎡ ⎢ ⎣ 1 1 1 • • • 1 1 • • • 1 ⎤ ⎥ ⎦ ∼ ⎡ ⎢ ⎣ 1 1 • • • 1 1 • • • 1 1 ⎤ ⎥ ⎦ = M (13)</formula><p>Usually, the size of the particle population is larger than particle coordinate dimension, matrix M tmp needs to be extended according to population size ps. For example, when ps = 2D, M tmp is extended to duplicated matrix shown in Eq. ( <ref type="formula">14</ref>). Generally, when ps%D = k, the first k rows of the included in M tmp , and M is adaptive with the change of M tmp .</p><formula xml:id="formula_15">M tmp = ⎡ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎣ 1 1 1 • • • 1 1 • • • 1 1 1 1 • • • 1 1 • • • 1 ⎤ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎦ ∼ ⎡ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎢ ⎣ 1 1 • • • 1 1 • • • 1 1 • • • 1 • • • 1 1 1 • • • 1 ⎤ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎥ ⎦ = M (14)</formula><p>M is binary reverse operation of M. The corresponding values of non-zero elements in M are zeros in matrix M while the corresponding values of zero elements are ones. Eq. ( <ref type="formula">15</ref>) shows an example of binary reverse operation.</p><formula xml:id="formula_16">M = ⎡ ⎢ ⎣ 1 1 1 • • • 1 1 • • • 1 ⎤ ⎥ ⎦ , M = ⎡ ⎢ ⎣ 0 1 • • • 1 0 0 • • • 1 • • • 1 0 0 • • • 0 ⎤ ⎥ ⎦ (15)</formula><p>The pseudo-code of the algorithm is shown in Algorithm 2. So Algorithm 2 Pseudo-code of the final version of Monkey King Evolution Algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Initialization:</head><p>Initialize the searching space R(r 1 , r 2 , . . . , r d ) and the benchmark function f (X ). if exeT ime &gt; 1 then</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6:</head><p>Particles evolution in Eq. ( <ref type="formula" target="#formula_13">12</ref>). Calculate the fitness value and update X pbest . 9:</p><p>Record the optima coordinate X gbest . 10: end while Output:</p><p>The global optima X gbest and f (X gbest ).</p><p>there is only one parameter FC of the proposed MKE_v3 should be determined in experiment. Empirically, FC = 0.7 is a good choice for MKE_v3, and we use this setting in the following experiment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Model of routing and fuel consumption in grid networks</head><p>Vehicle routing and scheduling models are very useful for the dynamic vehicle transportation in urban area. Real time information of street length, lanes, vehicle density, direction, velocity restrictions of a certain road are all recorded and collected by WSNs with the aid of city traffic surveillance system and global positioning system for vehicle identification and navigation. The actual need of routing is to search the optimal way from a source to a destination that satisfy the driver's needs. We mainly analyze the shortest path (Dijkstra method), A * algorithm and our proposed algorithm for finding a least gasoline consumption path of a navigation. A simulation is conducted on a grid network, and the navigation result is shown in Fig. <ref type="figure" target="#fig_14">7</ref>.</p><p>The routing of vehicles can be modeled as a directed graph G = (V, E) which consists of road (Edge) and intersections (Node).</p><p>In Fig. <ref type="figure" target="#fig_14">7</ref>, we randomly generated 10,000 vehicles to simulate the traffic condition that should usually be collected by WSNs at some time in a day, the road is 2-lane road, and the distance between two nodes in the grid network is 2 km, and there are 51 vehicles, on average, in one square kilometer with 89 vehicles on one section of road (2 km, the interval between two intersections). When the density is 1.2 times than normal traffic density or more than 3 vehicles in a 22.4 m, we denote the section congested with a delay time T 0 . The red points in Fig. <ref type="figure" target="#fig_14">7</ref> is congestion nodes, the pink one is the generated start point, the yellow one is the destination and green ones are the intersections nodes which demonstrate the optimal navigation result. The gasoline consumption fitness function is a function of edge-travel gasoline cost and congestion gasoline cost. The fitness function is shown in Eq. ( <ref type="formula" target="#formula_17">16</ref>). g(ω i ) denotes the congestion weight of Edge i and E i, cost denotes the gasoline cost on Edge i with the delay gasoline cost on the following intersection included.</p><formula xml:id="formula_17">f = n i=1 g(ω i ) * E i,cost<label>(16)</label></formula><p>Each navigation path candidate is composed of node-edge sequence, and we use the node sequence herein the paper to denote each candidate path for simplicity. For example, X i in gasoline consumption optimization is the i-th node sequence that contains the i-th candidate path of the navigation. All the intersection nodes of the local area are labeled for the navigation and different permutation sequence of these nodes that contain a candidate path of a navigation is a potential solution. For the definition of E i , i is the start node of the edge, and edge is named after the start node.</p><p>Therefore, E i, cost is the gasoline cost of E i . g(ω i ) is the congestion weight of edge E i , and the value is determined by the traffic condition at some time in a day. For simplicity, the value of g(ω i is set to 0 when the i-th intersection node is not on a navigation path, and the value is set to 1 when it is on a navigation path. E i, cost in the navigation path can be calculated with the congestion weight g(ω i ) constructed according to the current traffic condition.</p><p>Recent research shows that there is an optimum velocity range for each car. In our experiment, a typical small gasoline (&lt; 1400 cm 3 ) Euro 4 passenger car is used for the analysis. Fig. <ref type="figure" target="#fig_20">8</ref> <ref type="foot" target="#foot_2">2</ref> </p><p>shows the optimal speed for minimum fuel consumption. From the chart, we can separate four areas with corresponding four velocity ranges. The first range is 0-30 kph with quite high fuel consumption. This speed range is typical for cars traveling in a city with</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ARTICLE IN PRESS</head><p>JID: KNOSYS [m5G; <ref type="bibr">February 5, 2016;</ref><ref type="bibr">16:18]</ref> Fig. <ref type="figure" target="#fig_20">8</ref>. Fuel consumption under different velocities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Table 6</head><p>Parameters setting of different algorithms.</p><p>Algorithms. Parameters settings iwPSO continuous start and stop motion, and the traffic situation in this range is often considered as being in traffic congestion. The second range is 30-55 kph, and this velocity range is very common of a car in sub-urban or rural areas. The third range is 55-80 kph, and this is the optimum velocity range that minimize the fuel consumption. The last range is 80-120 kph, and the fuel consumption augments with the velocity increase. E i, cost is calculated by the addition of traveling cost and delay cost with the equation shown in Eq. <ref type="bibr" target="#b16">(17)</ref>. Cost(vel) denotes the gasoline cost with corresponding velocity value vel, Dist(vel) denotes the traveling distance with the velocity equaling to vel, Cost(delay) denotes the engine idling fuel consumption, and T 0 is the delay time mentioned earlier in the paper.</p><formula xml:id="formula_18">c1 = c2 = 2.0, iw = 0.5, vel = rnd ccPSO c1 = c2 = 2.05, iw = 1, K = 0.7298, v = rnd ccPSO-local c1 = c2 = 2.05, iw = 1, K = 0.7298, VonNeumannTopology, v = rnd FIPS_Uring cc = 4.1, iw = 1, K = 0.7298, UringTopology, v = rnd CLPSO iw = 0.9˜0.3, cc = 1, 49455, Pc = 0˜0.5, stay_num = 7, v = rnd, vmax = 0.2R DNLPSO c1 = c2 = 1.49445, iw = 0.9˜0.4, Pc = 0.45˜0.05, m = 3, g = 5, v = rnd MKE_v3 F = 0.7</formula><formula xml:id="formula_19">E i,cost = E i,travel + E i,delay E i,travel = Dist(vel) * Cost(vel) E i,delay = T 0 * Cost(delay) (17)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Performance evaluation and comparisons</head><p>The proposed algorithm has been tested under benchmark functions listed in Section 3.1, and contrasted with the canonical PSO, Inertia Weighted PSO (iwPSO), Constriction Coefficients PSO (ccPSO), Fully Informed Particle Swarm (FIPS), Comprehensive Learning PSO (CLPSO), Dynamic Neighborhood Learning PSO(DNLPSO). The compared algorithms herein has similar time and space complexity, so it's easier to examine the performance of these state-of-the-art algorithms. The parameter setting of PSO is C1 = C2 = 2, parameters of iwPSO in the experiment are C1 = C2 = 2 and iw = 0.5. For ccPSO, we use C1 = C2 = 2.05 and K = 0.729, ccPSO-local denotes constriction coefficients PSO with von Neumann topology/neighborhood, and the parameter settings are the same as ccPSO. For CLPSO, the parameters settings are cc = 1.49445 and iw ∈ [0.2, 0.9] a decreasing function of iterations and for DNLPSO, the parameters c1 = 1.49445, c2 = 1.49445, iw ∈ [0.4, 0.9], also a decreasing function of iterations, m = 3 and g = 5. <ref type="foot" target="#foot_3">3</ref> All the settings of algorithms are listed in Table <ref type="table">6</ref>, and they are the authors' recommended settings.</p><p>In our implementation, we use 100 particles of a population, and run 20 times, with 10,000 iterations in each run to get the minimum of the benchmark functions from CEC2013 and BBoB2009. The benchmark functions are used as black box test functions. The best, median, mean/standard deviation of fitness error ff (o) comparison of a single 20-run by different algorithms are shown in Tables <ref type="table" target="#tab_5">7</ref><ref type="table" target="#tab_6">8</ref><ref type="table" target="#tab_7">9</ref>accordingly. As can be seen from Table <ref type="table" target="#tab_5">7</ref>, the fitness error of the benchmark values (f1, f4, f5, f6, f11, f26 and f28) are equal with different state-of-the-art algorithms. Illustration of the convergence speed are analyzed and shown in the following figures (Figs. <ref type="bibr" target="#b8">[9]</ref><ref type="bibr" target="#b9">[10]</ref><ref type="bibr" target="#b10">[11]</ref><ref type="bibr" target="#b11">[12]</ref><ref type="bibr" target="#b12">[13]</ref><ref type="bibr" target="#b13">[14]</ref><ref type="bibr" target="#b14">[15]</ref> when different state-of-the-art algorithms have the same best fitness error values. For the PSO variants, there are two different ways of velocity initialization, one is that velocities initialized with zeros and the other is initialized with random values, we use random velocity values in this paper. All the compared algorithms can find the minimum value on function 1 and function 5 of CEC2013 benchmark functions. DNLPSO can find the minimum values of function 4 and function 6. Only CLPSO can find the optimum of function 14. Our algorithm has an overall better performance, and we can see that our method not only has better optimization result but also has better convergence speed.</p><p>For the validation of large scale property of the proposed algorithm, we use the benchmarks CEC2008 for the test. The dimension of the test-bed is 100-D with a population of 500 particles, and we run 20 times with 10,000 iterations each. The parameters</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ARTICLE IN PRESS</head><p>JID: KNOSYS [m5G; <ref type="bibr">February 5, 2016;</ref><ref type="bibr">16:18]</ref>     shortest path algorithm (Dijkstra) separately by comparison with our algorithm respectively. We can see that the proposed algorithm outperforms on gasoline consumption over the two algorithms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Conclusion</head><p>In   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Table 12</head><p>The comparison of average fuel consumption and time consumption for 1000 times navigation be-tween Dijkstra and our algorithm. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Table 13</head><p>The comparison of average fuel consumption and time consumption for 1000 times navigation be-tween A * and our algorithm. and experiment results show that our algorithm has better con-vergence speed and convergence accuracy. PSO variants have a fatal weakness that large population size did not improve the optimization results significantly, so is the weakness to optimiza-tion high dimension problems. Our algorithm makes better use of particles' cooperation, and it's fully demonstrated on large scale optimization. An application of urban area vehicle navigation Please cite this article as: Z. Meng, J.-S. Pan, Monkey King Evolution: A new memetic evolutionary algorithm and its application in vehicle fuel consumption optimization, Knowledge-Based Systems (2016), http://dx.doi.org/10.1016/j.knosys.2016.01.009 within least fuel consumption is discussed and our algorithm gives the least fuel consumption navigation, and it outperforms A * and Dijkstra algorithm. Our algorithm can also be degraded into PSO form and Differential Evolution(DE) form. We also can reduce iterations/generations of particles' evolution by increasing the particle population size to achieve equal number of function evaluations, and it makes a better performance, the analysis will be discussed in the next paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ARTICLE IN PRESS</head></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Four-lane road with sensors in the urban traffic networks.</figDesc><graphic coords="3,45.35,57.42,246.00,106.80" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. The search behaviors of particles in Monkey King Evolutionary.</figDesc><graphic coords="3,314.34,56.96,246.00,191.25" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. The motion trajectory of a particle's historical best drawn by global best of the population.</figDesc><graphic coords="3,314.34,275.03,246.00,165.30" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>,1 , x i,2 , . . . , x i,d ) T and generate the Monkey King particle and change its flag.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>G+1 = opt i∈C×D {X sm (1), . . . , X sm (i), . . . , X sm (C × D)}.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 4 .Fig. 5 .</head><label>45</label><figDesc>Fig. 4. Number of Monkey King particles of each iteration in 100 particles' population.</figDesc><graphic coords="4,304.53,56.86,246.00,184.35" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head></head><label></label><figDesc>, 100] D f (o 1 , o 2 , . . . , o d ) = -450 2 Shifted Schwefel's problem 2.21 [-100, 100] D f (o 1 , o 2 , . . . , o d ) = -450 3 Shifted Rosenbrocks function [-100, 100] D f (o 1 , o 2 , . . . , o d ) = 390 4 Shifted Rastrigins function [-5, 5] D f (o 1 , o 2 , . . . , o d ) = -330 5 Shifted Griewanks function [-600, 600] D f (o 1 , o 2 , . . . , o d ) = -180 6 Shifted Ackleys function [-32, 32] D f (o 1 , o 2 , . . . , o d ) = -140 7 FastFractal "DoubleDip" function [-1, 1] D f (o 1 , o 2 , . . . , o d ) unknown</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. The Monkey King particle's exploitation matrix/vectors.</figDesc><graphic coords="6,304.53,472.83,246.00,206.85" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Iteration: 1 :(x i, 1 ,</head><label>11</label><figDesc>while exeT ime &lt; MaxIteration do x i,2 , . . . , x i,d ) T and generate the Monkey King particle and change its flag.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Grid network of vehicle navigation simulation. (For interpretation of the references to color in this figure, the reader is referred to the web version of this article).</figDesc><graphic coords="8,304.53,57.57,246.00,178.65" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Fig. 10 .</head><label>10</label><figDesc>Fig. 10. Comparison of different algorithms on function 4.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Fig. 11 .</head><label>11</label><figDesc>Fig. 11. Comparison of different algorithms on function 5.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Fig. 12 .</head><label>12</label><figDesc>Fig. 12. Comparison of different algorithms on function 6.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head></head><label></label><figDesc>this paper, we propose Monkey King Evolutionary algorithm, analyze three update schemes, and then we use benchmark functions to validate the proposed algorithm. Comparisons are made between our algorithm and state-of-the-art PSO variants, Please cite this article as: Z. Meng, J.-S. Pan, Monkey King Evolution: A new memetic evolutionary algorithm and its application in vehicle fuel consumption optimization, Knowledge-Based Systems (2016), http://dx.doi.org/10.1016/j.knosys.2016.01.009ARTICLE IN PRESSJID: KNOSYS [m5G;February 5, 2016;16:18]    </figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_19"><head>Fig. 14 .</head><label>14</label><figDesc>Fig. 13. Comparison of different algorithms on function 11. Fig. 14. Comparison of different algorithms on function 26.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_20"><head>8 ×</head><label>8</label><figDesc>10 -3 L</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_21"><head>2 ×</head><label>2</label><figDesc>10 -2 L</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_22"><head>Fig. 15 .</head><label>15</label><figDesc>Fig. 15. Comparison of different algorithms on function 28.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="9,157.85,65.70,290.40,185.25" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>3. A traffic networks model based on wireless sensor network environment is proposed with gasoline consumption function (of navigation paths) proposed to be optimized for individual navigation with regarding to least congestion in restricted traffic networks. 4. The navigation result of the proposed algorithm outperforms A * and Dijkstra algorithm on gasoline consumption for real-time navigation.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 3</head><label>3</label><figDesc>Search domain and minimum of real-parameter optimization benchmark functions.</figDesc><table><row><cell>JID: KNOSYS</cell><cell cols="3">ARTICLE IN PRESS</cell><cell>[m5G;February 5, 2016;16:18]</cell></row><row><cell>No.</cell><cell>Name</cell><cell>Search domain</cell><cell>Minimum value</cell></row><row><cell>1</cell><cell>Sphere function</cell><cell>[-100, 100] D</cell><cell></cell></row><row><cell>2</cell><cell>Rotated high conditioned elliptic function</cell><cell>[-100, 100] D</cell><cell></cell></row><row><cell>3</cell><cell>Rotated bent cigar function</cell><cell>[-100, 100] D</cell><cell></cell></row><row><cell>4</cell><cell>Rotated discuss function</cell><cell>[-100, 100] D</cell><cell></cell></row><row><cell>5</cell><cell>Different powers function</cell><cell>[-100, 100] D</cell><cell></cell></row><row><cell>6</cell><cell>Rotated Rosenbrock's function</cell><cell>[-100, 100] D</cell><cell>f (o 1 , o 2 , . . . , o d ) = -900</cell></row><row><cell>7</cell><cell>Rotated Schaffers F7 function</cell><cell>[-100, 100] D</cell><cell>f (o 1 , o 2 , . . . , o d ) = -800</cell></row><row><cell>8</cell><cell>Rotated Ackley's function</cell><cell>[-100, 100] D</cell><cell>f (o 1 , o 2 , . . . , o d ) = -700</cell></row><row><cell>9</cell><cell>Rotated Weierstrass function</cell><cell>[-100, 100] D</cell><cell>f (o 1 , o 2 , . . . , o d ) = -600</cell></row><row><cell>10</cell><cell>Rotated Griewank's function</cell><cell>[-100, 100] D</cell><cell>f (o 1 , o 2 , . . . , o d ) = -500</cell></row><row><cell>11</cell><cell>Rastrigin's function</cell><cell>[-100, 100] D</cell><cell>f (o 1 , o 2 , . . . , o d ) = -400</cell></row><row><cell>12</cell><cell>Rotated Rastrigin's function</cell><cell>[-100, 100] D</cell><cell>f (o 1 , o 2 , . . . , o d ) = -300</cell></row><row><cell>13</cell><cell>Non-continuous rotated Rastrigin's function</cell><cell>[-100, 100] D</cell><cell>f (o 1 , o 2 , . . . , o d ) = -200</cell></row><row><cell>14</cell><cell>Schwefel's function</cell><cell>[-100, 100] D</cell><cell>f (o 1 , o 2 , . . . , o d ) = -100</cell></row><row><cell>15</cell><cell>Rotated Schwefel's function</cell><cell>[-100, 100] D</cell><cell>f (o 1 , o 2 , . . . , o d ) = 100</cell></row><row><cell>16</cell><cell>Rotated Katsuura function</cell><cell>[-100, 100] D</cell><cell>f (o 1 , o 2 , . . . , o d ) = 200</cell></row><row><cell>17</cell><cell>Lunacek Bi-Rastrigin function</cell><cell>[-100, 100] D</cell><cell>f (o 1 , o 2 , . . . , o d ) = 300</cell></row><row><cell>18</cell><cell>Rotated Lunacek Bi-Rastrigin function</cell><cell>[-100, 100] D</cell><cell>f (o 1 , o 2 , . . . , o d ) = 400</cell></row><row><cell>19</cell><cell>Expanded Griewank's plus Rosenbrock's function</cell><cell>[-100, 100] D</cell><cell>f (o 1 , o 2 , . . . , o d ) = 500</cell></row><row><cell>20</cell><cell>Expanded Scaffer's F6 function</cell><cell>[-100, 100] D</cell><cell>f (o 1 , o 2 , . . . , o d ) = 600</cell></row><row><cell>21</cell><cell>Composition function1 (n = 5, rotated)</cell><cell>[-100, 100] D</cell><cell></cell></row><row><cell>22</cell><cell>Composition function2 (n = 3, unrotated)</cell><cell>[-100, 100] D</cell><cell></cell></row><row><cell>23</cell><cell>Composition function3 (n = 3, rotated)</cell><cell>[-100, 100] D</cell><cell></cell></row><row><cell>24</cell><cell>Composition function4 (n = 3, rotated)</cell><cell>[-100, 100] D</cell><cell></cell></row><row><cell>25</cell><cell>Composition function5 (n = 3, rotated)</cell><cell>[-100, 100] D</cell><cell></cell></row><row><cell>26</cell><cell>Composition function6 (n = 5, rotated)</cell><cell>[-100, 100] D</cell><cell></cell></row><row><cell>27</cell><cell>Composition function7 (n = 5, rotated)</cell><cell>[-100, 100] D</cell><cell></cell></row><row><cell>28</cell><cell>Composition function8 (n = 5, rotated)</cell><cell>[-100, 100] D</cell><cell></cell></row></table><note><p><p>, J.-S. Pan, Monkey King Evolution: A new memetic evolutionary algorithm and its application in vehicle fuel consumption optimization, Knowledge-Based Systems (2016), http://dx.doi.org/10.1016/j.knosys.2016.01.009</p>f (o 1 , o 2 , . . . , o d ) = -1400 f (o 1 , o 2 , . . . , o d ) = -1300 f (o 1 , o 2 , . . . , o d ) = -1200 f (o 1 , o 2 , . . . , o d ) = -1100 f (o 1 , o 2 , . . . , o d ) = -1000 f (o 1 , o 2 , . . . , o d ) = 700 f (o 1 , o 2 , . . . , o d ) = 800 f (o 1 , o 2 , . . . , o d ) = 900 f (o 1 , o 2 , . . . , o d ) = 1000 f (o 1 , o 2 , . . . , o d ) = 1100 f (o 1 , o 2 , . . . , o d ) = 1200 f (o 1 , o 2 , . . . , o d ) = 1300 f (o 1 , o 2 , . . . , o d ) = 1400</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 4</head><label>4</label><figDesc>Search domain and minimum of large-scale benchmark functions.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 5</head><label>5</label><figDesc>Comparison results of MKE_v2 with different parameter settings. The best values of 20-run fitness errors are emphasized in BOLDFACE and the average values of the 20-run fitness errors are highlighted in ITALIC fonts.</figDesc><table><row><cell>f * -f(o)</cell><cell cols="2">MKE_v2, F = 2, FC = 2</cell><cell cols="2">MKE_v2, F = 5, FC=0.5</cell><cell>PSO</cell><cell></cell></row><row><cell>No.</cell><cell>Best</cell><cell>Mean</cell><cell>Best</cell><cell>Mean</cell><cell>Best</cell><cell>Mean</cell></row><row><cell>1</cell><cell>2 . 2 7 3 7 E -13</cell><cell>3.0695E-13</cell><cell>0</cell><cell>2.2737E-14</cell><cell>2.0552E + 02</cell><cell>4.8932E + 02</cell></row><row><cell>2</cell><cell>1.2857E + 03</cell><cell>1.8772E + 04</cell><cell>5.1501E + 04</cell><cell>2.2937E + 05</cell><cell>6.8267E + 05</cell><cell>1.2207E + 06</cell></row><row><cell>3</cell><cell>2.8475E-01</cell><cell>3.1489E + 07</cell><cell>5.6787E + 00</cell><cell>6.4120E + 05</cell><cell>2.4609E + 08</cell><cell>4.9810E + 08</cell></row><row><cell>4</cell><cell>0</cell><cell>5.7981E-13</cell><cell>1.7061E + 02</cell><cell>1.0869E + 03</cell><cell>1.5163E + 03</cell><cell>2.3930E + 03</cell></row><row><cell>5</cell><cell>0</cell><cell>2.3306E-13</cell><cell>0</cell><cell>3.9792E-14</cell><cell>6.0427E + 01</cell><cell>1.0332E + 02</cell></row><row><cell>6</cell><cell>1.1461E-03</cell><cell>1.3162E + 01</cell><cell>7.6161E-02</cell><cell>7.9281E + 00</cell><cell>2.1151E + 01</cell><cell>3.6457E + 01</cell></row><row><cell>7</cell><cell>1.7013E + 01</cell><cell>7.0382E + 01</cell><cell>3.1573E + 00</cell><cell>2.5164E + 01</cell><cell>2.4418E + 01</cell><cell>3.2066E + 01</cell></row><row><cell>8</cell><cell>2.0000E + 01</cell><cell>2.0232E + 01</cell><cell>2.0179E + 01</cell><cell>2.0261E + 01</cell><cell>2.0119E + 01</cell><cell>2.0236E + 01</cell></row><row><cell>9</cell><cell>4.5935E + 00</cell><cell>6.1842E + 00</cell><cell>3.0581E + 00</cell><cell>4.5408E + 00</cell><cell>5.0744E + 00</cell><cell>6.3820E + 00</cell></row><row><cell>10</cell><cell>8.1085E-01</cell><cell>2.5203E + 00</cell><cell>6.6424E-02</cell><cell>6.3203E-01</cell><cell>2.9134E + 01</cell><cell>4.6083E + 01</cell></row><row><cell>11</cell><cell>4.9748E + 00</cell><cell>1.4775E + 01</cell><cell>0</cell><cell>3.9798E-01</cell><cell>3.4236E + 01</cell><cell>4.6911E + 01</cell></row><row><cell>12</cell><cell>1.1940E + 01</cell><cell>3.1291E + 01</cell><cell>1.5919E + 01</cell><cell>3.0097E + 01</cell><cell>2.6582E + 01</cell><cell>4.5151E + 01</cell></row><row><cell>13</cell><cell>2.3971E + 01</cell><cell>5.0830E + 01</cell><cell>5.9475E + 00</cell><cell>2.7493E + 01</cell><cell>3.3342E + 01</cell><cell>4.5142E + 01</cell></row><row><cell>14</cell><cell>1.8197E + 02</cell><cell>3.1795E + 02</cell><cell>4.0176E + 01</cell><cell>1.4161E + 02</cell><cell>7.1241E + 02</cell><cell>1.0740E + 03</cell></row><row><cell>15</cell><cell>3.0321E + 02</cell><cell>9.2910E + 02</cell><cell>3.6868E + 02</cell><cell>9.0854E + 02</cell><cell>1.0092E + 03</cell><cell>1.1380E + 03</cell></row><row><cell>16</cell><cell>2.1292E-01</cell><cell>4.4480E-01</cell><cell>2.0879E-01</cell><cell>5.0173E-01</cell><cell>5.3371E-01</cell><cell>7.8679E-01</cell></row><row><cell>17</cell><cell>4.7861E + 00</cell><cell>1.7968E + 01</cell><cell>1.0276E-09</cell><cell>8.2347E + 00</cell><cell>7.1864E + 01</cell><cell>9.6239E + 01</cell></row><row><cell>18</cell><cell>1.1805E + 01</cell><cell>4.5189E + 01</cell><cell>2.0874E + 01</cell><cell>4.1024E + 01</cell><cell>7.7151E + 01</cell><cell>9.0736E + 01</cell></row><row><cell>19</cell><cell>4.5331E-01</cell><cell>1.4621E + 00</cell><cell>2.6635E-01</cell><cell>6.8545E-01</cell><cell>5.7323E + 00</cell><cell>8.5746E + 00</cell></row><row><cell>20</cell><cell>2.8668E + 00</cell><cell>3.5650E + 00</cell><cell>1.2588E + 00</cell><cell>3.0732E + 00</cell><cell>2.7487E + 00</cell><cell>3.2410E + 00</cell></row><row><cell>21</cell><cell>1.0000E + 02</cell><cell>3.7016E + 02</cell><cell>2.0000E + 02</cell><cell>2.9009E + 02</cell><cell>3.7741E + 02</cell><cell>4.3280E + 02</cell></row><row><cell>22</cell><cell>5.5712E + 01</cell><cell>4.0573E + 02</cell><cell>1.0979E + 01</cell><cell>2.1706E + 02</cell><cell>9.4005E + 02</cell><cell>1.2336E + 03</cell></row><row><cell>23</cell><cell>6.2828E + 02</cell><cell>1.2956E + 03</cell><cell>2.3218E + 02</cell><cell>9.8438E + 02</cell><cell>8.1939E + 02</cell><cell>1.1645E + 03</cell></row><row><cell>24</cell><cell>2.0855E + 02</cell><cell>2.1831E + 02</cell><cell>2.0783E + 02</cell><cell>2.1347E + 02</cell><cell>2.1516E + 02</cell><cell>2.1778E + 02</cell></row><row><cell>25</cell><cell>2.0393E + 02</cell><cell>2.1698E + 02</cell><cell>2.0333E + 02</cell><cell>2.1361E + 02</cell><cell>2.1622E + 02</cell><cell>2.1928E + 02</cell></row><row><cell>26</cell><cell>1.1890E + 02</cell><cell>2.1664E + 02</cell><cell>1.1791E + 02</cell><cell>2.1767E + 02</cell><cell>1.3451E + 02</cell><cell>1.8107E + 02</cell></row><row><cell>27</cell><cell>3.4323E + 02</cell><cell>5.3126E + 02</cell><cell>4.0000E + 02</cell><cell>5.3236E + 02</cell><cell>5.0656E + 02</cell><cell>5.7536E + 02</cell></row><row><cell>28</cell><cell>3.0000E + 02</cell><cell>4.6266E + 02</cell><cell>1.0000E + 02</cell><cell>3.1299E + 02</cell><cell>6.0308E + 02</cell><cell>7.2820E + 02</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 7</head><label>7</label><figDesc>Comparison results of best minimum error in 20 runs with the same number of function evaluations. The best result of each function is emphasized in boldface and the best draw results of each function is highlighted in italic fonts.</figDesc><table><row><cell>D = 10.</cell><cell>iwPSO</cell><cell>ccPSO</cell><cell>ccPSO-local</cell><cell>FIPS_Uring</cell><cell>CLPSO</cell><cell>DNLPSO</cell><cell>MKE_v3</cell></row><row><cell></cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell></row><row><cell></cell><cell>6.2219E + 03</cell><cell>1.5341E + 03</cell><cell>3.1794E + 03</cell><cell>2.5958E + 05</cell><cell>1.0742E + 05</cell><cell>1.1018E + 05</cell><cell>0</cell></row><row><cell></cell><cell>8.4504E + 00</cell><cell>7.2012E-03</cell><cell>6.3060E-04</cell><cell>9.3183E + 02</cell><cell>2.5073E + 04</cell><cell>3.1346E + 00</cell><cell>0</cell></row><row><cell></cell><cell>2.3032E-03</cell><cell>1.0383E-05</cell><cell>2.9173E + 01</cell><cell>1.0442E + 03</cell><cell>8.1690E + 02</cell><cell>0</cell><cell>0</cell></row><row><cell></cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell></row><row><cell></cell><cell>1.0407E-01</cell><cell>5.8119E-03</cell><cell>1.3798E-03</cell><cell>2.9921E + 00</cell><cell>5.7861E-02</cell><cell>0</cell><cell>0</cell></row><row><cell></cell><cell>5 . 4 7 2 0 E -01</cell><cell>7.6699E-01</cell><cell>1.1821E-01</cell><cell>1.4475E-01</cell><cell>2.7911E + 00</cell><cell>7.1501E-01</cell><cell>2.6603E-11</cell></row><row><cell></cell><cell>2.0109E + 01</cell><cell>2.0142E + 01</cell><cell>2.0150E + 01</cell><cell>2.0135E + 01</cell><cell>2.0108E + 01</cell><cell>2.0000E + 01</cell><cell>2.0227E + 01</cell></row><row><cell></cell><cell>7.5826E-01</cell><cell>6.6214E-01</cell><cell>1.3548E + 00</cell><cell>1.1535E + 00</cell><cell>2.0014E + 00</cell><cell>2.0241E + 00</cell><cell>0</cell></row><row><cell></cell><cell>1.4268E-01</cell><cell>9.1142E-02</cell><cell>4.9242E-02</cell><cell>5.4348E-01</cell><cell>1.4956E-01</cell><cell>3.6914E-02</cell><cell>4.917E-02</cell></row><row><cell></cell><cell>0</cell><cell>9.9496E-01</cell><cell>0</cell><cell>1.2921E + 00</cell><cell>0</cell><cell>7.9597E + 00</cell><cell>0</cell></row><row><cell></cell><cell>5.9698E + 00</cell><cell>4.9748E + 01</cell><cell>2.9849E + 00</cell><cell>1.9855E + 01</cell><cell>2.2242E + 00</cell><cell>4.97480E + 00</cell><cell>4.7202E + 00</cell></row><row><cell></cell><cell>6.3297E + 00</cell><cell>3.1902E + 00</cell><cell>3.0705E + 00</cell><cell>2.1921E + 01</cell><cell>4.1636E + 00</cell><cell>2.0994E + 00</cell><cell>9.9496E-01</cell></row><row><cell></cell><cell>3.5399E + 00</cell><cell>3.5399E + 00</cell><cell>3.4774E + 00</cell><cell>2.4878E + 02</cell><cell>0</cell><cell>1.3679E + 00</cell><cell>3.8531E + 00</cell></row><row><cell></cell><cell>1.6691E + 02</cell><cell>8.6620E + 01</cell><cell>5.0109E + 01</cell><cell>8.4792E + 02</cell><cell>3.4004E + 02</cell><cell>3.2461E + 02</cell><cell>2.9998E + 02</cell></row><row><cell></cell><cell>1.4823E-01</cell><cell>1.5265E-01</cell><cell>2.0954E-01</cell><cell>5.9590E-01</cell><cell>3.0200E-01</cell><cell>1.1897E-01</cell><cell>6.1354E-01</cell></row><row><cell></cell><cell>1.0312E + 01</cell><cell>1.7721E + 00</cell><cell>1.0648E + 01</cell><cell>2.4666E + 01</cell><cell>2.9551E + 00</cell><cell>1.1719E + 01</cell><cell>3.9636E-01</cell></row><row><cell></cell><cell>1.2079E + 01</cell><cell>4.8434E + 00</cell><cell>9.1023E + 00</cell><cell>3.0724E + 01</cell><cell>1.7227E + 01</cell><cell>1.9027E + 01</cell><cell>1.2956E + 01</cell></row><row><cell></cell><cell>3.0890E-01</cell><cell>6.9478E-02</cell><cell>1.5285E-01</cell><cell>1.3817E + 00</cell><cell>5.3203E-02</cell><cell>5.9673E-01</cell><cell>2.8013E-01</cell></row><row><cell></cell><cell>8.9747E-01</cell><cell>1.7711E + 00</cell><cell>1.8324E + 00</cell><cell>2.5448E + 00</cell><cell>1.9101E + 00</cell><cell>2.2711E + 00</cell><cell>1.0848E + 00</cell></row><row><cell></cell><cell>2.0000E + 02</cell><cell>2.0000E + 02</cell><cell>2.0000E + 02</cell><cell>2.3411E + 02</cell><cell>4.1487E + 00</cell><cell>2.0099E + 02</cell><cell>1.0000E + 02</cell></row><row><cell></cell><cell>1.7541E + 01</cell><cell>4.1743E + 01</cell><cell>4.3246E + 02</cell><cell>1.9707E + 02</cell><cell>5.1004E + 00</cell><cell>4.0347E + 02</cell><cell>3.1368E + 01</cell></row><row><cell></cell><cell>3.8489E + 02</cell><cell>3.7587E + 02</cell><cell>1.1655E + 02</cell><cell>1.0744E + 03</cell><cell>2.6518E + 02</cell><cell>6.1120E + 02</cell><cell>1.5338E + 02</cell></row><row><cell></cell><cell>2.0083E + 02</cell><cell>1.2547E + 02</cell><cell>2.0402E + 02</cell><cell>2.0680E + 02</cell><cell>1.1540E + 02</cell><cell>2.0080E + 02</cell><cell>1.1186E + 02</cell></row><row><cell></cell><cell>2.0154E + 02</cell><cell>2.0071E + 02</cell><cell>1.1359E + 02</cell><cell>2.0814E + 02</cell><cell>1.2615E + 02</cell><cell>2.0197E + 02</cell><cell>2.0000E + 02</cell></row><row><cell></cell><cell>1.0398E + 02</cell><cell>1.0497E + 02</cell><cell>1.0796E + 02</cell><cell>1.2904E + 02</cell><cell>1.0890E + 02</cell><cell>1.0717E + 02</cell><cell>1.0398E + 02</cell></row><row><cell></cell><cell>3.0110E + 02</cell><cell>3.5496E + 02</cell><cell>3.1318E + 02</cell><cell>3.5674E + 02</cell><cell>2.9236E + 02</cell><cell>3.0574E + 02</cell><cell>3.0000E + 02</cell></row><row><cell></cell><cell>3.0000E + 02</cell><cell>3.0000E + 02</cell><cell>1.0000E + 02</cell><cell>1.5215E + 02</cell><cell>1.1715E + 02</cell><cell>3.0000E + 02</cell><cell>1.0000E + 02</cell></row><row><cell>Win</cell><cell>2</cell><cell>1</cell><cell>1</cell><cell>0</cell><cell>5</cell><cell>2</cell><cell>8</cell></row><row><cell>D r a w</cell><cell>4</cell><cell>2</cell><cell>4</cell><cell>2</cell><cell>3</cell><cell>4</cell><cell>7</cell></row><row><cell>Total</cell><cell>6</cell><cell>3</cell><cell>5</cell><cell>2</cell><cell>8</cell><cell>6</cell><cell>15</cell></row></table><note><p>Please cite this article as: Z. Meng, J.-S. Pan, Monkey King Evolution: A new memetic evolutionary algorithm and its application in vehicle fuel consumption optimization, Knowledge-Based Systems (2016), http://dx.doi.org/10.1016/j.knosys.2016.01.009</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>Table 8</head><label>8</label><figDesc>Comparison results of median value of minimum errors in 20 runs with the same number of function evaluations. The best result of each function is emphasized in boldface and the best draw results of each function is highlighted in italic fonts.</figDesc><table><row><cell>D = 10.</cell><cell>iwPSO</cell><cell>ccPSO</cell><cell>ccPSO-local</cell><cell>FIPS_Uring</cell><cell>CLPSO</cell><cell>DNLPSO</cell><cell>MKE_v3</cell></row><row><cell>1</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell></row><row><cell>2</cell><cell>6.3806E + 04</cell><cell>1.2153E + 04</cell><cell>1.2396E + 04</cell><cell>8.4876E + 05</cell><cell>2.6012E + 05</cell><cell>1.2038E + 06</cell><cell>0</cell></row><row><cell>3</cell><cell>1.1851E + 05</cell><cell>1.9421E + 04</cell><cell>7.1724E + 00</cell><cell>4.8359E + 03</cell><cell>2.0317E-05</cell><cell>1.4948E + 06</cell><cell>0</cell></row><row><cell>4</cell><cell>3.1851E-02</cell><cell>4.8394E-05</cell><cell>1.3013E + 01</cell><cell>2.1160E + 03</cell><cell>1.8513E + 03</cell><cell>1.5871E-01</cell><cell>0</cell></row><row><cell>5</cell><cell>1.1369E-13</cell><cell>1.1369E-13</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell></row><row><cell>6</cell><cell>9 . 8 6 6 1 E -00</cell><cell>7.7159E-02</cell><cell>3.5043E-02</cell><cell>3.9566E + 00</cell><cell>1.7674E-01</cell><cell>1.0751E + 01</cell><cell>0</cell></row><row><cell>7</cell><cell>1.1007E + 01</cell><cell>1.0536E + 01</cell><cell>5.3617E-01</cell><cell>5.7795E-01</cell><cell>5.6673E + 00</cell><cell>1.9268E + 01</cell><cell>9.5508E-03</cell></row><row><cell>8</cell><cell>2.0232E + 01</cell><cell>2.0228E + 01</cell><cell>2.0215E + 01</cell><cell>2.0249E + 01</cell><cell>2.0228E + 01</cell><cell>2.0278E + 01</cell><cell>2.0478E + 01</cell></row><row><cell>9</cell><cell>4.3370E + 00</cell><cell>3.2650E + 00</cell><cell>2.8860E + 00</cell><cell>3.8699E + 00</cell><cell>2.9952E + 00</cell><cell>4.7871E + 00</cell><cell>1.7891E + 00</cell></row><row><cell>10</cell><cell>4.5315E-01</cell><cell>3.3458E-01</cell><cell>1.7096E-01</cell><cell>6.2779E-01</cell><cell>3.1643E-01</cell><cell>3.0889E-01</cell><cell>1.6972E-01</cell></row><row><cell>11</cell><cell>1.9899E + 00</cell><cell>2.9849E + 00</cell><cell>0</cell><cell>9.3415E + 00</cell><cell>0</cell><cell>1.1442E + 01</cell><cell>2.9849E + 00</cell></row><row><cell>12</cell><cell>1.4924E + 01</cell><cell>1.4924E + 01</cell><cell>7.9597E + 00</cell><cell>2.8003E + 01</cell><cell>6.0776E + 00</cell><cell>1.5919E + 01</cell><cell>1.3718E + 01</cell></row><row><cell>13</cell><cell>1.7901E + 01</cell><cell>1.9618E + 01</cell><cell>9.5999E + 00</cell><cell>2.7402E + 01</cell><cell>9.4278E + 00</cell><cell>3.2975E + 01</cell><cell>1.9161E + 01</cell></row><row><cell>14</cell><cell>1.3632E + 02</cell><cell>1.9300E + 02</cell><cell>6.1817E + 01</cell><cell>5.6135E + 02</cell><cell>0</cell><cell>4.0847E + 02</cell><cell>1.0360E + 02</cell></row><row><cell>15</cell><cell>6.6693E + 02</cell><cell>7.8020E + 02</cell><cell>4.1893E + 02</cell><cell>1.1650E + 03</cell><cell>5.1257E + 02</cell><cell>6.7508E + 02</cell><cell>1.0711E + 03</cell></row><row><cell>16</cell><cell>4.9882E-01</cell><cell>3.5291E-01</cell><cell>5.8408E-01</cell><cell>7.8826E-01</cell><cell>6.7720E-01</cell><cell>4.2404E-01</cell><cell>1.1980E + 00</cell></row><row><cell>17</cell><cell>1.1121E + 01</cell><cell>1.1216E + 01</cell><cell>1.2122E + 01</cell><cell>3.3599E + 01</cell><cell>6.9076E + 00</cell><cell>2.4595E + 01</cell><cell>1.1374E + 01</cell></row><row><cell>18</cell><cell>2.2190E + 01</cell><cell>1.9620E + 01</cell><cell>1.4389E + 01</cell><cell>3.7075E + 01</cell><cell>2.1799E + 01</cell><cell>3.5661E + 01</cell><cell>3.2489E + 01</cell></row><row><cell>19</cell><cell>5.4808E-01</cell><cell>5.3011E-01</cell><cell>4.8039E-01</cell><cell>2.0450E + 00</cell><cell>1.7803E-01</cell><cell>9.6366E-01</cell><cell>6.2560E-01</cell></row><row><cell>20</cell><cell>3.0051E + 00</cell><cell>3.4763E + 00</cell><cell>2.2794E + 00</cell><cell>2.7727E + 00</cell><cell>2.5118E + 00</cell><cell>2.8935E + 00</cell><cell>1.7738E + 00</cell></row><row><cell>21</cell><cell>4.0019E + 02</cell><cell>4.0019E + 02</cell><cell>4.0019E + 02</cell><cell>4.0019E + 02</cell><cell>1.7552E + 02</cell><cell>4.0019E + 02</cell><cell>4.0019E + 02</cell></row><row><cell>22</cell><cell>2.1424E + 02</cell><cell>2.0658E + 02</cell><cell>1.5606E + 02</cell><cell>5.4100E + 02</cell><cell>1.0606E + 02</cell><cell>7.5007E + 02</cell><cell>1.4334E + 02</cell></row><row><cell>23</cell><cell>9.5811E + 02</cell><cell>9.1353E + 02</cell><cell>4.1825E + 02</cell><cell>1.2283E + 03</cell><cell>5.7812E + 02</cell><cell>1.0252E + 03</cell><cell>9.9672E + 02</cell></row><row><cell>24</cell><cell>2.1004E + 02</cell><cell>2.0893E + 02</cell><cell>2.0708E + 02</cell><cell>2.1175E + 02</cell><cell>1.2189E + 02</cell><cell>2.1218E + 02</cell><cell>2.0700E + 02</cell></row><row><cell>25</cell><cell>2.1437E + 02</cell><cell>2.0808E + 02</cell><cell>2.0722E + 02</cell><cell>2.1309E + 02</cell><cell>1.4166E + 02</cell><cell>2.1669E + 02</cell><cell>2.0654E + 02</cell></row><row><cell>26</cell><cell>2.0002E + 02</cell><cell>2.0002E + 02</cell><cell>1.2391E + 02</cell><cell>1.3871E + 02</cell><cell>1.2402E + 02</cell><cell>2.0004E + 02</cell><cell>1.2292E + 02</cell></row><row><cell>27</cell><cell>5.0404E + 02</cell><cell>4.0503E + 02</cell><cell>3.7359E + 02</cell><cell>4.1487E + 02</cell><cell>3.2453E + 02</cell><cell>3.6286E + 02</cell><cell>3.0000E + 02</cell></row><row><cell>28</cell><cell>3.0000E + 02</cell><cell>3.0000E + 02</cell><cell>3.0000E + 02</cell><cell>3.0000E + 02</cell><cell>1.4265E + 02</cell><cell>3.0000E + 02</cell><cell>3.0000E + 02</cell></row><row><cell>W i n</cell><cell>0</cell><cell>2</cell><cell>4</cell><cell>0</cell><cell>1 0</cell><cell>0</cell><cell>1 0</cell></row><row><cell>D r a w</cell><cell>1</cell><cell>1</cell><cell>3</cell><cell>2</cell><cell>3</cell><cell>2</cell><cell>2</cell></row><row><cell>T o t a l</cell><cell>1</cell><cell>3</cell><cell>7</cell><cell>2</cell><cell>1 3</cell><cell>2</cell><cell>1 2</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Table 9</head><label>9</label><figDesc>Comparison results of mean/standard deviation of 20 runs with the same population size and number of function evaluations. The best result of each function is emphasized in boldface and the best draw results of each function is highlighted in italic fonts.Please cite this article as: Z. Meng, J.-S. Pan, Monkey King Evolution: A new memetic evolutionary algorithm and its application in vehicle fuel consumption optimization, Knowledge-Based Systems (2016), http://dx.doi.org/10.1016/j.knosys.2016.01.009</figDesc><table><row><cell>D = 10.</cell><cell>iwPSO</cell><cell>ccPSO</cell><cell>ccPSO-local</cell><cell>FIPS_Uring</cell><cell>CLPSO</cell><cell>DNLPSO</cell><cell>MKE_v3</cell></row><row><cell></cell><cell>0/0</cell><cell>5.6843E-14/1.0101E-13</cell><cell>0/0</cell><cell>0/0</cell><cell>0/0</cell><cell>0/0</cell><cell>0/0</cell></row><row><cell></cell><cell>1.4943E + 05/1.8848E + 05</cell><cell>2.0926E + 04/1.8434E + 04</cell><cell>1.1760E + 04/6.7065E + 03</cell><cell>8.3832E + 04/2.6904E + 05</cell><cell>2.8651E + 05/1.8413E + 05</cell><cell>1.6864E + 06/1.4808E + 06</cell><cell>2.2291E-14/6.8285E-14</cell></row><row><cell></cell><cell>1.6815E + 06/3.7625E + 07</cell><cell>4.1743E + 06/1.3409E + 07</cell><cell>1.7124E + 04/3.1723E + 04</cell><cell>7.7936E + 03/8.5641E + 03</cell><cell>2.4655E + 05/1.9573E + 05</cell><cell>4.5197E + 07/6.3876E + 07</cell><cell>4.5959E-03/1.7094E-02</cell></row><row><cell></cell><cell>4.5055E-02/5.1575E-02</cell><cell>1.9519E-04/5.7786E-04</cell><cell>1.8738E + 01/1.7684E + 01</cell><cell>1.9171E + 03/5.1283E + 02</cell><cell>1.8794E + 03/5.9328E + 02</cell><cell>1.7469E + 03/3.8752E + 03</cell><cell>0/0</cell></row><row><cell></cell><cell>7.9580E-14/5.3451E-14</cell><cell>7.9580E-14/5.3451E-14</cell><cell>0/0</cell><cell>0/0</cell><cell>0/0</cell><cell>1.4947E-04/3.6081E-04</cell><cell>0/0</cell></row><row><cell></cell><cell>9.3974E + 00/1.1850E + 01</cell><cell>8.6092E-01/1.6391E + 00</cell><cell>3.3451E-02/8.3316E-03</cell><cell>3.8760E + 00/5.3077E-01</cell><cell>1.6891E-01/7.0527E + 00</cell><cell>8.4198E + 00/4.6314E + 00</cell><cell>4.4064E + 00/4.8315E + 00</cell></row><row><cell></cell><cell>1.7024E + 01/2.2056E + 01</cell><cell>1.4176E + 01/1.1512E + 01</cell><cell>8.1367E-01/6.5693E-01</cell><cell>6.2262E-01/3.8467E-01</cell><cell>5.9567E + 00/1.7804E-00</cell><cell>2.3676E + 01/2.4266E + 01</cell><cell>7.0377E-01/2.1134E + 00</cell></row><row><cell></cell><cell>2.0213E + 01/5.7059E-02</cell><cell>2.0215E + 01/4.4255E-02</cell><cell>2.0225E + 01/4.5937E-02</cell><cell>2.0248E + 01/4.3374E-02</cell><cell>2.0220E + 01/5.7137E-02</cell><cell>2.0293E + 01/1.3372E-01</cell><cell>2.0457E + 01/8.6529E-02</cell></row><row><cell></cell><cell>3.9963E + 00/1.5776E + 00</cell><cell>3.4175E + 00/1.7503E + 00</cell><cell>2.8786E + 00/7.6713E-01</cell><cell>3.6769E + 00/9.6284E-01</cell><cell>3.0316E + 00/5.0727E-01</cell><cell>4.8402E + 00/2.3086E + 00</cell><cell>2.0279E + 00/1.4519E + 00</cell></row><row><cell></cell><cell>4.9989E-01/2.9794E-01</cell><cell>3.4498E-01/1.8439E-01</cell><cell>1.0603E-01/4.2707E-02</cell><cell>6.3301E-01/5.8004E-02</cell><cell>3.1259E-01/8.0042E-02</cell><cell>3.1971E-01/1.7876E-01</cell><cell>1.0887E-01/8.8611E-02</cell></row><row><cell></cell><cell>1.7411E + 00/9.6167E-01</cell><cell>3.5321E + 00/3.1210E + 00</cell><cell>9.4521E-01/1.3103E + 00</cell><cell>8.6795E + 00/3.8262E + 00</cell><cell>0/0</cell><cell>1.3929E + 01/6.0974E + 00</cell><cell>3.1214E + 00/1.8022E + 00</cell></row><row><cell></cell><cell>1.5064E + 01/5.5123E + 00</cell><cell>1.6018E + 01/6.7319E + 00</cell><cell>7.4621E + 00/2.7675E + 00</cell><cell>2.7347E + 01/3.4252E + 00</cell><cell>5.5914E + 00/1.6202E + 00</cell><cell>1.6940E + 01/8.9530E + 00</cell><cell>1.3973E + 00/6.7581E + 00</cell></row><row><cell></cell><cell>1.8486E + 01/6.5294E + 00</cell><cell>1.8805E + 01/8.2768E + 00</cell><cell>9.5653E + 00/3.7863E + 00</cell><cell>2.6346E + 01/2.6632E + 00</cell><cell>9.1990E + 00/2.2030E + 00</cell><cell>3.3325E + 01/9.9912E + 00</cell><cell>1.9075E + 01/8.6885E + 00</cell></row><row><cell></cell><cell>1.2585E + 02/9.7576E + 01</cell><cell>1.9985E + 02/1.3954E + 02</cell><cell>7.5352E + 01/5.9251E + 01</cell><cell>5.2574E + 02/1.1005E + 02</cell><cell>0/0</cell><cell>4.6460E + 00/3.1100E + 02</cell><cell>1.2560E + 02/1.1706E + 02</cell></row><row><cell></cell><cell>6.3640E + 02/2.5248E + 02</cell><cell>7.0312E + 02/2.7108E + 02</cell><cell>4.1751E + 02/1.8087E + 02</cell><cell>1.1446E + 03/1.1770E + 02</cell><cell>5.0029E + 02/8.4036E + 01</cell><cell>7.2541E + 02/2.4893E + 02</cell><cell>1.0043E + 03/3.2006E + 02</cell></row><row><cell></cell><cell>4.6522E-01/1.9935E-01</cell><cell>3.6472E-01/1.3443E-01</cell><cell>5.3634E-01/2.6191E-01</cell><cell>7.9505E-01/1.1954E-01</cell><cell>6.7487E-01/1.1728E-01</cell><cell>5.2585E-01/3.6842E-01</cell><cell>1.2167E + 00/3.5948E-01</cell></row><row><cell></cell><cell>1.1447E + 01/1.0458E + 00</cell><cell>1.1175E + 01/2.5557E + 00</cell><cell>1.1895E + 01/8.1751E-01</cell><cell>3.2791E + 01/4.0305E + 00</cell><cell>8.7542E + 00/2.4160E + 00</cell><cell>2.4732E + 01/9.2094E + 00</cell><cell>8.7361E + 00/4.3007E + 00</cell></row><row><cell></cell><cell>2.2961E + 01/6.7136E + 00</cell><cell>1.9318E + 01/5.4133E + 00</cell><cell>1.4284E + 01/1.7113E + 00</cell><cell>3.7400E + 01/3.6474E + 00</cell><cell>2.1875E + 01/2.2914E + 00</cell><cell>3.3354E + 01/8.1537E + 00</cell><cell>3.1576E + 01/8.1329E + 00</cell></row><row><cell></cell><cell>5.6809E-01/1.7289E-01</cell><cell>5.3041E-01/1.8566E-01</cell><cell>4.7916E-01/1.3250E-01</cell><cell>1.9199E + 00/3.0975E-01</cell><cell>1.5905E-01/6.0262E-02</cell><cell>1.0548E + 00/4.1233E-01</cell><cell>5.9791E-01/1.3885E-01</cell></row><row><cell></cell><cell>2.9026E + 00/6.2217E-01</cell><cell>3.1800E + 00/6.9959E-01</cell><cell>2.2852E + 00/2.6666E-01</cell><cell>2.7682E + 00/1.2796E-01</cell><cell>2.4449E + 00/2.5033E-01</cell><cell>2.9047E + 00/4.9488E-01</cell><cell>1.8075E + 00/5.01660E-01</cell></row><row><cell></cell><cell>3.6515E + 02/7.4593E + 01</cell><cell>3.9018E + 02/4.4765E + 01</cell><cell>3.6015E + 02/8.2158E + 01</cell><cell>3.7925E + 02/5.0392E + 01</cell><cell>1.5772E + 02/5.4660E + 01</cell><cell>3.8027E + 02/6.2994E + 01</cell><cell>3.7665E + 02/7.37814E + 01</cell></row><row><cell></cell><cell>1.9603E + 02/1.1511E + 02</cell><cell>2.4275E + 02/1.4075E + 02</cell><cell>1.2397E + 02/6.9959E + 01</cell><cell>5.0891E + 02/1.4705E + 02</cell><cell>1.0170E + 01/3.1552E + 00</cell><cell>8.0999E + 02/3.1771E + 02</cell><cell>9.0642E + 01/7.4036E + 01</cell></row><row><cell></cell><cell>8.6764E + 02/2.6074E + 02</cell><cell>8.7279E + 02/2.6247E + 02</cell><cell>3.9136E + 02/1.8061E + 02</cell><cell>1.2210E + 03/9.4446E + 01</cell><cell>5.6413E + 02/1.0927E + 02</cell><cell>1.2058E + 03/4.1367E + 02</cell><cell>9.8230E + 02/3.1535E + 02</cell></row><row><cell></cell><cell>2.1030E + 02/4.8793E + 00</cell><cell>2.0488E + 02/1.9098E + 02</cell><cell>2.0705E + 02/2.3643E + 01</cell><cell>2.1135E + 02/2.2063E + 00</cell><cell>1.2301E + 02/6.2363E + 00</cell><cell>2.1017E + 02/5.8131E + 00</cell><cell>2.0435E + 02/1.3891E + 01</cell></row><row><cell></cell><cell>2.1379E + 02/4.4460E + 00</cell><cell>2.0884E + 02/3.8450E + 00</cell><cell>2.0262E + 02/2.1029E + 01</cell><cell>2.1301E + 02/2.1873E + 00</cell><cell>1.4422E + 02/1.5950E + 01</cell><cell>2.1381E + 02/7.4104E + 00</cell><cell>2.0553E + 02/5.2419E + 00</cell></row><row><cell></cell><cell>1.8572E + 02/6.8971E + 01</cell><cell>1.8191E + 02/7.0252E + 01</cell><cell>1.1399E + 02/4.0556E + 00</cell><cell>1.4337E + 02/1.5172E + 01</cell><cell>1.1447E + 02/3.4262E + 00</cell><cell>1.6795E + 02/4.2324E + 01</cell><cell>1.1269E + 02/4.9148E + 00</cell></row><row><cell></cell><cell>4.5301E + 02/1.0575E + 02</cell><cell>4.0298E + 02/2.8914E + 01</cell><cell>3.6789E + 02/2.6391E + 01</cell><cell>4.1130E + 02/2.7367E + 01</cell><cell>3.2683E + 02/1.1156E + 01</cell><cell>4.1441E + 02/1.2431E + 02</cell><cell>3.2536E + 02/8.9250E + 01</cell></row><row><cell></cell><cell>3.0000E + 02/0</cell><cell>3.5024E + 02/1.2687E + 02</cell><cell>2.6000E + 02/8.2078E + 01</cell><cell>2.9260E + 02/3.3060E + 01</cell><cell>1.4081E + 02/1.7011E + 01</cell><cell>3.0000E + 02/0</cell><cell>2.9608E + 02/2.8006E + 01</cell></row><row><cell>Win</cell><cell>1</cell><cell>0</cell><cell>3</cell><cell>0</cell><cell>10</cell><cell>0</cell><cell>10</cell></row><row><cell>Draw</cell><cell>1</cell><cell>2</cell><cell>2</cell><cell>2</cell><cell>2</cell><cell>1</cell><cell>2</cell></row><row><cell>Total</cell><cell>2</cell><cell>2</cell><cell>5</cell><cell>2</cell><cell>12</cell><cell>1</cell><cell>12</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8"><head>Table 10</head><label>10</label><figDesc>Comparison results of best error in 20-Run under CEC2008 large scale benchmark functions. The best result of each function is emphasized in boldface and the best draw results of each function is highlighted in italic fonts. Comparison of different algorithm on function 1.</figDesc><table><row><cell>D = 100.</cell><cell>iwPSO</cell><cell>ccPSO</cell><cell>ccPSO-local</cell><cell>FIPS_Uring</cell><cell>CLPSO</cell><cell>DNLPSO</cell><cell>MKE_v3</cell></row><row><cell>1</cell><cell>3.2999E + 02</cell><cell>3.4106E-13</cell><cell>5.6843E-14</cell><cell>5.5998E + 04</cell><cell>1.8568E-01</cell><cell>2.3194E + 04</cell><cell>5.6843E-14</cell></row><row><cell>2</cell><cell>1.7190E + 01</cell><cell>9.8553E + 00</cell><cell>3.0533E + 01</cell><cell>7.4635E + 01</cell><cell>5.1614E + 01</cell><cell>1.3400E + 01</cell><cell>1.0605E + 00</cell></row><row><cell>3</cell><cell>8.9575E + 01</cell><cell>5.8249E + 01</cell><cell>5.1414E + 01</cell><cell>1.1137E + 10</cell><cell>1.0264E + 04</cell><cell>3.1491E + 07</cell><cell>7.6646E + 00</cell></row><row><cell>4</cell><cell>5.9698E + 01</cell><cell>2.0795E + 02</cell><cell>1.8805E + 02</cell><cell>9.5246E + 02</cell><cell>2.4207E-01</cell><cell>3.4027E + 02</cell><cell>1.1243E + 02</cell></row><row><cell>5</cell><cell>1.1728E + 00</cell><cell>1.9895E-13</cell><cell>2.8422E-14</cell><cell>5.4630E + 02</cell><cell>1.3149E-02</cell><cell>1.7210E + 02</cell><cell>2.8422E-14</cell></row><row><cell>6</cell><cell>1.7053E-13</cell><cell>1.2139E + 00</cell><cell>1.1369E-13</cell><cell>1.7362E + 01</cell><cell>1.3610E + 00</cell><cell>1.1482E + 01</cell><cell>5.6843E-14</cell></row><row><cell>7</cell><cell>-1.4703E + 03</cell><cell>-1.4345E + 03</cell><cell>-1.4028E + 03</cell><cell>-9.2989E + 02</cell><cell>-1.4314E + 03</cell><cell>-1.3972E + 03</cell><cell>-1.4733E + 03</cell></row><row><cell>Win</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>1</cell><cell>0</cell><cell>4</cell></row><row><cell>Draw</cell><cell>0</cell><cell>0</cell><cell>2</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>2</cell></row><row><cell>Total</cell><cell>0</cell><cell>0</cell><cell>2</cell><cell>0</cell><cell>1</cell><cell>0</cell><cell>6</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9"><head>Table 11</head><label>11</label><figDesc>Comparison results of mean/standard deviation of 20-Run under CEC2008 large scale benchmark functions. The best result of each function is emphasized in boldface and the best draw results of each function is highlighted in italic fonts. 4265E + 03/1.9730E + 01 -1.4005E + 03/2.1153E + 01 -1.3820E + 03/1.2110E + 01 -8.9138E + 02/1.6633E + 01 -1.4219E + 03/6.5729E + 01 -1.3972E + 03/1.3744E + 02 -1.Comparison of different algorithms on function 11.</figDesc><table><row><cell cols="2">D = 100. iwPSO</cell><cell>ccPSO</cell><cell>ccPSO-local</cell><cell>FIPS_Uring</cell><cell>CLPSO</cell><cell>DNLPSO</cell><cell>MKE_v3</cell></row><row><cell>1</cell><cell>5.0213E + 02/1.9858E + 02</cell><cell>6.2272E-12/2.3814E-11</cell><cell>5.6843E-14/0</cell><cell>6.4343E + 04/4.0084E + 03</cell><cell>2.4108E-01/3.4933E-02</cell><cell>3.7632E + 04/7.6068E + 03</cell><cell>5.6843E-14/0</cell></row><row><cell>2</cell><cell>1.9779E + 01/1.5107E + 00</cell><cell>1.5239E + 01/3.4556E + 00</cell><cell>3.4727E + 01/2.1694E + 00</cell><cell>7.8362E + 01/1.8366E + 00</cell><cell>5.5218E + 01/1.6941E + 00</cell><cell>3.4593E + 01/2.2565E + 01</cell><cell>2.3887E + 00/8.6376E-01</cell></row><row><cell>3</cell><cell>1.9831E + 02/7.5928E + 01</cell><cell>1.2882E + 02/4.7968E + 01</cell><cell>1.0531E + 02/2.2950E + 01</cell><cell>1.5521E + 10/1.8620E + 09</cell><cell>1.2970E + 04/1.4926E + 03</cell><cell>3.3977E + 08/3.0349E + 08</cell><cell>4.2294E + 01/2.8079E + 00</cell></row><row><cell>4</cell><cell>9.4666E + 01/2.1137E + 01</cell><cell>3.6256E + 02/6.1874E + 01</cell><cell>2.3760E + 02/2.1194E + 01</cell><cell>1.0388E + 03/2.8191E + 01</cell><cell>1.0011E + 00/3.0238E-01</cell><cell>6.9793E + 02/2.2689E + 02</cell><cell>1.3934E + 02/2.1267E + 01</cell></row><row><cell>5</cell><cell>2.3165E + 01/6.8379E-01</cell><cell>2.8839E-02/4.2480E-02</cell><cell>2.8422E-14/0</cell><cell>5.9223E + 02/2.4041E + 01</cell><cell>2.0526E-02/3.6250E-03</cell><cell>2.7306E + 02/8.2656E + 01</cell><cell>4.9286E-04/2.2042E-03</cell></row><row><cell>6</cell><cell>2 . 1 3 1 6 E -13/2.3510E-14</cell><cell>3.8780E + 00/5.4874E + 00</cell><cell>1.3216E-13/1.3908E-14</cell><cell>1.7855E + 01/1.8430E-01</cell><cell>1.5787E + 00/1.2246E-01</cell><cell>1.4561E + 01/1.8313E + 00</cell><cell>8.5265E-14/2.3099E-14</cell></row><row><cell>7</cell><cell cols="7">-1.4398E + 03/2.0909E + 01</cell></row><row><cell>Win</cell><cell>0</cell><cell>0</cell><cell>1</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>4</cell></row><row><cell>Draw</cell><cell>0</cell><cell>0</cell><cell>1</cell><cell>0</cell><cell>1</cell><cell>0</cell><cell>1</cell></row><row><cell>Total</cell><cell>0</cell><cell>0</cell><cell>2</cell><cell>0</cell><cell>1</cell><cell>0</cell><cell>5</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>Fig. 13.</cell><cell></cell><cell></cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>R(r 1 , r</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>, …, r d ) is the bound restraints. As the search domain is usually symmetric, we only need the maximum value of each dimension for the bound restraints, and r d is the maximum value of d-th dimension. Please cite this article as: Z. Meng, J.-S. Pan, Monkey King Evolution: A new memetic evolutionary algorithm and its application in vehicle fuel consumption optimization, Knowledge-Based Systems (2016), http://dx.doi.org/10.1016/j.knosys.2016.01.009</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_2"><p>http://www.myengineeringworld.net/2012/05/optimal-speed-for-minimum-fuel. html.Please cite this article as: Z. Meng, J.-S. Pan, Monkey King Evolution: A new memetic evolutionary algorithm and its application in vehicle fuel consumption optimization, Knowledge-Based Systems (2016), http://dx.doi.org/10.1016/j.knosys.2016.01.009</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_3"><p>CLPSO code and DNLPSO code are from Prof. Ponnuthurai Nagaratnam Suganthan. Please cite this article as: Z. Meng, J.-S. Pan, Monkey King Evolution: A new memetic evolutionary algorithm and its application in vehicle fuel consumption optimization, Knowledge-Based Systems (2016), http://dx.doi.org/10.1016/j.knosys.2016.01.009</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Particle swarm optimization, Proceedings of IEEE</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Eberhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Neural Networks</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="1942" to="1948" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A new optimizer using particle swarm theory</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Eberhart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Sixth International Symposium on Micro-Machine and Human Science</title>
		<meeting>the Sixth International Symposium on Micro-Machine and Human Science</meeting>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="volume">1</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A modified particle swarm optimizer</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Eberhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1998 IEEE International Conference on Evolutionary Computation Proceedings, 1998 and IEEE World Congress on Computational Intelligence</title>
		<meeting>the 1998 IEEE International Conference on Evolutionary Computation Proceedings, 1998 and IEEE World Congress on Computational Intelligence</meeting>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Comparing inertia weights and constriction factors in particle swarm optimization</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Eberhart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Shi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2000 Congress on Evolutionary Computation</title>
		<meeting>the 2000 Congress on Evolutionary Computation</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2000">2000. 2000</date>
			<biblScope unit="volume">1</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">The particle swarm-explosion, stability, and convergence in a multidimensional complex space</title>
		<author>
			<persName><forename type="first">M</forename><surname>Clerc</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Evol. Comput</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="58" to="73" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Small worlds and mega-minds: effects of neighborhood topology on particle swarm performance</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1999">1999. 1999</date>
			<biblScope unit="volume">99</biblScope>
		</imprint>
	</monogr>
	<note>Proceedings of the 1999 Congress on Evolutionary Computation</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Mendes</surname></persName>
		</author>
		<title level="m">Population Structure and Particle Swarm Performance</title>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Particle swarm optimiser with neighbourhood operator</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">N</forename><surname>Suganthan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1999 Congress on Evolutionary Computation</title>
		<meeting>the 1999 Congress on Evolutionary Computation</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1999">1999. 1999</date>
			<biblScope unit="volume">99</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Watch thy neighbor or how the swarm can learn from its environment</title>
		<author>
			<persName><forename type="first">R</forename><surname>Mendes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Neves</surname></persName>
		</author>
		<idno>SIS03</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Swarm Intelligence Symposium</title>
		<meeting>the Swarm Intelligence Symposium</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2003">2003. 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Population Topologies and Their Influence in Particle Swarm Performance</title>
		<author>
			<persName><forename type="first">R</forename><surname>Mendes</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
		<respStmt>
			<orgName>Universidade do Minho</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Dissertation</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Dynamic multi-swarm particle swarm optimizer</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">J</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">N</forename><surname>Suganthan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Swarm Intelligence Symposium</title>
		<meeting>IEEE Swarm Intelligence Symposium</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2005">2005. 2005</date>
		</imprint>
	</monogr>
	<note>SIS 2005</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Comprehensive learning particle swarm optimizer for global optimization of multimodal functions</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">J</forename><surname>Liang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Evol. Comput</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="281" to="295" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A dynamic neighborhood learning based particle swarm optimizer for global numerical optimization</title>
		<author>
			<persName><surname>Md</surname></persName>
		</author>
		<author>
			<persName><surname>Nasir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Inf. Sci</title>
		<imprint>
			<biblScope unit="volume">209</biblScope>
			<biblScope unit="page" from="16" to="36" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Optimal cycle program of traffic lights with particle swarm optimization</title>
		<author>
			<persName><forename type="first">J</forename><surname>Garcia-Nieto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">C</forename><surname>Olivera</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Alba</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Evol. Comput</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="823" to="839" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Complex network clustering by multiobjective discrete particle swarm optimization based on decomposition</title>
		<author>
			<persName><forename type="first">M</forename><surname>Gong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Evol. Comput</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="82" to="97" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Optimizing the echo state network with a binary particle swarm optimization algorithm</title>
		<author>
			<persName><forename type="first">H</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Yan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Knowl.-Based Syst</title>
		<imprint>
			<biblScope unit="volume">86</biblScope>
			<biblScope unit="page" from="182" to="193" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A multi-attribute decision-making model for the robust classification of multiple inputs and outputs datasets with uncertainty</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">Y</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I.-H</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Appl. Soft Comput</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="page" from="176" to="189" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">An improved immigration memetic algorithm for solving the heterogeneous fixed fleet vehicle routing problem</title>
		<author>
			<persName><forename type="first">O</forename><surname>Matei</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Neurocomputing</title>
		<imprint>
			<biblScope unit="volume">150</biblScope>
			<biblScope unit="page" from="58" to="66" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A formal basis for the heuristic determination of minimum cost paths</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">E</forename><surname>Hart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">J</forename><surname>Nilsson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Raphael</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Syst. Sci. Cybern</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="100" to="107" />
			<date type="published" when="1968">1968</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">A note on two problems in connexion with graphs</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Dijkstra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Numer. Math</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="269" to="271" />
			<date type="published" when="1959">1959</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Real-parameter Black-box Optimization Benchmarking</title>
		<author>
			<persName><forename type="first">H</forename><surname>Nikolaus</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Finck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ros</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Auger</surname></persName>
		</author>
		<idno>&lt;inria-00362633&gt;</idno>
	</analytic>
	<monogr>
		<title level="m">Oiseless Functions Definitions</title>
		<imprint>
			<date type="published" when="2009">2009. 2009</date>
		</imprint>
	</monogr>
	<note type="report_type">Research Report</note>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Problem Definitions and Evaluation Criteria for the CEC 2013 Special Session on Real-parameter Optimization</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">J</forename><surname>Liang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">201212. 2013</date>
			<pubPlace>Zhengzhou, China; Singapore</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Computational Intelligence Laboratory, Zhengzhou University ; Nanyang Technological University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Benchmark Functions for the CEC2008 Special Session and Competition on Large Scale Global Optimization</title>
		<author>
			<persName><forename type="first">K</forename><surname>Tang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature Inspired Computation and Applications Laboratory</title>
		<imprint>
			<biblScope unit="page" from="153" to="177" />
			<date type="published" when="2007">2007</date>
			<pubPlace>USTC, China</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">A cooperative approach to particle swarm optimization</title>
		<author>
			<persName><forename type="first">F</forename><surname>Van Den Bergh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">P</forename><surname>Engelbrecht</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Evol. Comput</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="225" to="239" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Performance evaluation of SUVnet with realtime traffic data</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">Y</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">E</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Veh. Technol</title>
		<imprint>
			<biblScope unit="volume">56</biblScope>
			<biblScope unit="page" from="3381" to="3396" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">A simple and accurate global optimizer for continuous spaces optimization, Genetic and Evolutionary Computing</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Meng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">S</forename><surname>Pan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015">2015</date>
			<publisher>Springer International Publishing</publisher>
			<biblScope unit="page" from="121" to="129" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
