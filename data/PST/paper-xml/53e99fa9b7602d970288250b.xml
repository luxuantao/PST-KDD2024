<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Designing Information Systems in Social Context: A Goal and Scenario Modelling Approach</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Lin</forename><surname>Liu</surname></persName>
							<email>liu@cs.toronto.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Toronto</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Eric</forename><surname>Yu</surname></persName>
							<email>yu@fis.utoronto.ca</email>
							<affiliation key="aff1">
								<orgName type="department">Faculty of Information Studies</orgName>
								<orgName type="institution">University of Toronto</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Designing Information Systems in Social Context: A Goal and Scenario Modelling Approach</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">A700E9C6E65F1DC3FE18741B108735C5</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T09:57+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>In order to design a better information system, a designer would like to have notations to visualize how design experts' know-how can be applied according to one's specific social and technology situation. We propose the combined use of a goal-oriented language GRL and a scenario-oriented notation UCM for representing design knowledge of information systems. Goal-oriented modelling is used throughout the requirements and design process. In GRL, goals are used to depict business objectives and system requirements, both functional and non-functional. Tasks are used to represent different ways for achieving goals. Means-ends reasoning is used to explore alternative solutions and their operationalizations into implementable system constructs. Social context is modelled in terms of dependency relationships among agents and roles. Scenarios expressed in UCM are used to describe elaborated business processes or workflow. The complementary use of goal-oriented modelling with GRL and scenario modelling with Use Case Maps is illustrated with an example of designing a web-based training system.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>An information system is a social artifact serving the different interests of many stakeholders. Thus, inevitably, the design of an information system is a social activity, which involves understanding the social, organizational context of the system-to-be and making design decisions according to the limitations of environment and technology. As more and more software and information systems adopt Internet technologies and protocols for greater openness and interoperability, many new requirements appear. Unlike the closed computing environments for which most of the traditional information systems development methods were designed, the open, dynamic and almost unbounded nature of the Internet presents many new challenges and complexities. T he design of new information systems, particularly Internet applications and web-based systems, are increasingly based on reusable components and flexible combination of existing patterns, which are hard to deal with without effective models and decision support tools.</p><p>In requirements engineering, a goal-oriented modelling approach has been recognized to be useful <ref type="bibr" target="#b11">[12]</ref>  <ref type="bibr" target="#b17">[18]</ref>. In general, goals describe the objectives that the system should achieve through the cooperation of actors in the software-to-be and in the environment <ref type="bibr" target="#b17">[18]</ref>. It captures "why" the data and functions are there, and whether they are sufficient for achieving the high-level objectives that arise naturally in the requirements engineering process. The incorporation of explicit goal representations in requirement models provides a criterion for requirements completeness, i.e., the requirements can be judged as complete if they are sufficient to establish the goals that they are refining.</p><p>Scenario-oriented models present possible ways in which a system can be used to accomplish some desired functions or implicit purpose. Typically, it is a temporal sequence of interaction events between the intended software and its environment (composed of other systems and humans). A scenario could be expressed in various forms including narrative text, structured text, images, animation or simulations, charts, maps, etc. The content of a scenario could describe system-environment interactions or events inside a system. Scenarios have been used for various purposes -as means to elicit or validate system requirements, as concretization of use-oriented system descriptions, or as bases for test cases <ref type="bibr" target="#b12">[13]</ref>[17] <ref type="bibr" target="#b21">[22]</ref>. Scenarios have also become popular in other fields, notably human-computer interaction and strategic planning <ref type="bibr" target="#b2">[3]</ref> <ref type="bibr" target="#b8">[9]</ref>.</p><p>While goal modelling and scenario modelling each offers important capabilities, neither is adequate on its own for fully support requirements and design processes. Goals are sometimes abstract and implicit and can be complemented by concrete and explicit scenarios. Scenarios are usually partial and incomplete. Their inadequacies in coverage can be revealed through goal modelling and means-ends reasoning. Scenarios provide the snapshots of possible design solutions or fragments of solutions. Their concreteness facilitates the communication process between stakeholders and implementers of the system. On the other hand, goal modelling supports the explicit identification of alternatives and design tradeoffs. The proposed combined approach therefore draws on the complementary strengths of goals and scenarios to facilitate decision-making at all stages from early requirements to fairly detailed design. At the same time, it makes all the decision making process traceable.</p><p>The goal-oriented requirements language GRL <ref type="bibr" target="#b5">[6]</ref>  <ref type="bibr" target="#b20">[21]</ref> is designed to support goal and agent-oriented modelling and reasoning, providing guidance to the design process. In this paper, we propose the combined use of GRL with the scenario-based notation Use Case Maps (UCM) <ref type="bibr" target="#b1">[2]</ref>. UCM allows the behavioral aspects of the designed system to be visualized at varying degrees of abstraction and levels of detail. The two notations complement each other to enable technical solutions to be described and elaborated, and evaluated according to their contributions to the objectives of different stakeholders, guiding the design towards viable solutions. While there are other ways of expressing scenarios, such as Use Cases and Activity Diagrams in UML, Message Sequence Charts, etc., we choose UCM to complement GRL due to following considerations. UCM intends to straddle requirements and high-level architectural design stages, which closely matches with the scope of GRL. UCM supports the different levels of abstraction (with stub and plug-in mechanism) of system architecture, which complements the multi-level goal modelling of GRL.</p><p>Information systems design is a knowledge-intensive process. It involves domainspecific design knowledge, generic software design knowledge and knowledge about the specific situations of the current design. GRL and UCM together provide an ontology for expressing such knowledge. For example, consider the design of a webbased training system. Domain-specific know-how on picking a lesson structure can be represented as UCM scenarios of common lesson structures. Generic software design knowledge on the possible collaboration mechanisms for a web-based system is captured as a GRL means-ends structure that connects the possible mechanisms (email, newsgroup, chat, screen-sharing and audio/video conferencing) to the goal " Determine Collaboration Mechanism" .</p><p>Basic concepts of GRL are introduced in section 2. In section 3, we summarize our approach of using GRL to incrementally model requirements and design. In section 4, a case study in the e-training domain is used to illustrate the proposed approach. In section 5, the combined use of GRL and UCM is introduced. In section 6, related work is discussed. Conclusions and future work are in section 7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">The GRL Modelling Notation</head><p>The Goal-oriented Requirements Language (GRL) <ref type="bibr" target="#b5">[6]</ref> [21] is a language for supporting goal and agent oriented modelling and reasoning about requirements, with an emphasis on dealing with non-functional requirements (NFRs) <ref type="bibr" target="#b3">[4]</ref>. It provides constructs for expressing various types of concepts that are useful for supporting the requirements and high-level design process. There are three main categories of concepts: intentional elements, intentional links, and actors. GRL elements and links are intentional in that they are used in models that answer questions about intents, motivations and rationales, such as: § Why are particular behaviors, information and structures are chosen to be included in the system requirements? § What are the alternatives to be considered? § What criteria are to be used to deliberate among alternative options? § What are the reasons for choosing one alternative over others?</p><p>A GRL model can be composed of either a global goal model, or a series of goal models distributed amongst several actors. If a goal model includes more than one actor, then the intentional dependency relationships between actors can also be represented and reasoned about.</p><p>The intentional elements in GRL are goal, task, softgoal, resource and belief. A goal is a condition or state of affairs in the world that the stakeholders would like to achieve. A goal can be achieved in different ways, prompting alternatives to be considered. A goal can be either a business goal or a system goal. Business goals are about the business or state of the affairs the individual or organization wishes to achieve in the world. System goals are about what the target system should achieve, which, generally, describe the functional requirements of the target information system. In GRL graphical representation, goals are represented as a rounded rectangle with the goal name inside.</p><p>A softgoal is typically a quality (or non-functional) attribute on one of the other intentional elements. A softgoal is similar to a (hard) goal except that the criteria for whether a softgoal is achieved are not clear-cut and a priori. It is up to the developer to judge whether a particular state of affairs in fact sufficiently achieves the stated softgoal. Non-functional requirements (NFRs), such as performance, security, accuracy, reusability, interoperability, time to market and cost are often crucial for the success of an information system. In GRL, non-functional requirements are represented as softgoals and addressed as early as possible in the software lifecycle. They should be properly modelled and addressed in design reasoning before a commitment is made to a specific design choice.</p><p>In the GRL graphical representation, a softgoal, which is "soft" in nature, is shown as an irregular curvilinear shape with the softgoal name inside.</p><p>A task specifies a particular way of doing something. It may be decomposed into a combination of subgoals, subtasks, resources and softgoals. These sub-components specify a particular course of action while still allowing some freedom. Tasks are used to incrementally specify and refine solutions in the target system. They are used to achieve goals or to "operationalize" softgoals. These solutions provide operations, processes, data representations, structuring, constraints and agents in the target system to meet the needs stated in the goals and softgoals. In GRL graphical representation, tasks are represented as a hexagon with the task name inside.</p><p>A resource is a (physical or informational) entity, which may serve some purpose. From the viewpoint of intentional analysis, the main concern with a resource is whether it is available. Resources are shown as rectangles in GRL graphical representation.</p><p>The Belief construct is used to represent design assumptions and relevant environmental conditions. It allows domain characteristics to be considered and properly reflected in the decision making process, hence facilitating later review, justification and change of the system, as well as enhancing traceability. Beliefs are shown as ellipses in GRL graphical representation.</p><p>Intentional links in GRL include means-ends, decomposition, contribution, correlation and dependency links. Means-ends links (</p><p>) are used to describe how goals can be achieved. Each task connected to a goal by a means-ends link is one possible way of achieving the goal. Decomposition links ( ) define the subcomponents of a task. A contribution link (→) describes the impact that one element has on another. A contribution can be negative or positive and can be of different extents. The extent is judged to be partial or sufficient based on Simon's concept of satisficing <ref type="bibr" target="#b15">[16]</ref>. Accordingly, contribution link types include: help (positive and partial), make (positive and sufficient), hurt (negative and partial), break (negative and sufficient), some+ (positive of unknown extent), some-(negative of unknown extent). Correlation links (dashed contribution links) describe the side effects of the existence of one element to others. Dependency links (</p><p>) describe the inter-agent dependent relationships.</p><p>An actor is an active entity that carries out actions to achieve its goals by exercising know-how. It is an encapsulation of intentionally, rationality and autonomy <ref type="bibr" target="#b19">[20]</ref>. Graphically, an actor is represented as a circle, and may optionally have a dotted boundary, with intentional elements inside. To model complex relationships among social actors, we further define the concepts of agents (circle with a line at top), roles (circle with a line at bottom), and positions (four-leaf flower), each of which is an actor in a more specialized sense.</p><p>An agent is an actor with concrete, physical manifestations, such as a human individual or a machine. A role is an abstract characterization of the behavior of a social actor within some specialized context or domain of endeavor. A position is intermediate in abstraction between a role and an agent. It is a set of roles typically played by one agent. Positions can cover roles. Agents can occupy positions. Agents can also play roles directly. The " INS" construct represents the instance-and-class relation. The " ISA" construct expresses conceptual generalization/ specialization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">A Goal and Scenario Modelling Design Method</head><p>The proposed goal and scenario modelling approach was motivated by the need in the telecommunications domain for a notation for expressing and analyzing user requirements <ref type="bibr" target="#b22">[23]</ref>. User requirements need to address behavior as well as quality attributes. While UCM is a useful requirement-level notation for telecommunications software <ref type="bibr" target="#b0">[1]</ref>, it does not provide systematic support for dealing with business objectives, goals, and non-functional requirements (NFRs) during requirement analysis and their achievement during subsequent design. NFRs are requirements such as performance constraints, systems operational costs, reliability, maintainability, portability, interoperability, robustness, and the like. In software development practice, many NFRs are stated only informally, making them difficult to analyse, specify and enforce during software development and to be validated by the user once the final system has been built. Goals and NFRs, however, do play a crucial role during system development, serving as selection criteria for choosing among alternatives during requirements analysis, for example, determining where the system boundaries should be and what functional requirements to include in the system.</p><p>Many of the alternative approaches to deal with NFRs originated from the technical work related to quality metrics. Such approaches attempt to quantify NFRs and then measure to what extent an existing system or parts of it meet the desired non-functional requirements. Useful metrics exist only for a small number of NFRs such as performance, reliability, software complexity, and development process maturity. Moreover, metric-based approaches are hard to use. During analysis and design there are many competing requirements, many of which are not quantitative. The GRL notation deals with NFRs and goals during the process of requirements analysis and system design; it allows for the expression of conflict between goals, of decisions that resolve conflicts and of the rationale for the trade-off decisions. The agent aspect of GRL helps in considering multiple stakeholders' concerns simultaneously.</p><p>To support early requirements engineering and high-level system design, our goal modelling approach aims to elicit, refine and operationalize customer-specific requirements incrementally based on the knowledge of domain experts, until a satisfactory design is found. In this process, the overall objectives of a system have to be clarified, the concrete behaviors and constraints of the system-to-be need to be elaborated, and functions should be assigned to responsible units in that system.</p><p>The goal and agent oriented modelling in GRL focuses on answering the "why" questions of requirements (such as "why does the system need to be redesigned?" or "why is the interface designed as it is?"). The strength of GRL modelling is that it puts the design in a broader context, it considers from different stakeholders' viewpoints, and seeking for a balanced solution for all. Another advantage of GRL is that not only functional requirements but also non-functional requirements (in other words, the quality requirements) are dealt with.</p><p>While goal-orientation can be highly useful for requirements engineering, goals are sometimes too abstract to capture all at once. Often they are discovered and become explicit only after a deeper understanding of the system has been achieved. In particular, users and developers often find it natural to think about operational scenarios about using the hypothetical system. More conventional requirements and design notations typically answers the "what" questions such as "what should the system do to provide activity centered electronic lessons?" or "what is the process of giving learner customized tutorial?"</p><p>The general steps of the proposed approach are illustrated in Figure <ref type="figure" target="#fig_0">1</ref>. From the flowchart, we can see that goal modelling and scenario modelling proceed in parallel, and they can interact at certain points in each round. In the goal-oriented modelling process, actor dependency models are first created, then the original business objectives and system requirements are identified and operationalized, until some concrete design options are obtained. These design options are explored with UCM scenarios. On the UCM side, business process or workflow, as well as responsibility assignment are visualized and analyzed. On both sides, new requirements may become evident by asking why questions, and be entered into the GRL model. When all scenarios are acceptable, and all goals and softgoals are sufficiently fulfilled, the solution fragments for each independent goal can be assembled to form a complete design for the intended system. Elaborated descriptions of use cases, processes and information flow are also obtained.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Case Study: Designing a Web-Based Training System</head><p>The proposed goal and scenario modelling approach is best used to address cases where there are multi-stakeholders with diverse concerns and expectations, leading to complex interactions among functional and non-functional requirements that need to be balanced and traded off. There should be well-established domain knowledge bases that the current design can benefit from. The complexity of the case should be such that there are many decision points at which multiple alternatives need to be considered, and where at least some of the alternatives can be visualized as scenarios. The proposed approach supports both the design of new systems, and the reengineering of legacy systems, as suggested by the iterative design process shown in the flowchart of section 3.</p><p>To illustrate the application of the goal and scenario modelling approach, we use the example of designing a Web-Based Training (WBT) System, adapted from <ref type="bibr" target="#b7">[8]</ref>. Web-based information system usually involves multiple stakeholders with different interests. These stakeholders, modelled as intentional agents, impose complicated functional and quality requirements on the future system, which need to be considered and evaluated systematically according to the prospective solutions.</p><p>Starting from the identification of the major stakeholders of the domain, we explain in sequence how to capture the original business objectives of the stakeholders, refine and operationalize these objectives into applicable design alternatives with GRL.</p><p>Step 1: Modelling social entities and their relationships Placing system design within its broader social context <ref type="bibr" target="#b18">[19]</ref> (as in Figure <ref type="figure">3</ref>), the proposed modelling approach helps to address the following questions systematically: Who are the major players in the business domain? What are the generic relationships In the Web-Based Training example, some of the major players are course provider, learner, technology provider, knowledge provider, and instructor. These are modelled as roles because they embody abstract capabilities and wants (Figure <ref type="figure" target="#fig_1">2</ref>). Learner depends on Instructor to Give Instructions and Feedback. Instructor depends on Course Provider to Be Employed. Course Provider depends on support from Technology Provider, Knowledge Provider and Pedagogical Knowledge Provider. Square brackets are used to include parameters necessary for identifying the actors. The agent WBT/E-Learning Consultant (a person) plays both the roles of Technology Provider and Pedagogical Knowledge Provider.</p><p>Apart from the three instance level agents -Mortgage Bankers Association of America, Mortgage Banker Jim, and William Horton Consulting, the model represents the common practices of the e-training domain, and is a reusable domain knowledge model. Mortgage Bankers Association of America plays the role of Course Provider as well as the role of Knowledge Provider, so it inherits all the dependency relationships of the two abstract roles in reality.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Step 2: Modelling business objectives</head><p>After the main players are identified, their high-level business objectives will be elicited, i.e., what they hope to accomplish for their organization, their sponsors, or their financial backers by using the information system under consideration. Thus, these objectives and requirements will be modelled as primitive goals or softgoals of the actors. We use (hard) goals to represent functional requirements, and softgoals for non-functional requirements.</p><p>In our case study, the Mortgage Bankers Association of America playing C ourse Provider has two specific targets in mind: § Earn $200,000 by selling courses § Reduce costs of training by 50% over the next year In the initial GRL goal model in Figure <ref type="figure">3</ref>, they are represented as softgoals (we Figure <ref type="figure">3</ref>: Business objectives represented as softgoals in original goal model consider them as variations of the non-functional requirement "profitability"). From common-sense knowledge, we also know that a course provider's primitive goal is to provide course, thus it is added as a goal of the corresponding role.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Step 3: Generating Design Alternatives</head><p>Starting from the initial goals and softgoals, we proceed to explore the alternative business processes, methods or technologies used in this industry to achieve these goals. A specific way for achieving a goal is represented as a task, and it is connected to the corresponding goal by a means-ends link, while being connected to a softgoal by contribution links. When refining a high level goal/softgoal, we may use decomposition, specialization, substitution, or other refinement techniques applicable to the domain, until operational design solutions are found <ref type="bibr" target="#b3">[4]</ref>.</p><p>In Figure <ref type="figure" target="#fig_2">4</ref>, the two softgoals of the Mortgage Banker's Association of America can be reduced into two general softgoal applicable to all Course Providers -Low Cost and Customer Satisfaction. The two softgoals, together with the goal of Course Be Provided, are refined individually. Since the two most obvious choices for giving a course are to provide Conventional Classroom Training, or Web-Based Training(WBT), a first design choice is made between them. From the two initial softgoals, we can see that cost is more critical for the stakeholder. Thus, the softgoal Low Cost is refined in detail. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Step 4: Evaluating Design Alternatives: Contributions to Softgoals</head><p>To evaluate how the design alternatives are serving the specific business objectives and the quality expectations of stakeholders, contributions of the design options to the softgoal will be explicitly modelled. In addition to analyzing the solutions within the boundary of one actor, we can also evaluate the two solutions according to their impacts to the relationships among actors. This will be illustrated in Step 7. The result of this initial analysis suggests that WBT may be a better option for the current stakeholder. The upper part of this model (the two softgoals and the help relationship between them) is only applicable to the current system, while the lower part (the structure showing the different resource consumption of the two solutions) depicts generic domain knowledge reusable for all course providers of web-based training system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Step 5: Elaborating on the Candidate Solution</head><p>Having selected one solution over the other, we need to evaluate the advantages and disadvantages of the candidate solution further. In this round of evaluation, other softgoals of concern are considered, to whom the candidate solution's contributions are investigated.</p><p>GRL evaluates the satisfaction of a softgoal via a qualitative labeling procedure <ref type="bibr" target="#b3">[4]</ref>. The label of a high level node is computed from the label of low level nodes and the type of contribution from these nodes, with possible user input. As one can hardly find a perfect technology, or a perfect situation that a technology can apply to without any change, a best solution, for many needs, may be a hybrid combining the best features of different solutions. In this case, alternative solutions need to be further decomposed and reassembled. For disadvantages indicated by negative links or labels, mitigation measures are sought to strengthen the current solution. The labels are defined as follows: Satisficed ( ), Weakly Satisficed ( ), Conflict/irresolvable ( ), Undecided ( ), Weakly Denied ( ), Denied ( ).</p><p>The corresponding goal model in Figure <ref type="figure">6</ref> shows that the advantages of WBT include Costs Saved, Better Teaching Techniques Enabled, Collaborative Learning Promoted, and Effective Learning Technologies Used. Consequently, Quality of Learning Improved is weakly satisficed (represented with a check mark with a dot underneath). It also contributes positively to Globalization, Flexibility, and both help the Learner's Satisfied, as the right hand side of the model suggests. On the left side, unfortunately, negative contributions are also revealed, e.g., the inherent High Dropout Rates and More Efforts on Conversion and Electronic Delivery of WBT hurts the high level softgoals of the stakeholder. These negative contributions make the two high level softgoals be labeled as irresolvable (denoted by a thunderbolt symbol) -there are both strong positive contributions and strong negative contributions.</p><p>To weaken the negative contributions, countermeasures such as Require Commitment are added in the design. They are represented as tasks with negative correlation links (the dotted lines with arrows) to the unfavorable contributions in the graph. Adding these countermeasures will weaken the impact of the softgoals with negative contributions. In such a case, although the contributions from these softgoals are still undecided, high-level softgoals are already judged as weakly satisficed based on the system developer's opinion (Figure <ref type="figure" target="#fig_4">7</ref>).  Step 7: Evaluating Impacts on Dependencies Now we come to the decision making process for Choose e-Course Pattern. In Figure <ref type="figure">8</ref>, two alternatives are generated and connected to the parent node with means-ends link: Instructor-led Pattern and Learner-led Pattern. In addition to the kind of analysis shown in step 4, we can also evaluate the alternative solutions according to their impacts to social relationships. The dependency links pointing from these two tasks tell us that Figure <ref type="figure">8</ref>. Refinement of design and decision-making based on social relations the two solutions lead to quite different role characteristics -the Instructor is the driving force in Instructor-led Pattern, but only Act As an Optional Learning Resource in Learner-led Pattern. Conversely, the dependencies pointing to the two task nodes show that they have different capabilities and qualities to offer. Learner-led Pattern favors Lower Cost. Learner enjoys more Flexibility on their schedule and learning content, and they also appreciate the Anonymity and Privacy. In Instructor-led Pattern, Instructor can often Prompt Answer to Questions, and the Learner Be More Inspired or Motivated. Thus, corresponding to the requirements of different kinds of courses, different pattern can be adopted.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Scenario-Based analysis</head><p>As the goal-oriented design proceeds, finer-grained analysis needs to be conducted. The scenario-based notation UCM comes into use.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">UCM</head><p>Use Case Maps (UCM) <ref type="bibr" target="#b1">[2]</ref> provide a visual notation for scenarios, which is proposed for describing and reasoning about large-grained behavior patterns in systems, as well as the coupling of these patterns. The UCM notation employs scenario paths to illustrate causal relationships among responsibilities. It provides an integrated view of behavior and structure by allowing the superimposition of scenario paths on a structure of abstract components. Scenarios in UCM can be structured and integrated incrementally. This enables reasoning about and detection of potentially undesirable interactions between scenarios and components.</p><p>Basic elements of UCMs are start points, responsibilities, end points and components. Start points (filled circles) represent pre-conditions or triggering causes. End points (bars) represent post-conditions or resulting effects. Responsibilities (crosses) represent actions, tasks or functions to be performed. Components (boxes) represent entities or objects composing the system. Use case Paths (wiggle lines) connect start points, responsibilities and end points. A responsibility is bound to a component when the cross is inside the component. In this case, the component is responsible for performing the action, task, or function represented by the responsibility.</p><p>When maps become too complex to be represented as a single UCM, a mechanism for defining and structuring sub-maps becomes necessary. A top level UCM, referred to as a root map, can include containers (called stubs) for sub-maps (called plug-ins). Stubs are represented as diamonds. Stubs and plug-ins are used to solve the problems of layering and scaling or the dynamic selection and switching of implementation details. Other notational elements include OR-join, OR-fork, AND-join, AND-fork, timer, abort, failure point, and shared responsibilities. A detailed introduction to and examples of these concepts can be found in <ref type="bibr" target="#b1">[2]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Combined use of GRL and UCM</head><p>Although UCM can represent system designs in a high-level way, the tradeoffs between alternatives, and the intentional reasoning behind design decisions cannot be explicitly shown. In our approach, we couple GRL with UCM to provide support for reasoning about scenarios by establishing correspondences between intentional GRL elements and functional components and responsibilities in the scenario models of UCM. The complementary modelling of goals and scenarios aid in identifying further goals and additional scenarios (and scenario fragments) important to system design, thus contributing to the completeness and accuracy of requirements, as well as to the quality of system design.</p><p>Continuing with the design of web-based training system in section 4, we now consider the implementation of the goal Pick Lesson Structure. The alternative structures are denoted as task nodes in the bottom of the GRL model in Figure <ref type="figure">9</ref>. It is hard to tell which structure is more appropriate only by doing strategic, intentional analysis with GRL. In order to visualize the behavioral aspects of the alternatives, we link the appropriate GRL nodes to scenarios in UCM.</p><p>In the lower half of Figure <ref type="figure">9</ref>, a class structure representing Classic Tutorials is Figure <ref type="figure">9</ref>. Design alternatives and the corresponding scenarios depicted as a UCM scenario. In the scenario, WBT System and Learner are represented as agent components (rectangles), which holds responsibilities (small crosses along the wiggle lines). The scenario shows that, in a classic tutorial, after an introduction, learners do readings through a series of sessions, each teaching a more difficult concept or skill. At the end of the sequence (denoted with a use case path, the wiggle line with filled circle head, and small bar tail) is a summary and a test. Examples and practice are also provided in each session.</p><p>Elaborating on these details helps the identification of new requirements. For example, Learner's Satisfaction, Flexibility, Reliability and Easy to Use are required for the training program to be profitable and successful. Thus, these newly identified requirements are added on the right hand side of the goal model in Figure <ref type="figure">9</ref>. In Figure <ref type="figure" target="#fig_0">10</ref>, the class structure is evaluated using the qualitative evaluation procedure mentioned above. The result shows that the current structure is not an ideal choice. It is simple, reliable, but lack flexibility.</p><p>Thus, a good-to-have feature of the above class structure is that, for each learner, the tutorial is as easy and straightforward as a class tutorial, but the course content can be customized by different learners. Below is a scenario for this class structure -Learner Customized Tutorial. The scenario in Figure <ref type="figure" target="#fig_6">11</ref> shows that the use case path branches for different learners if they choose different subjects in the course, from which we can see that student's Individual /Specific Needs Be Considered. This class structure satisfied all the currently required softgoals, so it is a possible choice for the designer.</p><p>In this case study, the UCM models are rather simplistic because we have only tackled the highest level of process design, and the processes in e-training are not very complicated. As we go down to a sufficiently detailed design, a UCM model can be fairly complex, and more modelling constructs need to be used. Having analyzed the benefits and tradeoffs of these structures, we can see that UCM is a useful complement to GRL in the process from requirements to high-level design. It provides a concrete model of each design alternative. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Discussion and Related Work</head><p>The above example illustrated some of the benefits of coupling goals and scenarios during requirements analysis and design. GRL and UCM together facilitates the transition from a requirements specification to a high level design involving the consideration of alternative architectures and the discovery of further requirements that must be vetted by the stakeholders. Both of the notations have dynamic refinement capabilities. During refinement, a high level of abstraction is maintained, as scenarios in UCM are described as first class entities without requiring reference to system sub-components, specific inter-component communication facilities, or subcomponent states <ref type="bibr" target="#b1">[2]</ref>. As one allocates scenario responsibilities to architectural components in UCM, GRL helps keeping track of decisions at various stages. GRL provides facilities to express, analyze and deal with goals and non-functional requirements. It also provides facilities to capture reusable analysis and design knowledge related to know-how for addressing non-functional requirements and to manage evolving requirements.</p><p>The work of this paper builds on an original submission to ITU-T Study Group 10 (now Study Group 17) on the topic of User Requirements Notation (URN) <ref type="bibr" target="#b22">[23]</ref>. The User Requirements Notation (URN) is intended to allow software engineers to specify, review for correctness, and possibly discover requirements for a proposed new system or for extensions to an existing system. UCM is being proposed for specifying functional requirements, and GRL for non-functional requirements. The methodology introduced in this paper illustrates how the two modelling notations complement each other.</p><p>Goal-oriented modelling has received considerable attention with requirements engineering <ref type="bibr" target="#b17">[18]</ref>. The KAOS approach is most concerned with the generation of alternative system designs from high-level goals defined in temporal logic <ref type="bibr" target="#b11">[12]</ref>. In <ref type="bibr" target="#b10">[11]</ref>, the process of inferring formal specifications of goals and requirements from scenario descriptions is studied. While goal elaboration and scenario elaboration are treated as intertwined processes, the focus of the work is mainly on goal elicitation. Our emphasis is the other way around, i.e., how to use goal model (especially NFRs) to direct design based on scenarios as well as other notations. The fundamental point is that the goal-oriented modelling and its interaction with other modelling activity run through requirements to the entire design process.</p><p>In the CREWS project, Rolland et al. have proposed the coupling of goals and scenarios in requirements engineeing with CREWS-L'Ecritoire <ref type="bibr" target="#b14">[15]</ref>. In CREWS-L'Ecritoire, scenarios are used as a means to elicit requirements/goals of the systemto-be. Both goals and scenarios are represented as structured text. The coupling of goal and scenario could be considered as a "tight" coupling, as goals and scenarios are structured into &lt;Goal, Scenario&gt; pairs, which are called "requirement chunks". The focus is mainly on the elicitation of functional requirements and goals. In GRL, both functional and non-functional requirements are considered, with special attention being paid to non-functional requirements. The modelling process involves both requirements engineering activities and high-level architectural and process design. Also in the CREWS project, Haumer et al. have proposed to use real world scenes to elicit and validate requirements specifications <ref type="bibr" target="#b6">[7]</ref>. Goals are used as central concepts of requirement description. Hierarchical goal structures are linked and annotated with positive and negative scenarios. Their approach typically starts from fairly low level functional goals rather than high-level goals like "increase profit by 10%". The kinds of scenarios they propose to capture are multi-media scenarios of current system usage.</p><p>The Software Architecture Analysis Method (SAAM) <ref type="bibr" target="#b9">[10]</ref> is a scenario-based method for evaluating architectures. It provides a means to characterize how well a particular architectural design responds to the demands placed on it by a particular set of scenarios. Based on the notion of context-based evaluation of quality attributes, scenarios are used as a descriptive means of specifying and evaluating quality attributes. SAAM scenarios are use-oriented scenarios, which are designed specifically to evaluate certain quality attributes of architecture. The evaluations are done using simulations or tests on a finished design. In the GRL and UCM approach, scenarios are more design-oriented, being concerned with the refinement of system requirements. The quality of the architectures corresponding to these scenarios is judged based on expert knowledge as the design proceeds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Conclusions and Future Work</head><p>The complementary of GRL and UCM supports the progress from abstract requirements, both functional and non-functional, to concrete system models. The approach combines an intentional strategic actor's view of design rationales and a non-intentional behavioral view of the future system. We believe the approach is useful to information systems in general, where there are conflicting goals and tradeoffs to be dealt with during design. A case study in telecommunication domain is discussed in <ref type="bibr" target="#b13">[14]</ref>, which focuses more on using goal and scenario together in software architectural design. Combining the two notations may not be necessary for some classes of applications. For example, if the design of a system does not decide on temporal orders, causal relationships, and other behavioral characteristics, then GRL is sufficient. On the other hand, if during the design of the system, there are not many alternatives and competing goals, and the main task for the software engineer is just to work out all the details, then UCM itself may be quite enough for the work.</p><p>For future work, it would be worthwhile to investigate tighter coupling at language level to provide more guidance and support. In the current approach, the coupling of goals with scenarios is loose -goal models and scenario models can be constructed fairly independently. One scenario model may refer to more than one goal, and vice versa. There are no rigid constraints on the requirements engineering and design process. That is, the goal model and behavior models can be developed in parallel simultaneously, interacting whenever there are design decisions to be traded off, or new design alternatives need to be sought, or new business goals or non-functional requirements are discovered. GRL and UCM are vehicles for expressing knowledge. To make better use of GRL and UCM concepts, we need to acquire and accumulate both software design knowledge and more knowledge of various domains, and represent this knowledge in the corresponding modelling structures. The development of such repositories would enable the reuse of knowledge and provide useful guidance for the design process.</p><p>Another ongoing work is to extend a formal goal-oriented requirements language, Formal Tropos, so that the temporal properties shown in the UCM behavior models currently can be embedded into the goal models and so that they can be validated with model-checking techniques <ref type="bibr" target="#b4">[5]</ref>.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. Goal modelling based system design process</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. Major players in E-Learning domain, agent dependency relationships, role-playing relationships and agent classification</figDesc><graphic coords="8,209.88,378.24,216.00,57.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4. Explore possible designs for the future system (high-level)</figDesc><graphic coords="10,158.52,404.52,287.76,206.64" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 .Figure 6 .</head><label>56</label><figDesc>Figure 5. Compare alternative designs by resource consumption</figDesc><graphic coords="12,231.48,146.40,161.04,156.48" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 7 .</head><label>7</label><figDesc>Figure 7. Install mitigation measures to the design</figDesc><graphic coords="13,133.08,334.08,348.84,227.52" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 10 . 1</head><label>101</label><figDesc>Figure 10.1 Evaluate Classic Tutorial Structure</figDesc><graphic coords="17,133.20,260.88,345.60,158.88" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 11 .</head><label>11</label><figDesc>Figure 11. UCM scenario for Learner Customized Tutorial</figDesc><graphic coords="17,181.32,536.16,260.64,109.92" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 10 . 2</head><label>102</label><figDesc>Figure 10.2 Evaluate Learner Customized Tutorial Structure During each step shown above, new non-functional requirements may be detected and added to the GRL model. At the same time, in the GRL model, new means to achieve the functional requirements can be explored and concretized in a UCM model. Thus the above design process may iterate until an acceptable design is reached.</figDesc><graphic coords="18,130.68,263.04,345.84,165.72" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="14,133.08,265.80,345.60,267.48" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="16,130.68,342.24,348.60,162.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 .</head><label>1</label><figDesc>Cost estimation on the two kinds of training</figDesc><table><row><cell></cell><cell>Develop</cell><cell>Develop</cell><cell>Instructor</cell><cell>Instructor</cell><cell>Facility</cell><cell>Learner</cell><cell>Total</cell></row><row><cell></cell><cell>time</cell><cell>cost</cell><cell>Travel</cell><cell>Salary</cell><cell>cost</cell><cell>Travel</cell><cell>estimate</cell></row><row><cell></cell><cell></cell><cell></cell><cell>Cost</cell><cell>Cost</cell><cell></cell><cell>cost</cell><cell>cost</cell></row><row><cell>Conventional</cell><cell>50 hrs</cell><cell>$50/hr</cell><cell>$1500</cell><cell>$25/</cell><cell>$500/</cell><cell>$1500</cell><cell>$513,000</cell></row><row><cell>Classroom</cell><cell></cell><cell></cell><cell></cell><cell>student</cell><cell>student</cell><cell></cell><cell></cell></row><row><cell>Training</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Web-Based</cell><cell>200hrs</cell><cell>$100/hr</cell><cell>$0</cell><cell>$50/</cell><cell>$50/</cell><cell>$0</cell><cell>$338,500</cell></row><row><cell>Training</cell><cell></cell><cell></cell><cell></cell><cell>student</cell><cell>student</cell><cell></cell><cell></cell></row><row><cell>In</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 ,</head><label>1</label><figDesc>we list how the two solutions Web-Based Training and Conventional Classroom Training (represented as task nodes) lead to different cost on the items indicated by the sub-softgoals of Low Cost in Figure 4. Based on these data, in Figure 5, we use contribution links to depict that WBT helps the goal of Lower Total Training Costs, which in turn helps the satisficing of Reduce Cost of Training by 50% Over Next Year. Conventional Classroom Training hurts the fulfillment of this goal. Furthermore, the fulfilling of this goal helps the achievement of Earn $200,000 By Selling Courses.</figDesc><table /></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>The work of this paper is motivated by an original submission to ITU-T study group 17 on the topic of User Requirements Notation (URN). The kind cooperation of members of Mitel Networks, Nortel Networks and other institutions is gratefully acknowledged. This work received financial support from NSERC, CITO, and Mitel Networks.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Understanding Existing Software with Use Case Map Scenarios</title>
		<author>
			<persName><forename type="first">D</forename><surname>Amyot</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Mussbacher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mansurov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">3rd SDL and MSC Workshop (SAM&apos;02)</title>
		<meeting><address><addrLine>Aberystwyth, U.K.</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-06">June 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Use Case Maps as Architectural Entities for Complex Systems</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">J A</forename><surname>Buhr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Transactions on Software Engineering, IEEE</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="1131" to="1155" />
			<date type="published" when="1998-12">December 1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Introduction: The Scenario Perspective on System Development</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Carroll</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Scenario-Based Design: Envisioning Work and Technology in System Development</title>
		<editor>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Caroll</surname></persName>
		</editor>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="1" to="17" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Non-Functional Requirements in Software Engineering</title>
		<author>
			<persName><forename type="first">L</forename><surname>Chung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">A</forename><surname>Nixon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Mylopoulos</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>Kluwer Academic Publishers</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Model Checking Early Requirements Specifications in Tropos</title>
		<author>
			<persName><forename type="first">A</forename><surname>Fuxman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Pistore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Mylopoulos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Traverso</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 5 th IEEE International Symposium on Requirements Engineering</title>
		<meeting>the 5 th IEEE International Symposium on Requirements Engineering<address><addrLine>Toronto, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-08">August 2001</date>
			<biblScope unit="page" from="174" to="181" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<ptr target="http://www.cs.toronto.edu/km/GRL/" />
		<title level="m">GRL web site</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Requirements Elicitation and Validation with Real World Scenes</title>
		<author>
			<persName><forename type="first">P</forename><surname>Haumer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Pohl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Weidenhaupt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="1036" to="1054" />
			<date type="published" when="1998-12">December 1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Designing Web-Based Training</title>
		<author>
			<persName><forename type="first">W</forename><surname>Horton</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>John Wiley &amp; Sons</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Scenario management -an interdisciplinary approach</title>
		<author>
			<persName><forename type="first">M</forename><surname>Jarke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><forename type="middle">T</forename><surname>Bui</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Carroll</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Requirements Engineering Journal</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">3-4</biblScope>
			<biblScope unit="page" from="155" to="173" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">SAAM: A Method for Analyzing the Properties of Software Architectures</title>
		<author>
			<persName><forename type="first">R</forename><surname>Kazman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Bass</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Abowd</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Webb</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16 th International Conference on Software Engineering</title>
		<meeting>the 16 th International Conference on Software Engineering<address><addrLine>Sorrento, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994-05">May 1994</date>
			<biblScope unit="page" from="81" to="90" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Inferring Declarative Requirements Specifications from Operational Scenarios</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">V</forename><surname>Lamsweerde</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Willemet</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering, Special Issue on Scenario Management</title>
		<imprint>
			<date type="published" when="1998-12">December 1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Requirements Engineering in the Year 00: A Research Perspective</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">V</forename><surname>Lamsweerde</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">the Proceedings of 22nd International Conference on Software Engineering</title>
		<meeting><address><addrLine>Limerick</addrLine></address></meeting>
		<imprint>
			<publisher>ACM press</publisher>
			<date type="published" when="2000-06">June 2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A Scenario Construction Process</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">G</forename><surname>Leite</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hadad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Doorn</surname></persName>
		</author>
		<author>
			<persName><surname>Kaplan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Requirements Engineering</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="38" to="61" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<author>
			<persName><forename type="first">L</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Yu</surname></persName>
		</author>
		<ptr target="http://www.cs.toronto.edu/~liu/" />
		<title level="m">From Requirements to Architectural Design -Using Goals and Scenarios. ICSE-2001 Workshop: From Software Requirements to Architectures</title>
		<meeting><address><addrLine>Toronto, Canada; Toronto, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-05-14">2001. May 2001. May 14. 2001</date>
			<biblScope unit="page" from="22" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Experience With Goal-Scenario Coupling In Requirements Engineering</title>
		<author>
			<persName><forename type="first">C</forename><surname>Rolland</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Grosz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Kla</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Symposium on Requirements Engineering</title>
		<meeting>the IEEE International Symposium on Requirements Engineering<address><addrLine>Limerick, Ireland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1998-06">1998. June 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">The Sciences of the Artificial, Second Edition</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">H</forename><surname>Simon</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1981">1981</date>
			<publisher>The MIT Press</publisher>
			<pubPlace>Cambridge, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Supporting Scenario-Based Requirements Engineering</title>
		<author>
			<persName><forename type="first">A</forename><surname>Sutcliffe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Maiden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Minocha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Manual</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="1072" to="1088" />
			<date type="published" when="1998-12">December 1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Why Goal-Oriented Requirements Engineering</title>
		<author>
			<persName><forename type="first">E</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Mylopoulos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th International Workshop on Requirements Engineering: Foundations of Software Quality</title>
		<editor>
			<persName><forename type="first">E</forename><surname>Dubois</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><forename type="middle">L</forename><surname>Opdahl</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">K</forename><surname>Pohl</surname></persName>
		</editor>
		<meeting>the 4th International Workshop on Requirements Engineering: Foundations of Software Quality<address><addrLine>Pisa, Italy</addrLine></address></meeting>
		<imprint>
			<publisher>Presses Universitaires de Namur</publisher>
			<date type="published" when="1998-06">June 1998. 1998</date>
			<biblScope unit="page" from="15" to="22" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Agent-Oriented Modelling: Software Versus the World</title>
		<author>
			<persName><forename type="first">E</forename><surname>Yu</surname></persName>
		</author>
		<ptr target="http://www.fis.utoronto.ca/faculty/yu" />
	</analytic>
	<monogr>
		<title level="m">the Proceedings Agent-Oriented Software Engineering AOSE-2001 Workshop</title>
		<imprint>
			<biblScope unit="volume">2222</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Agent Orientation as a Modelling Paradigm</title>
		<author>
			<persName><forename type="first">E</forename><surname>Yu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Wirtschaftsinformatik</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="123" to="132" />
			<date type="published" when="2001-04">April 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Towards Modelling and Reasoning Support for Early-Phase Requirements Engineering</title>
		<author>
			<persName><forename type="first">E</forename><surname>Yu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 3rd IEEE International Symposium on Requirements Engineering (RE&apos;97</title>
		<meeting>the 3rd IEEE International Symposium on Requirements Engineering (RE&apos;97<address><addrLine>Washington D.C., USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1997-06-08">Jan. 6-8, 1997</date>
			<biblScope unit="page" from="226" to="235" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Scenario management in software development: current practice</title>
		<author>
			<persName><forename type="first">K</forename><surname>Weidenhaupt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Pohl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Jarke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Haumer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="page" from="34" to="45" />
			<date type="published" when="1998-03">March 1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">150: Users Requirements Notation. Recommendation to ITU-T Study Group 17</title>
		<ptr target="http://www.usecasemaps.org/urn/" />
	</analytic>
	<monogr>
		<title level="m">URN web site</title>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
