<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">ROUTER: Fog Enabled Cloud based Intelligent Resource Management Approach for Smart Home IoT Devices</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Sukhpal</forename><surname>Singh Gill</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">School of Computing and Communications</orgName>
								<orgName type="institution">Lancaster University</orgName>
								<address>
									<country key="GB">UK</country>
								</address>
							</affiliation>
							<affiliation key="aff2">
								<orgName type="laboratory">Cloud Computing and Distributed Systems (CLOUDS) Laboratory School of Computing and Information Systems</orgName>
								<orgName type="institution">The University of Melbourne</orgName>
								<address>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Peter</forename><surname>Garraghan</surname></persName>
							<email>p.garraghan@lancaster.ac.uk</email>
							<affiliation key="aff1">
								<orgName type="department">School of Computing and Communications</orgName>
								<orgName type="institution">Lancaster University</orgName>
								<address>
									<country key="GB">UK</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Rajkumar</forename><surname>Buyya</surname></persName>
							<email>rbuyya@unimelb.edu.au</email>
							<affiliation key="aff2">
								<orgName type="laboratory">Cloud Computing and Distributed Systems (CLOUDS) Laboratory School of Computing and Information Systems</orgName>
								<orgName type="institution">The University of Melbourne</orgName>
								<address>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Management Approach for Smart Home IoT Devices Sukhpal Singh Gill</orgName>
								<address>
									<addrLine>Peter Garraghan, Rajkumar Buyya</addrLine>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">ROUTER: Fog Enabled Cloud based Intelligent Resource Management Approach for Smart Home IoT Devices</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">366B66B1483C023CA3A4F01FCC23E0A2</idno>
					<idno type="DOI">10.1016/j.jss.2019.04.058</idno>
					<note type="submission">Received date: 10 December 2018 Revised date: 21 March 2019 Accepted date: 23 April 2019</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T14:10+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Fog Computing</term>
					<term>Cloud Computing</term>
					<term>Internet of Things</term>
					<term>Smart Home</term>
					<term>Resource Management</term>
					<term>Edge Computing</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>There is a growing requirement for Internet of Things (IoT) infrastructure to ensure low response time to provision latency-sensitive real-time applications such as health monitoring, disaster management, and smart homes. Fog computing offers a means to provide such requirements, via a virtualized intermediate layer to provide data, computation, storage, and networking services between Cloud datacenters and end users. A key element within such Fog computing environments is resource management. While there are existing resource manager in Fog computing, they only focus on a subset of parameters important to Fog resource management encompassing system response time, network bandwidth, energy consumption and latency. To date no existing Fog resource manager considers these parameters simultaneously for decision making, which in the context of smart homes will become increasingly key. In this paper, we propose a novel resource management technique for fog-enabled Cloud computing environments, which leverages Particle Swarm Optimization to optimize simultaneously. The approach is validated within an IoT-based smart home automation scenario, and evaluated within iFogSim toolkit driven by empirical models within a small-scale smart home experiment. Results demonstrate our approach results a reduction of 12% network bandwidth, 10% response time, 14% latency and 12.35% in energy consumption.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Emerging Big Data and Internet of Things (IoT) applications such as smart cities and healthcare services have risen in societal prominence, demonstrated by an increase of data velocity of 250MB per minute globally <ref type="bibr" target="#b2">[3]</ref>. Therefore, such applications require substantial data and computational capability to provision service <ref type="bibr" target="#b0">[1]</ref>, possible via deployment within Cloud datacenters. However, such applications when deployed within Cloud datacenters encounter potentially high latency and response times due to large geographical distance and data bandwidth requirements between clients and the datacenter. <ref type="bibr" target="#b1">[2]</ref>. Fog computing has been envisioned as a means to reduce the latency, via extending Cloud datacenters to integrate with the network edge <ref type="bibr" target="#b3">[4]</ref>  <ref type="bibr" target="#b4">[5]</ref>. Thus, IoT environments can leverage fog-assisted Cloud computing to execute latency-sensitive applications.</p><p>Resource managementthe process of scheduling and allocating resources to applicationsis a fundamental concept within distributed systems <ref type="bibr" target="#b15">[16]</ref> in order to adhere to specified Quality of Service (QoS) constraints whilst minimizing overheads pertaining to performance, and energy waste <ref type="bibr" target="#b15">[16]</ref>. While there exist a wide plethora of existing schedulers for distributed systems such as MESOS, YARN and BORG in cloud, which have been created to operate within centralized computing infrastructure <ref type="bibr" target="#b25">[25]</ref>. Specifically, these schedulers are not designed to operate within an environment including highly mobile edge devices <ref type="bibr" target="#b20">[20]</ref>, latency-sensitive applications, nor wide geographical areas intrinsic to Fog computing environments. Resource management within Fog computing predominantly focuses on managing the compute and storage service between edge devices and the Cloud datacenters to process user tasks with minimum latency and response time <ref type="bibr" target="#b4">[5]</ref> [6] <ref type="bibr" target="#b6">[7]</ref>  <ref type="bibr" target="#b7">[8]</ref>. Existing IoT and Fog computing resource managers focus on a singular or specific sub-set of metrics including application response time, latency, energy, and network bandwidth <ref type="bibr" target="#b10">[11]</ref>  <ref type="bibr" target="#b11">[12]</ref> [13] <ref type="bibr" target="#b13">[14]</ref>, Capturing all these parameters within a Fog computing resource management is particularly important within the context of smart homes, which are positioned to process</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A C C E P T E D M</head><p>A N U S C R I P T 3 increasingly larger quantities of data from smart devices and appliances connected to IoT systems, whilst simultaneously ensuring high QoS and reduced energy consumption to reduce electricity bills for home dwellers <ref type="bibr" target="#b24">[24]</ref>. Due to the complexity of multi-objective optimization of parameters for trade-off decision making in resource management (which has led to existing Fog resource management algorithms implementing FIFO or round-robin based approaches <ref type="bibr" target="#b10">[11]</ref>  <ref type="bibr" target="#b11">[12]</ref>), we believe that exploring nature or bio-inspired algorithms is a promising approach to address this problem for resource management <ref type="bibr" target="#b15">[16]</ref>  <ref type="bibr" target="#b18">[19]</ref>.</p><p>In this paper, we propose a Fog-enabled Cloud computing resource management framework for smart homes. Our approach, ResOUrce managemenT tEchnique for smaRt homes (ROUTER) has been designed to consider and optimize multiple parameters simultaneously including response time, network bandwidth, energy consumption and latency simultaneously via use of a Particle Swarm Optimization algorithm (PSO). Stochastic nature of the particle increases due to this property of PSO and touches rapidly to global minima with a realistic noble solution <ref type="bibr" target="#b26">[26]</ref>. PSO has become prevalent due to its easiness and its usefulness in extensive range of application with little cost of computation <ref type="bibr" target="#b23">[23]</ref>  <ref type="bibr" target="#b26">[26]</ref>. ROUTER has been validated through empirical findings via a case study of IoT based smart home automation which are then integrated into iFogSim for evaluation. The main contributions of this research work are as follows: (i) a detailed requirement and design of an Fog-assisted Cloud architecture to perform effective resource management for various IoT edge devices; (ii) a request handler mechanism for Fog computing jobs, and a multi-objective PSO based resource management technique; (iii) a small-scale empirical study of an IoT smart home environment that leverages a Fog-assisted Cloud computing environment, analyzing the performance of various QoS parameters within different operational contexts.</p><p>The rest of the paper is organized as follows. Section 2 presents related work of existing techniques. The proposed technique is presented in Section 3. Section 4 describes the experimental setup and case study. Section 5 describes the results of the evaluation. Section 6 presents conclusions and future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Related Work</head><p>Research into IoT applications within Fog computing is growing research field, with various unsolved research challenges <ref type="bibr" target="#b17">[18]</ref>. This section presents the current research on resource management within Fog computing.</p><p>Deng et al. <ref type="bibr" target="#b7">[8]</ref> formulated a workload allocation problem to study the tradeoff between energy consumption and delay within a Cloud-Fog computing system. Furthermore, the primary problem is decomposed into three subproblems to solve independently, and demonstrated that Fog computing is efficient in reducing transmission latency and communication bandwidth, however does not consider system network bandwidth and energy consumption. Cuong et al. <ref type="bibr" target="#b8">[9]</ref> proposed a proximal algorithm for joint resource allocation in the geo-distributed environment and reducing carbon footprint. Moreover, authors demonstrated that their proposed solution can reduce system carbon footprints whilst offering video streaming as a cloud service. Lin et al. <ref type="bibr" target="#b9">[10]</ref> proposed a cost-efficient resource management technique integrated within a medical Cyber-physical System in which virtual machine placement, task distribution and base station association are investigated. Results demonstrated that the proposed solution performs more effectively in comparison to a greedy algorithm in terms of energy consumption.</p><p>Wangbong et al. <ref type="bibr" target="#b10">[11]</ref> proposed a Gateway-based Fog Computing (GFC) architecture for wireless sensors and actuator networks predominantly consisting of master and slave nodes, managing virtual gateway functions, flows, and resources. Experimental results show that GFC performs more effectively in terms of response time. Yu et al. <ref type="bibr" target="#b11">[12]</ref> proposed a Virtualization based Resource Provisioning (VRP) algorithm for Fog computing and designed an architecture using the concept of parallel and distributed load balancing. Furthermore, the algorithm is evaluated within Cloud-Analyst simulator that finds the proposed solution decreases the system energy cost. Stojkoska et al. <ref type="bibr" target="#b12">[13]</ref> proposed a conceptual model for smart homes using IoT for fog computing, and suggests that energy consumption can be reduced via integration of geographically distributed renewable energy sources. Zhang et al. <ref type="bibr" target="#b13">[14]</ref> proposed a three-layer hierarchical game framework for resource management in Fog computing to solve the challenges pertaining to fast data processing and minimum response time. This research work reported that Fog devices are more capable to reduce latency as compared to the cloud by experiencing a minor increase in energy consumption. Therefore, the trade-off between latency and power consumption is required to provide more efficient services.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A C C E P T E D M A N U S C R I P T</head><p>From the literature it is observable that under-provisioning and over-provisioning of resources in existing Fog computing and IoT resource management techniques <ref type="bibr" target="#b10">[11]</ref>  <ref type="bibr" target="#b11">[12]</ref>. Fog devices have additional compute and storage power, however it is not feasible for such devices to provide resource capacity equivalent to that of Cloud datacenters, therefore efficient resource management is required to process user requests in a timely manner. To solve this problem, the resource requirement for execution of user tasks should be predicted accurately in advance to utilize resources efficiently. The comparison of existing resource management techniques with the proposed technique (ROUTER) is described in Table <ref type="table" target="#tab_0">1</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Fog-assisted Cloud based Resource management for IoT and Big Data analytics</head><p>This section presents the proposed resource management technique for Fog-assisted Cloud resource management for smart homes. The architecture of ROUTER is shown in the Figure <ref type="figure" target="#fig_0">1</ref>.</p><p>Based on their functionality, the architecture is composed of three layers, the components of the proposed architecture are discussed below:</p><p>Internet of Things (IoT): Edge devices comprising gateways, fog devices, smart home appliances, sensors etc. A user may interact with the Fog computing environment via IoT applications or sensors. The functionality of this layer is enhanced by installing intelligent and applications within end devices.</p><p>Fog Computing: Collects data generated by bottom layer (IoT) and establishes communication between edge devices and the Cloud datacenter. The functionality of the intermediate layer is divided into two sublayers: a) Field Area Network (end devices interacting with each other via 3G/4G/Wi-Fi) and b) Internet Protocol/Multi-Protocol Label Switching (used to transfer the data from end devices to centralized cloud system).</p><p>Cloud and Big Data: Manages the services which enable the management of resources and processing of big data and IoT tasks. Furthermore, this layer provides QoS to Fog computing applications and the Cloud computing operational management. Applications such as Big Data processing is performed at this layer to handle the large data coming from different IoT applications and process through different stages such as preprocessing, classification and prediction <ref type="bibr" target="#b17">[18]</ref>.</p><p>Cloud computing contains a wide variety of services that can enhance application operation to minimize latency of executing tasks on Fog devices whilst decreasing Cloud economic costs. There exist different types of services, which operate in tandem comprise:</p><p>Monitoring: Monitoring of service/application status and performance.  Job Placement: Processes information provided by Monitoring services that contain available Cloud resource status at a particular period of time. This information is leveraged to discover the best machines to schedule jobs (tasks) for execution. This is further interconnected with Resource Provisioning to find allocation requirements of new resources for existing tasks.</p><p>Big Data Analytics: Collects data from different IoT devices to perform different data processing operations spanning data pre-processing, classification, and prediction <ref type="bibr" target="#b17">[18]</ref>. This module assists in determining threshold values for performance parameters for resource scheduling decision making.</p><p>Resource Information: Obtains information from Monitoring and Knowledge Base to profile applications and resources.</p><p>Security: Provides authorization and authentication to applications and services to manage user credentials. Resource Provisioning: Control and provides resource allocation to various network, Fog and Cloud resources. Due to changing the number of applications and requirements of applications with the entire system, resources are allocating dynamically in response to QoS and operational constraints.</p><p>Performance Prediction: Performance of free cloud resources is visualized by utilizing the information of Knowledge Base service and this information is further forwarded to the Resource Provisioning service to determine application resource requirements.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Request Handler Mechanism</head><p>Figure <ref type="figure" target="#fig_4">2</ref> shows the interaction of Fog Data Server (FDS) with IoT devices and Cloud Data Server (CDS) in terms of the design model. IoT layer contains end devices such as gateways and sensors to retrieve information from the end user. It then forwards the user information to FDS for further processing. The fog layer contains multiple FDSs. The FDS comprises one Fog Server Manager (FSM), which manages all FDS resources required for job execution. Further, the request can be forwarded to cloud layer for execution in case of unavailability of resources at the FDS level. The cloud layer has a number of CDS. Figure <ref type="figure" target="#fig_5">3</ref> describes the interaction of cloud layer, fog layer and IoT layer to handle a typical job request. There are two types of job processing requests. First, at the FDS (denoted by and another at the CDS (denoted by , which is requested by FDS in the case of unavailability of resources at the Fog layer. Initially, the IoT layer submits a job request ( to the closest FDS (say intended to accelerate job execution. The FSM checks whether the resource demand of that particular request is satisfied or not at . If the satisfies the resource demand of request ( then the FSM starts its execution and tracks its execution status.</p><p>Step 1. The FDS checks local resource availability and has the ability to manage system resources for request execution.</p><p>Step 2. The IoT layer forwards the user request to FDS, which enqueues request.</p><p>Step 3. The FDS handles the user request with following conditions: i) if required resources are available at the FDS level, then the FSM processes the request on the FDS and submits an acknowledgement to the IoT layer regarding execution status. ii) if a portion of required resources are available at the FDS level, then the job request needs to wait for a particular time period (Threshold value for each request ), otherwise Goto (v).</p><p>iii) if the FDS is already executing other requests, which are close to completion, then the new job request needs to wait for a particular time period (Threshold value for each request ), otherwise Goto (v). iv) if one of the resources executing a particular request fails at the FDS level, then, the request management behaviour will follow the behaviour as in (ii) condition. v) if no resources are available in the FDS, then the job request is forwarded to the CDS.</p><p>Step 4. CDS executes the job request and sends an acknowledgement to FSM. ), otherwise the job request is forwarded to the CDS. If all the resources are occupied at but is in its initial release state, then the job request ( must wait for Minimum Constraint Time (</p><p>) to release the resources and then commence execution. If all the resources are busy executing other yet some requests are failing during execution, then the FSM will discover another to offload requests. If all the resources are unavailable in all of the FDS within the Fog cluster, then job request ( are propagated to the CDS over appropriate communication network and now this request is denoted as ( and user will receive a message "Wait for processing" and then must wait for maximum allocated time ( ) to release the resources at CDS. FSM then sends the job request ( to closest CDS for further processing. The CDS provides resources for execution of job requests with minimum response time and latency, and then sends an acknowledgement to the FDS. The latency and response time values are predefined via analysis and modelling of historical system data and both the parameter have some fixed value for a certain interval (we have considered one-hour duration for intervals). Based on the performance of resources (execution time and energy consumption), the value of latency and response time is redefined at every interval. The next section describes the working of Fog server manager for scheduling of resources.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Fog Server Manager</head><p>This section describes the Fog server manager for scheduling resources to execute job requests.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Objective function</head><p>The main objective of the fitness function is to optimize the performance parameters energy consumption ( ), network bandwidth ( ), latency ( ) and the response time ( ) to facilitate requests originating at the IoT layer. This fitness function (Equation ( <ref type="formula">1</ref>)) effectively compromises the following performance parameters</p><formula xml:id="formula_0">(1)</formula><p>where , , and denotes weights to prioritize components of the fitness function. The Network Bandwidth is defined as the number of bits transferred/received in one second. The Latency is defined as the delay before the transfer of job request for processing. The Response Time is defined as the length of time taken for a system to react to a job request first time. The Energy Consumption is the sum of energy consumed by the processors, the switching equipment, the storage devices, the network devices and other components such as fans or conversion losses <ref type="bibr" target="#b1">[2]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">Particle Swarm Optimization based Resource Scheduling Algorithm</head><p>Particle Swarm Optimization (PSO) is motivated by the social activities of species such as group of birds seeking food sources <ref type="bibr" target="#b23">[23]</ref> and works based on a global search method. The PSO algorithm denotes the number of particles as a population, which are first initialized randomly. The PSO improves the fitness value (as calculated using Eq. 1) of a particle in every generation. In the PSO algorithm, the particle's position is denoted as: a) global optimal state (Global OptimalState ): best particle among group based on fitness value of all the particles b) and local optimal state (Local OptimalState ): it is best fitness value of a particular particle. Further, [Eq. 1] is used to update particle's velocity and position in every generation. Every particle regulates its position based on the value of Global OptimalState and Local OptimalState in every generation. The PSO can be used to solve resource scheduling problems due to (i) usefulness and easiness with less computation cost and (ii) achieving global minima relatively quickly <ref type="bibr" target="#b23">[23]</ref>. Deteailed terminology of PSO used in this research work is presented in Table <ref type="table" target="#tab_2">2</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PSO Terminology Description</head><p>Particle Denoted as an independent instance in a search space and its position is affected by the value of LocalOptimalState and GlobalOptimalState. Further, the performance of a particle is measured by its fitness value. A request is considered as a particle for this research work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Population Size</head><p>It is a set of number of job requests, which are coming from IoT/edge devices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Initial Random Velocity</head><p>The movement of every particle is dependent on 1) preliminary random velocity and 2) two randomly weighted effects: a) the affinity to reach neighborhood's best earlier position and b) the affinity to reach best earlier position of a particle. Resources are mapped to requests based on these two affinities. Request will be processed on that resource which has higher value of fitness.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Particle Velocity</head><p>The probability distribution for the particle determines the value of particle velocity. There is a partial solution in genome for every particle, which is considered as a resource identifier. The main motivation for the PSO-based scheduling is to identify the best resource identifier, which creates the best solution for the particular optimization problem such as resource scheduling. The selection process of non-PSO based resource identifier stops after a pre-defined number of iterations. We set a fixed number of iterations to keep the computation time low. In the PSO-based method, a new solution would be rejected if its fitness value is less than the current solution. Figure <ref type="figure">4</ref> presents the pseudo code of PSO based resource scheduling algorithm. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Particle Position</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Performance Evaluation</head><p>To demonstrate the feasibility of the proposed approach, we have developed the framework and scenario into a Fog computing based environment using CloudSim <ref type="bibr" target="#b14">[15]</ref> and iFogSim <ref type="bibr" target="#b16">[17]</ref>. In this research work, event simulation functionalities of CloudSim have been used to implementing functionalities of iFogSim architecture. CloudSim entities such as datacenters and communication amongst datacenters through message sending operations are included. Therefore, the core CloudSim layer is responsible for handling events between fog computing components in iFogSim <ref type="bibr" target="#b16">[17]</ref>. iFogSim implementation is established by simulated services and entities. The proposed technique has been validated via deployment of a smart home automation experiment case study. The application model of</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A C C E P T E D M A N U S C R I P T</head><p>IoT-based smart home automation is built into iFogSim in order to validate the proposed technique through realtime application (in other words, data from the experiment is directly fed into the simulator to provide edge-device operational behavior for the resource manager).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Case Study: IoT based Smart Home Automation</head><p>In order to demonstrate an example smart home case study, we interconnected multiple IoT devices wirelessly controllable by using a smartphone. The scenario we have created consists of a home consisting of three rooms (Garage, Lobby, and Bedroom), that are capable of manipulating various devices and appliances within each room to which consist of AC, fan, bulb and doors. Figure <ref type="figure" target="#fig_1">5</ref> depicts the front view of smart home, whilst Figure <ref type="figure" target="#fig_8">6</ref> describes an interaction of smart home components with mobile app using Arduino IDE.   Android to ESP8266: Initially, an Android device generates a signal to fetch required information from the smart home. This signal is transferred to the ESP8266 module wirelessly using the server created by the ESP over the local hotspot. This connection uses a connection id between ESP and Android device, where ESP sends the HTTP packet to initiate the connection. This data is then further processed at the ESP8266 module.  Intranet Server: The Arduino based hardware is designed to provide an interface between the android application and appliances. This is used to retrieve incoming data from sensors and converts into digital and</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A C C E P T E D M</head><p>A N U S C R I P T 10 send it to android application over Internet using Intranet server. This is also used to generate the signal for a specific appliance selected by the user.   Controlling Device States: The Arduino directs the pins received in the signal to turn ON/OFF home appliances as per user requirements. The device status is then updated within the Android application.  Intrusion/Breach Detections: When the security feature in the Smart Home App is turned ON, the Passive Infra-Red (PIR) sensor <ref type="bibr" target="#b27">[27]</ref> will be turned ON to detect the heat signals and motion inside the room. If any movement is detected, it will activate a buzzer and an SMS of the detected intrusion is sent to the owner's phone. Similarly, when the door is opened, the signal breaks and the owner is alerted with a message of breach from the door.  Live Video Feed: The device actives an IP camera connected to the Wi-Fi hotspot to create a live view in the application. Therefore, when the server is started to project the video, its IP address is be used inside Smart Home App to create the image.</p><p>Figure <ref type="figure" target="#fig_11">9</ref> shows the interface of the smart home. The user can control basic operations such as device selection, turn on/off home appliances, change light colors, fan speed, acquire sensor details, add/view event, and watch live feed camera. The home screen shows the live view of various rooms as shown in Figure <ref type="figure" target="#fig_11">9</ref>(g), and sensor information such as temperature sensor, humidity sensor, number of devices connected to smart home and consumption of electricity. A user can further create a new event if required by using the "Add Task" shown in Figure <ref type="figure" target="#fig_11">9</ref>(e). The use case diagram of smart home automation shown in Figure <ref type="figure" target="#fig_2">10</ref> describes the interaction of different actors user, app database and sensors. Figure <ref type="figure" target="#fig_2">11</ref> shows the class diagram of smart home automation to describe the interaction of different classes with their different functions. Alert class describes the important aspects of real-time applications such as latency, response time and deadline. User will be alerted if response time is more than threshold value. Further, alert can be generated if deadline of a particular request is missing. Moreover, user can be intimated when latency is more than its threshold value.  Actuator: Defines a method to perform an action on arrival of a tuple from an application module to perform different operations of smart home automation as described in Table <ref type="table" target="#tab_6">3</ref>. When user preforms any operation, this class override the defined method to execute corresponding operation. The latency of different devices is defined using attributes of this class as shown in Table <ref type="table" target="#tab_7">4</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Implementation of Proposed Technique in iFogSim</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Communication Network:</head><p>The physical topology (tree topology) of the smart home automation is modeled in iFogSim via FogDevice, Sensor and Actuator classes as described in Figure <ref type="figure" target="#fig_12">12</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A C C E P T E D M</head><p>A N U S C R I P T  Tuple: Central unit of communication amongst Fog entities. The sensors in iFogSim generate tuples that can be referred as tasks in Cloud computing. The creation of tuples (tasks) is event driven and the interval between generating two tuples is set following deterministic distribution while creating the sensors. The instances of Tuple class in iFogSim <ref type="bibr" target="#b16">[17]</ref> are represented as tuples, which are inherited from the Cloudlet class of CloudSim <ref type="bibr" target="#b14">[15]</ref>. Categorization of tuples is done with its type and destination and source application modules and it is described in Table <ref type="table" target="#tab_6">3</ref>. The length of data encapsulated in the tuple and processing requirements (defined as Million Instructions (MI)) are specified by the attributes of the class.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Application:</head><p>The smart home application is modeled as a directed acyclic graph (DAG), the vertices of the graph representing modules that perform processing on incoming data and edges denoting data dependencies between modules as shown in Figure <ref type="figure" target="#fig_12">12</ref>. These entities are realized using the following classes.</p><p>AppModule: Instances of AppModule class represent processing elements of fog applications and realize the vertices of DAG. AppModule is implemented by extending the class PowerVm in CloudSim. For each incoming tuple, an AppModule instance processes it and generates output tuples that are sent to next modules in the DAG. The application modules of SHA are Admin, Owner, System, Appliances, Events, Database and Sensors/IP Camera as shown in Figure <ref type="figure" target="#fig_16">13</ref> and the description of above-mentioned application modules is given in Section 4.2.1.</p><p>AppEdge: An AppEdge instance denotes the data dependency between a pair of application modules and represents a directed edge. Each edge is characterized by the type of tuple it carries, which is captured by the tupleType attribute of AppEdge class along with the processing requirements and length of data encapsulated in these tuples. The edges between the application modules in the smart home application are described in Table <ref type="table" target="#tab_6">3</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>AppLoop:</head><p>AppLoop is an additional class, used for specifying the process-control loops of interest to the user.</p><p>In iFogSim, the developer can specify the control loops to measure the end-to-end latency. An AppLoop instance is fundamentally a list of modules starting from the origin of the loop to the module where the loop terminates. There are two loops "monitor() and update()" in SHA as shown in Figure <ref type="figure" target="#fig_16">13</ref>.</p><p> Monitoring Service: Fog server manager is used to monitor the resource utilization statistics during scheduling of resources.</p><p> Resource Management Service: We have used edge-ward placement strategy for the deployment of application modules close to the edge of the network and customized resource scheduling policy by overriding the method updateAllocatedMips inside the class FogDevice (as discussed in Section 3). Proposed resource scheduling policy schedules the fog devices for execution of different application modules to perform various operations of smart home application. The pseudo code for resource scheduling policy is given in Figure <ref type="figure">4</ref>.</p><p>The detailed description to model and simulate Fog computing environment in iFogSim for different applications can be found in <ref type="bibr" target="#b16">[17]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.1">Application Model: Smart Home Automation</head><p>Figure <ref type="figure" target="#fig_16">13</ref> shows the application model of the Smart Home Automation (SHA), which describes the sequence of operations of an application and their type of tuples. The application modules are modeled in iFogSim using the AppModule class. As depicted in Figure <ref type="figure" target="#fig_16">13</ref>, there are data dependencies between modules, and these dependences are modeled using AppEdge class in iFogSim. The control loop of interest for SHA application is modeled in iFogSim using AppLoop class. The application receives signals by different sensors and an actuator DISPLAY displays the current status of smart home to the user through preconfigured mobile device. SHA application consists of different major modules as shown in Figure <ref type="figure" target="#fig_16">13</ref>. The functions of these modules are as follows:</p><p>1. Admin: An administrator can add/remove or configure new smart devices to the Smart Home environment.</p><p>The other functions of an administrator are: 1) to create, configure or delete user settings via the administration user interface and 2) to reset all settings to defaults or a saved configuration. 2. Owner: The Owner of SHA enabled mobile device can select appliances, turn/on off devices, select attributes and receive SMS of an intrusion detection. 3. System: The system module automatically choose device if user is connected to home network and notifies the current status of home to user. 4. Appliances: The user can control the basic functionalities of their home appliances. For instances, turn on/off, changing the color of lights, speed of fans, etc. 5. Events: SHA application provides the functionality of reminding the current occurring events to the user.</p><p>The user has to add an event in SHA application with the option of reminding or not. If not, application will not remind for event, but the user can have look of event going to occur. 6. Database: The SHA application communicates with a database module to send, receive and store sensor information. This module provides encrypted back-end database. 7. Sensors/IP Camera: SHA application monitors the data coming from the sensors. For instances, check home temperature and humidity using temperature and humidity sensor, check current power consumption by the house using kWh measuring sensor, etc. SHA application monitors the outside activities of home using live feed camera and intruder detection system. Intruder detection system contains PIR sensors all around the house to detect any proximity to the house and alert the owner of that house.</p><p>The properties of tuples (modeled using Tuple class) carried by edges between the modules in the smart home application are described in Table <ref type="table" target="#tab_6">3</ref>. The latency of different devices from source to destination is described in Table <ref type="table" target="#tab_7">4</ref>. The configuration (CPU GHz, RAM size and Power) of different fog devices is described in Table <ref type="table" target="#tab_8">5</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Evaluation</head><p>The experiments have been performed with different QoS parameters, such as response time, latency, energy consumption and network bandwidth.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Benchmark Techniques</head><p>To evaluate the performance of the resource management technique ROUTER, we selected compared it against two similar techniques from the literature: Gateway-based Fog Computing (GFC) technique <ref type="bibr" target="#b10">[11]</ref> and Virtualization based Resource Provisioning (VRP) technique <ref type="bibr" target="#b11">[12]</ref> discussed in Section 2. We further detail precise functionality and differences with our approach below:</p><p> GFC <ref type="bibr" target="#b10">[11]</ref> is a gateway-based fog computing architecture for wireless sensors and actuator networks which consists of master and slave nodes, and manages virtual gateway functions, flows, and resources. In GFC, gateway and master node are connected by Ethernet interface, and master node controls the virtual path among slave nodes. Further, slave node performs the resource management for scheduling of resources to process job requests. GFC uses First Come First Serve (FCFS) based resource scheduling algorithm to schedule the resources to optimize response time. The GFC is implemented using CloudSim toolkit by extending new class, which contains the implementation of three fog nodes. Authors have done without using ifogsim by adding new class, which extends the resource scheduling class of CloudSim. They focused only on single performance parameter (response time) with limited fog nodes and problem the starvation can occur in case of larger job request, which further leads delay the execution of pending deadline-oriented jobs.</p><p> VRP algorithm uses the concept of parallel and distributed load balancing to develop virtualization based resource scheduling algorithm. VPR uses round robin based scheduling algorithm to process the job requests, which gives fixed time quantum to every job request, which can behave same as FCFS if time quantum is too large. If time quantum is too short much of time is spent in process switching and hence latency and response time increases. Further, the algorithm is tested on Cloud-Analyst simulator that finds proposed solution performs better in terms of energy cost of only processor.</p><p>ROUTER operates by using PSO based resource scheduling technique, which uses multi-objective fitness function to optimize the four different QoS parameters simultaneously. ROUTER forwards the job request to CDS if the FDS is not able to process within threshold time. Furthermore, ROUTER is validated via integration with a lab-controlled smart home automation case study described in Section 4, which is further integrated into an application model built within the iFogSim application layer. Both VRP and GFC use dummy jobs to evaluate their performance while ROUTER uses real-time traffic generated from smart home application. In order to evaluate the performance of ROUTER, GFC and VRP effectively, we used the identical simulation environment described in Section 4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Analysis Results</head><p>Network Bandwidth: Figure <ref type="figure" target="#fig_17">14</ref>  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Latency:</head><p>We analyzed the latency of each resource management technique (i.e the delay before transfer of user requests for job processing). With increasing the number of operations, the value of latency increases as shown in Figure <ref type="figure" target="#fig_17">14</ref>(b). It is observable that ROUTER has a lower latency in contrast to both GFC and VRP (as operations increase). The average value of latency in ROUTER technique is 10.14% and 14.44% less than GFC and VRP respectively. The reason is because ROUTER executes job requests at Fog Data Server (FDS) instead of sending job requests to Cloud Data Server (CDS) which would result in a larger communication delay. With increasing the number of operations, response time increases. The average value of response time in ROUTER technique is 14.03% and 15.65% less than GFC and VRP respectively. The reason for reduced response time is due to the request handling mechanism provisioning resources for job requests before actual scheduling of resources. Furthermore, ROUTER tracks the state of all resources at each point of time, enables it to take an optimal decision than GFC and VRP.</p><p>Energy Consumption: It is the sum of energy consumed by the processor, switching equipment, storage device, network device and other components such as fans, conversion losses <ref type="bibr" target="#b1">[2]</ref>. With increasing the number of operations, the value of energy consumption increases as shown in Figure <ref type="figure" target="#fig_17">14(d)</ref>. The average value of energy consumption in ROUTER technique is 12.35% and 13.45% less than GFC and VRP respectively. An effective scheduling of resources using PSO reduces significant amount of network traffic, which leads to reducing the number of idle resources (processor, switching equipment, storage device, network device) that reduces the wastage of energy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Conclusions and Future Work</head><p>In this research paper, QoS-aware resource management technique is proposed using fog-assisted cloud computing environment, which manages IoT devices efficiently. Furthermore, we designed a case study of IoT based smart home automation to validate the proposed technique. The performance of the proposed technique has been evaluated in Fog computing environment using iFogSim toolkit. Experimental results demonstrate that the proposed technique reduces the network bandwidth by 12.36%, response time by 10.14%, latency by 14.03% and energy consumption by 12.35% and it detects intrusions to provide security.</p><p>In future, the proposed technique can be enhanced to work with some other parameters such as scalability, cost, reliability and availability. In fog computing system, trade-off between delay and power consumption is an open research area. Further, the proposed technique will be verified in a real fog environment for the practical realization.</p><p>In future, ROUTER architecture can be generalized to other fog computing applications such as agriculture, healthcare, weather forecasting, traffic management and smart city. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>1 Highlights</head><label>1</label><figDesc>Designed a request handler mechanism to manage job requests of IoT devices  Proposed PSO based resource scheduling technique for fog-assisted cloud environment  Validated with the help of a case study of IoT based smart home automation  Optimized QoS parameters such as response time, bandwidth, energy and latency A C C E P T E D M A N U S C R I P T</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>5 Knowledge</head><label>5</label><figDesc>Base: Stores historical information pertaining to resource and application demand to improve decision-making processes in future IoT-based applications.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: ROUTER Architecture</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Functional Components</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Request Handler Mechanism If the partially satisfies the demand of the job request ( then the FSM has to wait for Minimum Constraint Time (</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Front View of Smart Home</figDesc><graphic coords="10,137.45,431.01,295.80,141.18" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Interaction of Smart Home Components with Mobile App using Arduino IDE Figure 7 and 8 depicts the interaction of devices in the smart home application, and integration of different components, respectively. The smart home contains an Arduino board and different home appliances such as AC, fan, bulb and doors. The components are interacting with each other via the following sequence:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Interaction of Arduino IDE and Arduino UNO  ESP8266 to Arduino: ESP receives the signal/data from the server created at the specific static IP address. TheArduino then matches the header with the prescribed header format and then further breaks down the signal and uses the resultant data to enable or disable the desired pins.</figDesc><graphic coords="11,143.29,131.97,284.12,197.55" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Interaction of Different Components</figDesc><graphic coords="11,245.86,398.68,73.07,122.33" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: Different Operations of Smart Home App</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 12 describes</head><label>12</label><figDesc>Figure 12 describes the component mapping for smart home automation within a simulation environment using the. iFogSim toolkit. Different sensors are used to control different activities such as voltage, light, motor speed</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 10 : 13 Figure 11 :</head><label>101311</label><figDesc>Figure 10: Use Case Diagram of Smart Home AutomationThe following classes within iFogSim are modified to implement IoT based smart home application within the greater Fog environment: FogDevice: Describes the hardware features of Fog devices and their relations with sensors and other Fog devices. We have extended PowerDatacenter class of CloudSim<ref type="bibr" target="#b14">[15]</ref> to allow the main attributes of the FogDevice class to access downlink and uplink bandwidths (specifying the communication capacity of Fog devices), storage size, processor and memory. Functions of this class specify the scheduling of resources among application modules executing on it and their deployment and release after execution. Moreover, we have developed a Listener module, which receives the data from different sensors as shown in Figure12.Sensor: In the iFogSim toolkit, IoT sensors are represented by instances of the Sensor class. Features of a sensor, extending from its connectivity to output aspects, are represented by attributes of this class. The class holds a reference attribute to the gateway Fog device to which the sensors are attached. We used reference attributes of Sensor class to simulate the behavior of different sensors, which are gathering different types of information at IoT layer as shown in Figure11.</figDesc><graphic coords="13,57.94,156.28,512.59,299.15" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 12 :</head><label>12</label><figDesc>Figure 12: The Mapping of the Components of Smart Home Automation with iFogSim Toolkit Controller: The Controller object launches the AppModules on their assigned Fog devices following the placement information provided by Module Mapping object and periodically manages the resources of Fog devices as shown in Figure 12. When the simulation is terminated, the Controller object gather results of cost, network usage and energy consumption during the simulation period from the Fog devices.</figDesc><graphic coords="15,220.65,230.60,82.06,55.44" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Figure 13 :</head><label>13</label><figDesc>Figure 13: Application Model of the Smart Home Automation</figDesc><graphic coords="16,57.94,325.94,493.47,365.83" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Figure 14 .</head><label>14</label><figDesc>Figure 14. Evaluation results for resource managers ROUTER, GFC, and VRP: (a) Network Bandwidth, (b) Latency, (c) Response Time, (d) Energy Consumption.</figDesc><graphic coords="19,278.78,261.18,187.57,136.33" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Comparison of Existing Techniques with Proposed Technique (ROUTER)</figDesc><table><row><cell>Authors</cell><cell>Applicable Network</cell><cell>Fog Nodes</cell><cell>Nodal collaboration</cell><cell>Focus</cell><cell>Response Time</cell><cell cols="3">Performance Parameters (QoS) Energy Network Latency Bandwidth</cell></row><row><cell>Deng et al. [8]</cell><cell>Mobile Network</cell><cell>Servers</cell><cell>Master slave</cell><cell>Application management</cell><cell>✖</cell><cell>✔</cell><cell>✔</cell><cell>✖</cell></row><row><cell>Cuong et al. [9]</cell><cell>Vehicular Network</cell><cell>Servers</cell><cell>Peer to Peer</cell><cell>Application management</cell><cell>✖</cell><cell>✔</cell><cell>✖</cell><cell>✖</cell></row><row><cell>Lin et al. [10]</cell><cell>Mobile Network</cell><cell>Base Stations</cell><cell>Peer to Peer</cell><cell>Network Management</cell><cell>✖</cell><cell>✔</cell><cell>✖</cell><cell>✖</cell></row><row><cell>Wangbong et al. [11]</cell><cell>IoT</cell><cell>Network Devices</cell><cell>Peer to Peer</cell><cell>Resource Management</cell><cell>✔</cell><cell>✖</cell><cell>✖</cell><cell>✖</cell></row><row><cell>Yu et al. [12]</cell><cell>IoT</cell><cell>Network Devices</cell><cell>Peer to Peer</cell><cell>Resource Management</cell><cell>✖</cell><cell>✔</cell><cell>✖</cell><cell>✖</cell></row><row><cell>Stojkoska et al. [13]</cell><cell>Mobile Network</cell><cell>Base Stations</cell><cell>Cluster</cell><cell>Application management</cell><cell>✖</cell><cell>✔</cell><cell>✖</cell><cell>✖</cell></row><row><cell>Zhang et al. [14]</cell><cell>Vehicular Network</cell><cell>Servers</cell><cell>Master slave</cell><cell>Network Management</cell><cell>✔</cell><cell>✖</cell><cell>✖</cell><cell>✖</cell></row><row><cell>ROUTER</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>(Proposed)</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>IoT Network Devices and Servers Peer to Peer Application, Network and Resource Management</head><label></label><figDesc></figDesc><table><row><cell>✔</cell><cell>✔</cell><cell>✔</cell><cell>✔</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 2 :</head><label>2</label><figDesc>PSO Terminology    </figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head></head><label></label><figDesc>Present state of the particle (request), which can be completion state, execution state, ready state, waiting state or submission state.</figDesc><table><row><cell>Local Best Position (LocalOptimalState)</cell><cell>Best position of particle (job request) as particle attains</cell></row><row><cell></cell><cell>M A N U S C R I P T</cell></row><row><cell cols="2">A C C E P T E D</cell></row><row><cell>Global Best Position</cell><cell></cell></row><row><cell>(GlobalOptimalState)</cell><cell></cell></row></table><note><p>Best position of particle (job request) attains among the total group of particles (job request list).</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>Table 3 :</head><label>3</label><figDesc>The description of Intermodule Edges in the Smart Home Application</figDesc><table><row><cell>Operation Name</cell><cell>Tuple Type</cell><cell>Description</cell><cell>CPU Length (MIPS)</cell><cell>Network Length (Bytes)</cell></row><row><cell>Register New Mobile Phone/Device</cell><cell>Add User</cell><cell>Add new user to Smart Home Application</cell><cell>2000</cell><cell>48</cell></row><row><cell>Get Status of Event</cell><cell>Return Status</cell><cell>Returns the status of every event after its occurrence</cell><cell>2200</cell><cell>60</cell></row><row><cell>Update Information of User</cell><cell>Update User</cell><cell>Update the user details</cell><cell>2800</cell><cell>63</cell></row><row><cell>Unregister Mobile Phone/Device</cell><cell>Delete User</cell><cell>Delete user form SHA database</cell><cell>2000</cell><cell>50</cell></row><row><cell>Sign Up</cell><cell>Login</cell><cell>User performs login to application in order to get access to device</cell><cell>3500</cell><cell>57</cell></row><row><cell>Verification of Registered Device</cell><cell>Verify</cell><cell>Verify the details of user for authentication</cell><cell>2200</cell><cell>45</cell></row><row><cell>Choose Home Appliance</cell><cell>Select Appliance</cell><cell>Select the appliance, which can be AC, microwave, fan, light, washing machine etc.</cell><cell>2000</cell><cell>52</cell></row><row><cell>Get Status</cell><cell>Check Status</cell><cell>Check the status of the security of home</cell><cell>2200</cell><cell>54</cell></row><row><cell>Show Status</cell><cell>Display Status</cell><cell>Display the checked status on mobile display</cell><cell>3100</cell><cell>50</cell></row><row><cell>Fog Device Selection</cell><cell>Choose Device</cell><cell>Enable authorized user to choose a communicating device</cell><cell>2200</cell><cell>50</cell></row><row><cell>Choose Variables</cell><cell>Select Attributes</cell><cell>Select attributes for Set Value Function</cell><cell>3500</cell><cell>55</cell></row><row><cell>Assign Value to Variables</cell><cell>Set Value</cell><cell>Enable user to adjust values according to the appliances and device capacities using open adjustment panel.</cell><cell>3000</cell><cell>50</cell></row><row><cell>Change Appliance Details</cell><cell>Update</cell><cell>Update the appliance information</cell><cell>2000</cell><cell>50</cell></row><row><cell>Turn ON-OFF Electric Appliance</cell><cell>Turn On/Off</cell><cell>Enable the user to turn on/off the chosen appliance</cell><cell>2200</cell><cell>66</cell></row><row><cell>Display Task</cell><cell>View Event</cell><cell>Enable the user to add the selected task</cell><cell>3100</cell><cell>65</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Table 4 :</head><label>4</label><figDesc>Latency of different Devices</figDesc><table><row><cell>Source</cell><cell>Destination</cell><cell>Latency (secs)</cell></row><row><cell>IP Camera</cell><cell>Smartphone</cell><cell>6</cell></row><row><cell>Smartphone</cell><cell>Wi-Fi Gateway</cell><cell>2</cell></row><row><cell>Wi-Fi Gateway</cell><cell>ISP Gateway</cell><cell>4</cell></row><row><cell>ISP Gateway</cell><cell>Cloud Data Server (CDS)</cell><cell>100</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8"><head>Table 5 :</head><label>5</label><figDesc>Configuration of different Fog Devices</figDesc><table><row><cell>Device Type</cell><cell>CPU GHz</cell><cell>RAM (GB)</cell><cell>Power (W)</cell></row><row><cell>VM</cell><cell>3.0</cell><cell>4</cell><cell>107.339</cell></row><row><cell>Wi-Fi Gateway</cell><cell>3.0</cell><cell>4</cell><cell>107.339</cell></row><row><cell>Smartphone</cell><cell>1.6</cell><cell>1</cell><cell>87.53</cell></row><row><cell>ISP Gateway</cell><cell>3.0</cell><cell>4</cell><cell>107.339</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9"><head></head><label></label><figDesc>(a)  shows the average network bandwidth of 1789.6 B/s, 2714.45 B/s and 2830.25 B/s for all resource managers ROUTER, GFC, and VRP. It is observable that both GFC and VRP have a similar network bandwidth of 2770 B/s, ROUTER on average uses 1790 B/s, which is 12.36% and 14.43% less than GFC and VRP, respectively. This is because, ROUTER processes data of IoT devices effectively while fulfilling the QoS requirements at runtime. Another reason of better performance is that PSO achieves global minima quickly, which distributes load effectively during scheduling of resources.</figDesc><table /></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>This research work is supported by the Engineering and Physical Sciences Research Council (EPSRC) -(EP/P031617/1), Melbourne-Chindia Cloud Computing (MC3) Research Network and Australian Research Council (DP160102414). We thank Redowan Mahmud, Shashikant Ilager, Sara Kardani, Shreshth Tuli, and Damian Borowiec for their useful suggestions.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Fog computing for sustainable smart cities: A survey</title>
		<author>
			<persName><forename type="first">Charith</forename><surname>Perera</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yongrui</forename><surname>Qin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Julio</forename><forename type="middle">C</forename><surname>Estrella</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stephan</forename><surname>Reiff-Marganiec</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Athanasios</forename><forename type="middle">V</forename><surname>Vasilakos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys (CSUR)</title>
		<imprint>
			<biblScope unit="volume">50</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page">32</biblScope>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Internet of things: A survey on enabling technologies, protocols, and applications</title>
		<author>
			<persName><surname>Al-Fuqaha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mohsen</forename><surname>Ala</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mehdi</forename><surname>Guizani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mohammed</forename><surname>Mohammadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Moussa</forename><surname>Aledhari</surname></persName>
		</author>
		<author>
			<persName><surname>Ayyash</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Communications Surveys &amp; Tutorials</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="2347" to="2376" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Data-intensive applications, challenges, techniques and technologies: A survey on Big Data</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">L</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chun-Yang</forename><surname>Philip</surname></persName>
		</author>
		<author>
			<persName><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information Sciences</title>
		<imprint>
			<biblScope unit="volume">275</biblScope>
			<biblScope unit="page" from="314" to="347" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Quality of service approaches in IoT: A systematic mapping</title>
		<author>
			<persName><forename type="first">Gary</forename><surname>White</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Vivek</forename><surname>Nallur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Siobhán</forename><surname>Clarke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systems and Software</title>
		<imprint>
			<biblScope unit="volume">132</biblScope>
			<biblScope unit="page" from="186" to="203" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">CHOPPER: An Intelligent QoS-aware Autonomic Resource Management Approach for Cloud Computing</title>
		<author>
			<persName><forename type="first">Sukhpal</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gill</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Inderveer</forename><surname>Chana</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Maninder</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rajkumar</forename><surname>Buyya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Cluster Computing</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="1203" to="1241" />
			<date type="published" when="2018">2018</date>
			<pubPlace>Number 2, Pages</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">SOCCER: self-optimization of energy-efficient cloud resources</title>
		<author>
			<persName><forename type="first">Sukhpal</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Inderveer</forename><surname>Chana</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Maninder</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rajkumar</forename><surname>Buyya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Cluster Computing</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="1787" to="1800" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The internet of things: A survey</title>
		<author>
			<persName><forename type="first">Luigi</forename><surname>Atzori</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Antonio</forename><surname>Iera</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Giacomo</forename><surname>Morabito</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer networks</title>
		<imprint>
			<biblScope unit="volume">54</biblScope>
			<biblScope unit="issue">15</biblScope>
			<biblScope unit="page" from="2787" to="2805" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Towards power consumption-delay tradeoff by workload allocation in cloud-fog computing</title>
		<author>
			<persName><forename type="first">Ruilong</forename><surname>Deng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rongxing</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chengzhe</forename><surname>Lai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tom</forename><forename type="middle">H</forename><surname>Luan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2015 IEEE International Conference on Communications (ICC)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="3909" to="3914" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A proximal algorithm for joint resource allocation and minimizing carbon footprint in geo-distributed fog computing</title>
		<author>
			<persName><forename type="first">Cuong</forename><forename type="middle">T</forename><surname>Do</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chuan</forename><surname>Tran</surname></persName>
		</author>
		<author>
			<persName><surname>Pham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2015 International Conference on Information Networking (ICOIN)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="324" to="329" />
		</imprint>
	</monogr>
	<note>Md Golam Rabiul Alam, Jae Hyeok Son, and Choong Seon Hong</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Cost-Efficient Resource Management in Fog Computing Supported Medical CPS</title>
		<author>
			<persName><forename type="first">L</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Zeng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">;</forename><forename type="middle">S</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">;</forename><forename type="middle">A</forename><surname>Barnawi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Xiang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Transactions on Emerging Topics in Computing</title>
		<imprint>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="1" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A gateway based fog computing architecture for wireless sensors and actuator networks</title>
		<author>
			<persName><forename type="first">Wangbong</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kidong</forename><surname>Nam</surname></persName>
		</author>
		<author>
			<persName><surname>Hak-Gyun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sang-Ha</forename><surname>Roh</surname></persName>
		</author>
		<author>
			<persName><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2016 18th International Conference on Advanced Communication Technology (ICACT)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="210" to="213" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Fog-assisted operational cost reduction for cloud data centers</title>
		<author>
			<persName><forename type="first">Liang</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tao</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yulong</forename><surname>Zou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Access</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="13578" to="13586" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Enabling internet of things for smart homes through fog computing</title>
		<author>
			<persName><forename type="first">Biljana</forename><surname>Stojkoska</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kire</forename><surname>Risteska</surname></persName>
		</author>
		<author>
			<persName><surname>Trivodaliev</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017">2017. 2017</date>
			<biblScope unit="page" from="1" to="4" />
			<pubPlace>Belgrade</pubPlace>
		</imprint>
	</monogr>
	<note>25th Telecommunication Forum (TELFOR</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A Hierarchical Game Framework for Resource Management in Fog Computing</title>
		<author>
			<persName><forename type="first">Huaqing</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yanru</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yunan</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dusit</forename><surname>Niyato</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhu</forename><surname>Han</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Communications Magazine</title>
		<imprint>
			<biblScope unit="volume">55</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="52" to="57" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">CloudSim: a toolkit for modeling and simulation of cloud computing environments and evaluation of resource provisioning algorithms</title>
		<author>
			<persName><forename type="first">Rodrigo</forename><forename type="middle">N</forename><surname>Calheiros</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Anton</forename><surname>Rajiv Ranjan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">César Af De</forename><surname>Beloglazov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rajkumar</forename><surname>Rose</surname></persName>
		</author>
		<author>
			<persName><surname>Buyya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software: Practice and Experience</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="23" to="50" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A survey on resource scheduling in cloud computing: Issues and challenges</title>
		<author>
			<persName><forename type="first">Sukhpal</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Inderveer</forename><surname>Chana</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of grid computing</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="217" to="264" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">iFogSim: A toolkit for modeling and simulation of resource management techniques in the Internet of Things, Edge and Fog computing environments</title>
		<author>
			<persName><forename type="first">Harshit</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Amir</forename><surname>Vahid Dastjerdi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Soumya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rajkumar</forename><surname>Ghosh</surname></persName>
		</author>
		<author>
			<persName><surname>Buyya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software: Practice and Experience</title>
		<imprint>
			<biblScope unit="volume">47</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="1275" to="1296" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Fog-based Smart Healthcare as a Big Data and Cloud Service for Heart Patients using IoT</title>
		<author>
			<persName><forename type="first">Sukhpal</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gill</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Rajesh</forename><surname>Chand Arya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gurpreet</forename><surname>Singh Wander</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rajkumar</forename><surname>Buyya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Intelligent Data Communication Technologies and Internet of Things</title>
		<meeting><address><addrLine>Cham</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="1376" to="1383" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><surname>Kaur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">P</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">S</forename><surname>Gill</surname></persName>
		</author>
		<title level="m">The Future of Cloud Computing: Opportunities, Challenges and Research Trends. In 2018 2nd International Conference on I-SMAC</title>
		<imprint>
			<publisher>IoT in Social, Mobile, Analytics and Cloud</publisher>
			<date type="published" when="2018-08">2018. August</date>
		</imprint>
	</monogr>
	<note>I-SMAC</note>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<author>
			<persName><forename type="first">I-Smac</forename></persName>
		</author>
		<title level="m">IoT in Social, Mobile, Analytics and Cloud)(I-SMAC), 2018 2nd International Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<biblScope unit="page" from="213" to="219" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Latency-aware Virtualized Network Function Provisioning for Distributed Edge Clouds</title>
		<author>
			<persName><forename type="first">Jungmin</forename><surname>Son</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rajkumar</forename><surname>Buyya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systems and Software</title>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Energy-efficient heterogeneous resource management for wireless monitoring systems</title>
		<author>
			<persName><forename type="first">Che</forename><forename type="middle">-</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chun-Yi</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chuan-Yue</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systems and Software</title>
		<imprint>
			<biblScope unit="volume">131</biblScope>
			<biblScope unit="page" from="168" to="180" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Monitoring self-adaptive applications within edge computing frameworks: A state-of-the-art review</title>
		<author>
			<persName><forename type="first">Salman</forename><surname>Taherizadeh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrew</forename><forename type="middle">C</forename><surname>Jones</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ian</forename><surname>Taylor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhiming</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Vlado</forename><surname>Stankovski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systems and Software</title>
		<imprint>
			<biblScope unit="volume">136</biblScope>
			<biblScope unit="page" from="19" to="38" />
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Particle swarm optimization algorithm</title>
		<author>
			<persName><forename type="first">G</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Yu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Inf. Control-Shenyang</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page">318</biblScope>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Emergent Failures: Rethinking Cloud Reliability at Scale</title>
		<author>
			<persName><forename type="first">Peter</forename><surname>Garraghan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Renyu</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhenyu</forename><surname>Wen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alexander</forename><surname>Romanovsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jie</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rajkumar</forename><surname>Buyya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rajiv</forename><surname>Ranjan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Cloud Computing</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="12" to="21" />
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Container-based cluster orchestration systems: A taxonomy and future directions</title>
		<author>
			<persName><forename type="first">Maria</forename><forename type="middle">A</forename><surname>Rodriguez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rajkumar</forename><surname>Buyya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software: Practice and Experience</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">A comparison of particle swarm optimization and the genetic algorithm</title>
		<author>
			<persName><forename type="first">Rania</forename><surname>Hassan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Babak</forename><surname>Cohanim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Olivier</forename><surname>De Weck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gerhard</forename><surname>Venter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">46th AIAA/ASME/ASCE/AHS/ASC structures, structural dynamics and materials conference</title>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page">1897</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">IoT based intrusion detection system using PIR sensor</title>
		<author>
			<persName><forename type="first">Khirod</forename><surname>Sahoo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Umesh</forename><surname>Chandra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pati</forename><surname>Chandra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Recent Trends in Electronics, Information &amp; Communication Technology</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2017">2017. 2017</date>
			<biblScope unit="page" from="1641" to="1645" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
