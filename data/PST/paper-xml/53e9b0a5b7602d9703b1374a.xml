<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Identifying Suspicious Activities through DNS Failure Graph Analysis</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Nan</forename><surname>Jiang</surname></persName>
							<email>njiang@cs.umn.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Dept</orgName>
								<orgName type="institution">University of Minnesota † Bell Laboratories</orgName>
								<address>
									<settlement>Alcatel-Lucent</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Jin</forename><surname>Cao</surname></persName>
							<email>cao@research.bell-labs.com</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Dept</orgName>
								<orgName type="institution">University of Minnesota † Bell Laboratories</orgName>
								<address>
									<settlement>Alcatel-Lucent</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Yu</forename><surname>Jin</surname></persName>
							<email>yjin@cs.umn.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Dept</orgName>
								<orgName type="institution">University of Minnesota † Bell Laboratories</orgName>
								<address>
									<settlement>Alcatel-Lucent</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Erran</forename><surname>Li</surname></persName>
							<email>erranlli@research.bell-labs.com</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Dept</orgName>
								<orgName type="institution">University of Minnesota † Bell Laboratories</orgName>
								<address>
									<settlement>Alcatel-Lucent</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">†</forename><surname>Li</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Dept</orgName>
								<orgName type="institution">University of Minnesota † Bell Laboratories</orgName>
								<address>
									<settlement>Alcatel-Lucent</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Zhi-Li</forename><surname>Zhang</surname></persName>
							<email>zhzhang@cs.umn.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Dept</orgName>
								<orgName type="institution">University of Minnesota † Bell Laboratories</orgName>
								<address>
									<settlement>Alcatel-Lucent</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Identifying Suspicious Activities through DNS Failure Graph Analysis</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">971C7B0636C3B5C67F73F3D5AD7EBD26</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T13:22+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>As a key approach to securing large networks, existing anomaly detection techniques focus primarily on network traffic data. However, the sheer volume of such data often renders detailed analysis very expensive and reduces the effectiveness of these tools. In this paper, we propose a light-weight anomaly detection approach based on unproductive DNS traffic, namely, the failed DNS queries, with a novel tool -DNS failure graphs. A DNS failure graph captures the interactions between hosts and failed domain names. We apply a graph decomposition algorithm based on the tri-nonnegative matrix factorization technique to iteratively extract coherent co-clusters (dense subgraphs) from DNS failure graphs. By analyzing the co-clusters in the daily DNS failure graphs from a 3-month DNS trace captured at a large campus network, we find these co-clusters represent a variety of anomalous activities, e.g., spamming, trojans, bots, etc.. In addition, these activities often exhibit distinguishable subgraph structures. By exploring the temporal properties of the co-clusters, we show our method can identify new anomalies that likely correspond to unreported domain-flux bots.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>The Internet Domain Name System (DNS) is a critical infrastructure service used by nearly every Internet application for locating various resources (e.g., web servers, mail servers, individual endhosts) specified by their (host) domain names. Typically, one endpoint first issues a DNS query to the DNS system to locate the other endpoint before any subsequent data transfer between the two communicating endpoints can commence, be it web downloading, email transfer, instant messaging, or a VoIP call placed on the Internet. A DNS query failure often signifies that the requested resource does not exist in the system when the query is issued. While such a failure may be caused by a mis-typed host name or URL by a human user or occasionally due to DNS misconfigurations by human operators <ref type="bibr" target="#b0">[1]</ref>, a large portion of DNS query failures can be attributed to other causes -as pointed out in several recent studies <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b3">[4]</ref>. For instance, several anti-spam and anti-virus services employ DNS "overloading" to notify a querying host whether the requested domain name belongs to the blacklists they maintain (e.g., of email spam servers or reported attack sites). In particular, as shown in <ref type="bibr" target="#b2">[3]</ref>, many DNS query failures (termed "unproductive" DNS traffic) are caused by "suspicious" and malicious cyber activities, e.g., fast-flux web services, trojan malware and botnets <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b6">[7]</ref>, <ref type="bibr" target="#b7">[8]</ref>.</p><p>Inspired by these studies, in this paper we advance the notion of DNS failure graphs as an effective means for analyzing "unproductive" DNS traffic in a systematic manner and from a network-wide perspective, and for detecting and identifying (large-scale) suspicious and malicious cyber activities. A DNS failure graph is a bipartite graph consisting of domain names of failed DNS queries and hosts issuing such queries, with an edge between a domain name and a host issuing a (failed) DNS query for the name. Such a graph can be constructed using "unproductive" DNS traffic collected at one or multiple networks (or from any host on the Internet, if such data can be collected). The basic intuition behind this notion is that hosts infected by the same malware (e.g., belonging to the same botnet) usually query for the same, similar or otherwise correlated set of domain names, for instance, to locate the Command &amp; Control (C&amp;C) servers, malware hosting sites, stolen data storage servers, etc. To evade detection, the domain names used by these malicious activities often change frequently (i.e., in domain-flux <ref type="bibr" target="#b8">[9]</ref>, <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b10">[11]</ref>); those that do not flux frequently often are blacklisted and blocked after detection. Hence queries for these domain names frequently result in correlated failures, which manifest themselves as a dense subgraph in a DNS failure graph. Such dense subgraphs therefore capture the strong interaction patterns between a set of hosts and a set of domain names. This observation gives rise to a key research question that we address in this paper: Can we effectively identify, differentiate and separate "subgraphs" that are likely corresponding to different types of anomalies (e.g., malware activities) based on the interaction patterns between hosts and domain names in a DNS failure graph?</p><p>To answer this question, we utilize the DNS query data collected at several major DNS servers of a large campus network over a three-month period. Through systematic analysis of the "unproductive" DNS traffic contained in this threemonth DNS query data, we find that while the DNS failure graphs (e.g., constructed using failed DNS queries each day) typically consist of a large number of isolated (connected) components, there often exist one or several "giant" connected components involving a large number of hosts and domain names. While these giant components are connected, they themselves appear to be composed of a number of more densely connected subgraphs. In other words, one cannot simply take each isolated component -especially when such a component is large and involves a significant number of hosts and domain names -as representing and corresponding to a single type of anomaly. We therefore apply a (statistical) graph decomposition technique, which extends the tri-nonnegative matrix factorization (tNMF) <ref type="bibr" target="#b11">[12]</ref> algorithm, to recursively decompose a DNS failure graph and extract dense (bipartite) subgraphs, or co-clusters, representing strong and coherent interaction patterns. By analyzing their structural properties, we classify the resulting co-clusters into three categories: 1) a host-star, where a few hosts dominate by sending a large number of DNS queries; 2) a DNS-star, where a few domain names attract queries from many hosts; 3) a bi-mesh, where strong interaction patterns are observed between a group of hosts and a group of domain names. Using external data sources such as domain name blacklists, we find that most of the DNS-stars are caused by instances of trojan malware accessing blocked domain names. In comparison, the host-stars are primarily the artifacts of spamming activities involving queries for expired domain names of certain email servers. Most interestingly, many bi-mesh structures are found to be associated with bot activities, where the hosts infected by the same bots query a list of domain names that are likely those of C&amp;C servers, malware hosting sites, and other suspicious resources.</p><p>We further characterize and distinguish the suspicious activities associated with these co-clusters by exploring their temporal properties and tracking their evolution over time. We find that a majority of the co-clusters are associated with a stable set of domain names, suggesting that the infected hosts in each co-cluster likely belong to a botnet with a list of hardcoded domain names for querying C&amp;C and other servers. In contrast, we also find that several co-clusters are associated with a set of domain names that flux over time. Analyzing the patterns of domain names involved, the rate they are generated, and corroborating them with existing studies, we identify four of them belonging to several known domain-flux bots. The remaining ones have similar random-looking, but yet distinct domain name patterns; further, their domain name flux rates differ considerably from those of the known domain-flux bots. These observations lead us to believe that they are plausibly associated with domain-flux bots that are yet to be reported, and hence require further scrutiny.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Summary and Contributions.</head><p>The main contributions of the paper are three-fold: i) we advance the notion of DNS failure graphs for network-wide analysis of "unproductive" DNS traffic; ii) we propose an extension of the tNMF graph decomposition method and demonstrate how it can be applied to extract dense subgraphs or co-clusters, which represent strong and coherent interaction patterns between hosts and domain names; and iii) we develop novel methods to systematically analyze, classify and track the structural and other properties of the extracted co-clusters and their evolution over time, and by corroborating with other data sources, deduce that the extracted co-clusters capture correlated DNS failures that are generally associated with same or similar types of anomalies such as malware or botnet activities.</p><p>Unlike many existing anomaly detection techniques which focus primarily on network traffic data -the sheer volume of such data often renders detailed analysis very expensive and reduces the effectiveness of these tools (e.g., too many false positives or negatives), our work provides an effective means to identify and detect large-scale exploits by analyzing and decomposing unproductive DNS traffic -much of which are "footprints" left by these exploits -from a network-wide perspective. Clearly, analyzing DNS failure queries alone is insufficient in detecting large-scale exploits; nonetheless, our DNS failure graph analysis can help winnow down and zero in on likely suspicious activities. Advanced anomaly detection and malware analysis techniques using network traffic data can then be effectively applied to these suspected malicious activities. In summary, our work adds a useful and complementary tool to the existing arsenal of techniques for detecting and combating large-scale exploits. We believe that it can be used as a "first-line" defense in identifying emerging threats that are constantly changing and evolving.</p><p>The remainder of the paper is organized as follows. We first discuss the related work in Section II. In Section III, we analyze the failed DNS queries and introduce the notion of DNS failure graphs. We then propose a co-clustering algorithm for decomposing DNS failure graphs into strongly connected subgraphs in Section IV. Section V presents the classification and interpretation of these dense subgraphs and their temporal properties are studied in Section VI. Finally, Section VII concludes the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. RELATED WORK</head><p>As mentioned earlier, our work is motivated by prior work such as <ref type="bibr" target="#b1">[2]</ref> which first points out using DNS queries for detecting bots, <ref type="bibr" target="#b2">[3]</ref> which employs a supervised machine learning method to classify different attacks using a combination of DNS query failures and network traffic data collected for individual hosts, and <ref type="bibr" target="#b3">[4]</ref> which provides a systematic analysis and classification of DNS traffic. Building upon these earlier studies, our work puts forth a novel and effective methodology for network-wide analysis of unproductive DNS traffic via DNS failure graph decomposition, and demonstrates how the method can be used to identify and differentiate suspicious activities using correlation between hosts and the failed DNS queries. For instance, our analysis uncovers groups of hosts with correlated DNS query failures that differ from known domain-flux bots and are plausibly part of domain-flux or similar botnets that are yet to be reported. Compared with <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b3">[4]</ref>, our method explores explicitly the correlation of failed DNS queries (with small traffic volume) for detecting network anomalies. Unlike <ref type="bibr" target="#b2">[3]</ref>, our method employs an unsupervised machine learning approach and thus does not require training data with expensive manual labels. Similar to our work, <ref type="bibr" target="#b12">[13]</ref> uses co-occurrence relation among DNS queries to extend black domain name lists.</p><p>In addition to the study of unproductive DNS traffic, there is a rich literature regarding anomaly detection by monitoring "unwanted" traffic. Pang et. al. <ref type="bibr" target="#b13">[14]</ref> study the traffic towards unallocated IP blocks (dark space). Similar approach has been applied for "trapping" unproductive traffic using honeynet <ref type="bibr" target="#b14">[15]</ref>. Jin et. al. <ref type="bibr" target="#b15">[16]</ref> characterize and classify the traffic towards temporally unassigned IP addresses(gray space). Similar to these existing works, we demonstrate in this paper that unproductive DNS traffic can also be used Our work is also related to botnet detection. There have been quite a few studies focusing on p2p botnets <ref type="bibr" target="#b4">[5]</ref> and spam botnets <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b6">[7]</ref>, <ref type="bibr" target="#b7">[8]</ref>. These works either manually inject bots into the botnets or use spamming behaviors to group bots from the same botnet. For instance, Holz et al <ref type="bibr" target="#b4">[5]</ref> examines the details of the Storm Worm botnets. They proposes two approaches to mitigate the botnets. The first is called eclipse attack, a special form of the sybil attack. The goal is to separate a part of the P2P network from the rest. The second approach is called polluting attack, whose goal is to "overwrite" the content previously published under a certain key. These attacks are specific to P2P botnets, and they do not apply as general botnet detection techniques. Many spamming botnets detection methods <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b6">[7]</ref>, <ref type="bibr" target="#b7">[8]</ref> make use of similar spamming behaviors to detect and classify bots from different botnets. However, these measurements are more expensive and hard to obtain compared to the DNS traffic. Moreover, our method by passively monitoring failed DNS queries is a more lightweight approach than the existing methods, given the much lower volume of the DNS traffic.</p><p>There have been studies focusing on individual botnets which maintain connections between the bots and the C&amp;C servers using techniques like domain-flux <ref type="bibr" target="#b8">[9]</ref>, <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b9">[10]</ref> or fast-flux <ref type="bibr" target="#b16">[17]</ref>, <ref type="bibr" target="#b17">[18]</ref>. These works rely on capturing bot instances and identify bot signature or the domain name generation (DGA) algorithms via reverse engineering. These methods are in general very expensive and require strong prior knowledge on the specific botnets. Hence, unlike our work, these methods do not generalize.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. DNS TRAFFIC AND FAILURE GRAPHS</head><p>In this section, we advance the notion of DNS failure graphs, which capture the patterns that hosts query for nonexisting domain names. We first briefly describe the datasets used in this paper. We then provide an overview analysis of failed DNS queries in term of their plausible causes and formally define DNS failure graphs. At the end of the section, we present an analysis of the properties of DNS failure graphs and demonstrate the community structures (or densely connected subgraphs) in DNS failure graphs. Datasets. Our study utilizes the DNS data collected at a large university campus network over a 3-month period (from Jan. 2009 to Mar. 2009). The network contains around 20K hosts, with IP addresses assigned either statically (e.g., lab machines, web or mail servers) or dynamically (e.g., hosts on residential dormitory networks or wireless LANs). The collected DNS dataset contains DNS requests and responses from all hosts within the campus network for locating resources outside the campus network. The data is in the format of packet traces collected using TCP dump. For DNS requests, we have the information of (anonymized) hosts who initiate the queries and the target domain names. For DNS responses, we have access to resolved IP addresses and associated response codes (if any). We focus on type A DNS requests only, which queries for the IPv4 address(es) associated with a domain name. We refer to the DNS queries for which the DNS responses contain a response code other than "NOERROR" as failed DNS queries. Each day approximately 2 million DNS queries are captured, in which around 300K are failed DNS queries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Analysis of Failed DNS Queries</head><p>We first investigate the plausible causes for such a large number of failed DNS queries in the network by examining patterns in the failed DNS queries as well as utilizing other data sources. Table <ref type="table" target="#tab_0">I</ref> shows a sample classification of the failed DNS queries on 01/05/2009. We observe that a large portion of failed DNS queries are due to the so-called "overloaded traffic" <ref type="bibr" target="#b3">[4]</ref>, where several anti-spam and anti-virus services employ DNS to notify a querying host whether the requested domain name belongs to the blacklists they maintain (e.g., of email spam servers or reported attack sites). We observe that this type of failed DNS queries involves only a small number (fewer than 20) of hosts, mostly email servers for spam filtering purpose. Server error is the second major contributor to the failed DNS queries. Such failed DNS queries are caused by one or a few domain names related to a popular web service that are temporarily unresolvable. DNS misconfigurations such as a query for www.example.com.example.com (such "recursive domain names" are likely due to Windows default DNS suffix configured at client machines) account for 7.87% of all the failed DNS queries, while DNS typos, which are likely caused by users mistyping a few alphabetics of the desired domain names, account for 2.26%.</p><p>For the remaining failed DNS queries, we look up the target domain names in each failed query in a number of auxiliary data sources, including various blacklists <ref type="bibr" target="#b18">[19]</ref>, security logs <ref type="bibr" target="#b19">[20]</ref>, botnet related domain names obtained via reverse engineering <ref type="bibr" target="#b20">[21]</ref>, and information obtained by googling the Internet <ref type="bibr" target="#b21">[22]</ref>. If a target domain name is used by a worm/trojan and blacklisted, we attribute the failed DNS query as Known Threats. We find that 2.08% of the failed DNS queries belong to this category. Another 0.75% of the failed DNS queries can be attributed to hosts participating in p2p activities, as the target domain names are associated with p2p applications and services found on-line. Finally, we cannot properly attribute the causes for the remaining 27.33% of the failed DNS queries using various on-line sources mentioned above, and thus classify them as Unknown. We manually inspect these Unknown domain names and find that most of these targeted domain names contain random-looking strings with distinct patterns. As we shall see later in Section VI, most of them are likely associated with suspicious activities, e.g., unreported domain-flux botnet activities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. DNS Failure Graphs and Properties</head><p>So far, we identify potential threats in "unproductive" DNS traffic by matching the target domain names in failed DNS queries against data sources of known security threats. However, such a method is rather time-consuming, whose effectiveness hinges highly on the availability of useful external data sources. By its very nature, this method cannot be used to detect emerging threats that are yet to be discovered and reported. As shown in Table <ref type="table" target="#tab_0">I</ref>, a significant portion (27%) of failed DNS queries cannot be attributed to known threats. The large majority of these failed DNS queries contain domain names that are suspicious looking and are unlikely to represent "legitimate" resources on the Internet, we have little information regarding them. Hence we are interested in an automatic method for identifying suspicious activities behind these failed DNS queries. This motivates us to develop the DNS failure graph analysis technique presented in this paper. Our basic idea is that suspicious activities are often reflected as strong correlations between hosts and failed domain names. This is because hosts infected by the same malware or participating in the same activity tend to access similar non-existing domain names and hence generate same failed DNS queries. Using a (bi-partite) DNS failure graph to capture the interactions between hosts and domain names, a strong correlation between hosts and the DNS query failures is reflected directly by a densely connected subgraph in the corresponding DNS failure graph. Thus the problem of identifying suspicious activities can be casted as the problem of extracting strongly connected subgraph components from the DNS failure graph.</p><p>Before we perform the DNS failure graph analysis, we first "cleanse" the failed DNS queries by filtering the ones that are attributable to "normal" network activities such as DNS overloading, server errors and misconfigurations. We note that we have developed a heuristic cleansing procedure to automatically filter these "normal" DNS query failures. For example, we filter overloaded DNS query failures by matching the responders of these queries against a list of known antispam/anti-malware sites, and adopt a similar approach as proposed in <ref type="bibr" target="#b1">[2]</ref> for filtering failed DNS queries due to server errors. Due to space limitation, we do not provide the detailed heuristics used here. Note that we do not automatically filter failed DNS queries involving p2p activities, partly because they are hard to filter automatically. More importantly, many p2p applications or services are sometimes abused by malware activities; some of them appear suspicious on their own. Since our objective is to use failed DNS queries to identify potentially suspicious activities, we perform this cleansing step mainly to reduce the amount of data used in the DNS failure graph analysis. The cleansing procedure is fairly conservative in the sense that we only filter failed DNS queries that can be confidently attributed to normal network activities. In fact, as will be evident in our DNS failure graph analysis later, most failed DNS queries due to normal activities are well separated from suspicious ones. Hence this cleansing procedure in general does not affect the effectiveness of our DNS failure graph analysis technique.</p><p>We now formally define DNS failure graphs: Given an observation period T (in our experiments, we always choose T = 1 day to maximize the amount of correlations observed and eliminate the effect of IP address churns <ref type="bibr" target="#b22">[23]</ref>), let H denote the set of hosts (IP addresses) making at least one failed DNS query, and D be the set of (unique) domain names in the failed queries. A DNS failure graph is a bipartite graph G := {H × D, E}, where an edge e = (h, d) exists between a host h ∈ H and a domain name d ∈ D, i.e., <ref type="figure">(h,</ref><ref type="figure">d</ref>) ∈ E, if and only if host h makes at least one failed DNS query<ref type="foot" target="#foot_1">1</ref> for d during the observation time period T . Given this definition, we construct daily DNS failure graphs (i.e., T = 1 day) using our datasets. We observe that in general there are roughly 2,000 hosts connecting to around 3,000 failed domain names each day. Each daily DNS failure graph is often composed of 1000 or more isolated components (subgraphs): each component is connected, but there is no edge connecting any two (connected) components (i.e., the components are isolated from each other). Despite the large number of isolated components -a large majority of them are small, there exist a few components that are significantly larger than the others. We measure the size of each component in terms of the percentage of hosts covered by the component out of all hosts. Fig. <ref type="figure" target="#fig_0">1</ref> shows the sizes of the largest components over a two-week period (from 01/05/2009 to 01/18/2009), where the solid curve in the figure represents the size of the largest components in the daily DNS failure graphs; for comparison, the dotted curve represents the size of the largest component in the cumulative DNS failure graphs constructed by varying T from 1 day up to the entire two weeks. We see that the size of the largest component in the daily DNS failure graphs ranges from 14% to 37%. As the observation period T expands from 1 day up to the entire two weeks, more hosts (77% in the entire two weeks) are included in the largest component; the big jump in the curve is caused by two large components (in two different days) connected by a single host.</p><p>Despite their large sizes, these connected components are comprised of many loosely connected (e.g., via a few edges) subgraphs, each of which is more densely connected. We use the largest component in the daily DNS failure graph on 01/05/2009 to illustrate this point by visualizing it using  Graphviz <ref type="bibr" target="#b23">[24]</ref>, as shown in Fig. <ref type="figure">2</ref>, where the blue nodes and red nodes represent hosts and domain names, respectively (For clarity of visualization, we have randomly removed 60% of nodes with degree 1 in Fig. <ref type="figure">2</ref>). Clearly, this largest connected component contains several dense subgraphs that are loosely connected via a few edges. These dense graphs imply that there exist strong correlated behaviors ("community structures" in social network analysis jargons) among the hosts in these dense subgraphs: the strong correlations manifest in the failed domain names they query; in other words, there are strong interaction patterns that connect the set of hosts and the set of domain names they collectively query.</p><p>To further illustrate these "community structures," we represent the same graph in Fig. <ref type="figure">2</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>using its adjacency matrix</head><formula xml:id="formula_0">A = [a ij ].</formula><p>The rows and columns of A represent the hosts (H) and the domain names (D), respectively; entry a ij = 1 if edge (h i , d j ) ∈ E, and a ij = 0 otherwise. We rotate the rows and columns in A to best reflect the "community structures" in the graph. We plot the rotated A in Fig. <ref type="figure">3</ref>, where dots represent those non-zero entries in A. The "community structures" (dense subgraphs) in the graph are now visible as "blocks" in A. Further, we see that there are several types of "community" or "block" structures: some contain a small number of hosts but a large number of domain names, other contain a large number of hosts but a smaller number of domain names, and yet other contain both relatively large numbers of hosts and domain names. These different interaction patterns between the hosts and domain names suggest that the hosts involved are likely engaging in different kinds of suspicious activities. These visual analyses suggest that the largest connected component can be further decomposed into dense subgraphs, which more likely correspond to correlated behaviors. These dense subgraphs are connected by a few weak links or random edges which are shown as the light area in Fig. <ref type="figure">3</ref>. Due to the existence of these weak links, we cannot simple treat each subgraph as a single activity. Instead, we need to extract these dense graph components or "communities" to separate different activities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. DECOMPOSING DNS FAILURE GRAPHS</head><p>In this section, we present an algorithm for automatically decomposing, and extracting dense subgraphs from, DNS failure graphs. This algorithm extends tNMF-based graph decomposition technique developed in <ref type="bibr" target="#b11">[12]</ref>, and is capable of identify coherent co-clusters with irregular shapes. An overview of the algorithm is shown in Alg. 1. In the following, we explain each step in detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Co-clustering using tNMF</head><p>Given a DNS failure graph G, as the first step in Alg. 1, we extract all the isolated components from G. Though most of the components are fairly simple and small, there exist several large connected components which are comprised of loosely connected dense subgraphs, and thus are further decomposable. In the next step, we iteratively decompose each of these large components using the tri-nonnegative matrix factorization (tNMF) algorithm, which has been successfully applied to decompose (application) traffic activity graphs (TAGs) in <ref type="bibr" target="#b11">[12]</ref>. In the following, we provide a brief overview of the tNMF algorithm in the context of decomposing DNS failure graphs. Output all coherent co-clusters; 8: end for Given a DNS failure graph G (or rather, a large connected component in G ) representing the interaction patterns of m hosts and n domain names (For simplicity, we abuse the notation by using G to represent a subgraph instead of the original DNS failure graph). Let A m×n be the corresponding adjacency matrix of G. The tNMF algorithm approximately factorizes A m×n into three low-rank nonnegative matrices, R m×k , H k×l , and C n×l so as to minimize the following objective function J, subject to the orthogonality constraints on R and C:</p><formula xml:id="formula_1">min R≥0,C≥0,H≥0,R T R=I,C T C=I J(R, H, C) = ||A -RHC T || 2 F</formula><p>where || • || F is the Frobenius norm, and k, l &lt;&lt; min(m, n). An algorithms is developed in <ref type="bibr" target="#b24">[25]</ref> to solve this optimization problem by iteratively updating R, C and H. In the context of our study, the decomposition results of the tNMF algorithm can be interpreted as follows. The matrices R and C divide the rows and columns into k host groups and l domain name groups, where R •p , p = 1, • • • , k, and C •q , q = 1, • • • , l, serve respectively as the "membership indicator" functions of the row groups and column groups. Assuming a hard co-clustering setting <ref type="bibr" target="#b11">[12]</ref>, we assign each host/domain name to only one row/column group with the largest entry in R/C (random assignment is used to break ties). We denote the new row and column membership indicator matrices in the hard co-clustering setting as R and Ĉ, respectively.</p><p>One group p one column group together a subgraph a co-cluster in G (we use subgraph and cocluster interchangeably hereafter), and its density is computed as follows:</p><formula xml:id="formula_2">H pq := ( RT A Ĉ) pq || R•p || 1 • || Ĉq• || 1 , 1 ≤ p ≤ k, 1 ≤ q ≤ l,<label>(1)</label></formula><p>where || • || 1 is the L 1 -norm. The co-clusters with high H pq (density) values correspond to dense subgraphs, while the ones with low H pq values can be viewed as a loosely connected subgraphs with a small number of random links (or noisy edges). By filtering these weak connections or noisy edges, we can then extract the dense subgraphs from the DNS failure graph (or each of its large connected components).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Obtaining Coherent Co-clusters</head><p>The parameters k and l are two key parameters that determine the number of row groups and column groups, and therefore the total number of resultant co-clusters. Many approaches such as trial-&amp;-error, model selection through statistical testing, and so forth, can be applied for selecting appropriate values for k and l. In this paper, we start with larger (likely than the "true") values for k and l (i.e., we first over-estimate k and l)<ref type="foot" target="#foot_2">2</ref> , which yields finer-grained subgraphs or co-clusters. We then apply a coherent co-cluster selection process to merge these finer-fined subgraphs into more coherent subgraphs or co-clusters (with potentially "irregular" shapes). A similar approach has been applied in <ref type="bibr" target="#b25">[26]</ref>, which shows that such an approach is more effective in obtaining more coherent co-clusters than attempting to directly find the "true" values of k and l.</p><p>With such choices of k and l, we apply the tNMF algorithm to decompose a given DNS failure graph. We compute the densities for all the subgraphs H pq 's thus extracted, and rank them in a decreasing order. We then use the change in the densities of subgraphs thus ranked to differentiate dense subgraphs from non-dense subgraphs, i.e., those that consist mainly of a few random, noisy edges. We use the graph in Fig. <ref type="figure">2</ref> as an example to illustrate how this is done, where we apply the tNMF method with k = l = 15. After ranking the subgraphs based on their densities, Fig. <ref type="figure">4</ref> shows the change in density of these subgraphs, where y-axis shows the relative change (y i -y i+1 )/y i+1 of the (non-zero) density. We observe that the most significant change occurs between the 12th and the 13th subgraphs, and after the densities are much smaller after that.</p><p>After the noisy, non-dense subgraphs are removed, we can check to see whether some of the dense subgraphs can be merged to form more coherent co-clusters (with potentially irregular shapes). We merge two subgraphs if they share either a common host group or a common domain name group. Hence the co-clusters are formed by adjacent dense areas displayed in the density matrix H. Fig. <ref type="figure">5</ref> shows the merging results for the graph in Fig. <ref type="figure">2</ref>: although after removing the noisy, non-dense subgraphs, we have obtained a total of 12 dense subgraphs; these 12 dense subgraphs essentially form 6 coherent co-clusters (after merging)-the numbers in Fig. <ref type="figure">5</ref> identify these 6 coherent co-clusters. Comparing to the other four co-clusters, co-cluster 1 and 3 do not have a typical box shape, thus they cannot be obtained with classical co-clustering algorithms (e.g., the standard tNMF algorithm in <ref type="bibr" target="#b11">[12]</ref>, which always produces box-(or rectangular) shaped co-clusters).</p><p>Until now, we can extract all the dense subgraphs (communities) from DNS failure graphs. In the next section, we analyze these subgraphs in detail and show that they are likely corresponding to different anomalous activities in the network.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. ANALYSIS OF CO-CLUSTERS</head><p>After decomposition, the DNS failure graphs break into multiple coherent co-clusters (dense subgraphs). In this section, we provide a detailed analysis of the co-clusters extracted from our 3-month DNS trace.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Categorizing Co-clusters</head><p>We categorize different co-cluster structures based on whether there are a few dominant hosts or a few dominant  domain names in the co-cluster. More specifically, let A m×n denote the adjacency matrix corresponding to a particular co-cluster consisting m hosts and n domain names. Let p i• := j a i• / i,j a i,j and p •j := i a •j / i,j a i,j be the marginal probabilities of the rows and the columns, respectively. We define the dominant host ratio (dhr) as dhr := -( i p i• log p i• )/ log m, which varies between 0 and 1. A dhr close to 0 implies there are a few dominant hosts that connect to far more domain names than other hosts in the same co-cluster; while a dhr close to 1 means all the hosts query approximately equal number of domain names. Similarly, we define the dominant DNS ratio (ddr) as ddr := -( j p •j log p •j )/ log n to identify dominant domain names. We say a co-cluster has a (likely) host-star structure if dhr &lt; δ and ddr &gt; 1δ. In comparison, a (likely) DNS-star structure is defined if dhr &gt; 1δ and ddr &lt; δ. If dhr &gt; δ and ddr &gt; δ, we call such a structure a bi-mesh.</p><p>In Fig. <ref type="figure">6</ref>, we show the distributions of dhr and ddr of all the co-clusters extracted from the daily DNS failure graphs in our dataset. We note that when a co-cluster is too small, we usually do not have enough evidence to interpret the meaning of that co-cluster. Meanwhile, the three structures are also less meaningful for small co-clusters. Therefore, we filter the coclusters which contain less than 5 nodes (hosts plus domain names). Though the remaining co-clusters account for only 8% of all the co-clusters, they cover more than 42% hosts and 53% domain names. From the strong bi-modal shapes of both dhr and ddr distributions in Fig. <ref type="figure">6</ref>, we choose δ = 0.1 to separate the three types of structures.</p><p>We illustrate examples of the three different subgraph structures in Fig. <ref type="figure" target="#fig_4">7[a-d],</ref> where blue boxes and red circles represent hosts and domain names, respectively. A link means a host has queried for the corresponding domain name. The host-star structure in Fig. <ref type="figure" target="#fig_4">7</ref>[a] is due to a host querying for many nonexisting domain names containing keywords like mail, mx, etc, most likely an instance of spamming activities. We show in Fig. <ref type="figure" target="#fig_4">7</ref>[b] a bi-mesh structure caused by a set of domain-flux bots (Conficker A <ref type="bibr" target="#b8">[9]</ref>). As we shall see in Section VI, this is because these bots access the domain name list from the same DGA algorithm. Another example of the bi-mesh structure is shown in Fig. <ref type="figure" target="#fig_4">7</ref>[c], which corresponds to the activity of the trojan Srizbi <ref type="bibr">[27]</ref>. An example of the DNS-star structure is displayed in Fig. <ref type="figure" target="#fig_4">7</ref>[d], corresponding to 7 hosts querying for a non-existing domain name webhancer.com, which is related to a reported spyware activity <ref type="bibr">[28]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Interpreting Co-clusters</head><p>Given the three types of co-cluster structures (or interaction patterns) between hosts and domain names, we next study the root causes of these different co-cluster structures. For each co-cluster, we first extract all the associated domain names. We then match these domain names against all the external data sources we have. For a matched domain name, we label it with the root cause specified by the data source. We then assign the co-cluster with the most dominant root cause. In Table <ref type="table" target="#tab_1">II</ref>, we summarize all the co-clusters extracted from the daily DNS failure graphs using our dataset. Each row describes a specific category of co-clusters classified by the root cause. The second column shows the root cause of the co-cluster. The third column indicates the proportion of the co-clusters belonging to that category over all the observed coclusters. We provide examples or explanation of each category in column 4. We further identify the percentages of co-clusters in each category that are bi-meshes, host-stars and DNS-stars (column 5-7).</p><p>From Table <ref type="table" target="#tab_1">II</ref>, we observe that trojan (backdoor) is the most common root cause of the co-clusters, which accounts for 28.1% of the co-clusters in total. These detected trojan instances maintain a (usually hard-coded) list of domain names of the C&amp;C servers where they can upload sniffed privacy information and download commands or updates. The domain names are associated with the C&amp;C servers either through standard DNS registrar or using fast-flux mechanism <ref type="bibr" target="#b16">[17]</ref>. The domain names hardly change after the trojans are released. Therefore, such domain names can be easily blocked or removed from the registrar once the trojan malware is detected. The failed DNS queries are caused by trojans querying the domain names that are already blocked or deleted from the DNS registrar. In general, these trojan instances contain a limited number of domain names, and hence the co-clusters in this category often exhibit bi-mesh (63.2%) or host-star (26.3%) structures. We note that although these trojan instances are detached from the C&amp;C servers, they still remain as a threat since the specific exploits are not fixed on these hosts, therefore they are vulnerable to future attacks.</p><p>The second major root cause (25.2%) is the spamming activities. Hosts involved in such activities periodically query for a large number of non-existing mail servers, thereby showing dominant host-star structures. Most of these mail servers belong to large ISP networks and somehow have their domain names changed. We suspect the hosts are infected by certain worms or bots, which use a list of common mail servers. During certain time periods, these worms/bots become active and query for the mail server addresses to propagate spams. We also observe 29.9% of the co-clusters are bimeshes, possibly due to different hosts equipped with the same email server list. No DNS-star is found in this category.</p><p>The third category is caused by domain-flux botnets. The bot master of a domain-flux botnet uses a domain name generation algorithm (DGA) to periodically create a new domain name list for the C&amp;C servers and select a few of them to register. To avoid conflict with the existing registered domain names, the domain names from the DGA algorithm often consist of random-looking strings with either variable or fixed lengths. Every bot belonging to the same botnet is equipped with the same DGA to continually generate domain name list of the C&amp;C servers. A bot tries to connect to the domain names in the list to reach the C&amp;C servers. Since most domain names on the list are not registered, such bot activity often leads to a large number of (correlated) DNS query failures. For some of the domain-flux botnets, the DGA algorithms have been successfully reverse engineered <ref type="bibr" target="#b8">[9]</ref>, <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b9">[10]</ref>. We employ these reverse-engineered DGA algorithms to precompute the domain name list and use it to identify co-clusters caused by domain-flux bots. With this method, we find that in total 13.3% of all the co-clusters are due to domain-flux bots. Because the same bot instances utilize the same DGA algorithm, they hence show strong correlation. As a result, 86% of the co-clusters are bi-meshes, with another 14% are host-stars when only one bot instance from a particular domain-flux botnet is observed.</p><p>P2P activities contribute to 5.2% of all the co-clusters. The correlated DNS query failures happen when more than one hosts look up for the same p2p servers that no longer exist. All of the identified p2p activities are bi-meshes, accessing the same domain names, such as 66bt.cn and zingking.com, etc.</p><p>The last category consists of 28.1% of all the co-clusters that we cannot identify their root causes based on the domain names. 72% of these co-clusters are bi-meshes, which we suspect are possibly caused by unreported anomalous activities.</p><p>As we shall see in Section VI, we find a number of them may correspond to the activities of unreported domain-flux bots.</p><p>How are these dense subgraphs connected? Because the subgraphs represent heterogeneous suspicious activities and hence ideally they are isolated subgraphs in a DNS failure graph. However, by studying the removed weak links, we find that under several circumstances they will be connected to form large subgraphs. One possible reason is that a host may be infected by multiple malwares. For example, in Fig. <ref type="figure">2</ref>, we find two hosts that are multiple infected, one of them is infected by both Conficker B and Horse, and the other is infected by Horse and Torpig. Another possible reason is that hosts infected by different malwares may share some other common behaviors. For example, we observe that P2P related DNS failures are likely to appear together with other infections, such as confickerB, Horse, Win32/Polip. As another example, hosts infected by different trojans may query the same (non-existing) mail servers for spamming purpose. In addition, a few edges are caused by hosts changing their dynamic IP addresses within the observation period.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. EVOLUTION OF DNS FAILURE GRAPHS</head><p>In this section, we explore the temporal properties of the DNS failure graphs. We first propose a best-effort linking algorithm to correlate co-clusters identified from daily DNS failure graphs on various days. We then differentiate subgraphs experiencing significant changes over time from the stable ones. At the end of the section, we show that many of the dynamic subgraphs are likely unreported domain-flux bots.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Tracking Co-cluster Changes</head><p>For a particular co-cluster, either hosts or domain names may change over time due to dynamic address allocation or the domain name generation schemes used by bots. In order to track the changes of co-clusters over time, we employ a best-effort approach which takes both factors into account.</p><p>Given a particular co-cluster G i,t from day t, let H i,t and D i,t be the sets of hosts and the domain names associated with G i,t , respectively. We use the Jaccard Similarity Coefficient (JSC) <ref type="foot" target="#foot_3">3</ref> to measure the similarity between G i,t and every subgraphs G j,t+1 from the following day (t + 1) to find the best match in terms of both the hosts and the domain names. In particular, we call G j,t+1 the best match of G i,t if j = argmax j max(JSC(H i,t , H j,t+1 ), JSC(D i,t , D j,t+1 )) and max(JSC(H i,t , H j,t+1 ), JSC(D i,t , D j,t+1 )) &gt; θ. Fig. <ref type="figure">8</ref> shows the distribution of the JSCs for the best matches between the subgraphs on 01/05/2009 and those on 01/06/2009. Due to the bimodal shape, we choose θ = 0.6 as the cutoff threshold in our experiments, i.e., a co-cluster has no best match if the maximum JSC value is less than 0.6. In this way, We next study the cycles of domain name changes of the 4 candidates. Fig. <ref type="figure" target="#fig_6">9</ref>[a] shows different lengths of cycles of these 4 candidates, where the x-axis represent the number of days (relative to the time when the bot instances begin to be observed) and the y-axis stands for the cumulative number of unique domain names appearing over time. We observe that except for the candidate B which has a cycle length of 1 week, all the others have a cycle length of 1 day. In comparison, we show the cycles of the three known bots in Fig. <ref type="figure" target="#fig_6">9[b]</ref>. All the three known bots have a cycle length of 1 day.</p><p>At the end of the two-week period, the total number of unique domain names observed for each candidate also varies significantly compared with the known bots. For example, Torpig bots only have 42 unique domain names after 2 weeks (3 new domain names generated by the DGA per day). In contrast, candidate C has more than 42K in 2 weeks, where around 3K new domain names are observed per day. To further differentiate whether 4 candidates are the variants of the known bots, we compare the hosts associated with each of them. In fact, there is no IP address shared by the candidates and the known bot instances, suggesting these candidates are plausibly unreported domain-flux bots.</p><p>Unlike the large number of failed domain names, the registered domain names and the successful queries are of special interest to us, because they provide hints on the IP addresses of the C&amp;C servers as well as the botmasters (who registered these domain names). For all these 4 candidates, we extract the associated domain names with similar patterns (as identified in Table <ref type="table" target="#tab_2">III</ref>) from both successful and failed DNS queries. We find there is no successful domain name query for candidate A, C and D, possibly due to the short observation time period and the small sample size. We do observe 1 IP address returned for candidate B, which is registered 7 days before the first access toward this address. However, since the host may be infected by multiple malwares, we need further evidence to verify that this address is indeed a C&amp;C server address for a domain-flux botnet. An interesting observation for candidate B is that a few of the failed domain names are indeed registered. For example, xnihxzatff.com and sjfnannvwv.com are registered on 01/06/2009. However, the hosts are observed to access them only on 01/01/2009, which results in failed DNS queries. We suspect that this may be  caused by either the synchronization problem between the registration process and the DGA algorithm, or the DGA may generate domain names that may repeat in future.</p><p>In summary, even though the use of DGA algorithms to generate domain name lists and query accordingly is a common characterization of domain-flux bots, the query patterns in term of number of domain names and frequency may vary for different kinds of domain-flux bots. Existing studies detect domain-flux bots by identifying a significant increase in DNS query failures <ref type="bibr" target="#b2">[3]</ref>. Such methods may miss the domainflux bots with less intensive activities, such as the Torpig bots <ref type="bibr" target="#b9">[10]</ref>, which only generate 3 domain names per day. Reverse engineering based methods (e.g., <ref type="bibr" target="#b8">[9]</ref>, <ref type="bibr" target="#b10">[11]</ref>) have a much higher accuracy, but are more expensive. In contrast, by correlating DNS activities among hosts, our method can detect domain-flux accurately without the need to access to extra traffic information or knowledge about individual bots.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VII. CONCLUSION</head><p>In this paper, we proposed an approach for identifying and classifying network anomalies based on unproductive DNS traffic. We advanced the notion of DNS failure graphs to capture the interaction between hosts and failed domain names. We then applied a statistical tri-nonnegative matrix factorization technique for extracting coherent co-clusters (dense subgraphs) from DNS failure graphs. Analysis on a 3-month DNS trace captured at a large campus network indicated most of such co-clusters correspond to a variety of network anomalies which often exhibit different subgraph structures. Temporal analysis on these co-clusters identified 8 persistent co-clusters representing groups of hosts collectively query for different sets of domain names over time. Four of them belong to known domain-flux bots; while the remaining four coclusters are plausibly due to unreported domain-flux bots.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 :</head><label>1</label><figDesc>Fig. 1: Size of the largest DNS failure subgraph over time.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 :Fig. 3 :</head><label>23</label><figDesc>Fig. 2: The largest DNS failure subgraph from 01/05/2009.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Algorithm 1 4 : 5 : 6 :</head><label>1456</label><figDesc>Decomposing DNS failure graphs 1: Input: A DNS failure graph G; 2: Obtain disconnected subgraphs G := ∪iGi; 3: for each Gi in G do Run tNMF to decompose Gi into k × l co-clusters; Filter noise in Gi by removing co-clusters with low densities; Merge dense co-clusters; 7:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 :Fig. 5 :Fig. 6 :</head><label>456</label><figDesc>Fig. 4: Density change. Fig. 5: Merging co-clusters.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 7 :</head><label>7</label><figDesc>Fig. 7: Example of DNS failure subgraph structures.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>(a) Domain-flux bot candidates (b) Known domain-flux bots.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 9 :</head><label>9</label><figDesc>Fig. 9: Identifying cycles of domain name changes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>TABLE I :</head><label>I</label><figDesc>Categories of failed DNS queries.</figDesc><table><row><cell>Type</cell><cell>Pct (%)</cell><cell>Examples</cell><cell>Description</cell></row><row><cell>DNS Overloading</cell><cell>32.37</cell><cell>anti-spam/anti-virus applications</cell><cell>spamcop.net, surbl.org</cell></row><row><cell>Server errors</cell><cell>28.01</cell><cell>unresolvable domain names in a server farm</cell><cell>crpkcmsaw00.bankofamerica.com</cell></row><row><cell>Misconfigurations</cell><cell cols="2">7.87 recursive DNS resolver</cell><cell>www.example.com.example.com</cell></row><row><cell>Typos</cell><cell cols="2">2.26 misspelling of domain names</cell><cell>googloe.com, encyclopiedea.net</cell></row><row><cell>Known Threats</cell><cell cols="2">2.08 blocked trojan/worm</cell><cell>g43gwef.com, antispyware2008xp.com</cell></row><row><cell>P2P</cell><cell cols="2">0.75 failures in P2P related applications</cell><cell>66bt.cn, zingking.com</cell></row><row><cell>Unknown</cell><cell>27.33</cell><cell>unknown failures</cell><cell>vuuewgkt.com, dehpydjsi.cn</cell></row><row><cell cols="3">to effectively detecting network anomalies, especially botnet</cell><cell></cell></row><row><cell>behaviors.</cell><cell></cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>TABLE II :</head><label>II</label><figDesc>Categorization of identified co-clusters.</figDesc><table><row><cell>ID</cell><cell>Root cause</cell><cell>Pct.(%)</cell><cell>Details</cell><cell></cell><cell>Bi-mesh</cell><cell>Host-star</cell><cell>DNS-star</cell></row><row><cell>1</cell><cell>Trojan (Backdoor)</cell><cell>28.1</cell><cell cols="2">Variants of Dropper, Pakes!sd6, Rustock.E, Tidserv, WinFixer,</cell><cell>63.2%</cell><cell>26.3%</cell><cell>10.5%</cell></row><row><cell></cell><cell></cell><cell></cell><cell cols="2">Ertfor.A, Kraken, FakeAlert.a, Anti-Virus2008, Crypt.ta, etc.</cell><cell></cell><cell></cell></row><row><cell>2</cell><cell>Spamming</cell><cell>25.2</cell><cell cols="2">Hosts querying for non-existing mail servers.</cell><cell>29.9%</cell><cell>70.1%</cell><cell>0</cell></row><row><cell>3</cell><cell>Domain-flux botnets</cell><cell>13.3</cell><cell>Conficker A/B, Torpig.</cell><cell></cell><cell>66.1%</cell><cell>33.9%</cell><cell>0</cell></row><row><cell>4</cell><cell>Peer-to-peer</cell><cell>5.2</cell><cell cols="2">Hosts querying for non-existing p2p servers.</cell><cell>100%</cell><cell>0</cell><cell>0</cell></row><row><cell>5</cell><cell>Unknown</cell><cell>28.1</cell><cell cols="2">Domain names not found in the data sources.</cell><cell>72.2%</cell><cell>20.1%</cell><cell>7.7%</cell></row><row><cell></cell><cell>Total</cell><cell>100</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="2">(a) Host-star (spamming)</cell><cell cols="2">(b) Bi-mesh (bot: Conficker A)</cell><cell>(c) Bi-mesh (trojan: Srizbi)</cell><cell cols="3">(d) DNS-star (spyware: Webhancer)</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>TABLE III :</head><label>III</label><figDesc>Domain name patterns.</figDesc><table><row><cell>Candidate A</cell><cell>Candidate B</cell><cell>Candidate C</cell></row><row><cell>gkymopkcffqt.com</cell><cell>guxwivkb.com</cell><cell>aufutmguua.com</cell></row><row><cell>ymtyupvty.net</cell><cell>sbttwbkh.com</cell><cell>ncamnsdtxa.com</cell></row><row><cell>fqhfaia.cc</cell><cell>xbhsxdgk.com</cell><cell>hlhxeezzsd.com</cell></row><row><cell>tbllutksqg.com</cell><cell>svvwdddw.com</cell><cell>lpqrmgiwln.com</cell></row><row><cell></cell><cell>Candidate D</cell><cell></cell></row><row><cell cols="3">guyyruldrbrbqyfxdtnb.com, dlqrhudtjiajuopbagwg.com</cell></row><row><cell cols="3">hqcwbspyvdpmhrejvhdi.com, wvkafndfedfoxkcdlimw.com</cell></row><row><cell cols="3">are apparently random strings of a variable length (candidate</cell></row><row><cell cols="3">A) or a fixed length (B of length 8, C of length 10 and D of</cell></row><row><cell cols="3">length 20). This indicates that these domain names are likely</cell></row><row><cell cols="3">generated by machines (using certain algorithms) other than</cell></row><row><cell>by human beings.</cell><cell></cell><cell></cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>978-1-4244-8645-8/10/$26.00 ©2010 IEEE</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_1"><p>We remark that in this paper we consider the DNS failure graphs to be unweighted, representing the absence/presence of a certain DNS query. However, our method can be readily extended to weighted DNS traffic graphs, where the weight of an edge (h, d) can be used to represent, e.g., the number of failed queries from host h for d.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_2"><p>In our experiments, we choose k = l = min(m, n)/30 .</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_3"><p>For two sets A and B, the JSC is defined as |A ∩ B|/|A ∪ B|.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_4"><p>We note that the threshold 0.1 is set to address the cases of domain-flux bots with different domain name generation cycles.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENT</head><p>The work is supported in part by the NSF grants CNS-0626812, CNS-0905037 and CNS-1017647, and the DTRA Grant HDTRA1-09-1-0050. Part of the work was done during a summer internship by the first author at Bell Labs.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>we can track the changes of a particular subgraph by finding its best matches in the subsequent days recursively.</p><p>We use a simple criterion to differentiate stable co-clusters and dynamic ones based on the change of the domain names. We consider a co-cluster to be unstable over time if the maximum JSC between the domain name sets appearing at the first day and any of the subsequent days is less than 0.1 4 . In addition, we only focus on the co-clusters that last for more than one week. For co-clusters with a shorter life, we need more observations to study their changes. There are totally 20 co-clusters that last for more than 1 week, where 12 of them are stable co-clusters. Not surprisingly, these stable co-clusters are caused by correlated trojan malware activities, which access the same set of domain names all the time. However, we identify 8 co-clusters that are more dynamic (i.e., with significant domain name changes). We next study and interpret these dynamic co-clusters.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Analyzing Dynamic Co-clusters</head><p>For the 8 co-clusters with significant domain name changes, using the reverse-engineered DGA algorithm, we find that four co-clusters are related to three types of domain-flux bots: Conficker A, Conficker B and Torpig (the Conficker B bots form two separate co-clusters, due to one particular day when no bot instance sends out DNS queries). In fact, these 4 coclusters cover all the domain-flux bots belonging to these three botnets without any false alarm. In other words, our method can identify these three types of bots with 100% accuracy purely by exploring the correlation in DNS failure graphs.</p><p>In addition, the remaining 4 co-clusters are labeled as unknown and cover 53.2% of the unknown domain names. These co-clusters demonstrate similar patterns as those of the reported domain-flux bots. We next provide a detailed analysis of these co-clusters to show that they are also likely corresponding to unreported domain-flux bots.</p><p>We start by examining at the patterns in the domain names. Table <ref type="table">III</ref> shows some examples of domain names from these 4 candidates. Candidate A uses .com, .net or .cc for the top level domain name while the other three candidates only use .com. The second level domain names from these 4 candidates</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Impact of configuration errors on DNS robustness</title>
		<author>
			<persName><forename type="first">V</forename><surname>Pappas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Massey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Terzis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
	<note>in SIGCOMM&apos;04</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Botnet detection and response, the network is the infection</title>
		<author>
			<persName><forename type="first">D</forename><surname>Dagon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OARC workshop</title>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Using failure information analysis to detect enterprise zombies</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Yegneswaran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Chen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
	<note>in SecureComm&apos;09</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Context-aware clustering of DNS query traffic</title>
		<author>
			<persName><forename type="first">D</forename><surname>Plonka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Barford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IMC&apos;08</title>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Measurements and mitigation of peer-to-peer-based botnets: a case study on storm worm</title>
		<author>
			<persName><forename type="first">T</forename><surname>Holz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Steiner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Dahl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Biersack</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Freiling</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
	<note>in LEET&apos;08</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Spamming botnets: signatures and characteristics</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Achan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Panigrahy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Hulten</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Osipkov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGCOMM &apos;08</title>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Studying spamming botnets using botlab</title>
		<author>
			<persName><forename type="first">J</forename><surname>John</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Moshchuk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Gribble</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Krishnamurthy</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
	<note>in NSDI&apos;09</note>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Botgraph: large scale spamming botnet detection</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Ke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Gillum</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
	<note>in NSDI&apos;09</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<author>
			<persName><forename type="first">P</forename><surname>Porras</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Saidi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Yegneswaran</surname></persName>
		</author>
		<ptr target="http://mtc.sri.com/Conficker/addendumC/" />
		<title level="m">Conficker C analysis</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Your botnet is my botnet: Analysis of a botnet takeover</title>
		<author>
			<persName><forename type="first">B</forename><surname>Stone-Gross</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Cova</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Cavallaro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Gilbert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Szydlowski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Kemmerer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Vigna</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
	<note>in CCS&apos;09</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Conficker working group</title>
		<ptr target="http://www.confickerworkinggroup.org/wiki/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Unveiling core networkwide communication patterns through application traffic activity graph decomposition</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Sharafuddin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z.-L</forename><surname>Zhang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
	<note>in SIGMETRICS &apos;09</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Extending black domain name list by using co-occurrence relation</title>
		<author>
			<persName><forename type="first">K</forename><surname>Sato</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Ishibashi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Toyono</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Miyake</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
	<note>in LEET&apos;10</note>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Characteristics of internet background radiation</title>
		<author>
			<persName><forename type="first">R</forename><surname>Pang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Yegneswaran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Barford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Paxson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Peterson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
	<note>in IMC &apos;04</note>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">The honeynet project</title>
		<ptr target="http://www.honeynet.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Identifying and tracking suspicious activities through ip gray space analysis</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z.-L</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Cao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sahu</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
	<note>in MineNet &apos;07</note>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Measuring and detecting fast-flux service networks</title>
		<author>
			<persName><forename type="first">T</forename><surname>Holz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Gorecki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Rieck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Freiling</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
	<note>in NDSS&apos;09</note>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Realtime detection of fast flux service networks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Caglayan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Toothaker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Drapeau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Burke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Eaton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference For Homeland Security</title>
		<imprint>
			<publisher>Cybersecurity Applications and Technology</publisher>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">MX Toolbox Blacklists</title>
		<ptr target="http://www.mxtoolbox.com/blacklists.aspx" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title/>
		<ptr target="http://www.threatexpert.com" />
	</analytic>
	<monogr>
		<title level="j">ThreatExpert Report</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">An Analysis of Conficker&apos;s Logic and Rendezvous Points</title>
		<author>
			<persName><forename type="first">P</forename><surname>Porras</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Saidi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Yegneswaran</surname></persName>
		</author>
		<ptr target="http://mtc.sri.com/Conficker/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Unconstrained Endpoint Profiling (Googling the Internet)</title>
		<author>
			<persName><forename type="first">I</forename><surname>Trestian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ranjan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kuzmanovi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Nucci</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGCOMM &apos;08</title>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">How dynamic are ip addresses</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Achan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Gillum</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Goldszmidt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Wobber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGCOMM &apos;07</title>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Graphviz -graph visualization software</title>
		<ptr target="http://www.graphviz.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Orthogonal nonnegative matrix t-factorizations for clustering</title>
		<author>
			<persName><forename type="first">C</forename><surname>Ding</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Peng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Park</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">KDD&apos;06</title>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">A scalable framework for discovering coherent co-clusters in noisy data</title>
		<author>
			<persName><forename type="first">M</forename><surname>Deodhar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Ghosh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Dhillon</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
	<note>in ICML&apos;09</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
