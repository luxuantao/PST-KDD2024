<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Developing Calendar Visualizers for the Information Visualizer</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Jock</forename><forename type="middle">D</forename><surname>Mackinlay</surname></persName>
							<email>emackinlay@pare.xerox.tom&gt;</email>
							<affiliation key="aff0">
								<orgName type="department">Xerox Palo Alto Research Center</orgName>
								<address>
									<addrLine>3333 Coyote Hill Rd</addrLine>
									<postCode>94304</postCode>
									<settlement>Palo Alto</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">George</forename><forename type="middle">G</forename><surname>Robertson</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Xerox Palo Alto Research Center</orgName>
								<address>
									<addrLine>3333 Coyote Hill Rd</addrLine>
									<postCode>94304</postCode>
									<settlement>Palo Alto</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Robert</forename><surname>Deline</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Xerox Palo Alto Research Center</orgName>
								<address>
									<addrLine>3333 Coyote Hill Rd</addrLine>
									<postCode>94304</postCode>
									<settlement>Palo Alto</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Developing Calendar Visualizers for the Information Visualizer</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">AFD173B834A4D3B90AEB78E7A36F463C</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T07:07+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Information Visualization</term>
					<term>Graphical Representations</term>
					<term>Information Retrieval</term>
					<term>Detail+Context Technique</term>
					<term>Interactive Animation</term>
					<term>3D Graphics</term>
					<term>Calendars</term>
					<term>Translucent Shadows</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The increasing mass of information confronting a business or an individual have created a demand for information management applications. Time-based information, in particular, is an important part of many information access tasks. This paper explores how to use 3D graphics and interactive animation to design and implement visualizers that improve accessto large massesof time-based information. Two new visualizers have been developed for the Information Visualizer: 1) the Spiral Calendar was designed for rapid access to an individual's daily schedule, and 2) the Time Lattice was designed for analyzing the time relationships among the schedules of groups of people. The Spiral Calendar embodies a new 3D graphics technique for integrating detail and context by placing objects in a 3D spiral. It demonstrates that advanced graphics techniques can enhance routine office information tasks. The Time Lattice is formed by aligning a collection of 2D calendars. 2D translucent shadows provide views and interactive access to the resulting complex 3D object. The paper focuses on how these visualizations were developed. The Spiral Calendar, in particular, has gone through an entire cycle of development, including design, implementation, evaluation, revision and reuse. Our experience should prove useful to others developing user interfaces based on advanced graphics.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>INTRODUCTION</head><p>A vast amount of useful information is rapidly becoming available to businessesand individuals via technologies such as CD-ROM disks and high-speed networks. This increasing mass of information has created a demand for information management applications. Time-based information, in particular, is an important part of many information access Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwisa, or to republish, requires a fee anctlor specific permission. @ 1994 ACM 0-89791-657-3/94/001 1....$3.50 tasks. It captures the patterns of work and provides a spanning property for accessing information <ref type="bibr">[11 ]</ref>. This paper explores how to use 3D graphics and interactive animation to improve access to time-based information. It is part of a larger effort to develop a research prototype called the Information Visualizer (IV), which uses emerging graphics technology to develop visualizers for various types of information <ref type="bibr">[14]</ref>. The goal of the IV research is to tap human perceptual abilities to increase both the volume and rate of information work. One IV research strategy has been to design visualizers for a variety of different types of information structures. We focus here on calendar information because it is a ubiquitous but routine part of most people's information work.</p><p>Although routine, tasks involving time-based information can benefit from visualization. For example, scheduling a group meeting is a task that typically involves many events and constraints. Visualization can even be required for tasks involving a single daily schedule. For example, a person might need to access the previous couple of years to generate a bill, justify a raise, or plan future activities, which could easily involve more than 1000 days and many thousands of events. Timelines of such information have wide aspect ratios that do not easily fit on paper or computer displays. ~pically people break the linear nature of time into a hierarchy of calendars such as year, month, and day. This hierarchy captures daily and seasonal cycles that can be quite useful for scheduling events. For example, a 1985 study by Kincaid et al of office worker use of paper and electronic calendars indicated that workers typically usedat least two different types of paper calendars to support their scheduling tasks <ref type="bibr" target="#b14">[8]</ref>. A person might use a day calendar for daily events and a month calendar for larger events such as trips out of town. Multiple calendars can also benefit from visualization to support coordination and navigation. Electronic calendars are gradually becoming more desirable than paper calendars. In 1985, the Kincaid study determined that office workers preferred their paper calendars because electronic calendars had limited flexibility. By 1993, a Mac-World product review article indicated that current electronic calendars now provide this flexibility, including multiday events, recurring events, priorities, to-dos, and automatic reminders <ref type="bibr" target="#b6">[17]</ref>. Research to improve electronic calendars includes natural language access [2] and the use of graphics techniques for scheduling group meetings <ref type="bibr">[1]</ref>.</p><p>A goal of the research described in this paper is to explore how visualization techniques based in 3D graphics and interactive animation could be used to improve electronic calendars. Previous research on IV [14] suggeststhat advancing graphics technology can be used in a number of ways to design calendar visualizers. 3D graphics can be used to increase the density of information that can be placed in a given area of a computer screen. Interactive animation can be used to increase the real-time interaction between a user and an electronic calendar. In addition to immediate feedback, a "highly coupled" system can provide the user with animate transitions for continuity. Animated transitions tap into human perceptual ability so that the user does not have to cognitively reassimilate the scene when it changes. Finally, visual abstraction can shift information to the perceptual system to speed information assimilation and retrieval. In particular, details can be viewed in context, making them more meaningful.</p><p>We describe how we developed two new IV visualizations for time-based information: 1) the Spiral Calendiw was designed for rapid access to an individual's daily schedule using a 3D spiral to integrate detail and context, and 2) the Time Lattice was designed for analyzing multiple daily schedules by aligning a collection of 2D calendars. The Spiral Calendar, in particular, has gone through an entire cycle of development, including design, implementation, evaluation, revision, and reuse. We believe our experience developing these visualizers will be useful to anyone user interfaces basedon 3D interactive animation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DESIGNING CALENDAR VISUALIZERS</head><p>The design phase for developing calendar visualizers using the Information Visualizer (IV) started with a single daily schedule and then considered how multiple schedules might be visualized. It quickly became apparent to us that people are very familiar with conventional calendar presentations such as tabular layouts, timelines, and the hierarchy of day, week, month, and year calendars and they find these presentations to be quite useful. Given their experience, it seemed unlikely that a completely new design would be more effective than trying to use the advanced graphics techniques developed for other IV visualizers to augment these conventional presentations. We developed the following progression of designs during this analysis:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Timelines</head><p>We first considered timelines because they map directly onto the Perspective Wall visualizer, which was described at CHI'91 <ref type="bibr">[11]</ref>. The Perspective Wall was designed to fold 2D presentations with wide aspect ratios, such as timelines, into 3D perspective. However, since timelines are linear, they do not emphasize the daily and seasonal patterns normally found in daily schedules.</p><p>Pan/Zoom Calendar Since the hierarchy of calendars nests one inside the other, we reasoned that interactive animation might allow the user to quickly zoom and pan over these nested views in an interface similar to <ref type="bibr">Perlin's PAD system [12]</ref>. Figure <ref type="figure" target="#fig_0">1</ref> shows  a sketch of a zoomed view of this design. A prototype implementation revealed that zooming tends to lose important global context. Unlike PAD where details could be identified by their graphical appearance, we found that days tended to look alike, particularly with repeated events. When everything looks the same, pan/zoom navigation is a cognitive rather than a perceptual task.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>The Calendar Room</head><p>We next considered how 3D could be used to increase the density of the visualization to maximize the use of screen space. Figure <ref type="figure" target="#fig_1">2</ref> shows a sketch where the various calendars are placed into a room configuration. This design suffers from a number of problems. The side walls of a calendar room are in extreme perspective, which results in foreshortened text that can be hard to read. The back wall is the natural place to put important information but it is distant from the viewpoint, which makes the text smaller. Finally, the design does not show the connections between the various calendars, which makes navigation more difficult.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Tower Calendar</head><p>Our next design, called the Tower Calendar, is sketched in Figure <ref type="figure" target="#fig_3">4</ref>. Here we used 3D to show the connections among calendars by stacking the calendars in a tower and connecting them using truncated pyramids. The calendars are tilted  toward the user and visible through the" translucent pyramids. The major problem with this design is that the text on the calendam is very foreshortened and hard to read. We have found that text presentation is a critical part of effective design of 3D user interfaces for information access. We applaud the trend towards improved texture mapping because it allows us to use high quality bitmap fonts rather than an ugly and less legible vector font. Improved 3D fonts are likely to open up new visualization opportunities, particularly for routine office information texts, which involve a lot of text. However, even texture mapped fonts are hard to read when they are foreshortened.</p><p>Furthermore, sampling artifacts become quite visible when tilting or zooming increase the size of texture mapped fonts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Spiral Calendar</head><p>Our final design for an individual schedule, called the Spiral Calendar, is shown in Figure <ref type="figure" target="#fig_2">3</ref>. The Spiral Calendar uses 3D to place the various calendars in a receding spiral. The spiral lets the text face the user and also shows the translucent truncated pyramids connecting the calendars. The design of the Spiral Calendar has a number of advantages. The 3D spiral makes efficient use of screen space because details are large and context is small but available for interaction. Perceptually, the user can interact with a familiar and engaging 3D object.</p><p>In addition to the layout, we designed the behavior of the Spiral Calendar. The user clicks with the mouse to focus on a detail of the closest calendar or any other calendar in the spiral. After the click, a yellow rectangle is drawn to give immediate feedback of the selection, and an animation is started to transform the Spiral Calendar. Animation supports object constancy, which lets human perception track changes to the Spiral Calendar rather than requiring the user to figure out the new layout cognitively.</p><p>For example, an animation can show a day calendar growing out of a week calendar while the week calendar recedes with the rest of the spiral to make room for the day calendar. Connections can also be removed when the user wants to move to a larger temporal grain-size.</p><p>For example, the user can select a month calendar. The resulting complex animation includes the discarded day and week calendars discreetly shrinking out of the user's view while the new month calenda grows out of the year calendar and the spiral moves forward to focus on the month calendar. IV animations are typically 24 .</p><p>Figure <ref type="figure">5</ref>: The Time Lattice visualizer, which was designed for analyzing the time relationships among the schedules of groups of people. A 3D object compares the weekly calendars of a group of people. Translucent shadows are used to support understanding and interaction with this complex 3D object.</p><p>designed to take less than a second, to support a smooth, non-confusing transition without taking so long that it gets in the way of working time.</p><p>During implementation, we found that the perception of the spiral was enhanced when calendars moved directly to their final resting place rather than through the intermediate positions of calendars that are being discarded. In general, it seems to be a good design rule to animate a transition as a single continuous movement rather than a series of discrete movements.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Time Lattice</head><p>After developing the Spiral Calendar, we shifted our focus from an individual's daily schedule to the analysis of calendar information as a record of people's activity. One of the potential advantages of electronic calendars is that they support easy comparison of multiple calendars, which can be used to schedule meetings or plan group activities. Ultimately, portable computers will make it possible to capture a wealth of calendar information that can be used in such analysis tasks.</p><p>Since most calendars have a 2D layout, a natural design for visualizing multiple calendars is to align these calendars in 3D for comparison. The visualizer in Figure <ref type="figure">5</ref>, which we call the Time Lattice, combines weekly calendars to form such a virtual 3D object. The vertical axis represents hours, the horizontal axis represents days, and the depth axis represents individuals. The individuals have been given distinct but random colors, The boxes in the 3D object represent scheduled events. Figure <ref type="figure">5</ref> presents real calendw information; details have been obscured to protect individual's privacy. Sliders on the floor are used to adjust the range of dates included in the 3D object.</p><p>The 3D object in Figure <ref type="figure">5</ref> is a natural design for a visualizer of multiple calendars.</p><p>However, it is a complex object that involves challenging interactions.</p><p>The key feature of the Time Lattice is that it includes a shadow metaphor to provide more intuitive interactions. This shadow metaphor was inspired by the Brown University work on interactive shadows that was reported at UIST'92 <ref type="bibr" target="#b0">[6]</ref>. The Brown work focused on 3D graphics tasks. The Time Lattice shadows, on the other hand, explore how shadows can be useful for information analysis tasks. Below we describe how the three Time Lattice shadows provide three different aggregate views of the information.</p><p>They also support a range of information filtering tasks that differ from the 3D graphics tasks explored by the Brown work. Our focus on information visualization even prompted us to include components with the shadows such as titles that are not cast be the 3D object.</p><p>The shadow on the left wall is a view of the information that aggregates the individual calendars so that the user can see which time slots are relatively available. This shadow is particularly useful for scheduling meetings and is essentially identical to the 2D calendw user interface described by <ref type="bibr">Beard et</ref>  the shadow, which can help the user understand to blending of the calendars in the shadow. The Beard et al paper also points out that opacity can be used to encode high priority events to provide even more cues about partially available times. Unfortunately, the calendar database used by the Time Lattice does not include priority information.</p><p>The other two shadows, on the floor and right wall, show how busy individual people are. The floor shadow is a view that aggregates each day together. It can be used to see how busy a person is on a particular day. The right shadow is a view that aggregates hours together. It can be used to see how a given individual schedules a given time of day. Commercial electronic calendars described in a recent MacWorld review also show how busy people are <ref type="bibr" target="#b6">[17]</ref>. Such information can be useful when deciding whether to schedule an event. We have also found these shadows useful for identifying who always schedules lunch meetings and seeing the pattern of activities that repeat from week to week.</p><p>Along with the Time Lattice shadows are components not cast by the 3D object. The shadow on the floor includes a set of buttons for adding and removing an individual from the 3D object. Fine-grain selection is accomplished by clicking in shadows. For example, the right shadow can select events at a particular time.</p><p>The Time Lattice visualizer is similar to other visualizers in the W system in that it can be used in conjunction with more traditional information access techniques. For example, Figure <ref type="figure" target="#fig_4">6</ref> shows the result of a search for events that are not repeated. Repeated events are drawn as rectangles rather than as 3D boxes. Visualizing this search reveals that the future is primarily repeated events that represent regularly scheduled meetings, while the past is primarily unique events that represent what actually happened. Figure <ref type="figure" target="#fig_4">6</ref> also shows colored shadows, which makes it easier to identify who is contributing a shadow but harder to see the overlap of events.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IMPLEMENTATION</head><p>The Spiral Calendar and the Time Lattice were implemented using the object-oriented architecture of the Information Visualizer (IV), which supported the rapid exploration of a wide range of time-based visualizations.</p><p>IV is both a collection of visualization artifacts <ref type="bibr">[11,</ref><ref type="bibr">16,</ref><ref type="bibr">15]</ref> and a 3D interactive animation environment and toolkit that supports rapid creation of new visualizations <ref type="bibr">[14,</ref><ref type="bibr">13]</ref>. IV allowed a PARC summer student to develop the first version of the Spiral Calendar and the Time Lattice in two months with no previous IV experience.</p><p>The animation GUI is driven by the Cognitive Coproce-ssorArchitecture <ref type="bibr">[13]</ref>, which supports management of multiple asynchronous agents and smooth interactive animation. It includes mechanisms for 3D navigation <ref type="bibr" target="#b15">[9,</ref><ref type="bibr" target="#b16">10]</ref> and object manipulation <ref type="bibr" target="#b16">[10]</ref>, Interactive Objects for building the visualizers, and 3D Rooms for managing information workspaces.</p><p>The basic building block for 3D Rooms and the visualization artifacts is Interactive Objects, which is a generalization of Rooms <ref type="bibr">Buttons [5]</ref>, extended to support 3D, interactive animation, gestures, manipulation, object-relative navigation, and an extensible set of types. Each Interactive Object has three basic method: draw, select, and enter-mom, There are many other methods for finer control, including deselect, animate, grasp, degrasp, move, various gestures, and so on. There are currently 48 such methods, but most have default behaviors that work for almost all classes. Many visualization objects can be built simply by defining a new class that specializes the 3D-Interactive-Object class and defining the three basic methods. Even defining the draw method is simplified because the system supports nested 3D objects and does the appropriate transformations (translations, rotations, and scaling) at each level, so that drawing a component of an object becomes quite simple.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Animation</head><p>is an important part of IV, and there are three basic types of animation supported. Constant rate and constant time animations are the simplest. It is easy to specify a target position and orientation and either a rate or time, and the basic architecture handles the rest. The third type of animation is based on a scripting language developed by Mark Shirley (see Figure <ref type="figure" target="#fig_5">7</ref>). This scripting language supports both sequential and parallel components, and allows for control of the animation linearly or by some arbitrary timing function</p><p>The Spiral Calendar and the Time Lattice were implemented to read the database files of the CM electronic calendar, which is a Sun-based electronic calendar that is widely used at PARC. Their implementations are described in the following sections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Implementing the Spiral Calendar</head><p>The Spiral Calendm has two classes based on the 3D-Interactive-Object class, Highlight and Call-Out. The Highlight class is only used to draw a yellow rectangle for immediate feedback when a spiral animation is started. The Call-Out class, on the other hand, is used to create the calendars and their subregions, including the information about what should happen if a subregion is selected, which generally involves running an animation script to spiral into the next level of detail (or out to the previous level). The Call-Out slots describe the display subregions and pointers into the underlying database for each subregion. The Call-Out draw method handles drawing the shaded pointers (or call outs) from one level to another, and calls another method (call-out-draw)</p><p>to draw the contents of the current level. The Call-Out select method picks the appropriate subregion and initiates a script to move up or down levels of the structure. The Call-Out enter-room method is used to set up context, for example to build the appropriate menus for that room. with "after" methods that know the details of the information structure at that level.</p><p>The Spiral Calendar incorporates techniques from cartoon animation to enhance its animated transitions. For example, as a new calendar moves out from a location on an old calendar, it uses slow-in/slow-out, which is a cartoon animation technique that starts and ends slowly and goes quickly in the middle. The slow start lets the user see the origin of the new calendar, the quick middle makes for a crisp efficient transition, and the slow end lets the user see the new calendar come to rest. Chang and Ungar described cartoon animation techniques for a 2D application at UIST'93 <ref type="bibr">[4]</ref>.</p><p>The animated transitions in the Spiral Calendar are specified in the scripting language. It proved quite useful in our implementation.</p><p>For example, we decided to remove text from the calendam during animated transitions to increase animation rates because text is very costly to draw. However, the blinking that occurred as the text disappeared and reappeared was distracting.</p><p>Cartoon animation suggested that we could soften this blinking by fading the text. The resulting script fragment to accomplish this fade down and up is shown in Figure <ref type="figure" target="#fig_5">7</ref>.</p><p>Our experience incorporating cartoon animation techniques into the Spiral Calendar indicates that scripting animations in an interactive system is complex. When we implemented text fading, we had to modify the script to accommodate the faster animation rate that occurred when the text disappeared. This faster rate caused one more frame to be drawn during "fade up" than during "fade down", which was visibly asymmetric.</p><p>We modified the durations of these fades in Figure <ref type="figure" target="#fig_5">7</ref> to make them appea symmetric.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Implementing the Time Lattice</head><p>The implementation of the Time Lattice uses an approach that is typical of less mature IV artifacts, which is to implement the entire artifact as a single interactive object. It is easier to prototype an interactive object when all the drawing code is contained in one method.</p><p>In particular, there is one new class (Frame) and one object that represents all the calendars and all three shadows. The draw method does most of the work, displaying the shadows, labels, and calendar information. The select method displays information about a selected calendar entry in an auxiliary window, with selection possible from the shadows or the calendm display.</p><p>Although it is easy to prototype a visualizer as a single interactive object, there are advantages to using multiple subobjects to implement a visualizer. In particular, IV provides a variety of manipulation and navigation tools for interactive objects. At the moment these tools cannot be used to interact with the components of the Time Lattice. However, IV's object-orient architecture will make it easy to break the Time Lattice into components such as calendars and shadows now that design has stabilized.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Performance Issues</head><p>IV is implemented in Common Lisp and CLOS on top of Iris GL (the SGI Graphics Library). We worked with Franz to develop a highly optimized foreign function interface to GL for Franz Common Lisp that makes it possible to call GL functions in-line with no boxing of floats (i.e., no additional storage allocation).</p><p>Performance problems inherent in CLOS have been addressed using MOP, the CLOS Mets-Object Protocol <ref type="bibr" target="#b13">[7]</ref>. MOP allowed us make performance improvements without modifying a large body of existing code, which can be time consuming and reduce the readability of code. MOP let us replace the normal call to slot accessor functions, which are very common in IV, with reader methods implemented as macros that generate two array references. Another performance improvement was to eliminate most overhead on generic functions with many methods. In particular, the draw generic function has hundreds of methods corresponding to different types of Interactive Objects. Normally, a draw method call would be relatively expensive, going through a method dispatch function. This is a serious problem for the draw method, which gets called hundreds or even thousands of times during an animation cycle. The optimization used a special meta-class to replace the call to the dispatch function with two array references and a function call (to the specific method function). These optimizations do impose some restrictions (for example, the draw method cannot have any" before" or "after" methods). However, there were only a few place in the code that needed to be modified and the result is a flexible programming environment with performance very close to what is possible in C.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Implementation Summary</head><p>The final version of the Spiral Calendar is easily implemented in IV using 3D, but could also be implemented in 2D using scaling. However, the early designs could not easily be done in 2D; hence, the 3D environment made prototyping and exploration of the design space much easier. The IV environment and toolkit (particularly the animation loop, governor, scripting language, and interactive object support) make it particularly easy to build new visualizations like these. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>EVALUATION</head><p>The next few sections focus on the Spiral Calendar, which is more mature that the Time Lattice. The first version of the Spiral Calendm, which was developed as a PARC summer student project, was part of a user study to evaluate a new method for characterizing information access from dynamic displays <ref type="bibr">[3]</ref>. The first version was then revised to address issues identified by the user study and add functionality to support calendm editting. The result is the current version of the Spiral Calendar, which is in daily use. We also describe how we reused the spiral technique for a different visualization problem.</p><p>The Time Lattice, on the other hand, has only been evaluated informally.</p><p>It appears to be very useful for exploring the time relationships among schedules of groups of people. For example, we were able to find meetings attended by members of the group even though individuals referred to the meetings with completely different text strings. Every time we use the visualizer it prompts us to ask and answer new questions about people's calendars.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Evaluating the First Version Spiral Calendar</head><p>The user study of the first version of the Spiral Calendar compared it with the Sun CM calendar on the direct-walk task of navigating from one date to another <ref type="bibr">[3]</ref>. Analysis of the data resulted in the Cost-of-Knowledge Characteristic Function, which plots the number of elements accessible as a function of the cost in time (see Figure <ref type="figure" target="#fig_6">8</ref>). The study and informal use experience indicated that the Spiral Calendar provided an intuitive interface to an individual's daily schedule. However, the implementation had performance problems and missing features that made it undesirable for daily use. In particular, the study indicate that users had to wait on the order of 3.5 seconds between picks. This was surprising because a "keystroke level" calculation indicated that the total should have been less that 2 seconds with 1 second for the pointing with the mouse and less than 1 second for the subsequent animation. We clearly had a performance problem in the animation. The study also indicated that a user of CM was able to get to nearby dates much more quickly than with the first version of the Spiral Calendar. Fortunately, the intuitive interface of the Spiral Calendar partially mitigated these problems. Furthermore, the Spiral Calendar design turned out to be better than CM for navigating to distant dates. All movement is done with a single operation, clicking on calendars. For comparison, navigation in the Sun CM calendar involves a combination of menu selection and button clicking. Finally, the evaluation method allowed us to replot the Cost-of-Knowledge Characteristic Function to determine that improved animation rates would bring the Spiral Calendar closer to CM in navigation performance.</p><p>The empirical results in Figure <ref type="figure" target="#fig_6">8</ref> verified this calculation.</p><p>The first version of the Spiral Calendar also required the user to always go through the week display to access a day display while CM let the user access day displays directly for nearby days. A replot of the Cost-of-Knowledge Characteristic Function showed that this also gave CM the advantage for navigation to nearby dates. Since daily calendar use typically focuses on nearby future dates, we resolved to address this issue in the next implementation/evaluation cycle.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>REVISION</head><p>The problems identified in the study of the first version of the Spirat Calendm were all addressed during the development of the current version of the Spiral Calendtw, which has now been in daily use for several months. Substantial functionality was added, including editing, searches, and automatic notification of appointments. We also integrated the Spiral Calendar with CM so that users could use both editors at the same time.</p><p>The slow animation rate of the first version of the Spiral Calendar was addressed in a number of ways. We tuned the performance of the scripting system and the summer student's implementation to make the animations run less than a second, which was our original goal. We also corrected a bug that kept the first version of the Spiral Calendar from responding to user clicks during animations.</p><p>Videotape analysis indicated that slow-inlslow-out animation made it easy for users to attempt to speed the transition to the next level of the calendar hierarchy by clicking before calendar reached its final resting point. Finally, we gave users the option of turning off the animation altogether. Experienced users tend to see the spiral twist as a gestalt action and do not need the animation to maintain object constancy.</p><p>We also improved access to nearby dates, a common navigation task in a calendar editor. When the user is looking at the daily calendar, the weekly and monthly calendars can be used to select nearby day calendars without having to reselect the week calendar.</p><p>Finally, we repeated the evaluation study for the current version of the Spiral Calendar. The repeated study only used one subject because the first study indicated there was almost no variation among subjects. We collected data for the current version of the Spiral Calendar with and without slowinhlow-out animation.</p><p>The resulting Cost-of-Knowledge Characteristic Functions are also plotted in Figure <ref type="figure" target="#fig_6">8</ref>. The current version of Spiral Calendar is clearly much improved for the direct walk task. Furthermore, it compares favorable with CM even though CM is clearly more heavily optimized. CM's major advantage in the 10 to 100 day range is that its daily calendar presentation includes three monthly calendars for selecting nearby dates. The current version of the Spiral Calendar only provides one monthly calendar for nearby selecting. Finally, it is also worth noting that the animated transitions of the Spiral Calendar directly increase access cost. Our experience is that new users like the animated transitions because it helps them understand how the calendar is changing. Experienced users prefer lower access costs because they know how the calendar will respond to their selections. This suggests that as a general rule animated transitions will be most effective when changes are not predictable by the user.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>REUSE: DECISION SUPPORT VISUALIZATION</head><p>We have discovered that it is often fruitful to consider existing IV visualizers when confronted with a new visualization problem because the visualization techniques can often be reused. This was true for the spiral technique when we designed a visualizer to help designers of the layout of aircraft cockpit controls keep track of their decisions, which can interact is undesirable ways. In order to ensure that the resulting design is safe and effective, and can be certified by the FAA, complex decision graphs are built that show all the possible combinations of designs that lead to FAA certifiable aircraft. When a customer works with an aircraft manufacturer, they want to understand the context of the various design decisions they have made, be able to see the consequences, and be able to easily change decisions.</p><p>We obtained the decision graph for one aircraft subsystem: the flight controls layout. This is a directed acyclic graph with an average branching factor of three and a maximum depth of thirty. Associated with each decision is a photograph of the partial layout, and codes for what parts and options to order. Our goal was to design a visualization that shows the path through the decision graph (provided the context of the decisions) and the photo resulting from the latest decision.</p><p>We considered various visualization techniques found in IV.</p><p>One possibility was to design a variation of Cone Tree <ref type="bibr">[16]</ref> with multiple parents represented by different kinds of links. This alternative was rejected early because of the depth of 1 ;:Hei ght Alert El*splay ?, ";, :*,J</p><p>."</p><p>Figure <ref type="figure">9</ref>: The Plane Configuration visualizer, which was designed for keeping track of decisions made in a decision ctraph for designina the Iavout of controls in a aircraft cockpit. The spiral shows all decisions that have been made, along fith a photo of th;current layout.</p><p>the decision graph, which is well beyond the limits of current Cone Trees.</p><p>Another possibility was to design a Perspective Wall [111 with a graphic representation of the decision graph laid out on the wall. The problem here is in both dimensions. Because of the depth of the decision graph, the width of the wall would be inadequate. And because of the unknown width of the graph, the height of the wall may well be inadequate.</p><p>In general, the decision graph was too large to show in its entirety. The spiral visualization technique offered a viable alternative.</p><p>If we only show the current path through the decision graph, then the spiral can provide the context of the decisions. Figure <ref type="figure">9</ref> illustrates the resulting design. The image in the upper left comer is the photo of the layout resulting from the latest decision. At any point, the user can request a parts list and get all of the parts and options that have been ordered as a consequence of the decisions. Also, at any point, the user can point to any earlier decision and take a different path. When that is done, the discarded path is retained. The "Prev" button will pop up a list of discarded paths and let the user resume any one of them. This use of the spiral visualization does a good job of showing the relative context of a decision; that is, the list of decisions made to get to thh+ point. However, because the user never seesthe whole decision graph, it does not provide a very good absolute context. While this is a drawback, it appears to be the only viable way to handle graphs that are too large to display. Informal evaluation suggests that it is easy to understand the context of the decisions and their consequences, and easy to change decisions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Implementing the Spiral Decision Tree</head><p>The application of the Spiral visualization to the viewing of a decision tree was very straightforward.</p><p>We defined a new class called Decision-Call-Out.</p><p>We defined a new call-out-draw method for drawing the choices at the given node in the decision tree. The select method is similar to the one used for Call-Out, but must also save the state of the decision if the new selection represents a new branch in the search tree. All other aspects of the Spiral Calendar are reused.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DISCUSSION</head><p>The Spiral Calendar and the Time Lattice demonstrate that emerging graphics technology can be used to design visualizers for a routine tasks, such as working with calendars and time-based information.</p><p>We used 3D graphics to increase the density of visualizations and a spiral to combine detail and context. Animated transitions allow the human perceptual system to track transitions that otherwise would have to be analyzed cognitively.</p><p>Cartoon animation techniques were used to enhance these animated transitions. Our experience designing visualizations for electronic calendars suggests that emerging graphics technology can also be used for other user interfaces that have been frozen by the established desktop user interface standard.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Sketch of a Pan/Zoom Calendar design. Useful global context is lost as the user zooms in to the homogeneous details.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Sketch of a Calendar Room design. All calendars are visible but their relationships are not shown and the text on the walls and floor is foreshortened.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure3: The Spiral Calendar visualizer, which was designed for rapid access to an individual's daily schedule. A spiral layout combines detail and context in an intuitive 3D layout that allows the connection among calendars to be visible.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: A sketch of a Tower Calendar design, which results in foreshortened text but does show the connections among calendars.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: This Time Lattice draws repeating events as wire frame rectangles. The buttons on the floor can be used to remove individual calendars from the 3D object. Color shadows are used to reveal individual contributions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: A script fragment used to position and scale a calendar and fade the text on the calendar. Text fade is a cartoon animation technique for smoothing transitions.The timing values for the fade are discussed in the text.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Cost-of-Knowledge Characteristic Function for to several variants of the Spiral Calendar and the CM calendar program.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>November 2-4, 1994UIST "94</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS:</head><p>We thank Stu Card and Pete Pirolli for their work on the user studies. We thank Stu Card, Polle Zellweger, and Pete Pirolli for reading a draft of this paper. We also thank the Information Sciences and Technology Lab for supporting Robert Deline as a PARC summer student intern.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A visual calendar for scheduling group meetings</title>
		<author>
			<persName><forename type="first">D</forename><surname>Beard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Palanlappan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Humm</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Banks</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Nai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Shari</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Conference on Computer-Supported Cooperative Work</title>
		<meeting>the Conference on Computer-Supported Cooperative Work</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1990">1990</date>
			<biblScope unit="page" from="279" to="290" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">An imperative sentence processor for voice interactive office applications</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">W</forename><surname>Biermann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Fineman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">C</forename><surname>Gilbert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on O@ce Information Systems</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="321" to="346" />
			<date type="published" when="1985">1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">The costof-knowledge characteristic function: Display evaluations for direct-walk dynamic information visualizations</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Pirolli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Mackinlay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGCHI Conference on Human Factors in Computing Systems</title>
		<meeting>the ACM SIGCHI Conference on Human Factors in Computing Systems</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1994-04">April 1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Animation: From cartoons to the user interface</title>
		<author>
			<persName><forename type="first">B</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Ungar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM Symposium on User Inte~ace Software and Technology</title>
		<meeting>the ACM Symposium on User Inte~ace Software and Technology<address><addrLine>Nov</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
	<note>In press</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Rooms: the use of multiple virtual workspaces to reduce space contention in a window-based graphical user interface</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Henderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="1" to="243" />
			<date type="published" when="1986-07">July 1986</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Interactive shadows</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">P</forename><surname>Hemdon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Zeleznik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">C</forename><surname>Robbins</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Conner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">S</forename><surname>Snibbe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Van Dam</surname></persName>
		</author>
		<idno>11. 12. 13. 14. 15. 16</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM Symposium on User Interface Software and Technolom. Da~es 1-6</title>
		<meeting>the ACM Symposium on User Interface Software and Technolom. Da~es 1-6</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The perspective wall: Detail and context smoothly integrated</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Mackinlay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">G</forename><surname>Robertson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGCHI Conference on Human Factors in Computing Systems</title>
		<meeting>the ACM SIGCHI Conference on Human Factors in Computing Systems</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1991-04">April 1991</date>
			<biblScope unit="page" from="173" to="179" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Pad: An alternaitve approach to the computer interface</title>
		<author>
			<persName><forename type="first">K</forename><surname>Perlin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Fox</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings SZG-GRAPH&apos;93</title>
		<meeting>SZG-GRAPH&apos;93</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1993">1993</date>
			<biblScope unit="page" from="57" to="64" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">The cognitive coprocessor architecture for interactive user interfaces</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">G</forename><surname>Robertson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Mackinlay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM Symposium on User Inte~ace Software and Technology</title>
		<meeting>the ACM Symposium on User Inte~ace Software and Technology</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1989-11">November 1989</date>
			<biblScope unit="page" from="10" to="18" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Information visualization using 3d interactive animation</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">G</forename><surname>Robertson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Mackinlay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">The document lens</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">G</forename><surname>Robertson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Mackinlay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM Symposium on User Inte#ace Software and Technology</title>
		<meeting>the ACM Symposium on User Inte#ace Software and Technology</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1993-11">November 1993</date>
			<biblScope unit="page" from="101" to="108" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Cone trees: Animated 3d visualizations of hierarchical information</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">G</forename><surname>Robertson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Mackinlay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGCHI Conference on Human Factors in Computing Systems</title>
		<meeting>the ACM SIGCHI Conference on Human Factors in Computing Systems</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1991-04">April 1991</date>
			<biblScope unit="page" from="189" to="194" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">N</forename><surname>Tessler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Desktop calendars. Mac World</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="104" to="109" />
			<date type="published" when="1992">1993. NOV 1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Jim des Rivi5res, and Daniel Bobrow. The Art of the Metaobject Protocol</title>
		<author>
			<persName><surname>Gregorkiczales</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991">1991</date>
			<publisher>MIT Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Electronic calendars in the office: An assessment of user needs and current technology</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">M</forename><surname>Kincaid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">B</forename><surname>Dupont</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">R</forename><surname>Kaye</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on O@ce Information Systems</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="89" to="102" />
			<date type="published" when="1985">1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Rapid controlled movement through a virtual 3d workspace</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Mackinlay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">G</forename><surname>Robertson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings SIGGRAPH&apos;90</title>
		<meeting>SIGGRAPH&apos;90</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1990">1990</date>
			<biblScope unit="page" from="171" to="176" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Mackinlay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">K</forename><surname>Card</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">G</forename><surname>Robertson</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A semantic analysis of the design space of input devices</title>
	</analytic>
	<monogr>
		<title level="j">Human-Computer Interaction</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">2&amp;3</biblScope>
			<biblScope unit="page" from="145" to="190" />
			<date type="published" when="1990">1990</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
