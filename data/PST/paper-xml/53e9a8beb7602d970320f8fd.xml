<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Querying and Updating Probabilistic Information in XML</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Serge</forename><surname>Abiteboul</surname></persName>
							<email>serge.abiteboul@inria.fr</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">INRIA Futurs &amp; LRI</orgName>
								<orgName type="institution" key="instit2">Université Paris-Sud</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Pierre</forename><surname>Senellart</surname></persName>
							<email>pierre@senellart.com</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">INRIA Futurs &amp; LRI</orgName>
								<orgName type="institution" key="instit2">Université Paris-Sud</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Querying and Updating Probabilistic Information in XML</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">4A254AD756B9E593510EBB1A2DB3D9CB</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T10:23+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We present in this paper a new model for representing probabilistic information in a semi-structured (XML) database, based on the use of probabilistic event variables. This work is motivated by the need of keeping track of both confidence and lineage of the information stored in a semi-structured warehouse. For instance, the modules of a (Hidden Web) content warehouse may derive information concerning the semantics of discovered Web services that is by nature not certain. Our model, namely the fuzzy tree model, supports both querying (tree pattern queries with join) and updating (transactions containing an arbitrary set of insertions and deletions) over probabilistic tree data. We highlight its expressive power and discuss implementation issues.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>If the problem of discovering information on the surface Web is facilitated by a number of directories and search engines, the discovery, understanding and use of databases published on the Web (typically via HTML forms) is still cumbersome. It is therefore important to develop automatic tools to capture the semantics of this so-called Hidden Web. Such tools require a combination of techniques, e.g. from information extraction or natural language processing. We are concerned with combining such tools to develop a content warehouse to manage tree data coming from both the surface and Hidden Web <ref type="bibr" target="#b0">[1]</ref>. Since such a system relies on techniques that are by nature imprecise, we need a model for imprecise tree data. The main contribution of this paper is such a model, the fuzzy tree model.</p><p>Models for managing imprecise information are not new. In particular, a large literature exists for the relational model, typically based on two approaches: (i ) a probabilistic approach, e.g. <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3]</ref>, and (ii ) a logic approach, e.g. <ref type="bibr" target="#b3">[4]</ref>. An originality of our model is that it is based on a tree model, primarily to meet the needs of the standard for data exchanges, XML. Another originality is that our model combines the two aforementioned approaches. Probabilities are attached to pieces of data to capture the confidence the warehouse may have about the semantics of such pieces, while we rely on probabilistic events that are in the spirit of the logical conditions of <ref type="bibr" target="#b3">[4]</ref>, e.g. to capture choices performed during the extraction of information or its analysis. These probabilistic events capture dependencies between the probabilities of distinct pieces of data. Finally, while most works on incomplete information focus on queries, updates play a central role in the present work as, for instance, in <ref type="bibr" target="#b4">[5]</ref>.</p><p>The fuzzy tree model arises quite naturally when considering the management of information discovered on the Web. The model is at the same time expressive (it captures complex situations) and concise (it provides compact representations). This will be shown by comparing the fuzzy tree model with two more standard models for describing imprecision. Most importantly, we will show that the model supports queries (tree pattern queries with joins, a standard subset of XQuery) and updates. Queries provide the means for a user to obtain information. Updates form the core component for the building of knowledge. The global system consists in a number of modules (crawlers, classifiers, data extractor, etc.). These tools introduce probabilistic knowledge in the content warehouse by updating it.</p><p>The paper is organized as follows. In Sect. 2, we present more motivation. In Sect. 3, we briefly present preliminary notions used throughout the paper. Section 4 discusses two simple models. The fuzzy tree model is the topic of Sect. 5. Before discussing related work and concluding, we present in Sect. 6 an on-going implementation of the fuzzy tree model. An extended version of this paper is available in <ref type="bibr" target="#b5">[6]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Motivation</head><p>Since its creation in 1991, the World Wide Web has considerably grown, with billions of freely accessible pages. It is generally assumed that the Hidden Web (also known as Deep Web or Invisible Web) that consists of databases accessible through HTML forms or Web services, is even much larger (see, e.g., <ref type="bibr" target="#b6">[7]</ref>) and that its content is typically of better quality than that of the surface Web. The Hidden Web is undoubtedly an invaluable source of information.</p><p>We want to provide access to the Hidden Web via high-level queries. To illustrate, consider a Web user interested in available options for a particular car. A current search engine will return a list of HTML pages including the constructor's website. We would like our system to discover that a particular form on a given site provides the desired information, fill that form, get the answer and directly provide the desired information. Such a semantic interpretation of the Hidden Web implies that the system has to discover the service, understand it, and index it so that, at query time, the proper data may be retrieved.</p><p>Imprecision is inherent in such a process: the inference performed by most modules typically involves some level of confidence. For instance, the system may be rather confident (but not certain) that a site is that of the constructor. Any module participating in the construction of the warehouse must then be able to insert, modify or delete information with a given confidence. This confidence or, in other words, the probability that the information is true, should be handled throughout the entire process. It is essential for informing the user of the confidence of portions of an answer as well as for ranking query results. Three aspects, namely (i ) the independent agents, (ii ) the need to monitor the derivation of knowledge, and (iii ) the non-sequentiality of the entire Query interface (tree-pattern with join)</p><p>Update interface (insertions, deletions)</p><p>Probabilistic XML Warehouse process, suggest the design of a content-centric system, as shown on Fig. <ref type="figure" target="#fig_0">1</ref> in the style of <ref type="bibr" target="#b0">[1]</ref>. More precisely, the system is built on top of a content (semistructured) warehouse, with querying and updating capabilities supporting imprecise information. Probabilistic information is stored in the warehouse and confidence tracking is directly provided through the query and update interfaces. Each query result and update transaction comes with confidence information. The purpose of this paper is to detail the model used to describe, query and update the probabilistic information stored in the warehouse.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Preliminary Definitions</head><p>In this section, we present preliminary definitions that are used in the remaining of the paper. We assume the existence of a set N of labels and a set V of values (say, the set of strings, with a particular value ε, the empty string). Although we are typically interested in XML, the standard for data exchange on the Web, we consider a simpler tree model that in particular ignores ordering of siblings.</p><p>Definition 1. An (unordered) data tree t is a 5-uple t = (S, E, r, ϕ, ν) where S is a finite set of nodes, E ⊆ S 2 a tree rooted in r ∈ S, ϕ : S → N associates a label to each node in S and ν associates a value in V to leaves of the tree (where a leaf is a node in S -{r} that has no child.) Definition 2. A Tree-Pattern-With-Join (TPWJ) query is a 3-uple (t, D, J) where t = (S, E, r, ϕ, ν) is a data tree, D ⊆ E is a set of descendant edges (the other edges are interpreted as child edges) and J ⊆ S 2 is a set of join conditions, such that for all (s, s ) in J, s and s are two leafs of t and s = s . Definition 3. Let Q = (t, D, J) with t = (S, E, r, ϕ, ν) be a TPWJ query and t = (S , E , r , ϕ , ν ) a data tree. Then a valuation Ψ (from</p><formula xml:id="formula_0">Q in t ) is a mapping from S to S verifying: (i) (root) Ψ (r) = r (ii) (labels) ∀s ∈ S, ϕ(Ψ (s)) = ϕ(s) (iii) (edges) ∀(s 1 , s 2 ) ∈ E, if (s 1 , s 2 ) ∈ D, Ψ (s 2 ) is a descendant of Ψ (s 1 ), otherwise it is a child of Ψ (s 1 ) (iv) (values) For each leaf s of t with ν(s) = ε, Ψ (s) is a leaf of t and ν (Ψ (s)) = ν(s) (v) (join conditions) For each (s1, s2) ∈ J, both Ψ (s1) and Ψ (s2) are leaves of t and ν (Ψ (s 1 )) = ν (Ψ (s 2 )).</formula><p>Let Ψ be such a valuation. Then the minimal subtree of t containing Ψ (S) is called an answer (we consider that a subtree is defined by a connected subset of the set of nodes containing the root). The set of all answers is denoted Q(t ).</p><p>We next define update operations, whose basic components are insertions and deletions. Let t = (S, E, r, ϕ, ν) and t = (S , E , r , ϕ , ν ) be two data trees. Assume without loss of generality that they use different IDs, i.e. S ∩ S = ∅. An insertion is an expression i(t, n, t ) where n is in S, the node where t is to be inserted. A deletion is an expression d(t, n) where n is in S -{r}. Node n is removed as well as all its descendants. Insertions and deletions are elementary updates that are used to define update transactions. Typically, one want to perform a number of update operations based on the result of a query. This motivates the following definition.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 4. An update transaction is a pair</head><formula xml:id="formula_1">τ = (Q, U ) where Q = (t Q , D, J) is a TPWJ query and U is a set {i 1 . . . i p , d 1 . . . d q } where i 1 . . . i p are insertions on t Q and d 1 . . . d q are deletions on t Q .</formula><p>Queries are used to select the nodes of the trees where insertions or deletions are made. Intuitively, when one applies a transaction on a data tree t, one operation, say d i , results in the deletion of a subtree for each valuation of Q. Definition 5. Let τ = (Q, U ) be an update transaction. Let t be a tree matched by Q and let Ψ 1 . . . Ψ n be the valuations of Q on t. Let (n i1 . . . n ip , n d1 . . . n dq ) be the nodes of Q of the insertions and deletions of U . For each k with 1 ≤ k ≤ p, we define the set</p><formula xml:id="formula_2">I k = 1≤j≤n {Ψ j (n i k )}. For each k with 1 ≤ k ≤ q, we define the set D k = 1≤j≤n {Ψ j (n d k )}.</formula><p>The result of the transaction τ on t, denoted τ (t), is the result of the insertions i 1 . . . i p on, respectively, each of the nodes of I 1 . . . I p and the deletions d 1 . . . d q on, respectively, each of the nodes of D 1 . . . D q .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Two Simple Models</head><p>A natural way of representing probabilistic information is to list all possible worlds, each with its probability. See the example in Fig. <ref type="figure" target="#fig_1">2</ref>. More formally: Definition 6. A Possible Worlds (PW) set T is a finite set of pairs (t i , p i ) where each t i is a data tree, each p i is a positive real and</p><formula xml:id="formula_3">n i=1 p i = 1.</formula><p>If (t, p) is in a PW set T , this means that there is a probability p that the information contained in T is indeed t. This is a rather general, if not practical, way of representing probabilistic semi-structured information.</p><p>A PW set T = {(t i , p i )} is said to be normalized if there is no i, j distinct such that t i , t j are identical (up to node isomorphism). The normalization of a PW set T is obtained by regrouping the identical component trees into one component and summing their probabilities. In the remaining of this paper, we will assume that all PW sets are normalized. The definition of TPWJ query on a data tree can be extended in a quite natural way to PW sets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 7.</head><p>Let Q be a TPWJ query and T = {(t i , p i )} a PW set. The set of probabilistic possible answers is</p><formula xml:id="formula_4">P = {(t, p i ) | (t i , p i ) ∈ T, t ∈ Q(t i )}. The result of Q for T is the normalization Q(T ) of P.</formula><p>Note that by construction Q(T ) is not always a PW set since the sum of probabilities is not 1 in the general. The fact that (t, p) ∈ Q(T ) is interpreted as there is a probability p that t is a result of the query Q over T . So, for instance, the query "Who are the children of John?" may return "Alice" with a probability 0.9 and "Bob" with a probability 0.4. Note that the sum is greater than 1. Now consider updates. A probabilistic update transaction is a pair (τ, c) where τ is an update transaction and c ∈]0; 1] is the confidence we have in the transaction. Definition 8. Let T = {(t i , p i )} be a PW set, (τ, c) a probabilistic update transaction, τ = (Q, Seq). The result of (τ, c) on T , denoted (τ, c)(T ), is a PW set obtained by normalizing:</p><formula xml:id="formula_5">{(t, p) ∈ T | t is not selected by Q} {(τ (t), p • c) | t is selected by Q} {(t, p • (1 -c)) | t is selected by Q}</formula><p>Note that in the worst case, the number of components is multiplied by 2. This may occur for instance if one inserts a node as a child of the root. Then Q matches all data trees. Thus, the number of components grows, in the worst case, exponentially in the number of update transactions performed.</p><p>Note that the PW model is not practical storage-wise. It is neither practical for query and update processing (in particular because of the potential exponential explosion). We next look at alternative ways of representing probabilistic tree information. The possible world semantics is natural and will provide guidelines for more complex models.</p><p>In the remaining of this section, we discuss another natural model, namely the Simple Probabilistic tree model.</p><p>In the spirit of probabilistic models for the relational model, we can attach a probability to each node in the tree. The intuition is that it captures the probability of that node to be present assuming its parent is. A limitation of this model is that the only probability dependency captured is between the dependencies of nodes in a parent/child relationship.</p><p>Definition 9. A Simple Probabilistic (SP) tree T is a pair (t, π) where t = (S, E, r, ϕ, ν) is a data tree and π : S -{r} →]0; 1] assigns probabilities to tree nodes.</p><p>Such an SP tree is represented as in Fig. <ref type="figure" target="#fig_4">3</ref>. We can give a possible worlds semantics to an SP tree as follows. Choose an arbitrary X ⊆ S. Consider t X the tree obtained by removing from t all nodes not in X (and their descendants). We assign to this tree the probability</p><formula xml:id="formula_6">p X = s∈X π(s) × s∈S-X (1 -π(s)).</formula><p>The possible world semantics of T , denoted T , is defined as the normalization of the set {(t X , p X ) | X ⊆ S}). Note that, as X is an arbitrary subset of S, a given tree t can be obtained from various subsets X, including subsets which contain nodes not in t . The normalization, by summing on the different X leading to the same tree, ensures that the probability of t is correct. As an example, the semantics of the SP tree of Fig. <ref type="figure" target="#fig_4">3</ref> is the PW set on Fig. <ref type="figure" target="#fig_1">2</ref>.</p><p>A natural question is then whether the SP tree model is as expressive as the PW set model. The answer is no. Figure <ref type="figure">4</ref> is an example of a PW set that has no equivalent SP tree. This negative result is not a sufficient reason for rejecting the SP model, since one might argue that PW sets not representable in the SP model are of little practical interest. The following result, however, demonstrates that the SP tree model does not meet basic requirements in terms of update, so motivates the model we introduce in the next section. <ref type="figure">(τ,</ref><ref type="figure">c</ref>) such that there is no SP tree whose semantics is (τ, c)( T ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Proposition 1. There exists an SP tree T and a probabilistic update transaction</head><p>In other words, "SP trees are not closed under updates". This comes from the fact that dependencies between nodes are not expressible in the SP model. Indeed, a simple modification that can be seen as an interdependent succession of an insertion and a deletion, cannot be represented in the SP model. We next present a model that overcomes this limitation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">The Fuzzy Tree Model</head><p>In this section, we propose an original model for representing probabilistic information in semi-structured databases, that we call the fuzzy tree model. This model is inspired by the SP model from the previous section and enriches it using conditions à la <ref type="bibr" target="#b3">[4]</ref>, that are called probabilistic conditions here.</p><p>The conditions we use are defined using the auxiliary concept of probabilistic event. Given a set W of event names, a probability distribution π assigns probabilities, i.e. values in ]0; 1] to elements of W . An event condition (over W ) is a finite (possibly empty) set of event atoms of the form w or ¬w where w is an event in W . The intuition is that we assign probabilistic conditions to nodes in the trees, instead of assigning them simple probabilities like in the SP model. This mechanism captures complex dependencies between nodes in the database.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 10.</head><p>A fuzzy tree T is a 3-uple (t, π, γ) where t = (S, E, r, ϕ, ν) is a data tree, π is some probability distribution over some set W of events and γ assigns event conditions to nodes in S -{r}. Definition 11. Let T = (t, π, γ) with t = (S, E, r, ϕ, ν) be a fuzzy tree. Let W be the event names occurring in T . The possible worlds semantics of T is the PW set, denoted T , defined as the normalization of:</p><formula xml:id="formula_7">V ⊆W t |V , w∈V π(w) w∈W -V (1 -π(w))</formula><p>where t |V is the subtree of t where all nodes conditioned by a '¬w' atom with w ∈ V or a 'w' atom with w / ∈ V are removed (as well as their descendants).</p><p>Example of PW semantics of fuzzy trees are given in Fig. <ref type="figure" target="#fig_1">2</ref> and<ref type="figure">4</ref>, respectively, for the fuzzy trees of Fig. <ref type="figure" target="#fig_3">5</ref>. Observe that the fuzzy tree model is more expressive than the SP model, since the latter did not have an equivalent of the PW set represented in Fig. <ref type="figure">4</ref>. Actually, the following important result states that the fuzzy tree model is as expressive as the PW model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theorem 1.</head><p>For each PW set X, there exists a fuzzy tree T such that X = T .</p><p>We now define queries on fuzzy trees: Definition 12. The result of Q on a fuzzy tree T = (t, π, γ), denoted Q(T ), is the normalization of u∈Q(t) u, eval n node of u γ(n) where eval(cond) returns 0 if there is an event w such that both 'w' and '¬w' are in cond, and</p><formula xml:id="formula_8">w∈cond π(w) • ¬w∈cond (1 -π(w)) otherwise.</formula><p>When normalizing the set, if one of the probabilities is 0, the element is removed. If the resulting set is empty, Q does not match T . Theorem 2. Let T be a fuzzy tree and Q be a TPWJ query.</p><formula xml:id="formula_9">Q matches T if and only if Q matches T . Moreover, Q(T ) = Q( T ).</formula><p>Finally, we show that unlike the SP model, the fuzzy tree model supports arbitrary probabilistic update transactions. Let (τ, c) with τ = (Q, U ) be a probabilistic update transaction and T = (t, π, γ) a fuzzy tree. Let w be a fresh event variable.</p><p>Consider the case where |Q(T )| = 1, that is where the position of update operations is uniquely defined (the extension when |Q(T )| &gt; 1 is straightforward and detailed in <ref type="bibr" target="#b5">[6]</ref>). Let u be the unique element of Q(T ) and cond = n node of u γ(n); cond is the set of conditions to be applied to the inserted and deleted nodes. The result of (τ, c) on T is denoted (τ, c)(T ), is the fuzzy tree obtained from t by applying insertions and deletions in the following way.</p><p>Insertions are performed at the position mapped by Q on t in u. If n is the position to insert a subtree t , and cond ancestors is the union of the event conditions on the (strict) ancestors of n, t is inserted and its root is assigned the condition {w} ∪ (cond -(γ(n) ∪ cond ancestors )).</p><p>Deletions are performed at the position mapped by Q on t. Let n be the node to be deleted and cond ancestors be the union of the event conditions on the (strict) ancestors of n. Let cond new = {w} ∪ cond -(γ(n) ∪ cond ancestors ). The original n node is replaced by as many copies as elements of cond new . Let a 1 . . . a p be the p elements of cond new . The first copy of n is annotated with condition γ(n)∪{¬a 1 }. The second copy of n is annotated with condition γ(n) ∪ {a 1 , ¬a 2 }. . . The last copy of n is annotated with conditions γ(n) ∪ {a 1 . . . a n-1 , ¬a n }. The fuzzy tree model provides a concise representation of imprecision. Updates can be captured in the model. Simple updates (insertions, or deletions without dependency on another branch of the tree) do not yield an exponential growth, as it is the case for the PW model. Complex updates may still be costly.</p><p>An interesting side benefit of using the fuzzy tree model is the possibility to keep lineage (or provenance) information about the data. Since every node is conditioned by event variables corresponding to update transactions, we can associate meta-data to these variables to record information about the origin of the corresponding transaction. Note that these variables are preserved throughout the whole process; a fuzzy tree system is able to deliver, along with query results and probabilities, information about the lineage associated with a piece of data (possibly updated more than once) and query results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Implementation</head><p>This section briefly discusses our implementation of a fuzzy tree system that will soon be available at http://pierre.senellart.com/software/fuzzyxml/ XML documents are stored in a file system. (The use of an XML repository will be considered in the future.) TPWJ queries themselves are represented as XML fragments. The query evaluation over fuzzy trees is implemented using the Qizx/open Java XQuery engine <ref type="bibr" target="#b7">[8]</ref>. TPWJ queries are compiled into XQuery queries, whose results are converted to the minimal subtrees referred to in Definition 2. A post-processing step is performed on the resulting subtrees to compute the associated probabilities. For optimization, query processing relies on a dataguide of the document obtained by using the XML Summary Drawer described in <ref type="bibr" target="#b8">[9]</ref>. Finally, updates are performed directly on the XML tree, following the rules described in Sect. 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion</head><p>The topic of probabilistic databases has been intensively studied, see for instance <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b2">3,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b11">12]</ref>, and <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b12">13]</ref> for more recent works. In <ref type="bibr" target="#b12">[13]</ref>, Widom stresses the need for a system maintaining both probability and lineage of the data. In that paper, imprecision comes from three distinct sources: inaccuracy of the values, confidence in the tuples of the relations and incompletude in the coverage of relations. We were only interested here in this second source of imprecision. The idea of associating probabilistic formulas to data elements comes from the conditional tables of <ref type="bibr" target="#b3">[4]</ref>.</p><p>A relatively small number of works have dealt with the representation of probabilistic semi-structured data. In <ref type="bibr" target="#b13">[14]</ref>, Dekhtyar et al. use a semi-structured database to store complex probabilistic distributions of data which is essentially relational. Works closer to ours are <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b16">17]</ref>. Nierman et al. <ref type="bibr" target="#b14">[15]</ref> describe a variant of the SP model and present strategies for efficient evaluations of logical queries. In <ref type="bibr" target="#b15">[16]</ref>, a complex model, based on directed acyclic graphs, is developed, along with an algebraic query language. Finally, Keulen et al. <ref type="bibr" target="#b16">[17]</ref> present an approach to data integration using probabilistic trees; their model is a mix of the PW and SP model, which allows both extensive descriptions of the possible worlds and node-based factorization. Querying and the way to present data integration results on this model are also shown. It is to be noted that none of the previous works, to the best of our knowledge, describes in an extensive way how to do updates on a probabilistic semi-structured database, one main contribution of this paper.</p><p>The work presented here is part of a larger project on the construction of content warehouses from (Hidden) Web resources as described in Sect. 2. While working on this topic, we realized that imprecision has to be a core part of the XML-based warehouse since ad-hoc processing of imprecision simply does not scale. This observation motivated the present work. We need now to complete the implementation of the fuzzy tree system, move it to an efficient XML repository and experiment with a real application.</p><p>A most important direction of research is to develop optimization techniques tailored to the fuzzy tree model. In particular, one would like to trim query evaluation branches that would provide data with too low confidence. Also, we want to study fuzzy tree simplification, i.e. finding more compact representations of imprecise data. As it is defined, the fuzzy tree model is not completely algebraic: if the result of an update is a tree, the result of a query is a set of tree/probability pairs. Actually, a similar construction can provide a representation of the answer as a fuzzy tree; the details are omitted. Finally, an interesting aspect is schema validation. Suppose we have a fuzzy tree representation T of some data, conforming to some DTD D. Its semantics can be seen as X = { T ∩ sat(D)} where sat(D) is the set of documents validating D. An issue is to efficiently compute a fuzzy tree for X. Of course, we will have to ignore order-related typing issues. But other aspects such as cardinalities are already quite challenging.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Queries and Updates on a Probabilistic XML Warehouse</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Example Possible Worlds set</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .Fig. 4 .</head><label>34</label><figDesc>Fig. 3. Example SP tree</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Sample fuzzy trees</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Theorem 3 .</head><label>3</label><figDesc>Let (τ, c) be a probabilistic update transaction and T a fuzzy tree. Then (τ, c)(T ) = (τ, c)( T ).</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Processing and Managing Complex Data for Decision Support</title>
		<author>
			<persName><forename type="first">S</forename><surname>Abiteboul</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Ruberg</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005">2005</date>
			<publisher>Idea Group Publishing</publisher>
		</imprint>
	</monogr>
	<note>Building an active content warehouse</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Efficient query evaluation on probabilistic databases</title>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">N</forename><surname>Dalvi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Suciu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Very Large Data Bases</title>
		<meeting><address><addrLine>Hong Kong, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="864" to="875" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">The reliability of queries</title>
		<author>
			<persName><forename type="first">M</forename><surname>De Rougemont</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Principles Of Database Systems</title>
		<meeting><address><addrLine>San Jose, United States</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="286" to="291" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Incomplete information in relational databases</title>
		<author>
			<persName><forename type="first">T</forename><surname>Imieliński</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Lipski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. ACM</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="page" from="761" to="791" />
			<date type="published" when="1984">1984</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Update semantics for incomplete databases</title>
		<author>
			<persName><forename type="first">S</forename><surname>Abiteboul</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Grahne</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1985">1985</date>
			<publisher>Very Large Data Bases</publisher>
			<pubPlace>Stockholm, Sweden</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Querying and updating probabilistic information in XML</title>
		<author>
			<persName><forename type="first">S</forename><surname>Abiteboul</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Senellart</surname></persName>
		</author>
		<idno>435</idno>
		<imprint>
			<date type="published" when="2005">2005</date>
			<publisher>GEMO, Inria Futurs</publisher>
			<pubPlace>Orsay, France</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">The Deep Web: Surfacing hidden value</title>
		<author>
			<persName><surname>Brightplanet</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>White Paper</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<author>
			<persName><forename type="first">X</forename><surname>Franc</surname></persName>
		</author>
		<ptr target="http://www.xfra.net/qizxopen/" />
		<title level="m">Qizx/open</title>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Path summaries and path partitioning in modern XML databases</title>
		<author>
			<persName><forename type="first">A</forename><surname>Arion</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bonifati</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Manolescu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Pugliese</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Technical Report</title>
		<imprint>
			<biblScope unit="volume">437</biblScope>
			<date type="published" when="2005">2005</date>
			<pubPlace>Gemo</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">The theory of probabilistic databases</title>
		<author>
			<persName><forename type="first">R</forename><surname>Cavallo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Pittarelli</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1987">1987</date>
			<publisher>Very Large Data Bases</publisher>
			<biblScope unit="page" from="71" to="81" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">The management of probabilistic data</title>
		<author>
			<persName><forename type="first">D</forename><surname>Barbará</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Garcia-Molina</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Porter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Knowledge and Data Engineering</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="487" to="502" />
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A probabilistic relational algebra for the integration of information retrieval and database systems</title>
		<author>
			<persName><forename type="first">N</forename><surname>Fuhr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Rölleke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Inf. Syst</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Trio: A system for integrated management of data, accuracy, and lineage</title>
		<author>
			<persName><forename type="first">J</forename><surname>Widom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Biennal Conference on Innovative Data Systems Research</title>
		<meeting><address><addrLine>Pacific Grove, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Semistructured probabilistic databases</title>
		<author>
			<persName><forename type="first">A</forename><surname>Dekhtyar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Goldsmith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">R</forename><surname>Hawkes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Statistical and Scientific Database Management</title>
		<imprint>
			<biblScope unit="page" from="36" to="45" />
			<date type="published" when="2001">2001</date>
			<pubPlace>Tokyo, Japan</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">ProTDB: Probabilistic data in XML</title>
		<author>
			<persName><forename type="first">A</forename><surname>Nierman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">V</forename><surname>Jagadish</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Very Large Data Bases</title>
		<meeting><address><addrLine>Hong Kong; China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">PXML: A probabilistic semistructured data model and algebra</title>
		<author>
			<persName><forename type="first">E</forename><surname>Hung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Getoor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">S</forename><surname>Subrahmanian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Data Engineering, Bangalore</title>
		<meeting><address><addrLine>India</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="467" to="478" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A probabilistic XML approach to data integration</title>
		<author>
			<persName><forename type="first">M</forename><surname>Van Keulen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>De Keijzer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Alink</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Data Engineering</title>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="459" to="470" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
