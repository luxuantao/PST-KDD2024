<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Improving Data-flow Analysis with Path Profiles</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Glenn</forename><surname>Ammons</surname></persName>
							<email>ammons@cs.wisc.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Dept. of Computer Sciences</orgName>
								<orgName type="institution">University of Wisconsin Madison</orgName>
								<address>
									<region>Wisconsin</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">James</forename><forename type="middle">R</forename><surname>Larus</surname></persName>
							<email>larus@microsoft.com</email>
							<affiliation key="aff1">
								<orgName type="department">Microsoft Research One Microsoft Way Redmond</orgName>
								<address>
									<settlement>Washington</settlement>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Improving Data-flow Analysis with Path Profiles</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">ACB146F10E070DA4CDA9472A1D648D76</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T07:39+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper was motivated by the observation that "programs follow paths." In 1996, Thomas Ball and James Larus published an efficient algorithm for capturing the paths executed by a program and used the technique to profile the SPEC95 benchmarks <ref type="bibr" target="#b2">[3]</ref>. The paper reported a remarkable result, that only a few thousand paths (out of billions of potential paths) execute in a typical run. Moreover, most of a program's execution time is spent on a small handful of hot paths. At the same time that Tom and Jim did this work, Glenn Ammons had a summer internship with Vasanth Bala at Hewlett Packard Laboratories, where he worked on the precursor to Dynamo <ref type="bibr" target="#b1">[2]</ref>. Although they used a different path profiling technique, Vasanth and Glenn came to the same conclusions as Tom and Jim. The observation was reinforced when Glenn joined Tom and Jim to extend the Ball-Larus algorithm to include metrics other than instruction counts (e.g., cache misses) and to capture calling context <ref type="bibr" target="#b0">[1]</ref>.</p><p>Since programs follow paths, we thought it made sense for compilers to follow paths too. This idea was not new-Josh Fisher had proposed trace scheduling almost two decades earlier [6]-but he lacked the profiling tools to reliably identify hot paths and only used traces to drive instruction scheduling. Because we had an accurate characterization of hot paths, we felt that we could use this information in higher-level analysis and optimization, such as constant propagation, without unduly increasing code size.</p><p>The University of Wisconsin Computer Sciences Department supports a strong research program in computer architecture, and their work inspired the approach in our paper. Many Wisconsin architectural designs make a prediction, speculate that the prediction is true while performing some work, and then undo the work if the prediction turns out to be false. For example, a processor might predict that a branch will be taken; speculatively fetch and execute instructions at the target of the branch; and later, if the branch turns out not to be taken, discard the side-effects from the instructions that should not have executed. Similarly, in our paper, we predict that better data-flow results can be found along hot paths, speculatively peel off hot paths in the CFG, perform data-flow analysis on the enlarged CFG, and then "unpeel" basic blocks in which results did not improve.</p><p>Although little research has followed the approach in this paper, we believe there are many opportunities to improve compilers with path-sensitive algorithms. The idea of feedback-driven analysis and optimization is alive and well in the run-time compilation (JIT) community. They have investigated low-overhead profiling techniques and used this information to focus a compiler on heav-</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>ily executed portions of a program, where the potential payoff of optimization is large. Path profiling is not widely used, as the cost of a complete profile is still too high.</p><p>It also seems likely that better profiling techniques, such as wholeprogram paths <ref type="bibr" target="#b7">[8]</ref> or generalized Ball-Larus paths <ref type="bibr" target="#b8">[9]</ref>, could improve our technique by avoiding constructing CFGs in which hot paths rejoin cold paths at loop back-edges, a merge that potentially destroys better data flow facts.</p><p>More generally, it is still our belief the profile information could be used to engineer more effective compilers. A compiler that concentrates on analyzing and optimizing hot paths could potentially achieve much of the benefit of existing compilers' scattershot approach, but with fewer optimizations and less complexity.</p><p>On the other hand, it is encouraging that the program correctness community has made extensive use of path-sensitive analysis in tools to find errors in programs. In this domain, path sensitivity is necessary to avoid false positives and produce accurate error reports. Engler's metacompilation system <ref type="bibr" target="#b6">[7]</ref>, Ball and Rajamani's SLAM tool <ref type="bibr" target="#b3">[4]</ref>, and Das's ESP tool <ref type="bibr" target="#b4">[5]</ref> all explore paths in a program, looking for sequences of operations that violate a simple, finite-state specification. Admittedly, none of these tools use profiles, but their analysis is path sensitive, which shows that path sensitive compiler techniques can be engineered to run on very large programs, such as operating systems.</p></div>			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>Best of PLDI 1979<ref type="bibr" target="#b7">-1999</ref> </p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Exploiting hardware performance counters with flow and context sensitive profiling</title>
		<author>
			<persName><forename type="first">Glenn</forename><surname>Ammons</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Thomas</forename><surname>Ball</surname></persName>
		</author>
		<author>
			<persName><forename type="first">James</forename><forename type="middle">R</forename><surname>Larus</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGPLAN &apos;97 Conference on Programming Language Design and Implementation</title>
		<meeting>the SIGPLAN &apos;97 Conference on Programming Language Design and Implementation</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1997-06">June 1997</date>
			<biblScope unit="page" from="85" to="96" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Dynamo: A transparent dynamic optimization system</title>
		<author>
			<persName><forename type="first">Vasanth</forename><surname>Bala</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Evelyn</forename><surname>Duesterwald</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sanjeev</forename><surname>Banerjia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGPLAN &apos;00 Conference on Programming Language Design and Implementation</title>
		<meeting>the SIGPLAN &apos;00 Conference on Programming Language Design and Implementation</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2000-06">June 2000</date>
			<biblScope unit="page" from="1" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Efficient path profiling</title>
		<author>
			<persName><forename type="first">Thomas</forename><surname>Ball</surname></persName>
		</author>
		<author>
			<persName><forename type="first">James</forename><forename type="middle">R</forename><surname>Larus</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of MICRO 96</title>
		<meeting>MICRO 96</meeting>
		<imprint>
			<date type="published" when="1996-12">December 1996</date>
			<biblScope unit="page" from="46" to="57" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The SLAM project: Debugging system software via static analysis</title>
		<author>
			<persName><forename type="first">Thomas</forename><surname>Ball</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sriram</forename><forename type="middle">K</forename><surname>Rajamani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 29th ACM SIGPLAN-SIGACT Symposium on the Principles of Programming Languages</title>
		<meeting>the 29th ACM SIGPLAN-SIGACT Symposium on the Principles of Programming Languages</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2002-01">January 2002</date>
			<biblScope unit="page" from="1" to="3" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">ESP: Path-sensitive program verification in polynomial time</title>
		<author>
			<persName><forename type="first">Manuvir</forename><surname>Das</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sorin</forename><surname>Lerner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mark</forename><surname>Seigle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGPLAN &apos;02 Conference on Programming Language Design and Implementation</title>
		<meeting>the SIGPLAN &apos;02 Conference on Programming Language Design and Implementation</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2002-06">June 2002</date>
			<biblScope unit="page" from="57" to="68" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Trace scheduling: A technique for global microcode compaction</title>
		<author>
			<persName><forename type="first">Joseph</forename><forename type="middle">A</forename><surname>Fisher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Computers</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="478" to="490" />
			<date type="published" when="1981-07">July 1981</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A system and language for building system-specific, static analyses</title>
		<author>
			<persName><forename type="first">Seth</forename><surname>Hallem</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Benjamin</forename><surname>Chelf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yichen</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dawson</forename><surname>Engler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGPLAN &apos;02 Conference on Programming Language Design and Implementation</title>
		<meeting>the SIGPLAN &apos;02 Conference on Programming Language Design and Implementation</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2002-06">June 2002</date>
			<biblScope unit="page" from="69" to="82" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Whole program paths</title>
		<author>
			<persName><forename type="first">James</forename><forename type="middle">R</forename><surname>Larus</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGPLAN &apos;99 Conference on Programming Language Design and Implementation</title>
		<meeting>the SIGPLAN &apos;99 Conference on Programming Language Design and Implementation</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1999-05">May 1999</date>
			<biblScope unit="page" from="259" to="269" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Interprocedural Path Profiling and the Interprocedural Express-Lane Transformation</title>
		<author>
			<persName><forename type="first">David</forename><surname>Gordon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Melski</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
		<respStmt>
			<orgName>University of Wisconsin-Madison</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
