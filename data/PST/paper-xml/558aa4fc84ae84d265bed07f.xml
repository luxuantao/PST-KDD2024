<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Kinodynamic Motion Planning Amidst Moving Obstacles</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Robert</forename><surname>Kindel</surname></persName>
						</author>
						<author>
							<persName><forename type="first">David</forename><surname>Hsu</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Jean-Claude</forename><surname>Latombe</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Stephen</forename><surname>Rock</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Department of Aeronautics &amp; Astronautics</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Stanford University Stanford</orgName>
								<address>
									<postCode>94305</postCode>
									<region>CA</region>
									<country key="US">U.S.A</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Kinodynamic Motion Planning Amidst Moving Obstacles</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">5CAB0A772051ED7BA4336DE8EEE6F7F2</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T06:20+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper presents a randomized motion planner for kinodynamic asteroid avoidance problems, in which a robot must avoid collision with moving obstacles under kinematic, dynamic constraints and reach a specified goal state. Inspired by probabilistic-roadmap (PRM) techniques, the planner samples the state ¥ time space of a robot by picking control inputs at random in order to compute a roadmap that captures the connectivity of the space. However, the planner does not precompute a roadmap as most PRM planners do. Instead, for each planning query, it generates, on the fly, a small roadmap that connects the given initial and goal state. In contrast to PRM planners, the roadmap computed by our algorithm is a directed graph oriented along the time axis of the space. To verify the planner's effectiveness in practice, we tested it both in simulated environments containing many moving obstacles and on a real robot under strict dynamic constraints. The efficiency of the planner makes it possible for a robot to respond to a changing environment without knowing the motion of moving obstacles well in advance.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>In this paper, we consider kinodynamic asteroid avoidance problems, a class of motion planning problems that take into account kinematic and dynamic constraints on robots, as well as moving obstacles in the environment. We present a simple, efficient randomized algorithm for kinodynamic asteroid avoidance problems and demonstrate its efficiency in both simulation and hardware implementation (Figure <ref type="figure" target="#fig_0">1</ref>).</p><p>The primary motivation of our work is to control rigidbody space robots at the task level. Space robots are often under severe dynamic constraints due to limited actuator forces and torques. They perform various tasks, including inspection and assembly, amid moving obstacles (e.g., other robots and astronauts). Automated means to control their motion are needed in order to free astronauts from the tedious task of teleoperation.</p><p>The algorithm that we propose is general and not limited to space robots. In addition to the experiments that will be described in , it has also been applied to nonholonomic vehicle navigation <ref type="bibr" target="#b9">[10]</ref>. Another important potential application of our planner is the design and control of complex, multi-robot manufacturing cells. kinodynamic motion planning and asteroid avoidance have both been separately investigated in the literature.</p><p>Kinodynamic planning <ref type="bibr" target="#b5">[6]</ref> refers to planning problems in which a robot's dynamics must be taken into account. One approach divides the solution into two main steps <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b18">19]</ref>. First, ignore the dynamic constraints and compute a collision-free path. Second, deform this path into a trajectory that conforms to the dynamic constraints with an optimization procedure. However, the final trajectory thus obtained may be far from optimal, a drawback that would seriously complicate the extension of the approach to environments with moving obstacles. Another approach is to discretize the robot's state space and search it for a trajectory directly, using dynamic programming <ref type="bibr" target="#b5">[6]</ref>. This approach offers provable performance guarantees, but is only applicable to robots with few degrees of freedom (dofs)typically 2 or 3 -since the size of the discretization grid grows exponentially with the number of dofs.</p><p>Asteroid avoidance problems require planning trajectories among moving obstacles with known trajectories <ref type="bibr" target="#b16">[17]</ref>. The robot's velocity and acceleration may or may not be upper-bounded. Asteroid avoidance problems are provably hard, even with a small number of dofs <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b4">5]</ref>. Effective algorithms <ref type="bibr" target="#b6">[7]</ref> exist in some specific cases, but they usually do not consider constraints on the robot's motion other than an upper bound on its velocity.</p><p>The algorithm proposed in this paper is inspired by the success of probabilistic roadmap (PRM) techniques for planning geometric paths of robots with many dofs <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b12">13]</ref>. A PRM planner computes a path by sampling a robot's configuration space at random and connecting the sampled configurations, called milestones, by simple canonical paths (typically, straight-line segments in the configuration space). The result is a undirected graph called a probabilistic roadmap. Most PRM planners precompute a roadmap <ref type="bibr" target="#b12">[13]</ref> in order to process queries as fast as possible; others compute a new roadmap for each query <ref type="bibr" target="#b10">[11]</ref> in order to deal with changing environments more efficiently. It can be shown that under reasonable geometric assumptions on the configuration space, a small number of milestones are sufficient to capture the connectivity of the space with high probability <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b10">11]</ref>. Despite the success of PRM techniques, their use in nonholonomic and kinodynamic motion planning <ref type="bibr" target="#b19">[20]</ref> has been limited, because PRM planners require appropriate canonical paths to connect two given milestones. Constructing such canonical paths in the presence of nonholonomic and dynamic constraints is only possible for relatively simple robots.</p><p>To overcome this difficulty, our planner incrementally builds a new roadmap in the state ¦ time space of a robot for each planning query. A state encodes both the configuration and the velocity of the robot. To sample a new milestone, the planner selects a control input at random from the set of admissible controls and integrates the equations of motion under this control input from an existing milestone for a short duration of time. By construction, the trajectory thus obtained automatically satisfies the motion constraints. If it does not collide with the obstacles, the state at the end of the trajectory is stored in the roadmap as a milestone. This iterative process yields a directed tree-shaped roadmap rooted at the initial state and oriented along the time axis. The planner terminates when a milestone is close enough to the goal state (we will be more precise about this in Section 2). The idea of generating a new milestone by selecting a control input and integrating the equations of motion, rather than directly sampling the configuration (or the state) space was originally proposed and applied in <ref type="bibr" target="#b2">[3]</ref> to solve nonholonomic planning problems with a deterministic sampling strategy, and it was recently used in <ref type="bibr" target="#b13">[14]</ref> to solve kinodynamic problems in static environments with randomsampling techniques. However, the fact that our planner produces roadmaps in the form of directed graphs (trees, to be more precise) oriented along the time axis makes our planner quite different from previous PRM planners.</p><p>We experimented with our planner both in simulated environments and on a real robot. In simulated environments, we tested it on difficult motion-planning problems involving many moving obstacles. With a real robot, we verified that the planner can be integrated into a larger system. In our hardware experiments, a vision system estimates the motion of obstacles, which are assumed to move with constant linear velocities, just before planning; the planner must then compute a collision-free trajectory in a fixed amount of time (0.25 § ). The planner can also recompute the trajec- tory on the fly in response to any change in the motion of obstacles. For the experiments reported here, we modeled the robot as a disc moving in two dimensions, but we also successfully tested the planner on a six-dof articulated nonholonomic robot system in static environments <ref type="bibr" target="#b9">[10]</ref>. These additional experiments, as well as previous results on the performance of PRM planners on many-dof robots, indicate that our planner will scale up well with the number of dofs of the robot.</p><p>The rest of the paper is organized as follows. Section 2 describes the planner. Section 3 presents experimental results in simulation. Section 4 describes the implementation and experimental results of our planner on a real robot. Finally, Section 5 discusses current and future research.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Description of the Planner</head><p>State space formulation We consider a robot whose motion is described by an equation of the form</p><formula xml:id="formula_0">¨© © "! #<label>(1)</label></formula><p>where © %$ '&amp; is the state of a robot, ($ ) is the control input, is a smooth function, and ¨© is the derivative of © with respect to time. The set &amp; is the state space of the robot, which contains all the distinguishable states that the robot may be in at any given time. The set ) represents the control space, which contains all admissible values for the control input. Eq. ( <ref type="formula" target="#formula_0">1</ref>) specifies ¨© , the rate of change of the robot's state over time, as a function of the current state © and the control input . With no loss of generality, we assume that &amp; and ) are subsets of R0 and R1 , respectively.</p><p>Eq. ( <ref type="formula" target="#formula_0">1</ref>) is quite general and covers many robots with complex nonholonomic and dynamic constraints.</p><p>In the version of the planner presented here, the robot is modeled as a disc with point-mass, non-dissipative dynamics. It translates in a plane among static and moving obstacles. Let 2 43 5 2 "6 #! and ¨2 43 5 ¨2 76 8! denote the position and velocity of the robot. We define the state of the robot as © 9 @ A2 B3 C D2 76 E ¨2 B3 5 ¨2 76 8! F$ RG . The control input is the force exerted by the actuators; the magnitude of the force is bounded, but the orientation of the force is unconstrained.</p><p>Let 3 6 ! denote the components of this force along the 2 3 -and 2 6 -axis, respectively. For a robot with unit mass, Newton's law yields the following control equations:</p><formula xml:id="formula_1">H 2 43 I 43 H 2 76 P Q "6 E</formula><p>where H 2 3 and H 2 6 are the components of the robot's acceler- ation. The bound on the control input leads to the additional constraint 6 3 SR 6 6 UT WV , which defines ) as a subset of R 6</p><p>. We could also bound the robot's velocity as well.</p><p>A planning query is specified by an initial and a goal state ¦ time, denoted by © #X Y #X C ba cX Y 8X c! and A© 8d e 8f hg i ba cd e 8f hg p! , re- spectively. A solution to this query is a finite sequence of fixed control inputs, each applied over some time interval, such that these inputs induce a collision-free trajectory from state © 8X Y 8X `at time a cX Y #X `to state © #d e 8f cg at time a cd e 8f hg . In our plan- ner, we set a X Y 8X `to be 0 and we constrain a d e 8f hg to be in some given interval q d e 8f hg , meaning that any arrival time a d e 8f hg in this interval is acceptable as long as no collision occur in the interval r ts ua d De 8f hg v .</p><p>In general, the robot's control equations may contain dynamic couplings among dofs and dissipative terms. The algorithmic principles of the planner described below, and most of the implementation, would remain unchanged.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Roadmap construction</head><p>Our planner processes a query by iteratively expanding a tree w of milestones (the roadmap) generated at random, in a way similar to the geometric path planner presented in <ref type="bibr" target="#b10">[11]</ref>. Here, however, w is built in the state ¦ time space of the robot, instead of its configuration space. The sampling strategy is also different in order to deal with the constraints on the robot's motion.</p><p>At each iteration, we obtain a new candidate milestone © Cx b ua cx y! by first picking a milestone © ua D! already in w and an admissible value of the control input at random. Then the robot's equations of motion are integrated from © ua D! with the input over a duration , also selected at random from a given interval r ts 8 f h v ; hence, a cx a R . The trajectory between © and © Cx is checked for collision using the discretization technique given in <ref type="bibr" target="#b1">[2]</ref> and adapted to deal with moving obstacles. If no collision is detected and a cx is smaller than the latest arrival time in q d e f hg , © Cx b ua cx y! is accepted as a new milestone in w , with a directed edge from © ua D! to A© Cx b ba cx ! . The selected control value is stored with the edge. This way, the kinodynamic constraints of the robot are naturally enforced. If a collision is detected, © Cx b ua cx y! is simply discarded. If there is no valid trajectory from © X Y #X `to © #d De 8f hg , then the planner would not terminate. Therefore, we place a limit on the number of iterations that it performs. The above sampling technique does not allow the planner to achieve the goal state © d e 8f cg precisely. To deal with this issue, whenever a new milestone A© Cx ua cx i! is added to w , the planner checks whether the third-order spline connecting © Cx b ua cx y! to © d De 8f hg ua d De 8f hg ! , for some a d e 8f hg in q d e 8f cg , is collision- free. If so, © d e 8f cg ua d e 8f cg ! is inserted into w , with an edge pointing from A© Cx b ba cx ! to © d e 8f cg ua d e 8f cg ! , and the planner exits with success. The net effect of using spline connection is to enlarge the goal into a relatively large endgame region that the sampling technique can eventually attain with high probability. Other endgame connections could be considered, but for our simple acceleration-bounded robot, the third-order spline between two given states is unique and easily computed. Another important issue for our planner is to avoid an oversampling of any region of the state ¦ time space, in particular, around © #X Y 8X C s ! . Ideally we would like the milestone distribution to converge progressively toward a uniform distribution. Our planner handles this issue by selecting at each iteration the milestone A© ba D! to expand with a probability inversely proportional to the number of other other milestones within some predefined distance of © ua D! .</p><p>Another technique proposed in <ref type="bibr" target="#b13">[14]</ref> consists of picking a state uniformly at random in the state space and choosing the milestone in w that is the closest to this state.</p><p>Several heuristics could be used to bias the randomized construction of the tree w . For example, at each iteration, to choose a milestone © ua D! to be expanded, one may use a probability distribution that favors the states that are close to © 8d e 8f hg and select control input to generate a state that is even closer to the goal. However, the effectiveness of any such heuristics depends on the kind of planning problems submitted to the planner. The suggested heuristics might not work well if obstacles are elongated barriers requiring long detours to reach the goal. Our planner uses no biasing heuristics.</p><p>To perform collision checking appropriately, our planner needs to know the motion of obstacles. So in our experiments with a real robot, we use a vision system to measure the linear velocities of moving obstacles at 60 Hz just before the planning starts. The planner must then complete the computation of a trajectory within 0.25 § (which has been the case in almost all our experiments). Thus a X Y #X `, the initial time of the query is set to the current time plus 0.25 § .</p><p>Implementation details Some additional details need to be specified to complete the description of the planner.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Milestone selection.</head><p>A simple method is used to avoid oversampling any region of the state ¦ time space. The two- dimensional configuration space of the robot is partitioned into an array of bins of equal sizes. Whenever the planner chooses a new milestone to insert into w , it also adds the milestone to the corresponding bin. At each iteration, the planner selects the milestone © ua D! to expand by pick- ing a bin at random and a milestone from this bin. This corresponds approximatively to selecting a milestone with probability inversely proportional to the local density of milestones. We could estimate the local density of milestones in the state ¦ space more accurately by range search techniques <ref type="bibr" target="#b7">[8]</ref>, but range search is much more complex to implement. In addition, for a robot moving in a plane, our current implementation is also more efficient than range search. We regard it as a good trade-off for the resulting slightly non-uniform distribution.</p><p>Control selection. The control input is a constant acceler- ation of magnitude between 0 and 0.036 <ref type="bibr">§ 6</ref> and direction between 0 and . At each iteration the magnitude and the direction of are selected from their respective intervals, independently and uniformly at random. The maximal integration time 1 P is set to be 6.0 § .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Endgame connection. The connection of each new mile-</head><p>stone inserted into w to the goal state is tested for a maxi- mum of different arrival times randomly selected in q . In all the experiments reported below, was set to 10. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Guarantees of performance</head><p>In <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b10">11]</ref> it is shown that under reasonable geometric assumptions on the free space (collision-free subset of the robot's configuration space), a PRM path planner generating milestones distributed uniformly at random over can find a collision-free path with high probability, whenever one exists. More precisely, the assumptions state that each configuration in "sees" a sig- nificant portion of (a property called -goodness) and that no two regions of are connected only by a very narrow passage (a property called expansiveness). Under these two assumptions, the probability that the PRM planner fails to find a path between two free configurations lying in the same connected component of decreases exponentially with the number of sampled milestones.</p><p>We have extended this result to our current planner that deals with kinematic, dynamic constraints as well as moving obstacles. This extension generalizes the definition of - goodness and expansiveness to the robot's state ¦ time space, by taking into account that the reachability relationship between points in this new space is no longer symmetrical. However, the intuition behind the new definitions and results remains similar to that of geometric path planning. For lack of space, we refer the reader to <ref type="bibr" target="#b9">[10]</ref> for a complete discussion of these results.</p><p>The exponential convergence of the planner requires a uniform distribution of the milestones. This is why the planner must avoid oversampling any region in the state ¦ time space.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Experiments in Simulation</head><p>We now present experimental results obtained with our planner in simulated environments. As previously indicated, our main goal is to verify that the planner can solve efficiently tricky problems in an environment with a substantial number of obstacles. Such problems are very difficult to set up within the physical limitation of our real robot testbed. The simulation problems were crafted by hand to require delicate maneuvers by the robot.</p><p>In our experiments, each obstacle moves at constant linear velocity. To simplify the implementation, collision among obstacles are ignored. As a result, two obstacles may temporarily overlap without changing their respective courses. When an obstacle reaches the boundary of the robot's workspace, it just stays there and is no longer deemed a threat to the robot. The planner is given the obstacle trajectories. Unlike the experiments with the real robot, planning time is not limited. Figures <ref type="figure" target="#fig_3">3</ref><ref type="figure">4</ref><ref type="figure">5</ref>show three examples computed by the planner. In each case, we ran the planner 100 times independently for the same query; the mean and standard deviation of the planning time, as well as those of the number of sampled milestones in the roadmap, are shown in Table <ref type="table" target="#tab_0">1</ref>. The planning times were measured on a PC with a 550 MHz Pentium-III processor. The planner successfully returned a trajectory in every run.</p><p>Example 1. The robot (grey disc) must move from the lower edge of the workspace to the upper edge in the presence of 10 moving obstacles (black discs). The path computed for the robot is shown in solid line, and the paths of the obstacles, in dashed lines (Figure <ref type="figure" target="#fig_3">3</ref>).  Example 2. The five moving obstacles in this example allow a single small opening for the robot to escape collision with the obstacles that all converge toward the initial position of the robot (Figure <ref type="figure">4</ref>). Figure <ref type="figure" target="#fig_2">2</ref> shows the corresponding configuration ¦ time space. The robot maps into this space as a point 2 43 5 2 "6 E ua D! ; the obstacles are grown by the robot's radius and are extended into cylinders along their linear trajectories. The acceleration constraint makes it impossible for the robot to move through most of the free space and forces the feasible trajectory (as the one is shown in Figure <ref type="figure" target="#fig_2">2</ref>) to pass through the small gap between cylinders to attain the goal. The environment is considerably more "hostile" than that expected in most space robotics applications. Example 3. This example (Figure <ref type="figure">5</ref>), is more representative of the environments that are expected to occur during typical space robotic tasks. There are two stationary obstacles near the middle of the workspace and three moving obstacles that are aimed not to collide with any other obstacle. The very small average planning time (0.002 § ), confirms that in the absence of narrow passages randomized motion planners are extremely efficient.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Experiments on a Real Robot</head><p>Testbed description We integrated our planner with the controller of the "free-flying" robot testbed in the Stanford Aerospace Robotics Laboratory. This testbed provides a frictionless 2-D environment for testing robotics technologies for space applications. It consists of a 3 h¦ 4 granite table providing a flat workspace upon which a robot and a number of obstacles moving frictionlessly on air-bearings (see Figure <ref type="figure" target="#fig_0">1</ref>). Previous work with this testbed includes multiple-robot assembly <ref type="bibr" target="#b17">[18]</ref> and kinodynamic motion plan-ning in static environments <ref type="bibr" target="#b14">[15]</ref>. The robot has a roughly cylindrical shape. It is untethered and carries all of its vital systems on-board. Compressed air is used both to maintain the air-bearing and to provide propulsion. Eight horizontal thrusters are located in pairs around the circumference of the robot, providing omnidirectional thrusting. The gas tanks provide enough air for half an hour of station-keeping maneuvers or about 5 minutes of path following. On-board batteries provide power for about 30 minutes of full actuation without recharging. Robot control is performed at 60 Hz on a Motorola ppc2604 real-time computer.</p><p>Position sensing is performed by an overhead vision system. The measured position are accurate to s ji ts s k . The update rate is 60 Hz. Velocity estimates are derived from the position data with an error of 0.005 § .</p><p>The planner runs off-board on a Sun Sparc Ultra10 workstation with a 333 MHz processor and 128 MB of memory.</p><p>Communications among the robot, the vision system, and the planner are implemented with radio Ethernet.</p><p>The obstacles have no thrusters. They are initially propelled by hand from various locations, and then move at constant speed until they reach the boundary of the table, where they stop.</p><p>Integration of the planner Running the planner on the testbed raises a number of new challenges: Delays. The sensor measurement for the states of the robot and obstacle arrive asynchronously and incur a delay of up to 1/30 § each. The execution of the planner then takes some amount of time, and the transmission of the path to the robot takes up to another 1/60 § . If these delays are not taken into account the robot would thus start out about 0.25 § behind the plan it is attempting to execute. With acceleration limits on the vehicle it might not be possible to catch up with the planned path before collision occurs. To eliminate this problem, the planner starts planning assuming the robot will start executing the yet-to-be-computed trajectory 0.25 § into the future and extrapolates the robot's initial position if its current velocity is non-zero. If the total delay turns out to be less than that, the robot controller will wait until the delay period is over before moving along the planned trajectory.</p><p>The delay of 0.25 § is quite conservative for the experiments carried out in the testbed; we expect that it can be reduced well below 0.1 § in the future.</p><p>Sensor errors. Our planner assumes that the moving obstacles move along straight-line trajectories with constant velocities as measured by the vision system. However, inaccuracy in the measurement of the vision sensor, asymmetry in the air-bearing supporting the moving obstacles, and tiny collisions with dust particles on the table all cause the actual obstacle trajectories to be slightly different from the predicted ones. To correct for these errors, the planner increases the radius of each moving obstacle as a function of time and velocity, assuming a constant velocity error term. As a result, the size of the obstacle region grows to take into account the uncertainty in determining its position. Trajectory following. The trajectory received by the robot contains the desired position, velocity and accelerations for the motion. A PD-controller with feedforward is used to track the trajectory. A simple thrust-mapper is used to activate and deactivate the bang-bang thrusters to approximate a linear plant. Tracking errors average approximately 0.02 with a maximum of s ji ts k U . The size of the disc modeling the robot is increased by the maximum tracking error to ensure safe collision-checking operations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Results</head><p>Our experiments show that the planner is able to maneuver the free-flying robot successfully among static and moving obstacles on the granite table under strict dynamic constraints. In almost all trials, the trajectories were computed within the prescribed 0.25 § . Tests were per- formed for a number of different environments. Figure <ref type="figure" target="#fig_5">6</ref> shows snapshots of the robot motion in one of these tests.</p><p>The planner was tested in canonical situations to observe the robot's behavior. The robot avoided obstacles moving directly toward it, as well as obstacles moving perpendicular to the line connecting the initial and the goal position. It also showed the ability to wait for an opening when confronted with moving obstacles in the desired direction of movement and to move through openings that were less than 10 l # larger than the robot.</p><p>The major limitations of the testbed are the size of the granite table relative to that of the robot and the obstacles, the bound on the robot's acceleration, and the relatively high uncertainty in the sensor data. These constraints limit the complexity of the planning queries and the robot motions that can be tested.</p><p>On-the-fly replanning Because of the very short running times of the planner, we can use the overhead vision system to detect unexpected changes in the motion of obstacles and invoke the planner to replan a trajectory for the robot. This makes it possible to remove the assumption that the motion of obstacles is known a priori. It also allows us to use less conservative error bounds on the obstacle trajectories, resulting in smaller obstacle regions and increased free space for the robot to maneuver and thus further improving the running time of the planner. Experiments with replanning are reported in <ref type="bibr" target="#b9">[10]</ref>. Currently the planner is given 0.25 s for each replanning query, but we believe that it is quite feasible to reduce the time to 0.1 s or faster and integrate the planner into the control loop of the robot.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>We have presented a simple, efficient randomized planner for kinodynamic motion planning in the presence of moving obstacles. This planner was successfully tested both in simulated environments and on a hardware testbed developed to study robotics technology for space applications. The planner was also tested on articulated nonholonomic vehicles with six dofs. For lack of space, the experiments with this system are not reported here, but the results can be found in <ref type="bibr" target="#b9">[10]</ref>. This planner demonstrates that random-sampling techniques extend well to motion planning problems beyond pure geometric path planning.</p><p>In the future, we plan to apply our planner to objects with complex geometry in three-dimensional environments and test the planner with many-dof robots amid moving obstacles. Our previous experience with PRM planners indicates that the random-sampling planning approach scales up well with both complex geometry and many dofs. Geometric complexity essentially increases the cost of collision checking, but hierarchical techniques (e.g., <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b15">16]</ref>) deal with this issue well. We have successfully applied a randomized path planner to environments with up to 200,000 triangles <ref type="bibr" target="#b10">[11]</ref>.</p><p>Another important future direction of research is to integrate the planner with the controller and the sensing modules that detect moving obstacles. The efficiency of the planner should make it possible to directly include it in the control loop.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. The testbed for the planner. The robot and obstacles float frictionlessly on a granite table via air-bearings.</figDesc><graphic coords="1,339.60,216.02,194.40,137.74" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Path optimization. The trajectory computed by a randomized planner may contain unnecessary zig-zags, because of the random steps taken by the algorithm. For this reason, the planner may choose not to exit after finding the first valid trajectory between © #X Y 8X C ba cX Y 8X c! and A© 8d e 8f hg i ba cd e 8f hg ! . Instead it continues sampling more milestones until a number of valid trajectories are found and returns the one with the minimum cost. In our case, the cost function takes into account both the time and the amount of thrust required to execute the path. The robot and the workspace. The workspace is a rectangle of 3 by 4 . The robot is modeled as a circular disc with a radius of roughly 25 cm. Obstacles are also circular discs with varied radii, mostly between 10 and 15 cm. The obstacles move at different, but fixed linear velocities. The velocities of obstacles range from 0 to 0.2 § . Software. The planner is written in C. It runs both on a PC and on a Sun Sparc workstation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. The configuration g time space for Example 2. The cylinders indicate the moving obstacles in the configuration g time space. The thick line marks the trajectory of the robot.</figDesc><graphic coords="4,372.05,167.18,127.35,133.65" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. A robot moves among many moving obstacles. The grey disc indicates the robot. Black discs indicate obstacles. The solid and dotted lines indicate the trajectories of the robot and obstacles respectively. T = 0.0 secs T = 9.0 secs T = 20.0 secs T = 30.0 secs T = 45.5 secs</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 .Figure 5 .</head><label>45</label><figDesc>Figure 4. A robot moves among "hostile" obstacles. T = 0.0 secs T = 8.0 secs T = 16.1 secs T = 24.1 secs T = 32.1 secs</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 .</head><label>6</label><figDesc>Figure 6. Snapshots of a robot executing a trajectory on the hardware testbed.</figDesc><graphic coords="7,188.40,71.89,111.60,83.87" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 .</head><label>1</label><figDesc>Running time and the number of milestones (including endgame connections) for computed examples.</figDesc><table><row><cell>Example</cell><cell>time</cell><cell></cell><cell cols="2">milestones</cell></row><row><cell></cell><cell>mean</cell><cell>std</cell><cell>mean</cell><cell>std</cell></row><row><cell>1</cell><cell cols="4">0.249 0.264 2008 2229</cell></row><row><cell>2</cell><cell cols="4">0.270 0.285 1946 2134</cell></row><row><cell>3</cell><cell cols="2">0.002 0.005</cell><cell>22</cell><cell>25</cell></row><row><cell>d e</cell><cell>d Ef</cell><cell></cell><cell></cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgments This work is supported by ARO MURI grant DAAH04-96-1-007, NASA TRIWG Coop-Agreement NCC2-333, Real-Time Innovations, and the NIST ATP program. Robert Kindel is a recipient of the NSF Graduate Fellowship. David Hsu is a recipient of the Microsoft Graduate Fellowship.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">OBPRM: An obstacle-based PRM for 3D workspaces</title>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">M</forename><surname>Amato</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><forename type="middle">B</forename><surname>Bayazit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">K</forename><surname>Dale</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Jones</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Vallejo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Robotics: The Algorithmic Perspective: 1998 Workshop on the Algorithmic Foundations of Robotics</title>
		<imprint>
			<date type="published" when="1998">1998</date>
			<biblScope unit="page" from="155" to="168" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A random sampling scheme for path planning</title>
		<author>
			<persName><forename type="first">J</forename><surname>Barraquand</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Kavraki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Latombe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T.-Y</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Motwani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Raghavan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. of Robotics Research</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="759" to="774" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Nonholonomic multibody mobile robots: Controllability and motion planning in the presence of obstacles</title>
		<author>
			<persName><forename type="first">J</forename><surname>Barraquand</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Latombe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">2-4</biblScope>
			<biblScope unit="page" from="121" to="155" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Time-optimal control of robotic manipulators along specified paths</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Bobrow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Dubowsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Gibson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. of Robotics Research</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="3" to="17" />
			<date type="published" when="1985">1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Some algebraic and geometric computations in pspace</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">F</forename><surname>Canny</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Symp. on Foundations of Computer Science</title>
		<meeting>IEEE Symp. on Foundations of Computer Science</meeting>
		<imprint>
			<date type="published" when="1988">1988</date>
			<biblScope unit="page" from="460" to="467" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Kinodynamic motion planning</title>
		<author>
			<persName><forename type="first">B</forename><surname>Donald</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Xavier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Canny</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Reif</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. of the ACM</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="1048" to="1066" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Time-minimum routes in time-dependent networks</title>
		<author>
			<persName><forename type="first">K</forename><surname>Fujimura</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Robotics and Automation</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="343" to="351" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Goodman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>O'rourke</surname></persName>
		</author>
		<title level="m">Handbook of Discrete and Computational Geometry</title>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>CRC Press</publisher>
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">OBB-Tree: A hierarchical structure for rapid interference detection</title>
		<author>
			<persName><forename type="first">S</forename><surname>Gottschalk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Manocha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIG-GRAPH 96 Conference Proceedings</title>
		<imprint>
			<date type="published" when="1996">1996</date>
			<biblScope unit="page" from="171" to="180" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Randomized kinodynamic motion planning with moving obstacles</title>
		<author>
			<persName><forename type="first">D</forename><surname>Hsu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Kindel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Latombe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Rock</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
	<note>To appear in Workshop on the Algorithmic Foundations of Robotics</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Path planning in expansive configuration spaces</title>
		<author>
			<persName><forename type="first">D</forename><surname>Hsu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Latombe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Motwani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Int. Conf. on Robotics and Automation</title>
		<meeting>IEEE Int. Conf. on Robotics and Automation</meeting>
		<imprint>
			<date type="published" when="1997">1997</date>
			<biblScope unit="page" from="2719" to="2726" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Randomized query processing in robot path planning</title>
		<author>
			<persName><forename type="first">L</forename><surname>Kavraki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Latombe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Motwani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Raghavan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Symp. on Theory of Computing</title>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="353" to="362" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Overmars. Probabilistic roadmaps for path planning in highdimensional configuration space</title>
		<author>
			<persName><forename type="first">L</forename><surname>Kavraki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Švestka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Latombe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Robotics and Automation</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="566" to="580" />
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Randomized kinodynamic planning</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Lavalle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">J</forename><surname>Kuffner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Int. Conf. on Robotics and Automation</title>
		<meeting>IEEE Int. Conf. on Robotics and Automation</meeting>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="473" to="479" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Real-Time Dynamic Trajectory Optimization with Application to Free-Flying Space Robots</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">W</forename><surname>Miles</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997">1997</date>
			<pubPlace>Stanford, CA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Stanford University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Efficient distance computation between nonconvex objects</title>
		<author>
			<persName><forename type="first">S</forename><surname>Quinlan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Int. Conf. on Robotics and Automation</title>
		<meeting>IEEE Int. Conf. on Robotics and Automation</meeting>
		<imprint>
			<date type="published" when="1994">1994</date>
			<biblScope unit="page" from="3324" to="3329" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Motion planning in the presence of moving obstacles</title>
		<author>
			<persName><forename type="first">J</forename><surname>Reif</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sharir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Symp. on Foundations of Computer Science</title>
		<meeting>IEEE Symp. on Foundations of Computer Science</meeting>
		<imprint>
			<date type="published" when="1985">1985</date>
			<biblScope unit="page" from="144" to="154" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">An operational space formulation for a free-flying, multi-arm space robot</title>
		<author>
			<persName><forename type="first">J</forename><surname>Russakow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Rock</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Khatib</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Int. Symp. on Experimental Robotics</title>
		<meeting>Int. Symp. on Experimental Robotics</meeting>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="448" to="457" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">On computing the global time-optimal motions of robotic manipulators in the presence of obstacles</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Shiller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Dubowsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Robotics and Automation</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="785" to="797" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Motion planning for carlike robots using a probabilistic learning approach</title>
		<author>
			<persName><forename type="first">P</forename><surname>Švestka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">H</forename><surname>Overmars</surname></persName>
		</author>
		<idno>RUU-CS-94-33</idno>
		<imprint>
			<date type="published" when="1994">1994</date>
			<pubPlace>Utrecht, The Netherlands</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Dept. of Computer Science, Utrecht University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
