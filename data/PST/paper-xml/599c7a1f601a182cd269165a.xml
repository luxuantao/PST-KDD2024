<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Preserving Privacy with Probabilistic Indistinguishability in Weighted Social Networks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Qin</forename><surname>Liu</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">College of Computer Science and Electronic Engineering</orgName>
								<orgName type="institution">Hunan University</orgName>
								<address>
									<settlement>Changsha</settlement>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">Hunan Province</orgName>
								<address>
									<postCode>410082</postCode>
									<country key="CN">P. R. China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Guojun</forename><surname>Wang</surname></persName>
							<email>csgjwang@gmail.com</email>
							<affiliation key="aff0">
								<orgName type="department">College of Computer Science and Electronic Engineering</orgName>
								<orgName type="institution">Hunan University</orgName>
								<address>
									<settlement>Changsha</settlement>
								</address>
							</affiliation>
							<affiliation key="aff2">
								<orgName type="department" key="dep1">School of Computer Science and Educational Software</orgName>
								<orgName type="department" key="dep2">Guangdong Province</orgName>
								<orgName type="institution">Guangzhou University</orgName>
								<address>
									<postCode>510006</postCode>
									<settlement>Guangzhou</settlement>
									<country key="CN">P. R. China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Feng</forename><surname>Li</surname></persName>
							<email>fengli@iupui.edu</email>
							<affiliation key="aff0">
								<orgName type="department">College of Computer Science and Electronic Engineering</orgName>
								<orgName type="institution">Hunan University</orgName>
								<address>
									<settlement>Changsha</settlement>
								</address>
							</affiliation>
							<affiliation key="aff3">
								<orgName type="department">Department of Computer and Information Technology</orgName>
								<orgName type="institution">Indiana University-Purdue University Indianapolis</orgName>
								<address>
									<postCode>46202-5160</postCode>
									<settlement>Indianapolis</settlement>
									<region>IN</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Shuhui</forename><surname>Yang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">College of Computer Science and Electronic Engineering</orgName>
								<orgName type="institution">Hunan University</orgName>
								<address>
									<settlement>Changsha</settlement>
								</address>
							</affiliation>
							<affiliation key="aff4">
								<orgName type="department" key="dep1">Department of Math</orgName>
								<orgName type="department" key="dep2">Computer Science, and Statistics</orgName>
								<orgName type="institution">Purdue University Calumet</orgName>
								<address>
									<postCode>46323</postCode>
									<settlement>Hammond</settlement>
									<region>IN</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Ieee</forename><surname>Member</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">College of Computer Science and Electronic Engineering</orgName>
								<orgName type="institution">Hunan University</orgName>
								<address>
									<settlement>Changsha</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Jie</forename><surname>Wu</surname></persName>
							<email>jiewu@temple.edu</email>
							<affiliation key="aff0">
								<orgName type="department">College of Computer Science and Electronic Engineering</orgName>
								<orgName type="institution">Hunan University</orgName>
								<address>
									<settlement>Changsha</settlement>
								</address>
							</affiliation>
							<affiliation key="aff5">
								<orgName type="department">Department of Computer and Information Sciences</orgName>
								<orgName type="institution">Temple University</orgName>
								<address>
									<postCode>19122</postCode>
									<settlement>Philadelphia</settlement>
									<region>PA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Ieee</forename><surname>Fellow</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">College of Computer Science and Electronic Engineering</orgName>
								<orgName type="institution">Hunan University</orgName>
								<address>
									<settlement>Changsha</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Preserving Privacy with Probabilistic Indistinguishability in Weighted Social Networks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">DFB574AC2DF2CF9BE3B62E8FB26D2ECB</idno>
					<idno type="DOI">10.1109/TPDS.2016.2615020</idno>
					<note type="submission">This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TPDS.2016.2615020, IEEE Transactions on Parallel and Distributed Systems This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TPDS.2016.2615020, IEEE Transactions on Parallel and Distributed Systems</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T10:06+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>weighted social networks</term>
					<term>weighted 1*-neighborhood attack</term>
					<term>probabilistic indistinguishability</term>
					<term>privacy</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The increasing popularity of social networks has inspired recent research to explore social graphs for marketing and data mining. As social networks often contain sensitive information about individuals, preserving privacy when publishing social graphs becomes an important issue. In this paper, we consider the identity disclosure problem in releasing weighted social graphs. We identify weighted 1*-neighborhood attacks, which assume that an attacker has knowledge about not only a target's one-hop neighbors and connections between them (1-neighborhood graph), but also related node degrees and edge weights. With this information, an attacker may re-identify a target with high confidence, even if any node's 1-neighborhood graph is isomorphic with k -1 other nodes' graphs. To counter this attack while preserving high utility of the published graph, we define a key privacy property, probabilistic indistinguishability, and propose a heuristic indistinguishable group anonymization (HIGA) scheme to anonymize a weighted social graph with such a property. Extensive experiments on both real and synthetic data sets illustrate the effectiveness and efficiency of the proposed scheme.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>The increasing popularity of social networks has stimulated recent research to explore social graph data to understand its structure, advertising and marketing, and data mining. Social networks model social relationships with a graph structure using nodes and edges, where nodes model individual social actors in a network and edges model relationships between social actors. Therefore, publishing the original social network data directly may compromise individuals' privacy, resulting in unacceptable consequences.</p><p>A na√Øve anonymization approach to preserving individuals' privacy simply involves removing nodes' identities before publishing. However, recent studies have shown that an attacker that has background knowledge about a target's degree <ref type="bibr" target="#b0">[1]</ref>, neighbors <ref type="bibr" target="#b1">[2]</ref>, or subgraphs <ref type="bibr" target="#b2">[3]</ref> can still re-identify the target with high confidence. For example, Zhou et. al. <ref type="bibr" target="#b1">[2]</ref> defined a 1-neighborhood graph as an individual's onehop neighbors and the connections between them, and also identified 1-neighborhood attacks, which allow an attacker with knowledge of an individual's unique 1-neighborhood graph to re-identify the target from a na√Øvely anonymized social network. To resist reidentification attacks, the mechanism of k-anonymity was adopted by ensuring that each node is indistinguishable from at least k -1 others. For example, in a k-neighbor-anonymous social network <ref type="bibr" target="#b1">[2]</ref>, each node's 1-neighborhood graph is isomorphic to at least k -1 other nodes' graphs.</p><p>However, existing research is mainly concerned with anonymizing unweighted graphs. In practice, many social networks are intrinsically weighted, where the edges have different strengths denoting the affinity between nodes. From both theoretical and practical viewpoints, weighted graphs provide more unique structural information than unweighted graphs, thereby increasing the risk of identity disclosure.</p><p>In this paper, we concentrate on publishing weighted social networks in a privacy preserving way. We first identify a weighted 1*-neighborhood attack. In addition to the target's 1-neighborhood graph, we assume that an attacker has knowledge about the degree of each one-hop neighbor and the weight on each edge of the 1-neighborhood graph. We call this kind of information the weighted 1*-neighborhood graph, which provides richer background knowledge about the target. Thus, a k-neighbor-anonymous social network still suffers from weighted 1*-neighborhood attacks.</p><p>To illustrate this, let us consider a subgraph extracted from a weighted social network, actor, as shown in Fig. <ref type="figure" target="#fig_0">1-(a)</ref>, where a node denotes an actor, an edge that links two actors denotes previous cooperation between the two in a movie, and the weight on the edge denotes the amount of cooperation between the two actors. Fig. <ref type="figure" target="#fig_0">1-(c</ref>) is a na√Øvely anonymized social network, where node identity is replaced by a random number. If the attacker knows that Bob has co-stared with Alice, Clark, Donland, and Harry and that there have been cooperations between Alice and Clark as well as between Donland and Harry, then Bob's 1-neighborhood graph is exposed. The attacker can re-identify Bob from Fig. <ref type="figure" target="#fig_0">1-(c)</ref>, where only v 2 ' neighborhood matches Bob's information. By adding an edge between nodes v 5 and v 6 with the weight of value 1, we have a 2-neighbor-anonymous social network, as shown in Fig. <ref type="figure" target="#fig_0">1-(d)</ref>, where nodes {v 2 , v 1 }, {v 4 , v 8 }, and {v 3 , v 5 , v 6 , v 7 } have isomorphic 1-neighborhood graphs. If an attacker knows only Bob's 1-neighborhood graph, he cannot distinguish Bob from nodes {v 2 , v 1 }. However, if the attacker knows that Bob has co-stared with Donland four times and that Donland has cooperated with three actors, Bob's weighted 1*-neighborhood graph (Fig. <ref type="figure" target="#fig_0">1-(b)</ref>) is partially exposed, and Bob can be re-identified from Fig. <ref type="figure" target="#fig_0">1-(d)</ref> with probability 1.</p><p>To resist the weighted 1*-neighborhood attack, we can simply remove all weight information and add more edges to make neighbors' degrees isomorphic. However, the utility of the social network will be largely reduced. For example, the trivial solution disables aggregate queries on the social network, such as the average number of cooperations between actors. To permit useful analysis on the social networks while preserving the privacy of the social actors involved, we define a key privacy property, probabilistic indistinguishability, for a weighted social network. To generate an anonymized social network with such a property, we propose a heuristic indistinguishable group anonymization (HIGA) scheme.</p><p>Our basic idea consists of four main steps: 1)</p><p>Node Grouping groups nodes whose weighted 1*neighborhood graphs satisfy certain metrics together and provides a combination and splitting mechanism so that each group has an appropriate size; 2) Approximate Matching Test determines whether the weighted 1*-neighborhood graphs of any pair of nodes in a group are approximately matching or not, by random-walk-based structural similarity measurement and weight compatibility measurement; 3) Group Anonymization utilizes the Graph Approach and Weight Generalization algorithms so that a group of nodes' weighted 1*-neighborhood graphs have similar structures and compatible weights; 4) Randomization randomly modifies the graph structure with a certain probability to ensure that each weighted 1*neighborhood graph has a certain probability of being different from the original one. Steps 1 through 3 enable all nodes in the network to be classified into multiple groups, where a group of nodes' graphs are exactly similar. After Step 4, the nodes in a group still have similar graphs, which have a high probability of deviating from the original structure. In each group from the current weighted 1*-neighborhood graphs of any pair of nodes, the attacker cannot decide whether or not the nodes have the same graphs that they had in the original graph, achieving probabilistic indistinguishability. Our contributions are threefold: 1) We identify a novel weighted 1*-neighborhood attack for publishing privacy preserving weighted social graphs with high utility. 2) We define the probabilistic indistinguishability property for a weighted social network, and we propose a heuristic indistinguishable group anonymization scheme (HIGA) to generate social networks with this privacy property. 3) We conduct experiments on both synthetic and real data sets to verify the effectiveness of the proposed scheme.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">PRELIMINARIES</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Definitions and Notations</head><p>In this paper, a social network is modeled as an undirected and weighted graph G = (V, E, W), where V is a set of nodes, E is a set of edges, and W is a set of weights on the edges. The node identities are anonymized with random numbers. The cardinalities of V and E, ||V|| and ||E||, denote the number of nodes and edges in G, respectively. We assume that ||V|| = n and ||E|| = m. The nodes of the graph, V = {v 1 , v 2 , . . . , v n }, denote meaningful entities from the real world such as individuals, organizations, communities and so on. e i,j ‚àà E is an edge between nodes v i , v j ‚àà V, denoting the relationship between a pair of nodes, such as friendship, partnership, coauthorship, and so on. Each edge e i,j is associated with a weight w i,j ‚àà W which denotes the affinity between nodes v i and v j such as the communication frequency between individuals, the similarity between two communities, and so on. We assume that the attacker has certain background knowledge about the target and that he tries to reidentify the target by analyzing the published social network. To protect the social actors in the network from the re-identification attacks, the social network graph G will be anonymized to G ‚Ä≤ = (V ‚Ä≤ , E ‚Ä≤ , W ‚Ä≤ ) before publishing. As in <ref type="bibr" target="#b1">[2]</ref>, we assume ||V|| = ||V ‚Ä≤ || to preserve the global structure of the social network. As in previous work <ref type="bibr" target="#b3">[4]</ref>, we assume that edge addition and edge deletion are allowed for generating G ‚Ä≤ .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Background Knowledge</head><p>We assume that an attacker may have background knowledge about the weighed 1*-neighborhood graphs of some targets. Following the work in <ref type="bibr" target="#b1">[2]</ref>, we provide the following definitions:</p><formula xml:id="formula_0">1-Neighborhood Graph. G(v) = (V (v), E(v)), where V (v) = v ‚à™ {u|e v,u ‚àà E}, and E(v) = {e w,u |w, u ‚àà V (v) ‚àß e w,u ‚àà E}. Weighted 1*-Neighborhood Graph. G * (v) = (G(v), D(v), W (v)), where G(v) is node v's 1-neighborhood graph, D(v) = [dv 1 , . . . , dv ||V (v)|| ]</formula><p>is the degree sequence with dv i denoting the degree of the i-th node in V (v), and</p><formula xml:id="formula_1">W (v) = [w 1 , . . . , w ||E(v)|| ]</formula><p>is the weight sequence with w j denoting the weight on the j-th edge in E(v).</p><p>We focus on the weighted 1*-neighborhood attack since it tends to be much more difficult for an attacker to collect information beyond a one-hop neighborhood <ref type="bibr" target="#b1">[2]</ref>. The reason is that the diameter of social networks is small due to the small-world characteristic. Therefore, the attacker has to collect information about many nodes to initiate d-neighborhood attacks, for d &gt; 1. It is worth noticing that socialbots <ref type="bibr" target="#b4">[5]</ref> can be used as a tool to harvest private user data. The countermeasures proposed in <ref type="bibr" target="#b4">[5]</ref> can be employed to alleviate this situation. Furthermore, the detailed neighborhood information about a target's directed neighbors is more difficult to collect than their degree information. For example, it may be easy to know that Bob has a very close friend Alice, who has 100 friends, but it is hard to know detailed information, e.g., ID, or age, regarding these 100 friends.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Random-Walk-Based Similarity Measurement</head><p>Inspired by the work in <ref type="bibr" target="#b5">[6]</ref>, we use random walk (R-W) <ref type="bibr" target="#b6">[7]</ref> as a tool for structural similarity measurement. The basic idea is to perform RW on two graphs to obtain the steady state distribution (topological signature) for each graph. Then, we calculate the distance between topological signatures and determine that two graphs are approximately matching when the distance is smaller than a threshold value.</p><p>Specifically, consider graph G = (V, E), where V = {v 1 , . . . , v n }. A RW on G allows the probability p v (t) of v, located at time t, to be computed with Eq. 1:</p><formula xml:id="formula_2">p v (t) = ‚àë u‚ààV p(v|u, j) ‚Ä¢ (1 -df ) ‚Ä¢ p u (t -1) + ‚àë u‚ààN (v) p(v|u, l) ‚Ä¢ df ‚Ä¢ p u (t -1)<label>(1)</label></formula><p>where N (v) denotes the one-hop neighbors of node v ‚àà V, df is the damping factor which defines the probability of directly jumping or traverse, and p(v|u, j) and p(v|u, l) are the probabilities of moving from u to v by performing jumping or by traversing the edge e u,v , respectively, under the requirements of ‚àÄu ‚àà V, ‚àë v‚ààV p(v|u, j) = 1 and ‚àë v‚ààN (u) p(v|u, l) = 1. In an unlabeled graph, we select the node for a jump over all n nodes in the graph, and for a traversing over all one-hop neighbors, with a uniform probability distribution. Therefore, p(v|u, j) = 1/n and p(v|u, l) = 1/||N (u)||. In a labeled graph, we define the tendency of following an edge and jumping from node u to node v as functions f l and f j of two nodes labeled L u and L v , respectively. The above tendency functions can be normalized with Eq. 2:</p><formula xml:id="formula_3">p(v|u, l) = f l (L v , L u ) ‚àë œâ‚ààN (u) f l (L œâ , L u ) ; p(v|u, j) = f j (L v , L u ) ‚àë œâ‚ààV f j (L œâ , L u )<label>(2)</label></formula><p>The probability distribution on all nodes in G, denoted as a vector p(t) = [p v1 (t), . . . , p vn (t)], can be described in matrix form as:</p><formula xml:id="formula_4">p(t) = (Œ£ ‚Ä¢ D j ) ‚Ä≤ p(t -1) + (‚àÜ ‚Ä¢ D l ) ‚Ä≤ p(t -1) (3)</formula><p>where Œ£, ‚àÜ are n√ón matrices collecting the probabilities p(u|v, j) and p(u|v, l), respectively, and D j , D l are n √ó n diagonal matrices, with diagonal values (1 -df ) and df , respectively. The entry (u, v) of matrix ‚àÜ is not null only when the corresponding entry of the graph adjacency matrix A is equal to 1, i.e., if the nodes u and v are linked by an edge e u,v .</p><p>By defining the transition matrix as T = (Œ£ ‚Ä¢ D j + ‚àÜ‚Ä¢D l ) ‚Ä≤ , Eq. 3 can be written as Eq. 4. The signature of the graph is obtained by considering the steady state distribution p ‚ãÜ of the Markov chain defined in Eq. 4.</p><formula xml:id="formula_5">p(t) = T ‚Ä¢ p(t -1)<label>(4)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">PROBLEM FORMULATION</head><p>To preserve identity privacy, previous research advocated k-anonymity, where any node is isomorphic with at least k -1 others. In many cases, isomorphism is a strong condition that is not necessary for anonymizing the graph. In this paper, we define the concept of probabilistic indistinguishability, which can preserve privacy with a lower information loss. Let G * (u) and G ‚Ä≤ * (u) denote the weighted 1*neighborhood graph of node u in the original social network G and in the anonymized social network G ‚Ä≤ , respectively. Probabilistic indistinguishability can be defined in a hierarchical way as follows: Node Indistinguishability. Nodes u and v are indistinguishable if an observer cannot decide whether or not</p><formula xml:id="formula_6">G * (u) Ã∏ = G * (v) in the original graph G, by comparing G ‚Ä≤ * (u) and G ‚Ä≤ * (v) in an anonymized graph G ‚Ä≤ .</formula><p>Here, "cannot decide" means that the observer's confidence level will be below a pre-determined threshold. In our scheme, we achieve node indistinguishability by introducing randomness into the published graph. If there is no limit on the randomness, node indistinguishability is easily achieved. However, we hope to preserve the usability and utility of the published graph and hence, we need to minimize the information loss. Thus, we need to have a more sophisticated design. Group Indistinguishability. For a group of nodes, The information loss is a critical measure in quantifying the utility and usability of an anonymized graph, which will be discussed in Section 7.2. Let C G‚ÜíG ‚Ä≤ denote the information loss incurred in our HIGA scheme. We formally define the probabilistic indistinguishability problem as follows:</p><formula xml:id="formula_7">g = {v|v ‚àà V ‚Ä≤ }</formula><p>The probabilistic indistinguishability problem. Given a network graph G = (V, E, W) and a positive integer k, derive an anonymized graph G ‚Ä≤ = (V ‚Ä≤ , E ‚Ä≤ , W ‚Ä≤ ) to be published, such that <ref type="bibr" target="#b0">(1)</ref> </p><formula xml:id="formula_8">||V|| = ||V ‚Ä≤ ||; (2) G ‚Ä≤ is probabilistically indistinguishable with respect to G; (3) the anonymization from G to G ‚Ä≤ has minimal information loss C G‚ÜíG ‚Ä≤ .</formula><p>The problem of generating a k-neighbor-anonymous graph is NP-hard <ref type="bibr" target="#b1">[2]</ref>. The proof lies in reducing the k-Dimensional Perfect Matching problem <ref type="bibr" target="#b7">[8]</ref>. The unweighted graph is a special case of the weighted graph. Therefore, the problem of generating a weighted social network with the above properties is NP-hard.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">NODE GROUPING</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Group Formation</head><p>For a given weighted graph G = (V, E, W), we group nodes {v} ‚àà V by using the following metrics: ||V (v)||, ||E(v)||, local clustering coefficient, in-degree sequence, out-degree sequence, and weight volume. Here, ||V (v)|| and ||E(v)|| denote the numbers of nodes and edges in G * (v), respectively. The definitions for the other metrics are provided as follows:</p><formula xml:id="formula_9">Local clustering coefficient. C v = Œª G (v)/œÑ G (v)</formula><p>, where Œª G (v) and œÑ G (v) are the numbers of triangles and triples in G * (v), respectively. Thus, C v is the proportion of edges between the nodes within v's direct neighbourhood divided by the number of edges that may exist between them. In-degree sequence.</p><formula xml:id="formula_10">I v = {E + u } u‚ààV (v)</formula><p>, where E + u is the in-degree of node u ‚àà V (v) denoting the number of edges connected between u and the nodes in G * (v). Out-degree sequence.</p><formula xml:id="formula_11">O v = {E - u } u‚ààV (v)</formula><p>, where E - u is the out-degree of node u ‚àà V (v) denoting the number of edges connected between u and the nodes outside</p><formula xml:id="formula_12">G * (v). Weight volume. W V v = ‚àë w‚ààW (v)</formula><p>w, where W V v is the sum of the weights on the edges in G * (v).</p><p>We group nodes together if</p><formula xml:id="formula_13">||V (v)||, ||E(v)||, C v , I v ,</formula><p>and O v are equal and the differences of their weight volumes are within a pre-defined scope in their weighted 1*-neighborhood graphs. To test the effectiveness of the above metrics, we use Barab√°si-Albert (B-A) algorithm <ref type="bibr" target="#b8">[9]</ref> to generate synthetic data sets. Then, we use the above metrics to classify nodes into groups and calculate the percentage of graphs that are isomorphic in a group. In Table <ref type="table" target="#tab_1">1</ref>, for a social network with 5, 000 nodes and 9, 988 edges, the percentage of isomorphic weighted 1*neighborhood graphs is about 75%. As the scale of the social networks increases to 10, 000 nodes and 19, 993 edges, this percentage increases to 79%. Therefore, these metrics are helpful for grouping.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Group Reshaping</head><p>Although the Group Formulation process groups the nodes with similar weighted 1*-neighborhood graphs together, not all groups have a size greater than or equal to k. In reality, during the empirical study, we find that the group size also follows the powerlaw distribution: most groups contain only one or two members, and a small number of the groups have thousands of members. Therefore, we provide a Group Reshaping mechanism so that each group has an appropriate size, e.g., <ref type="bibr">[k, 2k)</ref>.</p><p>The Group Reshaping mechanism can be classified in two main steps: Group Combination and Group Splitting. Group Combination first sorts groups in descending order of the maximal node degree of the group members. The sorted groups are denoted as g 1  1 , g 1 2 , . . . , g 1 M1 . For each group g 1 i of a size smaller than k, we incorporate the members in g 1 i into g 1 i+1 directly. Therefore, after the Group Combination step, all groups will have a size larger than k. Suppose that there are M 2 groups after combination, denoted as g 2 1 , . . . , g 2 M2 . Then, we perform the Group Splitting step to enable each group to have [k, 2k) members as follows: For each group g 2 i of size larger than 2k, we choose c = ‚åà||g 2 i ||/k‚åâ nodes in g 2 i as the group seeds, denoted as s 1 , . . . , s c . The candidate member set, CM S, consists of all the members in g 2 i except for the c seeds. For each seed s j , we construct a former member set from CM S, denoted as F M S j , recording s j 's group members before combination. Then, we classify nodes in CM S that are far from the seed in one group, so that the modification of a node's</p><formula xml:id="formula_14">Algorithm 1 Structure Similarity Measurement Input: G * (u), G * (v), DF = [df 1 , . . . , df N ] OutPut: cost( G(u) * , G(v) * ) 1: Construct structure graphs G(u) * and G(v) * 2: for each node œâ ‚àà V (u) and ¬µ ‚àà V (v) do 3:</formula><p>Calculate Eq. 4 for the steady states of œâ,</p><formula xml:id="formula_15">p ‚ãÜ œâ = [p ‚ãÜ œâ (df 1 ), . . . , p ‚ãÜ œâ (df N )], in G(u) * , and ¬µ, p ‚ãÜ ¬µ = [p ‚ãÜ ¬µ (df 1 ), . . . , p ‚ãÜ ¬µ (df N )], in G(v) *</formula><p>, under different damping factors, respectively 4: Construct bipartite graph G B 5: Find the optimal matching of G B 6: Calculate the cost of optimal matching with Eq. 6 weighted 1*-neighborhood graph has less impact on other nodes' graphs in a group, thereby reducing the information loss during anonymization.</p><p>Specifically, for seed s j , we preferentially choose group members from F M S j , then from CM S, since the nodes in F M S j are most similar to s j . In each selection, we first calculate the penalty for selecting node v as follows: 1) P T = 0 if v is not the neighbor of existing group members; 2) P T = 1 if v is not the neighbor of the seed; 3) P T = IN F if v is the neighbor of the seed. Then, we choose the node with the minimal penalty as the group member, and we remove it from CM S and from related F M Ss. The main idea is based on the classical heuristic clustering algorithm, K-means <ref type="bibr" target="#b9">[10]</ref>. This process will be run for multiple rounds and in each round, the sum of the penalties will be recorded. At the end of this algorithm, the optimal result, g 1 , . . . , g M , will be the output.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">APPROXIMATE MATCHING TEST</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Structure Similarity Measurement</head><p>Alg. 1 determines whether the structures of two nodes' weighted 1*-neighborhood graphs are similar</p><formula xml:id="formula_16">or not. Let G * (u) = (G(u), D(u), W (u)) and G * (v) = (G(v), D(v), W (v)</formula><p>) be the weighted 1-*neighborhood graphs of nodes u and v in graph G, respectively. The first step is to construct the structure graphs for nodes u and v. Specifically, for node u, the structure graph G(u) * is first initialized with its 1-neighborhood graphs G(u). Then, for each of u's one-hop neighbors, œâ, we add o uœâ dummy nodes to G(u) * and add edges between œâ with all the dummy nodes, where o uœâ is the out-degree of œâ. For example, for a given weighted 1*-neighborhood graph as shown in Fig. <ref type="figure" target="#fig_0">1-(b)</ref>, the structure graph is shown in Fig. <ref type="figure" target="#fig_1">2-(a)</ref>.</p><p>We label non-dummy nodes and dummy nodes with L and L, respectively. Then, we provide the tendency functions {f l (L u , L v )} and {f j (L u , L v )}, where L u , L v ‚àà { L, L}. The probabilities of following an edge or jumping from node u with L u to node v with L v can be calculated with Eq. 2. For each nondummy node œâ ‚àà G(u) * , we obtain its topological We first add virtual nodes to the structure graph with a smaller node cardinality so that two graphs have equal numbers of nodes. Then, we create a bipartite graph</p><formula xml:id="formula_17">G B = (V B , E B ) by setting V B = V (u) ‚à™ V (v) and E B = V (u) √ó V (v). A cost(œâ, ¬µ) is associated with the edge e œâ,¬µ to represent the cost of matching nodes œâ ‚àà V (u) and ¬µ ‚àà V (v). A match in G B is a set of edges E ‚ãÑ ‚äÜ E B such</formula><p>that each node is associated with only one edge. The cost of matching is the sum of the cost of edges in E ‚ãÑ . An optimal match will cause the minimum cost match in G B under the constraint that node u is matched with node v. We apply the Monte-Carlo algorithm <ref type="bibr" target="#b10">[11]</ref> to determine the optimal matching on a bipartite graph in polynomial time.</p><p>The cost function will impact the result of the optimal match. Let V denote a set of virtual nodes. If either œâ or ¬µ is a virtual node, cost(œâ, ¬µ) is set to a fixed value Œ≤. If œâ, ¬µ Ã∏ ‚àà V, the cost function can be defined as the Hellinger Distance between probability distributions p ‚ãÜ œâ and p ‚ãÜ ¬µ with Eq. 5:</p><formula xml:id="formula_18">H(p ‚ãÜ œâ , p ‚ãÜ ¬µ ) = 1 2 N ‚àë i=1 ( ‚àö p ‚ãÜ œâ (df i ) - ‚àö p ‚ãÜ ¬µ (df i )) 2<label>(5)</label></formula><p>Therefore, the cost of matching the bipartite graph, which is the sum of the costs of matching all nodes in V (u) and V (v), can be calculated with Eq. 6:</p><formula xml:id="formula_19">cost( G(u) * , G(v) * ) = ‚àë œâ,¬µÃ∏ ‚ààV H(p ‚ãÜ w , p ‚ãÜ ¬µ ) + (||V|| ‚Ä¢ Œ≤) (6)</formula><p>For example, given the topological signatures as shown in Fig. <ref type="figure" target="#fig_1">2</ref>, the cost for matching nodes v 1 and</p><formula xml:id="formula_20">v 6 is H(p ‚ãÜ v1 , p ‚ãÜ v6 ) = 0.5(( ‚àö 0.242- ‚àö 0.294) 2 +( ‚àö 0.268- ‚àö 0.324) 2 + ( ‚àö 0.294 - ‚àö 0.354) 2 ) = 0.</formula><p>004. Structure Similarity. For a given threshold Œ±, two nodes u and v are structurally similar if an optimal bipartite graph matching exists between V (u) and</p><formula xml:id="formula_21">V (v), such that cost( G(u) * , G(v) * ) ‚â§ Œ±.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Weight Compatibility</head><p>The weight on an edge may be a concrete value or a range. Let w i denote the value of weight on the i-th edge. We consider w i compatible with w j , denoted as w i ‚âº w j , if w i == w j or w i ‚äÜ w j . For example, if w 1 = 1, w 2 = 1, and</p><formula xml:id="formula_22">w 3 = [1, 5], we have w 1 ‚âº w 2 , w 2 ‚âº w 1 , w 1 ‚âº w 3 , and w 2 ‚âº w 3 . Let G * (v) = (G(v), D(v), W (v)) and G ‚Ä≤ * (v) = (G ‚Ä≤ (v), D ‚Ä≤ (v), W ‚Ä≤ (v))</formula><p>be node v's weighted 1-*neighborhood graphs in the original graph G and the published graph G ‚Ä≤ , respectively. Inspired by the work in <ref type="bibr" target="#b11">[12]</ref>, <ref type="bibr" target="#b12">[13]</ref>, we provide the following definitions:</p><formula xml:id="formula_23">Possible Candidate. G * (u) is a possible candidate of G ‚Ä≤ * (v) if there is a mapping œï : E(u) ‚Üí E ‚Ä≤ (v) ‚à™ ‚àÖ, such that either e œâ,x ‚àà E(u) is mapped to ‚àÖ or e œâ,x ‚àà E(u) is mapped to e ¬µ,y ‚àà E ‚Ä≤ (v) and w œâ,x ‚âº w ¬µ,y , where E(u) ‚àà G(u) and E ‚Ä≤ (v) ‚àà G ‚Ä≤ (v).</formula><p>For example, the weight sequences of </p><formula xml:id="formula_24">G * (u), G ‚Ä≤ * (u), G ‚Ä≤ * (v) are [4, 2, 2, 1, 1, 2], [[2, 4], 2, [2, 3], 1, 1, [1, 3]], and [[2, 4], 2, [2, 3], [1, 3], 1] in Fig. 3, respectively . For G * (u) and G ‚Ä≤ * (u), we have 4 ‚âº [2, 4], 2 ‚âº 2, 2 ‚âº [2, 3], 1 ‚âº 1, 1 ‚âº 1,</formula><formula xml:id="formula_25">v in graph G ‚Ä≤ , if G * (u) and G * (v) in G are possible candidates of G ‚Ä≤ * (u) and G ‚Ä≤ * (v) in G ‚Ä≤ .</formula><p>For example, in Fig. <ref type="figure" target="#fig_2">3</ref>, G * (u) is a possible candidate of G ‚Ä≤ * (u) and G ‚Ä≤ * (v), and G * (v) is also a possible candidate of G ‚Ä≤ * (u) and G ‚Ä≤ * (v). Therefore, nodes u and v are weight compatible.</p><p>Given a pair of nodes u and v, we define that they are approximately matching as follows: Approximate matching. Node u and node v are approximately matching, denoted as u ‚âà v, if they are structurally similar and weight compatible.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">ANONYMIZATION AND RANDOMIZATION</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Group Anonymization</head><p>Suppose that there are M groups, g 1 , . . . , g M , where each group has about [k, 2k) members. In Alg. 2, the candidate group set (CGS) initially consists of M groups, and the processed group set (P GS) is null. We sort groups in descending order of the maximal node degree in a group, and pick the first one as the processing group, denoted as g. For each pair of nodes in g, we call Alg. 1 to test whether they are Algorithm 2 Group Anonymization Input: G = g 1 , . . . , g M OutPut: G = g 1 , . . . , g M 1: Initialize g 1 , . . . , g M with g 1 , . . . , g M , respectively 2: Sort g 1 , . . . , g M with descending order of the maximal node degree of group members 3: Set CGS = { g 1 , . . . , g M } and P GS = {} 4: while CGS is not empty do Choose node u ‚àà g with the maximal degree as the group seed 10:</p><formula xml:id="formula_26">for each node v ‚àà g do 11: if cost( G(u) * , G(v) * ) ‚â• Œ± then 12: Call Alg. 3 to approach G(v) * to G(u) * 13:</formula><p>until all nodes in g are structurally similar 14:</p><p>Call Alg. 4 to generalize the weights in g 15:</p><p>Move g from CGS to P GS structurally similar. If not all nodes are indistinguishable from each other, we choose the node with the maximal degree, say node u, as the group seed. Then, for the node v ‚àà g with cost( G(u) * , G(v) * ) ‚â• Œ±, we call the Graph Approach algorithm (Alg. 3) to make G * (u) and G * (v) structurally approach each other. This process will continue until any pair of nodes are structurally similar. For a group of structurally similar nodes, we use the Weight Generalization algorithm (Alg. 4) to make all nodes in a group have compatible weights. Finally, we move g from CGS to P GS.</p><p>Given a pair of nodes u and v, Alg. 3 approaches G(v) * to G(u) * as follows. For each pair of optimal matching nodes œâ ‚àà V (u) and ¬µ ‚àà V (v) if cost(œâ, ¬µ) ‚â• Œ∏, we make their out-degree equal by adding edges between dummy nodes and the node with a smaller out-degree and setting the weights as ‚àû. Then, for each edge e œâ,x ‚àà E(u), if e ¬µ,y Ã∏ ‚àà E(v), we add an edge between nodes ¬µ and y and set w ¬µ,y = w œâ,x , where ¬µ, y ‚àà V (v) are the optimal matching nodes of œâ, x ‚àà V (u). During the approaching process, new edges will be added between the nodes in G * (v) and those not in G * (v). Specifically, the node with the minimal degree will be chosen provided that it is not a member in g and no edge existed before. Furthermore, nodes will be preferentially chosen first from CGS and then from P GS. The anonymization process may be recursive, since some changes may impact the groups that have been processed previously. For example, if the dummy nodes are chosen from P GS, related groups must be moved to CGS. However, due to the power-law degree distribution and the small world phenomenon, this process will rapidly stop.</p><p>Alg. 4 ensures that the graphs of nodes with similar structures have compatible weights. We choose a node Algorithm 3 Graph Approach 1: Obtain the optimal matching of G(u) * and G(v) * 2: for each pair of optimal matching nodes œâ ‚àà V (u)</p><p>and ¬µ ‚àà V (v) do</p><formula xml:id="formula_27">3: if cost(œâ, ¬µ) ‚â• Œ∏ then 4:</formula><p>Make the out-degrees of œâ and ¬µ equal 5:</p><p>Set the weights on newly added edges as ‚àû 6:</p><p>for each edge e œâ,x ‚àà E(u) do 7:</p><p>if edge e ¬µ,y Ã∏ ‚àà E(v), where ¬µ, y ‚àà V (v) are the optimal matching nodes of œâ, x ‚àà V (u) then 8:</p><p>Add edge e ¬µ,y in E(v), set w ¬µ,y = w œâ,x with the maximal degree, say node u, as the group seed. Then, for each edge e œâ,x in G(u) * , we find the optimal matching nodes of nodes œâ, x in other nodes' structure graphs. Let œâ i , x i denote the optimal matching nodes of œâ, x in the i-th member of g. If e œâi,xi exists, we set</p><formula xml:id="formula_28">w œâi,xi = [min({w œâi,xi }), max({w œâi,xi })].</formula><p>Note that an edge occurring in multiple nodes' weighted 1*neighborhood graphs would be generalized multiple times with different range values. We choose the extended range as the result. For example, if w u,v is generalized to <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2]</ref> and <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3]</ref> in G * (u) and G * (v), respectively, we extend w u,v to <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b2">3]</ref>. Furthermore, for a given weight value w ‚â• 0, we have min(w, ‚àû) ‚â° max(w, ‚àû) ‚â° w and min(‚àû, ‚àû) ‚â° max(‚àû, ‚àû) ‚â° ‚àû.</p><p>After the Group Anonymization step, we find that the weights on a fraction of edges are not processed. For edge e u,v with weight value ‚àû, we first set w u,v = SP W (u, v), where SP W (u, v) is the sum of weights on the shortest path from node u to node v in G, and then generalize w u,v with the Weight Generalization algorithm. This enables the anonymized graph to have a weight distribution close to the original graph for t-closeness. Fig. <ref type="figure" target="#fig_6">4</ref> shows the working process of the Graph Approach and Weight Generalization. The optimal matching node pairs for graphs G * (u) and G * (v) include ‚ü®v 1 , v 6 ‚ü©, ‚ü®v 2 , v 7 ‚ü©, ‚ü®v 3 , v 8 ‚ü©, ‚ü®v 4 , v 9 ‚ü©, ‚ü®v 5 , v 10 ‚ü©. For example, in Fig. <ref type="figure" target="#fig_6">4-(b</ref>), the out-degrees of v 2 and v 7 are 1 and 0, respectively. Therefore, we add one dummy node to v 7 , and set the weight as ‚àû to make two nodes have equal out-degrees. For edge e 4,5 ‚àà G * (u), we find that edge e 9,10 Ã∏ ‚àà G * (v). Therefore, we bridge v 9 and v 10 with the same weight value of e 4,5 , say 2, to make a pair of optimal matching nodes have identical links. In Fig. <ref type="figure" target="#fig_6">4-(c</ref>), the weights on both e 2,3 and e 7,8 are 1, which will be generalized to 1. The weights on e 1,2 ‚àà G * (u) and e 6,7 ‚àà G * (v) are 4 and 2, respectively, which will be generalized to <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b3">4]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Randomization</head><p>Consider a graph G and a randomization probability p. We randomize the graph to generate an anonymized graph G ‚Ä≤ with the edge-based graph Algorithm 4 Weight Generalization 1: Choose node u ‚àà g with the maximal degree as the group seed 2: for each edge (œâ, x) ‚àà G(u) do 3:</p><p>Find optimal matching nodes œâ i and x i of œâ and x in the 1-neighborhood graph of the i-th member of g perturbation strategies <ref type="bibr" target="#b13">[14]</ref>. We first randomly switch a pair of existing edges e œâ,x and e ¬µ,y to e œâ,¬µ and e x,y under the condition that e œâ,¬µ and e x,y do not exist in G. Then, we set w œâ,¬µ = SP W (œâ, ¬µ) and w x,y = SP W (x, y) to make the weight distribution close to the original one, where SP W (x, y) is the sum of weights on the shortest path from x to y in G. This process will repeat ‚åäp * ||E||‚åã times. After the Randomization step, the randomized graph is expected to be different from the original one. The key problem lies in determining p to randomize the graph. As discussed in <ref type="bibr" target="#b14">[15]</ref>, the utility of the social network will be largely reduced when the perturbation rate reaches about 10%. To obtain a reasonable parameter, we conduct experiments in Section 8.1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">ANALYSIS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">Anonymization Strength</head><p>Theorem 1. From the anonymized graph G ‚Ä≤ , an attacker with the knowledge of any target's weighted 1*neighborhood graph cannot re-identify the target with confidence higher than 1/k.</p><p>Proof: The attacker will try to re-identify a target from the published graph G ‚Ä≤ by using the target t's weighted 1*-neighborhood graph G * (t) in the original graph (attacker's knowledge). There are two possible consequences after searching G ‚Ä≤ :</p><p>‚Ä¢ Case 1. The attacker found at least an exact match of the target. ‚Ä¢ Case 2. The attacker cannot find an exact match of the target. Here, we assume an intelligent attacker who knows the uniform random noise probability p. We also assume that the intelligent attacker will not give up, even if the exact match cannot be found.</p><p>For Case 1, after the exact matching, the attacker has two possible strategies: 1. Consider an exact match u as the re-identified target; 2. Consider other nodes as the re-identified target t. The latter strategy will be combined in the discussion of Case 2. Let us first consider Case 1 with the first strategy. Based on the uniform random noise, the probability that the target t's 1*-neighborhood graph G * (t) was not changed is</p><formula xml:id="formula_29">P (G * (u) = G * (t) ‚àß G ‚Ä≤ * (u) = G ‚Ä≤ * (t)) = (1 -p) 2‚Ä¢||E(t)|| .</formula><p>To identify whether or not node u is the target node t, G * (u) is the only subgraph that is of concern, no matter whether G * (u) overlaps with other nodes' 1*neighborhood graphs or not.</p><p>Besides this factor, we also know that the exact match of G * (t) must belong to an indistinguishable group g with ||g|| ‚â• k. For each node v in g, we know that an observer cannot decide whether or not || (otherwise, v and t will violate the indistinguishability requirement in g). Let œÑ = (1 -p) 2‚Ä¢||E(t)|| . Therefore, under Case 1 with the first strategy, the probability that an exact match node u is the correctly identified target t is:</p><formula xml:id="formula_30">G * (v) Ã∏ = G * (t) in the original graph G by comparing G ‚Ä≤ * (v) and G ‚Ä≤ * (t) in G ‚Ä≤ . Therefore, we have P (G * (v) Ã∏ = G * (t) ‚àß G ‚Ä≤ * (v) = G ‚Ä≤ * (t)) ‚â• (1 -p) 2‚Ä¢||E(t)</formula><formula xml:id="formula_31">P (u = t) = œÑ œÑ + ‚àë v‚ààg, vÃ∏ =u P (G * (v) Ã∏ = G * (t) ‚àß G ‚Ä≤ * (v) = G ‚Ä≤ * (t)) Since P (G * (v) Ã∏ = G * (t) ‚àß G ‚Ä≤ * (v) = G ‚Ä≤ * (t)) ‚â• œÑ and ||g|| ‚â• k, it is clear that P (u = t) ‚â§ œÑ /(k ‚Ä¢ œÑ ) = 1/k.</formula><p>Case 2 and the remaining part of Case 1 can be proven in a similar manner. <ref type="bibr" target="#b1">[2]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Corollary 1. The anonymization strength of the heuristically indistinguishable group anonymization scheme ‚â• k-anonymity social network defined in</head><p>Proof: The proof of Corollary 1 is obvious. First, the k-anonymity social network defined in <ref type="bibr" target="#b1">[2]</ref> assumes that the attacker only knows a target's 1neighborhood, which contradicts the reality since the attacker usually collects more information about onehop neighbors than only the connection information between them. With the weighted 1*-neighborhood knowledge, the attacker can further narrow down the target in the blend-in group and re-identify it.</p><p>Second, even if we assume that the k-anonymity social network can be extended to the 1*-neighborhood case (it will significantly increase the information loss due to the exact matching), the k-anonymity social network only guarantees that the attacker cannot identify the target with a confidence higher than 1/k. According to Theorem 1, our scheme will produce equal or greater anonymization strength. Since a group of generalized weights will not provide more useful background knowledge to the attacker, we consider only the unweighed graphs in the above proof.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">Information Loss</head><p>Our solution anonymizes a graph by Graph Approach, Weight Generalization, and Randomization. The entire process requires the addition and deletion of edges and the generalization of weights, and thus will lead to some information loss.</p><p>Consider a weighted social network graph G, where M AXW denotes the maximal weight. Let null denote the weights associated with nonexistent edges. We generalize all operations to weight transformation as follows: (1) edge addition transforms the weight from null to a particular value; (2) edge deletion transforms a particular weight to null; (3) weight generalization transforms a particular weight to an interval. Note that edge addition/deletion not only changes the node degree, but also the related edge weight in G; this incurs more information loss compared with weight generalization on existing edges.</p><p>To capture this concept, the information loss for transforming weight w j to w ‚Ä≤ j can be calculated as:</p><formula xml:id="formula_32">œï(w j , w ‚Ä≤ j ) = { | max w ‚Ä≤ j -min w ‚Ä≤ j | M AXW , w ‚Ä≤ j Ã∏ = null ‚àß w ‚Ä≤ j Ã∏ = null œÅ‚Ä¢DIF F M AXW , otherwise</formula><p>where [max w ‚Ä≤ j , min w ‚Ä≤ j ] denotes the weight interval assigned to related edge in G ‚Ä≤ , and DIF F = max{| max w ‚Ä≤ j -min w ‚Ä≤ j |} w ‚Ä≤ j ‚ààG ‚Ä≤ is the worst-case cost for | max w ‚Ä≤ j -min w ‚Ä≤ j |. When the factor œÅ is larger than 1, the above definition can guarantee that the information loss of generalizing existing edges is less than that of edge addition/deletion.</p><p>To generate an anonymized graph G ‚Ä≤ from G, our scheme first classifies the nodes into M groups, g 1 , . . . , g M . For each group g i , we transfer a set of original weighted 1*-neighborhood graphs</p><formula xml:id="formula_33">{G * (u)|u ‚àà g i } to a set of indistinguishable weighted 1*- neighborhood graphs {G ‚Ä≤ * (u)|u ‚àà g ‚Ä≤ i }. Let L i denote the number of edges in {G * (u)|u ‚àà g i },</formula><p>and let m i and n i denote the number of added edges and removed edges for transforming g i to g ‚Ä≤ i , respectively. The information loss C gi‚Üíg ‚Ä≤ i for transferring g i to g ‚Ä≤ i can be calculated with Eq. 7:</p><formula xml:id="formula_34">C gi‚Üíg ‚Ä≤ i = a mi ‚àë j=1 œï(w j , w ‚Ä≤ j ) L i +b ni ‚àë j=1 œï(w j , w ‚Ä≤ j ) L i +c li ‚àë j=1 œï(w j , w ‚Ä≤ j )</formula><p>L i (7) where l i = L i +m i -n i denotes the number of edges in {G ‚Ä≤ * (u)|u ‚àà g ‚Ä≤ i }, and a, b, and c are the weights associated with each component. Therefore, given M groups, the total information loss for anonymizing G to G ‚Ä≤ is calculated with Eq. 8:  Given the optimal matching of G(v) * and G(u) * , Alg. 3 is very efficient for adding edges between nodes that exist in G(v) * . For adding an edge between the node that exists in G(v) * and that is not in G(v) * , it takes O(||V||) to find the node with the minimal degree in the graph. To ensure a group of nodes have compatible weights, Alg. 4 takes O(√™ ‚Ä¢ k) for weight generalization, where √™ is the maximal number of edges in the group.</p><formula xml:id="formula_35">C G‚ÜíG ‚Ä≤ = ‚àë M i=1 C gi‚Üíg ‚Ä≤ i (<label>8</label></formula><p>Memory complexity. Graph information is recorded in a 3 √ó ||E|| matrix EdgeMatrix. Group Formulation takes EdgeMatrix as the input and outputs the following matrixes: Attribute recording ID, metrics, and group ID for each node, and Neighbor recording neighbor IDs and associated weights for each node. The memory complexity is O(||E|| + ||V|| ‚Ä¢ D) where D is the maximal degree for nodes in G. Group Reshaping takes Attribute and Neighbor as inputs and outputs the following matrixes: GroupInfo recording the size and maximal degree for M group and Group-Member recording the member IDs for M group. The complexity is O(M +M ‚Ä¢k). Moreover, CM S and F M S will be constructed and released in the runtime, the size of which relates to the group size.</p><p>Alg. 2 first uses dynamic arrays to store CGS and P GS, the sizes of which are O(M ). To calculate cost( G(u) * , G(v) * ), it constructs a n √ó n matrix for the random walk and optimal matching of the bipartite graph, where n is the maximal number of nodes in G(u) * and G(u) * . Furthermore, for a group of k nodes, a k 2 √ó D matrix MatchList is constructed to record the optimal matching nodes where D is the maximal node degree in the group. The generated matrixes will be released at the end of operation, and the memory consumed will not increase with time. In Randomization, the Dijkstra algorithm is implemented with the adjacency list, the size of which is O(||V||).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">EVALUATION</head><p>In this section, we will analyze the performance of our HIGA scheme and evaluate it on synthetic and real data sets. Experiments are conducted on a local machine, running the Microsoft Windows 7 Ultimate operating system, with an Intel Core 2 Duo E8400 3.0 GHz CPU and 8 GB RAM. The programs are implemented in C++, compiled using Dev C++ 5.4.0.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.1">Parameter Setting</head><p>Let L and L denote the label associated with nondummy nodes and dummy nodes, respectively. Tendency functions are defined as follows:</p><formula xml:id="formula_36">f l (L u , L v ) = f l (L v , L u ) = 0.5, where L u , L v ‚àà { L, L}; f j (L u , L v ) = 0.</formula><p>95, where L u , L v have the same labels and f j (L u , L v ) = 0.05, where L u , L v have different labels. Furthermore, the damping factors DF = [0.7, 0.8, 0.9], and the parameters a, b, and c in Eq. 7 are set to 0.5, 0.4, and 0.1, respectively. We consider that removing edges will lead to loss of most of the information.</p><p>To obtain a reasonable threshold value Œ± for a given structure graph G(u) * , we first generate a similar graph G(u) ‚Ä≤ by randomly modifying p c percentage of edges in G(u) * . Then, we calculate the cost for optimal matching G(u) * and G(u) ‚Ä≤ . The above process will be conducted for multiple rounds, and the average value is used as the threshold value Œ±. In our experiments, p c is set to 10% and the value of Œ± associated with each node will be dynamically extracted based on different experimental data sets. To obtain a reasonable randomization probability p, we perturb a graph with different p values and calculate the percentage P of structure graphs being changed in the randomized graph. This process will be done multiple times, and the average value will be used to measure the impact of p. Table <ref type="table" target="#tab_3">2</ref> shows the relationship between p and P for real data sets. As shown in Table <ref type="table" target="#tab_5">3</ref>, the average node degrees (AVE) for Facebook, CA-CondMat, Enron, and Douban are 44, 8, 10, and 4.2, respectively. Thus, for a given P , the higher the AVE, the lower p.</p><p>The weights assigned on edges are in <ref type="bibr" target="#b0">[1,</ref><ref type="bibr">80]</ref> following the power-law distribution. To evaluate the utility of the anonymized graph, we test the following metrics: average clustering coefficient (AC- C), degree distribution, weight distribution, minimal/maximal/average degree (MIN/MAX/AVE), average shortest path weight (APW), and average shortest path length (APL). Specifically, the ACC of graph G = (V, E, W) can be calculated as (1/||V||) ‚àë v‚ààV C v , where C v is the local clustering coefficient for node v ‚àà V (defined in Section 4.1). In the anonymized network G ‚Ä≤ , the weight on the edge may be generalized as a range. Therefore, we uniformly sampled from the generalized weight range w u,v in G ‚Ä≤ to denote the weight on edge e u,v for answering APW and APL queries. In the experiments, we randomly choose P = 20, 000 pairs of nodes in the networks based on the sampling algorithms proposed in <ref type="bibr" target="#b15">[16]</ref>. For each pair of nodes u and v, we calculate the shortest paths between them in G and G ‚Ä≤ , denoted as paths path uv and path ‚Ä≤ uv , respectively. The shortest path weight of path uv and path ‚Ä≤ uv , denoted as SP W (u, v) and SP W ‚Ä≤ (u, v), are the sum of weights on the edges in path uv and path ‚Ä≤ uv , respectively. Given P pairs of nodes, we have AP L = (1/P)</p><formula xml:id="formula_37">‚àë P i=1 ||path uivi || and AP W = (1/P) ‚àë P i=1 SP W (u, v)</formula><p>for G, and the anonymized graph can be calculated in the same way.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.2">Synthetic Data Set</head><p>We use the B-A <ref type="bibr" target="#b8">[9]</ref> and R-MAT models <ref type="bibr" target="#b16">[17]</ref> to generate synthetic data sets. Both models maintain two major properties of real social networks: the graphs show small-world characteristics, and node degrees follow power-law distribution <ref type="bibr" target="#b17">[18]</ref>. In our experiments, the generated networks contain n = 5, 000 ‚àº 25, 000 nodes, where the AVE ranges from 4 to 10. To enable the percentage of the modified structure graph to approach 50%, the randomization probability p is set to 0.01 for B-A networks with AVE=4, 0.002 for B-A networks with AVE=10, 0.015 for R-MAT networks with AVE=4, and 0.004 for R-MAT networks with AVE=10.</p><p>The subfigures (a)‚àº(d) in Figs. <ref type="figure" target="#fig_9">5</ref> and<ref type="figure" target="#fig_13">7</ref> show the number of modified edges and running time in our scheme with respect to a different group size, k, and different graph settings. We know that as k or n increases, the number of modified edges as well as the running time increases. Furthermore, our method performs better in R-MAT networks than B-A networks. For example, when k = 5, our scheme takes 513s and changes 2,195 edges for the R-MAT network 2. http://snap.stanford.edu/data/egonets-Facebook.html 3. http://snap.stanford.edu/data/ca-CondMat.html 4. http://snap.stanford.edu/data/email-Enron.html 5. http://socialcomputing.asu.edu/datasets/Douban and takes 3,805s and changes 7,102 edges for the B-A network under the setting of n = 25, 000 and AV E = 4. Figs. <ref type="figure" target="#fig_11">6-(a)‚àº(d)</ref> show the related information loss calculated with Eq. 8. We know that the information loss increases as k increases or as n decreases. In both networks, we observed that our HIGA scheme has a better performance as the AVE increases.</p><p>In the experiments, we found that two major factors impact the ACC: the AVE and the number of nodes n. Actually, the ACC increases as the AVE increases or as n decreases. Furthermore, the performance of our scheme is mainly affected by the AVE and by the number of nodes other than the ACC. For example, given the fixed k = 25 and AV E = 10, the percentage of modified edges decreases from to 14% to 10.7% in B-A networks and from to 6.7% to 3.2% in R-MAT networks while n increases from 5,000 to 25,000 (resp. the ACC decreases from 0.0123 to 0.003 in B-A networks and from 0.0068 to 0.0019 in R-MAT networks). However, Fig. <ref type="figure" target="#fig_9">5-(e)</ref> shows a different trend. Figs. <ref type="figure" target="#fig_13">5‚àº7-(e)</ref> show the impact of the ACC on the performance of our HIGA scheme under the fixed setting of n = 1, 000 and k = 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.3">Real Data Set</head><p>Graph characteristics of the real data sets are shown in Table <ref type="table" target="#tab_3">2</ref>. We group nodes based on certain metrics. In Facebook, nodes are classified in 3,137 groups, where group sizes range from 1 to 43. In CA-Condmat, nodes are classified in 3,439 groups, where group sizes range from 1 to 2,836. In Enron, nodes are classified in 4,333 groups, where group sizes range from 1 to 3,706. In Douban, nodes are classified in 3,585 groups, where group sizes range from 1 to 89,765.</p><p>From Fig. <ref type="figure" target="#fig_16">8</ref>, we know that as k increases, our HIGA scheme performs worse. For example, as k increases from 5 to 25, the information loss in Douban increases from 0.026 to 0.078, and the running time for Enron increases from 1.6h to 4.6h. Facebook and Enron incur a higher growth rate in terms of information loss compared with other real data sets. This is mainly because of the difference between the maximal degree and the minimal degree in the network. As shown in Table <ref type="table" target="#tab_5">3</ref>, the minimal/maximal degrees in Facebook, CA-Condmat, Enron, and Douban are 1/1,045, 1/279, 1/1,383, and 1/287, respectively. Given a network with a bigger degree difference, our method needs to add more edges to ensure a group of nodes have similar 1*-neighborhood graphs. In the worst case, the percentage of modified edges is 23% in Facebook, 7.2% in CA-Condmat, 13.2% in Enron, and 17% in Douban. For the Facebook data set with a small number of nodes and a large degree difference, the percentage of modified edges grows rapidly (from 4% to 23%, as k increases from 5 to 25).</p><p>In addition, our running time grows linearly as the number of nodes/edges increases. For example, while      k = 25, our HIGA scheme will terminate in 491s for Facebook, but it requires 95h for Douban. Therefore, it is essential to improve the efficiency of the implementation for large-scale data sets with millions of nodes and edges. Our basic idea is to utilize the graph partition technique proposed in <ref type="bibr" target="#b18">[19]</ref> to enable parallel graph anonymization <ref type="bibr" target="#b19">[20]</ref>. Specifically, a large-scale graph will be divided into many partitions, each consisting of a set of nodes and the edges in those nodes' 1-neighborhood graphs. Assignment of a node to a partition depends solely on the node ID by computing a partitioning function hash(ID) mod N , where N is the number of partitions. Then, we run our HIGA scheme on each partition in parallel and combine all the anonymized partitions by removing the duplicated added edges.</p><p>Given partition i, only the nodes satisfying hash(ID) mod N = i will be processed and thus, the running time will be largely reduced. If we apply N servers running in parallel, an anonymized Douban network can be generated within one hour when k = 25 and N = 50. From Fig. <ref type="figure" target="#fig_16">8</ref>, we know that the running time decreases as N increases. However, the information loss increases as N increases. Therefore, two key problems needed to be considered: 1) how to determine an appropriate partition number N ; 2) 6. http://www.cs.cornell.edu/projects/kddcup/datasets.html how to split the large graphs. As part of our future work, we will investigate how to make our scheme work well in parallel graph anonymization.</p><p>To show the effectiveness of our HIGA scheme, we compare it with existing k-neighbor anonymity and weight anonymization approaches. Specifically, we first compare our results with those of <ref type="bibr" target="#b1">[2]</ref> in terms of the number of modified edges under the KDD cup 2003 co-authorship data set 6 . To fairly perform comparisons, we extract 120,640 edges from the data set, so that our experiment setting is the same as theirs. The work in <ref type="bibr" target="#b1">[2]</ref> aims to generate a k-neighbor anonymous network where each node's 1-neighborhood graph is isomorphic to at least k -1 other nodes'. Unlike their scheme requiring the isomorphism of graphs, our scheme applies the concept of approximate matching to achieve probabilistic indistinguishability in the anonymized network and thus, the number of modified edges is relatively low. From Fig. <ref type="figure" target="#fig_18">9-(a)</ref>, we know that our scheme outperforms <ref type="bibr" target="#b1">[2]</ref> while keeping the same level of privacy.</p><p>Then, we compare the APW with the work in <ref type="bibr" target="#b20">[21]</ref> under the weighted network, NetSci 7 , which consists of 1,589 nodes and 2,742 edges. The work in <ref type="bibr" target="#b20">[21]</ref> aims to anonymize weight volumes and weight distribution without involving the anonymization of sub-        graphs. That is, <ref type="bibr" target="#b20">[21]</ref> does not require the structure similarity of a group of nodes and thus, the anonymized networks neither achieve k-neighbor anonymity nor have the property of probabilistic indistinguishability. Therefore, <ref type="bibr" target="#b20">[21]</ref> has a high graph utility at the cost of privacy. Fig. <ref type="figure" target="#fig_18">9-(b</ref>) shows that our HIGA scheme can preserve graph utility nearly as well as theirs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.4">Utility</head><p>Subfigures (a) ‚àº (d) in Figs. <ref type="figure" target="#fig_19">10</ref> and<ref type="figure" target="#fig_20">11</ref> show that both the degree and the weight distributions follow the power-law distribution in the anonymized graphs. To quantify the comparison results, we utilize the Kolmogorov-Smirnov (KS) test to show the magnitude of difference between the original and anonymized distributions. From Fig. <ref type="figure" target="#fig_19">10-(e</ref>) and Fig. <ref type="figure" target="#fig_20">11-(e)</ref>, we know that the difference between two distributions increases as the group size, k, increases. For example, given the significance level 0.01 for the weight distribution in Facebook, it fails to reject the null hypothesis with a probability of 95% when k = 5, but it rejects the null hypothesis as k increases to 10.</p><p>Table <ref type="table" target="#tab_5">3</ref> shows the comparison results for answering aggregate queries. Similarly, the utility of the network decreases as k increases. However, the query results in all the real networks except Facebook are still very useful even when k = 25. From Table <ref type="table" target="#tab_5">3</ref>, we know that ACC will decrease as k increases. For the networks with a higher ACC, the drop rate of ACC is higher during anonymization. Furthermore, the APW and the APL decrease as k increases while anonymizing networks with a small number of nodes (e.g., Facebook); these values increase as k increases for large-scale networks (e.g., Enron and Douban).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">RELATED WORK</head><p>Our work is on publishing weighted social networks while preserving individuals' identity privacy. To defend the re-identification attacks, the work in <ref type="bibr" target="#b21">[22]</ref> advocated the k-anonymity model, where every node should be indistinguishable with at least k -1 other nodes in terms of both the attributes and the associated structural information, such as neighborhood and node degree. With such a property, the attacker cannot re-identify any individual from the published networks with a confidence higher than 1/k. To achieve k-anonymity, existing approaches can be classified as clustering-based approaches and graph modification-based approaches. Clustering-based approaches cluster nodes and edges into groups and anonymize subgraphs into super nodes, thus leading to great changes in the structure of the original graph.</p><p>To preserve the scale and the local structures of the original graph, the graph modification-based approaches try to locally modify the graph structure to achieve the privacy preservation requirement. For example, the work in <ref type="bibr" target="#b0">[1]</ref> proposed the guarantee of k-anonymity on node degrees, so that for every node v, there are at least k -1 other nodes that have the same node degrees as v. The work in <ref type="bibr" target="#b1">[2]</ref> provided a heuristic solution against the 1-neighborhood attack. The work in <ref type="bibr" target="#b2">[3]</ref> anonymized the data graph by graph partition, block alignment, and edge copy so that the resulting graph is k-automorphic. The work in <ref type="bibr" target="#b14">[15]</ref> quantified the privacy risks associated with different kinds of attacks on social networks, and proposed a randomization method to perturb the graph. The work in <ref type="bibr" target="#b22">[23]</ref> identified two realistic targets of attacks, NodeInfo and LinkInfo, and proposed a solution to form k pairwise isomorphic subgraphs. Existing work mainly focuses on unweighted social networks. Research in the area of anonymizing weighted graphs is still in its infancy. As a pioneering work, the work in <ref type="bibr" target="#b23">[24]</ref> built a linear programming model on weighted social networks and reassigned edge weights to obtain an anonymized graph with the linear property. The work in <ref type="bibr" target="#b20">[21]</ref> formalized a general model for weighted graph anonymization to achieve k-histogram anonymity. The work in <ref type="bibr" target="#b11">[12]</ref> proposed a generation-based anonymization approach to generate a k-possible anonymity weighted social network. The work in <ref type="bibr" target="#b24">[25]</ref> addressed the problem of outsourcing weighted social networks to the cloud while preserving shortest distances. The work in <ref type="bibr" target="#b25">[26]</ref> proposed a clustering-based k-anonymization method to prevent identity disclosure in weighted social networks. The work in <ref type="bibr" target="#b12">[13]</ref> presented a two-phase approach to generate a structure and text-aware k-anonymity social network. However, most of the existing solutions target k-anonymity. Our previous work <ref type="bibr" target="#b26">[27]</ref> defined the probabilistic indistinguishability property for generating an anonymized social network with high utility. The main drawback is that the proposed scheme applies to only unweighted social networks. A weighted graph is a generalization of the unweighted graph. Therefore, our HIGA scheme is more practical.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10">CONCLUSION</head><p>In this paper, we investigate the problem of publishing weighted social network data in a privacy-preserving way. We identify a weighted 1*neighborhood attack and define a key property, probabilistic indistinguishability, to resist this attack. Then, we propose a HIGA scheme to generate a probabilistically indistinguishable social network. The empirical study indicates that the anonymized social networks can be used to answer aggregate queries with high accuracy. In our future work, we will try to introduce other privacy mechanisms to our scheme, e.g., by combining with l-diversity and t-closeness, we will enable the nodes in a group to be associated with at least l different sensitive attributes, and the distribution of the sensitive attributes in a group will be close to the distribution of the attributes in the overall data.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Weighted 1*-neighborhood attacks.</figDesc><graphic coords="1,287.11,352.27,240.00,129.30" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Sample structure graph. The solid lines connect the target and its neighbors. DF = [0.7, 0.8, 0.9].</figDesc><graphic coords="5,287.10,53.37,243.90,56.23" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Sample of possible candidates.</figDesc><graphic coords="6,54.97,53.38,197.42,86.71" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>and 2 ‚âº [1, 3]. For G * (u) and G ‚Ä≤ * (v), we have 4 ‚âº [2, 4], 2 ‚âº 2, 2 ‚âº [2, 3], 1 ‚âº [1, 3], and 1 ‚âº 1, with the expectation that e 4,5 ‚àà E(u) is mapped to ‚àÖ. Therefore, G * (u) is a possible candidate of G ‚Ä≤ * (u) and G ‚Ä≤ * (v). That is to say, the attacker with knowledge of G * (u)'s weight sequence in G cannot distinguish node u from node v in G ‚Ä≤ with high confidence. Weight Compatibility. Node u is weight compatible with node</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>5 : 6 : repeat 7 :</head><label>567</label><figDesc>Set the first group in CGS as ‚àº g for each pair of nodes (u, v) in g do 8: Call Alg. 1 to obtain cost( G(u) * , G(v) * ) 9:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>4 : 5 :</head><label>45</label><figDesc>if edge e œâi,xi exists then Generalize w œâi,xi with [min({w œâi,xi }), max({w œâi,xi })]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Working process of Graph Approach and Weight Generation. The dashed, double-sided arrow connects a pair of optimal matching nodes, and the number on the node denotes node degree.</figDesc><graphic coords="8,287.11,53.39,240.00,117.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>2 ‚Ä¢ T 1 ) to perform a structure similarity measurement where T 1 is the average overhead for Alg. 1. Given G(u) * and G(v) * , Alg. 1 takes about O(n‚Ä¢ m) for the random walk and O(n ‚Ä¢ log 6 n/Œµ 3 ) for the Monte-Carlo algorithm, where n and m are the maximal numbers of nodes and edges in G(u) * and G(v) * , and Œµ &gt; 0 is a real number. Next, Group Anonymization takes O(M ‚Ä¢ k ‚Ä¢ T 2 ) for Graph Approach, and O(M ‚Ä¢ T 3 ) for Weight Generalization, where T 2 and T 3 are the average overheads for Alg. 3 and Alg. 4, respectively.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Number of modified edges.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head></head><label></label><figDesc>(n=1000,k=5) B-A (n=1000,k=5) (e) Infomation loss vs. ACC.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. Information loss.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head></head><label></label><figDesc>(n=1000,k=5) B-A(n=1000,k=5) (e) Running time vs. ACC.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Running time (s).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>12</head><label>12</label><figDesc></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Performance of HIGA in real data sets.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head>Fig. 9 .</head><label>9</label><figDesc>Fig. 9. Comparison with existing work.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_19"><head>Fig. 10 .</head><label>10</label><figDesc>Fig. 10. Degree distribution.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_20"><head>Fig. 11 .</head><label>11</label><figDesc>Fig. 11. Weight distribution.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>and ||g|| ‚â• k, if for each pair of nodes {‚ü®u, v‚ü©|u, v ‚àà g} u and v are indistinguishable in the published graph G ‚Ä≤ ; group g is an indistinguishable group.</figDesc><table><row><cell>Probabilistic Indistinguishability. A published social</cell></row><row><cell>network G ‚Ä≤ achieves probabilistic indistinguishability if all</cell></row><row><cell>nodes {v|v ‚àà V ‚Ä≤ } can be classified into M ‚â• 1 groups,</cell></row><row><cell>where each group has the property of group indistin-</cell></row><row><cell>guishability.</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>TABLE 1</head><label>1</label><figDesc></figDesc><table><row><cell></cell><cell cols="5">Effectiveness of metrics for grouping</cell></row><row><cell cols="2">Nodes Edges</cell><cell cols="2">Percentage Nodes</cell><cell>Edges</cell><cell>Percentage</cell></row><row><cell>5,000</cell><cell>9,988</cell><cell>75%</cell><cell>5,000</cell><cell>24,970</cell><cell>54%</cell></row><row><cell>10,000</cell><cell cols="2">19,993 79%</cell><cell>10,000</cell><cell cols="2">121,251 58%</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>7.3 Performance Analysis Time complexity.</head><label></label><figDesc>This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TPDS.2016.2615020, IEEE Transactions on Parallel and Distributed Systems Let ||V|| and ||E|| denote the number of nodes and edges in graph G = (V, E, W), respectively. Group Formation takes O(M 1 ‚Ä¢ ||V||) to classify nodes into M 1 groups. Group Reshaping first utilizes the Quicksort algorithm to sort groups, which takes O(M 1 ‚Ä¢log M 1 ). It then takes O(M 1 ) to combine groups, and O(M 2 ‚Ä¢ R ‚Ä¢ ||g|| 2 /k) to split groups into subgroups with sizes between [k, 2k), where M 1 and M 2 are the numbers of groups before and after group combination, respectively, R is the number of iterations, and ||g|| is the maximal group size before splitting. The most expensive operation in Randomization is the calculation of SPW between a pair of nodes. The Dijkstra algorithm is used to solve the single-source shortest path problem, which takes O(||V|| ‚Ä¢ log ||V|| + ||E||) while it is implemented with the priority queue. The most time consuming algorithm is Group Anonymization. Given M groups of a size between [k, 2k), it first utilizes the Quicksort algorithm, which takes O(M ‚Ä¢ log M ) to sort groups. Then, it takes O(M ‚Ä¢ k</figDesc><table /><note><p><p>)</p>1045-9219 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>TABLE 2</head><label>2</label><figDesc>Parameter p vs. percentage P on real data sets</figDesc><table><row><cell></cell><cell>Nodes</cell><cell>Edges</cell><cell>p</cell><cell>P</cell></row><row><cell>Facebook 2</cell><cell>4,039</cell><cell>88,234</cell><cell>0.0003</cell><cell>48.9%</cell></row><row><cell>CA-CondMat 3</cell><cell>23,133</cell><cell>93,497</cell><cell>0.01</cell><cell>45.4%</cell></row><row><cell>Enron 4</cell><cell>36,692</cell><cell cols="2">183,831 0.002</cell><cell>51%</cell></row><row><cell>Douban 5</cell><cell cols="3">154,907 327,094 0.02</cell><cell>49.9%</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head></head><label></label><figDesc>This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TPDS.2016.2615020, IEEE Transactions on Parallel and Distributed Systems</figDesc><table /><note><p>7. http://www-personal.umich.edu/‚àºmejn/netdata/ 1045-9219 (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>TABLE 3</head><label>3</label><figDesc>Utility of the anonymized social network</figDesc><table><row><cell>Facebook</cell><cell>MIN</cell><cell cols="3">MAX AVE ACC</cell><cell cols="2">APW APL</cell></row><row><cell>Original</cell><cell>1</cell><cell>1045</cell><cell>44</cell><cell>0.605</cell><cell>7.6</cell><cell>4.7</cell></row><row><cell>k=5</cell><cell>8</cell><cell>1045</cell><cell>45</cell><cell>0.537</cell><cell>6.42</cell><cell>4.06</cell></row><row><cell>k=10</cell><cell>13</cell><cell>1045</cell><cell>47</cell><cell>0.508</cell><cell>6.39</cell><cell>3.98</cell></row><row><cell>k=15</cell><cell>17</cell><cell>1045</cell><cell>49</cell><cell>0.478</cell><cell>6.15</cell><cell>3.85</cell></row><row><cell>k=20</cell><cell>20</cell><cell>1045</cell><cell>52</cell><cell>0.468</cell><cell>6.03</cell><cell>3.81</cell></row><row><cell>k=25</cell><cell>22</cell><cell>1045</cell><cell>54</cell><cell>0.466</cell><cell>5.8</cell><cell>3.73</cell></row><row><cell cols="5">CA-Condmat MIN MAX AVE ACC</cell><cell cols="2">APW APL</cell></row><row><cell>Original</cell><cell>1</cell><cell>279</cell><cell>8</cell><cell>0.633</cell><cell>11.1</cell><cell>6.4</cell></row><row><cell>k=5</cell><cell>2</cell><cell>279</cell><cell>8.2</cell><cell>0.577</cell><cell>11.38</cell><cell>6.38</cell></row><row><cell>k=10</cell><cell>2</cell><cell>279</cell><cell>8.3</cell><cell>0.534</cell><cell>11.86</cell><cell>6.42</cell></row><row><cell>k=15</cell><cell>3</cell><cell>279</cell><cell>8.5</cell><cell>0.412</cell><cell>12.51</cell><cell>6.49</cell></row><row><cell>k=20</cell><cell>3</cell><cell>279</cell><cell>8.6</cell><cell>0.505</cell><cell>12.68</cell><cell>6.58</cell></row><row><cell>k=25</cell><cell>3</cell><cell>279</cell><cell>8.7</cell><cell>0.499</cell><cell>13.28</cell><cell>6.64</cell></row><row><cell>Enron</cell><cell>MIN</cell><cell cols="3">MAX AVE ACC</cell><cell cols="2">APW APL</cell></row><row><cell>Original</cell><cell>1</cell><cell>1383</cell><cell>10</cell><cell>0.497</cell><cell>8.18</cell><cell>4.9</cell></row><row><cell>k=5</cell><cell>2</cell><cell>1383</cell><cell>10.4</cell><cell>0.496</cell><cell>8.93</cell><cell>4.92</cell></row><row><cell>k=10</cell><cell>2</cell><cell>1383</cell><cell>10.6</cell><cell>0.4813</cell><cell>9.29</cell><cell>4.99</cell></row><row><cell>k=15</cell><cell>3</cell><cell>1383</cell><cell>11</cell><cell>0.476</cell><cell>9.63</cell><cell>5</cell></row><row><cell>k=20</cell><cell>3</cell><cell>1383</cell><cell>11.2</cell><cell>0.445</cell><cell>9.75</cell><cell>5.01</cell></row><row><cell>k=25</cell><cell>3</cell><cell>1383</cell><cell>11.3</cell><cell>0.423</cell><cell>10.05</cell><cell>5.05</cell></row><row><cell>Douban</cell><cell cols="4">MIN MAX AVE ACC</cell><cell cols="2">APW APL</cell></row><row><cell>Original</cell><cell>1</cell><cell>287</cell><cell>4.2</cell><cell>0.016</cell><cell>9.66</cell><cell>5.7</cell></row><row><cell>k=5</cell><cell>1</cell><cell>287</cell><cell>4.3</cell><cell cols="2">0.0156 11</cell><cell>5.86</cell></row><row><cell>k=10</cell><cell>1</cell><cell>287</cell><cell>4.4</cell><cell cols="2">0.0153 11.01</cell><cell>5.87</cell></row><row><cell>k=15</cell><cell>1</cell><cell>287</cell><cell>4.5</cell><cell cols="2">0.0152 11.03</cell><cell>5.87</cell></row><row><cell>k=20</cell><cell>1</cell><cell>287</cell><cell>4.5</cell><cell cols="2">0.0151 11.06</cell><cell>5.88</cell></row><row><cell>k=25</cell><cell>1</cell><cell>287</cell><cell>4.6</cell><cell>0.015</cell><cell>11.15</cell><cell>5.88</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>This work was supported in part by NSF grants CNS 1449860, CNS 1461932, CNS 1460971, CNS 1439672, DUE 1431330, CNS 1301774, and ECCS 1231461; NSFC grants 61632009, 61272151, 61472451, 61402161; and the Hunan Provincial Natural Science Foundation of China (Grant No. 2015JJ3046).</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Towards identity anonymization on graphs</title>
		<author>
			<persName><forename type="first">K</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Terzi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM SIGMOD</title>
		<meeting>of ACM SIGMOD</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">The k-anonymity and l-diversity approaches for privacy preservation in social networks against neighborhood attacks</title>
		<author>
			<persName><forename type="first">B</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pei</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Knowledge and Information Systems</title>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">K-automorphism: A general framework for privacy preserving network publication</title>
		<author>
			<persName><forename type="first">L</forename><surname>Zou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>√ñzsu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the VLDB</title>
		<meeting>of the VLDB</meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Identity obfuscation in graphs through the information theoretic lens</title>
		<author>
			<persName><forename type="first">F</forename><surname>Bonchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Gionis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Tassa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information Sciences</title>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Design and analysis of a social botnet</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Boshmaf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Muslukhov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Networks</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Exact and approximate graph matching using random walks</title>
		<author>
			<persName><forename type="first">M</forename><surname>Gori</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Maggini</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Pattern Analysis and Machine Intelligence</title>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The PageRank citation ranking: Bringing order to the web</title>
		<author>
			<persName><forename type="first">L</forename><surname>Page</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Brin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Stanford InfoLab, Tech. Rep</title>
		<imprint>
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">On the complexity of approximating k-dimensional matching</title>
		<author>
			<persName><forename type="first">E</forename><surname>Hazan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Safra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of APPROX</title>
		<meeting>of APPROX</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Emergence of scaling in random networks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Barab√°si</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Albert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science</title>
		<imprint>
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">An efficient k-means clustering algorithm: Analysis and implementation</title>
		<author>
			<persName><forename type="first">T</forename><surname>Kanungo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Mount</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Pattern Analysis and Machine Intelligence</title>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Approximation algorithms for bipartite and non-bipartite matching in the plane</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">R</forename><surname>Varadarajan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">K</forename><surname>Agarwal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of SODA</title>
		<meeting>of SODA</meeting>
		<imprint>
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A generalization based approach for anonymizing weighted social network graphs</title>
		<author>
			<persName><forename type="first">X</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Web-Age Information Management</title>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">K-anonymity for social networks containing rich structural and textual information</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Hao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Cao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Social Network Analysis and Mining</title>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Randomizing social networks: a spectrum preserving approach</title>
		<author>
			<persName><forename type="first">X</forename><surname>Ying</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Wu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of SIAM SDM</title>
		<meeting>of SIAM SDM</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Anonymizing social networks</title>
		<author>
			<persName><forename type="first">M</forename><surname>Hay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Miklau</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
	<note type="report_type">Tech. Rep.</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Sampling from large graphs</title>
		<author>
			<persName><forename type="first">J</forename><surname>Leskovec</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Faloutsos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM SigKDD</title>
		<meeting>of ACM SigKDD</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">R-MAT: A recursive model for graph mining</title>
		<author>
			<persName><forename type="first">D</forename><surname>Chakrabarti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Faloutsos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of SIAM SDM</title>
		<meeting>of SIAM SDM</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Measurement-calibrated graph models for social network experiments</title>
		<author>
			<persName><forename type="first">A</forename><surname>Sala</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Cao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Wilson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Zablit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">Y</forename><surname>Zhao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of WWW</title>
		<meeting>of WWW</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Pregel: a system for large-scale graph processing</title>
		<author>
			<persName><forename type="first">G</forename><surname>Malewicz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">H</forename><surname>Austern</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM SIGMOD</title>
		<meeting>of ACM SIGMOD</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Parallel graph analytics</title>
		<author>
			<persName><forename type="first">A</forename><surname>Lenharth</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Pingali</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Anonymizing graphs against weight-based attacks</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Shen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE ICDMW</title>
		<meeting>of IEEE ICDMW</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">A clustering approach for data and structural anonymity in social networks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Campan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Truta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of PinKDD</title>
		<meeting>of PinKDD</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">K-isomorphism: privacy preserving network publication against structural attacks</title>
		<author>
			<persName><forename type="first">J</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM COMAD</title>
		<meeting>of ACM COMAD</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Anonymizing weighted social network graphs</title>
		<author>
			<persName><forename type="first">S</forename><surname>Das</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Egecioglu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">El</forename><surname>Abbadi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE ICDE</title>
		<meeting>of IEEE ICDE</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Neighborhood-privacy protected shortest distance computing in cloud</title>
		<author>
			<persName><forename type="first">J</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Yu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM CO-MAD</title>
		<meeting>of ACM CO-MAD</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Privacy preservation by k-anonymization of weighted social networks</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">E</forename><surname>Skarkala</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Maragoudakis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE ASONAM</title>
		<meeting>of IEEE ASONAM</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Qin Liu received her B.S. in Computer Science in 2004 from Hunan Normal University</title>
		<author>
			<persName><forename type="first">G</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Science in 2007, and received her Ph</title>
		<meeting><address><addrLine>China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
	<note>Proc. of IEEE INFOCOM</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
