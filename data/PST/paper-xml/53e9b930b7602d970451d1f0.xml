<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Benchmarking a B-tree compression method</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Filip</forename><surname>Křižka</surname></persName>
							<email>filip.krizka@vsb.cz</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Technical University of Ostrava</orgName>
								<address>
									<country key="CZ">Czech Republic</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Michal</forename><surname>Krátký</surname></persName>
							<email>michal.kratky@vsb.cz</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Technical University of Ostrava</orgName>
								<address>
									<country key="CZ">Czech Republic</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Radim</forename><surname>Bača</surname></persName>
							<email>radim.baca@vsb.cz</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Technical University of Ostrava</orgName>
								<address>
									<country key="CZ">Czech Republic</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Benchmarking a B-tree compression method</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2023-01-01T13:44+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>B-tree and its variants</term>
					<term>B-tree compression</term>
					<term>compression scheme</term>
					<term>fast decompression algorithm</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The B-tree and its variants have been widely applied in many data management fields. When a compression of these data structures is considered, we follow two objectives. The first objective is a smaller index file, the second one is a reduction of the query processing time. In this paper, we apply a compression scheme to fit these objectives. The utilized compression scheme handles compressed nodes in a secondary storage. If a page must be retrieved then this page is decompressed into the tree cache. Since this compression scheme is transparent from the tree operation's point of view, we can apply various compression algorithms to pages of a tree. Obviously, there are compression algorithms suitable for various data collections, and so, this issue is very important. In our paper, we compare the B-tree and compressed B-tree where the Fast Fibonacci and invariable coding compression methods are applied.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The B-tree represents an efficient structure for the finding of an ordered set <ref type="bibr" target="#b5">[6]</ref>. The B-tree has been often used as the backbone data structure for the physical implementation of RDBMS or file systems. Its most important characteristic is that keys in a node have very small differences to each others. We utilize this feature in the B-tree compression. In this case, nodes are compressed in the secondary storage and they are decompressed during their reading into the cache. Due to the fact that the random access in the secondary storage is a rather expensive operation, we save time when reading the nodes.</p><p>In work <ref type="bibr" target="#b10">[11]</ref>, authors summarize some methods for organizing of B-trees. A prefix B-tree, introduced in <ref type="bibr" target="#b6">[7]</ref>, provides the head and tail compression. In the case of the head compression, one chooses a common prefix for all keys that the page can store, not just the current keys. Tail compression selects a short index term for the nodes above the data pages. This index needs merely to separate the keys of one data node from those of its sibling and is chosen during a node split. Tail compression produces variable length index entries, and <ref type="bibr" target="#b6">[7]</ref> describes a binary search that copes with variable length entries.</p><p>Work <ref type="bibr" target="#b8">[9]</ref> describes a split technique for data. Rows are assigned tag values in the order in which they are added to the table. Note that tag values identify rows in the table, not records in an individual partition or in an individual index. Each tag value appears only once in each index. All vertical partitions are stored in the B-tree with the tag value as the key. The novel aspect is that the storage of the leading key is reduced to a minimal value.</p><p>Unlike these works, in our work we suppose the B-tree compression without changes of the B-tree structure. We mainly utilize the fast decompression algorithm. In the case of the previously depicted papers, B-tree compression is possible using a modification of the B-tree structure. In work <ref type="bibr" target="#b6">[7]</ref>, B-tree is presented by B * -index and B * -file. The keys stored in the B * -index are only used to searching and determining in which subtree of a given branch node a key and its associated record will be found. The B * -index itself is a conventional B-tree including prefixes of the keys in the B * -file. This prefix B-tree combines some of the advantages of B-trees, digital search trees, and key compression without sacrificing the basic simplicity of B-trees and the associated algorithms and without inheriting some of the disadvantages of digital search trees and key compression techniques. Work <ref type="bibr" target="#b8">[9]</ref> describes an efficient columnar storage in B-trees. Column-oriented storage formats have been proposed for query processing in relational data warehouses, specifically for fast scans over non-indexed columns. This data compression method reuses traditional on-disk B-tree structures with only minor changes yet achieves storage density and scan performance comparable to specialized columnar designs. In work <ref type="bibr" target="#b0">[1]</ref>, B-tree compression is used for minimizing the amount of space used by certain types of B-tree indexes. When a B-tree is compressed, duplicate occurrences of the indexed column values are eliminated. It is compressed by clustering the same keys and their unindexed attributes.</p><p>This paper is organized as follows. In Section 2, we briefly summarize basic knowledge about the B-tree. Section 3 shows a compression scheme used <ref type="bibr" target="#b2">[3]</ref>. Section 4 describes two compression methods. Section 5 shows results of the compression methods. The compressed B-tree is compared with a proper B-tree. In Section 6, we summarize the paper content and outline possibilities of our future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">B-tree and its variants</head><p>The B-tree is a tree structure published by Rudolf Bayer and Edward M. McCreight in 1972 <ref type="bibr" target="#b5">[6]</ref>. The B-tree keeps data sorted and allows searches, insertions, and deletions in logarithmic amortized time. It is optimized for systems that read and write large blocks of data. A B-tree is kept balanced by requiring that all leaf nodes are at the same depth. This depth will increase slowly as elements are added to the tree, but an increase in the overall depth is infrequent, and results in all leaf nodes being one more node further away from the root.</p><p>B-trees have substantial advantages over alternative implementations when node access times far exceed access times within nodes. This usually occurs when most nodes are in secondary storage such as hard drives. By maximizing the number of child nodes within each internal node, the height of the tree decreases, balancing occurs less often, and efficiency increases. Usually this value is set such that each node takes up a full disk block or an analogous size in secondary storage.</p><p>A B-tree of order m (the maximum number of children for each node) is a tree which satisfies the following properties:</p><p>-Every node has at most m children.</p><p>-Every node (except root and leaves) has at least m 2 children.</p><p>-The root has at least two children if it is not a leaf node. -All leave nodes are in the same level.</p><p>-All inner nodes with k children contain k-1 links to children.</p><p>Each internal node's elements act as separation values which divide its subtrees. For example, if an internal node has three child nodes (or subtrees) then it must have two separation values or elements a 1 and a 2 . All values in the leftmost subtree will be less than a 1 , all values in the middle subtree will be between a 1 and a 2 , and all values in the rightmost subtree will be greater than a 2 .</p><p>Internal nodes in a B-tree -nodes which are not leaf nodes -are usually represented as an ordered set of elements and child pointers. Every internal node contains a maximum of U children and -other than the root -a minimum of L children. For all internal nodes other than the root, the number of elements is one less than the number of child pointers; the number of elements is between L − 1 and U − 1. The number U must be either 2 • L or 2 • L − 1; thus each internal node is at least half full. This relationship between U and L implies that two half-full nodes can be joined to make a legal node, and one full node can be split into two legal nodes (if there is an empty space to push one element up into the parent). These properties make it possible to delete and insert new values into a B-tree and adjust the tree to preserve the B-tree properties.</p><p>Leaf nodes have the same restriction on the number of elements, but have no children, and no child pointers. The root node still has the upper limit on the number of children, but has no lower limit. For example, when there are fewer than L-1 elements in the entire tree, the root will be the only node in the tree, and it will have no children at all.</p><p>A B-tree of depth n+1 can hold about U times as many items as a B-tree of depth n, but the cost of search, insert, and delete operations grows with the depth of the tree. As with any balanced tree, the cost increases much more slowly than the number of elements.</p><p>Some balanced trees store values only at the leaf nodes, and so have different kinds of nodes for leaf nodes and internal nodes. B-trees keep values in every node in the tree, and may use the same structure for all nodes. However, since leaf nodes never have children, a specialized structure for leaf nodes in B-trees will improve performance. The best case height of a B-tree is: log M n. The worst case height of a B-tree is: log</p><formula xml:id="formula_0">M 2 n.</formula><p>Where M is the maximum number of children a node can have.</p><p>There exists many variants of the B-tree: B * -tree <ref type="bibr" target="#b12">[13]</ref>, B * * -tree <ref type="bibr" target="#b14">[15]</ref>, B + -tree <ref type="bibr" target="#b16">[17]</ref>. In the case of the B + -tree, data is only stored in leaf nodes and inner nodes include keys. Leaf nodes hold links to the previous and next nodes. Moreover, many paged data structures like UB-tree <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b11">12]</ref>, BUB-tree <ref type="bibr" target="#b7">[8]</ref>, and R-tree <ref type="bibr" target="#b9">[10]</ref> are based on the B-tree.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">A compression scheme for tree-like data structures</head><p>In this section, we describe a basic scheme which can be utilized for most paged tree data structures <ref type="bibr" target="#b2">[3]</ref>. Pages are stored in a secondary storage and retrieved when the tree requires a page. This basic strategy is widely used by many indexing data structures such as B-trees, R-trees, and many others. They utilize cache for fast access to pages as well, since access to the secondary storage can be more than 20 times slower compared to access to the main memory. We try to decrease the amount of disc access cost (DAC) to a secondary storage while significantly decreasing the size of a tree file in the secondary storage.</p><p>Let us consider a common cache schema of persistent data structures in Figure <ref type="figure" target="#fig_0">1(a)</ref>. When a tree requires a node, the node is read from the main memory cache. If the node is not in the cache, the node page is retrieved from the secondary storage.</p><p>An important issue of the compression schema is that tree pages are only compressed in the secondary storage. In Figure <ref type="figure" target="#fig_0">1</ref>(b), we can observe the basic idea of the scheme. If a tree data structure wants to retrieve a page, the compressed page is transfered from the secondary storage to the tree's cache and it is decompressed there. Function TreeNode:: Decompress() performs the decompression. Afterwards, the decompressed page is stored in the cache. Therefore, the tree's algorithms only work with decompressed pages. Obviously, the tree is preserved as a dynamic data structure and in our experiments we show the page decompression does not significantly affect query performance because we save time with the lower DAC. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">How the compression scheme affects tree algorithms</head><p>When the compression scheme is taken into consideration, the tree insert algorithm only needs to be slightly modified. When we insert or modify a record in a page, we have to perform the function TreeNode::Compress Test() which tests whether the node fits into the page.</p><p>If not, the node needs to be split. Also, during the split, we have to make sure that the final nodes fit into the page. This means that the maximum capacity of a page can vary depending on the redundancy of the data. The maximum capacity of each tree's page must be determined by a heuristic:</p><formula xml:id="formula_1">C c = C u CR A ,</formula><p>where CR A is the assumed maximum compression ratio, C u is the capacity of the uncompressed page. For example, the size of the page is 2,048 B, C u = 100, CR A = 1/5, then C c = 500. The size of the page for the capacity is 10,240 B. This means that all pages in the tree's cache have C c = 500, although their S size in the secondary storage is less than or equal to 2,048 B. Let us note that CR = compressed size original size .</p><p>The TreeNode::Compress() function is called when the page must be stored in the secondary storage. Every page in the tree has its minimal page utilization C c /2. Let S l denote the byte size of a compressed page. After deleting one item in the page, the byte size of the page is denoted by S c . Without loss of generality, we can assume that S c ≤ S l . If items are deleted from the page, we must check whether capacity is less than or equal to C c /2. If so, the page is stretched into other pages according to the tree deleting algorithm.</p><p>Query algorithms are not affected at all because page decompression is processed only between cache and secondary storage and the tree can utilize decompressed pages for searching without knowing that they have been previously compressed.</p><p>This basic idea of the compression scheme can be applied to any paged tree data structure. It is not dependent upon an applied split algorithm, nor on the key type stored in the tree's pages. We test this scheme on B + -tree data structure because this data structure has remained very popular in recent years and it is suitable for further page compressing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">B-tree compression methods</head><p>In this article, we have applied two compression methods: Fast Fibonacci (FF) and Invariable Coding (IC). Since keys in a node are close to each another, we use the well-known difference compression method <ref type="bibr" target="#b13">[14]</ref>. Similar algorithms were used in the case of the R-tree compression <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b15">16]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Fast Fibonacci compression</head><p>In this method, we apply the Fibonacci coding <ref type="bibr" target="#b1">[2]</ref> which uses the Fibonacci numbers; 1, 2, 3, 5, 8, 13, . . . . A value is coded as the sum of the Fibonacci numbers that are represented by the 1-bit in a binary buffer. Special 1-bit is added as the lowest bit in this binary buffer after the coding is finished. For example, the  the node. For example, if the difference of the maximal and minimal value is 20, all values are stored in 5bits. Algorithm of the IC compression is shown in Algorithm 1. We explain the algorithm in the following paragraphs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Compression of inner nodes:</head><p>-Keys are compressed by the above proposed method. We store the first value and the number of bits necessary for a storage of the maximal value. After, all difference values are stored. (Lines 14-19) -Child and parent links are not compressed.</p><p>(Line 20)</p><p>Compression of leaf nodes:</p><p>-Keys are compressed in the same way as the keys in an inner node. (Lines 1-6) -Unindexed attribute values are similarly compressed as keys, however the maximal value is not the last value -it must be found by a sequence scan. -Parent, previous, and next nodes links are not compressed. (Line 13)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Experimental results</head><p>In our experiments<ref type="foot" target="#foot_0">1</ref> , we test previously described compression methods. These approaches are implemented in C++. We use four synthetic collections which differ in values included. Collection RND 8 includes values in 0; 255 , RND 16 includes values in 0; 65, 535 . In this way, we create collections RND 24 and RND 32 as well. Each collection contains 1,000,000 items.</p><p>For each collection, we test index building and querying by processing time and DAC. In all tests, the page size is 2,048B and cache size is 1,024 nodes. The cache of the OS was turned off.</p><p>Results of index building are depicted in Table <ref type="table" target="#tab_1">1  and 2</ref>. We see that the compression ratio decreases for increasing size of domains. FF compression is more efficient for lower values; on the other hand, the IC compression is more efficient for higher values. Obviously, due to features of the compressed scheme used, we obtain the high compress time. Consequently, the time of creating of B + -tree with the FF compression is 1.6 − 4.3× higher then the time of creating for the B + -tree. In the case of the IC compression, the creating time is 1.7 − 2.9× higher. The compression ratio is shown is Figure <ref type="figure">4</ref>.2(a) as well.</p><p>In our experiments, we test 50 random queries and the results are then averaged. The results are shown in Table <ref type="table" target="#tab_2">3</ref>. The number of DAC is 2.1 − 3.5× lower for the FF compression when compared to the B +tree and 1.5 − 3.6× for the IC compression. This result influences the query processing time. The query processing times is 0.84 − 4.85× more efficient in the case of the FF compression when compared to the B +tree and the time is 1.03 − 5.4× more efficient for the IC compression. Obviously, if the compression ratio is over a threshold then the B + -tree overcomes the compressed indices. In Figure <ref type="figure">4</ref>.2(b) and (c), we see the query processing time and DAC.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>In this article, we propose two methods for B-tree compression. If the compression ratio is below a threshold then the query processing performance of the compressed index overcomes the B-tree. However, there are still some open issues. The first one is the high creating time. In this case, we must develop a more efficient method or we must use and test the bulkloading (see <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b15">16]</ref>). Additionally, we must test our method for a real data collection. Finally, we should test different compression and coding methods (i.e. Elias-delta code, Elias-gamma code, Golomb code <ref type="bibr" target="#b13">[14]</ref>).</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. (a) Transfer of tree's pages between the secondary storage and tree's cache. (b) Transfer of compressed pages between the secondary storage and tree's cache.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Experiment results: (a) Compression ratio (b) Query processing time (c) DAC.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 .</head><label>1</label><figDesc>Building B + -tree index, result for RND 8 and RND 16.</figDesc><table><row><cell></cell><cell></cell><cell>RND 8</cell><cell></cell><cell></cell><cell cols="2">RND 16</cell></row><row><cell></cell><cell>B + -tree</cell><cell>FF</cell><cell>IC</cell><cell>B + -tree</cell><cell>FF</cell><cell>IC</cell></row><row><cell>Height</cell><cell>2</cell><cell>2</cell><cell>2</cell><cell>2</cell><cell>2</cell><cell>2</cell></row><row><cell>Domain</cell><cell></cell><cell>8b</cell><cell></cell><cell></cell><cell>16b</cell><cell></cell></row><row><cell>DAC Read</cell><cell cols="6">20,858,473 12,115,647 10,010,790 5,996,536 5,872,078 5,739,912</cell></row><row><cell>Creating time [s]</cell><cell>15,288</cell><cell>65,618</cell><cell>44,201</cell><cell>6,360</cell><cell>11,897</cell><cell>10,605</cell></row><row><cell>Cache Time [s]</cell><cell>7,357</cell><cell>5,398</cell><cell>1,565</cell><cell>6,020</cell><cell>1,495</cell><cell>1,181</cell></row><row><cell>Compress time [s]</cell><cell>0</cell><cell>867</cell><cell>652</cell><cell>0</cell><cell>883</cell><cell>636</cell></row><row><cell>Decompress time [s]</cell><cell>0</cell><cell>53,524</cell><cell>35,908</cell><cell>0</cell><cell>9,276</cell><cell>8,567</cell></row><row><cell># Inner nodes</cell><cell>35</cell><cell>17</cell><cell>9</cell><cell>33</cell><cell>17</cell><cell>9</cell></row><row><cell># Leaf nodes</cell><cell>7,746</cell><cell>3,350</cell><cell>2,431</cell><cell>5,695</cell><cell>2,596</cell><cell>2,114</cell></row><row><cell># Avg. node items</cell><cell>222.3</cell><cell>198</cell><cell>271</cell><cell>172.58</cell><cell>153.65</cell><cell>235.8</cell></row><row><cell># Avg. leaf node items</cell><cell>129.1</cell><cell>298.5</cell><cell>411.4</cell><cell>176.58</cell><cell>385.21</cell><cell>473</cell></row><row><cell>Index size [kB]</cell><cell>15,564</cell><cell>6,736</cell><cell>4,882</cell><cell>11,394</cell><cell>5,228</cell><cell>4,248</cell></row><row><cell>Compression ratio</cell><cell>1</cell><cell>0.56</cell><cell>0.69</cell><cell>1</cell><cell>0.54</cell><cell>0.63</cell></row><row><cell></cell><cell></cell><cell>RND 24</cell><cell></cell><cell cols="2">RND 32</cell><cell></cell></row><row><cell></cell><cell>B + tree</cell><cell>FF</cell><cell>IC</cell><cell>B + tree</cell><cell>FF</cell><cell>IC</cell></row><row><cell>Height</cell><cell>2</cell><cell>2</cell><cell>2</cell><cell>2</cell><cell>2</cell><cell>2</cell></row><row><cell>Max item value</cell><cell></cell><cell>24b</cell><cell></cell><cell></cell><cell>32b</cell><cell></cell></row><row><cell>DAC Read [all]</cell><cell cols="6">5,996,536 5,907,459 5,830,822 5,996,536 5,931,627 5,889,079</cell></row><row><cell>Creating time [s]</cell><cell>7,377</cell><cell>12,098</cell><cell>12,435</cell><cell>7,629</cell><cell>13,686</cell><cell>13,154</cell></row><row><cell>Cache Time [s]</cell><cell>7,001</cell><cell>1,556</cell><cell>1,690</cell><cell>7,203</cell><cell>2,935</cell><cell>2,267</cell></row><row><cell>Compress time [s]</cell><cell>0</cell><cell>882</cell><cell>664</cell><cell>0</cell><cell>885</cell><cell>597</cell></row><row><cell>Decompress time [s]</cell><cell>0</cell><cell>9,419</cell><cell>9,828</cell><cell>0</cell><cell>9,595</cell><cell>10,003</cell></row><row><cell># Inner nodes</cell><cell>33</cell><cell>17</cell><cell>17</cell><cell>33</cell><cell>26</cell><cell>17</cell></row><row><cell># Leaf nodes</cell><cell>5,663</cell><cell>2,717</cell><cell>3,099</cell><cell>5,663</cell><cell>2,800</cell><cell>3,756</cell></row><row><cell># Avg node items</cell><cell>172.58</cell><cell>160.76</cell><cell>183.24</cell><cell>172.58</cell><cell>108.65</cell><cell>221.88</cell></row><row><cell cols="2"># Avg leaf node items 176.58</cell><cell>368.05</cell><cell>322.68</cell><cell>176.58</cell><cell>357.14</cell><cell>266.24</cell></row><row><cell>Tree size [kB]</cell><cell>11,394</cell><cell>5,470</cell><cell>6,234</cell><cell>11,394</cell><cell>5,654</cell><cell>5,272</cell></row><row><cell>Compression ratio</cell><cell>1</cell><cell>0.52</cell><cell>0.45</cell><cell>1</cell><cell>0.50</cell><cell>0.54</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 .</head><label>2</label><figDesc>Building B + -tree index, results for RND 24 and RND 32.</figDesc><table><row><cell></cell><cell></cell><cell>RND 8</cell><cell></cell><cell></cell><cell>RND 16</cell><cell></cell><cell></cell><cell>RND 24</cell><cell></cell><cell></cell><cell>RND 32</cell><cell></cell></row><row><cell></cell><cell cols="2">B + tree FF</cell><cell cols="3">IC B + tree FF</cell><cell cols="3">IC B + tree FF</cell><cell cols="3">IC B + tree FF</cell><cell>IC</cell></row><row><cell>Query time [s]</cell><cell cols="3">182.4 37.6 33.5</cell><cell>38.2</cell><cell cols="2">34.2 31.7</cell><cell>38.1</cell><cell cols="2">34.2 35.2</cell><cell>38.2</cell><cell cols="2">45.3 37.2</cell></row><row><cell>Decompress time [s]</cell><cell>0</cell><cell>6.8</cell><cell>5.7</cell><cell>0</cell><cell>6.7</cell><cell>5.0</cell><cell>0</cell><cell>6.6</cell><cell>6.1</cell><cell>0</cell><cell>6.8</cell><cell>6.8</cell></row><row><cell>Cache Time [s]</cell><cell>149.1</cell><cell>3.8</cell><cell>1.8</cell><cell>5.0</cell><cell>2.0</cell><cell>1.3</cell><cell>5.6</cell><cell>2.4</cell><cell>2.5</cell><cell>7.2</cell><cell>12.7</cell><cell>3.0</cell></row><row><cell>DAC Read</cell><cell cols="12">64,813 28,123 20,516 47,068 21,897 17,610 47,068 22,469 25,700 47,068 23,200 31,296</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 3 .</head><label>3</label><figDesc>B-tree querying results for RND 8, RND 16, RND 24 and RND 32.</figDesc><table /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0">The experiments were executed on an AMD Opteron 865 1.8Ghz,</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1">.0 MB L2 cache; 2GB of DDR333; Windows 2003 Server.</note>
		</body>
		<back>

			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Work is partially supported by Grants of GACR No. 201/09/0990 and IGA, FEECS, Technical University of Ostrava, No. BI 4569951, Czech Republic.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<author>
			<persName><forename type="first">C</forename><surname>Antognini</surname></persName>
		</author>
		<title level="m">Troubleshooting Oracle Performance</title>
				<imprint>
			<publisher>Apress</publisher>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Robust transmission of unbounded strings using Fibonacci representations</title>
		<author>
			<persName><forename type="first">A</forename><surname>Apostolico</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Fraenkel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Inform</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="page" from="238" to="245" />
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">A compression scheme for the R-tree data structure</title>
		<author>
			<persName><forename type="first">R</forename><surname>Bača</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Krátký</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Snášel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
	<note>Submitted in Information Systems</note>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">The fast Fibonacci decompression algorithm</title>
		<author>
			<persName><forename type="first">R</forename><surname>Bača</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Snášel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Platoš</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Krátký</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>El-Qawasmeh</surname></persName>
		</author>
		<idno type="arXiv">arXiv:0712.0811v2</idno>
		<ptr target="http://arxiv.org/abs/0712.0811" />
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">The universal B-tree for multidimensional indexing: general concepts</title>
		<author>
			<persName><forename type="first">R</forename><surname>Bayer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of World-Wide Computing and Its Applications (WWCA 1997)</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting>World-Wide Computing and Its Applications (WWCA 1997)<address><addrLine>Tsukuba, Japan</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1997">1997</date>
			<biblScope unit="page" from="198" to="209" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Organization and maintenance of large ordered indices</title>
		<author>
			<persName><forename type="first">R</forename><surname>Bayer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">M</forename><surname>Mccreight</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Acta Informatica</title>
		<imprint>
			<biblScope unit="page" from="173" to="189" />
			<date type="published" when="1972">1972</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Prefix B-trees</title>
		<author>
			<persName><forename type="first">R</forename><surname>Bayer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Unterauer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. on Database Systems</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="11" to="26" />
			<date type="published" when="1977">1977</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">The BUB-tree</title>
		<author>
			<persName><forename type="first">R</forename><surname>Fenk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 28rd VLDB International Conference on Very Large Data Bases (VLDB&apos;02)</title>
				<meeting>28rd VLDB International Conference on Very Large Data Bases (VLDB&apos;02)<address><addrLine>Hongkong, China</addrLine></address></meeting>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Efficient columnar storage in B-trees</title>
		<author>
			<persName><forename type="first">G</forename><surname>Goetz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGMOD Conference</title>
				<meeting>SIGMOD Conference</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">R-Trees: a dynamic index structure for spatial searching</title>
		<author>
			<persName><forename type="first">A</forename><surname>Guttman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM International Conference on Management of Data (SIGMOD 1984)</title>
				<meeting>ACM International Conference on Management of Data (SIGMOD 1984)</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1984-06">June 1984</date>
			<biblScope unit="page" from="47" to="57" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">The evolution of effective B-tree page organization and techniques: a personal account</title>
		<author>
			<persName><forename type="first">D</forename><surname>Lomet</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGMOD Conference</title>
				<meeting>SIGMOD Conference</meeting>
		<imprint>
			<date type="published" when="2001-09">Sep. 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<author>
			<persName><forename type="first">V</forename><surname>Markl</surname></persName>
		</author>
		<ptr target="http://mistral.in.tum.de/results/publications/Mar99.pdf" />
		<title level="m">Mistral: Processing relational queries using a multidimensional access technique</title>
				<meeting><address><addrLine>Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999">1999</date>
		</imprint>
		<respStmt>
			<orgName>Technical University München</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. thesis</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Concurrent operations on B*-trees with overtaking</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Sagiv</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Journal of Computer and System Sciences</title>
				<imprint>
			<date type="published" when="1986">1986</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Data Compression The Complete Reference</title>
		<author>
			<persName><forename type="first">D</forename><surname>Salomon</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
	<note>Third Edition</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Toptsis: B**-tree: a data organization method for high storage utilization</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computing and Information</title>
				<imprint>
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Benchmarking coding algorithms for the R-tree compression</title>
		<author>
			<persName><forename type="first">J</forename><surname>Walder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Krátký</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Bača</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of DATESO 2009</title>
				<meeting>DATESO 2009<address><addrLine>Czech Republic</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<author>
			<persName><forename type="first">N</forename><surname>Wirth</surname></persName>
		</author>
		<title level="m">Algorithms and Data Structures</title>
				<imprint>
			<publisher>Prentice Hall</publisher>
			<date type="published" when="1984">1984</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
