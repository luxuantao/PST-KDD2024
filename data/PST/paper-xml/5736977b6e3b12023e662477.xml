<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Nonoutsourceable Scratch-Off Puzzles to Discourage Bitcoin Mining Coalitions</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Andrew</forename><surname>Miller</surname></persName>
							<email>amiller@cs.umd.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Maryland</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Ahmed</forename><surname>Kosba</surname></persName>
							<email>akosba@cs.umd.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Maryland</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Jonathan</forename><surname>Katz</surname></persName>
							<email>jkatz@cs.umd.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Maryland</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Elaine</forename><surname>Shi</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">Cornell University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Nonoutsourceable Scratch-Off Puzzles to Discourage Bitcoin Mining Coalitions</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">67BB0937A1E2F00B563545C865F872E4</idno>
					<idno type="DOI">10.1145/2810103.2813621</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T16:38+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>An implicit goal of Bitcoin's reward structure is to diffuse network influence over a diverse, decentralized population of individual participants. Indeed, Bitcoin's security claims rely on no single entity wielding a sufficiently large portion of the network's overall computational power. Unfortunately, rather than participating independently, most Bitcoin miners join coalitions called mining pools in which a central pool administrator largely directs the pool's activity, leading to a consolidation of power. Recently, the largest mining pool has accounted for more than half of network's total mining capacity. Relatedly, "hosted mining" service providers offer their clients the benefit of economies-of-scale, tempting them away from independent participation. We argue that the prevalence of mining coalitions is due to a limitation of the Bitcoin proof-of-work puzzle -specifically, that it affords an effective mechanism for enforcing cooperation in a coalition. We present several definitions and constructions for "nonoutsourceable" puzzles that thwart such enforcement mechanisms, thereby deterring coalitions. We also provide an implementation and benchmark results for our schemes to show they are practical.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Bitcoin <ref type="bibr" target="#b30">[32]</ref> and subsequent decentralized cryptocurrencies have gained rapid popularity in recent years, and are often quoted as "a peek into the future financial and payment infrastructure". Security of such cryptocurrencies is critical, and to ensure security the most fundamental assumption made by decentralized cryptocurrencies is that no single entity or adminstration wields a large fraction of the computational resources in the network. Violation of this assumption can lead to severe attacks such as history revision and double spending which essentially nullify all purported security properties that are widely believed today.</p><p>However, two recent trends in mining -namely, mining pools and hosted mining -have led to the concentration of mining power, and have cast serious doubt on the well-foundedness of these fundamental assumptions that underly the security of Bit-coin-like cryptocurrencies. Specifically, mining pools exist because solo miners wish to hedge mining risks and obtain rewards at a more stable, steady rate. At several times over the past two years, the largest handful of mining pools have accounted for well over a third of the network's overall computing effort <ref type="bibr" target="#b9">[10]</ref>. For example, recently the largest mining pool, GHash.IO, has even exceeded 50% of the total mining capacity. 1 Currently, Hosted mining, on the other hand, allows individuals to outsource their mining effort to one or a few large service providers. Hosted mining services have already emerged, such as Alydian <ref type="bibr" target="#b8">[9]</ref>, whose "launch day pricing was $65,000 per Terahash, and mining hosting contracts are available in 5 and 10 Th/sec blocks" <ref type="bibr" target="#b8">[9]</ref>. Hosted mining is appealing because it can potentially reduce miners' cost due to economies of scale. Henceforth we will refer to both mining pools and hosted mining as mining coalitions.</p><p>Such large mining coalitions present a potential lurking threat to the security of Bitcoin-like cryptocurrencies. To exacerbate the matter, several recent works <ref type="bibr" target="#b16">[18,</ref><ref type="bibr" target="#b22">24]</ref> showed that it may be incentive compatible for a mining coalition to deviate from the honest protocol -in particular, Eyal and Sirer <ref type="bibr" target="#b16">[18]</ref> showed that a mining concentration of about 1/3 of the network's mining power can obtain disproportionately large rewards by exhibiting certain "selfish mining" behavior.</p><p>While alternatives to centralized mining pools are well-known and have been deployed for several years, (such as P2Pool, <ref type="bibr" target="#b42">[44]</ref> a decentralized mining pool architecture), these have unfortunatley seen extremely low user adoption (at the time of writing, they account for less than 2% of the network). Fundamentally, the problem is that Bitcoin's reward mechanism provides no particular incentive for users to use these decentralized alternatives.</p><p>Increasing understanding of these problems has prodded extensive and continual discussions in the broad cryptocurrency community, regarding how to deter such coalitions from forming and retain the decentralized nature of Bitcoin-like cryptocurrencies <ref type="bibr" target="#b25">[27]</ref>. The community demands a technical solution to this problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Our Results and Contributions</head><p>Our work provides a timely response to this community-wide concern <ref type="bibr" target="#b25">[27]</ref>, providing the first formally founded solution to combat Bitcoin mining centralization. Our key observation is the following: an enabling factor in the growth of mining pools is a simple yet effective enforcement mechanism; members of a mining pool do not inherently trust one another, but instead submit cryptographic proofs (called "shares") to the other pool members (or to the pool operator), in order to demonstrate they are contributing work that can only benefit the pool (e.g., work that is tied to the pool operator's public key).</p><p>Strongly nonoutsourceable puzzles. Our idea, therefore, is to disable such enforcement mechanisms in a cryptographically strong manner. To this end, we are the first to propose strongly nonoutsourceable puzzles, a new form of proof-of-work puzzles which additionally guarantee the following:</p><p>If a pool operator can effectively outsource mining work to a worker, then the worker can steal the reward without producing any evidence that can potentially implicate itself.</p><p>Intuitively, if we can enforce the above, then any pool operator wishing to outsource mining work to an untrusted worker runs the risk of losing its entitled mining reward, thus effectively creating a disincentive to outsource mining work (either in the form of mining pools or hosted mining). Our nonoutsourceable puzzle is broadly powerful in that it renders unenforceable even external contractual agreements between the pool operator and the worker. In particular, no matter whether the pool operator outsources work to the worker through a cryptocurrency smart contract or through an outof-the-band legal contract, we guarantee that the worker can steal the reward without leaving behind evidence of cheating.</p><p>Technical insights. At a technical level, our puzzle achieves the aforementioned guarantees through two main insights: P1: We craft our puzzle such that if a worker is doing a large part of the mining computation, it must possess a sufficiently large part of a "signing key" such that it can later sign over the reward to its own public key -effectively stealing the award from the pool operator; P2: We offer a zero-knowledge spending option, such that a worker can spend the stolen reward in a way that reveals no information (including potential evidence that can be used to implicate itself). As a technical stepping stone, we formulate a weaker notion of our puzzle referred to as a weakly nonoutsourceable puzzle. A weakly nonoutsourceable puzzle essentially guarantees property P1 above, but does not ensure property P2. As a quick roadmap, our plan is to first construct a weakly nonoutsourceable puzzle, and from there we devise a generic zero-knowledge transformation to compile a weakly nonoutsourceable puzzle into a strongly nonoutsourceable one. It turns out that a weakly nonoutsourceable puzzle is the implicit security notion adopted by the recent work of Permacoin <ref type="bibr" target="#b27">[29]</ref> but without being formalized there. In Section 6, we argue that weakly nonoutsourceable puzzles alone are inadequate to defeat mining coalitions, and in particular hosted mining.</p><p>Implementation and practical performance. We show implementation and evaluation results to demonstrate the practical performance of our puzzles. Based on an instantiation using the succinct zero-knowledge option of Libsnark <ref type="bibr" target="#b4">[5]</ref>, we show that it would take a cheating worker only 14 seconds (using approximately a thousand parallel cores) to successfully steal a block reward. Further, stealing a block's reward in zero knowledge consumes only $10 worth of Amazon AWS compute-time, which is very small in comparison with the block's reward -roughly $8,750, based on Bitcoin's current market price. Clearly this provides a sufficiently strong deterrent against mining coalitions. Note also that this zeroknowledge spending option is not normally incurred, since honest miners can simply adopt a cheap plaintext spending option whose cost is insignificant (see <ref type="bibr">Section 6)</ref>. For both the zero-knowledge and the cheap plaintext spending options, the block verification overhead is insignificant (at most 1.7 seconds) in comparison with the present Bitcoin epoch length (roughly 10 minutes).</p><p>Deployment considerations. For our nonoutsourceable puzzles to be practically deployed, it is also important to address several additional challenges, such as how to still allow miners to reduce mining uncertainty (i.e., the positive effects of mining pools), and how to simultaneously address various other design goals such as ASIC resistance, and lightweight clients. We give detailed explanations to address these practical issues related to deployment (Section 7.3). Notably, inspired by the design of state lottery games, we propose a new, multi-tier reward system that allows us to achieve the best of both worlds: ensure non-outsourceability of puzzles, and meanwhile allow smaller players to reduce payoff variance.</p><p>Community demand and importance of formal security. The community's demand for a nonoutsourceable puzzle is also seen in the emergence of new altcoins <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b39">41]</ref> that (plan to) adopt their own home-baked versions of nonoutsourceable puzzles. Their solutions, however, offer only weak nonoutsourceability, and do not provide any formal guarantees. The existence of these custom constructions further motivates our efforts, and demonstrates that it is non-trivial to both formalize the security notions as well as design constructions with provable security. To date, our work provides the only formally-founded solution, as well as the first strongly nonoutsourceable puzzle construction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">BITCOIN BACKGROUND</head><p>We define puzzles and nonoutsourceable puzzles as an independent concept, abstracting away the less relevant details about the Bitcoin protocol itself. Later, however, we will discuss how the puzzles we introduce can be integrated into a Bitcoin-like distributed digital currency. For this reason, as well as to understand the motivation behind our formal definitions, we first present some additional background on Bitcoin and its use of computational puzzles. For a more thorough explanation of the Bitcoin protocol, we refer the readers to <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b30">32]</ref>.</p><p>Puzzles, rewards, and epochs. In Bitcoin, new money is printed at a predictable rate, through a distributed coin-minting process. At the time of writing, roughly speaking, 25 bitcoins are minted every 10 minutes (referred to as an epoch) on average. When an epoch begins, a public puzzle instance is generated by computing an upto-date hash of the global transaction log (called the "blockchain"). Then, Bitcoin nodes race to solve this epoch's puzzle. Whoever first finds an eligible solution to the puzzle can claim the newly minted coins corresponding to this epoch.</p><p>In slightly more detail, miners start with the puzzle instance puz, and construct a payload m which contains (a tree hash over) the miners public key and a new set of transaction to commit to the log during this epoch. He then searches for a nonce r such that H(puz m r) &lt; 2 λ-d , where H : {0, 1} * → {0, 1} λ is a hash function and d is a difficulty parameter. The difficulty parameter is adjusted according to the total amount of computational resources devoted to mining to ensure that each epoch lasts 10 minutes on average.</p><p>In Section 4, we formally define a generalization of Bitcoin's puzzle called scratch-off puzzles. More detail about the original Bitcoin puzzle construction can found in the full online version of our paper.</p><p>Consensus mechanism. Bitcoin nodes reach consensus on the history of transactions by having nodes accept the blockchain with the largest total difficulty. Roughly speaking, this defeats history revision attacks, since to revise history would involve computing a blockchain that is more difficult than the known good chain. An adversary must therefore possess a significant fraction of the total computational resources to successfully race against the rest of the network in extending the chain.</p><p>Bitcoin is novel in its use of computational puzzles as part of a consensus protocol for anonymous networks without any preestablished PKI. A related approach was earlier proposed by Aspnes et al. <ref type="bibr" target="#b1">[2]</ref>, although their network model nonetheless retained a strong assumption about pre-established point-to-point channels.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">SCRATCH-OFF PUZZLES</head><p>As introduced earlier, the Bitcoin protocol is built around a moderately hard computational puzzle. Bitcoin miners compete to solve these puzzles, and whoever solves a puzzle first in each epoch receives a reward. As there is no shortcut to solving this puzzle, for an attacker to dominate the network would require the attacker to expend more computational resources than the rest of the honest participants combined. Although the Bitcoin puzzle is commonly referred to as a proof-of-work puzzle, the requirements of the puzzle are somewhat different than existing definitions for proof-ofwork puzzles <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b14">16,</ref><ref type="bibr" target="#b19">21,</ref><ref type="bibr" target="#b40">42]</ref>.</p><p>Before proceeding with our main contribution of nonoutsourceable puzzles, we first provide a formal definition of the basic requirements of the Bitcoin puzzle, which we call a scratch-off puzzle. <ref type="foot" target="#foot_0">2</ref> In particular, while a traditional proof-of-work puzzle <ref type="bibr" target="#b19">[21]</ref> need only be solvable by a single sequential computation, a scratchoff puzzle must be solvable by several concurrent non-communicating entities.</p><p>In what follows, we let λ denote a security parameter. A scratchoff puzzle is parameterized by parameters (t, µ, d, t0) where, informally speaking, t denotes the amount of work needed to attempt a single puzzle solution, µ refers to the maximum amount by which an adversary can speed up the process of finding solutions, d affects the average number of attempts to find a solution, and t0 denotes the initialiazation overhead of the algorithm. We typically assume that t0 Intuitively, the honest Work algorithm makes t unit scratch attempts, and each attempt has probability 2 -d of finding a winning ticket, where d is called the puzzle's difficulty parameter. For simplicity, we will henceforth use the notation</p><formula xml:id="formula_0">2 d t,</formula><formula xml:id="formula_1">ζ(t, d) := 1 -(1 -2 -d ) t</formula><p>to refer to the probability of finding a winning ticket using t scratch attempts. For technical reasons that will become apparent later, we additionally define the shorthand ζ + (t, d) := ζ(t + 1, d). For the remainder of the paper, we assume that the puzzle's difficulty parameter d is fixed, hence we omit the d and write ζ(t) and ζ + (t) for simplicity. We also define the algorithm WorkTillSuccess(puz, m) as Work(puz, m, ∞); i.e., this algorithm runs until it finds a winning ticket for the given instance and payload.</p><p>A scratch-off puzzle must satisfy three requirements: 1. Correctness. For any (puz, m, t), if Work(puz, m, t) outputs ticket = ⊥, then Verify(puz, m, ticket) = 1. 2. Feasibility and parallelizability. Solving a scratch-off puzzle is feasible, and can be parallelized. More formally, for any = poly(λ), for any t1, t2, . . . , t = poly(λ), let t := i∈[ ] ti.</p><formula xml:id="formula_2">Pr     puz ← G(1 λ ), m ← {0, 1} λ , ∀i ∈ [ ] : ticketi ← Work(puz, m, ti) : ∃i ∈ [ ] : Verify(puz, m, ticketi)     ≥ ζ(t) -negl(λ).</formula><p>Intuitively </p><formula xml:id="formula_3">Pr   puz ← G(1 λ ), (m, ticket) ← A(puz) : Verify(puz, m, ticket) = 1   ≤ ζ + (µt) ± negl(λ). Note that ζ + (t) = 1-(1-2 -d ) t+1</formula><p>is roughly the probability of outputting a winning ticket after t unit scratch attempts, though we additionally allow the adversary to make a final guess at the end (as in <ref type="bibr" target="#b40">[42]</ref>), and hence the t + 1 in the exponent instead of just t. Ideally, we would like the compressibility factor µ to be as close to 1 as possible. When µ = 1, the honest Work algorithm is the optimal way to solve a puzzle. This definition implies, in particular, that solutions to previous puzzles do not help in solving a freshly generated puzzle unseen ahead of time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Non-Transferability</head><p>For a practical scheme we could integrate into Bitcoin, we should require that the payload of a ticket is non-transferable, in the following sense: if an honest party publishes a ticket attributed to a payload m (e.g., containing a public key belonging to the party to whom the reward must be paid), the adversary should not gain any advantage in obtaining a puzzle solution attributed to some different payload m * for the same puz. This is because in Bitcoin, each epoch is defined by a globally known, unique puzzle instance puz; at most one winning ticket for puz and a payload message is accepted into the blockchain; and a user who solves a puzzle only receives the reward if their message is the one that is attributed. If an adversary can easily modify a victim's winning ticket to be attributed to a different payload of its choice, then the adversary can listen for when the victim's ticket is first announced in the network, and then immediately start propagating the modified ticket (e.g., containing its own public key for the reward payment) and attempt to outrace the victim. It is possible that the network will now deem the adversary as the winner of this epoch-this is especially true if the adversary has better network connectivity than the victim (as described in <ref type="bibr" target="#b16">[18]</ref>). For simplicity in developing our constructions and nonoutsourceable definition, we define this non-transferability requirement separately below. Intuitively, non-transferability means that seeing a puzzle solution output by an honest party does not help noticeably in producing a solution attributed to a different payload m * . DEFINITION 2. Let δ be a nonnegative function of . A scratchoff puzzle is δ-non-transferable if it additionally satisfies the following property:</p><p>For any = poly(λ), and for any adversary A taking t • t steps,</p><formula xml:id="formula_4">Pr      puz ← G(1 λ ) m 1 , m 2 , . . . , m ← A(1 λ ) ∀i ∈ [ ] : ticket i ← WorkTillSuccess(puz, m i ), (puz, m * , ticket * ) ← A(puz, {m i , ticket i } i=1 ) : Verify(puz, ticket * , m * ) ∧ (∀i ∈ [ ] : m * = m i )      ≤ ζ + ((µ + δ)t) + negl(λ)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">OUTSOURCED MINING AND WEAKLY NONOUTSOURCEABLE PUZZLES</head><p>The Bitcoin scratch-off puzzle described in the previous section is amenable to secure outsourcing, in the sense that it is possible for one party (the worker) to perform mining work for the benefit of another (the pool operator) and to prove to the pool operator that the work done can only benefit the pool operator.</p><p>To give a specific example, let m be the public key of the pool operator; if the worker performs 2 d scratch attempts, on average it will have found at least one value r such that H(puz m r) &lt; 2 λ-d . The value r can be presented to the pool operator as a "share" (since it represents a portion of the expected work needed to find a solution); intuitively, any such work associated with m cannot be reused for any other m * = m. This scheme is an essential component of nearly every Bitcoin mining pool to date <ref type="bibr" target="#b37">[39]</ref>; the mining pool operator chooses the payload m, and mining participants are required to present shares associated with m in order to receive participation credit. The rise of large, centralized mining pools is due in large part to the effectiveness of this mechanism.</p><p>We now formalize a generalization of this outsourcing protocol, and then proceed to construct puzzles that are not amenable to outsourcing (i.e., for which no effective outsourcing protocol exists).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Notation and Terminology</head><p>Pool operator and Worker. We use the terminology pool operator and worker referring respectively to the party outsourcing the mining computation and the party performing the mining computation. While this terminology is natural for describing mining pools, we stress that our results are intended to simultaneously discourage both mining pools and hosted mining services. In the case of hosted mining, the roles are roughly swapped; the cloud server performs the mining work, and the individuals who hire the service receive the benefit and must be convinced the work is performed correctly. We use this notation since mining pools are more well-known and widely used today, and therefore we expect the mining-pool oriented terminology to be more familiar and accessible.</p><p>Protocol executions. A protocol is defined by two algorithms S and C, where S denotes the (honest) worker, and C the (honest) pool operator. We use the notation (oS ; oC) ← (S, C) to mean that a pair of interactive Turing Machines S and C are executed, with oS the output of S, and oC the output of C.</p><p>In this paper we assume the pool operator executes the protocol program C correctly, but the worker may deviate arbitrarily. <ref type="foot" target="#foot_1">3</ref>We use the notation (A, C) to denote an execution between a malicious worker A and an honest pool operator C. Note that protocol definition always uses the honest algorithms, i.e., (S, C) denotes a protocol or an honest execution; whereas (A, C) represents an execution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Definitions</head><p>Outsourcing protocol. We now define a generalization of outsourced mining protocols, encompassing both mining pools and hosted mining services. Our definition of outsourcing protocol is broad -it captures any form of protocol where the pool operator and worker may communicate as interactive Turing Machines, and at the end, the pool operator may obtain a winning ticket with some probability. The protocol is parametrized by three parameters tC, tS , and te, which roughly models the pool operator's work, honest worker's work, and the "effective" amount of work during the protocol. DEFINITION 3. A (tS , tC, te)-outsourcing protocol for scratchoff puzzle (G, Work, Verify), where te &lt; tS + tC and tc &lt; te, is a two-party protocol, (S, C), such that • The pool operator's input is puz, and the worker's input is ⊥.</p><p>• The pool operator C runs in at most tC • t time, and the worker S in at most tS • t time. • C outputs a tuple (ticket, m) at the end, where ticket is either a winning ticket for payload m or ticket = ⊥. Further, when interacting with an honest S, C outputs a ticket = ⊥ with probability at least ζ(te) -negl(λ). Formally,</p><formula xml:id="formula_5">Pr   puz ← G(1 λ ) (•; ticket, m) ← (S, C(puz)) : Verify(puz, m, ticket)   ≥ ζ(te) -negl(λ).</formula><p>The parameter te is referred to as the effective billable work, because the protocol (S, C) has the success probability of performing te unit scratch attempts. Note that it must be the case that te &lt; µ(tS + tC). Intuitively, an outsourcing protocol allows effective outsourcing of work by the pool operator if te tC. Note that this definition does not specify how the payload m is chosen. In typical Bitcoin mining pools, the pool operator chooses m so that it contains the pool operator's public key. However, our definition also includes schemes where m is jointly computed during interaction between S and C, for example.</p><p>Weak nonoutsourceability. So far, we have formally defined what an outsourcing protocol is. Roughly speaking, an outsourcing protocol generally captures any possible form of contractual agreement between the pool operator and the worker. The outsource protocol defines exactly what the worker has promised to do for the pool operator, i.e., the "honest" worker behavior. If a worker is malicious, it need not follow this honest prescribed behavior. The notion of weak non-outsourceability requires that no matter what the prescribed contractual agreement is between the pool operator and the worker-as long as this agreement "effectively" outsources work to the worker-there exists an adversarial worker that can always steal the pool operator's ticket should the pool operator find a winning ticket during the protocol. Effectiveness is intuitively captured by how much effective work the worker performs vs. the work performed by the pool operator in the honest protocol. Note that there always exists a trivial, ineffective outsourcing protocol, where the pool operator always performs all the work by itself -in this case, a malicious worker will not be able to steal the ticket. Therefore, the weak non-outsourceability definition is parametrized by the effectiveness of the honest outsourcing protocol.</p><p>More specifically, the definition says that the adversarial worker can generate a winning ticket associated with a payload of its own choice, over which the pool operator has no influence. In a Bitcoinlike application, a natural choice is for an adversarial worker to replace the payload with a public key it owns (potentially a pseudonym), such that it can later spend the stolen awards. Based on this intuition, we now formally define the notion of a weakly nonoutsourceable scratch-off puzzle. DEFINITION 4. A scratch-off-puzzle is (tS , tC, te, α, ps)weakly nonoutsourceable if for every (tS , tC, te)-outsourcing protocol (S, C), there exists an adversary A that runs in time at most tS • t + α, such that:</p><formula xml:id="formula_6">• Let m * $</formula><p>← {0, 1} λ . Then, at the end of an execution (A(puz, m * ), C(puz)), the probability that A outputs a winning ticket for payload m * is at least psζ(te). Formally,</p><formula xml:id="formula_7">Pr   puz ← G(1 λ ); m * $ ← {0, 1} λ (ticket * ; ticket, m) ← (A(puz, m * ), C(puz)) : Verify(puz, ticket * , m * )   ≥ psζ(te).</formula><p>• Let view h denote the pool operator's view in an execution with the honest worker (S, C(puz)), and let view * denote the pool operator's view in an execution with the adversary (A(puz, m * ), C(puz)). Then,</p><formula xml:id="formula_8">view * c ≡ view h .</formula><p>When C interacts with A, the view of the pool operator view * is computationally indistinguishable from when interacting with an honest S.</p><p>Later, when proving that puzzles are weakly nonoutsourceable, we typically construct an adversary A that runs the honest protocol S until it finds a ticket for m, and then transforms the ticket into one for m * with probability ps. For this reason, we refer to the adversary A in the above definition as a stealing adversary for protocol (S, C). In practice, we would like α to be small, and ps ≤ 1 to be large, i.e., A's run-time is not much different from that of the honest worker, but A can steal a ticket with high probability.</p><p>If the pool operator outputs a valid ticket for m and the worker outputs a valid ticket for m * , then there is a race to determine which ticket is accepted by the Bitcoin network and earns a reward. Since the µ-incompressibility of the scratch-off puzzle guarantees the probability of generating a winning ticket associated with either m or m * is bounded above by ζ + (µ(tS + tC)), the probability of the pool operator outputting a ticket -but not the worker -is bounded above by ζ + (µ(tS + tC)) -psζ(te).</p><p>Note that weak nonoutsourceability does not imply that the puzzle is transferable. In other words, a puzzle can be simultaneously non-transferable and weakly nonoutsourceable. This is so because the stealing adversary A may rely on its view of the entire outsourcing protocol when stealing the ticket for its own payload m * , whereas the adversary for the non-transferability game is only given winning tickets as input (but no protocol views).</p><p>As we mentioned in the beginning of this section, the prevalence of Bitcoin mining pools can be attributed in part to the effective outsourcing protocol used to coordinate untrusted pool members -in other words, the Bitcoin puzzle is not nonoutsourceable. We state and prove a theorem to this effect in the full online version of this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">A WEAKLY NONOUTSOURCEABLE PUZZLE</head><p>In this section, we describe a weakly nonoutsourceable construction based on a Merkle-hash tree construction. We prove that our construction satisfies weak nonoutsourceability (for a reasonable choice of parameters) in the random oracle model. Informally, our construction achieves the following:</p><p>For any outsourcing protocol that can effectively outsource a fixed constant fraction of the effective work, an adversarial worker will be able to steal the puzzle with at least constant probability.</p><p>Our construction is inspired by the Floating Preimage Signature (FPS) scheme used in Permacoin <ref type="bibr" target="#b27">[29]</ref>, which is a puzzle integrated with a proof-of-retrievablity. However, Permacoin <ref type="bibr" target="#b27">[29]</ref> only described the issue of nonoutsourceability informally, and made no attempt to formalize the definition nor to discuss nonoutsourceability beyond the context of archival storage. Our construction is formally defined in our online full version <ref type="bibr" target="#b28">[30]</ref>, but here we provide an informal explanation of the intuition behind it.</p><p>Intuition. To solve a puzzle, a node first builds a Merkle tree with random values at the leaves; denote the root by digest. Then the node repeatedly samples a random value r, computes h = H(puz||r||digest), and uses h to select q leaves of the Merkle tree and their corresponding branches (i.e., the corresponding Merkle proofs). It then hashes those branches (along with puz and r) and checks to see if the result is less than 2 λ-d .</p><p>Once successful, the node has a value r what was "difficult" to find, but is not yet bound to the payload message m. To effect such binding, a "signing step" is performed in which h = H(puz||m||digest) is used to select a set of 4q leaf nodes (i.e., using h a seed to a pseudorandom number generator). Any q of these leaves, along with their corresponding branches, constitute a signature for m and complete a winning ticket.</p><p>Intuitively, this puzzle is weakly nonoutsourceable because in order for the worker to perform scratch attempts, it must • either know a large fraction of the leaves and branches of the Merkle tree, in which case it will be able to sign an arbitrary payload m * with high probability -by revealing q out of the 4q leaves (and their corresponding branches) selected by m * , • or incur a large amount of overhead, due to aborting scratch attempts for which it does not know the necessary leaves and branches, • or interact with the pool operator frequently, in which case the pool operator performs a significant fraction of the total number of random oracle queries.</p><p>To formally prove this construction is weakly nonoutsourceable, we assume that the cost of the Work algorithm is dominated by calls made to random oracles. Thus, for simplicity, in the following theorems we equate the running time with the number of calls to the random oracle. However, the theorem can be easily generalized (i.e., relaxing by a constant factor) as long as the cost of the rest of the computation is only a constant fraction of the random-oracle calls.</p><p>The construction sketched above, and formally defined in our online full version, is a scratch-off puzzle. We defer this proof to our online full version <ref type="bibr" target="#b28">[30]</ref>.</p><p>Let q, q = O(λ). Let the number of leaves L ≥ q + 8q . Suppose d &gt; 10 and te • 2 -d &lt; 1/2. Under the aforementioned cost model, the above construction is a (tS , tC, te, α, ps) weakly nonoutsourceable puzzle, for any 0 &lt; γ &lt; 1 s.t. tC &lt; γte, ps &gt; 1 2 (1 -γ) -negl(λ), and α = O(λ 2 ); and is 0-non-transferable. In other words, if the pool operator's work tC is a not a significant fraction of te, i.e., work is effectively outsourced, then an adversarial worker will be able to steal the pool operator's ticket with a reasonably big probability, and without too much additional work than the honest worker.</p><p>The proof that this puzzle is weakly nonoutsourceable can be found in our online full version <ref type="bibr" target="#b28">[30]</ref>, but we sketch the main idea here. Informally, to "effectively" outsource work to the worker, the worker must know more than a constant fraction (say, 1/3) of the leaves before calling the random oracle to determine whether an attempt is successful. However, if the worker knows more than 1/3 fraction of the leaves, due to a simple Chernoff bound, it will be able to easily steal the solution should one be found. To make this argument formally is more intricate. For lack of space, we defer (to the full online version of our paper) the proof that this puzzle is non-transferable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">STRONGLY NONOUTSOURCEABLE PUZZLES</head><p>In the previous section, we formally defined and constructed a scheme for weakly nonoutsourceable puzzles, which ensure that for any "effective" outsourcing protocol, there exists an adversarial worker that can steal the pool operator's winning ticket with significant probability, should a winning ticket be found. This can help deter outsourcing when individuals are expected to behave selfishly.</p><p>One critical drawback of the weakly nonoutsourceable scheme (and, indeed, of Permacoin <ref type="bibr" target="#b27">[29]</ref>) is that a stealing adversary may be detected when he spends his stolen reward, and thus might be held accountable through some external means, such as legal prosecution or a tainted public reputation.</p><p>For example, a simple detection mechanism would be for the pool operator and worker to agree on a λ/2-bit prefix of the nonce space to serve as a watermark. The worker can mine by randomly choosing the remaining λ/2-bit suffix, but the pool operator only accepts evidence of mining work bearing this watermark. If the worker publishes a stolen puzzle solution, the watermark would be easily detectable.</p><p>Ideally, we should enable the stealing adversary to evade detection and leave no incriminating trail of evidence. Therefore, in this section, we define a "strongly nonoutsourceable" puzzle, which has the additional requirement that a stolen ticket cannot be distinguished from a ticket produced through independent effort. DEFINITION 5. A puzzle is (tS , tC, te, α, ps)strongly nonoutsourceable if it is (tS , tC, te, α, ps)-weakly nonoutsourceable, and additionally the following holds:</p><p>For any (tS , tC, te)-outsourcing protocol (S, C), there exists an adversary A for the protocol such that the stolen ticket output by A for payload m * is computationally indistinguishable from a honestly computed ticket for m * , even given the pool operator's view in the execution (A, C). Formally, let puz ← G(1 λ ), let m * $ ← {0, 1} λ . Consider a protocol execution (A(puz, m * ), C(puz)): let view * denote the pool operator C's view and ticket * the stolen Let NIZK be a non-interactive zero-knowledge proof system. Also assume that E = (Key, Enc, Dec) is a CPA-secure public-key encryption scheme.</p><p>Let (G , Work , Verify ) be a weakly nonoutsourceable scratch-off puzzle scheme. We now construct a strongly nonoutsourceable puzzle scheme as below.</p><p>• G(1 λ ): Run the puzzle generation of the underlying scheme puz ← G (1 λ ). Let crs ← NIZK.Setup(1 λ ); and let (sk E , pk E ) ← E.Key(1 λ ). Output puz ← (puz , crs, pk E ) • Work(puz, m, t):</p><p>Parse puz := (puz , crs, pk E ). ticket ← Work (puz , m, t), Encrypt c ← Enc(pk E ; ticket ; r). Set π ← NIZK.Prove(crs, (c, m, pk E , puz ), (ticket , r)) for the following NP statement:</p><p>Verify (puz , m, ticket ) ∧ c = Enc(pk E ; ticket ; r) Return ticket := (c, π).</p><p>• Verify(puz, m, ticket);</p><p>Parse puz := (puz , crs, pk E ), and parse ticket as (c, π). Check that Verify(crs, (c, m, pk E , puz ), π) = 1. ticket output by A in the execution. Let ticket h denote an honestly generated ticket for m * , (ticket h := WorkTillSuccess(puz, m * )), and let view h denote the pool operator's view in the execution (S, C(puz)). Then,</p><formula xml:id="formula_9">(view * , ticket * ) c ≡ (view h , ticket h )</formula><p>Recall that in Bitcoin, the message payload m typically contains a Merkle root hash representing a set of new transactions to commit to the blockchain in this round, including the public key to which the reward is assigned. Thus to take advantage of the strongly nonoutsourceable puzzle, the stealing worker should bind its substituted payload m * to a freshly generated public key for which it knows the corresponding private key. It can then spend its stolen reward anonymously, for example by laundering the coins through a mixer <ref type="bibr" target="#b7">[8]</ref>.</p><p>In Figure <ref type="figure" target="#fig_0">1</ref>, we present a generic transformation that turns any weakly nonoutsourceable puzzle into a strongly nonoutsourceable puzzle. The strengthened puzzle is essentially a zero-knowledge extension of the original -a ticket for the strong puzzle is effectively a proof of the statement "I know a solution to the underlying puzzle."</p><p>If (GenKey , Work , Verify ) is a (tS , tC, te, α, ps) weakly nonoutsourceable puzzle, then the puzzle described in Figure <ref type="figure" target="#fig_0">1</ref> is a (tS , tC, te, α + tenc + tNIZK, ps -negl(λ)) strongly nonoutsourceable puzzle, where tenc + tNIZK is the maximum time required to compute the encryption and NIZK in the honest Work algorithm.</p><p>We next state a theorem that this generic transformation essentially preserves the non-transferability of the underlying puzzle. If the underlying puzzle (G , Work , Verify ) is δ -non-transferable, then the derived puzzle through the generic transformation is δ nontransferable for</p><formula xml:id="formula_10">µ + δ ≤ (µ + δ)t t • t + (tenc + tnizk)</formula><p>where tenc and tnizk are the time for performing each encryption and NIZK proof respectively.</p><p>Again, due to space restrictions, we defer the proof of this theorem to the full online version of our paper.</p><p>Cheap plaintext option. Although we have shown it is plausible for a stealing worker (with parallel resources) to compute the zeroknowledge proofs, this would place an undue burden on honest independent miners. However, it is possible to modify our generic transformation so that there are two ways to claim a ticket: the first is with a zero-knowledge proof as described, while the second is simply by revealing a plaintext winning ticket for the underlying weakly nonoutsourceable puzzle.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">IMPLEMENTATION AND MICRO-BENCHMARKS</head><p>In order to demonstrate the practicality of our schemes, we implemented both our weakly nonoutsourceable and strongly nonoutsourceable puzzle schemes and provide benchmark results below.</p><p>Metrics. We are concerned with two main performance criteria. First, the size of a ticket and cost of verifying a ticket should be minimal, since each participant on the network is expected to verify every ticket independently. Second, in order for our scheme to be an effective deterrent, the cost and latency required to "steal" a ticket should be low enough that it is at least plausible for an outsourcing worker to compute a stolen ticket and propagate it throughout the network before any other solution is found.</p><p>When comparing the verification cost of our schemes to that of the current Bitcoin protocol, we include both the cost due to the puzzle itself, as well as the total cost of validating a block including transactions. At present, there are over 400 transactions per block on average; <ref type="foot" target="#foot_2">4</ref> we assume each transaction carries at least 1 ECDSA signature that must be verified. In general, the computational cost of validating blocks in Bitcoin is largely dominated by verifying the ECDSA signatures in transactions rather than verifying puzzle solutions. We measured that the time to verify an ECDSA signature on a 2.4GHZ Intel CPU is 1.7ms. <ref type="foot" target="#foot_3">5</ref> On average, at the time of writing, a block contains about 350 kilobytes of data and 600 transactions, each with an average of two signatures. <ref type="foot" target="#foot_4">6</ref></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">Our Weakly Nonoutsourceable Puzzle</head><p>The weakly nonoutsourceable puzzle is straightforward to implement, and its overhead relative to the Bitcoin puzzle consists only of λ log λ additional hashes; we implemented this in unoptimized Python and discuss its performance later on. In contrast, the strongly nonoutsourceable puzzle requires much more care in implementation due to the NIZK proof, which we will describe shortly.</p><p>We used the SHA-1 hash function throughout our implementation, since this has a relatively efficient implementation as an arithmetic circuit <ref type="bibr" target="#b34">[36]</ref>. We restricted our focus to the following puzzle parameters: the signature tree consists of 2 h = 2 10 leaves, and the number of leaves revealed during a scratch attempt and a claim is q = q = 10. This provides roughly 50 bits of security for the non-transferability property.</p><p>Performance results. In Table <ref type="table" target="#tab_2">1</ref> (first and second rows), we show that if we replace Bitcoin's puzzle with our weakly nonoutsourceable puzzle, the slowdown for the block verification operation will be only 2%. More specifically, while our puzzle verification itself is over a thousand times more expensive than the Bitcoin puzzle, puzzle verification only accounts for a very small percentage of the overall verifier time. Therefore, the overall performance slowdown is insignificant for practical purposes. Likewise, while the size of the ticket in our scheme is almost a hundred times larger than that of Bitcoin, the ticket is a small fraction of the total size of a block when transactions are included.</p><p>An adversarial worker can steal a ticket in a marginal amount of time (only one additional hash in expectation, for example, assuming the worker knows at least a third of the Merkle tree branches used during scratch attempts). This cost is insignificant compared to the expected time for solving a puzzle.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">Our Strongly Nonoutsourceable Puzzle</head><p>We next describe more details of our instantiation and implementation of our strongly nonoutsourceable puzzle, followed by evaluation.</p><p>We implemented our puzzle twice, each time using a different NIZK libraries: Pinocchio <ref type="bibr" target="#b34">[36]</ref> and Libsnark <ref type="bibr" target="#b4">[5]</ref>. Both are implementations of a generic <ref type="bibr" target="#b18">[20]</ref> NIZK scheme. 7 Pinocchio includes a compiler that generates an arithmetic circuit from highlevel C code, while Libsnark <ref type="bibr" target="#b4">[5]</ref> provides a library C++ for composing systems of equations. We used a combination of hand-tuned and generated-from-C-code arithmetic circuits, and developed an adapter for Libsnark to use Pinocchio's arithmetic circuit files.</p><p>In the full online version of our paper we discuss a concrete parameterization of our scheme. We implemented an optimization to improve the parallel running time of the prover. Essentially, we break the overall statement into many substatements, all of which can be proven concurrently; the overall proof consists of a proof for one "Type II" statement, and proofs for some number of "Type I" statements. The number of Type I statements is determined by a parameter C (smaller C means a larger number of smaller circuits). We discuss this in more detail in the full online version.</p><p>Performance results. The prover and verifier costs for our strongly nonoutsourceable implementation are presented in Tables <ref type="table" target="#tab_3">1and 2.</ref> Each of the bottom four rows of Table <ref type="table" target="#tab_2">1</ref> and top four rows of Table 2 corresponds to a different setting of the parameter C, the number of 160-bit blocks (of the underlying ticket) checked by each substatement (smaller values of C indicate higher degrees of parallelism). The total number of substatements required (#) is reported along with computing time per circuit for the prover and verifier. We also report the total verification time over all the statements, as well as the total proof size. Note that our benchmarks are for a sequential verifier, although verification could also be parallelized. The bottom row is for the second type of statement, which does not depend on C. Due to the longer time required to compute these proofs, the quantities reported are averaged over only three trials.</p><p>The reader may immediately notice the vast improvement in prover performance using Libsnark rather than Pinocchio for our implementation; in particular the speedup is much greater than previous reports (i.e, several orders of magnitude vs one order of magnitude) <ref type="bibr" target="#b4">[5]</ref>. This is readily explained with reference to the highly sequential nature of our statements, which yields deep and highlyconnected circuits. Profiling reveals that the cost of generating our proofs in Pinocchio is dominated by the polynomial interpolation 7 Libsnark <ref type="bibr" target="#b4">[5]</ref> implements several optimizations over the original GGPR <ref type="bibr" target="#b18">[20]</ref> scheme. The version we used includes an optimization that turns out to be unsound. <ref type="bibr" target="#b33">[35]</ref> Libsnark has since been patched to restore soundness; the patch is reported only to incur an overhead of 0.007% on typical circuits, hence we report our original figures. step, which greatly exceeds that of simpler circuits with comparable number of gates <ref type="bibr" target="#b34">[36]</ref>. Keeping in mind our goal is to prove it is plausible for a worker to produce stolen ticket proof with low latency, we believe it is reasonable to assume that such a worker has access to parallel computing resources. Using Libsnark, the combination of our statementlevel parallelism and the parallel SNARK implementation leads to proof times in under 15 seconds at the C = 2 setting. Since the average time between puzzle solutions in the Bitcoin network is 10 minutes, this can be a wholly plausible deterrent. At this setting, verification of an entire proof takes under one second. Since approximately 144 Bitcoin puzzle solutions are produced each day, it would take approximately two minutes for a single-threaded verifier to validate a day's worth of puzzle solutions.</p><p>Assuming computational power can be rented at $1.68 per hour (based on Amazon EC2 prices for the c3.8xlarge used in our trials, which provides 32 cores), it would cost an attacker less than $10 in total to produce a stolen ticket proof within 20 seconds. This is vastly less than reward for a puzzle solution, which at the current time is approximately $8,750.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3">Cryptocurrency Integration</head><p>We now discuss several practical aspects of integrating nonoutsourceables puzzles within existing cryptocurrency designs.</p><p>Integrating the puzzle with Bitcoin-like cryptocurrencies. In our definitions, we indicate that GenPuz(1 λ ) must be a random function that generates a puzzle instance, and in all of our schemes GenPuz(1 λ ) simply returns a uniform random string. However, in the actual Bitcoin protocol, the next puzzle instance is generated by applying a hash function to the solution of the previous puzzle. Our approach is likewise to determine each next puzzle instance from the hash of the previous solution and message, puz := H(puz m ticket).</p><p>Further Integration Issues. In the full online version of our paper, we further discuss how our nonoutsourceable puzzles can be combined with other proposals for complementary properties, such as faster blocks <ref type="bibr" target="#b24">[26,</ref><ref type="bibr" target="#b38">40]</ref>, support for lightweight mobile clients <ref type="bibr" target="#b30">[32]</ref>, and either ASIC-resistance <ref type="bibr" target="#b41">[43]</ref> or backward-compatibility with existing mining equipment <ref type="bibr" target="#b15">[17]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">MULTI-TIER BLOCK REWARDS</head><p>We want to arrive at a cryptocurrency design that simultaneously discourages centralized mining pools and hosted mining services, yet encourages participation from individual miners and provides similar overall functionality and security as Bitcoin today. To achieve this, there are two major remaining challenges.</p><p>Challenge 1: Lower variance rewards for individual miners. Individual miners should not have to wait an unreasonable amount of time to earn a Bitcoin reward. Intuitively, we can achieve this by decreasing the average time between blocks, so that rewards are given out much more frequently. We are constrained, however, by the latency of network propagation, and the time it takes to compute the zero knowledge proofs used in the strongly nonoutsourceable puzzle.</p><p>Challenge 2: Discourage statistical enforcement over time. Our definition of nonoutsourceable puzzles essentially describes a oneshot game, and ensures that the worker can steal a single puzzle solution from the pool operator and evade detection. However, this definition does not immediately eliminate statistical enforcement techniques over time. For example, pool operators could monitor the output of a hosted service provider and punish it (e.g., through legal prosecution) if it underperforms significantly. Intuitively, we should address this by giving out larger rewards much less frquently, so that the worker can steal solutions over some reasonable timeframe and plausibly claim it was just unlucky.</p><p>Conflicting requirements. What we need is a reward structure that simultaneously answers the above challenges. Challenge 1 desires paying out small rewards rapidly, whereas Challenge 2 clearly favors paying out large rewards less frequently. Further, to satisfy Challenge 1, if we reduce the inter-block time to the order of seconds, we phase another challenge: since it takes at least 14 seconds to generate the zero-knowledge proof, it would be infeasible for a miner to steal a block this way. The miner could choose to steal the reward using the plaintext option, but since the reward at stake is low, the mining pool could require a small collateral deposit to discourage such blatant stealing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.1">Proposed Multi-Tier Reward Structure</head><p>We propose to satisfy both of these properties by designing a reward structure with multiple possible prizes. Our multi-tier design is inspired by the payoff structure of state lottery games, which often have several consolation prizes as well as large, less frequent jackpots <ref type="bibr" target="#b32">[34,</ref><ref type="bibr" target="#b36">38]</ref>. The effectiveness of such lotteries at encouraging wide participation has long been proven in practice. Our implicit assumption is that miners will tolerate a high-variance payoff overall, as long as they earn some reward fairly frequently.</p><p>In Table <ref type="table" target="#tab_4">3</ref>, we provide a concrete example of such a multi-tier reward schedule, the rationale for which we discuss below. Each attempt at solving a puzzle yields some chance of winning each of three possible prizes (in contrast with Bitcoin today, in which every block earns the same reward). The prizes are not only associated with different reward values, but also count with varying weight towards the blockchain "difficulty" scoring function. The first two columns indicate the average time between rewards of a given type, along with their relative frequency (adding up to 1). The middle two columns indicate the prize value (in btc), along with the realtive contribution to the total expected reward value (adding up to 1). Note that the overall expected payout rate is the same as in Bitcoin today (25btc every 10 minutes, on average). The final pair of columns indicates the blockchain difficulty weight associated with each reward type along with their expected relative contributions towards the overall difficulty of a blockchain (again, adding up to 1). Low-value consolation prize: provides low-variance rewards to solo-miners. The consolation prize is awarded the most frequently (e.g., once every three seconds). The prize is small, less than a tenth of a Bitcoin (≈$21 at the time of writing), but the small prizes contribute overall to 70% of the total expected value.</p><p>Medium-value main prize: ensures block confirmations arrive regularly. The medium-value prizes are necessary to ensure that the log of transactions approximately as quickly and securely as in Bitcoin. They are given out at the same rate as ordinary Bitcoin blocks; they carry a larger reward than the low-value prize, but contribute much less to the overall expected payout. However, the medium-value blocks account for nearly 75% of the total difficulty, and a miner who finds one of these blocks has an average of 7.5 minutes to propagate her solution before it would become stale. The 14 seconds it takes to compute a zero-knowledge proof is relatively small in comparison.</p><p>High-value jackpot: defends against statistical detection of cheating hosted mining services. The jackpot prize is very rare, and accounts for a small, yet disproportionately large fraction of the total expected value. The role of this reward is to engender distrust of hosted mining providers; they would profit greatly by stealing these rewards, but it would be hard to obtain statistical evidence that they have done so.</p><p>Implementing Multi-Tier Rewards. It is straightforward to implement multi-tier rewards on top of any known scratch-off puzzle constructions (i.e., Bitcoin or our nonoutsourceable constructions). Recall that in these constructions, the critical step of a mnining attempt is to compare a hash value to a threshold, H(puz ticket) ? &lt; T , where the threshold T = 2 λ-d is parameterized by the difficulty d. To implement three reward tiers, we introduce two additional thresholds, Tmedium &lt; Thigh &lt; T . If the hash value lies between Thigh and T , then this attempt earns a high-value reward; if it is between Tmedium and Thigh it earns a medium-value reward; and otherwise it earns a low-value reward. These thresholds must be set according to the desired frequency of each reward type.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.2">Economic Analysis of Multi-Tier Rewards</head><p>We argue that our proposed reward structure would simultaneously satisfy the necessary properties.</p><p>First, our scheme offers small payoff variance. At the time of writing, the overall Bitcoin hashpower is over 3.5 • 10 17 hashes per second. The most cost effective entry-level Bitcoin ASIC we know of is the 8.0 • 10 14 ASICMiner BE Tube, which costs $320. Using this device to solo-mine, the expected time to find a block would be over 8.3 years. However, under our proposed scheme and typical parameters, over a 60 day period, the mining rig mentioned earlier has a better than 98% chance of winning at least one of these prizes. Next we argue that the payoff structure is also effective at preventing temporal statistical detection. Suppose a large hosted mining provider controls 25% of the network hashpower. Under the original Bitcoin reward structure, it should expect to mine 6574 blocks during a six-month period, and the chance of it mining fewer than 6429 blocks (≈ 98%) is less than one in a thousand. Hence, it could expect steal at most 145 puzzle solutions (worth $900,000, at today's price) over this time period before being implicated with high confidence -and even less before generating considerable suspicion. On the other hand, under our proposed scheme, even if the service provider is honest, it has a better than 60% chance of failing to find any jackpot during the same time period. Thus if it does steal one, it would arouse no suspicion, yet the expected value of this strategy is over $4.1 million USD.</p><p>Finally, we explain that as in the strawman scheme, it is plausible that if miners joined pools requiring small collateral deposits that they would prefer not to defect when they find low-value blocks. However, since the low-value blocks account for only 25% of the blockchain's total difficulty, even if a coercer influences all the transactions in these blocks, this would be insufficient to enforce a blacklist policy, for example. The difficulty weight of the main prize is high enough to provide ample time to steal the puzzle solution (7.5 minutes) and adequate incentive to do so (thousands of dollars worth). Since these blocks account for 75% of the overall difficulty, pool members would be encouraged at least to steal these blocks. Note that the jackpot blocks count more towards the blockchain weight than the other blocks (so that a miner who finds a jackpot block has a long time window (45 minutes on average) before it becomes stale), but contributes very little to the total difficulty of a chain. This prevents an attacker from revising a large span of history by finding a single jackpot block.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.">DISCUSSION</head><p>We have proposed a technical countermeasure against the consolidation of mining power that threatens the decentralization of Bitcoin and other cryptocurrencies. Although we have presented a formal definition that captures the security guarantees of our construction and described how it can be practically integrated into a cryptocurrency, due to the difficulty involved in modifying an inuse cryptocurrency (i.e., via a "hard fork" upgrade <ref type="bibr" target="#b6">[7]</ref>) and the high stakes involved in cryptocurrencies generally, the bar for adopting a new design is set very high. Our work provides a significant step in this direction by providing a sound and practical approach to discouraging centralization. However, in order for our solution to be deployed we must provide a thorough and compelling argument that this solution is fully effective, preferable to all alternatives, and does not conflict with other aspects of the system. Towards this end, we address several typical objections we have encountered in the past, from academic reviewers and the Bitcoin community alike: "Mining pools are good because they lower the variance for solo miners. Therefore, nonoutsourceable puzzles are not wellmotivated." In Section 1 we describe the severe consequences that can occur due to the concentration of mining power -basically all purported security properties of decentralized cryptocurrencies can be broken if mining coalitions with significant mining power misbehave (and in some cases it may be in their best interest to misbehave <ref type="bibr" target="#b16">[18]</ref>). Further, our multi-tier reward system design (see Section 8.2) achieves the best of both worlds, (i.e., ensuring low variance for solo mining as well as discouraging mining coalitions).</p><p>"Can miners still use smart contracts or legal contracts to enforce mining coalitions in spite of the nonoutsourceable puzzles?" Our definition of nonoutsourceable puzzles prevents the enforcement of contractual mechanisms including smart contracts or legal contracts. An enforcement mechanism, such as seizing collateral deposits or legal prosecution, is only effective if it can be applied with few false positives. The worker can steal the puzzle solutions without being held accountable, since the zero-knowledge spending option ensures the worker can spend stolen coins without revealing any evidence that can later be used to implicate it.</p><p>"What about collecting statistical evidence cheating workers?" Suppose a pool operator monitors the puzzle production rate of a worker over time, to detect if the worker is potentially cheating. One enforcement mechanism might be for the pool to require that a worker submit a deposit to join, such that in case the worker is not producing solutions at the expected rate, the deposit can be confiscated and redistributed.</p><p>As mentioned earlier in Section 8.2, our puzzle definition is by nature a one-shot game. Although our nonoutsourceable puzzle alone does not prevent the collection of statistical evidence, in Section 8.2, we argued that by combining our puzzle with a multi-tier reward system, we effectively make it highly costly or unreliable to accumulate statistical evidence over time. In particular, a worker can opt to steal only the "jackpot prize" (which happens only infrequently but offers a large reward), while behaving honestly when it finds a "consolation prize" which is of much smaller amount but paid off at a frequent interval. Such an attack cannot be reliably detected within a reasonable of timeframe (e.g., several years).</p><p>"Can coalitions be prevented by other, simpler solutions that do not require zero knowledge proofs?" The Bitcoin community has put forth two main alternative approaches to ours. First, we could promote the use of P2Ppool and other forms of "responsible" mining, so that users can join pools without ceding full control of their resources to a central authority. This has been unsuccessful so far. At the time of writing, P2Pool accounts for less than 2% of the total hashpower; and while some pools support a protocol (called "getblocktemplate") that allows pool members to see the contents of the blocks they are asigned to work on (and, hence, could leave if they detect the pool is applying some disagreeable policy), the top six pools (which account for more than two thirds of the total hashpower) do not. A second approach is to monitor large pools and apply social pressure to limit their size. However, pools have been accused of hiding their bandwidth to avoid backlash. In any case, we make an analogy to coercion-resistance in electronic voting (see Section 10): although social deterrents to undesired beahvior may in some cases be effective, greater confidence can be derived from a technical and economic deterrent. "It's too late to change Bitcoin; and regardless, large miners wouldn't support this change." While we have described our design as a proposed modification to Bitcoin, this is primarily for ease of presentation; our design is also applicable as the basis for a new cryptocurrency, or as a modification to any of the hundreds of Bitcoin-like "altcoins" <ref type="bibr" target="#b6">[7]</ref> which compete with Bitcoin (though, at the time of writing, Bitcoin remains far-and-away the most popular). Indeed altcoins have already begun to experiment with (weak) nonoutsourceable puzzles.</p><p>It seems unlikely our proposed design will soon be adopted by Bitcoin. Due to the coordination involved and the risk of splintering the network, there is (understandably) considerable political resistance within the Bitcoin community to adopting "hard fork" protocol changes, except in extreme cases <ref type="bibr" target="#b6">[7]</ref>. However, such changes have occurred in the past, and could occcur again. Though miners are influential and it would be unwise to adopt a new policy that causes them to leave, they aren't unilaterally responsible for Bitcoin governance <ref type="bibr" target="#b6">[7]</ref>; instead stakeholders include payment processors and services, operators of "full nodes" that may not mine, and developers of popular clients. Additionally, as we mentioned in Section 7.3 and explain in detail in our extended online paper, our nonoutsourceable puzzle constructions can be made backward compatible with existing Bitcoin mining equipment, lessening the impact on established miners <ref type="bibr" target="#b15">[17]</ref>. Finally, even if our design is not adopted, the mere public knowledge of a viable coalition-resistant design alternative that the community could adopt -if necessary -may already serve as a deterrent against large coalitions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10.">RELATED WORK</head><p>Computational puzzles. Moderately hard computational puzzles, often referred to as "proofs of work," were originally proposed for the purpose of combating email spam <ref type="bibr" target="#b14">[16]</ref> (though this application is nowadays generally considered impractical <ref type="bibr" target="#b23">[25]</ref>). Most work on computational puzzles has focused instead on "client puzzles," which can be used to prevent denial-of-service attacks <ref type="bibr" target="#b21">[23]</ref>. Recently, several attempts have been made to provide formal security definitions for client puzzles <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b19">21,</ref><ref type="bibr" target="#b40">42]</ref>.</p><p>Theoretical and economic understanding of Bitcoin. Although a purely digital currency has been long sought by researchers <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr">14</ref>], Bitcoin's key insight is to frame the problem as a consensus protocol and to provide an incentive for users to participate. Although Bitcoin's security has initially been proven (informally) in the "honest majority" model <ref type="bibr" target="#b17">[19,</ref><ref type="bibr" target="#b29">31,</ref><ref type="bibr" target="#b30">32]</ref>, this assumption is unsatisfying since it says nothing about whether the incentive scheme indeed leads to an honest majority. An economic analysis of Bitcoin by Kroll et al. <ref type="bibr" target="#b22">[24]</ref> showed that honest participation in Bitcoin may be incentive compatible under assumptions such as a homogeneous population of miners and a limited strategy space. More recently, Eyal and Sirer <ref type="bibr" target="#b16">[18]</ref> showed that with a more realistic strategy space, when a single player (or coalition) comprises more than a third of the network's overall strength, the protocol is not incentive compatible (and in fact the threshold is typically much less than one-third, depending on other factors involving network topology). This result underscores the importance of discouraging the formation of Bitcoin mining coalitions.</p><p>Decentralized Mining Pools. While most mining pools (including the largest) are operated by a central administrator, P2Pool <ref type="bibr" target="#b42">[44]</ref> is a successful protocol for decentralized mining pools that achieve the desired effect (lower payout variance for participants) that does not require an administrator. It is possible that engineering efforts to improve P2Pool's performance and usability and public awareness campaigns may steer more users to P2Pool rather than centralized mining pools (at the time of writing<ref type="foot" target="#foot_5">8</ref> , P2Pool accounts for only 1% of the total mining capacity while the two largest pools together account for 49%). However, as P2Pool inherently requires more overhead than a centralized pool, we believe it is wiser to directly discourage coalitions through the built-in reward mechanism.</p><p>Altcoins. Numerous attempts have been made to tweak the incentive structure by modifying Bitcoin's underlying puzzle. The most popular alternative, Litecoin<ref type="foot" target="#foot_6">9</ref> uses an scrypt-based <ref type="bibr" target="#b35">[37]</ref> puzzle intended to promote the use of general purpose equipment (especially CPUs or GPUs) rather than specialized equipment (e.g., Bitcoin mining ASICs). Another oft-cited goal is to make the puzzlesolving computation have an intrinsically useful side effect (this is discussed, for example, in <ref type="bibr" target="#b22">[24]</ref>). To our knowledge, we are the first to suggest deterring mining coalitions as a design goal.</p><p>Zerocoin <ref type="bibr" target="#b26">[28]</ref>, Zerocash <ref type="bibr" target="#b3">[4]</ref>, and PinocchioCoin <ref type="bibr" target="#b13">[15]</ref> focus on making Bitcoin transactions anonymous by introducing a public cryptographic accumulator for mixing coins. Spending a coin involves producing a zero-knowledge proof that a coin has not yet been spent. Although our zero-knowledge proof construction may bear superficial resemblance to this approach, our work addresses a completely different problem.</p><p>Coercion-resistance in Electronic Voting. The approach we take is inspired by notions of coercion-resistance in electronic voting. Vote buying (as well as other forms of coercion) is illegal in all US state and federal elections <ref type="bibr" target="#b20">[22]</ref>. While the threat of legal prosecution already poses a deterrent against such behavior, electronic voting schemes have been designed to provide technical countermeasures as well <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b31">33]</ref>. In short, such schemes ensure that voters are unable to obtain any receipt which could demonstrate how they voted to a coercive attacker. We draw an analogy between vote buying and what we call outsourcing schemes; analogous to receipt-freeness, the (strongly) nonoutsourceable property prevents a worker from proving to a pool operator how its hashpower is used.</p><p>Most Closely Related Work. In Permacoin <ref type="bibr" target="#b27">[29]</ref>, Miller et al. proposed a Bitcoin-like system that achieves decentralized data storage as a useful side effect of mining. As part of their development, they implicitly developed a weakly nonoutsourceable puzzle that deters consolidation of storage capacity. Our Merkle-tree-based weakly nonoutsourceable puzzle construction is directly inspired by the construction in Permacoin. However, Permacoin does not make any attempt to formalize the notion of (weakly) nonoutsourceable puzzles, nor to consider the goal of deterring outsourcing outside the context of archival storage. Our paper provides the first formal treatment of nonoutsourceable puzzles. Additionally, we introduce a new notion of strongly nonoutsourceable puzzles, which repairs a critical flaw in Permacoin (namely, that weakly nonoutsourceable puzzles provide no deterrence against hosted mining providers with valuable reputations, or against pools who collect collateral deposits from their members).</p><p>In independent work, Eyal and Sirer <ref type="bibr" target="#b15">[17]</ref> developed a technique for combining a weakly nonoutsourceable puzzle with an arbitrary scratch-off puzzle, resulting in a puzzle that retains the best properties of the constituents; this can be used, for example, to create a nonoutsourceable puzzle that is backward-compatible with existing Bitcoin mining equipment. We discuss applications of this technique in the full online version of our paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11.">CONCLUSION</head><p>The prevalence of Bitcoin mining coalitions (including both mining pools and hosted mining services), which lead to consolidation of power and increased systemic risk to the network, are a result of a built-in design limitation of the Bitcoin puzzle itself -specifically, that it admits an effective coalition enforcement mechanism. To address this, we have proposed formal definitions of nonoutsourceable puzzles for which no such enforcement mechanism exists. We have contributed two constructions: a weak nonoutsourceable puzzle provable in the random oracle model, and a generic transformation from any weak nonoutsourceable puzzle to a strong one. The former may already be a sufficient deterrent against mining pools, while the latter thwarts both hosted mining and mining pools. We have implemented both of our techniques and provide performance evaluation results showing these add only a tolerable overhead to the cost of Bitcoin blockchain validation. Overall, we are optimistic that our approach, combined with suitable modifications to the reward structure, could be used to guarantee that participation as an independent individual is the most effective mining strategy.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: A generic transformation from any weakly nonoutsourceable scratch-off puzzle to a strongly nonoutsourceable puzzle.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 1 :</head><label>1</label><figDesc>Estimated puzzle and block verification costs for various schemes</figDesc><table><row><cell></cell><cell></cell><cell cols="2">Puzzle only</cell><cell></cell><cell></cell><cell cols="2">Transactions Included</cell></row><row><cell>Scheme</cell><cell>Verif.</cell><cell>Ratio</cell><cell cols="4">Size Ratio Verif. Ratio</cell><cell cols="2">Size Ratio</cell></row><row><cell>Bitcoin</cell><cell>11.7µs</cell><cell>1</cell><cell>80B</cell><cell>1</cell><cell>0.68s</cell><cell cols="2">1 350KB</cell><cell>1</cell></row><row><cell>Weak</cell><cell>15.1ms</cell><cell>1.3e3</cell><cell>6.6KB</cell><cell>83</cell><cell>0.70s</cell><cell cols="2">1.02 357KB</cell><cell>1.02</cell></row><row><cell>Strong (C = 4)</cell><cell cols="3">0.48s 4.1e+04 10.8KB</cell><cell>135</cell><cell>1.16s</cell><cell cols="2">1.71 361KB</cell><cell>1.03</cell></row><row><cell>Strong (C = 3)</cell><cell cols="3">0.62s 5.3e+04 17.0KB</cell><cell>213</cell><cell>1.30s</cell><cell cols="2">1.91 367KB</cell><cell>1.05</cell></row><row><cell>Strong (C = 2)</cell><cell>0.93s</cell><cell cols="2">8e+04 23.2KB</cell><cell>290</cell><cell>1.61s</cell><cell cols="2">2.37 373KB</cell><cell>1.07</cell></row><row><cell>Strong (C = 1)</cell><cell cols="3">1.68s 1.4e+05 29.4KB</cell><cell>368</cell><cell>2.36s</cell><cell cols="2">3.47 379KB</cell><cell>1.08</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 2 :</head><label>2</label><figDesc>Proof and verification micro-benchmarks for strongly nonoutsourceable puzzles</figDesc><table><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>Type I Statements</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell cols="2">Pinocchio [36]</cell><cell></cell><cell></cell><cell>Libsnark [5]</cell><cell></cell><cell></cell></row><row><cell>C</cell><cell>#</cell><cell>Gates</cell><cell>Prove</cell><cell cols="2">Verify Total</cell><cell cols="3">Prove (Single-core) Prove (Multi-core) Verify</cell><cell>Total</cell><cell>Size</cell></row><row><cell>1</cell><cell cols="2">220 213k</cell><cell>268.2s</cell><cell>11ms</cell><cell>2.42s</cell><cell>16.33s</cell><cell>9.84s</cell><cell cols="2">7.6ms 1.672s</cell><cell>29.4KB</cell></row><row><cell>2</cell><cell cols="2">120 280k</cell><cell>578.4s</cell><cell>11ms</cell><cell>1.32s</cell><cell>20.29s</cell><cell>13.90s</cell><cell cols="2">7.7ms 0.924s</cell><cell>23.2KB</cell></row><row><cell>3</cell><cell>80</cell><cell>392k</cell><cell>1002.9s</cell><cell>11ms</cell><cell>0.80s</cell><cell>26.92s</cell><cell>17.18s</cell><cell cols="2">7.7ms 0.616s</cell><cell>17.0KB</cell></row><row><cell>4</cell><cell>60</cell><cell>467k</cell><cell>1242.1s</cell><cell>11ms</cell><cell>0.66s</cell><cell>32.88s</cell><cell>20.71s</cell><cell cols="2">7.8ms 0.468s</cell><cell>10.8KB</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>Type II Statements</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell cols="2"># Gates</cell><cell>Prove</cell><cell cols="2">Verify Total</cell><cell cols="3">Prove (Single-core) Prove (Multi-core) Verify</cell><cell>Total</cell><cell>Size</cell></row><row><cell></cell><cell cols="2">1 282K</cell><cell>508.5s</cell><cell>10ms</cell><cell>0.01s</cell><cell>19.42s</cell><cell>13.34s</cell><cell cols="2">7.8ms 0.008s</cell><cell>&lt;1KB</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 3 :</head><label>3</label><figDesc>Reward schedules for Bitcoin &amp; our scheme. We give a typical parametrization for the multi-tier reward structure. Parameters can be tuned based on different scenarios.</figDesc><table><row><cell></cell><cell>Time</cell><cell cols="4">Freq Prize (btc) (rel) Weight</cell><cell>(rel)</cell></row><row><cell cols="2">Bitcoin 10m</cell><cell>1</cell><cell>25</cell><cell>1</cell><cell>1</cell><cell>1</cell></row><row><cell>Low</cell><cell>3s</cell><cell>.995</cell><cell cols="2">8.8E-2 0.7</cell><cell cols="2">1 0.2499</cell></row><row><cell cols="2">Med 10m</cell><cell>.005</cell><cell cols="2">5 0.2</cell><cell cols="2">600 0.7497</cell></row><row><cell cols="3">High 3mo 3.8E-7</cell><cell cols="2">3.3E4 0.1</cell><cell cols="2">1800 3.4E-4</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_0"><p>The terms "scratch-off puzzle" and "winning ticket" are motivated by the observation that Bitcoin's coin minting process resembles a scratch-off lottery, wherein a participant expends a unit of effort to learn if he holds a winning ticket.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_1"><p>This is without loss of generality, and does not mean that we assume the mining pool operator is honest, since the protocol (S, C) may deviate from "honest" Bitcoin mining.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_2"><p>Average number of transactions per block: https: //blockchain.info/charts/n-transactionsper-block</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_3"><p><ref type="bibr" target="#b4">5</ref> Unless otherwise noted, we conducted our measurements over at least 1000 trials, and omit the error statistic if the standard deviation is within</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_4"><p>±1%.<ref type="bibr" target="#b5">6</ref> Average block size: https://blockchain.info/ charts/</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="8" xml:id="foot_5"><p>According to https://blockchain.info/pools retrieved onAugust 1, 2014</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="9" xml:id="foot_6"><p><ref type="bibr" target="#b8">9</ref> https://litecoin.org/</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank the readers and reviewers of earlier drafts of this paper. This work was supported in part by NSF awards #0964541, #1223623, and #1518765.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">A cryptocurrency to enable commerce</title>
		<imprint>
			<publisher>Whitepaper</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Exposing computationally-challenged byzantine impostors</title>
		<author>
			<persName><forename type="first">James</forename><surname>Aspnes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Collin</forename><surname>Jackson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Arvind</forename><surname>Krishnamurthy</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005">2005</date>
			<pubPlace>New Haven, CT, Tech. Rep</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Department of Computer Science, Yale University</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Bitter to better -how to make bitcoin a better currency</title>
		<author>
			<persName><forename type="first">Simon</forename><surname>Barber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xavier</forename><surname>Boyen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Elaine</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ersin</forename><surname>Uzun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Financial Cryptography and Data Security</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="399" to="414" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Zerocash: Decentralized anonymous payments from bitcoin</title>
		<author>
			<persName><forename type="first">Eli</forename><surname>Ben-Sasson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alessandro</forename><surname>Chiesa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christina</forename><surname>Garman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matthew</forename><surname>Green</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ian</forename><surname>Miers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Eran</forename><surname>Tromer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Madars</forename><surname>Virza</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Security and Privacy (SP), 2014 IEEE Symposium</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Succinct non-interactive zero knowledge for a von neumann architecture</title>
		<author>
			<persName><forename type="first">Eli</forename><surname>Ben-Sasson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alessandro</forename><surname>Chiesa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Eran</forename><surname>Tromer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Madars</forename><surname>Virza</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">23rd USENIX Security Symposium (USENIX Security 14)</title>
		<meeting><address><addrLine>San Diego, CA</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2014-08">August 2014</date>
			<biblScope unit="page" from="781" to="796" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Receipt-free secret-ballot elections</title>
		<author>
			<persName><forename type="first">Josh</forename><surname>Benaloh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dwight</forename><surname>Tuinstra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the twenty-sixth annual ACM symposium on Theory of computing</title>
		<meeting>the twenty-sixth annual ACM symposium on Theory of computing</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1994">1994</date>
			<biblScope unit="page" from="544" to="553" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Research perspectives on bitcoin and second-generation digital currencies</title>
		<author>
			<persName><forename type="first">Joseph</forename><surname>Bonneau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jeremy</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Arvind</forename><surname>Narayanan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Joshua</forename><surname>Kroll</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Edward</forename><forename type="middle">W</forename><surname>Felten</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2015 IEEE Symposium on Security and Privacy</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Mixcoin: Anonymity for bitcoin with accountable mixes</title>
		<author>
			<persName><forename type="first">Joseph</forename><surname>Bonneau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Arvind</forename><surname>Narayanan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jeremy</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Joshua</forename><forename type="middle">A</forename><surname>Kroll</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Edward</forename><forename type="middle">W</forename><surname>Felten</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Financial Cryptography and Data Security</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="486" to="504" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<author>
			<persName><forename type="first">Danny</forename><surname>Bradbury</surname></persName>
		</author>
		<ptr target="http://www.coindesk.com/alydian-targets-big-ticket-miners-with-terahash-hosting/" />
		<title level="m">Alydian targets big ticket miners with terahash hosting</title>
		<imprint>
			<date type="published" when="2013-08">August 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Bitcoin network shaken by blockchain fork</title>
		<author>
			<persName><surname>Vitalik Buterin</surname></persName>
		</author>
		<ptr target="http://bitcoinmagazine.com/3668/bitcoin-network-shaken-by-blockchain-fork/" />
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Blind signatures for untraceable payments</title>
		<author>
			<persName><forename type="first">David</forename><surname>Chaum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Crypto</title>
		<imprint>
			<date type="published" when="1982">1982</date>
			<biblScope unit="volume">82</biblScope>
			<biblScope unit="page" from="199" to="203" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Untraceable electronic cash</title>
		<author>
			<persName><forename type="first">David</forename><surname>Chaum</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Amos</forename><surname>Fiat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Moni</forename><surname>Naor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology-CRYPTO&apos;88</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1990">1990</date>
			<biblScope unit="page" from="319" to="327" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Security notions and generic constructions for client puzzles</title>
		<author>
			<persName><forename type="first">Liqun</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Paul</forename><surname>Morrissey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nigel</forename><forename type="middle">P</forename><surname>Smart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bogdan</forename><surname>Warinschi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology-ASIACRYPT 2009</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="505" to="523" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Pinocchio coin: building zerocoin from a succinct pairing-based proof system</title>
		<author>
			<persName><forename type="first">George</forename><surname>Danezis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Cedric</forename><surname>Fournet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Markulf</forename><surname>Kohlweiss</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bryan</forename><surname>Parno</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the First ACM workshop on Language support for privacy-enhancing technologies</title>
		<meeting>the First ACM workshop on Language support for privacy-enhancing technologies</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="27" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Pricing via processing or combatting junk mail</title>
		<author>
			<persName><forename type="first">C</forename><surname>Dwork</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Naor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CRYPTO</title>
		<imprint>
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">How to disincentivize large bitcoin mining pools</title>
		<author>
			<persName><forename type="first">Ittay</forename><surname>Eyal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Emin</forename><surname>Gün</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sirer</forename></persName>
		</author>
		<ptr target="http://hackingdistributed.com/2014/06/18/how-to-disincentivize-large-bitcoin-mining-pools/" />
		<imprint>
			<date type="published" when="2014-06">June 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Majority is not enough: Bitcoin mining is vulnerable</title>
		<author>
			<persName><forename type="first">Ittay</forename><surname>Eyal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Emin</forename><surname>Gün</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sirer</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Financial Cryptography and Data Security</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="436" to="454" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">The bitcoin backbone protocol: Analysis and applications</title>
		<author>
			<persName><forename type="first">Juan</forename><surname>Garay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aggelos</forename><surname>Kiayias</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nikos</forename><surname>Leonardos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology-EUROCRYPT 2015</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="281" to="310" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Quadratic span programs and succinct nizks without pcps</title>
		<author>
			<persName><forename type="first">Rosario</forename><surname>Gennaro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Craig</forename><surname>Gentry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bryan</forename><surname>Parno</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mariana</forename><surname>Raykova</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology-EUROCRYPT 2013</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="626" to="645" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Cryptographic puzzles and dos resilience, revisited. Designs, Codes and Cryptography</title>
		<author>
			<persName><forename type="first">Bogdan</forename><surname>Groza</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bogdan</forename><surname>Warinschi</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="1" to="31" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Vote buying</title>
		<author>
			<persName><surname>Richard L Hasen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">California Law Review</title>
		<imprint>
			<biblScope unit="page" from="1323" to="1371" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Client puzzles: A cryptographic countermeasure against connection depletion attacks</title>
		<author>
			<persName><forename type="first">Ari</forename><surname>Juels</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><forename type="middle">G</forename><surname>Brainard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NDSS, volume</title>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="volume">99</biblScope>
			<biblScope unit="page" from="151" to="165" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">The economics of bitcoin mining or, bitcoin in the presence of adversaries</title>
		<author>
			<persName><forename type="first">Joshua</forename><forename type="middle">A</forename><surname>Kroll</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ian</forename><forename type="middle">C</forename><surname>Davey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Edward</forename><forename type="middle">W</forename><surname>Felten</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
			<publisher>WEIS</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Proof-of-workâ Ȃİ proves not to work; version 0.2</title>
		<author>
			<persName><forename type="first">Ben</forename><surname>Laurie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Richard</forename><surname>Clayton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Economics and Information</title>
		<imprint>
			<publisher>Security</publisher>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Inclusive block chain protocols. Financial Cryptography and Data Security</title>
		<author>
			<persName><forename type="first">Yoad</forename><surname>Lewenberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yonatan</forename><surname>Sompolinsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aviv</forename><surname>Zohar</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015">2015</date>
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<author>
			<persName><forename type="first">Jon</forename><surname>Matonis</surname></persName>
		</author>
		<ptr target="http://www.coindesk.com/bitcoin-mining-detente-ghash-io-51-issue/" />
		<title level="m">The bitcoin mining arms race: Ghash.io and the 51% issue</title>
		<imprint>
			<date type="published" when="2014-07">July 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Zerocoin: Anonymous distributed e-cash from bitcoin</title>
		<author>
			<persName><forename type="first">Ian</forename><surname>Miers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christina</forename><surname>Garman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matthew</forename><surname>Green</surname></persName>
		</author>
		<author>
			<persName><surname>Aviel D Rubin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Security and Privacy (SP), 2013 IEEE Symposium on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="397" to="411" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Permacoin: Repurposing bitcoin work for long-term data preservation</title>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ari</forename><surname>Juels</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Elaine</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bryan</forename><surname>Parno</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathan</forename><surname>Katz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Nonoutsourceable scratch-off puzzles to discourage bitcoin mining coalitions</title>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ahmed</forename><surname>Kosba</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Elaine</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathan</forename><surname>Katz</surname></persName>
		</author>
		<ptr target="http://cs.umd.edu/~amiller/nonoutsourceable_full.pdf" />
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Anonymous byzantine consensus from moderately-hard puzzles: A model for bitcoin</title>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Joseph</forename><forename type="middle">J</forename><surname>Laviola</surname><genName>Jr</genName></persName>
		</author>
		<idno>. CS-TR-14-01</idno>
		<imprint/>
	</monogr>
	<note type="report_type">UCF Tech Report</note>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Bitcoin: A peer-to-peer electronic cash system</title>
		<author>
			<persName><forename type="first">Satoshi</forename><surname>Nakamoto</surname></persName>
		</author>
		<ptr target="http://bitcon.org/bitcoin.pdf" />
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">How to prevent buying of votes in computer elections</title>
		<author>
			<persName><forename type="first">Valtteri</forename><surname>Niemi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ari</forename><surname>Renvall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptologyâ Ȃ ŤASIACRYPT&apos;94</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="164" to="170" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Are all lotteries regressive? evidence from the powerball</title>
		<author>
			<persName><forename type="first">Emily</forename><surname>Oster</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">National Tax Journal</title>
		<imprint>
			<date type="published" when="2004-06">June, 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">A note on the unsoundness of vntinyram&apos;s snark. Cryptology ePrint Archive</title>
		<author>
			<persName><forename type="first">Bryan</forename><surname>Parno</surname></persName>
		</author>
		<ptr target="http://eprint.iacr.org/" />
		<imprint>
			<date type="published" when="2015">2015/437, 2015</date>
		</imprint>
	</monogr>
	<note type="report_type">Report</note>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Pinocchio: Nearly practical verifiable computation</title>
		<author>
			<persName><forename type="first">Bryan</forename><surname>Parno</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Craig</forename><surname>Gentry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jon</forename><surname>Howell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mariana</forename><surname>Raykova</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="238" to="252" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">The scrypt password-based key derivation function</title>
		<author>
			<persName><forename type="first">Colin</forename><surname>Percival</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Simon</forename><surname>Josefsson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">On the optimal design of lotteries</title>
		<author>
			<persName><forename type="first">John</forename><surname>Quiggin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Economica</title>
		<imprint>
			<biblScope unit="volume">58</biblScope>
			<biblScope unit="issue">229</biblScope>
			<biblScope unit="page" from="1" to="16" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<author>
			<persName><forename type="first">Meni</forename><surname>Rosenfeld</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1112.4980</idno>
		<title level="m">Analysis of bitcoin pooled mining reward systems</title>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">Secure high-rate transaction processing in bitcoin. Financial Cryptography and Data Security</title>
		<author>
			<persName><forename type="first">Yonatan</forename><surname>Sompolinsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aviv</forename><surname>Zohar</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015">2015</date>
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<ptr target="http://spreadcoin.net/files/SpreadCoin-WhitePaper.pdf" />
		<title level="m">Spreadcoin</title>
		<imprint>
			<date type="published" when="2014-10">October 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Stronger difficulty notions for client puzzles and denial-of-service-resistant protocols</title>
		<author>
			<persName><forename type="first">Douglas</forename><surname>Stebila</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lakshmi</forename><surname>Kuppusamy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jothi</forename><surname>Rangasamy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Colin</forename><surname>Boyd</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Juan</forename><forename type="middle">Gonzalez</forename><surname>Nieto</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Topics in Cryptology-CT-RSA 2011</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="284" to="301" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<title level="m" type="main">Cuckoo cycle: a new memory-hard proof-of-work system</title>
		<author>
			<persName><forename type="first">John</forename><surname>Tromp</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015">2015</date>
			<publisher>Bitcoin Research Workshop</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">2pool: Decentralized, dos-resistant</title>
		<author>
			<persName><forename type="first">Forrest</forename><surname>Voight</surname></persName>
		</author>
		<ptr target="https://bitcointalk.org/index.php?topic=18313" />
		<imprint>
			<date type="published" when="2011-06">June 2011</date>
			<biblScope unit="page" from="hop" to="proof pool" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
