<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Applied Mathematics and Computation</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Quan-Ke</forename><surname>Pan</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">State Key Laboratory of Digital Manufacturing Equipment &amp; Technology</orgName>
								<orgName type="institution">Huazhong University of Science &amp; Technology</orgName>
								<address>
									<postCode>430074</postCode>
									<settlement>Wuhan</settlement>
									<country key="CN">PR China</country>
								</address>
							</affiliation>
						</author>
						<author role="corresp">
							<persName><forename type="first">Liang</forename><surname>Gao</surname></persName>
							<email>gaoliang@mail.hust.edu.cn</email>
							<affiliation key="aff0">
								<orgName type="department">State Key Laboratory of Digital Manufacturing Equipment &amp; Technology</orgName>
								<orgName type="institution">Huazhong University of Science &amp; Technology</orgName>
								<address>
									<postCode>430074</postCode>
									<settlement>Wuhan</settlement>
									<country key="CN">PR China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Xin-Yu</forename><surname>Li</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Kai-Zhou</forename><surname>Gao</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">State Key Laboratory of Digital Manufacturing Equipment &amp; Technology</orgName>
								<orgName type="institution">Huazhong University of Science &amp; Technology</orgName>
								<address>
									<postCode>430074</postCode>
									<settlement>Wuhan</settlement>
									<country key="CN">PR China</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">School of Computer Science</orgName>
								<orgName type="institution">Liaocheng University</orgName>
								<address>
									<postCode>2520 0 0</postCode>
									<settlement>Liaocheng</settlement>
									<country key="CN">PR China</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Applied Mathematics and Computation</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">D9C9D6DB415702705297DC21653A279B</idno>
					<idno type="DOI">10.1016/j.amc.2017.01.004</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T12:14+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>Scheduling Flowshop Iterated local search Fruit fly optimization Migrating birds optimization Artificial bee colony</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper proposes a total of nine algorithms to minimize the makespan for the hybrid flowshop scheduling problem with sequence-dependent setup times. The first six algorithms are trajectory-based metaheuristics, including three variants of iterated local search and three variants of iterated greedy. The remaining three algorithms are population-based metaheuristics, namely, the improved fruit fly optimization, the improved migrating birds optimization, and the discrete artificial bee colony optimization. We present some advanced and effective technologies, including three mixed neighborhood structures, an enhanced perturbation method, and an enhanced destruction and construction procedure for the trajectory-based metaheuristics. We propose a path-relinking-based cooperative search, a diversity control scheme, and a diversified initialization approach for the improved fruit fly optimization. We calibrate the parameters and operators for the proposed algorithms by means of a design of experiments approach. To evaluate the proposed algorithms, we present several adaptations of other recent well-known meta-heuristics for the problem and conduct a comprehensive set of computational and statistical experiments to demonstrate the effectiveness of the presented algorithms. Among them, the discrete artificial bee colony optimization is the best-performing algorithm and it is able to improve 126 out of the 240 best known solutions for the benchmarks in the literature.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Scheduling is a decision-making process for committing resources to a variety of possible tasks. Effective scheduling methods and technologies have become essential for industries to maintain competitive positions in today's fast-changing business environment <ref type="bibr" target="#b1">[1]</ref> . Hybrid flowshop scheduling (HFS) is a well-studied machine scheduling problem that arises in applications in the chemical, textile, glass, and many other industries. HFS simulates common manufacturing processes consisting of a set of production stages, and at least one stage has two or more identical parallel machines. It can be considered as an extension of the regular flowshop scheduling problem. Unlike the regular flowshop scheduling problem, however, where a permutation of jobs for each machine is the only thing needed, HFS, with potentially more than one machine per stage, has to consider the assignment of jobs to machines and the sequence of jobs on each machine <ref type="bibr" target="#b2">[2]</ref> .</p><p>On many production floors, setup time is a significant factor for production scheduling. Pinedo <ref type="bibr" target="#b1">[1]</ref> noted that the improper handling of setup operations may easily consume more than 20% of the available machine capacity. Setup operations include cleaning, fixing or releasing parts to machines, changing tools, and adjustments to machines. They are nonproductive operations performed on machines to prepare them for the next product. Setup times are not part of the processing times and are often separable from them, i.e., setup operations can be performed before the product arrives at the machine. Setup times are often strongly dependent on the stage, on the job that the machine is processing, and on the job that comes next. Therefore, it is practical and realistic to integrate sequence-dependent setup times (SDSTs) into HFS.</p><p>SDSTs significantly increase the difficulty of scheduling problems. This paper addresses the objective of minimizing the makespan, that is, the maximum completion time across all jobs, for the HFS problem with SDST (SDST/HFS for short). The criterion tends to a high throughput and a high utilization of production resources, and it is widely used in the scheduling literature. SDST/HFS with the makespan criterion is denoted as FHm / S ijk / Cmax using the well-known α / β / γ notation <ref type="bibr" target="#b3">[3]</ref> and its extension for HFS problems <ref type="bibr" target="#b4">[4]</ref> . The HFS scheduling problem was proven by Gupta <ref type="bibr" target="#b5">[5]</ref> to be NP-hard even if it only has two stages ( m = 2) and one of the stages contains a single machine, so the SDST/HFS problem is strongly NPhard as well. Therefore, for several decades, efforts have been dedicated to finding high-quality solutions in a reasonable computational time by heuristic and meta-heuristic optimization techniques instead of finding an optimal solution.</p><p>We review some works that dealt with problems related to the problem considered in this paper. <ref type="bibr">Kurz</ref> and Askin <ref type="bibr" target="#b6">[6]</ref> presented three heuristics based on simple greedy methods, insertion heuristics and the adaptation of Johnson's rule for a SDST/HFS. Later, the same authors <ref type="bibr" target="#b7">[7]</ref> formulated the problem as an integer programming model and developed a random key genetic algorithm (GA). By imitating the defence process of the immune system against invaders in a biological body, Zandieh et al. <ref type="bibr" target="#b8">[8]</ref> proposed an immune algorithm and established by computational comparison that the proposed immune algorithm performed much better than the GA of Kurz and Askin <ref type="bibr" target="#b7">[7]</ref> . Gómez-Gasquet et al. <ref type="bibr" target="#b9">[9]</ref> presented an agent-based genetic algorithm for a SDST/HFS to minimize the makespan.</p><p>Solution techniques are also provided for SDST/HFS with more complex settings. Ruiz and Maroto <ref type="bibr" target="#b10">[10]</ref> proposed a GA to find the minimum makespan for a SDST/HFS problem with unrelated parallel machines and machine eligibility. Naderi et al. <ref type="bibr" target="#b11">[11]</ref> proposed a dynamic dispatching rule heuristic and an iterated local search (ILSN for short, where the capital letter N is taken from the authors' name) to solve a SDST/HFS problem with machine eligibility and stage skipping. Naderi et al. <ref type="bibr" target="#b12">[12]</ref> introduced an improved simulated annealing (ISA) for a SDST/HFS problem involving transportation times to minimize the total completion time and total tardiness. Ruiz et al. <ref type="bibr" target="#b13">[13]</ref> considered a mixed integer programming model and some heuristics for a realistic HFS problem with unrelated machines, setup times, overlaps, precedence relationships and other parameters. Jungwattanakit et al. <ref type="bibr" target="#b14">[14]</ref> proposed an integer programing model, dispatching rules and a GA for a SDST/HFS problem to minimize the weighted sum of the makespan and the number of tardy jobs. The same authors later investigated the same problem using simulated annealing and tabu search methods <ref type="bibr" target="#b15">[15]</ref> . Recently, Ebrahimi et al. <ref type="bibr" target="#b16">[16]</ref> presented two meta-heuristics based on the non-dominated sorting GA <ref type="bibr" target="#b17">[17]</ref> and the multi-objective GA <ref type="bibr" target="#b18">[18]</ref> for a HFS problem with sequence-dependent family setup times. Two comprehensive reviews on HFS problems can be found in <ref type="bibr" target="#b19">[19]</ref> and <ref type="bibr" target="#b20">[20]</ref> .</p><p>The iterated local search (ILS) metaheuristic presented by <ref type="bibr" target="#b21">Lourenço et al. (2003)</ref>  <ref type="bibr" target="#b21">[21]</ref> and the iterated greedy (IG) introduced by Ruiz and Stützle <ref type="bibr" target="#b22">[22]</ref> are two trajectory-based metaheuristics that have resulted in top-notch performance for many scheduling problems despite their simplicity <ref type="bibr" target="#b23">[23]</ref><ref type="bibr" target="#b24">[24]</ref><ref type="bibr" target="#b25">[25]</ref><ref type="bibr" target="#b26">[26]</ref><ref type="bibr" target="#b27">[27]</ref><ref type="bibr" target="#b28">[28]</ref><ref type="bibr" target="#b29">[29]</ref> . Fruit fly optimization (FFO) <ref type="bibr" target="#b30">[30]</ref> , migrating birds optimization (MBO) <ref type="bibr" target="#b31">[31]</ref> , and artificial bee colony (ABC) <ref type="bibr" target="#b32">[32]</ref> are three recently presented population-based metaheuristics that have already been successfully applied to many scheduling problems, including the semiconductor final testing scheduling problem <ref type="bibr" target="#b33">[33]</ref> , the HFS problem <ref type="bibr" target="#b34">[34,</ref><ref type="bibr" target="#b35">35]</ref> , the permutation flowshop problem <ref type="bibr" target="#b36">[36]</ref> , the order acceptance and scheduling problem <ref type="bibr" target="#b37">[37]</ref> , and steel-making and continuous casting scheduling <ref type="bibr" target="#b38">[38]</ref> . Due to the effectiveness of the above metaheuristics, it is worthwhile to evaluate them for the SDST/HFS problem, an NP-hard combinatorial optimization problem with a huge solution space.</p><p>In this paper, our aim is to tackle the SDST/HFS problem with the objective of minimizing the makespan. Based on the five abovementioned metaheuristics, we propose a total of nine algorithms, including three simple variants of iterated local search, three simple variants of iterated greedy, the improved fruit fly optimization, the improved migrating birds optimization, and the discrete artificial bee colony optimization. We introduce three mixed neighborhood structures, an enhanced perturbation method, an enhanced destruction and construction procedure, a path-relinking-based cooperative search, a diversity control scheme, and a diversified initialization approach to stress the performance of the proposed algorithms.</p><p>To our best knowledge, this is the first reported application of iterated greedy, fruit fly optimization, migrating birds optimization, and artificial bee colony for the considered SDST/HFS problem. To investigate the effectiveness of the parameters and operators for each of the nine algorithms, a design of experiments (DOE) approach and analysis of variance (ANOVA) are utilized. The effectiveness of the proposed algorithms is demonstrated by extensive comparisons against the existing methods. In addition, 126 out of the 240 best known solutions for the instances presented in <ref type="bibr" target="#b39">[39]</ref> are further improved by the proposed algorithms.</p><p>The rest of the paper is organized as follows. In Section 2 , SDST/HFS with the makespan criterion is formulated. Sections 3 and 4 present six trajectory-based metaheuristics and three population-based metaheuristics in detail, respectively. In Section 5 , we calibrate the presented algorithms, and we report the computational results and comparisons in Section 6 . Finally, Section 7 provides the concluding remarks and suggests some future work. </p><formula xml:id="formula_0">J i \ J j J 1 J 2 J 3 J 4 J i \ J j J 1 J 2 J 3 J 4 J 1 2 3 2 2 J 1 2 3 2 2 J 2 2 2 3 4 J 2 2 1 3 4 J 3 4 2 2 3 J 3 3 3 2 3 J 4 3 3 2 2 J 4 4 3 2<label>2</label></formula><p>Fig. <ref type="figure" target="#fig_20">1</ref>. Gantt diagram for a solution to the example problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">The SDST/HFS problem</head><p>The SDST/HFS problem can be described as follows. A set of n jobs J = {1, 2, ..., n } have to be processed through m production stages {1, 2, ..., m } following the same production route, i.e., first at stage 1, then at stage 2, and so on until last stage m . Each stage k , k = 1, 2, ..., m , has a set of identical parallel machines, M k (| M k | ≥ 2 for at least one stage, where | • | denotes the cardinality of a set). Each job j ∈ J can be processed on any one of the | M k | machines at stage k and the processing time is the same on each machine. We denote the processing time of job j ∈ J at stage k as p k , j . We have an SDST, denoted as s k , j ', j , when job j ∈ J is processed immediately after job j ' ∈ J ( j ' = j ) on the same machine at stage k . If job j ∈ J is the first job processed on a machine at stage k , its setup time is denoted as s k , j , j . At any time, no job can be processed on more than one machine, and no machine can process more than one job. All jobs are independent and available for processing at time 0. The objective is then to find a schedule so that the makespan (denoted by C max ) is minimized.</p><p>For an example, we consider a problem with four jobs ( n = 4) and two stages ( m = 2), with two machines at stage one (| M 1 | = 2) and three machines at stage two (| M 2 | = 3). The processing times and setup times are given in Tables <ref type="table" target="#tab_0">1</ref> and<ref type="table" target="#tab_1">2</ref> , respectively. A schedule chart is shown in Fig. <ref type="figure" target="#fig_20">1</ref> .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Proposed trajectory-based metaheuristics</head><p>Trajectory-based metaheuristics manipulate only one candidate solution of the given problem instance in each search step. ILS and IG are two well-known trajectory-based metaheuristics. This section presents three variants of ILS and three variants of IG for the SDST/HFS with the makespan criterion. We detail the solution representation, the local search methods, the proposed ILS algorithms, and the proposed IG algorithms as follows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Solution representation</head><p>Permutation-based encoding is very simple and it is widely used in the HFS problem literature <ref type="bibr" target="#b10">[10]</ref> , so we choose this representation for our metaheuristics. In the permutation-based encoding, a permutation of all jobs represents the order in which the jobs are launched into the shop at the first stage. In the subsequent stage, the completion times of the jobs in the previous stage are taken as their release times. The jobs are allocated to the first available machine according to the First In First Out rule. In the regular HFS problem, the first available machine also results in the earliest completion time for a job. However, this is not the case for the SDST/HFS problem because SDSTs are involved. The first available machine might need a large SDST, so assigning the job to this machine would result in a later completion time than to the other machines. To solve this problem, we assign a job to the machine that can finish it at the earliest time. For a job permutation π = ( π 1 , π 2 , ..., π n ), π j ∈ J , j = 1, 2, ..., n , we consider the machine assignment and completion time of π j as follows.</p><p>At stage k , job π j can be assigned to any one of the | M k | machines. For machine i ∈ M k that has not previously processed any job, if we assign job π j to it, the completion time of job π j on machine i at stage k , C k, π j ,i , can be calculated by</p><formula xml:id="formula_1">C k, π j ,i = max s k, π j , π j , C k -1 , π j + p k, π j<label>(1)</label></formula><p>If machine i has already processed some jobs, we have</p><formula xml:id="formula_2">C k, π j ,i = max C k, τ k,i + s k, τ k,i , π j , C k -1 , π j + p k, π j (<label>2</label></formula><formula xml:id="formula_3">)</formula><p>where τ k , i represents the last job that machine i has already processed. Finally, we assign job π j to machine i * = arg </p><formula xml:id="formula_4">( min i =1 , 2 ,.., | M k | { C k, π j ,i } ) that</formula><formula xml:id="formula_5">C k, π j = min i =1 , 2 ,.., | M k | C k, π j ,i<label>(3)</label></formula><p>Once all jobs are assigned to machines at all stages, we obtain the makespan by</p><formula xml:id="formula_6">C max = max j=1 ,...,n C m, π j (4)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Local search methods</head><p>The performance of local search methods depends significantly on the underlying neighborhood structure. Two commonly used neighborhoods for the job permutation based representation are generated by insertion and interchange. Insertion extracts a job from the permutation and inserts it into a different position, whereas interchange chooses two jobs and interchanges their positions. Insertion and interchange lead to distinct neighborhood structures for the SDST/HFS problem. We consider three different local search methods based on the insertion and interchange for our trajectory-based algorithms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1.">Hybrid local search</head><p>We first consider a simple hybridization of the insertion and interchange operators. A random number rand ( ) is generated in the range of [0, 1] with a uniform distribution. If rand ( ) is less than β, a control parameter, then a neighboring solution is randomly selected in the insertion neighborhood; otherwise, we randomly choose a neighboring solution from the interchange neighborhood. We denote this hybrid local search procedure as HLS. Let π be a solution, and loop HLS the maximum number of neighbors to be exploredThe pseudo codes of HLS is given in Fig. <ref type="figure" target="#fig_0">2</ref> .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2.">Variable neighborhood search</head><p>The second local search procedure is a simple variant of the traditional variable neighborhood search (VNS) proposed by Mladenovic and Hansen <ref type="bibr" target="#b40">[40]</ref> . Unlike the traditional VNS which explores a smaller neighborhood first and then moves to a bigger one, our method just explores two quite different neighborhoods, i.e., the insertion and interchange neighborhoods. Following Tasgetiren et al. <ref type="bibr" target="#b41">[41]</ref> , Naderi and Ruiz <ref type="bibr" target="#b42">[42]</ref> , and Tasgetiren et al. <ref type="bibr" target="#b43">[43]</ref> , our method randomly finds a neighboring solution for the current incumbent solution in its insertion neighborhood. If an improvement is made, then the neighboring solution becomes the new incumbent solution, and the insertion neighborhood is explored again; otherwise, the procedure randomly searches for a neighboring solution for the current incumbent solution in its interchange neighborhood. Different from the HLS, the VNS prefers the insertion neighborhood and an insertion operator is always performed if an improvement is made in the search process. The pseudo codes of the VNS is given in Fig. <ref type="figure">3</ref> , where loop VNS is a control parameter.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.3.">Mixed referenced local search</head><p>In our previous study <ref type="bibr" target="#b44">[44,</ref><ref type="bibr" target="#b26">26,</ref><ref type="bibr" target="#b27">27]</ref> , a referenced local search for the insertion neighborhood was successfully applied to the permutation flowshop problem, the lot-streaming flowshop problem, and the mixed no-idle flowshop problem. The referenced local search sequentially extracts a job from the current sequence π according to a seed sequence π s and reinserts it at all possible positions. The best position of the insertion for the job is identified, and the resulting sequence is used to replace the current sequence if there is an improvement in the makespan value. The referenced local search is repeated until no better solution is found. The referenced local search with insertion, denoted as RLS insert , is described in Fig. <ref type="figure">4</ref> .    Similarly, we present a referenced local search based on the interchange operator, denoted as RLS Interchange . To avoid a cyclic search, the current job is only interchanged with the jobs before it is subjected to the permutation (Dong et al. <ref type="bibr" target="#b24">[24]</ref> ).</p><p>Suppose ( π 1 , π 2 , ..., π i -1 , π i , π i +1 , ..., π n ) is the current permutation and π i is the current job. Only job π j , j = 1, 2, ..., i -1, can be interchanged with π i in our RLS Interchange . The procedure of RLS Interchange is given in Fig. <ref type="figure" target="#fig_2">5</ref> .</p><p>Based on RLS insert and RLS Interchange , we introduce a mixed referenced local search (MRLS) for the SDST/HFS problem under consideration. Let α be a control parameter that is used to determine which local search is to be performed. The procedure of MRLS is given in Fig. <ref type="figure" target="#fig_3">6</ref> .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">Iterated local search</head><p>ILS is a simple but powerful optimizer that consists of initialization, a local search, perturbation, and an acceptance criterion. We use the adaption to the SDST/HFS of the NEH heuristic (Nawaz et al. <ref type="bibr" target="#b45">[45]</ref> ) to generate an initial solution for the presented ILS algorithm. NEH is an effective heuristic for the permutation flowshop problem with the makespan criterion. It generates a seed sequence using the largest processing time rule. The first job in the seed sequence is taken as the first job of the current sequence, and the remaining jobs are extracted one by one from the seed sequence and then inserted into the best slot of the current sequence.</p><p>The perturbation procedure consists of a number ω of random insertions to the current solution. A random perturbation procedure will lead to, most likely, a poor solution, which would be a waste of time. To increase the chance of ILS moving to a more promising region, as performed by Naderi et al. <ref type="bibr" target="#b11">[11]</ref> , we generate a number ϖ of new solutions by performing   the perturbation procedure on the current solution ϖ times. All of these ϖ new solutions are evaluated, and the best one is chosen for our ILS. The perturbation procedure is given in Fig. <ref type="figure" target="#fig_4">7</ref> .</p><p>For the acceptance criterion, we consider the simulated annealing type criterion with a constant temperature T <ref type="bibr" target="#b46">[46,</ref><ref type="bibr" target="#b23">23]</ref> . The temperature T depends on the particular instance, and it is computed as</p><formula xml:id="formula_7">T = λ • n j=1 m k =1 p k, j 10 nm (<label>5</label></formula><formula xml:id="formula_8">)</formula><p>where λ is a parameter that needs to be adjusted. The acceptance criterion is given in Fig. <ref type="figure" target="#fig_5">8</ref> .</p><p>With the above design for the initialization, perturbation, acceptance criterion and local methods, we present three simple ILS variants for the considered SDST/HFS problem: ILS with HLS (ILS HLS ), ILS with VNS (ILS VNS ), and ILS with MRLS (ILS MRLS ). Let π * be the best solution found so far. The procedures of the three presented ILS variants are given in Figs. 9 -11 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.">Iterated greedy</head><p>IG was introduced by Ruiz and Stützle <ref type="bibr" target="#b22">[22]</ref> for permutation flowshop with the makespan criterion. IG is the same as ILS except that it has a destruction and construction (DC) procedure instead of a perturbation operator. During the destruction phase, a number d of jobs are randomly removed from the current solution. Afterward, the construction procedure reinserts the removed d jobs one by one into the best slot of the current sequence. Our previous study <ref type="bibr" target="#b26">[26]</ref> presented an enhanced  DC procedure for the mixed no-idle flowshop problem. In the enhanced DC procedure, after reinserting one job, the jobs occupying the previous and posterior positions are also reinserted by considering all of the possible slots in the current solutions. We combine the basic and enhanced DC procedures and obtain a mixed DC (MDC) procedure. In the MDC, the parameter Enh , decides which DC procedure is used. The MDC procedure is given in Fig. <ref type="figure" target="#fig_9">12</ref> .</p><p>We present three simple IG variants for the considered SDST/HFS problem: the IG with HLS (IG HLS ), the IG with VNS (IG VNS ), and the IG with MRLS (IG MRLS ). The procedures of the three presented IG variants are separately given in Figs. 13 -15 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Population-based metaheuristics</head><p>In population-based metaheuristics, several candidate solutions of the given problem instance are simultaneously maintained at each search step. We present three population-based metaheuristics for the problem under consideration: the improved fruit fly optimization (IFFO), the discrete artificial bee colony optimization (DABC), and the improved migrating birds optimization (IMBO).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">IFFO algorithm</head><p>FFO is a new interactive evolutionary method proposed by Pan <ref type="bibr" target="#b30">[30]</ref> . This section presents an IFFO for the SDST/HFS problem with a makespan criterion. In <ref type="bibr" target="#b30">[30]</ref> , biological terminologies are used to describe the FFO including a swarm, an    osphresis foraging stage and a vision foraging stage. These terminologies are respectively translated into a solution, an exploration strategy and an exploitation strategy in this paper to facilitate the readers' understanding. Unlike the conventional FFO that has a single solution trying to find the optimal solution, IFFO evolves with a number of solutions. The neighborhoods of these solutions are first explored independently. Then, a path relinking based cooperative search is utilized to emphasize the cooperation among the solutions. We first explain the heuristic and solution initialization, exploration and exploitation strategy, cooperative search, and diversity control strategy and then give the computational procedure of the presented IFFO algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.1.">Heuristics and initialization</head><p>The shortest processing time (SPT) rule has been commonly used in the scheduling literature. SPT gives higher priorities to jobs with shorter processing times, but it cannot be directly applied to the problem under consideration because SDSTs are involved. We consider the SDST/HFS problem in the first stage. If job j ∈ J is assigned to a machine that has not processed any job before, the job can be finished at time ψ 1, j = s 1, j , j + p 1, j . It is reasonable to give higher priority to jobs with a smaller ψ 1, j when we select the first job for a machine. The SDST/HFS has multiple stages. We consider multiple stages together to determine the first job for a machine. Let ψ j = k * k =1 ψ k, j , where ψ k , j = s k , j , j + p k , j . An SPT-based heuristic is presented as follows.</p><p>Step 1. Sort jobs according to increasing </p><formula xml:id="formula_9">ψ j = k * k =1 ( s k, j, j + p k, j ) to yield a sequence π = ( π 1 , π 2 , ..., π n ). Step 2. Split π = ( π 1 , π 2 , ..., π n ) into two sub-sequences, π 1 = ( π 1 , π 2 , ..., π | M 1 | ) and π 2 = ( π | M 1 | +1 , π | M 1 | +2 , ..., π n ) , i.e. , π = π 1 ∪ π 2 . Step 3. Randomly shuffle sub-sequence π 2 = ( π | M 1 | +1 , π | M 1 | +2 , ..., π n ) to</formula><formula xml:id="formula_10">= ( π 1 , π 2 , ..., π | M 1 |</formula><p>) unchanged because we use ψ 1, j = s 1, j , j + p 1, j to estimate the completion time for these jobs. We fix k * = 3 after the primary experiments.</p><p>To initialize IFFO, we generate a number of solutions for the given problem by repeating the above heuristic NS times, where NS is the number of solutions. We keep all of the solutions different from each other to form a population with high diversity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.2.">Exploration and exploitation strategy</head><p>We perform exploration and exploitation independently for each solution in the population. In the exploration process, ϑ candidate solutions are generated randomly around each old solution. To generate a candidate solution, we pick up an insertion or interchange operator with equal probability. Then, the selected operator is used to find a random neighboring solution in its neighborhood. In the exploitation phase, the candidate solution with the lowest makespan is found for each old solution. If the candidate solution is better than the old solution, it will replace the old solution and become a new solution in the next iteration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.3.">Path relinking based cooperative search</head><p>Zheng et al. <ref type="bibr" target="#b33">[33]</ref> introduced a cooperative search into FFO where solutions exchange information by an improved precedence operation crossover and multipoint preservative crossover. The crossovers of Zheng et al. <ref type="bibr" target="#b33">[33]</ref> are not suitable for our problem. Alternatively, the path relinking presented by Glover and Laguna <ref type="bibr" target="#b47">[47]</ref> is an effective solution-combination method that has been successfully used in the recent literature <ref type="bibr" target="#b48">[48]</ref> . Thus, we present a path relinking-based cooperative search for IFFO.</p><p>The cooperative search sets the current solution as the starting solution. Four methods are considered to determine the target solution. The first method always sets the best solution within the population as the target solution. Every solution exchanges information with the best solution. The algorithm performs an intensive search around the best solution and reduces the path relinking search to a small area. Although a fast convergence can be achieved, the best solution locating a local optimum may lead to a premature convergence. The second method randomly chooses a solution from the population as the target solution. This method equally visits the intermediate areas within the whole population, improving the diversity of the population and favoring exploration. The third method stores all of the solutions in a ring lattice and fixes the right (or left) neighbor of the current solution as its target solution. The method further degrades the influence of the best solution on the whole population, as each solution only exchanges information with its right (or left) neighbor and has no chance to exchange information with the other solutions. This slows down the convergence of IFFO, so the algorithm has a greater opportunity to avoid local optima. The last method is based on an agent lattice, which is one key component of the knowledge-based evolution algorithm and provides a physical environment for agents <ref type="bibr" target="#b33">[33]</ref> . Each solution is fixed on a lattice point and has four neighbors. The best neighbor of the current solution is selected as its target solution. This method can be regarded as a compromise among the above methods. We determine an appropriate method by calibration in Section 5 .</p><p>After the target solution is chosen, we need to determine a path from the starting solution to the target solution. For the job permutation based representation, we perform a series of interchange moves to transform the starting solution into the target solution. Each time we carry out an interchange move, an intermediate solution is obtained. As the number of moves increases, the attributes of the target solution are progressively introduced. The obtained intermediate solution looks more like the target solution than the starting solution. There are always multiple paths from the starting solution to the target solution. We randomly select a path to obtain the intermediate solutions. Let us consider an example with the starting solution π " = (1, 2, 3, 4, 5, 6) and the target solution π = (2, 4, 3, 5, 6, 1). An interchange from the candidate set {(1, 2), (2, 4), (4, 5), <ref type="bibr" target="#b5">(5,</ref><ref type="bibr" target="#b6">6)</ref>, (6, 1)} can make solution π " more like the target solution π . Suppose that move <ref type="bibr" target="#b2">(2,</ref><ref type="bibr" target="#b4">4)</ref>  During the path relinking procedure, we obtain a list of the intermediate solutions . To avoid a cycling search around a local optimum, we exclude the first and last intermediate solutions from the set , unless they improve their neighboring solutions. Naturally, the algorithm can be further enhanced by applying a local search to the intermediate solutions to visit the locally optimal areas along the path <ref type="bibr" target="#b47">[47]</ref> . It is not productive to apply a local search to each intermediate solution, because many of these solutions differ only by interchanging two elements, and the local searches would lead to the same local optimum. The application of a local search procedure to all of the intermediate solutions would also be very time consuming <ref type="bibr" target="#b48">[48]</ref> . The best solution often implies its most promising area, so we only perform the local search to the best solution from set . For the local search, we employ the exploration and exploitation strategy in Section 4.1.2 for simplicity. The resulting solution after the local search will replace the starting solution of the path and become a new solution in the next generation if the resulting solution is better than the starting solution.</p><p>To develop the path-relinking operators, we should keep the starting solution π " and the target solution π different, i.e. , π " = π . There also exists a case where transforming π " to π needs only a few moves, and the intermediate set is empty. In this case, we perform two random interchanges for the starting solution π " to generate a new solution. The complete computational procedure of the presented path relinking the cooperative search algorithm is outlined in Fig. <ref type="figure" target="#fig_15">16</ref> .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.4.">Diversity control strategy</head><p>As the population evolves after a number of generations, the solutions in the population become very similar. To address this problem, we present a diversity control scheme. At each generation, we determine the best makespan found so far. If the best makespan found so far has not been improved upon, we increment a counter. When the counter becomes larger than a threshold value, γ max , we abandon all solutions and introduce new solutions to the population. However, if all new solutions are generated randomly in the solution space, the search efficacy will be decreased, because the useful information collected by the abandoned solutions is not well-utilized. The abandoned solutions survived many generations, so they should carry good and promising information. In the experiments, we find that there are many similar blocks of jobs within the solutions, as was also observed by Ruiz and Maroto <ref type="bibr" target="#b10">[10]</ref> and Jarboui et al. <ref type="bibr" target="#b49">[49]</ref> . These blocks may be located at the same positions or different positions. If these blocks are broken after reproduction, an offspring with a worse makespan is often generated. Therefore, we propose to construct a new solution, taking advantage of both the abandoned solution and the information of the building blocks of jobs. Let [ δ j ', j ] n × n be a job block matrix containing n rows and n columns, where element δ j ', j represents the number of times that job j appears immediately after job j ' in all of the solutions. We yield a subsequence from π = ( π 1 , π 2 , ..., π n ) and try to keep the building blocks of the jobs. For each job π k of π , we calculate the remaining probability μ k . Then, a random number is generated between 0 and 1. If it is less than μ k , the job remains unchanged in the permutation; otherwise, it is removed. The remaining probability is given by</p><formula xml:id="formula_11">μ k = ⎧ ⎪ ⎪ ⎪ ⎪ ⎪ ⎨ ⎪ ⎪ ⎪ ⎪ ⎪ ⎩ 0 . 1 + δ π 1 , π 2 -δ min δ max -δ min × 0 . 8 i f k = 1 0 . 1 + ( δ π k -1 , π k + δ π k , π k +1 ) / 2 -λ min δ max -δ min × 0 . 8 i f 1 &lt; k &lt; n 0 . 1 + δ π n -1 , πn -δ min δ max -δ min × 0 . 8 i f k = n (<label>6</label></formula><formula xml:id="formula_12">)</formula><p>where</p><formula xml:id="formula_13">δ max = max k =1 , 2 ,...n k =1 , 2 ,...,n ( δ π k , π k ) , δ min = min k =1 , 2 ,...n k =1 , 2 ,...,n ( δ π k , π k ) .</formula><p>In Eq. ( <ref type="formula" target="#formula_11">6</ref>) , the remaining probability μ k is computed with regard to δ π k -1 , π k and δ π k , π k +1 for 1 &lt; k &lt; n , as job π k is included in blocks ( π k -1 , π k ) and ( π k , π k + 1 ). For the remaining probability μ 1 or μ n , only block ( π 1 , π 2 ) or ( π n -1 , π n ) needs to be considered. In each sub-equation, a factor 0.8 is employed to limit the remaining probability within the range of [0.1, 0.9]. In this way, the block with the greatest occurrence has a chance to be broken, whereas the block with the smallest occurrence has a chance to be kept, thereby introducing diversity. After obtaining the subsequence from an abandoned solution, we construct a new sequence by randomly inserting the missing jobs into randomly selected slots in the subsequence.</p><p>In the evolution process, every time the best makespan found so far does not change for more than γ max generations, our diversity control procedure is invoked. The 50% best solutions are replaced with the new solutions generated by the above building block based method, and the remaining 50% are replaced by new randomly generated schedules. Let = { 1 , 2 , ..., NS } be the current population. The diversity control scheme is described in Fig. <ref type="figure" target="#fig_17">17</ref>  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.5.">Procedure of IFFO for the SDST/HFS problem</head><p>The complete computational procedure of IFFO is outlined in Fig. <ref type="figure" target="#fig_18">18</ref> .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">IMBO algorithm</head><p>The migrating birds optimisation (MBO) presented by Duman et al. <ref type="bibr" target="#b31">[31]</ref> is another population-based metaheuristic. It was inspired by the V flight formation of migrating birds. In our previous study <ref type="bibr" target="#b33">[33]</ref> , we present an improved MBO (IMBO)  algorithm for the hybrid flowshop scheduling problem with a total flowtime criterion. We introduced some advanced and effective technologies including a diversified initialisation approach, a mixed neighborhood structure, and a leaping mechanism to improve the MBO. Our previous experiments demonstrated that the IMBO was a new state-of-the-art algorithm for the hybrid flowshop scheduling problem with a total flowtime criterion. IMBO makes few assumptions about the optimisation problem being solved, so we can adapt IMBO to the SDST/HFS problem under consideration by only changing the original objective evaluation function to our objective evaluation function. We will calibrate IMBO in Section 5 . For details on IMBO, the readers can refer to Pan and Dong <ref type="bibr" target="#b34">[34]</ref> .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.">DABC algorithm</head><p>The artificial bee colony (ABC) algorithm was inspired by the specific aggregating behaviors of honeybee swarms. It was proposed by <ref type="bibr">Karaboga [32]</ref> to optimise multi-variable and multi-modal continuous functions. Our previous study <ref type="bibr" target="#b35">[35]</ref> proposed a discrete artificial bee colony (DABC) algorithm for the hybrid flowshop problem with a makespan criterion. In the DABC, we developed a hybrid presentation that combines forward decoding and backward decoding methods. We generated an initial population with a high level of quality and diversity based on problem-specific heuristics. We introduced a new control parameter to conduct the search of the employed bees and onlooker bees with the intention of balancing the global exploration and local exploitation. We presented an enhanced strategy for the scout bee phase to prevent the algorithm from searching in poor regions of the solution space. We developed a problem-specific local refinement procedure to search for regions of the solution space that are not explored by the honey bees. Our extensive computational experiments showed that DABC was very effective in solving the HFS problem with the makespan criterion. In this paper, we adapt DABC to the considered SDST/HFS problem with the following changes: the original hybrid representation is replaced with the solution representation in Section 3.1 ; the original initialization method is replaced with the initialization method presented in Section 4.1.1 ; the problem-specific local refinement procedure is omitted; and the original objective evaluation function is replaced with our objective evaluation function. That is, DABC starts from an initial population generated by the method in Section 4.1.1 . Then, the employed bee stage, onlooker bee stage and scout bee stage, proposed in Pan et al. <ref type="bibr" target="#b35">[35]</ref> , are consecutively performed until a termination criterion is reached. Meanwhile, the balance strategy of exploration and exploitation of Pan et al. <ref type="bibr" target="#b35">[35]</ref> is utilized to achieve a high-performing algorithm. The readers can refer to Pan et al. <ref type="bibr" target="#b35">[35]</ref> for details on DABC.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Experimental calibration</head><p>We calibrate all of the presented nine algorithms by means of a design of experiments (DOE) approach and analysis of variance (ANOVA). We only detail the calibration of IFFO for reasons of space, but all experimental results are available upon request from the authors. IFFO has three control parameters: NS , ϑ, and γ max . After preliminary experiments, we test NS at three levels, 64, 81, and 100, ϑ at four levels, n /2, n /3, n /4, and n /5, and γ max at five levels, n , 2 n , 3 n , 4 n and + ∞ , where + ∞ denotes IFFO without the diversification strategy. We also test the selection method of the target solution in the path relinking procedure. As mentioned in Section 4.1.3 , we consider four methods that select the best solution, a random solution, the right neighbor, and the best neighbor based on an agent lattice. All of the possible combinations of the above factors result in a total of 4 × 3 × 5 × 4 = 240 different configurations for IFFO.</p><p>We consider a full factorial design, and for each of the 240 configurations, we solve a set of 60 instances. For the instances, we consider five different configurations for the number of jobs n ∈ {20, 40, 60, 80, 100} and three for the number of stages m ∈ {5, 8, 10}, for a total of 15 different configurations. For each configuration, we generate a problem where the processing times are uniformly distributed in the range of <ref type="bibr" target="#b1">[1,</ref><ref type="bibr">99]</ref>, i.e. , p k , j ∈ U <ref type="bibr" target="#b1">[1,</ref><ref type="bibr">99]</ref> and the number of parallel machines at each stage is uniformly distributed between 1 and 5, i.e., | M k | ∈ U <ref type="bibr" target="#b1">[1,</ref><ref type="bibr" target="#b5">5]</ref>. Four instances with different setup times are generated for each configuration, where the setup times are drawn from the uniform distributions U <ref type="bibr" target="#b1">[1,</ref><ref type="bibr" target="#b25">25]</ref>, U <ref type="bibr" target="#b1">[1,</ref><ref type="bibr" target="#b49">49]</ref>, U [1,99], and U [1124]. Thus, on average, the setup times correspond to 25, 50, 100, and 125% of the average processing times.</p><p>We code the IFFO in Microsoft Visual Studio 2013. All 240 configurations are run on the same Intel (R) Core (TM) i7-2600 CPU @ 3.40 GHz with 8.00 GB RAM in the Windows 7 Operation System. The algorithms stop if the termination criterion of the maximum elapsed CPU time of 50 • n • m milliseconds is met. The relative percentage increase (RPI) is calculated as a response variable as RP I(F ) = (F -F * ) / F * × 100 <ref type="bibr" target="#b7">(7)</ref> where F is the solution generated by a given algorithm configuration, and F * is the best solution found in the experiment.</p><p>Following Ruiz and Stützle <ref type="bibr" target="#b22">[22,</ref><ref type="bibr" target="#b23">23]</ref> , Pan and Ruiz <ref type="bibr" target="#b26">[26,</ref><ref type="bibr" target="#b27">27]</ref> , and many others, we carry out the experiments by ANOVA and analyse the experimental results using the F -ratio for those factors and interactions whose p -value is close to zero. The means plots of those factors and interactions are shown in Fig. <ref type="figure" target="#fig_19">19</ref> with Tukey's Honestly Significant Difference (HSD) confidence intervals at the 95% confidence level.</p><p>The most influential factor turns out to be the selection method of the target solution in the path relinking procedure. It can be observed from Fig. <ref type="figure" target="#fig_19">19</ref> (a) that there is a clear statistically significant difference among the four different methods (the non-overlapping intervals suggest a statistically significant difference at the 95% confidence level). The first method that always sets the best solution as the target solution yields the worst IFFO, whereas the second method that randomly selects a solution and the third method that chooses the right neighbor produce the two best IFFO algorithms, with the latter being significantly better than the former.</p><p>The second most influential factor is the threshold value γ max . It can be seen from the means plot in Fig. <ref type="figure" target="#fig_20">19 (b</ref>) that the performance of IFFO seriously degrades if the diversity control strategy is not adopted, i.e., γ max = + ∞ , demonstrating the effectiveness of using the diversification strategy in the evolution process. For γ max from n to 4 n , IFFO produces the best results with γ max = n .</p><p>We proceed with the analysis of the influence of the number of solutions, NS . We can observe from Fig. <ref type="figure" target="#fig_20">19 (c</ref>) that a smaller value NS = 64 leads to a significantly better IFFO than the other values. However, from Fig. <ref type="figure" target="#fig_20">19 (d)</ref>, the size of the solution has no significant effect on IFFO, suggesting that the IFFO is relatively robust when ϑ is in the range of [ n/ 5 , n/ 2 ] . Although ϑ = n /3 generates a lower average RPI than the other values, the interactions of NS and ϑ show that ϑ = n /2 works much better when NS = 64. So, we set ϑ = n /2 for this parameter.</p><p>Finally, we set the parameters of IFFO as γ max = n , ϑ = n /2, and NS = 64 and set the right neighbor of the current solution as its target solution in the path relinking procedure.</p><p>A similar method is used to calibrate the remaining eight algorithms. The parameters and operators of the presented algorithms are summarized in Table <ref type="table" target="#tab_3">3</ref> .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Computational evaluation</head><p>We test the performance of the presented nine algorithms by extensive numerical comparisons. We compare them with several well-performing meta-heuristics found in the literature: the immune algorithm (IA) of Zandieh et al. <ref type="bibr" target="#b8">[8]</ref> , the GA of Ruiz and Maroto <ref type="bibr" target="#b10">[10]</ref> , the ILSN of Naderi et al. <ref type="bibr" target="#b11">[11]</ref> , the ISA of Naderi and Zandieh <ref type="bibr" target="#b12">[12]</ref> , the artificial immune system (AIS) of Engin and Doyen <ref type="bibr" target="#b50">[50]</ref> , and the immunoglobulin-based artificial immune system (IAIS) of Chung and Liao <ref type="bibr" target="#b51">[51]</ref> . IA, GA, ILSN, and ISA are presented for SDST/HFS problems, whereas AIS and IAIS are for general HFS problems. We also consider the FFO algorithm (namely, nFFO) presented for the semiconductor final testing scheduling problem in Zheng et al. <ref type="bibr" target="#b32">[32]</ref> , the multi-restart iterated local search of Dong et al. (ILSD for short, where the capital letter D is taken from authors' name) <ref type="bibr" target="#b24">[24]</ref> for the permutation flowshop problem, and the variable iterated greedy (vIG) for the traveling salesman problem with time windows by Karaulut and Tasgetiren <ref type="bibr" target="#b52">[52]</ref> . We change the way that the makespan is calculated by the one shown in Section 4.1.1 for the above adapted algorithms. As done in Section 5 , we recalibrate the algorithmic parameters and operators by ANOVA. For nFFO, because the original precedence operation crossover and multipoint preservative crossover cannot be directly used for the job permutation, we test the commonly used crossover operators including one-point crossover, twopoint crossover, and the partial map crossover.</p><p>To evaluate these algorithms, we randomly generate a set of 300 instances with n ∈ {20, 40, 60, 80, 100} and m ∈ {5, 8, 10}, for a total of 15 combinations of n and m . For each combination, we generate 5 instances with p k , j ∈ U <ref type="bibr" target="#b1">[1,</ref><ref type="bibr">99]</ref> and | M k | ∈ U <ref type="bibr" target="#b1">[1,</ref><ref type="bibr" target="#b5">5]</ref>. Therefore, we have 15 × 5 = 75 instances in total. For each instances, we consider four uniform distributions  </p><formula xml:id="formula_14">s k , i , j ∈ U [1, 25], s k , i , j ∈ U [1 , 49], s k , i , j ∈ U [1 ,</formula><p>99] and s k , i , j ∈ U <ref type="bibr">[1 , 124]</ref>. Note that the above instances are quite different from those in Section 5 since we employ different random number seeds when generate them. We carry out four different evaluations, each with one setup time distribution. All of the algorithms adopt the same maximum elapsed CPU time limit of t = ρ • m • n milliseconds as a termination criterion, where ρ has been tested at <ref type="bibr">12 values, 25, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275</ref>, and 300, to provide an overall picture of the performance of the competing algorithms. All of the algorithms have been coded in Microsoft Visual Studio 2013, and the experiments are carried out on the same PC as described above. We carry out 5 independent runs for each algorithm for each of the 75 instances and adopt the minimal makespan found at ρ = 300 as F * to compute the RPI values. The average computed results and their ranks (in brackets) are reported in Tables 4-7 . In the tables, each cell is the average RPI over 375 results (combinations of instances and replications, i.e., 75 × 5 = 375).</p><p>Table <ref type="table" target="#tab_4">4</ref> shows the average RPI values and their ranks generated by the 18 competing algorithms at the 12 different elapsed CPU times for the instances with 25% setup times. It can be observed that all of the proposed algorithms perform much better than the existing population-based metaheuristics including GA, nFOA, AIS, IAIS, and IA in terms of the RPI values, regardless of the CPU time involved. The proposed DABC, IG MRLS , ILS MRLS , and ILS HLS , from best to worst, rank as the top four among the 18 competing algorithms. IG HLS ranks fifth for ρ ≤ 225, but it is surpassed by ILSD when ρ &gt; 225. IG VNS and ILS VNS are the worst two of the proposed algorithms and are surpassed by ILSN, vIG, and ILSD.</p><p>We further carry out a multifactor ANOVA to determine whether the observed differences from Table <ref type="table" target="#tab_4">4</ref> are indeed significantly different. The types of algorithms are considered as factors. We investigate the performance of the competing algorithms over the 12 different elapsed CPU times. IA is ruled out because its results are clearly worse, so it is not necessary to test for significance. The ANOVA results show that different types of algorithm result in statistically significant differences in the response variable (RPI) at a 95% confidence level. Fig. <ref type="figure" target="#fig_13">20</ref> reports the means plots together with the 95% HSD confidence intervals of the algorithms. It can be observed that the competing algorithms can be divided into 14 homogenous groups, with no significant differences within each group. These groups, from best to worst, are {DABC}, {IG MRLS }, {IL S MRLS }, {IL S HLS }, {IG HLS }, {IL SD, IMBO}, {IFFO, vIG, IL SN}, {IG VNS }, {IL S VNS }, {nFOA}, {GA}, {ISA}, {IAIS}, and {AIS}.</p><p>The computational results for the instances with 50, 100 and 125% setup times are reported in Tables <ref type="table" target="#tab_5">5</ref><ref type="table" target="#tab_6">6</ref><ref type="table" target="#tab_7">7</ref>. The means plots with 95% HSD confidence intervals for the instances with 50, 100 and 125% setup times are reported in Figs. <ref type="bibr">21 -23 .</ref> As we can see, DABC, IG MRLS , ILS MRLS , and ILS HLS are the top four performing algorithms with different setup times involved. DABC algorithm significantly outperforms the other competing algorithms for solving the SDST/HFS problem with the makespan criterion. <ref type="bibr" target="#b39">Vallada et al. (2003)</ref> [39] published a database for the SDST/HFS problems but with unrelated parallel machines during production stages. The database is an adaption of the dataset used in Taillard <ref type="bibr" target="#b53">[53]</ref> . Four types of sequence-dependent setup time are considered, corresponding to 10, 50, 100, and 125% of the processing times (termed SSD10, SSD50, SSD100 and SSD125, respectively). Two cases of the numerical distribution of the machines per stage are P13 (i.e., randomly distributed between one and three machines) and P3 (i.e., a constant number of three machines). Gomez-Gasquet et al. <ref type="bibr" target="#b9">[9]</ref> considered two load levels in the workshop (20 and 50 jobs) for the database, and they obtained a subset of the database including 240 instances in total. After computational experiments, Gómez-Gasquet et al. <ref type="bibr" target="#b9">[9]</ref> reported the best known makespan values for these 240 instances.</p><p>Following Gómez-Gasquet et al. <ref type="bibr" target="#b9">[9]</ref> , we solve the 240 benchmark instances using the presented DABC algorithm. We employ the same control parameters for the algorithm as those in Section 5.2 and run the algorithm with the maximum  elapsed CPU time limit of 300mn milliseconds. The computational results reveal that our DABC algorithm improves 126 best known makespan values among the 240 benchmark instances ( Tables <ref type="table" target="#tab_8">8</ref> and<ref type="table">9</ref> ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Conclusions</head><p>The hybrid flowshop scheduling problem has important applications in the chemical, textile, glass, and other industries. In this paper, we present a total of nine algorithms to minimize the makespan for the hybrid flowshop problem with sequence-dependent setup times: iterated local search with hybrid local search, iterated local search with variable neighborhood search, iterated local search with mixed referenced local search, iterated greedy with hybrid local search, iterated greedy with variable neighborhood search, iterated greedy with mixed referenced local search, improved fruit fly optimization, improved migrating birds optimization, and discrete artificial bee colony optimization. We calibrate their parameters and operators by means of a design of experiments approach and carry out extensive comparative evaluations of the  proposed algorithms against the most recent techniques for the considered problem in the literature. The experimental results and comparisons demonstrated the effectiveness of the proposed algorithms for the SDST/HFS problem with the makespan criterion.</p><p>The proposed algorithms fall into the category of stochastic local searches (SLSs), which make use of randomized choices in generating or selecting candidate solutions in the search process <ref type="bibr" target="#b54">[54]</ref> . It could be interesting to attempt to combine exact algorithms from the mixed integer programming paradigm, such as branch-and-bound and branch-and-cut, to improve their performance <ref type="bibr" target="#b55">[55,</ref><ref type="bibr" target="#b56">56]</ref> . It could be also interesting to apply the proposed algorithm to other optimization problems including hybrid flowshop scheduling problem with duedate window <ref type="bibr" target="#b57">[57]</ref> , assignment optimization in a multi-tier shuttle warehousing system <ref type="bibr" target="#b58">[58]</ref> , optimization of the dressing parameters <ref type="bibr" target="#b59">[59]</ref> , etc. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Hybrid local search procedure.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 .Fig. 4 .</head><label>34</label><figDesc>Fig. 3. Variable neighborhood search.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Referenced local search with interchange.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. Mixed referenced local search procedure.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Perturbation procedure.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Acceptance criterion.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 9 .</head><label>9</label><figDesc>Fig. 9. ILS HLS procedure.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 10 .</head><label>10</label><figDesc>Fig. 10. ILS VNS procedure.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 11 .</head><label>11</label><figDesc>Fig. 11. ILS MRLS procedure.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 12 .</head><label>12</label><figDesc>Fig. 12. MDC procedure.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 13 .</head><label>13</label><figDesc>Fig. 13. IG HLS procedure.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 14 .</head><label>14</label><figDesc>Fig. 14. IG VNS procedure.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Fig. 15 .</head><label>15</label><figDesc>Fig. 15. IG MRLS procedure.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>obtain π 2 .</head><label>2</label><figDesc>By combining π 1 and π 2 , we generate a solution π ' = π 1 ∪ π 2 .Step 4. Evaluating the generated solution π ', we obtain the whole schedule.There are | M 1 | machines at stage 1, and the first | M 1 | jobs of π = ( π 1 , π 2 , ..., π n ) are launched on these machines. So, in Step 2, we keep π 1</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head></head><label></label><figDesc>is chosen by a random selection, exchanging the positions of jobs 2 and 4 in the permutation. An intermediate solution π ' = (1, 4, 3, 2, 5, 6) is yielded. Then, we randomly perform a move, such as (2, 5), from the candidate move set {(1, 2), (2, 5), (5, 6), (6, 1)} to π ' and obtain a new solution (1, 4, 3, 5, 2, 6). Next, we let π ' = (1, 4, 3, 5, 2, 6) and repeat the above procedure. Finally, we reach the target solution π = (2, 4, 3, 5, 6, 1) and obtain a list of intermediate solutions = {(1, 4, 3, 2, 5, 6), (1, 4, 3, 5, 2, 6), (2, 4, 3, 5, 1, 6)}.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Fig. 16 .</head><label>16</label><figDesc>Fig. 16. Path relinking based cooperative search.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head></head><label></label><figDesc>.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Fig. 17 .</head><label>17</label><figDesc>Fig. 17. Diversity control method.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head>Fig. 18 .</head><label>18</label><figDesc>Fig. 18. IFFO procedure.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_19"><head>Fig. 19 .</head><label>19</label><figDesc>Fig. 19. Means plots of the parameters and operators of IFFO.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_20"><head>λ= 1 .</head><label>1</label><figDesc>0; β= 0.5; loop HLS = n 2 ; ω= 2; ϖ= 20 ILS VNS λ= 1.0; loop VNS = n 2 ; ω= 2; ϖ= 10 ILS MRLS λ= 1.0; π s = a randomly generated solution ; α= 4; ω= 2; ϖ= 10 IG HLS λ= 1.5; β= 0.5; loop HLS = 0.2 n 2 ; d = 3; Enh = false IG VNS λ= 1.0; loo p VNS = n 2 / 2 ; d = 4; Enh = false IG MRLS λ= 1.0; π s = current incumbent sequence ; α= 2; d = 3; Enh = false for setup times:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_21"><head>Fig. 21 .</head><label>21</label><figDesc>Fig. 21. Means plots of the competing algorithms for the instances with 50% setup times.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_22"><head>Fig. 22 .</head><label>22</label><figDesc>Fig. 22. Means plots of the competing algorithms for the instances with 100% setup times.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_23"><head>Fig. 23 .</head><label>23</label><figDesc>Fig. 23. Means plots of the competing algorithms for the instances with 125% setup times.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1</head><label>1</label><figDesc>Processing times p kj of jobs on stages 1 and 2.</figDesc><table><row><cell></cell><cell>J 1</cell><cell>J 2</cell><cell>J 3</cell><cell>J 4</cell></row><row><cell>Stage 1</cell><cell>4</cell><cell>5</cell><cell>4</cell><cell>3</cell></row><row><cell>Stage 2</cell><cell>5</cell><cell>5</cell><cell>3</cell><cell>2</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2</head><label>2</label><figDesc>Sequence-dependent setup times s kij of jobs on stages M 1 and M 2 .</figDesc><table><row><cell>Stage 1</cell><cell>Stage 2</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>leads to the earliest completion time. The completion time of job π j at stage k , C k, π j , is given by</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 3</head><label>3</label><figDesc>Calibrated parameters and operators for the nine presented algorithms.</figDesc><table><row><cell>Algorithms</cell><cell>Parameters and operators</cell></row><row><cell>IFFO</cell><cell>γ max = n ; ϑ = n /2; NS = 64; set the right neighbor of the current</cell></row><row><cell></cell><cell>solution as its target solution in the path relinking procedure</cell></row><row><cell>IMBO</cell><cell>Population size of 21; number of neighboring solutions to be</cell></row><row><cell></cell><cell>considered of 5; number of neighboring solutions to be</cell></row><row><cell></cell><cell>shared with the next solution of 2; number of tours of 10;</cell></row><row><cell></cell><cell>age limit of 100</cell></row><row><cell>DABC</cell><cell>Population size of 30; number of consecutive iterations in</cell></row><row><cell></cell><cell>which an individual is not improved of 100; replications of</cell></row><row><cell></cell><cell>the employed bee stage of 10; number of neighbors that are</cell></row><row><cell></cell><cell>generated for an abandoned individual in the scout phase of</cell></row><row><cell></cell><cell>30; Solution generation operator at insertion</cell></row><row><cell>ILS HLS</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 4</head><label>4</label><figDesc>Average RPI values and their ranks (in brackets) for the instances with 25% setup times.</figDesc><table><row><cell>ρ</cell><cell>ILS MRLS</cell><cell>ILS HLS</cell><cell>ILS VNS</cell><cell>IG MRLS</cell><cell>IG HLS</cell><cell>IG VNS</cell><cell>IFFO</cell><cell>MBO</cell><cell>ABC</cell><cell>ILSN</cell><cell>VIG</cell><cell>ILSD</cell><cell>GA</cell><cell>ISA</cell><cell>nFOA</cell><cell>AIS</cell><cell>IAIS</cell><cell>IA</cell></row><row><cell cols="7">25 2.42(4) 2.42(3) 3.91(13) 2.27(2) 2.49(5) 3.10(10)</cell><cell>3.14(11)</cell><cell cols="3">2.82(7) 2.07( 1 ) 2.74(6)</cell><cell cols="8">2.94(9) 2.89(8) 3.96(14) 4.99(15) 3.84(12) 6.02(16) 6.06(17) 16.84(18)</cell></row><row><cell cols="6">50 1.98(3) 2.01(4) 3.57(13) 1.86(2) 2.11(5)</cell><cell cols="5">2.64(11) 2.62(10) 2.31(6) 1.68(1) 2.38(8)</cell><cell cols="8">2.46(9) 2.38(7) 3.75(14) 4.76(15) 3.48(12) 5.61(17) 5.47(16) 16.84(18)</cell></row><row><cell cols="2">75 1.74(3)</cell><cell cols="4">1.81(4) 3.39(13) 1.63(2) 1.90(5)</cell><cell cols="5">2.42(11) 2.35(10) 2.08(6) 1.49(1) 2.19(8)</cell><cell cols="2">2.24(9) 2.10(7)</cell><cell cols="5">3.62(14) 4.62(15) 3.34(12) 5.44(17) 5.17(16)</cell><cell>16.84(18)</cell></row><row><cell cols="5">100 1.58(3) 1.66(4) 3.23(12) 1.47(2)</cell><cell>1.77(5)</cell><cell cols="2">2.26(11) 2.15(10)</cell><cell cols="3">1.94(7) 1.34(1) 2.09(9)</cell><cell cols="8">2.08(8) 1.93(6) 3.55(14) 4.51(15) 3.26(13) 5.31(17) 4.98(16) 16.83(18)</cell></row><row><cell cols="2">125 1.47(3)</cell><cell cols="2">1.56(4) 3.11(12)</cell><cell cols="2">1.36(2) 1.67(5)</cell><cell>2.16(11)</cell><cell>2.02(9)</cell><cell cols="2">1.82(7) 1.24(1)</cell><cell cols="9">2.02(10) 1.96(8) 1.79(6) 3.48(14) 4.44(15) 3.20(13) 5.20(17) 4.86(16) 16.83(18)</cell></row><row><cell cols="6">150 1.39(3) 1.49(4) 3.02(12) 1.26(2) 1.60(5)</cell><cell cols="2">2.05(11) 1.90(9)</cell><cell>1.73(7)</cell><cell>1.16(1)</cell><cell>1.97(10)</cell><cell cols="2">1.87(8) 1.67(6)</cell><cell cols="3">3.41(14) 4.38(15) 3.16(13)</cell><cell>5.10(17)</cell><cell cols="2">4.77(16) 16.83(18)</cell></row><row><cell cols="5">175 1.32(3) 1.43(4) 2.95(12) 1.18(2)</cell><cell>1.53(5)</cell><cell cols="2">1.98(11) 1.80(8)</cell><cell cols="2">1.66(7) 1.11(1)</cell><cell cols="6">1.93(10) 1.80(9) 1.58(6) 3.35(14) 4.33(15) 3.13(13)</cell><cell cols="3">5.03(17) 4.69(16) 16.83(18)</cell></row><row><cell cols="2">200 1.27(3)</cell><cell>1.37(4)</cell><cell cols="2">2.89(12) 1.13(2)</cell><cell cols="2">1.48(5) 1.91(11)</cell><cell>1.70(8)</cell><cell>1.61(7)</cell><cell cols="3">1.05(1) 1.88(10) 1.73(9)</cell><cell cols="4">1.50(6) 3.32(14) 4.28(15) 3.11(13)</cell><cell cols="3">4.98(17) 4.60(16) 16.83(18)</cell></row><row><cell cols="2">225 1.21(3)</cell><cell cols="6">1.32(4) 2.84(12) 1.08(2) 1.44(5) 1.85(10) 1.63(8)</cell><cell>1.57(7)</cell><cell>1.01(1)</cell><cell>1.85(11)</cell><cell>1.67(9)</cell><cell cols="4">1.45(6) 3.27(14) 4.25(15) 3.10(13)</cell><cell cols="3">4.91(17) 4.54(16) 16.83(18)</cell></row><row><cell cols="2">250 1.15(3)</cell><cell>1.27(4)</cell><cell cols="3">2.79(12) 1.04(2) 1.40(6)</cell><cell cols="2">1.81(10) 1.56(8)</cell><cell cols="3">1.53(7) 0.97(1) 1.82(11)</cell><cell cols="8">1.60(9) 1.39(5) 3.23(14) 4.22(15) 3.09(13) 4.86(17) 4.48(16) 16.83(18)</cell></row><row><cell cols="2">275 1.11(3)</cell><cell cols="4">1.23(4) 2.76(12) 1.00(2) 1.36(6)</cell><cell cols="2">1.77(10) 1.50(8)</cell><cell cols="3">1.49(7) 0.94(1) 1.79(11)</cell><cell cols="3">1.55(9) 1.32(5) 3.18(14)</cell><cell>4.18(15)</cell><cell cols="4">3.08(13) 4.83(17) 4.44(16) 16.83(18)</cell></row><row><cell cols="6">300 1.08(3) 1.20(4) 2.72(12) 0.96(2) 1.33(6)</cell><cell>1.74(10)</cell><cell>1.44(7)</cell><cell cols="3">1.46(8) 0.92(1) 1.76(11)</cell><cell cols="3">1.52(9) 1.28(5) 3.16(14)</cell><cell>4.16(15)</cell><cell cols="4">3.08(13) 4.80(17) 4.39(16) 16.83(18)</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 5</head><label>5</label><figDesc>Average RPI values and their ranks (in brackets) for the instances with 50% setup times.</figDesc><table><row><cell>ρ</cell><cell>ILS MRLS</cell><cell>ILS HLS</cell><cell>ILS VNS</cell><cell>IG MRLS</cell><cell>IG HLS</cell><cell>IG VNS</cell><cell>IFFO</cell><cell>MBO</cell><cell>ABC</cell><cell>ILSN</cell><cell>VIG</cell><cell>ILSD</cell><cell>GA</cell><cell>ISA</cell><cell>nFOA</cell><cell>AIS</cell><cell>IAIS</cell><cell>IA</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>Table 6</head><label>6</label><figDesc>Average RPI values and their ranks (in brackets) for the instances with 100% setup times.</figDesc><table><row><cell>ρ</cell><cell>ILS MRLS ILS HLS</cell><cell>ILS VNS</cell><cell>IG MRLS</cell><cell>IG HLS</cell><cell>IG VNS</cell><cell>IFFO</cell><cell>MBO</cell><cell>ABC</cell><cell>ILSN</cell><cell>VIG</cell><cell>ILSD</cell><cell>GA</cell><cell>ISA</cell><cell>nFOA</cell><cell>AIS</cell><cell>IAIS</cell><cell>IA</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Table 7</head><label>7</label><figDesc>Average RPI values and their ranks (in brackets) for the instances with 125% setup times. Means plots of the competing algorithms for the instances with 25% setup times.</figDesc><table><row><cell>ρ</cell><cell>ILS MRLS ILS HLS</cell><cell>ILS VNS</cell><cell>IG MRLS</cell><cell>IG HLS</cell><cell>IG VNS</cell><cell>IFFO</cell><cell>MBO</cell><cell>ABC</cell><cell>ILSN</cell><cell>VIG</cell><cell>ILSD</cell><cell>GA</cell><cell>ISA</cell><cell>nFOA</cell><cell>AIS</cell><cell>IAIS</cell><cell>IA</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8"><head>Table 8</head><label>8</label><figDesc>Best-known solutions for the benchmark instances<ref type="bibr" target="#b32">[32]</ref> with 20 jobs (The new best-known solutions found by DABC are in bold).</figDesc><table><row><cell>Instances</cell><cell>P13</cell><cell></cell><cell></cell><cell></cell><cell>P3</cell><cell></cell><cell></cell></row><row><cell></cell><cell>SSD10</cell><cell>SSD50</cell><cell>SSD100</cell><cell>SSD125</cell><cell>SSD10</cell><cell>SSD50</cell><cell>SSD100</cell><cell>SSD125</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>This research is partially supported by the National Natural Science Fund for Distinguished Young Scholars of China 61525304 , the National Science Foundation of China 51575212 and 61603169 .</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Best-known solutions for the benchmark instances [32] with 50 jobs (The new best-known solutions found by DABC are in bold)</title>
		<idno>Instances P13 P3 SSD10 SSD50 SSD100 SSD125 SSD10 SSD50 SSD100 SSD125 ta032 2579 2810 3099 3277 660 919 1163 1304 ta034 2718 3020 3406 3608 655 934 1189 1300 ta036 2749 3201 3802 4062 657 907 1159 1258 ta038 2681 2923 3263 3432 619 901 1170 1302 ta040 2679 2956 3295 3485 665 900 1189 1295 ta042 2971 3409 3977 4327 826 1158 1501 1660 ta044 2960 3595 4334 4697 820 1139 1516 1663 ta046 2909 3463 4130 4 4 46 900 1230 1570 1725 ta048 3002 3525 4126 4508 912 1225 1572 1719 ta050 2967 3347 3820 4029 876 1203 1538 1705 ta052 3314 4030 4894 5329 1198 1585 2023 2221 ta054 3178 3889 4718 5228 1248 1634 2068 2255 ta056 3302 4004 4844 5272 1270 1661 2068 2271 ta058 3421 4094 5051 5512 1218 1586 2035 2244 ta060 3400 4032 4842 5231 1262 1641 2082 2272</idno>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Scheduling: Theory, Algorithms and Systems</title>
		<author>
			<persName><forename type="first">M</forename><surname>Pinedo</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
			<publisher>Prentice-Hall</publisher>
			<pubPlace>Englewood Cliffs, NJ</pubPlace>
		</imprint>
	</monogr>
	<note>second ed.</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Scheduling in n -jobs m stage flow shop with parallel processors to minimize makespan</title>
		<author>
			<persName><forename type="first">C</forename><surname>Rajendran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Chaudhuri</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Prod. Econ</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="137" to="143" />
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Optimization and approximation in deterministic sequencing and scheduling: a survey</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Graham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">L</forename><surname>Lawler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">K</forename><surname>Lenstra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">H G</forename><surname>Rinnooy Kan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Ann. Discret. Math</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="287" to="362" />
			<date type="published" when="1979">1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Proust , Les problèmes d&apos;ordonnancement de type flow-shop hybride: état de l&apos;art</title>
		<author>
			<persName><forename type="first">A</forename><surname>Vignier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Billaut</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">RAIRO Recherche Operationnelle</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="page" from="117" to="183" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
	<note>in French</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Two-stage hybrid flowshop scheduling problem</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">N D</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Oper. Res. Soc</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="page" from="359" to="364" />
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Comparing scheduling rules for flexible flow lines</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">E</forename><surname>Kurz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">G</forename><surname>Askin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Prod. Econ</title>
		<imprint>
			<biblScope unit="volume">85</biblScope>
			<biblScope unit="page" from="371" to="388" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Scheduling flexible flow lines with sequence-dependent setup times</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">E</forename><surname>Kurz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">G</forename><surname>Askin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">159</biblScope>
			<biblScope unit="page" from="66" to="82" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">An immune algorithm approach to hybrid flow shops scheduling with sequence-dependent setup times</title>
		<author>
			<persName><forename type="first">M</forename><surname>Zandieh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M T F</forename><surname>Ghomi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M M</forename><surname>Husseini</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Appl. Math. Comput</title>
		<imprint>
			<biblScope unit="volume">180</biblScope>
			<biblScope unit="page" from="111" to="127" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">An agent-based genetic algorithm for hybrid flowshops with sequence dependent setup times to minimise makespan</title>
		<author>
			<persName><forename type="first">P</forename><surname>Gómez-Gasquet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Andrés</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">C</forename><surname>Lario</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Expert Syst. Appl</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="page" from="8095" to="8107" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A genetic algorithm for hybrid flowshops with sequence dependent setup times and machine eligibility</title>
		<author>
			<persName><forename type="first">R</forename><surname>Ruiz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Maroto</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">169</biblScope>
			<biblScope unit="page" from="781" to="800" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Algorithms for a realistic variant of flowshop scheduling</title>
		<author>
			<persName><forename type="first">B</forename><surname>Naderi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ruiz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Zandieh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="page" from="236" to="246" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">An improved simulated annealing for hybrid flowshops with sequence-dependent setup and transportation times to minimize total completion and total tardiness</title>
		<author>
			<persName><forename type="first">B</forename><surname>Naderi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Zandieh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">K G</forename><surname>Balagh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Roshanaei</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Expert Syst. Appl</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="page" from="9625" to="9633" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Modeling realistic hybrid flexible flowshop scheduling problems</title>
		<author>
			<persName><forename type="first">R</forename><surname>Ruiz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Sivrikaya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Serifoglu</surname></persName>
		</author>
		<author>
			<persName><surname>Urlings</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="page" from="1143" to="1159" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">An evaluation of sequencing heuristics for flexible flowshop scheduling problems with unrelated parallel machines and dual criteria</title>
		<author>
			<persName><forename type="first">J</forename><surname>Jungwattanakit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Reodecha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Chaovalitwongse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Werner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 12th IFAC/IFIP/IFORS/IEEE Symposium on Information Control Problems in Manufacturing (INCOM 2006)</title>
		<meeting>the 12th IFAC/IFIP/IFORS/IEEE Symposium on Information Control Problems in Manufacturing (INCOM 2006)<address><addrLine>St Etienne, F rance</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006-07-19">May 17-July 19. 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Algorithms for flexible flow shop problems with unrelated parallel machines, setup times, and dual criteria</title>
		<author>
			<persName><forename type="first">J</forename><surname>Jungwattanakit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Reodecha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Chaovalitwongse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Werner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Adv. Manuf. Technol</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="page" from="354" to="370" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Hybrid flow shop scheduling with sequence dependent family setup time and uncertain duedates</title>
		<author>
			<persName><forename type="first">E</forename><surname>Ebrahimi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M T</forename><surname>Fatemi Ghomi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Karimi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Appl. Math. Modell</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="page" from="2409" to="2504" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Multi-objective function optimization using non-dominated sorting genetic algorithms</title>
		<author>
			<persName><forename type="first">N</forename><surname>Sirnivas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Deb</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Evol. Comput</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="221" to="248" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Multi-objective genetic algorithm and its application to flow shop scheduling</title>
		<author>
			<persName><forename type="first">T</forename><surname>Murata</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Ishibuchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Tanaka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Ind. Eng</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="957" to="968" />
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Review and classification of hybrid flow shop scheduling problems from a production system and a solutions procedure perspective</title>
		<author>
			<persName><forename type="first">I</forename><surname>Ribas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Leisten</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Framinan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="page" from="1439" to="1454" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">The hybrid flow shop scheduling problem</title>
		<author>
			<persName><forename type="first">R</forename><surname>Ruiz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Vazquez Rodriguez</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">205</biblScope>
			<biblScope unit="page" from="1" to="18" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Iterated local search, Chapter 11</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">R</forename><surname>Lourenço</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><forename type="middle">C</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Handbook of Metaheuristics</title>
		<editor>
			<persName><forename type="first">F</forename><forename type="middle">W</forename><surname>Glover</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">G</forename><forename type="middle">A</forename><surname>Kochenberger</surname></persName>
		</editor>
		<meeting><address><addrLine>Norwell, MA</addrLine></address></meeting>
		<imprint>
			<publisher>Kluwer Academic Publishers</publisher>
			<date type="published" when="2003">2003</date>
			<biblScope unit="volume">57</biblScope>
			<biblScope unit="page" from="321" to="353" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">A simple and effective iterated greedy algorithm for the permutation flowshop scheduling problem</title>
		<author>
			<persName><forename type="first">R</forename><surname>Ruiz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">177</biblScope>
			<biblScope unit="page" from="2033" to="2049" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">An iterated greedy heuristic for the sequence dependent setup times flowshop problem with makespan and weighted tardiness objectives</title>
		<author>
			<persName><forename type="first">R</forename><surname>Ruiz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">187</biblScope>
			<biblScope unit="page" from="1143" to="1159" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Self-adaptive perturbation and multi-neighborhood search for iterated local search on the permutation flow shop problem</title>
		<author>
			<persName><forename type="first">X</forename><surname>Dong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Maciek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Lin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">87</biblScope>
			<biblScope unit="page" from="176" to="185" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">A multi-restart iterated local search algorithm for the permutation flow shop problem minimizing total flow time</title>
		<author>
			<persName><forename type="first">X</forename><surname>Dong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Maciek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Lin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="page" from="627" to="632" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">An effective iterated greedy algorithm for the mixed no-idle permutation flowshop scheduling problem</title>
		<author>
			<persName><forename type="first">Q</forename><forename type="middle">K</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ruiz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">OMEGA-Int. J. Manag. Sci</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="page" from="41" to="50" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Local search methods for the flowshop scheduling problem with flowtime minimization</title>
		<author>
			<persName><forename type="first">Q</forename><forename type="middle">K</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ruiz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">222</biblScope>
			<biblScope unit="page" from="31" to="41" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">A variable iterated greedy algorithm with differential evolution for the no-idle permutation flowshop scheduling problem</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Tasgetiren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><forename type="middle">K</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">N</forename><surname>Suganthan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Buyukdagli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="page" from="1729" to="1743" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Iterated local search based on multi-type perturbation for single-machine earliness/tardiness scheduling</title>
		<author>
			<persName><forename type="first">T</forename><surname>Qin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Peng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Benlic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">C E</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Lü</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">61</biblScope>
			<biblScope unit="page" from="81" to="88" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">A new fruit fly optimization algorithm: taking the financial distress model</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">T</forename><surname>Pan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Knowl.-based Syst</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="69" to="74" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Migrating birds optimization: a new metaheuristic approach and its performance on quadratic assignment problem</title>
		<author>
			<persName><forename type="first">E</forename><surname>Duman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Uysal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">F</forename><surname>Alkaya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Inf. Sci</title>
		<imprint>
			<biblScope unit="volume">217</biblScope>
			<biblScope unit="page" from="65" to="77" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">An Idea Based On Honey Bee Swarm For Numerical Optimization</title>
		<author>
			<persName><forename type="first">D</forename><surname>Karaboga</surname></persName>
		</author>
		<idno>TR06</idno>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
		<respStmt>
			<orgName>Erciyes University, Engineering Faculty, Computer Engineering Department</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">A novel fruit fly optimization algorithm for the semiconductor final testing scheduling problem</title>
		<author>
			<persName><forename type="first">X</forename><forename type="middle">L</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">Y</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Knowl.-based Syst</title>
		<imprint>
			<biblScope unit="volume">57</biblScope>
			<biblScope unit="page" from="95" to="103" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">An improved migrating birds optimisation for a hybrid flowshop scheduling with total flowtime minimization</title>
		<author>
			<persName><forename type="first">Q</forename><forename type="middle">K</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Dong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Inf. Sci</title>
		<imprint>
			<biblScope unit="volume">277</biblScope>
			<biblScope unit="page" from="67" to="77" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">A novel discrete artificial bee colony algorithm for the hybrid flowshop scheduling problem with makespan minimization</title>
		<author>
			<persName><forename type="first">Q</forename><forename type="middle">K</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">Q</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">OMEGA-Int. J. Manag. Sci</title>
		<imprint>
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="page" from="42" to="56" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">A discrete artificial bee colony algorithm for the total flowtime minimization in permutation flow shops</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Tasgetiren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><forename type="middle">K</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">N</forename><surname>Suganthan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">H L</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Inf. Sci</title>
		<imprint>
			<biblScope unit="volume">181</biblScope>
			<biblScope unit="page" from="3459" to="3475" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">A modified artificial bee colony algorithm for order acceptance in two-machine flow shops</title>
		<author>
			<persName><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">C E</forename><surname>Cheng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Prod. Econ</title>
		<imprint>
			<biblScope unit="volume">141</biblScope>
			<biblScope unit="page" from="12" to="23" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">An effective co-evolutionary artificial bee colony algorithm for steelmaking-continuous casting scheduling</title>
		<author>
			<persName><forename type="first">Q</forename><forename type="middle">K</forename><surname>Pan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">250</biblScope>
			<biblScope unit="page" from="702" to="714" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title level="m" type="main">Synthetic and Real Benchmarks for Complex Flow-shops Problems</title>
		<author>
			<persName><forename type="first">E</forename><surname>Vallada</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ruiz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Maroto</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
		<respStmt>
			<orgName>Grupo de Investigación Operativa (GIO), Universitat Politécnica de València</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Variable neighborhood search: principles and applications</title>
		<author>
			<persName><forename type="first">P</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mladenovic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">130</biblScope>
			<biblScope unit="page" from="449" to="467" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">A particle swarm optimization algorithm for makespan and total flowtime minimization in the permutation flowshop sequencing problem</title>
		<author>
			<persName><forename type="first">M</forename><surname>Tasgetiren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">C</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sevkli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Gencyilmaz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">177</biblScope>
			<biblScope unit="page" from="1930" to="1947" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">The distributed permutation flowshop scheduling problem</title>
		<author>
			<persName><forename type="first">B</forename><surname>Naderi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ruiz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="page" from="754" to="768" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">A discrete artificial bee colony algorithm for the total flowtime minimization in permutation flow shops</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Tasgetiren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><forename type="middle">K</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">N</forename><surname>Suganthan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">H L</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Inf. Sci</title>
		<imprint>
			<biblScope unit="volume">181</biblScope>
			<biblScope unit="page" from="3459" to="3475" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">A discrete differential evolution algorithm for the permutation flowshop scheduling problem</title>
		<author>
			<persName><forename type="first">Q</forename><forename type="middle">K</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Tasgetiren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">C</forename><surname>Liang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Ind. Eng</title>
		<imprint>
			<biblScope unit="volume">55</biblScope>
			<biblScope unit="page" from="795" to="816" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">A heuristic algorithm for the m -machine, n -job flow shop sequencing problem</title>
		<author>
			<persName><forename type="first">M</forename><surname>Nawaz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">E J</forename><surname>Enscore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Ham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">OMEGA</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="91" to="95" />
			<date type="published" when="1983">1983</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Applying Iterated Local Search To The Permutation Flow Shop Problem</title>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
		<idno>AIDA-98-04</idno>
	</analytic>
	<monogr>
		<title level="j">FG Itellektik, FB Informatik</title>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
		<respStmt>
			<orgName>TU Darmstadt</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Tabu search</title>
		<author>
			<persName><forename type="first">F</forename><surname>Glover</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Laguna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Modern Heuristic Techniques For Combinatorial Optimization Problems</title>
		<editor>
			<persName><forename type="first">C</forename><forename type="middle">R</forename><surname>Reeves</surname></persName>
		</editor>
		<meeting><address><addrLine>Blackwell, Oxford</addrLine></address></meeting>
		<imprint>
			<biblScope unit="page" from="70" to="150" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">A tabu search/path relinking algorithm to solve the job shop scheduling problem</title>
		<author>
			<persName><forename type="first">B</forename><surname>Peng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">C E</forename><surname>Cheng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">53</biblScope>
			<biblScope unit="page" from="154" to="164" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">An estimation of distribution algorithm for minimizing the total flowtime in permutation flowshop scheduling problems</title>
		<author>
			<persName><forename type="first">B</forename><surname>Jarboui</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Eddaly</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Siarry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="page" from="2638" to="2646" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">A new approach to solve hybrid flow shop scheduling problems by artificial immune system</title>
		<author>
			<persName><forename type="first">O</forename><surname>Engin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Doyen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Futur. Gener. Comput. Syst</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="1083" to="1095" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">An immunoglobulin-based artificial immune system for solving the hybrid flow shop problem</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">P</forename><surname>Chung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">J</forename><surname>Liao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Appl. Soft Comput</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="3726" to="3736" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">A variable iterated greedy algorithm for the traveling salesman problem with time windows</title>
		<author>
			<persName><forename type="first">K</forename><surname>Korhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Tasgetiren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Inf. Sci</title>
		<imprint>
			<biblScope unit="volume">279</biblScope>
			<biblScope unit="page" from="383" to="395" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Benchmarks for basic scheduling problems</title>
		<author>
			<persName><forename type="first">E</forename><surname>Taillard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">64</biblScope>
			<biblScope unit="page" from="278" to="285" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<monogr>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">H</forename><surname>Hoos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Stutzle</surname></persName>
		</author>
		<title level="m">Stochastic Local Search Foundation and Application</title>
		<imprint>
			<publisher>Elsevier Inc</publisher>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">Local optimization of dynamic programs with guaranteed satisfaction of path constraints</title>
		<author>
			<persName><forename type="first">J</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Faust</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Chachuat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Mitsos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Automatica</title>
		<imprint>
			<biblScope unit="volume">62</biblScope>
			<biblScope unit="page" from="184" to="192" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">Metaheuristics-the metaphor exposed</title>
		<author>
			<persName><forename type="first">K</forename><surname>Sorensen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. Trans. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="3" to="18" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">Iterated search methods for earliness and tardiness minimization in hybrid flowshops with due windows</title>
		<author>
			<persName><forename type="first">Q.-K</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ruiz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A.-F</forename><surname>Pedro</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">80</biblScope>
			<biblScope unit="page" from="50" to="60" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">Assignment optimization in a multi-tier shuttle warehousing system</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Mou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Wu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Chin. J. Mech. Eng</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="page" from="63" to="73" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<analytic>
		<title level="a" type="main">Optimization of the dressing parameters in cylindrical grinding based on a generalized utility function</title>
		<author>
			<persName><forename type="first">A</forename><surname>Irina</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Chin. J. Mech. Eng</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="page" from="63" to="73" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
