<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">AN ALGORITHM FOR SHORTEST-PATH MOTION IN THREE DIMENSIONS *</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Christos</forename><forename type="middle">H</forename><surname>Papadimitriou</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Stanford University</orgName>
								<address>
									<postCode>94305</postCode>
									<settlement>Stanford</settlement>
									<region>CA</region>
									<country key="US">U.S.A</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">National Technical University of Athens</orgName>
								<address>
									<postCode>157 73</postCode>
									<settlement>Athens</settlement>
									<country key="GR">Greece</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">AN ALGORITHM FOR SHORTEST-PATH MOTION IN THREE DIMENSIONS *</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">8018A9D04D15402DC2F4D5624ECAA1C2</idno>
					<note type="submission">Received 11 June 1984</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T15:55+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Shortest path</term>
					<term>path planning</term>
					<term>polyhedral obstacle</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We describe a fully polynomial approximation scheme for the problem of finding the shortest distance between two points in three-dimensional space in the presence of polyhedral obstacles. The fastest algorithm known for the exact solution of this problem is doubly exponential.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Given two points and several polyhedral obstacles in three-dimensional space, we wish to find the shortest path between the given points that avoids the obstacles. This is an interesting algorithmic problem motivated by motion planning, recently posed by Sharir and Schorr <ref type="bibr" target="#b6">[7]</ref>. The twodimensional case with polygonal obstacles is a rather well looked at problem; the fastest algorithm known for it is O(n 2 logn) <ref type="bibr" target="#b6">[7]</ref>, and O(mn log m), where m is the number of polygonal obstacles, when these obstacles are convex <ref type="bibr" target="#b4">[5]</ref>. The special case of the three-dimensional problem in which the two endpoints lie on the surface of a convex polyhedron (and thus the shortest path is going to be a sort of geodesic of the polyhedron) was also solved in polynomial time in <ref type="bibr" target="#b6">[7]</ref>. However, the general three-dimensional problem appears to be much harder. The difficulty seems to come from the complex nonlinear metric imposed by two skew lines in three-dimensional space. For example, there is no efficient algorithm &amp;nown for finding the shortest path touching several such lines in a specified order. The obvious algebraic formulation of the problem gives rise to a system of simultaneous quartic equations, which take doubly exponential time to solve <ref type="bibr" target="#b6">[7]</ref>.</p><p>In this paper we give a fully polynomial approximation scheme for the general three-dimensional shortest-path problem. That is, given an instance of the problem and a positive real ~, we find a path which is of length at most (1 + e) times the length of the shortest path, in time that is polynomial in the size of the instance and 1/E.</p><p>The basic idea in our algorithm is quite straightforward: Since it is so hard to compute shortest paths through skew lines, we break such lines into a number of short segments. These segments are such that the distance between two points on two segments can be considered constant and independent of the precise position of two points within the two segments, and the resulting relative error in the calculation of shortest distances does not exceed E. We then solve a shortest path problem in a graph with the segments as nodes. It turns out that this breaking must be done in a particular nontrivial way, if the relative error is to remain bounded by e and the number of segments polynomial.</p><p>In the next section we present the basic ideas, which lead to an algorithm with complexity O(n4(L + log(n/e))2/e2); here, n is the number of elements (vertices, edges, and faces) of the polyhedral scene, e the desired accuracy of the approximation algorithm, and L the precision of the integers used, that is, the number of bits in the largest integer describing the coordinates of any scene element. (Note: It is rather unfortunate, but seemingly necessary, that L must appear in our estimates of the efficiency of our algorithm, as it does, for example, in Khacian's famous algorithm for linear programming <ref type="bibr" target="#b2">[3]</ref>. Such algorithms are not strongly polynomial in the terminology of <ref type="bibr" target="#b5">[6]</ref>.) To better understand this bound, notice that the term K = L + log(n/t) is essentially the precision of the instance, as it contains the logarithm of n plus the logarithm of the largest integer used in the instance, plus the number of leading zero bits of e.</p><p>In Section 3 we discuss a possible improvement of the running time to O(n3K2/e), other evidence about the complexity of this problem, and we argue about the practicality of our approach.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">The algorithm</head><p>We are given a polyhedral scene, that is, a set of polyhedra given in terms of the coordinates of their vertices, the endpoints of their edges, and the perimeters of their faces, and two points s and t. We assume that s does not lie on any edge of the scene. This is not a loss of generality. There are n vertices in the scene, and thus O(n) edges and faces. We assume that the coordinates of all points are given as integers. Let L be the logarithm (base 2) of the largest integer appearing as a coordinate. Both n and L characterize the size of the instance in hand.</p><p>We wish to find the shortest path Irom s to t; that is, the shortest continuous curve connecting s and t that avoids all polyhedra in the scene. By 'avoiding' we mean that the curve is disjoint from the union of the open polyhedra. It is easy to see that the shortest curve will be a broken straight line, with all breakpoints lying on edges of the polyhedra <ref type="bibr" target="#b6">[7]</ref>.</p><p>Consider an edge ~ of the scene, and the distance a from point s to ~. We define a coordinate system on ~ with the origin at the closest point to s, and a sequence of points on ~ with coordinates x 0 = 0, xj = ela(1 + el) j-~, j = 1, 2 ..... and their negatives x j = -xj. e~ is a small constant to be fixed later. We have thus divided the edge into several segments. We subdivide this way all lines in our scene. Naturally, we stop at the ends (i.e., vertices) of the edges of the scene. How many such segments are there totally? Lemma 1. There are at most N = O(n(L + log(1/e 1))/e l) segments.</p><p>Proof. The longest edge of our scene is not longer than 2 L+ 1. The shortest distance between any pair of nonintersecting lines cannot be smaller than 2 -3L (remember, this distance is the distance of two parallel planes with integer coefficients with at most L bits, and thus a 3 Ã— 3 determinant of such integers). The sequence of points defined on each line is a geometric progression with ratio 1 + el-Taking logarithms, we conclude that each line will be subdivided into O((L+ log(1/el))/~l) segments. [] We denote the maximum number of segments in any line by M. These segments are the basic elements of our algorithm. Before calculating the distances between any two segments, we must first determine, for each pair of segments, that there are two points, one on each, which are 'visible' from the other. If two such points exist, we say that the two segments are visible from each other. The way this relation can be computed is explained in the following lemma.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 2. We can construct the visibility relation of the segments in O(N 2+n 41ogM+Mn 31ogn) time.</head><p>Proof. This problem is quite intricate, despite its deceivingly simple statement. Our method is based on ideas reported in <ref type="bibr" target="#b1">[2]</ref>, although this proof is reasonably self-contained.</p><p>We fix a pair of lines, and we compute the visibility relation of the segments on these two lines. Repeating for each pair, we obtain the whole relation. Let us fix a coordinate system (x for one line, y on the other), and let us study the region R of the (x-y)-plane which represents pairs of points of the two lines visible from one another. We first observe that two points x and y on these lines are not visible from each other (that is, (x, y)~ R) if and only if their line intersects one of O(n) triangles in which we can subdivide the surfaces of the polyhedra of our scene. Let T~ be one such triangle, and let R, be all x-y pairs such that the line between the two corresponding points does not intersect triangle T~. Thus, R = f') R~. We shall next show that the R~'s have a particularly nice structure.</p><p>The line defined by the two points with coordinates x and y in the perspective systems intersects the triangle if it intersects the three half-planes defining the triangle. Now, it is an interesting elementary observation that the necessary and sufficient condition for such a line to intersect a half-plane is of the form ( It follows that each region R i is the intersection of three hyperbolic regions, which is easy to construct in constant time. By construct we mean to determine its vertices--i.e., points belonging to more than one hyperbolic arc of the boundary --and the equations of the hyperbolic arcs between any two adjacent vertices. We must now form the intersection of O(n) such regions. We can do this by the obvious incremental algorithm in O(n 2) time. The output of this process i.s a planar graph of degree two (the boundary of R), with points of the (x-y)-plane as vertices, and hyperbolic arcs as edges. Up to now, the time is O(n 2) for this pair of lines.</p><p>Having done this, we can compute the visibility relation of the segments of the two lines as follows.</p><p>We essentially wish to know, for each of the O(M 2) rectangles in which the (x-y)-plane is divided by the two subdivisions of the axes into O(M) segments, whether the rectangle intersects R. This is done as follows: We traverse the boundary of R, and, for each vertex we determine the rectangle in which it belongs (this takes time O(log M) for each vertex, and O(n 2 log M) in all). For each arc, we find the boundaries of rectangles it intersects (time O(Mn), since we have at most one intersection of each hyperbola with each straight line). By sorting these intersection points on each horizontal or vertical line (time O(Mn log n)) we can compute whether each rectangle intersects with R: We just check whether its boundary intersects the boundary of R or else is in the interior of R, and if not, whether it contains a vertex of the boundary of R. If all fail, the rectangle has no intersection with R, and the corresponding two segments are totally invisible from each other.</p><p>The total time, for a pair of lines, comes to O(n 210gM+Mnlogn+M2).</p><p>For the whole scene, the bound is O(N 2 + n 4 log M + Mn 3 log n), which is the bound to be proved. [] We then compute the distance of any two segments related by the visibility relation. Their distance is the distance of the midpoints of the segments. Segments that are not visible from one another have infinite distance. The way that the segments were defined guarantees that the error made by considering the distance between any two points of two segments as constant is not too great. In particular, we can prove the following lemma.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 3. Let v be a segment, â€¢(v) its length, and D(v) its minimum straight-line distance from s. Then ~(v) &lt; elD(v ).</head><p>Proof. Suppose that v is the segment [x j, x j+l], j &gt;~ 0. Let a be the distance from s to the line of v.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Then D(v) &gt;~ max(a, xj }, and, by the definition of the xj's, ~(v) ~&lt; ~1 min(a, xj ). []</head><p>We then apply Dijkstra's algorithm <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b5">6]</ref> in the resulting graph. If the shortest path found has infinite cost, then there is no obstacle-avoiding path in our scene. Otherwise, the shortest path from s to t found by the algorithm is transformed into an actual three-dimensional obstacle-avoiding path as follows: We replace the edge from segment v to segment w by any obstacle-avoiding segment joining any point of v with any point of w (since tile distance between v and w is finite, such a segment exists). We connect these endpoints by straight lines. Suppose that the path yielded by our algorithm is Q= s, ql, r 1 ..... qk, rk, 1, where qj and rj are points of the same segment wj, and let P = s, p~ ..... Pr, t be the actual shortest path, with point pj lying on segment vj. We let d(x, y) stand for the distance between the points x and y. If P is a path, then d(P) is its length. It follows from the above that d(Q)~&lt; d(P)+ ~k=lf(Wj)+~=mf(Vj). However, recall that, by Lemma 3, t~(v) ~&lt; sl D(v). Also, it is easy to see that D(vj)~&lt; d(P), and D(wj)~ d(Q). Finally, observe that f~ n, because no two segments of the same edge are in the optimal path from s to t; as for the path yielded by our algorithm, it is easy to see that k ~&lt; 2n, because at most two segments from each edge can participate. This implies that</p><formula xml:id="formula_0">d(Q)(1 -2n~1) ~&lt; d(P)(1 + n~l).</formula><p>Using the given bound for e~, the lemma follows.</p><p>[] Theorem. There is an algorithm which, given a scene with n edges and coordinates with precision L, and an t &gt; O, yields a path with relative error at most ~ in O(n4(L + log(n/E))2/t 2) time.</p><p>Proof. Just take ~ = e/4n, recalling Lemmas 1, 4, and the fact that Dijkstra's algorithm works in O(N 2) time. []</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Discussion</head><p>There is one, rather complicated for the result achieved, way to improve this by a factor of n/~. The idea is this: We do not assume the distance between two points on the same segment to be constant, but a linear function of the coordinates. That is, suppose that we have two segments with midpoints x 1 and yl, where we have now taken as the origin of the coordinate systems on the two lines the points of smallest distance of the two lines. Instead of taking the distance between any two points x and y of these segments to be, say, d(xl, Yl), we can take it to be x l -Yl cos 0 d(x,, yl)+(x-x,)</p><p>-d~x~: y,)</p><formula xml:id="formula_1">+ (Y -Yl ) Ya -xl cos 0 d(xl, Yl) '</formula><p>where 0 is the angle of the two lines. This is the Taylor expansion of the distance around (x 1, Yl), truncated after the linear term. Our shortest path problem now becomes a continuous version in which for each node v we can choose a parameter X(v) ~ [0, 1], and the distance between u and v is now of the form a+ bX(u)+cX(v). We must choose the optimum sequence of nodes s, v 1, .... Vk, t and parameters X(vl) ..... X(Vk) such that the total distance is minimum. Fortunately, we can solve this harder version of the shortest path problem in O(N 2) time as well. Just observe that the optimum has values for the X's that are either 1 or 0. As a consequence, the problem reduces to an ordinary shortest path problem with 2N nodes. What we have achieved is that the error in approximating the distances is now smaller. Each leg of the path introduces an error of O(e~), and thus in the proof of the Theorem we could take c~ = Â¢r~-/n, for a bound of O(n3K2/e + naK). We can get rid of the second term by relying on a visibility relation in which two segments are related if all their points are visible. The ideas is that, if two segments are partially obscured by a polyhedron, each sees all of a segment of the obscuring polyhedron, or, if not, of the polyhedron which partially obscures them, and so on. The details are rather unpleasant, since the counterpart of Lemma 4 would now require an argument for handling segments that are not obstacle-free (this argument is similar to the one for partial visibility outlined above).</p><p>Is the three-dimensional shortest-path problem NP-complete? For one, it does not seem to be in NP at all, because of the difficulty with the skew lines mentioned before. This difficulty is reminiscent of a similar one with the Euclidean traveling salesman problem and the precision required in evaluating tours <ref type="bibr" target="#b5">[6]</ref>, although the present situation is far more complex, and, furthermore, there is no obvious discretization to help avoid the issue. If we are tempted to do some kind of discretization (e.g., allow breakpoints of the path with only integer coordinates) we conjecture that the resulting problem is NP-hard, although such a variant would lack most of the complexities of the original problem. Naturally, our algorithm suggests that it is not strongly NP-hard.</p><p>It should be mentioned that One desirable feature of our approach is that its main algorithmic part is a shortest path computation. Computing shortest paths is among the problems that can be parallelized easiest. By this we mean that the speed-up obtained by using many processors on the problem is very close to the number of processors used, and the total delay can be brought down to the same power of the logarithm of the input size. We can find shortest paths in parallel by adopting the matrix multiplication version of the Bellman-Ford algorithm <ref type="bibr" target="#b3">[4]</ref>, and paraUeli7ing the matrix computation in the obvious way. Finally, the visibility computation can be naturally parallelized. The class of problems that are so nicely parallelizable (with parallel time which is polynomial in the logarithm of the input, and a polynomial number of processors involved) is usually denoted NC. Our algorithm meets these strict criteria, since the preprocessing step can be easily parallelized, and the rest is a shortest path computation.</p><p>Our algorithm is probably not fast enough to be immediately practical, but it is not of 'strictly theoretical interest' either. For a scene with 50 lines and three decimal places of precision, we can get solutions that are at most 10% of the optimum in something like 101Â° steps. Naturally, this is far better than the doubly exponential exact (or even the exponential exhaustive approximate) approach suggested in <ref type="bibr" target="#b6">[7]</ref>. Although we do not know how to improve the asymptotic time requirements of our algorithm below n3K2/e, it is quite apparent that both the algorithm and the argument are rather wasteful by accounting for worst cases, both in terms of the time requirements and the error of the solution found. We conjecture that our result can be the basis of a reasonable approach to this problem. In fact, we would not be very surprised if this idea is already in use in some existing motion planning systems.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>x-a)(y-b)&lt;c or (x-a)(y-b)&gt; c [2]. (Proof: We shall show that the points x and y on the two lines which also lie at a common plane through a fixed third line satisfy (x -a)(y -b) = c for appropriate a, b, and c. Consider a system of cylindrical coordinates with axis the line ~. If 0 is the angle of the plane, then we must have, for appropriate constants a~ .... , b 4 defining the two lines tan0=a~x+a2=bly+b2 a3x + a 4 b3y + b 4 ' from which we obtain (x -a)(y -b)= c.)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Lemma 4 .</head><label>4</label><figDesc>Suppose that ~1 &lt;~ 1/8n. Then the path yielded by our algorithm satisfies d(Q)~&lt; (1 + 4e 1 n)d(P). Proof. Since Q is the result of the algorithm, we have that d(s, m(w,) .... ,m(wk), t) d(s, m(v 1 ) .... ,m(ve), t), where by m(v) we denote the midpoint of the segment v. Also, k d(Q) ~&lt; d(s, m(w,) ..... m(Wk), t)+ Y'. f(Wj) j=l and g d(s, m(vl),...,m(vt), t) ~&lt; d(P) + Y'. f(vj), j=l from the triangle inequality in Euclidean 3-space.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgment</head><p>Many thanks are due to Rod Brooks for his criticism of my original algorithm for visibility, which led to Lemma 2, and to Leo Guibas for helpful discussion concerning this lemma.</p></div>
			</div>


			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>* This research has been supported by a grant from the National Science Foundation, by the Hughes Artificial Intelligence Laboratory, and by the Hellenic Ministry for Research and Technology.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>INFORMATION PROCESSING LETI'ERS</head></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A note on two problems in connexion with graphs</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">W</forename><surname>Dijkstra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Numerische Mathematik</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="259" to="261" />
			<date type="published" when="1959">1959</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Visibility and intersections of hyperbolic regions</title>
		<author>
			<persName><forename type="first">L</forename><surname>Guibas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">H</forename><surname>Papadimitriou</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1984">1984</date>
		</imprint>
	</monogr>
	<note>In preparation</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A polynomial algorithm for linear programming</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">G</forename><surname>Khacian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Dokl. Soviet Acad. Sci</title>
		<imprint>
			<date type="published" when="1979">1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">L</forename><surname>Lawler</surname></persName>
		</author>
		<title level="m">Combinatorial Optimization: Networks and Matroids</title>
		<meeting><address><addrLine>Holt, Rinehart &amp; Winston; New York</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1976">1976</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">The discrete geodesic problem</title>
		<author>
			<persName><forename type="first">J</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Mount</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">H</forename><surname>Papadimitriou</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1984">1984</date>
		</imprint>
	</monogr>
	<note>Unpublished manuscript</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">H</forename><surname>Papadimitriou</surname></persName>
		</author>
		<author>
			<persName><surname>Steiglitz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Combinatorial Optimization: Algorithms and Complexity</title>
		<imprint>
			<publisher>Englewood Cliffs</publisher>
			<date type="published" when="1982">1982</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><surname>Sharir</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Sehorr</surname></persName>
		</author>
		<title level="m">Proc. 16th STOC</title>
		<meeting>16th STOC</meeting>
		<imprint>
			<date type="published" when="1984">1984</date>
			<biblScope unit="page" from="144" to="153" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
