<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Mixminion: Design of a Type III Anonymous Remailer Protocol</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">George</forename><surname>Danezis</surname></persName>
							<email>george.danezis@cl.cam.ac.uk</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Cambridge</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Roger</forename><surname>Dingledine</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Cambridge</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Nick</forename><surname>Mathewson</surname></persName>
							<email>nickm¡@freehaven.net</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Cambridge</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Mixminion: Design of a Type III Anonymous Remailer Protocol</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">647C0580A5A873CF225A50B098944817</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T14:50+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We present Mixminion, a message-based anonymous remailer protocol with secure single-use reply blocks. Mix nodes cannot distinguish Mixminion forward messages from reply messages, so forward and reply messages share the same anonymity set. We add directory servers that allow users to learn public keys and performance statistics of participating remailers, and we describe nymservers that provide long-term pseudonyms using single-use reply blocks as a primitive. Our design integrates link encryption between remailers to provide forward anonymity. Mixminion works in a real-world Internet environment, requires little synchronization or coordination between nodes, and protects against known anonymity-breaking attacks as well as or better than other systems with similar design parameters.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Overview</head><p>Chaum first introduced anonymous remailers over 20 years ago <ref type="bibr" target="#b6">[7]</ref>. The research community has since introduced many new designs and proofs <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b27">28,</ref><ref type="bibr" target="#b28">29]</ref>, and discovered a variety of new attacks <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b34">35]</ref>. But because many of the newer designs require considerable coordination, synchronization, bandwidth, or processing resources, deployed remailers still use Cottrell's Mixmaster design from 1994 <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b25">26]</ref>. Here we describe Mixminion, a protocol for asynchronous, loosely federated remailers that maintains Mixmaster's flexibility while addressing the following flaws:</p><p>¢ Replies: Mixmaster does not support replies or anony- mous recipients -people who want these functions must use the older and less secure Cypherpunk Type I remailer design <ref type="bibr" target="#b30">[31]</ref>, which is vulnerable to replay attacks. We introduce a new primitive called a singleuse reply block (SURB), which makes replies as secure as forward messages. Furthermore in Mixminion the remailers themselves cannot distinguish reply messages from forward messages. We also describe how to use these SURBs to securely build higher-level systems such as nymservers. By integrating reply capabilities into Mixminion, we can finally retire the Type I remailer network.</p><p>¢ Forward anonymity: Mixmaster uses SMTP (normal mail) for transport. We use TLS over TCP for link encryption between remailers and use ephemeral keys to ensure forward anonymity for each message. Link encryption also blocks many active and passive attacks on the communication links.</p><p>¢ Replay prevention and key rotation: If an adversary records the input and output batches of a mix and then replays a message, that message's decryption will remain the same. Thus an attacker can completely break the security of the mix-net <ref type="bibr" target="#b6">[7]</ref>. Mixmaster 2.0 offered replay prevention by keeping a list of recent message IDs -but because it expired old entries to keep the list short, the adversary simply has to wait until the mix has forgotten a message and replay it. Newer versions of Mixmaster keep a replay cache and also discard messages more than a certain number of days old. To block timestamp attacks, clients randomly add or subtract a few days from the timestamp. But this approach may still be open to statistical attacks; see Section 5.4. Mixminion instead counters replays by introducing key rotation: a message is addressed to a given key, and after the key changes no messages to the old key will be accepted, so the mix can forget about all the messages addressed to old keys. The number of IDs a node needs to remember between key rotations is not too great a burden.</p><p>¢ Exit policies: Exit abuse is a serious barrier to wide- scale remailer deployment: most Internet Service Providers (ISPs) do not tolerate systems that potentially deliver hate mail, etc. Mixminion provides a consistent mechanism for each node to specify and advertise an exit policy. We further describe a protocol which allows recipients to opt out of receiving mail from remailers, but at the same time makes it difficult for an adversary to deny service to interested recipients.</p><p>¢ Integrated directory servers: Mixmaster uses sev- eral ad hoc approaches to distribute information about remailer availability, performance, and keys. But the fact that users and remailers operate with different information introduces partitioning attacks. Mixminion uses a small group of synchronized redundant directory servers to provide uniform information about the network.</p><p>¢ Dummy traffic: Cottrell briefly mentions dummy messages in <ref type="bibr" target="#b7">[8]</ref>, but they are not part of the specification <ref type="bibr" target="#b25">[26]</ref>. Mixminion uses a simple dummy policy for now, but because we use our own transport, we support many link padding and dummy traffic schemes.</p><p>We review mixes and mix-nets in Section 2, describe our goals and assumptions in Section 3, and then address the above list of improvements in Sections 4-7. We then summarize how our design stands up to known attacks, and conclude with a list of open problems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Background</head><p>Chaum introduced the concept of using relay servers, or mixes, for anonymous communications <ref type="bibr" target="#b6">[7]</ref>. Each mix has a public key which senders use to encrypt messages to it. The mix accumulates a batch of these encrypted messages, decrypts them, and delivers them. Because a decrypted output message looks nothing like the original encrypted input message, and because the mix collects a batch of messages and then sends out the decrypted messages in a rearranged order, an observer cannot learn which incoming message corresponds to which outgoing message. Chaum showed the security of a mix against a passive adversary who eavesdrops on all communications but is unable to observe the reordering inside the mix. Pfitzmann fixed a weakness in Chaum's original scheme based on the properties of raw RSA encryption <ref type="bibr" target="#b31">[32]</ref>.</p><p>However, trusting a single mix is dangerous: the mix itself could be controlled by an adversary. Therefore users send their messages through a series of mixes: if some of the mixes are honest (not run by the adversary), some anonymity is preserved. In some schemes, such as Mixmaster <ref type="bibr" target="#b25">[26]</ref> and Babel <ref type="bibr" target="#b13">[14]</ref>, the sender chooses the mixes that make up her message's path. Specifically, when Alice wants to send an anonymous message to Bob through mixes £ ¥¤ , £ §¦ , and £ ©¨, she encrypts her message succes- sively with the public keys of the mixes in reverse order. She includes routing information at each hop, so that each mix £ © receives the address of £ ¤ along with the mes- sage intended for £ ¤ (all encrypted under £ 's public key).</p><p>A mix network where Alice chooses her route freely from all mixes is called a free-route network. Another approach is a cascade network, where senders choose from a set of fixed paths through the mix-net. Cascades can provide greater anonymity against an adversary who owns many mixes <ref type="bibr" target="#b5">[6]</ref>, but they are also more vulnerable to blending attacks such as trickle or flooding attacks <ref type="bibr" target="#b36">[36]</ref>. Further, cascade networks arguably have lower maximum anonymity because the number of people Alice can hide among (her anonymity set) is limited to the number of messages the weakest node in her cascade can handle. In a free-route network, larger anonymity sets are possible because no single mix acts as a bottleneck: many mixes handle traffic in parallel as messages traverse the network. Mix cascade research includes real-time mixes <ref type="bibr" target="#b17">[18]</ref> and web mixes <ref type="bibr" target="#b3">[4]</ref>.</p><p>More complex designs use zero-knowledge proofs and stronger assumptions to guarantee delivery or to detect and exclude misbehaving participants. These include flash mixes <ref type="bibr" target="#b15">[16]</ref>, hybrid mixes <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b28">29]</ref>, and provable shuffles <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b27">28]</ref>. The properties of these designs are appealing, but they are often impractical since they assume fairly strong coordination and synchronization between the mixes and impose a heavy computational and communication overhead. Some mix-net designs allow recipients to construct reply blocks that allow others to send messages to them without knowing their identities. A reply block contains only the routing portion of a message; the actual contents are appended by the user who eventually sends a message to the recipient. In this case the contents are effectively encrypted at each step in the path rather than decrypted. The recipient knows all the keys used in the reply block and can peel off all the layers of encryption when the message arrives. Such a design was first introduced by Chaum <ref type="bibr" target="#b6">[7]</ref> and later extended in Babel <ref type="bibr" target="#b13">[14]</ref>. However, Babel's replies are indistinguishable from forward messages only by passive observers -the mix nodes can still tell them apart. Babel's reply addresses are also multiple-use, making them less secure than forward messages due to replay vulnerabilities.</p><p>The first widespread public implementations of mixes were produced by contributors to the Cypherpunks mailing list. These "Type I" anonymous remailers were inspired both by the problems surrounding the anon.penet.fi service <ref type="bibr" target="#b14">[15]</ref>, and by theoretical work on mixes. Hughes wrote the first Cypherpunk anonymous remailer <ref type="bibr" target="#b30">[31]</ref>; Finney followed closely with a collection of scripts that used Phil Zimmermann's PGP to encrypt and decrypt remailed messages. Later, Cottrell implemented the Mixmaster system <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b25">26]</ref>, or "Type II" remailers, which added message padding, message pools, and other mix features lacking in the Cypherpunk remailers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.">Known attacks against mix-nets</head><p>Attacks against mix-nets aim to reduce the anonymity of users by linking anonymous senders with the messages they send, by linking anonymous recipients with the messages they receive, or by linking anonymous messages with one another <ref type="bibr" target="#b34">[35]</ref>. Attackers may trace messages through the network by observing network traffic, compromising mixes, compromising keys, delaying messages so they stand out from other traffic, or altering messages in transit. They may learn a given message's destination by flooding the network with messages, replaying multiple copies of a message, or shaping traffic to isolate the target message from other unknown traffic. Attackers may discourage users from using honest mixes by making them unreliable. They may analyze intercepted message text to look for commonalities between otherwise unlinked senders. Finally, even if all other attacks are foiled, a passive adversary can mount a long-term intersection attack to correlate the times at which senders and receivers are active <ref type="bibr" target="#b5">[6]</ref>.</p><p>We discuss each of these attacks in more detail below, along with the aspects of the Mixminion design that provide defense. We provide a summary of the attacks and our defenses against them in Section 9.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Design goals and assumptions</head><p>Mixminion brings together the current best practical approaches for providing anonymity in a batching messagebased free-route mix environment. We do not aim to provide a low-latency connection-oriented service like Freedom <ref type="bibr" target="#b37">[37]</ref> or Onion Routing <ref type="bibr" target="#b39">[39]</ref>: while those designs are more convenient for common activities like anonymous web browsing, their low latency necessarily implies smaller anonymity sets than with slower, message-based services. Indeed, we intentionally restrict the set of options for users: we provide only one cipher suite and we avoid extensions that would help an adversary partition the anonymity set. These assumptions lead to the following design goals:</p><p>First of all, the system must be simple to deploy. Past systems have never found it easy to get a reliable group of mix operators to run long-lived servers. Mixminion must add as few technical barriers as possible. Thus our protocol uses clock synchronization only to notice when a mix's key has expired, achieves acceptable performance on commodity hardware, requires little coordination between servers, and can automatically handle servers joining and leaving the system. Furthermore, the system must be simple for clients. Because software adoption has also been a barrier to past systems, we attempt to make the requirements for senders and receivers as low as possible. Thus, only users who receive anonymity from the system must run special software -that is, users should be able to receive messages from anonymous senders and send messages to anonymous recipients with a standard email client. (Non-anonymous recipients receive messages via e-mail; non-anonymous senders using reply blocks send messages via e-mail gateways.) Users must also be able to send and receive anonymous messages using only commodity hardware. Finally, although users with persistent network connections are necessarily more resistant to intersection attacks than users with intermittent connections, the system must offer the latter users as much anonymity as possible.</p><p>We choose to drop packet-level compatibility with Mixmaster and the Cypherpunk remailer systems in order to provide a simple extensible design. We can retain minimal backwards compatibility by "remixing" Type II (Mixmaster) messages inside Type III (Mixminion) messages, thus increasing anonymity sets in the Type III network. (A Type II message traveling between backward-compatible Type III remailers is encrypted to the next remailer in the chain using its Type III key, and sent as a Type III encrypted message. The recipient decrypts it to reveal the Type II message.)</p><p>For our threat model, we assume a well-funded adversary who can observe all traffic on the network; who can generate, modify, delete, or delay traffic on the network; who can operate mixes of its own; and who can compromise some fraction of the mixes on the network. Our adversary tries to link senders and receivers, to identify the sender or receiver of a given message, or trace a sender forward (or a receiver backward) to its messages.</p><p>The Mixminion design tries to make it as hard as possible for an adversary observing the network to gain any additional information about communicating partners beyond its a priori belief. It does this by providing very little information to outside observers, and intermediate nodes, to avoid intersection attacks. In particular, even intermediary nodes are not aware of the actual route length (which can be as long as 32 hops) or their position in the network. Furthermore, the processing for replies is exactly the same as for normal messages, and it is therefore difficult to partition the anonymity sets by distinguishing between them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">The Mixminion Mix-net Design</head><p>Mixminion uses a free-route mix-net just like Mixmaster <ref type="bibr" target="#b25">[26]</ref> and Babel <ref type="bibr" target="#b13">[14]</ref>. Mixminion's principal difference from earlier mix-net designs is the mechanism it uses to support reply messages with the same processing machinery as forward messages, while at the same time resisting the attacks described above.</p><p>Mixminion does not implement reusable reply blocks, such as those in the Cypherpunk remailer and in Babel. They are convenient, but they pose a security risk -by their very nature they let people send multiple messages through them. An attacker can use this property to trace the recipient's path: if two incoming batches both include a message to the same reply block, then the next hop must be in the intersection of both outgoing batches. To prevent these replays, Mixminion provides only single-use reply blocks (SURBs). Since replies may be rare relative to forward messages, and thus much easier to trace, the Mixminion protocol makes reply messages indistinguishable from forward messages even for the mix nodes. Thus forward and reply messages can share the same anonymity set. <ref type="foot" target="#foot_0">1</ref>Mixminion's reply model requires anonymous recipients to keep one secret for each nym they maintain. The final header of the SURB includes a seed (symmetrically encrypted to that nym's secret), from which the recipient can derive all the secrets needed to strip the layers of encryption from the received message. The recipient keeps a separate secret for each nym in order to block attacks to link the nyms. For example, if Alice is talking to Bob and Charlie and guesses they are the same person, she might reply to Bob's mail using Charlie's reply block; if Bob responds as normal, her guess would be confirmed.</p><p>The rest of this section describes the mechanism for secure replies, its integration with the normal sender anonymous message delivery, and how we defeat tagging-related attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">Recipient anonymity and indistinguishable replies</head><p>Mixminion allows Alice to send messages to Bob in one of three ways:</p><p>1. Forward messages where only Alice remains anonymous.</p><p>2. Direct Reply messages where only Bob remains anonymous.</p><p>3. Anonymized Reply messages where Alice and Bob remain anonymous.</p><p>The fact that forward messages are indistinguishable from replies, however, makes it more difficult to prevent tagging attacks. Since the author of a SURB cannot predict the message that will be attached to it, a hash of the entire message cannot be included in the SURB. Therefore, since we choose to make forward messages and replies indistinguishable, we cannot include hashes for forward messages either. Tagging attacks, and our approach to preventing them, are discussed in more detail in Section 4.2.</p><p>Messages are composed of a header section and a payload. We divide a message's path into two legs, and split the header section correspondingly into a main header and a secondary header. Each header is composed of up to 16 subheaders, one for each hop along the path. Each subheader contains a hash of the remainder of its header as seen by that mix, so we can do integrity-checking of the path (but not the payload) within each leg. Each subheader also contains a master secret, used to derive a symmetric key for decrypting the rest of the message. To make sure that the hash matches even though each hop must repad the header to maintain constant message length, we need to add predictable padding to the end of the header: the mix appends an appropriate number of zero bits to the header after message decryption, and decrypts those also. A security proof for a simplified version of this approach is given in <ref type="bibr" target="#b24">[25]</ref>.</p><note type="other">Sender Onion Sender Onion Payload Reply Block Single Use Random Data Single Use Reply Block Sender Onion Payload Version Shared Secret Digest Next Address 2kb size Payload 28kb size 2kb size 16 subheaders 16 subheaders Second Leg First Leg Forward Direct Reply Payload Reply Anonymized Up</note><p>Each subheader also includes the address of the next node to which the message should be forwarded, along with its expected signature (identity) key fingerprint -the mix refuses to deliver the message until the next hop has proved its identity.</p><p>For forward messages, Alice provides both legs. For anonymous replies, Alice uses Bob's reply block as the second leg, and generates her own path for the first leg. To send a direct reply, Alice can use an empty second leg, or send the reply block and message to a mix that can wrap them for her. Figure <ref type="figure" target="#fig_0">1</ref> illustrates the three options.</p><p>When Alice creates her message, she encrypts the secondary header with a hash of her payload (as well as the usual layered onion encryptions). Alice's message traverses the mix-net as normal (every hop pulls off a layer, verifies the hash of the current header, and puts some junk at the end of the header), until it gets to a hop that is marked as a crossover point. This crossover point performs a "swap" operation: it decrypts the secondary header with the hash of the current payload, and then swaps the two headers. The swap operation is detailed in Figure <ref type="figure">2</ref> -specifically, the normal operations done at every hop are those above the dotted line, and the operations performed only by the crossover point are those below the dotted line. We use</p><formula xml:id="formula_0">H1 H2 M RSA K H Check &amp; Decrypt PRNG LBC LBC H2' M' H2'' M'' LBC HASH H1' H1''</formula><p>Steps for all messages Extra steps for "Swap" messages</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 2. Operations performed by the "swap" method</head><p>a keyed encryption primitive, labeled "LBC" (for Large-Block Cipher), to encrypt the second header and the payload. This primitive needs to have certain properties:</p><p>¢ The LBC operation must preserve length.</p><p>¢ Without knowing the key, it should be impossible to recognize the decryption of a modified block, or to predict the effect of a modification on the decrypted block.</p><p>¢ The decryption and encryption operations should be equally secure when used for encryption.</p><p>To fulfill the above requirements we use a variablelength block cipher adapted to the length of the payloadthat is, a cipher that acts as a permutation on a block the size of its input (a header or the payload). One candidate is LI-ONESS <ref type="bibr" target="#b1">[2]</ref>. The cryptographic property required is that of a super-pseudo-random permutation (a.k.a. strong pseudorandom permutation) or SPRP <ref type="bibr" target="#b19">[20]</ref>. <ref type="foot" target="#foot_1">2</ref> Thus if any bit of the encrypted material is changed, the decryption will look like random bits. An SPRP is also equally secure in the encryption and decryption directions. In the following section, we describe how this approach helps protect against tagging.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Defenses against tagging attacks</head><p>To motivate the Mixminion design, we describe an attack that works against many mix-net protocols, including Mixmaster and Babel.</p><p>A tagging attack is an active attack in which a message is modified by altering part of it (for example by flipping bits) so that it can be recognized later in the path. A later mix controlled by the attacker can recognize tagged messages because the header or the body does not conform to the expected format when decrypted. Also, the final recipient can recognize a tagged message for which the payload has been altered. Thus, an attacker can use tagging to trace a message from the point at which it is tagged to the point at which the corrupted output appears.</p><p>Checking the integrity of hop headers individually is not sufficient to prevent tagging attacks. For example, in Mixmaster each hop header contains a hash of the other fields in that header <ref type="bibr" target="#b25">[26]</ref>. Each mix in the path checks the integrity of its own header and drops the message immediately if it has been altered. However, an attacking mix can still alter a header that will be decrypted only after several more hops, and so tagging attacks are still possible.</p><p>The most straightforward way to prevent tagging attacks is to verify the integrity of the whole message at every hop. For forward messages, then, the padding added to a message must be derived deterministically, so that it is possible to calculate authentication tags for the whole message at each hop. But the situation becomes more complicated when reply messages are introduced -the payload and the reply block are created by different users. It is impossible for the creator of the SURB to include in the header a checksum of a message he does not yet know. Therefore conventional techniques such as semantically secure or randomized encryption, that make sure an adversary does not gain any information by sending malformed messages to the mix (since the mix acts as a decryption oracle), cannot be used.</p><p>Mixminion uses a hybrid strategy to protect against such attacks: we use cryptographic checksums to protect the headers, and the "swap" step described above insures that the addressing information contained in the headers is destroyed if the payload is modified by an adversary.</p><p>If the Mixminion design did not require the crossover point, an adversary could mount a tagging attack by modifying the payload of a forward message as it leaves Alice and recognizing it later when it reaches Bob. For example, if our encryption mechanism were an ordinary countermode cipher, an adversary might alter a specific byte in the payload of a message entering the mix-net. Since many of the outgoing messages will be in part predictable (either entirely plaintext, or with predictable PGP header material), the adversary could later observe messages exiting the mix-net and look for payloads that have a corresponding anomaly at that byte. Other cipher modes such as Cipher Block Chaining (CBC) present comparable problems, since whole blocks would look like random bytes instead of the normal payload.</p><p>We use a large-block cipher as described in the previous section to minimize the amount of information an adversary can learn from tagging. If he tags a message leaving Alice, the payload will be entirely random when it reaches Bob. Thus, an adversary who tags a message can at worst turn the corresponding payload into trash (pseudorandom bit strings entirely unpredictable to the attacker).</p><p>We briefly considered introducing cover-trash, dummy messages designed to look like tagged messages, to frustrate these tagging attacks; but that problem is as complex as the dummy traffic problem <ref type="bibr" target="#b4">[5]</ref>. Instead, we use the "swap" step at the crossover point to prevent the attacker from learning information from tagging attacks. The second header of the message, which contains the path to the final destination of the forward path, is encrypted by the sender with the hash of the payload that is to arrive at the mix. The mix then needs to perform the decryption and swap the first header for the second one. Our security argument has three cases: ¢ Forward messages: if the message is tagged during the first leg, the second header is unrecoverable, and so the adversary cannot learn the intended destination of the message. If the message is tagged during the second leg, then the first leg has already provided anonymity, and so the adversary cannot learn the sender.</p><p>¢ Direct reply messages: since the decryption algorithm provides secrecy equivalent to encryption, the effect is similar to encrypting the payload at each step along a reply block. Only the recipient can learn, after peeling off all layers, whether the message has been tagged. Thus tagging attacks are useless against direct reply messages.</p><p>¢ Anonymized reply messages: as with forward mes- sages, if the first leg is tagged the second header is unrecoverable -so an adversary will never learn that the message was addressed to a reply block. And as with direct reply messages, only the recipient can learn if the second leg is tagged.</p><p>While direct reply messages do not need a crossover point in the path (the adversary can never observe his tag), forward messages still need a crossover point to prevent end-to-end tagging. But since the first leg either provides sufficient anonymity or destroys the information about the second leg, the second leg in a forward message can be short. At the extreme, the first hop in the second header could directly specify the message recipient. However, the choice of crossover point can still reveal information about the intended recipient (imagine that some mixes only allow outgoing mail to local addresses; if such a node gets a crossover message that has been trashed, it might guess that the recipient is one of the local addresses), and so we recommend that the second leg be at least a few hops long. We use a path length of 4 hops per leg, but with only 2 hops in the second leg of a forward message.</p><p>It is worth noting that while semantically secure encryption cannot be used directly to solve the problem of tagging attacks in Mixminion, the structure of the operations performed on the message as it travels through the network is similar to the Luby-Rackoff <ref type="bibr" target="#b19">[20]</ref> structure. In particular the fact that the header depends on the body and vice versa makes sure that if the message is tagged in any way it will become entirely different from what was intended, and its contents will provide no information at all to an attacker. Mixminion is the first system, to our knowledge, to achieve this property by distributing the operation of a cipher across many nodes of a mix network.</p><p>No mix except the crossover point can get any information distinguishing forward messages from replies. While the crossover point cannot be certain whether the message that it is processing is a forward message or a reply, it does gain partial information because crossover points are less frequent on forward paths, and therefore a message which is crossing-over is more likely to be a reply message.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.">Multiple-message tagging attacks</head><p>The above design is still vulnerable to a subtle and dangerous attack. If Alice sends a group of messages along the same path, the adversary can tag some of those message as they leave Alice, recognize the pattern (number and timing of tagged and untagged messages) at the crossover point, and observe where the untagged ones go. With some assumptions about our adversary, we can reduce this attack to a traffic confirmation attack we're already willing to accept: when Alice sends a bunch of messages, the adversary can count them and look for the pattern later. He can also drop some of them and look for resulting patterns.</p><p>The adversary can only recognize a tag if he happens to own the crossover point that Alice chooses. Therefore, Alice picks crossover points for her messages;<ref type="foot" target="#foot_2">3</ref> to match a tag signature with certainty, an adversary would have to own all crossover points. (And even then, it seems harder as the subsets of her messages would overlap with subsets of messages from other senders.)</p><p>The key here is that when the adversary doesn't own a given crossover point, tagging messages destined for that crossover is equivalent to dropping them. The crossover point in question simply doesn't deliver the message to the second leg. Therefore, if the adversary doesn't own most of the crossover points that Alice chooses, a successful multiple-message tagging attack seems infeasible. We leave a security analysis of the multiple-paths idea to future work, but see Section 8.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Other design decisions</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.">Forward secure link encryption and its benefits</head><p>Unlike remailer Types I and II that used SMTP <ref type="bibr" target="#b32">[33]</ref> (ordinary Internet e-mail) as their underlying transport mechanism, Mixminion clients and nodes communicate using a forward secure encrypted channel based on TLS <ref type="bibr" target="#b9">[10]</ref>. TLS allows the establishment of an encrypted tunnel using ephemeral Diffie-Hellman key negotiation. In order to guarantee that the receiving end is the one intended by the creator of the anonymous message, the receiving node signs the ephemeral key. As soon as a session key has been established, the parties destroy their Diffie-Hellman keys and begin sending messages through the tunnel. After each message, the parties perform a standard key update operation to generate a fresh session key and delete the old key material. Key updates don't require any asymmetric encryption techniques, and so are relatively fast.</p><p>The purpose of link encryption is to provide forward secrecy: once the ephemeral link keys have been deleted, not even the nodes that exchange messages can decrypt or recognize messages that might have been intercepted on the links. This makes it impossible to comply with demands for decryption of past traffic that might be served in some jurisdictions, and limits the impact of server compromise on the anonymity of messages already delivered. Even if an attacker manages to get hold of the session key at a particular point he would have to observe all subsequent traffic to be able to update his key appropriately.</p><p>Additionally link encryption makes active and passive attacks on the network links more difficult. Since a message tells each mix the identity of its successor in the path, it is difficult for an attacker to mount a man-in-the-middle attack to modify messages, inject messages to a node as if they were part of the normal communications, or delete messages. An additional heartbeat signal in the TLS tunnel could be used to complicate message delaying attacks.</p><p>The encrypted channel offers only limited protection against traffic analysis. Encrypted links between honest nodes prevent an adversary from recognizing even his own messages, but without link padding, he can still measure how much traffic is being transmitted.</p><p>As a fringe benefit, using a separate link protocol makes it easier to deploy relay-only mixes -such nodes simply omit SMTP support, as the next section discusses.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.">Message types and delivery modules</head><p>Once a Mixminion packet reaches the final mix in its path, it must either be delivered to its intended recipient, dropped if it is an intra-network dummy message, or processed further if it is a remixed Type II packet. In order to support different kinds of delivery, the header includes a type code for the action to be taken to deliver the message. A few types -such as 'dummy', 'SMTP', and 'local delivery' -are specified as a part of the Mixminion standard. Others may be added by future extensions to implement abuse-resistant exit policies (see Section 5.3), to administer nymservers (see <ref type="bibr">Section 7)</ref>, to publish anonymously to Usenet, to relay messages to older remailers, or to support other protocols.</p><p>Nearly all delivery methods require additional information beyond the message type and its payload. The SMTP module, for example, requires a mailbox. <ref type="foot" target="#foot_3">4</ref> This information is placed in a variable-length annex to the final subheader.</p><p>The types each mix supports are described in a capability block, which also includes the mix's address, long-term (signing) public key, short-term (message decryption) public key, remixing capability, and batching strategy. Mixes sign these capability blocks and publish them on directory servers (see <ref type="bibr">Section 6)</ref>. Clients download this information from the directory servers.</p><p>The possibility of multiple delivery methods doesn't come free: their presence may fragment the anonymity set. For example, if there were five ways to send an SMTP message to Bob, an attacker could partition Bob's incoming mail by guessing that one of those ways is Alice's favorite. An active attacker could even lure users into using a compromised exit node by advertising that node as supporting a rare but desirable delivery method. We believe these attacks do not provide an argument against extensibility per se, but rather argue against the proliferation of redundant extensions, and against the use of rare extensions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.">Exit policies and abuse</head><p>One important entry in a node's capability block is its exit policy, that describes to which addresses and by which methods a mix node is prepared to deliver messages. Exit abuse is a serious barrier to wide-scale remailer deployment -rare indeed is the network administrator tolerant of machines that potentially deliver hate mail.</p><p>On one end of the spectrum are open exit nodes that will deliver anywhere; on the other end are middleman nodes that only relay traffic to other remailer nodes, and private exit nodes that only deliver locally. More generally, nodes can set individual exit policies to declare which traffic they will deliver: some may allow traffic only for local users; others may require other forms of traffic authentication <ref type="bibr" target="#b38">[38]</ref>.</p><p>Preventing abuse of open exit nodes is an unsolved problem. If receiving mail is opt-in, an abuser can forge an optin request from his victim. Indeed, requiring recipients to declare their interest in receiving anonymous mail is risky -human rights activists in Guatemala cannot both sign up to receive anonymous mail and also retain plausible deniability. Similarly, if receiving mail is opt-out, an abuser can deny service by forging an opt-out request from a legitimate user. We use a compromise, where all users are assumed to want to receive mail, but each Mixminion message arrives with instructions on how to opt out. Specifically, the message includes a secret that must be used to authorize the opt-out. Thus adversaries who cannot read the victim's mail cannot forge an opt-out request. (We believe that restricting ourselves to such adversaries is reasonable. After all, adversaries strong enough to read the victim's mail can probably deny service to him in some other way. Users may also avoid this attack by running their own 'delivery-only' nodes, which would amount to an implicit opt-in.)</p><p>Of course, a mixture of open and restricted exit nodes will allow the most flexibility for volunteers running servers. But while a large number of middleman nodes is useful to provide a large and robust network, a small number of exit nodes still simplifies traffic analysis. In these attacks, the adversary observes both a suspected user and the network's exit nodes and looks for timing or packet correlations. The fewer exit nodes in the system, the easier it is for an attacker to observe them all. Thus, the number of available open exit nodes remains a limiting security parameter for the remailer network.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4.">Replay prevention, message expiration, and key rotation</head><p>Mixmaster offers rudimentary replay prevention by keeping a list of recent message IDs. To keep the list from getting too large, it expires entries after a serverconfigurable amount of time. But if an adversary records the input and output batches of a mix and then replays a message after the mix has forgotten about it, the message's decryption will be exactly the same. Thus, Mixmaster does not provide the forward anonymity that we want.</p><p>Chaum first observed this attack in <ref type="bibr" target="#b6">[7]</ref>, but his solution (which is proposed again in Babel<ref type="foot" target="#foot_4">5</ref> ) -to include in each message a timestamp that describes when that message is valid -also has problems. Specifically, it introduces a new class of partitioning attacks, where the adversary can distinguish and track messages based on timestamps. If messages have short lifetimes, then some legitimate messages will expire before they can be delivered. But if messages have long lifetimes, then messages near their expiration date will be rare, and an adversary can exploit this fact by intentionally delaying a message until near its expiration date. If he owns a mix later in the path he can recognize the message by its unusually late expiration date.</p><p>One way of addressing this partitioning attack is to add dummy traffic so that it is less rare for messages to arrive near their expiration date, but dummy traffic is still not wellunderstood. Another approach would be to add random values to the expiration date of each mix in the path, so an adversary delaying a message at one mix cannot expect that it is now near to expiring elsewhere in the path; but this seems open to statistical attacks.</p><p>We use a compromise solution that still provides forward anonymity. Messages don't contain any timestamp or expiration information. As in Mixmaster, each mix keeps hashes of the headers of all messages it has processed; but unlike Mixmaster, a mix only discards these hashes when it rotates its public key. Mixes should choose key rotation frequency based on their security goals and on the number of hashes they are willing to store, and advertise their key rotation schedules along with their public key information. (See Section 6.)</p><p>Note that this solution does not entirely solve the partitioning problem -near the time of a key rotation, the anonymity set of messages will be divided into those senders who knew about the key rotation and used the new key, and those who did not. Also note that while key rotation and link encryption (see Section 5.1) both provide forward security, their protection is not redundant. With only link encryption, an adversary running one mix could compromise another and use its private key to decrypt messages previously sent between them. Key rotation limits the window of opportunity for this attack.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Directory Servers</head><p>The Mixmaster protocol does not specify a means for clients to learn the locations, keys, capabilities, or performance statistics of mixes. Several ad hoc schemes have grown to fill that void <ref type="bibr" target="#b29">[30]</ref>, but as we explain below, it is important that all clients learn this information in the same way. (Omitting directory servers is not an option: without timely information, clients cannot respond to changes in the set of mixes, or to changes in mix keys.) Here we describe Mixminion directory servers and examine the anonymity risks of such information services.</p><p>In Mixminion, a group of redundant directory servers provide clients information about nodes' current keys, capabilities, and state. These directory servers must be synchronized and redundant: we lose security if clients have different information about network topology and node reliability. An adversary who controls a directory server could track certain clients by providing different information -perhaps by listing only mixes under its control, or by informing only certain clients about a given mix.</p><p>Moreover, an adversary without control of a directory server can still exploit differences among client knowledge.</p><p>If Eve knows that mix £ is listed on server ¤ but not on ¦ , she can use this knowledge to link traffic through £ to clients who have queried ¤ . Eve can also distinguish traffic based on any differences between clients who use directory servers and those who don't, between clients with up-to-date listings and those with old listings, and (if the directory is large and so is given out in pieces) between clients who have different subsets of the directory.</p><p>So it is not merely a matter of convenience for clients to retrieve up-to-date mix information. We must specify a directory service as a part of our standard. Thus Mixminion provides protocols for mixes to advertise their capability certificates to directory servers, and for clients to download complete directories. <ref type="foot" target="#foot_5">6</ref> Directory servers work together to ensure correct and complete data by successively signing certificate bundles, so users can be sure that a given mix certificate has been seen by a threshold of directory servers. While we require stronger synchronization and trust for the directory servers, we believe this is realistic because there will be far fewer of them than mix nodes, and they will be much more static.</p><p>But even if client knowledge is uniform, an attacker can mount a trickle attack by delaying messages from Alice at a compromised node until the directory servers remove some mix £ from their listings -he can then release the delayed messages and guess that any messages still using £ are likely to be from Alice. An adversary controlling many nodes can launch this attack effectively. Thus clients should download new information regularly, but wait for a given time threshold (say, an hour) before using any newlypublished nodes. Dummy traffic to old nodes may also help thwart trickle attacks.</p><p>Directory servers compile node availability and performance information by sending traffic through mixes in their directories. This is currently similar to the current ping servers <ref type="bibr" target="#b29">[30]</ref>, but in the future we can investigate integrating more complex and attack-resistant reputation metrics. But even this reputation information introduces vulnerabilities: for example, an adversary trying to do traffic analysis can get more traffic by gaining a high reputation <ref type="bibr" target="#b10">[11]</ref>. We can defend against these attacks by building paths from a suitably large pool of nodes <ref type="bibr" target="#b11">[12]</ref> to bound the probability that an adversary will control an entire path, but there will always be a tension between giving clients accurate and timely information and preventing adversaries from exploiting the directory servers to manipulate client behavior.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Nym management and single-use reply blocks</head><p>Current nymservers, such as nym.alias.net <ref type="bibr" target="#b21">[22]</ref>, maintain a set of mailbox! reply block" pairs to allow users to receive mail without revealing their identities. When mail arrives to &lt;bob@nym.alias.net&gt;, the nymserver attaches the payload to the associated reply block and sends it off into the mix-net. Because these nymservers use the Type I remailer network, these reply blocks are persistent or long-lived nyms -the mix network does not drop replayed messages, so the reply blocks can be used again and again. Reply block management is much simpler in this model because users only need to replace a reply block when one of the nodes it uses stops working.</p><p>The Mixminion design protects against replay attacks by dropping messages with repeated headers -so its reply blocks are necessarily single-use. Nonetheless, there are still a number of approaches for building nymservers from single-use reply blocks.</p><p>In the first approach, nymservers keep a stock of reply blocks for each mailbox, and use a new reply block # for each incoming message. Suppose Alice wants to register a pseudonym # with signature and verification keys $ &amp;% (' )! 10 2' 43</p><p>with the Nym server in order to receive messages from Bob. In this case, the parties communicate as follows:</p><p># 65 87 @9 BA DC FE HG PI RQ TS U WV XI `Y R! 1# a! b0 ' ! X# c¤ (d Rd `d X# (e 2f Hg ih p 5 87 @9 BA DC q# r! 1£ 7 @9 BA s5 t# C T£</p><p>As long as the owner of the pseudonym keeps the nymserver well-stocked, no messages will be lost. But it is hard for the user to know how many new reply blocks to send; indeed, under this approach, an attacker can deny service by flooding the mailbox to exhaust the available reply blocks and block further messages from getting delivered.</p><p>A more robust design uses a protocol inspired by e-mail retrieval protocols such as POP <ref type="bibr" target="#b26">[27]</ref>: messages arrive and queue at the nymserver, and the user periodically checks the status of his mail and sends a sufficient batch of reply blocks so the nymserver can deliver that mail. In this case, the parties communicate as follows:</p><p># u5 t7 @9 BA vC wE xG @I RQ qS yU WV XI RY R! X# r! 10 2' f g h p 5 t7 @9 BA vC T# r! 1£ # u5 t7 @9 BA vC wE 4I RY 19 ! 1# a! 1# ¤ cd Rd Rd X# e f g ih 7 @9 BA 5 t# ( C £ <ref type="bibr" target="#b1">(2)</ref> In this case, the nymserver doesn't need to store any reply blocks. The above flooding attack still works, but now it is exactly like flooding a normal POP mailbox, and the usual techniques (such as allowing the user to delete mails at the server or specify which mails to download and let the others expire) work fine. The user can send a set of indices to the server after successfully receiving some messages, to indicate that they can now be deleted.</p><p>Of course, there are different legal and security implications for the two designs. In the first design, no mail is stored on the server, but it must keep valid reply blocks on hand. The second case is in some sense more secure because the server need not store any reply blocks, but it also creates more liability because the server keeps mail for each recipient until it is retrieved. The owner of the pseudonym could provide a public key that the nymserver uses to immediately encrypt all incoming messages to limit the amount of time the nymserver keeps plaintext messages.</p><p>The best implementation depends on the situations and preferences of the volunteers running the nymservers. We hope that as we gain more experience with their needs and the needs of their users, we will converge on a suitable model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">Maintaining anonymity sets</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.1.">Batching Strategy</head><p>Low-latency systems like Onion Routing aim to provide anonymity against an adversary who is not watching both Alice and Bob <ref type="bibr" target="#b39">[39]</ref>. If the adversary watches both, he can for instance count packets and observe packet timing to become confident that they are communicating. Because Mixminion aims to defeat even a global passive adversary, we must address this end-to-end timing vulnerability.</p><p>Further, because our adversary can send and delay messages, he can manipulate the batch of messages entering a mix so the only message unknown to him in the batch is the target message. This approach is known as the blending attack because the adversary blends his own recognizable messages with the honest messages in the batch <ref type="bibr" target="#b36">[36]</ref>. By repeatedly attacking each mix in the path, the adversary will link Alice and Bob.</p><p>Mixminion nodes use a timed dynamic-pool batching strategy <ref type="bibr" target="#b36">[36]</ref> adapted from Mixmaster. Rather than simply processing each message as soon as it arrives, each mix keeps a pool of messages. New messages arrive, are decrypted, and enter the pool. The mix fires every seconds, but only if the pool contains at least a threshold of messages. If the mix fires, it randomly chooses a constant fraction of the pool messages (say, 60%) to deliver.</p><p>Since the number of messages delivered each round is based on the rate of incoming messages, an attacker cannot overflow the pool with sustained flooding. These mixes also increase the cost of the blending attack: while the number of messages coming out increases as the rate of incoming messages increases, the chance that any given message will leave the pool remains constant. Thus it is impossible to arrange to completely flush the mix with high probability in one flush. An adversary is forced to spend multiple intervals (and thus delay other messages for considerable time) first to flush the original honest messages from the mix, and again to flush the target message from the mix. This delay can be noticed by the other mixes, because they communicate over TLS with a heartbeat to detect delays.</p><p>This batching strategy also increases the cost of intersection attacks by providing large anonymity sets for each message in the network. Because a message could plausibly have been held in a pool for several rounds at each mix, the set of possible senders when Bob receives the target message is large.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.2.">Dummy policy</head><p>Dummy traffic (sending extra messages that are not actually meant to be read or used, to confuse the adversary) is an old approach to improving anonymity, but its efficacy is still not well analyzed.</p><p>One use for dummies is to weaken the intersection attack, perhaps by letting mixes introduce dummies addressed to actual users. But to do this, each mix must know all the users in the system: if a mix only delivers dummies to a subset of the users, an adversary can distinguish with better than even probability between a dummy and a legitimate message. While there is some initial research on the subject <ref type="bibr" target="#b4">[5]</ref>, we currently know no practical way to use dummies to provably help against the intersection attack. Thus Mixminion does not at present incorporate dummies to or from users.</p><p>Instead, we incorporate mix-to-mix dummies to weaken the blending attack. As described in Section 8.1 above, our timed dynamic-pool batching strategy already increases the cost of the blending attack because the adversary needs to keep flushing the mix until all honest messages are outbut once the adversary has done so, he can be certain that no honest messages remain. In the second phase of the attack, he again needs to flush until the target message comes out, but once it does, he can be certain of recognizing it. To prevent this, Mixminion employs the following dummy policy, as suggested in <ref type="bibr" target="#b36">[36]</ref>: each time the mix fires, it also sends out a number of dummies chosen from a geometric distribution. These dummies travel a number of hops chosen uniformly between and . The blending attack is now harder -the adversary can no longer single out the target message in the outgoing batch, and so must track each of the dummies along with the original target message.</p><p>During normal traffic, these dummies have little effect on anonymity. They aim to protect anonymity in times of low traffic -either when there are actually few messages going through the mix, or when most messages are created by the adversary.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.3.">Choosing paths when transmitting many messages</head><p>When Alice (the owner of a pseudonym) downloads her mail from a nymserver, she will likely receive many separate messages. Similarly, if Alice uses Mixminion as a transport layer for higher-level applications, sending a large file means sending many Mixminion messages, because of their fixed size. Conventional wisdom suggests that she should pick a different path for every message, but an adversary that owns all the nodes in any of the paths could learn her identity -without any work at all. Even an adversary owning a small fraction of the network can perform this attack, since each Mixminion payload is small.</p><p>Alice thus seems most likely to maintain her unlinkability by sending all the messages over the same path. On the other hand, a passive adversary can watch the flood of messages traverse that path.</p><p>A compromise approach is to pick a small number of paths and use them together. By sending out the messages over time rather than all at once, and assuming more people than just Bob are receiving many messages, the pool mixes will create a large anonymity set of possible senders. However, a complete solution to the intersection attack remains an open problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.">Attacks and Defenses</head><p>Below we summarize a variety of attacks and how well our design withstands them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Mix attacks</head><p>¢ Compromise a mix. Messages traverse multiple mixes, so compromising a single mix, even a crossover point, does not gain much.</p><p>¢ Compromise a mix's private key. Again, control- ling a single mix is of limited use. Further, periodic mix key rotation limits the window of time in which to attack the next mix in the target message's path.</p><p>¢ Replaying messages. Mixes remember header cryptographic checksums of previously seen messages; after key rotation these old headers can no longer be decrypted.</p><p>¢ Delaying messages. The adversary can delay messages and release them when certain network parameters (eg traffic volume) are different. The efficacy of this attack is poorly understood, but it may well be quite damaging <ref type="bibr" target="#b36">[36]</ref>. Imposing a deadline on transmission at each hop may help <ref type="bibr" target="#b10">[11]</ref>.</p><p>¢ Dropping messages. The adversary can drop messages with the hope that users will notice and resend. If the user must resend, she should use the same path, to prevent the adversary from forcing her onto an adversary-controlled path (see Section 8.3).</p><p>¢ Tagging messages. Mixes detect modified head- ers immediately using checksums. The payload can still be tagged, but the "swap" step along with SPRP encryption from Section 4.1 provide protection.</p><p>¢ N attack (trickle, flooding) The "timed dynamic-pool" batching strategy from Section 8.1, along with our dummy policy, limits the effectiveness of these blending attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Passive attacks</head><p>¢ Intersection attack. Our dynamic-pool batching strategy from Section 8.1 spreads out the messages over time, increasing the set of possible senders for a given received message and thus increasing the cost of an intersection attack. However, a complete solution remains an open problem <ref type="bibr" target="#b4">[5]</ref>.</p><p>¢ Textual analysis. Mixminion provides location anonymity, not data anonymity. Users are responsible for making sure their messages do not reveal identifying information. Such attacks are practical, and therefore a real threat, as documented in <ref type="bibr" target="#b33">[34]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Exit attacks</head><p>¢ Partition traffic by delivery method. We en- courage recipients to use one of only a few delivery methods, so we can maintain sufficient anonymity sets for each.</p><p>¢ Partition traffic by exit capabilities. Delivery methods should be standardized; users should be suspicious of delivery methods only offered by a few exit nodes.</p><p>¢ Use the mix network to send hate mail, etc. We allow recipients to opt out of receiving further mail. Still, we must have enough nodes that can withstand complaints stemming from abusive email, or it will be too easy for an adversary to monitor all exit nodes in the network.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Directory attacks</head><p>¢ Compromise a directory server. Identical di- rectory listings are served by a small group of servers and signed by all. We assume that a threshold of these directory servers will remain honest.</p><p>¢ Exploit differences in client directory knowledge.</p><p>By only updating directory information nightly, by designing client software to pull updates as soon as possible after their release, and by ensuring that clients have the entire directory, we can limit this attack.</p><p>¢ Delay mix messages until directory information changes. The fact that clients delay using new information, along with dummy traffic sent to delisted destinations and expired keys, should mitigate this attack. Again, imposing a deadline on transmission at each hop may help more <ref type="bibr" target="#b10">[11]</ref>.</p><p>¢ Sign somebody else up as a mix. Signatures on capability blocks prevent others from forging blocks to the directory servers.</p><p>¢ Flood the directories with nonfunctional mix en- tries; run highly reliable mixes to gain traffic for analysis; attack honest mixes to encourage users to start using the dishonest ones. Availability and reliability statistics should mitigate some of these problems, but they introduce problems of their own. They are an area of active research <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b11">12]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10.">Future Directions and Open Problems</head><p>This design document represents the first step in peer review of the Type III remailer protocol. Many of the ideas, ranging from the core design to peripheral design choices, need more attention:</p><p>¢ We need more research on batching strategies that re- sist blending attacks <ref type="bibr" target="#b36">[36]</ref> as well as intersection attacks on asynchronous free routes <ref type="bibr" target="#b5">[6]</ref>. In particular the anonymity they provide during normal operation or under attack must be balanced with other properties such as latency and reliability.</p><p>¢ We need a more thorough investigation of multiple- message tagging attacks and an analysis of how to safely choose paths when sending many messages. When a message to be sent is larger than the Mixminion payload size, we need a strategy to fragment it and reconstruct it at the recipient's end. We can use retransmission strategies or forward error correction codes to recover if some messages are lost.</p><p>¢ Can we keep the indistinguishability of forward mes- sages and replies using a simpler design? We need to prove that our design provides bit-wise unlinkability between the input bit-patterns of messages and the messages coming out of the network.</p><p>¢ Currently, reply messages can be distinguished from plaintext forward messages at the exit nodes: the former exit as encrypted data, and the latter do not. We prevent further partitioning by arranging encrypted forward messages to blend in with the reply messages, but even this degree of distinguishability is unsettling. Finding further means to mitigate this problem would be helpful.</p><p>¢ A synchronous batching approach, where messages have deadlines for each hop, may allow easier anonymity analysis, and may provide much larger anonymity sets because all messages entering the mixnet in a given time interval are mixed together. A cascade is the simplest example of this approach, but we should consider mechanisms for free-route synchronous mixes. We could greatly improve our protection against message delaying attacks and the partitioning attacks discussed in Section 5.4. On the other hand, the costs are greater network synchronization and overhead, and less mix operator flexibility.</p><p>¢ We need stronger intuition about how to use dummy messages. Such messages can be inserted between nodes as link padding, or as actual multi-hop Mixminion messages. We must develop a more analytically justified approach to determine which parties send dummy messages, how many they send, and when they send them. While many people have speculated about the benefits of dummy traffic, we have not yet seen any convincing analysis. For this reason, while Mixminion is flexible enough to support them, we plan to leave dummies out of the design (other than their minimal use in Section 8.1) until their effects on anonymity are better understood.</p><p>We have working code which implements most of the designs described in this paper, with acceptable performance even using 2048 bit RSA keys (800KB of messages per second on a 1GHz Athlon). We invite interested developers to join the mixminion-dev mailing list and examine the more detailed Mixminion specification <ref type="bibr" target="#b23">[24]</ref>.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. Header configurations for different anonymity functions</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>Note that replies are still weaker than forward messages: an adversary can successively force intermediate mixes to reveal the next hop of the reply block until its originator is reached.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>The weaker PRP property may be sufficient, given that preventing replays limits the number of oracle queries to 1; this will need further analysis. In that case the simpler BEAR construction<ref type="bibr" target="#b1">[2]</ref> could be used instead of LIONESS.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_2"><p>We can prevent the adversary from using divide-and-conquer on Alice's groupings if Alice uses a hybrid path starting with a short cascade -so even if the adversary tags a subset of the messages he doesn't know (unless he owns the whole cascade) the groupings of tagged messages.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_3"><p>A mailbox is the canonical form of the "user@domain" part of an e-mail address. Mixminion uses only mailboxes in the protocol, because the other parts of an e-mail address could differ among senders who obtain an address from different sources, thus leading to smaller anonymity sets.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_4"><p>Actually, Babel is vulnerable to a much more direct timestamp attack: each layer of the onion includes "the number of seconds elapsed since January 1, 1970 GMT, to the moment of message composition by the sender." Few people will be composing a message on a given second, so an adversary owning a mix at the beginning of the path and another at the end could trivially recognize a message.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_5"><p>We recommend against retrieving anything less than a complete directory. Even if clients use the mix-net to anonymously retrieve a random subset of the directory, an adversary observing the directory servers and given two hops in a message's path can take the intersection over recently downloaded directory subsets to guess the remaining hops in the path. Private Information Retrieval<ref type="bibr" target="#b20">[21]</ref> may down the road allow clients to efficiently, securely, and privately download a subset of the directory.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11.">Acknowledgments</head><p>This paper incorporates ideas from the Mixmaster development team, particularly Len Sassaman, Scott Renfro, Peter Palfrader, Ulf Möller, Lance Cottrell, and Bram Cohen, to improve the Type II remailer protocol; their effort was abandoned in favor of Mixminion.</p><p>Susan Born, Lucky Green, David Hopwood, David Mazières, Peter Palfrader, Len Sassaman, Andrei Serjantov, Robyn Wagner, and Bryce "Zooko" Wilcox-O'Hearn provided helpful design discussions, editing, and suggestions. We further thank all the unnamed cypherpunks out there who have worked on remailer issues for the past decades.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Universally verifiable MIX with verification work independent of the number of MIX servers</title>
		<author>
			<persName><forename type="first">M</forename><surname>Abe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROCRYPT 1998</title>
		<title level="s">LNCS 1403</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Two practical and provably secure block ciphers: BEAR and LION</title>
		<author>
			<persName><forename type="first">R</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Biham</surname></persName>
		</author>
		<ptr target="&lt;http://citeseer.nj.nec.com/anderson96two.html&gt;" />
	</analytic>
	<monogr>
		<title level="m">International Workshop on Fast Software Encryption</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Traffic analysis attacks and trade-offs in anonymity providing systems</title>
		<author>
			<persName><forename type="first">A</forename><surname>Back</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Möller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Stiglic</surname></persName>
		</author>
		<ptr target="&lt;http://www.cypherspace.org/adam/pubs/traffic.pdf&gt;" />
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<editor>
			<persName><forename type="first">I</forename><forename type="middle">S</forename><surname>Moskowitz</surname></persName>
		</editor>
		<imprint>
			<biblScope unit="volume">2137</biblScope>
			<biblScope unit="page" from="245" to="257" />
			<date type="published" when="2001">2001</date>
			<publisher>Springer-Verlag</publisher>
		</imprint>
	</monogr>
	<note>Information Hiding (IH 2001</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Web MIXes: A system for anonymous and unobservable Internet access</title>
		<author>
			<persName><forename type="first">O</forename><surname>Berthold</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Federrath</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Köpsell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Designing Privacy Enhancing Technologies: Workshop on Design Issue in Anonymity and Unobservability</title>
		<editor>
			<persName><forename type="first">H</forename><surname>Federrath</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2000">2009. 2000</date>
			<biblScope unit="page" from="115" to="129" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Dummy traffic against long term intersection attacks</title>
		<author>
			<persName><forename type="first">O</forename><surname>Berthold</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Langos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Privacy Enhancing Technologies</title>
		<editor>
			<persName><forename type="first">R</forename><surname>Dingledine</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">P</forename><surname>Syverson</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2002">2002. 2002</date>
			<biblScope unit="volume">2482</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">The disadvantages of free MIX routes and how to overcome them</title>
		<author>
			<persName><forename type="first">O</forename><surname>Berthold</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Pfitzmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Standtke</surname></persName>
		</author>
		<ptr target="&lt;http://www.tik.ee.ethz.ch/˜weiler/lehre/netsec/Unterlagen/anon/disadvantages_berthold.pdf&gt;" />
	</analytic>
	<monogr>
		<title level="m">Designing Privacy Enhancing Technologies: Workshop on Design Issue in Anonymity and Unobservability</title>
		<editor>
			<persName><forename type="first">H</forename><surname>Federrath</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2000">2009. 2000</date>
			<biblScope unit="page" from="30" to="45" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Untraceable electronic mail, return addresses, and digital pseudo-nyms</title>
		<author>
			<persName><forename type="first">D</forename><surname>Chaum</surname></persName>
		</author>
		<ptr target="&lt;http://www.eskimo.com/˜weidai/mix-net.txt&gt;" />
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="1982-02">February 1982</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Mixmaster and remailer attacks</title>
		<author>
			<persName><forename type="first">L</forename><surname>Cottrell</surname></persName>
		</author>
		<ptr target="&lt;http://www.obscura.com/˜loki/remailer/remailer-essay.html&gt;" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">How to break a practical MIX and design a new one</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Desmedt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Kurosawa</surname></persName>
		</author>
		<ptr target="&lt;http://citeseer.nj.nec.com/447709.html&gt;" />
	</analytic>
	<monogr>
		<title level="m">EUROCRYPT 2000</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2000">2000</date>
			<biblScope unit="volume">1803</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">The TLS Protocol -Version 1.0. IETF RFC 2246</title>
		<author>
			<persName><forename type="first">T</forename><surname>Dierks</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Allen</surname></persName>
		</author>
		<ptr target="&lt;http://www.rfc-editor.org/rfc/rfc2246.txt&gt;" />
		<imprint>
			<date type="published" when="1999-01">January 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A Reputation System to Increase MIX-net Reliability</title>
		<author>
			<persName><forename type="first">R</forename><surname>Dingledine</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Freedman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Hopwood</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Molnar</surname></persName>
		</author>
		<ptr target="&lt;http://www.freehaven.net/papers.html&gt;" />
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<editor>
			<persName><forename type="first">I</forename><forename type="middle">S</forename><surname>Moskowitz</surname></persName>
		</editor>
		<imprint>
			<biblScope unit="volume">2137</biblScope>
			<biblScope unit="page" from="126" to="141" />
			<date type="published" when="2001">2001</date>
			<publisher>Springer-Verlag</publisher>
		</imprint>
	</monogr>
	<note>Information Hiding (IH 2001</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Reliable MIX Cascade Networks through Reputation</title>
		<author>
			<persName><forename type="first">R</forename><surname>Dingledine</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Syverson</surname></persName>
		</author>
		<ptr target="&lt;http://www.freehaven.net/papers.html&gt;" />
	</analytic>
	<monogr>
		<title level="m">Financial Cryptography (FC &apos;02)</title>
		<title level="s">LNCS (forthcoming</title>
		<editor>
			<persName><forename type="first">M</forename><surname>Blaze</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">An efficient scheme for proving a shuffle</title>
		<author>
			<persName><forename type="first">J</forename><surname>Furukawa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Sako</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<editor>
			<persName><forename type="first">J</forename><surname>Kilian</surname></persName>
		</editor>
		<imprint>
			<biblScope unit="volume">2139</biblScope>
			<date type="published" when="2001">2001. 2001</date>
			<publisher>Springer-Verlag</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Mixing E-mail with Babel</title>
		<author>
			<persName><forename type="first">C</forename><surname>Gulcu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Tsudik</surname></persName>
		</author>
		<ptr target="&lt;http://citeseer.nj.nec.com/2254.html&gt;" />
	</analytic>
	<monogr>
		<title level="m">Network and Distributed Security Symposium -NDSS &apos;96</title>
		<imprint>
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">J</forename><surname>Helsingius</surname></persName>
		</author>
		<author>
			<persName><surname>Anon</surname></persName>
		</author>
		<ptr target="&lt;http://www.penet.fi/press-english.html&gt;" />
		<imprint/>
	</monogr>
	<note>penet.fi press release</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Flash Mixing</title>
		<author>
			<persName><forename type="first">M</forename><surname>Jakobsson</surname></persName>
		</author>
		<ptr target="&lt;http://citeseer.nj.nec.com/jakobsson99flash.html&gt;" />
	</analytic>
	<monogr>
		<title level="m">Principles of Distributed Computing -PODC &apos;99</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">An optimally robust hybrid mix network (extended abstract)</title>
		<author>
			<persName><forename type="first">M</forename><surname>Jakobsson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Juels</surname></persName>
		</author>
		<ptr target="&lt;http://citeseer.nj.nec.com/492015.html&gt;" />
	</analytic>
	<monogr>
		<title level="m">Principles of Distributed Computing -PODC &apos;01</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Real-Time MIXes: A Bandwidth-Efficient Anonymity Protocol</title>
		<author>
			<persName><forename type="first">A</forename><surname>Jerichow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Müller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Pfitzmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Pfitzmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Waidner</surname></persName>
		</author>
		<ptr target="&lt;http://www.zurich.ibm.com/security/publications/1998.html&gt;" />
	</analytic>
	<monogr>
		<title level="j">IEEE Journal on Selected Areas in Communications</title>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Stop-and-go MIXes providing probabilistic anonymity in an open system</title>
		<author>
			<persName><forename type="first">D</forename><surname>Kesdogan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Egner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Büschkes</surname></persName>
		</author>
		<ptr target="&lt;http://www.cl.cam.ac.uk/˜fapp2/ihw98/ihw98-sgmix.pdf&gt;" />
	</analytic>
	<monogr>
		<title level="m">Information Hiding (IH 1998)</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1998">1998</date>
			<biblScope unit="volume">1525</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">How to construct pseudorandom permutations from pseudorandom functions</title>
		<author>
			<persName><forename type="first">M</forename><surname>Luby</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Rackoff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal on Computing</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="373" to="386" />
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Private Information Retrieval</title>
		<author>
			<persName><forename type="first">T</forename><surname>Malkin</surname></persName>
		</author>
		<ptr target="&lt;http://toc.lcs.mit.edu/˜tal/pubs.html&gt;" />
	</analytic>
	<monogr>
		<title level="j">MIT</title>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">The Design, Implementation and Operation of an Email Pseudonym Server</title>
		<author>
			<persName><forename type="first">D</forename><surname>Mazières</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Kaashoek</surname></persName>
		</author>
		<ptr target="&lt;http://www.scs.cs.nyu.edu/˜dm/&gt;" />
	</analytic>
	<monogr>
		<title level="m">x y ACM Conference on Computer and Communications Security (CCS&apos;98)</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Attack for Flash MIX</title>
		<author>
			<persName><forename type="first">M</forename><surname>Mitomo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Kurosawa</surname></persName>
		</author>
		<ptr target="&lt;http://citeseer.nj.nec.com/450148.html&gt;" />
	</analytic>
	<monogr>
		<title level="m">ASIACRYPT 2000</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1976">1976. 2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Type III (Mixminion) mix protocol specifications</title>
		<author>
			<orgName type="collaboration">Mixminion</orgName>
		</author>
		<ptr target="&lt;http://mixminion.net/minion-spec.txt&gt;" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Provably secure public-key encryption for lengthpreserving chaumian mixes</title>
		<author>
			<persName><forename type="first">B</forename><surname>Möller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CT-RSA 2003</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2003">2003</date>
			<biblScope unit="volume">2612</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Mixmaster Protocol -Version 2</title>
		<author>
			<persName><forename type="first">U</forename><surname>Möller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Cottrell</surname></persName>
		</author>
		<ptr target="&lt;http://www.eskimo.com/˜rowdenw/crypt/Mix/draft-moeller-mixmaster2-protocol-00.txt&gt;" />
		<imprint>
			<date type="published" when="2000-01">January 2000</date>
		</imprint>
	</monogr>
	<note>Unfinished draft</note>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Post Office Protocol -Version 3. IETF RFC 1939 (also STD0053)</title>
		<author>
			<persName><forename type="first">J</forename><surname>Myers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Rose</surname></persName>
		</author>
		<ptr target="&lt;http://www.rfc-editor.org/rfc/rfc1939.txt&gt;" />
		<imprint>
			<date type="published" when="1996-05">May 1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A verifiable secret shuffle and its application to e-voting</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">A</forename><surname>Neff</surname></persName>
		</author>
		<ptr target="&lt;http://www.votehere.net/ada_compliant/ourtechnology/technicaldocs/shuffle.pdf&gt;" />
	</analytic>
	<monogr>
		<title level="m">th ACM Conference on Computer and Communications Security (CCS-8)</title>
		<editor>
			<persName><forename type="first">P</forename><surname>Samarati</surname></persName>
		</editor>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2001-11">November 2001</date>
			<biblScope unit="page" from="116" to="125" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">A Length-Invariant Hybrid MIX</title>
		<author>
			<persName><forename type="first">M</forename><surname>Ohkubo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Abe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology -ASIACRYPT 2000</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1976">1976. 2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Echolot: a pinger for anonymous remailers</title>
		<author>
			<persName><forename type="first">P</forename><surname>Palfrader</surname></persName>
		</author>
		<ptr target="&lt;http://www.palfrader.org/echolot/&gt;" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">S</forename><surname>Parekh</surname></persName>
		</author>
		<ptr target="&lt;http://www.firstmonday.dk/issues/issue2/remailers/&gt;" />
	</analytic>
	<monogr>
		<title level="j">Prospects for remailers. First Monday</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="1996-08">August 1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">How to break the direct RSA-implementation of MIXes</title>
		<author>
			<persName><forename type="first">B</forename><surname>Pfitzmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Pfitzmann</surname></persName>
		</author>
		<ptr target="&lt;http://citeseer.nj.nec.com/pfitzmann90how.html&gt;" />
	</analytic>
	<monogr>
		<title level="m">Eurocrypt 89</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1990">1990</date>
			<biblScope unit="volume">434</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Simple Mail Transfer Protocol. IETF RFC 2821 (also STD0010)</title>
		<author>
			<persName><forename type="first">J</forename><surname>Postel</surname></persName>
		</author>
		<ptr target="&lt;http://www.rfc-editor.org/rfc/rfc2821.txt&gt;" />
		<imprint>
			<date type="published" when="2001-04">April 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Can pseudonymity really guarantee privacy?</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Rohatgi</surname></persName>
		</author>
		<ptr target="&lt;http://www.usenix.org/publications/library/proceedings/sec2000/full_papers/rao/rao.pdf&gt;" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Ninth USENIX Security Symposium</title>
		<meeting>the Ninth USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="2000-08">Aug. 2000</date>
			<biblScope unit="page" from="85" to="96" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Traffic Analysis: Protocols, Attacks, Design Issues, and Open Problems</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">F</forename><surname>Raymond</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Designing Privacy Enhancing Technologies: Workshop on Design Issue in Anonymity and Unobservability</title>
		<editor>
			<persName><forename type="first">H</forename><surname>Federrath</surname></persName>
		</editor>
		<imprint>
			<biblScope unit="page" from="10" to="29" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title/>
		<author>
			<persName><surname>Springer-Verlag</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<imprint>
			<date type="published" when="2000">2009. July 2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">From a trickle to a flood: Active attacks on several mix types</title>
		<author>
			<persName><forename type="first">A</forename><surname>Serjantov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Dingledine</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Syverson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<editor>
			<persName><forename type="first">F</forename><surname>Petitcolas</surname></persName>
		</editor>
		<imprint>
			<date type="published" when="2002">2002. 2002</date>
			<publisher>Springer-Verlag</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">Freedom version 2 white papers</title>
		<author>
			<persName><forename type="first">Z</forename><forename type="middle">K</forename><surname>Systems</surname></persName>
		</author>
		<ptr target="&lt;http://www.freedom.net/info/whitepapers/&gt;" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Onion Routing access configurations</title>
		<author>
			<persName><forename type="first">P</forename><surname>Syverson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Reed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Goldschlag</surname></persName>
		</author>
		<ptr target="&lt;http://www.onion-router.net/Publications.html&gt;" />
	</analytic>
	<monogr>
		<title level="m">DARPA Information Survivability Conference and Exposition (DISCEX 2000)</title>
		<imprint>
			<publisher>IEEE CS Press</publisher>
			<date type="published" when="2000">2000</date>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="34" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Towards an analysis of onion routing security</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">F</forename><surname>Syverson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Tsudik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">G</forename><surname>Reed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">E</forename><surname>Landwehr</surname></persName>
		</author>
		<ptr target="&lt;http://citeseer.nj.nec.com/syverson00towards.html&gt;" />
	</analytic>
	<monogr>
		<title level="m">Designing Privacy Enhancing Technologies: Workshop on Design Issue in Anonymity and Unobservability</title>
		<editor>
			<persName><forename type="first">H</forename><surname>Federrath</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2000">2009. July 2000</date>
			<biblScope unit="page" from="96" to="114" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
