<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">DGM: A deep learning algorithm for solving partial differential equations</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2018-08-24">August 24, 2018</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Justin</forename><surname>Sirignano</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Illinois at Urbana Champaign</orgName>
								<address>
									<settlement>Urbana</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Konstantinos</forename><surname>Spiliopoulos</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Department of Mathematics and Statistics</orgName>
								<orgName type="institution">Boston University</orgName>
								<address>
									<settlement>Boston</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department" key="dep1">the Imperial College London Applied Mathematics and Mathematical Physics seminar</orgName>
								<orgName type="department" key="dep2">Department of Applied Mathematics</orgName>
								<orgName type="institution" key="instit1">JP Morgan Machine Learning and AI Forum seminar</orgName>
								<orgName type="institution" key="instit2">University of Colorado Boulder</orgName>
								<orgName type="institution" key="instit3">Princeton University</orgName>
								<orgName type="institution" key="instit4">Northwestern University for their comments</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">DGM: A deep learning algorithm for solving partial differential equations</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2018-08-24">August 24, 2018</date>
						</imprint>
					</monogr>
					<idno type="MD5">DC528E28BE6EFB5E58544BD9B05B99A4</idno>
					<idno type="DOI">10.1016/j.jcp.2018.08.029</idno>
					<note type="submission">Received date: 2 February 2018 Revised date: 10 August 2018 Accepted date: 20 August 2018</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T13:01+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Highlights</head><p>• We develop a deep learning algorithm for solving high-dimensional PDEs.</p><p>• The algorithm is meshfree, which is key since meshes become infeasible in higher dimensions.</p><p>• We accurately solve a class of high-dimensional free boundary PDEs in up to 200 dimensions.</p><p>• We prove a theorem regarding the approximation power of neural networks for quasilinear PDEs.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Deep learning and high-dimensional PDEs</head><p>High-dimensional partial differential equations (PDEs) are used in physics, engineering, and finance. Their numerical solution has been a longstanding challenge. Finite difference methods become infeasible in higher dimensions due to the explosion in the number of grid points and the demand for reduced time step size. If there are d space dimensions and 1 time dimension, the mesh is of size O d+1 . This quickly becomes computationally intractable when the dimension d becomes even moderately large. We propose to solve high-dimensional PDEs using a meshfree deep learning algorithm. The method is similar in spirit to the Galerkin method, but with several key changes using ideas from machine learning. The Galerkin method is a widely-used computational method which seeks a reduced-form solution to a PDE as a linear combination of basis functions. The deep learning algorithm, or "Deep Galerkin Method" (DGM), uses a deep neural network instead of a linear combination of basis functions. The deep neural network is trained to satisfy the differential operator, initial condition, and boundary conditions using stochastic gradient descent at randomly sampled spatial points. By randomly sampling spatial points, we avoid the need to form a mesh (which is infeasible in higher dimensions) and instead convert the PDE problem into a machine learning problem.</p><p>DGM is a natural merger of Galerkin methods and machine learning. The algorithm in principle is straightforward; see Section 2. Promising numerical results are presented later in Section 4 for a class of high-dimensional free boundary PDEs. We also accurately solve a high-dimensional Hamilton-Jacobi-Bellman PDE in Section 5 and Burger's equation in Section 6. DGM converts the computational cost of finite difference to a more convenient form: instead of a huge mesh of O d+1 (which is infeasible to handle), many batches of random spatial points are generated. Although the total number of spatial points could be vast, the algorithm can process the spatial points sequentially without harming the convergence rate.</p><p>Deep learning has revolutionized fields such as image, text, and speech recognition. These fields require statistical approaches which can model nonlinear functions of high-dimensional inputs. Deep learning, which uses multi-layer neural networks (i.e., "deep neural networks"), has proven very effective in practice for such tasks. A multi-layer neural network is essentially a "stack" of nonlinear operations where each operation is prescribed by certain parameters that must be estimated from data. Performance in practice can strongly depend upon the specific form of the neural network architecture and the training algorithms which are used. The design of neural network architectures and training methods has been the focus of intense research over the past decade. Given the success of deep learning, there is also growing interest in applying it to a range of other areas in science and engineering (see Section 1.2 for some examples).</p><p>Evaluating the accuracy of the deep learning algorithm is not straightforward. PDEs with semi-analytic solutions may not be sufficiently challenging. (After all, the semi-analytic solution exists since the PDE can be transformed into a lower-dimensional equation.) It cannot be benchmarked against traditional finite difference (which fails in high dimensions). We test the deep learning algorithm on a class of high-dimensional free boundary PDEs which have the special property that error bounds can be calculated for any approximate solution. This provides a unique opportunity to evaluate the accuracy of the deep learning algorithm on a class of high-dimensional PDEs with no semi-analytic solutions.</p><p>This class of high-dimensional free boundary PDEs also has important applications in finance, where it used to price American options. An American option is a financial derivative on a portfolio of stocks. The number of space dimensions in the PDE equals the number of stocks in the portfolio. Financial institutions are interested in pricing options on portfolios ranging from dozens to even hundreds of stocks <ref type="bibr" target="#b42">[43]</ref>. Therefore, there is a significant need for numerical methods to accurately solve high-dimensional free boundary PDEs.</p><p>We also test the deep learning algorithm on a high-dimensional Hamilton-Jacobi-Bellman PDE with accurate results. We consider a high-dimensional Hamilton-Jacobi-Bellman PDE motivated by the problem of optimally controlling a stochastic heat equation.</p><p>Finally, it is often of interest to find the solution of a PDE over a range of problem setups (e.g., different physical conditions and boundary conditions). For example, this may be useful for the design of engineering systems or uncertainty quantification. The problem setup space may be high-dimensional and therefore may require solving many PDEs for many different problem setups, which can be computationally expensive. We use our deep learning algorithm to approximate the general solution to the Burgers' equation for different boundary conditions, initial conditions, and physical conditions.</p><p>In the remainder of the Introduction, we provide an overview of our results regarding the approximation power of neural networks for quasilinear parabolic PDEs (Section 1.1), and relevant literature (Section 1.2). The deep learning algorithm for solving PDEs is presented in Section 2. An efficient scheme for evaluating the diffusion operator is developed in Section 3. Numerical analysis of the algorithm is presented in Sections 4, 5, and 6. We implement and test the algorithm on a class of high-dimensional free boundary PDEs in up to 200 dimensions. The theorem and proof for the approximation of PDE solutions with neural networks is presented in Section 7. Conclusions are in Section 8. For readability purposes, proofs from Section 7 have been collected in Appendix A.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Approximation Power of Neural Networks for PDEs</head><p>We also prove a theorem regarding the approximation power of neural networks for a class of quasilinear parabolic PDEs. Consider the potentially nonlinear PDE</p><formula xml:id="formula_0">∂ t u(t, x) + Lu(t, x) = 0, (t, x) ∈ [0, T ] × Ω u(0, x) = u 0 (x), x∈ Ω u(t, x) = g(t, x), x∈ [0, T ] × ∂Ω, (1.1)</formula><p>where ∂Ω is the boundary of the domain Ω. The solution u(t, x) is of course unknown, but an approximate solution f (t, x) can be found by minimizing the L 2 error</p><formula xml:id="formula_1">J(f ) = ∂ t f + Lf 2 2,[0,T ]×Ω + f -g 2 2,[0,T ]×∂Ω + f (0, •) -u 0 2 2,Ω .</formula><p>The error function J(f ) measures how well the approximate solution f satisfies the differential operator, boundary condition, and initial condition. Note that no knowledge of the actual solution u is assumed; J(f ) can be directly calculated from the PDE (1.1) for any approximation f . The goal is to construct functions f for which J(f ) is as close to 0 as possible. Define C n as the class of neural networks with a single hidden layer and n hidden units. <ref type="foot" target="#foot_0">1</ref> Let f n be a neural network with n hidden units which minimizes J(f ). We prove that, under certain conditions, there exists f n ∈ C n such that J(f n ) → 0, as n → ∞, and</p><formula xml:id="formula_2">f n → u as n → ∞, strongly in, L ρ ([0, T ] × Ω), with ρ &lt; 2,</formula><p>for a class of quasilinear parabolic PDEs; see subsection 7.2 and Theorem 7.3 therein for the precise statement. That is, the neural network will converge in L ρ , ρ &lt; 2 to the solution of the PDE as the number of hidden units tends to infinity. The precise statement of the theorem and its proof are presented in Section 7. The proof requires the joint analysis of the approximation power of neural networks as well as the continuity properties of partial differential equations. Note that J(f n ) → 0 does not necessarily imply that f n → u, given that we only have L 2 control on the approximation error. First, we prove that J(f n ) → 0 as n → ∞. We then establish that each neural network {f n } ∞ n=1 satisfies a PDE with a source term h n (t, x). We are then able to prove, under certain conditions, the convergence of</p><formula xml:id="formula_3">f n → u as n → ∞ in L ρ ([0, T ] × Ω),</formula><p>for ρ &lt; 2, using the smoothness of the neural network approximations and compactness arguments.</p><p>Theorem 7.3 establishes the approximation power of neural networks for solving PDEs (at least within a class of quasilinear parabolic PDEs); however, directly minimizing J(f ) is not computationally tractable since it involves high-dimensional integrals. The DGM algorithm minimizes J(f ) using a meshfree approach; see Section 2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Relevant Literature</head><p>Solving PDEs with a neural network as an approximation is a natural idea, and has been considered in various forms previously. <ref type="bibr" target="#b28">[29]</ref>, <ref type="bibr" target="#b29">[30]</ref>, <ref type="bibr" target="#b45">[46]</ref>, <ref type="bibr" target="#b30">[31]</ref>, and <ref type="bibr" target="#b34">[35]</ref> propose to use neural networks to solve PDEs and ODEs. These papers estimate neural network solutions on an a priori fixed mesh. This paper proposes using deep neural networks and is meshfree, which is key to solving high-dimensional PDEs.</p><p>In particular, this paper explores several new innovations. First, we focus on high-dimensional PDEs and apply deep learning advances of the past decade to this problem (deep neural networks instead of shallow neural networks, improved optimization methods for neural networks, etc.). Algorithms for high-dimensional free boundary PDEs are developed, efficiently implemented, and tested. In particular, we develop an iterative method to address the free boundary. Secondly, to avoid ever forming a mesh, we sample a sequence of random spatial points. This produces a meshfree method, which is essential for high-dimensional PDEs. Thirdly, the algorithm incorporates a new computational scheme for the efficient computation of neural network gradients arising from the second derivatives of high-dimensional PDEs.</p><p>Recently, <ref type="bibr" target="#b40">[41,</ref><ref type="bibr" target="#b41">42]</ref> develop physics informed deep learning models. They estimate deep neural network models which merge data observations with PDE models. This allows for the estimation of physical models from limited data by leveraging a priori knowledge that the physical dynamics should obey a class of PDEs. Their approach solves PDEs in one and two spatial dimensions using deep neural networks. <ref type="bibr" target="#b31">[32]</ref> uses a deep neural network to model the Reynolds stresses in a Reynolds-averaged Navier-Stokes (RANS) model. RANS is a reduced-order model for turbulence in fluid dynamics. <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b1">2]</ref> have also recently developed a scheme for solving a class of quasilinear PDEs which can be represented as forward-backward stochastic differential equations (FBSDEs) and <ref type="bibr" target="#b15">[16]</ref> further develops the algorithm. The algorithm developed in <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b15">16]</ref> focuses on computing the value of the PDE solution at a single point. The algorithm that we present here is different; in particular, it does not rely on the availability of FBSDE representations and yields the entire solution of the PDE across all time and space. In addition, the deep neural network architecture that we use, which is different from the ones used in <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b1">2]</ref>, seems to be able to recover accurately the entire solution (at least for the equations that we studied). <ref type="bibr" target="#b48">[49]</ref> use a convolutional neural network to solve a large sparse linear system which is required in the numerical solution of the Navier-Stokes PDE. In addition, <ref type="bibr" target="#b8">[9]</ref> has recently developed a novel partial differential equation approach to optimize deep neural networks.</p><p>[33] developed an algorithm for the solution of a discrete-time version of a class of free boundary PDEs. Their algorithm, commonly called the "Longstaff-Schwartz method", uses dynamic programming and approximates the solution using a separate function approximator at each discrete time (typically a linear combination of basis functions). Our algorithm directly solves the PDE, and uses a single function approximator for all space and all time. The Longstaff-Schwartz algorithm has been further analyzed by <ref type="bibr" target="#b44">[45]</ref>, <ref type="bibr" target="#b22">[23]</ref>, and others. Sparse grid methods have also been used to solve high-dimensional PDEs; see <ref type="bibr" target="#b42">[43]</ref>, <ref type="bibr" target="#b43">[44]</ref>, <ref type="bibr" target="#b21">[22]</ref>, <ref type="bibr" target="#b5">[6]</ref>, and <ref type="bibr" target="#b6">[7]</ref>.</p><p>In regards to general results on the approximation power of neural networks we refer the interested reader to classical works <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b24">25,</ref><ref type="bibr" target="#b25">26,</ref><ref type="bibr" target="#b38">39]</ref> and we also mention the recent work by <ref type="bibr" target="#b37">[38]</ref>, where the authors study the necessary and sufficient complexity of ReLU neural networks that is required for approximating classifier functions in the mean square sense.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Algorithm</head><p>Consider a parabolic PDE with d spatial dimensions:</p><formula xml:id="formula_4">∂u ∂t (t, x) + Lu(t, x) = 0, (t, x) ∈ [0, T ] × Ω, u(t = 0, x) = u 0 (x), u(t, x) = g(t, x), x ∈ ∂Ω, (<label>2.1)</label></formula><p>where x ∈ Ω ⊂ R d . The DGM algorithm approximates u(t, x) with a deep neural network f (t, x; θ) where θ ∈ R K are the neural network's parameters. Note that the differential operators ∂f ∂t (t, x; θ) and Lf (t, x; θ) can be calculated analytically. Construct the objective function:</p><formula xml:id="formula_5">J(f ) = ∂f ∂t (t, x; θ) + Lf (t, x; θ) 2 [0,T ]×Ω,ν1 + f (t, x; θ) -g(t, x) 2 [0,T ]×∂Ω,ν2 + f (0, x; θ) -u 0 (x) 2 Ω,ν3 .</formula><p>Here, f (y) The goal is to find a set of parameters θ such that the function f (t, x; θ) minimizes the error J(f ). If the error J(f ) is small, then f (t, x; θ) will closely satisfy the PDE differential operator, boundary conditions, and initial condition. Therefore, a θ which minimizes J(f (•; θ)) produces a reduced-form model f (t, x; θ) which approximates the PDE solution u(t, x).</p><p>Estimating θ by directly minimizing J(f ) is infeasible when the dimension d is large since the integral over Ω is computationally intractable. However, borrowing a machine learning approach, one can instead minimize J(f ) using stochastic gradient descent on a sequence of time and space points drawn at random from Ω and ∂Ω. This avoids ever forming a mesh.</p><p>The DGM algorithm is:</p><p>1. Generate random points (t n , x n ) from [0, T ] × Ω and (τ n , z n ) from [0, T ] × ∂Ω according to respective probability densities ν 1 and ν 2 . Also, draw the random point w n from Ω with probability density ν 3 .</p><p>2. Calculate the squared error G(θ n , s n ) at the randomly sampled points s n = {(t n , x n ), (τ n , z n ), w n } where:</p><formula xml:id="formula_6">G(θ n , s n ) = ∂f ∂t (t n , x n ; θ n ) + Lf (t n , x n ; θ n ) 2 + f (τ n , z n ; θ n ) -g(τ n , z n ) 2 + f (0, w n ; θ n ) -u 0 (w n ) 2 .</formula><p>3. Take a descent step at the random point s n :</p><formula xml:id="formula_7">θ n+1 = θ n -α n ∇ θ G(θ n , s n ) 4.</formula><p>Repeat until convergence criterion is satisfied.</p><p>The "learning rate" α n decreases with n. The steps ∇ θ G(θ n , s n ) are unbiased estimates of ∇ θ J(f (•; θ n )):</p><formula xml:id="formula_8">E ∇ θ G(θ n , s n ) θ n = ∇ θ J(f (•; θ n )).</formula><p>Therefore, the stochastic gradient descent algorithm will on average take steps in a descent direction for the objective function J. A descent direction means that the objective function decreases after an iteration (i.e., J(f</p><formula xml:id="formula_9">(•; θ n+1 )) &lt; J(f (•; θ n )) )</formula><p>, and θ n+1 is therefore a better parameter estimate than θ n . Under (relatively mild) technical conditions (see <ref type="bibr" target="#b2">[3]</ref>), the algorithm θ n will converge to a critical point of the objective function J(f (•; θ)) as n → ∞:</p><formula xml:id="formula_10">lim n→∞ ∇ θ J(f (•; θ n )) = 0.</formula><p>It's important to note that θ n may only converge to a local minimum when f (t, x; θ) is non-convex. This is generally true for non-convex optimization and is not specific to this paper's algorithm. In particular, deep neural networks are non-convex. Therefore, it is well known that stochastic gradient descent may only converge to a local minimum (and not a global minimum) for a neural network. Nevertheless, stochastic gradient descent has proven very effective in practice and is the fundamental building block of nearly all approaches for training deep learning models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">A Monte Carlo Method for Fast Computation of Second Derivatives</head><p>This section describes a modified algorithm which may be more computationally efficient in some cases.</p><p>The term Lf (t, x; θ) contains second derivatives ∂ 2 f ∂xixj (t, x; θ) which may be expensive to compute in higher dimensions. For instance, 20, 000 second derivatives must be calculated in d = 200 dimensions.</p><p>The complicated architectures of neural networks can make it computationally costly to calculate the second derivatives (for example, see the neural network architecture (4.2)). The computational cost for calculating second derivatives (in both total arithmetic operations and memory) is O(d 2 × N ) where d is the spatial dimension of x and N is the batch size. In comparison, the computational cost for calculating first derivatives is O(d × N ). The cost associated with the second derivatives is further increased since we actually need the third-order derivatives ∇ θ ∂ 2 f ∂x 2 (t, x; θ) for the stochastic gradient descent algorithm. Instead of directly calculating these second derivatives, we approximate the second derivatives using a Monte Carlo method.</p><p>Suppose the sum of the second derivatives in Lf (t, x, ; θ) is of the form</p><formula xml:id="formula_11">1 2 d i,j=1 ρ i,j σ i (x)σ j (x) ∂ 2 f ∂xixj (t, x; θ), assume [ρ i,j ] d i,j=1</formula><p>is a positive definite matrix, and define σ(x) = σ 1 (x), . . . , σ d (x) . For example, such PDEs arise when considering expectations of functions of stochastic differential equations, where the σ(x) represents the diffusion coefficient. See equation (4.1) and the corresponding discussion. A generalization of the algorithm in this section to second derivatives with nonlinear coefficient dependence on u(t, x) is also possible. Then,</p><formula xml:id="formula_12">d i,j=1 ρ i,j σ i (x)σ j (x) ∂ 2 f ∂x i x j (t, x; θ) = lim Δ→0 E d i=1 ∂f ∂xi (t, x + σ(x)W Δ ; θ) -∂f ∂xi (t, x; θ) Δ σ i (x)W i Δ , (<label>3.1)</label></formula><p>where W t ∈ R d is a Brownian motion and Δ ∈ R + is the step-size. The convergence rate for (3.1) is O( √ Δ). 2</p><p>2 Let f be a three-times differentiable function in x with bounded third-order derivatives in x. Then, it directly follows from a Taylor expansion that</p><formula xml:id="formula_13">d i,j=1 ρ i,j σ i (x)σ j (x) ∂ 2 f ∂x i x j (t, x; θ) -E d i=1 ∂f ∂x i (t,x+σ(x)W Δ ;θ)-∂f ∂x i (t,x;θ) Δ σ i (x)W i Δ ≤ C(x) √ Δ.</formula><p>The constant C(x) depends upon ρ, fxxx(t, x; θ) and σ(x).</p><p>Define:</p><formula xml:id="formula_14">G 1 (θ n , s n ) := ∂f ∂t (t n , x n ; θ n ) + Lf (t n , x n ; θ n ) 2 , G 2 (θ n , s n ) := f (τ n , z n ; θ n ) -g(τ n , z n ) 2 , G 3 (θ n , s n ) := f (0, w n ; θ n ) -u 0 (w n ) 2 , G(θ n , s n ) := G 1 (θ n , s n ) + G 2 (θ n , s n ) + G 3 (θ n , s n ).</formula><p>The DGM algorithm use the gradient ∇ θ G 1 (θ n , s n ), which requires the calculation of the second derivative terms in Lf (t n , x n ; θ n ). Define the first derivative operators as</p><formula xml:id="formula_15">L 1 f (t n , x n ; θ n ):=Lf (t n , x n ; θ n ) - 1 2 d i,j=1 ρ i,j σ i (x n )σ j (x n ) ∂ 2 f ∂x i x j (t n , x n ; θ).</formula><p>Using (3.1), ∇ θ G 1 is approximated as G1 with a fixed constant Δ &gt; 0:</p><formula xml:id="formula_16">G1 (θ n , s n ) := 2 ∂f ∂t (t n , x n ; θ n ) + L 1 f (t n , x n ; θ n ) + 1 2 d i=1 ∂f ∂xi (t, x n + σ(x n )W Δ ; θ) -∂f ∂xi (t, x n ; θ) Δ σ i (x n )W i Δ × ∇ θ ∂f ∂t (t n , x n ; θ n ) + L 1 f (t n , x n ; θ n ) + 1 2 d i=1 ∂f ∂xi (t, x n + σ(x n ) WΔ ; θ) -∂f ∂xi (t, x n ; θ) Δ σ i (x n ) W i Δ ,</formula><p>where</p><formula xml:id="formula_17">W Δ is a d-dimensional normal random variable with E[W Δ ] = 0 and Cov[(W Δ ) i , (W Δ ) j ] = ρ i,j Δ. WΔ has the same distribution as W Δ . W Δ and WΔ are independent. G1 (θ n , s n ) is a Monte Carlo approximation of ∇ θ G 1 (θ n , s n ). G1 (θ n , s n ) has O( √ Δ) bias as an approximation for ∇ θ G 1 (θ n , s n ).</formula><p>This approximation error can be further improved via the following scheme using "antithetic variates":</p><formula xml:id="formula_18">G1 (θ n , s n ) := G1,a (θ n , s n ) + G1,b (θ n , s n ) (3.2) G1,a (θ n , s n ) := ∂f ∂t (t n , x n ; θ n ) + L 1 f (t n , x n ; θ n ) + 1 2 d i=1 ∂f ∂xi (t, x n + σ(x n )W Δ ; θ) -∂f ∂xi (t, x n ; θ) Δ σ i (x n )W i Δ × ∇ θ ∂f ∂t (t n , x n ; θ n ) + L 1 f (t n , x n ; θ n ) + 1 2 d i=1 ∂f ∂xi (t, x n + σ(x n ) WΔ ; θ) -∂f ∂xi (t, x n ; θ) Δ σ i (x n ) W i Δ , G1,b (θ n , s n ) := ∂f ∂t (t n , x n ; θ n ) + L 1 f (t n , x n ; θ n ) - 1 2 d i=1 ∂f ∂xi (t, x n -σ(x n )W Δ ; θ) -∂f ∂xi (t, x n ; θ) Δ σ i (x n )W i Δ × ∇ θ ∂f ∂t (t n , x n ; θ n ) + L 1 f (t n , x n ; θ n ) - 1 2 d i=1 ∂f ∂xi (t, x n -σ(x n ) WΔ ; θ) -∂f ∂xi (t, x n ; θ) Δ σ i (x n ) W i Δ .</formula><p>The approximation (3.2) has O(Δ) bias as an approximation for</p><formula xml:id="formula_19">∇ θ G 1 (θ n , s n ). (3.2) uses antithetic variates in the sense that G1,a (θ n , s n ) uses the random variables (W Δ , WΔ ) while G1,b (θ n , s n ) uses (-W Δ , -WΔ ).</formula><p>See <ref type="bibr" target="#b0">[1]</ref> for a background on antithetic variates in simulation algorithms. A Taylor expansion can be used to show the approximation error is O(Δ). It is important to highlight that there is no computational cost associated with the magnitude of Δ; an arbitrarily small Δ can be chosen with no additional computational cost (although there may be numerical underflow or overflow problems). The modified algorithm using the Monte Carlo approximation for the second derivatives is:</p><p>1. Generate random points (t n , x n ) from [0, T ] × Ω and (τ n , z n ) from [0, T ] × ∂Ω according to respective densities ν 1 and ν 2 . Also, draw the random point w n from Ω with density ν 3 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Calculate the step G(θ</head><formula xml:id="formula_20">n , s n ) = G1 (θ n , s n ) + ∇ θ G 2 (θ n , s n ) + ∇ θ G 3 (θ n , s n ) at the randomly sampled points s n = {(t n , x n ), (τ n , z n ), w n }. G(θ n , s n ) is an approximation for ∇ θ G(θ n , s n ).</formula><p>3. Take a step at the random point s n :</p><formula xml:id="formula_21">θ n+1 = θ n -α n G(θ n , s n ) 4.</formula><p>Repeat until convergence criterion is satisfied.</p><p>In conclusion, the modified algorithm here is computationally less expensive than the original algorithm in Section 2 but introduces some bias and variance. The variance essentially increases the i.i.d. noise in the stochastic gradient descent step; this noise averages out over a large number of samples though. The original algorithm in Section 2 is unbiased and has lower variance, but is computationally more expensive. We numerically implement the algorithm for a class of free boundary PDEs in Section 4. Future research may investigate other methods to further improve the computational evaluation of the second derivative terms (for instance, multi-level Monte Carlo).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Numerical Analysis for a High-dimensional Free Boundary PDE</head><p>We test our algorithm on a class of high-dimensional free boundary PDEs. These free boundary PDEs are used in finance to price American options and are often referred to as "American option PDEs". An American option is a financial derivative on a portfolio of stocks. The option owner may at any time t ∈ [0, T ] choose to exercise the American option and receive a payoff which is determined by the underlying prices of the stocks in the portfolio. T is called the maturity date of the option and the payoff function is g(x) : R d → R. Let X t ∈ R d be the prices of d stocks. If at time t the stock prices X t = x, the price of the option is u(t, x). The price function u(t, x) satisfies a free boundary PDE on [0, T ] × R d . For American options, one is primarily interested in the solution u(0, X 0 ) since this is the fair price to buy or sell the option.</p><p>Besides the high dimensions and the free boundary, the American option PDE is challenging to numerically solve since the payoff function g(x) (which both appears in the initial condition and determines the free boundary) is not continuously differentiable.</p><p>Section 4.1 states the free boundary PDE and the deep learning algorithm to solve it. To address the free boundary, we supplement the algorithm presented in Section 2 with an iterative method; see Section 4.1. Section 4.2 describes the architecture and implementation details for the neural network. Section 4.3 reports numerical accuracy for a case where a semi-analytic solution exists. Section 4.4 reports numerical accuracy for a case where no semi-analytic solution exists.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">The Free Boundary PDE</head><p>We now specify the free boundary PDE for u(t, x). The stock price dynamics and option price are:</p><formula xml:id="formula_22">dX i t = μ(X i t )dt + σ(X i t )dW i t , u(t, x) = sup τ ≥t E[e -r(τ ∧T ) g(X τ ∧T )|X t = x],</formula><p>where W t ∈ R d is a standard Brownian motion and Cov[dW i t , dW j t ] = ρ i,j dt. The price of the American option is u(0, X 0 ).</p><p>The model (4.1) for the stock price dynamics is widely used in practice and captures several desirable characteristics. First, the drift μ(x) measures the "average" growth in the stock prices. The Brownian motion W t represents the randomness in the stock price, and the magnitude of the randomness is given by the coefficient function σ(X i t ). The movement of stock prices are correlated (e.g., if Microsoft's price increases, it is likely that Apple's price will also increase). The magnitude of the correlation between two stocks i and j is specified by the parameter ρ i,j . An example is the well-known Black-Scholes model μ(x) = μx and σ(x) = σx. In the Black-Scholes model, the average rate of return for each stock is μ.</p><p>An American option is a financial derivative which the owner can choose to "exercise" at any time t ∈ [0, T ]. If the owner exercises the option, they receive the financial payoff g(X t ) where X t is the prices of the underlying stocks. If the owner does not choose to exercise the option, they receive the payoff g(X T ) at the final time T . The value (or price) of the American option at time t is u(t, X t ). Some typical examples of the payoff function g(x) :</p><formula xml:id="formula_23">R d → R are g(x) = max ( d i=1 x i ) 1/d -K, 0 and g(x) = max 1 d d i=1 x i -K, 0 .</formula><p>The former is referred to as a "geometric payoff function" while the latter is called an "arithmetic payoff function." K is the "strike price" and is a positive number.</p><p>The price function u(t, x) in (4.1) is the solution to a free boundary PDE and will satisfy:</p><formula xml:id="formula_24">0 = ∂u ∂t (t, x) + μ(x) • ∂u ∂x (t, x) + 1 2 d i,j=1 ρ i,j σ(x i )σ(x j ) ∂ 2 u ∂x i ∂x j (t, x) -ru(t, x), ∀ (t, x) : u(t, x) &gt; g(x) . u(t, x) ≥ g(x), ∀ (t, x). u(t, x) ∈ C 1 (R + × R d ), ∀ (t, x) : u(t, x) = g(x) . u(T, x) = g(x), ∀ x. (4.1)</formula><p>The free boundary set is</p><formula xml:id="formula_25">F = (t, x) : u(t, x) = g(x)</formula><p>. u(t, x) satisfies a partial differential equation "above" the free boundary set F , and u(t, x) equals the function g(x) "below" the free boundary set F . The deep learning algorithm for solving the PDE (4.1) requires simulating points above and below the free boundary set F . We use an iterative method to address the free boundary. The free boundary set F is approximated using the current parameter estimate θ n . This approximate free boundary is used in the probability measure that we simulate points with. The gradient is not taken with respect to the θ n input of the probability density used to simulate random points. For this purpose, define the objective function:</p><formula xml:id="formula_26">J(f ; θ, θ) = ∂f ∂t (t, x; θ) + μ(x) • ∂f ∂x (t, x; θ) + 1 2 d i,j=1 ρ i,j σ(x i )σ(x j ) ∂ 2 f ∂x i ∂x j (t, x; θ) -rf (t, x; θ) 2 [0,T ]×Ω,ν1( θ) + max(g(x) -f (t, x; θ), 0) 2 [0,T ]×Ω,ν2( θ) + f (T, x; θ) -g(x) 2 Ω,ν3 .</formula><p>Descent steps are taken in the direction -∇ θ J(f ; θ, θ). ν 1 ( θ) and ν 2 ( θ) are the densities of the points in B1 and B2 , which are defined below. The deep learning algorithm is:</p><p>1. Generate the random batch of points</p><formula xml:id="formula_27">B 1 = {t m , x m } M m=1 from [0, T ] × Ω according to the probability density ν 0 1 . Select the points B1 = {(t, x) ∈ B 1 : f (t, x; θ n ) &gt; g(x)}. 2. Generate the random batch of points B 2 = {τ m , z m } M m=1 from [0, T ] × ∂Ω according to the probability density ν 0 2 . Select the points B2 = {(τ, z) ∈ B 2 : f (τ, z; θ n ) ≤ g(z)}. 3. Generate the random batch of points B 3 = {w m } M m=1</formula><p>from Ω with probability density ν 3 . 4. Approximate J(f ; θ n , θn ) as J(f ; θ n , S n ) at the randomly sampled points S n = { B1 , B2 , B 3 }:</p><formula xml:id="formula_28">J(f ; θ n , S n ) = 1 | B1 | (tm,xm)∈ B1 ∂f ∂t (t m , x m ; θ n ) + μ(x m ) • ∂f ∂x (t m , x m ; θ n ) + 1 2 d i,j=1 ρ i,j σ(x i )σ(x j ) ∂ 2 f ∂x i ∂x j (t m , x m ; θ n ) -rf (t m , x m ; θ n ) 2 + 1 | B2 | (τm,zm)∈ B2 max g(z m ) -f (τ m , z m ; θ n ), 0 2 + 1 |B 3 | wm∈B 3 f (T, w m ; θ) -g(w m ) 2 .</formula><p>5. Take a descent step for the random batch S n :</p><formula xml:id="formula_29">θ n+1 = θ n -α n ∇ θ J(f ; θ n , S n ).</formula><p>6. Repeat until convergence criterion is satisfied.</p><p>The second derivatives in the above algorithm can be approximated using the method from Section 3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Implementation details for the algorithm</head><p>This section provides details for the implementation of the algorithm, including the DGM network architecture, hyperparameters, and computational approach.</p><p>The architecture of a neural network can be crucial to its success. Frequently, different applications require different architectures. For example, convolution networks are essential for image recognition while long short-term networks (LSTMs) are useful for modeling sequential data. Clever choices of architectures, which exploit a priori knowledge about an application, can significantly improve performance. In the PDE applications in this paper, we found that a neural network architecture similar in spirit to that of LSTM networks improved performance.</p><p>The PDE solution requires a model f (t, x; θ) which can make "sharp turns" due to the final condition, which is of the form u(T, x) = max(p(x), 0) (the first derivative is discontinuous when p(x) = 0). The shape of the solution u(t, x) for t &lt; T , although "smoothed" by the diffusion term in the PDE, will still have a nonlinear profile which is rapidly changing in certain spatial regions. In particular, we found the following network architecture to be effective:</p><formula xml:id="formula_30">S 1 = σ(W 1 → x + b 1 ), Z = σ(U z, → x + W z, S + b z, ), = 1, . . . , L, G = σ(U g, → x + W g, S 1 + b g, ), = 1, . . . , L, R = σ(U r, → x + W r, S + b r, ), = 1, . . . , L, H = σ(U h, → x + W h, (S R ) + b h, ), = 1, . . . , L, S +1 = (1 -G ) H + Z S , = 1, . . . , L, f (t, x; θ) = W S L+1 + b, (<label>4.2)</label></formula><p>where → x = (t, x), the number of hidden layers is L + 1, and denotes element-wise multiplication (i.e., z v = z 0 v 0 , . . . , z N v N ). The parameters are</p><formula xml:id="formula_31">θ = W 1 , b 1 , U z, , W z, , b z, L =1 , U g, , W g, , b g, L =1 , U r, , W r, , b r, L =1 , U h, , W h, , b h, L =1 , W, b .</formula><p>The number of units in each layer is M and σ : R M → R M is an element-wise nonlinearity:</p><formula xml:id="formula_32">σ(z) = φ(z 1 ), φ(z 2 ), . . . , φ(z M ) , (<label>4.3)</label></formula><p>where φ : R → R is a nonlinear activation function such as the tanh function, sigmoidal function e y 1+e y , or rectified linear unit (ReLU) max(y, 0). The parameters in θ have dimensions</p><formula xml:id="formula_33">W 1 ∈ R M ×(d+1) , b 1 ∈ R M , U z, ∈ R M ×(d+1) , W z, ∈ R M ×M , b z, ∈ R M , U g, ∈ R M ×(d+1) , W g, ∈ R M ×M , b g, ∈ R M , U r, ∈ R M ×(d+1) , W r, ∈ R M ×M , b r, ∈ R M , U h, ∈ R M ×(d+1) , W h, ∈ R M ×M , b h, ∈ R M , W ∈ R 1×M , and b ∈ R.</formula><p>The architecture (4.2) is relatively complicated. Within each layer, there are actually many "sub-layers" of computations. The important feature is the repeated element-wise multiplication of nonlinear functions of the input. This helps to model more complicated functions which are rapidly changing in certain time and space regions. The neural network architecture (4.2) is similar to the architecture for LSTM networks (see <ref type="bibr" target="#b23">[24]</ref>) and highway networks (see <ref type="bibr" target="#b46">[47]</ref>).</p><p>The key hyperparameters in the neural network (4.2) are the number of layers L, the number of units M in each sub-layer, and the choice of activation unit φ(y). We found for the applications in this paper that the hyperparameters L = 3 (i.e., four hidden layers), M = 50, and φ(y) = tanh(y) were effective. It is worthwhile to note that the choice of φ(y) = tanh(y) means that f (t, x; θ) is smooth and therefore can solve for a "classical solution" of the PDE. The neural network parameters are initialized using the Xavier initialization (see <ref type="bibr" target="#b17">[18]</ref>). The architecture (4.2) is bounded in the input x (for a fixed choice of parameters θ) if σ(•) is a tanh or sigmoidal function; it may be helpful to allow the network to be unbounded for approximating unbounded/growing functions. We found that replacing the σ(•) in the H sub-layer with the identity function can be an effective way to develop an unbounded network.</p><p>We emphasize that the only input to the network is (t, x). We do not use any custom-designed nonlinear transformations of (t, x). If properly chosen, such additional inputs might help performance. For example, the European option PDE solution (which has an analytic formula) could be included as an input.</p><p>A regularization term (such as an 2 penalty) could also be included in the objective function for the algorithm. Such regularization terms are used for reducing overfitting in machine learning models estimated using datasets which have a limited number of data samples. (For example, a model estimated on a dataset of 60, 000 images.) However, it's unclear if this will be helpful in the context of this paper's application, since there is no strict upper bound on the size of the dataset (i.e., one can always simulate more time/space points).</p><p>Our computational approach to training the neural network involved several components. The second derivatives are approximated using the method from Section 3. Training is distributed across 6 GPU nodes using asynchronous stochastic gradient descent (we provide more details on this below). Parameters are updated using the well-known ADAM algorithm (see <ref type="bibr" target="#b26">[27]</ref>) with a decaying learning rate schedule (more details on the learning rate are provided below). Accuracy can be improved by calculating a running average of the neural network solutions over a sequence of training iterations (essentially a computationally cheap approach for building a model ensemble). We also found that model ensembles (of even small sizes of 5) can slightly increase accuracy.</p><p>Training of the neural network is distributed across several GPU nodes in order to accelerate training. We use asynchronous stochastic gradient descent, which is a widely-used method for parallelizing training of machine learning models. On each node, i.i.d. space and time samples are generated. Each node calculates the gradient of the objective function with respect to the parameters on its respective batch of simulated data. These gradients are then used to update the model, which is stored on a central node called a "parameter server". Figure <ref type="figure">1</ref> displays the computational setup. Updates occur asynchronously; that is, node i updates the model immediately upon completion of its work, and does not wait for node j to finish its work. The "work" here is calculating the gradients for a batch of simulated data. Before a node calculates the gradient for a new batch of simulated data, it receives an updated model from the parameter server. For more details on asynchronous stochastic gradient descent, see <ref type="bibr" target="#b12">[13]</ref>.</p><p>Figure <ref type="figure">1</ref>: Asynchronous stochastic gradient descent on a cluster of GPU nodes.</p><p>During training, we decrease the learning as the number of iterations increases. We use a learning rate schedule where the learning rate is a piecewise constant function of the number of iterations. This is a typical choice. We found the following learning rate schedule to be effective:</p><formula xml:id="formula_34">α n = ⎧ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎨ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎩ 10 -4</formula><p>n ≤ 5, 000 5 × 10 -4 5, 000 &lt; n ≤ 10, 000 10 -5 &lt; 10, 000 &lt; n ≤ 20, 000 5 × 10 -6 20, 000 &lt; n ≤ 30, 000 10 - 6  30, 000 &lt; n ≤ 40, 000 5 × 10 -7 40, 000 &lt; n ≤ 45, 000 10 - 7  45, 000 &lt; n</p><p>We use approximately 100, 000 iterations. An "iteration" involves batches of size 1, 000 on each of the GPU nodes. Therefore, there are 5, 000 simulated time/space points for each iteration. In total, we used approximately 500 million simulated time/space points to train the neural network.</p><p>We implement the algorithm using TensorFlow and PyTorch, which are software libraries for deep learning. TensorFlow has reverse mode automatic differentiation which allows the calculation of derivatives for a broad range of functions. For example, TensorFlow can be used to calculate the gradient of the neural network (4.2) with respect to x or θ. TensorFlow also allows for the training of models on graphics processing units (GPUs). A GPU, which has thousands of cores, can be use to highly parallelize the training of deep learning models. We furthermore distribute our computations across multiple GPU nodes, as described above. The computations in this paper were performed on the Blue Waters supercomputer which has a large number of GPU nodes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">A High-dimensional Free Boundary PDE with a Semi-Analytic Solution</head><p>We implement our deep learning algorithm to solve the PDE (4.1). The accuracy of our deep learning algorithm is evaluated in up to 200 dimensions. The results are reported below in Table <ref type="table" target="#tab_1">1</ref>. The deep learning algorithm solution is compared with a semi-analytic solution for the Black-Scholes model. The parameters μ(x) = (rc)x and σ(x) = σx. All stocks are identical with correlation ρ i,j = .75, volatility σ = .25, initial stock price X 0 = 1, dividend rate c = 0.02, and interest rate r = 0. The maturity of the option is T = 2 and the strike price is K = 1. The payoff function is g(x) = max (</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Number of dimensions</head><formula xml:id="formula_35">d i=1 x i ) 1/d - K, 0 .</formula><p>The error is reported for the price u(0, X 0 ) of the at-the-money American call option. The error is</p><formula xml:id="formula_36">|f (0,X0;θ)-u(0,X0)| |u(0,X0)| × 100%.</formula><p>The semi-analytic solution used in Table <ref type="table" target="#tab_1">1</ref> is provided below. Let μ(x) = (r-c)x, σ(x) = σx, and ρ i,j = ρ for i = j (i.e., the Black-Scholes model). If the payoff function in (4.1) is g(x) = max (</p><formula xml:id="formula_37">d i=1 x i ) 1/d -K, 0 ,</formula><p>then there is a semi-analytic solution to (4.1):</p><formula xml:id="formula_38">u(t, x) = v(t, ( d i=1 x i ) 1/d -K), (<label>4.4)</label></formula><p>where v(t, x) satisfies the one-dimensional free boundary PDE</p><formula xml:id="formula_39">0 = ∂v ∂t (t, x) + μx ∂v ∂x (t, x) + 1 2 σ2 x ∂ 2 v ∂x 2 (t, x) -rv(t, x), ∀ (t, x) : v(t, x) &gt; ĝ(x) . v(t, x) ≥ ĝ(x), ∀ (t, x). v(t, x) ∈ C 1 (R + × R d ), ∀ (t, x) : v(t, x) = ĝ(x) . v(T, x) = ĝ(x), ∀ x, (<label>4.5)</label></formula><p>where σ2 = dσ 2 +d(d-1)ρσ 2 d 2</p><p>, μ = (rc) + 1 2 σ2 -1 2 σ 2 , and ĝ(x) = max(x, 0). The one-dimensional PDE (4.5) can be solved using finite difference methods. If f (t, x; θ) is the deep learning algorithm's estimate for the PDE solution at (t, x), the relative error at the point (t, x) is |f (t,x;θ)-u(t,x)| |u(t,x)| × 100% and the absolute error at the point (t, x) is |f (t, x; θ)u(t, x)|. The relative error and absolute error at the point (t, x) can be evaluated using the semi-analytic solution <ref type="bibr">(4.4)</ref>.</p><p>Although the solution at (t, x) = (0, X 0 ) is of primary interest for American options, most other PDE applications are interested in the entire solution u(t, x). The deep learning algorithm provides an approximate solution across all time and space (t, x) ∈ [0, T ] × Ω. As an example, we present in Figure <ref type="figure" target="#fig_0">2</ref> contour plots of the absolute error and percent error across time and space for the American option PDE in 20 dimensions. The contour plot is produced in the following way:</p><p>1. Sample time points t uniformly on [0, T ] and sample spatial points x = (x 1 , . . . , x 20 ) from the joint distribution of X 1 t , . . . , X 20 t in equation (4.1). This produces an "envelope" of sampled points since X t spreads out as a diffusive process from X 0 = 1.</p><p>2. Calculate the error E at each sampled point (t , x ) for = 1, . . . , L.</p><p>3. Aggregate the error over a two-dimensional subspace t , (</p><formula xml:id="formula_40">i=1<label>20</label></formula><p>x i ) 1/20 , E for = 1, . . . , L.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Produce a contour plot from the data t , (</head><formula xml:id="formula_41">i=1 x i ) 1/20 , E L =1 .<label>20</label></formula><p>The x-axis is t and the y-axis is the geometric average ( 20 20 , which corresponds to the final condition g(x).</p><formula xml:id="formula_42">i=1 x i ) 1/</formula><p>Figure <ref type="figure" target="#fig_0">2</ref> reports both the absolute error and the percent error. The percent error |f (t,x;θ)-u(t,x)| |u(t,x)| × 100% is reported for points where |u(t, x)| &gt; 0.05. The absolute error becomes relatively large in a few areas; however, the solution u(t, x) also grows large in these areas and therefore the percent error remains small.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">A High-dimensional Free Boundary PDE without a Semi-Analytic Solution</head><p>We now consider a case of the American option PDE which does not have a semi-analytic solution. The American option PDE has the special property that it is possible to calculate error bounds on an approximate solution. Therefore, we can evaluate the accuracy of the deep learning algorithm even on cases where no semi-analytic solution is available.</p><p>We previously only considered a symmetrical case where ρ i,j = 0.75 and σ = 0.25 for all stocks. This section solves a more challenging heterogeneous case where ρ i,j and σ i vary across all dimensions i = 1, 2, . . . , d. The coefficients are fitted to actual data for the stocks IBM, Amazon, Tiffany, Amgen, Bank of America, General Mills, Cisco, Coca-Cola, Comcast, Deere, General Electric, Home Depot, Johnson &amp; Johnson, Morgan Stanley, Microsoft, Nordstrom, Pfizer, Qualcomm, Starbucks, and Tyson Foods from 2000-2017. This produces a PDE with widely-varying coefficients for each of the d 2 +d 2 second derivative terms. The correlation coefficients ρ i,j range from -0.53 to 0.80 for i = j and σ i ranges from 0.09 to 0.69.</p><p>Let f (t, x; θ) be the neural network approximation. <ref type="bibr" target="#b44">[45]</ref> derived that the PDE solution u(t, x) lies in the interval:</p><formula xml:id="formula_43">u(t, x) ∈ u(t, x), u(t, x) , u(t, x) = E g(X τ )|X t = x, τ &gt; t , u(t, x) = E sup s∈[t,T ] e -r(s-t) g(X s ) -M s . (4.6)</formula><p>where τ = inf{t ∈ [0, T ] : f (t, X t ; θ) &lt; g(X t )} and M s is a martingale constructed from the approximate </p><formula xml:id="formula_44">M s = f (s, X s ; θ) -f (t, X t ; θ) - s t ∂f ∂t (s , X s ; θ) + μ(X s ) ∂f ∂x (s , X s ; θ) + 1 2 d i,j=1 σ(X s ,i )σ(X s ,j ) ∂ 2 f ∂x i ∂x j (s , X s ; θ) -rf (s , X s ; θ) ds .</formula><p>The bounds (4.6) depend only on the approximation f (t, x; θ), which is known, and can be evaluated via Monte Carlo simulation. The integral for M s must also be discretized. The best estimate for the price of the American option is the midpoint of the interval [u(0, X 0 ), u(0, X 0 )], which has an error bound of x i -K, 0 . The neural network solution and its error bounds are reported for the price u(0, X 0 ) of the American call option. The best estimate for the price of the American option is the midpoint of the interval [u(0, X 0 ), u(0, X 0 )], which has an error bound of u(0,X0)-u(0,X0) 2u(0,X0) × 100%. In order to calculate the upper bound, the integral (4.7) is discretized with time step size Δ = 5 × 10 -4 . We present in Figure <ref type="figure" target="#fig_2">3</ref> contour plots of the absolute error bound and percent error bound across time and space for the American option PDE in 20 dimensions for strike price K = 1. The contour plot is produced in the following way:</p><p>1. Sample time points t uniformly on [0, T ] and sample spatial points x = (x 1 , . . . , x 20 ) from the joint distribution of X 1 t , . . . , X 20 t in equation (4.1). 2. Calculate the error E at each sampled point (t , x ) for = 1, . . . , L.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>|u(t,x)|</head><p>× 100% is reported for points where |u(t, x)| &gt; 0.05. It should be emphasized that these are error bounds; therefore, the actual error could be lower. The contour plot 3 requires significant computations. For each point at which calculate an error bound, a new simulation of (4.6) is required. In total, a large number of simulations are required, which we distribute across hundreds of GPUs on the Blue Waters supercomputer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">High-dimensional Hamilton-Jacobi-Bellman PDE</head><p>We also test the deep learning algorithm on a high-dimensional Hamilton-Jacobi-Bellman (HJB) equation corresponding to the optimal control of a stochastic heat equation. Specifically, we demonstrate that the deep learning algorithm accurately solves the high-dimensional PDE (5.5). The PDE (5.5) is motivated by the problem of optimally controlling the stochastic partial differential equation (SPDE): where u(x) is the control and W (t, x) is a Brownian sheet (i.e., ∂ 2 W ∂t∂x (t, x) is space-time white noise) defined on a stochastic basis (Ω, F, F t , P). The square integrable, adapted to the filtration F t , control u is a source/sink term which can be used to guide the temperature v(t, x) towards a target profile v(x) on [0, L]. As it is discussed in <ref type="bibr" target="#b9">[10]</ref> such problems admit unique solutions in the appropriate generalized sense, see Theorem 3.1 in <ref type="bibr" target="#b9">[10]</ref>. The endpoints at x = 0, L are held at the target temperatures. Specifically, the optimal control minimizes</p><formula xml:id="formula_45">∂v ∂t (t, x) = α ∂ 2 v ∂x 2 (t, x) + u(x) + σ ∂ 2 W ∂t∂x (t, x), x ∈ [0, L], v(t, x = 0) = v(0), v(t, x = L) = v(L), v(t = 0, x) = v 0 (x),<label>(5.1)</label></formula><formula xml:id="formula_46">E ∞ 0 e -γs L 0 (v(s, x) -v(x)) 2 + λu(x) 2 dxds .</formula><p>(5.</p><p>2)</p><p>The constant γ &gt; 0 is a discount factor. The constant λ &gt; 0 penalizes large values for the control u(x). The goal is to reach the target v(x) while expending the minimum amount of energy. The optimal control u(x)</p><p>satisfies an infinite-dimensional HJB equation. We refer the reader to Theorems 5.3 and 5.4 of <ref type="bibr" target="#b9">[10]</ref> as well as <ref type="bibr" target="#b13">[14]</ref> and <ref type="bibr" target="#b35">[36]</ref> for an analysis of infinite-dimensional HJB equations for the stochastic heat equation. An example of a problem represented by the SPDE (5.1) is the heating of a rod to a target temperature profile. One can control the heat applied to each portion of the rod along its length. There are also random fluctuations in the temperature of the rod due to other environmental factors, which is represented by the Brownian sheet W (t, x). The goal is to guide the temperature profile of the rod to the target profile while expending the least amount of energy; see the objective function (5.2).</p><p>(5.1) can be discretized in space, which yields a system of stochastic differential equations (SDEs). (For example, see Section 3.2 of <ref type="bibr" target="#b18">[19]</ref>.) This system of SDEs can be used to derive a finite, high-dimensional PDE for the value function and optimal control. That is, we first approximate the SPDE with a finite-dimensional system of SDEs, and then we solve the high-dimensional PDE corresponding to the finite-dimensional system of SDEs.</p><formula xml:id="formula_47">dX j t = α Δ 2 (X j+1 t -2X j t + X j-1 t )dt + U j t dt + σ √ Δ dW j t , X j 0 = v 0 (jΔ), (5.3)</formula><p>where Δ is the mesh size, v(t, jΔ) = X j t , u(jΔ) = U j t , and W j t are independent standard Brownian motions (see <ref type="bibr" target="#b11">[12]</ref>, <ref type="bibr" target="#b20">[21]</ref>, and <ref type="bibr" target="#b18">[19]</ref> regarding numerical schemes for stochastic parabolic PDEs of the form considered in this section). The dimension of the SDE system <ref type="bibr">(5.3)</ref> </p><formula xml:id="formula_48">is d = L Δ -1. Note that (5.</formula><p>3) uses a central difference scheme for the diffusion term in (5.1).</p><p>The objective function (5.2) becomes:</p><formula xml:id="formula_49">V (x) = inf Ut∈U E ∞ 0 e -γs d j=1 (X j s -v(jΔ)) 2 + λ(U j s ) 2 Δds X 0 = x .</formula><p>(5.4)</p><p>The value function V (x) satisfies a nonlinear PDE with</p><formula xml:id="formula_50">d spatial dimensions x 1 , x 2 , . . . , x d . 0 = Δ(x -v) (x -v) - 1 4λΔ d j=1 ∂V ∂x j (x) 2 + σ 2 2Δ d j=1 ∂ 2 V ∂x 2 j (x) + α Δ 2 d j=1 (x j+1 -2x j + x j-1 ) ∂V ∂x j (x) -γV (x).</formula><p>(5.5)</p><p>The vector v = (v(Δ), v(2Δ), . . . , v(dΔ)). Note that the values x d+1 = v(L) and x 0 = v(0) are constants which correspond to the boundary conditions in (5.1). The PDE (5.5) is high dimensional since the number of dimensions d = L Δ -1. The optimal control is</p><formula xml:id="formula_51">U j t = - 1 2λΔ ∂V ∂x j (X t ). (5.6)</formula><p>We solve the PDE (5.5) using the deep learning algorithm for d = 21 dimensions. The size of the domain is L = 10 -1 . The coefficients are α = 10 -4 , σ = 10 -1 2 , λ = 1, and γ = 1. The target profile is v(x) = 0. The deep learning algorithm's accuracy can be evaluated since a semi-analytic solution is available for (5.5). <ref type="foot" target="#foot_1">3</ref> Figure <ref type="figure" target="#fig_5">4</ref> shows a contour plot of the percent error over space. The contour plot is produced in the following way:</p><p>1. Sample spatial points x = (x 1 , . . . , x 21 ) from the distribution of (5.3) for = 1, . . . , L. x i . This corresponds to v(t, x) at the midpoint x = L 2 and the average 1</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Calculate the percent error at each sampled point. The percent error is</head><formula xml:id="formula_52">A = |f (x ;θ)-V (x )| |V (x )| × 100%.</formula><formula xml:id="formula_53">L L 0 v(t, x)dx,</formula><p>respectively.</p><p>The average percent error over the entire space is 0.1%. Lastly, we close this section by mentioning that in the recent paper <ref type="bibr" target="#b14">[15]</ref> (see also <ref type="bibr" target="#b1">[2]</ref>) the authors develop a machine learning algorithm that provides the value at a single point in time and space of the solution to a class of HJB equations which admit explicit solution that can be obtained through the Cole-Hopf transformation. Their method relies on characterizing the solution via backward stochastic differential equations (BSDE). In contrast, the current work (a) does not rely on BSDE type representations through nonlinear Feynman-Kac formulas, and (b) allows to recover the whole object (i.e. the solution across all points in time and space).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Burgers' equation</head><p>It is often of interest to find the solution of a PDE over a range of problem setups (e.g., different physical conditions and boundary conditions). For example, this may be useful for the design of engineering systems or uncertainty quantification. The problem setup space may be high-dimensional and therefore may require solving many PDEs for many different problem setups, which can be computationally expensive.</p><p>Let the variable p represent the problem setup (i.e., physical conditions, boundary conditions, and initial conditions). The variable p takes values in the space P, and we are interested in the solution of the PDE u(t, x; p). (This is sometimes called a "parameterized class of PDEs".) In particular, suppose u(t, x; p)</p><formula xml:id="formula_54">satisfies the PDE ∂u ∂t (t, x; p) = L p u(t, x; p), (t, x) ∈ [0, T ] × Ω, u(t, x; p) = g p (x), (t, x) ∈ [0, T ] × ∂Ω, u(t = 0, x; p) = h p (x), x ∈ Ω. (6.1)</formula><p>A traditional approach would be to discretize the P-space and re-solve the PDE many times for many different points p. However, the total number of grid points (and therefore the number of PDEs that must be solved) grows exponentially with the number of dimensions, and P is typically high-dimensional.</p><p>We propose to use the DGM algorithm to approximate the general solution to the PDE (6.1) for different boundary conditions, initial conditions, and physical conditions. The deep neural network is trained using stochastic gradient descent on a sequence of random time, space, and problem setup points (t, x, p). Similar to before,</p><p>• Initialize θ.</p><p>• Repeat until convergence:</p><p>-Generate random samples (t, x, p) from [0, T ] × Ω × P, ( t, x) from [0, T ] × ∂Ω, and x from Ω.</p><p>-Construct the objective function</p><formula xml:id="formula_55">J(θ) = ∂f ∂t (t, x, p; θ) -L p f (t, x, p; θ) 2 + g p (x) -f ( t, x, p; θ) 2 + h p (x) -f (0, x, p; θ) 2 . (<label>6.2)</label></formula><p>-Update θ with a stochastic gradient descent step θ -→ θ -α∇ θ J(θ), <ref type="bibr">(6.3)</ref> where α is the learning rate.</p><p>If x is low-dimensional (d ≤ 3), which is common in many physical PDEs, the first and second partial derivatives of f can be calculated via chain rule or approximated by finite difference. We implement our algorithm for Burgers' equation on a finite domain.</p><formula xml:id="formula_56">∂u ∂t = ν ∂ 2 u ∂x 2 -αu ∂u ∂x , (t, x) ∈ [0, 1] × [0, 1], u(t, x = 0) = a, u(t, x = 1) = b, u(t = 0, x) = g(x), x ∈ [0, 1].</formula><p>The problem setup space is P = (ν, α, a, b) ∈ R 4 . The initial condition g(x) is chosen to be a linear function which matches the boundary conditions u(t, x = 0) = a and u(t, x = 1) = b. We train a single neural network to approximate the solution of u(t, x; p) over the entire space (t, x, ν, α, a, b)</p><formula xml:id="formula_57">∈ [0, 1] × [0, 1] × [10 -2 , 10 -1 ] × [10 -2 , 1] × [-1, 1] × [-1, 1]</formula><p>. We use a larger network (6 layers, 200 units per layer) than in the previous numerical examples. Figure <ref type="figure" target="#fig_6">5</ref> compares the deep learning solution with the exact solution for several different problem setups p. The solutions are very close; generally, the two solutions are visibly indistinguishable. The deep learning algorithm is able to accurately capture the shock layers and boundary layers.</p><p>Figure <ref type="figure" target="#fig_7">6</ref> presents the accuracy of the deep learning algorithm for different times t and different choices of ν. As ν becomes smaller, the solution becomes steeper. It also shows the shock layer forming over time. The contour plot <ref type="bibr" target="#b6">(7)</ref> reports the absolute error of the deep learning solution for different choices of b and ν. The deep learning solution is in red. The "exact solution", found via finite difference, is in blue. Solutions are reported at time t = 1. The solutions are very close; generally, the two solutions are visibly indistinguishably. The problem setups, in counter-clockwise order, are (ν, α, a, b) = (0.01, 0.95, 0.9, -0.9), (0.02, 0.95, 0.9, -0.9), (0.01, 0.95, -0.95, 0.95), (0.02, 0.9, 0.9, 0.8), (0.01, 0.75, 0.9, 0.1), and (0.09, 0.95, 0.5 -0.5).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Neural Network Approximation Theorem for PDEs</head><p>Let the L 2 error J(f ) measure how well the neural network f satisfies the differential operator, boundary condition, and initial condition. Define C n as the class of neural networks with n hidden units and let f n be a neural network with n hidden units which minimizes J(f ). We prove that there exists f n ∈ C n such that J(f n ) → 0, as n → ∞, and</p><formula xml:id="formula_58">f n → u as n → ∞,</formula><p>in the appropriate sense, for a class of quasilinear parabolic PDEs with the principle term in divergence form under certain growth and smoothness assumptions on the nonlinear terms. Our theoretical result only  covers a class of quasilinear parabolic PDEs as described in this section. However, the numerical results of this paper indicate that the results are more broadly applicable.</p><p>The proof requires the joint analysis of the approximation power of neural networks as well as the continuity properties of partial differential equations. First, we show that the neural network can satisfy the differential operator, boundary condition, and initial condition arbitrarily well for sufficiently large n.</p><formula xml:id="formula_59">J(f n ) → 0 as n → ∞. (7.1)</formula><p>Let u be the solution to the PDE. The statement (7.1) does not necessarily imply that f n → u. One challenge to proving convergence is that we only have L 2 control of the error. We prove convergence for the case of homogeneous boundary data, i.e., g(t, x) = 0, by first establishing that each neural network {f n } ∞ n=1 satisfies a PDE with a source term h n (t, x). Importantly, the source terms h n (t, x) are only known to be vanishing in L 2 . We are then able to prove that the convergence of f n → u as n → ∞ in the appropriate space holds using compactness arguments.</p><p>The precise statement of the theorem and the presentation of the proof is in the next two sections. Section 7.1 proves that J(f n ) → 0 as n → ∞. Section 7.2 contains convergence results of f n to the solution u of the PDE as n → ∞. The main result is Theorem 7.3. For readability purposes the corresponding proofs are in Appendix A.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">Convergence of the L 2 error J(f )</head><p>In this section, we present a theorem guaranteeing the existence of multilayer feed forward networks f able to universally approximate solutions of quasilinear parabolic PDEs in the sense that there is f that makes the objective function J(f ) arbitrarily small. To do so, we use the results of <ref type="bibr" target="#b25">[26]</ref> on universal approximation of functions and their derivatives and make appropriate assumptions on the coefficients of the PDEs to guarantee that a classical solution exists (since then the results of <ref type="bibr" target="#b25">[26]</ref> apply).</p><p>Consider a bounded set Ω ⊂ R d with a smooth boundary ∂Ω and denote Ω T = (0, T ] × Ω and ∂Ω T = (0, T ] × ∂Ω. In this subsection we consider the class of quasilinear parabolic PDE's of the form</p><formula xml:id="formula_60">∂ t u(t, x) -div (α(t, x, u(t, x), ∇u(t, x))) + γ(t, x, u(t, x), ∇u(t, x)) = 0, for (t, x) ∈ Ω T u(0, x) = u 0 (x), for x ∈ Ω u(t, x) = g(t, x), for (t, x) ∈ ∂Ω T (7.2)</formula><p>For notational convenience, let us write the operator of (7.2) as G. Namely, let us denote</p><formula xml:id="formula_61">G[u](t, x) = ∂ t u(t, x) -div (α(t, x, u(t, x), ∇u(t, x))) + γ(t, x, u(t, x), ∇u(t, x)).</formula><p>Notice that we can write</p><formula xml:id="formula_62">G[u](t, x) = ∂ t u(t, x) - d i,j=1 ∂α i (t, x, u(t, x), ∇u(t, x)) ∂u xj ∂ xi,xj u(t, x) + γ(t, x, u(t, x), ∇u(t, x)),</formula><p>where γ(t, x, u, p) = γ(t, x, u, p) -</p><formula xml:id="formula_63">d i=1 ∂α i (t, x, u, p) ∂u ∂ xi u - d i=1 ∂α i (t, x, u, p) ∂x i .</formula><p>For the purposes of this section, we consider equations of the type (7.2) that have classical solutions.</p><p>In particular we assume that there is a unique u(t, x) solving (7.2) such that u(t, x) ∈ C( ΩT ) C 1+η/2,2+η (Ω T ) with η ∈ (0, 1) and that sup</p><formula xml:id="formula_64">(t,x)∈Ω T 2 k=1 |∇ (k) x u(t, x)| &lt; ∞. (<label>7.3)</label></formula><p>We refer the interested reader to Theorems 5.4, 6.1 and 6.2 of Chapter V in <ref type="bibr" target="#b27">[28]</ref> for specific general conditions on α, γ guaranteeing the validity of the aforementioned statement.</p><p>Universal approximation results for single functions and their derivatives have been obtained under various assumptions in <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b24">25,</ref><ref type="bibr" target="#b25">26]</ref>. In this paper, we use Theorem 3 of <ref type="bibr" target="#b25">[26]</ref>. Let us recall the setup appropriately modified for our case of interest. Let ψ be an activation function, e.g., of sigmoid type, of the hidden units and define the set</p><formula xml:id="formula_65">C n (ψ) = ⎧ ⎨ ⎩ ζ(t, x) : R 1+d → R : ζ(t, x) = n i=1 β i ψ ⎛ ⎝ α 1,i t + d j=1 α j,i x j + c j ⎞ ⎠ ⎫ ⎬ ⎭ . (<label>7.4)</label></formula><p>where 1+d) compose the elements of the parameter space. Then we have the following result.</p><formula xml:id="formula_66">θ = (β 1 , • • • , β n , α 1,1 , • • • , α d,n , c 1 , c 1 , • • • , c n ) ∈ R 2n+n(</formula><p>Theorem 7.1. Let C n (ψ) be given by <ref type="bibr">(7.4)</ref> where ψ is assumed to be in C 2 (R d ), bounded and non-constant. Set C(ψ) = n≥1 C n (ψ). Assume that Ω T is compact and consider the measures ν 1 , ν 2 , ν 3 whose support is contained in Ω T , Ω and ∂Ω T respectively. In addition, assume that the PDE (7.2) has a unique classical solution such that (7.3) holds. Also, assume that the nonlinear terms ∂αi(t,x,u,p) ∂pj and γ(t, x, u, p) are locally Lipschitz in (u, p) with Lipschitz constant that can have at most polynomial growth on u and p, uniformly with respect to t, x. Then, for every &gt; 0, there exists a positive constant K &gt; 0 that may depend on sup Ω T |u|, sup Ω T |∇ x u| and sup Ω T |∇ <ref type="bibr" target="#b1">(2)</ref> x u| such that there exists a function f ∈ C(ψ) that satisfies</p><formula xml:id="formula_67">J(f ) ≤ K .</formula><p>The proof of this theorem is in the Appendix.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">Convergence of the neural network to the PDE solution</head><p>We now prove, under stronger conditions, the convergence of the neural networks f n to the solution u of the PDE ∂ t u(t, x)div (α(t, x, u(t, x), ∇u(t, x))) + γ(t, x, u(t, x), ∇u(t, x)) = 0, for (t, x) ∈ Ω T u(0, x) = u 0 (x), for x ∈ Ω u(t, x) = 0, for (t, x) ∈ ∂Ω T , <ref type="bibr">(7.5)</ref> as n → ∞. Notice that we have restricted the discussion to homogeneous boundary data. We do this for both presentation and mathematical reasons. <ref type="foot" target="#foot_2">4</ref>The objective function is</p><formula xml:id="formula_68">J(f ) = G[f ] 2 2,Ω T + f 2 2,∂Ω T + f (0, •) -u 0 2 2,Ω</formula><p>Recall that the norms above are L 2 (X) norms in the respective space X = Ω T , ∂Ω T and Ω respectively. From Theorem 7.1, we have that</p><formula xml:id="formula_69">J(f n ) → 0 as n → ∞. Each neural network f n satisfies the PDE G[f n ](t, x) = h n (t, x), for (t, x) ∈ Ω T f n (0, x) = u n 0 (x), for x ∈ Ω f n (t, x) = g n (t, x), for (t, x) ∈ ∂Ω T (7.6)</formula><p>for some h n , u n 0 , and g n such that</p><formula xml:id="formula_70">h n 2 2,Ω T + g n 2 2,∂Ω T + u n 0 -u 0 2 2,Ω → 0 as n → ∞. (7.7)</formula><p>For the purposes of this section, we make the following set of assumptions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Condition 7.2.</head><p>• There is a constant μ &gt; 0 and positive functions κ(t, x), λ(t, x) such that for all (t, x) ∈ Ω T we have α(t, x, u, p) ≤ μ(κ(t, x) + p ), and |γ(t, x, u, p)| ≤ λ(t, x) p , with κ ∈ L 2 (Ω T ), λ ∈ L d+2+η (Ω T ) for some η &gt; 0.</p><p>• α(t, x, u, p) and γ(t, x, u, p) are Lipschitz continuous in (t, x, u, p) ∈ Ω T × R × R d uniformly on compacts of the form {(t, x) ∈ ΩT , |u| ≤ C, |p| ≤ C}.</p><p>• α(t, x, u, p) is differentiable with respect to (x, u, p) with continuous derivatives.</p><p>• There is a positive constant ν &gt; 0 such that α(t, x, u, p)p ≥ ν|p| 2 and α(t, x, u, p 1 )α(t, x, u, p 2 ), p 1p 2 &gt; 0, for every p 1 , p 2 ∈ R d , p 1 = p 2 .</p><p>• u 0 (x) ∈ C 0,2+ξ ( Ω) for some ξ &gt; 0 5 with itself and its first derivative bounded in Ω.</p><p>• Ω is a bounded, open subset of R d with boundary ∂Ω ∈ C 2 .</p><p>• For every n ∈ N, f n ∈ C (Ω T ) for some δ &gt; 0 and any interior subdomain Ω T of Ω T 6 . In addition, f n converges to u, the unique solution to <ref type="bibr">(7.5)</ref>, strongly in L ρ (Ω T ) for every ρ &lt; 2. If, in addition, the sequence {f n (t, x)} n∈N is uniformly bounded in n and equicontinuous then the convergence to u is uniform in Ω T .</p><p>The proof of this theorem is in the Appendix. We conclude this section with some remarks and an example.</p><p>Remark 7.4. Despite the restriction made to the zero boundary data case, we do expect that our results are also valid for reasonably smooth inhomogeneous boundary data. In addition, if we make further assumptions on the nonlinearities α(t, x, u, p) and γ(t, x, u, p) and on the initial data u 0 (x), then one can establish existence and uniqueness of classical solutions, see for example Section 6 of Chapter V in <ref type="bibr" target="#b27">[28]</ref> for details. As a matter of fact the results of Chapter V.6 in <ref type="bibr" target="#b27">[28]</ref> show that with assuming a little bit more on the growth of the derivatives of the nonlinear functions α(t, x, u, p), γ(t, x, u, p) will lead to ∇ x u ∈ C 0,δ ,δ /2 (Ω T ) for some δ &gt; 0. Furthermore, we remark here that stronger claims can be made if more properties are known in regards to the given approximating family {f n } such as, for example, a-priori bounds on appropriate Sobolev norms, but we do not explore this further here.</p><p>Remark 7.5. The uniform, in n, L 2 bound for the sequence {f n } n∈N is easily satisfied for a bounded neural network approximation sequence f n (t, x). However, we believe that it is true for a wider class of models, after all one expects that to be true if f n indeed converges in L ρ for ρ &lt; 2. The condition on equicontinuity for {f n (t, x)} allows to both simplify the proof and make a stronger claim as well. However, it is only a sufficient condition and not necessary. The paper, <ref type="bibr" target="#b7">[8]</ref>, see Theorems 19 and 20 therein, discusses structural restrictions (a-priori boundedness and summability) that can be imposed on the unknown weights of feedforward neural networks, belonging in the class C(ψ) = n≥1 C n (ψ) as defined by (7.4), which then guarantee both equicontinuity and universal approximation properties of the neural network for continuous and bounded functions. As it is also discussed in <ref type="bibr" target="#b7">[8]</ref>, equicontinuity is also related to fault-tolerance properties of neural networks, a subject worthy of further study in the context of PDEs. However, we do not discuss this further here as this would be a topic for a different paper.</p><p>Let us present the case of linear parabolic PDEs in Example 7.6 below. 5 In general, the Hölder space C 0,ξ ( Ω) is the Banach space of continuous functions in Ω having continuous derivatives up to order [ξ] in Ω with finite corresponding uniform norms and finite uniform ξ -[ξ] Hölder norm. Analogously, we also define the Hölder space C 0,ξ,ξ/2 ( ΩT ) which in addition has finite [ξ]/2 and (ξ -[ξ])/2 regular and Hölder derivatives norms in time respectively. These spaces are denoted by H ξ ( Ω) and H ξ,ξ/2 ( ΩT ) respectively in <ref type="bibr" target="#b27">[28]</ref>. 6 Here W</p><p>(1,2),2 0</p><p>(Ω T ) denotes the Banach space which is the closure of C ∞ 0 (Ω T ) with elements from L 2 (Ω T ) having generalized derivatives of the form D r t D s x with r, s such that 2r + s ≤ 2 with the usual Sobolev norm.</p><p>Example 7.6 (Linear case). Let us assume that the operator G is linear in u and ∇u. In particular, let us set</p><formula xml:id="formula_71">α i (t, x, u, p) = n j=1 σσ T i,j (t, x)p j , i = 1, • • • d and γ(t, x, u, p) = -b(t, x), p + d i,j=1 ∂ ∂x i σσ T i,j (t, x)p j -c(t, x)u.</formula><p>Assume that there are positive constants ν, μ &gt; 0 such that for every ξ ∈ R d the matrix σσ T i,j (t, x)</p><formula xml:id="formula_72">d i,j=1 satisfies ν|ξ| 2 ≤ d i,j=1 σσ T i,j (t, x)ξ i ξ j ≤ μ|ξ| 2</formula><p>and that the coefficients b and c are such that d i=1 b 2 i q,r,Ω T + c q,r,Ω T ≤ μ, for some μ &gt; 0 where we recall for example c q,r,Ω T = T 0 Ω |c(t, x)| q dx r/q 1/r and r, q satisfy the relations</p><formula xml:id="formula_73">1 r + d 2q = 1 q ∈ (d/2, ∞], r ∈ [1, ∞), for d ≥ 2, q ∈ [1, ∞], r ∈ [1, 2], for d = 1.</formula><p>In particular, the previous bounds always hold in the case of coefficients b and c that are bounded in Ω T . Under these conditions, standard results for linear PDE's, see for instance Theorem 4.5 of Chapter III of <ref type="bibr" target="#b27">[28]</ref> for a related result, show that approximation results analogous to that of Theorem 7.3 hold.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusion</head><p>We believe that deep learning could become a valuable approach for solving high-dimensional PDEs, which are important in physics, engineering, and finance. The PDE solution can be approximated with a deep neural network which is trained to satisfy the differential operator, initial condition, and boundary conditions. We prove that the neural network converges to the solution of the partial differential equation as the number of hidden units increases.</p><p>Our deep learning algorithm for solving PDEs is meshfree, which is key since meshes become infeasible in higher dimensions. Instead of forming a mesh, the neural network is trained on batches of randomly sampled time and space points. The approach is implemented for a class of high-dimensional free boundary PDEs in up to 200 dimensions with accurate results. We also test it on a high-dimensional Hamilton-Jacobi-Bellman PDE with accurate results.</p><p>The DGM algorithm can be easily modified to apply to hyperbolic, elliptic, and partial-integral differential equations. The algorithm remains essentially the same for these other types of PDEs. However, numerical performance for these other types of PDEs remains to be be investigated.</p><p>It is also important to put the numerical results in Sections 4, 5 and 6 in a proper context. PDEs with highly non-monotonic or oscillatory solutions may be more challenging to solve and further developments in architecture will be necessary. Further numerical development and testing is therefore required to better judge the usefulness of deep learning for the solution of PDEs in other applications. However, the numerical results of this paper demonstrate that there is sufficient evidence to further explore deep neural network approaches for solving PDEs.</p><p>In addition, it would be of interest to establish results analogous to Theorem 7.3 for PDEs beyond the class of quasilinear parabolic PDEs considered in this paper. Stability analysis of deep learning and machine learning algorithms for solving PDEs is also an important question. It would certainly be interesting to study machine learning algorithms that use a more direct variational formulation of the involved PDEs. We leave these questions for future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Proofs of convergence results</head><p>In this section we have gathered the proofs of the theoretical results of Section 7.</p><p>Proof of Theorem 7.1. By Theorem 3 of <ref type="bibr" target="#b25">[26]</ref> we know that there is a function f ∈ C(ψ) that is uniformly 2-dense on compacts of C 2 (R 1+d ). This means that for u ∈ C 1,2 </p><formula xml:id="formula_74">([0, T ] × R d ) and &gt; 0, there is f ∈ C(ψ) such that sup (t,x)∈Ω T |∂ t u(t, x) -∂ t f (t, x; θ)| + max |a|≤2 sup (t,x)∈ ΩT |∂ (a) x u(t, x) -∂ (a) x f (t, x; θ)| &lt; (A.1)</formula><p>We have assumed that (u, p) → γ(t, x, u, p) is locally Lipschitz continuous in (u, p) with Lipschitz constant that can have at most polynomial growth in u and p , uniformly with respect to t, x. This means that</p><formula xml:id="formula_75">|γ(t, x, u, p) -γ(t, x, v, s)| ≤ |u| q1/2 + |p| q2/2 + |v| q3/2 + |s| q4/2 (|u -v| + |p -s|) .</formula><p>for some constants 0 ≤ q 1 , q 2 , q 3 , q 4 &lt; ∞. Therefore we obtain, using Hölder inequality with exponents r 1 , r 2 ,</p><formula xml:id="formula_76">Ω T |γ(t, x, f, ∇ x f ) -γ(t, x, u, ∇ x u)| 2 dν 1 (t, x) ≤ ≤ Ω T (|f (t, x; θ)| q1 + |∇ x f (t, x; θ)| q2 + |u(t, x)| q3 + |∇ x u(t, x)| q4 ) × |f (t, x; θ) -u(t, x)| 2 + |∇ x f (t, x; θ) -∇ x u(t, x)| 2 dν 1 (t, x) ≤ Ω T (|f (t, x; θ)| q1 + |∇ x f (t, x; θ)| q2 + |u(t, x)| q3 + |∇ x u(t, x)| q4 ) r1 dν 1 (t, x) 1/r1 × Ω T |f (t, x; θ) -u(t, x)| 2 + |∇ x f (t, x; θ) -∇ x u(t, x)| 2 r2 dν 1 (t, x) 1/r2 ≤ K Ω T (|f (t, x; θ) -u(t, x)| q1 + |∇ x f (t, x; θ) -∇ x u(t, x)| q2 + |u(t, x)| q1∨q3 + |∇ x u(t, x)| q2∨q4 ) r1 dν 1 (t, x) 1/r1 × Ω T |f (t, x; θ) -u(t, x)| 2 + |∇ x f (t, x; θ) -∇ x u(t, x)| 2 r2 dν 1 (t, x) 1/r2 ≤ K q1 + q2 + sup Ω T |u| q1∨q3 + sup Ω T |∇ x u| q2∨q4 2 (A.2)</formula><p>where the unimportant constant K &lt; ∞ may change from line to line and for two numbers q 1 ∨ q 3 = max{q 1 , q 3 }. In the last step we used (A.1).</p><p>In addition, we have also assumed that for every i, j ∈ {1, • • • d}, the mapping (u, p) → ∂αi(t,x,u,p) ∂pj is locally Lipschitz in (u, p) with Lipschitz constant that can have at most polynomial growth on u and p, uniformly with respect to t, x. This means that</p><formula xml:id="formula_77">∂α i (t, x, u, p) ∂p j - ∂α i (t, x, v, s) ∂s j ≤ |u| q1/2 + |p| q2/2 + |v| q3/2 + |s| q4/2 (|u -v| + |p -s|) .</formula><p>for some constants 0 ≤ q 1 , q 2 , q 3 , q 4 &lt; ∞. Denote for convenience</p><formula xml:id="formula_78">ξ(t, x, u, ∇u, ∇ 2 u) = d i,j=1 ∂α i (t, x, u(t, x), ∇u(t, x)) ∂u xj ∂ xi,xj u(t, x).</formula><p>Then, similarly to (A.2) we have after an application of Hölder inequality, for some constant K &lt; ∞ that may change from line to line,</p><formula xml:id="formula_79">Ω T ξ(t, x, f, ∇ x f, ∇ 2 x f ) -ξ(t, x, u, ∇ x u, ∇ 2 x u) 2 dν 1 (t, x) ≤ ≤ Ω T d i,j=1 ∂α i (t, x, f (t, x; θ), ∇f (t, x; θ)) ∂f xj - ∂α i (t, x, u(t, x), ∇u(t, x)) ∂u xj ∂ xi,xj u(t, x) 2 dν 1 (t, x) + Ω T d i,j=1 ∂α i (t, x, f (t, x; θ), ∇f (t, x; θ)) ∂f xj ∂ xi,xj f (t, x; θ) -∂ xi,xj u(t, x) 2 dν 1 (t, x) ≤ K d i,j=1 Ω T ∂ xi,xj u(t, x) 2p dν 1 (t, x) 1/p × × Ω T ∂α i (t, x, f (t, x; θ), ∇f (t, x; θ)) ∂f xj - ∂α i (t, x, u(t, x), ∇u(t, x)) ∂u xj 2q dν 1 (t, x) 1/q + + K d i,j=1 Ω T ∂α i (t, x, f, ∇f ) ∂f xj 2p dν 1 (t, x) 1/p Ω T ∂ xi,xj f (t, x; θ) -∂ xi,xj u(t, x) 2q dν 1 (t, x) 1/q ≤ K d i,j=1 Ω T ∂ xi,xj u(t, x) 2p dν 1 (t, x) 1/p × × Ω T (|f (t, x; θ) -u(t, x)| q1 + |∇ x f (t, x; θ) -∇ x u(t, x)| q2 + |u(t, x)| q1∨q3 + |∇ x u(t, x)| q2∨q4 ) qr1 dν 1 (t, x) 1/(qr1) × Ω T |f (t, x; θ) -u(t, x)| 2 + |∇ x f (t, x; θ) -∇ x u(t, x)| 2 qr2 dν 1 (t, x) 1/(qr2) + K d i,j=1 Ω T ∂α i (t, x, f, ∇f ) ∂f xj 2p dν 1 (t, x) 1/p Ω T ∂ xi,xj f (t, x; θ) -∂ xi,xj u(t, x) 2q dν 1 (t, x) 1/q ≤ K 2 , (A.3)</formula><p>where in the last step we followed the computation in (A.2) and used (A.1). Using (A.1) and (A.2)-(A.3) we subsequently obtain for the objective function (note that G[u](t, x) = 0 for u that solves the PDE)</p><formula xml:id="formula_80">J(f ) = G[f ](t, x) 2 Ω T ,ν1 + f (t, x; θ) -g(t, x) 2 ∂Ω T ,ν2 + f (0, x; θ) -u 0 (x) 2 Ω,ν3 = G[f ](t, x) -G[u](t, x) 2 Ω T ,ν1 + f (t, x; θ) -g(t, x) 2 ∂Ω T ,ν2 + f (0, x; θ) -u 0 (x) 2 Ω,ν3 ≤ Ω T |∂ t u(t, x) -∂ t f (t, x; θ)| 2 dν 1 (t, x) + Ω T ξ(t, x, f, ∇f, ∇ 2 f ) -ξ(t, x, u, ∇u, ∇ 2 u) 2 dν 1 (t, x) + Ω T |γ(t, x, f, ∇ x f ) -γ(t, x, u, ∇ x u)| 2 dν 1 (t, x) + ∂Ω T |f (t, x; θ) -u(t, x)| 2 dν 2 (t, x)+ + Ω |f (0, x; θ) -u(0, x)| 2 dν 3 (t, x) ≤ K 2</formula><p>for an appropriate constant K &lt; ∞. The last step completes the proof of the Theorem after rescaling .</p><p>Proof of Theorem 7.3. Existence, regularity and uniqueness for (7.5) follows from Theorem 2.1 <ref type="bibr" target="#b39">[40]</ref> combined with Theorems 6.3-6.5 of Chapter V.6 in <ref type="bibr" target="#b27">[28]</ref> (see also Theorem 6.6 of Chapter V.6 of <ref type="bibr" target="#b27">[28]</ref>). Boundedness follows from Theorem 2.1 in <ref type="bibr" target="#b39">[40]</ref> and Chapter V.2 in <ref type="bibr" target="#b27">[28]</ref>. The convergence proof follows by the smoothness of the neural networks together with compactness arguments as we explain below. Let us first consider problem (7.6) with g n (t, x) = 0 and let us denote the solution to this problem by f n (t, x). Due to Condition 7.2, Lemma 4.1 of <ref type="bibr" target="#b39">[40]</ref> applies and gives that { f n } n∈N is uniformly bounded with respect to n in at least L ∞ 0, T ; L 2 (Ω) ∩ L 2 0, T ; W 1,2 0 (Ω) (in regards to such uniform energy bound results we also refer the reader to Theorem 2.1 and Remark 2.14 of <ref type="bibr" target="#b4">[5]</ref> for the case γ = 0 and to <ref type="bibr" target="#b33">[34,</ref><ref type="bibr" target="#b36">37]</ref> for related results in more general cases). As a matter of fact f n is more regular than stated, see Section 6, Chapter V of <ref type="bibr" target="#b27">[28]</ref>, but we will not make use of this fact in the convergence proof of f n to u. These uniform energy bounds imply that we can extract a subsequence, denoted also by { f n } n∈N , which converges to some u in the weak-* sense in L ∞ 0, T ; L 2 (Ω) and weakly in L 2 0, T ; W 1,2 0 (Ω) and to some v weakly in L 2 (Ω) for every fixed t ∈ (0, T ].</p><p>Next let us set q = 1 + d d+4 ∈ (1, 2) and note that for conjugates, r 1 , r 2 &gt; 1 such that 1/r 1 + 1/r 2 = 1</p><formula xml:id="formula_81">Ω T γ(t, x, f n , ∇ x f n ) q dtdx ≤ Ω T |λ(t, x)| q |∇ x f n (t, x)| q dtdx ≤ Ω T |λ(t, x)| r1q dtdx 1/r1 Ω T |∇ x f n (t, x)| r2q dtdx 1/r2 . (A.4)</formula><p>Let us choose r 2 = 2/q &gt; 1. Then we calculate r 1 = r2 r2-1 = 2 2-q . Hence, we have that r 1 q = d + 2. Recalling the assumption λ ∈ L d+2 (Ω T ) and the uniform bound on the ∇ x f n 2 we subsequently obtain that for q = 1 + d d+4 , there is a constant C &lt; ∞ such that</p><formula xml:id="formula_82">Ω T γ(t, x, f n , ∇ x f n ) q dtdx ≤ C.</formula><p>The latter estimate together with the growth assumptions on α(•) from Condition 7.2, imply that {∂ t f n } n∈N is bounded uniformly with respect to n in L 1+d/(d+4) (Ω T ) and in L 2 (0, T ; W -1,2 (Ω)). Consider the conjugates 1/δ 1 + 1/δ 2 = 1 with δ 2 &gt; max{2, d}. Due to the embedding W -1,2 (Ω) ⊂ W -1,δ1 (Ω), L q (Ω) ⊂ W -1,δ1 (Ω), and L 2 (Ω) ⊂ W -1,δ1 (Ω), we have that {∂ t f n } n∈N is bounded uniformly with respect to n in L 1 (0, T ; W -1,δ1 (Ω)). Define now the spaces X = W 1,2 0 (Ω), B = L 2 (Ω) and Y = W -1,δ1 (Ω), and notice that</p><formula xml:id="formula_83">X ⊂ B ⊂ Y</formula><p>with the first embedding being compact. Then, Corollary 4 of <ref type="bibr" target="#b47">[48]</ref> yields relative compactness of { f n } n∈N in L 2 (Ω T ), which means that { f n } n∈N converges strongly to u in that space. Thus, up to subsequences, { f n } n∈N converges almost everywhere to u in Ω T . The nonlinearity of the α and γ functions with respect to the gradient prohibits us from passing to the limit directly in the respective weak formulation. However, the uniform boundedness of { fn } n∈N in L σ 0, T ; W 1,σ 0 (Ω) with σ &gt; 1 (in fact here σ = 2) and its weak convergence to u in that space, allows us to conclude, as in Theorem 3.3 of <ref type="bibr" target="#b3">[4]</ref>, that ∇ f n → ∇u almost everywhere in Ω T .</p><p>Hence, we obtain that { f n } n∈N converges to u strongly also in L ρ 0, T ; W 1,ρ 0 (Ω) for every ρ &lt; 2. In preparation to passing to the limit as n → ∞ in the weak formulation, we need to study the behavior of the nonlinear terms. Recalling the assumptions on α(t, x, u, p) we have for ρ &lt; 2 and for a measurable set A ⊂ Ω T (the constant K &lt; ∞ may change from line to line)</p><formula xml:id="formula_84">A α(t, x, f n , ∇ f n ) ρ dtdx ≤ K A |κ(t, x)| ρ dtdx + A |∇ f n (t, x)| ρ dtdx ≤ K A |κ(t, x)| ρ dtdx + Ω T |∇ f n (t, x)| 2 dtdx ρ/2 |A| 1-ρ/2 ≤ K A |κ(t, x)| ρ dtdx + |A| 1-ρ/2 .</formula><p>In the latter display we used Höder inequality with exponent 2/ρ &gt; 1. By Vitali's theorem we then conclude that α(t, x, f n , ∇ f n ) → α(t, x, u, ∇u) strongly in L ρ (Ω T )</p><p>as n → ∞, for every 1 &lt; ρ &lt; 2. For the same reason, an analogous estimate to (A.4), gives</p><formula xml:id="formula_85">A γ(t, x, f n , ∇ x f n ) q dtdx ≤ K A |λ(t, x)| d+2 dtdx (2-q)/2 ≤ K|A| η d+2+η</formula><p>implying, via Vitali's theorem, that γ(t, x, f n , ∇ f n ) → γ(t, x, u, ∇u) strongly in L q (Ω T ) as n → ∞, for q = 1 + d d+4 . Notice also that by construction we have that the initial condition u n 0 converges to u 0 strongly in L 2 (Ω). The weak formulation of the PDE (7.6) with g n = 0 reads as follows. For every t 1 ∈ (0, T ]</p><formula xml:id="formula_86">Ωt 1 -f n ∂ t φ + α(t, x, f n , ∇ f n ), ∇φ + (γ(t, x, f n , ∇ f n ) -h n )φ (t, x)dxdt + Ω f n (t 1 , x)φ(t 1 , x)dx - Ω u n 0 (x)φ(0, x)dx = 0</formula><p>for every φ ∈ C ∞ 0 (Ω T ). Using the above convergence results, we then obtain that the limit point u satisfies for every t 1 ∈ (0, T ] the equation [-u∂ t φ + α(t, x, u, ∇u), ∇φ + γ(t, x, u, ∇u)φ] (t, x)dxdt + Ω u(t 1 , x)φ(t 1 , x)dx -Ω u 0 (x)φ(0, x)dx = 0, which is the weak formulation of the equation <ref type="bibr">(7.5)</ref>.</p><p>It remains to discuss the convergence of f nf n to zero, where we recall that f n is the neural network approximation satisfying (7.6) and f n satisfies (7.6) with g n = 0. The functions f n ∈ C 1,2 ( ΩT ) and ΩT is compact. We have also assumed that {f n } n is uniformly bounded in L 2 (Ω T ). This implies that, up to a subsequence, f n will converge at least weakly in L 2 (Ω T ). Moreover, the boundary values g n (t, x) (which is nothing else by f n (t, x) evaluated at the smooth boundary ∂Ω T ) in (7.6) converge to zero strongly in L 2 . It is then a standard result that g n , i.e., f n evaluated at the boundary, converges to zero, at least, almost uniformly along a subsequence, see for example Lemma 2.1 in Chapter II of <ref type="bibr" target="#b27">[28]</ref>. As it then follows, for example, by the proof of Theorems 6.3-6.4-6.5 of Chapter V.6 in <ref type="bibr" target="#b27">[28]</ref>, using smoothness and uniqueness, f n will differ from the solution to the PDE (7.6) with g n = 0, f n (t, x), by a negligible amount as n → ∞ in the almost everywhere sense. The assumed uniform L 2 bound for {f n } n∈N together with the previously derived uniform L 2 (Ω T ) bound for { f n } n∈N yield uniform L 2 (Ω T ) boundedness for {f nf n } n∈N . Then, by Vitali's theorem again, we get that {f nf n } n∈N goes to zero strongly in L ρ (Ω T ) for every ρ &lt; 2.</p><p>The previously derived strong convergence of {f nf n } n∈N to zero in L ρ (Ω T ) for every ρ &lt; 2, together with the strong L 2 (Ω T ) convergence of { f n } n∈N to u, conclude the proof of the convergence in L ρ (Ω T ) for every ρ &lt; 2 using triangle inequality.</p><p>If {f n (t, x)} is equicontinuous then, Lemma 3.2 of <ref type="bibr" target="#b16">[17]</ref> gives uniform convergence of g n to zero. Hence, by the previous analysis, it will certainly be true that {f n } n∈N converges to u in L ρ (Ω T ) for every ρ &lt; 2. The L ρ convergence to zero together with boundedness and equicontinuity of the sequence {f n (t, x)} results then in uniform convergence due to the well known Arzelà-Ascoli theorem.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Top: Absolute error. Bottom: Percent error. For reference, the price at time 0 is 0.1003 and the solution at time T is max(geometric average of x -1, 0).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>3 . 20 i=1x 4 .</head><label>3204</label><figDesc>Aggregate the error over a two-dimensional subspace t , 1 20 i , E for = 1, . . . , L. Produce a contour plot from the data t , x-axis is t and the y-axis is the geometric average 1 20 20 i=1 x i , which corresponds to the final condition g(x).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3</head><label>3</label><figDesc>Figure3reports both the absolute error and the percent error. The percent error |f (t,x;θ)-u(t,x)|</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Top: Absolute error. Bottom: Percent error. For reference, u(0, X 0 ) ∈ [0.10119, 0.10193] and the solution at time T is max(average of x -1, 0).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>3 .</head><label>3</label><figDesc>Aggregate the accuracy over a two-dimensional subspace x 11 , 1 21 21 i=1 x i , A for = 1, . . . , L.4. Produce a contour plot from the data x 11 , x-axis is x 11 and the y-axis is the average</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Contour plot of the percent error for the deep learning algorithm for a 21-dimensional Hamilton-Jacobi-Bellman PDE. The horizontal axis is the 11-th dimension. The vertical axis is the average of all dimensions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 5 :</head><label>5</label><figDesc>Figure5: The deep learning solution is in red. The "exact solution", found via finite difference, is in blue. Solutions are reported at time t = 1. The solutions are very close; generally, the two solutions are visibly indistinguishably. The problem setups, in counter-clockwise order, are (ν, α, a, b) = (0.01, 0.95, 0.9, -0.9), (0.02, 0.95, 0.9, -0.9), (0.01, 0.95, -0.95, 0.95), (0.02, 0.9, 0.9, 0.8), (0.01, 0.75, 0.9, 0.1), and (0.09, 0.95, 0.5 -0.5).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: The deep learning solution is in red. The "exact solution", found via finite difference, is in blue. Left plot: Comparison of solutions at times t = 0.1, 0.25, 0.5, 1 for (ν, α, a, b) = (0.03, 0.9, 0.95, -0.95). Right plot: Comparison of solutions for ν = 0.01, 0.02, 0.05, 0.09 at time t = 1 and with (α, a, b) = (0.8, 0.75, -0.75).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Contour plot of the average absolute error of the deep learning solution for different b and ν (the viscosity). The absolute error is averaged across x ∈ [0, 1] for time t = 1.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head></head><label></label><figDesc>Ωt 1</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table><row><cell></cell><cell>Error</cell></row><row><cell>3</cell><cell>0.05%</cell></row><row><cell>20</cell><cell>0.03%</cell></row><row><cell>100</cell><cell>0.11%</cell></row><row><cell>200</cell><cell>0.22%</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 2 :</head><label>2</label><figDesc>The accuracy of the deep learning algorithm is evaluated on a case where there is no semianalytic solution. The parameters μ(x) = (rc)x and σ(x) = σx. The correlations ρ i,j and volatilities σ i are estimated from data to generate a heterogeneous diffusion matrix. The initial stock price is X 0 = 1, dividend rate c = 0.02, and interest rate r = 0 for all stocks. The maturity of the option is T = 2.</figDesc><table><row><cell>u(0,X0)-u(0,X0) 2u(0,X0)</cell><cell cols="3">× 100%. Numerical results are in Table 2.</cell><cell></cell></row><row><cell cols="6">Strike price Neural network solution Lower Bound Upper Bound Error bound</cell></row><row><cell></cell><cell>0.90</cell><cell>0.14833</cell><cell>0.14838</cell><cell>0.14905</cell><cell>0.23%</cell></row><row><cell></cell><cell>0.95</cell><cell>0.12286</cell><cell>0.12270</cell><cell>0.12351</cell><cell>0.33%</cell></row><row><cell></cell><cell>1.00</cell><cell>0.10136</cell><cell>0.10119</cell><cell>0.10193</cell><cell>0.37%</cell></row><row><cell></cell><cell>1.05</cell><cell>0.08334</cell><cell>0.08315</cell><cell>0.08389</cell><cell>0.44%</cell></row><row><cell></cell><cell>1.10</cell><cell>0.06841</cell><cell>0.06809</cell><cell>0.06893</cell><cell>0.62%</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>The payoff</cell></row><row><cell cols="2">function is g(x) = max 1 d</cell><cell>d i=1</cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head></head><label></label><figDesc>1,2 ( ΩT ). In addition, (f n ) n∈N ∈ L 2 (Ω T ).</figDesc><table><row><cell cols="2">Theorem 7.3. Assume that Condition 7.2 and (7.7) hold. Then, problem (7.5) has a unique bounded</cell></row><row><cell>solution in C 0,δ,δ/2 ( ΩT ) ∩ L 2 0, T ; W 1,2 0 (Ω) ∩ W</cell><cell>(1,2),2 0</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>A neural network with a single hidden layer and n hidden units is a function of the formC n = h(t, x) : R 1+d → R : h(t, x) = n i=1 β i ψ α 1,i t + d j=1 α j,i x j + c jwhere Ψ : R → R is a nonlinear "activation" function such as a sigmoid or tanh function.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_1"><p>The PDE (5.5) has a semi-analytic solution which satisfies a Riccati equation. The Riccati equation can be solved using an iterative method.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_2"><p>We set u(t, x) = 0, for (t, x) ∈ ∂Ω T , i.e., g = 0, to circumvent certain technical difficulties arising due to inhomogeneous boundary conditions. If g = 0 such that g is the trace of some appropriately smooth function, say φ, then one can reduce the inhomogeneous boundary conditions on ∂Ω T to the homogeneous one by introducing in place of u the new function u -φ, see Section 4 of Chapter V in<ref type="bibr" target="#b27">[28]</ref> or Chapter 8 of<ref type="bibr" target="#b19">[20]</ref> for details on such considerations. We do not explore this here, because our goal is not to prove the most general result possible, but to provide a concrete setup in which we can prove the validity of the approximation results of interest.</p></note>
		</body>
		<back>

			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>§ Research of K.S. supported in part by the National Science Foundation (DMS 1550918). Computations for this paper were performed using the Blue Waters supercomputer grant "Distributed Learning with Neural Networks".</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<author>
			<persName><forename type="first">S</forename><surname>Asmussen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Glynn</surname></persName>
		</author>
		<title level="m">Stochastic Simulation: Algorithms and Analysis</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Machine learning approximation algorithms for high-dimensional fully nonlinear partial differential equations and second-order backward stochastic differential equations</title>
		<author>
			<persName><forename type="first">C</forename><surname>Beck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Jentzen</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1709.05963</idno>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Gradient convergence in gradient methods via errors</title>
		<author>
			<persName><forename type="first">D</forename><surname>Bertsekas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Tsitsiklis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal of Optimization</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="627" to="642" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Nonlinear parabolic equations with measure data</title>
		<author>
			<persName><forename type="first">L</forename><surname>Boccardo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Dall'aglio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Gallouët</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Orsina</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Functional Analysis</title>
		<imprint>
			<biblScope unit="volume">147</biblScope>
			<biblScope unit="page" from="237" to="258" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Summability and existence results for nonlinear parabolic equations</title>
		<author>
			<persName><forename type="first">L</forename><surname>Boccardo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M</forename><surname>Porzio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Primo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nonlinear Analysis: Theory, Methods and Applications</title>
		<imprint>
			<biblScope unit="volume">71</biblScope>
			<biblScope unit="page" from="1" to="15" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Option pricing with a direct adaptive sparse grid approach</title>
		<author>
			<persName><forename type="first">H</forename><surname>Bungartz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Heinecke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Pfluger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Schraufstetter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computational and Applied Mathematics</title>
		<imprint>
			<biblScope unit="volume">236</biblScope>
			<biblScope unit="issue">15</biblScope>
			<biblScope unit="page" from="3741" to="3750" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName><forename type="first">H</forename><surname>Bungartz</surname></persName>
		</author>
		<author>
			<persName><surname>Griebel</surname></persName>
		</author>
		<title level="m">Sparse Grids, Acta numerica</title>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="174" to="269" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Feedforward sigmoidal networks -equicontinuity and fault-tolerance properties</title>
		<author>
			<persName><forename type="first">P</forename><surname>Chandra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Singh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Neural Networks</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1350" to="1366" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<author>
			<persName><forename type="first">P</forename><surname>Chaudhari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Oberman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Osher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Soatto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Carlier</surname></persName>
		</author>
		<title level="m">Deep relaxation: partial differential equations for optimizing deep neural networks</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Stationary Hamilton-Jacobi Equations in Hilbert Spaces and Applications to a Stochastic Optimal Control Problem</title>
		<author>
			<persName><forename type="first">S</forename><surname>Cerrai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal on Control and Optimization</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="824" to="852" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Approximation by superposition of a sigmoidal function</title>
		<author>
			<persName><forename type="first">G</forename><surname>Cybenko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematics of Control, Signals and Systems</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="303" to="314" />
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Convergence of Numerical Schemes for the Solution of Parabolic Stochastic Partial Differential Equations</title>
		<author>
			<persName><forename type="first">A</forename><surname>Davie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Gaines</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematics of Computation</title>
		<imprint>
			<biblScope unit="volume">70</biblScope>
			<biblScope unit="issue">233</biblScope>
			<biblScope unit="page" from="121" to="134" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Large scale distributed deep networks</title>
		<author>
			<persName><forename type="first">J</forename><surname>Dean</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Corrado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Monga</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Devin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Senior</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Tucker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Le</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="1223" to="1231" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Optimal control of a stochastic heat equation with boundary-noise and boundary-control, ESAIM: Control, Optimisation and Calculus of Variations</title>
		<author>
			<persName><forename type="first">A</forename><surname>Debussche</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Fuhrman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Tessitore</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="178" to="205" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Deep learning-based numerical methods for high-dimensional parabolic partial differential equations and backward stochastic differential equations</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Jentzen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Communications in Mathematics and Statistics</title>
		<imprint>
			<date type="published" when="2017">2017</date>
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Asymptotic Expansion as Prior Knowledge in Deep Learning Method for high dimensional BSDEs</title>
		<author>
			<persName><forename type="first">M</forename><surname>Fujii</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Takahashi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Takahashi</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1710.07030</idno>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A real variable lemma and the continuity of paths of some Gaussian processes</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Garcia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Rodemich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Rumsey</surname><genName>Jr</genName></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Rosenblatt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Indiana University Mathematics Journal</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="565" to="578" />
			<date type="published" when="1970-12">December, 1970</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Understanding the difficulty of training deep feedforward neural networks</title>
		<author>
			<persName><forename type="first">X</forename><surname>Glorot</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Bengio</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Thirteenth International Conference on Artificial Intelligence and Statistics</title>
		<meeting>the Thirteenth International Conference on Artificial Intelligence and Statistics</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="249" to="256" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Numerical experiments with SPDEs</title>
		<author>
			<persName><forename type="first">J</forename><surname>Gaines</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">London Mathematical Society Lecture Note Series</title>
		<imprint>
			<biblScope unit="page" from="55" to="71" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Elliptic partial differential equations of second order</title>
		<author>
			<persName><forename type="first">D</forename><surname>Gilbarg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">S</forename><surname>Trudinger</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1983">1983</date>
			<publisher>Springer-Verlang</publisher>
			<pubPlace>Berlin Heidelberg</pubPlace>
		</imprint>
	</monogr>
	<note>second edition</note>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Lattice Approximations for Stochastic Quasi-Linear Parabolic Partial Differential Equations Driven by Space-Time White Noise I</title>
		<author>
			<persName><forename type="first">I</forename><surname>Gyöngy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Potential Analysis</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="25" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">A highly parallel Black-Scholes solver based on adaptive sparse grids</title>
		<author>
			<persName><forename type="first">A</forename><surname>Heinecke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Schraufstetter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Bungartz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Computer Mathematics</title>
		<imprint>
			<biblScope unit="volume">89</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="1212" to="1238" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Pricing American Options: A Duality Approach</title>
		<author>
			<persName><forename type="first">M</forename><surname>Haugh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Kogan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Operations Research</title>
		<imprint>
			<biblScope unit="volume">52</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="258" to="270" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Long short-term memory</title>
		<author>
			<persName><forename type="first">S</forename><surname>Hochreiter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Schmidhuber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Neural Computation</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="1735" to="1780" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Universal approximation of an unknown mapping and its derivatives using multilayer feedforward networks</title>
		<author>
			<persName><forename type="first">K</forename><surname>Hornik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stinchcombe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>White</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Neural Networks</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="551" to="560" />
			<date type="published" when="1990">1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Approximation capabilities of multilayer feedforward networks</title>
		<author>
			<persName><forename type="first">K</forename><surname>Hornik</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Neural Networks</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="251" to="257" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<author>
			<persName><forename type="first">D</forename><surname>Kingma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Ba</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1412.6980</idno>
		<title level="m">ADAM: A method for stochastic optimization</title>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Ural&apos;ceva, Linear and Quasi-linear Equations of Parabolic Type (Translations of Mathematical Monographs Reprint)</title>
		<author>
			<persName><forename type="first">O</forename><forename type="middle">A</forename><surname>Ladyzenskaja</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">A</forename><surname>Solonnikov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">N</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1988">1988</date>
			<publisher>American Mathematical Society</publisher>
			<biblScope unit="volume">23</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Artificial neural networks for solving ordinary and partial differential equations</title>
		<author>
			<persName><forename type="first">I</forename><surname>Lagaris</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Likas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Fotiadis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Neural Networks</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="987" to="1000" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Neural-network methods for boundary value problems with irregular boundaries</title>
		<author>
			<persName><forename type="first">I</forename><surname>Lagaris</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Likas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Papageorgiou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Neural Networks</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="1041" to="1049" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Neural Algorithm for Solving Differential Equations</title>
		<author>
			<persName><forename type="first">H</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computational Physics</title>
		<imprint>
			<biblScope unit="volume">91</biblScope>
			<biblScope unit="page" from="110" to="131" />
			<date type="published" when="1990">1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Reynolds averaged turbulence modelling using deep neural networks with embedded invariance</title>
		<author>
			<persName><forename type="first">J</forename><surname>Ling</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kurzawski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Templeton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Fluid Mechanics</title>
		<imprint>
			<biblScope unit="volume">807</biblScope>
			<biblScope unit="page" from="155" to="166" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Valuing American Options by Simulation: A Simple Least-Squares Approach</title>
		<author>
			<persName><forename type="first">F</forename><surname>Longstaff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Schwartz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Review of Financial Studies</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="page" from="113" to="147" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Existence results for a Cauchy-Dirichlet parabolic problem with a repulsive gradient term</title>
		<author>
			<persName><forename type="first">M</forename><surname>Magliocca</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nonlinear Analysis</title>
		<imprint>
			<biblScope unit="volume">166</biblScope>
			<biblScope unit="page" from="102" to="143" />
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Numerical solution for high order differential equations using a hybrid neural network-optimization method</title>
		<author>
			<persName><forename type="first">A</forename><surname>Malek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Beidokhti</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Applied Mathematics and Computation</title>
		<imprint>
			<biblScope unit="volume">183</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="260" to="271" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">HJB equations in infinite dimensions</title>
		<author>
			<persName><forename type="first">F</forename><surname>Masiero</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Evolution Equations</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="789" to="824" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Existence result for nonlinear parabolic equations with lower order terms</title>
		<author>
			<persName><forename type="first">R</forename><surname>Di Nardo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Feo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Guibé</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Anal. Appl.(Singap.)</title>
		<imprint>
			<biblScope unit="volume">09</biblScope>
			<biblScope unit="issue">02</biblScope>
			<biblScope unit="page" from="161" to="186" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">Optimal approximation of piecewise smooth functions using deep ReLU neural networks</title>
		<author>
			<persName><forename type="first">P</forename><surname>Petersen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Voigtlaender</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1709.05289v4</idno>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Approximation theory of the MLP model in neural networks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Pinkus</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Acta Numerica</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="143" to="195" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Existence of solutions for some &quot;noncoercive&quot; parabolic equations</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M</forename><surname>Porzio</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Discrete and Continuous Dynamical Systems</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="553" to="568" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><surname>Raissi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Perdikaris</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Karniadakis</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1711.10561</idno>
		<title level="m">Physics Informed Deep Learning (Part I): Data-driven Solutions of Nonlinear Partial Differential Equations</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<author>
			<persName><forename type="first">M</forename><surname>Raissi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Perdikaris</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Karniadakis</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1711.10566</idno>
	</analytic>
	<monogr>
		<title level="m">Data-driven Discovery of Nonlinear Partial Differential Equations</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Efficient hierarchical approximation of high-dimensional option pricing problems</title>
		<author>
			<persName><forename type="first">C</forename><surname>Reisinger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Wittum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal on Scientific Computing</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="440" to="458" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Analysis of linear difference schemes in the sparse grid combination technique</title>
		<author>
			<persName><forename type="first">C</forename><surname>Reisinger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IMA Journal of Numerical Analysis</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="544" to="581" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Monte-Carlo Valuation of American Options</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">C G</forename><surname>Rogers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematical Finance</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="271" to="286" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<monogr>
		<title level="m" type="main">Solving Partial Differential Equations using Artificial Neural Networks</title>
		<author>
			<persName><forename type="first">K</forename><surname>Rudd</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
		<respStmt>
			<orgName>Duke University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD Thesis</note>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Training very deep networks</title>
		<author>
			<persName><forename type="first">R</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Greff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Schmidhuber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="2377" to="2385" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<author>
			<persName><forename type="first">J</forename><surname>Simon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Compact sets in the space L p (0, T ; B)</title>
		<imprint>
			<date type="published" when="1987">1987</date>
			<biblScope unit="volume">146</biblScope>
			<biblScope unit="page" from="65" to="96" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Accelerating Eulerian Fluid Simulation with Convolutional Networks</title>
		<author>
			<persName><forename type="first">J</forename><surname>Tompson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Schlachter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Sprechmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Perlin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Machine Learning Research</title>
		<meeting>Machine Learning Research</meeting>
		<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="volume">70</biblScope>
			<biblScope unit="page" from="3424" to="3433" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
