<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Cloud Computing Uncovered: A Research Landscape</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Mohammad</forename><surname>Hamdaqa</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Software Technologies Applied Research (STAR) Group</orgName>
								<orgName type="institution">University of Waterloo</orgName>
								<address>
									<settlement>Waterloo</settlement>
									<region>Ontario</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Ladan</forename><surname>Tahvildari</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Software Technologies Applied Research (STAR) Group</orgName>
								<orgName type="institution">University of Waterloo</orgName>
								<address>
									<settlement>Waterloo</settlement>
									<region>Ontario</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Cloud Computing Uncovered: A Research Landscape</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">57B1A32EA37273EEBAA4429157BFC106</idno>
					<idno type="DOI">10.1016/B978-0-12-396535-6.00002-8</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T08:27+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The amalgamation of technology and service-based economy was the impetus of a new IT delivery model called "Cloud Computing." Unsurprisingly, the new model created a state of confusion; new concepts are mixed with old ones, and some old technologies are being reinvented. Today, many research areas and projects under the cloud umbrella need to be sorted and classified. Additionally, many gaps need to be categorized so that each research area can be tackled by its experts. It is important to learn from what already exists, and to be able to distinguish between what is new and what can be reused. Accordingly, this survey article presents a unified view of the Cloud Computing main concepts, characteristics, models, and architectures. Moreover, it presents a landscape of research in Cloud Computing by highlighting relevant disciplines and some diligent research projects. This helps identify the underlying research gaps and elaborates on the corresponding challenges.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>While Cloud Computing is currently a hype, neither the concept nor the technology behind it is new. It is believed that the concept of Cloud Computing is the same as what John McCarthy, in the 1960s, referred to as the ability to provide and organize computation as a "utility." The main characteristics of the Cloud Computing were also discussed by Parkhill <ref type="bibr">[1]</ref>. On the other hand, the term cloud and its graphical symbol have been used for decades in computer network literature, first to refer to the large Asynchronous Transfer Mode (ATM) networks in the 1990s, and then to describe the Internet (a large number of distributed computers).</p><p>Even though the concept is not new, today there are hundreds if not thousands of attempts to define "Cloud Computing." For example, Vaquero et al. compared 22 different definitions in an attempt to provide a unified one <ref type="bibr">[2]</ref>. Some of these definitions are general: "applications delivered as services over the Internet and the hardware and systems software in the datacenters that provide those services" <ref type="bibr">[3]</ref>. Others are more specific: "A Cloud is a type of parallel and distributed system consisting of a collection of inter-connected and virtualized computers that are dynamically provisioned and presented as one or more unified computing resources based on Service Level Agreements (SLAs) established through negotiation between the service provider and consumers." The fact that Cloud Computing is not a pure technical term, as well as the large number of interdisciplinary technologies that participate in characterizing Cloud Computing, are the reasons behind all the different definitions.</p><p>The information technology industry has sought to standardize the definition of Cloud Computing. One of the first standardized definitions is the one by Forrester Research, Inc; in which they defined Cloud Computing as "A standardized IT capability (services, software, or infrastructure) delivered via Internet technologies in a pay-per-use, self-service way" <ref type="bibr" target="#b9">[4]</ref>. Forrester's definition focuses on the service models and business model of the cloud; however, it ignores the deployment models. This is because Forrester does not believe in private clouds, as a way to cut costs. According to a July 2010 Forrester Research paper entitled "You're Not Ready for Internal Cloud" <ref type="bibr" target="#b10">[5]</ref>, building a private cloud datacenter that satisfies all the technological and legal requirements is a daunting task. The cost of which outweighs the benefits gained. The most recent and accepted standardized definition of Cloud Computing is the one by the National Institute of Standards and Technology (NIST) <ref type="bibr" target="#b11">[6]</ref>:</p><p>"Cloud computing is a model for enabling ubiquitous, convenient, ondemand network access to a shared pool of configurable computing resources (e.g., networks, servers, storage, applications, and services) that can be rapidly provisioned and released with minimal management effort or service provider interaction. This cloud model promotes availability and is composed of five essential characteristics, three service models, and four deployment models."</p><p>The NIST definition is relatively technical, and covers all of the cloud service (IaaS, PaaS, SaaS) and deployment (public, private, hybrid, community) models, as shown in Fig. <ref type="figure" target="#fig_0">1</ref>. The NIST definition is concise, accurate, and distinguishes between characteristics and enabling technologies (i.e., virtualization), and between main and derived characteristics (rapid elasticity vs. massive scalability); nevertheless, the definition ignores the business model of Cloud Computing, which is the main driver for moving to the cloud. However, it is worth mentioning that the "pay-per-use" model was not omitted from the definition out of ignorance, but because NIST tried to cover all of the cloud deployment models, including the "Private Cloud," which not necessarily involves the "pay-per-use" practice. Instead of explaining the business model, NIST identified the main technological characteristics that can result in cost reduction, and add constraints (e.g., all services must be measurable) that provide all the requirements for cloud deployment models to adopt any billing or utility model (i.e., "pay-per-use").</p><p>The rest of this chapter will be organized as follows: Section 2 explains the Cloud Computing principles and requirements. Section 3 investigates Cloud Computing reference models, architectures and frameworks. Section 4 clarifies the relationship between Cloud Computing and the Service-Oriented Architecture (SOA), grid computing, parallel computing, utility computing, autonomic computing, and virtualization. Finally, this chapter is concluded in Section 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Cloud Computing Principles and Requirements</head><p>The NIST definition of Cloud Computing reveals the main characteristics, delivery models, and service models of Cloud Computing. This section describes the foundation of Cloud Computing by listing and explaining these characteristics and models in more detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Cloud Computing Characteristics</head><p>The following are the five main characteristics of Cloud Computing that most people agree upon:</p><p>(a) On-demand self-service: Cloud services are on-demand; that is, service consumers can automatically request the service based on their needs, without human interaction with the service provider.</p><p>(b) Easy to access standardized mechanisms: NIST refers to this characteristic as broad network access; however, the term "global reach capability" is also used.</p><p>The idea is that it should be possible to access cloud services through the network using standardized interfaces and access mechanisms. Having global reach capability does not mean that these services must always be accessible from the Internet, because this depends on the deployment model used. However, it should be possible to reach the service globally, when policies allow this. (c) Resource pooling and multi-tenancy: In Cloud Computing, resources [i.e., storages, processors, memory, network bandwidth, and virtual machines (VMs)] are shared between multiple tenants, and assigned exclusively at run time to one consumer at a time. Assigning resources is done dynamically based on the consumers' needs. Sharing resources can help increase utilization, and hence significantly reduce the operation cost. Scheduling algorithms can be used to dynamically assign resources to different tenants based on the type of workload, fairness, locality, and many other factors <ref type="bibr" target="#b12">[7,</ref><ref type="bibr" target="#b13">8]</ref>. (d) Rapid elasticity: Elasticity is the ability to scale in and out by provisioning resources and releasing them, respectively. Cloud Computing should provide mechanisms to allow quick and automatic elasticity. The large pool of resources in cloud datacenters gives the illusion of infinite resources to the consumers, and elasticity provides the flexibility to provision these recourses on-demand. (e) Measured service: Providing cloud metrology or mechanisms to measure service usage as well as to monitor the health of services is crucial in Cloud Computing. Measuring services enables optimizing resources and provides transparency for both consumers and providers, allowing them to better utilize the service. Measured services can help in building closed-loop cloud systems that are fully automated. (f) Auditability and certifiability: Regulatory compliance requires enforcing rules and regulations. Services should provide logs and trails that allow the traceability of policies, so as to ensure that they are correctly enforced.</p><p>The list above (except point f) is based on the NIST definition. The list describes Cloud Computing based on what is currently available in the market, and represents the main characteristics of Cloud Computing in general. Many other characteristics can be added to this list in the future. For example, we added "auditability and certifiability" to the list above based on the current regulatory compliance requirements. On the other hand, comprehensive lists of characteristics can be made for each layer and each type of service provided in the cloud environment. For example, at the application level, a possible cloud service characteristic is that a service must be portable, pre-configured, or adaptable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Cloud Computing Deployment Models</head><p>A Cloud Computing deployment model is a model that describes the environment where cloud applications and services can be installed, in order to be available to consumers. By the deployment environment, we mean the physical location, the infrastructure facilities, the platform constraints, as well as anything that can affect the access mechanisms of the deployed applications. There are four main Cloud Computing deployment models: public, private, hybrid, and community cloud: The infrastructure and platform services are provided to the public based on the service level agreement between the provider and the consumer. This type of infrastructure resource sharing between multiple organizations or consumers, is referred to as the multi-tenancy model. Public cloud is the least expensive choice for application hosting. However, the lack of a trust model between the cloud providers and consumers is the main obstacle for this model. (b) Private cloud: A private cloud or internal cloud is a datacenter owned by a cloud application provider, in which the infrastructure and platform are operated entirely by the application provider on premises. This eliminates the need for a trust model and provides more flexibility. Organizations can implement their own policies with regards to privacy, security, and access mechanisms. However, this option is expensive in terms of resources, and the manpower needed to manage the resources. (c) Hybrid cloud: A hybrid cloud is a combination of a public and private cloud. A hybrid cloud is less expensive than a private cloud; it also eliminates the need for a trust model. However, having both public and private clouds working together requires interoperability and portability of both applications and data to allow communication between the models. (d) Community (cooperative) cloud: A community cloud is similar to extranets, but with virtualization and on-demand capabilities. In a community cloud, a number of organizations, which usually share some common goals or belong to a specific community, build a shared cloud datacenter that can be used by all of the members. The goals are to alleviate deficiencies in the individual IT infrastructures, reduce the cost of administration, and lower the cost per unit <ref type="bibr" target="#b14">[9]</ref>. The community can be created between a professional community (i.e., organizations with business relationship), a geographic community, or some other well-defined community group. Community cloud is based on the trust relation between all the members, which is driven by their mutual benefits <ref type="bibr" target="#b15">[10,</ref><ref type="bibr" target="#b16">11]</ref>. As a result, this model is more trusted than the public cloud, and less expensive on participating members than having a private cloud. This model also provides more controllability over the shared infrastructure resources. However, a community cloud still needs to enforce strong security and privacy policies. Furthermore, regulatory compliance is a main obstacle facing community cloud adoption.</p><p>Table <ref type="table" target="#tab_0">I</ref> shows a comparison between the different cloud deployment models, based on the initial cost of building the cloud datacenter or the capital expenses (CapEx) on the consumer, the operating expenses (OpEx) and maintenance cost of the datacenter, the size of the datacenter, controllability and flexibility, the level of trust, the location of the infrastructure, and who owns the infrastructure.</p><p>As shown in Table <ref type="table" target="#tab_0">I</ref>, there is no initial cost associated with adopting public cloud by consumers <ref type="bibr" target="#b17">[12]</ref>. Consumers need not worry about creating the cloud infrastructure. Instead, they can request the services and resources on-demand and pay just for what they use. Conversely, a private cloud requires a big initial capital investment in order to build the private datacenter <ref type="bibr" target="#b17">[12]</ref>. Unlike the private model, the hybrid model builds a relatively small private datacenter for sensitive and important tasks and information, and uses the public cloud for other jobs. For this reason, the cost of adopting the hybrid cloud model is between that of public and private clouds. Finally, the community cloud model shares the cost of building the required datacenter with the cooperatives. For this reason, the initial cost can vary; the larger the community the smaller the share and the lower the cost.</p><p>Table <ref type="table" target="#tab_0">I</ref> also shows that the operating cost (i.e., power consumption, man power expenses, rent, maintenance, upgrades, etc.) of public cloud is lower than the other models. This is due to the economies of scale, as well as the high level of automation and optimization in public cloud. Production costs drop significantly as the number of units produced increase<ref type="foot" target="#foot_0">1</ref>  <ref type="bibr" target="#b18">[13]</ref>. This allows public cloud providers to enjoy favorable prices for IT equipment and needed resources, since they purchase them in bulk. According to Jon Moore's blog, a private datacenter should have on average 10,000 servers to get an economically feasible marginal cost that is comparable to what current public cloud providers charge <ref type="bibr" target="#b19">[14]</ref>. On the other hand, public providers tend to invest more in automation and optimization, which results in fewer administrative staff. For example, while the ratio between IT staff to servers is (1:100) <ref type="bibr" target="#b20">[15]</ref> in traditional datacenters, this ratio goes to (1:1000) <ref type="bibr" target="#b20">[15]</ref> and even (1:5000) in public cloud datacenters.</p><p>It is clear from Table <ref type="table" target="#tab_0">I</ref> that consumers can have full control over a private cloud infrastructure, whereas in a public cloud, controllability is limited to tuning some </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Owner of the infrastructure</head><p>The laaS vendor</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>The customer</head><p>The laaS vendor owns the public part and the consumer owns the in-house part Shared between the cooperatives configuration parameters. On the other hand, while community cloud consumers can have access and control over the infrastructure, this controllability is bounded by the community policies and agreements. The level of controllability and flexibility can also affect the level of trust. This explains why consumers trust the private cloud model more than the other models. However, it is important to note that the level of trust is not related to the actual security level. Public cloud providers tend to implement best practices and try to ensure security at every level of the security stack. However, the Cloud Computing paradigm introduces new security threats that did not exist in traditional datacenters, such as threats related to sharing resources through virtualization <ref type="bibr" target="#b21">[16]</ref>. Most of these threats are equally applicable to both public and private models. Some of the cloud security myths assume that all clouds are created equally <ref type="bibr" target="#b22">[17]</ref>, while others assume that public and private cloud providers have the same experience and capabilities to implement security measures <ref type="bibr" target="#b23">[18]</ref> for data protection, identity management, compliance, access control rules, and other security capabilities. If these assumptions are true, then public cloud is the least secure, while private cloud is the most secure.</p><p>Cloud deployment models differ based on the infrastructure's owner, location, or operators and their policies. One model does not fit all business types. The selection of a cloud deployment model depends on the consumers' needs and budget, and on whether they favor price reduction and control delegation over flexibility, control, and customization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Cloud Computing Service Models (Cloud Service</head><p>Hierarchical View)</p><p>This subsection presents and compares the Cloud Computing service models. Cloud service models are sometimes referred to as the cloud service hierarchical view <ref type="bibr" target="#b24">[19]</ref>, cloud service offerings, cloud service delivery models <ref type="bibr" target="#b25">[20]</ref>, or the cloud service layered architecture, in an analogy to the network layered architecture. Cloud service models try to classify "anything" providers offer as a service (XaaS), where X means an arbitrary service (e.g., infrastructure, software, storage). A cloud service model represents a layered high-level abstraction of the main classes of services provided by the Cloud Computing model, and how these layers are connected to each other. This separation between layers allows each cloud provider to focus on the core services they provide, while at the same time being able to reuse the services from the lower layers by following the set of standard communication mechanisms and protocols between the different layers. Layers differ based on the management scope covered by the provider <ref type="bibr" target="#b26">[21]</ref>, which means that a user in the upper layers cannot bypass the interfaces provided by the layer beneath, so as to directly access the resources. This separation does not only help in service integration but also allows having a fully distributed, scalable, and fault tolerant architecture. By having different layers with different abstraction levels, cloud providers can have better manageability over the resources, as well as higher controllability and security.</p><p>As in the network layered architectures (i.e., OSI, TCP/IP), there are different cloud service models. These models vary based on the time they were proposed, relative to the maturity of the Cloud Computing paradigm at that time; and on the level of detail in these models, as represented in the number of model layers. However, the differences between service models do not contradict each other, instead these models are complementary <ref type="bibr" target="#b27">[22]</ref>. This subsection will briefly discuss the main two service models: The NIST SPI model <ref type="bibr" target="#b11">[6]</ref> (aka, the three service-layers model), and the IBM service model <ref type="bibr" target="#b26">[21]</ref> (aka, the four service-layers model). Figure <ref type="figure" target="#fig_2">2</ref> shows a comparison between these two models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.1">The NIST SPI Model</head><p>The SPI model classifies the services provided by the cloud providers into three main categories (layers): Software services, Platform services, and Infrastructure services. The SPI model is named after these categories, which are described below:</p><p>• Software as a Service (SaaS): A service is classified as a software service if it allows the consumer (end user) to access and use a provider software application that is owned (hosted), deployed, and managed by the provider. Consumers normally have limited control over the application, and are restricted in how they can use and interact with the application. The application is usually accessed via a thin client (i.e., Web browser), through which consumers can input data and get output <ref type="bibr" target="#b11">[6]</ref>. Because most SaaS services are specific applications rather than being generic software services, SaaS is sometimes referred to as Application-asa-Service. Examples of SaaS are content services such as video-on-demand (i.e., Netflix), email services (i.e., Gmail), and business applications such as customer relationship management applications (i.e., Salesforce). • Platform as a Service: A service is classified as a platform service if it allows the service consumer (usually a SaaS provider, cloud developer, or administrator) to define, develop, configure, deploy, manage, and monitor cloud applications. While PaaS allows consumers to deploy and control applications and their hosting environment configurations, consumers do not have direct control over the underlying cloud infrastructure <ref type="bibr" target="#b11">[6]</ref>. PaaS services abstract the communications with the lower-level infrastructure by providing easy to access and easy to use interfaces. Operating systems and application frameworks are part of the PaaS layer. • Infrastructure-as-a-Service: A service is classified as an infrastructure service if it allows the service consumer (usually PaaS providers) to lease infrastructure capabilities based on demand. The infrastructure capabilities include processing, storage, network, or any other basic computing resources that can be used to deploy and run platforms (i.e., operating systems, management tools, development tools, and monitoring tools) and the applications developed on top of the platforms. Again, consumers are not given direct access to resources but have the ability to select and configure resources as required based on their needs <ref type="bibr" target="#b11">[6]</ref>. IaaS is sometimes referred to as the virtualization layer, since it utilizes virtualization technologies to partition physical resources, so as to provide the consumers with a pool of storage and computing resources.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.2">IBM Service Model</head><p>According to the IBM Cloud Computing Reference Architecture <ref type="bibr" target="#b26">[21]</ref>, a cloud service model consists of four service layers; from top to down, these are the Business-Process, Software, Platform, and Infrastructure-as-a-Service layer.</p><p>The last three layers are exactly the same as in the SPI model. In fact, IBM used the same definition of SaaS, PaaS, and IaaS as defined according to the NIST SPI model. The only difference between the IBM service model and the NIST SPI is in the Business-Process-as-a-Service (BPaaS) layer. Since this is the only difference, we will only explain BPaaS and why it was introduced:</p><p>• Business-Process-as-a-Service: A service is classified as a business process service if it allows the consumer (end user, business process manager, or designer) to design, manage, and integrate a set of transactional and collaborative activities based on the SaaS provided in the layer beneath, so as to accomplish a specific business organizational goal. Accordingly, IBM classifies any business process service-whether it focuses on technology and reuse (horizontal), or it is domain specific (vertical)-as BPaaS if and only if the service (1) represents a business process that is delivered through the Cloud Computing model based on its main characteristics, as defined in the NIST definition (i.e., multi-tenant service, self-service, elastically scaled, metered, and priced); (2) accessed through a Web-centric interface; and (3) utilizes Web-oriented cloud architectures. Similar to IaaS and PaaS services, a BPaaS provider provides the tools to access and utilize the resources in the BPaaS layer. Consumers do not need to access services in the underlying layers. "ABPaaS provider is responsible for the related business function(s)" <ref type="bibr" target="#b26">[21]</ref>. Some examples of BPaaS include a process for employee benefit management; and IT-centric processes, such as a process for software testing where the whole process, including the testing staff, is provided as a cloud service.</p><p>As mentioned earlier in this subsection, currently there are many cloud service models in the market. This is because different cloud providers use different service models to reflect the types of services they provide. However, the differences between cloud service models are minute. In addition, these models complement each other. The most dominant service models currently in use are the ones discussed in this subsection.</p><p>As a final note, the reader should not mix cloud service models with cloud reference models and frameworks. While the former are concerned with classifying services at higher levels of abstraction into layers or service classes, the latter are more detailed frameworks that relate services to the different cloud models. The next subsection discusses cloud reference frameworks, models, and architectures in more detail. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Cloud Computing Reference Models, Architectures, and Frameworks</head><p>Standardization is currently a vibrant concern in Cloud Computing. Creating reference models, architectures, and frameworks for Cloud Computing was of top priority in the Cloud Computing agenda of 2009-2011. For this reason, this section will investigate the Cloud Computing reference models, architectures, and frameworks by applying the six honest serving men, <ref type="foot" target="#foot_1">2</ref> or 5W + H questions to get a clear understanding of what are reference models (RMs), reference architectures (RAs), and reference frameworks (RFs), who needs them and why, when these frameworks and models will be available, where these reference models are being developed, and finally, how these frameworks differ from each other? Table <ref type="table" target="#tab_1">II</ref> summarizes these questions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">(What) The Definition of Cloud Computing</head><p>Reference Model, Architecture, and Framework</p><p>In software engineering, a reference model (RM) is an abstract, conceptual, technology independent framework, which represents a set of domain concepts and the relationships between them. It is usually used by domain experts who are working independently toward a standard <ref type="bibr" target="#b28">[23]</ref>. When reference model concepts are arranged in a specific order (pattern) to provide a specific solution for recurrent problem, the generated architecture is called a reference architecture (RA) <ref type="bibr" target="#b29">[24]</ref>. Together, the set of RMs and RAs create a reference framework (RF). While it is important to use the correct terminology when describing models, architectures, and frameworks, formality is absent from several works that have been recently published in the domain of Cloud Computing <ref type="bibr" target="#b30">[25]</ref>. For example, both IBM and NIST Cloud Computing Reference Architectures are more reference frameworks than reference architectures.</p><p>Cloud Computing reference models (CCRM) abstract the Cloud Computing concepts, mainly in terms of services, service models, capabilities, and roles; and define relationships between these concepts. A CCRM can be generic or specific to a particular sub-domain (e.g., development, security) within the Cloud Computing domain. Creating a cloud reference model involves two main tasks: first, identifying service types (i.e., security, management, monitoring) and the layer they belong to; and second, determining the different types of relationships with the identified services such as, the relationships between the services themselves, the relationships between the identified services and the cloud stakeholders (actors), and the relationships between the services and other cloud models (i.e., service models, deployment models, etc.).</p><p>The service models discussed in the previous subsection make up only one dimension within a Cloud Computing Reference Framework (CC RF). A CC RF is more sophisticated, because it does not only focus on service layers and their relationships, but also on services within each layer and their interaction relationships with service consumers and providers. For example, the PaaS layer consists of several types of services (e.g., management and monitoring). These services can be categorized into subgroups based on different factors, such as common features or similar policies that can be applied to them (e.g., who is allowed to access a service, and when and how the access can be made). Services belonging to the same policy are usually grouped in the same category.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">(Who) Cloud Computing Reference Framework Users</head><p>A Cloud Computing RM/RF/RA is vital for all cloud stakeholders. In fact, many Cloud Computing reference frameworks such as the NIST CCRA and the IBM CCRA devoted an integral part of the Framework to explain the roles of each stakeholder within the Cloud Computing domain. A list of potential beneficiaries from reference frameworks and models includes the following:</p><p>• Standardization bodies: Organizations and industry consortiums that create the cloud standards. • Cloud creator: Organizations or individuals who build cloud services; a cloud creator is not necessarily a cloud provider <ref type="bibr" target="#b26">[21]</ref>. • Cloud provider: An individual or organization that makes one or more cloud services available to consumers based on a Service Level Agreement (SLA). In several scenarios, a cloud provider can also be a consumer of services provided by another provider, or creator for their own services. • Cloud consumer: An individual or organization that acquires, uses, and manages a cloud service that is provided by a cloud service provider directly or through a broker <ref type="bibr" target="#b31">[26]</ref>. A cloud consumer can be a system administrator, a developer, or an end user (i.e., business process manager) depending on the service level (i.e., IaaS, PaaS, SaaS). Some cloud consumers are providers. • Cloud carriers: A party that provides connectivity between cloud providers and consumers. • Cloud brokers: An intermediary that negotiates the relationship between cloud providers and consumers <ref type="bibr" target="#b31">[26]</ref>. • Cloud regulators: Legislation bodies and enforcement agencies that are responsible for enacting laws and creating regulations for Cloud Computing. • Cloud auditors: A third party (usually governmental) that conducts an independent assessment of the cloud implementation to make sure that it is in adherence to regulations and standards <ref type="bibr" target="#b32">[27]</ref>. • Cloud educators: Institutions and individuals who provide education materials and teach others about Cloud Computing. • Cloud learners: Students, developers, or anyone who is interested in learning about Cloud Computing.</p><p>Each of the aforementioned beneficiaries makes use of the Cloud Computing reference framework in a different way. The next subsection explains why cloud stakeholders needs a cloud reference framework.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">(Why) The Need for Cloud Computing Reference Frameworks</head><p>There are several reasons for creating cloud reference models and frameworks. As explained earlier, reference models are used by domain experts and standardization bodies to exchange domain knowledge in implementing a standard.</p><p>Reference frameworks are helpful for organizations while implementing or adopting a new technology. Cloud architecture reference models provide consistent and coherent architectural representations, and fundamental principles that can be used in the design and implementation of different projects. By having a cloud reference framework, cloud providers or their creators can apply best practises and guidelines to build their own clouds. Reference models can help providers focus on their distinctive advantages while making sure that they implemented all of the essential components. Furthermore, cloud providers can address interoperability issues with other providers at the early stages of the implementation, by providing support for the required interfaces for inter-cloud communications.</p><p>On the other hand, cloud consumers can use the cloud reference frameworks as part of their strategic planning and risk analysis. Reference frameworks can help consumers to understand the different providers' offers, in order to select the one that satisfies their needs. Similarly, consumers can measure risks such as the consequences of the lack of portability. Consumers should have access to reference frameworks and Service Level Agreements (SLAs), in order to realize their responsibilities and obligations, so as to understand what they should expect from a cloud provider and what they should implement themselves in order to fully harness Cloud Computing advantages like availability and scalability. This can help the consumers optimize resource utilization and reduce service operation costs.</p><p>Cloud reference models can also help developers effectively exploit services. For example, cloud specific reference models such as the one proposed in the paper "A Reference Model for Developing Cloud Applications" <ref type="bibr" target="#b33">[28]</ref> can help cloud application developers understand cloud application requirements, and can guide them toward better architectural decisions that are independent of any cloud development environment. Such a reference model can boost the developers' learning curve and increase their productivity by providing them with the main principles of how to effectively reuse existing components and services in designs and implementations.</p><p>Cloud reference frameworks and models are used to educate learners, help educators, and improve communication between all cloud stakeholders. Reference frameworks clearly define the responsibilities and roles of all Cloud Computing actors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">(When and Where) The Status of Cloud</head><p>Architecture Reference Models</p><p>Despite their roles, all cloud stakeholders (i.e., providers and consumers, corporate, and individuals) are interested in cloud reference models. Nevertheless, currently there is no complete or standardized cloud architecture reference model available. Cloud reference models are in the development stage, and are expected to stay in this stage as long as the Cloud Computing model is evolving. However, the Cloud Computing industry and academia are currently in the process of investigating standard reference models and frameworks for Cloud Computing.</p><p>In 2010, Forrester Research was able to count more than 75 different parties working on cloud standards <ref type="bibr" target="#b34">[29]</ref>. Today, the number is expected to be much more than that. Different groups, standardization bodies, and industrial consortiums (e.g., Distributed Management Task Force (DMTF), Open Grid Forum (OGF), The Institute of Electrical and Electronics Engineers (IEEE), Open Group, Cloud Security Alliance (CSA), Open Cloud Consortium (OCC), OpenStack, and Object Management Group (OMG)), in addition to individual cloud providers (e.g., IBM, Microsoft, HP, Cisco, and CA), international agencies (e.g., ITU), federal agencies (e.g., GSA) and academic research groups <ref type="bibr" target="#b35">[30,</ref><ref type="bibr" target="#b36">31,</ref><ref type="bibr" target="#b24">19,</ref><ref type="bibr" target="#b33">28,</ref><ref type="bibr" target="#b37">32]</ref>, are all working in parallel to define standardized cloud reference models, frameworks, and architectures. <ref type="foot" target="#foot_2">3</ref> The next subsection will highlight some of the differences between these frameworks, models, and architectures.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">(How) A high-Level Comparison Between Cloud Computing Reference Frameworks</head><p>As explained in the previous subsection, different Cloud Computing reference frameworks, models, and architectures are either developed or are currently being developed. The question is how these frameworks differ from each other, and how to select the framework or model that best fits your needs.</p><p>Figure <ref type="figure">3</ref> is a classification of Cloud Computing reference frameworks based on the current frameworks in the market. The most obvious distinction between current reference models and frameworks is that some of them are generic while others focus on specific areas. The NIST has recently compared six generic Cloud Computing Reference Architectures and five specific ones <ref type="bibr" target="#b38">[33]</ref>.</p><p>The analysis of current reference frameworks reveals that these frameworks can be decomposed first, into reference models, which consists of architectural elements and their relationships; and second, into architectural styles and principles, which represents a set of rules and guidelines that ensure enforcing best practices in methodical ways.</p><p>Most current frameworks focus on reference models. Almost all of these frameworks draw relations between services and either all or some of the following architectural elements:</p><p>• Roles: The main actors that communicate with the cloud service (i.e., Cloud Service Consumer, Provider, or Creator). • Activities: Those actions and capabilities that connect a role to a service (i.e., integrate, consume, manage, provide). • Layers: A classification of similar services based on finding commonalities.</p><p>For example, based on the technology stack a service can be classified into infrastructure, middleware, application, and business process service.</p><p>The previous discussion leads us to another area of distinction between current cloud reference models and frameworks. Cloud Computing reference models and architectures can be either Role-Based or Layer-Based <ref type="bibr" target="#b30">[25]</ref>. According to Wilkes <ref type="bibr" target="#b30">[25]</ref>, Role-Based CCRM maps services and activities to roles. Examples of rolebased frameworks include: the DMTF Cloud Service reference architecture <ref type="bibr" target="#b39">[34]</ref>, the IBM Cloud Computing CCRA <ref type="bibr" target="#b26">[21]</ref> and the NIST CCRA <ref type="bibr" target="#b31">[26]</ref>. Almost all rolebased reference frameworks recognize the Cloud Service Provider and Cloud Service Consumer roles. Other roles depend on the framework's level of detail.</p><p>On the other hand, Layer-Based CCRM maps services and activities into layers. For example Cisco Cloud Reference Architecture Framework <ref type="bibr" target="#b40">[35]</ref> consists of the following five layers, the datacenter technology architecture layer, security layer, service orchestration layer, service delivery and management layer, and finally, the cloud services consumers layer. Similarly, the Cloud Security Alliance Cloud Reference Model (CSA-CRM) <ref type="bibr" target="#b32">[27]</ref> shows the cloud stack as layers, and the IEFT Cloud Reference Framework (IEFT-CRF) <ref type="bibr" target="#b41">[36]</ref> shows four horizontal layers and one stack vertical layer, and explains the capabilities within each layer in depth.</p><p>IBM released their second version of their CCRA on February 2011. Similarly, NIST proposed the first draft of their CCRA on March 2011 <ref type="bibr" target="#b38">[33]</ref>. Figures <ref type="figure" target="#fig_3">4</ref> and<ref type="figure" target="#fig_4">5</ref> show the IBM Cloud Computing Reference Architecture and the NIST Cloud Computing Reference Architecture, respectively.</p><p>As shown in Fig. <ref type="figure" target="#fig_3">4</ref>, the IBM CCRA consists of three main roles: the cloud service consumer, provider, and creator. Each of these roles consists of a different set of architectural elements, each of which consists of subcomponents and services. The most noticeable element in this framework is the Cloud Computing Management Platform (CCMP) <ref type="bibr" target="#b42">[37]</ref>. The CCMP provides a set of business support services (BSS) and operational support services (OSS) management services. CCMP services facilitate the communication between the different roles and the provider's underlying services (i.e., Infrastructure, Platform, Software and Business Process as a Service), through well-defined interfaces (APIs). For example, the OSS are managed operational services (i.e., provisioning, monitoring, and automation management services) that can be used by cloud service consumers to manage the cloud environment, by the cloud service provider to manage the infrastructure, and by the cloud service creators to create new services. Similarly, BSS are managed business services (i.e., billing, pricing, metering services), which are required by cloud service creators to implement a cloud service. In addition to these roles and services, the IBM CCRA defines a set of four architectural principles and guidelines: namely, Efficiency, Lightweightness, Economies-of-scale, and Generality. The goal of these principles is to provide a set of best practices that can guide any cloud implementation. Likewise, the NIST CCRA consists of five roles: the cloud service consumer, provider, auditor, broker, and carrier. Each role is associated with a set of activities; these activities connect the role to a set of components or services and their subcomponents. A closer look at NIST CCRA <ref type="bibr" target="#b31">[26]</ref> shows that the NIST reference model has been inspired by the concepts extracted from their 2010/2011 survey of cloud architecture reference models <ref type="bibr" target="#b38">[33]</ref>. For example, the Cloud Provider service orchestration was inspired by the Cisco Cloud Reference Architecture <ref type="bibr" target="#b40">[35]</ref>, which in turn, was inspired by the service-oriented architecture. Likewise, NIST cloud auditor role was inspired by the Open Security Architecture (OSA) model <ref type="bibr" target="#b43">[38]</ref>, which mainly focuses on cloud security.</p><p>There are lots of similarities between NIST and IBM CCRAs. While some architectural components are exactly the same, others have different wordings or are implicitly contained within other architectural components. Both NIST and IBM CCRAs are comprehensive frameworks. However, this does not mean that they are complete; in fact, there is no complete cloud reference framework to date. One of the strengths of the IBM CCRA is that it goes one step further and identifies some of the Cloud Computing architectural principles and guidelines as well as the Cloud Computing Management Platform (CCMP). Other reference models focus only on the relations among cloud services as well as the roles of the different cloud stakeholders. While identifying the roles, services, layers, and their relationships is important, a reference framework cannot be completed without the set of architectural styles that identify the different scenarios and best practices in a methodical way. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Cloud Computing's Relationship with Other Computing Paradigms</head><p>Cloud Computing is where the evolution lines of the service-oriented, grid computing, parallel computing, utility computing, autonomic computing, and virtualization paradigms meet. Cloud Computing is where the vision of all the previous technologies put into practice to meet the demands of high utilization and rapid change. The relationships between Cloud Computing and the aforementioned paradigms are strong to the extent that it is difficult in many cases to distinguish whether the cloud was really the big new thing, or if it is the same as any of these technologies. These relationships became more and more complex as the technologies reached maturity, and as the year of the cloud booming approached in 2008. The goal of this section is to explain how Cloud Computing has emerged from these technologies, and to clarify where these technologies belong within the context of Cloud Computing. This Section explains in detail the relationship between Cloud Computing and the service-oriented architecture, grid computing, parallel computing, utility computing, autonomic computing, and virtualization technologies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Service-Oriented Architecture</head><p>The difference between Service-Oriented Architecture (SOA) and Cloud Computing is one of several repeatedly asked questions. This subsection tries to clear this ambiguity by explicitly explaining the relationship between the two paradigms.</p><p>The open group defined SOA as an architectural style that supports service orientation, where "Service orientation is a way of thinking in terms of services, and service-based development and the outcome of services" <ref type="bibr" target="#b44">[39]</ref>. On the other hand, the NIST definition of Cloud Computing is based on the three service models that describe the classes of services provided, the four deployment models that provide different scenarios of service deployment, and the five distinctive characteristics that determine the basic requirements that a service must satisfy in order to be called a cloud service.</p><p>According to the previous definitions, Cloud Computing supports service orientation <ref type="bibr" target="#b26">[21]</ref>. Service orientation provides foundations for Cloud Computing that enable global access, and ease of integrating different services and resources at run time, independent of the programming language used to implement the service. As in SOA, cloud services leverage network-based software through standards-based interfaces <ref type="bibr" target="#b45">[40]</ref>. Today, it has become a norm to implement cloud services based on the Representational State Transfer (REST)-style architectures <ref type="bibr" target="#b46">[41]</ref>. Cloud Computing services must also support scalability and guarantee Quality of Service (QoS). As we explained earlier in <ref type="bibr" target="#b33">[28]</ref>, SOA is an umbrella that describes any kind of service. A Cloud Computing service is a SOA service <ref type="bibr" target="#b47">[42]</ref>; however, a SOA service is not necessarily a Cloud Computing service. A Cloud Computing service must satisfy all the Cloud Computing characteristics as defined in the NIST definition, which are optional in the case of generic SOA services. Cloud services follow specific standards, run under a specific environment, and are restricted by the cloud domain's technical and business boundaries. While SOA solutions need to implement all cloud characteristics from scratch if needed, Cloud Computing environments provide all of the tools required for creating and automatically managing and deploying services that adhere by default to the Cloud Computing characteristics. The service developer should not worry about service scalability, guarantee of service, on-demand service provisioning, or cost optimization.</p><p>SOA is mainly a business model that addresses business process management. However, cloud architecture addresses many technical details that are environment specific, making it more technical model. Cloud Computing is one realization of SOA. The relationship between Cloud Computing and SOA is similar to the relationship between Web-Services and SOA: Both are technologies that implement service orientation; however, Cloud Computing is more complicated than Web-Services. This is because a Web-Service is only one kind of cloud service that is usually provided by the software as a service layer.</p><p>Recognizing the relationship between SOA and Cloud Computing is essential for reusing the best practices and experience gained in the domain of SOAin the past years <ref type="bibr" target="#b26">[21]</ref>. For example, instead of building a cloud ontology or modeling language from scratch, current SOA modeling languages (e.g., SOAML <ref type="bibr" target="#b48">[43]</ref>) and ontologies can be used <ref type="bibr" target="#b49">[44]</ref>. IBM, for instance, used the Open Group SOA Reference Architecture <ref type="bibr" target="#b50">[45]</ref> in their definition of the IBM Cloud Computing ReferenceArchitecture (CCRA). Such reuse can assist in concentrating on cloud concerns instead of addressing all crosscutting concerns with SOA. Similarly, Cloud Computing can reuse the latest SOA technologies related to Web-Services and Web 2.0 (e.g., rich Internet applications, mashups, AJAX, RSS), so as to define, discover, and implement cloud services.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Grid Computing</head><p>Cloud Computing evolved from Grid Computing, so as to address the problematic issues and fulfill the desired requirements that were impossible to fulfill with Grid Computing, due to its use of real physical hardware, operating systems, and applications distributed across the globe <ref type="bibr" target="#b51">[46]</ref>.</p><p>Cloud and Grid Computing are types of distributed computing, in which workloads can be distributed through a load balancer and assigned, in parallel if needed, to unused resources at run time. While workloads usually need to be known ahead of time in the case of Grid Computing, Cloud Computing introduced the concept of on-demand, in which resources can dynamically scale-out and -in based on the current workload. The on-demand feature provided organizations with the required agility to handle sudden and irregular increases or decreases in business demand. Thanks to the virtualization technology, the Grid Computing dream of a fixable pool of virtualized resources provided as a service on demand became a reality <ref type="bibr" target="#b52">[47]</ref>. It is the power of virtualization and service orientation principles that made the big shift from the application oriented Grid Computing technology to the service oriented Cloud Computing technology possible. Note that the initiatives that used virtualization with Grid Computing preceded the concept of "on-demand" Cloud Computing. Examples of such initiatives includes the "Virtual Workspaces" in Grid <ref type="bibr" target="#b53">[48]</ref> and Clusters <ref type="bibr" target="#b54">[49]</ref>. The goal of the previous initiatives was to use virtualization to help achieve reliability and Quality of Service (QoS).</p><p>Reliability and QoS are the two main issues that Cloud Computing came to address in Grid Computing. Grid Computing resources are tightly coupled; a failure in one node may result in the failure of a series of nodes that depends on it. In Cloud Computing, resources are loosely coupled, which allows dynamic failover, or restarting nodes and applying different configurations for different applications at run time. This can help in creating portable as well as available applications. The cloud infrastructure considered availability from the first day; hence, it provided the basic requirements to design for failure, such as providing different failover levels (i.e., regions, zones, and nodes), monitoring capabilities, and measured resources.</p><p>On the other hand, it is difficult to guarantee quality of service (QoS) in Grid Computing <ref type="bibr" target="#b55">[50]</ref>. This is because traditional Grid Computing does not provide centralized management for job scheduling and performance measurement. An individual user or virtual organization (VO) activity can impact the performance of other users using the same platform <ref type="bibr" target="#b52">[47]</ref>; this will result in variable throughput and response time. Conversely, Cloud Computing guarantees the bandwidth and response time of services through centralized management and measured services; this makes Cloud Computing more suitable for mission critical systems.</p><p>In their paper, Buyya et al. <ref type="bibr" target="#b56">[51]</ref> gave a comprehensive comparison of Cloud and Grid Computing based on almost 20 characteristics. The summary of this comparison is as follows: Cloud Computing is more fixable in terms of scalability and cheaper than Grid Computing, because it uses commodity computers instead of high-end servers. Unlike Grid, Cloud utilizes utility computing and hence supports pricing strategies based on supply and demand. Cloud uses virtual resources such as Virtual Machines (VMs) and hypervisors, in addition to multiple lightweight operating systems, compared to the real resources and standard operating systems used by Grid. Cloud Computing resources and services are more secure and easier to access and manage. Cloud applications use Web-services standards (i.e., SOA and REST), while Grid uses the Open Grid forum standards for communication; this makes cloud services more interoperable with other Web applications and services. Moreover, cloud applications are easier to integrate; accordingly, they have a higher potential for building third-party value added solutions. Although both Cloud and Grid support Service Level Agreement (SLA) negotiation, Cloud Computing can guarantee QoS and support failure recovery better than Grid. Finally, Cloud Computing supports a wider variety of applications from content delivery to scientific applications, whereas Grid is more suitable for high-throughput scientific applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Parallel and High-Performance Computing</head><p>Several cloud definitions described Cloud Computing as a type of parallel computing. For example, Buyya et al. <ref type="bibr" target="#b56">[51]</ref> have given the following definition "Cloud is a parallel and distributed computing system consisting of a collection of interconnected and virtualized computers." The previous section discusses the relation between Cloud and Grid computing, and indicates that both are distributed systems. This subsection clarifies the relationship between parallel and Cloud Computing.</p><p>Parallel computing is a form of computation that exploits multiple computing resources at the same time to solve a large computational problem by dividing it into smaller computational problems that can be solved concurrently <ref type="bibr" target="#b57">[52]</ref>.</p><p>Parallelism can be accomplished at different granularities and distribution levels. For example, parallelism can be at the bit level, at the instruction level, at the data level, or at the task level. On the other hand, the distribution of computational units on resources can be within a single machine, as is the case with multi-core and multi-processor, machines clusters, or supercomputers; or between multiple machines distributed around the globe, as in grids. In Cloud Computing, parallelism is exploited at the task and data levels, by distributed virtual machines that are not bound to a physical place.</p><p>In conventional parallel computing approaches, a parallel application is divided into tasks. These tasks are then distributed to be executed on compute clusters, supercomputers, or Grid infrastructures <ref type="bibr" target="#b58">[53]</ref>. Raicu et al. <ref type="bibr" target="#b59">[54]</ref> classified parallel applications based on the number of tasks distributed and the input size:</p><p>• Heroic MPI Tasks are characterized by a low number of tasks and a small input size (e.g., tightly coupled MPI applications). • Data Analysis Mining are characterized by a low number of tasks but a large input data size (e.g., Map-Reduce <ref type="bibr" target="#b60">[55]</ref>).</p><p>• Many Loosely Coupled Tasks are characterized by a large number of tasks with modest data size (e.g., Swift <ref type="bibr" target="#b61">[56]</ref> and Falkon <ref type="bibr" target="#b62">[57]</ref>). • Big Data and Many Tasks are characterized by a large number tasks and a large input data size (e.g., Dryad <ref type="bibr" target="#b63">[58]</ref> and Sawzall <ref type="bibr" target="#b64">[59]</ref>).</p><p>To ensure the performance of parallel applications, tasks and their input data should be located in the same place (i.e., allocated to the same resource). This is usually referred to as the data locality principle <ref type="bibr" target="#b13">[8]</ref>. In traditional parallel computing approaches, a task and its input data are allocated to the available resource (the same or a different resource, depending on the approach used) every time the task is executed <ref type="bibr" target="#b65">[60]</ref>. This requirement may add overhead to the system, especially in virtualized and widely distributed environments such as Grid Computing. On the other hand, the lack of mechanisms for detecting node failure in traditional widely distributed systems, and in the technologies used for task distribution, have made resource availability a crucial concern.</p><p>Cloud Computing has contributed to solving the data locality and availability problems in compute/data intensive parallel applications, particularly, when the input data size accessed by the application increases. In such applications, efficiency requires both the data and the application to be within the same node or affinity group. Cloud Computing provides technologies and frameworks (e.g., Map-Reduce and Hadoop), which allow moving computation tasks to where the data is located, so as to perform data processing. Cloud platforms also support centralized control by periodically checking (heartbeat) available resources, and worker nodes, and reassigning failed jobs to other active healthy nodes <ref type="bibr" target="#b51">[46]</ref>.</p><p>Traditional parallel applications were run on high-performance computers (e.g., supercomputers and clusters), which are very expensive. Cloud Computing made such infrastructures available for ordinary people with affordable prices, by employing the concepts of resource sharing and virtualization. The side effect of this cost reduction is extra latency. This additional latency is due to the time needed to configure and customize the Virtual Machines (VMs) to be used to run particular tasks.</p><p>Cloud Computing allows users to provision resources fairly, easily, and quickly. Cloud Computing has improved the time needed for resource provisioning from days, in the case of traditional queue-based job scheduling systems, to minutes <ref type="bibr" target="#b65">[60]</ref>. Furthermore, many cloud resources are currently available to the cloud community as open source. This includes hypervisors (e.g., Xen), parallel computing frameworks (e.g., Hadoop), and even platforms (e.g., OpenStack), which allow users to build and customize their own private clouds easily and efficiently.</p><p>While the Cloud programming models (e.g., Map-Reduce) that have emerged to utilize Cloud infrastructures create new trends in performing data/compute intensive parallel computing applications, there are limitations for using these models. Cloud Computing programming models are suitable for loosely coupled, transaction oriented, and latency insensitive (requires low latency) parallel applications that have a large number of tasks or large volumes of data. For example, Cloud Computing is not suitable for systems that require complex communication patterns <ref type="bibr" target="#b65">[60]</ref>.</p><p>Cloud Computing has provided tools and technologies for building parallel applications. Many case studies on different Cloud platforms have shown the applicability of cloud platforms to building data/compute intensive and scientific applications <ref type="bibr" target="#b65">[60,</ref><ref type="bibr" target="#b66">61]</ref>. However, whether cloud technologies are the best solution for such applications is still an open question. Further research is required to address the questions of when and where Cloud Computing can contribute to solving parallel and distributed problems; what are the disadvantages of using cloud technologies; and how to overcome current cloud limitations, such as building parallel applications that require complex communication patterns.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Utility Computing</head><p>As explained earlier, Cloud Computing has borrowed lots of concepts from different domains. One important concept with a tight relationship with Cloud Computing is Utility Computing. There is a lot of confusion about the relationship between Utility and Cloud Computing. The concept of utility is confused with public utility, and utility computing with the pay-per-use and on-demand capabilities. While all of the previous concepts have strong relationships with each other, they are different. <ref type="foot" target="#foot_3">4</ref> Confusing these concepts can result in misunderstanding the definition of Cloud Computing. Therefore, this section provides a clear definition of Utility Computing and places it within the context of Cloud Computing.</p><p>According to the Merriam-Webster dictionary, a utility is "something useful or designed for use," and is a "quality of state" that describes usefulness (e.g., if copying a file is useful, then it is a utility) <ref type="bibr" target="#b67">[62]</ref>. Consequently, computer resources and their outcomes, which are offered or designed by a provider to be reused or to benefit a consumer, can be seen as utilities, or more precisely, as computing utilities. When a utility is provided as a service for the public it is called a public utility <ref type="bibr" target="#b67">[62]</ref>. This is the same concept that McCarthy referred to in 1961 as public Utility Computing "If computers of the kind I have advocated become the computers of the future, then computing may someday be organized as a public utility just as the telephone system is a public utility. The computer utility could become the basis of a new and important industry."</p><p>Based on the previous discussion, Utility Computing can be defined as a computerrelated General Purpose Technology (GPT) <ref type="bibr" target="#b68">[63]</ref> that is provided as a service (e.g., the Internet). A utility computing service is a reusable service that aims to maximize the benefit to the consumers of the utility service, and to accommodate their needs while maximizing the providers' resource utilization. A utility computing service has nine characteristics as shown in Fig. <ref type="figure">6</ref>; seven essential and two selective characteristics, based on the application domain and service model used.</p><p>The following essential characteristics are inspired by the Rappa utility service requirements <ref type="bibr" target="#b69">[64]</ref>:</p><p>(a) Requisite: The benefit that a utility service provides to the consumers' must be a necessity; that is, without it consumers cannot fulfill their needs and achieve their goals (e.g., as water is a requisite for life, a storage service is a requisite for any software). (b) Generic: A utility service is a generic service that all consumers with common needs can use (e.g., all software systems use storage). (c) Repeatable usefulness: The usefulness of a utility service from the point of view of consumers with common needs should be the same. (d) Shared: A utility service is shared between at least two parties: the provider and the consumer. (e) Easy to use: A utility service must be easy to use by a consumer. For example, it should be easy to access and easy to manage (e.g., it should be plug and play). (f) Scalable: A utility service must have the ability to accommodate consumer demand or adapt to these demands as they increase or decrease. (g) Measurable (metered): A consumer should be able to determine the level of benefits gained from a utility service. A utility is a quality attribute. The measurement of which requires some metrics. These metrics are called utility values. A utility value is calculated using a utility function and is usually defined from the beneficiary's point of view. Examples include the number of jobs processed per second, waiting time, or the total impact of the service on the system.</p><p>Our classification for utility service characteristics distinguishes between the essential and selective characteristics. Selective characteristics can take different scenarios depending on the service model used and the service application domain. For example, while many describe utility services as pay-per-use services, this is not an essential characteristic; many utility services are provided to consumers for free (e.g., email services) based on subscription, or by other methods. The pay-per-use Fig. <ref type="figure">6</ref>. Utility essential and selective characteristics. model was considered as part of utility computing, as a result of thinking of utility computing in the context of autonomic computing and on-demand capabilities in 2002/2003 <ref type="bibr" target="#b70">[65]</ref>. In fact, when researchers started actively using and employing the concept of utility computing in early 2000, the concept was completely decoupled from the pay-per-use model. The focus was instead on how to allow end users to share benefits, while leaving the payment method as an option. As pointed out by Karp et al. "people could pay for their computing by usage, modulated by guaranteed response requirements" <ref type="bibr" target="#b71">[66]</ref>. Nevertheless, the utility service benefits still need to be metered to assist in ensuring fairness of utility service distribution. Similarly, while all utility services should be available, there are different mechanisms that consumers can use to request services. Finally, although all utility services must be generic, they are not necessarily public; a utility service can be deployed in any deployment environment. The following is the list of selective characteristics: (a) Fairly distributed: A utility service must be fairly distributed to consumers. The distribution of a service depends on the business model used. While consumers will always ask for more resources and benefits, it is the decision of the provider to grant the service to the consumer that maximizes the yield. Without having accurate metrics to measure a benefit, the dominant business model will be either a borrow model, in which consumers who ask for the utility service first will receive it; or a flat rate fair share model, where all consumers receive the same benefits. While the borrow model may result in the starvation of some consumers, or the underutilization of resources due to greedy consumers, the flat rate fair share model does not take consumer needs into consideration (some consumers may need more resources). Accordingly, a utility service must enforce a fair distribution of utility to achieve maximum utilization. A fair distribution of utility services can be achieved by several scenarios such as the following:</p><p>(i) Pay-per-use: The pay-per-use scenario depends on supply and demand, and market share, so as to ensure that resources are distributed fairly. This scenario is based on the assumption that a consumer who is in more need for a service is more willing to pay for it. Similarly, a consumer who does not need a resource will release it to avoid unnecessary payments. This is the best solution for resource utilization from a provider's view point. Providers can guarantee that they have the most yields out of their resources based on the current market. However, a pay-per-use model may not be the best solution from a consumer's point of view. This is because consumer needs are not always combined with their ability to pay. Also, a pay-per-use model may not be the best solution in private and community deployment models, where the consumers (users) and providers share the same goals. (ii) Based on outcome impact: The outcome impact of a utility service is one of the important factors to be considered when granting a utility service to a consumer. The generic rule is to reduce losses and increase benefits. A utility service should be granted to the consumer who needs it the most, in order to avoid losses, or to the consumer who can generate a higher yield out of the service. Focusing on the outcome impact is more difficult to achieve, but more fair from a consumer's point of view. On the other hand, focusing on outcome impact is not always the best solution, at least from a public provider's perspective. This model can also be applied in situations where bedding information is not available, such as in private or community scopes.</p><p>(b) Available: From a consumer's point of view, the utility service should be always available; however, how the service is made available depends on different scenarios. The following are the main two scenarios:</p><p>(i) On-demand: This is the most popular scenario in dynamic and elastic environments, making it ideal for Cloud Computing. The on-demand availability is the result of combining autonomic and utility computing.</p><p>(ii) Pre-assigned quota: The first known utility services were based on preassigned quota, in which a provider reserves resources for the consumer, based on a subscription contract.</p><p>As explained earlier in the Grid computing subsection, Cloud Computing evolved from Grid by providing solutions in order to fix the Grid problems. The main problem with grid is its lack of efficient mechanisms to guarantee reliability and QoS. The previous subsection introduced some solutions to these problems, and highlighted the fact that some of the Cloud fixes are by providing metered services and algorithms to address unexpected spikes in demand, so as to assure QoS. In fact, one of the Cloud Computing strategies for tackling reliability and QoS problems is through adopting the utility computing paradigm. Utility computing provides mechanisms for fair share resource distribution. It offers utility functions for generating normalized utility values for different utility services to measure the benefit gained by a consumer. It then applies mechanisms such as pay-per-use or priority, based on the urgency and impact of the service, to enforce fair share between consumers, avoid resource starvations, and maximize resource utilization <ref type="bibr" target="#b52">[47]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Autonomic Computing</head><p>Computing systems, applications, and services are getting more complex, heterogeneous, and dynamic each day. Managing these systems is a daunting task and an error-prone process. Autonomic computing has been inspired by the human autonomic nervous system, and is used to manage such complex and sophisticated systems. The main goal of autonomic computing is to realize computer and software systems that can manage themselves with little or no human interaction. An autonomic system is a system that can adapt to changes, which can be triggered by a change in the system's own state (e.g., failure) or the state of its environment (e.g., external events) <ref type="bibr" target="#b72">[67]</ref>. Accordingly, an autonomic system requires sensing mechanisms to sense changes (sensors), reaction mechanisms to respond to changes when they happen (effectors), and a decision making engine (autonomic manager) to make the correct assessment <ref type="bibr" target="#b72">[67]</ref>. An autonomic system satisfies one or all autonomic self-£ (read as self-star) properties, where self-£ can be one of the following: selfconfiguring, self-healing, self-optimizing, and self-protecting.</p><p>The relationship between autonomic computing and Cloud Computing is based on mutualism. Cloud Computing infrastructures and platforms have been designed and built based on autonomic computing concepts, in order to reduce the complexity of managing the large and distributed cloud datacenters, increase resource availability, enhance flexibility, and ensure optimal utilization. Today, Cloud infrastructure services allow the automatic creation and migration of virtual machines, datacenter capacity control, proactive disaster recovery, and the dynamic provisioning of resources on demand and at run time, with minimum human supervision <ref type="bibr" target="#b52">[47]</ref>. Cloud Computing platforms allow automatic job scheduling, migration, and synchronization, in addition to data management services that allow storage creation, management, and replication on the fly. Furthermore, the cloud has adopted concepts from autonomic computing to allow dynamic naming and resource localization, and to build on-going monitoring as an inherent cloud property.</p><p>On the other hand, according to van Renesse and Birman "Autonomic systems cannot be built simply by composing autonomic components. Autonomic systemwide monitoring and control infrastructures are needed" <ref type="bibr" target="#b73">[68]</ref>. The Cloud Computing infrastructure provides everything needed for building autonomic systems and applications. Cloud Computing platforms provide services for sensing, analyzing, planning, and executing applications, and building knowledge about the system <ref type="bibr" target="#b74">[69,</ref><ref type="bibr" target="#b75">70]</ref>. Using cloud infrastructure resources and services, it is much easier to build fault-tolerant applications and to track them. Cloud infrastructures facilitate replicating applications to handle more user requests, reconfiguring them to work on new operating systems, and maintaining their operation near optimal performance. In fact, Cloud Computing resources are easier to monitor because all services are metered, it is easier to change the behavior of services at run time by reconfiguring them, because cloud service implementations are decoupled from their configuration, it is easier to replicate the services and hence tolerate failures, and finally the cloud provided services are easier to compose because of its virtual distributed serviceoriented nature. This makes Cloud Computing an autonomic environment that is optimal for building autonomic systems.</p><p>Figure <ref type="figure" target="#fig_5">7</ref> shows the mutual relationship between cloud and autonomic computing. The figure shows that while cloud environments use autonomic managers to manage cloud resources, these environments are used to create autonomic systems and selfmanaged elements.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6">Virtualization</head><p>Virtualization is a main enabling technology for Cloud Computing. Virtualization is creating a temporarily simulated or extended version of computing resources (software or hardware) such as processors, operating systems, storages, and network resources. The simulated or extended version (virtual machine) will look like a real resource. Virtualization creates an abstraction layer between computing resources and the application that use them.</p><p>The goals of virtualization are first, to fully utilize the shared resources by applying partitioning and time-sharing techniques; second, to centralize resource management; third, to enhance datacenter agility and provide the required scalability and elasticity for on-demand capabilities; fourth, to improve testing and running software diagnostics on different operating platforms; fifth, to improve the portability of applications and workload migration capabilities; sixth, to provide the isolation required for a high degree of reliability, availability, security, and privacy; seventh, to enable server consolidation; and eighth, to provide a foundation for self-management frameworks.</p><p>In a nutshell, a virtualized ecosystem consists of virtual machines (VM), the virtualization technology used to create the virtual machines, and the virtual appliances or virtual images that run on top of the virtual machines. This subsection highlights the main virtualization architectures, technologies, and virtual appliance formats.</p><p>The idea of virtualization was established decades ago <ref type="bibr" target="#b76">[71]</ref>. IBM created the first Virtual Machine Monitor (VMM) in 1965. The first IBM VMM allowed the host (IBM 360/65) to share its memory. In 1967, IBM created the first full virtualization VMM <ref type="bibr" target="#b77">[72]</ref>. Since then, virtualization technologies have rapidly evolved. Several virtualization technologies currently exist. These technologies have different architectures and use diverse techniques for virtualization.</p><p>Figure <ref type="figure" target="#fig_6">8</ref> shows a classification of server virtualization technologies. In this classification, we focus on full virtualization, where the entire operating system can run on the virtual machine. It is important to notice that the term "full virtualization" also appears in the context of virtualization techniques, but with different semantics. Full virtualization, as opposed to paravirtualization, means the virtualization is achieved with no assistance of hardware or OS.</p><p>Server virtualization technologies play a key role in Cloud Computing. Cloud Computing has utilized virtualization in order to manage its large distributed datacenters and overcome most of the operational challenges of these datacenters. Resources in Cloud datacenters are shared between large numbers of users who have diverse needs and run different applications. Virtualization allows customizing, mounting, and allocating these resources to the users based on their needs. Virtualization enabled Cloud Computing to create a general virtual infrastructure and to provide the infrastructure as a service.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6.1">Virtualization Technologies</head><p>Depending on the location of the virtualization layer (hypervisor), there are two main hardware virtualization architectures: the bare-metal (Type 1) and the hosted (Type 2) architecture <ref type="bibr" target="#b78">[73]</ref>. In the bare-metal architecture, the hypervisor is installed directly on the hardware. This architecture outperforms the hosted architecture, by allowing I/O devices to be partitioned into virtual machines for direct access. Baremetal also has the advantage of supporting real-time and general purpose operating systems in parallel. However, since the hypervisor is installed directly on top of the hardware, it should include all device drivers. Furthermore, the lack of a base operating system makes the installation of these hypervisors more difficult and requires more customization and configuration.</p><p>On the other hand, the hosted architecture requires a base operating system to be installed first. The hypervisor (VMM) is installed on top of the hosting operating system. Hence, the VMM is easy to install and configure on most computers without the need for customization. However, a hosted architecture may result in performance degradation, because the I/O requests of the virtual machines need to be directed through the hosted OS. Another drawback of hosted architectures is their inability to run real-time operating systems directly inside the virtual machines. Figure <ref type="figure" target="#fig_7">9</ref> shows the simplified architectures of a non-virtualized system, and both the bare-metal and the hosted virtualization systems. The following are the main components of these systems:</p><p>• Platform hardware: The hardware resources, which are required to be shared.</p><p>• Virtual machine monitor (VMM): The program that is used to manage processor scheduling and physical memory allocation. It creates virtual by partitioning the actual resources, and interfaces the underlying hardware (virtual operating platform) to all operating systems (both host and guest). • Guest operating systems: Guest operating systems are always installed on top of the hypervisor in hardware virtualization systems. Guest operating systems are isolated from each other. Guest OS kernels use the interfaces provided by the hypervisor to access their privileged resources. • Host operating system (optional): The host operating system is the base operating system, under which the hypervisor is installed, in the hosted architecture case.</p><p>It is apparent from the previous discussion that both bare-metal and hosted architectures do not fully satisfy the Cloud Computing requirements. The bare-metal architecture is more popular in the Cloud Computing infrastructure because it is more efficient and delivers greater scalability, robustness, and performance. However, Cloud Computing still needs the hosted architecture's flexibility and compatibility.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6.2">Virtualization Techniques</head><p>There are several techniques for fully virtualizing hardware resources and satisfying the virtualization requirements (i.e., Equivalence, Resource control, and Efficiency) as originally presented by Popek and Goldberg <ref type="bibr" target="#b79">[74]</ref>. These techniques have been created to enhance performance, and to deal with the flexibility problem in Type 1 architecture.</p><p>Popek and Goldberg classified the instructions to be executed in a virtual machine into three groups: privileged, control sensitive, and behavior sensitive instructions. While not all control sensitive instructions are necessarily privileged (e.g., x86). Goldberg's Theorem 1 mandates that all control sensitive instructions must be treated as privileged (i.e., trapped) in order to have effective VMMs.</p><p>Depending on the virtualization technique used, hypervisors can be designed to be either tightly or loosely coupled with the guest operating system. The performance of tightly coupled hypervisors (i.e., OS assisted hypervisors) is higher than loosely coupled hypervisors (i.e., hypervisors based on binary translation). On the other hand, tightly coupled hypervisors require the guest operating systems to be explicitly modified, which is not always possible. One of the Cloud infrastructure design challenges is to have hypervisors that are loosely coupled, but with adequate performance. Having hypervisors that are operating system agnostic increases system modularity, manageability, maintainability, and flexibility, and allows upgrading or changing the operating systems on the fly. The following are the main virtualization techniques that are currently in use:</p><p>(a) Binary translation and native execution: This technique uses a combination of binary translation for handling privileged and sensitive instructions<ref type="foot" target="#foot_4">5</ref>  <ref type="bibr" target="#b79">[74]</ref>, and direct execution techniques for user-level instructions <ref type="bibr" target="#b79">[74]</ref>. This technique is very efficient both in terms of performance and in terms of compatibility with the guest OS, which does not need to know that it is virtualized. However, building binary translation support for such a system is very difficult, and results in significant virtualization overhead <ref type="bibr" target="#b80">[75]</ref>. (b) OS assisted virtualization (paravirtualization): In this technique, the guest OS is modified to be virtualization-aware (allow it to communicate through hypercalls with the hypervisor, so as to handle privileged and sensitive instructions). Because modifying the guest OS to enable paravirtualization is easy, paravirtualization can significantly reduce the virtualization overhead. However, paravirtualization has poor compatibility; it does not support operating systems that cannot be modified (e.g., Windows). Moreover, the overhead introduced by the hypercalls can affect performance under heavy workloads. Besides the added overhead, the modification made to the guest OS, to make it compatible with the hypervisor, can affect system's maintainability. (c) Hardware-assisted virtualization: As an alternative approach to binary translation and in an attempt to enhance performance and compatibility, hardware providers (e.g., Intel and AMD) started supporting virtualization at the hardware level. In hardware-assisted virtualization (e.g., Intel VT-x, AMD-V), privileged and sensitive calls are set to automatically trap to the hypervisor. This eliminates the need for binary translation or paravirtualization. Moreover, since the translation is done on the hardware level, it significantly improves performance.</p><p>Cloud providers have utilized different virtualization platforms to build their datacenters. The trend in the Cloud is to use platforms that combine paravirtualization and hardware-assisted virtualization to benefit from the advantages of both. The most notable VMM platforms are VMware, Xen, Hyper-V, and KVM. All these platforms use the Type 1 hypervisor based architecture. However, while VMware uses the direct driver model to install the hypervisor on bare-metal, the others use the indirect driver model. Moreover, all of these platforms support paravirtualization and full binary translation virtualization. Unlike in VMware, Xen, and Hyper-V the use of hardwareassisted virtualization, is mandatory in KVM. The reader can refer to <ref type="bibr" target="#b81">[76]</ref> for a full comparison between these platforms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6.3">Virtual Appliances</head><p>A virtual appliance is a Virtual Machine Image (VMI) that is designed and packaged to be deployed on a VM platform. A VMI is a self-contained package that consists of a software stack and metadata. The software stack consists of a set of pre-configured applications, the guest OS, middleware, libraries, containers, and all of the other required software, while the metadata represents information that can assist in the deployment and execution process of the VMI on the VM platform; for example, the support hardware needed to run the VMI (e.g., number of CPUs), the configuration variables (e.g., IP Address), and image constraints (e.g., 99.9% available).</p><p>Packaging applications in the form of virtual machine desk images can facilitate the distribution, installation, configuration, management, and execution of applications under an optimal VM platform. This also improves the application's portability and allows workload migration.</p><p>The variety of virtualization platforms used by various Cloud providers has hindered interoperability between virtual appliances, and has restricted the migration of applications and VMIs across Cloud platforms. This is because different virtualization platforms use different VM image formats. The lack of interoperability uncovered the need for a standard distribution format for virtual appliances. To tackle this issue, the Distributed Management Task Force (DMTF) created the Open Virtualization Format (OVF) in 2008.</p><p>The OVF is a vendor and platform independent standardized distribution format for virtual appliances. It defines the compatibility and optimization requirements of virtual appliances and allows VM distribution at a large scale. The OVF is portable and extensible in the sense that it allows adding features and customization by the DMTF or a third party. OVF sports the composition of multiple VMs, for example when a multi-tiered application workload is distributed into multiple VMs. In such cases, the VMI must include additional metadata related to the composition.</p><p>The OVF allows different products and vendors to exchange VMs. This allows the exchange of virtual appliances in the form of online marketplaces, which is one of the main goals of Cloud Computing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.7">Cloud Computing Relationships Summary</head><p>The sheer volume of knowledge that is required to merge technology streams has lead to separate but related technologies, which if accumulated, can result in the big new thing. This section shows an example of such a merger. After reading this section, it will become clear that Cloud Computing is the result of evolution and adoption of existing technologies and paradigms. The goal of Cloud Computing is to allow users to take benefit from all of these technologies, without the need for deep knowledge about or expertise with each one of them. The Cloud aims to cut costs, and help the users focus on their core business instead of being impeded by IT obstacles. Figure <ref type="figure" target="#fig_9">10</ref> summarizes how Cloud Computing is related to the discussed technologies.</p><p>The main enabling technologies for Cloud Computing are virtualization and autonomic computing. Virtualization abstracts the physical infrastructure, which is the most rigged component, and makes it available as a soft component that is easy  to use and manage. By doing so, virtualization provides the agility required to speed up IT operations, and reduces cost by increasing infrastructure utilization. On the other hand, autonomic computing automates the process through which the user can provision resources on-demand. By minimizing user involvement, automation speeds up the process and reduces the possibility of human errors.</p><p>Users face difficult business problems every day. Cloud Computing adopts concepts from SOA that can help the user break these problems into services that can be integrated to provide a solution. Cloud Computing provides all of its resources as services, and makes use of the well-established standards and best practices gained in the domain of SOA to allow global and easy access to cloud services in a standardized way. Cloud Computing also utilizes concepts from utility computing in order to provide metrics for the used services, based on the benefits gained. These metrics are at the core of the pay-per-use model in public Clouds. Having measured services is also an essential part of completing the feedback loop in autonomic computing, which is required for fully automating services so that they can scale on-demand and automatically recover from failures.</p><p>Cloud Computing is a kind of Grid Computing; it has evolved from Grid by addressing the QoS and reliability problems. Cloud Computing provides the tools and technologies to build data/compute intensive parallel applications with much affordable prices compared to traditional parallel computing techniques.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Conclusions and Future Directions</head><p>This introductory chapter has discussed Cloud Computing's basic principles and reference frameworks, and has surveyed the main computing paradigms that gave birth to the Cloud Computing. The Cloud Computing paradigm is still evolving. New additions and refinements to the cloud models, characteristics, and technologies occur on a daily basis. Fortunately, the plethora of existing reference models, architectures, and frameworks, as well as those underdevelopment are a sign that Cloud Computing is on its way to maturity. These reference frameworks will motivate hesitated organizations to adopt Cloud Computing.</p><p>It is true that Cloud Computing is an evolution of existing technologies rather than a technological revolution. However, it is not merely a natural evolution of a single technology, but it is a hybrid-cross (intra-specific) between different technologies resulting in the next big thing, analogous to the liger, which is the hybrid-cross between a lion and a tigress. Cloud Computing fixes the problems with the technologies that it evolved from, and adds new desired characteristics by integrating technologies.</p><p>The benefits that organizations can obtain by adopting Cloud Computing are evident. Cloud Computing reduces both organizations' capital and operational expenses. Furthermore, Cloud Computing provides organizations with the agility required to cope with sudden and unexpected changes in business demand. For example, the high level of automation, flexibility, and scalability that the Cloud Computing infrastructures provide can reduce the time of deploying a new server from 7.5 weeks to 3 min as David M. Powers explained <ref type="bibr" target="#b82">[77]</ref>. Cloud Computing inherently support disaster recovery and fault tolerance that organizations need to ensure business continuity. It also provides the high visibility required for collaboration across users and partners, by allowing resources to be accessed at anytime from anywhere when policies permit.</p><p>Cloud Computing is the future for years to come, if not for being a cutting-edge technology, then for the benefits it has yielded to the business and society through its promises of a smarter planet and a green environment (i.e., by reducing organization's greenhouse-gas emissions). Moreover, the fact that most organizations have invested or are currently investing in cloud technologies and solutions, is sufficient to prove that this technology is not dying soon, at least until organizations harvest their return of investment on Cloud Computing.</p><p>In the future, Cloud Computing will focus more on mobility. We are going to see more applications that connect to the cloud datacenters, from smartphones, vehicles, and TVs, to utilize the cloud capabilities. The cloud will shape our life and make it easier and smarter. For example, mobile devices will be able to perform tasks that are impossible without powerful computation power such as video encoding, voice processing, and image processing. Applications in smart devices will use the cloud to crunch huge data sets and exploit business analytics to provide faster and smarter decisions. For example, a car will be able to send information about its surroundings, the environment, as well as its current status. The information will be augmented with all the information sent from other devices to make smart decisions. This in our opinion will promote what we call the "Decision Support as a Service" industry. An industry that is based on collecting information, and then analyzing it to provide subscribers with accurate decisions as a service. We anticipate that the decision support as a service will have a significant impact on fields such as medicine, economy, and environmental science. We will be able to see smart medical diagnoses systems, automatic financial market brokers, and accurate climate-change forecasting.</p><p>The research and scientific community will use the cloud to solve complex problems; Cloud Computing will unleash the productivity and innovation in all scientific fields. However, before this stage, there will be a significant advancement in all the interleaving fields that affect Cloud Computing. For example, new parallel computation models (i.e., map reduce) that are more efficient and target different types of applications will be created, new standards, interfaces, and software stacks will be created to support applications'interoperability and data, workloads, and applications' portability. There will also be new frameworks that allow smart dynamic elasticity, and ensure service high availability at the enterprise level, which will depend on different cloud providers.</p><p>In the future, private clouds are expected to fade, while public and hybrid clouds will continue to be more popular. Public cloud will be the dominant model for small organizations and end users, while hybrid clouds will be the solution for medium-size and large (non-provider) organizations. The increase adoption of hybrid clouds, in addition to the increase use of cloud applications to empower mobile devices will be the impetus of a serious network traffic problem. This is due to first, the commuting workloads between the public cloud datacenters and both the private datacenters as well as the mobile devices, and second, because all communications usually happen through the Internet, which is slower, more expensive and less reliable than hard drives. Some providers currently allow data shipping on hard drives using couriers (e.g., FedEx) to solve this problem. However, this does not provide an efficient solution for the problem. In the future, there will be a need for protocols and mechanisms to address these difficulties. For example, someone may think of how common tasks can be factored as standalone components to reduce data traffic. Finally, in the future Internet providers will start pushing for laws to protect the scarce Internet bandwidth and the notion of the "Metered Internet" will become the norm.</p><p>Cloud Computing has been built on top of strong and mature technologies. However, it still lacks case studies and best practices on how to harness this technology, and to avoid the pitfalls that may result in immature design or inappropriate application. Cloud Computing has lots of areas to be investigated. We anticipate that this book chapter will provide researchers and practitioners an appropriate foundation to start their journey behind the cloud.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. NIST visual model of cloud computing definition.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>( a )</head><label>a</label><figDesc>Public cloud: A public cloud or external cloud is an open model, in which the infrastructure facilities are provided by a third party (the cloud providers).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. (a) SPI service model vs. (b) IBM service model.</figDesc><graphic coords="10,156.53,143.90,298.81,185.17" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .</head><label>4</label><figDesc>Fig.<ref type="bibr" target="#b9">4</ref>. An overview of the IBM Cloud Computing Reference Architecture (adapted with modifications from<ref type="bibr" target="#b26">[21]</ref>). Copyright IBM, Use with permission of IBM.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. NIST Cloud Computing Reference Architecture overview [26].</figDesc><graphic coords="20,145.61,419.36,320.77,185.35" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. The mutual relationship between cloud and autonomic computing.</figDesc><graphic coords="31,155.57,446.00,298.21,78.13" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Classification of sever virtualization technologies.</figDesc><graphic coords="33,145.61,448.10,320.83,156.61" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 9 .</head><label>9</label><figDesc>Fig. 9. The architectures of a non-virtualized system, and both the bare-metal and the hosted virtualization systems.</figDesc><graphic coords="34,153.77,470.96,307.33,107.29" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 10 .</head><label>10</label><figDesc>Fig. 10. Cloud Computing relationship with other computing paradigms.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table I A</head><label>I</label><figDesc>Comparison Between the Different Cloud Deployment Models.</figDesc><table><row><cell>Community cloud</cell><cell>Varies depends on the</cell><cell>number of</cell><cell>cooperatives</cell><cell>Similar to private clouds,</cell><cell>but the cost divided</cell><cell>on the participants</cell><cell></cell><cell>15,000 more than</cell><cell>private cloud but</cell><cell>much less than public</cell><cell>cloud</cell><cell>High controllability but</cell><cell>limited by the</cell><cell>community policies</cell><cell></cell><cell>High trust</cell><cell>Within the cooperative</cell><cell>facility</cell></row><row><cell>Hybrid cloud</cell><cell>Medium initial cost</cell><cell></cell><cell></cell><cell>Weighted average,</cell><cell>depending on the</cell><cell>percentage of public</cell><cell>and private parts</cell><cell>Less than private cloud</cell><cell></cell><cell></cell><cell></cell><cell>Full controllability over</cell><cell>the private part and</cell><cell>limited for the public</cell><cell>part</cell><cell>Medium trust</cell><cell>Both on-and off-premise</cell></row><row><cell>Private cloud</cell><cell>High initial cost</cell><cell></cell><cell></cell><cell>Highest cost with respect</cell><cell>to the datacenter size</cell><cell></cell><cell></cell><cell>50,000 server</cell><cell></cell><cell></cell><cell></cell><cell>Full controllability</cell><cell>(HW + SW)</cell><cell></cell><cell></cell><cell>Highest</cell><cell>On-premise</cell></row><row><cell>Public cloud</cell><cell>No initial cost</cell><cell></cell><cell></cell><cell>Lowest cost with respect</cell><cell>to the datacenter size</cell><cell></cell><cell></cell><cell>50,000 server</cell><cell></cell><cell></cell><cell></cell><cell>Limited configuration</cell><cell>controllability</cell><cell></cell><cell></cell><cell>Lowest trust</cell><cell>Off-premise</cell></row><row><cell>Attribute</cell><cell>Cost of building the</cell><cell>datacenter on service</cell><cell>consumer</cell><cell>Operation and</cell><cell>maintenance cost on</cell><cell>the provider</cell><cell></cell><cell>Size of the datacenter</cell><cell></cell><cell></cell><cell></cell><cell>Infrastructure</cell><cell>controllability and</cell><cell>flexibility</cell><cell></cell><cell>Level of trust</cell><cell>Infrastructure location</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table II 5W</head><label>II</label><figDesc>+ H questions to investigate cloud computing reference frameworks.</figDesc><table><row><cell>What</cell><cell>What is a Cloud Computing reference model/architecture/framework?</cell></row><row><cell>Who</cell><cell>Who needs a Cloud Computing reference framework?</cell></row><row><cell>Why</cell><cell>Why is a Cloud Computing reference framework required?</cell></row><row><cell>When</cell><cell>When will a Cloud Computing reference framework be available?</cell></row><row><cell>Where</cell><cell>Where are Cloud Computing reference frameworks being developed?</cell></row><row><cell>How</cell><cell>How do Cloud Computing reference frameworks differ from each other?</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>This phenomenon is referred to as the experience curve effect and was first noticed by Bruce Henderson in 1960 at BCG (Boston Consulting Group).</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>Six questions What, Where, Who, When, Why, and How, called 5W1H, from "Six Honest Men" poem of R. Kipling, Just so stories. Penguin Books, London, 1902.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_2"><p>This list is just exemplary and is not comprehensive.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_3"><p>Note that electricity is not the only public utility, and capitalism is not the only economic system.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_4"><p>Note: Sensitive instructions may not be privileged but still need to be trapped by the VMM.</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<orgName type="collaboration">Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</orgName>
		</author>
		<imprint>
			<biblScope unit="page">42</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<orgName type="collaboration">Cloud Computing Principles and Requirements . . . . . . . . . . . . . .</orgName>
		</author>
		<imprint>
			<biblScope unit="page">44</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<orgName type="collaboration">Cloud Computing Characteristics . . . . . . . . . . . . . . . . . . . . . . . . . . 44 2.2. Cloud Computing Deployment Models . . . . . . . . . . . . . . . . . . . . . . 46 2.3. Cloud Computing Service Models</orgName>
		</author>
		<imprint>
			<publisher>Cloud Service Hierarchical View)</publisher>
			<biblScope unit="page">49</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m">Cloud Computing Reference Models, Architectures, and Frameworks</title>
		<imprint>
			<biblScope unit="page">53</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<author>
			<orgName type="collaboration">, and Framework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</orgName>
		</author>
		<title level="m">The Definition of Cloud Computing Reference Model, Architecture</title>
		<imprint>
			<biblScope unit="page">53</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title/>
		<author>
			<orgName type="collaboration">Cloud Computing Reference Framework Users . . . . . . . . . . . . . . 54 References</orgName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">The Challenge of the Computer Utility</title>
		<author>
			<persName><forename type="first">D</forename><surname>Parkhill</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1966">1966</date>
			<publisher>Addison-Wesley Pub. Co</publisher>
		</imprint>
	</monogr>
	<note>first ed.</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A break in the clouds: towards a cloud definition</title>
		<author>
			<persName><forename type="first">L</forename><surname>Vaquero</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Rodero-Merino</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Caceres</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lindner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM -Computer Communication Review</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="page" from="50" to="55" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Above the Clouds: a Berkeley view of cloud computing</title>
		<author>
			<persName><forename type="first">M</forename><surname>Armbrust</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Fox</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Griffith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">D</forename><surname>Joseph</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">H</forename><surname>Hatz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Konwinski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Patterson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Rabkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Zaharia</surname></persName>
		</author>
		<idno>UCB/EECS-2009-2</idno>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
		<respStmt>
			<orgName>Electrical Engineering and Computer Sciences University of California, Berkeley</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Q&amp;A: by 2011, CIOs must answer the question, why not run in the cloud?</title>
		<author>
			<persName><forename type="first">J</forename><surname>Staten</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Schadler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Rymer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Wang</surname></persName>
		</author>
		<ptr target="&lt;http://www.forrester.com/rb/Research/qn,/q/id/55193/t/2&gt;" />
		<imprint>
			<date type="published" when="2009">2009</date>
			<publisher>Forrester Research Inc</publisher>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">You&apos;re not ready for internal cloud</title>
		<author>
			<persName><forename type="first">J</forename><surname>Staten</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kane</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Whiteley</surname></persName>
		</author>
		<ptr target="&lt;http://www.forrester.com/rb/Research&gt;" />
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
		<respStmt>
			<orgName>Forrester Research Inc.</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<author>
			<persName><forename type="first">P</forename><surname>Mell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Grance</surname></persName>
		</author>
		<title level="m">The NIST definition of cloud computing, Recommendations of the National Institute of Standards and Technology Special Publication 800-145</title>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
		<respStmt>
			<orgName>National Institute of Standards and Technology</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<author>
			<persName><forename type="first">K</forename><surname>Tsakalozos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Roussopoulos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Floros</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Delis</surname></persName>
		</author>
		<title level="m">ICDCS&apos;10, 30th IEEE International Conference on Distributed Computing Systems</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="74" to="85" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><surname>Zaharia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Borthakur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Sensarma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Elmeleegy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
		<title level="m">EuroSys&apos;10, Fifth European Conference on Computer Systems, ACM, 2010</title>
		<imprint>
			<biblScope unit="page" from="265" to="278" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">CLOSER&apos;11</title>
		<author>
			<persName><forename type="first">T</forename><surname>Haselmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Vossen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Lipsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Theurl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The First International Conference on Cloud Computing and Services Science</title>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="104" to="109" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Community cloud computing</title>
		<author>
			<persName><forename type="first">A</forename><surname>Marinos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Briscoe</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
			<publisher>Cloud Computing</publisher>
			<biblScope unit="page" from="472" to="484" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<author>
			<persName><forename type="first">G</forename><surname>Briscoe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Marinos</surname></persName>
		</author>
		<title level="m">Third IEEE International Conference on Digital Ecosystems and Technologies</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="103" to="108" />
		</imprint>
	</monogr>
	<note>in: DEST&apos;09</note>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">The economics of cloud computing, Online</title>
		<author>
			<persName><forename type="first">G</forename><surname>Reese</surname></persName>
		</author>
		<ptr target="&lt;http://broadcast.oreilly.com/2008/10/the-economics-of-cloud-c.html&gt;" />
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Moving your infrastructure to the cloud: how to maximize benefits and avoid pitfalls, White Paper, Diversity Limited and Rackspace</title>
		<author>
			<persName><forename type="first">B</forename><surname>Kepes</surname></persName>
		</author>
		<ptr target="&lt;http://www.rackspace.com/knowledge_center/whitepaper/moving-your-infrastructure-to-the-cloud-how-to-maximize-benefits-and-avoid-pitfalls&gt;" />
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<author>
			<persName><forename type="first">J</forename><surname>Moore</surname></persName>
		</author>
		<ptr target="&lt;http://www.cloudcomputingeconomics.com/2009/01/experience-curves-for-data-center.html&gt;" />
	</analytic>
	<monogr>
		<title level="m">Cloud computing economics: technical and business information about cloud computing</title>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">The cost of a cloud: research problems in data center networks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Greenberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hamilton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Maltz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Patel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM -Computer Communication Review</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="page" from="68" to="73" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><surname>Christodorescu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sailer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">L</forename><surname>Schales</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Sgandurra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Zambonim</surname></persName>
		</author>
		<title level="m">CCSW&apos;09, First ACM Workshop on Cloud Computing Security, CCSW&apos;09</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="97" to="102" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Debunking the top three cloud security myths, Online</title>
		<author>
			<persName><forename type="first">M</forename><surname>Dawson</surname></persName>
		</author>
		<ptr target="&lt;https://blog.cloudsecurityalliance.org/2011/03/30/debunking-the-top-three-cloud-security-myths/&gt;" />
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<author>
			<persName><forename type="first">T</forename><surname>Micro</surname></persName>
		</author>
		<ptr target="&lt;http://cloudsecurity.trendmicro.com/top-5-myths-of-cloud-computing-security/&gt;" />
	</analytic>
	<monogr>
		<title level="m">Top 5 myths of cloud computing</title>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<author>
			<persName><forename type="first">W</forename><surname>Tsai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Balasooriya</surname></persName>
		</author>
		<title level="m">Seventh International Conference on Information Technology: New Generations</title>
		<editor>
			<persName><surname>Itng'10</surname></persName>
		</editor>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="684" to="689" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<author>
			<persName><forename type="first">X</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Guo</surname></persName>
		</author>
		<title level="m">ICMLC&apos;10, Second International Conference on Machine Learning and Cybernetics</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="2843" to="2848" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Introduction and architecture overview IBM Cloud Computing Reference Architecture 2.0, 2011</title>
		<author>
			<persName><forename type="first">M</forename><surname>Behrendt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Glasner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Kopp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Dieckmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Breiter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Pappe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Kreger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Arsanjani</surname></persName>
		</author>
		<ptr target="https://www.opengroup.org/cloudcomputing/uploads/40/23840/CCRAIBMSubmission.02282011.doc&gt;" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<author>
			<persName><forename type="first">L</forename><surname>Youseff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">M D</forename><surname>Silva</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Butrico</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Appavoo</surname></persName>
		</author>
		<title level="m">Cloud Computing and Software Services: Theory and Techniques</title>
		<imprint>
			<publisher>CRC Press</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="1" to="16" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">Earlf</forename><surname>Long</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Software Engineering Environments</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting><address><addrLine>Berlin, Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1990">1990</date>
			<biblScope unit="volume">467</biblScope>
			<biblScope unit="page" from="115" to="129" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">D</forename><surname>Giordano</surname></persName>
		</author>
		<title level="m">Data Integration Blueprint and Modeling: Techniques for a Scalable and Sustainable Architecture</title>
		<imprint>
			<publisher>IBM Press</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="19" to="20" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Cloud computing reference architectures, models and frameworks</title>
		<author>
			<persName><forename type="first">L</forename><surname>Wilkes</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011">2011</date>
			<publisher>Everware-CBDI Inc</publisher>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Nist cloud computing reference architecture, version 1</title>
		<author>
			<persName><surname>Nist</surname></persName>
		</author>
		<ptr target="&lt;http://collaborate.nist.gov/twiki-cloud-computing/pub/CloudComputing/ReferenceArchitectureTaxonomy/NIST_CC_Reference_Architecture_v1_March_30_2011.pd&gt;" />
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Cloud security alliance security guidance for critical areas of focus in cloud computing V2</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">S</forename><surname>Alliance</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="volume">16</biblScope>
		</imprint>
		<respStmt>
			<orgName>Cloud Security Alliance</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><surname>Hamdaqa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Livogiannis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Tahvildari</surname></persName>
		</author>
		<title level="m">CLOSER&apos;11, First International Conference on Cloud Computing and Services Science, INSTICC</title>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="98" to="103" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Q&amp;A: Demystifying cloud security. An empowered report: getting past cloud security fear mongering</title>
		<author>
			<persName><forename type="first">C</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Balaouras</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Coit</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010">2010</date>
			<publisher>Forrester Research, Inc</publisher>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">The reservoir model and architecture for open federated cloud computing</title>
		<author>
			<persName><forename type="first">B</forename><surname>Rochwerger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Breitgand</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Levy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Galis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Nagin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Llorente</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Montero</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Wolfsthal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Elmroth</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Caceres</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM Journal of Research and Development</title>
		<imprint>
			<biblScope unit="volume">53</biblScope>
			<biblScope unit="page" from="4" to="10" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<author>
			<persName><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Zhou</surname></persName>
		</author>
		<title level="m">Seventh IEEE International Conference on Web Services</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2009">2009. 2009</date>
			<biblScope unit="page" from="607" to="616" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<author>
			<persName><forename type="first">S</forename><surname>Charlton</surname></persName>
		</author>
		<title level="m">OOPSLA09, 14th Conference Companion on Object Oriented Programming Systems Languages and Applications</title>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="17" to="26" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">Cloud architecture reference models: a survey V2</title>
		<author>
			<persName><surname>Nist</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
		<respStmt>
			<orgName>National Institute of Standards and Technology</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title level="m" type="main">Architecture for managing clouds: desktop management task force cloud computing reference architecture</title>
		<ptr target="&lt;http://www.dmtf.org/sites/default/files/standards/documents/DSP-IS0102_1.0.0.pdf&gt;" />
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title level="m" type="main">Cisco cloud computing -data center strategy, architecture, and solutions</title>
		<author>
			<persName><forename type="first">K</forename><surname>Bakshi</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
			<publisher>Cisco Systems, Inc</publisher>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<title level="m" type="main">Cloud reference framework 01</title>
		<author>
			<persName><forename type="first">B</forename><surname>Khasnabish</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Chu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Meng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Unbehagen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Morrow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hasan</surname></persName>
		</author>
		<ptr target="&lt;http://tools.ietf.org/html/draft-khasnabish-cloud-reference-framework-00&gt;" />
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">Getting cloud computing right: the key to business success in a cloud adoption is a robust, proven architecture, White paper CIW03078-USEN-01</title>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">G</forename><surname>Services</surname></persName>
		</author>
		<ptr target="&lt;http://public.dhe.ibm.com/common/ssi/ecm/en/ciw03078usen/CIW03078USEN.PDF&gt;" />
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
		<respStmt>
			<orgName>IBM Corporation</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<monogr>
		<ptr target="&lt;http://www.opensecurityarchitecture.org/cms/library/patternlandscape/251-pattern-cloud-computing&gt;" />
		<title level="m">Sp-011: cloud computing pattern</title>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Service oriented architecture: what is SOA?</title>
		<ptr target="&lt;http://www.opengroup.org/soa/source-book/soa/soa.htm&gt;" />
	</analytic>
	<monogr>
		<title level="j">Online</title>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
		<respStmt>
			<orgName>The Open Group</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Service-oriented computing and cloud computing: challenges and opportunities</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">B</forename><surname>Blake</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Internet Computing</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="page" from="72" to="75" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><surname>Fielding</surname></persName>
		</author>
		<title level="m">Architectural styles and the design of network-based software architectures</title>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
		<respStmt>
			<orgName>University of California, Irvine</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. thesis</note>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Cloud computing: a perspective study</title>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Laszewski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Younge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Kunze</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Tao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Fu</surname></persName>
		</author>
		<idno>00354- 008-0081-5</idno>
		<ptr target="http://dx.doi.org/10.1007/s" />
	</analytic>
	<monogr>
		<title level="j">New Generation Computing</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="137" to="146" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<monogr>
		<title level="m" type="main">Service oriented architecture modeling language (SOAML) -specification for the UML profile and metamodel for services</title>
		<author>
			<persName><surname>Omg</surname></persName>
		</author>
		<ptr target="&lt;http://www.omg.org/SoaML/1.0/Beta2/PDF&gt;" />
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">CLOSER&apos;11</title>
		<author>
			<persName><forename type="first">B</forename><surname>Elvester</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A.-J</forename><surname>Berre</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Sadovykh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">First International Conference on Cloud Computing and Services Science</title>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="98" to="103" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<monogr>
		<title level="m" type="main">SOA reference architecture</title>
		<author>
			<persName><forename type="first">A</forename><surname>Arsanjani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Kumar</surname></persName>
		</author>
		<ptr target="&lt;http://www.opengroup.org/projects/soa-ref-arch/uploads/40/19713/soa-ra-public-050609.pdf&gt;" />
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<monogr>
		<author>
			<persName><forename type="first">I</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Raicu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Lu</surname></persName>
		</author>
		<title level="m">GCE&apos;08, Fourth Grid Computing Environments Workshop</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<monogr>
		<author>
			<persName><forename type="first">W</forename><surname>Voorsluys</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Broberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Buyya</surname></persName>
		</author>
		<title level="m">Cloud Computing: Principles and Paradigms</title>
		<imprint>
			<publisher>Wiley</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="3" to="41" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Virtual workspaces: achieving quality of service and quality of life in the grid</title>
		<author>
			<persName><forename type="first">K</forename><surname>Keahey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Freeman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Scientific Programming</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="265" to="275" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><surname>Chase</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Irwin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Grit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Moore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sprenkle</surname></persName>
		</author>
		<title level="m">HPDC&apos;03, 12th IEEE International Symposium on High Performance Distributed Computing</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="90" to="100" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">Cloud computing versus grid computing-service types, similarities and differences, and things to consider</title>
		<author>
			<persName><forename type="first">J</forename><surname>Myerson</surname></persName>
		</author>
		<ptr target="&lt;http://www.ibm.com/developerworks/web/library/wa-cloudgrid&gt;" />
	</analytic>
	<monogr>
		<title level="j">Online</title>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">Cloud computing and emerging IT platforms: vision, hype, and reality for delivering computing as the 5th utility</title>
		<author>
			<persName><forename type="first">R</forename><surname>Buyya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Yeo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Venugopal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Broberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Brandic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Future Generation Computer Systems</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="599" to="616" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<monogr>
		<title level="m" type="main">Introduction to Parallel Computing: Design and Analysis of Algorithm</title>
		<author>
			<persName><forename type="first">V</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Grama</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Karypis</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994">1994</date>
			<biblScope unit="volume">110</biblScope>
			<pubPlace>Benjamin-Cummings</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">The anatomy of the grid: enabling scalable virtual organizations</title>
		<author>
			<persName><forename type="first">I</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kesselman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Tuecke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of High Performance Computing Applications</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="200" to="222" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<monogr>
		<author>
			<persName><forename type="first">I</forename><surname>Raicu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Wilde</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Beckman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Iskra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Clifford</surname></persName>
		</author>
		<title level="m">SC&apos;08, 21st ACM/IEE Annual Supercomputing Conference, SC&apos;08</title>
		<meeting><address><addrLine>Piscataway, NJ, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page">12</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<analytic>
		<title level="a" type="main">MapReduce: simplified data processing on large clusters</title>
		<author>
			<persName><forename type="first">J</forename><surname>Dean</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ghemawat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="page" from="107" to="113" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<monogr>
		<title level="m" type="main">Swift: fast, reliable, loosely coupled parallel computation</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hategan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Clifford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Laszewski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Nefedova</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Raicu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Stef-Praun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Wilde</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007">2007</date>
			<publisher>IEEE Congress on Services</publisher>
			<biblScope unit="page" from="199" to="206" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<monogr>
		<author>
			<persName><forename type="first">I</forename><surname>Raicu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Dumitrescu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Wilde</surname></persName>
		</author>
		<title level="m">SC&apos;07, Second ACM/IEE Annual Supercomputing Conference, SC&apos;07</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="page">12</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<analytic>
		<title level="a" type="main">Dryad: distributed data-parallel programs from sequential building blocks</title>
		<author>
			<persName><forename type="first">M</forename><surname>Isard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Budiu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Birrell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Fetterly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGOPS Operating Systems Review</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="page" from="59" to="72" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<analytic>
		<author>
			<persName><forename type="first">R</forename><surname>Pike</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Dorward</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Griesemer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Quinlan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Interpreting the data: parallel analysis with Sawzall</title>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="277" to="298" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b65">
	<analytic>
		<title level="a" type="main">Lecture Notes of the Institute for Computer Sciences</title>
		<author>
			<persName><forename type="first">J</forename><surname>Ekanayake</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Fox</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Cloud</forename><surname>Computing</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-642-12636-9_2</idno>
		<ptr target="http://dx.doi.org/10.1007/978-3-642-12636-9_2" />
	</analytic>
	<monogr>
		<title level="j">Social Informatics and Telecommunications Engineering</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="page" from="20" to="38" />
			<date type="published" when="2010">2010</date>
			<publisher>Springer</publisher>
			<pubPlace>Berlin, Heidelberg</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b66">
	<monogr>
		<author>
			<persName><forename type="first">W</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Jackson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Barga</surname></persName>
		</author>
		<title level="m">HPDC&apos;10, 19th ACM International Symposium on High Performance Distributed Computing, HPDC&apos;10</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="413" to="420" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<monogr>
		<title level="m" type="main">The definition of utility</title>
		<author>
			<persName><forename type="first">Thesaurus -Merriam-Webster</forename><surname>Dictionary</surname></persName>
		</author>
		<author>
			<persName><surname>Online</surname></persName>
		</author>
		<ptr target="&lt;www.merriam-webster.com/dictionary/utility&gt;" />
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b68">
	<analytic>
		<title level="a" type="main">General purpose technologies engines of growth?</title>
		<author>
			<persName><forename type="first">T</forename><surname>Bresnahan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Trajtenberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Econometrics</title>
		<imprint>
			<biblScope unit="volume">65</biblScope>
			<biblScope unit="page" from="83" to="108" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<analytic>
		<title level="a" type="main">The utility business model and the future of computing services</title>
		<author>
			<persName><forename type="first">M</forename><surname>Rappa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM Systems Journal</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="page" from="32" to="42" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b70">
	<analytic>
		<title level="a" type="main">The vision of autonomic computing</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kephart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Chess</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="page" from="41" to="50" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b71">
	<monogr>
		<title level="m" type="main">The client utility architecture: the precursor to E-speak</title>
		<author>
			<persName><forename type="first">A</forename><surname>Karp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Rozas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Banerji</surname></persName>
		</author>
		<idno>HPL-2001-136</idno>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
		<respStmt>
			<orgName>Hewlett Packard Laboratories</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b72">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><surname>Ganek</surname></persName>
		</author>
		<title level="m">Autonomic Computing: Concepts, Infrastructure, and Applications</title>
		<imprint>
			<publisher>CRC Press</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="3" to="18" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b73">
	<analytic>
		<title level="a" type="main">Autonomic computing -a system-wide perspective</title>
		<author>
			<persName><forename type="first">R</forename><surname>Van Renesse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">P</forename><surname>Birman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Autonomic Computing: Concepts, Infrastructure, and Applications</title>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="1" to="11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b74">
	<analytic>
		<title level="a" type="main">A survey of autonomic computing degrees, models, and applications</title>
		<author>
			<persName><forename type="first">M</forename><surname>Huebscher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Mccann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="page" from="1" to="28" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b75">
	<analytic>
		<title level="a" type="main">Autonomic computing: IBM&apos;s perspective on the state of information technology</title>
		<author>
			<persName><forename type="first">P</forename><surname>Horn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computing Systems</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="1" to="40" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b76">
	<analytic>
		<title level="a" type="main">The origin of the VM/370 time-sharing system</title>
		<author>
			<persName><forename type="first">R</forename><surname>Creasy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM Journal of Research and Development</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="483" to="490" />
			<date type="published" when="1981">1981</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b77">
	<monogr>
		<title level="m" type="main">Survey of system virtualization techniques</title>
		<author>
			<persName><forename type="first">R</forename><surname>Rose</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b78">
	<analytic>
		<title level="a" type="main">The evolution of virtualization</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">L</forename><surname>Kroeker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">52</biblScope>
			<biblScope unit="page" from="18" to="20" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b79">
	<analytic>
		<title level="a" type="main">Formal requirements for virtualizable third generation architectures</title>
		<author>
			<persName><forename type="first">G</forename><surname>Popek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Goldberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="412" to="421" />
			<date type="published" when="1974">1974</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b80">
	<monogr>
		<title level="m" type="main">Understanding full virtualization, paravirtualization, and hardware assist</title>
		<author>
			<persName><surname>Vmware</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007">2007</date>
			<publisher>White Paper, VMware Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b81">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><surname>Girola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Tarenzio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lewis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Friedman</surname></persName>
		</author>
		<title level="m">IBM Data Center Networking: Planning for Virtualization and Cloud Computing</title>
		<imprint>
			<publisher>IBM Redbooks Publication</publisher>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
	<note>first ed.</note>
</biblStruct>

<biblStruct xml:id="b82">
	<analytic>
		<title level="a" type="main">Cloud advantage series: speed of deployment-cloud advantage series: speed of deployment</title>
		<author>
			<persName><forename type="first">K</forename><surname>Subramanian</surname></persName>
		</author>
		<ptr target="&lt;http://www.cloudave.com/2523/cloud-advantage-series-speed-of-deployment/&gt;" />
	</analytic>
	<monogr>
		<title level="j">Online</title>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
