<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Stratego: A Language for Program Transformation based on Rewriting Strategies System Description of Stratego 0.5</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Eelco</forename><surname>Visser</surname></persName>
							<email>visser@acm.org</email>
							<affiliation key="aff0">
								<orgName type="department">Institute of Information and Computing Sciences</orgName>
								<orgName type="institution">Universiteit Utrecht</orgName>
								<address>
									<postBox>P.O. Box 80089</postBox>
									<postCode>3508 TB</postCode>
									<settlement>Utrecht</settlement>
									<country key="NL">The Netherlands</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Stratego: A Language for Program Transformation based on Rewriting Strategies System Description of Stratego 0.5</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">BB6DC7BC90E2E3F789AB11AD56B65BF1</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T12:33+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Program transformation is used in many areas of software engineering. Examples include compilation, optimization, synthesis, refactoring, migration, normalization and improvement <ref type="bibr" target="#b15">[15]</ref>. Rewrite rules are a natural formalism for expressing single program transformations. However, using a standard strategy for normalizing a program with a set of rewrite rules is not adequate for implementing program transformation systems. It may be necessary to apply a rule only in some phase of a transformation, to apply rules in some order, or to apply a rule only to part of a program. These restrictions may be necessary to avoid non-termination or to choose a specific path in a non-confluent rewrite system.</p><p>Stratego is a language for the specification of program transformation systems based on the paradigm of rewriting strategies. It supports the separation of strategies from transformation rules, thus allowing careful control over the application of these rules. As a result of this separation, transformation rules are reusable in multiple different transformations and generic strategies capturing patterns of control can be described independently of the transformation rules they apply. Such strategies can even be formulated independently of the object language by means of the generic term traversal capabilities of Stratego.</p><p>In this short paper I give a description of version 0.5 of the Stratego system, discussing the features of the language (Section 2), the library (Section 3), the compiler (Section 4) and some of the applications that have been built (Section 5). Stratego is available as free software under the GNU General Public License from http://www.stratego-language.org.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">The Language</head><p>In the paradigm of program transformation with rewriting strategies <ref type="bibr" target="#b14">[14]</ref> a specification of a program transformation consists of a signature, a set of rules and a strategy for applying the rules. The abstract syntax trees of programs are represented by means of first-order terms. A signature declares the constructors of such terms. Labeled conditional rewrite rules of the form L: l -&gt; r where s, with l and r patterns, express basic transformations on terms. A rewriting strategy combines rules into a program that determines where and in what order the rules are applied to a term. An example specification is shown in Figure <ref type="figure">1</ref>.</p><p>A strategy is an operation that transforms a term into another term or fails. Rules are basic strategies that perform the transformation specified by the rule or fail when either the subject term does not match the left-hand side or the condition fails. Strategies can be combined into more complex strategies by means of a language of strategy operators. These operators can be divided into operators for sequential programming and operators for term traversal. The sequential programming operators identity (id), failure (fail), sequential composition (;), choice (+), negation (not), test, and recursive closure (rec x(s)) combine strategies that apply to the root of a term. To achieve transformations throughout a term, a number of term traversal primitives are provided. For each constructor C/n, the corresponding congruence operator C(s1,...,sn) expresses the application of strategies to the direct sub-terms of a term constructed with C. Furthermore, a number of term traversal operators express generic traversal to the direct sub-terms of a term without reference to the constructor of the term. These constructs allow the generic definition of a wide range of traversals over terms. For example, the strategy all(s) applies s to each direct sub-term of a term. Using this operator one can define bottomup(s) = rec x(all(x); s), which generically defines the notion of a post-order traversal that visits each sub-term applying the parameter strategy s to it.</p><p>A number of abstraction mechanisms are supported. A strategy definition of the form f(x1,...,xn) = s defines the new operator f with n parameters as an abstraction of the strategy s. An overlay of the form C(x1,...,xn) = t captures the pattern t in a new pseudo-constructor C <ref type="bibr" target="#b8">[9]</ref>. Constructors and strat-egy operators can be overloaded on arity. Strategies implemented in a foreign language (e.g., for accessing the file system) can be called via the prim construct.</p><p>The distinction between rules and strategies is actually only idiomatic, that is, rules are abbreviations for strategies that are composed from the actual primitives of transformation: matching terms against patterns and building instantiations of patterns. Thus, a rule L: l -&gt; r where s is just an abbreviation of the strategy L = {x1,...,xn: ?l; where(s); !r}, where the xi are the variables used in the rule. The construct {xs: s} delimits the scope of the variables xs to the strategy s. The strategy ?t matches the subject term against the pattern t binding the variables in t to the corresponding sub-terms of the subject term. The strategy !t builds an instantiation of the term pattern t by replacing the variables in t by the terms to which they are bound. Decoupling pattern matching and term construction from rules and scopes, and making these constructs into first-class citizens, opens up a wide range of idioms such as contextual rules and recursive patterns <ref type="bibr" target="#b8">[9]</ref>. In these idioms a pattern match is passed on to a local traversal strategy to match sub-terms at variable depth in the subject term.</p><p>Finally, specifications can be divided into modules that can import other modules. The above constructs of Stratego together with its module system make a powerful language that supports concise specification of program transformations. An operational semantics of System S, the core of the language, can be found in <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b14">14]</ref>. A limitation of the current language is that only a weak type system is implemented. Work is in progress to find a suitable type system that reconciles genericity with type safety.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">The Library</head><p>The Stratego Library <ref type="bibr" target="#b9">[10]</ref> is a collection of modules (≈45) with reusable rules (≈130) and strategies (≈300). Included in the library are strategies for sequential control, generic traversal, built-in data type manipulation (numbers and strings), standard data type manipulation (lists, tuples, optionals), generic language processing, and system interfacing (I/O, process control, association tables).</p><p>The generic traversal strategies include one-pass traversals (such as topdown, bottomup, oncetd, and spinetd), fixed point traversal (such as reduce, innermost, and outermost), and traversal with environments. The generic language processing algorithms cover free variable extraction, bound variable renaming, substitution, and syntactic unification <ref type="bibr" target="#b10">[11]</ref>. These algorithms are parameterized with the pattern of the relevant object language constructs and use the generic traversal capabilities of Stratego to ignore all constructs not relevant for the operation. For example, bound variable renaming is parameterized with the shape of variables and the binding constructs of the language.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">The Compiler</head><p>The Stratego Compiler translates specifications to C code. The run-time system is based on the ATerm library <ref type="bibr" target="#b3">[4]</ref>, which supports the ATerm Format, a representation for first-order terms with prefix application syntax. The library implements writing and reading ATerms to and from the external format, which is used to exchange terms between tools. This enables component-based development of transformation tools. For example, a Stratego program can transform abstract syntax trees produced by any parser as long as it produces an ATerm representation of the abstract syntax tree for a program.</p><p>The compiler has been bootstrapped, that is, all components except the parser are specified in Stratego itself. The compiler performs various optimizations, including extracting the definitions that are used in the main strategy, aggressive inlining to enable further optimizations and merging of matching patterns to avoid backtracking. A limitation of the current compiler is that it does not support separate compilation and that compilation of the generated code by gcc is rather slow, resulting in long compilation times (e.g., 3 minutes for a large compiler component). Overcoming this limitation is the focus of current work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Applications</head><p>Stratego is intended for use in a wide range of language processing applications including source-to-source transformation, application generation, program optimization, compilation, and documentation generation. It is not intended for interactive program transformation or theorem proving.</p><p>Examples of applications that use Stratego are XT, CodeBoost, HSX and a Tiger compiler. XT is a bundle of program transformation tools <ref type="bibr" target="#b5">[6]</ref> in which Stratego is included as the main language for implementing program transformations. The bundle comes with a collection of grammars for standard languages and many tools implemented in Stratego for generic syntax tree manipulation, grammar analysis and transformation, and derivation of tools from grammars. CodeBoost is a framework for the transformation of C++ programs <ref type="bibr" target="#b1">[2]</ref> that is developed for domain-specific optimization of C++ programs for numerical applications. HSX is a framework for the transformation of core Haskell programs that has been developed for the implementation of the warm fusion algorithm for deforesting functional programs <ref type="bibr" target="#b7">[8]</ref>. The Tiger compiler translates Tiger programs <ref type="bibr" target="#b0">[1]</ref> to MIPS assembly code <ref type="bibr" target="#b11">[12]</ref>. The compiler includes translation to intermediate representation, canonicalization of intermediate representation, instruction selection, and register allocation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Related Work</head><p>The creation of Stratego was motivated by the limitations of a fixed (innermost) strategy for rewriting, in particular based on experience with the algebraic specification formalism ASF+SDF <ref type="bibr" target="#b6">[7]</ref>. The design of the strategy operators was inspired by the strategy language of ELAN <ref type="bibr" target="#b2">[3]</ref>, a specification language based on the paradigm of rewriting logic <ref type="bibr" target="#b4">[5]</ref>. For a comparison of Stratego with other systems see <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b14">14]</ref>. A survey of program transformation systems in general can be found in <ref type="bibr" target="#b15">[15]</ref>. The contributions of Stratego include: generic traversal primitives that allow definition of generic strategies; break-down of rules into primitives match and build giving rise to first-class pattern matching; many programming idioms for strategic rewriting; bootstrapped compilation of strategies; a foreign function interface; component-based programming based on exchange of ATerms.</p></div>		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgements I would like to thank Bas Luttik, Andrew Tolmach, Zino Benaissa, Patricia Johann, Joost Visser, Merijn de Jonge, Otto Skrove Bagge, Dick Kieburtz, Karina Olmos, Hedzer Westra, Eelco Dolstra and Arne de Bruijn for their contributions to the design, implementation and application of Stratego.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Modern Compiler Implementation in ML</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">W</forename><surname>Appel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998">1998</date>
			<publisher>Cambridge University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">CodeBoost: A framework for the transformation of C++ programs</title>
		<author>
			<persName><forename type="first">O</forename><forename type="middle">S</forename><surname>Bagge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Haveraaen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Visser</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
		<respStmt>
			<orgName>Universiteit Utrecht</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Elan: A logical framework based on computational systems</title>
		<author>
			<persName><forename type="first">P</forename><surname>Borovanský</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kirchner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Kirchner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P.-E</forename><surname>Moreau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Vittek</surname></persName>
		</author>
		<editor>J. Meseguer</editor>
		<imprint>
			<date type="published" when="1996">1996. 1996</date>
			<biblScope unit="volume">4</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">G J</forename><surname>Van Den Brand</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">A</forename><surname>De Jong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Klint</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">A</forename><surname>Olivier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Efficient annotated terms. Software-Practice &amp; Experience</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="259" to="291" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Reflection and strategies in rewriting logic</title>
		<author>
			<persName><forename type="first">M</forename><surname>Clavel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Meseguer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Rewriting Logic and its Applications</title>
		<editor>
			<persName><forename type="first">J</forename><surname>Meseguer</surname></persName>
		</editor>
		<imprint>
			<date type="published" when="1996">1996. 1996</date>
			<biblScope unit="volume">4</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">XT: A bundle of program transformation tools</title>
		<author>
			<persName><forename type="first">M</forename><surname>De Jonge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Visser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Visser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Language Descriptions, Tools and Applications</title>
		<imprint>
			<date type="published" when="2001">2001. 2001</date>
		</imprint>
	</monogr>
	<note>ENTCS</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><surname>Van Deursen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Heering</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Klint</surname></persName>
		</author>
		<title level="m">Language Prototyping, volume 5 of AMAST Series in Computing</title>
		<meeting><address><addrLine>Singapore</addrLine></address></meeting>
		<imprint>
			<publisher>World Scientific</publisher>
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Warm fusion in Stratego: A case study in the generation of program transformation systems</title>
		<author>
			<persName><forename type="first">P</forename><surname>Johann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Visser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals of Mathematics and Artificial Intelligence</title>
		<imprint/>
	</monogr>
	<note>To appear</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Strategic pattern matching</title>
		<author>
			<persName><forename type="first">E</forename><surname>Visser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Rewriting Techniques and Applications (RTA&apos;99)</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">P</forename><surname>Narendran</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">M</forename><surname>Rusinowitch</surname></persName>
		</editor>
		<meeting><address><addrLine>Trento, Italy</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1999-07">July 1999</date>
			<biblScope unit="volume">1631</biblScope>
			<biblScope unit="page" from="30" to="44" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<author>
			<persName><forename type="first">E</forename><surname>Visser</surname></persName>
		</author>
		<title level="m">The Stratego Library. Institute of Information and Computing Sciences</title>
		<meeting><address><addrLine>Utrecht, The Netherlands</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999">1999</date>
		</imprint>
		<respStmt>
			<orgName>Universiteit Utrecht</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Language independent traversals for program transformation</title>
		<author>
			<persName><forename type="first">E</forename><surname>Visser</surname></persName>
		</author>
		<idno>UU-CS-2000-19</idno>
	</analytic>
	<monogr>
		<title level="j">Portugal</title>
		<editor>
			<persName><forename type="first">J</forename><surname>Jeuring</surname></persName>
		</editor>
		<imprint>
			<date type="published" when="2000-07-06">July 6, 2000</date>
			<pubPlace>Ponte de Lima</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Universiteit Utrecht</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
	<note>Workshop on Generic Programming (WGP2000)</note>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<author>
			<persName><forename type="first">E</forename><surname>Visser</surname></persName>
		</author>
		<ptr target="http://www.stratego-language.org/tiger/" />
		<title level="m">Tiger in Stratego: An exercise in compilation by transformation</title>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">E</forename><surname>Visser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z.-E</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A core language for rewriting</title>
	</analytic>
	<monogr>
		<title level="m">Rewriting Logic and its Applications</title>
		<editor>
			<persName><forename type="first">C</forename><surname>Kirchner</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">H</forename><surname>Kirchner</surname></persName>
		</editor>
		<imprint>
			<date type="published" when="1998-09">September 1998. 1998</date>
			<biblScope unit="volume">15</biblScope>
		</imprint>
	</monogr>
	<note>ENTCS</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Building program optimizers with rewriting strategies</title>
		<author>
			<persName><forename type="first">E</forename><surname>Visser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z.-E.-A</forename><surname>Benaissa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Tolmach</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">of the International Conference on Functional Programming (ICFP&apos;98)</title>
		<imprint>
			<date type="published" when="1999-01">January 1999</date>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="page" from="13" to="26" />
		</imprint>
	</monogr>
	<note>Proceedings</note>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">The online survey of program transformation</title>
		<author>
			<persName><forename type="first">E</forename><surname>Visser</surname></persName>
		</author>
		<ptr target="http://www.program-transformation.org/survey.html" />
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
