<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Data-driven Approach for Real-Time Clothes Simulation</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Frederic</forename><surname>Cordier</surname></persName>
							<email>cordier@miralab.unige.ch</email>
							<affiliation key="aff0">
								<orgName type="laboratory">MIRALab</orgName>
								<orgName type="institution">University of Geneva</orgName>
								<address>
									<addrLine>24 rue du General Dufour</addrLine>
									<postCode>CH-1211</postCode>
									<settlement>Geneva</settlement>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Nadia</forename><surname>Magnenat-Thalmann</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">MIRALab</orgName>
								<orgName type="institution">University of Geneva</orgName>
								<address>
									<addrLine>24 rue du General Dufour</addrLine>
									<postCode>CH-1211</postCode>
									<settlement>Geneva</settlement>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A Data-driven Approach for Real-Time Clothes Simulation</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">6389F68E90F12E2C46B131EE1B445C61</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T14:34+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>A data-driven approach for real-time processing of clothes, particularly suitable for simulating dresses worn by virtual characters, is proposed. It starts, prior to realtime simulation, by analyzing cloth behavior in relation to the underlying skeleton movement from a pre-simulated sequence of the cloth obtained using any high quality offline simulators. The idea is to use this analysis to find an optimal combination of physics-based simulation and geometric approximation of the simulator; potentially colliding regions are defined on the cloth such that they will hold true for the skeleton movement that closely matches that of pre-simulated sequence. At runtime, using these analyses, our simulation process provides both visually pleasing results and performance, as long as the motion of the character remains sufficiently close to the original sequence used for the pre-computation.</p><p>The key contributions of this paper are ( <ref type="formula">1</ref></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>) efficient collision handling that prunes out potentially colliding objects by using the off-line simulation sequence as examples;</head><p>(2) data-driven fix-up process for the coarse mesh simulation that deduces the gross behavior of the cloth; and (3) geometric approximation of the fine mesh deformation, responsible for details in the shape of the cloth such as wrinkles. a b c d Residual Value (cm) -1.23 -19.7 e Figure 18. Simulation of cocktail dress: segmentation (a), analysis of vertex movements (b), identification of the three regions (c), the resulting coarse mesh with collision hulls (d), samples of real-time animation (e).</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>The problem of simulating the behavior of clothes is one subject the graphics community has been grappling with since almost two decades ago <ref type="bibr" target="#b18">[19]</ref>  <ref type="bibr" target="#b20">[21]</ref>.</p><p>Relatively little emphasis has been placed on the separate problem of how to achieve real-time performance in simulating cloth. A number of strategies have been suggested, such as using simplifying assumptions for the physics model and/or collision detection <ref type="bibr" target="#b6">[7]</ref>  <ref type="bibr" target="#b11">[12]</ref>. A recent work by James et al. <ref type="bibr" target="#b9">[10]</ref> suggests a different approach by adopting a data-driven method. These techniques do not suffice, however, when simulating fully dressed virtual characters in real-time, leaving the topic unexplored.</p><p>We present a data-driven method for simulating clothes worn by 3D characters in real-time. To effectively optimize the physics-based deformation, which is the bottleneck of the simulation, we use a coarse representation of the cloth mesh to drive the gross behavior in simulation. We consider that the gross cloth behavior is driven mainly by two separable contributions: the skeleton-driven movement of the character and the mechanical properties of the cloth. This consideration was partly inspired by the hybrid real-time simulation method proposed in Cordier et al. <ref type="bibr" target="#b4">[5]</ref>, where a hybrid deformation method is used to combine dynamic surfaces with Skeleton-Driven Deformation (SDD). Unlike that method, however, our method exhibits significantly more efficient and realistic behavior. This effect is achieved by focusing on the analysis of cloth movements in relation to its associated skin surface, and adopting a learning strategy. The idea is to use the analysis of the presimulated sequence to identify the region largely explained by joint movement and to replace the physics based simulation with geometric methods wherever possible.</p><p>In our approach, the key ingredients of the new technique are associated with different facets of cloth simulation: First, our novel collision detection prunes out unnecessary collision tests by tightly localizing potentially colliding regions through the analysis of the cloth movement in relation to the skeleton. Second, we use the pre-simulated sequence to approximate the dynamic behavior of the coarse mesh geometrically wherever possible. Finally, fine details such as wrinkles are also simulated in a data-driven manner, by using the pre-simulated cloth sequence as examples. Subsequently, real-time animation of fully dressed human could be generated, which would be suitable for applications such as games where visual plausibility is more important than accuracy.</p><p>The remainder of this paper is organized as follows: We begin by reviewing previous approaches in Section 2. Section 3 gives an overview, followed by the description of our method for SDD in the Section 4. The next two sections are dedicated to the simulation of gross behavior and the generation of wrinkles, respectively. After demonstrating results and performance in Section 7, we conclude with discussion and future work in Section 8.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Previous Work</head><p>The history of research on real-time cloth is relatively recent. Researchers have concentrated mainly on two aspects of real-time cloth animation: simulating the physical properties of garments and collision handling.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.">Numerical solvers</head><p>Probably the most common technique for simulating the physical properties of clothes is the particle system. Simulation process is broken down into calculating the internal forces and solving the system of Partial Differential Equations (PDE). The latter point has attracted much interest in the field of real-time applications, since it requires high computation power.</p><p>The explicit Euler method <ref type="bibr" target="#b1">[2]</ref> has been one of the first numerical solvers. Unfortunately, this method is notorious for its instability when using large time steps and stiff equations. Several improvements have been proposed to reduce instability, such as the Verlet integration <ref type="bibr" target="#b10">[11]</ref> and the explicit Euler combined with inverse dynamics <ref type="bibr">[17] [20]</ref>. Unfortunately, the simulation quality is sacrificed in favor of computation speed, due to the approximations employed in these models.</p><p>The implicit Euler method presented by Baraff et al. <ref type="bibr" target="#b1">[2]</ref> performs the computation not by using the derivative at the current time, but the predicted derivative at the next time step. Unlike explicit Euler integration, the implicit Euler method offers higher stability while using large time-steps and clothes with stiff mechanical properties. A major drawback of this numerical solver, however, is the computation of a large linear system, More recently, researchers worked on saving the computation time of the linear system solver. Desbrun et al <ref type="bibr" target="#b6">[7]</ref> proposed solving the linear system with a precomputed inverse matrix. Kang et al. <ref type="bibr" target="#b11">[12]</ref> proposed further optimization with a direct update formula for the positions and velocities of the cloth vertices. As indicated by the authors, these methods are not intended to provide a physically-correct cloth animation. Our approach to that problem is a data-driven mass-spring system: the simulation is corrected with a set of functions built from the pre-simulated animation. By doing so, we bring the deformation of the mass-spring system closer to the original cloth behavior.</p><p>Another approach to fast garment deformations is the hybrid approach. They aim for a neat combination of physically based deformation and geometric deformation. Cordier et al. <ref type="bibr" target="#b4">[5]</ref> proposed to segment the cloth into pieces and simulate these by different algorithms, depending on how they lie on the body surface and whether they adhere to it or flow over it. Others have noted that wrinkle deformation is geometric in nature and therefore can be computed with a geometric method. Wrinkles can be generated either by tessellating the cloth mesh <ref type="bibr" target="#b11">[12]</ref> or rendering details on texture using bump mapping <ref type="bibr" target="#b8">[9]</ref>. The main difficulty is defining a fold function that can simulate all kinds of wrinkle patterns.</p><p>Moreover, determining the location and shape of wrinkles is left to CG artists. One of our contributions is a geometric wrinkling method that is "trained" by using a pre-simulated cloth sequence, rather than relying on users.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.">Collision handling</head><p>Collision detection is usually one of the bottlenecks in real-time animation. The problem is particularly acute in the case of clothes because these objects are highly deformable. Several algorithms have been proposed to process robustly collisions in cloth simulation <ref type="bibr" target="#b20">[21]</ref>  <ref type="bibr" target="#b21">[22]</ref> without reaching real-time performance. Some other methods exploit graphics hardware to compute collisions on bump maps <ref type="bibr" target="#b19">[20]</ref>; others use implicit surfaces to check collisions on the body <ref type="bibr" target="#b17">[18]</ref>, or voxel trees, which partition the space hierarchically <ref type="bibr" target="#b13">[14]</ref>. Using frame coherency to reduce computation cost has been explored by Zhang et al <ref type="bibr">[23]</ref>. In this work, we propose a data-driven collision detection method; we use the pre-simulated sequence to localize the collision checks to neighboring cloth regions that have high probability to collide.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.">Data-driven approaches</head><p>The idea of building an interpolator from examples or pre-simulated data has proven to be a valuable tool in a variety of areas of CG, e.g. for modeling a variety of human body shapes and for motion synthesis. The basic idea is to build an interpolation space filled with a set of pairs of input parameters and the targeted graphical objects. Cloth animation depends on a high number of parameters and therefore a data-driven approach is difficult to adapt. Very recently, James et al. <ref type="bibr" target="#b9">[10]</ref> resented such an approach, where physics-based deformation and collision detection are both handled in a unified framework. By blending of pre-computed orbits rather than using a mass-spring system, previous unseen results could be achieved, such as garments with stiff mechanical properties in real-time. However, they show little degrees of freedom (DoF) to the clothes under simulation; Instead of resorting to a data-driven approach for the entire simulation, we seek a neat combination of a data-driven approach with the mass-spring system. Unlike previous works, our simulator allows a much higher degree of interaction, as it is often needed in animating clothes on moving characters.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Overview of our approach</head><p>The primary focus of this paper is the development of a fast cloth simulator for real-time applications. Dynamic simulation of complex deformable models, however, can easily involve thousands of degrees of freedom. For example, a physics-based simulator would require several minutes to compute one frame of a cloth model worn by a character. Simulating large models directly would therefore be computationally impractical. In what follows, we present the chosen optimization strategies as well as the workflow of the method.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Optimization strategies</head><p>Figure <ref type="figure" target="#fig_0">1</ref> summarizes our strategies for optimizing the cloth simulation. Our simulator is based on two levels of deformation: the first deduces the gross cloth behavior by working on a coarse mesh with a physics-based approach whereas the second generates wrinkles on a fine mesh with a geometric method. The coarse mesh is generated by simplifying the original cloth mesh through segmentation. The reason for this choice is to lower the computation time; geometric methods are in general much faster than physically-based ones <ref type="bibr" target="#b8">[9]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Simulation stages</head><p>Strategies to reduce the computation time Simulating the gross movements on the coarse mesh -Simplified mass-spring system -Implicit Euler integrator -Post-correction to maintain the cloth behaviour closer to the pre-simulated one Collision detection on the coarse mesh -Each vertex is enclosed into a collision hull that is rigidly attached to the skeleton -Extra collision detection is also computed between the floating regions and the skeleton joints Modelling the cloth details on the fine mesh -Geometric deformation with a linear function which coefficients are defined by linear regression on the pre-simulated animation Next, our simulator assumes that the clothes are worn on 3D characters, and that the character movement is the only external force acting upon the cloth. When observing the behavior of garment worn by a character, there are considerable correlations between the body motion and the movement of the garment. These correlations are especially clear for some clothes like tight shirts and trousers. In our method we take advantage of these relationships to reduce the computation load on the mass-spring system and collision detection. We first construct the cloth-to-joint relation by analyzing a presimulated sequence of the cloth to be animated. We then reduce the number of vertices to be physically simulated by identifying the garment regions in which the shape follows that of the underlying skin. The cloth-to-joint relation enables us also to optimize collision detection by restricting the collision check to a small area around each vertex of the coarse mesh. Finally, we use the cloth shape of a pre-simulated cloth sequence to correct the physicsbased simulation of the coarse mesh in order to match the original cloth behavior more closely.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Workflow</head><p>An overview of the workflow is given in Figure <ref type="figure" target="#fig_1">2</ref>. The pre-processing stage involves generating the coarse mesh, computing the cloth-to-joint relation, and constructing the collision hulls and the interpolation functions for data-driven coarse mesh deformation and wrinkle animation.  The run-time simulator includes deformation of the coarse mesh using the simplified mass-spring system; a post-correction on the position and velocity of the masspoints is processed in order to approach the pre-simulated cloth behavior. Collisions are handled by collision hulls the position of which is computed by our SDD. The final mesh is then obtained using the winkle shape interpolator and the computed geometry of the coarse mesh.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Improving the skeleton driven deformation</head><p>The skeleton-driven deformation (SDD), a classical method for the basic skin deformation is perhaps the most widely used technique in 3D character animation. This method works first by assigning a set of joints with weights to each vertex in the character. The location of a vertex is then calculated by a weighted combination of the transformation of the influencing joints. Although developing a new SDD method is not our main goal, the way the skin deforms is important in our framework since natural looking cloth shape also requires natural skin shape. There are two requirements which the method should fulfill for this particular use: first, it must overcome the undesirable effect of vertex collapse as shown in Figure <ref type="figure" target="#fig_2">3(a)</ref>. Second, the method must provide an easy way to compute the local coordinate system for each skin vertex. This is necessary as we want to compute the deformation of the cloth surface in relation to the skin surface. We found that the classical SDD can be greatly improved by replacing the linear combination of the matrices by the matrix operator defined by Alexa <ref type="bibr" target="#b0">[1]</ref>. The combination of i matrices Mi with their blending weight w i is given by:</p><formula xml:id="formula_0">∑ = ⋅ = ⊕ i i i M w i i i SSD e M w M ) log(</formula><p>In the remainder of this paper, we denote the function that returns the SDD matrix of the vertex P by SDD P (), SDD P () taking the joint angles of the skeleton as input. The SDD position of P is simply given by M SDD .X P,Dress , X P,Dress being the position of P at initial character pose (see <ref type="bibr" target="#b14">[15]</ref> for further details on SDD). Note that the operator is not continuous. It is not defined for a rotation of 2π radians between the matrices to be blended. In practice, such case is rare; in general, the largest angle range does not exceed π radians.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Simulation of the gross behavior</head><p>Due to the computational expenses of solving the full numerical system of the physics-based deformation, we seek simplifications by constructing a coarse mesh representation of the garment. The coarse mesh is used to deduce the gross behavior of the cloth in a data-driven manner, based on the input pre-simulated sequence. A number of optimization strategies are adopted: The two following sections describe a preprocessing that constructs and segments a coarse mesh representation into different region types. We then describe in the next two sections the spring-mass system and collision handling of the coarse mesh at each frame of the simulation. Also described is the runtime process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.">Construction of the coarse mesh</head><p>We begin by constructing a coarse representation of the given cloth model that will drive the gross behavior of the simulated garment. It consists of two following steps:</p><p>(1) The cloth surface is partitioned into a set of patches as shown in Figure <ref type="figure" target="#fig_3">4</ref>(a) and (b). (2) A coarse mesh representation is obtained by combining a set of vertices in a patch into a single mass point located at the center.</p><p>The generation of a patch starts by finding a vertex that has not yet been attributed to a patch that is already generated. The patch is then grown by adding neighboring vertices one after the other. To select a new vertex into the current patch, we evaluate each neighboring vertex that has not been already assigned to a patch, using a penalty function. To enforce the regularity of coarse mesh, which is one condition for obtaining efficient deformation with the mass-spring system <ref type="bibr" target="#b20">[21]</ref>, we consider two following components.</p><p>• Minimizing the "shape factor": Square Root (Surface Area)/Contour Length. The objective is to obtain "well-shaped patches", patches that have a circular shape.</p><p>• Obtaining patches of equivalent surface area. This component gives a cost that increases with the surface area of the patch. By modifying the significance of this component, we can easily control the number of vertices to be simulated with the physically-based deformation (see Figure <ref type="figure" target="#fig_3">4</ref>).</p><p>The vertex with the lowest cost is selected. When the lowest cost exceeds a threshold, the construction of the patch is completed. We proceed until no vertices can be found to start a new patch. Deciding a good granularity in the coarse mesh is hand-tuned, so that a neat compromise between the simulation quality and the computation load is found. We have found that best simulations are obtained when patch area covers one or two cloth wrinkles. Note that that each patch is associated with a vertex on the coarse mesh. We denote the vector position of a vertex P as XP, and the vector position of its neighbors as X N ∈R 3n (n: number of neighbors of P).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.">Identifying cloth-to-joint relations and region types</head><p>Next we carry out cloth-to-skin (or body) attachment through skin fitting, by which the skinning data on the cloth mesh are approximated in such a way that the skinning-driven cloth shape best fits the simulated cloth shape throughout the whole pre-simulated sequence. The basic idea is to use the pre-simulated results as examples and find the error-minimizing skin data through optimization. An optimization approach, such as the one presented by Mohr et al <ref type="bibr" target="#b14">[15]</ref>, could be adopted here. In our case, however, our SDD method is non-linear and therefore the linear regression as adopted by Mohr et al is not beneficial. Function minimization techniques such as Powell's method <ref type="bibr" target="#b15">[16]</ref> can deal with non-linear functions. Performance is slightly slower, but only pre-processing performance is affected and not runtime performance. The fitting results for a dress model are shown in Figure <ref type="figure" target="#fig_4">5</ref>. Notably, the floating regions (colored in red in Figure <ref type="figure" target="#fig_4">5(d)</ref>) are attached to the root of the character, as shown in Figure <ref type="figure" target="#fig_4">5(b)</ref>; this is contributable to the fact that these regions are large in volume and they rarely collide with limbs during the walk motion. The residual values of the fitting provide useful information on how the garments behave in relation to the body. Intuitively, floating garments such as a skirt, cloth patches may collide with several joints; collisions need to be computed on these regions. On the other hand, the local movements of some cloth patches (like underwear) are negligible and these patches can be considered as being attached rigidly to the skeleton. In our approach, three regions are identified from the residual values of the skin fitting process (Figure <ref type="figure" target="#fig_4">5(d)</ref>): those that potentially interact with several joints, those that are loosely attached to the skeleton and those that are rigidly attached to the skeleton. The threshold values are chosen in a way that the coarse mesh deformation remains sufficiently close to the pre-simulated sequence. For example, a false assignment of loose region into tight region would produce elongated deformations instead of slipping garment over the skin, and therefore generate an overly deformed coarse mesh, which is beyond the training data of the wrinkle generator. Similarly, a false assignment of region 3 into region 2 would result in the garment crossing the legs. In practice, values of 0.5 cm and 4.0 cm are used to identify tight regions and floating regions, respectively.</p><p>The deformation of tight regions is directly computed with the SDD (line 2 and 6 on Figure <ref type="figure" target="#fig_5">6</ref>). The use of SDD for these regions makes it possible to reduce the number of mass points even further. The pseudo code of the simulation loop is: High residual values indicate much less dependency on a specific body region of the cloth movement. Therefore, an additional collision check is required to handle the interaction of the clothes with the whole body skeleton. A list of potentially colliding body patches is defined by selecting those that approach within a certain distance of the floating regions during the pre-simulated cloth sequence.</p><p>Apart from the position, our SDD computes the local transformation matrix of the vertices, the simulator to be optimized at least for the two following points: limiting collision checks to a small area around the vertices, and the geometric wrinkling which is processed in the SDD local coordinate system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.">Data-driven post-correction of the coarse mesh</head><p>At each frame of the simulation, we compute the coarse mesh by a mass-spring system with the implicit Euler numerical solver <ref type="bibr" target="#b1">[2]</ref>. The simulation run on the coarse mesh hardly reproduces the gross movement of the original cloth because the initial mesh has been significantly simplified (from 4000 to a few dozen vertices) and the topology has been modified. Moreover, unlike the simulator used for the pre-simulated cloth sequence, the simplified mass-spring model does not accurately simulate the bending and shearing properties of the fabrics <ref type="bibr" target="#b20">[21]</ref>.  We approach the problem by modifying the behavior of the mass-spring system through a fix-up process (similar to <ref type="bibr" target="#b13">[14]</ref>) where the position and velocity of the coarse mesh vertices are modified in order to maintain the cloth shape as close as possible to the original one (Figure <ref type="figure" target="#fig_6">7</ref>). Ideally, the local shape (e.g. position of the vertices in relation to their neighbors) should be a blend of those of the pre-simulated animation. This is achieved by constructing a set of functions of local shape deformation. Post-correction is accomplished with a function that evaluates the "ideal" position of the vertex given the position of its neighbors connected by the edges. For each vertex, we construct an interpolating function F Post by using a set of (X N,Pre-simulated , X P,Pre-simulated ) pairs extracted from each frame of the pre-simulated sequence, where X N ∈R 3 (n: number of neighbors of P) denotes the position of the neighbors and X N ∈R 3n the position of the vertex in question. All these positions are described in the SDD coordinate system of P. The evaluation of the "ideal" position is made with the inverse distance weighting on the pre-simulated frames. Given a position of neighbors X N,Input as input, the interpolation computes the corresponding X P by a weighted summation of the X P,pre-simulated values, each weight being computed from the Euclidian distance between X N,Input and all the X N,Pre- simulated values.</p><p>The computation cost of this interpolator grows as the number of pre-simulated frames increases. We wish to keep the computation cost constant regardless of the duration of the pre-simulated sequence. A common solution is to construct a lookup table filled with values pre-simulated by the interpolator on grid sampling. In order to reduce the memory usage of the lookup table, the dimension of XN,Pre-simulated was reduced prior to the construction of the interpolator, by Principal Component Analysis <ref type="bibr" target="#b15">[16]</ref>. The first three principal components, which describe 95 % of the average variability of the data, are used.</p><p>The positions of the vertices are corrected after every simulation loop. The velocity is updated as well. Its new value is set to the sum of the original velocity and the velocity due to the modification of the vertex position (line 11 on Figure <ref type="figure" target="#fig_8">9</ref>). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4.">Collision hulls</head><p>To prune unnecessary collision tests, we pre-compute what we term "collision hulls" that exploit the skin-tocloth relation obtained from the pre-simulated sequence. These are built once at the beginning of the simulation (prior to the runtime simulation) after the SDD has been computed on the coarse mesh, using the pre-simulated sequence. At each pre-simulated frame, we calculate the difference between the SDD motion model and the presimulated cloth model in the local coordinate system of the SDD. After a sweep, we get a set of points that cover the path a patch takes during the simulation. The smallest convex hull that contains all these points is generated for every patch using the "Quickhull" algorithm presented by Barber et al <ref type="bibr" target="#b2">[3]</ref>.</p><p>Given enough variation and range of character motion, we expect these hulls to cover the allowable positions of corresponding cloth patches during the runtime simulation. By using collision hulls, collision tests are restricted to a small area around the patch; the overall computation can be significantly reduced in comparison to classical collision detection methods in which collisions are computed between the whole skin and cloth surface. Note that the collision hulls are generated for loose and floating garment regions only.</p><p>The collision hulls of tight regions are small enough to be approximated by a single point. Figure <ref type="figure" target="#fig_9">10(d</ref> Collision handling at runtime consists of correcting the position of coarse mesh vertices after every simulation step so that they remain inside their respective hulls. The algorithm is summarized as follows: Thus, collision detection returns to computing if the particle is in its associated collision hull (line 14 on Figure <ref type="figure" target="#fig_10">11</ref>); the Gilbert-Johnson-Keerthi algorithm <ref type="bibr" target="#b7">[8]</ref> is ideally suited to this task. We used constrained dynamics <ref type="bibr" target="#b21">[22]</ref> to handle the collision response (i.e. modification of position and velocity in response to collision detection) at line 15. Collision detection is also computed between floating regions and skeleton joints as follows: </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5.">Runtime computations</head><p>The real-time computation of global cloth movements is obtained with a mass-spring system together with the collision response and post-correction described above. The runtime computation of the coarse mesh is obtained in the following order:</p><p>• Mass-spring computation (Figure <ref type="figure" target="#fig_5">6</ref>)</p><p>• Post-correction (Figure <ref type="figure" target="#fig_8">9</ref>)</p><p>• Collision response on hulls (Figure <ref type="figure" target="#fig_10">11</ref>)</p><p>• Collision response on floating garments (Figure <ref type="figure" target="#fig_11">12</ref>) Note that the collision response on floating garments comes last to ensure collision avoidance between cloth and body.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Generating garment details</head><p>So far we have shown the first part of our simulation, that is, the coarse level simulation. We continue now to describe the second part of the simulation, by which detailed cloth shape such as wrinkles or folds are depicted. Again, the main challenge here is obtaining the highest possible realism while maintaining acceptable computation load, in order to meet the real-time requirements.</p><p>As recognized in earlier works <ref type="bibr" target="#b8">[9]</ref> [13], wrinkles can be efficiently animated with a geometric method as they are geometric in nature. Unlike previous methods, however, our wrinkling function is not hand-drawn, nor geometrically approximated, but rather trained from on the analysis of the pre-simulated sequence.</p><p>In this work, we choose to represent the wrinkle displacement in the local coordinate system used for SDD. This makes our wrinkle parameterization invariant of all joints of higher hierarchy than the currently influencing joint. Several techniques exist for shape interpolation using examples, such as Radial Basis Functions or parametric interpolation. We have used linear interpolation in which coefficients are defined by multi-linear regression on the pre-simulated animation, since it provides satisfactory results at a very low computation cost. For every vertex x in a patch, the interpolator function takes the associated mass point in the coarse mesh, and its neighbors as input. To calculate the position of x from the input, the wrinkle interpolator interpolates the positions of the coarse mesh points, weighted by coefficients determined the regression model of the following form:</p><p>Error! Objects cannot be created from editing field codes. The values α, α P and α N are the interpolation coefficients. They are defined by multi-linear regression on a set of pairs (positions of coarse mesh vertices, fine mesh vertices) extracted from the pre-simulated cloth sequence. X P and X N are respectively the position of the vertex x and its neighbors; they are all expressed in the SDD coordinate system of x.</p><p>Despite its simplicity, linear interpolation works fairly well provided a sufficient number of pre-simulated frames for the multi-linear regression. A condition of a good working interpolator is that the input (i.e. position of the coarse mesh vertices) should be within the range of the pre-simulated data. In other word, the wrinkle interpolator can only work for the input range for which it has been trained. This condition is maintained thank to the data-driven post-correction (see <ref type="bibr">Section 5.3)</ref>. This also keeps the smoothness of the boundaries between patches. Figure <ref type="figure" target="#fig_13">14</ref> illustrates the deformation of the wrinkles. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Results and Discussion</head><p>We measure and validate the proposed real-time cloth simulation method along three criteria: the variety of clothes to be simulated, the computation speed and the range of body motion in the pre-simulated cloth sequence. Pre-simulated sequences obtained by the cloth simulator of Volino et al <ref type="bibr" target="#b20">[21]</ref> were used in our preprocessing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1.">Variety of clothes</head><p>We used our framework to different types of clothes, as shown on the demonstration video.</p><p>• The "evening" dress (Figure <ref type="figure" target="#fig_13">14</ref>) is chosen to demonstrate our wrinkle interpolator on large garment regions.</p><p>• The "cocktail" dress (Figure <ref type="figure" target="#fig_7">18</ref>) is a relatively complex model; the bottom is composed of two layers of tissues and has folds made of large number of vertices, inducing many self collisions.</p><p>• The "Jeans" outfit is a good example of a model where the SDD based geometric approximation can reduce the number of mass points substantially by simulating only a few regions that contribute significantly to the dynamic behavior.</p><p>Our simulator behaves fairly well on a wide variety of clothes, including those with highly stiff mechanical properties. Figure <ref type="figure" target="#fig_7">18</ref> show the pre-processing and runtime simulation results for the cocktail dress. Moreover, performance will increase due to the fact that the smallest number of triangles will be processed for the real-time rendering.</p><p>However, the method may introduce flaws in simulation for some tight clothes, due to the approximate handling of collision detection. For some body movements, the skin surface may slightly intersect the cloth surface. Similarly, the same problem may arise for self-collisions on clothes. The deletion of the skin triangles covered by the garment surface can partially correct this drawback.</p><p>Note that the cloth simulation is also restricted to clothes worn on bodies. While offering high computation speed, the cloth simulator cannot handle some cloth movements such as those appearing during dressing or undressing. More generally, the clothes are unable to interact with objects other than those that have been taken into consideration during the pre-processing phase. The list of objects that can potentially interact with clothes and the way these objects interact are defined at the preprocessing stage and cannot be changed during the realtime simulation. Finding a method to update the list of possible interacting objects automatically could be a subject for future research.   The pre-processing of all the cloth models took less than 10 minutes. All examples run in real-time at approximately 25 to 50 frames per second (fps), with the coarse mesh deformation process taking about 75 % of the total CPU time. As expected, the duration of the pre-simulated sequence is not a factor of the runtime computation speed. In practice, the performance lowers down at a low rate as the complexity of the collision hulls increases, which tends to be governed by the number of pre-simulated frames (see Section 5.3).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2.">Variety of clothes</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3.">Variety of clothes</head><p>As expected, the quality of the simulation depends on the number and variety of examples -the pre-simulated sequence in our case. To show that the simulator faithfully recreates the cloth movement used for training, we compared the real-time simulation with the presimulated one in the first video. The character walks at a normal pace without any fast movements.</p><p>In the second video, different body movements from those of the training were supplied as input to our realtime simulator and the results are compared with the ones generated with a high quality simulator.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Ratio of</head><p>Joint angle range of the pre-simulated sequence Joint angle range of the real-time sequence Simulation error in cm To measure the simulation quality, we compared our simulation results with the pre-simulated sequence, using a deformation metric. It measures the still shape and movement by the sum of edge length difference and the mass velocity difference over the cloth mesh. The Figure <ref type="figure" target="#fig_16">16</ref> shows the importance of the variability of the body motion in the pre-simulated sequence. The best quality is achieved when the range of the body motion in the presimulated sequence is approximately 30 % larger than the one used in the real-time simulation.</p><p>Our simulator works well for interpolation (i.e. joint angles within the range of those of the pre-simulated sequence) but often fails for extrapolation. The main reason for this limitation is collision detection, which does not allow the clothes to have different locations on the body from those calculated in the pre-simulated sequence; this makes the clothes being attached rigidly to the skeleton.</p><p>The Figure <ref type="figure" target="#fig_17">17</ref> shows the effect of using motion of different durations (expressed in number of frames) with same joint angle ranges. With less than 70 pre-simulated frames, the real-time simulation loses its quality. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">Conclusion</head><p>The recent advent of cloth simulation techniques has matured enough to produce highly realistic cloth movements on animated characters. However, real-time simulation has been largely unexplored until now.</p><p>This paper presents the first report of a practical and efficient method for handling real-time simulation almost automatically. We used our framework to produce visually pleasing motion of a wide range of clothes. Both the mass-spring system and collision detection have been rewritten to take advantage of the pre-simulated sequence of the clothes to be animated. Consequently, our cloth simulator is able to construct a model for real-time animation without user intervention and can deal with different types of clothes from tight to floating with low computation consumption.</p><p>There are many interesting avenues for future work. First, the approach could be extended to simulating other physics-based models such as hair and fluid. We also believe that the work on collision hulls is promising. The current mesh model of collision hulls could be replaced by implicit surfaces or voxel maps. Therefore, for a cloth vertex, it could be possible to compute several collisions hulls in relation to different objects in the scene and to compute their intersection for real-time collision detection. By doing so, it may be possible to process collisions on a higher number of objects while maintaining low computation cost. We also believe that the precision of the collision detection could be improved by replacing the convex shape by a surface to follows more closely the trajectories of the vertices.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. The chosen strategies to save computation time.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. Workflow of our approach.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. Twisting of ⅔ π radians: (a) the classical SDD, (b) the modified SDD in our approach and (c) its corresponding coordinate systems.</figDesc><graphic coords="4,238.56,260.34,51.24,72.30" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4. Two examples of segmentation with (a) patches of large (260 cm2), and (b) small surface area (95 cm2). (c) is the coarse mesh corresponding to the segmentation (b). Different colors are randomly assigned to the patches.</figDesc><graphic coords="4,482.88,428.94,66.54,125.64" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 .</head><label>5</label><figDesc>Figure 5. (a) and (b) influence of the joints on the dress shown in color, (c) quality of the fitting of the SDD data, (d) the three regions computed on an analysis of the residual values.</figDesc><graphic coords="5,240.42,471.90,51.72,99.06" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 .</head><label>6</label><figDesc>Figure 6. The coarse mesh is computed with both mass-spring system and SDD.</figDesc><graphic coords="5,240.42,361.44,51.72,99.84" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 .</head><label>7</label><figDesc>Figure 7. Post-correction of the mass-spring system.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 8 .</head><label>8</label><figDesc>Figure 8. Construction of the lookup table for the datadriven post-correction.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 9 .</head><label>9</label><figDesc>Figure 9. Post-correction of the mass-spring system.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 10 .</head><label>10</label><figDesc>Figure 10. Computation of the collision hull for each cloth patch; (a): residual values of SDD attachment fitting, (b): computation of local cloth displacement, (c): convex hulls covering all displacements, (d): resulting collision hulls.</figDesc><graphic coords="7,60.36,113.10,64.56,124.44" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 11 .</head><label>11</label><figDesc>Figure 11. Collision handling using collision hulls (loose and floating regions).</figDesc><graphic coords="7,318.06,394.62,61.02,106.08" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 12 .</head><label>12</label><figDesc>Figure 12. Collision handling on floating regions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 13 .</head><label>13</label><figDesc>Figure 13. Shape of the patch with respect to the positions of the control point P and its neighbors N1, N2, and N3.</figDesc><graphic coords="7,423.18,479.52,120.24,56.82" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 14 .</head><label>14</label><figDesc>Figure 14. The wrinkling interpolator in action: wrinkles in (b) and (d) are generated geometrically with (a) and (c) as input.</figDesc><graphic coords="8,61.92,347.28,230.10,93.18" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 15</head><label>15</label><figDesc>Figure 15 summarizes the performance of our simulator on a 1 GHz Windows PC.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Figure 15 .</head><label>15</label><figDesc>Figure 15. Computation speed.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Figure 16 .</head><label>16</label><figDesc>Figure 16. Estimation of the error when reducing the range of body motion in the pre-simulated sequence.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Figure 17 .</head><label>17</label><figDesc>Figure 17. Estimation of the error when reducing the number of pre-simulated frames.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.">Acknowledgements</head><p>This work is supported by the Swiss National Science Foundation (SNSF). Thanks to Marlène Arévalo and Christiane Luible for their design work to the garment models illustrating this paper.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Linear Combination of Transformations</title>
		<author>
			<persName><forename type="first">M</forename><surname>Alexa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 2002 Conference Proceedings, Annual Conference Series</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="380" to="387" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Large steps in cloth simulation</title>
		<author>
			<persName><forename type="first">D</forename><surname>Baraff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Witkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH</title>
		<meeting>ACM SIGGRAPH</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1998">1998</date>
			<biblScope unit="page" from="43" to="54" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">The Quickhull Algorithm for Convex Hulls</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">B</forename><surname>Barber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">P</forename><surname>Dobkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">T</forename><surname>Huhdanpaa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Mathematical Software</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="469" to="483" />
			<date type="published" when="1996">1996</date>
			<publisher>ACM Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Numerical Analysis, Fifth Edition</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Burden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Faires</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993">1993</date>
			<publisher>PWS Publishing</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Real-time Animation of Dressed Virtual Humans</title>
		<author>
			<persName><forename type="first">F</forename><surname>Cordier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Magnenat-Thalmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eurographics, Blackwell publishers</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="327" to="336" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Stable but Responsive Cloth</title>
		<author>
			<persName><forename type="first">K.-J</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H.-S</forename><surname>Ko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH 2002</title>
		<meeting>ACM SIGGRAPH 2002</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="604" to="611" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Interactive Animation of Structured Deformable Objects</title>
		<author>
			<persName><forename type="first">M</forename><surname>Desbrun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Schröder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">H</forename><surname>Barr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graphics Interface&apos;99 proceedings</title>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A fast procedure for computing the distance between complex objects in three-dimensional space</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">G</forename><surname>Gilbert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">W</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">S</forename><surname>Keerthi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Journal of Robotics and Automation</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="193" to="203" />
			<date type="published" when="1988">1988</date>
			<publisher>IEEE Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Animating Wrinkles on Clothes</title>
		<author>
			<persName><forename type="first">S</forename><surname>Hadap</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Bangarter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Volino</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Magnenat-Thalmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Visualization &apos;99</title>
		<meeting><address><addrLine>San Francisco, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="175" to="182" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Precomputing Interactive Dynamic Deformable Scenes</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">L</forename><surname>James</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Fatahalian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="165" to="172" />
			<date type="published" when="2003">2003</date>
			<publisher>ACM Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A practical dynamics system</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Kacic-Alesic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Nordenstam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Bullock</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGGRAPH/Eurographics Symposium on Computer Animation</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="7" to="16" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Bilayered Approximate Integration for Rapid and Plausible Animation of Virtual Cloth with Realistic Wrinkles</title>
		<author>
			<persName><forename type="first">Y.-M</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H.-G</forename><surname>Cho</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Animation</title>
		<imprint>
			<biblScope unit="page" from="203" to="214" />
			<date type="published" when="2002">2002. 2002</date>
			<publisher>IEEE Press</publisher>
			<pubPlace>Switzerland</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">An efficient animation of wrinkled cloth with approximate implicit integration</title>
		<author>
			<persName><forename type="first">Y.-M</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J.-H</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H.-G</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D.-H</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Visual Computer Journal</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="147" to="157" />
			<date type="published" when="2001">2001</date>
			<publisher>Spinger-Verlag</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Interactive Animation of Cloth-like Objects in Virtual Reality</title>
		<author>
			<persName><forename type="first">M</forename><surname>Meyer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Debunne</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Desbrun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">H</forename><surname>Barr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Journal of Visualization and Computer Animation</title>
		<imprint>
			<publisher>John Wiley &amp; Sons</publisher>
			<date type="published" when="2001">2001</date>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="1" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Building Efficient, Accurate Character Skins from Examples</title>
		<author>
			<persName><forename type="first">A</forename><surname>Mohr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Gleicher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="165" to="172" />
			<date type="published" when="2003">2003</date>
			<publisher>ACM Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Numerical Recipes in C, The art of scientific computing</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">H</forename><surname>Press</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">P</forename><surname>Flannery</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">A</forename><surname>Teukolsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">T</forename><surname>Vetterling</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988">1988</date>
			<publisher>Cambridge University Press</publisher>
			<biblScope unit="page" from="412" to="420" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Deformation Constraints in a Mass-Spring Model to Describe Rigid Cloth Behavior</title>
		<author>
			<persName><forename type="first">X</forename><surname>Provot</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graphics Interface&apos;95 proceedings, A K Peters</title>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="147" to="154" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Multi-Layer Garments Using Hybrid Models</title>
		<author>
			<persName><forename type="first">I</forename><surname>Rudomin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Meln</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000. 2000</date>
			<publisher>Springer</publisher>
			<biblScope unit="page">118</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Deformable Models</title>
		<author>
			<persName><forename type="first">D</forename><surname>Terzopoulos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Fleischer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The Visual Computer</title>
		<imprint>
			<publisher>Springler-Verlag</publisher>
			<date type="published" when="1988">1988</date>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="306" to="331" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Fast Cloth Animation on Walking Avatars</title>
		<author>
			<persName><forename type="first">T</forename><surname>Vassilev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Spanlang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Eurographics, Blackwell Publishers</title>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="260" to="267" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Untangling cloth</title>
		<author>
			<persName><forename type="first">D</forename><surname>Baraff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">P</forename><surname>Witkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Kass</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transaction on Graphics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="862" to="870" />
			<date type="published" when="2003">2003</date>
			<publisher>ACM Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Robust treatment of collisions, contact and friction for cloth animation</title>
		<author>
			<persName><forename type="first">R</forename><surname>Bridson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Fedkiw</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Anderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Graphics</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="594" to="603" />
			<date type="published" when="2003">2003</date>
			<publisher>ACM Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
