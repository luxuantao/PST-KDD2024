<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Proposed Approach for Safety Management in Medical Software Design</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Reza</forename><surname>Rafeh</surname></persName>
							<email>r-rafeh@araku.ac.ir</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Department of Computer Engineering</orgName>
								<orgName type="department" key="dep2">Faculty of Engineering</orgName>
								<orgName type="institution">Arak University</orgName>
								<address>
									<settlement>Arak</settlement>
									<country key="IR">Iran</country>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Department of Computer Engineering</orgName>
								<orgName type="department" key="dep2">Faculty of Engineering</orgName>
								<orgName type="institution">Arak University</orgName>
								<address>
									<settlement>Arak</settlement>
									<country key="IR">Iran</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A Proposed Approach for Safety Management in Medical Software Design</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">CB0494F7816DFA518FA9FD1C362FD220</idno>
					<idno type="DOI">10.1007/s10916-012-9925-0</idno>
					<note type="submission">Received: 28 June 2012 / Accepted: 29 December 2012</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T15:52+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Safety</term>
					<term>Software development</term>
					<term>Medical software</term>
					<term>Hazard</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Safe behavior of modern medical systems is the most important issue in this industry. Software has to follow safety instructions to keep the system away from any error situation. This paper proposes a new approach for safety management which can be used in different phases of software development before implementation and disposal phase. In the proposed approach safety begins from requirements as the infrastructure of design and continues through other phases of software production.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Introduction</head><p>Modern medical systems usually are classified as safetycritical systems. An error happening in such systems can threaten patients' lives. As a result, designing a safe system for medical applications is an important research area in computer engineering. Safe systems consist of safe software and safe hardware. There are three main approaches to improve the software safety; theorem proving <ref type="bibr" target="#b0">[1]</ref>, model checking <ref type="bibr" target="#b1">[2]</ref> and runtime verification <ref type="bibr" target="#b2">[3]</ref>. All safety paradigms usually follow one of these approaches or more. For example, Runtime Reflection <ref type="bibr" target="#b2">[3]</ref> follows runtime verification and the approach introduced in <ref type="bibr" target="#b3">[4]</ref> follows a combination of theorem proving and model checking.</p><p>Safety approaches usually use formal methods to specify the system or monitor of the system behavior; examples are Timed Automata <ref type="bibr" target="#b4">[5]</ref> and Event-B <ref type="bibr" target="#b5">[6]</ref>. Some approaches use a single formal method such as Z <ref type="bibr" target="#b6">[7]</ref> to specify the system. Others combine formal methods, for example verifying the Petri-Net model using Z <ref type="bibr" target="#b7">[8]</ref>. However, none of these approaches take all safety angles into consideration. Safety, especially in medical software, must be seen in all software production phases. There are four phases in software production: Planning, Requirements Specification, Designing, and Implementation. As a result we have five safety phases <ref type="bibr" target="#b8">[9]</ref>: Safety Planning phase and Preliminary Hazard Identification phase in Planning phase, Functional Hazard Assessment phase in Requirements Specification phase, Preliminary System Safety Assessment phase through Designing phase, and System Safety Assessment phase through Implementation to Disposal phase. This means that safety in medical software starts from planning phase and continues until using the software. This is called safety lifecycle. We investigate the medical software safety in this paper and propose a three layer management based on safety lifecycle for medical software.</p><p>The paper is organized as follows. In Proposed approach section we propose our three layer approach in a high level view. In Sections 3 to 5 each layer is explained in more details. Finally, Conclusion section concludes the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Proposed approach</head><p>Achieving a high degree of safety is impossible without having a total viewpoint of the system. A perfect approach for designing safe software in medical systems must consider safety in all phases of the safety lifecycle. To design a safe software, we consider safety in three layers; Requirements, Design, and Automatic Management (Fig. <ref type="figure">1</ref>).</p><p>A safe design is not reachable without completing requirements. Even each design needs safety checks after being completed. Each layer includes four steps performed spirally until the condition of transition to the next layer is satisfied.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Requirements layer</head><p>In this layer we specify all safety requirements for our design. This layer includes four steps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>High level design</head><p>The first step is based on the safety planning phase in the safety lifecycle. The aim of this step is customer requirements identification and preliminary resource assessment. This step identifies goals of the system, environments, users, operators, and preliminary resources. The high level design of system has to be improved by a supervisor team including project manager, design manager, development manager, test manager and customer agent along the spiral path of the requirements layer to reach a balance in cost, time, customer satisfaction and safety satisfaction in all angles of the system production.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Requirements</head><p>The second step is based on the planning phase in the safety lifecycle. This process specifies requirements of the system based on the high level design of the system. A requirement specification is a phrase that specifies properties and capabilities of a system, a component, or an application formally.</p><p>There are four kinds of requirements: system requirements, hardware requirements, functional requirements and non functional requirements <ref type="bibr" target="#b9">[10]</ref>.</p><p>A good requirement specification must be mandatory, cohesive, consistent, correct, feasible, relevant, unambiguous, uniquely identifiable, verifiable, and qualifier of what to do not how to do <ref type="bibr" target="#b10">[11]</ref>.</p><p>In this step requirements can be specified using natural languages, mathematical statements, or formal languages. Requirements become complete during spiral repeats of the requirements layer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>System hazards</head><p>The third step is based on the preliminary hazard identification and functional hazard analysis phases of the safety lifecycle. At the beginning, preliminary hazards are identified using mind storms and historical information. Hazards are classified into hardware hazards, software hazards, procedural hazards, human factors, environment hazards and interface hazards. For preliminary hazards severity of each factor has to be determined for the next phase of this step. Most of the hazard severity standards propose four levels for hazard severity classification; catastrophic, critical, marginal, and negligible <ref type="bibr" target="#b11">[12]</ref>. System hazard analysis helps us to obtain software safety requirements <ref type="bibr" target="#b13">[13]</ref>. Preliminary analyses in addition to complement analyses in the next phase configure the backbone of the system safety.</p><p>We use FMEA technique as a complement analysis for hazard analysis. This technique is classified as Structural FMEA for hardware analysis, Functional FMEA for system functions analysis and Combined FMEA <ref type="bibr" target="#b13">[13]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Safety requirements</head><p>The fourth step is based on the functional hazard assessment phase of the safety lifecycle. In this step all of the safety requirements must be determined. Safety requirements have a close relationship with quality requirements that play an important role in failing or succeeding a Safety-Critical system. According to researchers' reports, one of the main reasons for failure in safety-critical systems is the lack of the safety requirements <ref type="bibr" target="#b14">[14]</ref>. Some of the safety requirements are constraints, chains of events, time constraints, fault tolerance equipments and warning interfaces. Safety Fig. <ref type="figure">1</ref> Proposed model for designing safe medical software requirements are classified to pure safety requirements, safety significant requirements, safety system requirements, and safety constraints <ref type="bibr" target="#b10">[11]</ref>.</p><p>The requirements layer repeats over and over until the proposed preliminary design reaches to a suitable level in safety capability, cost, time, and completeness from the supervisor team viewpoint.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Design layer</head><p>In this layer we expand high level design based on safety requirements. This layer consists of three steps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Design</head><p>One of the best approaches for designing Safety-Critical software is identifying the safety requirements and then modeling the system such that it satisfies all safety requirements <ref type="bibr" target="#b14">[14]</ref>. In this step, at first, we expand the high level design to a graphical design. We propose two system units: operation unit that interacts with environment (the patient) directly, and control unit that controls and supports operation unit.</p><p>In the next step, logical behavior is extracted from the interactive model. We can benefit of using formal methods for modeling medical systems. Each formal method has its own characteristics and may be used for modeling a system based on its characteristics. Formal methods are classified into 3 levels <ref type="bibr" target="#b15">[15]</ref>; the first level has a low formality and consists of natural language and diagrams. The second level consists of model oriented languages that model behavior of the system using a mathematical approach. This level has a medium formality. The third level consists of propertyoriented methods that specify properties and their relations in a component and use them for consistency and completeness analyses. This level has a high formality. We use Timed Transition Petri-Net as formal method since it is time oriented and tractable. In addition, we use Z <ref type="bibr" target="#b16">[16]</ref> to specify textual and mathematical specifications as a complement for Petri-Net. Each Petri-Net model consists of places, tokens, arcs and transitions. Each transition has its own conditions that when satisfied cause tokens on the transition move to the next place.</p><p>Design process repeats over and over until all requirements are satisfied. In a medical system some components need a high level safety which must be specified using a method with high formality. Some components need a smaller safety level which must be modeled using a method with medium or low level formality. User interfaces are designed during spiral repeating of the design layer. Warning equipments are placed in the design, and risk reduction predictions are added to the design. It goes without saying that for a Safety-Critical system the user-safety factor has more priority than userfriendly factor <ref type="bibr" target="#b17">[17]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Design assessment</head><p>The second process is based on the preliminary system safety assessment of the safety lifecycle. Hazard analysis continues in the design layer until the design of all components becomes satisfactory. HFMEA and FTA 1 are two techniques used in this step <ref type="bibr" target="#b8">[9]</ref>. In this step, all FMEA worksheets from requirements must be reviewed and updated when necessary. FTA performs FMEA operation recursively; it starts from an unbecoming event and moves down in a tree structure to find all reasons caused this event <ref type="bibr" target="#b13">[13]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Safety test</head><p>The third step is based on the preliminary system safety assessment of the safety lifecycle. Each component must be tested by the test team when its design becomes complete. All designs must confirm safety requirements and satisfy their safety constraints. Model checking and theorem proving are two techniques usually used in this step.</p><p>It is clear that there is no need for high safety level for all components in a medical system. Components that need a high level of safety must be modeled or must be specified with a formal method.</p><p>Therefore, computing status can be specified with a formal method which is supported by model checking tools. On the other side, there are some components which need a low level of safety or are not Safety-Critical at all. Testing these components in this step may be very expensive and time consuming. Therefore, runtime verification or implementation test techniques may be more suitable for these components. The most important notice in this step is that testing techniques usually identify defect existence and do not prove lack of defect <ref type="bibr" target="#b18">[18]</ref>. Processes of this layer repeats spiral over and over until subsystem designs and their relations reach to a comparative maturity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Automatic management layer</head><p>In the both requirements layer and design layer, there are some techniques for controlling the safety at the corresponding layer. However, these techniques cannot guarantee the safety for all components of a medical system for two reasons: 1) many of techniques suffer 1 Fault tree analysis from human faults specially in requirements extracting.</p><p>2) Some techniques are expensive and time consuming so they are not suitable for all components. In other words, it is always possible an unexpected error redound to system failure in runtime. NASA Mars Polar Lander crashed in 1999 is one of these failures which was occurred because of a fault not been caught by system tests <ref type="bibr" target="#b19">[19]</ref>.</p><p>It is necessary to monitor behavior of the system in runtime to catch and manage unexpected faults, and then prevent from system failure. We do these operations using an automatic management structure. All the main states of the system are monitored continuously and any critical behavior of the system must be confirmed by this structure before occurrence to insure the safety. This structure has four units: log management, change management, prevention management and disaster management which are inspired by information technology infrastructure library (ITIL) <ref type="bibr" target="#b20">[20]</ref>. As a result, this layer consists of four steps as follows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Log management</head><p>In the first step, log management is designed. This unit logs the main sates of the system when they change. Thus, all required states must be identified first. The states whose changes may result in a critical behavior are suitable for logging.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Change management</head><p>In the second step, change management unit is designed. Critical behavior of the system can be changed when change management confirms that this change is safe. This unit is constructed from the high level constraints of the system and the environment conditions. Before any critical behavior occurs, required states are requested from log management and then if all of the values are acceptable, the occurring permission becomes true else it becomes false. For example, the reason of NASA Polar Lander crash was wrong diagnosis of contacting the ground and then turning off the landing motor in 1,800 m from Mars surface. This fault occurred because of an inconsistency in testing operation <ref type="bibr" target="#b19">[19]</ref>. Actually the landing motor of Polar Lander was designed to be turned off when its feet contacted the ground. However, if there was a change management unit in it, it could check the states of contacting the ground, height from the ground, and time after shooting the parachute.</p><p>At least two of three conditions mentioned above must be met for the change management unit to issue the permission. Change management unit in design acts similar to exception management in programming.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Prevention management</head><p>In the third step, prevention management unit is designed. We can always monitor the runtime behavior of the system based on the safety constraints to find inconsistencies and if necessary calling disaster management.</p><p>There are two major jobs for prevention management: 1) Detecting current disaster in runtime. 2) Detecting faults of the system before entering to critical states in runtime. Monitoring operation can be executed in parallel with the main system or can be called in some stages of the system execution. We usually construct management unit based on the safety constraints of the system. Prevention management and disaster management together can be a complement for change management.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Disaster management</head><p>In the fourth step, disaster management unit is designed. Disaster management consists of solutions to escape from bad situations of the system, those which cannot be predicted in normal behavior and may cause a catastrophic status. Disaster management can be as simple as showing a warning to the user, or as complex as replacing a redundant hardware, or as emergent as turning off the whole system. Disaster management is the only operative unit among all management units. A combination of the above units can be used in medical systems based on the needed safety level. The combination of log management and change management is suitable for low level safety. Combination of log management, prediction management and disaster management is suitable for medium level safety. An adapted combination of the four management units is suitable for high level safety.</p><p>These three layers can repeat spirally for designing all subsystems and their relation in the main system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusion</head><p>Different approaches are available to improve the safety of medical software. However, they usually focus on one phase of the software production. These techniques are essentially efficient when they are given perfect initial data, hazard resources and requirement resources. In other words, safety begins from planning phase and extends to requirements, design, and implementation phases. Even in modern medical systems, safety has to be improved in the operation phase.</p><p>In this paper we proposed a new approach to analyze and improve safety of medical software from different viewpoints. This approach is a combination of safety techniques which concerns of safety in planning, requirements, and design phases of software development. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>9925, Page 4 of 5 J</head><label>5</label><figDesc>Med Syst (2013) 37:9925</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Theorem proving</title>
		<author>
			<persName><forename type="first">J</forename><surname>Slagle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shankar</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003">2003</date>
			<publisher>John Wiley and Sons Ltd</publisher>
			<pubPlace>Chichester</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Principles of model checking</title>
		<author>
			<persName><forename type="first">C</forename><surname>Baier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Katoen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008">2008</date>
			<publisher>Cambridge</publisher>
			<pubPlace>London, England</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Checking and enforcing safety: Runtime verification and runtime reflection</title>
		<author>
			<persName><forename type="first">M</forename><surname>Leucker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ERCIM News</title>
		<imprint>
			<biblScope unit="volume">75</biblScope>
			<biblScope unit="page" from="35" to="36" />
			<date type="published" when="2008">2008</date>
			<publisher>ERCIM EEIG</publisher>
			<pubPlace>Sophia Antipolis Cedex, France</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">LaQuSo: Using formal methods for analysis, verification and improvement of safety-critical software</title>
		<author>
			<persName><forename type="first">S</forename><surname>Smetsers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Eekelen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ERCIM News</title>
		<imprint>
			<biblScope unit="volume">75</biblScope>
			<biblScope unit="page" from="36" to="37" />
			<date type="published" when="2008">2008</date>
			<publisher>ERCIM EEIG</publisher>
			<pubPlace>Sophia Antipolis Cedex, France</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A design choices for high-confidence distributed real-time software. Leveraging Appl. Formal Methods, Verification, Validation</title>
		<author>
			<persName><forename type="first">S</forename><surname>Fischmeister</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Azim</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Lect. Notes. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">6416</biblScope>
			<biblScope unit="page" from="97" to="111" />
			<date type="published" when="2010">2010</date>
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Trustable formal specification for software certification. Leveraging Appl. Formal Methods, Verification, Validation</title>
		<author>
			<persName><forename type="first">D</forename><surname>Mery</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">K</forename><surname>Singh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Lect. Notes. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">6416</biblScope>
			<biblScope unit="page" from="312" to="326" />
			<date type="published" when="2010">2010</date>
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Software engineering, 8th edition</title>
		<author>
			<persName><forename type="first">I</forename><surname>Sommerville</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007">2007</date>
			<publisher>Pearson Education</publisher>
			<pubPlace>China</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Formal verification of medical monitoring software using Z language: A representative sample</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Babamir</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Borhani</surname></persName>
		</author>
		<idno type="DOI">10.1007/s10916-011-9739-5</idno>
	</analytic>
	<monogr>
		<title level="j">J. Med. Syst. Springer</title>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Practical ways of improving product safety in industry</title>
		<author>
			<persName><forename type="first">S</forename><surname>Gabriele</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Werner</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-1-84800-100-8_11</idno>
		<imprint>
			<date type="published" when="2008">2008</date>
			<publisher>Springer</publisher>
			<biblScope unit="page" from="177" to="193" />
		</imprint>
	</monogr>
	<note>Improvements in System Safety</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Engineering safety-and security-related requirements: Tutorial</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">G</forename><surname>Firesmith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE International Requirements Engineering Confencee</title>
		<imprint>
			<biblScope unit="page">15</biblScope>
			<date type="published" when="2007">2007</date>
			<pubPlace>New Delhi, India</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Engineering safety-related requirements for software-intensive systems: Tutorial</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">G</forename><surname>Firesmith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">27th International Conference on Software Engineering (ICSE&apos;2005) in</title>
		<meeting><address><addrLine>Louis, Missouri, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Risk assessment for M42 active traffic management</title>
		<author>
			<persName><forename type="first">S</forename><surname>Tucker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Halbert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Dev.Risk-Based Approaches Saf</title>
		<imprint>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="25" to="45" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title/>
		<author>
			<persName><surname>Springer</surname></persName>
		</author>
		<idno type="DOI">10.1007/1-84628-447-3_2</idno>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Hazard analysis techniques for system safety</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">A</forename><surname>Ericson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005">2005</date>
			<publisher>Wiley-Interscience</publisher>
			<pubPlace>Hoboken</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">An approach to modeling software safety in safety-critical systems</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">B</forename><surname>Swarup</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">S</forename><surname>Ramaiah</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="311" to="322" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A comprative study of formal methods for safety critical software in nuclear power plant</title>
		<author>
			<persName><forename type="first">S</forename><surname>Sohn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Seong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Korean Nucl. Soc</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="537" to="548" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Spivey</surname></persName>
		</author>
		<title level="m">The Z notation: A reference manual, 2nd edition</title>
		<meeting><address><addrLine>Oxford</addrLine></address></meeting>
		<imprint>
			<publisher>Prentice Hall</publisher>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">NASA software safety guidebook, NASA-GB-8719</title>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="volume">13</biblScope>
			<pubPlace>B. NASA, USA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>National Aeronautics and Space Administration</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Notes on structured programming</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Gahl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Dijkstra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">A R</forename><surname>Hoare</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1972">1972</date>
			<publisher>Academic Press London</publisher>
			<pubPlace>London</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Software testing. Sams</title>
		<author>
			<persName><forename type="first">R</forename><surname>Patton</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001">2001</date>
			<pubPlace>Indianapolis</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Office of Government Commerce, Intruduction to ITIL</title>
	</analytic>
	<monogr>
		<title level="j">TSO</title>
		<imprint>
			<date type="published" when="2006">2006</date>
			<pubPlace>London</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
