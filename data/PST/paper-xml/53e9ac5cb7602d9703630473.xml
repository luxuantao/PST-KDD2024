<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Computer Modelling Of Fallen Snow</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Paul</forename><surname>Fearing</surname></persName>
							<email>fearing@cs.ubc.ca</email>
							<affiliation key="aff0">
								<orgName type="institution">University of British Columbia</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Computer Modelling Of Fallen Snow</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">C05B1FD602C5F0EB8FE21F0DC5D0FBFA</idno>
					<note type="submission">Figure 1: A sudden snowfall comes to the North Pole.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T15:48+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>CR Categories: I.3.5 [Computer Graphics]: Computational Geometry and Object Modelling-Physically based modelling</term>
					<term>J.2 [Physical Sciences and Engineering]: Earth and atmospheric sciences</term>
					<term>snow, avalanches, stability, natural phenomena</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>In this paper, we present a new model of snow accumulation and stability for computer graphics. Our contribution is divided into two major components, each essential for modelling the appearance of a thick layer of snowfall on the ground.</p><p>Our accumulation model determines how much snow a particular surface receives, allowing for such phenomena as flake flutter, flake dusting and wind-blown snow. We compute snow accumulation by shooting particles upwards towards the sky, giving each source surface independent control over its own sampling density, accuracy and computation time. Importance ordering minimises sampling effort while maximising visual information, generating smoothly improving global results that can be interrupted at any point.</p><p>Once snow lands on the ground, our stability model moves material away from physically unstable areas in a series of small, simultaneous avalanches. We use a simple local stability test that handles very steep surfaces, obstacles, edges, and wind transit. Our stability algorithm also handles other materials, such as flour, sand, and flowing water.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>One of nature's greatest beauties is the way fresh snow covers the world in a perfect blanket of crystalline white. It replaces sharp angles with gentle curves, and clings to surfaces to form ghostly silhouettes.</p><p>In many countries, snow is a common fact of life during the winter months. For example, January snow coverage in the Northern Hemisphere has ranged between 41.7 -49.8 million square kilometres <ref type="bibr" target="#b16">[17]</ref>, or nearly half of the hemisphere's total land mass. A phenomenon that is so common and pervasive is clearly of interest and importance.</p><p>Despite the ubiquitous nature of snow, the entire season of winter has been almost completely ignored by computer graphics research and applications, with the exception of distant snow-capped mountains, and falling snowflakes. Without an automatic model of fallen snow, animators have so far relied upon intuition to produce snowcovered surfaces -an extremely tedious, time-consuming and potentially inaccurate task. A single tree might have a hundred branches, each with a complex drapery of snow, and each avalanching onto branches below, producing subtle second-order accumulation effects.</p><p>Besides the practicalities of research and application, there is another reason for investigating snowfall. Snow transforms commonplace scenes into fantastic wonderlands, greatly changing the appearance and mood of the landscape, allowing us to see familiar sights in a fresh, exciting way.</p><p>This paper presents a new method of snow pack modelling for computer graphics. We are primarily concerned with creating and simulating fallen snow at a scale where the thickness is clearly evident to the viewer. Our main emphasis is on a framework for efficiently handling large scenes with limited resources, and to a much lesser extent on a physically correct model of the snow itself. Snow is arguably one of the world's most complex naturally occurring substances, and accurate simulation is still a significant challenge to snow hydrologists and researchers. <ref type="foot" target="#foot_0">1</ref>Figure <ref type="figure">2</ref>: A snow-covered gazebo with a hole in the roof. All snow was generated automatically, including snow on the mountains.</p><p>In order to generate images of a snowy world, we need to solve two major problems. Snow accumulation requires us to determine how much snow falls upon a scene, and where it accumulates. We simulate this with an adaptive particle/surface hybrid that addresses the proper allocation and conservation of snow mass around and under obstacles, the random nature of snowflake motion, and simple in-transit wind effects.</p><p>As snow accumulates, we compute snow stability in order to determine how much mass any particular surface can support. If not blocked by an obstacle, unstable surfaces release avalanches onto lower surfaces, also potentially covered in snow. We compute snow stability using a set of sequential local equations providing us with good results at a reasonable computational cost. Our approach allows us to simulate varying properties of both snow and like materials, as well as provide a simple model of mass transport due to wind.</p><p>Finally, we transform our model of accumulated, stable snow pack into a set of smoothly joining 3D surfaces that can be included in scenes or animations. During this step we can include bridging effects between nearby surfaces, as well as wind cornices. We augment our "thick" snow surfaces with flake dusting textures to provide extra noise and visual complexity.</p><p>Because of the sheer size and complexity of snowy scenes, our method is also inherently concerned with the practical issues of speed and control. Our primary contribution to this area is the counter-intuitive idea that snowflakes are shot upwards from individual surfaces, rather than dropped downwards from the sky. Giv-ing individual surfaces control over their own "snowy destiny" allows us to prioritise computational effort on any number of criteria, including surface slope, area, distance to the camera, likelihood of interesting occlusions, or other measures of visual interest. Our algorithm provides a continuous, ever-improving result that can be terminated at any time, and still display the full snow depth.</p><p>As shown in Figure <ref type="figure">3</ref>, our snow-adding algorithms are part of a larger pipeline involving a popular commercial animation package. Since the underlying scene remains unchanged, we retain the original lighting and animation and can rely upon strong commercial support for shader libraries and rendering. This makes it quite easy to add snow to a wide range of existing models and animations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>Despite snow's common presence in many parts of the world, there has been little previous research towards a comprehensive model of snow for computer graphics.</p><p>Premoze et al. <ref type="bibr" target="#b15">[16]</ref> generate realistic mountainous terrains that are likely the most convincing snow-covered scenes so far. Starting with a digital elevation model enhanced with an aerial photo, they use a detailed model of snow pack evolution to add zero-thickness patches of seasonal snow cover. The nature of the incoming satellite data restricts the technique to a scale much larger than our primary area of interest.</p><p>Muraoka et al. <ref type="bibr" target="#b12">[13]</ref> simulate thick snow pack by dropping volume elements on the landscape, with provisions for snow evolution Figure <ref type="figure">3</ref>: Overview of the snow pipeline. The underlying scene remains unchanged except for the inclusion of new snow surfaces. <ref type="bibr" target="#b11">[12]</ref>. Unfortunately, in order to cover the landscape with a computationally feasible number of particles, single-scale elements must be inflated to the point where they overwhelm underlying base surface detail.</p><p>Other work tangentially involving snow include Sims <ref type="bibr" target="#b19">[20]</ref>, and Shinya and Fournier <ref type="bibr" target="#b18">[19]</ref>, but both approaches are concerned only with falling and zero-thickness snow. Sumner et al. <ref type="bibr" target="#b20">[21]</ref> simulate tracks in mud, sand, and snow using a regular height field and models of compression and erosion, but do not address snow accumulation. Nishita et. al <ref type="bibr" target="#b14">[15]</ref> introduce a method of snow pack rendering based on multiple scattering of light within the snow volume. Snow surfaces were composed of individual metaballs placed by hand. Other work on snow illumination properties includes Hanrahan and Krueger <ref type="bibr" target="#b2">[3]</ref> and Krueger <ref type="bibr" target="#b4">[5]</ref>.</p><p>Although not about snow, several other papers describe the motion of granular materials. Hsu and Wong <ref type="bibr" target="#b3">[4]</ref> model zero-thickness dust accumulation with textures. Luciani et al. <ref type="bibr" target="#b7">[8]</ref> introduce a multi-scale physical model for granular materials, designed to simulate such granular phenomena as piling, arching, and avalanching in the 2D plane. Li and Moshell <ref type="bibr" target="#b6">[7]</ref> were responsible for a dynamic soil model on a constant regular grid, allowing for volume conservation, soil slippage, and manipulation of soil with a simulated bulldozer. Musgrave et al. <ref type="bibr" target="#b13">[14]</ref> describe terrain generation, including an erosion and thermal weathering model that is quite applicable to snow stability.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Snow Accumulation</head><p>Peculiar to snow is the idea of "flake flutter", where falling ice crystals are affected by crystal shape and atmospheric micro-turbulence. These local disturbances can prevent falling snow from descending in a straight line, instead allowing flakes to sidestep blocking obstacles and land underneath on surfaces that have no direct exposure to the sky. Thus, simulating and modelling an accumulation pattern is akin to raytracing for light, except that we are interested in path (instead of straight-line) visibility.</p><p>Where an obstacle, such as a porch or a bush, blocks the ground underneath, the flake flutter effect eventually produces an occlusion boundary between completely blocked and unblocked areas. An example of this can be seen in Figure <ref type="figure" target="#fig_0">4</ref>(a), where snow accumulates well underneath the overhang of the bush. Over billions of flakes, these occlusion boundaries exhibit a smooth drop-off, where the shape of the curve and amount of snow under an object depends on the size, shape, and number of blocking occlusions, the closeness of the occlusion to the ground, and the magnitude of the fluttering effect.</p><p>For objects with many occluding components (such as a pine tree) the occlusion boundaries are still present, but are much less pronounced. Most falling snow accumulates on the uppermost layer of branches, but some accumulates on the next layer, and most lower branches and the ground get at least a small dusting. This contributes to the visual impression that snow is everywhere in a scene, and not just sitting on the uppermost surfaces exposed to the sky.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Computing the Snowfall Accumulation Pattern</head><p>Our goal is to generate an accumulation pattern for every surface in the model, where the amount of snow each surface receives is proportional to the occlusion factors described above.</p><p>Our approach is to allow launch sites on each surface to emit a series of particles aimed upwards towards a sky bounding plane. As particles flutter upwards, they are checked for intersection with intervening surfaces, where a "hit" indicates that a particle is somehow blocked, and cannot contribute snow to its source surface. A "miss" means that the particle made it through or around all blocking obstacles and reached the sky.</p><p>As particles reach or are blocked from the sky they slowly build a picture of a given launch site's sky occlusion. Whenever a launch site has a sufficiently different sky occlusion from an adjacent neighbour, a new launch site is added at the perturbed midpoint to refine the transition. Likewise, launch sites can be merged whenever all surrounding neighbours have identical sky occlusions, usually in cases where sites are consistently confident that they are either completely exposed or completely occluded.</p><p>As soon as we have generated a mass accumulation picture that meets some resource criteria (compute time, number of samples, size of sample or some other importance-driven function) we can add an appropriate (and arbitrary) amount of snow. This generates a complete set of 3D snow surfaces that rise off the base model. Since the addition of a layer of blocking and obscuring snow changes the previously computed mass accumulation pattern, we can repeat the accumulation step as often desired, increasing accuracy at the cost of computation time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Importance Ordering</head><p>The rationale for shooting upwards generally arises from the need for control: the idea that each individual surface can locally influence its resolution by deciding how many launch sites it needs, and how many particles each site should shoot. Since our sampling rate is orders of magnitude less complete than Nature's, prioritising the few samples we do have allows us to make better use of them. This ensures that even the tiniest surface is guaranteed at least a rough estimate of snow accumulation. This is a major advantage over potential approaches that drop blobby particles, since small surfaces are often missed at the expense of covering large ones. Figure <ref type="figure" target="#fig_11">16</ref> shows Each launch site is given an importance ordering used to determine order of site testing, determine the number of particles to shoot per site, and decide if more sites are needed nearby to improve the resolution. As long as the allocated time has not expired, the most important launch site shoots a small batch of particles, gets a new importance based on the results, and is placed back in sorted order. The importance ordering is a heuristic weighting based on the following factors:</p><p>Completeness. Launch sites with no previous chances to shoot are more important than sites that have had at least one chance, ensuring a crude global approximation exists before any further refinement begins. Area. As the area of a launch site increases, particles from a single site will pass through less of the volume immediately overhead. To prevent missing occlusions, large areas may need more particles per launch site and more initial sites. Occlusion boundaries in large areas are more visually obvious, and so gain preferential allocation of new refinement sites. Neighbourhoods. If the particle hit percentage of two neighbouring sites is sufficiently different, it implies that there is a nearby obstacle causing some kind of occlusion boundary. Both sites gain importance, asking for more particles to improve knowledge of the shape, orientation and magnitude of the boundary. If the neighbours are sufficiently different and important, a new refinement site may be added to the perturbed midpoint. Likewise, launch sites that are the same as all nearby neighbours become less important, and may be can-didates for removal. Effort. If all other factors are equal, launch sites should use approximately the same number of particles, aiming for consistency of confidence. Limits. The user can set several parameters that limit the approximate scale of the finest allowable increase in resolution. This prevents launch sites from increasing indefinitely along very complex occlusion boundaries. If all sites have been resolved to this limit, the phase can terminate early. Steepness. Very steep launch sites are swept of what little snow they accumulate; in most scenes, these avalanches are negligible compared to accumulations on nearby stable sites. Camera. When optionally enabled, sites closer to the camera receive more particles, greater refinement, and improved accuracy at the cost of imposed view dependence. User. Importance ordering allows users to arbitrarily tag surfaces as being "boring" -useful for ignoring areas that will eventually be occluded or matted out.</p><p>We defer the reader to <ref type="bibr" target="#b0">[1]</ref> for the actual parameterised importance weighting and further discussion of each factor. The important idea is that some launch sites get priority access to a limited sampling budget, based on criteria important to the user for a particular scene.</p><p>Figure <ref type="figure" target="#fig_0">4</ref>(a) shows the occlusion boundary under a real snowcovered bush, illustrating the type of visual effects we want sampling to determine. After 10 seconds, the importance ordering has found the boundary, and generated an initial approximation. Spending an additional 90 seconds results in more subtle improvement, refining launch sites of less visual interest. Background unoccluded areas are of very low importance, and so undergo almost no im-provement.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Launch Site Meshing</head><p>Launch site surfaces are represented as triangles, generated from the original (potentially non-polygonal) base models. Once snow has been generated, the polygonal approximation of the underlying model is discarded, allowing snow to accumulate on the original, unchanged base scene.</p><p>All upwards-facing triangles in the approximation of the underlying model are initially allocated at least one launch site. Additional launch sites are allocated based on the importance ordering of the surface, user-set resolution parameters, and the magnitude of the flake-flutter.</p><p>In order to properly allocate snow, each launch site must be responsible for some non-overlapping portion of the surface, ideally the area immediately surrounding the sample point. We have chosen a strategy based upon Voronoi diagrams, although there are numerous other valid meshing possibilities. Launch sites are connected in a constrained Delaunay triangulation, where each launch site is responsible for its own immediately surrounding Voronoi area, clipped to the edge of the triangle for maximal surface independence. Advantages of this approach include fast point-in-area tests and neighbour location, and the ability to quickly generate triangulations for intersection testing.</p><p>Figure <ref type="figure" target="#fig_0">4</ref> (d) shows an example of a sparse initial mesh undergoing the addition of more and more launch sites, shown in Figures <ref type="figure" target="#fig_0">4  (e</ref>) and (f). Note how neighbouring constrained-Voronoi areas vary in size at the transition zones, and mostly minimise extreme angles. In practice, many surfaces are small and isolated (such as the brush and pine needles in Figure <ref type="figure">1</ref>), and meshes are reduced to the trivial case of one or two samples in a triangle. Significant meshing occurs on large, connected surfaces, such as the ground.</p><p>Launch sites and their associated meshes are additionally divided into edge groups, which are isolated world objects, projected into the XY plane, bordered by the XY silhouette edges. Edge groups are used primarily for avalanche resolution, denoting sharp boundaries where snow may slide off from one edge group to another. Projecting into XY implies that launch sites can only be placed on surfaces with an angle of repose of 0::90) . Since edge group silhouettes are not necessarily convex, we must do some additional processing to "break" constrained Delaunay neighbour links that cross a silhouette boundary or a hole in the mesh. A single edge group may also be arbitrarily broken into smaller edge groups, although this is inefficient since moving snow across group boundaries is more expensive than moving snow within the same edge group. Figure <ref type="figure" target="#fig_1">5</ref> shows how a sphere is converted into an edge group. Our particular meshing strategy means that we have trouble with certain types of connected models that overlap in Z, such as a helix. However, this can be fixed by either splitting the model's natural object hierarchy, or increasing the number of edge groups, ultimately reaching the level of a group per polygon, if needed. Figure <ref type="figure">6</ref> shows an overlapping Z model that our meshing algorithm considers hard.</p><p>Note that although the knot was split into 200 edge groups, boundaries between the groups are not visible in the final result.</p><p>Figure <ref type="figure">6</ref>: An object our meshing strategy considers "hard". Knot model courtesy of <ref type="bibr" target="#b17">[18]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Locating Particles in the Sky</head><p>When a launch site reaches the head of the importance queue, it shoots a batch of particles towards the sky. Batch size is user definable, but generally within the order of 10-15 flakes. Particles originate from the launch site's snow surface, potentially reaching the sky plane unimpeded and contributing to the growth of the parent. We use a simple bucketing and filtering scheme to allocate the successful flakes to the total mass of the sky's available snow, while ensuring that small local areas of sky do not over-contribute. This is important, since the number of particles hitting any particular area of the sky may vary dramatically depending on the complexity of the underlying surfaces. We must ensure that a large concentration of flakes (say, directly above a tree), draws the same total snow as would the sky above a sparse flat surface. Furthermore, importance ordering implies that not all launch sites shoot the same number of particles.</p><p>We divide the sky into a grid of constant size buckets. When a flake reaches the sky successfully, we spread its representative area (defined as the launch site's projected area divided by the number of flakes in the current batch) across one or more buckets, as shown in Figure <ref type="figure" target="#fig_2">7</ref>.</p><p>When the snow accumulation phase finishes, all sky buckets are allocated some mass based upon the arbitrary depth of snow desired. Each bucket b computes a mass per area value, based on available mass of b and the summation of all representative flake areas extending into b. An individual launch site l then receives new mass proportional to the summation of the representative area of all flakes belonging to l that hit b. A single launch site may receive snow from multiple buckets. Flake area filtering is done at the end of the accumulation phase, when a given launch site cannot change in area due to added or removed refinement sites.</p><p>Since a launch site's accumulation pattern may change with the addition of blocking snow, it is sometimes useful to split the desired snow depth up and run the accumulation phase more than once. Depending on the time allocated for each phase, lower-importance launch sites may not get a chance to shoot particles every pass. To The allocation of snow mass to sky buckets is usually constant, although interesting effects can be obtained by multiplying bucket mass by an input image. Figure <ref type="figure" target="#fig_3">8</ref> shows a scene where the sky generates very uneven amounts of snow. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Snowflake Motion</head><p>We simulate snowflake motion with a series of straight-line vectors approximating a curved path, where vector length and end position are determined with a random walk process based upon a circle of radius fr , and Z step resolution is influenced by the importance ordering. At each step, the value of fr is randomly chosen from a normal distribution. As fr approaches zero, flakes duplicate vertical raycasting, producing no partial occlusion. As fr increases, the "area of effect" of a flake widens, generally blurring occlusion boundaries and making it less obvious where bumps and depressions came from.</p><p>In practice, it is hard to match flake-flutter parameters with observed real scenes. We currently compare a grid of generated images to find the parameters that best match the shape of boundaries found in a real scene.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6">Determining Particle/Surface Intersection</head><p>In order to find particle/surface intersections, we allocate surfaces into a regular grid of XY buckets. Within each bucket, we compute the minimum and maximum Z values of the surface as it passes through the bucket bounding box. We then insert all Z ranges into a per-box range tree <ref type="bibr" target="#b22">[23]</ref>. For a tree containing n ranges, it takes O(log 2 n) per insert and delete, and O(log 2 n + k) to return a list of the k elements that overlap the Z query range. During the accumulation phase, rebucketing is only needed upon completion, when snow mass is added. During stability, rebucketing is done more often, although with a considerable lag for efficiency reasons.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.7">Surface Construction</head><p>After snow allocation, each launch site is elevated by recently accumulated snow mass divided by the current launch site area. The polygonal top snow bounding surface is then the constrained-Delaunay triangulation of elevated launch sites, with corner vertices set to the minimum of adjacent neighbours. Additional vertical planes are included around edge group boundaries to close the surface down to the base plane.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.8">Flake Dusting</head><p>In many instances, accumulated snow is not thick enough to completely obscure the underlying surface, appearing instead as a light "dusting"of flakes. This phenomena often occurs in areas of low snowfall, high instability, or on surfaces with microtexture bumps, such as tree bark. Since it is not practical to model dusting as thick 3D objects, we use already-computed snow occlusion percentages to generate procedural noise textures of the appropriate averaged dusting density. Dusting textures are semi-transparent, textured polygons oriented to float slightly in front of the original model. Figure <ref type="figure" target="#fig_4">9</ref> compares the texture dusting of a (slightly tilted) real and a computer generated sign. Figure <ref type="figure">6</ref> shows an example of the transition between thick surfaces and flake dusting textures.</p><p>In a view-dependent scene, flake dusting can be used to replace sufficiently thin and distant snow layers with a white texture, reducing the polygon count.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Snow Stability</head><p>The snow stability phase of the algorithm is responsible for redistributing recently accumulated snow mass into a configuration that is stable, according to some very simple surface and snow properties. It can be run at intermittent times as computational power and desired accuracy permit, usually immediately after snow accumulation.</p><p>All launch sites are initially sorted by absolute Z height plus accumulation, and placed in a list of unresolved sites u1. The list is examined in decreasing Z order, immediately resolving unstable launch sites as they are discovered. The resolution of a single launch site s may affect a number of nearby neighbours: lower sites may receive new snow from s, while the loss of snow from s may create unstable angles with previously stable higher neighbours. Affected samples also include sites receiving edge-transit snow from s, or sites newly created to improve resolution.</p><p>If not there already, all launch sites affected by s, including s, are placed in a new sorted list u2 . At the completion of an entire pass through u1, the list is destroyed and replaced with u2, and the entire pass is repeated until termination.</p><p>The length of u1 is not guaranteed to decrease on each pass, and in fact may increase, or undergo large fluctuations. Consider a large amount of very unstable snow on a wide flat surface. On the first pass, the vast majority of interior samples are considered stable, since they are at the same height as their neighbours. The band of instability exists only at the edges, where unsupported snow avalanches off into the void. As edge sites lose mass, adjacent interior neighbours are affected, and the area of instability widens. Fortunately, the erosion of snow from the edges towards the centre is very physically plausible. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Angle of Repose</head><p>Despite the wide range of physical factors influencing real snow, for simplicity we base our stability test mainly on the angle of repose (AOR) of a particular snow type. The AOR measures the static friction of a pile of granular material, and is one of the major parameters influencing our scene. It can range <ref type="bibr" target="#b5">[6]</ref> [9] from near 90 in fresh dendritic snow to 15 in extreme slush conditions.</p><p>For a given type of snow, we use a transition curve that models the probability of stability over a range of angles around the AOR. Increasing the width of the transition curve gives a stability solution with bumpier surfaces and increased variation at snow boundary edges near the critical angle. A narrow curve generates smoother surfaces with less variation.</p><p>The AOR is based on the relative heights of accumulated snow, and not on the fixed angle of launch sites on the underlying surface. As snow drains from one launch site to another, the AOR changes continually. This means that launch sites on very steep surfaces may still support snow if the AOR of neighbouring sites is low enough, possibly because snow is blocked from moving away.</p><p>Figure13 shows an example of this using water (AOR = 0 ) filling a fountain basin. The basin sides are too steep to support water, so mass avalanches towards the basin bottom. As the basin fills, this downward movement is blocked by the rising water level. Eventually, the basin fills to the brim, leaving a stable flat surface supported by the steep sides of the bowl.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Stability Test</head><p>The actual stability test for a single iteration on launch site s can be described as follows:</p><p>1. compute AOR between s and all neighbours ni lower than s 2. for each i with an AOR too steep to support snow, perform an obstacle test between s and ni i. if there is a non-snow obstacle in the way, the avalanche is blocked, and the neighbour ni is ignored. ii. if there is a vertical snow surface (an edge group boundary) in the way, there an interpenetrating surface carrying snow between s and ni, so the avalanche is also blocked. iii. if there is a non-vertical snow surface in the way, there is an interpenetrating surface B between s and ni, where the interpenetrating surface could potentially receive the snow destined for ni. Replace ni with the closest launch site on B.</p><p>3. evenly shift snow from s to all neighbours ni still in contention, until at least one neighbour becomes stable.</p><p>4. repeat steps 1 to 3 until all there are no unstable neighbours left, or s is bare of snow.</p><p>Figure <ref type="figure" target="#fig_5">10</ref> illustrates some of the obstacle cases. The obstacle test (step 2) checks to make sure that avalanche motion is not blocked by intervening surfaces or snow belonging to other objects. If an obstacle is found, snow is blocked and forced to pile up unless there is an alternative escape direction or snow rises above the intervening obstacle. Figure <ref type="figure" target="#fig_8">13</ref> shows how blocked water rises above the level of the basin sides, transferring to the top of the basin edge, eventually overflowing into the next basin.</p><p>Step 2 is expensive. Practically, we achieve large speedups by reducing the frequency of this step -from every test, to every pass, to once per stability phase, with corresponding decreases in accuracy. The most infrequent testing is usually sufficient for models where there is little inter-object penetration, although some blocking due to rising snow will be missed. Figure <ref type="figure">1</ref> was computed using the fastest method. Figure <ref type="figure" target="#fig_11">16</ref>, containing thousands of interpenetrating and closely spaced grass blades, was computed using the slowest method.</p><p>Any time there is a non-snow obstacle between two adjacent neighbours, we can optionally improve the way snow builds up against the obstacle by adding refinement launch sites just before the intersection point.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Moving Snow over Edges</head><p>downwards, bouncing off surfaces until reaching a surface supporting launch sites. If the edge is on a shared boundary with an adjacent edge group, the particles end up "hopping" to the adjacent group via very short projectile motion.</p><p>When an avalanche particle comes to rest, it contributes its snow load to the nearest launch site on the destination surface. Depending on user-set parameters, new launch sites may be created if existing launch sites are not dense enough to capture the pattern of falling snow.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Stability Termination Criteria</head><p>A single pass of the stability algorithm reaches completion when it runs out of time, when the unresolved list u1 becomes empty, or when all avalanches in the last pass moved only a very small amount of snow.</p><p>In most scenes, the first few passes through u1 resolve a majority of the unstable snow, with subsequent passes handling smaller and smaller avalanches. Forced early termination may leave unstable areas, but all launch sites will usually have avalanched at least once. Our multi-pass approach avoids driving a large wave of snow downwards in a single pass, which leads to chaotic results on early termination.</p><p>If the stability phase completes before the alloted time expires, we re-run the entire phase to compensate for some speed-accuracy tradeoffs, such as missed obstacle testing, and lag in the rebucketing of changing snow surfaces. The extra phase usually fixes a few missed sites and completes immediately. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Implicit Functions</head><p>Importance-ordering accumulation algorithms are surface-based, implying that snow can only accumulate on supporting objects. To allow for unsupported snow, such as gap bridging, edge bulges and wind cornices, we perform an additional (optional) conversion step using implicit functions. Figure <ref type="figure">2</ref> shows an example where snow on many closely-spaced pine needles has formed unsupported bridges and clumps.</p><p>Each snow volume is converted into one of several different implicit function types, as shown in Figure <ref type="figure" target="#fig_7">12</ref>. Generator functions do not radiate uniformly. The one-sided "edge" function allows bulging and cornice formation, where size, bulging and direction are based upon wind velocity. The limited "top" function blends with snow directly above the generator surface, but does not blend much with adjacent neighbours. The resulting isosurface is polygonalized in O(n 2 ) space <ref type="bibr" target="#b21">[22]</ref>.</p><p>In order to reduce blending discontinuities and apparent mass inflation at function boundaries, we use known adjacency information to shrink and clip implicit functions so that the isosurface is coincident with the polygonal top surface. A small variable-radius line generator function blends cracks between adjacent functions, and smoothes over sharp creases in the snow. Our method is not entirely satisfactory, since surface cracks often remain visible -however, they are often minimised sufficiently to be destroyed during mesh reduction <ref type="bibr" target="#b1">[2]</ref> after polygonization. Implicit functions potentially allow us to add animal tracks, wind ripples, and other patterns to snow surfaces by "stamping" the snow surface with appropriately scaled negative functions.</p><p>By interrupting the pipeline before the implicit function step in Section 5, we obtain polygonal results with no bridging or smoothing effects and a much lower polygon count. These compact intermediate results are appropriate for scene setup and real-time viewing, and may actually be sufficient for the final image. Figures 4, 13 and 16 were computed without the smoothing step. As well, intermediate polygonal results can be used as the underlying model for a completely new snow accumulation run, producing the effect of true snow layers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Rain and Wind</head><p>By setting AOR = 0 and flake-flutter fr = 0 the basic snow algorithm can also simulate the accumulation of water, from the sky or elsewhere. Figure <ref type="figure" target="#fig_8">13</ref> shows an example of an empty fountain slowly filling up with water. Only the patch of sky shown as a red square has any mass to contribute, approximating how water appears at a spout, fills the first basin, and overflows to lower basins. Wind is a major factor in the large-scale transport of snow, producing some very compelling and interesting effects. Although we cannot claim to duplicate these effects, we at least have a framework for simple wind phenomena in both snow accumulation and snow stability phases.</p><p>During snow accumulation, wind influence is easily included by modifying a flake's direction and distance by a velocity vector. Wind velocity vectors can be approximated with a constant direction, or much more accurately computed offline. The foreground haystack in Figure <ref type="figure" target="#fig_11">16</ref> shows the asymmetrical accumulation effects of a very slight breeze to the right, where the wind influence is globally constant.</p><p>During stability, we widen our single-site stability test to include neighbours that are within 90 of the downwind direction. Snow transport is then dependent on the neighbour's angle with respect to the local wind vector, the duration of the wind influence, and the carrying capacity of a given wind velocity, based on <ref type="bibr" target="#b9">[10]</ref>. The instability vector is moved according to the rules of Section 4.2, including obstacle testing.</p><p>We use a simple heuristic to compensate for the different number of times each launch site may be stability tested. All launch sites compute a flux maximum that is reduced and moved over some small number of stability trials. Unfortunately, if the stability phase is terminated early, some areas may not get a chance to move all allowable wind transport snow. Figure <ref type="figure" target="#fig_9">14</ref> shows an example of wind and stability effects using a simple, globally constant wind vector. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Validation</head><p>Validation of snow-covered scenes is hard, in that snow observed outdoors is the result of uncontrollable and unknown environmental factors. Creating artificial snow is beyond our capabilities as a graphics lab, so instead we restrict validation to observation, asking the question: "does our algorithm produce phenomena and/or effects that are observable in nature?" However, we were able to perform a few simple experiments to show that our snow stability algorithms are at least plausible. We substituted sifted flour for snow, to improve controllability and show that our algorithms work for materials other than snow. Figure <ref type="figure" target="#fig_10">15</ref> shows a side-by-side comparison of real and computer generated flour scenes. Figure <ref type="figure" target="#fig_4">9</ref> shows an additional side-by-side validation image of flake dusting.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Future Work</head><p>Our initial focus was on a framework for snow generation, and as a result we ignored, simplified, and actively avoided many extremely important physical properties and effects, including snow compression and packing, layers, slab avalanches, snow creep, snow pack metamorphosis, melting, and solar influence.</p><p>Other priorities include improving the overall smoothness of the final results. Our sampling method is very noisy, mainly due to the (relatively) tiny number of flakes used to extrapolate snow depth. Additionally, avalanching real snow distributes snow in a much wider and more complex cloud that we currently model with our few particles, leading to snow stalagmite artifacts, such as those near the foreground wall in Figure <ref type="figure">1</ref>. Although we are able to artificially enforce surface smoothing, we have not done so in this paper.</p><p>Timing results are not fully applicable to our importance ordering scheme, as models are usually allocated a running time convenient to the user. However, the timing bottleneck of snow as a useful effect is the rendering phase, which is outside the scope of our current work. Large models such as Figures <ref type="figure">1</ref> and<ref type="figure">2</ref> were given overnight for snow accumulation, yet required weeks to raytrace animations of several hundred frames. Rendering is aggravated by aliasing in moving scenes -such as the distant, tiny, white snowpatches resting on distant, tiny, dark needles shown in Figure <ref type="figure">1</ref>. We are interested in physically realistic, multi-resolution snow shaders or rendering models that are fast and accurate.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Conclusions</head><p>This paper describes a new algorithm for the creation of snowcovered models, using a novel particle location scheme that allows surfaces to independently control sampling effort needed to determine accumulation. Separability of surface accumulation produces many useful side effects, including importance ordering, adaptive refinement, smooth degradation upon early termination, and greater control of the final result. Our accumulation algorithm allows us simulate effects such as accumulation under obstacles, flake dusting, wind, falling rain, and "snow-writing".</p><p>We have also presented a simple model of snow stability that handles avalanches, edge-transit snow, obstacles supporting and blocking snow, materials other than snow, and mass transport due to wind. Additional features of the approach include support for snow bridges, cornices and various levels of model detail. Integration with commercial software allows us to snow upon existing models in a variety of formats, providing greater flexibility, power, and ease of use. Finally, we have shown that our approach is able to handle large, complex outdoor scenes consisting of hundreds of thousands of surfaces.</p><p>It is our hope that this work will open up an entire new season to computer graphics, and will stimulate other researchers to explore the natural, glorious beauties of winter.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10">Acknowledgements</head><p>Alain Fournier provided guidance and the haystack model, while colleagues and the anonymous reviewers provided many helpful suggestions. Most of base models were provided courtesy of Platinum Pictures. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: (a) A bush leaning out over a wall provides a real example of the flake-flutter phenomena. (b) After 10 seconds, importance ordering has found the general shape of the boundary. (c) After 100 seconds, the boundary shape is essentially the same as (b), due to the importance ordering of launch areas. For illustration, neither (b) nor (c) have been smoothed. (d) Initial meshing of a crude bush model. No measurement of the real bush was done. (e) The denser mesh reflects the more interesting areas. A significant amount of refinement occurs behind the bush and is not visible from this viewpoint. (f) The denser mesh after 100 seconds.</figDesc><graphic coords="4,67.68,55.18,473.62,277.49" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: An isolated object (a), bordered by XY silhouette edges (in red) forms an edge group -top view (b), side view (c).</figDesc><graphic coords="5,63.15,549.87,220.07,68.18" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Allocating flake area to sky buckets.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Non-constant allocation of snow mass to sky bucketing can be used to "write" the SIGGRAPH 2000 logo with snow</figDesc><graphic coords="6,55.20,343.18,233.95,60.05" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: (a) A real sign covered with real snow. (b) A computer generated sign covered with computer generated snow. Note how dusting density increases near the top and edges in both models.</figDesc><graphic coords="7,129.69,55.42,347.30,122.11" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: (a), (b), (c) illustrate stability test obstacle cases i, ii, and iii respectively</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 11 :</head><label>11</label><figDesc>Figure 11: Covering a hydrant with low AOR snow.</figDesc><graphic coords="8,55.70,354.22,233.60,126.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 12 :</head><label>12</label><figDesc>Figure 12: (a) Side view of adjacent snow volumes. (b) Side view of adjacent top and edge generator functions, with crack-filling blending lines.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 13 :</head><label>13</label><figDesc>Figure 13: Snow stability algorithms can also be used to simulate water accumulation. Water from the red patch fills the first basin before overflowing into subsequent basins.</figDesc><graphic coords="8,364.48,511.25,143.86,108.14" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 14 :</head><label>14</label><figDesc>Figure 14: (a) The initial scene without wind. (b) A globally constant wind blows the snow against the wall. Much of the snow has blown completely away.</figDesc><graphic coords="9,60.67,278.81,223.53,111.74" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 15 :</head><label>15</label><figDesc>Figure 15: A real flour-covered scene (a) and a computer generated scene (b) compared to show that our stability algorithms are at least plausible. Our experimental setup was fairly ad-hoc: despite our best efforts, flour was distributed unevenly around the base of the real sphere.</figDesc><graphic coords="9,339.99,55.38,194.78,90.43" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 16 :</head><label>16</label><figDesc>Figure16: A snowy scene inspired byMonet [11]. This model shows the results of omitting the final implicit smoothing phase. Haystack models courtesy of Alain Fournier.</figDesc><graphic coords="10,56.16,55.89,499.18,184.90" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="1,75.60,125.34,460.80,170.64" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="2,93.03,55.74,423.29,349.63" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="3,81.60,56.13,447.98,138.60" type="bitmap" /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>We refer the reader to<ref type="bibr" target="#b8">[9]</ref> or<ref type="bibr" target="#b0">[1]</ref> for a discussion of the real substance.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_1"><p>If an unstable launch site has no downhill neighbours, it is next to an edge. Before snow cascades over an edge into the air, we perform an intersection test with a very short vector oriented in the direction of avalanche motion. If an intersection is found, then some surface or nearby snow is sufficiently close to the avalancheorigin to block movement. Blocked avalanches continue to accumulate until the origin launch site has enough snow to pass over the obstacle. If no intersection is found, the avalanche heads over the edge and is approximated as a few (usually &lt; 5) avalanche particles moving on a simple projectile trajectory. Avalanche particles are tracked</p></note>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">The Computer Modelling of Fallen Snow</title>
		<author>
			<persName><forename type="first">Paul</forename><surname>Fearing</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000-07">July 2000</date>
		</imprint>
		<respStmt>
			<orgName>Dept. of Computer Science, University of British Columbia</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Surface Simplification Using Quadric Error Metrics</title>
		<author>
			<persName><forename type="first">Michael</forename><surname>Garland</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Paul</forename><surname>Heckbert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 97 Conference Proceedings</title>
		<imprint>
			<date type="published" when="1997-08">August 1997</date>
			<biblScope unit="page" from="209" to="216" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Reflection From Layered Surfaces Due To Subsurface Scattering</title>
		<author>
			<persName><forename type="first">Pat</forename><surname>Hanrahan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wolfgang</forename><surname>Krueger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH 93 Conference Proceedings)</title>
		<imprint>
			<date type="published" when="1993-08">August 1993</date>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="165" to="174" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<author>
			<persName><forename type="first">Siu-Chi</forename><surname>Hsu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tien-Tsin</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Simulating Dust Accumulation</title>
		<imprint>
			<date type="published" when="1995-01">January 1995</date>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="18" to="22" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<author>
			<persName><forename type="first">Wolfgang</forename><surname>Krueger</surname></persName>
		</author>
		<title level="m">Intensity Fluctuations And Natural Texturing. Computer Graphics</title>
		<imprint>
			<date type="published" when="1988">1988</date>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="213" to="220" />
		</imprint>
	</monogr>
	<note>SIGGRAPH 88 Conference Proceedings)</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Micrometrical Properties Of Snow</title>
		<author>
			<persName><forename type="first">Daisuke</forename><surname>Kuroiwa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yukiko</forename><surname>Mizuno</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Masao</forename><surname>Takeuchi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">InternationalConference on Low Temperature Science (Physics of Snow and Ice)</title>
		<imprint>
			<date type="published" when="1966-08">Aug 1966</date>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="722" to="751" />
		</imprint>
		<respStmt>
			<orgName>Institute for Low Temperature Science</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Modeling Soil: Realtime Dynamic Models For Soil Slippage And Manipulation</title>
		<author>
			<persName><forename type="first">Xin</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Moshell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 93 Conference Proceedings</title>
		<imprint>
			<date type="published" when="1993-08">August 1993</date>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="361" to="368" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A Multi-Scale Physical Model Of Granular Materials</title>
		<author>
			<persName><forename type="first">A</forename><surname>Luciani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Habibi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Manzotti</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Graphics Interface</title>
		<meeting>Graphics Interface</meeting>
		<imprint>
			<publisher>Canadian Information Processing Society</publisher>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="136" to="137" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">The Avalanche Handbook. The Mountaineers</title>
		<author>
			<persName><forename type="first">David</forename><surname>Mcclung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Peter</forename><surname>Schaerer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993">1993</date>
			<pubPlace>Seattle, Washington</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Engineering Properties Of Snow</title>
		<author>
			<persName><forename type="first">Malcolm</forename><surname>Mellor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Glaciology</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">81</biblScope>
			<biblScope unit="page" from="15" to="66" />
			<date type="published" when="1977">1977</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Snow Effect, Morning. Painting: oil on canvas</title>
		<author>
			<persName><forename type="first">Claude</forename><surname>Monet</surname></persName>
		</author>
		<author>
			<persName><surname>Wheatstacks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Paul Getty Museum</title>
		<imprint>
			<date type="published" when="1891">1891</date>
			<pubPlace>Los Angeles</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A Visual Simulation Of Melting Snow</title>
		<author>
			<persName><forename type="first">K</forename><surname>Muraoka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Chiba</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Journal of the Institute of Image Electronics Engineers of Japan</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="327" to="338" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Snowfall Model For Simulating Close Views Of Snowy Landscapes</title>
		<author>
			<persName><forename type="first">K</forename><surname>Muraoka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Chiba</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Ohtawara</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Journal of the Institute of Television Engineers of Japan</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="1252" to="1258" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">The Synthesis And Rendering Of Eroded Fractal Terrains</title>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">K</forename><surname>Musgrave</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">E</forename><surname>Kolb</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">S</forename><surname>Mace</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics (SIGGRAPH 89 Conference Proceedings)</title>
		<imprint>
			<date type="published" when="1989-07">July 1989</date>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="41" to="50" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">A Modeling And Rendering Method For Snow By Using Metaballs</title>
		<author>
			<persName><forename type="first">T</forename><surname>Nishita</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Iwasaki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Dobashi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Nakamei</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. EUROGRAPHICS</title>
		<meeting>EUROGRAPHICS</meeting>
		<imprint>
			<publisher>European Association for Computer Graphics</publisher>
			<date type="published" when="1997">1997</date>
			<biblScope unit="volume">16</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Geospecific Rendering Of Alpine Terrain</title>
		<author>
			<persName><forename type="first">S</forename><surname>Premoze</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Thompson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Shirley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Eurographics Rendering Workshop</title>
		<imprint>
			<publisher>European Association for Computer Graphics</publisher>
			<date type="published" when="1999-06">June 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Robinson</surname></persName>
		</author>
		<ptr target="http://www-nsidc.colorado.edu/NSIDC/EDUCATION/SNOW/snowRobinson.html" />
		<title level="m">Northern Hemisphere Snow Cover Charts. National Snow and Ice Data Center</title>
		<imprint>
			<date type="published" when="2000-04-10">April 10, 2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Interactive Topological Drawing</title>
		<author>
			<persName><forename type="first">G</forename><surname>Robert</surname></persName>
		</author>
		<author>
			<persName><surname>Scharein</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
		<respStmt>
			<orgName>Department of Computer Science, The University of British Columbia</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Stochastic Motion -Motion Under The Influence Of Wind</title>
		<author>
			<persName><forename type="first">Mikio</forename><surname>Shinya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alain</forename><surname>Fournier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. EUROGRAPHICS</title>
		<meeting>EUROGRAPHICS</meeting>
		<imprint>
			<publisher>European Association for Computer Graphics</publisher>
			<date type="published" when="1992">1992</date>
			<biblScope unit="page" from="119" to="128" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Particle Animation And Rendering Using Data Parallel Computation</title>
		<author>
			<persName><forename type="first">Karl</forename><surname>Sims</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 90 Conference Proceedings)</title>
		<imprint>
			<date type="published" when="1990-08">August 1990</date>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="405" to="413" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Animating Sand, Mud and Snow</title>
		<author>
			<persName><forename type="first">R</forename><surname>Sumner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>O'brien</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hodgins</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Graphics Interface</title>
		<meeting>Graphics Interface</meeting>
		<imprint>
			<publisher>Canadian Information Processing Society</publisher>
			<date type="published" when="1998">1998</date>
			<biblScope unit="page" from="125" to="132" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Advanced Animation and Rendering Techniques</title>
		<author>
			<persName><forename type="first">Alan</forename><surname>Watt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mark</forename><surname>Watt</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992">1992</date>
			<publisher>Addison-Wesley Publishing</publisher>
			<pubPlace>Don Mills, Ontario</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">New Data Structures For Orthogonal Queries</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">E</forename><surname>Willand</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal of Computing</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="232" to="253" />
			<date type="published" when="1985">1985</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
