<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Social Compute Cloud: Allocating and Sharing Infrastructure Resources via Social Networks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><roleName>Member, IEEE</roleName><forename type="first">Simon</forename><surname>Caton</surname></persName>
							<email>simon.caton@kit.edu</email>
						</author>
						<author>
							<persName><roleName>Member, IEEE</roleName><forename type="first">Christian</forename><surname>Haas</surname></persName>
							<email>ch.haas@kit.edu</email>
						</author>
						<author>
							<persName><roleName>Member, IEEE</roleName><forename type="first">Kyle</forename><surname>Chard</surname></persName>
						</author>
						<author>
							<persName><roleName>Member, IEEE</roleName><forename type="first">Kris</forename><surname>Bubendorfer</surname></persName>
							<email>kris.bubendorfer@ecs.vuw.ac.nz</email>
						</author>
						<author>
							<persName><roleName>Member, IEEE</roleName><forename type="first">Omer</forename><forename type="middle">F</forename><surname>Rana</surname></persName>
							<email>o.f.rana@cs.cardiff.ac.uk</email>
						</author>
						<author>
							<persName><forename type="middle">K</forename><surname>Bubendorfer</surname></persName>
						</author>
						<author>
							<persName><forename type="middle">O</forename><surname>Rana</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Karlsruhe Service Research Institute</orgName>
								<orgName type="department" key="dep2">Institute of Information Systems and Marketing</orgName>
								<orgName type="institution">Karlsruhe Insti-tute of Technology</orgName>
								<address>
									<settlement>Karlsruhe</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Computation Institute</orgName>
								<orgName type="institution">University of Chicago</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="institution">Argonne National Laboratory</orgName>
								<address>
									<settlement>Chicago</settlement>
									<region>IL</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<orgName type="institution">Victoria University of Wellington</orgName>
								<address>
									<settlement>Wellington</settlement>
									<region>New Zealand</region>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff4">
								<orgName type="department">School of Computer Science and Informatics</orgName>
								<orgName type="institution">Cardiff University</orgName>
								<address>
									<settlement>Cardiff</settlement>
									<country key="GB">United Kingdom</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A Social Compute Cloud: Allocating and Sharing Infrastructure Resources via Social Networks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">E15AC4AD48B3D319E3ADA276F627E077</idno>
					<idno type="DOI">10.1109/TSC.2014.2303091</idno>
					<note type="submission">received 14 Jul. 2013; revised 9 Dec. 2013; accepted 13 Jan. 2014.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T08:27+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Social cloud computing</term>
					<term>social networks</term>
					<term>cloud computing</term>
					<term>preference-based resource allocation</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Social network platforms have rapidly changed the way that people communicate and interact. They have enabled the establishment of, and participation in, digital communities as well as the representation, documentation and exploration of social relationships. We believe that as 'apps' become more sophisticated, it will become easier for users to share their own services, resources and data via social networks. To substantiate this, we present a social compute cloud where the provisioning of cloud infrastructure occurs through "friend" relationships. In a social compute cloud, resource owners offer virtualized containers on their personal computer(s) or smart device(s) to their social network. However, as users may have complex preference structures concerning with whom they do or do not wish to share their resources, we investigate, via simulation, how resources can be effectively allocated within a social community offering resources on a best effort basis. In the assessment of social resource allocation, we consider welfare, allocation fairness, and algorithmic runtime. The key findings of this work illustrate how social networks can be leveraged in the construction of cloud computing infrastructures and how resources can be allocated in the presence of user sharing preferences.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>C LOUD computing has garnered praise for many reasons, most notably due to its ability to reduce overheads and costs for consumers by leveraging economies of scale to provide infrastructure, platforms and software as services. Infrastructure providers such as amazon elastic compute cloud (EC2) rid users of the burdens associated with purchasing and maintaining computer equipment; instead compute resources can be out-sourced to specialists and consumers can obtain access to an "unlimited" supply of resources. Despite its benefits, many businesses and end users are put off by an array of (perceived) uncertainties, as identified in numerous studies (e.g., <ref type="bibr" target="#b1">[1]</ref>, <ref type="bibr">[2]</ref>). Two key issues are the notions of trust and accountability between resource consumers and providers <ref type="bibr" target="#b3">[3]</ref>. In this context, trust and accountability encapsulate several different aspects such as security, privacy, ethical practices, transparency, protection of rights, and issues concerning compensation. Addressing these concerns is a significant undertaking, and consequentially, many international research programs have emerged, covering issues such as provider certification and service level agreements.</p><p>In this paper we argue an alternative approach to establish trust and accountability in cloud platforms: a social cloud <ref type="bibr" target="#b4">[4]</ref>; and advocate a novel preference-based approach to facilitate resource sharing.</p><p>A social cloud is "a resource and service sharing framework utilizing relationships established between members of a social network" <ref type="bibr" target="#b5">[5]</ref>. It is a dynamic environment through which (new) cloud-like provisioning scenarios can be established based upon the implicit levels of trust that transcend the inter-personal relationships digitally encoded within a social network. Leveraging social network platforms as mediators for the acquisition of a cloud infrastructure can be motivated through their widespread adoption, their size, and the extent to which they are used in modern society. For example, Facebook surpassed 1 billion users in 2012, 1  and has illustrated that Milgram's 6 degrees of freedom in social networks <ref type="bibr" target="#b6">[6]</ref> may in fact be as low as 4 <ref type="bibr" target="#b7">[7]</ref>. Users also spend inexorable amounts of time "on" social network platforms-a recent study indicated up to 1 in every 5 minutes of time spent online by all Internet users worldwide <ref type="bibr" target="#b8">[8]</ref>. The computational social capital available is also significant: if only 0.5 percent of Facebook users provided CPU time on their personal compute resources the potential computational power available would be comparable to a www. top500.org supercomputer <ref type="bibr" target="#b9">[9]</ref>. Examples of such sharing include: the 25 years of cycle stealing with Condor <ref type="bibr" target="#b10">[10]</ref>, the 16 years of volunteer computing since the Great Internet Mersenne Prime Search 2 and more recently Boinc <ref type="bibr" target="#b11">[11]</ref>; which show users are willing to donate personal compute resources to "good" causes.</p><p>Our vision of the social cloud is motivated by the need of individuals or groups to access resources they are not in possession of, but that could be made available by connected peers. In this paper, we present a social compute cloud: a platform for sharing infrastructure resources within a social network. Using our approach, users can download and install a middleware (an extension to Seattle <ref type="bibr" target="#b12">[12]</ref>), leverage their personal social network via a Facebook application, and provide resources to, or consume resources from, their friends through a social clearing house. We anticipate that resources in a social cloud will be shared because they are underutilized, idle, or made available altruistically.</p><p>In our earliest work <ref type="bibr" target="#b4">[4]</ref>, in which we first introduced the idea of the social cloud, our proof-of-concept was a social storage cloud. That prototype relied on a virtual credit model to regulate exchange and prevent freeloading. However a key aspect of a social cloud is the notion of sharing, not selling, resources. In this paper we have revisited the allocation model and moved away from a purely economic exchange to a model that emphasizes user choice. Specifically, due to the social network basis of a social cloud, users will have explicit preferences with whom their resources are allocated to, and from whom they consume resources. To support user preferences, we implement several algorithms for bidirectional preference-based resource allocation. We compare the runtime of these algorithms finding that for large numbers of participants and frequent allocations it may be impractical to compute allocations in real-time. We also study the effects of stochastic user participation (i.e., changing supply and demand) when instant reallocation may be impossible due to constraints on migration. We therefore introduce heuristics and compare their economic performance based on metrics such as social welfare and allocation fairness.</p><p>The rest of the paper is structured as follows: Section 2 presents the concept of a social compute cloud, the challenges with its construction, and its architecture. Section 3, describes the implementation of a social compute cloud entailing the core components and preference matching algorithms. In Section 4, we evaluate our approach (via simulation), placing a focus on allocation runtime and economic performance. We outline related work in Section 5 and conclude the paper in Section 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">A SOCIAL COMPUTE CLOUD</head><p>A social compute cloud is designed to enable access to elastic compute capabilities provided through a cloud fabric constructed over resources contributed by socially connected peers. A social cloud is a form of community cloud (as defined in NIST's definition of cloud computing <ref type="bibr" target="#b13">[13]</ref>), as the resources are owned, provided and consumed by members of a social community. Through this cloud infrastructure consumers are able to execute programs on virtualized resources that expose (secure) access to contributed resources, i.e., CPU time, memory and disk/ storage. In this model, providers host sandboxed lightweight virtual machines (VM) on which consumers can execute applications, potentially in parallel, on their computing resources. While the concept of a social compute cloud can be applied to any type of virtualization environment in this paper we focus on lightweight programming (application level) virtualization as this considerably reduces overhead and the burden on providers. In <ref type="bibr" target="#b14">[14]</ref> we explored the use of a more heavyweight virtualization environment based on Xen, however the time to create and contextualize VMs was shown to be considerable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Challenges</head><p>There are many challenges in the construction of a social cloud that need to be carefully considered. In this section, we summarize several key challenges placing a focus on: the technical facilitation of the cloud platform, the inclusion as well as interpretation of social (network) structures, the design and implementation of appropriate socio-economic models for the facilitation of exchange as well as the platform infrastructure.</p><p>Technical facilitation to enable edge users to provide resources to, and consume resources from, one another. A social compute cloud needs to traverse network address translations (NAT), handle non-static IP addresses (especially in the case of mobile users) and accommodate best effort notions of quality of service. Although the concept of a social cloud is built upon the premise that users within a social network have some level of trust for one another, the construction of a social compute cloud still requires adequate security and sandboxing mechanisms to protect resources from potentially malicious or incompetent users and also to protect user applications from potentially malicious resources. This, in combination with a need to support multiple operating systems, can be partially addressed through virtualization.</p><p>Leveraging social structures to facilitate the sharing of compute resources within a social network. To utilize social structures for resource sharing, users must first allow access to their social network, and trust the platform with their social network data. Basing resource allocations upon a binary notion of friendship would be ill conceived for several reasons. First, social relationships are not simply edges in a graph. There are many different types of relationship (e.g., family, close friends, colleagues, acquaintances, etc.). Second, different users will associate different levels of trust to different relationship contexts. Third, different people have different qualities (e.g., reliability, trustworthiness, availability) and different competencies, for example users may assume that friends with computer science backgrounds are "better" or more "competent" with respect to offering compute resources. These three "relationship dimensions" mean that users may have very specific preferences with whom they interact, and these preferences may be different for consumer and provider roles. 3 A social cloud therefore requires additional metadata to augment the social graph 3. In <ref type="bibr" target="#b15">[15]</ref>, we took initial steps towards reviewing the contexts of trust for the scenario of a social cloud. of its users so that it is possible to design a mechanism that can take into account the preferences and perceptions of users towards one another. The challenge here is the design of methods to extract these preferences either explicitly from the user or implicitly from their social network profiles.</p><p>A socio-economic model for resource allocation within a social compute cloud. Given that the concept of a social cloud focuses on the sharing rather than sale of resources, we do not focus on monetary models. However, a (microeconomic) system that acts as the meeting point for supply and demand is still required. The lack of an obvious economic setting makes the construction of a social compute cloud more, not less, challenging. Typically, the allocation of resources via a monetary exchange is based on the (private) valuations that users have for a good. This requires users to contemplate the value of their resources, and tasks they wish to perform, which dramatically changes their motivation(s). Using sharing preferences, the social context of exchange is accentuated. However, using only sharing preferences (or proxies thereof) as a means of determining resource allocation along with the social ties of a user dramatically complicates the allocation process. The challenge is not to perform an allocation, but to allocate resources effectively. In other words, avoiding computationally intensive allocation methods, but retaining an equilibrium between resource allocations and platform liquidity.</p><p>Platform facilitation of a social compute cloud. As the model is based upon the (altruistic) sharing of resources, the notion of a revenue model (or similar) to support the platform and its basic functionality is problematic. Users should not have to pay for the services offered by a social cloud platform. However, the platform requires computational resources to function. As we do not address this challenge in this paper, we refer instead to <ref type="bibr" target="#b16">[16]</ref> where we present a co-operative model for the construction of a social cloud platform. A co-operative model implies that resources are provided with the intent to be shared, but also to support the platform itself in the form of infrastructure resources.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Architecting a Social Compute Cloud</head><p>In line with the challenges outlined above, we identify three areas of functionality needed for the construction of a social compute cloud: A Social Cloud Platform: the technical implementation for the construction and facilitation of the social cloud as well as necessary middleware to enable resource sharing between "friends" at the edges of the internet. A socio-technical adapter: the means to observe and interpret social ties for the elicitation or derivation of sharing preferences. A socio-economic model: the formulation of a social microeconomic system for the allocation of resources upon the premises of social ties, and preferences with respect to how social ties denote a user-specific willingness to consume and/or provide resources.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.1">A Social Compute Cloud Platform</head><p>Like any cloud model, a platform is required to coordinate and facilitate its basic functionality (user management, resource allocation, etc.). Fig. <ref type="figure" target="#fig_0">1</ref> shows the high level architecture for a social compute cloud and its key components, which are explained as follows:</p><p>A social clearing house is an institutionalized microeconomic system that defines how supply is allocated to demand. Smith defined the key components of a microeconomic system for the purposes of exchange in <ref type="bibr" target="#b17">[17]</ref>. However, this definition is orientated primarily for monetarybased exchanges, which is not the case here. Therefore, a social clearing house captures the following: the protocols used for distributed resource allocation, the rules of exchange, i.e., who can take part and with whom may they exchange, and the formalization of one or more allocation mechanisms. A social clearing house is therefore the central point in the system where all information concerning users, their sharing preferences, and their resource supply and demand is kept. For this reason, the social clearing house requires two databases: to capture the social graph of its users, as well as their sharing preferences, and a resource manager to keep track of resource reservations, availability, and allocations. A middleware to provide the basic resource fabrics, resource virtualization and sandboxing mechanisms for provisioning and consuming resources. It should also define the protocols needed for users and resources to join and leave the system. For these purposes we selected Seattle <ref type="bibr" target="#b12">[12]</ref>, <ref type="bibr" target="#b18">[18]</ref> as it largely provides the needed functionality. However, Seattle cannot allocate its resources based upon social ties, and was thus extended.</p><p>A socio-technical adapter, which in our case is a Facebook application, is needed to provide access to the necessary aspects of users' social networks, and acts as a means of authentication, for example, via Facebook connect. Once a user's social network has been acquired via the socio-technical adapter, the social clearing house requires the sharing preferences of the user to facilitate resource allocation. Therefore, a preferences module that provides the necessary functionality for the capture and representation of sharing preferences is required. Many aspects of a socio-technical adapter require careful consideration, and many methods can be applied to capture preferences, we discuss these in Section 2.2.2.</p><p>Matching mechanisms are socio-economic implementations of the social clearing house microeconomic system. They determine appropriate allocations of resources via users' sharing preferences across their social network, and are discussed in Sections 2.2.3 and 3.3.1.</p><p>Compute resources are the technical endowment of users that they provide to and consume from the social cloud. Here, resources largely entail personal computers, servers or clusters. However, we note that the latter is unlikely for the average user. We envisage that as the computing industry continues to invest in mobile computing devices that such devices could also be offered within a social cloud in the future. Today, however, issues such as network stability and battery life hamper their inclusion. However, despite this researchers are making notable progress in this area; see <ref type="bibr" target="#b19">[19]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.2">Social Adapters and User Preferences</head><p>To facilitate social sharing, and the construction of sharing preferences, a social cloud requires access to users' social networks. We propose using a social adapter, rather than implementing the platform as a social network application (for example a Facebook application), as we have observed that users often misunderstand the separation between social networks and their applications <ref type="bibr" target="#b20">[20]</ref>. The most common misconception is that the social network will have access to users' data and/or resources if they offer them in a social cloud-like setting via a social network application, which is not the case. For example, Facebook applications are external to the Facebook infrastructure, and run on third party servers.</p><p>There are different ways in which the social graph required by matching mechanisms can be constructed; many platforms, following the necessary authorization, provide APIs to access the social graph and user profiles. It is, however, key to the basic assumptions of a social cloud that an element of bilateral approval has occurred in the establishment of a digital social tie. In other words, one user initiates the establishment of a digital tie, and the second user must confirm the request in order for the link to be established. This process is applied in social network platforms like Facebook, and Google+. Twitter, however, does not conform to this requirement, as a user can decide only who they follow, but not who their followers are. This is an important requirement for a social cloud, as without it we can not assume any form of pre-existent trust between participants.</p><p>Once the social network of a user has been accessed and the social database populated, the question is how to interpret the user's social ties for the purposes of allocation. There is no single unified methodology for the interpretation of social ties, and which to use is often context dependent. For our purposes, there are three obvious methods which could be applied either separately or in combination with one another: 1) ask users to rank their friends; 2) leverage methods from social network analysis to identify features of social ties that can be used to (artificially) construct preferences; and 3) use social network and interaction theories to construct a social sharing and interaction model for a social compute cloud, and tune this model over time based upon observed interactions within the social network platform and the social cloud. Each of these approaches have their advantages and disadvantages, and we do not advocate that this list is complete.</p><p>The use of user generated lists, has the advantages that it is easy to implement, requires no special permissions (other than access to the list of friends), and should be closest to capturing the true preferences of the user. However, given that the average Facebook user currently has 190 friends <ref type="bibr" target="#b7">[7]</ref>, this approach would not scale as more friends joined the social cloud, as we cannot expect users to rank large numbers of friends. In contrast, the use of computational methods has the main advantage that these approaches can be scaled as the social cloud grows. The challenge, however, is in the identification of appropriate methods and indicators. These approaches also require more data from the social network platform, and are thus more invasive of a user's privacy. A simple example that can be used in a preferencelike manner, are constructs like circles in Google+ or relationship lists in Facebook, as these are often created or at least curated by the user, and represent either specific (sub) groups in the social network and/or relationship types that are "similar" in some way. It is also possible to compose more complicated methods of assessing social ties with the use of indicators to assess the properties of a social tie. Identifying the best implementation(s) of the preferences module, however, remains as future work.</p><p>Two important points that cannot be overlooked, regardless of the methodology used to define preferences, are the kinds of preferences that exist, and what the absence of preferences towards a user or group of users mean. Preferences can be categorized as complete or incomplete, and being with or without ties <ref type="bibr" target="#b21">[21]</ref>, <ref type="bibr" target="#b22">[22]</ref>. Here complete means that a preference rank exists between every connected user; and a tie implies that a user is indifferent between two users or a group of users. The case of complete preferences without ties imposes a strictly ordered preference ranking over all the other users, and is the standard case in most of the literature. If preferences either have indifferences or are incomplete, the corresponding problem of matching the preferences to an outcome becomes considerably harder (i.e., NP-hard). The absence of preferences towards users, i.e., incomplete preferences, occurs if users either explicitly don't rank other users, thereby indicating they don't want to be matched with them, or if a user does not rank all other users due to lack of time or motivation. Both cases yield incomplete preferences, but occur for quite different reasons. To better distinguish these two cases, the implementation of a preference module has to either indicate that missing preferences mean an unwillingness to be matched or assume that missing users have the lowest preference. In other words, users either define who they are willing to share with, or "block" users.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.3">Socio-Economic Model</head><p>A socio-economic model for a social compute cloud specifies which type of preference matching is used and how it is implemented. As a first step, the supply and demand, i.e., the individual requests and resource offers of users, have to be captured. In our model this is done in the social clearing house. The centralized implementation means we know the complete supply and demand in the market, which can yield better results than decentralized resource matching. The downside is that there may be additional overhead in storing and managing (updating) the corresponding information.</p><p>Given the supply and demand, a socio-economic model allows for the specification of certain "Market Design" objectives. For example, commonly used objectives include finding solutions to the matching problem which are stable (i.e., no matched user has an incentive to deviate from the solution) or optimizing the total welfare of the users, the fairness between the two sides of the market, or the computation time to find a solution. The choice of particular market objectives in turn affects which allocation and matching strategies can be considered. This can range from direct negotiation to a centralized instance that computes this matching; and both monetary and non-monetary mechanisms can be applied. Our approach considers non-monetary allocation mechanisms based on user preferences. This type of matching is successfully applied in a variety of cases, including the admission of students to colleges, and prospective pupils to schools. Depending on the specific market objective, several algorithms exist that compute a solution to the matching problem, e.g., computing a particularly fair solution or one with a high user welfare.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">IMPLEMENTATION</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Our implementation of a social compute cloud builds upon</head><p>Seattle, an open source peer-to-peer (P2P) computing platform. Seattle was chosen as the basis for this implementation due to its lightweight virtualization middleware, which we use to enable application execution on contributed resources, and its extensible clearing house model which we extend to enable social allocation via preference matching algorithms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Seattle</head><p>Seattle is an open source educational research platform designed to create a distributed overlay network over compute resources (servers, PCs and mobile devices) donated by its users. It features a lightweight virtualization layer (based on Repy-a subset of Python) that runs on a contributor's machine and enables other users to run applications across different operating systems and architectures. Importantly the virtualization layer ensures that applications are sandboxed and isolated from other programs running on the same host. Seattle is implemented in Python and the clearing house is built on the Django framework. Seattle's core components are:</p><p>Node managers act as gatekeepers for resources and are deployed on every contributed resource. The node manager ensures that users have the appropriate credentials to interact with a particular VM running on the host system. When a node manager is installed it advertises the location of the host machine to a global lookup service. A unique key for the resource is created and logged at the clearing house to associate the node manager with the donor.</p><p>Virtual machines (vessel) are sandboxed environments that provide both security and performance isolation. For example the VM stops applications from performing malicious actions and it limits usage of system resources (e.g., CPU or memory) to configurable levels. These limitations are imposed through integration with the Python parser which reads the program's parse tree and ensures that only predefined 'safe' operations are executed. Performance isolation relies on monitored resources at the API level to verify that resource limits are not exceeded. This is done by analyzing every call to the API and choosing to either accept or deny it based on resource usage.</p><p>The clearing house facilitates the matching process between resources donated by providers and resources required by consumers. The clearing house is a web based portal for managing users' Seattle resources. Upon registration, users can create key pairs and download a customized installer to setup a node manager and VM system on their own resources. The clearing house includes several matching algorithms such as: distributing VMs (geographically), and allocating VMs on the same network or at random.</p><p>Seattle includes a number of other services that are used for various functions. For example, Seattle includes a global lookup service that is designed to enable the discovery of contributed resources; a software updater to patch potential vulnerabilities and update parts of the system; and a range of infrastructure services such as NAT traversal, installers for bundling applications, and monitoring services that are used throughout the system.</p><p>We chose to extend the Seattle platform due to its open source and extensible architecture. The modular design of Seattle enables the use of its existing virtualization environment to execute applications on distributed resources handling aspects such as lookup, authentication and authorization. The virtualization layer is also extremely lightweight and can be downloaded, installed and configured in seconds without any significant overhead and with only a small system footprint. The clearing house model is generic and extensible providing support for user defined allocation protocols and integration of arbitrary information sources in its allocation process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Implementing a Social Clearing House</head><p>Building upon Seattle we leverage the same base implementation for account creation and registration processes, donation infrastructure, and resource acquisition mechanisms. We have extended and deployed a new social clearing house (https://seattle.ci.uchicago.edu) that leverages social information derived from users' Facebook profiles and relationships. We have implemented a service that enables users to define preferences and we have developed several new allocation mechanisms that utilize socially aware preference matching algorithms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Social Network Integration</head><p>In order to access users' profile information and relationships, the social clearing house requires access to a user's Facebook profile. To do so, we have created a Facebook application for the social clearing house that requests access to profile information, friends and friend lists of registered users. The Facebook application is integrated with the clearing house through the Django social auth plugin which, when configured with a Facebook application, allows users to associate their Seattle account with their Facebook account. Authentication with Facebook uses the OAuth2 protocol to obtain an access token that allows the requesting application (the clearing house) to act on behalf of the user within the stated scope. The clearing house stores this access token when a user logs into the service and uses it with the Facebook APIs to obtain the profile and friend lists. The clearing house stores the list of friends for each user in an application database and periodically refreshes this information.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">Preference Assignment</head><p>We use a simple numerical preference matching interface (see Fig. <ref type="figure" target="#fig_1">2</ref>) that enables users to define their preference for a friend as both a consumer and a provider. The higher the value the greater the users' preference for their friend. A value of 0 indicates no preference and a negative value indicates unwillingness to interact with that friend. Assigning the same value to multiple friends indicates indifference between them. When preferences are assigned they are stored in the application database and are used to generate the overall preference model for allocation involving the user.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.3">Social Resource Allocation</head><p>Seattle is based on the principle of best effort and random allocation. To reduce the search space Seattle implements a pseudo random mechanism to reduce user/donation permutations. Each user is assigned a (non-unique) port (within a range of 100) and each donated node is assigned 10 ports at random within this same range on which it is able to accept allocations. When allocating resources the clearing house filters the list of donated resources by matching port. While this is a viable approach in the standard Seattle deployment it places artificial limitations on potential matches and in our case violates the aim to provide preferred sharing. In the social clearing house we have removed this constraint and instead allow any combination of node and user as determined by the social allocation algorithms.</p><p>The general process of allocation in the social clearing house is to first determine available donations with whom the requesting user has a relationship. To do this the list of all donations in the system is filtered by the list of friends for a particular user. The consumer's preferences for each possible friend is then computed by retrieving preferences stored in the database. Likewise the preferences for each of these friends for the requesting user as a consumer are computed. This information is then aggregated and sent to the matching service (Section 3.3.2) to determine an appropriate match. The social clearing house attempts to acquire available nodes from the provider to satisfy the request using Seattle's resource acquisition mechanisms. If, by the time of reservation, the chosen provider is no longer available the entire process must be re-executed. After the allocation process the user is presented with the VMs they have been allocated (see Fig. <ref type="figure" target="#fig_2">3</ref>). Using this interface, users can renew resource reservations as well as remove them and also see who is currently using their resources.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Preference-Based Matching</head><p>Two-sided preference-based matching is much studied in economic literature, and as such algorithms in this domain can be applied in many other settings. We have selected three algorithms from the literature, and a fourth of our own implementation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.1">Matching Algorithms</head><p>For the case of complete preference rankings without indifferences there are polynomial-time algorithms that  solve the matching problem for different objective functions. In the literature, citing empirical evidence, stability is considered important for successful matches <ref type="bibr" target="#b22">[22]</ref>. Stability simply means that there is no pair of users who would prefer to be matched over their current match. As there can be many different stable solutions for a given matching problem the other commonly considered objectives are welfare (i.e., the average rank each user is matched with) and fairness (i.e., if the two sides are treated equally in terms of welfare). The deferred-acceptance (DA) algorithm <ref type="bibr" target="#b23">[23]</ref> is the best known algorithm for two-sided matching and has the advantages of having a short runtime and at the same time always yields a stable solution. However, it cannot provide guarantees about welfare, and yields a particularly unfair solution (one side gets the best stable solution whereas the other side gets the worst stable solution). For certain preference structures, the welfare-optimal (WO) algorithm <ref type="bibr" target="#b24">[24]</ref> yields the stable solution with the best welfare score (i.e., the stable solution for which the average rank that each user is matched with is lowest) by using certain structures of the set of stable solutions and applying graphbased algorithms. DA and WO are two standard approaches used in the literature and are also considered in this paper.</p><p>As soon as either indifferences or incomplete lists are introduced, the problem of finding stable solutions with additional properties such as welfare or fairness becomes NP-hard. DA and WO can still be used in such settings, but they can no longer guarantee to find the globally best solution. In such settings, the approximation algorithm Shift <ref type="bibr" target="#b21">[21]</ref> can find a stable match, with the maximum number of matched pairs for certain special cases. However, these scenarios are in general hard to approximate, and consequently the standard algorithms are not able to provide non-trivial quality bounds with respect to their objectives. Finding the optimal solution for the matching problem with respect to the most common metrics: welfare or fairness, is NP-hard <ref type="bibr" target="#b21">[21]</ref>. DA and WO run in polynomial time (Oðn 2 Þ and Oðn 4 Þ, respectively) and Shift's runtime is proportional to the squared length of the largest indifference group of all users.</p><p>Therefore, we proposed the use of heuristic algorithms such as a genetic algorithm (GA) in <ref type="bibr" target="#b25">[25]</ref>, and have shown that these algorithms can yield superior solutions compared to the other algorithms. The GA starts with randomly created (but stable) solutions and uses the standard mutation and crossover operators to increase the quality of the solutions. This makes the application of such heuristics the preferred choice if the quality of the allocation is the main goal. We also showed that solutions can yield even better results when combined with a threshold acceptance approach. The algorithm used in this paper, GATA, is a combination of a GA with a threshold acceptance (TA) algorithm, which further improves the solution quality. In the first step, GATA computes a solution to the matching problem by using GA, and then uses this solution as input for the TA algorithm, an effective local search heuristic that applies and accepts small changes within a certain threshold of the current solution performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.2">Matching Service</head><p>To facilitate matching, we implemented a RESTful encapsulation of the four algorithms presented above. It can be used to either perform batch allocations for a group of users, or single allocation for an individual user. Whilst it may seem unusual to facilitate both of these settings, the reason is simple: the matching algorithms perform best when batches of users are allocated simultaneously. In reality, however, it is unlikely that large batches of users will simultaneously request resources. Rather, demand for the matching service will be stochastic. Hence both options present different tradeoffs. Individual allocations may result in resources being blocked for other users, for example those with a small number of connections. Whereas batch allocation means that users may have to wait until the next round of allocations to receive resources. Both options are inefficient in different ways: individual allocation achieves at best local optima, and can block resources for other users, but can be performed in near real time, as the computational effort is significantly lower; batch allocations could achieve the global optimum, but may require either migrations or users to wait for resources. We explore these tradeoffs and their significance in Section 4.</p><p>The social network of users is captured via the existence of preferences between users. The matching mechanisms will only consider matching two users if both have a preference for each other. If a preference exists in only one direction, i.e., A has ranked B, but B has not ranked A, we assume that B has not yet considered A, and A's preference for B will be ignored.</p><p>To invoke the matching service, a JSON string describing the user preferences is sent to the service. Upon a successful match, i.e., when one or more allocations can be found, the matching service will return a JSON string describing the matched consumer(s) and provider(s).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">EVALUATION</head><p>We showed in <ref type="bibr" target="#b4">[4]</ref>, <ref type="bibr" target="#b5">[5]</ref> and <ref type="bibr" target="#b16">[16]</ref> that the basic concept of a social cloud is feasible within the context of a social network and manageable for an "average" Facebook user. To evaluate a social compute cloud, we propose to study the platform's ability to allocate resources in the presence of uncertain supply and demand, various sizes of social communities and different preference structures. In Section 4.1, we study the different allocation algorithms described in Section 3.3.1 with respect to the time required to compute solutions for various sizes of social compute cloud. In Section 4.2 we investigate algorithm performance outside their typical settings with respect to batch and individual allocation and for different community sizes and preference structures.</p><p>To facilitate our evaluation, we use the social cloud simulator described in <ref type="bibr" target="#b26">[26]</ref>. Using this simulator, we can adjust the properties of a social cloud as described above while still replicating real user resource availability distributions derived from donations and resource availability in SETI@home <ref type="bibr" target="#b27">[27]</ref>. The data from SETI@home represents statistical clusters of users, that can be used in our simulator to define both when a resource will become available and for how long, as well as when users will request resources. As we do not know at this stage, how scalable the allocation methods will be, or how easy they will be to parallelize, we run up to eight instances of the simulator in parallel on two 2.53 GHz Quad-Core Xeon processors with 24 GB main memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Allocation Algorithm Runtime</head><p>The runtime of an allocation algorithm has a large impact on its applicability for a social compute cloud. Given that preference-based matching is often NP-hard, algorithm runtime is an important design consideration. In this part of the evaluation, we investigate how algorithm runtime is affected by the level of preference completeness, and whether preferences are strict or not, i.e., whether indifferences are permitted. We argue that although complete and strict preferences are often assumed in the economic literature, they are unrealistic assumptions. Therefore, we investigate how relaxing these assumptions impact algorithm runtime.</p><p>Fig. <ref type="figure" target="#fig_3">4</ref> shows the runtime of each algorithm relative to the problem size, i.e., how many users are on each market side (consumers Â providers), and the number of (indifference) groups that users have. Here, "strict" indicates that preferences are strict, i.e., there are no indifferences, and "ties" indicates that users have indifferences in their preferences. The size of an indifference group is not restricted, i.e., there can be one group containing all users or multiple groups. This is determined at random.</p><p>The figure shows that runtime increases significantly with the size of the problem space. Theoretical results suggest that DA runs in Oðn 2 Þ, and WO in Oðn 4 Þ, indeed a sharp increase in runtime can be observed especially for WO, yet even DA takes several seconds to compute for larger problem sizes. Furthermore, the heuristic GATA exhibits a longer runtime than DA and WO for smaller problem sizes, but its relative runtime improves if users have indifferences, i.e., if the setting is more realistic. The longer runtime for smaller instances is, most likely, due to the initialization steps necessary for the GA. Fig. <ref type="figure" target="#fig_3">4</ref> illustrates the considerable overhead of the approximation algorithm (Shift), as its runtime depends on the length of indifference lists. As the length of the largest indifference list is not limited, we were only able to calculate up to a problem size of 250 Â 250 users. Hence, especially in realistic settings, it is not a feasible option.</p><p>For users with a large number of friends participating in a social compute cloud, it may not be feasible to rank everyone. Therefore Fig. <ref type="figure" target="#fig_4">5</ref> depicts the scenario where users rank different numbers of their friends, and do not provide a complete set of rankings. The scenario assumes 1,000 users on each side and varies the number of friends ranked by each user (to create a realistic setting, we allowed up to 10 users per indifference group). Note that WO is not depicted, as it has not been developed for incomplete preferences with ties.</p><p>The runtime for DA and Shift increases if users explicitly provide rankings for more users. For Shift the increase is considerable. GATA, however, seems to take longer if only a few users are ranked. This is most likely because the heuristic has to repeatedly check if new potential solutions are acceptable to the users, i.e., if the users of each matched pair appear in each others' preference list. By increasing the number of users, new, valid solutions can be calculated more easily and quickly, yet it takes longer to evaluate the solutions. These results show that in addition to the number of users, the number of preference rankings also influences computation time. The results illustrate that appropriate actions are needed when users do not rank all their friends. They can either be ranked with the lowest preference (beneficial for GATA) or left out (beneficial for DA and WO). Note, however, that in case unranked users are left out, the algorithms cannot guarantee to find a solution of maximum size, i.e., some users might be left unmatched whereas they would be matched if unranked users receive the lowest preference rank.</p><p>Overall, we see that the even the fastest algorithms which always yield stable results take at least several seconds to compute. If the allocation has to be computed very frequently, as is potentially the case in a social cloud, we require faster algorithms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Considerations for Stochastic Participation</head><p>The matching algorithms discussed in related literature are usually assumed to be batch jobs. In this case, allocations are computed after certain time intervals, e.g., every hour. For example, economic studies of allocation mechanisms in cloud computing often assume that allocations are computed hourly, often referring to Amazon EC2 where users buy resources based on hourly usage. In the case of our social compute cloud, we can say that the allocation is calculated every x hours, where x is the predetermined lease period of a compute vessel.</p><p>While this type of allocation computation yields good results for the supply and demand given at the time of the computation, it is unclear what happens in the case of new  or changing supply and demand. For example, when users offer/request new resources or retract offers/requests in between two calculation intervals. It is clear that if allocations are only (re)computed at predetermined time intervals, resources will be idle and requests will be left (or become) unsatisfied. As far as we are aware, existing preference-based matching literature does not consider such settings. We therefore propose the following solutions for dynamic supply and demand:</p><p>The "optimal" solution is immediate rematching of the entire supply and demand. In this case, no (new) supply would be idle if an allocation was available, and the resulting allocation would always be stable (assuming we use a stable matching algorithm). However, this places additional requirements on the system. First, computing resources (e.g., VM's) would have to be migratable at any given point in time, and, second, the runtime of the allocation mechanism has to be short. For our implementation, this is currently unachievable, as Seattle does not yet support migration. Hence, this approach should be considered the best benchmark from a system perspective, i.e., with respect to performance criteria such as stability, welfare, and fairness.</p><p>The "worst" solution would be to disregard any new incoming supply or demand until the next time the allocation is computed. In this case, new supply/demand would be idle until the next batch allocation, even if there were corresponding demand/supply.</p><p>An intermediate solution would be to use allocation heuristics that assume that the currently matched supply/demand cannot be migrated until either the next time the overall allocation is determined (i.e., when the leases expire), or until the requester or supplier drops out of the matching. We consider two cases of heuristics for this case: 1) Random: allocate resources to/from random friends of the user; and 2) Greedy: allocate the best available match for the incoming, requester/provider based upon their sharing preferences.</p><p>Note that, both algorithms are likely to yield unstable solutions, i.e., the consumer-provider pairs in the market at the end of the lease period would not be the pairs that a stable allocation algorithm would yield. However, if we assume that matched pairs cannot be migrated in between two batch allocations, this does not, per se, affect the practical stability in between batch computations. We also note that a lack of system stability may mean that some users are blocked as all valid allocations have been made, and none of their friends have or need resources. This is why stability is such a critical metric.</p><p>A final approach is to check if there is a match that would yield a stable solution, but not require other users to be reallocated. We argue that this approach would be subsumed by the above approaches, as the probability of achieving a stable solution is low, and in the absence of a stable match, another approach would be applied.</p><p>To study stochastic supply and demand, we simulated the four approaches mentioned above to study how they support the system with new supply/demand in between two batch-allocation computations. Intuitively, immediate rematching should yield the best solutions, whereas leaving resources idle should be worst. Random and Greedy should be somewhere in between.</p><p>Fig. <ref type="figure" target="#fig_5">6</ref> shows the simulation results for each approach. We simulated 200 users (100 on each side) with incomplete preferences and indifferences. This is a realistic setting as not each user can be expected to rank all other users. Each user is drawn an (un)availability distribution from the SETI@home distribution, which determines when and how long they will be (un)available. Only available users are taken into account for resource matching. At time points 155, 265 and 410, the batch allocation algorithm is run for the current supply/demand. Fig. <ref type="figure" target="#fig_5">6a</ref> shows that the number of matched users fluctuates over time as users come and go based on their (un) availability pattern. It can be seen that, most of the time, the "optimal" matching yields the highest number of matched pairs, and both Random and Greedy yield fewer matched pairs. This can be explained by the lack of choice that incoming users have: in Random and Greedy, only the currently unmatched users are suitable for matching, whereas the "optimal" rematching can consider all available users at that time. This gives the "optimal" matching more flexibility in finding suitable matches for users. Fig. <ref type="figure" target="#fig_5">6a</ref> also shows the baseline scenario in which allocation only happens at predetermined time intervals. In this case, new requests and offers are only considered at predetermined time intervals (here: time points 155, 265 and 410), and if matched users become unavailable, the corresponding request/offer is freed without being automatically reallocated. Hence, the baseline scenario depicts the worst case, a quasi-static scenario where intermediate demand is not considered. It can be easily seen in Fig. <ref type="figure" target="#fig_5">6a</ref> that not considering intermediate supply/demand can lead to a significant amount of unused, unallocated resources, and that even simple heuristics for intermediate matching can increase the number of matched pairs considerably.</p><p>Figs. 6b, 6c, and 6d show the results for stability, welfare and fairness respectively. In these figures welfare represents the average rank for a friend with whom a user is matched and fairness shows the welfare distribution between consumers and providers. As more preferred options have a lower preference score (the most preferred option has score 1), a lower welfare score is preferable. A positive fairness indicates better average welfare for the provider, whereas negative fairness indicates a better average welfare for consumers.</p><p>These figures show that immediate rematching performs well with respect to welfare (allocating users close to their highest preference) and fairness (balancing the two market sides), and always yields stable outcomes. This is partially expected, as stability is enforced through the algorithm. Furthermore, both Random and Greedy strategies lead to a worse welfare score, as only unallocated resources are considered for matching whereas the "optimal" algorithm allows rematching of previously allocated resources. The Greedy strategy seems to provide better welfare than the Random strategy (Fig. <ref type="figure" target="#fig_5">6b</ref>), and at the same time is computationally as efficient. While the runtime for GATA per allocation is around 10 seconds, both Random and Greedy run almost instantly (milliseconds). We get similar results for the number of unstable pairs, which are most often lower for the Greedy strategy than the Random strategy.</p><p>Fig. <ref type="figure" target="#fig_5">6d</ref> shows that both the Greedy and Random strategies seem to be more beneficial for consumers, indicated by the lower fairness scores, especially compared to the optimal matching. The number of unstable pairs introduced by Greedy or Random is comparably low, given that each new allocated pair has to be compared to all existing matched pairs for instability. (For example, if a new pair is added to 30 existing matched pairs, in the worst case the new pair could introduce up to 60 unstable pairs). This finding, along with the fact that Greedy can sometimes yield worse results for welfare as well, is not surprising as it primarily aims to give new, incoming users their highest priority, without considering the preferences of other users. Such a strategy can yield matches that are good for the incoming user, yet are not optimal for the system. For example, if there are two open offers, the Greedy strategy would allocate the most preferred one to the incoming user, whereas it could be better for the market to reserve this particular offer for the next incoming user with a higher ranking.</p><p>Overall, the results suggest that approaches for the intermediate rematching of supply/demand are necessary, and that on average the Greedy heuristic performs well with respect to welfare, despite one side being favored in the matching. This is especially interesting if immediate rematching is not technically feasible.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Discussion</head><p>The social compute cloud facilitates preference-based sharing of computational infrastructure using several different preference matching algorithms. Our prototype implementation leverages the Seattle virtualization middleware to enable execution of user applications on remote resources and our deployed clearing house enables users to define preferences and provides several matching algorithms to obtain a short term resource lease. Our results show the qualities of the algorithms and the tradeoffs that arise from factors like runtime, allocation mode, and allocation quality.</p><p>Section 4.1 shows a tradeoff between the allocation quality (in terms of the objective function) and the runtime of the respective algorithms. This is particularly clear for larger problem sizes. DA is the most time-efficient algorithm to obtain a stable allocation, whereas the other algorithms' runtimes increase considerably with problem size. However, it is well-known that the stable allocation calculated by DA is highly unfair in the sense that it favors one side over the other. As we show in <ref type="bibr" target="#b25">[25]</ref>, solution quality with respect to fairness or welfare can be significantly increased by using the other algorithms. Hence, using algorithms such as GATA is preferable for smaller settings or when there are no time constraints, whereas using fast algorithms such as DA might be better if allocations need to be made more frequently.</p><p>Section 4.2 shows convincing evidence that we must consider supply and demand changing between batch allocation times. While these results show that the solution quality tends to be very good and even close to optimal it is clear that continuously running the algorithms might not be feasible due to their computational overhead. Hence, we need fast heuristics that are able to deal with changing supply and demand, although these heuristics usually lack the solution quality of the other algorithms. For small problem sizes, it might still be feasible to run algorithms such as the GATA in a continuous setting.</p><p>One potential strategy to improve both allocation quality and runtime would be to compute an initial solution with a fast algorithm, e.g., DA, and then leverage users' provided computational power to improve solution quality. This would give users an incentive to provide resources for a cooperative infrastructure <ref type="bibr" target="#b16">[16]</ref>.</p><p>Another issue with the matching algorithms considered in this paper is that they currently support only one-to-one matchings, i.e., they do not yet support multi-unit allocations. In some settings, users might contribute or request multiple units of resources (e.g., several VMs to run a compute-intensive job). One strategy to deal with this problem would be to extend the algorithms to handle these cases. Another simple strategy would be to include users with multiple units of supply or demand as multiple entries in the matching problem, and solve it with the algorithms discussed in this paper.</p><p>In this paper, we have focused on methods for the allocation of resources within a social cloud. However, once users have been allocated one or more resources, they need to use their social cloud to create dynamic clouds and build distributed applications. Seattle already provides a demokit where applications similar to these can be implemented (see: https://seattle.poly.edu/wiki/EducatorsPage). For instance, a social cloud user could easily instantiate a Map-Reduce framework running on socially connected nodes. A master worker scenario similar to that discussed in <ref type="bibr" target="#b28">[28]</ref> could also be constructed. Finally, peer-to-peer like social content delivery networks (see <ref type="bibr" target="#b29">[29]</ref>, <ref type="bibr" target="#b30">[30]</ref>) for the sharing or distribution of large scientific data could be implemented. A core aspect of our future work is the construction of a Seattle-based toolkit for social cloud applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">RELATED WORK</head><p>With the increasing pervasiveness of social network platforms, adoption of social network structures for different types of collaboration is becoming more common. Key examples are: community and scientific portals like Polar-GRID <ref type="bibr" target="#b31">[31]</ref> and ASPEN <ref type="bibr" target="#b32">[32]</ref>; social science gateways <ref type="bibr" target="#b33">[33]</ref>, <ref type="bibr" target="#b34">[34]</ref>; social storage systems like Friendstore <ref type="bibr" target="#b35">[35]</ref> and omemo.com; network and compute infrastructure sharing web sites such as fon.com; models to share insurance policies amongst social peers (friendsurance.de); and where social networks emerge due via collaboration, e.g., <ref type="bibr" target="#b36">[36]</ref>, <ref type="bibr" target="#b37">[37]</ref>.</p><p>McMahon and Milenkovic <ref type="bibr" target="#b38">[38]</ref> proposed social volunteer computing, an extension of traditional volunteer computing, where consumers of resources have underlying social relationships with providers. This approach is similar in nature to a social compute cloud, but it does not consider the actual sharing of resources, as there is no notion of bilateral exchange.</p><p>Ali et al. <ref type="bibr" target="#b39">[39]</ref> present the application of our social cloud model to enable users in developing countries to share access to virtual machines through platforms like Amazon EC2. In effect they subdivide existing allocations to amortize instance cost over a wider group of users. Using a cloud bartering model (similar to our previous virtual credit model), the system enables resource sharing using social networks without the exchange of money and relying on a notion of trust to avoid free riding. Like our approach, they use a virtual container (LXC) to provide virtualization within the existing virtual machine instance, however our approach using Seattle's programming level virtualization provides a much more lightweight model at the expense of flexibility.</p><p>Mohaisen et al. <ref type="bibr" target="#b40">[40]</ref> present an extension to our definition of a social cloud. The authors investigate how a social compute cloud could be designed, and propose extensions to several well known scheduling mechanisms for task assignments. Their approach considers resource endowment, and physical network structure as core factors in the allocation problem, which are different considerations for resource allocation. They analyse the potential of a social cloud via simulation, using several co-authorship and friendship networks as input. They observe how a social cloud performs based upon variations in load, participation and graph structure.</p><p>Tan et al. <ref type="bibr" target="#b41">[41]</ref> present a similar idea to the basic concept of a social cloud. The authors, although not extending beyond a conceptualisation, motivate the philosophy of a social cloud with the core use case of sharing and exchanging resources within a social network or community to tackle big data problems.</p><p>Gracia-Tinedo et al. <ref type="bibr" target="#b42">[42]</ref>, <ref type="bibr" target="#b43">[43]</ref>, <ref type="bibr" target="#b44">[44]</ref> propose a friend-tofriend cloud storage solution, i.e., dropbox via a social network: F2Box. They analyze and discuss how to retain a reliable service whilst using the best effort provisioning of storage resources from friends. They identify that a pure friend-to-friend system cannot compare in terms of quality of service with traditional storage services. Therefore, they propose a hybrid approach where reliability and availability can be improved using services like Amazon S3. This approach provides a valuable consideration in the realisation of a social cloud, but is not necessarily transferable to our setting.</p><p>There have been several publications on economic models for a social cloud that have developed independently. Zhang and van der Schaar <ref type="bibr" target="#b45">[45]</ref> and we <ref type="bibr" target="#b46">[46]</ref> discuss different types of incentives users face during their participation in a social cloud, and describe the challenges of providing the right incentives to motivate participation. While in another study <ref type="bibr" target="#b16">[16]</ref>, we investigated how the infrastructure of a social cloud can be co-operatively provided by the participating members, and present an economic model that takes individual incentives and resource availability into account.</p><p>Kuada and Olesen <ref type="bibr" target="#b47">[47]</ref> propose opportunistic cloud computing services (OCCS): a social network approach for the provisioning and management of enterprise cloud resources. Their idea is to provide a governing platform for enterprise level social networking platforms consisting of interoperable Cloud management tools for the platform's resources, which are provided by the enterprises themselves. The authors present the challenges and opportunities of an OCCS platform, but there is no indication that they have yet built an OCCS. Similarly, Diaspora, 4 and My3 <ref type="bibr" target="#b48">[48]</ref> apply similar concepts to host the social network on resource provided by their users.</p><p>Gayathri et al. <ref type="bibr" target="#b49">[49]</ref> and Chen and Roscoe <ref type="bibr" target="#b50">[50]</ref> discuss the security implications in the construction of a social cloud. They respectively pay special attention to, and provide counter measures for, how a social cloud can be used to circumvent copyright as well as perform other illicit actions. Whilst the consideration of security implications are critical for the success of a social cloud, it is not yet a focal point in our work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSIONS AND FUTURE WORK</head><p>In this paper, we have presented a social compute cloud: a platform that enables the sharing of infrastructure resources between friends via digitally encoded social relationships. Using our implementation, users are able to execute programs on virtualized resources provided by their friends. To construct a social compute cloud, we have extended Seattle <ref type="bibr" target="#b12">[12]</ref>, <ref type="bibr" target="#b18">[18]</ref> to access users' social networks, allow users to elicit sharing preferences, and utilize matching algorithms to enable preference-based socially-aware resource allocation.</p><p>Preference-based resource matching is (in a general setting) an NP-hard problem, makes often unrealistic assumptions about user preferences and most state of the art algorithms run in batch modes. Therefore, we investigated what happens when we apply these algorithms to a social compute cloud under the assumption that resource supply and demand do not fit to a batch allocation model. By applying methods to allocate resources in between Amazon EC2-like periodic allocations, we were able to quickly (in milliseconds) allocate resources temporarily, and then globally optimize resource allocation at the next batch allocation period. Our results are promising and indicate how the allocation of resources could take place in a production social compute cloud.</p><p>As future work, we will include additional ways for users to provide their preferences, as well as methods to detect them automatically from their social network. Where examples of the latter include: clustering based on homophily (aspects of similarity), relationship lists and Granovetter-like <ref type="bibr" target="#b51">[51]</ref> indicators for relationship strength. This would also enable further, and potentially more realistic settings for experimenting with the allocation algorithms. In terms of the social cloud platform we will further extend the sandbox to provide additional system calls and social access control so that users can give extended/restricted access rights to groups, for example enabling command line access for family members. These extensions would increase the number of possible applications that could be executed within the social cloud and also further extend the social integration of the system. Finally, we aim to investigate how users use and interact with the resources of their friends, and move our implementation towards a production ready system. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. A social compute cloud and its core components.</figDesc><graphic coords="3,94.79,51.19,377.28,198.80" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. The user preference interface.</figDesc><graphic coords="6,35.49,51.19,232.80,135.28" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. The social clearing house interface showing resources being consumed and offered.</figDesc><graphic coords="6,298.49,51.19,232.80,166.56" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Algorithm runtimes with different problem sizes.</figDesc><graphic coords="8,28.40,51.19,246.72,143.76" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Runtimes for different numbers of ranked users, for 1,000 users per side.</figDesc><graphic coords="8,292.48,51.19,244.80,110.32" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. Comparison of matching heuristics for intermediate supply and demand.</figDesc><graphic coords="10,38.09,51.13,490.66,316.70" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Simon</head><label></label><figDesc>Caton received the BSc (Hons) degree in computer science and the PhD degree in computer science from Cardiff University in 2010. He is a senior researcher at Karlsruhe Institute of Technology. He is the coordinator of the Young Investigator Group: Social Cloud: social networkbased collaboration environments. His research interests include social cloud computing, social network analysis, autonomic computing, electronic markets, and service level agreements. He is a member of the IEEE. Christian Haas received the diploma in business engineering from the Karlsruhe Institute of Technology in 2010, and the Master of Science degree in computer science from the Georgia Institute of Technology in 2008. He is currently working toward the PhD degree at the Karlsruhe Institute of Technology, Germany. His research interests include incentive engineering, two sided matching, and simulation for social clouds. He is a member of the IEEE. Kyle Chard received the BSc (Hons) degree in computer science and the BSc degree in mathematics and electronics. He received the PhD degree in computer science from Victoria University of Wellington in 2011. He is a senior researcher at the Computation Institute, University of Chicago and Argonne National Laboratory. His research interests include distributed metascheduling, grid and cloud computing, economic resource allocation, social computing, and services computing. He is a member of the IEEE. Kris Bubendorfer is the program director for networking engineering and a senior lecturer in the School of Engineering and Computer Science at Victoria University of Wellington. His PhD thesis was on mobile agent middleware, and his long term research interests are centered around distributed computing-including grid, cloud, market oriented, and social computing, plus he has wider interests in privacy, digital provenance, and reputation. He is a member of the IEEE. Omer F. Rana received the PhD degree in neural computing and parallel architectures from the Imperial College of Science, Technology &amp; Medicine, London University, United Kingdom. He is a professor of performance engineering at the School of Computer Science &amp; Informatics, Cardiff University, United Kingdom. His research interests include high performance distributed computing, data mining, and multi-agent systems. He served as the deputy director of the Welsh e-Science Centre and has also worked as a software developer in the United Kingdom. He is a member of the IEEE.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>IEEE TRANSACTIONS ON SERVICES COMPUTING, VOL. 7, NO. 3, JULY-SEPTEMBER 2014</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_1"><p>IEEE TRANSACTIONS ON SERVICES COMPUTING, VOL. 7, NO. 3, JULY-SEPTEMBER 2014</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>This work was partially funded by the Karlsruhe House of Young Scientists (KHYS). We would like to thank Justin Cappos and the Seattle team for their assistance in resolving technical issues, and many valuable discussions. We acknowledge support by Deutsche Forschungsgemeinschaft and Open Access Publishing Fund of Karlsruhe Institute of Technology.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ADDITIONAL RESOURCES</head><p>Find the project on Facebook: http://www.facebook.com/ SocialCloudComputing.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">The first volunteer computing project was the Great Internet Mersenne Prime Search which started in 1996</title>
		<idno>mersenne.org. REFERENCES</idno>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A View of Cloud Computing</title>
		<author>
			<persName><forename type="first">M</forename><surname>Armbrust</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comm. ACM</title>
		<imprint>
			<biblScope unit="volume">53</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="50" to="58" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<author>
			<persName><forename type="first">F</forename><surname>Gens</surname></persName>
		</author>
		<ptr target="http://blogs.idc.com/ie/?p=730" />
	</analytic>
	<monogr>
		<title level="m">New IDC IT Cloud Services Survey: Top Benefits and Challenges</title>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Quantitative Estimates of the Demand for Cloud Computing in Europe and the Likely Barriers to Up-Take</title>
		<author>
			<persName><forename type="first">D</forename><surname>Bradshaw</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Folco</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Cattaneo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Kolding</surname></persName>
		</author>
		<ptr target="http://ec.europa.eu/information_society/activities/cloudcomputing/docs/quan-titative_estimates.pdf" />
		<imprint>
			<date type="published" when="2012-07">July 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Social Cloud: Cloud Computing in Social Networks</title>
		<author>
			<persName><forename type="first">K</forename><surname>Chard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Caton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Rana</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Bubendorfer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Third Int&apos;l Conf. Cloud Computing (CLOUD)</title>
		<meeting>IEEE Third Int&apos;l Conf. Cloud Computing (CLOUD)</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="99" to="106" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Social Cloud Computing: A Vision for Socially Motivated Resource Sharing</title>
		<author>
			<persName><forename type="first">K</forename><surname>Chard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Bubendorfer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Caton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Rana</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Services Computing</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="551" to="563" />
			<date type="published" when="2012-01">Jan. 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The Small World Problem</title>
		<author>
			<persName><forename type="first">S</forename><surname>Milgram</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Psychology Today</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="60" to="67" />
			<date type="published" when="1967">1967</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Four Degrees of Separation</title>
		<author>
			<persName><forename type="first">L</forename><surname>Backstrom</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Boldi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Rosa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Ugander</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Vigna</surname></persName>
		</author>
		<idno>abs/1111.4570</idno>
	</analytic>
	<monogr>
		<title level="j">CoRR</title>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Its a Social World: Top 10 Need-to-Knows about Social Networking and Where Its Headed</title>
		<ptr target="http://www.comscore.com/Insights/Presentations_and_Whitepapers/2011/it_is_a_social_world_top_10_need-to-knows_about_social_net-working" />
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A Social Cloud for Public eResearch</title>
		<author>
			<persName><forename type="first">K</forename><surname>John</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Bubendorfer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Chard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proc. Seventh IEEE Int&apos;l Conf. Science</title>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Condor-A Hunter of Idle Workstations</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Litzkow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Livny</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">W</forename><surname>Mutka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Eighth Int&apos;l Conf. Distributed Computing Systems</title>
		<meeting>Eighth Int&apos;l Conf. Distributed Computing Systems</meeting>
		<imprint>
			<date type="published" when="1988">1988</date>
			<biblScope unit="page" from="104" to="111" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Boinc: A System for Public-Resource Computing and Storage</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">P</forename><surname>Anderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proc. Fifth IEEE/ACM Int&apos;l Workshop Grid Computing</title>
		<imprint>
			<biblScope unit="page" from="4" to="10" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Seattle: A Platform for Educational Cloud Computing</title>
		<author>
			<persName><forename type="first">J</forename><surname>Cappos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Beschastnikh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Krishnamurthy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Anderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 40th Technical Symp</title>
		<meeting>40th Technical Symp</meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">The Nist Definition of Cloud Computing</title>
		<author>
			<persName><forename type="first">P</forename><surname>Mell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Grance</surname></persName>
		</author>
		<idno>800-145</idno>
		<ptr target="http://csrc.nist.gov/publications/nistpubs/800-145/SP800-145.pdf" />
	</analytic>
	<monogr>
		<title level="j">Nat&apos;l Inst. of Standards and Technology</title>
		<imprint>
			<date type="published" when="2011-09">Sept. 2011</date>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Collaborative eResearch in a Social Cloud</title>
		<author>
			<persName><forename type="first">A</forename><surname>Thaufeeg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Bubendorfer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Chard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Seventh Int&apos;l Conf. E-Science (e-Science)</title>
		<meeting>IEEE Seventh Int&apos;l Conf. E-Science (e-Science)</meeting>
		<imprint>
			<date type="published" when="2011-12">Dec. 2011</date>
			<biblScope unit="page" from="224" to="231" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Foundations of Trust: Contextualising Trust in Social Clouds</title>
		<author>
			<persName><forename type="first">S</forename><surname>Caton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Dukat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Grenz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Haas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Pfadenhauer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Weinhardt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Second Int&apos;l Conf. Cloud and Green Computing (CGC)</title>
		<meeting>Second Int&apos;l Conf. Cloud and Green Computing (CGC)</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="424" to="429" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Co-Operative Infrastructures: An Economic Model for Providing Infrastructures for Social Cloud Computing</title>
		<author>
			<persName><forename type="first">C</forename><surname>Haas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Caton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Chard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Weinhardt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 46th Ann. Hawaii Int&apos;l Conf. System Sciences (HICSS)</title>
		<meeting>46th Ann. Hawaii Int&apos;l Conf. System Sciences (HICSS)</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Microeconomic Systems as an Experimental Science</title>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">L</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Am. Economic Rev</title>
		<imprint>
			<biblScope unit="volume">72</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="923" to="955" />
			<date type="published" when="1982">1982</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Experience with Seattle: A Community Platform for Research and Education</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhuang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Rafetseder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Cappos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. The Second GENI Research and Educational Workshop</title>
		<meeting>The Second GENI Research and Educational Workshop</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">A Survey of Mobile Cloud Computing: Architecture, Applications, and Approaches</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">T</forename><surname>Dinh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Niyato</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Wireless Comm. and Mobile Computing</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="1587" to="1611" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<author>
			<persName><forename type="first">R</forename></persName>
		</author>
		<title level="m">Representing Agreements in Social Clouds,&quot; master&apos;s thesis</title>
		<imprint>
			<publisher>Karlsruhe Inst. of Technology</publisher>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Improved Approximation Results for the Stable Marriage Problem</title>
		<author>
			<persName><forename type="first">M</forename><surname>Halld Orsson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Iwama</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Miyazaki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Yanagisawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Algorithms</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Deferred Acceptance Algorithms: History, Theory, Practice, and Open Questions</title>
		<author>
			<persName><forename type="first">A</forename><surname>Roth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int&apos;l J. Game Theory</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="537" to="569" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">College Admissions and the Stability of Marriage</title>
		<author>
			<persName><forename type="first">D</forename><surname>Gale</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Shapley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Am. Math. Monthly</title>
		<imprint>
			<biblScope unit="volume">69</biblScope>
			<biblScope unit="page" from="9" to="15" />
			<date type="published" when="1962">1962</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">An Efficient Algorithm for the Optimal Stable Marriage</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">W</forename><surname>Irving</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Leather</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Gusfield</surname></persName>
		</author>
		<idno type="DOI">10.1145/28869.28871</idno>
		<ptr target="http://doi.acm.org/10.1145/28869.28871" />
	</analytic>
	<monogr>
		<title level="j">J. ACM</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="532" to="543" />
			<date type="published" when="1987-07">July 1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Preference-Based Resource Allocation: Using Heuristics to Solve Two-Sided Matching Problems with Indifferences</title>
		<author>
			<persName><forename type="first">C</forename><surname>Haas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kimbrough</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Caton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Weinhardt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 10th Int&apos;l Conf. Economics of Grids, Clouds, Systems, and Services</title>
		<meeting>10th Int&apos;l Conf. Economics of Grids, Clouds, Systems, and Services</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">A Simulator for Social Exchanges and Collaborations-Architecture and Case Study</title>
		<author>
			<persName><forename type="first">C</forename><surname>Haas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Caton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Trumpp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Weinhardt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Eight IEEE Int&apos;l Conf. eScience (eScience &apos;12)</title>
		<meeting>Eight IEEE Int&apos;l Conf. eScience (eScience &apos;12)</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Discovering Statistical Models of Availability in Large Distributed Systems: An Empirical Study of Seti@home</title>
		<author>
			<persName><forename type="first">B</forename><surname>Javadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Kondo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Vincent</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Anderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Parallel and Distributed Systems</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="1896" to="1903" />
			<date type="published" when="2011-11">Nov. 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Towards Autonomic Management for Cloud Services Based upon Volunteered Resources</title>
		<author>
			<persName><forename type="first">S</forename><surname>Caton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Rana</surname></persName>
		</author>
		<idno type="DOI">10.1002/cpe.1715/pdf</idno>
		<ptr target="http://onlinelibrary.wiley.com/doi/10.1002/cpe.1715/pdf" />
	</analytic>
	<monogr>
		<title level="j">Concurrency and Computation: Practice and Experience</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="992" to="1014" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">A Social Content Delivery Network for Scientific Cooperation: Vision, Design, and Architecture</title>
		<author>
			<persName><forename type="first">K</forename><surname>Chard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Caton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Rana</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Katz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Third Int&apos;l Workshop Data Intensive Computing in the Clouds (DataCloud &apos;12)</title>
		<meeting>Third Int&apos;l Workshop Data Intensive Computing in the Clouds (DataCloud &apos;12)</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Constructing a Social Content Delivery Network for eScience</title>
		<author>
			<persName><forename type="first">K</forename><surname>Kugler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Chard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Caton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Rana</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Katz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Third Int&apos;l Workshop Analyzing and Improving Collaborative eScience with Social Networks (eSoN &apos;13)</title>
		<meeting>Third Int&apos;l Workshop Analyzing and Improving Collaborative eScience with Social Networks (eSoN &apos;13)</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Building the Polargrid Portal Using Web 2.0 and Opensocial</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Pierce</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Fifth Grid Computing Environments Workshop (GCE &apos;09)</title>
		<meeting>Fifth Grid Computing Environments Workshop (GCE &apos;09)</meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Facebook Meets the Virtualized Enterprise</title>
		<author>
			<persName><forename type="first">R</forename><surname>Curry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kiddle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Markatchev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Simmonds</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Arlitt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Walker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 12th Int&apos;l IEEE Enterprise Distributed Object Computing Conf. (EDOC &apos;08)</title>
		<meeting>12th Int&apos;l IEEE Enterprise Distributed Object Computing Conf. (EDOC &apos;08)</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="286" to="292" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Open Social Based Collaborative Science Gateways</title>
		<author>
			<persName><forename type="first">W</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 11th IEEE/ACM Int&apos;l Symp. Cluster, Cloud and Grid Computing (CCGrid)</title>
		<meeting>11th IEEE/ACM Int&apos;l Symp. Cluster, Cloud and Grid Computing (CCGrid)</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="554" to="559" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Creating a Cloud-Based Life Science Gateway</title>
		<author>
			<persName><forename type="first">W</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Mao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Seventh Int&apos;l Conf. E-Science (e-Science)</title>
		<meeting>IEEE Seventh Int&apos;l Conf. E-Science (e-Science)</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="55" to="61" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Friendstore: Cooperative Online Backup Using Trusted Nodes</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">N</forename><surname>Tran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Chiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. First Int&apos;l Workshop Social Network Systems (SocialNet &apos;08)</title>
		<meeting>First Int&apos;l Workshop Social Network Systems (SocialNet &apos;08)</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">The Design and Realisation of the Myexperiment Virtual Research Environment for Social Sharing of Workflows</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">D</forename><surname>Roure</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Goble</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Stevens</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Future Generation Computer Systems</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="561" to="567" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<author>
			<persName><forename type="first">G</forename><surname>Klimeck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mclennan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">P</forename><surname>Brophy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">B</forename><surname>Adams</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">S</forename><surname>Lundstrom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advancing Education and Research in Nanotechnology</title>
		<imprint>
			<date type="published" when="2008">2008</date>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="17" to="23" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Social Volunteer Computing</title>
		<author>
			<persName><forename type="first">A</forename><surname>Mcmahon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Milenkovic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Systemics Cybernetics and Informatics</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="34" to="38" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Social Networking for Sharing Cloud Resources</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Ali</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Rasool</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Bloodsworth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Second Int&apos;l Conf. Cloud and Green Computing (CGC)</title>
		<meeting>Second Int&apos;l Conf. Cloud and Green Computing (CGC)</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="160" to="166" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><surname>Mohaisen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Tran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Chandra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Kim</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1112.2254</idno>
		<title level="m">Socialcloud: Using Social Networks for Building Distributed Computing Services</title>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Social-Network-Sourced Big Data Analytics</title>
		<author>
			<persName><forename type="first">W</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">B</forename><surname>Blake</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Saleh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Dustdar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Internet Computing</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="62" to="69" />
			<date type="published" when="2013-10">Sept./Oct. 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Friendbox: A Hybrid F2F Personal Storage Application</title>
		<author>
			<persName><forename type="first">R</forename><surname>Gracia Tinedo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Artigas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Moreno</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">Garcia</forename><surname>Martinez</surname></persName>
		</author>
		<author>
			<persName><surname>Lopez</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Fifth Int&apos;l Conf. Cloud Computing (CLOUD)</title>
		<meeting>IEEE Fifth Int&apos;l Conf. Cloud Computing (CLOUD)</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="131" to="138" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">F2box: Cloudifying F2F Storage Systems with High Availability Correlation</title>
		<author>
			<persName><forename type="first">R</forename><surname>Gracia-Tinedo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Artigas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">Garcia</forename><surname>Lopez</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Fifth Int&apos;l Conf. Cloud Computing (CLOUD)</title>
		<meeting>IEEE Fifth Int&apos;l Conf. Cloud Computing (CLOUD)</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="123" to="130" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Analysis of Data Availability in F2F Storage Systems: When Correlations Matter</title>
		<author>
			<persName><forename type="first">R</forename><surname>Gracia-Tinedo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">S</forename><surname>Artigas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">Garcia</forename><surname>Lopez</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE 12th Int&apos;l Conf. Peer-to-Peer Computing</title>
		<meeting>IEEE 12th Int&apos;l Conf. Peer-to-Peer Computing</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="225" to="236" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Incentive Provision and Job Allocation in Social Cloud Systems</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Van Der Schaar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE J. Selected Areas in Comm</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="607" to="617" />
			<date type="published" when="2013-09">Sept. 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Engineering Incentives in Social Clouds</title>
		<author>
			<persName><forename type="first">C</forename><surname>Haas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Caton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Weinhardt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 11th IEEE/ACM Int&apos;l Symp. Cluster, Cloud and Grid Computing (CCGrid &apos;11)</title>
		<meeting>11th IEEE/ACM Int&apos;l Symp. Cluster, Cloud and Grid Computing (CCGrid &apos;11)</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="572" to="575" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">A Social Network Approach to Provisioning and Management of Cloud Computing Services for Enterprises</title>
		<author>
			<persName><forename type="first">E</forename><surname>Kuada</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Olesen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Second Int&apos;l Conf. Cloud Computing, GRIDs, and Virtualization (CLOUD COMPUTING &apos;11)</title>
		<meeting>Second Int&apos;l Conf. Cloud Computing, GRIDs, and Virtualization (CLOUD COMPUTING &apos;11)</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="98" to="104" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">My3: A Highly-Available P2P-Based Online Social Network</title>
		<author>
			<persName><forename type="first">R</forename><surname>Narendula</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">G</forename><surname>Papaioannou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Aberer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Int&apos;l Conf. Peer-to-Peer Computing</title>
		<meeting>IEEE Int&apos;l Conf. Peer-to-Peer Computing</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="166" to="167" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Security Issues of Media Sharing in Social Cloud</title>
		<author>
			<persName><forename type="first">K</forename><surname>Gayathri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Thomas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Jayasudha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Procedia Eng</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="page" from="3806" to="3815" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Social Networks for Importing and Exporting Security</title>
		<author>
			<persName><forename type="first">B</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Roscoe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Large-Scale Complex IT Systems, Development, Operation and Management</title>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="132" to="147" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">The Strength of Weak Ties</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">S</forename><surname>Granovetter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Am. J. Sociology</title>
		<imprint>
			<biblScope unit="volume">78</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1360" to="1380" />
			<date type="published" when="1973">1973</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
