<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">What is a Feature? A Qualitative Study of Features in Industrial Software Product Lines</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Thorsten</forename><surname>Berger</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Waterloo</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Daniela</forename><surname>Lettner</surname></persName>
							<affiliation key="aff1">
								<orgName type="laboratory">Lab MEVSS</orgName>
								<orgName type="institution">Johannes Kepler University Linz</orgName>
								<address>
									<region>CD</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Julia</forename><surname>Rubin</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">Massachusetts Institute of Technology</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Paul</forename><surname>Gr√ºnbacher</surname></persName>
							<affiliation key="aff1">
								<orgName type="laboratory">Lab MEVSS</orgName>
								<orgName type="institution">Johannes Kepler University Linz</orgName>
								<address>
									<region>CD</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Adeline</forename><surname>Silva</surname></persName>
							<affiliation key="aff3">
								<orgName type="department">Fraunhofer IESE</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Martin</forename><surname>Becker</surname></persName>
							<affiliation key="aff3">
								<orgName type="department">Fraunhofer IESE</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Marsha</forename><surname>Chechik</surname></persName>
							<affiliation key="aff4">
								<orgName type="institution">University of Toronto</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Krzysztof</forename><surname>Czarnecki</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Waterloo</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">What is a Feature? A Qualitative Study of Features in Industrial Software Product Lines</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">62A97C05A3275BB64B59531AC2CCBF58</idno>
					<idno type="DOI">10.1145/2791060.2791108</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T03:59+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The notion of features is commonly used to describe the functional and non-functional characteristics of a system. In software product line engineering, features often become the prime entities of software reuse and are used to distinguish the individual products of a product line. Properly decomposing a product line into features, and correctly using features in all engineering phases, is core to the immediate and longterm success of such a system. Yet, although more than ten different definitions of the term feature exist, it is still a very abstract concept. Definitions lack concrete guidelines on how to use the notion of features in practice.</p><p>To address this gap, we present a qualitative empirical study on actual feature usage in industry. Our study covers three large companies and an in-depth, contextualized analysis of 23 features, perceived by the interviewees as typical, atypical (outlier), good, or bad representatives of features. Using structured interviews, we investigate the rationales that lead to a feature's perception, and identify and analyze core characteristics (facets) of these features. Among others, we find that good features precisely describe customer-relevant functionality, while bad features primarily arise from rashly executed processes. Outlier features, serving unusual purposes, are necessary, but do not require the full engineering process of typical features.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Software Product Line Engineering (SPLE) approaches rely on identifying and explicitly managing commonalities and variabilities of a product portfolio. These commonalities and variabilities are often captured in an abstract manner using entities called features. The use of features is motivated by the fact that customers and engineers often speak of product characteristics in terms of features a product has or delivers. A feature is usually defined as "a logical unit of behavior specified by a set of functional and non-functional requirements" <ref type="bibr" target="#b6">[7]</ref> or "a distinguishable characteristic of a concept (system, component, etc.) that is relevant to some stakeholder of the concept" <ref type="bibr" target="#b8">[9]</ref>. In fact, many additional definitions of the term feature can be found in the literature <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b31">32,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b24">25,</ref><ref type="bibr" target="#b17">18,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b30">31]</ref>.</p><p>Yet, companies still face difficulties deciding when to introduce a feature, determining the right level of granularity for a feature, and defining the aspects that should be taken into consideration when engineering features. Without this knowledge, using SPLE concepts and the numerous existing tools for managing product line features is problematic. In fact, all authors of this paper-when presenting feature-related engineering or analysis techniques-are commonly faced with the question: "What is a feature?"</p><p>In this paper, we aim to address this issue by empirically investigating the experiences of three successful industrial companies that develop software product lines (SPLs) and explicitly manage features. We conducted a qualitative study to elicit, understand, and describe features managed by the companies. We also describe the companies' perspective on their successes and failures in managing features.</p><p>Our main goal is to improve the empirical understanding of the notion of features in industry, by providing insights into the range of real-world feature definitions and usages. We rely on semi-structured interviews, whose design and analysis was guided by two main research questions:</p><p>RQ1: What reasons cause companies to perceive a feature as typical, atypical, good or bad? We study concrete examples of features by asking our interviewees for typical, atypical (outlier), good and bad exemplars, and by diving into the reasons for such classification. Our intention was to be as open as possible, trying to disambiguate existing perceptions of features among our interviewees.</p><p>RQ2: What are important characteristics of features? When discussing each feature, we asked the interviewees to describe its different facets: intrinsic qualities of a feature, such as its purpose within the software lifecycle or its binding time. Using feature facets as the basic terminology allowed us to structure the discussion, to compare the features across companies, and to organize our findings.</p><p>We present first-hand opinions of industrial practitioners on practices contributing to the development of features that are perceived as typical, successful or failing. In addition to narrative descriptions of features and their classification rationales, we provide an in-depth cross-case analysis of all the features. In summary, we contribute: (i) a set of facets that can be used as a terminology for describing and comparing features (Table <ref type="table" target="#tab_1">2</ref>); (ii) reasons (rationales) for 1 participant (interviewee) 2 experience with the product line in years a feature being classified as typical, outlier, good, or bad (Table <ref type="table" target="#tab_3">4</ref>); (iii) a range of values for different facets of concrete features engineered in industry (Sec. 6); and (iv) a set of core observations from the cross-case analysis that have practical impact on engineering features for SPLs. We proceed by outlining our research methodology in Sec. 2. We then introduce the subject companies and their product lines in Sec. 3. We address RQ1 in Sec. <ref type="figure" target="#fig_0">4</ref> and<ref type="figure">5</ref>, where we present features and their classification rationales. In Sec. 6, we address RQ2 with the cross-case analysis of the feature facets. Finally, we discuss threats to validity in Sec. 7, related work in Sec. 8, and conclude in Sec. 9.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">RESEARCH METHODOLOGY</head><p>We describe how we selected the companies for our study and present our approach to designing and conducting the interviews and analyzing the results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Company Selection</head><p>To conduct our study, we focused on companies that (i) develop SPLs; (ii) explicitly record, track, and manage featuresboth common and variable ones; and (iii) maintain an active collaboration with at least one of the authors of this paper. Our selection criteria ensured that we consider "meaningful" examples that are of general interest to the SPL community, and that allowed us to reliably interpret the findings based on our understanding of the companies' product lines and their organizational context.</p><p>We selected the three companies Keba, Opel, and Danfoss from the domains of industrial automation, automotive, and power electronics. For each company, we selected up to three interviewees, covering a range of roles, such as product manager, architect, and developer. For Opel, we interviewed a single person. Overall, we collected data about 23 features: twelve from Keba, three from Opel, and eight from Danfoss. Table <ref type="table" target="#tab_0">1</ref> summarizes our interviewees, their roles, experience with the product line, and the features they described.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Interview Design</head><p>Feature Facets. The goal of our study was to collect examples of features developed in industrial practice, and to outline the reasons for specific features being considered good, bad, typical or outliers. To gain insights into these questions, we conducted a set of semi-structured interviews with employees of the studied companies.</p><p>We structured our interviews around feature facets-qualities of features that we aimed at exploring, such as lifecycle purpose and binding time. These facets were initially defined by consulting the existing literature <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b9">10]</ref>, and then further refined based on our previous collaborations with the studied companies. More specifically, three of the authors created within-case writeups of the general architecture and the organizational structure of each company, which were then used to guide the definition of the facets. The resulting set of facets, along with their description and clarifying examples, are given in Table <ref type="table" target="#tab_1">2</ref>.</p><p>Interview Process. We started the interview with questions about our interviewees themselves, including (i) their professional background, (ii) how long they have been working in the current profession, (iii) how long they have been involved with the product line, (iv) their role in the product line, and (v) the number of features they were involved with.</p><p>We then asked each interviewee to describe three to four features, providing guidance in the selection process. We asked for one typical, one outlier, one good, and one bad feature. Our goal was to be as open as possible, leaving it to our interviewee's judgment which criteria they use for selecting a feature for each type. Yet, to provide some guidance, we gave some hints, for instance, that a good feature could be one that is well-received and popular with customers, commercially successful, or on-time, on-budget, easily reusable, or has a low defect count. For a bad feature, we said it could be one that is problematic, troublesome, difficult to develop, confusing, buggy, or which destroyed user confidence, damaged the brand, or showed unexpected behavior. An outlier is a feature whose properties are rarely observed in other features. Finally, a typical feature is neither especially good nor bad, and not an outlier in any sense.</p><p>For each feature described by the interviewees, we asked about the reasons why they considered it to be typical, good, bad, or outlier. We then asked to discuss the feature from the perspective of each facet. When interviewees had difficulties answering our questions, we used a "by-example" strategy, providing possible answers to our facet questions, as described in Table <ref type="table" target="#tab_1">2</ref>. In case of surprising responses, we dug deeper by asking specific questions, trying to elicit the underlying reasons for such responses.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Data Collection and Analysis</head><p>Each of the conducted interviews was fully recorded, with the obtained recordings between 68 and 117 minutes long. In addition to these, core answers to our facet-related questions were summarized by the interviewer during the interview itself. These summaries were further cross-checked against the recording by an author who did not participate in the corresponding interview. Such reviews were used to verify the summaries and to augment them when needed. The obtained information was used to describe the companyspecific features in terms of their facets in Sec. <ref type="bibr" target="#b5">6</ref>.</p><p>Further, we created full transcripts for parts of the interviews that discuss the rationale behind considering a feature as good, bad, typical or outlier. We applied open coding <ref type="bibr" target="#b1">[2]</ref> to identify the main concepts related to this classification, which are discussed and exemplified in Sec. 4 and 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">SUBJECT COMPANIES</head><p>We now provide background information about our subject companies and the product lines they develop.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Keba: Industrial-Automation Provider</head><p>Keba AG is a medium-scale company producing injection molding machines, energy appliances, and robotics solutions used for industrial automation <ref type="bibr" target="#b21">[22]</ref>. Around 700 people are employed at the head office in the company's home country Austria, while a branch in China exists for the Chinese market. Keba's industrial-automation solutions include hardware, software, and tools. We focus on the software product lines for injection-molding and robotics solutions. Keba ships about 7,000 injection-molding solutions to 25 customers per year. Four resellers are available for the injection-molding branch. Furthermore, Keba sells about 1,800 robotics solutions to about 30 customers per year and works with six resellers related to the robotics branch.</p><p>Architecture. Layered technological platforms exist in diverse variants to meet requirements in different market segments. Keba's automation platform is organized as a product line, and different variants are derived to develop domain solutions for injection molding, robotics, and energy automation. The platform for injection-molding machines provides an application framework, while the robotics platform uses a DSL-based approach for programming robots. The different layers and their interfaces strongly influence the development process: multiple system platforms are derived from a system platform architecture to support multiple runtime systems. Domain solutions are built on top of each system platform, by exploiting the interfaces of the platform. Products are defined by adding new functionality on top of the domain solutions using cloning. Products are fine-tuned using configuration parameters during installation and setup.</p><p>Keba uses a wide range of variability mechanisms to support product derivation: platform and product variants are created by exploiting interfaces to hook in new functionality; by adding, exchanging or reloading modules; by defining specific I/O-ports; by modifying parameters to influence program behavior; by adapting configuration files to change system behavior and performance as well as by pre-processing code to integrate specific product variants during compilation.</p><p>Organizational Structure. Dedicated teams maintain the automation platform and the domain-solution platforms. Project teams then work with customers on individual products. There are also external developers contributing codefor example, domain engineers working for OEMs, and application engineers working for resellers. This has significant impact on Keba's development process, in particular, challenging platform evolution. Domain-solution engineers regularly review and prioritize features for upcoming releases.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Opel: Car Manufacturer</head><p>Opel is a German subsidiary of GM-a large car manufacturer operating across 157 countries, comprising 202,000 employees, and having sold 9 million vehicles in 2011.</p><p>Opel has software product lines aligned with the mechanical product lines and the engineering culture of cars. The product lines discussed in this paper are part of an initiative at GM called Next Generation Tools (NGT) <ref type="bibr" target="#b13">[14]</ref>, created to handle the complexity introduced as a by-product of new technologies, such as hybrid and alternative-fuel engines. SPLE plays a major role in the NGT and is implemented following the Second Generation PLE (2GPLE) approach, in which features are treated as first-class citizens. Vehicles can now be described in terms of a bill-of-features, which facilitates the communication between business, marketing, and engineering units. The tool used for modeling the features is BigLever GEARS. The development process is organized in five different levels covering feature model, requirements, logical architecture, technical architecture, and deployment. Development activities correspond to the "V-Model": the process starts with defining requirements and architecture for the future vehicle, and on the bottom of the V-Model is the creation of hardware and software components that correspond to the requirements specification.</p><p>Architecture. Opel uses a system-of-systems architecture managed as a hierarchical product line of product lines. It covers domains, subsystems, functions, functional elements, and components (being aggregations of functional elements). The software components are as general as possible to allow flexibility with respect to variations. The manufacturing process is driven by the selection of features and part numbers of physical car components determining which ECUs (electronic control units) are in the car. The ECUs contain the feature implementation, and their presence determines whether a feature is available. The software components are made specific to every produced vehicle. In this calibration process, the Vehicle Option Codes-parameters determining the startup of optional software components installed by ECUs in the car-are saved to a flash database.</p><p>Organizational Structure. There are different teams, including individual teams for each product line; they are referred to as a body of knowledge-the teams have specialized knowledge about the instantiation of their product line. There is also the concept of a feature owner, referring to the main technical contact person in charge of a feature. The feature owner also models the feature in GEARS.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Danfoss: Component Producer</head><p>Danfoss is a large producer of electronic and mechanical components for industrial and consumer applications. It has 23,000 employees globally, distributed over 56 factories in 18 countries. We focus on Danfoss Drives, a subdivision producing frequency converters (drives), which are used in a wide range of applications, such as for HVAC or for winding machines in the textile industry. Consequently, the drive firmware has a high degree of variability, as the motors to be controlled vary significantly. While the variability had initially been handled using a clone&amp;own approach <ref type="bibr" target="#b11">[12]</ref>, Danfoss later adopted an SPLE approach by migrating the cloned products into an integrated platform <ref type="bibr" target="#b15">[16]</ref>.</p><p>Architecture. Danfoss has multiple product lines, each realized with a typical embedded-platform architecture and a codebase of a few million lines of C/C++ code. Our focus, the frequency-converter product line, consists of a platform, which realizes 14 main products, complemented with additional repositories of 30 extensions ("sub-products"). The platform's variability is realized using the C/C++ preprocessor by referencing static features in conditional-compilation directives (e.g., #IFDEF); by generating build files; and by using dynamic parameters that influence the run-time of a concrete product.</p><p>Features are defined in a feature model and mapped to source files using the commercial tool pure::variants from pure::systems. Upon creating a configuration (i.e., a selection of features), pure::variants generates the build files and the set of parameters belonging to the product-specific configuration. Not all parameters are present in all products, and the configuration of these parameters (e.g., limits and default values) considerably varies across products.</p><p>Initially, only variability in source code was managed. After positive experience, variability management was extended to further artifacts, such as requirements and test cases <ref type="bibr" target="#b29">[30]</ref>enabling the derivation of variants of these artifacts by configuration, and improving traceability.</p><p>Organizational Structure. A dedicated team, involving software architects from all development sites, supports and maintains the platform. Application-engineering teams contribute new functionality of the drives. However, there is no real split between application and domain engineering. The platform team is also responsible for the feature-model development, and each feature is assigned to a feature owner. From the product perspective, there are product managers determining which features will go into a product. When there is a change request for a particular feature, the product manager has to contact the feature owner.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">TYPICAL AND OUTLIER FEATURES</head><p>We now introduce concrete examples of the features we studied, beginning with typical and atypical (outlier) features. We discuss the rationales behind our interviewees' classification, complementing them with quotations. Table <ref type="table" target="#tab_2">3</ref> shows all features with their ID and the respective classificationrationale codes. These codes-indicated by special formatting in the following descriptions-are further explained in Table <ref type="table" target="#tab_3">4</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">What is a Typical Feature?</head><p>Most interviewees argued that typical features represent core functionality of the domain and are, thus, a prime prerequisite for a company's business. The feature Danfoss.Wobbler is an example: it was not explicitly requested by a customer, but is regarded essential in the textile industry domain, as it allows frequency converters to operate properly without producing waves. Another feature providing core functionality is Keba.ProfiNetSlave, implementing inter-machine communication based on the Industrial Ethernet standard Profinet.</p><p>Other typical features are either generally demanded by the market or requested by a specific customer. For instance, the feature Opel.LaneKeeping satisfies a very common market demand expressed nowadays by car buyers. Customer requests are also considered as common examples, such as expressed by interviewee E: A typical feature is one requested by a customer, a new motor control for example. It's a functional one. He refers to Danfoss.Torque, which extends existing motor-control functionality.</p><p>Keba.LanguageTranslation is another example of a typical feature, as it was realized following a management decision (internal standard) to offer certain system localizations by default to support customers in specific regions. It was also marked as typical, since it represents ubiquitous functionality affecting not only the EasyNet control-station program for which it was initially conceived, but now almost all parts of the product line.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">What is an Outlier Feature?</head><p>Not surprisingly, there is less agreement in what constitutes an outlier feature, with almost everyone giving different reasons. We also did not observe any overlap in the rationales between classifying a feature as typical or as an outlier.</p><p>For instance, the feature Keba.SilentMode enables installations without user interaction. It is realized as a hidden command-line option of the setup program and only used internally for testing, not providing a core functionality for customers (deployment). Another interesting example is the feature Keba.UserGuidance, which serves as a placeholder for product managers to plan future usability improvements regarding deviceconfiguration support. Specifically, users requested better dependency resolution and choice propagation in the configurator to catch misconfigurations early, which otherwise could only be discovered at system startup. Our interviewee also classified this as a bad feature, since it is too vague (explained shortly in Sec. 5.2) and needs refinement. B: We didn't really know how to improve it. That's why we are using it as a placeholder for projects where one needs to improve something. [...] Basically, it's an accumulative feature.</p><p>Two of the outlier features-Keba.HeatUpOptimization and Danfoss.PowerUpFastFuncs-were only introduced for the optimization of non-functional aspects as explained by an interviewee: E: Outliers are technical features for tuning and tweaking performance. It's not really a feature from the drive perspective, but we can configure a drive to be faster or slower. We can tweak the product to indirectly fulfill the customer requirements. Furthermore, these two outliers only have a specific lifecycle purpose-they control the startup or the build process of the system. For instance, Danfoss.PowerUp-FastFuncs improves system performance by moving functions from flash to RAM using a dedicated compiler macro.</p><p>Finally, Danfoss introduced the mandatory feature Board-SupportPackage, a more intelligent hardware abstraction layer (HAL) to reduce the number of variants. Third-party board vendors urge Danfoss to update the boards by increasing the price for old boards. The more robust abstractions provided by this feature account for improved maintainability and evolvability, to quickly support new boards. This feature is not visible to the customer and only exists at the architecture and development level. However, it needed to be approved by the product management and other engineering teams, to verify that it does not negatively affect existing business logic. In this light, considering this new HAL as a feature makes it a unit of maintenance in Danfoss that various teams can use for communication, and the management for planning.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">GOOD AND BAD FEATURES</head><p>We also studied features perceived as good or as bad by our interviewees. Similar to the discussion before, we now introduce examples of such features, describe the underlying classification rationales, and provide illustrative quotations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">What is a Good Feature?</head><p>In two cases, our interviewees mentioned customer satisfaction (popular with customers) as their prime rationale for considering a feature as good. For instance, the feature Keba.Wizard allows performing the initial robot setup and installation in a few minutes by avoiding error-prone manual configuration. Keba.ProductionOverview provides monitoring capabilities for injection molding machines, including an overview of operation modes and the history of production sequences. In particular, customers like the possibility to inspect variables during system operation. The feature is also highly valued by Keba developers who use it for diagnoses (popular with developers).</p><p>Features also need to provide a distinct functionality to the product line. On the other hand, ambiguous features not meeting this criterion are considered as bad features (explained shortly). Recall the outlier feature Keba.UserGuidance which was only vaguely understood by customers and the management.</p><p>Features have also been rated as good if they are perceived as well implemented and error-free. For instance, the feature Keba.Oscilloscope provides signal charts and twodimensional plots for monitoring and diagnosing robotics solutions. According to our interviewee A: it just always worked. General statements about the implementation aspect further emphasize the absence of surprising feature interactions and adherence to architectural rules: E: A good feature fulfills the requirements, but does not introduce any bugs on the way or impact existing features of the product line. [...] It has to follow the architecture rules and the coding style.</p><p>Features are also considered as good if they are well modularized, not cross-cutting multiple components. For instance, the feature Opel.ParkAssist is not scattered across multiple components, therefore significantly limiting coordination effort between the suppliers, who commonly implement the components.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">What is a Bad Feature?</head><p>Among our interviewees, bad features are usually the result of time pressure and rushed development as well as compromises during implementation (workaround). For instance, the features Keba.ManualConfiguration and Keba.DataManager were implemented too hastily, resulting in low implementation quality. The feature Keba.ManualConfiguration, supporting the configuration of an encoder box to reduce wiring costs, was developed under time pressure and released prematurely to selected customers. However, this led to negative market feedback (customer complaints) as expressed by interviewee B: There was an extreme pressure from the customer side to support this feature. [...] We sensed that customers would not agree with [the complicated configuration], but due to pressure we realized it. [...] Would have been better to realize the feature with complete tool support before release.</p><p>A related problem are highly volatile features (frequent changes), such as the feature Opel.EmergencyBraking, which required continuous improvements and extensions to support an increasing number of deceleration profiles and object types on the road that are recognized.</p><p>Scattered and highly cross-cutting feature implementations led to a bad perception of two features: Danfoss.Pro-ductG realizes a request for one specific customer, requiring many little tweaks to the code. Opel.EmergencyBraking is also considered as a highly crosscutting feature. It is also more complex than the typical feature Opel.LaneKeeping due to different deceleration profiles and object types, more sub-variants, and parameters for calibration. However, crosscutting features are not necessarily considered bad, as we will discuss in Sec. 6.2.</p><p>Interestingly, the necessity to make a feature optional (variability) also led to problems. The feature Keba.Data-Manager supports copying mold and protocol data between an injection molding machine and a PC, allowing to modify the machine cycle. Due to safety concerns of a key customer, the feature had to be made optional, resulting in high effort.</p><p>We also observed features that originated from defects (defect fix). This happened for the feature Danfoss.Reset-Fix, where a bug fix for a reset functionality of counters was defined as a new feature. It fixes an unintended feature interaction between a counter feature and a feature providing a reset functionality for the counter, resulting in incorrect counting. In general, defining bug fixes as features helped Danfoss to support customers who were used to the incorrect behavior and did not wish a mandatory bug fix.</p><p>Finally, both duplicate and superfluous features were reported as bad features. Danfoss reported that the same functionality-for instance, the feature ResetFix from abovewas implemented twice through a lack of coordination between application-engineering teams. Superfluous features are those that were developed but never used, in effect wasting development effort. None of our studied features belongs to this category, but Danfoss reported such: E: The worst case scenario is a feature which has been implemented but not used at all. It happens.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">CROSS-CASE ANALYSIS</head><p>In our study, we also conducted a cross-case analysis by investigating the various facets (cf. Table <ref type="table" target="#tab_1">2</ref>) of all 23 features. We now discuss the results of this analysis and explicitly formulate the core observations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Rationale, Level, and Nature</head><p>Rationale. In all subjects, typical, good, and bad features were mainly introduced for business-related reasons, such as general market demand and customer requests. However, the introduction of certain operational modes (e.g., Keba.Oscilloscope, a feature adding logging and monitoring support) or regulatory requirements (e.g., ECE-R 79 requirements on steering interventions and automatically commanded steering for Opel.ParkAssist) were mentioned as well.</p><p>Outlier features were often the result of a technical concern that had to be addressed. Indirectly, these features also realize customer requirements. Their prime rationale was the support for dedicated Lifecycle tasks of a system, such as deployment, debugging, monitoring, configuration, system startup, or usability improvements. Level. We observed that the notion of features is used at all organizational levels. For almost all of our features, traces exist at all levels. For Keba, these levels comprise the product management, architecture, and development. Opel has similar levels, ranging from the feature-definition level at the top via the requirements, the logical and physical architecture, down to the deployment level. Similarly, for Danfoss, nearly every feature is identifiable at the business level down to all other levels.</p><p>We also found that most of the features were leaf features, which were very concrete and easy to describe, and top-level features defined in product maps. Intermediate features were fuzzier and more abstract, making it difficult for the practitioners to talk about them. Two interviewees explicitly stated this point, for instance, F: Product features on a top-level are good features, which describe a specific functionality [...] Yet, intermediate features are frequently used, both for a grouping purpose (Danfoss) or for defining functionalities with different variants (Keba and Opel).</p><p>Observation 1: Outlier features. Features do not only address functional or non-functional concerns that end up in a product. Features are also used for atypical purposes such as supporting a system's lifecycle.</p><p>Outlier features are an important part of the development process. Yet, they do not need to be developed according to the full feature-development process. In other words, they do not exist on all levels. For instance, Keba.UserGuidance solely exists at the product-management level and is used internally. Keba.SilentMode exists only at the development level; it is a hidden command-line option only used by service engineers during setup. Also, Danfoss.PowerUpFastFuncs exists only at the architecture and development levels.</p><p>Thus, outlier features are coordinated or implemented only by a subset of the typical roles involved (e.g., developers, architects, or product managers) and are in most cases not visible to the customer (Keba.HeatUpOptimization is an exception). Surprisingly, only Opel has no such outlier features according to our interviewee. For the domain under consideration, all features currently represent functionality. However, according to the long engineering history, Opel has further co-existing entities (e.g., basic software components), which might be used for this purpose. Investigating those entities and their relation to features is valuable future work.</p><p>Nature. The features we investigated were treated primarily as a unit of functionality to define system capabilities, behavior or data. This is often the case for mandatory features covering core functionality. Only as a secondary aspect are features also a unit of variability-when the functionality should be optional. Recall Keba.DataManager, where an allegedly mandatory addition (a new feature) had to be made optional, causing substantial development effort. In both cases, features do not only provide a unit of functionality, but can immediately serve as a unit of variability when necessary-without the need to introduce a new feature, but potentially with a significant implementation effort.</p><p>Only one of our features (Danfoss.CascadeController) primarily offered parametrization to other existing features or functionality. Interestingly, Keba decided to consider the support for the configuration of other features as features themselves: Keba.UserGuidance, Keba.Wizard, and Keba.Man-ualConfiguration. Yet, recall that the first one was just a placeholder for future plans to improve the usability of the device configuration.</p><p>Finally, almost every feature came with further configuration (a.k.a. calibration) parameters to fine-tune it. Danfoss and Opel manage large parameter databases. For instance, in Danfoss, the feature model has about 1,000 features, whereas the parameter model has about 2,800 parameter. Parameters are either directly assigned to and controlled by features but can also be stand-alone, as in the case of Danfoss. The latter arose for historical reasons-the parameter database existed before features and a software product line were adopted.</p><p>Observation 2: Features vs. parameters. Parameters are not treated in the same way as features.</p><p>Parameters are important entities managed by our companies in addition to features. Yet, the handling and the characteristics of parameters are different. Parameters do not have a process attached to them as features do, have no architectural responsibility, and no dedicated responsible role (usually the feature-owner is also responsible for parameters).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Scope and Architecture</head><p>Scope. Not surprisingly, we observe both localized and crosscutting features, scattered over large parts of the product line. Half of Keba's and Danfoss' studied features are cross-cutting. For instance, Keba.Oscilloscope introduces logging and a global monitoring mode for operating the system, affecting many parts of the codebase. In Opel's active-safety domain, almost all features are cross-cutting, with implementations being scattered over many components and ECUs. Among the three Opel features, only one (ParkAssist) is well localized in its current implementation. Another highly cross-cutting feature, spanning many domains, is Danfoss.ProductG, which is the result of one customer request, but whose realization needed many tweaks throughout the codebase.</p><p>Yet, while some features are bad features due to their highly cross-cutting nature, the scope of a feature is not a differentiator between good and bad features. As one interviewee explicitly explains, F: If a feature is cross-cutting, that itself is not bad. There can be good reasons for a scattered feature implementation. Observation 3: Cross-cutting features. Scattered feature implementations do not necessarily lead to problematic features.</p><p>Architectural responsibility. The majority of studied features across all companies contributes core business logic. In Keba, all of the features discussed affect the user interface (UI). At Opel, all three discussed features affect both substantial business logic and the UI. At Danfoss, most of the features (except the outliers) handle business logic, whereas only one feature (Danfoss.Wobbler) also contributes to the UI. This small number is not surprising given the small display panels built into frequency converters.</p><p>The outliers, and other features to a lesser extent, almost always affect the product-line infrastructure for a specific lifecycle purpose. However, recall the outlier feature Danfoss.BoardSupportPackage, which only contributes a new architecture (and some business logic). Defining this new architecture as a feature allowed internal communication and approval (explained shortly), but also booking developers' time on realizing the feature. This was also explained by a Keba interviewee: B: There are internal features [...] [used] for project controlling [...] [to communicate] how much of our time we invest into them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Process and Representation</head><p>Definition and approval. While a deep study of processes is out of scope of our work, we observed a diversity of processes. At Keba, the features we studied are defined by an internal project team, or existing specifications are used in case the feature implements an existing standard (e.g., for Industrial Ethernet). Sometimes, capabilities found in similar systems are also studied. Usually, there is no dedicated approval necessary-none of the studied features required it. Opel follows the typical V-shaped software-engineering process: new features are defined in a so-called Advanced Technology Work project, comprising the elicitation of requirements and building a prototype vehicle. A specific focus is on safety-critical aspects; for instance, possible feature interactions are investigated. Features are commonly redefined based on customer clinics and field experience. At Danfoss, a feature is typically created based on input from customers and goes through a regular development process (requirements, analysis, etc.). Before going into a product, it has to be approved by the product owner. Danfoss' outliers are created without customer involvement.</p><p>It was surprising that the actual process was not a differentiator between good and bad features. However, as briefly discussed before (Sec. 5.2), our feature sample shows that time pressure is a clear indicator. Danfoss reported on bad experiences with an experiment called "time-boxing": E: Because of the time pressure, we are told not to think, just to implement. [With time-boxing] there was a limited amount of time to do some things. It was OK to implement the code, but not to do any documentation.</p><p>Representation. While Opel and Danfoss represent features in dedicated feature-modeling tools, the situation at Keba is more diverse. Keba defines high-level product features and their descriptions in product maps-matrices that allow comparing related products over numerous features-using the Polarion requirements management system and spreadsheets. Feature requests are also managed in an issue-tracking system, used by application engineers to communicate with domain engineers about future platform features. Keba also has a home-grown configuration tool that allows, relying on selecting and customizing features by developers, to quickly clone a product variant based on the domain platform. Developers further use configuration files to define lower-level features and parameters associated with features.</p><p>Opel uses GEARS for features and DOORS for requirements. Surprisingly, safety-critical dependencies are currently modeled in the requirements, not in the feature model. At Danfoss every feature is represented in one central feature model managed via pure::variants (with current modularization attempts). Features are cross-linked to the parameter database and requirements models managed in CaliberRM.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.4">Use, Implementation and Deployment, and Product Derivation</head><p>Use. Most frequently, interviewees reported that features are used for explaining a system to a customer and for internal communication. B: On the one hand it is the communication to the customers-which features we have. [...] On the other hand, it's also for communication with the development.</p><p>Features were also frequently used for other closely related activities such as scoping to create awareness for feature reuse. B: When planning a project, we say that we can do a project with those features. [Then] someone comes and says [...] we can realize automated tests with the existing features.</p><p>Configuration was another common use of features. Some of Keba's and Danfoss' features also contribute a configuration interface, allowing a feature's parametrization by customers during setup or run-time. All of Opel's features also contribute a large variety of calibration parameters used for feature customization during manufacturing. Implementation and deployment. We observed a large variety of implementation techniques. To implement features, Keba uses multiple programming languages (e.g., C, C++, C#, Java, .NET, IEC 61131-3) and a home-grown domainspecific language (TeachTalk), in which high-level robotmovement commands are declared. Danfoss's features are implemented in C and C++, partly also using home-grown DSLs. For deployment, Keba and Danfoss exploit binary and properties files; Keba also uses OSGi bundles and the TeachTalk scripts.</p><p>For the domain under consideration, Opel's features are mostly developed in C and typically deployed as AUTOSAR components. All of the studied features are implemented and validated by the ECU suppliers, who receive a specification defining the calibration parameters the component needs to support (for instance, for realizing other cross-cutting features affecting this component). The resulting AUTOSAR components are integrated and validated on the vehicle level and deployed to the ECUs. Given that most components realizing features are developed by ECU suppliers, most development and integration effort is spent on the calibration.</p><p>Inclusion/Exclusion. The mechanisms for including or excluding optional features are very diverse. At Keba, for instance, dedicated robot commands (e.g., Keba.LINMovement) are activated at startup-time by TeachTalk scripts, which also allow fine-grained customization of the movement logic. Other features are selected in the home-grown configuration tool or activated via either a command-line option, a preferences menu in the UI, or using dedicated description files. The latter can be a file delivered only to certain customers to activate a feature (e.g., Keba.ManualConfiguration), or it can be a hardware-description file, activating a feature when certain hardware is present. Opel's mechanisms are driven by the calibration parameters, whose value determines startup of the feature's components, or by the presence of hardware (if not present, the respective ECU and component is not included). Danfoss uses the tool chain provided by pure::variants, comprising feature selection and a subsequent build process driven by the C preprocessor as well as the family model of pure::variants, determining the respective source files to include. For the outlier Danfoss.PowerUp-FastFuncs, compile macros are used to instruct the linker to move functions from flash memory into RAM.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.5">Quality Assurance and Evolution</head><p>Testing. For Keba, manual system tests are more important than automated test procedures, which are primarily used at the levels of components. Opel's procedures follow the typical levels outlined in the "V" development process: component testing, integration testing, and vehicle testing. The software is tested in an environment; integration testing is usually done on a bench or on a hardware-in-the-loop platform. Afterwards, the software is validated in the vehicle. Danfoss conducts integration and regression tests for a fixed set of products that are actually sold. Features are not tested via component tests.</p><p>We noticed that cross-cutting features are problematic in cases when they involve manual testing process. Such features can usually only be tested at integration time, potentially also requiring hardware, making them high risk.</p><p>Observation 5: Testing and feature scattering. Scattered features that have to be manually tested are problematic.</p><p>Evolution. The features at Keba were characterized as stable with core functionality remaining unchanged. Customizations, refinements or refactorings are made upon request.</p><p>For instance, the feature Keba.Oscilloscope was extended to support additional chart types, and the feature Keba.Silent-Mode was recently refactored and re-implemented using a different programming language. At Opel, features in the active-safety domain are very dynamic. Therefore, a major part of the evolution effort is spent in calibration, minor adjustments of features, and code refactorings. For the fastevolving feature Opel.EmergencyBraking, engineers gradually added support for recognizing additional objects triggering the automatic brake (e.g., stationary vehicle, pedestrian, or bicycle in front).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">THREATS TO VALIDITY</head><p>External Validity. As with any case-study research, results of our work might not generalize beyond the cases that we considered. Thus, we carefully avoided making any generalizations, but rather presented an in-depth analysis of the selected cases. We also focused on large, influential companies which we selected using well-defined criteria (cf. Sec. 2.1), and we sought to obtain a diverse sample of features. This sampling approach is commonly known as theoretic sampling <ref type="bibr" target="#b12">[13]</ref>. To get a broader perspective, we selected interviewees covering a range of roles in the studied companies. We thus believe that the observations reported in this paper are of value to the wide SPL community.</p><p>Internal Validity. We see two main threats to the internal validity. First, we might have phrased our interview questions in a way that affected the participants' answers, especially in cases where specific examples were given. We attempted to mitigate this threat by performing a pilot study and refining our interview guide when we observed that our questions raised confusion. We also avoided providing examples of possible answers unless the participants experienced difficulties to address a raised question. Second, we might have misinterpreted the participants' answers and derived incorrect conclusions, threatening the reliability of our study. To mitigate this threat, all interviews were recorded and their summaries were cross-checked by an author of the paper who did not attend the interview. Unclear cases were discussed and some were further verified with the interviewees.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">RELATED WORK</head><p>Feature Definitions. Many definitions of the term feature exist <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b31">32,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b24">25,</ref><ref type="bibr" target="#b17">18,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b30">31]</ref>, each of which emphasizes certain feature characteristics. For instance, Kang et al. <ref type="bibr" target="#b18">[19]</ref> provide a definition covering implementation, testing, deployment, and maintenance of a feature. Bosch mentions functional and quality requirements specifying logical units of behavior <ref type="bibr" target="#b6">[7]</ref>. Further definitions focus on features as user-visible aspects <ref type="bibr" target="#b16">[17]</ref> or features as aspects valuable to a customer <ref type="bibr" target="#b23">[24]</ref>. However, existing approaches do not combine multiple feature characteristics nor do they describe relations between them. The feature facets presented in this paper can be useful as a terminology for describing different properties of features. Our observations also indicate possible dependencies between such properties.</p><p>Feature Identification. Scoping methods propose a topdown approach to determine the boundaries of a product line and are an important planning activity that may determine the success or failure of a product line effort <ref type="bibr" target="#b25">[26]</ref>. Some scoping techniques ground the identification of the product line scope based on business objectives <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b26">27]</ref>. Scoping methods also cover the identification of features in product lines, but guidance is typically very specific in this regard. While feature identification is not the primary aim of our work, the presented facets of 23 real-world features can be useful for organizations in their scoping activities.</p><p>Variability Modeling. Variability modeling is essential for defining and managing the commonalities and variabilities in software product lines. A wide range of variabilitymodeling approaches has been proposed, including feature modeling <ref type="bibr" target="#b16">[17]</ref>, decision modeling <ref type="bibr" target="#b27">[28]</ref>, and orthogonal variability modeling <ref type="bibr" target="#b22">[23]</ref>. Empirical studies report on experiences of applying variability modeling <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b4">5]</ref>. Survey papers <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b28">29,</ref><ref type="bibr" target="#b2">3,</ref><ref type="bibr" target="#b27">28,</ref><ref type="bibr" target="#b9">10]</ref> compare variability-modeling approaches from different perspectives, which informed the definition of feature facets in our study. For instance, a survey paper comparing feature models and decision models <ref type="bibr" target="#b9">[10]</ref> uses ten dimensions to characterize the different techniques. Although the focus of our study was not on variability modeling, some dimensions described in this survey supported the definition of feature facets (e.g., applications, dependencies, binding time).</p><p>Feature-Oriented Engineering Methods. Featureoriented software development (FOSD) is a programming concept for managing the construction, customization, and synthesis of software systems based on features as first-class citizens <ref type="bibr" target="#b0">[1]</ref>. FOSD primarily addresses implementation-level aspects of features, while our aim was to empirically investigate a wider range of feature facets in different organizations.</p><p>Empirical Studies. Many experience reports of successful industrial product lines are provided by van der Linden et al. <ref type="bibr" target="#b30">[31]</ref> and the SPL community's 'Hall of Fame'. While these provide valuable insights into economic, organizational, and process aspects of real-world product lines, only few details are given on characteristics of individual features. Some experience papers provide more details about features at different levels of product lines. For instance, Lee et al. <ref type="bibr" target="#b20">[21]</ref> report detailed experiences from developing an elevator control software product line comprising 490 features. Berger et al. <ref type="bibr" target="#b3">[4]</ref> provide an analysis of features in 128 variability models, including metrics about feature types and feature dependencies. While these results helped us identify important facets of features, our aim was to complement existing empirical studies by conducting a qualitative study in companies and providing details about selected features.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.">CONCLUSION</head><p>We presented a qualitative study on the practical use of features in three large companies. The study provides a contextualized and in-depth analysis of 23 features in real-world settings-organizations that manage features and explicitly track them. We reported insights into successful and failed practices of feature usage together with the respective conditions (RQ1) as well as a cross-case analysis on the range of feature definitions and usages in practice (RQ2).</p><p>What is a Feature? The notion of what a feature is varied widely across the three companies we studied. Yet, we have observed a surprising consistency of what makes features good or bad. We also found that one of the most important characteristics of a feature is that it needs to represent a distinct and well-understood aspect of the system. We found that good features need to precisely describe customerrelevant functionality, that bad features primarily arise from rashly executed processes, and that cross-cutting features scattered over the codebase are not necessarily bad. We also observed that outliers are necessary, while not requiring the full engineering process of typical features. We hope that our results on the actual feature usage and on issues arising from it will be interesting for both practitioners and researchers.</p><p>Future Work. We plan to trace and study the lifecycles of features in more detail. Specifically, the insights we gained into the feature-definition and approval process suggest that an in-depth study in this area would be highly valuable. Such a study should also capture the coordination among roles and teams required to engineer and evolve a feature. The paper used a set of facets for describing and communicating about important characteristics of features. We plan to refine the facets as a basis for developing a language for describing features. Finally, our study reported initial observations relating feature characteristics and their success. Further work should investigate the development of approaches helping predict when a feature is going to be good or bad.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Observation 4 :</head><label>4</label><figDesc>Immature features. A rushed development process causes problematic features.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Interview participants</figDesc><table><row><cell></cell><cell cols="2">part. 1 role</cell><cell>exp. 2</cell><cell>features</cell></row><row><cell></cell><cell>A</cell><cell>developer</cell><cell>12</cell><cell>LINMovement, Oscilloscope, Euromap,</cell></row><row><cell>Keba</cell><cell>B C</cell><cell>product manager developer</cell><cell>19 3</cell><cell>SilentMode ProfiNetSlave, Wizard, ManualConfiguration, UserGuidance LanguageTranslation,</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>ProductionOverview, DataManager,</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>HeatUpOptimization</cell></row><row><cell>Opel</cell><cell>D</cell><cell>team lead/ architect</cell><cell>5</cell><cell>LaneKeeping, ParkAssist, EmergencyBraking</cell></row><row><cell>Danfoss</cell><cell>E F</cell><cell>architect team lead</cell><cell>4 8.5</cell><cell>Torque, CascadeController, ProductG, PowerUpFastFuncs Wobbler, FieldBus, ResetFix, BoardSupportPackage</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 :</head><label>2</label><figDesc>Variety of feature facets elicited in interviews</figDesc><table><row><cell>facet</cell><cell>question</cell><cell>examples</cell></row><row><cell>Rationale</cell><cell>Why does the feature exist?</cell><cell>Business reasons (e.g., customer request, market demand), regulatory needs (e.g., export restriction, country codes), aspects of the technical environment (e.g., platform, OS, library, installation environment) or social aspects (e.g., usage context, user needs)</cell></row><row><cell>Level</cell><cell>At what organizational level does the feature exist?</cell><cell>Customer-facing features (e.g., those managed by product managers) or technical features (e.g., logical and physical architecture, or implementation-level features)</cell></row><row><cell>Nature</cell><cell>What is the nature of the feature?</cell><cell>Primarily a unit of functionality (e.g., to characterize system capabilities, behavior, or data), a unit of variability (e.g., an optional functionality) or a configuration/calibration parameter</cell></row><row><cell>Scope</cell><cell>What is the scope of the feature?</cell><cell>Local to one component of a system or cross-cutting (i.e., scattered across architectural components)</cell></row><row><cell>Architectural responsibility</cell><cell>What is the architectural responsibility of the feature?</cell><cell>Addresses user-interface requirements, encapsulates some application logic, or infrastructure-level tasks</cell></row><row><cell>Lifecycle Definition and approval</cell><cell>Does the feature have a purpose for the lifecycle of a system? How has the feature been defined and approved?</cell><cell>Testing, debugging, build, optimization, packaging, deployment, simulation, or monitoring Feature elicitation workshops with customers, systematic studies of similar system, or market analyses</cell></row><row><cell>Representation</cell><cell>Which artifacts/tools are used to define the feature?</cell><cell>Feature models, configuration tools, code-level configuration options, product maps, or spreadsheets</cell></row><row><cell>Use</cell><cell>In what ways is the feature used in the organization?</cell><cell>Defining a product line's scope, explaining a system to a customer, changing behavior at runtime, or supporting software composition</cell></row><row><cell>Dependencies</cell><cell>What are the dependencies to other features?</cell><cell>Dependencies between features (e.g., require or exclude), dependencies across levels (e.g., to logical and physical components)</cell></row><row><cell>Implementation and deployment</cell><cell>Which languages and technologies have been used to implement and deploy the feature?</cell><cell>Programming languages used, build-time integration of libraries, feature deployment in app stores</cell></row><row><cell>Inclusion/Exclusion Binding time</cell><cell>Which mechanisms are used for including or excluding the feature? At what stage is the feature included into the product?</cell><cell>Configuration tool, configuration file, user preferences at runtime Compile, build, load, or run time</cell></row><row><cell>Responsibility</cell><cell>Which people, roles, or teams are in charge of the feature?</cell><cell>Application engineers developing customer-specific features, platform engineers developing core functionality</cell></row><row><cell>Position in hierarchy Testing Evolution</cell><cell>What are the features above (if any) and the features below (if any)? Which methods and tools are used for testing the feature? How did the feature change over time?</cell><cell>Concrete feature names or not applicable Automated component test suites or manual system integration tests Changed frequently (e.g., daily, weekly or monthly), mostly stable, rolled out, or retired</cell></row><row><cell>Metrics</cell><cell>Which metrics are used to characterize the feature?</cell><cell>Number of products in which a feature exists, number of feature instances per product</cell></row><row><cell>Quality and performance</cell><cell>Which non-functional characteristics are important for the feature?</cell><cell>Reaction time, power consumption, or efficiency of a feature implementation</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 3 :</head><label>3</label><figDesc>Features and their classification rationales</figDesc><table><row><cell></cell><cell>company</cell><cell>feature ID</cell><cell>feature description</cell><cell>classification rationale</cell></row><row><cell>typical</cell><cell>Keba Keba Keba Opel Danfoss Danfoss</cell><cell>LINMovement ProfiNetSlave LanguageTranslation LaneKeeping Torque Wobbler</cell><cell>linear movement command of a robot implementation of the PROFINET standard for the fieldbus communication stack translation of the EasyNet control-station program into several languages driver assistance to keep the lane, including active steering enables high starting-torque for permanent-magnet machines smoothes the movement of electric motors (to avoid waves) in the textile industry</cell><cell>domain domain, market demand ubiquitous, market demand, internal standard domain, market demand customer request domain</cell></row><row><cell>outlier</cell><cell>Keba Keba Keba Danfoss Danfoss</cell><cell>SilentMode UserGuidance HeatUpOptimization PowerUpFastFuncs BoardSupportPackage</cell><cell>non-interactive ("silent") installation procedure user guidance for device configuration optimizes heat-up procedures of multiple machines by distributing power peaks moves the execution of some functions from RAM to the flash drive new Hardware Abstraction Layer (HAL) to improve board support</cell><cell>deployment placeholder, usability optimization, startup optimization, build evolvability, maintainability</cell></row><row><cell>good</cell><cell>Keba Keba Keba Opel Danfoss Danfoss</cell><cell>Oscilloscope Wizard ProductionOverview ParkAssist CascadeController FieldBus</cell><cell>software oscilloscope for recording signals wizard-based configuration support for the initial robot setup historical overview on the production process (operation modes and "shots") automated steering in parking situation enables control of multi-drive (pump) setup to manage pressure or level enables the fieldbus communication stack for frequency converters</cell><cell>error-free popular with customers popular with customers, popular with developers well modularized well implemented, well modularized distinct functionality, well</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>modularized, thoroughly tested</cell></row><row><cell></cell><cell>Keba Keba</cell><cell>Euromap ManualConfiguration</cell><cell>enables the Euromap protocol support in the fieldbus communication stack manual configuration of EncoderBox</cell><cell>test challenges, frequent changes market demand, rushed development,</cell></row><row><cell>bad</cell><cell>Keba Opel Danfoss Danfoss</cell><cell>DataManager EmergencyBraking ProductG ResetFix</cell><cell>export/import of low-level machine data autonomous emergency braking implements product-specific features for one particular customer fixes a defect in another feature (Reset Counter)</cell><cell>customer complaints rushed development, workaround, variability highly cross-cutting highly cross-cutting defect fix, frequent changes</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 4 :</head><label>4</label><figDesc>Expressed feature-classification rationales</figDesc><table><row><cell></cell><cell>rationale</cell><cell>description</cell><cell>occ. 1</cell></row><row><cell>typical</cell><cell>domain ubiquitous market demand internal standard customer request</cell><cell>core domain functionality common feature affecting many assets required to be competitive in the market management decision for an internal standard requested by a specific customer</cell><cell>4 1 4 1 1</cell></row><row><cell>outlier</cell><cell>deployment placeholder usability optimization startup build evolvability maintainability</cell><cell>only supports system deployment placeholder for future improvements improves usability for customers optimizes a non-functional aspect (e.g., power consumption, performance) controls or affects system startup controls or supports build process improves future system evolvability improves system maintainability</cell><cell>1 1 1 2 1 1 1 1</cell></row><row><cell>good</cell><cell>popular w/customers well modularized popular w/developers error-free well implemented distinct funct. thoroughly tested</cell><cell>positive customer feedback feature implementation limited to module supports system diagnosis no or very few defects since inception implementation adheres to architecture rules and coding styles graspable concept that is easily understood high confidence in correctness</cell><cell>2 3 1 1 1 1 1</cell></row><row><cell>bad</cell><cell>rushed development workaround customer complaints frequent changes highly cross-cutting test challenges variability defect fix</cell><cell>implemented under pressure compromise during implementation bad feedback from the market implementation modified frequently scattered feature implementation difficult or laborious to test need to make a feature optional defects that became features</cell><cell>2 1 1 2 2 1 1 1</cell></row></table><note><p>1 number of occurrence of the rationale in interviews</p></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank the companies, all our interviewees, and Manfred Sch√∂lzke for participating in our study. This work was partially supported by Keba AG and the Christian Doppler Forschungsgesellschaft Austria, the Artemis Joint Undertaking (grant 332830/2012-1), and the Ontario Research Fund.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">An Overview of Feature-Oriented Software Development</title>
		<author>
			<persName><forename type="first">S</forename><surname>Apel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>K√§stner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Object Techn</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="49" to="84" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">The Practice of Social Research. Cengage Learning</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">R</forename><surname>Babbie</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
	<note>13th edition</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Automated Analysis of Feature Models 20 Years Later: A Literature Review</title>
		<author>
			<persName><forename type="first">D</forename><surname>Benavides</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Segura</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">R</forename><surname>Cort√©s</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Information Systems</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">6</biblScope>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Three Cases of Feature-Based Variability Modeling in Industry</title>
		<author>
			<persName><forename type="first">T</forename><surname>Berger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Nair</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Rublack</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Atlee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Czarnecki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">W</forename><surname>Asowski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. MODELS</title>
		<meeting>MODELS</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A Survey of Variability Modeling in Industrial Practice</title>
		<author>
			<persName><forename type="first">T</forename><surname>Berger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Rublack</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Nair</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Atlee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Czarnecki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">W</forename><surname>Asowski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. VaMoS</title>
		<meeting>VaMoS</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A Study of Variability Models and Languages in the Systems Software Domain</title>
		<author>
			<persName><forename type="first">T</forename><surname>Berger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>She</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Lotufo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Czarnecki</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Soft. Eng</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="issue">12</biblScope>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Design and Use of Software Architectures -Adopting and Evolving a Product-line Approach</title>
		<author>
			<persName><forename type="first">J</forename><surname>Bosch</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>ACM Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">What&apos;s in a Feature: A Requirements Engineering Perspective</title>
		<author>
			<persName><forename type="first">A</forename><surname>Classen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Heymans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P.-Y</forename><surname>Schobbens</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. FASE</title>
		<meeting>FASE</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<author>
			<persName><forename type="first">K</forename><surname>Czarnecki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><forename type="middle">W</forename><surname>Eisenecker</surname></persName>
		</author>
		<title level="m">Generative Programming: Methods, Tools, and Applications</title>
		<imprint>
			<publisher>Addison-Wesley</publisher>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Cool Features and Tough Decisions: A Comparison of Variability Modeling Approaches</title>
		<author>
			<persName><forename type="first">K</forename><surname>Czarnecki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Gr√ºnbacher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Rabiser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Schmid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">W</forename><surname>Asowski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. VAMOS</title>
		<meeting>VAMOS</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A Systematic Approach to Derive the Scope of Software Product Lines</title>
		<author>
			<persName><forename type="first">J.-M</forename><surname>Debaud</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Schmid</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ICSE</title>
		<meeting>ICSE</meeting>
		<imprint>
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">An Exploratory Study of Cloning in Industrial Software Product Lines</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Dubinsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rubin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Berger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Duszynski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Czarnecki</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. CSMR</title>
		<meeting>CSMR</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Theory Building from Cases: Opportunities and Challenges</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">M</forename><surname>Eisenhardt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">E</forename><surname>Graebner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Academy of Management J</title>
		<imprint>
			<biblScope unit="volume">50</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="25" to="32" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Mega-Scale Product Line Engineering at General Motors</title>
		<author>
			<persName><forename type="first">R</forename><surname>Flores</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Krueger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Clements</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SPLC</title>
		<meeting>SPLC</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Software Reuse: Architecture, Process and Organization for Business Success</title>
		<author>
			<persName><forename type="first">I</forename><surname>Jacobson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Griss</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Jonsson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Minimally Invasive Migration to Software Product Lines</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">P</forename><surname>Jepsen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">G</forename><surname>Dall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Beuche</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SPLC</title>
		<meeting>SPLC</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Feature-Oriented Domain Analysis (FODA) Feasibility Study</title>
		<author>
			<persName><forename type="first">K</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hess</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Nowak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Peterson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Tech. Rep</title>
		<imprint>
			<date type="published" when="1990">1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Feature-Oriented Product Line Engineering</title>
		<author>
			<persName><forename type="first">K</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Donohoe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">FORM: A Feature-Oriented Reuse Method with Domain-Specific Reference Architectures</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">C</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Shin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Huh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Ann. Softw. Eng</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="143" to="168" />
			<date type="published" when="1998-01">Jan. 1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Feature-oriented Variability Management in Product Line Engineering</title>
		<author>
			<persName><forename type="first">J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Muthig</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="55" to="59" />
			<date type="published" when="2006-12">Dec. 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Domain-Oriented Engineering of Elevator Control Software: A Product Line Practice</title>
		<author>
			<persName><forename type="first">K</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">C</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Koh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Chae</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">W</forename><surname>Choi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SPLC</title>
		<meeting>SPLC</meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">A Case Study on Software Ecosystem Characteristics in Industrial Automation Software</title>
		<author>
			<persName><forename type="first">D</forename><surname>Lettner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Angerer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Pr√§hofer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Gr√ºnbacher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ICSSP</title>
		<meeting>ICSSP</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<author>
			<persName><forename type="first">K</forename><surname>Pohl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>B√∂ckle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Van Der Linden</surname></persName>
		</author>
		<title level="m">Software Product Line Engineering: Foundations, Principles, and Techniques</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Towards a More Precise Definition of Feature Models</title>
		<author>
			<persName><forename type="first">M</forename><surname>Riebisch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Modelling Variability for OO Product Lines</title>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Volatility Analysis Framework for Product Lines</title>
		<author>
			<persName><forename type="first">J</forename><surname>Savolainen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kuusela</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ISSR</title>
		<meeting>ISSR</meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Scoping Software Product Lines: An Analysis of an Emerging Technology</title>
		<author>
			<persName><forename type="first">K</forename><surname>Schmid</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SPLC</title>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Introducing the PuLSE Approach to an Embedded System Population at Testo AG</title>
		<author>
			<persName><forename type="first">K</forename><surname>Schmid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>John</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Kolb</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Meier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ICSE</title>
		<meeting>ICSE</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A Comparison of Decision Modeling Approaches in Product Lines</title>
		<author>
			<persName><forename type="first">K</forename><surname>Schmid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Rabiser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Gr√ºnbacher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. VaMoS</title>
		<meeting>VaMoS</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Feature Diagrams: A Survey and a Formal Semantics</title>
		<author>
			<persName><forename type="first">P.-Y</forename><surname>Schobbens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Heymans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J.-C</forename><surname>Trigaux</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Bontemps</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. RE</title>
		<meeting>RE</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Extending Variability Management to the Next Level</title>
		<author>
			<persName><forename type="first">K</forename><surname>Sierszecki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Steffens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">H</forename><surname>Hojrup</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Savolainen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Beuche</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SPLC</title>
		<meeting>SPLC</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Software Product Lines in Action</title>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">J</forename><surname>Van Der Linden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Schmid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Rommes</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<author>
			<persName><forename type="first">P</forename><surname>Zave</surname></persName>
		</author>
		<ptr target="http://www.research.att.com/Àúpamela/faq.html" />
		<title level="m">FAQ Sheet on Feature Interactions</title>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
