<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Dynamic Voltage Scaling for Systemwide Energy Minimization in Real-Time Embedded Systems</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Ravindra</forename><surname>Jejurikar</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Center for Embedded Computer Systems</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<postCode>92697</postCode>
									<settlement>Irvine Irvine</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author role="corresp">
							<persName><forename type="first">Rajesh</forename><surname>Gupta</surname></persName>
							<email>gupta@cs.ucsd.edu</email>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<addrLine>San Diego La Jolla</addrLine>
									<postCode>92093</postCode>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Dynamic Voltage Scaling for Systemwide Energy Minimization in Real-Time Embedded Systems</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">DA1F096CF0F628B80343DA1BFE89628C</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T07:44+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>D.4.1 [Operating System]: Process Management</term>
					<term>scheduling Algorithms low power</term>
					<term>DVS</term>
					<term>resource standby energy</term>
					<term>critical speed</term>
					<term>real-time systems</term>
					<term>EDF scheduling</term>
					<term>procrastication</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Traditionally, dynamic voltage scaling (DVS) techniques have focused on minimizing the processor energy consumption as opposed to the entire system energy consumption. The slowdown resulting from DVS can increase the energy consumption of components like memory and network interfaces. Furthermore, the leakage power consumption is increasing with the scaling device technology and must also be taken into account. In this work, we consider energy efficient slowdown in a real-time task system. We present an algorithm to compute task slowdown factors based on the contribution of the processor leakage and standby energy consumption of the resources in the system. Our simulation experiments using randomly generated task sets show on an average 10% energy gains over traditional dynamic voltage scaling. We further combine slowdown with procrastination scheduling which increases the average energy savings to 15%. We show that our scheduling approach minimizes the total static and dynamic energy consumption of the systemwide resources.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>System-level power management is important for reliability, packaging costs as well as to extend the limited battery life of portable embedded systems. The two primary ways to reduce power consumption in computing systems are: (1) resource shutdown, commonly known as dynamic power management (DPM) and (2) resource slowdown, also known as dynamic voltage scaling (DVS). Resources such as memory banks, disk drives, displays and network interfaces possess shutdown capability and DPM techniques have been proposed to minimize the power consumption of these resources <ref type="bibr">[6,</ref><ref type="bibr" target="#b5">9,</ref><ref type="bibr" target="#b16">20]</ref>. DVS is supported by recent processors and known to be more effective than DPM in reducing the processor en-ergy consumption <ref type="bibr" target="#b2">[5,</ref><ref type="bibr" target="#b15">19]</ref>. DVS techniques exploit an energy-delay tradeoff that arises due to the quadratic relationship between voltage and power, whereas a linear relationship between voltage and delay (frequency). Note that DVS decreases the energy consumption at the cost of increased execution time. The longer execution time while decreasing the dynamic power consumption of the processor, can increase the energy contribution of other components for the following reasons:</p><p>The standby leakage currents are increasing with the advances of CMOS technology and a five fold increase in the leakage power is predicted with each technology generation. Thus longer execution time implies more leakage energy.</p><p>If components such as memory and other I/O interfaces need to be active (on state) along with the processor, slowdown can increase the total energy consumption of the system.</p><p>A minimum power consumption is associated with keeping the processor active. Some of the major contributors are the PLL circuitry, which drives up to 200mA current [8] and the I/O and analog components of the processor. Note that the power consumption of these components do not scale with DVS and longer execution time can increase the total energy consumption.</p><p>Components such as memory banks, flash drives, co-processors (DSP, FPU, codecs), FPGA components, analog interfaces and wired /wireless communication devices are pervasive in modern embedded systems. Most of these resources support multiple shutdownstates for energy minimization. Due to the energy and delay costs of state transitions, the shutdown decisions have to be judiciously made to meet the system requirements. This results in the device operating in the standby state (on-state but idle) where significant power is consumed. Memory modules are present in almost all computing systems with DRAMs and RDRAMs having standby current in the range of 30mA to 120mA [2, 3]. These devices have operating voltages in the range of 1:8V to 3:3V , and can consume up to 0:36W of power. SRAM modules have still higher standby currents of the order of 150mA to 250mA. The standby power consumption of devices such as flash drives and wireless interfaces is up to 0:5W [1] and 1:4W <ref type="bibr" target="#b1">[4]</ref> respectively. Other components like FPGAs, co-processors and codecs also consume significant power based on their functionality. The resource standby time is related to the program execution and can increase with DVS (slowdown). Especially with compiler assisted DPM techniques <ref type="bibr">[6]</ref>, standby time increases proportionally to the task execution time. Thus DVS techniques need to consider the standby power consumption of the peripherals devices in the computation of slowdown factors to reduce the total energy consumption of the system.</p><p>Most of the works on DVS consider the energy consumption of the processor in isolation. Earlier works have addressed minimizing the dynamic power consumption of the processor <ref type="bibr" target="#b2">[5,</ref><ref type="bibr" target="#b15">19]</ref>, whereas later works have focussed on leakage to minimize the total static and dynamic power consumption <ref type="bibr" target="#b13">[17,</ref><ref type="bibr" target="#b17">21,</ref><ref type="bibr" target="#b8">12,</ref><ref type="bibr" target="#b7">11]</ref>. Slowdown tradeoffs in the computation and communication subsystems are considered in <ref type="bibr" target="#b10">[14,</ref><ref type="bibr" target="#b12">16]</ref>. Recent works have also considered the combined processor and memory energy consumption. Fan et. al. <ref type="bibr" target="#b4">[7]</ref> consider memory power consumption to show that excess slowdown can increase the total energy consumption.</p><p>While most of the work on DVS is focussed on minimizing the processor energy consumption, the resource standby energy is usually ignored. It is observed that devices like memory banks are in the active state 30% , 90% of the task execution time <ref type="bibr">[6]</ref>. With the steady increase in the amount of data which is often distributed, the network and disk activity increases and so is the standby time of these devices. We take into account the standby power consumption of the resources used by tasks to compute energy efficient task slowdown factors. Given the resource usage and the resource standby time for the tasks, we propose an algorithm to compute task slowdown factors to minimize the total energy consumption. Furthermore, we combine task slowdown with procrastination scheduling proposed in our earlier work <ref type="bibr" target="#b7">[11,</ref><ref type="bibr" target="#b6">10]</ref>. Procrastination is known to reduce the energy consumption by minimizing the number of processor on/off transitions as well as extending the sleep intervals within the performance requirements of the system.</p><p>The rest of the paper is organized as follows. In Section 2, we introduce the system model. Section 3 formulates the problem followed by an algorithm to compute task slowdown factors. The experimental results are discussed in Section 4 and Section 5 concludes the paper with future directions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">SYSTEM MODEL</head><p>A task set of n periodic real time tasks is represented as Γ = fτ 1 ; :::; τ n g. A 3-tuple fT i ; D i ; C i g is used to represent each task τ i , where T i is the period of the task, D i is the relative deadline and C i is the worst case execution time (WCET) of the task at the maximum processor speed. In this work, we assume task deadlines to be equal to the period (D i = T i ) and the tasks are scheduled by the Earliest Deadline First (EDF) scheduling policy <ref type="bibr" target="#b11">[15]</ref>. All tasks are assumed to be independent and preemptive. The tasks are scheduled on a single processor system based on a preemptive scheduling policy. We say a task is procrastinated (or delayed) if the processor remains idle despite the presence of the task in the processor ready queue. The procrastination interval of a task is the time interval by which a task is procrastinated.</p><p>Recent processors support variable voltage and frequency levels for energy efficient operation of the system. Let the available frequencies be f f 1 ; :::; f s g in increasing order of frequency and the corresponding voltage levels be fv 1 ; :::; v s g. A slowdown factor (η i ) is defined as the normalized operating frequency i.e. the ratio of the current frequency to the maximum frequency, f s , of the processor. The important point to note is when the frequency is changed to f k , the voltage level is also proportionately set to v k . The power consumption of the processor at a slowdown of η is represented as PCPU; η. Since processors support discrete frequency levels, the slowdown factors are discrete points f1 fs ; f2 fs ; :::; 1 in the range [0,1]. The slowdown factor assigned to task τ i is represented by η i . When task τ i is assigned a slowdown factor fk fs , the task slowdown factor is represented by η k i to make the slowdown factor assignment explicit, when required. We assume that the overhead incurred in changing the processor speed is incorporated in the task execution time. This overhead, similar to the context switch overhead, is constant and can be incorporated in the worst case execution time of a task. We note that the same assumption is made in previous works <ref type="bibr" target="#b2">[5,</ref><ref type="bibr" target="#b15">19]</ref>. The processor supports shutdown to reduce the leakage power consumption. The processor is said to be idle if it is not executing a task. In the idle state, the processor could be in the shutdown state (no leakage) or in the standby state (active + idle) where leakage power is dissipated.</p><p>In addition to the processor, the system has a set of m resources R = fR 1 ; :::; R m g that model the peripheral devices. The resource is said to be in the standby state if it is on (active) but idle. The standby state power consumption of each resource R i is given by PR i and the shutdown power of the resource is assumed to be zero. The power consumed in performing the resource functionality is independent of the task slowdown and not considered in our analysis. Each task τ i uses a subset of the resources in R , represented by R τi . Despite the use of DPM policies, the resources are in a standby state for a significant portion of time. We assume that the device standby time for each task is expressed in number of processor cycles. Since the device activities are related to the program execution, the standby time is expected to be represented in terms of processor cycles. This is particularly true for compiler directed DPM policies. Though the standby time can potentially vary with slowdown under OS directed DPM policies, we assume that the number of cycles a resource is in standby state is independent of slowdown. Let C R j i be the number of cycles resource R j is in the standby state during the execution of τ i . If a task does not use resource R j , then C R j i = 0. In this work, we consider task level slowdown factors as opposed to intra-task slowdown. We compute task slowdown factors that minimize the total system energy consumption including the resource standby energy contribution. Note that we are not proposing DPM policies, but considering the standby energy in computing static slowdown factors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">LOW POWER SCHEDULING</head><p>We want to compute task slowdown factors that minimize the energy consumption of the entire system. The total energy consumption when task τ i is executed at a speed η is given by :</p><formula xml:id="formula_0">E i η = C i η PCPU; η + ∑ R j2R τ i C R j i η PR j (1)</formula><p>Based on the the EDF scheduling policy, a task-set of n independent periodic tasks is feasible at a slowdown factor of η i for task τ i if the utilization under slowdown is no more than unity. The number of executions of each task is inversely proportional to the task period and the optimization problem can be stated as:</p><formula xml:id="formula_1">minimize : n ∑ i=1 1 T i E i η i (2) sub ject to : n ∑ i=1 1 η i C i T i 1 ( 3 ) 8 i : η i 2 f f k f s jk = 1; :::; sg<label>(4)</label></formula><p>Note that the slowest speed need not be the optimal slowdown factor when the contributions of the processor leakage power and the resource standby power are considered. The slowdown factor for a task that minimizes its total energy consumption, called the critical speed for the task, is important in energy minimization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Slowdown Algorithm</head><p>While we do not know the time complexity of problem to compute the optimal task slowdown factors, we present a heuristic algorithm to compute energy efficient slowdown factors. The proposed heuristic is motivated by the algorithm in <ref type="bibr" target="#b14">[18]</ref>. The algorithm consists of two phases : (1) computing the critical speed for each task; and (2) increasing the task slowdown factors if the task set is not feasible. We compute the energy consumption of each task at all possible discrete slowdown factors and the slowdown factor that minimizes the task energy is the critical speed. Due to different resource usages of task, the critical speed can differ with each task. If the task-set is infeasible, the second step increases the execution speed of tasks to achieve feasibility. A heuristic to select a task whose speed is increased is described next. The candidate tasks for speedup are the tasks that do not have the maximum speed. Given η k i is the current slowdown of a candidate task τ i , the next higher slowdown factor is represented by η k+1 i . Among all candidate tasks, we increase the slowdown of a task that results in the minimum energy increase per unit time. For each candidate task τ i , we compute the increase in energy consumption, ∆E i , and the time gained by the speedup, ∆t i , where</p><formula xml:id="formula_2">∆E i = E i η k+1 i , E i η k i and ∆t i = C i 1 η k i , 1 η k+1 i .</formula><p>The slowdown factor (speed) of the candidate task with the minimum value of ∆Ei ∆ti is increased. The same heuristic is used in <ref type="bibr" target="#b14">[18]</ref> to increase the task slowdown factor. The pseudo-code is presented in Algorithm 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 1 Computing Slowdown Factors</head><p>1: Compute the critical speed for each task; 2: Initialize η i to critical speed of τ i ; 3: while ( not feasible) do 4: Let τ m be task satisfying: 5: (a) η m is not the maximum speed; 6: (b) ∆Em ∆tm is minimum; 7: Increase speed of task τ m ; 8: end while 9: return slowdown factors η i ;</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">EXPERIMENTAL SETUP</head><p>We implemented the different scheduling techniques in a discrete event simulator. To evaluate the effectiveness of our scheduling techniques, we consider several task sets, each containing up to 20 randomly generated tasks. We note that such randomly generated tasks are a common validation methodology in previous works <ref type="bibr" target="#b9">[13,</ref><ref type="bibr" target="#b2">5]</ref>. Based on real life task sets, tasks are assigned a random period in the range [10 ms,120 ms]. An initial utilization u i of each task is uniformly assigned in the range [0.05, 0.5]. The worst case execution time (WCET) for each task at the maximum processor speed is set to u i T i . The execution time of each task is scaled to ensure a processor utilization less than one, thereby making the task set feasible. All tasks are assumed to execute up to their WCET.</p><p>The tasks are scheduled on a single processor system. We use the processor power model presented in our earlier work <ref type="bibr" target="#b7">[11]</ref>, which captures both dynamic and static power consumption. The processor is assumed to support discrete voltage levels in steps of 0:05V in the range 0:5V to 1:0V . From the power model, it is seen that the operating point that minimizes the processor energy is at V dd = 0:7V , which corresponds to a slowdown factor of η = 0:41. The idle power consumption is 0:24W and the energy cost of wakeup is assumed to be 483µJ, as discussed in <ref type="bibr" target="#b7">[11]</ref>. This makes shutdown energy efficient only when the idle interval is greater than 2:01ms, which is the threshold idle interval t threshold for shutdown. In addition to the processor, the system has three resources with standby power consumption of 0:2W , 0:4W and 1:0W . These are typical standby power consumption for memory, flash drives and 802.11 wireless interfaces and represent these resources. The typical standby time for the resources as a percentage of the task execution time is assumed to be in the range [20%, 60%], [10%, 25%] and [5%, 20%] respectively. While the usage of network interfaces vary based on the applications, we assume conservative standby time. Note that our techniques will result in increased gains with larger resource standby intervals. Each task is assumed to use minimum one (memory) and maximum all resources and the standby time is uniformly assigned in the corresponding ranges. The wireless interface (1.0W standby power) is assigned to a task only if the task uses all resources.</p><p>Experiments were performed on various task sets and the average results are presented. We compare the energy consumption of the following techniques:</p><p>No DVS (no-DVS): where all tasks are executed at maximum processor speed.</p><p>Traditional Dynamic Voltage Scaling (DVS) : where tasks are assigned the minimum possible slowdown factor. Critical Speed DVS (CS-DVS): where task slowdown factors are computed by Algorithm 1, presented in Section 3. Critical Speed DVS with Procrastination (CS-DVS-P): This is the Critical Speed DVS (CS-DVS) slowdown along with the procrastination scheduling policy described in <ref type="bibr" target="#b7">[11]</ref>.</p><p>Under scheduling with no procrastination, the processor is shutdown if the processor is idle and the next task arrival is later than the threshold idle interval (t threshold ). With procrastination, the upcoming idle time and the minimum procrastination interval are considered to make a shutdown decision. Thus procrastination enables longer shutdown intervals and reduces the leakage energy consumption.</p><p>Figure <ref type="figure" target="#fig_0">1</ref> shows the energy consumption of the techniques normalized to no-DVS scheme. The processor utilization at maximum speed, U, is shown along the X-axis with the normalized energy consumption along the Y-axis. With the resource standby time in the specified range, the resources consume around 10% of the total energy in our experimental setup. Traditional DVS scheme does not consider the resource standby time and no-DVS and DVS schemes have similar energy consumption at higher values of U (80% to 100%). With the processor consuming the majority of the energy, DVS leads to energy gains at U drops below 80%. At lower utilization however, traditional DVS scheme results in increased processor leakage as well as longer resource standby time and consumes more energy. As U drops below 40%, the energy consumed by DVS increases and even surpasses no-DVS at very low values of U. On the other hand, CS-DVS computes task slowdown factors considering the resource standby power consumption and saves on an average 10% energy over traditional DVS. The CS-DVS technique executes each task no slower than its critical speed and shuts down the system to minimize energy consumption. However, if the idle intervals are not sufficient to shutdown, significant energy savings cannot be achieved (over DVS) as seen at a utilization of 30% and 40%. We see that the procrastination scheme results in more energy saving from this point. As the utilization lowers, executing tasks by the CS-DVS scheme results in idle intervals in the system and the shutdown overhead contributes to a significant portion of the total energy. The procrastination scheme (CS-DVS-P) clusters task executions thereby increasing the sleep intervals and achieves more energy savings. CS-DVS-P minimizes the idle energy consumption to result on an average 15% energy savings over the DVS scheme.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">CONCLUSIONS AND FUTURE WORK</head><p>In this paper, we have presented a task slowdown algorithm that considers the contributions of resource standby energy as well as processor leakage to minimize the total energy consumption in a system. We show that detailed power models of the resources are important in computing energy efficient operating points. Incorporating the resource usage patterns and their power models is increasingly important as systems become diverse with more resources contributing to the total energy consumption. Our experimental results show that computing the critical execution speeds for tasks results on an average 10% energy savings. The procrastination scheme increases the average energy savings to 15% by extending the sleep intervals thereby controlling leakage energy consumption. Such a scheduling framework which has the view of the entire system results in an energy efficient operation while meeting all timing requirements. We plan to extend these techniques to scheduling multiple resources with DVS capability and their effects on system-wide DPM policies.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Energy consumption normalized to no-DVS</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>The authors acknowledge support from National Science Foundation (Award CCR-0098335) and from Semiconductor Research Corporation (Contract 2001-HJ-899). We would like to thank the reviewers for their useful comments.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName><surname>References</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Power consumption and energy efficiency comparisons of wlan products</title>
		<ptr target="http://www.atheros.com/pt/papers.html" />
	</analytic>
	<monogr>
		<title level="m">Atheros White Papers</title>
		<imprint>
			<publisher>Atheros Communications</publisher>
			<date type="published" when="2003-05">May 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Determining optimal processor speeds for periodic real-time tasks with different power characteristics</title>
		<author>
			<persName><forename type="first">H</forename><surname>Aydin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Melhem</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Mossé</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">M</forename><surname>Alvarez</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of EuroMicro Conference on Real-Time Systems</title>
		<meeting>EuroMicro Conference on Real-Time Systems</meeting>
		<imprint>
			<date type="published" when="2001-06">Jun. 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Hardware and software techniques for controlling dram power modes</title>
		<author>
			<persName><forename type="first">V</forename><surname>Delaluz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Kandemir</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Vijaykrishnan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Sivasubramaniam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Irwin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Computers</title>
		<imprint>
			<biblScope unit="volume">50</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="1154" to="1173" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">The synergy between power-aware memory systems and processor voltage</title>
		<author>
			<persName><forename type="first">X</forename><surname>Fan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Ellis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Lebeck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Power-Aware Computing Systems</title>
		<imprint>
			<date type="published" when="2003-12">Dec. 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Online strategies for dynamic power management in systems with multiple power-saving states</title>
		<author>
			<persName><forename type="first">S</forename><surname>Irani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shukla</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Trans. on Embedded Computing Sys</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="325" to="346" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Procrastination scheduling in fixed priority real-time systems</title>
		<author>
			<persName><forename type="first">R</forename><surname>Jejurikar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Language Compilers and Tools for Embedded Systems</title>
		<meeting>Language Compilers and Tools for Embedded Systems</meeting>
		<imprint>
			<date type="published" when="2004-06">Jun. 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Leakage aware dynamic voltage scaling for real-time embedded systems</title>
		<author>
			<persName><forename type="first">R</forename><surname>Jejurikar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Pereira</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Design Automation Conference</title>
		<meeting>the Design Automation Conference</meeting>
		<imprint>
			<date type="published" when="2004-06">Jun. 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Combined dynamic voltage scaling and adaptive body biasing for heterogeneous distributed real-time embedded systems</title>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">K J L</forename><surname>Yan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Luo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Computer Aided Design</title>
		<meeting>International Conference on Computer Aided Design</meeting>
		<imprint>
			<date type="published" when="2003-11">Nov. 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Scheduling techniques for reducing leakage power in hard real-time systems</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">P</forename><surname>Reddy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">M</forename><surname>Krishna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In EcuroMicro Conf. on Real Time Systems</title>
		<imprint>
			<date type="published" when="2003-06">Jun. 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Communication speed selection for embedded systems with networked voltage-scalable processors</title>
		<author>
			<persName><forename type="first">J</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">H</forename><surname>Chou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Bagherzadeh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings pf International Symposium on Hardware/Software Codesign</title>
		<meeting>pf International Symposium on Hardware/Software Codesign</meeting>
		<imprint>
			<date type="published" when="2002-11">Nov. 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Real-Time Systems</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">W S</forename><surname>Liu</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>Prentice-Hall</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Simultaneous dynamic voltage scaling of processors and communication links in real-time distributed embedded systems</title>
		<author>
			<persName><forename type="first">J</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Jha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">S</forename><surname>Peh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Design Automation and Test in Europe</title>
		<meeting>Design Automation and Test in Europe</meeting>
		<imprint>
			<date type="published" when="2003-03">Mar. 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Combined dynamic voltage scaling and adaptive body biasing for lower power microprocessors under dynamic workloads</title>
		<author>
			<persName><forename type="first">S</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Flautner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Mudge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Blaauw</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Computer Aided Design</title>
		<meeting>International Conference on Computer Aided Design</meeting>
		<imprint>
			<date type="published" when="2002-11">Nov. 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Maximizing the system value while satisfying time and energy constraints</title>
		<author>
			<persName><forename type="first">C</forename><surname>Rusu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Melhem</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Mosse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Real-Time Systems Symposium</title>
		<meeting>IEEE Real-Time Systems Symposium</meeting>
		<imprint>
			<date type="published" when="2002-12">Dec. 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Power optimization of real-time embedded systems on variable speed processors</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Shin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Sakurai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Computer Aided Design</title>
		<meeting>International Conference on Computer Aided Design</meeting>
		<imprint>
			<date type="published" when="2000-11">Nov. 2000</date>
			<biblScope unit="page" from="365" to="368" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Dynamic power management for portable systems</title>
		<author>
			<persName><forename type="first">T</forename><surname>Simunic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Benini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Glynn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">De</forename><surname>Micheli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th annual international conference on Mobile computing and networking</title>
		<meeting>the 6th annual international conference on Mobile computing and networking</meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="11" to="19" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Compiler support for reducing leakage energy consumption</title>
		<author>
			<persName><forename type="first">W</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Kandemir</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Vijaykrishnan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Irwin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>De</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Design Automation and Test in Europe</title>
		<meeting>Design Automation and Test in Europe</meeting>
		<imprint>
			<date type="published" when="2003-03">Mar. 2003</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
