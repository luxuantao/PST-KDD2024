<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Resisting structural re-identification in anonymized social networks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2010-12-14">14 December 2010</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Michael</forename><surname>Hay</surname></persName>
							<email>mhay@cs.umass.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Massachusetts Amherst</orgName>
								<address>
									<postCode>01002</postCode>
									<settlement>Amherst</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Massachusetts Amherst</orgName>
								<address>
									<postCode>01002</postCode>
									<settlement>Amherst</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Gerome</forename><surname>Miklau</surname></persName>
							<email>miklau@cs.umass.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Massachusetts Amherst</orgName>
								<address>
									<postCode>01002</postCode>
									<settlement>Amherst</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Massachusetts Amherst</orgName>
								<address>
									<postCode>01002</postCode>
									<settlement>Amherst</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Massachusetts Amherst</orgName>
								<address>
									<postCode>01002</postCode>
									<settlement>Amherst</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">David</forename><surname>Jensen</surname></persName>
							<email>jensen@cs.umass.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Massachusetts Amherst</orgName>
								<address>
									<postCode>01002</postCode>
									<settlement>Amherst</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Massachusetts Amherst</orgName>
								<address>
									<postCode>01002</postCode>
									<settlement>Amherst</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Massachusetts Amherst</orgName>
								<address>
									<postCode>01002</postCode>
									<settlement>Amherst</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Don</forename><surname>Towsley</surname></persName>
							<email>towsley@cs.umass.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Massachusetts Amherst</orgName>
								<address>
									<postCode>01002</postCode>
									<settlement>Amherst</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Massachusetts Amherst</orgName>
								<address>
									<postCode>01002</postCode>
									<settlement>Amherst</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Massachusetts Amherst</orgName>
								<address>
									<postCode>01002</postCode>
									<settlement>Amherst</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Chao</forename><surname>Li</surname></persName>
							<email>chaoli@cs.umass.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Massachusetts Amherst</orgName>
								<address>
									<postCode>01002</postCode>
									<settlement>Amherst</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Massachusetts Amherst</orgName>
								<address>
									<postCode>01002</postCode>
									<settlement>Amherst</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Resisting structural re-identification in anonymized social networks</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2010-12-14">14 December 2010</date>
						</imprint>
					</monogr>
					<idno type="MD5">A294D97AEE16811567260D53D015A903</idno>
					<idno type="DOI">10.1007/s00778-010-0210-x</idno>
					<note type="submission">Received: 15 August 2009 / Revised: 21 May 2010 / Accepted: 19 November 2010 /</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T10:14+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Anonymity</term>
					<term>Anonymization</term>
					<term>Privacy</term>
					<term>Networks</term>
					<term>Social networks</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We identify privacy risks associated with releasing network datasets and provide an algorithm that mitigates those risks. A network dataset is a graph representing entities connected by edges representing relations such as friendship, communication or shared activity. Maintaining privacy when publishing a network dataset is uniquely challenging because an individual's network context can be used to identify them even if other identifying information is removed. In this paper, we introduce a parameterized model of structural knowledge available to the adversary and quantify the success of attacks on individuals in anonymized networks. We show that the risks of these attacks vary based on network structure and size and provide theoretical results that explain the anonymity risk in random networks. We then propose a novel approach to anonymizing network data that models aggregate network structure and allows analysis to be performed by sampling from the model. The approach guarantees anonymity for entities in the network while allowing An earlier version appeared at the 34th International Conference on Very Large Data Bases (VLDB), 2008.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>A network dataset is a graph representing a set of entities and the connections between them. Network data can describe a variety of domains: a social network might describe individuals connected by friendships; an information network might describe a set of articles connected by citations; a communication network might describe Internet hosts related by traffic flows. As our ability to collect network data has increased, so too has the importance of analyzing these networks. Networks are analyzed in many ways: to study disease transmission, to measure a publication's influence, and to evaluate the network's resiliency to faults and attacks. Such analyses inform our understanding of network structure and function.</p><p>However, it can be difficult to obtain access to network data, in part because many networks contain sensitive information, making data owners reluctant to publish them. An example of a network containing sensitive information is the social network studied by Potterat et al. <ref type="bibr" target="#b36">[37]</ref>, which describes a set of individuals related by sexual contacts and shared drug injections, relationships that are clearly sensitive. In this case, the researchers chose to publish the network. While society knows more about how HIV spreads because this network was published and analyzed, researchers had to weigh that benefit against possible losses of privacy to the individuals involved. Other kinds of networks, such as communication networks, are also considered sensitive and for that reason are rarely published. For example, to our knowledge, the sole publicly available network of email communication was published only because of litigation <ref type="bibr" target="#b6">[7]</ref>.</p><p>We consider the problem of publishing network data in such a way that permits useful analysis yet avoids disclosing sensitive information. Most existing work on privacy in data publishing has focused on tabular data, where each record represents a separate entity, and an individual may be re-identified by matching the individual's publicly known attributes with the attributes of the anonymized table. Anonymization techniques for tabular data do not apply to network data because they fail to account for the interconnectedness of the entities (i.e., they destroy the network structure).</p><p>Because network analysis can be performed in the absence of entity identifiers (e.g., name, social security number), a natural strategy for protecting sensitive information is to replace identifying attributes with synthetic identifiers. We refer to this procedure as naive anonymization. It is a common practice and presumably, it protects sensitive information by breaking the association between the real-world identity and the sensitive data.</p><p>However, naive anonymization may be insufficient. A distinctive threat in network data is that an entity's connections (i.e., the network structure around it) can be distinguishing and may be used to re-identify an otherwise anonymous individual. We consider how a malicious individual (the adversary) might obtain partial knowledge about the network structure around targeted individuals and then use this knowledge to re-identify them in the anonymized network. Once re-identified, the adversary can learn additional properties about the targets; for instance, he may able to infer the presence or absence of edges between them. Since individual connections are often considered sensitive information, such edge disclosure constitutes a violation of privacy. Whether naive anonymization provides adequate protection depends on the structure of the network and the adversary's capability. In this paper, we provide a comprehensive assessment of the privacy risks of naive anonymization.</p><p>Although an adversary may also have information about the attributes of nodes, the focus of this paper is on disclosures resulting from structural or topological re-identification, where the adversary's information is about the structure of the graph only. The use of attribute knowledge to re-identify individuals in anonymized data has been well studied, as have techniques for resisting it <ref type="bibr" target="#b30">[31,</ref><ref type="bibr" target="#b31">32,</ref><ref type="bibr" target="#b40">41,</ref><ref type="bibr" target="#b41">42,</ref><ref type="bibr" target="#b43">44]</ref>. More importantly, many network analyses are concerned exclusively with structural properties of the graph; therefore, safely publishing an unlabeled network is an important goal in itself. For example, the following common analyses examine only the network structure: finding communities, fitting powerlaw models, enumerating motifs, measuring diffusion and assessing resiliency <ref type="bibr" target="#b34">[35]</ref>.</p><p>In this paper, we make the following contributions:</p><p>-Adversary Model We propose a flexible model of external information used by an adversary to attack naively anonymized networks. The model allows us to evaluate re-identification risk efficiently and for a range of different adversary capabilities. We also formalize the structural indistinguishability of a node with respect to an adversary with locally bounded external information (Sect. 2). -Empirical Risk Assessment We evaluate the effectiveness of structural attacks on real and synthetic networks, measuring successful re-identification and edge disclosures. We find that real networks are diverse in their resistance to attacks. Nevertheless, our results demonstrate that naive anonymization provides insufficient protection, especially if an adversary is capable of gathering knowledge beyond a target's immediate neighbors (Sect. 3). -Theoretical Risk Assessment In addition to the empirical study, we perform a theoretical analysis of random graphs. We show how properties such as a graph's density and degree distribution affect re-identification risk. A significant finding is that in sufficiently dense graphs, nodes can be re-identified even when the graph is extremely large (Sect. 4). -Privacy Definition We also propose strategies for mitigating re-identification risk. First, we propose a privacy condition, which formally specifies a limit on how much the adversary can learn about a node's identity. We compare it with other definitions that have been proposed in the literature and discuss its limitations (Sect. 5). -Anonymization Algorithm Then, we propose a novel algorithm to achieve this privacy condition. The algorithm produces a generalized graph, which describes the structure of the original graph in terms of node groups called supernodes. The generalized graph retains key structural properties of the original graph yet ensures anonymity (Sect. 6). -Algorithm Evaluation We perform a comprehensive evaluation of the utility of the generalized graphs. This includes a comparison with other state-of-the-art graph anonymization algorithms (Sect. 7).</p><p>We conclude the paper with a comprehensive review of related work (Sect. 8).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Modeling the adversary</head><p>In this section, we describe the capabilities and motivations of the adversary in the context of network data. First, we describe the process of naive anonymization and how the adversary may attack it. Second, we define the threats of node re-identification and edge disclosure. Third, we explain how anonymity is achieved through structural similarity, which motivates a model of adversary knowledge based on degree signatures. Finally, we review alternative models of the adversary.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Naive anonymization</head><p>Formally, we model a network as an undirected graph G = (V, E). The naive anonymization of G is an isomorphic graph, G a = (V a , E a ), defined by a random bijection : V → V a . For example, Fig. <ref type="figure">1</ref> shows a small network represented as a graph along with its naive anonymization. The anonymization mapping , also shown, is a random, secret mapping.</p><p>Naive anonymization prevents re-identification when the adversary has no information about individuals in the original graph. Formally stated, an individual x ∈ V , called the target, has a candidate set, denoted cand(x), which consists of the nodes of G a that could feasibly correspond to x. To assess the risk of re-identification, we assume each element of the candidate set is equally likely and use the size of the candidate set as a measure of resistance to re-identification. Since is random, in the absence of other information, any node in G a could correspond to the target node x. Thus, given an uninformed adversary, each individual has the same risk of re-identification, specifically cand(x) = V a for each target individual x.</p><p>However, if the adversary has access to external information about the entities, he may be able to reduce the candidate set and threaten the privacy of individuals.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Threats</head><p>In practice, the adversary may have access to external information about the entities in the graph and their relationships. This information may be available through a public source beyond the control of the data owner or may be obtained by the adversary's malicious actions. For example, for the graph in Fig. <ref type="figure">1</ref>, the adversary might know that "Bob has three or more neighbors," or that "Greg is connected to at least two nodes, each with degree 2." Such information allows the adversary to reduce the set of candidates in the anonymized graph for each of the targeted individuals. For example, the first statement allows the adversary to partially re-identify Bob : cand(Bob) = {2, 4, 7, 8}. The second statement re-identifies Greg : cand(Greg) = {4}.</p><p>Re-identification can lead to additional disclosures under naive anonymization. If an individual is uniquely re-identified, then the entire structure of connections surrounding the individual is revealed. If two individuals are uniquely re-identified, then the presence or absence of an edge between them is revealed directly by the naively anonymized graph. Such an edge disclosure, in which an adversary is able to accurately infer the presence of an edge between two identified individuals, can be a serious privacy threat. In the present work, we consider the general threat of re-identification as well as the more specific threat edge disclosure.</p><p>Throughout the paper, we model the adversary's external information as access to a source that provides answers to a restricted knowledge query evaluated for a single target node of the original graph G.</p><p>An adversary attempts re-identification for a target node x by using Q(x) to refine the feasible candidate set. Since G a is published, the adversary can easily evaluate any structural query directly on G a , looking for matches. The adversary will compute the refined candidate set that contains all nodes in the published graph G a that are consistent with answers to the knowledge query on the target node.</p><p>Definition 1 (Candidate Set under Q) For a knowledge query Q over a graph, the candidate set of target node x w</p><formula xml:id="formula_0">.r.t Q is cand Q (x) = {y ∈ V a | Q(x) = Q(y)}.</formula><p>Example 1 Referring to the example graph in Fig. <ref type="figure">1</ref>, suppose Q is a knowledge query returning the degree of a node. Then, for targets Ed, Fred, Greg we have</p><formula xml:id="formula_1">Q(Ed) = 4, Q(Fred) = 2, Q(Greg) = 4, and candidate sets cand Q (Ed) = cand Q (Greg) = {2, 4, 7, 8} and cand Q (Fred) = {1, 3}.</formula><p>Given two target nodes x and y, the adversary can use the naively anonymized graph to deduce the likelihood that the nodes are connected. In the absence of external information, the likelihood of any edge is simply the density of the graph (the fraction of all possible edges that exist in the graph).</p><p>If the candidate sets for x and y have been refined by the adversary's knowledge about x and/or y, then the adversary reasons about the likelihood x and y are connected based on the connections between the candidate sets for x and y. Thus, we define the edge likelihood to be the Bayesian posterior belief assuming each candidate is an equally likely match for the targeted nodes. Definition 2 (Edge likelihood under Q) For a knowledge query Q over a graph, and a pair of target nodes x and y, the inferred likelihood of edge (x, y) under Q is denoted prob Q (x, y) and defined as:</p><formula xml:id="formula_2">|{(u, v) | u ∈ X, v ∈ Y }| + |{(u, v) | u, v ∈ X ∩ Y }| |X | • |Y | -|X ∩ Y | where X = cand Q (x) and Y = cand Q (y).</formula><p>The denominator represents the total number of possible edges from a node of one candidate set to a node of the other candidate set and accounts for the case where the intersection of the candidate sets is non-empty. Example 2 Continuing the example above, the inferred likelihood of edge (Ed, Fred) is:</p><formula xml:id="formula_3">prob Q (Ed, Fred) = (4 + 0)/(4 * 2) = 0.500</formula><p>because there are 4 edges present in G a between the disjoint candidate sets cand Q (Ed) and cand Q (Fred). The inferred edge likelihood of edge (Ed, Greg) is: prob Q (Ed, Greg) = (5 + 5)/(4 * 4 -4) = 0.833 because 5 edges are present in G a between the identical candidate sets cand Q (Ed) and cand Q (Greg). These edge likelihoods should be compared with the prior edge density of 2 * 11/8 * 7 = .393.</p><p>In Sect. 3, we measure the threats of edge disclosure and node re-identification on real networks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Anonymity through structural similarity</head><p>Intuitively, nodes that look structurally similar may be indistinguishable to an adversary, in spite of external information. A strong form of structural similarity between nodes is automorphic equivalence. Two nodes x, y ∈ V are automorphically equivalent (denoted x ≡ A y) if there exists an isomorphism from the graph onto itself that maps x to y. Example 3 Fred and Harry are automorphically equivalent nodes in the graph of Fig. <ref type="figure">1</ref>. Bob and Ed are not automorphically equivalent: the subgraph around Bob is different from the subgraph around Ed and no isomorphism proving automorphic equivalence is possible.</p><p>Automorphic equivalence induces a partitioning on V into sets whose members have identical structural properties. It follows that an adversary-even with exhaustive knowledge of a target node's structural position-cannot identify an individual beyond the set of entities to which it is automorphically equivalent. We say that two such nodes are structurally indistinguishable and observe that nodes in the graph achieve anonymity by being "hidden in the crowd" of its automorphic class members. Some special graphs have large automorphic equivalence classes. For example, in a complete graph, or in a graph which forms a ring, all nodes are automorphically equivalent. But in most graphs we expect to find small automorphism classes, likely to be insufficient for protection against re-identification.</p><p>Though automorphism classes may be small in real networks, automorphic equivalence is an extremely strong notion of structural similarity. In order to distinguish two nodes in different automorphic equivalence classes, it may be necessary to use complete information about their positions in the graph. For a weaker adversary with limited knowledge, nodes that are not automorphically equivalent may in fact be indistinguishable. For example, for an adversary who only knows the degree of targeted nodes in the graph, Bob and Ed are indistinguishable (even though they are not automorphically equivalent). This motivates the notion of bounded structural knowledge we describe next.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Adversary model based on structural signatures</head><p>We now describe the adversary model that we will use throughout the paper. It is based on a class of knowledge queries, of increasing power, which report on the local structure of the graph around a node. These queries are inspired by iterative vertex refinement, a technique originally developed to efficiently test for the existence of graph isomorphisms <ref type="bibr" target="#b9">[10]</ref>. In Sect. 2.5, we discuss alternative adversary models.</p><p>The queries are denoted H i for i = 0, 1, 2, . . .. The weakest knowledge query, H 0 , simply returns the label of the node. (We consider here unlabeled graphs, so H 0 returns on all input nodes.) The queries are successively more descriptive: H 1 (x) returns the degree of x, H 2 (x) returns the multiset of each neighbors' degree, and so on. The queries can be defined iteratively, where H i (x) returns the multiset of values which are the result of evaluating H i-1 on the set of nodes adjacent to x:</p><formula xml:id="formula_4">H i (x) = {H i-1 (z 1 ), H i-1 (z 2 ) . . . , H i-1 (z m )}</formula><p>where z 1 . . . z m are the nodes adjacent to x.</p><p>Example 4 Figure <ref type="figure">2</ref> contains the same graph from Fig. <ref type="figure">1</ref> along with the computation of H 0 , H 1 , and H 2 for each node. For example: H 0 is uniformly .H 1 (Bob) = { , , , }, which we abbreviate in the table simply as 4. Using this abbreviation, H 2 (Bob) = {1, 1, 4, 4}, which represents Bob's neighbors' degrees.</p><p>In practice, we might expect that if an adversary can learn the degrees of the target's neighbors, he would also be able to learn about edges in the neighborhood. In this case, instead of learning H i , the adversary would learn a subgraph where the subgraph is induced by the edges adjacent to nodes that lie within at most i -1 edge traversals of the target. This additional knowledge would make the adversary more powerful </p><formula xml:id="formula_5">i (x) = H i (y).</formula><p>Example 5 Figure <ref type="figure">2c</ref> lists the equivalence classes of nodes according to relations ≡ H 0 , ≡ H 1 , and ≡ H 2 . All nodes are equivalent relative to H 0 (for an unlabeled graph). As i increases, the values for H i contain successively more precise structural information, and as a result, equivalence classes are divided.</p><p>To an adversary limited to knowledge query H i , nodes equivalent with respect to H i are indistinguishable. The following proposition formalizes this intuition:</p><formula xml:id="formula_6">Proposition 1 Let x, x ∈ V . If x ≡ H i x then cand H i (x) = cand H i (x ).</formula><p>Iterative computation of H continues until no new vertices are distinguished. We call this query H * . In the example of Fig. <ref type="figure">2</ref>, H * = H 2 . The vertex refinement technique is the basis of efficient graph isomorphism algorithms which can be shown to work for almost all graphs <ref type="bibr" target="#b2">[3]</ref>. In our setting, this means that equivalence under H * is very likely to coincide with automorphic equivalence.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">Alternative adversary models</head><p>Throughout the paper, we use the structural signatures described above as a parameterized model of external information that can capture the power of a range of adversaries. Our structural signatures have the advantage that they are efficient to evaluate even on large graphs, are amenable to theoretical analysis, and are conservative models of structural knowledge.</p><p>One of our guiding principles is that adversary knowledge tends to be local to the targeted node, with more powerful adversaries capable of exploring the neighborhood around a node with increasing diameter.</p><p>In practice, external information about a published social network may be acquired through malicious actions by the adversary or from public information sources. In addition, a participant in the network, with some innate knowledge of entities and their relationships, may be acting as an adversary in an attempt to uncover unknown information. A legitimate privacy objective in some settings is to publish a graph in which participating individuals cannot re-identify themselves. For the participant-adversary, whose knowledge is based on their participation in the network, existing research about institutional communication networks suggests that there is a horizon of awareness of about distance two around most individuals <ref type="bibr" target="#b14">[15]</ref>.</p><p>Other work on network anonymity has also focused on adversaries whose structural knowledge is based on a local neighborhood around a target node <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b29">30,</ref><ref type="bibr" target="#b49">[50]</ref><ref type="bibr" target="#b50">[51]</ref><ref type="bibr" target="#b51">[52]</ref>]. An exception is the recent work by Narayanan et al. <ref type="bibr" target="#b33">[34]</ref>, which uses an auxiliary network to attack a target network, and work by Zou et al. <ref type="bibr" target="#b52">[53]</ref>, which protects against an adversary with unbounded structural knowledge.</p><p>In previous work <ref type="bibr" target="#b18">[19]</ref>, we considered alternative models of adversary knowledge, including partial subgraphs and signatures determined by connections to hubs. In evaluating adversaries with knowledge of partial subgraphs around a target, re-identification risk is generally lower than with degree signatures, but depends on how complete the known subgraph is. It is also computationally difficult to compute candidate sets because testing a potential candidate requires looking for a subgraph isomorphism.</p><p>Hubs are highly connected nodes observed in many network datasets. In a Web graph, a hub may be a highly visited website. In a graph of email connections, hubs often represent influential individuals. Because hubs are often outliers in a graph's degree distribution, the true identity of hub nodes is often apparent in a naively anonymized graph. In addition, an individual's connections to hubs may be publicly known or easily deduced. We found that on real networks, the rate of re-identification using knowledge of hub connections was relatively low. As mentioned earlier, the focus of this paper is on supporting the topological analysis of graphs. We therefore assume that attributes are not used to aid in re-identification, and our assessment of utility does not include analyses that depend on attribute values. Other authors have proposed anonymization schemes that protect against re-identification using attributes <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b51">52]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Empirical risk assessment</head><p>In this section, we evaluate the risk of publishing the naive anonymization of a network through an empirical assessment on several real and synthetic network datasets.</p><p>For each dataset, we consider each node in turn as a target. We assume the adversary computes the structural signature of that node, and then we compute the corresponding candidate set. We report the distribution of candidate set sizes across the population of nodes to characterize how many nodes are protected and how many are identifiable.</p><p>We use the following seven datasets. The HepTh dataset is a graph of coauthors in theoretical high-energy physics. The dataset is derived from arXiv, an online repository of papers. We extracted a subset of the authors and considered them connected if they wrote at least two papers together.</p><p>The Enron dataset is derived from a corpus of email sent to and from managers at Enron Corporation, made public by the Federal Energy Regulatory Commission during its investigation of the company. Two individuals are connected if they corresponded at least 5 times.</p><p>The NetTrace dataset was derived from an IP-level network trace collected at a major university. The trace monitors traffic at the gateway; it produces a bipartite graph between IP addresses internal to the institution, and external IP addresses. We restricted the trace to 187 internal addresses from a single campus department and the 4,026 external addresses to which at least 20 packets were sent on port 80 (http traffic).</p><p>The HOT dataset is a model of the Internet of a single service provider (ISP). Its Heuristically Optimal Topology (HOT) is designed to reflect the economic and technological constraints that influence the topology. It has a hierarchical structure with a core of interconnected lowdegree (high-bandwidth) routers at its center and high-degree (low-bandwidth) routers at its periphery <ref type="bibr" target="#b27">[28]</ref>.</p><p>The Power-Law dataset is a random graph that is generated based on a model of growth and preferential attachment <ref type="bibr" target="#b4">[5]</ref>. Its degree distribution follows a power law. In some of the experiments, we also consider a slightly different dataset, Clustered Power-Law, which is constructed using the same model except that when edges are inserted into the graph, triangles are formed with some probability (we set p = 0.4).</p><p>The Mesh dataset is a 50 × 50 grid topology, where each node is connected to the four adjacent nodes in the grid. The Tree dataset is a balanced tree of arity 3.</p><p>All datasets have undirected edges, with self-loops removed. We eliminated a small percentage of disconnected nodes in each dataset, focusing on the largest connected Fig. <ref type="figure">3</ref> The relationship between candidate set size and structural signature knowledge H i for i = 1.4 for four real graphs and three synthetic graphs. The trend lines show the percentage of nodes whose candidate sets have sizes in the following buckets: <ref type="bibr" target="#b0">[1]</ref> (black), <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b3">4]</ref>, <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b9">10]</ref>, <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b19">20]</ref> Figure <ref type="figure">3</ref> is an overview of the likelihood of re-identification under H 1 , H 2 , H 3 and H 4 knowledge queries. For each H i , the graph reports on the percentage of nodes whose candidate sets have sizes in the following buckets: <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b3">4]</ref>, <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b9">10]</ref>, <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b19">20]</ref>, <ref type="bibr">[21, ∞]</ref>. Nodes with candidate set size 1 have been uniquely identified, and nodes with candidate sets between 2 and 4 are at high risk for re-identification. Nodes are at fairly low risk for re-identification if there are more than 20 nodes in their candidate set. <ref type="foot" target="#foot_0">1</ref> Each H i is represented as a different point on the x-axis.</p><p>Figure <ref type="figure">3</ref> shows that for the HepTh data, H 1 leaves nearly all nodes at low risk for re-identification, and it requires H 3 knowledge to uniquely re-identify a majority of nodes. For Enron, under H 1 about 15% of the nodes have candidate sets smaller than 5, while only 19% are protected in candidate sets greater than 20. Under H 2 , re-identification jumps dramatically so that virtually all nodes have candidate sets less than 5. These two real graphs are roughly similar in behavior to the synthetic Power-Law graph, as they display features similar to a power-law graph.</p><p>NetTrace and HOT have substantially lower disclosure overall, with very few identified nodes under H 1 , and even H 4 knowledge does not uniquely identify more than 10% of the nodes. For NetTrace, this results from the unique bipartite structure of the trace dataset: many nodes in the trace have low degree as they are unique or rare web destinations contacted by only one internal host. The HOT graph has high structural uniformity because it contains many degreeone nodes that are connected to the same high-degree node and thus structurally equivalent to one another.</p><p>The synthetic Tree and Mesh graphs display very low re-identification under all H i . This is obvious given that these graphs have highly uniform structure: the nodes in Mesh have either degree 2 or 4, the nodes in Tree have degree 1, 3 or 4. We include them here for completeness as these graphs are studied in Sect. 7.</p><p>A natural precondition for publication is a very low percentage of high-risk nodes under a reasonable assumption about adversary knowledge. Three datasets meet that requirement for H 1 (HepTh, NetTrace, HOT). Except for the extreme synthetic graphs Tree and Mesh, no datasets meet that requirement for H 2 .</p><p>Overall, we observe that there can be significant variance across different datasets in their vulnerability to different adversary knowledge. However, across all datasets, the most significant change in re-identification is from H 1 to H 2 , illustrating the increased power of adversaries that can explore beyond the target's immediate neighborhood. Re-identification tends to stabilize after H 3 -more information in the form of H 4 does not lead to an observable increase in re-identification in any dataset. Finally, even though there are many re-identified nodes, a substantial number of nodes are not uniquely identified even with H 4 knowledge.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Edge disclosure</head><p>We measure the risk of edge disclosure possible under adversaries with knowledge of degree signatures. Our sample datasets are sparse graphs-their edge densities are all quite low, as reported in Table <ref type="table" target="#tab_1">1</ref>. This means that the expectation of any particular edge existing in the graph is low.</p><p>To measure the risk of edge disclosure, we considered each edge present in the original graph and considered its inferred edge likelihood under various H i . That is, we imagine an </p><formula xml:id="formula_7">H 1 H 2 H 3 H 4 H 1 H 2 H 3 H 4 H 1 H 2 H 3 H 4 H 1 H 2 H 3 H 4 H 1 H 2 H 3 H 4 H 1 H 2 H 3 H 4 H 1 H 2 H 3 H 4</formula><p>Fig. <ref type="bibr" target="#b3">4</ref> The inferred edge probabilities resulting from attempted re-identification using structural signatures</p><formula xml:id="formula_8">H 1 , H 2 , H 3 , H 4</formula><p>adversary using H i knowledge to re-identify the individuals participating in each edge of the true graph and report the inferred edge probability over the set of all true edges. For each H i we get a range of inferred edge probabilities, as illustrated in Fig. <ref type="figure">4</ref>.</p><p>The results show that with H 1 knowledge alone, the risk of edge disclosure is relatively limited. In the Hep-Th data, 80% of the edges have an inferred edge probability of less than 0.01, which constitutes a small shift in an adversary's certainty about the presence of those edges. In the Enron and NetTrace data, roughly half the edges have inferred probabilities between 0.10 and 1, which represents a significant shift in the adversary's expectation.</p><p>Of much more concern, however, is the fact that with H 2 knowledge (or greater) many edges are disclosed with certainty-the inferred edge probability is 1 for a majority of edges across all datasets. It is also important to note that even when candidate sets tend to be large (such as in NetTrace and HOT), edges can be disclosed with high likelihood. In NetTrace and HOT this likely reflects a hub node with a unique degree connected to many degree-one nodes. Even though the candidate set of degree-one nodes may be large, every node in that candidate set is connected to the hub, and density of connections between the candidate sets is one, resulting in certain edge disclosure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Theoretical risk assessment</head><p>The results of the previous section show that re-identification risk varies across graphs. We want to understand and explain this variation. In some cases, such as Tree and Mesh, the low re-identification risk can be explained by the regular topology, which makes it hard to distinguish nodes by their local structure. However, across the other graphs, the reason for diversity in risk is unclear.</p><p>In this section, to gain insight into the factors affecting reidentification risk, we study random graphs. Random graphs are governed by parameters which control some aspect of the graph's topology; by varying the parameters, we can measure how this property affects re-identification risk. Here, we study how re-identification risk is affected by two key graph properties, density and degree distribution. To study the relationship between graph density and anonymity, we analyze the Erdős-Rényi (ER) model, the simplest random graph model. Following that, we study random graphs with powerlaw degree distributions. These results help us to understand under what conditions distinctive structures arise in graphs, and thus provide insight into the foundations of anonymity for graphs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Erdős-Rényi graphs</head><p>The ER model generates a graph by sampling each of the n 2 edges independently with probability p. As the number of nodes, n, increases, these graphs exhibit different behaviors depending on how p scales with n.</p><p>We consider three cases. In a sparse random graph p = c/n, in a dense random graph p = c log n/n, and in a superdense random graph, p = c (where c is a constant). The first two cases are of interest because when c &gt; 1, with high probability the graph includes a giant connected component of size (n) and a collection of smaller components (in the sparse case) or the graph is completely connected (in the dense case) <ref type="bibr" target="#b13">[14]</ref>.</p><p>To motivate the theoretical results that follow, Fig. <ref type="figure">5</ref> shows experimental simulations on ER random graph of 100 K nodes and varying edge probabilities. The trend lines measure the percentage of nodes uniquely identified by H 1 , H 2 , and H 3 knowledge.</p><p>The figure shows that for sparse graphs, very few nodes are uniquely identified, even with the more powerful H 3 knowledge. Intuitively, nodes cannot be distinguished because a sparse graph lacks sufficient edge density to create diversity in structure. Because the edge probability is p = c/n, the expected node degree, which is p(n -1), goes to c as n → ∞. Because the expected degree is constant, for sufficiently large n, structural patterns must repeat, leading to complete structural uniformity in the limit. The following </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Uniquely identified</head><p>Edge probability, p Fig. <ref type="figure">5</ref> For H 2 and H 3 the number of uniquely re-identified individuals in a classical random graph goes from zero to 100% quickly when there is sufficient edge density. But regardless of the density, the number of nodes with a unique degree is close to zero, showing that H 1 is insufficient for unique re-identification theorem formalizes this intuition, showing that no degree of H i knowledge can distinguish nodes in a large sparse ER random graph.</p><p>Theorem 1 (Sparse ER random graphs) Let G be an ER random graph containing n nodes with edge probability given by p = c/n for c &gt; 1. (i) The expected sizes of the equivalence classes induced by H i are (n) for any i ≥ 0; (ii) with probability going to one, the sizes of the equivalence classes induced by H i are (n α ), for any i ≥ 0 and any 0 &lt; α &lt; 1.</p><p>Proof We begin with H 1 . Consider a graph of size n. Let N i denote the degree of the i-th node, i ≤ n. As n → ∞,</p><formula xml:id="formula_9">P(N i = k) → c k k! e -c</formula><p>Note that for any k = ω(1), the probability of N i = k goes to zero as n → ∞. Thus, it suffices only consider the case where k is a constant.</p><p>Let M 1,k (n) denote the expected size of the equivalence class of H 1 corresponding to node degree k when the graph is of size n and let</p><formula xml:id="formula_10">M 1,k = lim n→∞ M 1,k (n). We have M 1,k = lim n→∞ n i=1 P(N i = k) = (n)</formula><p>In order to establish the second result, we restrict ourselves to a random subset of the n nodes of size n α , where α &lt; 1. Note that the fraction of nodes in this subset goes to zero as n → ∞. This allows us to show that, as n → ∞, the degrees of the nodes in this subset are independent random variables. Application of a Chernoff bound then produces</p><formula xml:id="formula_11">P[L k ≤ (1 -δ)n α c k e -c /k!] ≤ e -(δ 2 c k e -c /k!)n α where L k is the number of nodes in the subset having degree k as n → ∞. As |M i,k | ≥ L k , we conclude that |M 1,k (n)| = (n α )</formula><p>with probability going to one for all k. Similar arguments hold for H i , i = 2, . . .. Consider a node x. We first note that the H i equivalence class that x belongs to is determined by the subgraph rooted at x that includes all nodes within distance i of it. Now, as n → ∞, with probability going to one, this subgraph is a tree. Moreover, the probability of the above subgraph deviating from a tree is O(1/n). Another observation is that every H i induced equivalence class contains at least one node, whose distance i subgraph is a tree in the limit as n → ∞. This follows because any H i consistent multiset can be used to construct a tree. Thus, any distance i subgraph centered at a node that is not a tree is hidden by commonly found trees.</p><p>Consider a tree, t, of height i or less. Let N (t) be a set containing the numbers of children for all nodes in the tree that are at distance j = 0, 1, . . . , i -1 from the root. Let G i (x) denote the distance i subgraph centered at node x and let T i denote the set of all possible height i or less trees. Then</p><formula xml:id="formula_12">P(G i (x) = t) = k∈N (t) c k k! e -c + O(1/n), t ∈ T i =<label>(1)</label></formula><formula xml:id="formula_13">P(G i (x) / ∈ T i ) = O(1/n)</formula><p>Note that as n grows, the distribution of the number of children that a node within the tree has is Poisson. Since each equivalence class contains at least one height i or less tree in the limit as n → ∞, it follows from the above expressions that the expected size of each equivalence class is (n). A similar argument as used for H 1 establishes the second property.</p><p>From the standpoint of protecting anonymity, this is an encouraging result for this class of graphs, assuming we are concerned with publishing large graphs. (In simulations, we found that some re-identification occurs in random graphs of less than 10 6 nodes.)</p><p>As we consider more dense ER random graphs, structural diversity increases and re-identification becomes a near certainty very quickly. Figure <ref type="figure">5</ref> suggests that as graphs become dense ( p = c log n/n), while nodes remain well hidden against H 1 adversaries, H 2 knowledge is sufficient to reidentify virtually all nodes in the graph. The following theorem supports the simulations.</p><p>Theorem 2 (Dense ER random graphs) Let G be an ER random graph containing n nodes with edge probability given by p = c log n/n for c &gt; 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">With high probability, a node belongs to an equivalence</head><p>class induced by H 1 that grows to infinity as n → ∞.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">The expected sizes of equivalence classes induced by H 2</head><p>goes to zero as n → ∞.</p><p>The second property is consistent with simulation results as the most likely cause is that the H 2 signatures are unique.</p><p>Proof As n → ∞, the degree distribution converges to the Poisson distribution with mean c log n. Let N i (n) denote the degree of node i in a graph of size n and consider degrees of the form N i (n) = δc log n, 0 &lt; δ. Then, as n → ∞, we have</p><formula xml:id="formula_14">P[N i = δc log n] = 1 √ 2πδc log nn c(1-δ+δ log δ) , 0 &lt; δ</formula><p>A Chernoff bound argument can be used to show that, whp, a node's degree lies within the range (δ 0 c log n, δ 1 c log n) where δ 0 is the largest value of δ &lt; 0 such that c(1 -δ + δ log δ) = 1 and δ 1 is the smallest value of δ &gt; 1 to satisfy that equation. Note that P[N i = δc log n] decreases more quickly than 1/n whenever δ / ∈ [δ 0 , δ 1 ] and more slowly otherwise. We focus now on the range of degrees (δ 0 c log n, δ 1 c log n), and let L δ denote the number of nodes with degree δc log n, δ ∈ [δ 0 , δ 1 ]. Randomly select a set of nodes of size n α , where α is chosen such that c(1 -δ + δ log δ) &lt; α &lt; 1. As in the previous theorem, we can show that the degrees of these nodes become independent random variables as n → ∞. Now apply a Chernoff bound (as n → ∞) to obtain</p><formula xml:id="formula_15">P L δ &lt; (1 -β)n α (2πδc log n) -1 n -c(1-δ+δ log δ) ≤ e -β 2 n α (2πδc log n) -1 n -c(1-δ+δ log δ) /2</formula><p>Because of the choice of α, the right hand side goes to zero. Thus L δ → ∞ as n → ∞ whp and therefore the size of the equivalence class corresponding to degree δc log n goes to infinity as n → ∞. Since a node takes its degree from the range (δ 0 c log n, δ 1 c log n) whp, it belongs to an equivalence class whose size goes to infinity whp as n → ∞.</p><p>The proof of the second property is more involved. We sketch the proof. Consider a node with degree k, we need only consider k ∈ (δ 0 c log n, δ 1 c log n). Moreover, we need only consider degrees of the neighbors in the same range. Furthermore, we can assume that the degrees of the neighbors are independent of each other as n → ∞. Application of a straightforward generalization of Theorem 5.7 in <ref type="bibr" target="#b32">[33]</ref> to the case of a non-uniformly random balls-and-urns problem allows us to write</p><formula xml:id="formula_16">P[X 1 = k 1 , . . . , X s = k s ] ≤ e δc log n s i=1 ( p i δc log n) k i k i ! e -p i δc log n</formula><p>where p i is the probability that a neighbor selects degree i.</p><p>Here (X 1 , . . . , X s ) constitutes the H 2 signature of the node. Now, it is easy to argue using Chernoff bounds that neighbors only choose degrees clustered around c log n(c log n + l, l = 0, ±1, ±2, . . .). Hence</p><formula xml:id="formula_17">P[X 1 = k 1 , . . . , X s = k s ] ≤ e δc log n ( p c log n δc log n) δc log n s i=1 k i ! e -p c log n δc log n ≤ a (log n) -1/2 δc log n e -b(log n) -1/2 δc log n</formula><p>Where a is a constant. The second inequality follows from</p><formula xml:id="formula_18">i k i &gt; 1. Now consider the expected number of nodes with signature (k 1 , . . . , k s ), M k 1 ,...,k s . It is upper bounded by M k 1 ,...,k s ≤ an (log n) -1/2 δc log n e -b(log n) -1/2 δc log n</formula><p>which goes to zero as n → ∞.</p><p>Lastly, we include a known result for the case of a superdense graph where p = 1/2. The following theorem, originally due to Babai and Kucera <ref type="bibr" target="#b2">[3]</ref> and rephrased below, shows that with high probability every node will be uniquely identified using H 3 knowledge: Theorem 3 (Super-dense ER random graphs) Let G be an ER random graph on n nodes with edge probability p = 1/2. The probability that there exist two nodes x, y ∈ V such that x ≡ H 3 y is less than 2 -cn for constant value c &gt; 0.</p><p>This result provides a sufficient condition for unique re-identification of the entire population in a graph.</p><p>Theorems 2 and 3 are disappointing from an anonymity perspective. However, most social and communication networks appear to be sparse, and so Theorem 1 may be more applicable. Furthermore, real networks often have heavytailed degree distributions, which is not the case for ER graphs. To capture the heavy-tailed degree distribution, we also study re-identification risk in power-law graphs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Power-law graphs</head><p>Several graph models have been proposed that exhibit the heavy-tailed degree distributions often observed in real networks, including the power-law random graph (PLRG) model <ref type="bibr" target="#b0">[1]</ref>. In this model, a graph is constructed by first assigning a degree to each node, where the degree is sampled from a power-law distribution. Edges are inserted by randomly choosing endpoints until every node has as many edges as its specified degree. (This can result in self-loops or multiple edges between a pair of nodes, which are often removed to form a simple graph that closely approximates the original degree distribution.)</p><p>The PLRG, and other power-law models, generates graphs with constant average degree as the number of nodes increases. Thus the edge density is low, and despite the skew in node degree, we find that the structural diversity is insufficient for re-identification. We state this formally for PLRG because it is the easiest power-law graph model to analyze.</p><p>Theorem 4 (Power-law random graphs) Let G be a PLRG on n nodes. With probability going to one, the expected sizes of the equivalence classes induced by H i is (n), for any i ≥ 0.</p><p>Proof The proof of Theorem 4 proceeds in a similar manner to the proof of Theorem 1 except that the Poisson distribution is replaced by</p><formula xml:id="formula_19">P(N i = k) = ak -α &gt; 0, k = 0, 1, . . . where a is a constant such that ∞ k=0 P(N i = k) = 1.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Discussion</head><p>The theoretical results of this section complement the empirical results of the previous section. We see that re-identification risk depends on graph size: the empirical results for the 2500 node Power-Law graph show high re-identification risk; however, Theorem 4 shows that once a power-law graph is sufficiently large, nodes will be anonymous.</p><p>In fact, the critical factor determining re-identification risk in large random graphs is not the degree distribution, but density. Sparse graphs (including power-law graphs) have low re-identification risk, whereas dense graphs have high reidentification risk. This is an important finding as it shows that even in extremely large graphs, nodes are not necessarily well hidden. It depends on the topological properties of the graph. This one reason why the H i structural signatures can be a valuable tool for data owners as they allow them to efficiently assess re-identification risk even on large graphs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Mitigating re-identification risk</head><p>The previous two sections were about risk assessment. The main finding was that there is considerable risk in publishing the naive anonymization of a graph because informed adversaries can use their knowledge to re-identify nodes and in some cases, infer particular edges.</p><p>The next three sections are about risk mitigation. In this section, we first introduce a new condition, graph k-anonymity, which is a bound on re-identification risk. Then, we relate it to other privacy definitions proposed in the literature. In Sect. 6, we present an algorithm that achieves graph k-anonymity by transforming the graph through a process called graph generalization. The benefit of generalization is reduced risk, but the cost is that the generalized graph is an approximation of the original graph and therefore less useful to the analyst. Finally in Sect. 7, we present the results of experiments where we measure how generalization affects several graph properties commonly measured by analysts. Also in that section, we compare the proposed algorithm against state of the art graph anonymization algorithms in terms of both privacy risk and utility.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Structural anonymity</head><p>In the previous sections, the size of the candidate set is used as a measure of re-identification risk. This is a natural measure for naive anonymization. A node can be a candidate only if its local graph structure is an exact match to the adversary's knowledge. Therefore each candidate is an equally plausible guess for the target. However, as we move beyond naive anonymization to consider strategies that alter the graph structure, the size of the candidate set is no longer an appropriate measure of risk.</p><p>If the graph structure has been altered by the anonymization process, the alterations may have changed the structure around the target. Therefore, a candidate may include not only exact matches in the published graph, but also partial matches. In addition, not all matches are equally likely. The probability of a candidate depends on the adversary's prior belief about the structure around the target and on the likelihood that the algorithm altered that structure to produce the observed output.</p><p>We introduce a new privacy condition to account for these differences. Invariably, the first step of any algorithm is to perform naive anonymization to create uncertainty about the true identities of the nodes. Recall : V → V a , the secret mapping between identifiers in the original graph and the synthetic identifiers in the anonymized graph. The adversary's goal is to learn this mapping; the data owner's goal is to sufficiently alter the graph so that the adversary fails to achieve its goal.</p><p>Our privacy definition is a condition on the adversary's posterior belief after having seen the published graph. The posterior belief depends on the published graph, the algorithm that produced the published graph, and the adversary's prior belief. A successful anonymization is one that meets the following definition:</p><formula xml:id="formula_20">Definition 4 (Graph k-anonymity under Q) Let Q be a struc- tural knowledge query. An anonymized graph G a satisfies graph k-anonymity with respect to Q if ∀x ∈ V, ∀y ∈ V a : Pr[ (x) = y | G a ] ≤ 1/k</formula><p>where the probability depends on the randomness of the algorithm that produced G a and the adversary's prior probability over input graphs G.</p><p>If we make the natural assumption that the adversary has no other external information other than Q, then the adversary's prior probability is uniform over all graphs G such that in G, the structure around x agrees with Q(x).</p><p>Revisiting naive anonymization, there is a relationship between graph k-anonymity and our previously used measure of risk, the size of the candidate set. If the probability distribution over candidates is uniform, this condition simply 123 requires at least k candidates: a naive anonymization satisfies graph k-anonymity under Q if for any x, |cand Q (x)| ≥ k.</p><p>Finally, as we will see in Sect. 6, some anonymizations are graph k-anonymous with respect to any Q. We simply say in this case that the output satisfies graph k-anonymity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Relation to alternative privacy conditions and limitations</head><p>The above condition of graph k-anonymity is similar to, and in some sense encompasses other definitions recently proposed for graph data. Liu and Terzi <ref type="bibr" target="#b29">[30]</ref> propose a condition which requires that "in the published graph" each degree in the graph occurs at least k times. Such an output satisfies graph k-anonymity with respect to H 1 (i.e., degree). Zhou and Pei <ref type="bibr" target="#b51">[52]</ref> require that "in the published graph" each neighborhood (the subgraph induced by a node and its neighbors) be isomorphic to at least k -1 others. Such an output satisfies graph k-anonymity with respect to N where N is the knowledge query that returns the neighborhood subgraph of a node. Note it also satisfies graph k-anonymity with respect to H 1 since query N also reveals node degree.</p><p>The above definitions are graph analogs of k-anonymity <ref type="bibr" target="#b40">[41,</ref><ref type="bibr" target="#b41">42,</ref><ref type="bibr" target="#b43">44]</ref>, a privacy condition defined for tables. Each assumes the adversary has some knowledge about a target entity (analogous to knowledge of the quasi-identifier) and the anonymity condition requires that this knowledge cannot be used to distinguish entities in the published data. The graph data privacy conditions differ on how much knowledge the adversary is assumed to have (node degree, neighborhood, etc.), analogous to differences in the choice of quasi-identifier.</p><p>Like k-anonymity, the above definitions also have limitations. In a homogeneity attack, while the adversary is not able to distinguish among a set of candidates, all of the candidates share a common property. Because the candidates are homogenous, the adversary has learned something about the target, even though re-identification did not occur. In tabular data, definitions such as -diversity <ref type="bibr" target="#b30">[31]</ref> and t-closeness <ref type="bibr" target="#b28">[29]</ref> have been introduced to counter the threat of homogeneity attacks.</p><p>An instance of the homogeneity attack is edge disclosure (Sect. 2). A published graph which is graph k-anonymous may still be vulnerable to edge disclosure. To address the threat of edge disclosure, Cormode et al. <ref type="bibr" target="#b7">[8]</ref> introduce an edge safety condition (described in Sect. 7.1 of this paper). While this prevents edge disclosure, it appears to do so at a significant expense to utility, based on the experimental results in Sect. 7.3. In addition, we measure the risk of edge disclosure of our proposed algorithm and find in practice it is low for reasonable k (Sect. 7.5).</p><p>Other attacks have been proposed on tabular data anonymizations, and analogs of these attacks may apply to graph anonymization. Attacks include the composition attack <ref type="bibr" target="#b16">[17]</ref>, the minimality attack <ref type="bibr" target="#b47">[48]</ref>, and the deFinetti attack <ref type="bibr" target="#b22">[23]</ref>. While some of these attacks can be remedied by imposing additional conditions (e.g., m-invariance <ref type="bibr" target="#b48">[49]</ref> defends against the composition of multiple releases of a dynamic table), developing data publication techniques that resist all of them is an open problem, not only for graph data, but for tabular data as well. Differential privacy <ref type="bibr" target="#b12">[13]</ref> ensures protection from all of the above attacks, but it remains unclear whether efficient and accurate data publication is possible under differential privacy <ref type="bibr" target="#b11">[12]</ref>. As discussed in Sect. 8, some differentially private algorithms for graph data have been developed, but they output answers to particular queries and do not publish a graph.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Graph generalization algorithm</head><p>In this section, we describe an anonymization technique that protects against re-identification by generalizing the input graph. We generalize a graph by grouping nodes into partitions, then publishing the number of nodes in each partition, along with the density of edges that exist within and across partitions. The adversary attempts re-identification in the generalized graph, while the analyst uses it to study properties of the original graph.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Graph generalization</head><p>To generalize a naively anonymized graph G a = (V a , E a ), we partition its nodes into disjoint sets. The elements of a partitioning V are subsets of V a . They can be thought of as supernodes since they contain nodes from G a , but are themselves the nodes of a undirected generalized graph G = (V, E). The superedges of E include self-loops and are labeled with non-negative weights by the function d : E → Z * . G V is a generalization of G a under a partitioning V if the edge labels report the density of edges (in G a ) that exist within and across the partitions:</p><formula xml:id="formula_21">Definition 5 (Generalization of graph) Let V be the super- nodes of V a . G is a generalization of G a under V if, for all X, Y ∈ V, d(X, Y ) = |{(x, y) ∈ E a |x ∈ X, y ∈ Y }|.</formula><p>G summarizes the structure of G a , but the accuracy of that summary depends on the partitioning. For any generalization G of G a , we denote by W(G) the set of possible worlds (graphs over V a ) that are consistent with G. Intuitively, this set of graphs is generated by considering each supernode X and choosing exactly d(X, X ) edges between its elements, then considering each pair of supernodes (X, Y ) and choosing exactly d(X, Y ) edges between elements of X and elements of Y . The size of W(G) is a measure of the accuracy of G as a summary of G a .</p><p>The partitioning of nodes is chosen so that the generalized graph satisfies privacy goals and maximizes utility, as explained in Sects. 6.2 and 6.3 respectively. In the extreme case that all partitions contain a single node, then the graph generalization G does not provide any additional anonymity: W(G) contains just the graph G a (the function d encodes its adjacency matrix). At the other extreme, if all nodes are grouped into a single partition, then G consists of a single supernode with a self-loop labeled with |E a | (the total number of edges in the original graph). W(G) is thus the set of all graphs over V a with |E a | edges. In this case the generalization provides anonymity, but is unlikely to be useful to the analyst since it reflects only the edge density of the original graph.</p><p>In studying a generalized graph, the analyst can sample a single random graph from W(G) and then perform standard graph analysis on this synthetic graph. Repeated sampling can improve the accuracy of analysis. We study in Sect. 7 the bias and variance of estimates of graph properties based on graphs sampled from W(G).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Anonymity of generalized graphs</head><p>To ensure anonymity we require that the adversary have a minimum level of uncertainty about the identity of any target node in V . We use the size of a partition to provide a basic guarantee against re-identification and require that each partition have size at least k. This ensures that the output satisfies graph k-anonymity with respect to any structural query Q.</p><p>Proposition 2 Let G be a generalized graph such that each supernode X has at least k nodes. Then G satisfies graph k-anonymity.</p><p>Proof The intuition for this claim is that the generalized graph summarizes the graph in terms of supernodes and contains no information that allows the adversary to distinguish between two nodes in the same supernode. Therefore, each of the k or more nodes in the same supernode must be equally likely candidates and the probability of any one node being the target is at most 1/k.</p><p>We now give a formal proof. Given an input graph G, there are two key steps to producing a generalized graph: (a) first the nodes of the graph are relabeled, as with naive anonymization; and then (b) the nodes are partitioned into groups. We assume the algorithm that chooses the partition does not depend on the particular labels on the nodes; since it receives a naive anonymization, the labels are arbitrary. Therefore, we can commute these two operations without affecting the final output. Without loss of generality, we can assume that the nodes are relabeled after the partition is chosen.</p><p>Let : V → V a denote the function which relabels nodes. Let P denote the partition of V into groups. The output G is completely determined by G, , and P. For convenience, let f be the function that takes as input G, , P and outputs G.</p><p>To show graph k-anonymity, we must show that an adversary cannot use G to re-identify a target node x. Formally, we must show that for any x ∈ V and any y ∈ V a , Pr[ (x) = y | G] ≤ 1/k where the probability comes from the randomness in the algorithm and the adversary's prior belief.</p><p>To prove this, we will show that We can write Pr[ (x) = y, G] as:</p><formula xml:id="formula_22">Pr[ (x) = y, G] = π :π(x)=y Pr[ = π, G] = π,g, p: G= f (g,π, p) and π(x)=y Pr[ = π, G = g, P = p] = π,g, p: G= f (g,π, p) and π(x)=y Pr[P = p|G = g]Pr[ = π]Pr[G = g]</formula><p>where Pr[P = p|G = g] is the probability the algorithm outputs partition p given the input graph g; Pr[ = π ] is the probability of a particular relabeling, which is equal to 1/|V |! for any π ; and Pr[G = g] is the adversary's prior belief that the input graph is g.</p><p>Consider one term in the above summation by fixing the input graph g, the partition p, and the map π . Let x denote the node that maps to y under π , i.e., π(x ) = y . Construct an alternate mapping π alt such that the mapping for x and x are flipped and all other mappings are unchanged: π alt (x) = π(x ) and π alt (x ) = π(x) and π alt (x ) = π(x ) for all x ∈ {x, x }. There is a corresponding term in the summation for Pr[ (x) = y , G] where π is replaced with π alt . Since x and x appear in the same partition, we can permute their relabelings without changing the generalized graph; i.e., f (g, π, p) = f (g, π alt , p). Since each term in the above summation for Pr[ (x) = y, G] can be paired with an equal term in the summation for Pr[ (x) = y , G], then Pr[ (x) = y, G] = Pr[ (x) = y , G] and this completes the proof.</p><p>Requiring a minimum supernode size of k only imposes an upper bound on the adversary's confidence in the true identity of his target. For some graphs and some adversaries, the adversary's confidence may be much less than 1/k.</p><p>For example, consider an adversary who knows only the degree of its target. The candidates for the target include any node such that, in some possible world, its degree matches the target's degree. For each supernode, we can determine a range of degrees such that, for each degree in that range and each node in that supernode, there exists a possible world where that node obtains that degree. For supernode X , the range is determined by mindegree and maxdegree, which are defined as mindegree(X</p><formula xml:id="formula_23">) = max 0, d(X, X ) - |X | -1 2 + Y ∈V max(0, d(X, Y )-(|X |-1)|Y |) and maxdegree(X ) = min(|X | -1, d(X, X )) + Y ∈V min(|Y |, d(X, Y )).</formula><p>The degree range of each supernode determines the candidates; however, not all candidates are equally likely. Intuitively, a node is more likely if there are more possible worlds in which its degree matches the target.</p><p>In general, it may be computationally hard to determine the adversary's posterior probability of a candidate being the target. The brute force solution-enumerating all possible worlds and computing candidate set in each one-requires exponential time. We conservatively require k-sized partitions but observe that in practice this may provide much stronger protection than that implied by the value of k.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Algorithm description</head><p>We now present the graph generalization algorithm, which we call GraphGen. The input to GraphGen is G a and privacy parameter k. The output is a generalized graph G. Pseudocode for the algorithm is given in Algorithm 1.</p><p>Subject to the privacy constraint, which requires the supernodes of G to be of size at least k, we would like to find the generalized graph that best fits the input graph. We estimate fitness via a maximum likelihood approach. We consider a uniform probability distribution over the possible worlds W(G). For a graph g ∈ W(G) we define Pr G [g] = 1/|W(G)| where the number of possible worlds is:</p><formula xml:id="formula_24">|W(G)| = X ∈V 1 2 |X |(|X | -1) d(X, X ) X,Y ∈V |X ||Y | d(X, Y )</formula><p>Without regard to the anonymity condition, the generalized graph that maximizes likelihood is the one with each node in a separate partition. Then, as explained above, |W(G)| = 1 and Pr G [G a ] = 1. In general, likelihood is greater with more supernodes because each supernodes introduces more parameters to fit a fixed amount of data. But subject to the minimum size constraint, generalized graphs can vary greatly in their fit to the input graph. GraphGen uses local search to explore the exponential number of generalized graphs.</p><p>The design of the search algorithm is based on techniques for solving a related social network analysis problem: stochastic block-modeling <ref type="bibr" target="#b34">[35]</ref>. The objective of stochastic block-modeling is to cluster the nodes of the graph so that Algorithm 1 GraphGen, an algorithm that generalizes a graph to ensure anonymity. nodes in the same group play a similar "social role" in the graph. While the high-level idea is the same, there are a few key distinctions from our work. First, our differing motivations result in different likelihood functions. In stochastic block-modeling, the goal is to build a predictive model of the data and so the likelihood includes a penalty term for model complexity; in contrast, our goal is to fit the original graph as closely as possible given the anonymity condition. Second, the anonymity condition imposes a new constraint on the search space, which makes search more complex.</p><formula xml:id="formula_25">Input: G a = (V a , E a ),</formula><p>To find the generalized graph that maximizes the likelihood function, GraphGen searches using simulated annealing <ref type="bibr" target="#b39">[40]</ref>. Each valid generalized graph (i.e., those such that each supernode at least k nodes) is a state in the search space. Starting with a generalized graph that has a single partition (i.e., supernode) containing all nodes, GraphGen proposes a change of state by splitting a partition, merging two partitions, or moving a node to a different partition. The proposal of changing the current state from generalized graph G to some new generalized graph G is evaluated based on the change in likelihood that results. The proposal is always accepted if it improves the likelihood and accepted with some probability if it decreases the likelihood. The acceptance probability starts high and is cooled slowly until, as it approaches zero, a move is accepted only if it increases the likelihood. We terminate search when fewer than 0.02% of proposals are accepted.</p><p>GraphGen may return a partitioning that is only locally maximal. Whether this happens depends in part on the cooling schedule of simulated annealing; if cooled slowly enough, it will return the global maximum with high probability <ref type="bibr" target="#b39">[40]</ref>. Nevertheless, finding the globally optimal partition is an intractable problem, and we cannot quantify how close the output is to the optimum. In experimental results not shown, we did a more systematic exploration of the search space using random restarts. On the Enron graph with k = 3, the log-likelihood of the output partition ranged from -362.6 to -353.3; in contrast, a greedy algorithm returns a partition with log-likelihood of only -511.5.</p><p>To make search more efficient, we cache the statistics needed to compute likelihood. We maintain a cache of edge counts d(X, Y ) to facilitate computing the likelihood. Furthermore, when considering a move in search space, it is only necessary to compute the change in likelihood, which is more efficient since a move only affects a subset of terms in the likelihood equation. For example, to split supernode X into X and X , the only affected terms are the ones involving X . There is a term for each neighbor Y of X (i.e., Y such that d(X, Y ) &gt; 0). Since the input graphs are typically sparse, X has few neighbors, resulting in only a small number of affected terms. In the worst-case, computing the change in likelihood requires time that is linear in the size of the input graph.</p><p>We also made a few design choices that make search more efficient. A supernode is split in a greedy fashion: a randomly chosen node is moved from X to a new group X , and then for each of the next k -1 nodes, we select the node that maximizes the likelihood when moved from X to X . Second, when we consider merging two supernodes or moving a node between supernodes, we only consider supernodes X, Y that are neighbors or share a neighbor. This is locally optimal, in that if Y does not satisfy this condition, then merging X and Y can only decrease the likelihood of the current generalized graph. While these choices may exclude the optimal assignment, results indicate that they are effective heuristics: they greatly reduce runtime without any decrease in likelihood.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.4">Capitalizing on limited adversaries</head><p>The GraphGen algorithm places each node in a supernode with at least k-1 other nodes. This is a conservative approach in that it ignores the fact that some nodes may be structurally well hidden in the original graph. Nodes may be automorphically equivalent, or so similar that only an adversary with substantial structural knowledge can distinguish them.</p><p>Such a conservative approach has consequences for utility, as graph structure is coarsened to the supernode level. We would like an approach that can take advantage of situations in which the adversary is known to have limited knowledge of graph structure or where the graphs contain many structurally homogenous nodes.</p><p>We propose an extension of GraphGen that anonymizes the graph with respect to a fixed model of adversary knowledge. The idea is to only anonymize nodes that are vulnerable to re-identification by the given adversary. By focusing the anonymization on the vulnerable nodes, it may be possible to preserve more of the structure of the input graph.</p><p>To incorporate this extension into the algorithm, the first step is to identify the vulnerable nodes. Given adversary model Q and group size k, a node x is vulnerable if |cand Q (x)| &lt; k. For example, if Q is H 1 , then the only nodes that are vulnerable are the ones whose degree occurs less than k times. Then, the privacy condition on the generalized graph is altered so that the only requirement is that if a supernode contains a vulnerable node, then its size must be at least k. This means that an invulnerable node can be placed in a supernode of size 1.</p><p>This relaxed privacy condition can be incorporated into the search procedure by allowing state changes that place invulnerable nodes into supernodes of size less than k. Alternatively, the search can execute as described above, and then supernodes that contain only invulnerable nodes can be replaced with individual supernodes for each invulnerable node. (Supernodes containing a mixture of vulnerable and invulnerable nodes must remain intact to ensure that the vulnerable nodes are protected.) In Sect. 7.4, we evaluate the latter approach for the H 1 and H 2 adversary models and measure the improvement in utility that results. We refer to these variants of the algorithm as GraphGen(H 1 ) and GraphGen(H 2 ) respectively. The pseudocode is shown in Algorithm 2.</p><p>These alternative anonymization algorithms satisfy graph k-anonymity, but for restricted adversaries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Corollary 1</head><p>The output of GraphGen(H 1 ) satisfies graph k-anonymity with respect to H 1 . Similarly, the output of Algorithm 2 GraphGen(Q) a modification of Algorithm 1 that protects against Q adversaries.</p><p>Input: G a = (V a , E a ), graph to generalize k, minimum supernode size Q knowledge query representing adversary capability Output: G, a generalized graph that satisfies graph k-anonymity with respect to Q adversaries. 1:</p><formula xml:id="formula_26">S ← {u ∈ V a | |cand Q (u)| &lt; k} {Vulnerable nodes} 2: G ← GraphGen(G a , k)</formula><p>{Replace supernodes that contain only invulnerable nodes} 3: for supernode X in G do 4: if X ∩ S = ∅ then 5:</p><p>replace X with a supernode for each u ∈ X 6: end if 7: end for 8: return G GraphGen(H 2 ) satisfies graph k-anonymity with respect to H 2 . This follows from Proposition 2: vulnerable nodes remain in groups of size k and are therefore protected, and invulnerable nodes are by definition nodes that the adversary cannot re-identify with confidence greater than 1/k and therefore it is not necessary to generalize them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Evaluating graph anonymization algorithms</head><p>We now present an extensive empirical evaluation of the GraphGen algorithm. We evaluate its utility, compare it to competing techniques, and measure the effectiveness of the utility enhancements proposed in Sect. 6.4.</p><p>The first goal of our experimental evaluation is to assess the overall utility of anonymized graphs. We would like to quantify the extent to which the anonymized graphs produced by GraphGen (and competing techniques) can serve as an accurate approximation of the original private graph. This is challenging because there are no well-defined metrics to determine the similarity of two graphs. As methods for producing anonymized networks emerge, it is becoming increasingly important to develop a reliable means for assessing their utility.</p><p>Our basic approach is to consider a suite of graph properties, measure both the original graph and the anonymized graph and compare the difference. If the anonymized graph differs from the original for some graph property, as it often does, an essential question is whether the difference is substantial. To help answer this question, we include, as a reference point, a random graph of the same size and density as the original graph. With respect to a particular measure, if the original graph looks very different from a random graph, then it is useful to compare the anonymized graph to both the original and the random graph. The more closely the anonymized graph resembles a random graph, the less useful it is.</p><p>With the GraphGen approach, as group size k increases, the anonymized graph converges on a random graph, and we can measure the rate of convergence by varying k. On the other hand, when the original graph and a random graph appear similar, then the measured property does not distinguish the original from a random graph and thus cannot be used to assess whether anonymization has preserved the structure of the original graph.</p><p>As another yardstick for measuring the loss in utility, we evaluate the anonymization algorithms on some carefully chosen combinations of metrics and synthetic graphs. Inspired by research in the networking community <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b44">45]</ref>, we consider a few graphs that have a deliberately engineered structure and then use metrics that capture how well this structure is preserved in the anonymized graph. For instance, we consider a graph that is a tree and measure the extent to which the graph remains tree-like after anonymization. While some of these graphs are unlikely to arise in practice, we find the experiments give useful insights into the effect of anonymization and help distinguish the behavior of competing techniques.</p><p>The second goal of the experimental evaluation is to compare GraphGen against competing techniques. One challenge is that the privacy guarantees are not always compatible and so an "apples to apples" comparison is not straightforward. We attempt to address these disparities in privacy guarantees by aligning our technique with others so that privacy conditions are comparable (Sect. 7.4), and by assessing the extent to which our approach is vulnerable to attacks (Sect. 7.5). Despite the incompatible privacy semantics in some cases, we believe that comparisons of the algorithms are still useful: their strengths and weaknesses are exposed and their tendency to bias graph measures is revealed.</p><p>We note that the goal of publishing an anonymized graph is not only to support the specific graph properties studied here. The hope is that the released dataset can be used for a wide range of investigations determined by graph topology. If measuring a specific graph property is the final objective of an analyst, alternative mechanisms for releasing that property alone should be considered (see discussion of some techniques in Sect. 8). At any rate, many analyses cannot be distilled into simple graph properties, and analysts often require sample datasets to refine their algorithms or interpret results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">Compared anonymization algorithms</head><p>In the first set of experiments, we compare the GraphGen algorithm described in Sect. 6 against two other algorithms for graph anonymization: the algorithm of Cormode et al. <ref type="bibr" target="#b7">[8]</ref>, denoted BCKS, and the algorithm of Liu and Terzi <ref type="bibr" target="#b29">[30]</ref>, denoted LT.</p><p>The BCKS algorithm is similar to GraphGen in that it partitions nodes into supernodes and outputs a generalized graph. However, in addition to preventing re-identification, the resulting generalized graph is also guaranteed to prevent edge disclosure. The privacy condition ensures that each supernode contains at least k nodes and that edge disclosure is bounded by 1/k. This is done by requiring that the supernodes satisfy an additional safety condition, which states that if two nodes share a neighbor, they must be placed in separate supernodes. The GraphGen algorithm may not prevent edge disclosure, especially at small k (see Sect. 7.5).</p><p>Another important difference is that the BCKS algorithm's strategy for choosing supernodes is guided by privacy concerns-partitions are chosen to ensure low edge disclosure risk-whereas the strategy of GraphGen is guided by utility. As one might expect, we find that GraphGen achieves higher utility than BCKS.</p><p>It should also be mentioned that the approaches proposed by Cormode et al. <ref type="bibr" target="#b7">[8]</ref> can handle richer graph data representations, including attributes on nodes and edges and multiple edge types. The focus of the empirical evaluation in <ref type="bibr" target="#b7">[8]</ref> is on queries that involve attributes and short path queries. The focus of our study is to measure the effects of anonymization on graph topology.</p><p>The LT algorithm alters the graph through the insertion and removal of edges with the goal of making nodes more structurally uniform. The output is a single graph, not a generalized graph. The algorithm alters the graph until each node degree occurs at least k times. This prevents re-identification by an adversary whose knowledge is limited to node degree (i.e., an H 1 adversary). It may not protect against a more powerful adversary (e.g., an H 2 adversary). Given the weaker privacy condition, the LT can achieve better utility than BCKS and GraphGen on some measures.</p><p>The LT algorithm anonymizes the graph in a two-stage process. First, it finds the minimum change to the degree sequence such that the privacy condition is satisfied (each degree must appear at least k times), and the degree sequence can be realized (the sequence of integers must satisfy certain graph theoretic constraints). Then, it attempts to transform the original graph into a new graph that matches this degree sequence.</p><p>This second stage is non-trivial and Liu and Terzi <ref type="bibr" target="#b29">[30]</ref> consider several alternative algorithms. We implement and compare against SimultaneousSwap. This algorithm is the only one that allows both edge insertions and deletions, and it appears to perform better than some of the alternative approaches proposed in <ref type="bibr" target="#b29">[30]</ref> that only allow edge insertions. It is a greedy algorithm that starts with a canonical graph conforming to the anonymized degree sequence and rewires it in such a way that preserves its degree sequence but increases the edge overlap with the original graph.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">Overview of experiments</head><p>To assess how anonymization impacts utility, we compare the original graph to the anonymized output based on several important graph properties (described below). For each property, we measure it on the original graph and on the anonymized output. For the algorithms that output a single graph, we simply measure the property on the output graph. For the algorithms that output a generalized graph G, we estimate the graph property by drawing 100 sample graphs from W(G), measuring the property of each sample, and then aggregating measurements across samples. We report the average and show the standard deviation using error bars. The error bars give a sense of how much variation there is among the graphs in W(G).</p><p>If the samples are drawn uniformly from W(G), this models an analyst who believes that each graph in W(G) is equiprobable. In these experiments, we perform biased sampling taking samples uniformly from W(G) subject to the constraint that the minimum degree is one. This makes it more likely that the sampled graph will contain a large connected component. All of the input graphs contain a single connected component, and we assume this fact is revealed to the analyst.</p><p>As a baseline, we also measure the property on a sample of 100 random graphs that are the same density as the original graph. We refer to this baseline as Random. Note this baseline is equivalent to applying a graph generalization algorithm where k = |V |. It has maximum privacy, but low utility, as the only property of the original revealed is the number of nodes and edges.</p><p>We repeat this procedure for each graph and each setting of k ∈ {2, 5, 10, 20}. Note that while k is a common parameter across the algorithms that controls the size of the group, the resulting privacy is not the same: while GraphGen and BCKS ensure graph k-anonymity, LT ensures only graph kanonymity with respect to degree (H 1 ).</p><p>We report results on the datasets that were described earlier in Sect. 3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3">Results</head><p>We now present a comparison of the algorithms across several different graph metrics. Results are presented one metric at a time. We conclude with a general discussion of the findings in Sect. 7.3.5.</p><p>The results of the experiments are shown in Figs. 6, 7, 8. Each figure presents the results for a single graph metric. The value of the metric for the true graph is shown as a dashed 123 Fig. <ref type="figure">6</ref> The effect of anonymization on three graph measures related to paths. The results for three algorithms are compared, with varying privacy parameter k, on seven different graphs. The value of the given measure on the true graph is shown as a black dotted line. The value of the measure for sampled random graphs matching the density of the original is shown as a gray region black line. As a reference point, the light gray region shows the value of the metric for a random graph. It is a region because it depicts a range of ±1 standard deviation around the average value over conforming random graphs. Note that for each measure, the scales of the y-axis vary across datasets, so in some cases, while the gap between lines is large, the numerical difference is quite small.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3.1">Paths</head><p>We consider several measures related to paths.</p><p>Connectedness Each of the anonymization algorithms may alter the connectivity of the graph, either dividing a connected component or merging two components. Each of the input graphs contains a single connected component, so we evaluate whether anonymization divides it. Figure <ref type="figure">6a</ref> shows the results. Generally, the anonymized graphs contain a single large component, encompassing about 95% or more of the nodes. However, on the sparsest graphs-NetTrace, HOT, and Tree-the largest connected component of the anonymized graphs can contain as few as 70% of the nodes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Shortest Path Lengths</head><p>We evaluate how anonymization affects path lengths in the graph. We measure the length of a shortest path between a pair of randomly chosen nodes and compute the average length over 200 random pairs. When the graph contains multiple connected components, we only sample pairs from the largest connected component. Since the measure itself is random, there can be variation due to sampling. We measured this variation and found it small compared to the bias introduced by anonymization. For presentation purposes, we only report the average from a single sample.</p><p>Figure <ref type="figure">6b</ref> shows the results. The effect of anonymization varies greatly across datasets. The greatest change occurs on Mesh where path lengths are dramatically shortened. In fact, for LT and BCKS, path lengths are much closer to those of a random graph than to the original graph. With the GraphGen graphs, while paths are shortened, they remain considerably longer. GraphGen tends to group neighboring nodes together, thus it does not introduce as many shortcut paths that can connect distant regions of the mesh graph.</p><p>The distortion of path lengths on Mesh is perhaps not too surprising. For highly structured graphs such as a mesh or a lattice, even a small amount of perturbation can greatly shorten paths by introducing a few shortcuts paths that can  <ref type="figure">7</ref> The effect of anonymization on four measures related to the degree distribution. Again, the results for three algorithms are compared, with varying privacy parameter k, on seven different graphs. The value of the given measure on the true graph is shown as a black dotted line. The value of the measure for sampled random graphs matching the density of the original is shown as a gray region Fig. <ref type="figure">8</ref> The effect of anonymization on clustering coefficient connect distant regions of the mesh with only a few hops <ref type="bibr" target="#b46">[47]</ref> and meshes <ref type="bibr" target="#b23">[24]</ref>.</p><p>Generally, across all input graphs, the average path lengths of a BCKS graph appears to converge to those of Random as k increases. Convergence sometimes occurs at small k (e.g., Mesh, Enron, HepTh). Convergence occurs whether or not path lengths are shorter or longer in random graphs than with the original.</p><p>LT produces graphs with shorter path lengths than the original graph. It is very accurate on some graphs (NetTrace,</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Power-Law).</head><p>There are no consistent trends for GraphGen. Sometimes paths are shorter, sometimes longer. Increasing k does not have a consistent effect on path lengths. On some graphs, particularly Tree, the path lengths can be considerably longer than on the original graph.</p><p>Tree-like shortest paths We also include a graph theoretic measure called distortion, which in some sense captures how closely a graph resembles a tree <ref type="bibr" target="#b44">[45]</ref>. To compute distortion of G, we first construct a spanning tree T . Then for each edge (u, v) in G, we compute the distance between u and v in T . The distortion is the average distance over all edges in G. Thus, it measures how path lengths of G are distorted (i.e., lengthened) if we are restricted to only traversing edges in tree T . If G is a tree, then distortion is 1. A random graph has a distortion of approximately log n.</p><p>Figure <ref type="figure">6c</ref> shows the distortion of the anonymized graphs. We focus on Tree because the original graph is in fact a tree and so its distortion is 1. Anonymized graphs have a distortion measure exceeding 1, indicating the anonymized graphs are no longer tree-like. Distortion is high for LT and BCKS across all k. In fact, the distortion measure of the anonymized graphs is often closer to a random graph than to the original tree. For GraphGen graphs, while distortion increases with k, it is very low at small k. Thus, it appears as though GraphGen more accurately preserves the tree-like structure of Tree.</p><p>In the other graphs, anonymization tends to produce graphs with higher distortion than the original graph. LT performs comparably to GraphGen, except on Mesh, where the distortion of GraphGen is much lower and closer to the original graph. On HOT, which has low distortion indicating tree-like structure, both GraphGen and LT preserve its treelike structure at small k.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3.2">Degree-related measures</head><p>The degree distribution of a graph is an important property of a graph. We look at several different metrics that capture how anonymization affects degree distributions.</p><p>Mallows distance First, we compare the distributions using Mallows distance, a standard metric for comparing two distributions. Let d = d 1 , . . . , d n be the degree sequence of the original graph G where d i corresponds to the i th largest node degree in G. Let d be the degree sequence of an anonymized graph. Mallows distance (also known as Earth Mover's distance <ref type="bibr" target="#b25">[26]</ref>) is the L p distance between the two sequences</p><formula xml:id="formula_27">Mallows p (d, d ) = 1 n n i=1 d i -d i p 1/ p</formula><p>We use p = 1. Thus, the Mallows distance captures how much, on average, each node degree is altered by anonymization. E.g., a distance of 1 means each node's degree is changed on average by ±1.</p><p>Figure <ref type="figure">7a</ref> shows some trends across datasets and k. Mallows distance tends to increase with k, though sometimes inconsistently for GraphGen. The anonymized graphs tend to have lower Mallows distance than Random, indicating that the degree sequence of the anonymized graph preserves some of the "structure" of the original degree sequence.</p><p>In comparing algorithms, BCKS performs worse than the other approaches, with Mallows distance rapidly approaching that of Random with increasing k. LT almost always has the lowest Mallows distance, which is expected given that the LT algorithm explicitly tries to minimize the change to the degree sequence. On graphs where the original graph has nearly uniform degree-Mesh and Tree-the LT alters the degree sequence only slightly to satisfy its privacy condition, resulting in a Mallows distance of zero or near zero on these graphs. GraphGen is typically between LT and BCKS.</p><p>Maximum degree Figure <ref type="figure">7b</ref> compares the maximum degree of the original graph with the maximum degree in the anonymized graph. The figure shows a clear trend: as k increases, the maximum degree of each anonymized graph converges to the maximum degree of Random. On Mesh and Tree, the max degree is higher in Random and the max degrees of anonymized graphs increase (except for LT which stays constant). For the other graphs, the max degree of Random is lower than that of the original, sometimes much lower. For example, on NetTrace, the maximum degree is 1656 but Random has a max degree of around 10. For all approaches, anonymization reduces the max degree by more than half at k = 5. When the maximum degree is an outlier, such distortion is in some sense inevitable given the privacy condition: each node degree must be homogenous with at least k -1 other node degree. Nevertheless, such a significant change in degree suggests that the graph structure has been significantly altered.</p><p>While all approaches converge to Random, their rates of convergence differ. The max degree of BCKS changes the most rapidly with k. Surprisingly, on the graphs where the maximum degree is larger than that of a random graph, the max degree of GraphGen decreases less rapidly than LT.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Degree variability</head><p>In addition to measuring the maximum degree, we also measure the variation in the degree distribution. The coefficient of variation C V (d) measures the diversity of degree distribution d. It is defined as C V (d) = σ (d)/ d where d is the average degree and σ (d) = n i=1 (d id ) 2 /(n -1). Graphs with homogenous degrees have low C V and graphs with diverse degree sequences, such as power-law graphs, have high C V <ref type="bibr" target="#b1">[2]</ref>.</p><p>Figure <ref type="figure">7c</ref> shows that, like maximum degree, the C V of anonymized graphs converges toward random graphs as k increases, except on Power-Law, where diversity remains high at k = 20. The comparison between algorithms is similar as it is with max degree.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Degree correlations</head><p>We also measure degree correlations-i.e., the correlation between a node's degree and the degrees of its neighbors. It is an important property that influences processes on networks <ref type="bibr" target="#b10">[11]</ref>. We measure correlations using the s metric. For graph G = (V, E) it is defined as</p><formula xml:id="formula_28">s(G) = (u,v)∈E d(u)d(v)</formula><p>where d(u) is the degree of node u. A high s(G) indicates that high degree nodes are connected to one another. We report a normalized s measure s(G)/s max (G) where s max (G) is the maximum possible s of any graph with the same degree sequence as G. (In practice, it is computationally intensive to find the true maximum, so we approximate it with the Havel-Hakimi graph <ref type="bibr" target="#b5">[6]</ref>, which is efficient to construct and tends to have very high s.)</p><p>This measure is particularly interesting on the HOT graph. The HOT graph is explicitly engineered so that high degree nodes are at the periphery of the graph connected to low degree nodes, resulting in a low s(G) measure. In contrast, in a random graph, high degree nodes are likely to be connected to each other, resulting in a high s measure <ref type="bibr" target="#b1">[2]</ref>.</p><p>Figure <ref type="figure">7d</ref> shows that in the anonymized version of HOT, increasing k results in an increased s measure. GraphGen preserves the low s measure better than LT and substantially better than BCKS. On the other graphs, the performance varies considerably, with correlations sometimes tending to Random (e.g., HepTh), sometimes diverging from it (e.g., NetTrace), and sometimes remaining constant (e.g., Tree).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3.3">Clustering</head><p>Clustering coefficient measures the likelihood that two neighbors of a node are themselves connected (in a social network, whether a friend of a friend is also a friend). It is defined as</p><formula xml:id="formula_29">C(G) = 1 n u (u) (d(u)(d(u)-1))/2</formula><p>where (u) is the number of triangles (cliques of size 3) containing u and d(u) is the degree of u.</p><p>We report on graphs that have substantial clustering (C(G) &gt; 0.15). For the graphs where clustering coefficient is low, the anonymization tends to preserve the low clustering coefficient (they never exceeded 0.15). The graphs with high clustering include Enron and HepTh. We also include a synthetic graph, Clustered Power-Law, which is similar to Power-Law except that the random graph generation process is biased to introduce triangles <ref type="bibr" target="#b21">[22]</ref>. We set the probability of triangle formation to be 0.4. Figure <ref type="figure">8</ref> shows how anonymization reduces the clustering coefficient of clustered graphs. Even at k = 2, the BCKS has substantially lower clustering coefficient than the original graph. At larger k, all anonymized graphs have substantially reduced clustering. At small k, GraphGen preserves the greatest amount of clustering.</p><p>With GraphGen, it is difficult to preserve clustering coefficient, especially at large k. The process of randomly sampling from W(G) tends to destroy clustering coefficient. The sampled structure within each supernode is simply a random graph with a density determined by the weight of the supernode's self edge. Unless they are very dense, random graphs have low clustering coefficient. Real-world graphs are typically very sparse, and so as k increases the density within a supernode decreases.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3.4">Runtime</head><p>We also measure the runtime of the different algorithms. We report results on one of the largest graphs, NetTrace; runtimes on the other graphs are qualitatively similar. While GraphGen is considerably slower than the alternative algorithms, runtime is a secondary concern as the algorithms are run "offline" by the data owner.</p><p>Table <ref type="table" target="#tab_5">2</ref> shows that the runtime of BCKS does not depend on group size, agreeing with previous theoretical analysis <ref type="bibr" target="#b7">[8]</ref>. The runtime of the LT algorithm varies across k: its runtime is dominated by the graph construction process, which depends on the number of rewiring iterations, something that varies considerably depending on the particular instance, leading to variation in runtime. Finally, the runtime of GraphGen appears to decrease with k. This is due to the fact that when groups are large, the supergraph is comparably more sparse. Therefore, the number of the successors (see Algorithm 1) is smaller, and so each step in the search runs faster.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3.5">Discussion</head><p>The experiments give insight into how the topological properties of graphs are affected by anonymization. Path lengths tend to more closely resemble path lengths in a random graph, whether they are shorter or longer than the original graph.</p><p>Highly variable degree distributions (as occurs in power-law graphs) tend to become more uniform and high degree nodes have their degrees reduced. In graphs that are highly clustered, the effect of anonymization is to substantially reduce the clustering coefficient. However, the results also show that it is possible to provide privacy and still preserve some aspects of the original graph.</p><p>For graphs with a deliberately engineered structure (such as Mesh, Tree, and also HOT), anonymization can introduce significant distortion. The GraphGen algorithm, because it explicitly accounts for structure in its anonymization, preserves these qualities relatively well. For example, paths remain long in Mesh, Tree remains tree-like, and degree correlation of HOT remains low.</p><p>In terms of comparing the different algorithms, we find that LT and GraphGen perform consistently better than BCKS. While LT clearly has an advantage over GraphGen on some metrics, the performance of GraphGen is often comparable and sometimes better than the performance of LT. In the next section, we resolve the difference in the privacy standards between these algorithms and present an more applesto-apples comparison.</p><p>Recall that the error bars around the measures for Graph-Gen and BCKS measure the variability across samples from the W(G). Since the original graph G is a member of W(G), one might expect that the error bars would overlap the measure recorded on G. This does not always occur, suggesting that while G is a possible world that is consistent with G, it is unlikely to be sampled by chance. It may be possible to bias the sampling to make G more likely, but it is not clear how this impacts privacy.</p><p>As mentioned earlier, the GraphGen and BCKS approaches differ in how the generalized graph is constructed; in GraphGen it is guided by utility concerns and in BCKS it is guided by privacy concerns. The edge safety condition of BCKS requires two neighbors of a node to be placed into separate supernodes. However, GraphGen often places a node's neighbors together and it appears to lead to better utility. It may be that the edge safety condition, while it ensures that the output does not allow edge disclosures, may conflict with some of the utility metrics considered here.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.4">Utility of enhanced graph generalization algorithm</head><p>In this section, we evaluate the proposed enhancements to GraphGen described in Sect. 6.4. By focusing the anonymization only on the nodes that are vulnerable to re-identification, we hypothesize that we can improve the utility of GraphGen, which conservatively generalizes all nodes. We compare GraphGen against two alternatives: GraphGen(H 1 ) which guards against H 1 adversaries, and GraphGen(H 2 ) which protects against the stronger H 2 adversary. Since GraphGen(H 1 ) provides the same privacy guarantee as LT, we also include a direct comparison of those approaches.</p><p>Based on our earlier assessment in Sect. 3, we expect that GraphGen(H 1 ) will alter the input graph much less than GraphGen, as most nodes are naturally well hidden against an H 1 adversary. For GraphGen(H 2 ), it will depend on the dataset. Many nodes are vulnerable in HepTh and almost all nodes are vulnerable in Enron and Power-Law, so we may not expect much improvement on those datasets. For the other datasets, many nodes are well hidden at H 2 and so GraphGen(H 2 ) may generalize these graphs much less than GraphGen.</p><p>We summarize the performance difference between GraphGen and its variants using a suitably normalized measure of each of the properties described in Sect. 7.3. We normalize each measure in terms of the distance between GraphGen and the original graph G. Let P denote a graph property and P(g) denote the evaluation of P on graph g. The normalized score of anonymized graph A is defined as</p><formula xml:id="formula_30">|P(A)-P(G)| |P(GraphGen)-P(G)| .</formula><p>A score of less than 1 indicates that algorithm A preserves the property more accurately than Graph-Gen.</p><p>Since GraphGen(H 1 ) and GraphGen(H 2 ) guard against weaker adversaries than GraphGen, the expectation is that the normalized score will be closer to zero, indicating closer agreement with the original graph.</p><p>Table <ref type="table" target="#tab_6">3</ref> shows the results for GraphGen(H 1 ). The results show in general that by targeting the anonymization to protect against H 1 adversaries, it is possible to improve utility. The magnitude of the improvement is not consistent across datasets, with datasets such Tree and Mesh seeing large gains and Enron seeing relatively small gains. Sometimes utility degrades (a normalized score exceeding one). Generally this is when the original GraphGen algorithm is a very accurate approximation of the original graph (e.g., distortion on Mesh), so the denominator of the normalized measure is small. Table <ref type="table" target="#tab_7">4</ref> shows that utility improves with GraphGen(H 2 ), but the improvement is much less than with GraphGen(H 1 ).</p><p>Comparison between GraphGen(H 1 ) and LT While the utility of LT was compared against BCKS and GraphGen in Sect. 7.3, these algorithms are not directly comparable in terms of their privacy guarantees because LT places restrictions on the adversary's knowledge. However, we can directly compare LT with GraphGen(H 1 ) because they both provide equal privacy protection.</p><p>Table <ref type="table">5</ref> compares LT and GraphGen(H 1 ) using a measure which is normalized to LT. Thus a score less than 1 indicates that GraphGen(H 1 ) more accurately approximates the original graph, and a score exceeding 1 indicates that LT is more accurate. (A dash indicates that LT matches the original, so the normalized score is undefined; and a 0* indicates that both LT and GraphGen(H 1 ) perfectly match the original.) The results suggest that the approaches perform somewhat comparably. There is only one measure (distortion) in which one algorithm is consistently more accurate across the datasets, and there is no dataset where one algorithm is consistently more accurate.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.5">Assessing edge disclosure in generalized graphs</head><p>Recall our assessment (Sect. 3.2) of edge disclosure under naive anonymization, which showed that it is possible for a knowledgeable adversary to accurately determine whether two nodes are connected. We revisit edge disclosure here, measuring the extent to which graph generalization reduces the risk of edge disclosure.</p><p>While graph generalization prevents re-identification (Sect. 6.2), edge disclosure may still be possible. For example, if an adversary can determine which supernode contains Alice and which supernode contains Bob he can estimate the likelihood of an edge between Alice and Bob based on the weight of the superedge between their respective supernodes. The weight reveals the number of edges in the original graph between the nodes in Alice's supernode and the nodes in Bob's supernode. A higher weight increases the likelihood they are connected.</p><p>To assess the risk of edge disclosure, we conservatively assume that the adversary can successfully identify the supernode of each target node. In practice, we expect that this will be difficult for an adversary with limited knowledge, so our results may exaggerate the risk. Given two target nodes u and v in G, the adversary computes the likelihood of edge between u and v by first identifying their supernodes in G, denoted X and Y respectively, and then observing the superedge weight, d(X, Y ). The likelihood of edge (u, v) is d(X, Y )/|X ||Y | or, in the case when X = Yi.e., the targets share a supernode-the edge likelihood is 2d(X, X )/|X |(|X | -1).</p><p>Our experiment is as follows. Given a graph G and a setting of k, we produce a generalized graph G k and measure its edge disclosure risk. For each edge in the original graph G, we measure its likelihood given G k . Each edge likelihood is a number in [0, 1] which we discretize into five categories from "low" ( ∈ [0, 0.10)) to "high" ( = 1.0). We report the percentage of edges in each category. This is similar to the experiments in Sect. 3.2 except rather than vary adversary knowledge, we assume a powerful adversary who knows the mapping of nodes to supernodes.</p><p>Figure <ref type="figure" target="#fig_5">9</ref> shows the results across several input graphs and settings of k. (Note the grayscale used here differs from the one used in Figure <ref type="figure">4</ref>.) The results show that when k = 2, some edges are disclosed in all datasets. This is not surprising because at k = 2, whenever two neighbors are placed into the same supernode, the edge between them is disclosed-the weight of the self-superedge is either 1 (if they are connected) or 0 (if they are not).</p><p>At k = 5, a small portion of edges is disclosed in two graphs, HepTh (2.1%) and Enron (6.9%), but for the other graphs no edges are disclosed. Overall, edge disclosure diminishes rapidly with increasing k. By k = 20, edge likelihoods are less than half across all graphs.</p><p>The experiments show that for reasonable settings of k, the process of graph generalization greatly reduces the threat of edge disclosure. Our assessment is conservative and may overstate the threat. To prevent disclosure even at small k, one must explicitly place neighboring nodes in separate supernodes. This is done in the BCKS algorithm, which uses a safety condition to ensure that superedge weights are bounded by 1/k. However, this additional safety condition has considerable cost in utility as shown in Sect. 7.3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Related work</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.1">Attacks</head><p>Backstrom et al. <ref type="bibr" target="#b3">[4]</ref> were the first to propose an attack on anonymized networks, demonstrating that naive anonymization does not ensure privacy. Their main result concerns an active attack, where the adversary is capable of adding nodes and edges prior to anonymization. The attack re-identifies an arbitrary set of targets by inserting a random subgraph that will be unique with high probability (independent of the input graph) and then connecting the subgraph to the targets.</p><p>Passive attacks-where the adversary attacks an already published network-have been more extensively studied. We first introduced the passive attack based on H i degree signatures in Hay et al. <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b19">20]</ref>. We also studied adversaries with knowledge of partial subgraph patterns around a target, and knowledge of connections to hubs in the network. Narayanan and Shmatikov <ref type="bibr" target="#b33">[34]</ref> propose a passive attack in which the adversary exploits access to an auxiliary network whose membership overlaps with the anonymized network. Such an attack can lead to breaches of privacy if for instance the anonymized network includes sensitive attributes or additional edges absent from the auxiliary network.</p><p>Singh and Zhan <ref type="bibr" target="#b42">[43]</ref> measure the vulnerability to attack as a function of well known topological properties of the graph, and Wang et al. <ref type="bibr" target="#b45">[46]</ref> propose a measure of anonymity based on description logic.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.2">Network anonymization algorithms</head><p>In <ref type="bibr" target="#b19">[20]</ref>, we proposed an anonymization technique for graphs, a technique based on random edge deletions and insertions, which resisted attacks of an H 1 adversary, but at a significant cost in graph utility <ref type="bibr" target="#b19">[20]</ref>. Edge randomization is further explored by Ying and Wu <ref type="bibr" target="#b49">[50]</ref> who propose randomization strategy that biases the randomization to preserve key spectral properties of the graph. This improves utility, but they do not evaluate the impact that biasing the randomization has on privacy.</p><p>Liu and Terzi <ref type="bibr" target="#b29">[30]</ref> propose several algorithms for anonymizing a graph through the insertion and removal of edges, altering the graph so that nodes cannot be distinguished by degree. We compare against their SimultaneousSwap algorithm in Sect. 7.</p><p>Zhou and Pei <ref type="bibr" target="#b51">[52]</ref> present an anonymization algorithm for graphs that allows for labels on the nodes. They consider an adversary who knows the local neighborhood of a target (the induced subgraph of the target and its neighbors) and anonymize the graph by generalizing node labels and inserting edges until each neighborhood is isomorphic to at least k -1 others. Zou et al. <ref type="bibr" target="#b52">[53]</ref> consider a similar approach, except require each node to be automorphically equivalent with k -1 others.</p><p>In their initial work on graph anonymization, Cormode et al. <ref type="bibr" target="#b8">[9]</ref> consider bipartite graph data-representing, for example, associations between people and products they purchase-and propose an anonymization algorithm that breaks the association between identifying attributes and nodes in the graph. The main threat considered is an adversary with knowledge of node attributes, and so the anonymization leaves the structure of the graph intact. This approach is extended in <ref type="bibr" target="#b7">[8]</ref> to handle a richer class of data, such as social networks with multiple edge types and attributes on nodes and edges. They also consider an approach which protects against an adversary with knowledge of graph structure. They propose a partitioning based approach that we compare against in Sect. 7.</p><p>Zheleva et al. <ref type="bibr" target="#b50">[51]</ref> consider graphs with labeled edges and an adversary with a predictive model for edges and knowledge of constraints on connections in the graph; the goal of anonymization is to prevent accurate prediction of a class of sensitive edges. The data model, threats considered, and adversary capabilities differ significantly from those treated here.</p><p>Rastogi et al. <ref type="bibr" target="#b38">[39]</ref> present a mechanism for tables that has a natural interpretation for graphs. They randomly remove a fraction of original edges and randomly add a fraction of new edges. The resulting table is released in its entirety. They show that the parameters of the random process can be chosen to ensure strong protection against edge disclosure while allowing a class of counting queries to estimated accurately. Unfortunately it does not address queries that require joins on the edge table, which are crucial to network analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.3">Query answering approaches</head><p>Dwork et al. <ref type="bibr" target="#b12">[13]</ref> introduce a strong notion of privacy called differential privacy and present an interactive algorithmwhere users pose queries and the data owner returns randomly perturbed answers-that achieves strong privacy guarantees and can guarantee high utility for some queries. Differential privacy has been an area of active research (for a survey, see Dwork <ref type="bibr" target="#b11">[12]</ref>). The privacy definition extends naturally to data publication, but most work considers interactive approaches. Some work has considered how differential privacy can be applied to network data <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b17">18,</ref><ref type="bibr" target="#b35">36,</ref><ref type="bibr" target="#b37">38]</ref>. The proper interpretation of differential privacy for networks is not immediate, as the sensitive entity could be considered an edge, a set of edges, or a node along with its edges <ref type="bibr" target="#b17">[18]</ref>.</p><p>Under node-differential privacy, a node and all of its incident edges are protected; however, with such a rigorous privacy standard, basic network properties such as degree distribution cannot be accurately estimated. Under edge-differential privacy, which prevents the disclosure of individual edges, the degree distribution <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b20">21]</ref> and other network analyses have low sensitivity and can be answered accurately <ref type="bibr" target="#b12">[13]</ref>.</p><p>However, even under edge-differential privacy, some common network analyses have high sensitivity and cannot be answered accurately. For example, measures of transitivity have O(n) sensitivity, rendering noisy estimates useless. Nissim et al. <ref type="bibr" target="#b35">[36]</ref> propose a relaxation of differential privacy and provide algorithms for query answering where the amount of noise depends on the particular input database. Among other application, this technique can be used to accurately estimate transitivity on some graphs. Rastogi et al. <ref type="bibr" target="#b37">[38]</ref> propose an alternative weakening of differential privacy for queries involving joins on a relationship table, allowing transitivity to be estimated accurately along with a more general class of subgraph counting queries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.4">Other graph privacy work</head><p>The anonymization of existing networks is not the only privacy problem that arises with network data. Frikken and Golle <ref type="bibr" target="#b15">[16]</ref> designed a protocol for privately assembling a graph that is distributed among a large number of parties. The output of the protocol is a naively anonymized graph. Korolova et al. <ref type="bibr" target="#b24">[25]</ref> consider an adversary who tries to reassemble the graph from a set of views of local neighborhoods (obtained, for example, by breaking into user accounts of an online social network).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Conclusion</head><p>We have focused on what we believe to be one of the most basic and distinctive challenges for protecting privacy in network datasets-understanding the extent to which graph structure acts as an identifier. We have formalized adversary knowledge and evaluated their impact on real and synthetic networks as well as models of random graphs. We proposed anonymizing a graph by generalizing it: partitioning the nodes and summarizing the graph at the partition level. We show that a wide range of important graph analyses can be performed accurately on the generalized graphs published. An important area for future investigation is to develop bounds on the distortion introduced by anonymization. Analytical bounds could be developed through analysis of the generalized graphs, or empirical bounds could inferred through careful sampling of the possible worlds implied by the generalized graphs. We also hope to investigate techniques that will safely permit the analyst to sample higher quality representatives from the set of possible worlds, for example, by biasing sampling toward the true graph.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>8 Fig. 1 A</head><label>81</label><figDesc>Fig.1A social network represented as a graph (left), the naive anonymization (center), and the anonymization mapping (right)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>Pr[ (x) = y|G] = Pr[ (x) = y |G] for any two nodes y and y that are in the same supernode of G. Since there are at least k nodes in each supernode, this implies Pr[ (x) = y|G] ≤ 1/k for any y. Since the conditional probability Pr[ (x) = y|G] = Pr[ (x) = y, G]/Pr[G] and the denominator does not depend on y, it suffices to show that Pr[ (x) = y, G] = Pr[ (x) = y , G].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>Fig.<ref type="bibr" target="#b6">7</ref> The effect of anonymization on four measures related to the degree distribution. Again, the results for three algorithms are compared, with varying privacy parameter k, on seven different graphs. The</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 9</head><label>9</label><figDesc>Fig.<ref type="bibr" target="#b8">9</ref> Risk of edge disclosure in generalized graphs across different datasets and settings of k</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>A sample graph, b external information consisting of structural signatures H 0 , H 1 and H 2 computed for each individual in the graph, c the equivalence classes of nodes implied by the structural signatures. For the sample data, ≡ H2 , corresponds to automorphic equivalence, ≡ A and thus the H i signature is a more conservative model. The H i signatures have the advantage that they are efficient to evaluate, whereas measuring subgraph knowledge requires checking for subgraph isomorphisms, an NP-Hard problem.</figDesc><table><row><cell>(a)</cell><cell>(b)</cell><cell>(c)</cell></row><row><cell>Fig. 2 a</cell><cell></cell><cell></cell></row><row><cell>123</cell><cell></cell><cell></cell></row></table><note><p><p>Thus, the H i signature can be viewed as an efficient way to calculate a lower bound on the risk of the subgraph adversary. In Sect. 2.5, we discuss prior work, including our own, that has considered models based on knowledge of subgraphs surrounding the target.</p>For each query H i , we define an equivalence relation on nodes in the graph in the natural way. Definition 3 (Relative equivalence) Two nodes x, y in a graph are equivalent relative to H i , denoted x ≡ H i y, if and only if H</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1</head><label>1</label><figDesc>Descriptive statistics for the real and synthetic graphs studied</figDesc><table><row><cell>Statistic</cell><cell>Real datasets</cell><cell></cell><cell></cell><cell cols="2">Synthetic datasets</cell><cell></cell><cell></cell></row><row><cell></cell><cell>HepTh</cell><cell>Enron</cell><cell>NetTrace</cell><cell>HOT</cell><cell>Power-Law</cell><cell>Tree</cell><cell>Mesh</cell></row><row><cell>Nodes</cell><cell>2510</cell><cell>111</cell><cell>4213</cell><cell>939</cell><cell>2500</cell><cell>3280</cell><cell>2500</cell></row><row><cell>Edges</cell><cell>4737</cell><cell>287</cell><cell>5507</cell><cell>988</cell><cell>7453</cell><cell>3279</cell><cell>4900</cell></row><row><cell>Minimum degree</cell><cell>1</cell><cell>1</cell><cell>1</cell><cell>1</cell><cell>2</cell><cell>1</cell><cell>2</cell></row><row><cell>Maximum degree</cell><cell>36</cell><cell>20</cell><cell>1656</cell><cell>91</cell><cell>166</cell><cell>4</cell><cell>4</cell></row><row><cell>Median degree</cell><cell>2</cell><cell>5</cell><cell>1</cell><cell>1</cell><cell>4</cell><cell>1</cell><cell>4</cell></row><row><cell>Average degree</cell><cell>3.77</cell><cell>5.17</cell><cell>2.61</cell><cell>2.10</cell><cell>5.96</cell><cell>1.99</cell><cell>3.92</cell></row><row><cell>Edge density</cell><cell>0.0007</cell><cell>0.0235</cell><cell>0.0003</cell><cell>0.0022</cell><cell>0.0024</cell><cell>0.0006</cell><cell>0.0016</cell></row><row><cell>Avg. cand. set size (H 1 )</cell><cell>558.5</cell><cell>12.0</cell><cell>2792.1</cell><cell>635.5</cell><cell>549.7</cell><cell>1821.8</cell><cell>2138.1</cell></row><row><cell>Avg. cand. set size (H 2 )</cell><cell>25.4</cell><cell>1.5</cell><cell>608.6</cell><cell>81.1</cell><cell>1.4</cell><cell>1659.8</cell><cell>1818.1</cell></row><row><cell>Percent re-identified (H 1 )</cell><cell>0.2</cell><cell>2.7</cell><cell>0.5</cell><cell>0.9</cell><cell>0.9</cell><cell>&lt; 0.1</cell><cell>&lt; 0.1</cell></row><row><cell>Percent re-identified (H 2 )</cell><cell>40.4</cell><cell>73.9</cell><cell>11.1</cell><cell>5.9</cell><cell>82.5</cell><cell>&lt; 0.1</cell><cell>&lt; 0.1</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head></head><label></label><figDesc>Recall from Sect. 2.4 that nodes contained in the same candidate set for knowledge H i share the same value for H i , are indistinguishable according to H i and are therefore protected if the candidate set size is sufficiently large.</figDesc><table><row><cell>, [21, ∞]</cell></row><row><cell>(white)</cell></row><row><cell>component in the graph. Detailed statistics for the datasets</cell></row><row><cell>are shown in Table 1.</cell></row><row><cell>3.1 Node re-identification</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head></head><label></label><figDesc>graph to generalize k, minimum supernode size Output: G, a generalized graph such that each supernode contains at least k nodes 1: G ← Initialize(G a ) {All nodes in one partition.} 2: t cycle ← 5|V a |</figDesc><table><row><cell cols="2">3: for t ← 1 to ∞ do</cell></row><row><cell cols="3">4: T ← Schedule(t) {Temperature T cools as t increases.}</cell></row><row><cell cols="3">5: S ← Successors(G, k)</cell></row><row><cell cols="2">6: G ← arg max G ∈S</cell><cell>1 |W(G )| {Find max likelihood successor}</cell></row><row><cell cols="3">7: 8: if L &gt; 0 then L ← 1 |W(G )| -1 |W(G)| {Change in likelihood}</cell></row><row><cell>9:</cell><cell>G ← G</cell></row><row><cell cols="2">10: else</cell></row><row><cell>11:</cell><cell cols="2">G ← G with probability e L/T</cell></row><row><cell cols="2">12: end if</cell></row><row><cell cols="3">13: if G updated less than 0.02% of last t cycle steps then</cell></row><row><cell>14:</cell><cell>return G</cell></row><row><cell cols="2">15: end if</cell></row><row><cell cols="2">16: end for</cell></row><row><cell cols="3">Successors subroutine returns a set of generalized graphs that can be</cell></row><row><cell cols="3">derived from G by making a small change, such as splitting or merging</cell></row><row><cell cols="2">a supernode in G.</cell></row><row><cell cols="3">Input: G, current generalized graph</cell></row><row><cell></cell><cell cols="2">k, minimum supernode size</cell></row><row><cell cols="3">Output: a set of generalized graphs, the successors to G</cell></row><row><cell cols="3">1: S ← ∅ {The set of successors}</cell></row><row><cell cols="3">2: u ← Choose random node</cell></row><row><cell cols="3">3: X ← Find supernode that contains u</cell></row><row><cell cols="2">4: if |X | &gt; 2k then</cell></row><row><cell cols="3">5: G ← Split(X, G) {Choose greedy split of X }</cell></row><row><cell cols="2">6: S ← S ∪ {G }</cell></row><row><cell cols="2">7: end if</cell></row><row><cell cols="3">8: for Y such that X, Y are neighbors or share a neighbor do</cell></row><row><cell cols="2">9: if |X | &gt; k then</cell></row><row><cell>10:</cell><cell cols="2">G ← MoveNode(u, X, Y, G)</cell></row><row><cell>11:</cell><cell>S ← S ∪ {G }</cell></row><row><cell cols="2">12: end if</cell></row><row><cell cols="3">13: G ← MergeAndSplit(X, Y, G)</cell></row><row><cell cols="2">14: S ← S ∪ {G }</cell></row><row><cell cols="2">15: end for</cell></row><row><cell cols="2">16: return S</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 2</head><label>2</label><figDesc>On NetTrace, a comparison of runtimes (s)</figDesc><table><row><cell>Algorithm</cell><cell>k = 2</cell><cell>k = 5</cell><cell>k = 10</cell><cell>k = 20</cell></row><row><cell>BCKS</cell><cell>0.2</cell><cell>0.3</cell><cell>0.2</cell><cell>0.2</cell></row><row><cell>LT</cell><cell>43.4</cell><cell>29.6</cell><cell>74.2</cell><cell>52.7</cell></row><row><cell>GraphGen</cell><cell>3628.8</cell><cell>3171.9</cell><cell>15311.1</cell><cell>1560.1</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>Table 3</head><label>3</label><figDesc>A comparison of utility of GraphGen(H 1 ) and GraphGen at k = 10</figDesc><table><row><cell>Statistic</cell><cell>HepTh</cell><cell>Enron</cell><cell>NetTrace</cell><cell>HOT</cell><cell>Power-Law</cell><cell>Tree</cell><cell>Mesh</cell></row><row><cell>Size of giant component</cell><cell>0.014</cell><cell>0.348</cell><cell>0.19</cell><cell>0.695</cell><cell>0</cell><cell>0.333</cell><cell>0.086</cell></row><row><cell>Average path lengths</cell><cell>1.369</cell><cell>6.174</cell><cell>1.016</cell><cell>0.919</cell><cell>0.002</cell><cell>0.431</cell><cell>0.046</cell></row><row><cell>Distortion</cell><cell>0.648</cell><cell>0.973</cell><cell>0.972</cell><cell>0.624</cell><cell>0.665</cell><cell>0.006</cell><cell>0.483</cell></row><row><cell>Mallows distance</cell><cell>0.54</cell><cell>0.959</cell><cell>0.946</cell><cell>0.653</cell><cell>0.256</cell><cell>0.005</cell><cell>0.009</cell></row><row><cell>Maximum degree</cell><cell>1.023</cell><cell>0.982</cell><cell>1.001</cell><cell>0.994</cell><cell>0.997</cell><cell>0.349</cell><cell>0.398</cell></row><row><cell>Degree diversity</cell><cell>0.584</cell><cell>1.015</cell><cell>1</cell><cell>0.95</cell><cell>0.911</cell><cell>0.006</cell><cell>0.034</cell></row><row><cell>Degree correlation</cell><cell>0.712</cell><cell>0.972</cell><cell>1.039</cell><cell>1.013</cell><cell>0.403</cell><cell>0.065</cell><cell>0.015</cell></row><row><cell>Clustering coefficient</cell><cell>0.508</cell><cell>0.869</cell><cell>0.223</cell><cell>0.318</cell><cell>0.954</cell><cell>0.002</cell><cell>0.023</cell></row><row><cell cols="6">Numbers are normalized scores where less than 1 indicates GraphGen(H 1 ) is more accurate than GraphGen</cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Table 4</head><label>4</label><figDesc>A comparison of utility of GraphGen(H 2 ) and GraphGen at k = 10 Numbers are normalized scores where a number less than 1 indicates GraphGen(H 1 ) is more accurate than LT. (A dash indicates that LT perfectly matched the original, so the normalized score is undefined. A 0* indicates that both LT and GraphGen(H 1 ) perfectly matched the original)</figDesc><table><row><cell>Statistic</cell><cell>HepTh</cell><cell>Enron</cell><cell>NetTrace</cell><cell>HOT</cell><cell>Power-Law</cell><cell>Tree</cell><cell>Mesh</cell></row><row><cell>Size of giant component</cell><cell>0.921</cell><cell>1.03</cell><cell>0.926</cell><cell>0.923</cell><cell>1.079</cell><cell>0.772</cell><cell>0.086</cell></row><row><cell>Average path lengths</cell><cell>0.947</cell><cell>0.793</cell><cell>1.031</cell><cell>0.818</cell><cell>1.098</cell><cell>0.671</cell><cell>0.046</cell></row><row><cell>Distortion</cell><cell>0.964</cell><cell>1.31</cell><cell>1.02</cell><cell>0.822</cell><cell>1.24</cell><cell>0.018</cell><cell>0.483</cell></row><row><cell>Mallows distance</cell><cell>0.996</cell><cell>1.005</cell><cell>0.996</cell><cell>0.841</cell><cell>0.998</cell><cell>0.014</cell><cell>0.009</cell></row><row><cell>Maximum degree</cell><cell>1.018</cell><cell>0.998</cell><cell>0.999</cell><cell>0.983</cell><cell>1.004</cell><cell>0.481</cell><cell>0.398</cell></row><row><cell>Degree diversity</cell><cell>0.997</cell><cell>0.999</cell><cell>1</cell><cell>0.973</cell><cell>1.002</cell><cell>0.004</cell><cell>0.034</cell></row><row><cell>Degree correlation</cell><cell>1.004</cell><cell>1.018</cell><cell>1.002</cell><cell>1.013</cell><cell>0.97</cell><cell>0.075</cell><cell>0.015</cell></row><row><cell>Clustering coefficient</cell><cell>0.995</cell><cell>1.009</cell><cell>0.93</cell><cell>0.643</cell><cell>0.926</cell><cell>0.006</cell><cell>0.023</cell></row><row><cell>Statistic</cell><cell>HepTh</cell><cell>Enron</cell><cell>NetTrace</cell><cell>HOT</cell><cell>Power-Law</cell><cell>Tree</cell><cell>Mesh</cell></row><row><cell>Size of giant component</cell><cell>0.003</cell><cell>-</cell><cell>0.007</cell><cell>1.195</cell><cell>0*</cell><cell>0.423</cell><cell>0*</cell></row><row><cell>Average path lengths</cell><cell>0.242</cell><cell>0.151</cell><cell>1.484</cell><cell>0.296</cell><cell>0.016</cell><cell>3.438</cell><cell>0.032</cell></row><row><cell>Distortion</cell><cell>0.473</cell><cell>0.55</cell><cell>1.425</cell><cell>0.661</cell><cell>0.84</cell><cell>0.002</cell><cell>0.039</cell></row><row><cell>Mallows distance</cell><cell>9.555</cell><cell>0.872</cell><cell>0.958</cell><cell>0.934</cell><cell>1.323</cell><cell>0.643</cell><cell>3.465</cell></row><row><cell>Maximum degree</cell><cell>1.48</cell><cell>0.92</cell><cell>0.937</cell><cell>0.775</cell><cell>0.807</cell><cell>-</cell><cell>-</cell></row><row><cell>Degree diversity</cell><cell>46.66</cell><cell>8.311</cell><cell>0.928</cell><cell>1.016</cell><cell>1.482</cell><cell>0.273</cell><cell>8.151</cell></row><row><cell>Degree correlation</cell><cell>2.483</cell><cell>12.204</cell><cell>0.71</cell><cell>0.112</cell><cell>0.803</cell><cell>0.051</cell><cell>0.871</cell></row><row><cell>Clustering coefficient</cell><cell>0.492</cell><cell>1.025</cell><cell>0.002</cell><cell>1.684</cell><cell>0.579</cell><cell>0.138</cell><cell>0.556</cell></row></table><note><p>Numbers are normalized scores where a number less than 1 indicates GraphGen(H 2 ) is more accurate than GraphGen Table 5 A comparison of utility of GraphGen(H 1 ) and LT at k = 10</p></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>We do not suggest these categories as a universal privacy standard, but merely as divisions that focus attention on the most important part of the candidate set distribution where serious disclosures are at risk.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>Hay and Jensen were supported by the Air Force Research Laboratory and the Intelligence Advanced Research Projects Activity, under agreement number FA8750-07-2-0158. Hay, Miklau, Li, and Towsley were supported by NSF CNS 0627642. The U.S. Government is authorized to reproduce and distribute reprints for Governmental purposes notwithstanding any copyright notation thereon. The views and conclusion contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of the Air Force Research Laboratory and the Intelligence Advanced Research Projects Activity, or the U.S. Government.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A random graph model for massive graphs</title>
		<author>
			<persName><forename type="first">W</forename><surname>Aiello</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">R K</forename><surname>Chung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Lu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Thirty-second Annual ACM Symposium on Theory of Computing</title>
		<meeting>the Thirty-second Annual ACM Symposium on Theory of Computing<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="171" to="180" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Diversity of graphs with highly variable connectivity</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">L</forename><surname>Alderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Phys. Rev. E</title>
		<imprint>
			<biblScope unit="volume">75</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page">46102</biblScope>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Canonical labelling of graphs in linear average time</title>
		<author>
			<persName><forename type="first">L</forename><surname>Babai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Kucera</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twentieth Annual Symposium on Foundations of Computer Science</title>
		<meeting>the Twentieth Annual Symposium on Foundations of Computer Science<address><addrLine>San Juan, Puerto Rico</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="1979">1979</date>
			<biblScope unit="page" from="39" to="46" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Wherefore art thou R3579X? Anonymized social networks, hidden patterns and structural steganography</title>
		<author>
			<persName><forename type="first">L</forename><surname>Backstrom</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Dwork</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Kleinberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Sixteenth International World Wide Web Conference</title>
		<meeting>the Sixteenth International World Wide Web Conference<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="181" to="190" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Emergence of scaling in random networks</title>
		<author>
			<persName><forename type="first">A.-L</forename><surname>Barabási</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Albert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science</title>
		<imprint>
			<biblScope unit="volume">286</biblScope>
			<biblScope unit="issue">5439</biblScope>
			<biblScope unit="page" from="509" to="512" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">A sequential importance sampling algorithm for generating random graphs with prescribed degrees</title>
		<author>
			<persName><forename type="first">J</forename><surname>Blitzstein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Diaconis</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
	<note>Unpublished</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">W</forename><surname>Cohen</surname></persName>
		</author>
		<ptr target="http://www.cs.cmu.edu/~enron/" />
		<title level="m">Enron email dataset</title>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Classbased graph anonymization for social network data</title>
		<author>
			<persName><forename type="first">G</forename><surname>Cormode</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Bhagat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Krishnamurthy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. VLDB Endowment</title>
		<meeting>VLDB Endowment</meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="766" to="777" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Anonymizing bipartite graph data using safe groupings</title>
		<author>
			<persName><forename type="first">G</forename><surname>Cormode</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. VLDB Endowment</title>
		<meeting>VLDB Endowment</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="833" to="844" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">An efficient algorithm for graph isomorphism</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">G</forename><surname>Corneil</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">C</forename><surname>Gotlieb</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. ACM</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="51" to="64" />
			<date type="published" when="1970">1970</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Characterization of complex networks: A survey of measurements</title>
		<author>
			<persName><forename type="first">L</forename><surname>Costa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Rodrigues</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Travieso</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Boas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Adv. Phys</title>
		<imprint>
			<biblScope unit="volume">56</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="167" to="242" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Differential privacy: A survey of results</title>
		<author>
			<persName><forename type="first">C</forename><surname>Dwork</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Theory and Applications of Models of Computation Fifth International Conference</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting>the Theory and Applications of Models of Computation Fifth International Conference<address><addrLine>Xi&apos;an</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008-04-29">25-29 April (2008</date>
			<biblScope unit="volume">4978</biblScope>
			<biblScope unit="page" from="1" to="19" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Calibrating noise to sensitivity in private data analysis</title>
		<author>
			<persName><forename type="first">C</forename><surname>Dwork</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Mcsherry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Nissim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Third Theory of Cryptography Conference</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting>the Third Theory of Cryptography Conference<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2006-03-07">4-7 March (2006</date>
			<biblScope unit="page" from="265" to="284" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">On the evolution of random graphs</title>
		<author>
			<persName><forename type="first">P</forename><surname>Erdös</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Rényi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bull. Inst. Int. Stat</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="page" from="343" to="347" />
			<date type="published" when="1961">1961</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Horizons of observability and limits of informal control in organizations</title>
		<author>
			<persName><forename type="first">N</forename><surname>Friedkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Soc. Forces</title>
		<imprint>
			<biblScope unit="volume">62</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="54" to="77" />
			<date type="published" when="1983">1983</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Private social network analysis: How to assemble pieces of a graph privately</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">B</forename><surname>Frikken</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Golle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM Workshop on Privacy in the Electronic Society</title>
		<meeting>the ACM Workshop on Privacy in the Electronic Society<address><addrLine>Alexandria, VA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2006-10-30">30 October (2006</date>
			<biblScope unit="page" from="89" to="98" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Composition attacks and auxiliary information in data privacy</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">R</forename><surname>Ganta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">P</forename><surname>Kasiviswanathan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Fourteenth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining</title>
		<meeting>the Fourteenth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="265" to="273" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Accurate estimation of the degree distribution of private networks</title>
		<author>
			<persName><forename type="first">M</forename><surname>Hay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Miklau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Jensen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Conference on Data Mining</title>
		<meeting>the IEEE International Conference on Data Mining<address><addrLine>Los Alamitos</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="169" to="178" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Resisting structural re-identification in anonymized social networks</title>
		<author>
			<persName><forename type="first">M</forename><surname>Hay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Miklau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">D</forename><surname>Jensen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">F</forename><surname>Towsley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Weis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. VLDB Endowment</title>
		<meeting>VLDB Endowment</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="102" to="114" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Anonymizing social networks</title>
		<author>
			<persName><forename type="first">M</forename><surname>Hay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Miklau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">D</forename><surname>Jensen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Weis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Srivastava</surname></persName>
		</author>
		<idno>UM-CS-2007-19</idno>
		<imprint>
			<date type="published" when="2007">2007</date>
			<pubPlace>Amherst</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Department of Computer Science, University of Massachusetts</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Boosting the accuracy of differentially-private histograms through consistency</title>
		<author>
			<persName><forename type="first">M</forename><surname>Hay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Rastogi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Miklau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Suciu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. VLDB Endowment</title>
		<meeting>VLDB Endowment</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="1021" to="1032" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Growing scale-free networks with tunable clustering</title>
		<author>
			<persName><forename type="first">P</forename><surname>Holme</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">J</forename><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Phys. Rev. E</title>
		<imprint>
			<biblScope unit="volume">65</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page">26107</biblScope>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Attacks on privacy and de Finetti&apos;s theorem</title>
		<author>
			<persName><forename type="first">D</forename><surname>Kifer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Thirty-fifth SIGMOD International Conference on Management of Data</title>
		<meeting>the Thirty-fifth SIGMOD International Conference on Management of Data<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="127" to="138" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Navigation in a small world</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Kleinberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">406</biblScope>
			<biblScope unit="issue">6798</biblScope>
			<biblScope unit="page">845</biblScope>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Link privacy in social networks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Korolova</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Motwani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">U</forename><surname>Nabar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Seventeenth ACM Conference on Information and Knowledge Management</title>
		<meeting>the Seventeenth ACM Conference on Information and Knowledge Management<address><addrLine>Napa Valley</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2008-10-30">26-30 October (2008</date>
			<biblScope unit="page" from="289" to="298" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">The earth mover&apos;s distance is the mallows distance: some insights from statistics</title>
		<author>
			<persName><forename type="first">E</forename><surname>Levina</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Bickel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eighth IEEE International Conference on Computer Vision</title>
		<meeting>the Eighth IEEE International Conference on Computer Vision</meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="251" to="256" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Towards a theory of scale-free graphs: Definition, properties, and implications</title>
		<author>
			<persName><forename type="first">L</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Alderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Doyle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Willinger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. Math</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="431" to="523" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A first-principles approach to understanding the internet&apos;s router-level topology</title>
		<author>
			<persName><forename type="first">L</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Alderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Willinger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Doyle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2004 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications</title>
		<meeting>the 2004 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="3" to="14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">t-closeness: Privacy beyond k-anonymity and -diversity</title>
		<author>
			<persName><forename type="first">N</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Venkatasubramanian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twenty-third International Conference on Data Engineering</title>
		<meeting>the Twenty-third International Conference on Data Engineering<address><addrLine>Istanbul</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="106" to="115" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Towards identity anonymization on graphs</title>
		<author>
			<persName><forename type="first">K</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Terzi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGMOD International Conference on Management of Data</title>
		<meeting>the ACM SIGMOD International Conference on Management of Data<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2008-06-12">10-12 June (2008</date>
			<biblScope unit="page" from="93" to="106" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><surname>Machanavajjhala</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Gehrke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Kifer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Venkitasubramaniam</surname></persName>
		</author>
		<title level="m">Proceedings of the Twenty-second International Conference on Data Engineering</title>
		<meeting>the Twenty-second International Conference on Data Engineering<address><addrLine>Atlanta</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page">24</biblScope>
		</imprint>
	</monogr>
	<note>diversity: Privacy beyond k-anonymity</note>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Worst-case background knowledge for privacy-preserving data publishing</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Kifer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Machanavajjhala</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Gehrke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">Y</forename><surname>Halpern</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twenty-third International Conference on Data Engineering</title>
		<meeting>the Twenty-third International Conference on Data Engineering<address><addrLine>Istanbul</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="126" to="135" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Probability and Computing: Randomized Algorithms and Probabilistic Analysis</title>
		<author>
			<persName><forename type="first">M</forename><surname>Mitzenmacher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Upfal</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005">2005</date>
			<publisher>Cambridge University Press</publisher>
			<pubPlace>Cambridge</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">De-anonymizing social networks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Narayanan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Shmatikov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Symposium on Security and Privacy</title>
		<meeting>the IEEE Symposium on Security and Privacy<address><addrLine>Oakland</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2009-05-20">17-20 May (2009</date>
			<biblScope unit="page" from="173" to="187" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">The structure and function of complex networks</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">E J</forename><surname>Newman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Rev</title>
		<imprint>
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="167" to="256" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Smooth sensitivity and sampling in private data analysis</title>
		<author>
			<persName><forename type="first">K</forename><surname>Nissim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Raskhodnikova</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Thirty-ninth Annual ACM Symposium on Theory of Computing</title>
		<meeting>the Thirty-ninth Annual ACM Symposium on Theory of Computing<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2007-06">June (2007</date>
			<biblScope unit="page" from="11" to="13" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Risk network structure in the early epidemic phase of HIV transmission in Colorado Springs</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">J</forename><surname>Potterat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Phillips-Plummer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">Q</forename><surname>Muth</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">B</forename><surname>Rothenberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">E</forename><surname>Woodhouse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">S</forename><surname>Maldonado-Long</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">P</forename><surname>Zimmerman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">B</forename><surname>Muth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Sex. Transm. Infect</title>
		<imprint>
			<biblScope unit="volume">78</biblScope>
			<biblScope unit="page" from="159" to="163" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
	<note>Suppl. 1</note>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Relationship privacy: Output perturbation for queries with joins</title>
		<author>
			<persName><forename type="first">V</forename><surname>Rastogi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Miklau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Suciu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twenty-Eighth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems</title>
		<meeting>the Twenty-Eighth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems<address><addrLine>Providence</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2009-07-02">June 29-July 2 (2009</date>
			<biblScope unit="page" from="107" to="116" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">The boundary between privacy and utility in data publishing</title>
		<author>
			<persName><forename type="first">V</forename><surname>Rastogi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Suciu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Thirty-third International Conference on Very Large Data Bases</title>
		<meeting>the Thirty-third International Conference on Very Large Data Bases<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="531" to="542" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title level="m" type="main">Artificial Intelligence: A Modern Approach, 2nd edn</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">J</forename><surname>Russell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Norvig</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003">2003</date>
			<publisher>Prentice Hall</publisher>
			<pubPlace>Upper Saddle River</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Protecting respondents&apos; privacy in microdata release</title>
		<author>
			<persName><forename type="first">P</forename><surname>Samarati</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Knowl. Data Eng</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1010" to="1027" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<title level="m" type="main">Protecting privacy when disclosing information: k-anonymity and its enforcement through generalization and suppression</title>
		<author>
			<persName><forename type="first">P</forename><surname>Samarati</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Sweeney</surname></persName>
		</author>
		<idno>SRI-CSL-98-04</idno>
		<imprint>
			<date type="published" when="1998">1998</date>
			<publisher>SRI International</publisher>
		</imprint>
		<respStmt>
			<orgName>Computer Science Laboratory</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Measuring topological anonymity in social networks</title>
		<author>
			<persName><forename type="first">L</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Zhan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Conference on Granular Computing</title>
		<meeting>the IEEE International Conference on Granular Computing</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="770" to="770" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">K-anonymity: A model for protecting privacy</title>
		<author>
			<persName><forename type="first">L</forename><surname>Sweeney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Uncertain. Fuzziness Knowl. Based Syst</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="557" to="570" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Network topology generators: degree-based vs. structural</title>
		<author>
			<persName><forename type="first">H</forename><surname>Tangmunarunkit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Govindan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Jamin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Willinger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2002 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications</title>
		<meeting>the 2002 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="147" to="159" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Privacy protection in social network data disclosure based on granular computing</title>
		<author>
			<persName><forename type="first">D.-W</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C.-J</forename><surname>Liau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Hsu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Conference on Fuzzy Systems</title>
		<meeting>the IEEE International Conference on Fuzzy Systems</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="997" to="1003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Collective dynamics of &apos;small-world&apos; networks</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Watts</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">H</forename><surname>Strogatz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">393</biblScope>
			<biblScope unit="issue">6684</biblScope>
			<biblScope unit="page" from="409" to="410" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Minimality attack in privacy preserving data publishing</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">-W</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">W</forename></persName>
		</author>
		<author>
			<persName><forename type="first">-C</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Pei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 33rd International Conference on Very Large Data Bases</title>
		<meeting>the 33rd International Conference on Very Large Data Bases</meeting>
		<imprint>
			<publisher>VLDB Endowment</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="543" to="554" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">M-invariance: towards privacy preserving republication of dynamic datasets</title>
		<author>
			<persName><forename type="first">X</forename><surname>Xiao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Tao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2007 ACM SIGMOD International Conference on Management of Data</title>
		<meeting>the 2007 ACM SIGMOD International Conference on Management of Data<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="689" to="700" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Randomizing social networks: A spectrum preserving approach</title>
		<author>
			<persName><forename type="first">X</forename><surname>Ying</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Wu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIAM International Conference on Data Mining</title>
		<meeting>the SIAM International Conference on Data Mining</meeting>
		<imprint>
			<date type="published" when="2008-04">April (2008</date>
			<biblScope unit="page" from="24" to="26" />
		</imprint>
	</monogr>
	<note>Atlanta</note>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Preserving the privacy of sensitive relationships in graph data</title>
		<author>
			<persName><forename type="first">E</forename><surname>Zheleva</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Getoor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">First ACM SIGKDD International Workshop on Privacy, Security, and Trust in KDD</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting><address><addrLine>San Jose</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="153" to="171" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">Preserving privacy in social networks against neighborhood attacks</title>
		<author>
			<persName><forename type="first">B</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pei</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twenty-fourth International Conference on Data Engineering</title>
		<meeting>the Twenty-fourth International Conference on Data Engineering<address><addrLine>Cancun</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="506" to="515" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">K-Automorphism: A general framework for privacy preserving network publication</title>
		<author>
			<persName><forename type="first">L</forename><surname>Zou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">T</forename><surname>Özsu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. VLDB Endowment</title>
		<meeting>VLDB Endowment</meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="946" to="957" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
