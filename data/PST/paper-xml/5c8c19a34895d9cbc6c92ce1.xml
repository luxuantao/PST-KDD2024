<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">TrustChain: A Sybil-resistant Scalable Blockchain</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Pim</forename><surname>Otte</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Delft University of Technology</orgName>
								<address>
									<settlement>Delft</settlement>
									<country key="NL">The Netherlands</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Martijn</forename><surname>De Vos</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Delft University of Technology</orgName>
								<address>
									<settlement>Delft</settlement>
									<country key="NL">The Netherlands</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Johan</forename><surname>Pouwelse</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Delft University of Technology</orgName>
								<address>
									<settlement>Delft</settlement>
									<country key="NL">The Netherlands</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">TrustChain: A Sybil-resistant Scalable Blockchain</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">650E9125FACED3801B9967D476DC6CA3</idno>
					<idno type="DOI">10.1016/j.future.2017.08.048</idno>
					<note type="submission">Preprint submitted to SI: Cryptocurrency May 24, 2017 TrustChain paper Click here to view linked References</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T07:13+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>blockchain</term>
					<term>trust</term>
					<term>reputation</term>
					<term>tamper-proof data structure</term>
					<term>transactions</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>TrustChain is capable of creating trusted transactions among strangers without central control. This enables new areas of blockchain use with a focus on building trust between individuals. Our innovative approach offers scalability, openness and Sybil-resistance while replacing proof-of-work with a mechanism to establish the validity and integrity of transactions.</p><p>TrustChain is a permission-less tamper-proof data structure for storing transaction records of agents. We create an immutable chain of temporally ordered interactions for each agent. It is inherently parallel and every agent creates his own genesis block. TrustChain includes a novel Sybil-resistant algorithm named NetFlow to determine trustworthiness of agents in an online community. NetFlow ensures that agents who take resources from the community also contribute back. We demonstrate that irrefutable historical transaction records offer security and seamless scalability, without requiring global consensus. Experimentation shows that the transaction throughput of TrustChain surpasses that of traditional blockchain architectures like Bitcoin. We show by using extracted data from a live network that TrustChain has sufficient informativeness to identify freeriders, leading to refusal of service.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>The blockchain is said to be a breakthrough in computer science that holds the promise of reducing the cost of establishing and maintaining trust for both individuals and organizations <ref type="bibr" target="#b0">[1]</ref>. Blockchain technology lets people who have no particular confidence in each other collaborate without relying on a neutral central authority.</p><p>As an introduction we will explain the strange transition it has made. Only as recent as 2016 has blockchain technology gone mainstream. The World Economic Forum (WEF) has released an in-depth study in August 2016 <ref type="bibr" target="#b1">[2]</ref>. After a year-long investigation of the emerging technology it concludes that the blockchain "will fundamentally alter the way financial institutions do business around the world". Over 80% of banks worldwide participate in blockchain projects in 2017. The Bank of England has been an early supporter of blockchain and stated that this technology "potentially combined with mobile technology, may reshape the mechanisms for making secure payments" <ref type="bibr" target="#b2">[3]</ref>. This is an ironic situation since the early promise of blockchain technology was to make banks redundant, bypass central banks, and avoid government regulations. The first generation of blockchain technology, called Bitcoin, flourished within the underground economy <ref type="bibr" target="#b3">[4]</ref>. Numerous newspaper articles discussed how governments proved to be powerless at stopping online drug trading, facilitated by Bitcoins. However, the FBI confiscated $28.5 million in Bitcoin money from one of the largest online drug dealers and he is now serving a life sentence without the possibility of parole <ref type="bibr" target="#b4">[5]</ref>. Governments and banks alike have recently embraced blockchain technology. Rather than staying at the margins of the finance industry, the blockchain is likely to become the beating heart of it. Despite the hype, this technology is still being matured for large-scale usage. This transition is estimated to take at least ten years <ref type="bibr" target="#b1">[2]</ref>.</p><p>The largest team developing blockchain technology is the R3 consortium of 80 global financial firms <ref type="bibr">[6]</ref>. Backers of the R3 Corda blockchain include J.P. Morgan, Credit Suisse, Barclays, Bank of America, Deutsche Bank, BNP Paribas, and ING. The R3 CEV infrastructure can currently perform a key financial trade function through the blockchain, namely promissory notes, an unconditional promise to pay a determinate sum of money (e.g. commercial papers). R3 CEV can now issue, trade, transfer and redeem promissory notes.</p><p>In March 2016 the member banks tested five blockchain vendors and three cloud providers, to see how different combinations handled simulated commercial paper transactions.</p><p>To conclude, major banks are actively looking into blockchain technology for parts of their core infrastructure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Blockchain Architectures</head><p>Three distinct blockchain architectures have evolved over time. The architectures in the following list are increasingly more generic and have improved scalability.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>• Permission-less cybercurrency</head><p>The permission-less aspect of this architecture is a unique property which ensures no middleman needs to be asked for permission, no identity provider needs to approve your application, and no financial entity of any kind is required. One is able to contribute to the processing of transactions without prior involvement in a blockchain. Permission-less cybercurrency such as Bitcoin uses an elegant solution to address the double spending problem: the proof-of-work consensus model. Unfortunately, the requirement of a global, consistent state does not scale and requires additions such as leaders or supervisory servers <ref type="bibr" target="#b5">[7]</ref>. As a consequence, Bitcoin only supports roughly seven transactions per second due to limitations in the size of a block. Additionally, while the cybercurrency provides some rudimentary scripting rules, usage in a broader context is limited.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>• Private transaction fabric</head><p>The word private or permissioned implies that transactions are not exposed to all users by default. Private architectures usually put a single entity or server in control and require complex access control mechanisms to prevent unauthorized users from accessing sensitive data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>• Permission-less transaction fabric</head><p>Executing general purpose programs in a permission-less setting while maintaining scalability has proven to be challenging. An example of such a permission-less transaction fabric is Ethereum which focusses on executing smart contracts, code that is invoked by initiating transactions. In 2014 the Ethereum Virtual Machine (EVM) became operational for the first time. Each Ethereum node in the network operates an EVM implementation and executes identical instructions. Like Bitcoin, the scalability of Ethereum is severely limited by the requirement of a consensus mechanism.</p><p>All three blockchain architectures aim to facilitate trustworthy transactions at scale. The problem is that to date, scientists have never managed to design and deploy a self-organising mechanism to create trust, resilient against all known types of attack (e.g. replay, man-in-the-middle, ballot-stuffing, slander, eclipse, and the Sybil attack). The most challenging attack in permission-less architectures is the Sybil attack, in which adversaries create numerous fake identities to gain a disproportionately large influence <ref type="bibr" target="#b9">[11]</ref>. Traditional defences against Sybil attacks rely on validated identities issued by a trusted authority. Live reputation systems used by millions of people without exception rely on a single point of control (and platform lock-in), for instance, eBay auctions <ref type="bibr" target="#b10">[12]</ref>, Amazon reviews <ref type="bibr" target="#b11">[13]</ref> and Google searches <ref type="bibr" target="#b12">[14]</ref>. The requirement for agents to present a trusted identity conflicts with the need for permission-less open membership.</p><p>The main contribution of this paper is further broadening of the most generic blockchain architecture devised to date. We present an approach which provides distributed trust, void of any gatekeeper, while still providing strict bounds on the profitability of a Sybil attack. TrustChain is a remarkably simple blockchainbased data structure. It can be used to record transactions and to make these transactions tamper-proof. NetFlow is our algorithm to calculate the trustworthiness of agents with Sybil resistance using prior transactions as input.</p><p>To demonstrate the strength of TrustChain we created an online community of volunteers which share Internet bandwidth and demonstrate the viability of our TrustChain architecture in the context of this community.</p><p>The contributions of this work are the following:</p><p>• A tamper-proof, scalable and blockchain-based data structure (TrustChain).</p><p>• A Sybil-resistant model to determine trustworthiness (NetFlow).</p><p>• A public experiment which addresses freeriding in online communities.</p><p>Our work includes both a formal proof of the Sybil resistance of NetFlow and an Internet deployment of TrustChain.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Related Work</head><p>The R3 Corda ledger work is closely related to TrustChain: it is also focussed on tamper-proof transaction recording. R3 Corda is one of the largest groups working on ledger technology deployment. Their key feature is "recording and managing the evolution of financial agreements and other shared data between two or more identifiable parties" <ref type="bibr" target="#b13">[15]</ref>. Similar to our approach, they also avoid global consensus, proof-of-work, and fork mechanisms. Due to the R3 Corda focus on financial firms, a central element of their work is legally binding contracts between two parties and regulatory compliance. A key difference is that R3 Corda lacks gossiping and has no replication of records since transaction records are only stored by the two or more directly involved parties.</p><p>From 2006-2012, there was much excitement in the research community about using social networks to mitigate Sybil attacks <ref type="bibr" target="#b14">[16]</ref>. Algorithms such as SumUp, SybilGuard, SybilLimit, and SybilInfer provide resistance against sybils by analysing the social graph <ref type="bibr" target="#b19">[21,</ref><ref type="bibr" target="#b15">17,</ref><ref type="bibr" target="#b16">18,</ref><ref type="bibr" target="#b17">19]</ref>. In 2007 we designed and Internet-deployed the first fully distributed reputation system that prevents lazy freeriding, called BarterCast <ref type="bibr" target="#b20">[22,</ref><ref type="bibr" target="#b21">23]</ref>. The BarterCast mechanism calculates reputation of agents by utilising a max-flow algorithm based on an agent's private history of its data exchanges as well as indirect information received from other agents. This work has been extended by Seuken and Parkes where the Drop-Edge accounting mechanism is introduced <ref type="bibr" target="#b22">[24]</ref>. The same authors have added the notion of Sybil-proofness and transitive trust to Drop-Edge in subsequent research work <ref type="bibr" target="#b23">[25]</ref>. Their work on Sybil-resistant mechanism forms the basis of the NetFlow mechanism described in this paper.</p><p>There have been various proposals to create a more scalable blockchain.</p><p>Bitcoin-NG is a blockchain protocol that is designed to scale and is Byzantine fault tolerant, robust to extreme churn and shares the same trust model obviating qualitative changes to the ecosystem <ref type="bibr" target="#b6">[8]</ref>. Improving the block creation rate has been addressed by the GHOST rule, a modification to the way Bitcoin nodes construct and re-organize the blockchain <ref type="bibr" target="#b8">[10]</ref>. Alternatively, one can restructure the chain to form a directed acyclic graph of blocks and loosing transaction acceptance rules such that it incorporate transactions even from seemingly conflicting blocks <ref type="bibr" target="#b7">[9]</ref>. While these models provide a significant increase in potential speed, they do not allow for unbounded scalability and require complex data structures or consensus mechanisms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">TrustChain Architecture</head><p>The basic idea of the TrustChain architecture is built around the notion of agents transacting with each other. Real-world examples of a transaction include the exchange of files, buying or selling goods and transferring money.</p><p>Figure <ref type="figure" target="#fig_1">1a</ref> represents a transaction between agent A and B. Each transaction is cryptographically signed by both participating parties using any secure signing mechanism. This ensures that the participation of each user involved in the transaction is irrefutable.</p><p>Each participant keeps track of transactions where he was involved in. One way to organize these historical encounters is to chain transactions together in a  tamper-proof manner. This idea is illustrated in Figure <ref type="figure" target="#fig_1">1b</ref> where the transaction chain of a particular agent in the network is given. Transactions are stored using a blockchain data structure where each block contains one transaction, both signatures of the interacting agents and a pointer to the prior block in the chain. This pointer is often constructed by including a hash value in the block 150 description. Any secure hashing function can be used for this purpose.</p><p>The structure in Figure <ref type="figure" target="#fig_1">1b</ref> differs from traditional blockchain architectures in a sense that every participant grows and maintains their own chain of transactions. Architectures like Bitcoin or Ethereum maintain one single and global chain containing a trace of all transactions performed by users. Consistency 155 of the chain is guaranteed by a consensus system like proof-of-work. An additional difference is that in traditional blockchains, often multiple transactions are packed together in one block to increase transaction throughput whereas in TrustChain we assume each block describes at most one transaction. After a transaction between two agents has finished, both parties sign the transaction and append a new block to their local chain.</p><p>To imply an order on transactions, each element in a blockchain is accompanied by a sequence number s ∈ R, uniquely identifying the position of a block.</p><p>The first block in a chain, also called the genesis block, is assigned sequence number 1. This sequence number is incremented by one for each subsequent block in the chain.</p><p>While a blockchain is an elegant structure to account historical interactions, there is a vulnerability in this approach: the chains of agents are void of any control since each local chain is only maintained by one entity. Transacting agents might decide to not append a transaction to their local chain. The rationale behind this behaviour is that a transaction can be unfavourable for one of the participants, i.e. when a specific agent has only consumed work. In addition, an agent might "rewrite" his local chain by reordering transactions and recomputing prior pointers without much computational effort.</p><p>In order to secure the TrustChain architecture against the aforementioned attacks, we include an additional pointer in each block that points back to the last block in the chain of the transaction counterparty. This is presented in Figure <ref type="figure" target="#fig_1">1c</ref> which illustrates an element in the chain that is accompanied with two hashes. In TrustChain, each historical encounter has two incoming and two outgoing pointers. Violation of this rule can efficiently be detected, for instance, when creating two blocks with the same prior block pointer (see Section 6.1). The additional pointer to the chain of the counterparty makes it hard to reorder or remove blocks in ones chain since this can be detected by the other party involved in a transaction. This makes that TrustChain can be considered as a mechanism where consensus is reached among participants of a specific transaction instead of consensus on a global level.</p><p>As participants are initiating transactions with others, they become quickly intertwined ("entangled") with other users as more blocks are created. TrustChain In contrast to many existing blockchain architectures which attempt to prevent fraudulent operations like double spending, we aim for a guarantee that fraud can be detected, even after it has been committed already. Not actively preventing fraud allows us to drop the requirement for global consensus while tremendously improving scalability due to the possibility of transactions performed in parallel. We should remark that while consensus is not a necessary element, such a mechanism will add an additional layer of security and verification on top of the TrustChain data structure.</p><p>Validation of blocks is performed prior to a block being appended to the local storage of each agent. During validation, the incoming and outgoing pointers, sequence numbers, transaction data and signatures are verified. Only if a block is marked as valid, it is inserted in the local storage and shared with other network participants.</p><p>TrustChain blocks are designed to be exchanged by agents using gossiping and are replicated widely. This makes the system resilient against churn, the phenomena that agents go on-and offline at a fast rate. Each agent operates their own bulk storage of blocks, resulting in partial storage of the global directed graph. Every agent publishes their own unique chain, monitors interactions of others and collects TrustChain data to compute trustworthiness levels. Collecting this information is challenging for the agents due to their vulnerability to various attacks, their limited resources, and the burst of their interactions. Our prior work investigates an attack-resilient and scalable solution to this collection problem using random walks and similarity functions <ref type="bibr" target="#b24">[26,</ref><ref type="bibr" target="#b25">27]</ref>. In this work we assume that this specific block collection problem is addressed: we focus on the challenging problem of Sybil-resilient calculation of trust scores and operational systems built upon TrustChain.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">NetFlow Accounting Mechanism</head><p>We now present the Sybil-resistant NetFlow accounting mechanism that uses the TrustChain graph as input. We consider a distributed network that consists of n agents, each capable of doing work for each other. Recall that we build TrustChain around the notion of agents transacting with each other. In the model discussed in this section, a transaction can be considered as an interaction between multiple agents. Before information about interactions can be exploited, we define an interaction model which includes temporal information about interactions between agents in the network <ref type="bibr" target="#b26">[28]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 1 (Ordered Interaction Model</head><p>). An ordered interaction model M = P, I, a, w consists of two sets and two functions.</p><p>• P , a finite set of agents • I, a finite set of interactions • a : I → P × P , a function mapping each interaction to the agents involved in it</p><p>• w : I × P → R ≥0 , a function which describes the contribution of an agent in an interaction Note that w(i, p) = 0 must hold if p / ∈ a(i).</p><p>The interactions that involve agent p is given by the following totally ordered set.</p><formula xml:id="formula_0">I p = {i ∈ I : p ∈ a(i)}<label>(1)</label></formula><p>An interaction involves two distinct agents, one or both performing work for each other. Definition 1 can be applied to almost every network that considers interactions and a quantitative amount of work performed between agents. The only necessity is that something induces an order on the set of interactions of each agent. In the case of TrustChain, this order is induced by the time at which a transaction is signed and stored.</p><p>The definition of an ordered interaction model can be applied directly to the TrustChain data structure presented in Section 4. Each interaction between two agents is backed by a record in the data structure.</p><p>Interactions are often represented by a graph, which motivates the definition of an interaction graph.</p><p>Definition 2 (Interaction Graph). Let M = P, I, a, w be an ordered interaction model. The weighted interaction graph G M = (V, E, w) is defined as follows: The interaction graph represents the total contributions of agents to each other and is commonly found in literature when considering networks where agents are collaborating to achieve some common goal. An example of an interaction graph is given in Figure <ref type="figure" target="#fig_3">3</ref>. Note that the definition of an interaction graph does not reflect the notion of time in any way and defines interaction on a more global level.</p><formula xml:id="formula_1">• V := {v p : p ∈ P } • E := {(v p , v q ) : ∃i ∈ I, a(i) = (p, q)} Let (v p , v q ) ∈ V , then the weight w of (v p , v q ) is equal to the sum of all contributions that involve agent p. w((v p , v q )) := i∈I:a(i)=(p,q) w(i, p)<label>(2)</label></formula><p>While the interaction graph represents interactions on a network-wide scale, it is realistic to assume that individual agents do not have knowledge about all interactions but are only interested in a subset of them. The following definitions are inspired by the work of Seuken and Parkes <ref type="bibr" target="#b23">[25]</ref>.</p><formula xml:id="formula_2">Definition 3 (Subjective Work Graph). A subjective work graph from agent i's perspective, G i = (V i , E i , w i )</formula><p>, is an interaction graph derived from an ordered interaction model M , where the set of interactions in the model is a subset of all interactions that includes at least all interactions of agent i.</p><p>The subjective work graph allows us to model the situation in which agents have a partial view on the network. Note that a subjective work graph cannot be considered as a sub graph of the interaction graph derived from the complete model, as the weights on the edges might differ.</p><p>We assume that each agent is interested in contributing some work to other agents. The set of such agents is defined to be the choice set.</p><p>Definition 4 (Choice Set). The choice set C i ⊆ V i \ {i} for agent i is the set of agents that are currently interested in receiving some work from i.</p><p>We can assign a score to each agent in a choice set using an accounting mechanism.</p><p>Definition 5 (Accounting Mechanism). An accounting mechanism M takes as input a subjective work graph G i and determines the score S M j (G i , C i ) ∈ R, for any agent j ∈ V i , as viewed by agent i.</p><p>Definition 5 defines what is basically a scoring mechanism. This mechanism can be used to select an agent from the choice set that receives a unit of work, according to a specific allocation policy.</p><p>Definition 6 (Allocation Policy). Given subjective work graph G i , choice set C i and an accounting mechanism M , an allocation policy A : R n → P is a function that maps a set of agent scores S M (G i , C i ) to an agent j ∈ C i . This agent is chosen to receive a unit of work from agent i.</p><p>The used allocation policy often depends on the type of application. A basic allocation policy could be to choose the agent with the highest score and select an agent randomly in case of a tie breaker. This policy is also referred to as Winner-Take-All (WTA).</p><p>We now present the NetFlow accounting mechanism that is used to assign a score to agents in a distributed network.</p><p>Definition 7 (NetFlow Limited Contribution). The NetFlow limited contribution accounting mechanism M is defined as follows: given a subjective work graph G i = (V i , E i , w i ) and choice set C i , agent i computes the following value for each agent j ∈ C i .</p><formula xml:id="formula_3">c j = max{M F Gi (j, i) -M F Gi (i, j), 0}<label>(3)</label></formula><p>In Equation <ref type="formula" target="#formula_3">3</ref>, M F Gi (i, j) denotes the value of the maximum flow (max-flow) from i to j in G i , where the weights are the capacities on the edges.</p><p>Let G N i be the graph G i modified with c j as node capacities for each node, except for c i which should be infinite. We now assign a score to agent j as follows.</p><formula xml:id="formula_4">S M j (G i , C i ) = M F G N i (j, i)<label>(4)</label></formula><p>An example of a NetFlow computation performed from the perspective of agent r is given in Figure <ref type="figure" target="#fig_4">4</ref>. This subjective work graph G r contains four agents. The first step of the NetFlow algorithm is determining node capacities for each agent in the network. In the following explanation, we calculate the final trustworthiness score assigned to agent p. The maximum flow from agent p to agent r is equal to 12 and the maximum flow from agent r back to agent p is equal to 9, hence the node capacity of p (c p ) becomes max(12 -9, 0) = 3.</p><p>Next, we determine the score S M p as assigned by the NetFlow accounting mechanism of agent p which is equal to 3. Note that at most 3 units of work can flow through agent p in the subjective work graph. This process is repeated to determine the scores of other agents in the network.</p><p>In the NetFlow mechanism, only agents that have a strictly positive contribution in terms of flow will induce network effects. In existing networks, this subset of the population tends to be fairly small. If most agents are assigned a zero score, the mechanism does not provide any information about them. This leads to the definition of informativeness. Definition 8 (Informativeness). Given an accounting mechanism M and a subjective work graph G i , the informativeness of accounting mechanism M given G i is the fraction of agents in G i that are assigned a non-zero score under M .</p><p>An idea to improve the informativeness would be to weight the work performed by the other agents higher than work consumed by them. The rationale behind this scheme is that agents that perform less work than they consume are p q r t c p = 12 -9 = 3 graph G i = (V i , E i , w i ), a choice set C i and α ≥ 1, then the α-scaled weights w i,α are defined as follows:</p><formula xml:id="formula_5">S M p = 3 c q = 6 -12 = -6 S M q = 0 c t = 4 -0 = 4 S M t = 2</formula><formula xml:id="formula_6">w i,α (e) =      wi(e) α if e = (i, j) with j ∈ V i w i (e) otherwise<label>(5)</label></formula><p>The α-NetFlow accounting mechanism is computed as the NetFlow accounting mechanism, but on the subjective work graph G i = (V i , E i , w i,α ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>330</head><p>As a shorthand, this mechanism is denoted by α-NetFlow.</p><p>An example of a α-NetFlow computation is given in Figure <ref type="figure">5</ref>. It has a p q r t c p = 12 -6 = 6 similar, but slightly weaker defence against Sybil attacks than NetFlow which will be discussed in Section 6.3.</p><formula xml:id="formula_7">S M p = 6 c q = 6 -12 = -6 S M q = 0 c t = 4 -0 = 4 S M t = 2</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Security Analysis</head><p>We now elaborate some attacks on the TrustChain architecture where a malicious agent attempts to gain an unfair advantage, either by tampering with the data structure described in Section 4 or by abusing the NetFlow accounting mechanism discussed in Section 5. While the overview presented here is likely not exhaustive, it highlights some vulnerabilities that are inherent to blockchain architectures and accounting mechanisms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.">Double Spending Attack</head><p>Similar to Bitcoin it is possible to fork your own blockchain by creating two different transaction branches. TrustChain has a defense mechanism against this key attack, violators will be detected and lose the trust of others. The attack is illustrated in Figure <ref type="figure" target="#fig_6">6</ref> where the TrustChain structure of an agent performing a double spending attack is presented. In this scenario, agent</p><p>A wishes to hide the dashed block, the interaction with agent C and only propagates information about his interaction with agent D. While this attack might seem successful at first, the hidden transaction with agent C will eventually be detected when an additional agent, say B, learns about the historical encounters of agent C. During verification of the chain of C, the transaction that A wishes to hide is discovered. This contradicts the knowledge of B about transactions in which agent A has been involved. The two blocks that agent A has created together form a proof-of-fraud and should be broadcast in the network. The proof can be used by other agents to verify the fraudulent action with little computational effort, leading to blacklisting or refusal of service.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.">Replay Attack</head><p>Where the double spending attack is more involved with hiding transactions of an agent, a replay attack attempts to reuse the transaction signature created by the counterparty, essentially replaying a transaction. A malicious agent reuses the pointer to a prior block of the other party. The replay attack is illustrated in Figure <ref type="figure">7</ref> where agent A grows his chain with the same transaction twice. The motivation behind this attack is that a malicious agent can claim that he has been involved in a transaction that is beneficial for him multiple times. This attack is relatively easy to discover: when verifying correctness of the transaction chain of agent A by another agent, he detects when there are two blocks that have the same outgoing pointer. The proof-of-fraud consists of the blocks created by the malicious agent during the replay attack; any agent in the network can verify the fraud by observing the outgoing pointers of the 370 blocks at issue.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3.">Sybil Attack</head><p>A successful Sybil attack increases the reputation of some agents or lowers the reputation of others by initiating interactions in the network. This attack is formally defined in the following definition. </p><formula xml:id="formula_8">G i = (V i , E i , w i ).</formula><p>A Sybil attack by agents J ⊆ V i is a tuple σ J = (V s , E s , w s ) where V s = {s J1 , s J2 , . . .} is a set of Sybils, E s = {(x, y) : x, y ∈ V s ∪ J}, and w s are the edge weights for the edges in E s . Applying the Sybil attack to agent i's sub-</p><formula xml:id="formula_9">jective work graph G i = (V i , E i , w i ) results in a modified graph G i ↓ σ J = G i = (V i ∪ V s , E i ∪ E s , w )</formula><p>, where w (e) = w i (e) for e ∈ E i and w (e) = w s (e) for e ∈ E s .</p><p>A Sybil attack is presented in Figure <ref type="figure">8</ref> where agent j creates three Sybil identities and performs work for them in order to boost his own contributions. This is only beneficial for the attacker as long as he receives more work from others than the amount of work that he has to perform. We formalize this profitability in the next definition.</p><p>Definition 11 (Sybil attack profit). Let G i be a subjective work graph. For all j ∈ N, let (σ J ) j be a Sybil attack on (G i ) j , where (G i ) 0 := G i and (G i ) j for j &gt; 0 is defined by the subjective work graph that consists of</p><formula xml:id="formula_10">(G i ) j-1 ↓ (σ J ) j</formula><p>and the assignment of one unit of work to</p><formula xml:id="formula_11">A(S M ((G i ) j-1 ↓ (σ J ) j , C i )).</formula><p>Let ω n -be the sum of the amount of work agents in J have performed for the network after n steps, including work performed before the start of the Sybil attack. Let ω n + be the amount of work that agents in J or any of their Sybils obtain from the network. Any work obtained before the start of the Sybil attack is disregarded.</p><p>The profit of this sequence of Sybil attacks is:</p><formula xml:id="formula_12">sup{ ω n + ω n - : n ∈ N, ω n -= 0} (6)</formula><p>If this supremum is infinite, the Sybil attack is strongly beneficial.</p><p>If the supremum is finite and is larger than 1, the Sybil attack is profitably weakly beneficial.</p><p>If the supremum exists and is smaller than or equal to 1, the Sybil attack is unprofitably weakly beneficial. This case is also known as "contributing to the network".</p><p>We now prove that the profitability of a Sybil attack on NetFlow is bounded.</p><p>Theorem 1 (Sybil-resistance of NetFlow and α-NetFlow). NetFlow and α-NetFlow are resistant against weakly beneficial Sybil attacks.</p><p>Proof 1. Consider the amount of work performed by the agents in J after n steps of the Sybil attack, ω n -. For each unit of work that is contributed to an agent in J during the Sybil attack, the node capacity of some agent in J that has directly contributed to the network must drop by 1 unit. This means that at most ω n -units of work can be contributed to agents in J after n steps. Therefore,</p><formula xml:id="formula_13">ω n + ≤ ω n</formula><p>-, and thus:</p><formula xml:id="formula_14">sup{ ω n + ω n - : n ∈ N, ω n -= 0} ≤ 1 (7)</formula><p>This shows that the NetFlow accounting mechanism is resistant against weakly beneficial Sybil attacks with a profit no more than 1.</p><p>Since NetFlow is resistant against weakly beneficial Sybil attacks with profit at most 1 and the only difference between NetFlow and α-NetFlow is that the contributions of agent i are decreased by a factor α, it must be the case that the profit of a Sybil attack can be at most α. After all, all altered interactions involves agent i and are therefore known to have actually happened. Concluding, the resource consumption of any party can be at most a factor α more than allowed by NetFlow, which still implies an upper bound on the Sybil attack profit and makes α-NetFlow also resistant against weakly beneficial Sybil attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.4.">Other Attacks</head><p>We conclude this section with an overview of various other attacks.</p><p>Hiding Blocks -Once agents start interacting in the network, records are created. An agent might want to only expose transactions that have a positive influence on his reputation while hiding those that decrease the standing of this particular agent. The TrustChain data structure defends against this attack: since every record contains a sequence number, anyone in the network can request specific records of others, which agents cannot refuse to provide without being detected as a fraud. If an agent is unwilling to provide his historical encounters, one might choose to not transact with this agent until the requested records are provided and verified. Note that an agent cannot prevent his transactions from being propagated to other users by the counterparty.</p><p>Refusal to Sign-A malicious agent can decide to not sign a transaction that is not in his favour. Mitigating this attack is far from trivial since no agent can be forced to sign a transaction. A possible recourse is to not interact with this agent again. Another defence mechanism is to gradually build trust between participants by splitting the transactions in smaller amounts. In this situation, if an agent refuses to sign a transaction, the interaction is aborted.</p><p>Such a scheme reduces the reputation at stake when a counterparty initiates this attack at the cost of more overhead due to the creation and storage of additional records.</p><p>Whitewashing-The permission-less nature of TrustChain enables the creation of additional identities at any time without much effort. If an agent suffers from a bad reputation, he can simply get rid of his current identity and take on a new one. This process is also called whitewashing. It is not desired to refuse services to identities that have yet to build a reputation in the network since that withholds users from joining the network at all. An adequate solution for this problem is to prioritize new identities lower by the allocation policy defined in Definition 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Performance Analysis</head><p>In the first part of this section, we quantity the transaction throughput of the TrustChain data structure. Next, NetFlow is applied to a real-world scenario and we show how it can be used to refuse services to freeriders in online communities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1.">Transaction Throughput</head><p>The ability to record transactions in an efficient, light-weight, and scalable manner is key. Recall that TrustChain transactions are tamper-proof irrefutable records, cryptographically signed by both participants as described in Section 4. We now aim to quantify the overhead and scalability of TrustChain, both on a personal computer and within a challenging environment with constrained computational resources: mobile devices.   We fully implemented TrustChain in the Python programming language and created a simple application that creates TrustChain transactions, all released as open source<ref type="foot" target="#foot_0">1</ref>  <ref type="bibr" target="#b27">[29]</ref>. For this experiment, we setup two agents on the same device that are interacting with each other. Each transaction is cryptographically signed by both parties before being inserted in the local storage of the agents. Pro (2016) and a Dell Precision M4600 laptop. At the start of this experiment the durable storage is empty and new transactions are generated and inserted quickly in the embedded SQLite database. With subsequent database growth the insertion overhead somewhat increases. The most likely explanation for this behaviour is that each insertion requires a database query to fetch information about the latest block of a specific agent, an operation that slows down as the size of the database increases.</p><p>Figure <ref type="figure" target="#fig_10">9</ref> shows that the transaction throughput of a Nexus 10 tablet surpasses that of other mobile devices with an average speed of 4.9 transactions per second. This can be attributed to the better hardware the device comes with.</p><p>The slowest mobile device, the Galaxy Nexus, has an average throughput of 1.6 transactions per second. An interesting observation is that the first 1.000 transactions are processed quickly, with an average of 54.8 transactions per second on the Nexus 10 and 28.7 transactions per second on the Galaxy Nexus.</p><p>The throughput on personal computers presented in Figure <ref type="figure" target="#fig_8">10</ref> is an order of magnitude higher compared to the performance on Android devices. The slowest personal computer we used during this experiment, the Dell Precision M4600, achieves an average transaction throughput of 18.1 transactions per second whereas the first 1.000 records are created with an average speed of 210.3 transactions per second.</p><p>These results show that even on ageing mobile hardware it is possible to process thousands of transactions easily. In addition, creating and retrieving records for hours continuously is also affordable. Our experiment does not include network latency required to disseminate records to the counterparty of each transaction, which should negatively impact the observed throughput rate.</p><p>The code in its current form is not optimized for performance. We conclude that all current Bitcoin transactions can be handled by TrustChain using a single Android smartphone if creation of trust and global consensus did not require a computational intensive mechanism.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2.">NetFlow Performance</head><p>We now focus on the performance of the NetFlow accounting mechanism discussed in Section 5, both from a theoretical and practical point of view.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2.1.">Computational Time Complexity</head><p>In order to compute the trustworthiness score of one other agent with Net-Flow, up to 2n + 1 max-flow computations are necessary, where n is the number of agents in a choice set. In case one would compute the scores of all other agents, 3n max-flow computations are needed. Hence, the performance of Net-Flow will depend on the max-flow algorithm used and then incur another factor n of computational complexity. This could be mitigated by finding a way to compute multiple flows at the same time. In this section, n denotes the number of agents and m denotes the number of edges in the network.</p><p>Well-known algorithms for max-flow calculation include Ford-Fulkerson, with computational complexity O(m|f |), where |f | is the magnitude of the maximum flow <ref type="bibr" target="#b28">[30]</ref>. This is a pseudo-polynomial algorithm, since the complexity depends on the magnitude of numbers in the instance. The Edmonds-Karp algorithm specifies the order in which augmenting paths are considered, namely by doing a breadth-first search <ref type="bibr" target="#b29">[31]</ref>. This allows the complexity to be pinned to O(nm 2 ). Dinitz' algorithm, (also known as Dinic's algorithm) functions in O(n 2 m)</p><p>or O(nm log(n)) if implemented with dynamic trees <ref type="bibr" target="#b30">[32]</ref>. Goldberg and Tarjan introduced the preflow-push algorithm <ref type="bibr" target="#b31">[33]</ref> which has a worst-case complexity of O(n 2 m). Again, this can be reduced to O(nm log n 2 m ) by using dynamic trees. Work by King, Rao and Tarjan has resulted in an algorithm of order O(nm log m n log(n) n) <ref type="bibr" target="#b32">[34]</ref>. In combination with work by Orlin, this results in an O(nm) algorithm for max-flow <ref type="bibr" target="#b33">[35]</ref>. This is the current state-of-the-art when considering single source-sink max-flow computations.</p><p>When we consider all-pairs max-flow, one might think a speed-up is possible.</p><p>Building a Gomory-Hu tree yields a method for which n -1 max-flow computations suffice <ref type="bibr" target="#b34">[36]</ref>, however, this method only works for undirected graphs (the interaction graph as described by Definition 2 is a directed graph). According to Ahuja, Magnati and Orlin, no method is known for all-pairs max-flow on directed graphs that uses less than O(n 2 ) max-flow computations <ref type="bibr" target="#b35">[37]</ref>. This work is from 1993, and to the best of our knowledge this has not changed since.</p><p>Note that for the application of NetFlow, it would be necessary to compute all flows with one fixed sink or one fixed source, which is not quite the same as the all-pairs max-flow problem.</p><p>The above research implies that using state of the art algorithms, a NetFlow algorithm implemented with current state-of-the-art algorithms would be at least O(n 2 m) in the worst case. Our implementation uses the preflow-push algorithm, yielding a worst case complexity of O(n 3 m).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2.2.">Real-World Deployment and Experimentation</head><p>Next, we focus on the evaluation of the Sybil-resistant NetFlow mechanism.</p><p>We have conducted a public experiment in which 917 volunteers recruited from the Internet participated in our open one-month study. These volunteers in-  stalled and used our YouTube-like video-on-demand platform, called Tribler <ref type="bibr" target="#b36">[38]</ref>.</p><p>This software is part of our long running "bandwidth-as-a-currency" research line, with a first operational system deployed in August 2007 <ref type="bibr" target="#b37">[39]</ref>. In prior experimental work we collaborated with Wikipedia.org and enabled bandwidth donations to their website <ref type="bibr" target="#b38">[40]</ref>.   the value of α, we value contributions from other agents higher. Upon inspection of Figure <ref type="figure" target="#fig_14">11</ref>, several interesting observations can be identified. Increasing the scaling factor α does indeed increase the informativeness of the mechanism, resulting in more non-zero scores for agents. In particular, note that for α = 1 many of the agents with higher upload and download values have a zero score. This is likely due to the fact that scores of agents are not high if their contributions are limited by the consumption and contribution of the agent that performs computation of NetFlow scores. This effect decreases significantly when we increase α: for α = 2 and α = 4, agents with absolute higher amounts of upload and download will often be assigned a positive score.</p><p>Increasing the value of α does come at a cost. It can be observed that for α = 1 no agents that have a ratio of upload/download significantly below 1, have a positive score. On the contrary, for higher values of α, agents that contribute less than the calculating agent might still have a non-zero score if they have contributed about the same or more in absolute terms.</p><p>Let us now consider the informativeness of the NetFlow mechanism. If too many users are assigned a zero score, the mechanism does not accurately yield a ranking. Figure <ref type="figure" target="#fig_17">12</ref> provides informativeness curves with different values for α.</p><p>This is constructed as follows: for each agent, the fraction of agents that have a positive score is computed. The lines in the plot are these fractions ordered from low to high. One part of the population will never be able to increase the informativeness by scaling. Hence, Figure <ref type="figure" target="#fig_17">12b</ref> shows the same data, excluding agents that have not downloaded any data. Observe that as α increases, so does the informativeness. Furthermore, for a higher value of α the set of agents with zero informativeness decreases in size. Also note that there is quite a sharp jump from 0 informativeness to around 0.7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">Conclusions</head><p>We demonstrated the viability for a new direction in blockchain research by proposing a generic method to create trust. We enable new areas of blockchain usage, centred around the notion of trusted transactions. Our TrustChain work uses tamper-proof, temporal ordered and cryptographically signed transaction records to create irrefutable proof of past interactions. By using a data structure that is resilient against various kinds of malicious behaviour, we illustrated it is possible to accurately record community contributions by agents. This enables mechanisms of self-reinforcing trust, by preferring contributions to agents who have been helpful to others in the past.</p><p>TrustChain in general is designed to be a scalable solution, in the current Python-based unoptimized form capable of processing around 210 transactions per second using modern hardware. The architecture avoids the double spending problem and does not require proof-of-work mechanisms, global transaction broadcasts, leadership elections, permissions, sharding or a central authority.</p><p>Our key defence against attacks is NetFlow. The NetFlow accounting mechanism yields a Sybil-resistant model to calculate the trustworthiness of agents and guarantees that agents who take resources from the community also con- </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>(a) When two parties transact, they both cryptographically sign the transaction. (b) Transactions can be chained together in a tamperproof manner where each block points back towards the previous block. (c) To increase the resistance against tampering, each block also references a block in the chain of the counterparty. This ensures that each block has two incoming and two outgoing pointers.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Example of the block creation process when agents A and B have participated in a transaction.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: The tamper-proof TrustChain data structure to record transactions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: An interaction graph involving three agents. In this graph, agent p contributed a total of 9 units work to agent r.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: A NetFlow computation performed from the perspective of agent r. The node capacities c and assigned scores S M are indicated for each agent in the subjective work graph.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 : A 2 -</head><label>52</label><figDesc>Figure 5: A 2-NetFlow computation performed from the perspective of agent r. The node capacities c and assigned scores S M are indicated for each agent in the subjective work graph.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: An example of a double spending attack performed by agent A. Two blocks with the same prior pointer are created. Agent A wishes to hide the dashed block.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 7 :Figure 8 :</head><label>78</label><figDesc>Figure 7: An example of a replay attack performed by agent M . The dashed blocks contain the same transaction data and signatures.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>375 Definition 10 (</head><label>10</label><figDesc>Sybil attack). Given a subjective work graph</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: Transaction throughput on various mobile Android devices.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: Transaction throughput on various personal computers.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 9</head><label>9</label><figDesc>Figure 9 shows the required time to create and store 25.000 TrustChain transactions on various types of mobile devices. Figure 10 illustrates the transaction throughput during same experiment, performed on personal computers. The horizontal axis denotes the time into the experiment in seconds while the vertical axis specifies the number of TrustChain transactions that have been processed. The experiment performed on mobile devices uses five Android-based devices to demonstrate the usability of TrustChain on low-cost and aged hardware, namely a Nexus 10 tablet (2012), a Samsung Galaxy S3 (2012), a Nexus 5 (2013), a Nexus 6 (2014) and a Samsung Galaxy S6 (2015). For the experiment that considers personal computers, we used an iMac (2013), a Macbook</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 11 :</head><label>11</label><figDesc>Figure 11: The NetFlow trustworthiness scores from the perspective of several agents. The size of bubbles indicate the assigned scores (different scales across plots). The red bubble specifies the computing agent. For each agent, we consider NetFlow computations with α = 1, α = 2 and α = 4.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head></head><label></label><figDesc>Each of our volunteers operated a TrustChain implementation, created his own genesis block upon installing our software, and automatically advertised this publicly on the network. The 917 discovered genesis blocks may not necessarily belong to unique individuals, since users may purposefully delete their identity or users may have installed the software on multiple machines. Within our Tribler video streaming application users pool their bandwidth together and share it with others in a peer-to-peer fashion. When a volunteer gives bandwidth or takes bandwidth from any other volunteer within our study, it is cryptographically signed and recorded on TrustChain as a transaction. We extracted a TrustChain dataset from the Tribler network.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Figure 11 presents</head><label>11</label><figDesc>Figure 11  presents the NetFlow scoring mechanism for two agents with different amounts of contributions, for three distinct values of α (α = 1, α = 2 and α = 4). These agents have been selected by sorting the list of agents by their total amount of uploaded data, and taking the agents at the 70th and 80th percentile respectively. For each volunteer we calculate NetFlow-based trustworthiness scores using the mechanism given in Definition 7 and we indicate each volunteer as a data-point. The horizontal axis denotes their bandwidth consumption from other agents in the community, and the vertical axis indicates their total bandwidth donation to others. The unit of both axes is megabyte (MB). The agent whose point of view is taken for the computation is marked red. Note that the scale of the bubbles varies between the different plots. This is due to the fact that absolute sizing would result in indiscernible bubbles for computations from the perspective of agents with lower absolute upload and download amounts.We first consider the influence of the NetFlow scaling parameter α and how informative the mechanism explained in Section 5 is. Recall that if we increase</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Figure 12 :</head><label>12</label><figDesc>Figure 12: Informativeness curves for α = 1, α = 2 and α = 4.</figDesc><graphic coords="30,133.74,185.65,171.86,132.66" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head></head><label></label><figDesc>tribute back. A formal proof is provided on the Sybil-resistance of NetFlow. Experimental results indicate that TrustChain is capable of freerider identification in online communities without any central authority. With a one-month experiment involving 917 volunteers we have shown the both practical applica-bility and level of maturity of this work. We demonstrated the effectiveness of the NetFlow algorithm and proven that the informativeness is high enough to classify agents based on contributions. It is straightforward to extend the data structure to support transactions between multiple parties by adding additional ingoing and outgoing pointers to the chains of all involved agents in the transaction. When we consider a transaction between n parties, each transaction block would contain n incoming and n outgoing pointers. Likewise, each transaction would be cryptographically signed by n entities. We envision a rich area of future research around trustworthiness using tamper-proof data structures. Future work will be focussed on a full-scale deployment of TrustChain in Tribler, maturing our work into an operational "bandwidth-as-a-currency" market inside Tribler, and formal verification of a consensus model under development.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>https://github.com/Tribler/tribler/tree/e744e2ca/Tribler/community/multichain</p></note>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Dr. Johan Pouwelse is an associate professor at Delft University of Technology, specialized in large-scale cooperative systems. During his PhD he created the first system for cooperative resource management for portable devices on Linux. This resulted in the first portable hardware and Linux driver capable of reducing CPU frequency and voltage from user-space in 2001. The driver got accepted into the Linux kernel and this architecture is still used by every Android and iOS device. Also, he conducted the first resource usage measurements for IEEE 802.11b, known now as wifi. After receiving his PhD, he conducted one of the largest measurements of the Bittorrent P2P network. He founded the Tribler video-on-demand client in 2005, it has been installed by 1.8 million people over the past decade. Tribler serves as a living laboratory and proving ground for nextgeneration self-organising systems research and ledger technology.</p><p>In 2007 his research team launched BarterCast, a primitive ledger. Dr. Pouwelse has (co-)authored over 129 scientific papers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Biography Johan Pouwelse (text)</head><p>Pim Otte received his Msc title from the Delft University of Technology in 2016. His research focussed on the trust problem in distributed systems where he proposed and investigated two Sybil-resistant algorithms that can be used in online communities to prevent freeriding.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Biography Pim Otte (text)</head><p>Martijn de Vos is a PhD student at Delft University of Technology where he performs research on a fully decentralised and self-regulated market. In 2016, he received his Msc degree and did research on technical debt in complex distributed software systems. He is also one of the lead developers of the Tribler video-on-demand client, installed by 1.8 million people over the past decade. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Biography</head></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<author>
			<persName><forename type="first">T</forename><surname>Economist</surname></persName>
		</author>
		<ptr target="http://www.economist.com/news/leaders/21677198-technology-behind-bitcoin-could-transform-how-economy-works-trust-machine" />
		<title level="m">The promise of the blockchain: The trust machine</title>
		<imprint>
			<date type="published" when="2015-12-30">2015. December 30, 2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">World Economic Forum, The future of financial infrastructure</title>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<author>
			<persName><surname>Bank</surname></persName>
		</author>
		<author>
			<persName><surname>England</surname></persName>
		</author>
		<title level="m">One bank research agenda</title>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Bitcoin: A peer-to-peer electronic cash system</title>
		<author>
			<persName><forename type="first">S</forename><surname>Nakamoto</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">FBI Says It&apos;s Seized 28.5 Million In Bitcoins From Ross Ulbricht, Alleged Owner Of Silk Road</title>
		<author>
			<persName><forename type="first">A</forename><surname>Greenberg</surname></persName>
		</author>
		<ptr target="http://www.r3cev.com" />
	</analytic>
	<monogr>
		<title level="m">The R3 consortium</title>
		<imprint>
			<date type="published" when="2013-05-19">2013. May 19, 2017</date>
			<biblScope unit="page" from="2017" to="2022" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">On scaling decentralized blockchains</title>
		<author>
			<persName><forename type="first">K</forename><surname>Croman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Decker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Eyal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">E</forename><surname>Gencer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Juels</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kosba</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Saxena</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Gün</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 3rd Workshop on Bitcoin and Blockchain Research</title>
		<meeting>3rd Workshop on Bitcoin and Blockchain Research</meeting>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Bitcoin-ng: A scalable blockchain protocol</title>
		<author>
			<persName><forename type="first">I</forename><surname>Eyal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">E</forename><surname>Gencer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">G</forename><surname>Sirer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Van Renesse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">13th USENIX Symposium on Networked Systems Design and Implementation</title>
		<imprint>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="45" to="59" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Inclusive block chain protocols</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Lewenberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Sompolinsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zohar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Financial Cryptography and Data Security</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="528" to="547" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Secure high-rate transaction processing in bitcoin</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Sompolinsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zohar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Financial Cryptography and Data Security</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="507" to="527" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The sybil attack</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Douceur</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">st International Workshop on Peer-To-Peer Systems (IPTPS)</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">The value of reputation on eBay: A controlled experiment</title>
		<author>
			<persName><forename type="first">P</forename><surname>Resnick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Zeckhauser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Swanson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Lockwood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Experimental economics</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="79" to="101" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">What makes a helpful review? a study of customer reviews on amazon. com</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Mudambi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Schuff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">MIS quarterly</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="185" to="200" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">The pagerank citation ranking: bringing order to the web</title>
		<author>
			<persName><forename type="first">L</forename><surname>Page</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Brin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Motwani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Winograd</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">G</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Carlyle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Grigg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hearn</surname></persName>
		</author>
		<title level="m">Corda: An introduction, R3 CEV</title>
		<imprint>
			<date>August</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">An analysis of social network-based sybil defenses</title>
		<author>
			<persName><forename type="first">B</forename><surname>Viswanath</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Post</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">P</forename><surname>Gummadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Mislove</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGCOMM Computer Communication Review</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="page" from="363" to="374" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">SybilGuard: defending against sybil attacks via social networks</title>
		<author>
			<persName><forename type="first">H</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Kaminsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Gibbons</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Flaxman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM Computer Communication Review</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="267" to="278" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">SybilLimit: A near-optimal social network defense against sybil attacks</title>
		<author>
			<persName><forename type="first">H</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">B</forename><surname>Gibbons</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Kaminsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Xiao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium on Security and Privacy (SP)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="3" to="17" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Detecting sybil nodes using social networks</title>
		<author>
			<persName><forename type="first">G</forename><surname>Danezis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Mittal</surname></persName>
		</author>
		<author>
			<persName><surname>Sybilinfer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
			<publisher>NDSS</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Using social networks to overcome sybil attacks</title>
		<author>
			<persName><forename type="first">I</forename><surname>Keidar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGACT News</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="page" from="79" to="101" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">SumUp: Sybil-resilient online content voting</title>
		<author>
			<persName><forename type="first">N</forename><surname>Tran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Min</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Subramanian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th USENIX Symposium on Networked Systems Design and Implementation</title>
		<meeting>the 6th USENIX Symposium on Networked Systems Design and Implementation</meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Bartercast: A practical approach to prevent lazy freeriding in P2P networks</title>
		<author>
			<persName><forename type="first">M</forename><surname>Meulpolder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pouwelse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Epema</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Sips</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE International Symposium on Parallel &amp; Distributed Processing</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Improved accuracy and coverage in the bartercast reputation mechanism</title>
		<author>
			<persName><forename type="first">R</forename><surname>Delaviz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Andrade</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Epema</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pouwelse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th annual conference of the Advanced School for Computing and Imaging</title>
		<meeting>the 16th annual conference of the Advanced School for Computing and Imaging<address><addrLine>Veldhoven, the Netherlands</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010">November 1-3, (2010</date>
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Accounting mechanisms for distributed work systems</title>
		<author>
			<persName><forename type="first">S</forename><surname>Seuken</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">C</forename><surname>Parkes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 24th AAAI Conference on Artificial Intelligence</title>
		<meeting>the 24th AAAI Conference on Artificial Intelligence</meeting>
		<imprint>
			<publisher>AAAI Press</publisher>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Sybil-proof accounting mechanisms with transitive trust</title>
		<author>
			<persName><forename type="first">S</forename><surname>Seuken</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">C</forename><surname>Parkes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2014 international conference on Autonomous agents and multi-agent systems, International Foundation for Autonomous Agents and Multiagent Systems</title>
		<meeting>the 2014 international conference on Autonomous agents and multi-agent systems, International Foundation for Autonomous Agents and Multiagent Systems</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="205" to="212" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Trust-based collection of information in distributed reputation networks</title>
		<author>
			<persName><forename type="first">D</forename><surname>Gkorou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pouwelse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Epema</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 30th Annual ACM Symposium on Applied Computing</title>
		<meeting>the 30th Annual ACM Symposium on Applied Computing</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="2312" to="2319" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Targeted and scalable information dissemination in a distributed reputation mechanism</title>
		<author>
			<persName><forename type="first">R</forename><surname>Delaviz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pouwelse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Epema</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the seventh ACM workshop on Scalable trusted computing</title>
		<meeting>the seventh ACM workshop on Scalable trusted computing</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="55" to="66" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<author>
			<persName><forename type="first">P</forename><surname>Otte</surname></persName>
		</author>
		<title level="m">Sybil-resistant trust mechanisms in distributed systems</title>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Attack-resilient media using phone-to-phone networking</title>
		<author>
			<persName><forename type="first">P</forename><surname>Brussee</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Maximal flow through a network</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">R</forename><surname>Ford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">R</forename><surname>Fulkerson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Canadian journal of Mathematics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="399" to="404" />
			<date type="published" when="1956">1956</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Theoretical improvements in algorithmic efficiency for network flow problems</title>
		<author>
			<persName><forename type="first">J</forename><surname>Edmonds</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">M</forename><surname>Karp</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the ACM (JACM)</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="248" to="264" />
			<date type="published" when="1972">1972</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Dinitz&apos; algorithm: The original version and Even&apos;s version, in: Theoretical computer science</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Dinitz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006">2006</date>
			<publisher>Springer</publisher>
			<biblScope unit="page" from="218" to="240" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">A new approach to the maximum-flow problem</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">V</forename><surname>Goldberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">E</forename><surname>Tarjan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the ACM (JACM)</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="921" to="940" />
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">A faster deterministic maximum flow algorithm</title>
		<author>
			<persName><forename type="first">V</forename><surname>King</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Tarjan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the third annual ACM-SIAM symposium on Discrete algorithms</title>
		<meeting>the third annual ACM-SIAM symposium on Discrete algorithms</meeting>
		<imprint>
			<date type="published" when="1992">1992</date>
			<biblScope unit="page" from="157" to="164" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">B</forename><surname>Orlin</surname></persName>
		</author>
		<title level="m">Proceedings of the forty-fifth annual ACM symposium on Theory of computing</title>
		<meeting>the forty-fifth annual ACM symposium on Theory of computing</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="765" to="774" />
		</imprint>
	</monogr>
	<note>Max flows in o (nm) time, or better</note>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Multi-terminal network flows</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">E</forename><surname>Gomory</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">C</forename><surname>Hu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the Society for Industrial and Applied Mathematics</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="551" to="570" />
			<date type="published" when="1961">1961</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">K</forename><surname>Ahuja</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">L</forename><surname>Magnanti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">B</forename><surname>Orlin</surname></persName>
		</author>
		<title level="m">Network flows: theory, algorithms</title>
		<imprint/>
	</monogr>
	<note>and applications</note>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Tribler: a social-based peer-to-peer system</title>
		<author>
			<persName><forename type="first">J</forename><surname>Pouwelse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Garbacki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bakker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Iosup</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Epema</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Reinders</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Van Steen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Sips</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Concurrency and Computation: Practice and Experience</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="127" to="138" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<author>
			<persName><forename type="first">C</forename><surname>Barras</surname></persName>
		</author>
		<ptr target="http://news.bbc.co.uk/2/hi/technology/6971904.stm" />
		<title level="m">File-sharers forced to play fair</title>
		<imprint>
			<date type="published" when="2007-12-27">2007. accessed December 27, 2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Online video using bittorrent and html5 applied to wikipedia</title>
		<author>
			<persName><forename type="first">A</forename><surname>Bakker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Petrocco</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dale</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Gerber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Grishchenko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Rabaioli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pouwelse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Tenth International Conference on Peer-to-Peer Computing</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2010">2010. 2010</date>
			<biblScope unit="page" from="1" to="2" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
