<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Testing for Missing-Gate Faults in Reversible Circuits</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">John</forename><forename type="middle">P</forename><surname>Hayes</surname></persName>
							<email>jhayes@eecs.umich.edu</email>
							<affiliation key="aff0">
								<orgName type="laboratory">Advanced Computer Architecture Laboratory</orgName>
								<orgName type="institution">University of Michigan</orgName>
								<address>
									<postCode>48109-2122</postCode>
									<settlement>Ann Arbor</settlement>
									<region>MI</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">Albert-Ludwigs-University Georges-Köhler-Allee</orgName>
								<address>
									<postCode>51 79110</postCode>
									<settlement>Freiburg i. Br</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Ilia</forename><surname>Polian</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">Albert-Ludwigs-University Georges-Köhler-Allee</orgName>
								<address>
									<postCode>51 79110</postCode>
									<settlement>Freiburg i. Br</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Bernd</forename><surname>Becker</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">Albert-Ludwigs-University Georges-Köhler-Allee</orgName>
								<address>
									<postCode>51 79110</postCode>
									<settlement>Freiburg i. Br</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Testing for Missing-Gate Faults in Reversible Circuits</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">897BC5A5A40943F8CFA4FE8A71CAAC0A</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T02:19+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Reversible circuits</term>
					<term>quantum circuits</term>
					<term>fault models</term>
					<term>missing gate faults</term>
					<term>design for test</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Logical reversibility occurs in low-power applications and is an essential feature of quantum circuits. Of special interest are reversible circuits constructed from a class of reversible elements called k-CNOT (controllable NOT) gates. We review the characteristics of k-CNOT circuits and observe that traditional fault models like the stuck-at model may not accurately represent their faulty behavior or test requirements. A new fault model, the missing gate fault (MGF) model, is proposed to better represent the physical failure modes of quantum technologies. It is shown that MGFs are highly testable, and that all MGFs in an N -gate k-CNOT circuit can be detected with from one to N/2 test vectors. A design-for-test (DFT) method to make an arbitrary circuit fully testable for MGFs using a single test vector is described. Finally, we present simulation results to determine (near) optimal test sets and DFT configurations for some benchmark circuits.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Reversible circuits are n-input, n-output circuits in which every input pattern maps to a unique output pattern, thus enabling inputs to be determined from outputs. They are of interest because of their applications in extremely lowpower circuit design <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2]</ref> and quantum computation <ref type="bibr" target="#b0">[1]</ref>. In the latter case, reversibility is a necessary requirement of all operations, and non-quantum or "classical" reversible circuits form an important subclass of the quantum circuits. Reversible circuits can be based on many different physical phenomena, which generally fall under the nanotechnology heading. The testing of classical reversible circuits has been considered previously with respect to conventional fault models, in particular, the stuck-at model <ref type="bibr" target="#b2">[3]</ref>. Patel et al. <ref type="bibr" target="#b3">[4]</ref> have shown that such circuits are generally much easier to test than irreversible ones. For example, very few test vectors are needed to cover all single stuck-at faults, and detection of all single faults guarantees detection of all the corresponding multiple faults. However, as we explain, the stuck-at and other classical fault models are difficult to justify physically in the quantum domain. Here we propose and investigate  <ref type="bibr" target="#b4">[5]</ref> a very different fault model called the missing-gate (MGF) model, which is better suited to quantum technologies, and may have non-quantum applications as well.</p><p>As in <ref type="bibr" target="#b3">[4]</ref>, we only consider circuits composed of reversible elements called k-CNOT gates. Figure <ref type="figure" target="#fig_0">1</ref> shows an example using standard notation. As usual, the input signals are assumed to enter at the left side of the circuit. This figure consists of four horizontal lines denoting signal-carrying wires, and 17 vertical lines denoting gate operations. A general k-CNOT has k + 1 inputs and outputs, k of which are control nodes c 1 , c 2 , . . . , c k denoted by black dots, while the remaining input-output pair t defines the target node denoted by a ring-sum. With classical binary signal values, a k-CNOT implements the Boolean function</p><formula xml:id="formula_0">c 1 , c 2 , . . . , c k , t → c 1 , c 2 , . . . , c k , (c 1 • c 2 • • • c k ) ⊕ t (1)</formula><p>implying that the output t is inverted iff all the control inputs are 1. In quantum computations, a k-CNOT can perform the same operation on superimposed quantum states. The leftmost gate in Figure <ref type="figure" target="#fig_0">1</ref>  In an obvious way, we can associate a stuck-at-0 or a stuck-at-1 fault with each wire segment connected to the input and output sides of any node in a k-CNOT. With these assumptions, such traditional testing tasks as finding a complete, and possibly minimal, test set for stuck-at faults can be addressed.</p><p>As mentioned already, a variety of nanotechnologies are being actively investigated for implementing quantum circuits <ref type="bibr" target="#b0">[1]</ref>. Several of these use quantum states of (sub)atomic particles-spin-up and spin-down, for instance-to represent information in the form of qubits (quantum bits). These essentially static states are modified by dynamic electromagnetic (EM) pulses that implement gate functions like CNOT. For example, in trapped-ion technology, qubits are individual atoms whose electric charge states are altered by directing laser pulses of precise frequency and duration at them under control of a (classical) computer. In contrast, conventional IC technologies employ static gates and dynamic information-carrying signals. Thus in the quantum case, the "gates" appearing in circuit diagrams like Figure <ref type="figure" target="#fig_0">1</ref> often represent EM pulses, while the "wires" indicate the order in which the gate operations are applied. This casts serious doubt on the applicability of wire-oriented classical faults, like stuck-at or bridging faults <ref type="bibr" target="#b2">[3]</ref> to quantum or quantumlike circuits. Furthermore, a qubit's value takes the form conventionally written in the vector notation</p><formula xml:id="formula_1">ψ = a 0 1 0 + a 1 0 1<label>(2)</label></formula><p>which denotes a superposition of logical 0 and 1. The coefficients a 0 and a 1 in Equation ( <ref type="formula" target="#formula_1">2</ref>) are complex numbers (probability amplitudes), and so are continuous or analog quantities. Quantum gate operations are represented mathematically by unitary matrices. The question then arises: How should faults in quantum circuits be represented? In view of the large number of physical implementation technologies now under consideration, good fault models should be largely technology-independent and computationally tractable. Previously suggested models include unitary error matrices <ref type="bibr" target="#b5">[6]</ref> and various physically motivated digital and analog models <ref type="bibr" target="#b6">[7]</ref>, most of which are substantially less tractable and scalable than the stuck-at model.</p><p>We can analyze quantum faults by making a few, very general physical observations:</p><p>• Gate operations are pulse-like, localized and microscopic in scale.</p><p>• Errors are caused by faults affecting the length, energy, or direction (spatial alignment) of the pulses.</p><p>Dependence on short-range local interactions among qubits tends to limit gate size, so k-CNOTs may be restricted to small values of k, such as k = 0, 1 and 2. Pulse energy is proportional to frequency in the quantum domain, and current flow squared in the classical domain. Experience with a prototype quantum processor based on NMR (nuclear magnetic resonance) technology suggests that the specification and implementation of the gate operations, in this case, hundreds of RF pulses of precise length and frequency, was a major design challenge requiring extensive computer simulation as well as physical trial-and-error <ref type="bibr" target="#b7">[8]</ref>. Table <ref type="table">1</ref> lists some fault types suggested by the foregoing observations. Here G k denotes a k-(qu)bit gate operation, and I k is the k-(qu)bit identity operation or "no-op". While fault models of this kind are necessarily speculative, they are technologyindependent in that they capture common features of known technologies. Moreover, they can readily be augmented with temporal and probabilistic attributes to capture sequential and nondeterministic effects, if desired. Of particular interest, is the missing-gate fault (MGF) model, defined as the complete removal of a gate operation, or equivalently, replacement of the gate by a set of wires. This implies that a k-(qu)bit gate's matrix G k is replaced by the corresponding identity matrix I k . For example, an MGF affecting a CNOT causes the following functional change:</p><formula xml:id="formula_2">   1 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0    →    1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1   <label>(3)</label></formula><p>Note that an n-wire system implies a 2 n -dimensional vector space. Hence, the CNOT matrix in (3) transforms 4dimensional (column) vectors of the form [a 00 a 01 a 10 a 11 ] T to [a 00 a 01 a 11 a 10 ] T . We will show in Section 2 that the other fault models defined in Table <ref type="table">1</ref> are covered by the MGF model, so we will focus entirely on the latter. The remainder of the paper is organized as follows. Section 2 examines the basic testing properties of MGFs in k-CNOT circuits. Bounds on the size of complete MGF test sets are considered in Section 3, while Section 4 describes a low-overhead DFT method to achieve the lower bound of one test vector. Section 5 presents simulation experiments to determine optimal or near-optimal test sets and DFT configurations for benchmark circuits.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Testability</head><p>We begin by examining the basic testing requirements and properties of MGFs in k-CNOT circuits containing n &gt; k wires and N gates. We assume that at most one gate can be</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fault type</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Abstract model Possible corresponding physical defect</head><p>Missing gate</p><formula xml:id="formula_3">G k → I k Short, missing, misaligned or mistuned gate pulses Repeated gate G k → G k × G k Long or duplicated gate pulses Reduced gate G k → G k-1</formula><p>Partially misaligned or mistuned gate pulses Table <ref type="table">1</ref>: Some possible fault types in quantum-style circuits faulty at a time, and that faulty signals are detected (measured) only at the circuit's primary (rightmost) outputs. We make no distinction between different types of input/output lines such as non-functional "garbage" lines <ref type="bibr" target="#b0">[1]</ref>. Unless otherwise stated, a test for a k-CNOT will be assumed to have the structure c 1 c 2 . . . c k t with the t-node value on the right. It follows immediately from the definition (1) of a k-CNOT that input pattern P produces the identical output pattern P in all but the two cases when c 1 c 2 . . . c k = 11 . . . 1, which perform the non-identity mapping</p><formula xml:id="formula_4">11 . . . 1t → 11 . . . 1t</formula><p>Hence, to distinguish a k-CNOT from a k-wire identity function requires application of an input pattern of the form 111. . . 10 or 111. . . 11. To test a circuit for MGFs, it is necessary and sufficient to apply one pattern of the form 111. . . 1t to every gate. Note that the reversibility property ensures that a signal change (error) occurring at any node must propagate to the circuit's primary outputs. Reversibility also guarantees that all MGFs can be detected, so no redundant faults can occur. The number of tests required to detect all MGFs is obviously between one and N , the number of gates. For example, hwb4 (Figure <ref type="figure" target="#fig_0">1</ref>) has two tests {1110, 1011}, which detect all MGFs; see Figure <ref type="figure">2</ref>. It is easily verified that every gate in this circuit has one of its required MGF tests applied to it.</p><p>It is instructive to compare the testing requirements of MGFs with those of other fault models. Stuck-at faults require two patterns to be applied to every gate; it is necessary and sufficient for detection of all such faults that 0 and 1 be applied at least once to every line. For example, a k-CNOT can be tested for all stuck-at faults by applying a complementary pair of tests such as 010. . . 10 and 101. . . 01 to it. However, unlike the MGF test 111. . . 1t, these stuck-at tests do not exercise the gate's key inversion operation. In fact, 010. . . 10, 101. . . 01 is a "passive" test set, which could equally well serve to test a set of k + 1 wires for stuck-at faults.</p><p>Consider the other fault models appearing in Table <ref type="table">1</ref>. Every k-CNOT operation G k is its own inverse, i.e., G k ×G k = I k , so the missing and repeated gate faults are essentially equivalent. In the case of the reduced gate fault G k → G k-1 , one c-node, say the topmost one, changes to a wire, so that (1) becomes  <ref type="figure" target="#fig_0">1</ref> and<ref type="figure">2</ref> with the gates labeled 1 through 17 from left to right. Gate 6 is clearly dominated by its neighbors, gates 5 and 7, since the c-nodes of gate 6 contain those of the other two gates. On the other hand, gates 6 and 9 are independent because an MGF test for both would force gate 8, which lies between them, to invert the value of wire d (lowermost in the figure), producing complementary values on the d control nodes of gates 6 and 9. Hence these gates have no test in common. Gates 6 and 9 are independent implying that at least two tests are required by hwb4. Consequently, the test set {1110, 1011} shown in Figure <ref type="figure">2</ref> is optimal in size.</p><formula xml:id="formula_5">c 1 , c 2 , . . . , c k , t → c 1 , c 2 , . . . , c k , (c 2 • c 3 • • • c k ) ⊕ t</formula><p>In <ref type="bibr" target="#b3">[4]</ref>, it is proven that a test set that detects all single stuck-at faults in a k-CNOT circuit also detects all multiple stuck-at faults. The example in Figure <ref type="figure">3</ref> demonstrates that this property does not hold for MGFs. The test vector 110 (Figure <ref type="figure">3(a)</ref>) detects the two possible single MGFs in this circuit, but if both gates are missing, the values at the circuit's outputs are identical to the fault-free case. On the other hand, the vector 100 (Figure <ref type="figure">3b</ref>)) detects the multiple MGF (both gates missing), but only one of the single MGFs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Test Set Size</head><p>An arbitrary test set consisting of at least 2 n-1 + 1 vectors is shown in <ref type="bibr" target="#b3">[4]</ref> to detect all the stuck-at faults in a k-CNOT circuit with n wires. Using similar reasoning, any test set of size 2 n -2 n-kmax + 1 can be proven to detect all the MGF faults, where k max is the maximum number of control nodes of any CNOT gate in the circuit. Consider, for instance, a k-CNOT gate, with k ≤ k max . The MGF for this gate is detected iff at least one of its vectors applies 1 to all k of its control inputs. Due to reversibility, different vectors at the circuit's inputs will result in different values on the n wires preceding the gate under consideration. Consequently, 2 n-k out of 2 n possible vectors detect the fault. At least one of these 2 n-k vectors must be contained in a set of cardinality</p><formula xml:id="formula_6">2 n -2 n-kmax + 1 &gt; 2 n -2 n-km .</formula><p>Patel et al. <ref type="bibr" target="#b3">[4]</ref> also give two upper bounds for the size of a stuck-at test set. In the MGF case, we have the trivial upper bound of N test vectors for an N -gate circuit. For two consecutive gates in the circuit there is always a test vector that detects the MGFs in both these gates, namely, the vector that justifies 1 values on all n wires between the gates, ensuring that 1 is applied to all control inputs of both gates. Taking this into consideration, the upper bound on test set size becomes N/2 .</p><p>Many reversible benchmark circuits, including an adder design of an arbitrary width <ref type="bibr" target="#b8">[9]</ref>, turn out to be testable by just two vectors. This suggests the question of whether there are test sets of constant or logarithmic size for an arbitrary circuit. Next we construct a circuit that requires a number of tests that is linear in its number of gates, suggesting that the above upper bound is tight.</p><p>Let l be an arbitrary number greater than 1. The circuit in question has n = log 2 l + 1 wires and l (n -1)-CNOT gates B 1 through B l , with the target nodes on the lowermost wire, and l -1 inverters (0-CNOT gates) placed between the gates B i . Figure <ref type="figure">4</ref> shows the circuit for l = 8. In general, an inverter is placed on the first (uppermost) wire after every second B i starting with B 1 ; it is placed on wire 2 after every fourth B i , starting with B 2 ; on wire 3 after every eighth B i , starting with B 4 and, in general, on wire j on every 2 j th B i starting with B 2 j-1 .</p><p>The circuit constructed in this way requires l tests, because all B i 's are pairwise independent, meaning that no test vector can detect the MGFs for both B i and B j simultaneously, i = j. This is because to detect the MGF wrt B i (B j ), the uppermost n -1 wires preceding B i (B j ) must assume the value 1. However, it can be seen from the construction that the number of inverters between any two of B i 's is odd for at least one wire. Consequently, the all-1 vector cannot be justified for more than one gate simultaneously. Overall, the circuit has N = 2l -1 gates and requires l = N/2 tests, which is exactly the upper bound derived above. So, this upper bound is sharp for general reversible circuits.</p><p>While the lower bound for the number of tests required to detect all stuck-at faults in a k-CNOT circuit is two, there are circuits that can be tested for all MGFs with only one test vector. In the next section, we show a way to transform an arbitrary circuit into such a circuit.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Design for Testability</head><p>Next we demonstrate how, by adding one wire and several 1-CNOT gates, an arbitrary circuit can be made testable for all MGFs with a single vector. The method starts with any vector applied to the original circuit, and systematically constructs DFT logic which enables this test vector to detect all MGFs. By conditionally inverting the values at gates that correspond to undetected faults, all detection conditions can be met simultaneously.</p><p>Figure <ref type="figure" target="#fig_3">5</ref> shows the circuit hwb4 made testable for the pattern 1011. The extra wire is denoted DF T . When 0 is applied to the DF T input, the circuit's function is unchanged (normal operation mode). When 1 is applied to DF T , some of the circuit's signals are inverted such that all the control inputs of all the gates are set to 1 (test mode). Consider the third gate from the left in the original circuit. Simulation of the vector 1011 (which is shown in the lower part of Figure <ref type="figure">2</ref>) results in a 0 being applied to its control input, thus violating the detection condition for the corresponding MGF. Inserting a 1-CNOT gate inverts this value (while in test mode) and ensures the testability of the MGF corresponding to this gate; the same holds for four subsequent gates. However, doing so leads to a violation of the detection condition for the 3-CNOT gate that is eighth from the left in the original circuit, requiring insertion of a 1-CNOT gate before that gate. This process continues until the outputs of the circuit are reached.</p><p>For an arbitrary circuit, an arbitrary vector is simulated and a 1-CNOT gate is added before the first control node from the left with a 0 value. Then the simulation is continued starting from the modified location; the leftmost control input with 0 value is identified, and another 1-CNOT gate is inserted. This is iterated until all the control nodes of all the gates have 1 values applied to them. Note that inserting the 1-CNOT gates may have impact on other gates in the circuit as well; simulating hwb4 once and inserting the 1-CNOT gates at all control inputs with logic-0 values would not result in a correct solution. The values that differ from those in the circuit without DFT logic are encircled in Figure <ref type="figure" target="#fig_3">5</ref>. Note that the DFT gates themselves have 1's on their control inputs, hence all MGFs associated by them are detected.</p><p>While the foregoing method works with any test vector, it can be used to obtain a (unique) test vector that requires the minimum number of extra 1-CNOT gates, and so is optimal with respect to DFT. This vector can be determined as follows. The value applied to a wire is 1 when the number of target inputs to the left of the leftmost control input on that wire is zero or odd, and is 1 otherwise. Note that since all the control inputs assume the 1 value, all the target nodes invert the signals applied to them. For instance, 1011 is the optimal vector for hwb4. If the vector were, say, 1010, then a 1-CNOT gate would be required to ensure the detection of the MGF corresponding to the leftmost gate. The solution for the rest of the circuit would remain the same, so the insertion of the additional gate would have no benefit. The same argument holds for all other wires, so 1011 (or, for an arbitrary circuit, the vector calculated as outlined above) is optimal.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Experimental Results</head><p>We have implemented fault simulation, automatic test pattern generation (ATPG) and DFT synthesis for missing gate faults. Table <ref type="table" target="#tab_1">2</ref> summarizes the results obtained for the benchmark circuits given in <ref type="bibr" target="#b4">[5]</ref>, and a few reversible adders from <ref type="bibr" target="#b8">[9]</ref>. The first three columns of the table give the circuit's name, number of gates N (which under the MGF model is also the number of faults) and number of wires n.</p><p>We applied 1,000 random patterns to each circuit. 100% of faults are detected for all circuits (recall that MGFs cannot be redundant). The column "Vecs" contains the index of the last vector that detect a fault, and in the column "Req", the number of vectors that actually detect new faults is given. For instance, if the first vector detects some faults, the second vector detects no faults not detected by the first vector, and the third vector detects all the remaining faults, then the value of "Vecs" would be 3 and the value of "Req" would be 2.</p><p>Generally speaking, the gap between these two numbers is quite large for most circuits. This suggest that, similarly to classical circuits and stuck-at faults, some test patterns are effective in detecting large numbers of faults, and others are not. Consequently, deterministic ATPG can be expected to reduce test set size significantly. Given that the circuits are rather small, we were able to deploy ATPG algorithms that are more powerful than the standard methods for stuck-at faults that target one fault at a time.</p><p>The first approach we used is a greedy heuristic. It faultsimulates all 2 n possible test vectors and picks one that detects most faults. Then it determines for the remaining vectors how many yet-undetected faults they detect, and the best vector is selected. This process is iterated until no undetected faults are left. The second approach is an exact branch-andbound algorithm. The sizes of test sets calculated by the greedy and the branch-and-bound algorithms are given in the columns "Gr." and "B&amp;B", respectively. While the run times of the greedy algorithm were reasonable for all the tested circuits, this was not the case for the exact algorithm. For a few circuits, we could only prove that there is no complete test set consisting of V or fewer vectors; the highest known value of V is quoted in the table.</p><p>It can be seen that deterministic ATPG indeed leads to much more compact test sets. On the other hand, the quality of the results from the greedy algorithm is quite high: for most circuits, it determined optimal solutions. Overall, most benchmark circuits can be tested by a few vectors if deterministic ATPG is performed. Applying random vectors also results in detection of all faults, but the number of needed tests is much higher.</p><p>We also implemented the DFT synthesis procedure from Section 4 that makes a circuit testable by one vector. The number of additional 1-CNOT gates needed when the optimal vector is used is given in the penultimate column "Gates" of Table <ref type="table" target="#tab_1">2</ref>. (The algorithm to compute the optimal vector was introduced in Section 4). The last column of the table marked "%QC", is the overhead imposed by the DFT logic in terms of the quantum cost metric defined for k-CNOTs in <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b10">11]</ref>. The quantum cost of a 0-CNOT (an inverter) and a 1-CNOT is 1; it is 5 for a 2-CNOT; 13 for a 3-CNOT; 29 for a 4-CNOT; 61 for a 5-CNOT; 125 for a 6-CNOT; and 253 for a 7-CNOT, which is the largest gate that shows up in the benchmark circuits <ref type="bibr" target="#b4">[5]</ref>.</p><p>The fact that 1-CNOT gates are relatively inexpensive is advantageous for our DFT design. For instance, the sheer number of gates required for the circuit hwb7tc is quite high (more than 60% of gates in the circuit), but the actual overhead is only 3.34%. Overall, the overhead ranges between 0% (for those circuits that can be tested by one test vector without modification) and 16.67%. Such an overhead appears to us to be reasonable. The results for the adders from <ref type="bibr" target="#b8">[9]</ref> are shown in Table <ref type="table" target="#tab_2">3</ref>. As in <ref type="bibr" target="#b8">[9]</ref>, addi stands for an adder that adds two (i + 1)-bit numbers. It has i + 2 auxiliary wires that are necessary in order to make the circuit reversible, making a total of 3i + 4 wires. It can be shown that these adders can be completely tested by two vectors for an arbitrary value of i. Hence, we omit deterministic ATPG results for the adder case. Similarly to the other benchmark circuits, random pattern simulation fails to produce test sets of size close to the optimum (which is 2). The DFT overhead is around 8% for the adders.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusions</head><p>We have examined the testing requirements of reversible circuits composed of k-CNOT gates with respect to a new fault model, the MGF model. MGFs are motivated by certain technologies used in quantum computing. We have shown that MGFs are highly testable with relatively few test vectors. The number of tests can be reduced to one with a lowcost DFT method. In the context of reversible circuits, MGFs are comparable to stuck-at faults in computational complexity. MGFs appear to be less useful for testing irreversible circuits where a gate may have fewer outputs than inputs, and so cannot be replaced by a set of wires. However, MGFs may have applications to design verification of both reversible and irreversible circuits, since omitting a needed gate is a not infrequent design error <ref type="bibr" target="#b11">[12]</ref>. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure1: A reversible benchmark circuit hwb4 composed of 17 k-CNOT gates<ref type="bibr" target="#b4">[5]</ref> </figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>is a 1-CNOT gate, or simply a CNOT, with control d and target b; it realizes the function d, b → d, b⊕d. The sixth gate from the left is a 3-CNOT with control nodes b, c, d and target a. A 0-CNOT (not shown in the figure) is just an ordinary NOT gate or inverter.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :Figure 3 :</head><label>23</label><figDesc>Figure 2: Two tests that detect all MGFs in hwb4</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: DFT logic for hwb4 and vector 1011</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>Although an MGF test for the original gate G k is not always a test for the reduced gate G k-1 , it is worth noting that G k-1 Figure 4: Circuit requiring a linear number of testsdominates G k in the usual testing sense<ref type="bibr" target="#b2">[3]</ref>. Hence for many test generation purposes, the MGF model covers the other models of Table1, as asserted earlier.Dominance with respect to MGFs can be helpful during test generation. Another useful property is independence, where two gates are said to be independent if they cannot be tested simultaneously. To illustrate, consider again the circuit hwb4 in Figures</figDesc><table><row><cell>B 1</cell><cell>B 2</cell><cell>B 3</cell><cell>B 4</cell><cell>B 5</cell><cell>B 6</cell><cell>B 7</cell><cell>B 8</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 :</head><label>2</label><figDesc>Results for fault simulation, ATPG and DFT</figDesc><table><row><cell>Circuit</cell><cell cols="3">N n Random</cell><cell cols="2">ATPG</cell><cell>DFT cost</cell><cell>Circuit</cell><cell>N</cell><cell>n</cell><cell cols="2">Random</cell><cell cols="2">DFT cost</cell></row><row><cell></cell><cell></cell><cell cols="5">Vecs Req Gr. B&amp;B Gates %QC</cell><cell></cell><cell></cell><cell></cell><cell cols="4">Vecs Req Gates %QC</cell></row><row><cell>2of5d1</cell><cell>30 6</cell><cell>30</cell><cell cols="2">8 4</cell><cell>4</cell><cell>10 6.33</cell><cell>add1</cell><cell>28</cell><cell>7</cell><cell>13</cell><cell>5</cell><cell>3</cell><cell>7.89</cell></row><row><cell>2of5d2</cell><cell>26 7</cell><cell>12</cell><cell cols="2">6 2</cell><cell>2</cell><cell>5 12.50</cell><cell>add2</cell><cell>42</cell><cell>10</cell><cell>7</cell><cell>5</cell><cell>5</cell><cell>8.06</cell></row><row><cell>3 17tc</cell><cell>12 3</cell><cell>6</cell><cell cols="2">3 2</cell><cell>2</cell><cell>1 7.14</cell><cell>add3</cell><cell>56</cell><cell>13</cell><cell>12</cell><cell>6</cell><cell>7</cell><cell>8.14</cell></row><row><cell>4 49tc1</cell><cell>24 4</cell><cell>3</cell><cell cols="2">3 3</cell><cell>3</cell><cell>7 11.67</cell><cell>add4</cell><cell>70</cell><cell>16</cell><cell>7</cell><cell>7</cell><cell>9</cell><cell>8.18</cell></row><row><cell>5mod5tc</cell><cell>29 6</cell><cell>55</cell><cell cols="2">6 1</cell><cell>1</cell><cell>0 0.00</cell><cell>add5</cell><cell>84</cell><cell>19</cell><cell>8</cell><cell>6</cell><cell>11</cell><cell>8.21</cell></row><row><cell>6symd2</cell><cell>40 10</cell><cell>16</cell><cell cols="2">5 2</cell><cell>2</cell><cell>10 13.89</cell><cell>add6</cell><cell>98</cell><cell>22</cell><cell>13</cell><cell>7</cell><cell>13</cell><cell>8.23</cell></row><row><cell>9symd2</cell><cell>52 12</cell><cell>18</cell><cell cols="2">8 3</cell><cell>3</cell><cell>18 16.67</cell><cell>add7</cell><cell>112</cell><cell>25</cell><cell>11</cell><cell>7</cell><cell>15</cell><cell>8.24</cell></row><row><cell cols="6">ham15tc1 162 15 188 17 7 &gt; 2</cell><cell>47 1.84</cell><cell>add8</cell><cell>126</cell><cell>28</cell><cell>9</cell><cell>8</cell><cell>17</cell><cell>8.25</cell></row><row><cell>ham3tc</cell><cell>11 3</cell><cell>2</cell><cell cols="2">2 2</cell><cell>2</cell><cell>1 11.11</cell><cell>add9</cell><cell>140</cell><cell>31</cell><cell>8</cell><cell>7</cell><cell>19</cell><cell>8.26</cell></row><row><cell>ham7tc</cell><cell>38 7</cell><cell>12</cell><cell cols="2">6 4</cell><cell>4</cell><cell>5 5.95</cell><cell>add10</cell><cell>154</cell><cell>34</cell><cell>7</cell><cell>7</cell><cell>21</cell><cell>8.27</cell></row><row><cell>hwb4tc</cell><cell>25 4</cell><cell>6</cell><cell cols="2">4 2</cell><cell>2</cell><cell>7 10.77</cell><cell>add11</cell><cell>168</cell><cell>37</cell><cell>19</cell><cell>9</cell><cell>23</cell><cell>8.27</cell></row><row><cell>hwb5tc</cell><cell>66 5</cell><cell cols="3">23 12 5</cell><cell>5</cell><cell>38 10.80</cell><cell>add12</cell><cell>182</cell><cell>40</cell><cell>18</cell><cell>8</cell><cell>25</cell><cell>8.28</cell></row><row><cell>hwb6tc</cell><cell>138 6</cell><cell cols="3">59 19 9</cell><cell>8</cell><cell>83 5.42</cell><cell>add13</cell><cell>196</cell><cell>43</cell><cell>16</cell><cell>10</cell><cell>27</cell><cell>8.28</cell></row><row><cell>hwb7tc</cell><cell cols="6">305 7 115 32 15 &gt; 4 190 3.34</cell><cell>add14</cell><cell>210</cell><cell>46</cell><cell>8</cell><cell>8</cell><cell>29</cell><cell>8.29</cell></row><row><cell cols="2">mod5adders 33 6</cell><cell>18</cell><cell cols="2">5 3</cell><cell>3</cell><cell>8 6.40</cell><cell>add15</cell><cell>224</cell><cell>49</cell><cell>17</cell><cell>11</cell><cell>31</cell><cell>8.29</cell></row><row><cell>mod5d1</cell><cell>18 5</cell><cell>5</cell><cell cols="2">3 1</cell><cell>1</cell><cell>0 0.00</cell><cell>add16</cell><cell>238</cell><cell>52</cell><cell>17</cell><cell>10</cell><cell>33</cell><cell>8.29</cell></row><row><cell>mod5d2</cell><cell>19 5</cell><cell>4</cell><cell cols="2">3 1</cell><cell>1</cell><cell>0 0.00</cell><cell>add17</cell><cell>252</cell><cell>55</cell><cell>16</cell><cell>10</cell><cell>35</cell><cell>8.29</cell></row><row><cell>rd32</cell><cell>12 4</cell><cell>2</cell><cell cols="2">2 2</cell><cell>2</cell><cell>1 8.33</cell><cell>add18</cell><cell>266</cell><cell>58</cell><cell>14</cell><cell>9</cell><cell>37</cell><cell>8.30</cell></row><row><cell>rd53d1</cell><cell>26 7</cell><cell>9</cell><cell cols="2">5 2</cell><cell>2</cell><cell>3 2.14</cell><cell>add19</cell><cell>280</cell><cell>61</cell><cell>12</cell><cell>12</cell><cell>39</cell><cell>8.30</cell></row><row><cell>rd53d2</cell><cell>28 8</cell><cell>8</cell><cell cols="2">6 2</cell><cell>2</cell><cell>5 11.36</cell><cell>add20</cell><cell>294</cell><cell>64</cell><cell>28</cell><cell>12</cell><cell>41</cell><cell>8.30</cell></row><row><cell>rd53rcmg</cell><cell>44 7</cell><cell>83</cell><cell cols="2">8 4</cell><cell>3</cell><cell>19 7.60</cell><cell>add21</cell><cell>308</cell><cell>67</cell><cell>12</cell><cell>12</cell><cell>43</cell><cell>8.30</cell></row><row><cell>rd73d2</cell><cell>40 10</cell><cell>16</cell><cell cols="2">5 3</cell><cell>3</cell><cell>11 14.47</cell><cell>add22</cell><cell>322</cell><cell>70</cell><cell>16</cell><cell>11</cell><cell>45</cell><cell>8.30</cell></row><row><cell>rd84d1</cell><cell>58 15</cell><cell>8</cell><cell cols="2">5 3</cell><cell>3</cell><cell>14 12.50</cell><cell>add23</cell><cell>336</cell><cell>73</cell><cell>14</cell><cell>12</cell><cell>47</cell><cell>8.30</cell></row><row><cell>xor5d1</cell><cell>14 5</cell><cell>5</cell><cell cols="2">3 1</cell><cell>1</cell><cell>0 0.00</cell><cell>add24</cell><cell>350</cell><cell>76</cell><cell>14</cell><cell>13</cell><cell>49</cell><cell>8.31</cell></row><row><cell>add1</cell><cell>28 7</cell><cell>13</cell><cell cols="2">5 2</cell><cell>2</cell><cell>3 7.89</cell><cell>add25</cell><cell>364</cell><cell>79</cell><cell>20</cell><cell>14</cell><cell>51</cell><cell>8.31</cell></row><row><cell>add2</cell><cell>42 10</cell><cell>7</cell><cell cols="2">5 2</cell><cell>2</cell><cell>5 8.06</cell><cell>add26</cell><cell>378</cell><cell>82</cell><cell>20</cell><cell>12</cell><cell>53</cell><cell>8.31</cell></row><row><cell>add3</cell><cell>56 13</cell><cell>12</cell><cell cols="2">6 2</cell><cell>2</cell><cell>7 8.14</cell><cell>add27</cell><cell>392</cell><cell>85</cell><cell>17</cell><cell>12</cell><cell>55</cell><cell>8.31</cell></row><row><cell>add4</cell><cell>70 16</cell><cell>7</cell><cell cols="2">7 2</cell><cell>2</cell><cell>9 8.18</cell><cell>add28</cell><cell>406</cell><cell>88</cell><cell>26</cell><cell>14</cell><cell>57</cell><cell>8.31</cell></row><row><cell>add5</cell><cell>84 19</cell><cell>8</cell><cell cols="2">6 2</cell><cell>2</cell><cell>11 8.21</cell><cell>add29</cell><cell>420</cell><cell>91</cell><cell>14</cell><cell>12</cell><cell>59</cell><cell>8.31</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>add30</cell><cell>434</cell><cell>94</cell><cell>11</cell><cell>11</cell><cell>61</cell><cell>8.31</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>add31</cell><cell>448</cell><cell>97</cell><cell>13</cell><cell>12</cell><cell>63</cell><cell>8.31</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>add32</cell><cell cols="2">462 100</cell><cell>25</cell><cell>16</cell><cell>65</cell><cell>8.31</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>add48</cell><cell cols="2">686 148</cell><cell>19</cell><cell>15</cell><cell>97</cell><cell>8.32</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>add64</cell><cell cols="2">910 196</cell><cell>13</cell><cell>13</cell><cell>129</cell><cell>8.32</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 3 :</head><label>3</label><figDesc>Results for fault simulation and DFT, adder designs from<ref type="bibr" target="#b8">[9]</ref> </figDesc><table /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>Proceedings of the 13th Asian Test Symposium (ATS 2004) Proceedings of the 13th Asian Test Symposium (ATS 2004) 0-7695-2235-1/04 $20.00 © 2004 IEEE</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_1"><p>Proceedings of the 13th Asian Test Symposium (ATS 2004) Proceedings of the 13th Asian Test Symposium(ATS 2004)  </p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgment</head><p>John P. Hayes contributed to this work while visiting the University of Freiburg under an award from the Alexander von Humboldt Foundation.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>Nielsen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">L</forename><surname>Chuang</surname></persName>
		</author>
		<title level="m">Quantum Computation and Quantum Information</title>
		<imprint>
			<publisher>Cambridge Univ. Press</publisher>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Logical reversibility of computation</title>
		<author>
			<persName><forename type="first">C</forename><surname>Bennett</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM J. Res. and Develop</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="525" to="532" />
			<date type="published" when="1973">1973</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><surname>Abramovici</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>Breuer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">D</forename><surname>Friedman</surname></persName>
		</author>
		<title level="m">Digital Systems Testing and Testable Design</title>
		<imprint>
			<publisher>Computer Science Press</publisher>
			<date type="published" when="1990">1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Fault testing for reversible circuits</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">N</forename><surname>Patel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">P</forename><surname>Hayes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">L</forename><surname>Markov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLSI Test Symp</title>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="410" to="416" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Reversible Logic Synthesis Benchmarks Page</title>
		<author>
			<persName><forename type="first">D</forename><surname>Maslov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Dueck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Scott</surname></persName>
		</author>
		<ptr target="http://www.cs.uvic.ca/˜dmaslov/" />
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Introduction to quantum error correction</title>
		<author>
			<persName><forename type="first">E</forename><surname>Knill</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Laflamme</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ashikhmin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Barnum</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Viola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">H</forename><surname>Zurek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Los Alamos Science</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="188" to="221" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Impact of errors on a quantum computer architecture</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">M</forename><surname>Obenland</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Despain</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996">1996</date>
			<pubPlace>California</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Univ. of Southern</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Toward quantum computation: a five-qubit quantum processor</title>
		<author>
			<persName><forename type="first">L</forename><surname>Steffen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">M K</forename><surname>Vandersypen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">L</forename><surname>Chuang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Micro</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="24" to="34" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Quantum networks for elementary arithmetic operations</title>
		<author>
			<persName><forename type="first">V</forename><surname>Vedral</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Barenco</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ekert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Physical Review A</title>
		<imprint>
			<biblScope unit="volume">54</biblScope>
			<biblScope unit="issue">147</biblScope>
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A.1 Smolin, and H. Weinfurter. Elementary gates for quantum computation</title>
		<author>
			<persName><forename type="first">A</forename><surname>Barenco</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">H</forename><surname>Bennett</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Cleve</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">P</forename><surname>Divincenzo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Margolus</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Shor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Sleator</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Physical Review A</title>
		<imprint>
			<biblScope unit="volume">52</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="3457" to="3467" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Improved quantum cost for n-bit Toffoli gates</title>
		<author>
			<persName><forename type="first">D</forename><surname>Maslov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Dueck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Electronic Letters</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="issue">25</biblScope>
			<biblScope unit="page" from="1790" to="1791" />
			<date type="published" when="2003">12 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Logic design validation via simulation and automatic test pattern generation</title>
		<author>
			<persName><forename type="first">H</forename><surname>Al-Asaad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">P</forename><surname>Hayes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Jour. of Electronic Testing: Theory and Applications</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="575" to="589" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
