<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Scaling Laws and Tradeoffs in Peer-to-Peer Live Multimedia Streaming</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Tara</forename><surname>Small</surname></persName>
							<email>tsmall@eecg.toronto.edu</email>
						</author>
						<author>
							<persName><forename type="first">Ben</forename><surname>Liang</surname></persName>
							<email>liang@comm.toronto.edu</email>
						</author>
						<author>
							<persName><forename type="first">Baochun</forename><surname>Li</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Department of Electrical and Computer Engineering</orgName>
								<orgName type="institution">University of Toronto</orgName>
								<address>
									<settlement>Toronto</settlement>
									<region>Ontario</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<address>
									<postCode>2006</postCode>
									<settlement>Santa Barbara</settlement>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Scaling Laws and Tradeoffs in Peer-to-Peer Live Multimedia Streaming</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">8FCC35E8104844617E9227D616F19F90</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T08:03+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>C.2.4 [Computer Systems Organization]: Distributed Systems-Distributed applications; H.3.5 [Information Systems]: On-line Information Services-Data sharing Algorithms</term>
					<term>Design</term>
					<term>Theory Peer-to-peer</term>
					<term>resource-performance tradeoff</term>
					<term>scaling laws</term>
					<term>multimedia streaming</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>It is well-known that live multimedia streaming applications operate more efficiently when organized in peer-to-peer (P2P) topologies, since peer upload capacities are utilized to support other peers, and to alleviate the load and operating costs on the streaming servers. To date, there have been a number of existing experimental proposals with respect to how such peer-to-peer topologies are organized to support live streaming sessions. However, most of the existing proposals resort to intuition and heuristics when it comes to the design of such topology construction (i.e., neighbor selection) protocols. In this paper, we investigate the scaling laws of live P2P multimedia streaming, by quantitatively studying the asymptotic effects and tradeoffs among three key parameters in P2P streaming: server bandwidth cost, the maximum number of peers that can be supported, and the maximum number of streaming hops experienced by a peer. To further generalize our studies, we do not make restrictive assumptions in our theoretical analysis of such scaling laws: both peer upload capacities and peer lifetimes in a session may come from arbitrary distributions. With the theoretical insights we have developed, we propose Affinity, a simple and realistic heuristic to demonstrate the key benefits of our theoretical analysis in dynamic P2P networks, as compared to the topology construction algorithms in existing work.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>With the advent of commercial live multimedia streaming services from major ISPs and content providers, research towards live multimedia streaming has never been more promising and realistic. It has been well-known in the community that peer-topeer (P2P) multimedia streaming from one or multiple multimedia sources (i.e., streaming servers) to a group of participating peers will help to relieve the bandwidth cost burden to the server. If the individual peers contribute as much bandwidth as they consume, the streaming session is scalable to a large number of peers in the session. This observation is intuitive: without utilizing uploading capacities on each peer to assist the downloading demand of other peers, the load and bandwidth cost on the multimedia sources may escalate beyond the operating capacities of streaming servers.</p><p>To date, we have observed a number of existing proposals towards the construction of P2P topologies in live P2P streaming sessions (also referred to as neighbor selection in the literature). However, they resort to intuition and heuristics when designing such topology construction protocols, by using a tree-based, a randomized, or a directed acyclic graph (DAG) strategy. Without a doubt, devising protocols to construct a "good" or high-quality peer-to-peer topology is critical towards the scalability and robustness of a live P2P streaming session.</p><p>What, then, constitutes a P2P topology of high quality? Beyond the basic requirement that the streaming bit rate be sustained on each peer during the session, we are concerned with three important metrics that collectively define the performance and cost of a streaming session: <ref type="bibr" target="#b1">(1)</ref> delay: the difference between the playback time and the time when live events occur in the original media stream (i.e., the number of hops that the streaming playback must travel to propagate to all network nodes); (2) server cost: the bandwidth cost on streaming servers; and (3) scalability: the maximum number of peers that a session can support. One prefers P2P streaming topologies that scale to a large number of peers, minimizes server costs, and with a bounded delay on each of the peers.</p><p>At one extreme of the complete spectrum of topology construction, we consider the case where the multimedia source serves all peers directly. This leads to almost immediate media streaming at all peers (one hop delay for the single direct server connection), but incurs tremendous bandwidth costs at the server. Such unbounded server cost implies that the system is not scalable. At the other extreme, the source could serve data to one peer only. This bounds the server cost, but that one peer then needs to relay the data to other peers, which in turn serves additional peers. In many cases, the peers would not be able to playback the stream at the required streaming rate; and in all cases the delay will be unbounded as the number of peers scales up.</p><p>Towards the construction of high-quality P2P streaming topologies, it is natural to ask the following fundamental questions: <ref type="bibr" target="#b1">(1)</ref> Given a certain bandwidth cost when operating streaming servers that serve as multimedia sources, what is the maximum number of peers that can be supported in the session? <ref type="bibr" target="#b2">(2)</ref> If the peers can tolerate longer delay from the time that the session is first emitted from the source (allowing more forwarding between peers), how much can the server bandwidth cost be reduced? (3) Given a certain bandwidth cost for the streaming servers in a dynamic environment with peer churn (dynamic departures and arrivals), what is the probability that a node wishing to enter the network would be denied service? Last but not the least, can existing protocols be further improved with answers to these questions, or do they represent the best we can do?</p><p>Unfortunately, existing literature on live peer-to-peer streaming fails to offer a comprehensive and analytical study on the characteristics that govern the scalability and performance of live P2P streaming topologies. In this paper, we seek to analytically study the intricate dependencies among the scalability of the streaming session, the bandwidth cost on streaming servers, as well as the maximum permitted delays at the peers. In particular, we theoretical derive overlay formation that achieve the best performance for DAG networks whose routing is not limited by the content delivery mechanism. For example in a P2P system with network coding, it has been shown that nearly every coded block forwarded by a peer is innovative, so locations of particular data blocks do not limit the network performance and all available upload bandwidth can be used at the peers.</p><p>The original contributions of this paper are three-fold. First, we systematically present the theoretical analysis of the scaling laws of live P2P streaming in the context of directed acyclic graphs, by quantitatively studying the asymptotic effects and tradeoffs of scalability, server cost and delay. Second, we consider the dynamic nature of peers in P2P DAG topologies, and propose an analytical framework to estimate its effect on the peer service probability, service waiting time, and disconnection period. Finally, while this paper is largely theoretical, we are convinced that our theoretical insights have important practical implications. We introduce Affinity, a simple and realistic heuristic that can be readily implemented. We then evaluate Affinity in the context of previously proposed tree-based or randomized topology construction algorithms, with the intent to show a proof-of-concept on how insights on scaling laws can be used in the process of designing practical protocols. Throughout our analysis, we do not make unreasonable or restrictive assumptions: both peer upload capacities and peer lifetimes in a session may assume arbitrary distributions.</p><p>The remainder of this paper is organized as follows. Section 2 discusses related work. Section 3 studies the scaling laws of live peer-to-peer streaming in DAG topologies. The effects of peer dynamics are analyzed in Section 4. The Affinity heuristic is presented in Section 5, and evaluated in the context of previously proposed strategies. Section 6 concludes the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">RELATED WORK</head><p>Many existing work on constructing peer-to-peer topologies (i.e., neighbor selection) generally fall into two categories: tree-based strategies, where each individual data block traverses one or multiple trees, or randomized strategies, where there is no global structure and neighbors are determined dynamically on the fly. Meshbased structures are based on trees, but add undirected links between peers to allow for more communication and greater flexibility; however, the locally-defined decisions of the meshes may lead to suboptimal performance. Most recently, directed acyclic graphs have imposed a partial-ordering on the network and and show high resilience to failure, overcoming previous performance issues. The peers in DAGs receive from multiple parents and improve graph connectivity.</p><p>Early tree-based topologies, such as Overcast <ref type="bibr" target="#b1">[1]</ref>, form a singlesource multicast network that maintains global status at the root of a changing distribution tree to efficiently adapt data distribution to changing network conditions. Overcast leverages some caching and server replication strategies, but is designed as an overlay network that can be incrementally deployed. These networks typically scale to tens or perhaps hundreds of peers. Tree topologies are unfair because the leaf peers will not serve any other peers at all while others may serve many times the stream volume. With a fairness goal that each peer should transmit the same volume that it receives, multipath tree protocols were developed. Splitstream <ref type="bibr" target="#b2">[2]</ref> and Bullet <ref type="bibr" target="#b3">[3]</ref> use multiple trees to form a mesh, so that peers will be high in one tree for one substream, but lower in the tree for another, thereby achieving fairness and more resilience under churn.</p><p>More recent works propose neighbor selection strategies that are more randomized in nature, with the hope of being more scalable. Chainsaw <ref type="bibr" target="#b4">[4]</ref> and CoolStreaming <ref type="bibr" target="#b5">[5]</ref> are excellent examples of heuristics in this category. Using either of these protocols, each peer only maintains state for a small set of neighbors, which are chosen at random (no explicit topology), and neighbors request information from each other. They also assume that peers are capable of uploading at the desired streaming rate, though this is not necessarily the case. Gridmedia <ref type="bibr" target="#b6">[6]</ref> extends this work to achieve higher throughput rates by allowing peers to also "push" data blocks (sending unsolicited blocks without being explicit requested) once the local peer-to-peer topology is established.</p><p>More randomized tree-based strategies have been revisited by Chunkyspread <ref type="bibr">[7]</ref>, which utilizes multiple trees to spread different slices of the media stream. By designing parent selection and loop avoidance algorithm, Chunkyspread constructs non-optimal trees that iteratively improve themselves over time. Parents are swapped using an algorithm called Swaplinks <ref type="bibr" target="#b8">[8]</ref> that uses weighted random walks to build random graphs, so that the parent-child relationship are optimized with respect to load and relative latency. Rodriguez et al. <ref type="bibr" target="#b9">[9]</ref> seek to build and maintain topologies that optimize one or several metrics at the same time, such as delay and cost. Since this is an NP-hard problem, the constraints are typically ordered according to their importance to the user.</p><p>Dagster <ref type="bibr" target="#b10">[10]</ref> and DagStream <ref type="bibr" target="#b11">[11]</ref> are examples of DAG protocols. Dagster uses an incentive-based mechanism to encourage peers to contribute their upload bandwidth to the network by offering lower service rejection probabilities and lower disruption. Dagstream concentrates on locality awareness and connectivity to prevent failure under churn.</p><p>Towards building large-scale peer-to-peer streaming sessions, none of the existing work on live peer-to-peer streaming offers a comprehensive study on the asymptotic and tradeoffs among key elements of scalability, performance and cost of topology construction. To the best of our knowledge, this paper represents the first attempt to theoretically investigate the scaling laws of constructing peer-to-peer topologies for live multimedia streaming sessions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">SCALING LAWS OF LIVE P2P STREAM-ING</head><p>Toward optimal P2P live streaming, we present a theoretical analysis of the scaling laws for server cost, playback delay, and the number of served peers. We first observe the optimal properties that are intrinsic to the construction of an optimal P2P streaming session. We then analyze the asymptotic effects and tradeoffs of scalability, server cost, and delay.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Notations and Preliminaries</head><p>Let Ns represent the number of peers in a peer-to-peer session. Between each pair of peers (i, j) is a link lij that has capacity cij. One of the peers is the multimedia server and the other Ns -1 are peers that receive the media, to be played at some playback rate p Kbps. In this session, every peer has the ability to function both as a media receiver and also as a sender that contributes its uplink bandwidth to relieve the burden that would otherwise be imposed on the multimedia server. We define the server cost Cs as the total bandwidth provided to any peer by the multimedia source. We further denote the propagation delay by dp and the queueing delay by dq.</p><p>There are no restrictions on the number of parents that serve a given peer, or the number of children that are served by that peer. However, each peer has a maximum upload rate u Kbps, from a distribution F (U ) with mean U . <ref type="foot" target="#foot_0">1</ref> The upload capacity over a link ai is denoted u(ai). Peers are expected to upload with their entire upload capacity u, but they are able to divide that bandwidth among as many children as they wish, in any proportion.</p><p>We assume that each peer uploads with its maximum upload bandwidth u at a constant bit rate. <ref type="foot" target="#foot_1">2</ref> In an ideal system, there is no variance in available bandwidth from the peers and that the capacity cij of link lij is sufficient to support any upload bandwidth that the source or the peers provide. We further assume that the transmissions are optimally scheduled so that all data blocks are successfully received.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Characteristics of Optimal Peer-to-Peer Streaming</head><p>In this section, we present in several propositions the intrinsic characteristics of an optimal P2P streaming session. We define an optimal session as one that achieves minimum server cost per peer given that all peers receive the media at rate p within a certain maximum tolerated delay without considering fairness to nodes. We first show in Proposition 1 that there is no queueing delay in an optimal session. This has two implications. First, there is no need to maintain a data buffer for optimal P2P streaming, and second, given Cs and Ns, an optimal session achieves minimum average propagation delay over all peers. PROPOSITION 1. dq = 0 for an optimal session where play length is unlimited.</p><p>PROOF. Queueing delays are incurred when data blocks build up in the buffers of peers waiting to be relayed to another peer or waiting to be played at that peer. If all peers are served at rate p and packets can be routed optimally, then the buffers are not needed. The peers would immediately play back the data they receive. On the other hand, if any peers were served at an average rate less than p, then those peers would use some of the buffered data blocks whenever they could not fulfill the playback rate based on their received data. After some time, the peer's buffer would be empty and the peer would experience a disruption in service until sufficient data was buffered. This means that in the optimal case we need only consider dq = 0.</p><p>Consider the following model for an optimal streaming session of Ns peers with Cs bandwidth provided by the source. We label the Ns peers a1, a2, ..., aN s . We will attempt to serve the peers in that order. Let d(ai) be the propagation delay from the source to peer ai, that is, the number of hops. Let u(ai) be the upload capacity of peer ai. A peer is served if the upload capacity of the source and all of the served peers have enough bandwidth to serve it at rate p while continuing to serve all previously assigned peers. More formally, d(aj) = k + 1 if k ∈ {0, 1, 2, ...} is the smallest value for which P j-1 i=1 u(ai)½{d(ai) ≤ k} + Cs ≥ jp, and ½ is the indicator function, i.e. ½(x) = 1 if x is true, and ½(x) = 0 otherwise. If the sum of upload capacities for node ai at level k and below and the server's capacity is less then the required total rate jp, then the new node aj must be at level k + 1. Then, the average propagation delay over all peer nodes is 1 Ns P Ns i=1 d(ai). Our goal in the optimal streaming session is to minimize the cost to the server for a given delay constraint; that is, we reduce the cost to the server per peer as much as possible and assure that the maximum delay of any peer is not more than some maximum delay dp. To accomplish this, we maximize the total upload bandwidth contribution by the peers in the network. If there is a large peer bandwidth contribution being utilized by other peers, then the delay of each peer is low. In fact, maximizing the peer bandwidth contribution is equivalent to minimizing the delay of each peer, or equivalently minimizing the sum of all the propagation delays.</p><p>The next proposition provides a general guideline on how to construct an optimal P2P streaming topology to minimize the average propagation delay based on the distribution of peer upload capacities (which is the same as minimizing the sum). It is presented as a lemma, to be used in proving the main theorem on scaling laws and performance tradeoff in Section 3.3. LEMMA 1. In an optimal session with Cs bandwidth available from the source and peers with upload capacities following a distribution F (U ), placing peers with higher upload capacity closer to the source achieves optimal performance for the session (i.e. minimum average delay for all peers). PROOF. (by contradiction) Using the model above, consider a session with Ns peers each having i.i.d. upload capacity taken from the probability distribution F (U ). Suppose that the peers are ordered to make an optimal topology T (with minimal average delay); however, for at least one pair of peers (an 1 , an 2 ), the upload capacity of an 1 , u(an 1 ), is less than the upload capacity of an 2 , u(an 2 ), but d(an 1 ) &lt; d(an 2 ). The average delay for peers in this session is</p><formula xml:id="formula_0">D(T ) = 1 Ns Ns X i=1 d(ai) = 1 Ns 8 &lt; : an 1 -1 X i=1 d(ai) + d(an 1 ) + an 2 -1 X i=an 1 +1 d(ai) + d(an 2 ) + Ns X i=an 2 +1 d(ai) 9 = ;<label>(1)</label></formula><p>Form an alternate topology T that is identical to T , but swap the positions of peers an 1 and an 2 so that a n 1 is in the position of an 2 and a n 2 is in the position of an 1 . Then if we let d (ai) represent the distance from peer i to the source,</p><formula xml:id="formula_1">D(T ) = 1 Ns Ns X i=1 d (a i ) = 1 Ns 8 &lt; : an 1 -1 X i=1 d(ai) +d (a n 2 ) + a n 2 -1 X i=a n 1 +1 d (a i ) + d(an 1 ) + Ns X i=a n 2 +1 d (a i ) 9 &gt; = &gt; ;<label>(2)</label></formula><p>we can compare the difference between the average packet delays for the two topologies</p><formula xml:id="formula_2">Ns[D(T ) -D(T )] = an 2 X i=an 1 +1 d(ai) + d(an 2 ) + Ns X i=an 2 d(ai) -d (a n 2 ) - a n 2 X i=a n 1 +1 d (a i ) - Ns X i=a n 2 d (a i ).<label>(3)</label></formula><p>Recall that d(aj) = k + 1 if k is the smallest value for which P j-1 i=1 u(ai)½{d(ai) ≤ k} + Cs ≥ jp. Since u(a n 1 ) &gt; u(an 1 ) and u(a j ) = u(aj)∀j, j = n1, j = n2 by assumption, that means</p><formula xml:id="formula_3">P j i=1 u(a i ) &gt; P j i=1 u(ai) and d(a j ) ≤ d(aj) for any j, n1 &lt; j ≤ n2. (<label>4</label></formula><formula xml:id="formula_4">)</formula><p>We also know by assumption that u(a n 2 ) &lt; u(an 2 ), but also u(a n 1 )+u(a n 2 ) = u(an 1 )+u(an 2 ). This implies that P j i=1 u(a i ) = P j i=1 u(ai) for j &gt; n2. Equation ( <ref type="formula" target="#formula_3">4</ref>) holds, however, and we realize that {d(a i ) ≤ k} is a superset of {d(ai) ≤ k}, so d(a j ) ≤ d(aj) for j &gt; n2.</p><p>(</p><p>With the relationship from ( <ref type="formula" target="#formula_3">4</ref>) and ( <ref type="formula" target="#formula_5">5</ref>), we can see that (3) gives Ns[D(T ) -D(T )] &gt; 0, contradicting the optimality of T .</p><p>Lemma 1 immediately implies that, in an optimal P2P streaming session, no peer more than one hop away from the server should receive any bandwidth from the server to make up for bandwidth deficiency from its parents. This is stated as Corollary 1.</p><p>COROLLARY 1. In an optimal session (a network with minimum server cost) with Cs bandwidth available from the source, the server will never contribute bandwidth to any node aj with d(aj) ≥ 2.</p><p>PROOF. Saving some of the server bandwidth Csave for peers with some later delay, say m, is equivalent to having a server with bandwidth Cs -Csave and two peers as and am in the session where as has 0 upload bandwidth, but is supposed to serve the peers 1 hop from the server and am has Csave bandwidth but is placed m hops away. In our notation, this means that a peer with lower bandwidth is placed before a peer with higher upload bandwidth, so swapping the positions of as and am leads to better performance. That is, the server should use all of its bandwidth to serve the peers completely and not fill in bandwidth to peers that are being served by other peers.</p><p>Finally, to provide a worse-case performance bound, Lemma 2 states that the largest average delay is incurred if all peer nodes have the same uploading capacity. Hence, we obtain a surprising conclusion that, the heterogeneity in peer-device capabilities and network connection quality, which is an prominent characteristic of today's Internet, actually improves P2P streaming performance! LEMMA 2. The constant upload capacity distribution F (U ) = U leads to the worst performance (largest average delay) in the optimal session that has mean uploading capacity of U per peer.</p><p>PROOF. Using the same model as earlier, let us compare the upload capacity distribution F (U ) = U to any other distribution of upload capacities F other (U ). As described in Lemma 1, the peers are arranged in decreasing order of upload capacity, so that the peers with higher capacity are placed closer to the source. We can label the peers in these orderings as a1, a2, ...aN s , for the peers that all have constant upload capacity, and b1, b2, ...bN s , for the peers that all have upload capacity taken from the F other (U ) distribution. Since the upload capacity distributions have the same mean,</p><formula xml:id="formula_6">1 Ns P Ns i=1 u(ai) = 1 Ns P Ns i=1 u(bi). If F other (U )</formula><p>has a non-constant distribution, then at least one peer in the bi list has upload capacity larger than the mean, so u(b1) &gt; u(a1). The relative difference of the terms in the sequence of P Ns i=1 u(bi) is always non-decreasing for a non-constant upload distribution because the bi are non-negative. As we can see in Fig. <ref type="figure" target="#fig_1">1</ref>, this means that since the two curves must agree at 1</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Ns</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>P Ns i=1 u(ai) = 1</head><p>Ns P Ns i=1 u(bi), they will not cross at any other point and 1</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Ns</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>P Ns i=1 u(ai) &lt; 1</head><p>Ns P Ns i=1 u(bi) at all intermediate i. Equivalently, this implies that d(ai) ≥ d(bi) so the constant upload capacity distribution experiences the greatest average playback delay. In turn, this leads to the worst performance for the P2P session because the server cost would need to be increased to achieve the same maximum tolerated delay for all peers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Resource-Performance Tradeoff</head><p>In this section, we quantify the tradeoff between the server cost Cs, the delay bound dp, and the maximum number of peers Ns  i=1 u(bi) as i increases that can be served. It then culminates to the main conclusion stated in Theorem 1, where we express scaling laws relating these system parameters for optimal streaming.</p><p>Suppose that there are Ns peers that wish to be part of the P2P session. Further assume that the peers all have upload distribution F (U ). Lemma 1 dictates that we must place the peers with higher upload capacity closer to the source, so as to serve as many peers as possible. Hence, the first Cs p peers with the highest upload capacities are served by the source. Call them the 1-peers. If we can write the F (U ) distribution as a smooth, differentiable function (to be relaxed later) and f (u) = F (u), then the amount of upload bandwidth available from the 1-peers is</p><formula xml:id="formula_7">A1 := Ns Z ∞ F -1 (h 1 ) uf (u)du, for h1 = 1 - Cs/p Ns .<label>(6)</label></formula><p>Consider the components of this expression. The Cs p peers with the highest upload capacity make up the largest Cs/p Ns fraction of the F (U ) distribution curve. This explains why the integral in (6) runs over the interval (F -1 [1 - Cs/p  Ns ], ∞). The term Nsf (u) corresponds to the number of peers that have upload bandwidth capacity values in the small interval du under consideration. Finally, the u factor is the upload capacity that the peers in the du interval are able to contribute to the combined upload of the 1-peers.</p><p>Note that we have defined two quantities, h1 and A1. h1 = (1 -Cs/p Ns ) delimits a boundary because each peer with upload bandwidth of F -1 (h1) or greater is exactly one hop from the multimedia source. A1 quantifies the amount of capacity available from the 1-peers. Furthermore, we know that A 1 p 2-peers can be supported because they are necessarily served by the collection of 1-peers.</p><p>Clearly since we know the number of 2-peers, we can calculate h2 = (1-Cs/p Ns -A 1 /p Ns ) and</p><formula xml:id="formula_8">A2 := Ns R F -1 (h 1 ) F -1 (h 2 ) uf (u)du.</formula><p>This process is continued to obtain (hi, Ai), for i = 2, 3, . . .. At some point, this process will terminate for one of three reasons:</p><p>1. All Ns peers are used (i.e., 1</p><formula xml:id="formula_9">&gt; Cs/p Ns -A 1 /p Ns -... -A i /p Ns ),</formula><p>However, this gives us an upper bound on Ns, so we could use the bisection method to find the largest value of Ns that allows the procedure to terminates by condition 1. 3 An alternative is to increase the server capacity Cs to support the Ns peers than are desired. Again, the bisection method can be used to find the corresponding Cs. Similarly, if the procedure terminates by condition 3, then we must iterate the procedure to find the correct Ns.</p><p>By defining the hi values as above, we partition the F (U )-axis of the cumulative distribution function of upload capacities. The peers with uploads between F -1 (hi) and F -1 (hi-1) are positioned i hops from the server. The total upload capacity of the peers i hops from the server, Ai, is used to serve the peers i + 1 hops from the server.</p><p>Recall that even if F (U ) has jumps, that is, F (U ) has point masses of probability, the cumulative distribution function is defined to be left-continuous. Specifically, F -1 (y) = inf{s : F (s) ≥ y}. In this case, we continue to use the hi variables to partition the probability space to indicate the number of hops from different groups of peers to the source, but the Ai cumulative upload capacities must be defined slightly differently for every interval that includes a point mass.</p><p>Without loss of generality, let [hj, hj-1] be the first upload interval (interval with the largest upload values) that includes a jump in the cumulative distribution function over</p><formula xml:id="formula_10">[F -1 (hj), F -1 (hj-1)]. If F [F -1 (hj)] =</formula><p>hj, then all peers with upload hj are included in the interval, that is, both ends of the jump are mapped into the interval [hj, hj-1]. Otherwise, some of the peers with upload F -1 (hj) can be served in j hops, but others will be farther from the source because there is insufficient bandwidth to support them at j hops.</p><p>When F [F -1 (hj)] = hj, we obtain essentially the same definition of Aj as before, except that the point masses at all nondifferentiable points must be included. No other intervals are affected. For a set of non-differentiable points x1, x2, ..., xm,</p><formula xml:id="formula_11">Aj := Ns Z x 1 F -1 (h j ) uf (u)du + ... + Z F -1 (h j-1 ) xm uf (u)du +x1P (U = x1) + ... + xmP (U = xm)) .</formula><p>On the other hand if F [F -1 (hj)] = hj (which necessarily means that F [F -1 (hj)] &lt; hj), then the calculation of Aj and subsequent Ai for i &gt; j are affected. The fraction of peers with upload capacity that can be served j hops from the source is r j -h j r j -l j , where rj = lim</p><formula xml:id="formula_12">x→h j F [F -1 (x)]</formula><p>is the limit value of the jump from the right side, and lj = F [F -1 (hj)] is the value of the jump from the left side. Or for a set of non-differentiable points x1, x2, ..., xm where x1 has value F -1 (hj),</p><formula xml:id="formula_13">Aj := Ns Z x 2 x 1 uf (u)du + ... + Z F -1 (h j-1 ) xm uf (u)du + rj -hj rj -lj P (U = x1) + ... + xmP (U = xm) « ,</formula><p>for rj and lj defined as above. Since r j -h j r j -l j of the peers with F -1 (hj) peers are used in Aj, there are still h j -l j r j -l j of them available to be placed so they contribute to Aj+1.</p><formula xml:id="formula_14">If F [F -1 (hj)] = F [F -1 (hj+1)]</formula><p>, then all peers in the [hj+1, hj] interval have the same upload capacity and Aj+1 is simply Ns (r j -h j )-h j+1 r j -l j P (U = F -1 (hj)) and Aj+2 will also be affected by the jump at F -1 (hj). 3 In the bisection approach, we first repeat the procedure using Ns/2 nodes and keep halving the intervals until we find a feasible Ns. We then successively half the interval between a feasible Ns and the most recent over-estimation of Ns, until the interval converges to the maximum feasible Ns.</p><p>Otherwise the [h j+1, hj] interval contains peers with upload capacity less than F -1 (hj) (less than the value of the jump) and for a set of non-differentiable points x1, x2, ..., xm where xm has value F -1 (hj),</p><formula xml:id="formula_15">Aj := Ns Z x 2 F -1 (h j+1 ) uf (u)du + ... + Z xm x m-1 uf (u)du + rj -hj rj -lj P (U = x1) + ... + xmP (U = xm) « .</formula><p>All jumps are treated in this way, where occasionally some peers of the same upload capacity must be split so there are different numbers of hops to the source. Before stating the main theorem, we first illustrate, in the following example, how to obtain Ns given Cs and dp, in a typical streaming session.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example 1</head><p>Suppose the upload capacities of the peers in a streaming session follow a Zipf distribution with average data rate 200 Kbps. Suppose the multimedia source can provide 500 Mbps of serving bandwidth, the download rate for the stream is 250 Kbps, and we expect Ns = 80, 000 users. Notice that the average upload bandwidth is lower than the average playback data rate, so it may not be possible to serve all the peers in the network.</p><p>Using these parameters in the method described above, we hope to organize the peers into an optimal topology and understand the average and maximal delay that would be experienced by these peers. We first truncate and scale a Zipf distribution so that its corresponding mean value equals the average peer upload data rate. In particular, for Similarly, we find pairs (hi, Ai) for i = 2, 3, 4, 5, 6 to be (0.8417, 8.29 * 10 6 ), (0.4271, 4.81 * 10 6 ), (0.1868, 2.03 * 10 5 ), (0.1766, 3063), (0.1764, 44). We see that even with optimal peer arrangement, since the average upload capacity of the peers is smaller than the playback rate they require, we are unable to serve 18% of the peers.</p><formula xml:id="formula_16">f (U ) = j k u if 0 ≤ u ≤ m</formula><p>Note that the above calculation is based on the assumption that only the peers with top 82% of uploading bandwidth are served, so it does not imply that the session can now serve 82% × 80, 000 = 65, 600 nodes. Instead, we must repeat same the procedure with smaller values of Ns. Using the bisection method, we find that the maximum feasible Ns is 10, 000. Alternatively, we could repeat the procedure while adjusting the server bandwidth cost to find the minimum Cs value necessary to support 80, 000 peers. THEOREM 1. Suppose the server bandwidth cost is Cs = g(Ns) in an optimal streaming session for Ns served peers each with upload capacity chosen from some distribution F (U ). If U &gt; p, then the number of peers that can be served is unbounded, and the corresponding propagation delay to receive the data stream is</p><formula xml:id="formula_17">O " log " U p " Ns g(Ns)</formula><p>« , If U = p, then the number of peers that can be served is unbounded, and the corresponding propagation delay to receive the data stream is O " pNs Cs " . If U &lt; p, then the number of peers that can be served is bounded, regardless of the allowable delay; however, the maximum number of served peers increases linearly with Cs.</p><p>PROOF. From Lemma 2 and Corollary 1, it is clear that to bound the delay of an optimal network for any upload capacity distribution we should consider the worst-case constant upload capacity at each peer and use all of the source's Cs bandwidth for the peers one hop away. Also recall that when all peers have constant upload capacity, there is no need to calculate the numbers of peers with different uploads, so there would be no iteration of to find the maximum feasible value of Ns. Furthermore, we know by Proposition 1 that dq = 0. This means that each peer will be able to serve U p additional peers, and we suppose it serves exactly U p in this optimal session, neglecting the potential suboptimality due to rounding.</p><p>We observe fundamentally different performance when U ≥ p and U &lt; p. In the first case, the number of peers increases as the number of hops from the server increases. In the second case, the number of peers decreases as the number of hops from the server increases. These cases are considered separately to derive the worst-case delay bound as follows.</p><p>Case 1: U &gt; p Since adding a peer introduces more bandwidth into the session than it uses, we can express the following relation between Ns and the server bandwidth cost for any number of peers Ns.</p><formula xml:id="formula_18">Ns(dp) = dp-1 X i=0 Cs p " U p « i = Cs p r dp -1 r -1 for r = U p , r &gt; 1.</formula><p>(7) Rearranging <ref type="bibr">(7)</ref>, we see that</p><formula xml:id="formula_19">dp = log " U p " j Nsp Cs [ U p -1] + 1 ff . (<label>8</label></formula><formula xml:id="formula_20">)</formula><p>Hence, the server bandwidth cost of g(Ns) corresponds to a delay</p><formula xml:id="formula_21">dp of O " log " U p " Ns g(Ns)</formula><p>« for any general upload capacity distribution.</p><p>Case 2: U = p In this case, it is easy to see that dp = pNs Cs , because each peer will entirely serve the next peer in the stream, and hence the optimal session consists of Cs p chains radiating from the server. Therefore, the server bandwidth cost of g(Ns) corresponds to a delay dp of O " pNs Cs</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>"</head><p>for any general upload capacity distribution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Case 3: U &lt; p</head><p>In this case, adding a peer introduces less bandwidth into the session than it uses. If dp is large, then at some number hops, h b , from the server, there will not be sufficient bandwidth to support more peers, regardless of delay, i.e., the total upload bandwidth provided by the peers farthest from the source is less than p. In particular, h b is the smallest value of i such that Cs p</p><formula xml:id="formula_22">" U p « i-1 &lt; p ⇔ i &gt; log " U p " » p 2 Cs - + 1,</formula><p>since log a (x) &gt; loga(y) if a &lt; 1 and x &lt; y. This leads to the number of supported peers</p><formula xml:id="formula_23">N s = P log " U p « » p 2 Cs - +1 i=0 Cs p " U p " i &lt; Cs p " U p " log " U p « » p 2 Cs - +3 -1 " U p " -1 = " U 3 p 2 « -Cs p " U p " -1</formula><p>, and we have Ns &gt;</p><formula xml:id="formula_24">" U 2 p « -Cs p " U p " -1 , similarly.</formula><p>If dp is smaller so that the delay bound is reached before the available bandwidth is entirely used, then the number of peers in the network can be derived as in the previous case:</p><formula xml:id="formula_25">8 &gt; &gt; &gt; &gt; &gt; &gt; &lt; &gt; &gt; &gt; &gt; &gt; &gt; : " U 2 p « -Cs p " U p " -1 &lt; Ns &lt; " U 3 p 2 « -Cs p " U p " -1 for h b = log " U p " h p 2 Cs i + 1 &lt; dp, Ns = Cs p " U p " dp -1 " U p " -1 otherwise.</formula><p>This theorem defines scaling laws that have important practical implications. It allows us to describe the manner in which the delay bound must grow as a function of the number of peers served Ns and the server bandwidth cost Cs. If U ≥ p, an arbitrarily large number of peers can be served because each peer can completely support at least one new peer that enters the system; however, the theorem shows that even in optimal circumstances, the delay necessarily increases as a logarithm for any constant throughput. Alternatively, we see that to achieve similar performance (that is, the same dp) as Ns increases, the server cost must increase linearly with Ns. In practice, this could be achieved by offering users similar performance at peak user times if they are willing to pay more for the service. <ref type="foot" target="#foot_4">4</ref> If U &lt; p, then every new peer entering the system needs either support from multiple other peer nodes and/or support from the server. The number of peers that can be supported is necessarily limited because the need for serving bandwidth is higher than the available bandwidth introduced by each peer. Hence, a system designer's only option to support more peers is to burden the source with higher cost.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">ANALYSIS OF PEER DYNAMICS</head><p>In the previous section, we derive the scaling laws of peer-topeer streaming assuming a static P2P topology. In practice, changes and disruptions are experienced in the P2P network topology due to the coming and leaving of peers, refereed to as churn. In this section, we consider churn induced peer dynamics and propose an analytical approach to estimate its effect on the peer service probability, service waiting time, and disconnection period for optimally constructed networks that can rearrange at will.</p><p>To allow tractable analysis, we assume that the arrivals of peers follow a Poisson process and the length of time the peers stay in the session is exponential, which can be extended to an arbitrary lifetime distribution. Furthermore, we suppose the system is ergodic and ignore the upload capacity of particular individuals. Our aim is to calculate the average probability of acceptance of a peer in a large-scale system, assuming that the distribution of upload capacities for the peers in the topology is precisely the same as the probability distribution from which they are chosen <ref type="foot" target="#foot_5">5</ref> . We stress that we are not calculating precise acceptance probabilities of peers into small networks, since those probabilities depend on the upload capacity of the incoming peer. When we bound P(accepted), this is the average expected acceptance of a peer in a large system.</p><p>Recall in Section 3.3 that we define the optimal topology (and hence the number of peers supported for a given delay d b ) for any number of peers Ns that wish to participate in the session. Specifically, we can find the saturation point for any upload capacity distribution. At the saturation point, the maximum number of peers can be served at the desired Quality of Service level (within delay bound d b for server cost Cs) and there are no other peers that wish to join the session. Then, in our discussion of churn, we consider the maximum Ns and represent the topology as an M/M/Ns queue of peers that are being served. This is a birth-death queue that is described and solved explicitly in many introductions to queuing theory such as Cooper <ref type="bibr" target="#b12">[12]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Expected Service Probability</head><p>If the new peers wishing to enter the session are blocked, then the queuing system described above is an Erlang Loss System. Let Pj be the probability of j peers being served (receiving media signal) in the system. We have</p><formula xml:id="formula_26">Pj = (λ/μ) j j! P Ns k=0 (λ/μ) k k! , for j = 0, 1, 2, ..., Ns ,</formula><p>where λ is the mean arrival rate of the peers and 1 μ is the mean service time.</p><p>More importantly, we would like to compute the probability that peers attempting to join the session are not served. In this model, we assume that if a peer is refused admission to the session, it leaves and does not retry. Therefore, we express the peer blocking probability</p><formula xml:id="formula_27">B(Ns, λ/μ) = (λ/μ) Ns Ns! P Ns k=0 (λ/μ) k k! . (<label>9</label></formula><formula xml:id="formula_28">)</formula><p>Note that these results hold for any service-time distribution with finite mean (see Section 3.3 of <ref type="bibr" target="#b12">[12]</ref>). In particular, the theory holds true for the Zipf distribution, which has been shown to represent the online lifetimes of human users <ref type="bibr" target="#b13">[13]</ref>.</p><p>Although we have a closed form expression in <ref type="bibr" target="#b9">(9)</ref>, it is difficult to use this equation because of the need to take factorial for values of k up to Ns. Instead, we bound the probability of a new peer being served as follows. Consider 1 B(Ns,λ/μ) . Writing out the series backwards, we have</p><formula xml:id="formula_29">1 B(Ns,λ/μ) = 1 + (λ/μ) Ns -1 /(Ns-1)! (λ/μ) Ns /Ns! + (λ/μ) Ns -2 /(Ns-2)! (λ/μ) Ns /Ns! + ... + 1 (λ/μ) Ns /Ns! = 1 + Ns (λ/μ) + Ns(Ns-1) (λ/μ) 2 + ... + Ns! (λ/μ) Ns</formula><p>When Ns &gt; λ/μ, the first (Nsλ/μ) terms of 1 B(Ns,λ/μ) are necessarily ≥ 1. In other words,</p><formula xml:id="formula_30">P (accepted) = 1 -B(Ns, λ/μ) ≥ 1 - 1 Ns -λ/μ .</formula><p>If, on the other hand, Ns &lt; λ/μ, then since there are more peers on average than we expect to be able to serve, the probability of being served is smaller. Clearly Ns ≥ (Nsi), ∀i ≥ 0. Hence,</p><formula xml:id="formula_31">1 B(Ns, λ/μ) ≤ Ns X k=0 " Ns λ/μ « k = 1 - " Ns λ/μ " Ns+1 1 - " Ns λ/μ</formula><p>" , and therefore</p><formula xml:id="formula_32">P (accepted) ≤ 1 - 1 - " Ns λ/μ " 1 - " Ns λ/μ " Ns+1 .</formula><p>The next example presents a case study for a typical peer-to-peer live streaming session.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example 2</head><p>Suppose the multimedia streaming session has roughly 3 million participating peers. Each peer tunes in twice per day following a Poisson distribution and continues streaming for an average of 30 minutes each time. Since the sum of Poisson distributions is also Poisson with intensity corresponding to the sum of the component intensities, this corresponds to a session where peers arrive according to a Poisson process with average interarrival time 1 λ = 1 4167 minutes. If a peer cannot be served, we assume that an "all servers are busy" message is sent to the user and the request is cleared. Suppose the upload capacity of each peer is constant at rate 300 Kbps. The download rate for the multimedia stream is 250 Kbps, and the users require a delay of no more than 5 seconds ≈ 16 hops. Furthermore, the multimedia source can provide 500 Mbps of serving bandwidth.</p><p>By Theorem 1, we find the number of peers Ns that can be served in this session, Ns(16) = 500,000 250 * (300/250) 16 -1 (300/250)-1 = 174, 884. We are interested in finding the probability that a user will be served in this session, and we can find this probability directly using Equation ( <ref type="formula" target="#formula_27">9</ref>), or noting that Ns &gt; λ/μ, we have a lower bound P (accepted) ≥ 0.99998.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Service Waiting Time</head><p>Alternatively, we can consider a system where peers that find all the server busy (cannot be served media within the d b constraint) join a queue and wait as long as necessary for service. <ref type="foot" target="#foot_6">6</ref> Then we could represent the session as an Erlang Delay System. Again representing the probability of j peers being served as Pj, we have</p><formula xml:id="formula_33">Pj = (λ/μ) j j! P0, j= 1, 2, ..., Ns -1 Pj = (λ/μ) j</formula><p>Ns!N j-Ns s P0, j= Ns, Ns + 1, ...</p><formula xml:id="formula_34">for P0 = Ns-1 X k=0 (λ/μ) k k! + ∞ X k=Ns (λ/μ) k Ns!N k-Ns s ! -1 .</formula><p>Clearly, in this case we require that λ/μ &lt; Ns; otherwise the queue length becomes infinite and the system becomes unstable.</p><p>In this system, we are interested in the waiting times for peers in the queue. Let W be the waiting time for a peer. Then as shown in <ref type="bibr" target="#b12">[12]</ref>, assuming no peer has priority over another, each peer has probability 1 -P {W &gt; 0} of being served immediately, where</p><formula xml:id="formula_35">P {W &gt; 0} = (λ/μ) Ns Ns!(1 -(λ/μ)/Ns) P0. (<label>10</label></formula><formula xml:id="formula_36">)</formula><p>If we suppose that peers are added to the session in the order that they arrived, then it is sufficient to calculate the waiting time given that the peer was not served immediately,</p><formula xml:id="formula_37">P {W &gt; t|W &gt; 0} = e -[1-(λ/μ)/Ns]Nsμt . (<label>11</label></formula><formula xml:id="formula_38">)</formula><p>Hence, assuming that the arrival rate λ and average service duration 1 μ are given, we can control the queue stability and the waiting time in this system through the parameter Ns. Recall that Ns is the number of peers that can be served in the session and Theorem 1 gives expression for this number in terms of Cs and d b for the worst-case upload capacities of the peers with mean upload rate U and download rate p. In particular, we can adjust the server bandwidth Cs to allow any arbitrary value of Ns so as to achieve the desired service waiting time distribution.</p><p>From <ref type="bibr" target="#b10">(10)</ref> and <ref type="bibr" target="#b11">(11)</ref> we write an expression for the cumulative distribution of the service waiting time</p><formula xml:id="formula_39">F (H ≤ t) =[1 -P (W &gt; 0)]+ P (W &gt; 0)[1 -P (W &gt; t|W &gt; 0)] =[1 - (λ/μ) Ns Ns!(1 -(λ/μ)/Ns) P0]+ (1 -e -[1-(λ/μ)/Ns]Nsμt )( (λ/μ) Ns Ns!(1 -(λ/μ)/Ns) P0)<label>(12)</label></formula><p>for P0 = " P Ns-1 k=0</p><formula xml:id="formula_40">(λ/μ) k k! + P ∞ k=Ns (λ/μ) k Ns!N k-Ns s " -1</formula><p>. With knowledge of the period a node waits before it can be connected, one could propose that a buffer of data blocks should be stored at each peer to use some of the idle bandwidth available in the session. The collected blocks could be used to begin streaming at the new peer before it is able to join the session, or during subsequent periods of disconnection, the blocks could be played back from the buffer while the peers were searching for new parents. This scenario would minimize playback disruption; however, this type of buffering is limited in the optimal topology to minimize playback delay. Recall that any peer in the middle of the optimal P2P topology is already using all of its upload capacity to serve other peers. The only available spare bandwidth is at leaf peers whose delay is already approaching the maximum delay imposed by the Quality of Service requirement; therefore, if the new peers began streaming, they could not be supported by the leaf peers for extended periods of time.</p><p>In a practical P2P topology, however, there might be other idle bandwidth available. Alternatively, in the optimal topology, we may allow leaf peers to serve and exceed the delay constraint. Then, we could use the cumulative distribution function of (12) as the service times and create a new (less severe) Quality of Service level when the topology is approaching its total peer capacity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">AFFINITY: PRACTICAL HEURISTICS AND EVALUATIONS</head><p>Although this paper is largely theoretical so far, we are fully convinced that the theoretical insights brought forth by this paper have important practical implications. To show how our analytical framework may provide guidelines towards more practical designs, we seek to design and evaluate a simple and realistic heuristic that only depends on local information. Our heuristic is henceforth referred to as Affinity, as it is one of the many possibilities of designing practical topology construction protocols that seek to approximate theoretically optimal topologies. The name also captures its essence of categorizing peers with similar upload capacities into roughly the same hierarchy in the topology. The design of Affinity is inspired by our theoretical contributions made so far in this paper. Though discovered independently, we note that Affinity protocol is quite similar to the Dagster <ref type="bibr" target="#b10">[10]</ref> protocol in previous works. Dagster's incentive mechanisms to place nodes with higher bandwidth closer to the source in the directed acyclic graph indicate the practicality of our suggestions for more efficient topology construction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Affinity: a Theory-Inspired Heuristic</head><p>Intuitively, since peers with high upload capacities can contribute more to serve other peers in the P2P session, they should be placed closer to the source. In practice, a peer na that has just joined the session may communicate with some random sampling of existing peers in the session. If na has the highest upload capac-ity of all the sampled peers, n a could connect to the source directly to receive the stream. Otherwise, na could choose a parent from the sampled peers that has the smallest upload capacity that is still greater than the upload capacity of na. This procedure can be repeated at any time when the peer na is searching for new parents, for example, if its parent goes offline or has insufficient bandwidth to allow the media to be played at the desired playback rate. We have imposed a general ordering on the collection of peers that is not necessarily optimal, since only a subset of the peers are included in the local tests performed by each peer; however, local tests allow for scalability when the heuristic is implemented.</p><p>Although our intuitive placement strategy described above leads to higher numbers of peers that can be served, it also introduces weakness under churn. Since all the upload capacity is used from peers that have more upload capacities to provide, the departure of high-capacity peers can be disruptive to their many children and to the overall performance of the session. One strategy to deal with this problem is to allow each peer to take fewer children and serve at a rate higher than the playback rate until their buffers are full, then to continue sending only at the playback rate. This trades optimality of the number of peers served for tolerance to churn when the peers cannot redistribute themselves arbitrarily.</p><p>When a peer joins a P2P streaming session, its place in the topology is found by calculating values of a new parameter δ k . δ k is a collective measure of the peers that are k-hops from the multimedia source: it represents the difference between the combined upload capacity of the k-hop peers and the bandwidth needed to serve peers that are k + 1 hops from the source. Placing the new peer according to the largest |δ k | value (as a k-peer if δ k ≤ 0 and as a (k + 1)-peer if δ k &gt; 0), the new peer minimizes its burden to the server when it is added to the topology. This strategy is inspired by Corollary 1, from which we learn that the source should serve only peers that are one-hop away (directly connected to itself) whenever possible, and by <ref type="bibr" target="#b14">[14]</ref>.</p><p>Further, we wish to place peers with higher upload capacities closer to the source, as directed by Lemma 1. Rather than placing the peer according to the largest |δ k | value from the strategy above, we place the peer according to the largest |δ k | * k c 1 (U -un) value, where U is the mean peer upload capacity, un is the upload capacity of the particular peer that has just joined the session, and c1 is a constant value used to determine the importance of placing higher capacity peers closer to the source. <ref type="foot" target="#foot_7">7</ref> There is no explicit topology maintenance in the Affinity topology. When peers fail in the system, they automatically affect δ k values, so the topology is naturally maintained as new peers arrive into the system. We also assume that there is no queueing delay, as stated in Proposition 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Affinity vs. Alternatives: Evaluation</head><p>We now proceed to evaluate Affinity, in the context of previously proposed strategies of neighbor selection and topology construction. We evaluate two different categories of previous strategies: randomized neighbor selection strategies (e.g., CoolStreaming <ref type="bibr" target="#b5">[5]</ref>), and tree-based neighbor selection strategies (e.g., Grid-Media <ref type="bibr" target="#b6">[6]</ref>). Both CoolStreaming and GridMedia are excellent examples of operational live media streaming protocols.</p><p>Each peer in the randomized strategy (called random) selects M neighbors uniformly at random from all possible peers in the session. In contrast, the tree-based strategy (called tree) forms a tree where every peer has M -1 children. The initial peer (the source) has M children and all other peers have one parent and M -1 children. In Affinity, however, a new peer is explicitly placed in the topology at an appropriate location to minimize the  server cost, and also weights the decision so that peers with higher upload capacities are placed higher in the tree.</p><p>With a C++-based simulation environment, we have performed comparative evaluations of Affinity, in the context of its two alternatives. We include 130 peers in a P2P streaming session at time zero, each with a Zipf lifetime distribution. The random strategy allows peers to choose M = 4 partners at random. The delay of a peer is represented by the number of hops on the shortest path from the peer to the source. If the delay of a peer is too long (&gt; dp), that peer must abandon all neighbors and search for new neighbors at the next time-step in the discrete simulation. When peers have no parents to serve them, it is assumed that the source will serve them. Note that it is impossible for peers in the random strategy to be more selective about the neighbors they choose, because the distance from the source to a particular peer depends intimately on the neighbors chosen by every other peer. In the simulation, these distances are calculated at the end of a time-step. In reality, it would also take time to perform a check with respect to such distances.</p><p>Using the tree strategy, each peer has M -1 = 3 children. The topology is reconstructed instantaneously in response to churn, assuming that there is no time for peers to find parents. We wish all peers to be served within the delay bound dp, so the to the server is calculated as Cs = p Ns(M -2) (M -1) dp -1 for a session with Ns peers. Affinity inserts new peers into the session according to the weighting |δ k | * k (U -un) described earlier, but will only insert peers at positions ≤ dp.</p><p>Simulations are run over 500 time-steps (83 minutes, if we assume that a time-step is 10 seconds), with new peers introduced at rate λ and peers expiring according to a Zipf distribution with mean 22 minutes. Upload capacities of peers come from an exponential distribution with mean 300 Kbps, and the playrate of the media is 225 Kbps. By changing λ, we adjust the average number of peers in the session.</p><p>Fig. <ref type="figure" target="#fig_4">2</ref> and Fig. <ref type="figure" target="#fig_6">3</ref> show the bandwidth cost to the server in P2P sessions with different numbers of participating peers and different delay bounds. Clearly, Affinity requires considerably less bandwidth from the server than its alternatives, as random and tree strategies are not able to take advantage of higher upload capacities at some of the peers. Since the playback rate of the media stream is 225 Kbps and the average upload capacity at a peer is 300 Kbps, it is not surprising that a peer in the tree strategy is not able to entirely support its three children and needs assistance from the server to supply the remaining bandwidth. The random strategy has the additional problem that for smaller values of the delay bound, a large fraction of the peers cannot be supported by the random neighbors they find.</p><p>Since the server costs in the optimal topology are not the same order of magnitude as the practical strategies, we do not include its values in Fig. <ref type="figure" target="#fig_4">2</ref> or Fig. <ref type="figure" target="#fig_6">3</ref>. Instead, we present the server costs in the optimal topology in Table <ref type="table" target="#tab_0">1</ref>. Small values are obtained with   the optimal topology because the upload capacity distribution has a tail, and all high capacity peers are placed close to the source, so for the first few hops it appears as if the mean upload capacity is greater than the playback rate. After that point, the number of peers served decreases at each hop, but most of the peers have already been served. Furthermore, we do not account for rounding to an integer number of peers in the optimal topology. As a result, the Cs of the optimal scheme with the network conditions of Fig. <ref type="figure" target="#fig_4">2</ref> is less than 1 Kbps. If the server was allocated as much bandwidth as Affinity for 220 peers (roughly 1.2 Mbps), then the optimal topology would support approximately 1 1 2 million peers, provided that they could be ordered from the source according to the size of their upload capacities regardless of churn.</p><p>Fig. <ref type="figure" target="#fig_6">3</ref> uses a constant peer arrival rate so that the number of peers in the network has only small variations, but allows for longer maximum delay as the media stream is delivered to a peer. As we might expect, by relaxing the delay constraint, the server cost can be reduced. The reduction in server cost as delay bounds are relaxed is most prominent with the optimal scheme (by several orders of magnitude), as all of the upload capacities of all the intermediate peers are fully utilized. The practical strategies are not able to decrease as quickly as the optimal one, since it is not feasible for them to arrange all of the peers in precise decreasing order, and they always have an integer number of peers at each hop from the source. Still, when compared with random and tree strategies, Affinity performs significantly better.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Peer Dynamics with Bounded Server Cost</head><p>We now evaluate how new peers are admitted into the P2P streaming session when a limited server bandwidth is imposed. In this experiment, we assume that the server cannot provide more than 4 Mbps. If more bandwidth is requested from a peer, it is not admitted to the session. Furthermore, all peers have uniform upload capacities u = 200 Kbps, and the playback rate for the media is p = 225 Kbps. The arrival of new peers follows a Poisson process with a combined rate of 22.4 [peers/second], and the service times follow the Zipf distribution with a mean service time of 1 μ = 5 [seconds/peer]. We vary the maximum permitted delay d b , which in turn changes Ns, but Ns &lt; λ/μ = 112 in all cases. As discussed in Section 4, if Ns &gt; λ/μ, the probability of a peer being admitted into the session in the optimal topology is close to 1. Hence, it is more interesting to consider the case where  Ns &lt; λ/μ, in which peers are sometimes not successful to join the session.</p><p>We tabulate in Table <ref type="table" target="#tab_1">2</ref> the optimal Ns calculated using <ref type="bibr">(7)</ref>. It is compared with the actual number of peers that are served on average in simulation. Since all peers have uniform upload capacities, the simulated session performs near-optimally. We observe a small discrepancy between the optimal and simulated values due to the requirement of an integer number of peers at any given number of hops from the source in a practical session. Furthermore, Section 4.1 has described a conservative upper bound for the probability of admission of peers in an optimal topology. Clearly it is also an upper bound for the admission of peers in a practical session. In Fig. <ref type="figure" target="#fig_7">4</ref>, we compare the derived upper bound for the probability of acceptance of a peer into the session with the actual probability of new peer admission. This figure shows that the derived upper bound follows the actual trend observed. In particular, this curve would give a network designer insight into the maximum delay that should be tolerated in order to achieve a desired success of peer acceptance into a streaming session. As we have seen many times before, by relaxing the delay constraint, better network performance can be observed; however, the improvements are limited as the delay constraint grows to higher values.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">CONCLUDING REMARKS</head><p>In this paper, we seek to study the scaling laws of constructing high-quality peer-to-peer DAG topologies for live multimedia streaming. We have proposed a theoretical framework to construct optimal peer-to-peer topologies that minimize bandwidth costs on streaming servers, and to investigate the tradeoffs among server costs, scalability and delay bounds in peer-to-peer streaming sessions. We have considered arbitrary distributions of peer upload capacities, and derived an explicit closed-form solution for the resource-performance tradeoff in the worst case. As peer-to-peer topologies are inherently dynamic as peers join and leave, we have also proposed a analytical framework to estimate the effect of peer churn on the peer service probability and service waiting time. We are fully convinced that our theoretical insights introduced in this paper have important practical implications. We introduce Affinity as a proof-of-concept showcase of heuristics that can be practically implemented yet influenced by our theoretical conclusions. As simple as it is, Affinity is a better performer than alternative tree-based or randomized topology construction strategies in previous work in our evaluations. In our future work, we are interested in studying the complete spectrum of realistic, efficient and simple heuristics that further utilize our theoretical conclusions, and put them to good use in real-world live peer-to-peer streaming implementations.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>u(node)Nodes, ordered by greatest upload CDF for constant density CDF for non-constant density</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Figure1: Sum of total upload capacity P Ns i=1 u(bi) and P Ns i=1 u(bi) as i increases that can be served. It then culminates to the main conclusion stated in Theorem 1, where we express scaling laws relating these system parameters for optimal streaming.Suppose that there are Ns peers that wish to be part of the P2P session. Further assume that the peers all have upload distribution F (U ). Lemma 1 dictates that we must place the peers with higher upload capacity closer to the source, so as to serve as many peers as possible. Hence, the first Cs p peers with the highest upload capacities are served by the source. Call them the 1-peers. If we can write the F (U ) distribution as a smooth, differentiable function (to be relaxed later) and f (u) = F (u), then the amount of upload bandwidth available from the 1-peers is</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>0 otherwise we find k and m such that the integral of f (U ) over all values of u is 1 and the mean of U is 200. In this case, k = 0.1373 and m = 1458 Kbps, so we can write F (U ) = 0.1373 log(U ). Then, by direct calculations, h1 = 1 -500,000/250 80,000 = 0.975 and F -1 (0.975) = e 0.975 0.1373 = 1215, so we can find A1 = 80, 000 Z 1458 1215 u 0.1373 u du = 2.67 * 10 6 .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Server cost achieved for different rates of insertion λ, dp = 4 [hops], peers with exponential upload capacities</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Server cost achieved for different dp Quality of Service levels, λ = 0.15 [peers/second], peers with exponential upload capacities</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Probability that peers will be admitted into the P2P streaming session given a limited server bandwidth Cs = 4 Mbps.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 : Server cost of the optimal topology for Figs. 2 and 3</head><label>1</label><figDesc></figDesc><table><row><cell cols="2">Ns [peers] Cs [Mbps]</cell><cell cols="2">dp [hops] Cs [Mbps]</cell></row><row><cell>100</cell><cell>1.3  *  10 -4</cell><cell>2</cell><cell>0.03505</cell></row><row><cell>130</cell><cell>1.69  *  10 -4</cell><cell>3</cell><cell>0.00269</cell></row><row><cell>160</cell><cell>2.08  *  10 -4</cell><cell>4</cell><cell>1.59  *  10 -4</cell></row><row><cell>190</cell><cell>2.47  *  10 -4</cell><cell>5</cell><cell>7.52  *  10 -6</cell></row><row><cell>220</cell><cell>2.86  *  10 -4</cell><cell>6</cell><cell>2.95  *  10 -7</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 : Number of peers served in the P2P session</head><label>2</label><figDesc>d b [hops] actual Ns [peers] optimal Ns [peers]</figDesc><table><row><cell></cell><cell>2</cell><cell></cell><cell>33</cell><cell></cell><cell></cell><cell>34</cell><cell></cell></row><row><cell></cell><cell>3</cell><cell></cell><cell>47</cell><cell></cell><cell></cell><cell>48</cell><cell></cell></row><row><cell></cell><cell>4</cell><cell></cell><cell>59</cell><cell></cell><cell></cell><cell>60</cell><cell></cell></row><row><cell></cell><cell>5</cell><cell></cell><cell>69</cell><cell></cell><cell></cell><cell>71</cell><cell></cell></row><row><cell></cell><cell>6</cell><cell></cell><cell>78</cell><cell></cell><cell></cell><cell>81</cell><cell></cell></row><row><cell></cell><cell>7</cell><cell></cell><cell>86</cell><cell></cell><cell></cell><cell>90</cell><cell></cell></row><row><cell></cell><cell>8</cell><cell></cell><cell>93</cell><cell></cell><cell></cell><cell>98</cell><cell></cell></row><row><cell></cell><cell>9</cell><cell></cell><cell>99</cell><cell></cell><cell></cell><cell>104</cell><cell></cell></row><row><cell></cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Probability of success</cell><cell>0 0.2 0.4 0.6 0.8</cell><cell></cell><cell></cell><cell></cell><cell cols="3">Upper bound Observed success</cell></row><row><cell></cell><cell>2</cell><cell>3</cell><cell>4</cell><cell>5</cell><cell>6</cell><cell>7</cell><cell>8</cell><cell>9</cell></row><row><cell></cell><cell></cell><cell></cell><cell cols="4">Delay bound imposed [hops]</cell><cell></cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>We assume that P2P traffic has precedence over all other traffic, so all upload capacity u can be utilized.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>Clearly this is not realistic, and by adding small buffers at the peers, we will be able to account for variance in the transmission of streaming media from the peer nodes; however, we are first determining bounds using an optimal scenario with perfect scheduling and link usage.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_2"><p>The maximum allowed number of hops, dp, is reached (before all of the peers have been placed), or</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_3"><p>3. There is insufficient peer upload bandwidth from the last group of peers to support any more peers (i.e., Ai &lt; p).Consider these termination conditions separately. If the procedure terminates by condition 1, then we are finished. All nodes in the P2P session is partitioned into hops based on their upload capacity. On the other hand, if the procedure terminates by condition 2, this that the Ns chosen at the beginning of the procedure was too large. As a result, Nsf (u) would be inflated and we would assume there were more high upload peers than there truly were.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_4"><p>This type of strategy is used for cellular service plans, for example.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_5"><p><ref type="bibr" target="#b5">5</ref> This is true as N becomes large by the Law of Large Numbers.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_6"><p>We assume that any number of peers can be in the queue awaiting service.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="7" xml:id="foot_7"><p>If c1 is large, then the capacity of the peers will dominate and all of the high capacity peers will be placed closer to the source; however idle bandwidth in the middle of the topology may go unused. If c1 is smaller, the idle bandwidth in the topology is minimized, but higher capacity peers may be placed lower in the topology.</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName><surname>References</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Overcast: Reliable Multicasting with an Overlay Network</title>
		<author>
			<persName><forename type="first">J</forename><surname>Jannotti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">K</forename><surname>Gifford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">L</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Kaashoek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">W O</forename><genName>Jr</genName></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Operating Systems Design and Implementation</title>
		<meeting>Operating Systems Design and Implementation</meeting>
		<imprint>
			<date type="published" when="2000-10">October 2000</date>
			<biblScope unit="page" from="292" to="301" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">SplitStream: High-bandwidth Content Distribution in a Cooperative Environment</title>
		<author>
			<persName><forename type="first">M</forename><surname>Castro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Druschel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A.-M</forename><surname>Kermarrec</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Nandi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Rowstron</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Singh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2nd International Workshop on Peer-to-Peer Systems</title>
		<meeting>2nd International Workshop on Peer-to-Peer Systems</meeting>
		<imprint>
			<date type="published" when="2003-02">February 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Bullet: High Bandwidth Data Dissemination using an Overlay Mesh</title>
		<author>
			<persName><forename type="first">D</forename><surname>Kostić</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Rodriguez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Albrecht</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Vahdat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 19th ACM Symposium on Operating Systems Principles</title>
		<meeting>19th ACM Symposium on Operating Systems Principles</meeting>
		<imprint>
			<date type="published" when="2003-10">October 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Chainsaw: Eliminating Trees from Overlay Multicast</title>
		<author>
			<persName><forename type="first">V</forename><surname>Pai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Tamilmani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Sambamurthy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">E</forename><surname>Mohr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 4th International Workshop on Peer-to-Peer Systems</title>
		<meeting>4th International Workshop on Peer-to-Peer Systems</meeting>
		<imprint>
			<date type="published" when="2005-02">February 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">CoolStreaming/DONet: A Data-Driven Overlay Network for Efficient Live Media Streaming</title>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">P</forename><surname>Yum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. INFOCOM</title>
		<meeting>INFOCOM</meeting>
		<imprint>
			<date type="published" when="2005-03">March 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">GridMedia: A Peer-to-Peer Network for Streaming Multicast Through the Internet</title>
		<author>
			<persName><forename type="first">M</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">L Y</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM Multimedia</title>
		<meeting>ACM Multimedia</meeting>
		<imprint>
			<date type="published" when="2005-11">November 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Chunkyspread: Multi-tree Unstructured Peer-to-Peer Multicast</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C V</forename><surname>Venkataraman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Francis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 5th International Workshop on Peer-to-Peer Systems</title>
		<meeting>5th International Workshop on Peer-to-Peer Systems</meeting>
		<imprint>
			<date type="published" when="2006-02">February 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">On Heterogeneous Overlay Construction and Random Node Selection in Unstructured P2P Networks</title>
		<author>
			<persName><forename type="first">V</forename><surname>Vishnumurthy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Francis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. INFOCOM</title>
		<meeting>INFOCOM</meeting>
		<imprint>
			<date type="published" when="2006-04">April 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Scalability in Adaptive Multi-Metric Overlays</title>
		<author>
			<persName><forename type="first">A</forename><surname>Rodriguez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Kostić</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Vahdat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 24th International Conference on Distributed Computing Systems</title>
		<meeting>24th International Conference on Distributed Computing Systems</meeting>
		<imprint>
			<date type="published" when="2004-03">March 2004</date>
			<biblScope unit="page" from="112" to="121" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Dagster: Contributor-aware end-host multicast for media streaming in heterogeneous environment</title>
		<author>
			<persName><forename type="first">W</forename><surname>Ooi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SPIE Multimedia Computing and Networking (MMCN)</title>
		<meeting>SPIE Multimedia Computing and Networking (MMCN)</meeting>
		<imprint>
			<date type="published" when="2005-01">January 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">DagStream: Locality Aware and Failure Resilient Peer-to-Peer Streaming</title>
		<author>
			<persName><forename type="first">J</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Nahrstedt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SPIE Multimedia Computing and Networking (MMCN)</title>
		<imprint>
			<date type="published" when="2006-01">January 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Introduction to Queueing Theory</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">B</forename><surname>Cooper</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1981">1981</date>
			<publisher>Elsevier North Holland, Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">The Feasibility of Supporting Large-Scale Live Streaming Applications with Dynamic Application End-Points</title>
		<author>
			<persName><forename type="first">K</forename><surname>Sripanidkulchai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ganjam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Maggs</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SIGCOMM</title>
		<meeting>SIGCOMM</meeting>
		<imprint>
			<date type="published" when="2004-09">September 2004</date>
			<biblScope unit="page" from="107" to="120" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Outreach: Peer-to-Peer Topology Construction towards Minimized Server Bandwidth Costs</title>
		<author>
			<persName><forename type="first">T</forename><surname>Small</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Liang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Journal on Selected Areas in Communications, Special Issue on Peer-to-Peer Communications and Applications, First Quarter</title>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
