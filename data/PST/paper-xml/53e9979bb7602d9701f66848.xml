<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Derivational Minimalism</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Edward</forename><surname>Stabler</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of California</orgName>
								<address>
									<postCode>90024-1543</postCode>
									<settlement>Los Angeles</settlement>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Derivational Minimalism</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">4C611CFDD665733A25377A8744BC66CD</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T07:19+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>A basic idea of the transformational tradition is that constituents move. More recently, there has been a trend towards the view that all features are lexical features. And in recent "minimalist" grammars, structure building operations are assumed to be feature driven. A simple grammar formalism with these properties is presented here and briefly explored. Grammars in this formalism can define languages that are not in the class of languages definable by tree adjoining grammars.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Minimalist grammars</head><p>Adapting the general framework of <ref type="bibr" target="#b12">[13]</ref>, a grammar is regarded as a specification of a lexicon and generating functions for building complex expressions:</p><p>A grammar G = (V , Cat, Lex, F), where V is a set, (non-syntactic features) Cat is a set, (syntactic features) Lex is a set of expressions built from V and Cat, (the lexicon) F is a set of partial functions from (the generating functions) tuples of expressions to expressions In the minimalist grammars presented here, expressions will be a certain kind of finite, binary ordered trees with labels only at the leaves. The language defined by such a grammar is the closure of the lexicon under the structure building functions, L(G) = CL(Lex, F).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Trees</head><p>A finite tree is given by a set of nodes with a dominance relation of the usual kind, τ = (N τ , * τ ). We leave off the subscripts when no confusion will result. We use the following notation:</p><p>x y xis the parent of y x + y xproperly dominates y x * y xdominates y</p><p>The root of any tree τ is the minimal element of N, and the leaves are the maximal elements. That is, the set of leaves L τ = {x| ˜(∃y) x y}.</p><p>Constituents are standardly picked out with the dominance relation. The constituent with root node x is the part of the structure that x dominates. The set of nodes dominated by x is ↑x = {y ∈ N| x * y}. So then for any leaf x, ↑x = {x}. The subtree τ x with root x is τ x = (↑x, ( * ↑x)).</p><p>Our trees are linearly ordered by an additional precedence relation, τ = (N τ , * τ , ≺ * τ ). We use the following notation:</p><p>x ≺ y ximmediately precedes y x ≺ + y xproperly precedes y x ≺ * y xprecedes y</p><p>We will assume that for any two distinct nodes, either one dominates the other or one precedes the other (but never both), and we assume precedence is inherited through dominance in the usual way:</p><formula xml:id="formula_0">(∀w, x, y, z) (x ≺ * y ∧ x * w ∧ y * z) → (w ≺ * z)</formula><p>One additional relation is added to tree structures in order to obtain appropriate objects for minimalist grammar. When two constituents combine, one of them always "projects over" the other. <ref type="foot" target="#foot_0">1</ref> To represent that a determiner d projects over a noun n to form a DP, we let &lt; represent this relation between the sisters in a tree, writing d&lt;n, and we can adopt the usual notation for the transitive and reflexive, transitive closures of this relation, respectively:</p><p>x &lt; y</p><p>x immediately projects over y x &lt; + y xproperly projects over y x &lt; * y xprojects over y</p><p>Regarding the projection relation &lt; as reflexive, we can say that whenever a node has a child, there is a unique child that projects over every child of that parent:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>(∀x) ((∃y)(x y)) → ((∃y)(∀z)(x z → y &lt; z))</head><p>Adding &lt; * to our tree structures, they have the form τ = (N τ , * τ , ≺ * τ , &lt; * τ ). These are the basic structures of our minimalist grammar.</p><p>In terms of such structures, we can define some structural notions that are relevant for the specification of the grammar. Given any tree τ = (N, * , ≺ * , &lt; * ) and any x, y ∈ N, x is a head of y iff either y is a leaf and x = y, or (∃z) (y z ∧ (∀w)(y w → z &lt; * w) ∧ x is a head of z). <ref type="foot" target="#foot_1">2</ref>The following basic results are easily obtained from these definitions. Proposition 1. Every head is a leaf, and every leaf is a head of itself. Proposition 2. If x is a head of y then y * x.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Proposition 3. Every node y has a unique head x.</head><p>We define the maximal projection of head x to be the least node y with head x. That is, the maximal projection y of x is the node y ∈ {z ∈ N| the head of z is x} such that there is no w in this set with the property that w + y.</p><p>Finally, for convenience, it is useful to call a node x a specifier of head y iff i.</p><p>x is a maximal projection, ii. the parent of x has head y, and iii. x ≺ + y.</p><p>And similarly we call a node x a complement of head y iff i.</p><p>x is a maximal projection, ii. the parent of x has head y, and iii. y ≺ + x.</p><p>In the linguists' standard depiction of a labeled, ordered tree, the minimal element is at the top, with immediate dominance shown by arcs and linear precedence shown by left-to-right order. Our trees have a third relation, so there is a question about how to depict them. Since we will only be considering binary branching trees, a simple idea presents itself. Since only the leaves are labeled, we can indicate at each internal node, which of the two daughters projects over the other.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>&lt; d the n idea</head><p>Notice that in this tree, &lt; and ≺ coincide. They do not coincide in a tree like the following (which is the way we will represent what linguists call "VP shells"):</p><formula xml:id="formula_1">&gt; d 1 &lt; v d 2</formula><p>It is perhaps enlightening to observe that, rather than letting the leftright dimension of our graphical depiction represent ≺ * we could have let it represent &lt;, marking ≺ explicitly in the tree to get a different depiction of the same structure:</p><formula xml:id="formula_2">≺ v d 2 d 1</formula><p>In this kind of presentation, the projecting category is always on the left, while precedence gets explicitly marked. However, we will use the former convention, explicitly indicating the "projects over" relation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Features</head><p>Vocabulary items are broken into pronounced parts and interpreted parts, V = (P ∪ I) The pronounced, phonetic features are indicated by placing slashes around the standard orthographic representation of the word. So for example, we will consider the set, P = {/marie/,/quechua/,/speaks/,/believes/,…}.</p><p>The interpreted, semantic features are indicated by placing parentheses around standard orthographic representations, as in I = {(marie),(quechua),(speaks),(believes),…}.</p><p>As an abbreviation, we will sometimes use, for example, marie to represent the sequence /marie/(marie), and similarly for other vocabulary when corresponding phonetic and interpreted features are simultaneously available.</p><p>The syntactic features are usefully partitioned into four kinds,</p><formula xml:id="formula_3">Cat = (base ∪ select ∪ licensor s ∪ licensees).</formula><p>We introduce each kind of feature in turn.</p><p>The basic syntactic categories, base = {c,t,v,d,n, . . .}, represent the familiar categories: complementizer, tense, verb, determiner, noun, and so on. For each type of category, there are three ways of "selecting" a constituent of that category. We will use the feature =n to indicate the simple selection of a noun phrase; the feature =N indicates that a noun phrase is selected and furthermore the phonetic features of the head of the noun phrase are moved to be suffixed to the sequence of phonetic features of the selecting head; and finally the feature N= indicates that a noun phrase is selected and furthermore the phonetic features of the head of the noun phrase are moved to be prefixed to the sequence of phonetic features of the selecting head. So the set of possible selection features is:</p><formula xml:id="formula_4">select = {=x, =X, X=| x ∈ base}.</formula><p>The categories and selection features interact in local, head-head configurations. As we will see, the structure building rule merge will cancel a requirement =x, =X, or X= by combining the constituent with this requirement with a constituent of category x.</p><p>The remaining kinds of features are those involved in phrasal movement, which always involves a head-specifier relationship. In particular, a head will assign a feature +f to a -f constituent that moves covertly to its specifier (movements are explained below), or else a feature +F is assigned to a -f constituent that moves overtly to its specifier. So for example, we can have features that indicate requirements like licensees = {-case,-wh,…}, with corresponding features that indicate assignments, like licensor s = {+case,+CASE,+wh,+WH,…}.</p><p>These features +f and +F are the triggers for phrasal movement. The structure building rule move will cancel a requirement -f by moving the phrase with this feature to the specifier of a head that has either +f or +F.</p><p>No limit has been indicated for the numbers of elements in base, licensees and licensor s, but linguists typically assume that these sets will be finite and small. And then, if there are k licensees then there will be 2k licensor s.</p><p>The features written with capital letters =X, X=, +X are sometimes called strong features. (Cf. <ref type="bibr" target="#b21">[22]</ref>, <ref type="bibr" target="#b6">[7]</ref>). Strong features cause phonetic material to move along with the affected syntactic features. The strong/weak distinction provides some control over how much structure moves along with the features that are canceled by the structure building rule. This carrying along of more or less additional structure is sometimes called "pied piping."</p><p>We are now in a position to define what counts as a linguistic expression in our minimalist grammars. An expression is a finite, binary labeled ordered tree τ = (N τ , * τ , ≺ * τ , &lt; * τ , Label τ ), where the domain of Label is just the leaves L of the tree and the range is a regular set,</p><formula xml:id="formula_5">Label : L → select * (licensor s)select * (base)licensees * P * I * .</formula><p>The rationale for this particular ordering of features in the label will become clear below: the syntactic features are canceled in order.</p><p>Notice that Rng(Label) ⊂ (V ∪ Cat) * . Furthermore, λ ∈ Rng(Label); that is, "empty nodes" can occur in expressions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Minimalist Grammars</head><p>A minimalist grammar is a 4-tuple (V , Cat, Lex, F), where</p><formula xml:id="formula_6">V = (P ∪ I), Cat = (base ∪ select ∪ licensee ∪ licensor ),</formula><p>Lex is a finite set of expressions built from V and Cat (where an "expression" is a tree as defined above), and F = {mer ge, move}.</p><p>To complete this definition, we need only define the generating functions. <ref type="foot" target="#foot_2">3</ref>The function mer ge is used to allow a head to select and combine with a phrase of an appropriate type on its right. For example the verb makes may select a determiner phrase tortillas to form the verb phrase makes tortillas. In our minimalist grammars, this is a =x head merging with a tree of category x to yield a tree in which these two features have canceled each other out:</p><formula xml:id="formula_7">=d =d v make + d tortillas⇒ &lt; =d v make È È È tortillas</formula><p>Notice that the canceled features are initial elements of the heads of the trees involved -the structure building rules only cancel initial elements. Notice that the output tree has the verb as its head, as shown by the &lt; at the parent node, and so we would traditionally call the output tree a verb phrase. Sometimes the phonetic content of the selected head moves to prefix the phonetic material of the selecting head. For example, in Nahuatl, the verb 'make' can select and incorporate the object 'tortilla' as its prefix:</p><p>i. Ni-c-chihua in tlaxcal (Nahuatl) <ref type="bibr" target="#b10">[11]</ref> 1s-3os-make tortilla ii. Ni-tlaxcal-chihua 1s-tortilla-make This is called head movement with left adjunction, and in our formalism it is the construction formed when a X= head merges with tree of category x:</p><formula xml:id="formula_8">4 D= =d v make + d tortilla ⇒ &lt; =d v /tortilla make/(make) (tortilla)</formula><p>A third case of mer ge is head movement with right adjunction. This again is like selection, but the phonetic content of the selected head moves to suffix the phonetic material of the selecting head. We find apparent right adjunction in Sora:</p><p>i. Jom-b -t--n-ji p (Sora) <ref type="bibr" target="#b0">[1]</ref> eat-buffalo-nonpast-3s-intr-3ps q In minimalist grammars this is the construction formed when a =X head merges with tree of category x.</p><formula xml:id="formula_9">=D =d v make + d tortilla ⇒ &lt; =d v /make tortilla/(make) (tortilla)</formula><p>The final case of mer ge is what might be called shell formation. This occurs when a head that has already combined with a complement on its right combines with further arguments on its left. In some recent theories, this may occur in verb phrases, on the assumption that all arguments of a verb, including the subject, originate in the verb phrase:</p><p>i. I saw [Maria making tortillas] ii. Chuala mé [na saighdiúirí ag imeacht] (Irish) <ref type="bibr" target="#b7">[8]</ref> heard I the soldiers leaving This kind of construction is formed when a =x non-head merges with tree of category x:</p><formula xml:id="formula_10">&lt; =d v making È È È tortillas + d Maria ⇒ &gt; Maria Ð Ð &lt; v making tortillas</formula><p>The binary function mer ge applies in just the four cases listed here: always canceling one selection feature =x, =X or X= against one corresponding categorial feature x.</p><p>The other structure building rule is move. This rule is traditionally invoked to form sentences like i-iii from underlying structures that, without these movements, would lead to expressions like i'-iii':</p><p>i. which student do I like? i'. I like whích student? ii. which student did Mary tell you that she thought I would like? ii'. Mary told you that she thought I would like whích student? iii. that student, I like. iii'. I like that student. The movements in i-iii are overt: pronounced features are moved, sometimes over many constituent boundaries. In certain other constructions that are arguably structurally similar, it is proposed that there is covert movement, as in "quantifier raising" constructions. For example, the pronounced form in i, below, may have a structure of the sort indicated in ii, where the universally quantified phrase has raised to take wide scope over some student:</p><p>i. /some student likes every teacher/ ii. (every teacher) some student likes /every teacher/ To build constructions like these, move is formalized as a unary operation on expressions.</p><p>Overt movement occurs when move applies to a tree whose head has an initial feature +X, and where the tree contains exactly one -x feature. This restriction to one -x feature is a kind of "economy" condition: it prevents two embedded -x constituents from competing for the first available specifier of a +x or +X head, so that a -x feature is always canceled by the "closest" possible +x or +X feature. The -x head may be arbitrarily deep in the tree. The movement raises the whole maximal projection of the -x head up to the specifier of the +X head.</p><formula xml:id="formula_11">&lt; +CASE t will À À À &gt; -case Maria À À &lt; speak À À À Nahuatl ⇒ &gt; Maria &lt; t will &gt; λ &lt; speak À À À Nahuatl</formula><p>Overt movement leaves behind just a node labeled by the empty sequence of features λ.</p><p>Covert movement is similar, except that it is triggered by an initial feature +x (rather than a "strong" +X), and it does not move the whole -x phrase, but only the interpreted and syntactic features. The phonetic features are left behind, as we see in the following "covert object shift:"</p><formula xml:id="formula_12">&lt; +case v speak -case Nahuatl ⇒ &gt; (Nahuatl) À À &lt; v speak /Nahuatl/</formula><p>In this simple example, the -x constituent is a sister of the +x constituent, but as already mentioned, it can be arbitrarily deep in the tree.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Examples and basic properties</head><p>We explore the effect of varying the lexicon of the minimalist grammars, keeping F = {mer ge, move} fixed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">A simple SVO language</head><p>This first example is inspired by <ref type="bibr" target="#b6">[7]</ref>. <ref type="foot" target="#foot_4">5</ref> It embodies particular grammatical assumptions (e.g. the assumption that a language like English may have a "covert object shift"), which other MG grammars will not share. Let Lex 1 be the set containing the following 12 expressions:</p><formula xml:id="formula_13">d -case maria d -case quechua =n d -case some =n d -case every n student n language =d +case =d v speaks =c +case =d v believes =v +CASE t =t c =t c -case =t c -case /that/</formula><p>The following 8 step derivation yields a structure that is pronounced: /some linguist speaks every language/. The derivation begins by merging the following two lexical elements:</p><p>from the lexicon: =n d -case every n language Applying mer ge to these two elements, in this order, yields a determiner phrase:</p><formula xml:id="formula_14">step 1 merge: &lt; d -case every È È È È</formula><p>language This is a determiner phrase that needs case. It can be merged with the lexical item that is pronounced /speaks/ to yield the following tree:</p><formula xml:id="formula_15">step 2 merge: &lt; +case =d v speaks È È È È &lt; -case every È È È È language</formula><p>The head of the result of step 2 must assign case to its specifier, and there is exactly one -case element inside the tree, so move applies in step 3 to covertly move the object, leaving the pronounced material behind. (Languages with overt object shift are considered below.)</p><formula xml:id="formula_16">step 3 move: &gt; &lt; (every) (language) &lt; =d v speaks À À À &lt; /every/ /language/</formula><p>The first feature of the head of the verb phrase formed in step 2 is the selection feature for the subject, so we first build a subject with two new elements from the lexicon:</p><p>from the lexicon: =n d -case some n linguist step 4 merge: &lt; d -case some</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>È È È È linguist</head><p>We can now apply merge to the result of step 3 and the result of step 4, in that order, to yield the following "VP shell:"</p><formula xml:id="formula_17">step 5 merge: &gt; &lt; -case some È È È È linguist &gt; &lt; (every) (language) &lt; v speaks &lt; /every/ È È È È /language/</formula><p>The result of step 5 is a verb phrase, so it is selected by the phonetically empty lexical item that has category t. Applying merge to this tense element and the result of step 5, in that order, we obtain: step 6 merge:</p><formula xml:id="formula_18">&lt; +CASE t &gt; &lt; -case some È È È È linguist &gt; &lt; (every) (language) &lt; speaks &lt; /every/ È È È È /language/</formula><p>Since the result of step 6 is a tense phrase that must assign case to an overt specifier, move can apply to move the -case element to specifier position:</p><formula xml:id="formula_19">step 7 move: &gt; &lt; some À À À linguist È È È È &lt; t &gt; λ &gt; &lt; (every) (language) &lt; speaks &lt; /every/ /language/</formula><p>The result of step 7 is a tense phrase, and since tense is selected by the lexical complementizer, mer ge can apply to yield the following tree:</p><formula xml:id="formula_20">step 8 merge: &lt; c &gt; &lt; some À À À linguist È È È È &lt; λ &gt; λ &gt; &lt; (every) È È È È<label>(language)</label></formula><p>&lt; speaks &lt; /every/ /language/ This last tree is well formed in the sense that it has no outstanding syntactic features at all except the single category symbol c at its head. (We could imagine that the c is deleted when this structure is integrated into the discourse.) In this case, we will say MG 1 ⇒ * some linguist speaks every language, and we will refer to the language of the grammar, the set of phonetic strings that have well formed syntactic structures as</p><formula xml:id="formula_21">str ings(MG 1 ) = {s| MG 1 ⇒ * s}.</formula><p>Proposition 4. MG 1 ⇒ * some linguist speaks every language (Furthermore, there is exactly one such derivation.) Proposition 5. MG 1 ⇒ * maria believes that some student speaks every language Proposition 6. MG 1 ⇒ * speaks every</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">SOV languages</head><p>If we modify MG 1 so that the verbs are strong case assigners, we get phonetic forms with the SOV word order. Let Lex 2 be the set containing the following 11 expressions: </p><formula xml:id="formula_22">&lt; some À À À linguist È È È È &lt; t &gt; λ &gt; &lt; ëvery À À À language &lt; speaks É É λ step 8 merge: &lt; c &gt; &lt; some À À À linguist È È È È &lt; λ &gt; λ &gt; &lt; ëvery À À À language &lt; speaks λ</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">VSO languages</head><p>If we modify MG 1 so that c and t strongly select their complements, triggering head movement with right adjunction, then we get phonetic forms with VSO word order. Let Lex 3 be the set containing the following 11 expressions: </p><formula xml:id="formula_23">c /speaks/ À À À &gt; &lt; some À À À linguist È È È È &lt; λ &gt; λ &gt; &lt; (every) È È È È<label>(language)</label></formula><p>&lt; (speaks) &lt; /every/ /language/ Notice that since believes strongly selects its clausal complement, we will get "verb clusters" in the highest c position with this grammar: step 14 merge:</p><formula xml:id="formula_24">&lt; c/believes//speaks/ È È È &gt; maria &lt; λ &gt; λ &gt; &lt; λ &gt; &lt; (some) (linguist) &lt; λ &gt; λ &gt; &lt; (every) (language) &lt; (speaks) &lt; λ λ &lt; (believes) À À &lt; λ &gt; &lt; /some/ /linguist/ &lt; λ &gt; λ &gt; &lt; λ λ &lt; λ &lt; /every/ /language/</formula><p>The pronounced positions of the verbs in these clusters exhibit "crossing" dependencies with respect to the pronounced positions of their respective subjects. Using subscripts to indicate which subjects go with which verbs, we derive the following orders of basic constituents in the phonetic form:</p><formula xml:id="formula_25">V 1 S 1 O 1 V 1 V 2 S 1 S 2 O 2 V 1 V 2 V 3 S 1 S 2 S 3 O 3 …</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">WW languages</head><p>Given the previous example, it is no surprise that the MG formalism allows the definition of simple "copying languages." That is, a certain kind of "reduplication" can be defined even though there is no copying operation in the grammar. Consider for example the grammar defined by the following lexicon of 9 elements, Lex 4 :</p><formula xml:id="formula_26">=V 1 c = V 2 c c =d 1 v 1 /1/ =d 2 v 2 /2/ =C =d 1 v 1 /1/ =C =d 2 v 2 /2/ d 1 /1/ d 2 /2/</formula><p>The exploration of derivations from this lexicon is left to the reader (particularly because the examples in the next two sections are of greater interest). Proposition 7. str ings(MG 4 ) = {ww| w ∈ {1,2} * }. (cf. also <ref type="bibr" target="#b8">[9]</ref>)</p><p>The proof of this claim is based on the fact, easily seen from the lexicon, that for every v 1 introduced in a derivation there must be exactly one corresponding d 1 , a for every v 2 introduced in a derivation there must be exactly one corresponding d 2 . Furthermore, all the verbs will raise to right adjoin to the highest c, in order, leaving the corresponding d's in their original positions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">c n v n s n o n</head><p>Like other formalisms that can define ww languages, the MG formalism can also define four counting dependencies. Let Lex 5 be the set containing the following 7 expressions:</p><p>=V </p><formula xml:id="formula_27">&gt; /s/ Ð Ð &gt; &lt; λ &gt; /s/ Ð Ð &lt; λ /o/ &gt; /o/ Ð Ð &lt; v /c/ /v/ /v/ λ step 8 merge: &lt; c /c/ /c/ /v/ /v/ È È È È &gt; /s/ &gt; &lt; λ &gt; /s/ &lt; λ /o/ À À À &gt; /o/ Ð Ð &lt; λ λ Proposition 8. str ings(MG 5 ) = {c n v n s n o n | n ≥ 0}.</formula><p>The proof of this proposition is based on the fact that any derivation of a well-formed structure must use one of the lexical complementizers: (i) =V c -case /c/ or (ii) =V c /c/ or (iii) c. The derivations in case (iii) are trivial. Any use of (i) in a derivation must have a corresponding use of C= =o +CASE =s v /v/ to allow for cancellation of the case features -this is the recursive case. And any use of (ii) must have a corresponding use of the non-recursive =o =s v /v/. An induction shows that either way, we will have equal numbers of c,v,s,o, in the appropriate order.</p><p>It is well known that neither str ings(MG 4 ) nor str ings(MG 5 ) are context free languages, but these languages are included in the "mildly context sensitive" class defined by <ref type="bibr" target="#b27">[28]</ref>, a class definable by tree adjoining grammars, by a certain kind of head wrapping grammars, and by a certain restricted form of combinatory categorial grammar. Let's call these languages TAG languages. It has been argued that we need to be able to define copying (ww) constructions to get Dutch dependencies <ref type="bibr" target="#b3">[4]</ref> and to get the Swiss-German string set <ref type="bibr" target="#b24">[25]</ref>.</p><p>Various linguists have argued that human languages cannot be properly handled by formalisms that yield only the TAG languages. <ref type="bibr" target="#b23">[24]</ref> argues that we need more power to get the right dependencies in German scrambling. <ref type="bibr" target="#b30">[31]</ref> and <ref type="bibr" target="#b22">[23]</ref> show that we need more power to get the string sets of number names in English and Chinese. And <ref type="bibr" target="#b19">[20]</ref> shows that we need more than TAG power to get the case system of Old Georgian, as that language is described in <ref type="bibr" target="#b1">[2]</ref>. Given these proposals, the following, final example is of interest.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6">c n v n x n s n o n</head><p>Languages with five counting dependencies are not included in the TAG languages. Notice that the previous example uses strong selection (in particular, head movement with right adjunction) to build up the c n v n , and it uses XP movement of (the "remnants" of) -case CP to build up the s n o n , interleaving these two processes properly. While there can be at most one head extraction from any constituent, there can be as many XP movements as there are kinds of licensees. (That is, there can be anywhere from 0 to |licensees| extractions from any constituent.) We use this idea to define a language with more than 4 counting dependencies. This example is based on one formulated by Anoop Sarkar (p.c.).</p><p>Let Lex 6 be the following set of 13 expressions:</p><formula xml:id="formula_28">=T c /c/ c =V f +D =x t -d =V f =x t -d =V =x t =V +D =x t =o =s v /v/ C= =o +F =s v /v/ =o =s v f -f /v/ C= =o +F =s v f -f /v/ s /s/ o /o/ x /x/</formula><p>The following derivation of /c c v v x x s s o o/ in 13 steps illustrates the basic recursion in the grammar. The x's are collected in the highest spec-ifiers of t, the s's and o's are collected in the highest specifiers of v, and the c's and v's all raise to the highest c:</p><formula xml:id="formula_29">step 1 merge: &lt; =s v f -f /v/ /o/ step 2 merge: &gt; /s/ Ð Ð &lt; vf -f /v/ À À À /o/ step 3 merge: &lt; =x t -d /v/ À À À &gt; /s/ Ð Ð &lt; - f Ð Ð /o/ step 4 merge: &gt; /x/ Ð Ð &lt; ẗ -d /v/ &gt; /s/ Ð Ð &lt; - f Ð Ð /o/ step 5 merge: &lt; c /c v/ &gt; /x/ Ð Ð &lt; -d Ð Ð &gt; /s/ Ð Ð &lt; - f Ð Ð /o/ step 6 merge: &lt; =o +F =s v /c v v/ È È È È &lt; λ &gt; /x/ Ð Ð &lt; -d &gt; /s/ Ð Ð &lt; - f Ð Ð /o/ step 7 merge: &gt; /o/ Ð Ð &lt; +F =s v /c v v/ &lt; λ &gt; /x/ Ð Ð &lt; - d &gt; /s/ Ð Ð &lt; - f Ð Ð /o/ step 8 move: &gt; &gt; /s/ Ð Ð &lt; λ Ð Ð /o/ &gt; /o/ Ð Ð &lt; =s v /c v v/ &lt; λ &gt; /x/ Ð Ð &lt; - d λ step 9 merge: &gt; /s/ Ð Ð &gt; &gt; /s/ Ð Ð &lt; λ Ð Ð /o/ &gt; /o/ Ð Ð &lt; v /c v v/ À À À &lt; λ &gt; /x/ Ð Ð &lt; - d λ step 10 merge: &lt; +D =x t /c v v/ È È È È &gt; /s/ Ð Ð &gt; &gt; /s/ Ð Ð &lt; λ Ð Ð /o/ &gt; /o/ Ð Ð &lt; λ &lt; λ &gt; /x/ Ð Ð &lt; -d λ step 11 move: &gt; &gt; /x/ Ð Ð &lt; λ λ &lt; =x t /c v v/ &gt; /s/ Ð Ð &gt; &gt; /s/ Ð Ð &lt; λ Ð Ð /o/ &gt; /o/ Ð Ð &lt; λ Ð Ð &lt; λ λ step 12 merge: &gt; /x/ Ð Ð &gt; &gt; /x/ Ð Ð &lt; λ Ð Ð λ &lt; ẗ /c v v/ À À À &gt; /s/ Ð Ð &gt; &gt; /s/ Ð Ð &lt; λ Ð Ð /o/ &gt; /o/ Ð Ð &lt; λ Ð Ð &lt; λ λ step 13 merge: &lt; c /c c v v/ À À À &gt; /x/ Ð Ð &gt; &gt; /x/ Ð Ð &lt; λ Ð Ð λ &lt; λ &gt; /s/ Ð Ð &gt; &gt; /s/ Ð Ð &lt; λ Ð Ð /o/ &gt; /o/ Ð Ð &lt; λ Ð Ð &lt; λ λ Proposition 9. str ings(MG 6 ) = {c n v n x n s n o n | n ≥ 0}.</formula><p>Languages like this one, with five counting dependencies, are not TAG languages.</p><p>It remains an open problem to specify how the MG-definable string sets compare to previously studied supersets of the TAG language class.</p><p>Following Chomsky and the earlier transformational tradition, the presentation of minimalist theory here is derivational. Brody <ref type="bibr" target="#b4">[5]</ref> presents a representational minimalism that may appear quite different, but Cornell's <ref type="bibr" target="#b9">[10]</ref> formalization of "representational minimalism" shows that the two are remarkably close. However, regardless of whether the presentation is derivational or representational, a simple formalism like the one explored in this paper requires some elaboration to handle human languages. For example, consider successive cyclic A-movement, as in i. John i is t i happy ii. John i seems t i to be t i happy iii. John i appears t i to seem t i to be t i happy iv. … One way to allow this assumes that while triggering features like =d, =n, +case, +CASE are deleted, the properties of the expressions d, n, -case are optionally not deleted.</p><p>Chomsky explores some much more elaborate grammars in <ref type="bibr" target="#b6">[7]</ref>, considering especially the following ideas:</p><p>• Maybe the syntax of human languages defines unordered trees, with ≺ imposed on the leaves by non-syntactic conditions. • Maybe projection need not be explicitly represented in all constructions, because it is fixed by language-universal principles.<ref type="foot" target="#foot_5">6</ref> • There may be additional "economy principles," acting as a kind of filter on derivations, and potentially defining a different class of languages. • Maybe the sharp distinction between head movement and phrasal movement can be eliminated in favor of a general account of what "pied pipes" in any movement, and some general minimality condition on movements.</p><p>Some of these ideas are explored in a formal setting in <ref type="bibr" target="#b26">[27,</ref><ref type="bibr" target="#b29">30]</ref>.</p><p>The MG grammar formalism is not symmetric with respect to linear order: all movements are leftward, the first selected constituent always attaches to the right of the selector, and all other selected constituents attach to the left. It is interesting to compare the asymmetries in this system with those considered by Kayne in <ref type="bibr" target="#b11">[12]</ref>. Given any tree τ = (N, * , ≺ * , &lt; * ), define the relations sister S, c-command CC, and asymmetric c-command ACC, all of them binary relations on N, as follows: aRb iff for some x, y, x * a, y * b, and xACCy.</p><p>Kayne's hypothesis (the "linear correspondence axiom") is this:</p><p>(LCA) In the structures of natural languages, R is a strict linear order on L. (linearity) Note that axiom (iii) is redundant, since it is entailed by (i) and (ii), and that it is different from what is usually called antisymmetry ((xRy ∧ yRx) → x = y). In terms of what languages can be defined, the LCA clearly imposes no restriction at all until it is combined with other constraints, but we can immediately consider whether the LCA is respected in the structures defined by MG grammars.</p><p>Clearly, the LCA is not respected in the trees defined by our grammars. For example, in the structure derived in §2.1 (as the result of step 8) the deepest 2 leaves are labeled /every/ and /language/, and these leaves are not linearly ordered by R. There are no nodes x, y such that xACCy, x dominates /every/, and y dominates /language/. Discussing this kind of case, Kayne says [12, pp9-10] that these two nodes "are in too symmetric a relation with one another…replacing one of the two symmetric nodes by a more complex substructure breaks the symmetry and renders the phrase marker admissible." But notice that in our system this structure is not "symmetric" in any interesting sense: these two nodes enter the derivation as the selecting node and the selected node respectively; one is a complement and one is not; and so on. Given these features, the MG formalism (and any near variant) is going to require syntactic anaylses similar to some of Kayne's, even though it does not use the extra X-bar-like structure required by the LCA to mark the asymmetries. Considering the goal of properly capturing the asymmetries of human linguistic structures, it is not clear that the LCA might be regarded as left-adjoined. Making this adjustment in the claim would not affect the very general remarks made here. Second, the LCA below could be taken as applying only to phonetically overt leaves of a tree, rather than to all the leaves, as suggested in <ref type="bibr">[7, p337]</ref>, for example. Again, for present purposes this adjustment is not relevant. has any advantage over this or other similar mechanisms that yield an appropriate structural asymmetry in all definable languages. <ref type="foot" target="#foot_7">8</ref>One other prominent idea in recent transformational grammar is that movement is actually copying and deletion, where deletion is not just a reflex of movement, but a process that is potentially sensitive to other aspects of structure. One empirical motivation for this idea comes from the existence of apparent "duplication" of phonetically overt substructures, where the duplicated elements are syntactically related but not part of the same word. This happens in a wide range of diverse languages and constructions: for example, in "predicate clefts" <ref type="bibr">[14, §6]</ref>, in "partial wh-movement" <ref type="bibr" target="#b18">[19]</ref>, and in "resumptive pronouns" <ref type="bibr" target="#b25">[26]</ref>. The attempt to account for these and other phenomena has led to the consideration of grammatical constraints that refer specifically to the presence of phonetic material <ref type="bibr" target="#b25">[26,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b15">16]</ref>. This contrasts with a relatively long-standing tradition according to which phonetic material is not relevant to the principles of grammar. For example, Bouchard <ref type="bibr" target="#b2">[3]</ref> argues that the stipulation of properties depending on whether a constituent is empty or not can undermine the empirical force of the grammar. The simple MG formalism presented here follows this older tradition, making phonetic and interpretable material completely irrelevant to the syntactic derivation. The question of how it should be extended to handle duplications of phonetic material is considered in <ref type="bibr" target="#b26">[27]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Appendix: Definition of the structure building operations</head><p>An expression is a tree τ , as defined in §1.2. An expression is complex (or a non-head) iff it has more than one node; otherwise, it is simple (or a head).</p><p>In the following definition it will be convenient to say that a tree τ has feature (or category) f iff the first element of the sequence that labels the head of τ is f. And we will say that a tree is maximal iff its root is the maximal projection of some head.</p><p>We use the standard labelled bracket notation [ &lt; τ 0 , τ 1 ] to indicate an expression with immediate subtrees τ 0 and τ 1 , in that linear order, where τ 0 projects over τ 1 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Dom(mer ge) = [τ 0 , τ 1 ]|</head><p>either τ 0 is a head that has feature =x, =X, or X=, and τ 1 has category x, or τ 0 is a complex expression that has feature =x, and τ 1 has category x mer ge(τ 0 , τ 1 ) =</p><formula xml:id="formula_30">                                                                              </formula><p>[ &lt; τ 0 , τ 1 ] if τ 0 is a head that has feature =x, τ 0 is like τ 0 except that =x is deleted, and τ 1 is like τ 1 except that x is deleted [ &lt; τ 0 , τ 1 ] if τ 0 is a head that has feature =X, τ 0 is like τ 0 except that =x is deleted and its phonetic features are the result of concatenating those of τ 0 and τ 1 in that order, τ 1 is like τ 1 except x and all phonetic features are deleted [ &lt; τ 0 , τ 1 ] if τ 0 is a head that has feature X=, τ 0 is like τ 0 except that =x is deleted and its phonetic features are the result of concatenating those of τ 1 and τ 0 in that order, τ 1 is like τ 1 except x and all phonetic features are deleted [ &gt; τ 1 , τ 0 ] if τ 0 is a complex that has feature =x τ 0 is like τ 0 except that =x is deleted, and τ 1 is like τ 1 except that x is deleted Dom(move) = τ| τ has a feature +x or +X, and τ has exactly one proper subtree with the feature -x } move(τ) = [ &gt; τ 0 , τ ], where either τ has feature +X, τ 0 is a proper subtree of τ with feature -x, τ 0 is maximal, τ 0 is like τ 0 except that -x is deleted, and τ is like τ except that +X is deleted and subtree τ 0 is replaced by a leaf with no features or τ has feature +x, τ 0 is a proper subtree of τ with feature -x, τ 0 is maximal, τ 0 is like τ 0 except that -x and all phonetic features are deleted, and τ is like τ except that +x is deleted and all non-phonetic features in τ 0 are deleted</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>7 aSb</head><label>7</label><figDesc>iff a = b and for some c ∈ N, c a and c b. aCCb iff for some c, aSc and c * b. aACCb iff aCCb and ¬bACCa. Now define a binary relation R on the leaves of the tree L = {x| ˜(∃y) x y}:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>= y then either xRy or yRx.</figDesc><table><row><cell>That is, ∀x, y, z ∈ L,</cell><cell></cell></row><row><cell>(i) if xRy then x = y,</cell><cell>(irreflexivity)</cell></row><row><cell>(ii) if xRy and yRz then xRz,</cell><cell>(transitivity)</cell></row><row><cell>(iii) if xRy then ¬yRx, and</cell><cell>(asymmetry)</cell></row><row><cell>(iv) if x</cell><cell></cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>This approach is inspired by Chomsky's[7, p245]  suggestion, "If constituents α, β of K have been formed in the course of computation, one of the two must project -say, α. At the LF interface, maximal K is interpreted as a phrase of the type α (e.g., as a nominal phrase if [the head of K] H(K) is nominal); and it behaves in the same manner in the course of computation." Note that this assumption is empirically loaded, and far from obviously correct. The relevant properties of a complex are not in general determined by just one of the immediate subconstituents. In the minimalist tradition, this fact is accommodated in part by allowing, in certain cases, the projecting head to incorporate features of its sister, and by allowing properties of subconstituents (namely, in our formalization, the -x subconstituents) to influence the elaboration of structure.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>Again, this treatment of heads is inspired by one of Chomsky's[7, pp245-245]   suggestions: "It is natural, then, to take the label of [the complex] K [formed from α and β] to be not α itself, but rather H(K), a decision that leads to technical simplification."</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_2"><p>We present the generating functions informally here, and present a more formal statement in the appendix. A detailed presentation can be found in<ref type="bibr" target="#b26">[27]</ref>.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_3"><p>As the diagram here indicates, the complex that results from incorporation is treated here just as a head with a a sequence of features, but most linguists assume that a more articulated structure is required. See, for example,<ref type="bibr" target="#b21">[22]</ref>,<ref type="bibr" target="#b28">[29]</ref>,<ref type="bibr" target="#b14">[15]</ref>. Further discussion of head movement and some alternative formalizations are presented in<ref type="bibr" target="#b26">[27]</ref>.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_4"><p>In particular, we are roughly following the proposal[7, p358]  made in the following passage: "…both Specs are within the minimal domain of v, so either is available for θ-marking the external argument of a transitive verb. Suppose that we allow this possibility, so that the outer Spec can host the external argument…Obj can only raise to the inner Spec …to check the strength feature and undergo overt Case marking. If overt object raising takes place, then Subj will be merged in the outer Spec to receive the external θ-role provided by the configuration…On these assumptions, it follows that Subj always c-commands Obj within IP." In fact, this kind of proposal has been familiar for some time. It was proposed, for example, in<ref type="bibr" target="#b16">[17]</ref> that the position where the object receives case is below the subject, and nevertheless within VP.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_5"><p>[7,  §4.4.2]  suggests that while mer ge is just defined to project one rather than the other of its arguments, in the case of move operations, we can deduce from other general assumptions about "checking" and "economy" that in the result, the moved subtree is projected over by its sister.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="7" xml:id="foot_6"><p>The formulation of Kayne's view offered here is simplified in two significant respects. First, following<ref type="bibr" target="#b17">[18]</ref> and<ref type="bibr" target="#b5">[6]</ref>, Kayne complicates these definitions for "adjunction structures." These have no exact analog in our system, but our specifiers</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="8" xml:id="foot_7"><p>See[7,  §4.8]  for further discussion of this point.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgments: Thanks to Edward Keenan, Thomas Cornell, Sean Fulop, Francois Lamarche, Jeff MacSwan and Anoop Sarkar for stimulating discussions and helpful suggestions on previous versions.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">The Polysynthesis Parameter</title>
		<author>
			<persName><forename type="first">Mark</forename><surname>Baker</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996">1996</date>
			<publisher>Oxford University Press</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Suffixaufname in Kartvelian</title>
		<author>
			<persName><forename type="first">Winfried</forename><surname>Boeder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Double Case: Agreement by Suffixaufnahme</title>
		<editor>
			<persName><forename type="first">Frans</forename><surname>Plank</surname></persName>
		</editor>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Oxford University Press</publisher>
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">On the Content of Empty Categories</title>
		<author>
			<persName><forename type="first">Denis</forename><surname>Bouchard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Foris</title>
		<imprint>
			<date type="published" when="1984">1984</date>
			<pubPlace>Dordrecht</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Cross-serial dependencies in Dutch</title>
		<author>
			<persName><forename type="first">Joan</forename><surname>Bresnan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ronald</forename><forename type="middle">M</forename><surname>Kaplan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stanley</forename><surname>Peters</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Annie</forename><surname>Zaenen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Linguistic Inquiry</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="613" to="635" />
			<date type="published" when="1982">1982</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<author>
			<persName><forename type="first">Michael</forename><surname>Brody</surname></persName>
		</author>
		<title level="m">Lexico-Logical Form: A Radically Minimalist Theory</title>
		<meeting><address><addrLine>Cambridge, Massachusetts</addrLine></address></meeting>
		<imprint>
			<publisher>MIT Press</publisher>
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Noam</forename><surname>Chomsky</surname></persName>
		</author>
		<author>
			<persName><surname>Barriers</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986">1986</date>
			<publisher>MIT Press</publisher>
			<pubPlace>Cambridge, Massachusetts</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">The Minimalist Program</title>
		<author>
			<persName><forename type="first">Noam</forename><surname>Chomsky</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995">1995</date>
			<publisher>MIT Press</publisher>
			<pubPlace>Cambridge, Massachusetts</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Government, barriers and small clauses in modern Irish</title>
		<author>
			<persName><forename type="first">Sandra</forename><surname>Chung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">James</forename><surname>Mccloskey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Linguistic Inquiry</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="173" to="238" />
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Deriving the ww language with µP style</title>
		<author>
			<persName><forename type="first">Thomas</forename><forename type="middle">L</forename><surname>Cornell</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996">1996</date>
		</imprint>
		<respStmt>
			<orgName>University of Tübingen</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Representational minimalism</title>
		<author>
			<persName><forename type="first">Thomas</forename><forename type="middle">L</forename><surname>Cornell</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996">1996</date>
		</imprint>
		<respStmt>
			<orgName>University of Tübingen</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Jane</forename><forename type="middle">H</forename><surname>Hill</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kenneth</surname></persName>
		</author>
		<author>
			<persName><surname>Hill</surname></persName>
		</author>
		<author>
			<persName><surname>Speaking</surname></persName>
		</author>
		<author>
			<persName><surname>Mexicano</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986">1986</date>
			<publisher>The University of Arizona Press</publisher>
			<pubPlace>Tucson, Arizona</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">The Antisymmetry of Syntax</title>
		<author>
			<persName><forename type="first">Richard</forename><surname>Kayne</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994">1994</date>
			<publisher>MIT Press</publisher>
			<pubPlace>Cambridge, Massachusetts</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Abstract syntax</title>
		<author>
			<persName><forename type="first">Edward</forename><forename type="middle">L</forename><surname>Keenan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Edward</forename><forename type="middle">P</forename><surname>Stabler</surname></persName>
		</author>
		<ptr target="http://128.97.8.34/" />
	</analytic>
	<monogr>
		<title level="m">Configurations: Essays on Structure and Interpretation</title>
		<editor>
			<persName><forename type="first">Anna-Maria Di</forename><surname>Sciullo</surname></persName>
		</editor>
		<meeting><address><addrLine>Somerville, Massachusetts</addrLine></address></meeting>
		<imprint>
			<publisher>Cascadilla Press</publisher>
			<date type="published" when="1996">1996</date>
			<biblScope unit="page" from="329" to="344" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">The Syntax of Verbs: From Verb Movement Rules in the Kru Languages to Universal Grammar</title>
		<author>
			<persName><forename type="first">Hilda</forename><surname>Koopman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1983">1983</date>
			<pubPlace>Foris, Dordrecht</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">On verbs that fail to undergo V-second</title>
		<author>
			<persName><forename type="first">Hilda</forename><surname>Koopman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Linguistic Inquiry</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="137" to="163" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">The spec-head configuration</title>
		<author>
			<persName><forename type="first">Hilda</forename><surname>Koopman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Syntax at Sunset: UCLA Working Papers in Syntax and Semantics</title>
		<editor>
			<persName><forename type="first">Edward</forename><surname>Garrett</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">Felicia</forename><surname>Lee</surname></persName>
		</editor>
		<imprint>
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">The position of subjects</title>
		<author>
			<persName><forename type="first">Hilda</forename><surname>Koopman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dominique</forename><surname>Sportiche</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Lingua</title>
		<imprint>
			<biblScope unit="volume">85</biblScope>
			<biblScope unit="page" from="211" to="258" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<author>
			<persName><forename type="first">Robert</forename><surname>May</surname></persName>
		</author>
		<title level="m">Logical Form: Its Structure and Derivation</title>
		<meeting><address><addrLine>Cambridge, Massachusetts</addrLine></address></meeting>
		<imprint>
			<publisher>MIT Press</publisher>
			<date type="published" when="1985">1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Partial and multiple wh-movement</title>
		<author>
			<persName><forename type="first">Dana</forename><surname>Mcdaniel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Natural Language and Linguistic Theory</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="565" to="604" />
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Semilinearity as a syntactic invariant</title>
		<author>
			<persName><forename type="first">Jens</forename><surname>Michaelis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Marcus</forename><surname>Kracht</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Logical Aspects of Computational Linguistics (LACL)</title>
		<imprint>
			<date type="published" when="1996">1996</date>
			<biblScope unit="page" from="37" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Principles of sentence pronunciation. MIT Lecture notes</title>
		<author>
			<persName><forename type="first">David</forename><surname>Pesetsky</surname></persName>
		</author>
		<ptr target="http://ruccs.rutgers.edu/roa.html" />
		<imprint>
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Verb movement, universal grammar, and the structure of IP</title>
		<author>
			<persName><forename type="first">Jean-Yves</forename><surname>Pollock</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Linguistic Inquiry</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="365" to="424" />
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Chinese number names, tree adjoining languages and mild context sensitivity</title>
		<author>
			<persName><forename type="first">Daniel</forename><surname>Radzinski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computational Linguistics</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="277" to="300" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">D-tree grammars</title>
		<author>
			<persName><forename type="first">Owen</forename><surname>Rambow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Vijay-Shanker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Weir</surname></persName>
		</author>
		<ptr target="http://xxx.lanl.gov/cmp-lg/ACL-95-proceedings.html" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 33rd Annual Meeting of the Association for Computational Linguistics</title>
		<meeting>the 33rd Annual Meeting of the Association for Computational Linguistics</meeting>
		<imprint>
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Evidence against the context-freeness of natural language</title>
		<author>
			<persName><forename type="first">M</forename><surname>Stuart</surname></persName>
		</author>
		<author>
			<persName><surname>Shieber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Linguistics and Philosophy</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="333" to="344" />
			<date type="published" when="1985">1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Resumptive pronouns as a last resort</title>
		<author>
			<persName><forename type="first">Ur</forename><surname>Shlonsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Linguistic Inquiry</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="443" to="468" />
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Acquiring and parsing languages with movement. Basil Blackwell</title>
		<author>
			<persName><forename type="first">Edward</forename><forename type="middle">P</forename><surname>Stabler</surname></persName>
		</author>
		<ptr target="http://128.97.8.34/" />
		<imprint>
			<date type="published" when="1996">1996</date>
			<pubPlace>Oxford</pubPlace>
		</imprint>
	</monogr>
	<note>Forthcoming. Draft available at</note>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">The equivalence of four extensions of context free grammar formalisms</title>
		<author>
			<persName><forename type="first">K</forename><surname>Vijay-Shanker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Weir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematical Systems Theory</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="511" to="545" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Verb Movement and Expletive Subjects in the Germanic Languages</title>
		<author>
			<persName><forename type="first">Sten</forename><surname>Vikner</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995">1995</date>
			<publisher>Oxford University Press</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Minimal computation</title>
		<author>
			<persName><forename type="first">Charles</forename><surname>Yang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996">1996</date>
		</imprint>
		<respStmt>
			<orgName>Massachusetts Institute of Technology</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Some languages that are not context free</title>
		<author>
			<persName><forename type="first">Arnold</forename><surname>Zwicky</surname></persName>
		</author>
		<idno>70</idno>
		<imprint>
			<date type="published" when="1963">1963</date>
			<pubPlace>Cambridge, Massachusetts</pubPlace>
		</imprint>
		<respStmt>
			<orgName>MIT Research Laboratory of Electronics</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report Quarterly Progress Report</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
