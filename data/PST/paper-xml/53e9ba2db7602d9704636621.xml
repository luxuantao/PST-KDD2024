<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Bifocals: Analyzing WebView Vulnerabilities in Android Applications</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Erika</forename><surname>Chin</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>Berkeley</settlement>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">David</forename><surname>Wagner</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>Berkeley</settlement>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Bifocals: Analyzing WebView Vulnerabilities in Android Applications</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">C2BE95CEAF68DECFEA749F01DDACF1DC</idno>
					<idno type="DOI">10.1007/978-3-319-05149-9</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T02:44+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Security</term>
					<term>Smartphones</term>
					<term>Mobile applications</term>
					<term>Static analysis</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>WebViews allow Android developers to embed a webpage within an application, seamlessly integrating native application code with HTML and JavaScript web content. While this rich interaction simplifies developer support for multiple platforms, it exposes applications to attack. In this paper, we explore two WebView vulnerabilities: excess authorization, where malicious JavaScript can invoke Android application code, and file-based cross-zone scripting, which exposes a device's file system to an attacker.</p><p>We build a tool, Bifocals, to detect these vulnerabilities and characterize the prevalence of vulnerable code. We found 67 applications with WebView-related vulnerabilities (11 % of applications containing Web-Views). Based on our findings, we suggest a modification to WebView security policies that would protect over 60 % of the vulnerable applications with little burden on developers.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Mobile devices and platforms are a rapidly expanding, divergent marketplace. Application developers are forced to contend with a multitude of Android mobile phones and tablets; customized OS branches (e.g., Kindle Fire, Nook Tablet); and a score of competing platforms including iOS and Windows Phone. Android developers are responding to the challenge of supporting multiple platforms through the use of WebViews, which allow HTML content to be displayed within an application. At a high level, WebViews provide the same functionality as a web browser, but allow full customizability with respect to how and what content is displayed (e.g., navigation UIs, full screen, etc). These in-application browsers allow developers to write code in platform-neutral HTML and JavaScript that can be displayed by any device and version. Furthermore, application updates become simple. Developers merely update the HTML content downloaded by an application.</p><p>While convenient, these customized browsers can also pose a threat to application security, as allowing web content to interact with the application increases the application's attack surface. We show in this paper that these problems are real.</p><p>One feature of Android is that it provides a way for JavaScript in a WebView to invoke Android application code, if this is enabled by the application. In particular, the application developer can register an interface (an API to the mobile application) that can be called by the JavaScript. This allows the web page to access functionality and data exposed by the application. This may seem safe, as typically developers use WebViews to display trusted websites. However, it introduces a new risk <ref type="bibr" target="#b27">[29]</ref>. If the user navigates the WebView to an untrusted malicious website, the malicious page may receive access to potentially sensitive application data. Similarly, if the application loads a page over HTTP and if the user is using an insecure WiFi network, a man-in-the-middle could inject malicious content into the page and mount a similar attack. Allowing JavaScript to invoke application code breaks traditional browser security models.</p><p>In this work, we detail various WebView-based attacks and present our vulnerability identification tool, Bifocals. We ran the tool on a data set of 864 applications. Among the 608 applications that contain WebViews, we find that over 20 % of applications have the potential to give websites access to code. Of these applications, we find 54 % allow a user to navigate to malicious JavaScript that could access application code.</p><p>Based on our findings, we recommend modifications to Android to address these risks. Our experiments suggest that these modifications would protect more than 60 % of the vulnerable applications.</p><p>We make the following contributions:</p><p>-We build a tool to identify vulnerable WebViews.</p><p>-We measure the prevalence and impact of vulnerable WebViews.</p><p>-We suggest and evaluate solutions to mitigate these vulnerabilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Application and Web Interaction</head><p>To understand vulnerabilities in WebViews, we must first understand the features provided by WebViews. The WebView class allows developers to display data from web pages and files within the confines of the application, seamlessly integrating web and application content. Through the WebView, not only can developers set the content to be displayed, but they can also specify the layout and behavior of the WebView (e.g., display the address bar, track the browsing history, allow searches, etc.). Essentially, the WebView class allows a developer to create their own custom, embedded web browser. Alternatively, web content can be displayed by sending a request to a browser application to load the content. We will focus on the WebView approach to displaying web content as customizations in a WebView can lead to security problems, while browsers are separate applications outside of an application's security boundary.  We discuss how WebViews are created and how they can be customized in detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">WebView API</head><p>The WebView API allows developers to display content in various formats. Web-Views can load (1) web content using the HTTP or HTTPS protocols, (2) files from the file system via "file://," and (3) HTML via "data://." By default, a basic WebView does not execute JavaScript nor can the web content interact with the application in any way. If the user clicks on a link within the Web-View, the application is exited and the URI is loaded by the device's default web browser.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">WebView Customizations</head><p>We discuss relevant WebView customizations that can be made by the developer. We list the APIs in Table <ref type="table" target="#tab_1">1</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>WebSettings (Javascript and File Access). Each WebView contains its own</head><p>WebSetting. The Android WebSettings class manages the settings of a WebView:</p><p>-Javascript execution in a webpage can be enabled by calling setJavaScript-Enabled() on the WebSetting. By default, JavaScript execution is off. -Access to the local file system (e.g. loading a file in a WebView) is enabled by calling setAllowFileAccess(). By default, WebViews have file system access.<ref type="foot" target="#foot_1">2</ref> -Access to files by JavaScript running in the context of a file scheme URI is enabled by calling setAllowFileAccessFromFileURLs(). By default, Web-Views grant this access for API versions prior to Jelly Bean. -Access to content from any origin by JavaScript running in the context of a file scheme URI is enabled by calling setAllowUniversalAccessFromFile-URLs(). By default, WebViews grant this access for API versions prior to Jelly Bean.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>WebViewClient (Navigation Ability).</head><p>A WebView may or may not have an associated WebViewClient. The Android WebViewClient class is an event The default behavior of the WebView when the user clicks on a link in the WebView depends on the WebViewClient. We show this in Table <ref type="table" target="#tab_2">2</ref>. A Web-View without a WebViewClient launches the web browser. If the WebView has a WebViewClient, the behavior depends on the shouldOverrideUrlLoading() method. If the method is not overridden or it returns false, then URIs are launched in the WebView. Otherwise, the behavior depends on the implementation of the method.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Interfaces (Code Access).</head><p>Developers can also give web content access to the application's internal Java code. By calling addJavascriptInterface(Object object, String name), the developer provides a handle to an application's interface to be used by JavaScript in loaded pages. For example:</p><p>WebView wv = new WebView(); wv.getSettings().setJavaScriptEnabled(true); wv.addJavascriptInterface(new MyClass(), "mycls"); wv.loadURL("http://www.foo.com");</p><p>The above code creates a WebView where its web contents can invoke methods in MyClass. Any webpage in the WebView can invoke the methods with this JavaScript: &lt;script&gt; mycls.someMethod1(); mycls.someMethod2(); &lt;/script&gt; WebViews provide a way to meld applications with web content. Developers can allow JavaScript to invoke registered application methods, potentially enabling application state to be altered on the fly; and they control how a user may navigate pages. These can be powerful mechanisms towards providing a rich, interactive user experience. However, they can also introduce security vulnerabilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Attacks</head><p>The use of WebViews exposes applications to a larger attack surface. We discuss two types of vulnerabilities we identified: excess authorization and file-based cross-zone scripting, and the relevant threat model for attackers to exploit these vulnerabilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Threat Model</head><p>We assume developers are not malicious, though they may have varying levels of expertise in developing on the Android platform. While the application itself is trusted, web content and the open network it passes over should not be. We will discuss this in greater detail as we explain each vulnerability.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Excess Authorization</head><p>When a developer enables JavaScript execution and registers interfaces to a WebView, JavaScript content in the WebView can invoke the registered interfaces. If malicious third-party JavaScript gets loaded in the page, then it too can invoke the application's registered Java code. As authorization is actually granted to more web content than intended, we call this an excess authorization vulnerability. This general attack was introduced by Luo <ref type="bibr" target="#b27">[29]</ref>. We develop variations and design and conduct a large-scale measurement study to understand the prevalence of this vulnerability.</p><p>Repercussions. Access to the application's Java code can lead to a variety of security implications depending on the functionality of the Java code. Information injection and leakage can occur if the invoked methods receives and returns information, respectively. Malformed input parameters may be able to crash the application, corrupt data, or otherwise launch a denial of service. Privilege escalation can occur if the methods require privileges that are owned by the applications <ref type="bibr" target="#b20">[22,</ref><ref type="bibr" target="#b22">24]</ref>. Malicious JavaScript, in combination with other application vulnerabilities such as inter-application messaging vulnerabilities <ref type="bibr" target="#b15">[17]</ref>, can lead to attacks on other applications installed on the device. These are just a few of the ways an attacker can wreak havoc on an application.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Attackers. We consider two threat models:</head><p>Malicious Third-Party Content. There are many ways malicious JavaScript can appear in a WebView. Usually, the first-party content on the first page loaded is trusted. However, this page could also contain ads. Malicious ads containing JavaScript have appeared on popular advertising networks such as Google, Yahoo, and The New York Times <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b11">13]</ref>. Another way third-party content can be embedded in the page is through the use of frames. Finally, the user may navigate to third parties via links (if allowed by the WebView's settings). If any of this third-party content is malicious, it could invoke the application interfaces in ways the developer might not have anticipated.</p><p>Network Attacker. Another variation on this vulnerability is if the device is on an insecure network. If any page or resource is loaded over an unencrypted connection (i.e., over HTTP), then a man-in-the-middle attacker could inject any page of his choosing as a response to the request and thereby inject malicious JavaScript into the WebView.</p><p>Other Threats not Considered in this Paper. Even supposedly "trusted" websites can present a threat. First, trusted parties may purposely include what they think to be benign, third-party JavaScript. Nikiforakis et al. have shown that over 88 % of websites include at least one remote JavaScript library <ref type="bibr" target="#b28">[30]</ref>. Malicious JavaScript could be included and could invoke the Android application's interface.</p><p>Additionally, "trusted" websites may also contain a cross-site scripting (XSS) vulnerability that allows an attacker to load malicious JavaScript in the page <ref type="bibr" target="#b16">[18,</ref><ref type="bibr" target="#b18">20,</ref><ref type="bibr">27]</ref>. Over 75 % of web applications are estimated to be vulnerable to cross-site scripting <ref type="bibr" target="#b31">[33]</ref>. If a page loaded in the WebView is vulnerable to XSS, an attacker may be able to exploit the XSS vulnerability to introduce malicious JavaScript into the page and then attack the mobile application.</p><p>For the purposes of this study, we focus on malicious third-party content and network attackers. Vulnerabilities in trusted websites can be inferred by assuming that 75-88 % of websites may also pose a threat due to remote script inclusion or XSS.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">File-Based Cross-Zone Scripting</head><p>The Android WebView renderer treats everything loaded via a "file://" URL as being in the same origin. This allows any content loaded via a "file://" URL to read any file on the filesystem that the application can, including application internal storage (which is not accessible to any other application) and, if the application has permission, any file stored on the SD card. If the application loads static content via a "file://" URL, and this content includes third-party, untrusted JavaScript (or includes JavaScript over an unencrypted HTTP connection), this JavaScript gains the ability to read all the files in the filesystem that the application can. <ref type="foot" target="#foot_2">3</ref>If the JavaScript is requested over an insecure connection, a man-in-themiddle attacker can inject malicious JavaScript. If the JavaScript is requested over HTTPS, but from an external, potentially untrusted source, the JavaScript itself could be malicious. Once malicious JavaScript is loaded, it can read files, create a network connection, and send the contents back to the attacker.</p><p>The exposed surface for this attack is admittedly smaller than the excess authorization attack. Only loaded files provide access to the vulnerability, and once the user navigates away from the "file://" scheme, the attack can no longer be launched. Similarly, the attack cannot be launched through a non-file frame. As we find in our measurement study, file-based cross-zone scripting vulnerabilities are fortunately fairly rare.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Bifocals</head><p>We present a tool, Bifocals, which closely examines two aspects of WebView interaction, the application and the web content, to automatically identify Web-View vulnerabilities in Android applications. In Sect. 4.1, we describe how we analyze Android applications to identify at-risk WebViews. In Sect. 4.2, we describe how we crawl and analyze the web pages loaded into WebViews, to determine whether an attacker may be able to inject malicious Javascript into the WebView. In Sect. 4.3, we describe how we put these parts together to determine the potential impact of an attack.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Application Analysis</head><p>The first step of the tool is to detect potential WebView vulnerabilities.</p><p>Policy. If a WebView enables JavaScript, registers a JavaScript interface, and loads a URI, then it may be vulnerable to an excess authorization attack (depending on the content loaded). WebViewClient settings determine whether a user can navigate away from the page while staying within the confines of the WebView. This increases the potential for attack because every page a user navigates could also contain malicious JavaScript, as opposed to just the initial landing page. Implementation Details. Applications for the Android platform are comprised of Dalvik executable (DEX) files that run on Android's Dalvik Virtual Machine. We first disassemble application DEX files and extract XML content and file resources packaged with the application using the publicly available Dedexer <ref type="bibr" target="#b29">[31]</ref> and Baksmali tools <ref type="bibr" target="#b10">[12]</ref>.</p><p>Bifocals statically analyzes the disassembled output. Static analysis is a common approach for bug finding <ref type="bibr" target="#b14">[16,</ref><ref type="bibr" target="#b26">28,</ref><ref type="bibr" target="#b35">37]</ref>. Bifocals specifically performs flowsensitive, interprocedural static analysis. For optimization purposes, we limit the method invocation tracking to a nesting depth of three. Experimentally, we have not seen any cases where WebView information is propagated more than three levels deep. Bifocals tracks the state of WebViews (and WebView subclasses), WebViewClients (and WebViewClient subclasses), strings, numbers, and any relevant fields, parameters, and return values.</p><p>For each method that uses WebViews, Bifocals determines:</p><p>1. Whether JavaScript execution has been enabled for the WebView 2. If it allows JavaScript, what interfaces are made accessible to the JavaScript 3. The URI that is being loaded 4. Whether a user can navigate to other webpages within the WebView (by evaluating the implementation of any methods that override WebViewClient. shouldOverrideUrlLoading())</p><p>In most cases, these properties are determined by tracking information to the WebView (string value, numbers, classes, etc.). Determining the fourth property requires a little more explanation. In addition to implicitly setting a navigation policy via the presence of the WebViewClient or using the default behavior of the WebViewClient.shouldOverrideUrlLoading() method, developers may also apply a policy for navigation behavior through code in the WebViewClient.should OverrideUrlLoading() implementation. We apply a heuristic to infer navigability. If the implementation of this method returns false, then users can navigate within the WebView. If the code for this method (or any methods called within the code for this method) contains a load URI call, then users can navigate within the WebView, unless it also contains a message invocation to launch the web browser. In that case, the developer has set a hybrid policy (e.g., loading the page in the WebView if the domain is mysite.com and launching the browser otherwise), and we conservatively consider that any new URIs will launch the browser (limiting the navigability, and thus, the attack opportunity).</p><p>These vulnerable WebViews and the URIs loaded into them are passed to the web analysis portion of the tool.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Web Analysis</head><p>The second stage analyzes the URIs (websites, files, and data) that are being accessed to determine whether they might embed or navigate to third-party content.</p><p>Policy. For each URI, Bifocals examines the page for potentially malicious third-party content. We focus specifically on attack scenarios where malicious JavaScript may be included in the WebView via website content, insecure networks, and user navigation and not via the exploitation of XSS vulnerabilities. Although third-party content can encompass many forms of content (e.g., images, scripts, frames, etc.), we limit the definition of potentially malicious third-party content to content that can lead to the execution of untrusted script. We classify ads and frames that load third-party sites as potentially malicious. Ads can be supplied by anyone and can contain JavaScript. Similarly, frames that load external content are considered untrusted. We ignore third-party images and other content that does not contain or execute script. We also ignore non-adrelated JavaScript (e.g., non-ad &lt;script src=...&gt;) unless it is embedded in a third-party page. Many webpages include popular, trusted third-party JavaScript, such as Google Analytics, Facebook's "Like" button, etc., and we assume these are intentional and we do not treat them as potentially malicious.</p><p>If a WebView is navigable, we apply the same evaluation to all pages transitively linked from the landing page (to a depth of three). Additionally, if the user can navigate to a third-party page (via links) in the WebView, we classify it as potentially malicious.</p><p>We assume that the primary website being visited and sites within the same domain are trustworthy, as well as anything belonging to the same secondlevel domain (the domain directly below the top-level domain in the DNS). For example, suppose a WebView loads http://mysubdomain.mysite.com. The domain mysubdomain.mysite.com, its second-level domain (SLD) mysite.com, and other subdomains of it (e.g., myothersubdomain.mysite.com) are most likely under the same jurisdiction and therefore we treat them all as trustworthy. This trust is similar to the implicit trust of cookie setting between a subdomain and its parent domain <ref type="bibr" target="#b3">[4]</ref>. In the case of domains with country codes, we take the third-level domain (e.g., http://blogs.telegraph.co.uk's trusted domain would be telegraph.co.uk.). Implementation Details. To perform this analysis, we build on a basic web crawler built as a Firefox extension <ref type="bibr" target="#b23">[25]</ref>. Given a URI, this crawler invokes Firefox, loads the page, and returns redirect information and the HTML source (including the frame source). We modified the extension to also log links, frames, and links within frames.</p><p>To identify ad content, we incorporated and modified the Adblock Plus extension <ref type="bibr" target="#b0">[1]</ref>. Adblock Plus is a browser extension that parses pages and identifies and removes ads. For every network request required to load a page, it invokes a JavaScript function shouldLoad() that returns whether that content is an ad and should be loaded. We modified Adblock Plus in two ways. First, we modified the shouldLoad() function to log the content type (e.g., script, image, document, subdocument, etc. [9]), request origin, and target location. Second, we always allow the content to be loaded but log when an ad is identified.</p><p>To simulate a mobile browser, we modify the Firefox preference file (prefs.js) to set the user-agent string to the user-agent of an Android browser. This way, the web behavior returned by the request is the mobile behavior, not the desktop browser behavior.</p><p>Finally, we modify URIs before loading. For URIs that load data, we prepend the HTML with data:text/html, so that the browser loads the data string as a data URI. For URIs that load data with a relative base URI, we prepend the HTML with data:text/html,&lt;base href='' + theBase + "&gt; to ensure that the browser renders the data and resolves all relative references.</p><p>The crawler then crawls the URIs that could be loaded into the WebView. If a vulnerability is identified or the WebView that the URI is from is not navigable, the crawling for that URI ends. Otherwise, the crawler repeats the page analysis for all links in the page and frames with the same SLD as the original URI or its redirects. We limit the crawling link depth to three for feasibility reasons.</p><p>Results from the crawler and the application analysis are then combined to identify WebViews that are fully vulnerable to the excess authorization attack.</p><p>We identify file-based cross-zone scripting attacks by checking if any of the loaded file URIs (regardless of whether interfaces are registered) contain thirdparty JavaScript.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Impact Analysis</head><p>There are many ways to examine the impact of a vulnerability. As discussed in Sect. 3.2, an attack on a WebView could result in information leakage, information injection, DoS, etc. One way to measure impact is to examine how many privileged resources an attacker would gain access to. We do this by analyzing the code invoked by the interface and determining the permissions required to execute that code.</p><p>We built a tool to determine what Android APIs a registered interface transitively grants access to (through invocation) and the permissions they correspond to. Given an interface, we analyze all methods that can be accessed in that interface (namely, all public methods and any superclasses' public methods). We assume that the attacker can determine public methods via reflection or direct analysis of the target application.</p><p>For each of the directly accessible methods, we recursively analyze the methods invoked by the method and the Android API calls made in the method. If an interface method returns an object of a different class, we analyze that object's public methods as well. We apply an Android API-to-permission map <ref type="bibr" target="#b19">[21]</ref> to determine the set of permissions used by the reachable code. To determine the permissions used by non-API calls, Android message passing, Android databases, and code invoked via Java reflection, we modify Felt et al.'s Stowaway tool <ref type="bibr" target="#b19">[21]</ref> to identify and output the methods in which these permissions are used. If those methods are reachable, then we add the corresponding permissions to the permission set. We include both normal and dangerous permissions in the set of permissions used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Limitations and Discussion</head><p>Platforms. There are alternatives to using Firefox extensions to perform a web crawl. We could have used a command-line tool (e.g., wget), however this has limitations on the information received from the page. We chose a full-featured web browser which allowed us to leverage the existing Adblock extension, parse the loaded DOM in real-time, and fully render the content.</p><p>We chose to run this on a desktop computer with modifications to the browser preferences to spoof a mobile browser, as Firefox is more robust and efficient in crawling pages at scale. Given the massive amounts of meta-data produced from the crawl (from a large data set), performing the crawl on a mobile device would present challenges of dealing with a less robust, memory-and spacelimited operating system. While it is possible for websites to rely on fields other than user-agent to determine whether it is running on a mobile device (and change content accordingly), user-agent is by far the most commonly used field.</p><p>In fact, we investigated the possibility of alternate indicators (e.g., JavaScript's Navigator.platform or Navigator.appName), but we observed only the useragent being used in the websites we crawled. Even if websites were modified based on different Navigator fields, it is more likely to change the layout, not the nature of the content (frames, ads, etc.), and therefore it would not impact our results.</p><p>Ad Networks. Although we identify ads as potentially malicious, some ad networks may prohibit JavaScript from advertisers. We did not further classify ad networks based on whether a third-party advertiser could include JavaScript.</p><p>Crawling. One of the limitations of our crawling approach is the possibility of false negatives. Web content is dynamic. An ad or other third-party JavaScript may not always appear on a given page. To address this, we crawled each page three times.</p><p>Another potential source of false negatives is the inability to crawl all content. We limited the crawl depth to three links, but untrusted JavaScript may be on a page that our tool did not crawl. Websites might prevent our crawler from seeing the content behind a pay-wall or login-wall. In this case, our crawler will only analyze the login page. To address this, we would have to manually create accounts, log in, and crawl the page.</p><p>Due to these limitations, our tool reports a lower bound on vulnerable applications. On the other hand, mobile applications change less frequently than web content, and we can use the number of potential WebView vulnerabilities from the application analysis to estimate an upper bound on the number of actual vulnerable WebViews.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Static Analysis.</head><p>A limitation to our static analysis approach is the risk of not deriving the full URI. If a URI is comprised of strings that are obtained from dynamic messages (Intents), from an API call that we do not handle, or from system state (e.g., getting the device ID, getting accelerometer data), then static analysis may fail to infer the full URI loaded into the WebView. Crawling an invalid URI could result in a redirect to a different page. In most cases, we believe that the redirected page would also be representative of the content that the page would have displayed (in terms of using ads and linking to third-parties). We additionally supplement missing data by substituting logical default values for substrings that cannot be derived. For example, if float value that we do not track is included in the URI, then a "1.0" is inserted in its place. Our tool also does not attempt to handle implicit control flow or resolve Java reflection of the WebView API, and this could lead to false negatives. Our tool, however, does resolve Java reflection for the impact analysis which is more likely to contain reflection. (Developers are unlikely to reflectively call the WebView API as the API is already publicly accessible.)</p><p>We considered a dynamic analysis approach to Bifocals as an alternative to our static approach. A dynamic analysis tool would be able to accurately determine dynamically set variables and state. It would also be able to confirm a vulnerability by exploiting it at run-time. However, it would be challenging to explore the full application state space to traverse all WebViews and to generate valid input for malicious JavaScript. Additionally, some Android UIs cannot be explored without user input (e.g., applications with logins). We chose a static approach because it achieves better code coverage, increasing the possibility of discovering vulnerabilities that may not have been exposed at runtime. We leave the possibility of a combined static and dynamic approach to leverage the benefits of both techniques for future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Evaluation</head><p>We ran Bifocals on 864 popular Android 2.2 applications to identify the prevalence of WebView vulnerabilities. The dataset consists of the 100 most popular paid applications, 764 most popular free applications, and 100 recently added free applications from the Android Market (as of Oct. 2010). After removing duplicate applications, applications that only consisted of keys to unlock paid features for free applications, and applications used for tool development and testing, we were left with a set of 864 applications for analysis. <ref type="foot" target="#foot_3">4</ref></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Characterizing the Use of WebViews</head><p>Developer Use of WebViews. We first analyzed these applications to better understand their use of WebViews. We found that 608 of the 864 applications (70.4 %) contained at least one WebView in the application. Of these 608 applications, 433 (71.2 % of applications with WebViews, 50.1 % of all applications) contained at least one WebView in the core functionality of the application. Also, 351 applications (57.7 % of applications with WebViews, 40.6 % of all applications) contained at least one WebView displayed by an ad library in the application. <ref type="foot" target="#foot_4">5</ref> This suggests that use of web content in Android applications is common.</p><p>The web content displayed in a WebView can be hosted remotely or locally. We analyzed all WebViews in these applications to identify what URI is initially loaded into the WebView. In Table <ref type="table" target="#tab_3">3</ref>, we summarize the schemes used by these applications. Overall, many applications load content over HTTP or via the data scheme. Use of SSL is much less common.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Exposure of Interfaces.</head><p>We further examined how many applications allow JavaScript to invoke application code (by registering interfaces). We call these authorized WebViews. As indicated in Table <ref type="table" target="#tab_4">4</ref>, of the 608 applications with Web-Views, we find that one-fifth of these applications have at least one authorized WebView. Furthermore, one-fifth of applications have authorized, core WebViews, while 10.8 % of applications have authorized, ad WebViews. <ref type="foot" target="#foot_5">6</ref> This suggests that many developers do use WebView APIs to grant web content access to application content. The 38 applications with authorized ad WebViews can be attributed to three distinct ad providers: Millennium Media <ref type="bibr" target="#b7">[8]</ref>, AdMarvel <ref type="bibr" target="#b1">[2]</ref>, and Medialets <ref type="bibr" target="#b6">[7]</ref>.</p><p>In Table <ref type="table" target="#tab_5">5</ref>, we further break these authorized WebViews down by the scheme of the URI initially loaded in the WebView. Unsurprisingly, many of these Web-Views load content over the HTTP protocol, and very few use SSL. The distribution of schemes for these types of WebViews closely mirrors that for all Web-Views, except that fewer of the applications loading content via data schemes expose an interface (10 % vs. 16 %; p = 0.025, Fisher's exact test).</p><p>Among the 85 applications that expose interfaces to core WebViews, 34 applications (40 %) have WebViews where the user can navigate within the WebView, while 51 applications (60 %) have WebViews that limit navigation (by launching subsequent URLs in a browser application). This is promising, as it shows that a majority of the applications have reduced their potential attack surface. However, restricting navigation does not fully eliminate the risk if the first page includes third-party frames or JavaScript.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Automated Analysis</head><p>In summary, Bifocals found 67 applications (11.0 % of applications with Web-Views, and 55.8 % of applications with authorized WebViews) that are vulnerable to at least one of the attacks presented. The high rate of vulnerabilities suggests that the Android WebView interface is error-prone and exposing APIs to web content is particularly risky. Excess Authentication Vulnerabilities. We summarize the number of vulnerable applications in Table <ref type="table" target="#tab_6">6</ref>. We evaluate ad and core WebViews separately, as vulnerabilities in ad libraries can only be fixed by the ad provider, while vulnerabilities in the core application can be fixed by the application developer. Also, patching one ad library could secure multiple applications while patching vulnerabilities found in core WebViews must be done individually by each affected developer.</p><p>Network Attacker. We found 65 applications (54.1 % of applications that register interfaces) that are vulnerable to an excess authorization attack if used while connected to an insecure network. The impact of these vulnerabilities varies. For 18 (56.2 %) of the 32 applications with this type of vulnerability in a core WebView, a network attacker gains access to API calls that use one or more Android permissions available to the application. Thus, the attacker may be able to take actions that would not be available to arbitrary web content. None of the ad libraries' WebViews give access to API calls that require permissions, so those vulnerabilities may have lower impact. It is important to note that access to permissions is only one metric to measure impact. Several other attacks may be possible even on applications whose API does not use any special permissions.</p><p>Web Attacker. Bifocals found 51 applications (42.5 % of applications that register interfaces) that are vulnerable to attack through malicious websites.</p><p>Many of these vulnerabilities grant a malicious website abilities that we would not expect web content to receive. 13 (72 %) of the 18 applications containing a core WebView that is vulnerable to a web attack give the web attacker the ability to invoke an API that uses one or more of the application's Android permissions. In contrast, none of the ad-based vulnerabilities allow attackers to invoke code that uses permissions.</p><p>File-Based Cross-Zone Scripting Vulnerabilities. Our tool identified two applications that load files with remote JavaScript. One of these is vulnerable to a network attack. The other makes requests over SSL from a trusted site, making it resistant to attack.</p><p>Upon further inspection, we find that many files loaded into a WebView are simple HTML pages with no need for JavaScript. For example, files may contain EULAs, Terms of Service, and FAQ pages.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Manual Analysis</head><p>We randomly selected 10 applications (of the 18 applications with a web-based excess authorization vulnerability in a core WebView) and manually analyzed these applications to determine the false positive rate of Bifocals. For each selected application, we examined the code, the loaded websites, and application as installed on an Android phone. For each reported vulnerability, we confirmed that Bifocals correctly inferred the APIs registered, URIs loaded, and navigation capability of the WebView. For each loaded URI, we confirmed the crawler result: that an ad, external frame, or site was found within the navigation constraints of the WebView. We did not build an exploit. We manually analyzed 19 vulnerable WebViews across 10 applications and found no false positives suggesting that Bifocals's false positive rate is likely below 5-10 %.</p><p>We now discuss a few applications and the vulnerabilities we discovered.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Alive.</head><p>Alive is an application that displays Japanese cartoon images. It has a feature that allows a user to browse for other applications to install. This content is displayed in a WebView, and the landing page and linked pages contain ads. The registered interface provides code to download and install an application. The expected use case is that a user can select an application and click "download" which will download content at a specified URL and save it the SD card. The user is then asked whether they want to install the application. If they accept it, the code launches Android's application installation process. This introduces multiple risks. One possible attack is that a network attacker or malicious advertisement could save arbitrary files to the SD card, by invoking the registered API with a URL pointing to a site controlled by the attacker. Also, an attacker could trick the user into installing a malicious application, if the attacker launches her attack when the user is browsing an application they are likely to install, or possibly through some other social engineering attack.</p><p>The Alive application has two other WebViews with vulnerabilities that allow web content to be downloaded to the internal data folder instead of the SD card.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>AIM.</head><p>The AOL Instant Messaging application contains a vulnerable WebView that accesses the READ PHONE STATE permission. The application provides an interface to handle successful logins. An attacker (network or web) can use this interface to control the values of the authentication token, session key, screen name, profile URL, and icon URL. This data goes into an "IdentityPreference" data structure which gets used throughout the application, making the application vulnerable to information injection and potentially a CSRF login attack.</p><p>Ad Libraries. We also manually examined two of the three ad libraries with potential vulnerabilities: Millennial Media and AdMarvel. The third, Medialets, was obfuscated. Millennial Media and AdMarvel are advertising services that offer rich media ads. Both have registered interfaces that allow the web content to modify the look and feel of the WebView (e.g., view size or layout settings). While neither of these libraries' interfaces invoke protected resources, an attack can still be mounted. An attacker can resize the WebView to take up the whole screen, increasing the chance that the user clicks on it.</p><p>Our tool was unable to determine the URLs for these WebViews (due to complexities with URL generation), so we manually confirmed the vulnerability and blacklisted the two libraries. It is possible that the obfuscated library, Medialets, is also vulnerable, but we conservatively leave that out of our analysis. Only 5 applications use Medialets.</p><p>Evaluation of the Tool. We find that our tool is able to correctly determine the URL loaded for each WebView in most cases. In both cases, the missing portion of the URL was a value for the URL query string. Ultimately, these query parameters did not affect the landing page, therefore the result from the crawler was correct.</p><p>In two cases, the website no longer existed, and in its place were squatter and GoDaddy pages, respectively. Our crawler crawled these pages and found potential vulnerabilities. We believe this to be the correct result as the squatting page would be displayed to the user, making the WebView vulnerable. In fact, this may present a larger threat, as an attacker can easily gain access to the user's application by purchasing the domain.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Limitations</head><p>One limitation of our study is that our data set is two years old. It would be interesting to evaluate Android 4.2 applications. We do not know how the results would differ. (We suspect the results may not change significantly. First, Web-Views have increased in popularity, potentially increasing the number of applications exposed to these vulnerabilities. Second, all vulnerabilities still exist in the current platform API. Only one change was made to the JavaScript interface for Android 4.2, which was to require explicit annotations to JavaScript accessible methods (announced on Feb. 14, 2013 <ref type="bibr" target="#b9">[11]</ref>). This modification is only applied to applications that set Android 4.2 as the minimum or targeted API. As of Feb. 4, only 1.4 % of Android devices operate on Android 4.2 <ref type="bibr" target="#b2">[3]</ref>, and it is unlikely that many developers have set their applications to restrict distribution to the Android 4.2 platform.)</p><p>6 Suggested Improvements</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Current Shortcomings</head><p>The core of the excess authorization problem is that any content loaded in the WebView is able to invoke application code, making it very easy for developers to unintentionally grant untrusted sources the ability to invoke application code. We conjecture that many of the vulnerabilities we found may be attributable to developer confusion with the WebView system. In particular, we observed three significant pitfalls for developers:</p><p>1. WebViewClients transparently change navigation behavior. If a WebView-Client is added, the WebView is implicitly made navigable. A developer who adds a WebViewClient to alter some non-navigation feature will make their WebView navigable, and thus may introduce an excess authorization vulnerability without realizing. 2. We have observed confusion with what the shouldOverrideURLLoading() method means and does. Stack Overflow contains many questions on what the method should do <ref type="bibr" target="#b34">[36]</ref>. Most commonly, we have observed implementations of the overridden method that load a URL and then return true. This is the equivalent of not overriding the method at all or simply returning false. 3. A third potential source of confusion is that developers just may not be aware that everything loaded in the page or navigated to can invoke the application code.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Recommendations for Developers</head><p>In light of these pitfalls, we suggest ways a developer can reduce their attack exposure:</p><p>-Disable Javascript. Developers can turn off JavaScript if they do not need it.</p><p>-Restrict Navigability. Developers can restrict the WebView's navigability. This, however, only limits content loaded via links and does not limit content in the document (e.g., frames or JavaScript). Consequently, it is not a complete defense. -Limit APIs. Third, developers can limit the exposure to the API by only registering necessary interfaces. Functionality that should not be made available to web content should be separated out into a different class. -Use New Android Mechanisms. Android recently announced a new requirement for accessible interface methods to be annotated with @Java-scriptInterface for Android 4.2 <ref type="bibr" target="#b9">[11]</ref>. Developers should opt in to this by setting the minimum (or targeted) SDK version to Android 4.2. One caveat, however, is that while this may reduce accidental over-inclusion of accessible methods, it does nothing to prevent JavaScript from invoking intentional interface methods. Another caveat is that this approach does not exist for devices running versions older than 4.2. Also, it may take years for Android 4.2 to be used by a majority of phones, and developers may not want to limit their application's user base by targeting 4.2 for a while.</p><p>While these do not wholly prevent a vulnerability, they may limit the attack surface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Recommendations for the Android Platform</head><p>To reduce the risk of unintentional excess authorization, we recommend that the Android platform be modified so that access to an exposed interface is granted only to specified domains instead of all content loaded in a particular WebView. For example, if a WebView loads foo.com, only foo.com should be allowed to invoke the interface. Other domains should not get access to the interface. Thirdparty web content loaded via frames should not get access to application code.</p><p>Specifically, we propose a policy that limits access by the second-level domain (SLD). The policy maintains a list of allowed SLDs for each WebView, and authorizes all content from such an SLD to invoke any interface registered with that WebView. By default, the list of allowed SLDs is initialized with the SLD of the URL initially loaded in the WebView. If this triggers a redirect, we automatically add the SLD of the target as well. This list can be supplemented by an optional developer-supplied whitelist of acceptable SLDs for each WebView (a WebView-level whitelist).</p><p>This approach provides an automated way to secure WebViews, lowering developer burden, while providing flexibility for developers to override the policy if they intentionally want specific third-party content to access the application.</p><p>Developer Effort. We evaluated this approach based on the amount of developer effort that would be required to comply with it. We found that 100 % of core applications that give access to code are handled automatically by our default policy and do not require any developer effort or other changes. Effectiveness. Our approach would patch vulnerabilities due to frames and links. It would not patch vulnerabilities due to third-party JavaScript included directly on the landing page as they would obtain the domain of the page. <ref type="foot" target="#foot_6">7</ref>We find that of the 18 vulnerable core applications, 11 of the landing pages (61 %) would be patched by our proposed policy. The remaining applications load ads directly on the landing page. Our estimate, however, may be an underapproximation of the number of patched pages. Adblock flags actual ads as well as ad providers' JavaScript (such as the Google script that generates the ad). It is possible that the JavaScript subsequently loads the ad content in a frame, in which case our solution would patch the vulnerability; however, this case is not included in our count of patched applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Related Work</head><p>WebViews. We are inspired by the work of Luo et al., which identifies the potential for WebView attacks <ref type="bibr" target="#b27">[29]</ref>. They give examples for how webpages can attack applications, how applications can attack webpages, and introduce the excess authorization vulnerability. They perform a brief, primarily manual analysis of the possibility of these vulnerabilities in applications. We extend their work by identifying variations on the basic code exposure attack and enumerating threats from different attackers, including the network attacker and attacks via remote script inclusion and XSS threats. Also, in contrast to their small-scale, manual investigation, we perform a large-scale measurement study and build an automated analysis tool to detect these vulnerabilities.</p><p>Saltzman blogged about a WebView-related attack in file-sharing applications <ref type="bibr" target="#b8">[10]</ref>. File-sharing applications, such as DropBox, often save files to the application's internal file directory and can be displayed in a WebView. Assuming a malicious file gets saved, this file would then gain access to other files, potentially sending them to the attacker. We present a file-based cross-zone scripting attack that is a more general form of this attack, which can occur in any application. A trusted internal file, as opposed to a malicious file, can load external JavaScript, giving it access to the file system.  <ref type="bibr" target="#b12">[14,</ref><ref type="bibr" target="#b19">21]</ref>. AdDroid examines overprivilege due to permissions only required by ad libraries <ref type="bibr" target="#b30">[32]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Static Analysis</head><p>Other static analysis tools focus on the identification of grayware or malicious applications. SCanDroid takes a data-centric approach to reasoning about the consistency of security specifications concerning permissions and databases <ref type="bibr" target="#b21">[23]</ref>. Their tool, however, takes Java source code as input. Kim et al. present a bytecode-level static analysis tool to detect privacy leaks. They track location info, IDs (IMEI, IMSI, ICC-ID), audio and video eavesdroppers <ref type="bibr" target="#b24">[26]</ref>. <ref type="bibr">Batyuk et al. and Schmidt et al.</ref> similarly propose static analysis techniques to identify malicious Android applications <ref type="bibr" target="#b13">[15,</ref><ref type="bibr" target="#b33">35]</ref>. To our knowledge, no tools have been created to analyze Android and web interaction.</p><p>In contrast to building static analysis tools from scratch, Scandariato et al. apply the COTS tool, Fortify Source Code Analyzer, to open-source Android applications and use code metrics to infer the likelihood of vulnerabilities <ref type="bibr" target="#b32">[34]</ref>. Enck et al. also take advantage of Fortify's SCA but avoid dataset limitations of open source applications by creating a decompiler called ded to generate Java source code from an application binary. They examine security properties such as IMEI leakage and resource abuse <ref type="bibr" target="#b17">[19]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusion</head><p>While WebViews facilitate the creation of rich, interactive applications, they also introduce the potential for attack if developers are not careful. We examine vulnerabilities of WebViews and present Bifocals, which analyzes both Android applications and web content to identify vulnerabilities in applications. We discovered 67 applications that are vulnerable to attack through WebViews.</p><p>Excess authorization arises due to a mismatch in authorization expectations. A developer may intend to give code access to a specific website, but in actuality access is granted to anything loaded in the WebView. We propose changes to WebViews to grant code access based on the domain and not the WebView, thereby limiting the opportunity for exposure to malicious JavaScript. Our solution patches 60 % of the vulnerabilities we found and requires very little developer effort.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 .</head><label>1</label><figDesc>Select list of API calls used to customize WebView behavior</figDesc><table><row><cell>API call</cell></row><row><cell>setWebViewClient(WebViewClient client)</cell></row><row><cell>addJavascriptInterface(Object object, String name)</cell></row><row><cell>getSettings().setJavaScriptEnabled(. . .)</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 2 .</head><label>2</label><figDesc>How navigation events are handled, based on properties of the WebViewClient (WVC) that allows developers to specify how content is rendered. By subclassing this client, the developer can specify what actions should be taken when the page finishes loading, a resource is loaded, an error is received, etc. Most notably, it allows the developer to specify the navigation behavior of the WebView (i.e., what action should be taken when the user clicks on a link in the WebView.) By overriding the default shouldOverrideUrlLoading() method, the developer can take different actions based on the contents of the URI. For example, a developer may specify that the URI be loaded in the WebView if it is on a specific domain, otherwise it launches the URI via web browser.</figDesc><table><row><cell cols="3">Has WVC? shouldOverride()? Loaded in:</cell></row><row><cell>No</cell><cell>N/A</cell><cell>Browser</cell></row><row><cell>Yes</cell><cell>Default</cell><cell>WebView</cell></row><row><cell></cell><cell>Returns false</cell><cell>WebView</cell></row><row><cell></cell><cell>Returns true</cell><cell>Depends on impl.</cell></row></table><note><p>handler</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 3 .</head><label>3</label><figDesc>The types of URIs loaded into WebViews</figDesc><table><row><cell>Content loaded via:</cell><cell># of apps</cell><cell>%</cell></row><row><cell>HTTP or HTTPS</cell><cell cols="2">345 56.7 %</cell></row><row><cell>http://</cell><cell cols="2">335 55.1 %</cell></row><row><cell>https://</cell><cell>15</cell><cell>2.5 %</cell></row><row><cell>Local static content (file/data)</cell><cell cols="2">374 61.5 %</cell></row><row><cell>file://</cell><cell cols="2">103 16.9 %</cell></row><row><cell>data: (e.g., &lt;html&gt;. . .)</cell><cell cols="2">323 53.1 %</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 4 .</head><label>4</label><figDesc>Breakdown of applications that grant JavaScript code access by whether the WebView is in the core application or ad library</figDesc><table><row><cell></cell><cell>Total</cell><cell>Core</cell><cell>Ad</cell></row><row><cell>Apps with WebViews</cell><cell>608</cell><cell>433</cell><cell>352</cell></row><row><cell>Apps with auth'ed WVs</cell><cell>120</cell><cell>85</cell><cell>38</cell></row><row><cell>%</cell><cell cols="3">19.7 % 19.6 % 10.8 %</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 5 .</head><label>5</label><figDesc>Breakdown of authorized applications by the URI scheme used</figDesc><table><row><cell cols="2">Authorized WVs by URI scheme # of Apps</cell></row><row><cell>http://</cell><cell>57 (47.5 %)</cell></row><row><cell>https://</cell><cell>2 (1.7 %)</cell></row><row><cell>file://</cell><cell>19 (15.8 %)</cell></row><row><cell>data:</cell><cell>32 (26.7 %)</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>Table 6 .</head><label>6</label><figDesc>The number of vulnerable apps found by Bifocals</figDesc><table><row><cell>Vulnerability</cell><cell cols="2">Core Ad Total</cell></row><row><cell cols="2">Network attack 32</cell><cell>33 65</cell></row><row><cell>Web attack</cell><cell>18</cell><cell>33 51</cell></row><row><cell>Total</cell><cell>33</cell><cell>33 66</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head></head><label></label><figDesc>Tools for Android. Researchers have developed static analysis tools to identify other security properties in Android applications. For vulnerability detection, Grace et al. and Felt et al. apply CFG-based static analysis techniques to detect capability leaks across application boundaries [22,24]. Felt et al. and Au et al. build static analysis tools examine permission overprivilege in Android applications</figDesc><table /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>We use the term "web browser" to specifically reference a device's default web browsing application and "WebView" to refer to developer customized views.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>Regardless, access to an application's assets and resources (located at file:///android asset and file:///android res) is always granted within each application.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_2"><p>Caveat: In the latest release of Android, the Android OS was modified to require developers to explicitly enable access to "file://" URLs, reducing the opportunity for attack. For applications prior to Jelly Bean and for applications that do not set the minimum OS version to Jelly Bean, access to files is still granted by default.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_3"><p>We wanted to analyze both free and paid applications in order to avoid biases that might be present in free applications. Therefore, we reused an existing dataset rather than buying the applications a second time. It would be interesting to see if the results differ if we were to repeat the same experiments on current applications.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_4"><p>In the rest of the section, we may shorten the phrases "WebView in the core functionality of the application" to "core WebView" or "core application" and "WebView in an ad library in the application" to "ad WebView" or "ad application."</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_5"><p>The sum of the applications with core and ad WebViews exceed the 120 applications as some applications have both core WebViews and ad WebViews.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="7" xml:id="foot_6"><p>Our approach also would not mitigate attacks via a XSS vulnerability (which is outside the scope of this work).</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgments. This research was supported by Intel through the ISTC for Secure Computing. Any opinions, findings, conclusions, or recommendations expressed in this publication are those of the authors and do not necessarily reflect the views of Intel.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<ptr target="http://adblockplus.org/" />
		<title level="m">Adblock plus</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<ptr target="http://www.admarvel.com/" />
		<title level="m">AdMarvel</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<ptr target="http://web.archive.org/web/20130205234427/http://developer.android.com/about/dashboards/index.html" />
		<title level="m">Dashboards: Platform versions</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<ptr target="http://www.rfc-editor.org/rfc/rfc6265.txt" />
		<title level="m">HTTP state management mechanism RFC</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<ptr target="http://news.cnet.com/8301-270803-20000898-245.html" />
		<title level="m">Malware delivered by Yahoo, Fox, Google ads</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<author>
			<persName><surname>Malware</surname></persName>
		</author>
		<ptr target="http://www.zdnet.com/blog/security/malware-infected-winrar-distributed-through-google-adwords/2405" />
		<title level="m">WinRAR distributed through Google AdWords</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<ptr target="http://www.medialets.com/" />
		<title level="m">Medialets</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<ptr target="http://www.millennialmedia.com/" />
		<title level="m">Millennial media</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<ptr target="http://blog.watchfire.com/wfblog/2012/10/old-habits-die-hard.html" />
		<title level="m">Old Habits Die Hard: Cross-Zone Scripting in Dropbox &amp; Google Drive Mobile Apps</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<ptr target="http://android-developers.blogspot.com/2013/02/security-enhancements-in-jelly-bean.html" />
		<title level="m">Security Enhancements in Jelly Bean</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<ptr target="http://code.google.com/p/smali/" />
		<title level="m">Smali and baksmali</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<ptr target="http://www.nytimes.com/2009/09/15/technology/internet/15adco.html" />
		<title level="m">Times web ads show security breach</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Short paper: a look at smartphone permission models</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">W Y</forename><surname>Au</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">F</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Gill</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Lie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1st ACM Workshop on Security and Privacy in Smartphones and Mobile Devices</title>
		<meeting>the 1st ACM Workshop on Security and Privacy in Smartphones and Mobile Devices</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Using static analysis for automatic assessment and mitigation of unwanted and malicious activities within Android applications</title>
		<author>
			<persName><forename type="first">L</forename><surname>Batyuk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Herpich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">A</forename><surname>Camtepe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Raddatz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Schmidt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Albayrak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th International Conference on Malicious and Unwanted Software (MALWARE</title>
		<meeting>the 6th International Conference on Malicious and Unwanted Software (MALWARE</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Static analysis for security</title>
		<author>
			<persName><forename type="first">B</forename><surname>Chess</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Mcgraw</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Security &amp; Privacy</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="76" to="79" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Analyzing inter-application communication in Android</title>
		<author>
			<persName><forename type="first">E</forename><surname>Chin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">P</forename><surname>Felt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Greenwood</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Annual International Conference on Mobile Systems, Applications, and Services</title>
		<meeting>the Annual International Conference on Mobile Systems, Applications, and Services</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Identifying cross site scripting vulnerabilities in web applications</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">A</forename><surname>Di Lucca</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">R</forename><surname>Fasolino</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mastoianni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Tramontana</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th IEEE International Workshop on Web Site Evolution (WSE</title>
		<meeting>the 6th IEEE International Workshop on Web Site Evolution (WSE</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A study of Android application security</title>
		<author>
			<persName><forename type="first">W</forename><surname>Enck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Octeau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Mcdaniel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Chaudhuri</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 20th USENIX Security Symposium</title>
		<meeting>the 20th USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">The evolution of cross site scripting attacks</title>
		<author>
			<persName><forename type="first">D</forename><surname>Endler</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
			<publisher>Whitepaper, iDefense Incorporation</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Android permissions demystified</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">P</forename><surname>Felt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Chin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Hanna</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM Conference on Computer and Communications, Security</title>
		<meeting>the ACM Conference on Computer and Communications, Security</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Permission re-delegation: Attacks and defenses</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">P</forename><surname>Felt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Moshchuk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Hanna</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Chin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 20th USENIX Security Symposium</title>
		<meeting>the 20th USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">SCanDroid: Automated security certification of Android applications</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">P</forename><surname>Fuchs</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Chaudhuri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">S</forename><surname>Foster</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
		<respStmt>
			<orgName>University of Maryland</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Systematic detection of capability leaks in stock Android smartphones</title>
		<author>
			<persName><forename type="first">M</forename><surname>Grace</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Jiang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 19th Annual Symposium on Network and Distributed System</title>
		<meeting>the 19th Annual Symposium on Network and Distributed System<address><addrLine>Security</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">No plan survives contact: Experience with cybercrime measurement</title>
		<author>
			<persName><forename type="first">C</forename><surname>Kanich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Chachra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Mccoy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Grier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Motoyama</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Levchenko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Savage</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">M</forename><surname>Voelker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th Conference on Cyber Security Experimentation and Test</title>
		<meeting>the 4th Conference on Cyber Security Experimentation and Test</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">ScanDal: Static analyzer for detecting privacy leaks in Android applications</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Yoon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Yi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Shin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Center</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the MoST</title>
		<meeting>the MoST</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page">27</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Noxes: A client-side solution for mitigating cross-site scripting attacks</title>
		<author>
			<persName><forename type="first">E</forename><surname>Kirda</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Vigna</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Jovanovic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2006 ACM Symposium on Applied, Computing</title>
		<meeting>the 2006 ACM Symposium on Applied, Computing</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Finding security vulnerabilities in Java applications with static analysis</title>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">B</forename><surname>Livshits</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">S</forename><surname>Lam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th Conference on USENIX Security Symposium</title>
		<meeting>the 14th Conference on USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Attacks on WebView in the Android system</title>
		<author>
			<persName><forename type="first">T</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Hao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Yin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 27th Annual Computer Security Applications Conference</title>
		<meeting>the 27th Annual Computer Security Applications Conference</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">You are what you include: Large-scale evaluation of remote JavaScript inclusions</title>
		<author>
			<persName><forename type="first">N</forename><surname>Nikiforakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Invernizzi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kapravelos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Van Acker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Joosen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Piessens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Vigna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM Conference on Computer and Communications</title>
		<meeting>the ACM Conference on Computer and Communications<address><addrLine>Security</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<author>
			<persName><forename type="first">G</forename><surname>Paller</surname></persName>
		</author>
		<ptr target="http://dedexer.sourceforge.net/" />
		<title level="m">Dedexer</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">AdDroid: Privilege separation for applications and advertisers in Android</title>
		<author>
			<persName><forename type="first">P</forename><surname>Pearce</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">P</forename><surname>Felt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Nunez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proceedings of AsiaCCS</title>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">WhiteHat: 90 percent of websites vulnerable to attack</title>
		<author>
			<persName><surname>Sc Magazine</surname></persName>
		</author>
		<ptr target="http://www.scmagazine.com/whitehat-90-percent-of-websites-vulnerable-to-attack/article/58066/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Predicting vulnerable classes in an Android application</title>
		<author>
			<persName><forename type="first">R</forename><surname>Scandariato</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Walden</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th International Workshop on Security Measurements and Metrics</title>
		<meeting>the 4th International Workshop on Security Measurements and Metrics</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Static analysis of executables for collaborative malware detection on Android</title>
		<author>
			<persName><forename type="first">A.-D</forename><surname>Schmidt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Bye</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H.-G</forename><surname>Schmidt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Clausen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Kiraz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">A</forename><surname>Yuksel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">A</forename><surname>Camtepe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Albayrak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Communications (ICC</title>
		<meeting>International Conference on Communications (ICC</meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Developer sites contradict each other regading webviewshouldoverrideurlloading</title>
		<author>
			<persName><forename type="first">Stack</forename><surname>Overflow</surname></persName>
		</author>
		<ptr target="http://stackoverflow.com/q/10865788" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">A first step towards automated detection of buffer overrun vulnerabilities</title>
		<author>
			<persName><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">S</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">A</forename><surname>Brewer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Aiken</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Network and Distributed System Security Symposium</title>
		<meeting>Network and Distributed System Security Symposium</meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
