<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">VIOLIN: Virtual Internetworking on Overlay Infrastructure</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Xuxian</forename><surname>Jiang</surname></persName>
							<email>jiangx@cs.purdue.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">Purdue University</orgName>
								<address>
									<postCode>47907</postCode>
									<settlement>West Lafayette</settlement>
									<region>IN</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Dongyan</forename><surname>Xu</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Purdue University</orgName>
								<address>
									<postCode>47907</postCode>
									<settlement>West Lafayette</settlement>
									<region>IN</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">VIOLIN: Virtual Internetworking on Overlay Infrastructure</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">A87ABF857887354B1A888EC3C61E8EF7</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T13:59+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We propose a novel application-level virtual network architecture called VIOLIN (Virtual Internetworking on OverLay INfrastructure). VIOLINs are isolated virtual networks created on top of an overlay infrastructure (e.g., PlanetLab). Entities in a VIOLIN include virtual end-hosts, routers, and switches implemented by software and hosted by physical overlay hosts. Novel features of VIOLIN include: (1) a VIOLIN is a "virtual world" with its own IP address space. All its computation and communications are strictly confined within the VIOLIN. ( <ref type="formula">2</ref>) VIOLIN entities can be created, deleted, or migrated on-demand. (3) Value-added network services not widely deployed in the real Internet can be provided in a VIOLIN. We have designed and implemented a prototype of VIOLIN in PlanetLab.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Current Internet only provides basic network services such as IP unicast. In recent years, overlay networks have emerged as application-level realization of value-added network services, such as anycast, multicast, reliable multicast, and active networking. While highly practical and effective, overlays have the following problems: (1) Application functions and network services are often closely coupled in an overlay, making the development and management of overlays complicated. <ref type="bibr" target="#b1">(2)</ref> The development of overlay network services is mainly individual efforts, leading to few standards and reusable protocols. Meanwhile, advanced network services <ref type="bibr" target="#b0">[1]</ref>[2][3][4] <ref type="bibr" target="#b4">[5]</ref> have been developed but not widely deployed. <ref type="bibr" target="#b2">(3)</ref> It is hard to isolate an overlay from the rest of the Internet, making it easy for a compromised overlay node to attack other Internet hosts.</p><p>In this paper, we propose a novel virtual network architecture called VIOLIN (Virtual Internetworking on OverLay INfrastructure), motivated by recent advances in virtual machine technologies <ref type="bibr" target="#b5">[6]</ref> <ref type="bibr" target="#b6">[7]</ref>. The idea is to create virtual isolated network environments on top of an overlay infrastructure. A VIOLIN 1 consists of virtual routers, LANs, and end-hosts, all being software entities hosted by overlay hosts. The key difference between VIOLIN and application-level overlay is that VIOLIN re-introduces system(OS)-enforced boundary between applications and network services. As a result, a VIOLIN becomes an "advanced Internet" running value-added network-level protocols for routing, transport, and management.</p><p>The novel features of VIOLIN include: (1) Each VIOLIN is a "virtual world" with its own IP address space. All its computation and communications are strictly confined within the VIOLIN. (2) All VIOLIN entities are software-based, leading to high flexibility by allowing on-demand addition/deletion/migration/ configuration. (3) Value-added network services not widely deployed in the real Internet can be provided in a VIOLIN. (4) Legacy applications can run in a VIOLIN without modification, while new applications can leverage the advanced network services provided in VIOLIN.</p><p>We expect VIOLIN to be a useful complement to application-level overlays. First, VIOLIN can be used to create testbeds for network-level experiments. Such a testbed contains more realistic network entities and topology, and provides researchers with more convenience in experiment setup and configuration. Second, VIOLIN can be used to create a service-oriented (virtual) IP network with advanced network services such as IP multicast and anycast, which will benefit distributed applications such as video conferencing, on-line community, and peer selection.</p><p>We have designed and implemented a prototype of VIOLIN in PlanetLab. A number of distributed applications have also been deployed in VIOLIN. The rest of the paper is organized as follows. Section 2 provides an overview of VI-OLIN. Section 3 justifies the design of VIOLIN and its benefit to distributed applications. Section 4 describes the implementation and ongoing research problems of VIOLIN. Section 5 presents preliminary performance measurements in PlanetLab. Section 6 compares VIOLIN with related works. Finally, section 7 concludes this paper and outlines our ongoing work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">VIOLIN Overview</head><p>The concept of VIOLIN is illustrated in Figure <ref type="figure" target="#fig_0">1</ref>. The low-level plane is the real IP network; the mid-level plane is an overlay infrastructure such as PlanetLab; and the top-level plane shows one VIOLIN created on the overlay infrastructure. All entities in the VIOLIN are hosted by overlay hosts; and there are three types of entities like in the real network: end-host, LAN, and router.</p><p>-A virtual end-host (vHost) is a virtual machine running in a physical overlay host. Meanwhile, it is possible that one physical overlay host supports multiple vHosts belonging to different VIOLINs. -A virtual LAN (vLAN) is constructed by creating one virtual switch (vSwitch, not shown in Figure <ref type="figure" target="#fig_0">1</ref>) that connects multiple vHosts. -A virtual router (vRouter) is also a virtual machine with multiple virtual NICs (vNICs). A vRouter interconnects two or more vLANs.</p><p>Figure <ref type="figure">2</ref> shows a simple VIOLIN we create in PlanetLab. Two vLANs are interconnected by one vRouter (vRouter1 hosted by planetlab1.cs.purdue.edu): One vLAN comprises vHost1, vHost2, and vSwitch1; while the other one comprises vHost3, vHost4, and vSwitch2. The links between these entities emulate cables in the real world. The IP address space of the VIOLIN is completely independent. Therefore, it can safely overlap the address space of another VIOLIN or the real Internet.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">VIOLIN Design Justification</head><p>In this section, we make the case for VIOLIN and describe how applications (including network experiments) can benefit from VIOLIN.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Virtualization and Isolation</head><p>Analogous with the relation between virtual machine and its host machine, VI-OLIN involves network virtualization and leads to isolation between a VIO-LIN and the underlying IP network. Virtualization makes it possible to run unmodified Internet protocols in VIOLINs. Furthermore, entities in a VIOLIN are decoupled from the underlying Internet. For example, if we perform traceroute from vHost1 (hosted by planetlab-1.cs.princeton.edu) to vHost3 (hosted by planetlab01.cs.washington.edu) in Figure <ref type="figure">2</ref>, we will only see vRouter1 as the intermediate router and the hop count is two, although the PlanetLab hosts at Princeton and at UW are many more hops apart in the actual Internet. More interestingly, it is potentially feasible to repeat such virtualization recursively: a level-n VIOLIN can be created on a level-(n -1) VIOLIN, with level-0 being the real Internet. Network isolation is with respect to (1) administration: the owner of a VIO-LIN has full administrator privilege -but only within this VIOLIN; (2) address space and protocol: the IP address spaces of two VIOLINs can safely overlap and the versions and implementations of their network protocols can be different -for example, one running IPv4 while the other running IPv6; (3) attack and fault impact: any attack or fault in one VIOLIN will not affect the rest of the Internet; (4) resources: if the underlying overlay infrastructure provides QoS support <ref type="bibr" target="#b7">[8]</ref>[9], VIOLIN will be able to achieve resource isolation for local resources (such as CPU and memory <ref type="bibr" target="#b9">[10]</ref>) of VIOLIN entities and for network bandwidth between them.</p><p>Benefit to applications System-level virtualization and isolation provide a confined and dedicated environment for untrusted distributed applications and risky network experiments. From another perspective, applications requiring strong confidentiality can use VIOLIN to prevent both internal information leakage and external attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">System-Enforced Layering</head><p>Contrary to application-level overlays, VIOLIN enforces strong layering in order to disentangle application functions and network services. In addition, OSenforced layering provides better protections to network services after the application level software is compromised. We note that layering itself does not incur more performance overhead compared with application-level overlays. We also note that layering is between application and network functions, not between network protocols. In fact, VIOLIN can be used as a testbed for the protocol heap architecture <ref type="bibr" target="#b10">[11]</ref>.</p><p>Benefit to applications Application developers will be able to focus on application functions rather than network services, leading to clean design and easy implementation. In addition, legacy applications can run in a VIOLIN without modification and re-compilation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Network Service Provisioning</head><p>VIOLIN provides a new opportunity to deploy and evaluate advanced network services. There exist a large number of well-designed network protocols that are not yet widely deployed. Examples include IP multicast, scalable reliable multicast <ref type="bibr" target="#b1">[2]</ref>[4], IP anycast <ref type="bibr" target="#b2">[3]</ref>, and active networking [1] <ref type="bibr" target="#b4">[5]</ref>. There are also protocols that are still in the initial stage of incremental deployment (e.g., IPv6). VIOLIN is a platform to make these protocols a (virtual) reality.</p><p>Benefit to applications VIOLIN allows applications to take full advantage of value-added network services. For example, in a VIOLIN capable of IP multicast, applications such as publish-subscribe, layered media broadcast can be more conveniently developed than in the real Internet. We further envision the emergence of service-oriented VIOLINs, each with high-performance vRouters and vSwitches deployed at strategic locations (for example, vRouters close to Internet routing centers, vSwitches close to domain gateways), so that clients can connect to the VIOLIN to access its advanced network services.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Easy Reconfigurability</head><p>Based on all-software virtualization techniques, VIOLIN achieves easy reconfigurability. Different from a physical network, vRouters, vSwitches, and vHosts can be added, removed, or migrated dynamically. Also, vNICs can be dynamically added to or removed from vHosts or vRouters; and the number of ports supported by a vSwitch is no longer a hardware constraint.</p><p>Benefit to applications The easy reconfigurability and hot vNIC plug-andplay capability of VIOLIN is especially useful to handle the dynamic load and/or membership of distributed applications. Not only can a VIOLIN be created/torn down on-demand for an application, its scale and topology can also be adjusted in a demand-driven fashion. For example, during a multicast session, a new vLAN can be dynamically grafted on a vRouter to accommodate more participants.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">VIOLIN Implementation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Virtual Machine</head><p>All VIOLIN entities are implemented as virtual machines (VMs) in overlay hosts. We adopt User-Mode Linux (UML) <ref type="bibr" target="#b11">[12]</ref> as the VM technology. UML allows most Linux-based applications to run on top of it without any modification. Based on ptrace mechanism, UML -the guest OS for a virtual machine, performs system call redirection and signal handling to emulate a real OS. More specifically, the guest OS will be notified when an application running in the virtual machine issues a system call, the guest OS will then redirect the system call into its own implementation and nullify the original call. One important feature of UML is that it is completely implemented at user level without requiring host OS kernel modifications.</p><p>Unfortunately, the original UML has a serious limitation: both virtual NICs and virtual links of virtual machines are restricted within the same physical host. Inter-host virtual links, which are essential to VIOLIN, have not been reported in current VM projects <ref type="bibr">[6][7]</ref>[13]. To break the physical host boundary, we have performed non-trivial extension to UML and introduced transport-based interhost tunneling.</p><p>More specifically, we use UDP tunneling in the Internet domain to emulate the physical layer in the VIOLIN domain. For example, to emulate the physical link between a vHost and a vSwitch, the guest OS for the vHost opens a UDP transport connection for the vNIC and obtains a file descriptor -both in the host OS domain. To receive data from the vSwitch, SIGIO signal will be generated by the host OS for the file descriptor whenever data are available. The vSwitch maintains the IP address and UDP port number (in the Internet domain) for the vNIC of the vHost, so that the vSwitch can correctly emulate data link layer frame forwarding. Such virtualization is transparent to the network protocol stack in the guest OS. Finally, inter-host tunneling enables hot plug-and-play of vNICs (Section 3.4); and it does not exhibit MTU effect as in the EtherIP <ref type="bibr" target="#b13">[14]</ref> and IP-in-IP <ref type="bibr" target="#b14">[15]</ref> approaches.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Virtual Switch</head><p>A vSwitch is created for each vLAN and is responsible for packet forwarding at the (virtual) data link layer. Figure <ref type="figure">3</ref> shows a vSwitch which connects multiple vHosts. vSwitch is emulated by a UDP daemon in the host OS domain. The poll system call is used to poll the arrival of data and perform data queuing, forwarding, or dropping. More delicate link characteristics may also be implemented in the UDP daemon. The poll system call also notifies the UDP daemon of the arrival of a connect request from a new vHost joining the vLAN, so that a new port can be created for the vHost, as shown in Figure <ref type="figure">3</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Virtual Router</head><p>Interestingly, there is no intrinsic difference in implementation between vHost and vRouter, except that the latter has additional packet forwarding capability and user level routines for the configuration of packet processing policies. Linux source tree makes it possible to accommodate versatile and extensible packet processing capabilities.</p><p>When a UML is bootstrapped, a recognizable file system will be located and mounted as root file system. Based on UML, the vRouter requires kernel-level support for the capability of packet forwarding, as well as user-level routines, namely route, iproute2, ifconfig for the configuration of interface addresses and routing table entries. Beyond the packet forwarding capability, it is also easy to add firewall, NAT, and other value-added services to the UML kernel. In the VIOLIN implementation, we adopt the zebra <ref type="bibr" target="#b15">[16]</ref> open-source routing package, which provides a comprehensive suite of routing protocol implementations. Recently, to enable active network services, we have also incorporated Click <ref type="bibr" target="#b16">[17]</ref> as an optional package for vRouters.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">VIOLIN Performance</head><p>We have implemented a VIOLIN prototype and deployed it in PlanetLab. To evaluate the performance of VM communications in a VIOLIN, we have performed end-to-end throughput and latency measurement between VMs. Figures <ref type="figure">4(a</ref>) and 4(b) show a set of representative results. Two VMs are hosted by Plan-etLab nodes planetlab8.lcs.mit.edu and planetlab6.cs.berkeley.edu, respectively. We measure the TCP throughput and ICMP latency between the VMs, with and without the vSwitches performing UDP payload encryption. As a comparison, we also measured the TCP throughput and ICMP latency between the two Plan-etLab hosts. Our measurement results show that VIOLIN introduces an average of 5% degradation in TCP throughput, compared with the TCP throughput between the two underlying physical hosts. The addition degradation due to VM traffic encryption is 5% on the average. The degree of ICMP latency degradation (increase) is even less than that of TCP throughput.</p><p>To demonstrate VIOLIN's support for advanced network services, we run WaveVideo, a legacy video streaming application, in VIOLIN. WaveVideo requires IP multicast and therefore is not runnable in PlanetLab. However, Wave-Video is able to execute in a VIOLIN with 9 VMs. The VM hosted by planet-lab2.cs.wisc.edu is the source of the video multicast session. It streams a short 300-frame video clip using (virtual) IP multicast address 224.0.0.5. The other 8 VMs are all receivers in three different domains: Princeton, Purdue, and Duke. The average peak signal noise ratios (PSNR) of video frames observed by VMs in the three domains are shown in Figure <ref type="figure">5</ref>.  VIOLIN is made possible by PlanetLab <ref type="bibr" target="#b17">[18]</ref>, which itself provides resource virtualization capability called slicing. Netbed <ref type="bibr" target="#b18">[19]</ref> is another wide-area testbed for network and distributed system experiments. Because of its high portability, VIOLIN can also be deployed in Netbed. Application-level overlays have achieved significant success in recent years. For example, RON <ref type="bibr" target="#b19">[20]</ref> achieves robust routing and packet forwarding for application end-hosts; and the Narada protocol <ref type="bibr" target="#b20">[21]</ref> brings high network efficiency to end system multicast. VIOLIN is proposed as an alternative and complement to application-level overlays, especially for legacy applications or untrusted applications that require strong network confinement.</p><p>Machine virtualization has recently received tremendous attention. VMware [13] fully virtualizes the PC hardware, while Denali <ref type="bibr" target="#b6">[7]</ref> and Xen <ref type="bibr" target="#b5">[6]</ref> take the paravirtualization approach by creating a virtual machine similar (instead of identical) to the physical machine. Inspired by machine virtualization, VIOLIN is our initial effort toward network virtualization.</p><p>The X-Bone <ref type="bibr" target="#b14">[15]</ref> provides automated deployment and remote monitoring of overlays, and allows network entities (hosts, routers) to participate in multiple overlays simultaneously. By taking the two-layer "IP-in-IP" tunneling approach, X-Bone makes real Internet IPs visible to entities in the overlay domain, leading to a lower degree of isolation and confinement than VIOLIN.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion and Ongoing Work</head><p>We present VIOLIN as a novel alternative and useful complement to applicationlevel overlays. Based on all-software virtualization techniques, VIOLIN creates a virtual internetworking environment for the deployment of advanced network services, with no modifications to the Internet infrastructure. The properties of isolation, enforced-layering, and easy reconfigurability make VIOLIN an excellent platform for the execution of high-risk network experiments, legacy applications unaware of overlay APIs, as well as untrusted and potentially malicious applications. Our ongoing work includes:</p><p>-Performance evaluation and comparison VIOLIN involves virtualization techniques and is based on the overlay infrastructure. How to evaluate the performance, resilience, and adaptability of VIOLIN, compared with the real Internet and with application-level overlays? Especially, to match the performance of application-level overlays, how much additional computation and communication capacity need to be allocated? Our video multicast application in VIOLIN demonstrates performance comparable to its counterpart in an application-level overlay. However, more in-depth evaluation and measurement are needed before these questions can be answered. -Refinement of network virtualization technique Our inter-host tunneling implementation is initial and there is plenty of room for refinement and improvement. For example, how to improve the reliability of virtual links? Should we adopt another transport protocol (such as TCP), or integrate error correction (such as FEC) into UDP, or simply let the transport protocols in the VIOLIN domain to achieve reliability? To monitor the status of virtual links, is it possible to leverage the routing underlay <ref type="bibr" target="#b21">[22]</ref> for better Internet friendliness? -Topology planning and optimization Our implementation provides mechanisms for dynamic VIOLIN topology setup and adjustment. However, we have not studied the the problem of VIOLIN topology planning and optimization. More specifically, given the overlay infrastructure, where to place the vRouters and vSwitches, in order to achieve Internet bandwidth efficiency and satisfactory application performance? How should a VIOLIN react to the dynamics of Internet condition and application workload using its dynamic reconfigurability (Section 3.4)?</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. VIOLIN, overlay infrastructure, and underlying IP network</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>2 :Fig. 3 .</head><label>23</label><figDesc>Fig. 3. vSwitch and steps of port creation</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .Fig. 5 .</head><label>45</label><figDesc>Fig. 4. TCP throughput and ICMP latency between two VMs in VIOLIN</figDesc><graphic coords="8,148.92,127.64,147.60,103.60" type="bitmap" /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>With a slight abuse of terms, VIOLIN stands for either the virtual network technique or one such virtual network.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank the anonymous reviewers for their reviews. This work is supported in part by the National Science Foundation (NSF) under the grant SCI-0438246.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Directions in Active Networks</title>
		<author>
			<persName><forename type="first">K</forename><surname>Calvert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Bhattacharjee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Zegura</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Sterbenz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998">1998</date>
			<publisher>IEEE Communications Magazine</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Scalable Reliable Multicast Using Multiple Multicast Channels</title>
		<author>
			<persName><forename type="first">S</forename><surname>Kasera</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Hjalmtysson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Towsley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kurose</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Trans. on Networking</title>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A Framework for Scalable Global IP-Anycast (GIA)</title>
		<author>
			<persName><forename type="first">D</forename><surname>Katabi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Wroclawski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM SIGCOMM 2000</title>
		<meeting>of ACM SIGCOMM 2000</meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Local Error Recovery in SRM: Comparison of Two Approaches</title>
		<author>
			<persName><forename type="first">C</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Estrin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Trans. on Networking</title>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">ANTS: Network Services without the Red Tape</title>
		<author>
			<persName><forename type="first">D</forename><surname>Wetherall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Guttag</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Tennenhouse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Xen and the Art of Virtualization</title>
		<author>
			<persName><forename type="first">B</forename><surname>Dragovic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Fraser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Hand</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Harris</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Pratt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Warfield</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Barham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Neugebauer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM SOSP 2003</title>
		<meeting>of ACM SOSP 2003</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Scale and Performance in the Denali Isolation Kernel</title>
		<author>
			<persName><forename type="first">A</forename><surname>Whitaker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Shaw</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">D</forename><surname>Gribble</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of USENIX OSDI 2002</title>
		<meeting>of USENIX OSDI 2002</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Core-Stateless Fair Queueing: a Scalable Architecture to Approximate Fair Bandwidth Allocations in High-speed Networks</title>
		<author>
			<persName><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Trans. on Networking</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">OverQoS: Offering Internet QoS Using Overlays</title>
		<author>
			<persName><forename type="first">L</forename><surname>Subramanian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Balakrishnan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Katz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM HotNets-I</title>
		<meeting>of ACM HotNets-I</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">vBET: a VM-Based Emulation Testbed</title>
		<author>
			<persName><forename type="first">X</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM SIG-COMM 2003 Workshops (MoMeTools)</title>
		<meeting>of ACM SIG-COMM 2003 Workshops (MoMeTools)</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">From Protocol Stack to Protocol Heap Role-Based Architecture</title>
		<author>
			<persName><forename type="first">R</forename><surname>Braden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Faber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Handley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM HotNets-I</title>
		<meeting>of ACM HotNets-I</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><surname>Dike</surname></persName>
		</author>
		<ptr target="http://user-mode-linux.sourceforge.net)13" />
		<title level="m">User Mode Linux</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title/>
		<author>
			<persName><surname>Vmware</surname></persName>
		</author>
		<ptr target="http://www.vmware.com" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><surname>Housley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Hollenbeck</surname></persName>
		</author>
		<ptr target="http://www.faqs.org/rfcs/rfc3378.html" />
		<title level="m">EtherIP: Tunneling Ethernet Frames in IP Datagrams</title>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Dynamic Internet Overlay Deployment and Management Using the X-Bone</title>
		<author>
			<persName><forename type="first">J</forename><surname>Touch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE ICNP 2000</title>
		<meeting>of IEEE ICNP 2000</meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<author>
			<persName><forename type="first">K</forename><surname>Ishiguro</surname></persName>
		</author>
		<ptr target="http://www.zebra.org/)" />
		<title level="m">Zebra</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">The Click Modular Router</title>
		<author>
			<persName><forename type="first">E</forename><surname>Kohler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Morris</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Jannotti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Kaashoek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. on Computer Systems</title>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A Blueprint for Introducing Disruptive Technology into the Internet</title>
		<author>
			<persName><forename type="first">L</forename><surname>Peterson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Culler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Roscoe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM HotNets-I</title>
		<meeting>of ACM HotNets-I</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">An Integrated Experimental Environment for Distributed Systems and Networks</title>
		<author>
			<persName><forename type="first">B</forename><surname>White</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lepreau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Stoller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ricci</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Guruprasad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Newbold</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hibler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Barb</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Joglekar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of USENIX OSDI 2002</title>
		<meeting>of USENIX OSDI 2002</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Resilient Overlay Networks</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">G</forename><surname>Andersen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Balakrishnan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Kaashoek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Morris</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM SOSP</title>
		<meeting>of ACM SOSP</meeting>
		<imprint>
			<date type="published" when="2001">2001. 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">A Case For End System Multicast</title>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">H</forename><surname>Chu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">G</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM SIGMETRICS 2000</title>
		<meeting>of ACM SIGMETRICS 2000</meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Routing Underlay for Overlay Networks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Nakao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Peterson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bavier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM SIGCOMM 2003</title>
		<meeting>of ACM SIGCOMM 2003</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
