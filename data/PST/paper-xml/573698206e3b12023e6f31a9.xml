<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">How Practitioners Perceive the Relevance of Software Engineering Research</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">David</forename><surname>Lo</surname></persName>
							<email>davidlo@smu.edu.sg</email>
							<affiliation key="aff0">
								<orgName type="department">School of Information Systems Singapore Management University</orgName>
								<address>
									<country key="SG">Singapore</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Nachiappan</forename><surname>Nagappan</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">Microsoft Research Redmond</orgName>
								<address>
									<region>WA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Thomas</forename><surname>Zimmermann</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">Microsoft Research Redmond</orgName>
								<address>
									<region>WA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">How Practitioners Perceive the Relevance of Software Engineering Research</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">0E978C18852A748CE57B421F4121CDF4</idno>
					<idno type="DOI">10.1145/2786805.2786809</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T02:21+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>D.2 [Software Engineering] Measurement</term>
					<term>Experimentation Software Engineering Research</term>
					<term>Survey</term>
					<term>Industry</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The number of software engineering research papers over the last few years has grown significantly. An important question here is: how relevant is software engineering research to practitioners in the field? To address this question, we conducted a survey at Microsoft where we invited 3,000 industry practitioners to rate the relevance of research ideas contained in 571 ICSE, ESEC/FSE and FSE papers that were published over a five year period. We received 17,913 ratings by 512 practitioners who labelled ideas as essential, worthwhile, unimportant, or unwise. The results from the survey suggest that practitioners are positive towards studies done by the software engineering research community: 71% of all ratings were essential or worthwhile. We found no correlation between the citation counts and the relevance scores of the papers. Through a qualitative analysis of free text responses, we identify several reasons why practitioners considered certain research ideas to be unwise. The survey approach described in this paper is lightweight: on average, a participant spent only 22.5 minutes to respond to the survey. At the same time, the results can provide useful insight to conference organizers, authors, and participating practitioners.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>The number of published software engineering papers has been growing over the past few years. For example, the number of papers published in ICSE almost doubled in the last 5 years from 50 in 2009 to 99 papers in 2014. Other conferences in software engineering have observed a similar growth. Does this mean that the relevance of software engineering has grown as well?</p><p>For any community, it is important to reflect on successes and failures and to assess if it is moving in the right direction. The Impact project <ref type="bibr" target="#b0">[1]</ref> by ACM SIGSOFT investigated if and in what areas, software engineering research had an impact on practice. Areas that were identified as part of the project included modern programming languages, software configuration management, and inspections. In addition to impact, other "health" aspects of software engineering research have been analyzed such as the health of conferences <ref type="bibr" target="#b1">[2]</ref> or novel peer review models <ref type="bibr" target="#b2">[3]</ref>. The question of impact and relevance of software engineering research has been raised by practitioners in industry, funding organizations, and researchers themselves. A complicating issue is that the actual impact of some research in practice is often only known after many years. Researchers typically have to speculate what will have the most impact in the future.</p><p>In this paper, we propose a lightweight technique to gather rapid feedback on how practitioners perceive the relevance of software engineering research. The process is as follows: as part of a survey, present short summaries of research papers, which succinctly capture research ideas contained in them, to a panel of practitioners and ask them to rate how important each research idea is for their work: "In your opinion, how important are the following pieces of research?" In the survey, participants can rate research as Essential, Worthwhile, Unimportant, Unwise, or state "I Don't Understand". To keep the time investment low for practitioners, we keep the summaries short (shorter than an abstract) and limit the number of summaries to be rated by each participant (by selecting a given number of summaries randomly for each participant).</p><p>To demonstrate the feasibility of the technique, we invited 3,000 engineers in Microsoft to mark 571 research papers from five years of the ICSE (2010-2014), ESEC/FSE <ref type="bibr">(2009,</ref><ref type="bibr">2011,</ref><ref type="bibr">2013)</ref> and FSE (2010, 2012) conferences. We received 17,913 ratings from 512 practitioners (response rate 17%). Such data can be used to empirically answer several important questions to guide software engineering research:  How do (Microsoft) practitioners view software engineering research as a whole?  What research ideas do (Microsoft) practitioners consider to be most important?  Why (Microsoft) practitioners view some research ideas as unwise?</p><p>While the answers to these three questions may not generalize beyond the context of Microsoft engineers, they highlight the potential of what insight we can obtain if as a community we repeat this experiment for other populations, e.g., with practitioners from multiple companies.</p><p>To be more specific, the answer to the first question could serve as a health indicator, e.g., is software engineering research relevant and does it remain relevant. The answer to the second question could help researchers to prioritize their research efforts. And the answer to the third question could help researchers avoid pitfalls that can make research less appealing to practitioners.</p><p>To be very upfront the goal of our study is to NOT rank papers based on relevance. We do not intend or envision this paper to play a role in ranking papers, which we think is contrary to the spirit of fundamental research. Our goal is to provide a new perspective on how to assess the perceived relevance of today's software engineering research as viewed by practitioners.</p><p>This paper makes the following contributions:</p><p>1. We propose a survey-based framework to assess the relevance of software engineering research by involving practitioners. 2. We present findings from a study with engineers at Microsoft and point out opportunities on how to improve it with a community-wide effort. 3. We identify reasons why practitioners perceive certain highlevel research ideas as "Unwise".</p><p>The remainder of this paper is structured as follows. First, we describe the experimental design of our study in Section 2. We then describe the results of our study in Section 3. In Section 4, we discuss the implications of our results as well as limitations of our findings. In Section 5, we describe related work. In Section 6, we conclude the paper and describe our future work plans.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">EXPERIMENTAL DESIGN</head><p>To help assess the relevancy of software engineering research, we propose a framework which includes the following steps:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Select and summarize the papers of interest.</head><p>There are many possible ways that papers can be selected, for example based on conferences (e.g., ICSE, ESEC/FSE, FSE), based on topic (e.g., testing, program analysis), or based by year.</p><p>The summarization step reduces each paper into a short text summary of limited size. It is needed so that practitioners can understand the paper well enough to provide feedback, without the need to spend much time to understand the technicalities. Rather, they should be able to focus on how the research idea can help their day-to-day activities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Select the participants.</head><p>It is important to select a representative set of participants for the survey. Practitioners typically have different needs depending on their roles (developers, testers, etc.) and it is important to capture the viewpoints of a diverse set of practitioners.</p><p>The number of participants to invite depends on several factors: Assuming we have P papers to rate, and we want each paper to receive R ratings on average, we require P x R ratings. Each participant can rate K papers and the expected response rate to a survey is S. Then we need to invite (P x R) / (K x S) practitioners to the survey.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Run the survey and collect feedback.</head><p>The following information can be collected as part of a survey: demographics, the ratings of the papers, as well as additional feedback to follow up on previous responses.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Analyze the data.</head><p>The responses can be analyzed using a set of metrics. For free form answers, qualitative techniques such as open card sort can be used.</p><p>Several of the above decisions (summaries instead of abstract, a random paper selection for each participant) were made with the goal to keep the time investment low for practitioners.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Paper Selection and Summarization</head><p>We selected full research track papers published in the ICSE, ESEC/FSE, and FSE conferences during a time period of 5 years. This includes 184 papers from the meetings of ESEC/FSE and FSE (2009-2013), and 387 papers from ICSE (2010-2014), for a total of 571 papers. We believe that this is a representative sample of software engineering research as ICSE, ESEC/FSE, and FSE are general conferences as opposed to specialized conferences such as IS-STA for testing to ICSME for maintenance and evolution. We did not include journal publications because they often extend previous conference papers.</p><p>As participants would not have the time to read long abstracts or the entire paper itself, we created for each paper a short descriptive summary that contains the key ideas of the paper. The first author read the abstract of each paper and constructed a summary (a few sentences) to capture the gist of the paper. If the abstract was unclear, the first author also downloaded and read the paper.</p><p>To improve the paper summaries, the second author verified the quality of the initial summary created by the first author and provided suggestions for improvement. After these suggestions were incorporated into an updated summary, we piloted the summaries to a small set of practitioners to get their feedback as suggested by Kitchenham and Pfleeger <ref type="bibr" target="#b3">[4]</ref>. We further improved our summaries based on the practitioners' feedback.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Participant Selection</head><p>We selected full time employees of Microsoft as participants whose job roles included development, test, and program management.</p><p>For the selection, we followed Kitchenham and Pfleeger's <ref type="bibr" target="#b3">[4]</ref> advice on the need to understand whether the respondents had enough knowledge to answer the questions in an appropriate manner. For this, we restricted the people invited to participate in the survey to people in technical roles (no sales or marketing employees).</p><p>With P=571 papers, R=30 ratings per paper, K=40 ratings per participant, and response rate of S=0.15 (estimated based on response rates from previous surveys), we estimated the number of practitioners that we need to invite to be 2,855, which we rounded up to 3,000. We then randomly picked 3,000 full time employees from the Microsoft employee database who were working in technical roles. Since Microsoft has more employees working in development roles, the random selection naturally has a higher proportion of participants working in development roles than participants working in the test and program management roles.</p><p>Respondents were anonymous, but as a thank you for the participants' time, they could enter their name (separate from their survey responses) into a raffle of three $75 Amazon gift certificates at the end of the survey.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Feedback Elicitation</head><p>In order to elicit feedback from a wide range of participants in a scalable way, we used an online survey. We designed the survey such that participants required as little effort as possible to complete it, e.g., it was self-contained and included all relevant information. We limited the response types to numerical, Likert-scale, and short free form answers as suggested by Kitchenham and Pfleeger <ref type="bibr" target="#b3">[4]</ref>.</p><p>The survey we used within Microsoft is shown in Figure <ref type="figure" target="#fig_1">1</ref> (see our technical report <ref type="bibr" target="#b4">[5]</ref> for the full survey).</p><p>We piloted the survey with a small set of practitioners to get their feedback and improve the survey.</p><p>We captured the following information as part of the survey: Collecting some basic information about the participants allowed us to break down the results by groups, e.g., developers, testers, etc.</p><p>Ratings of research ideas (see Figure <ref type="figure" target="#fig_1">1</ref>.a). For each participant, we randomly selected 40 papers from the collection of 571 papers. At least one paper had to be rated to complete the survey.</p><p>We then present summaries of those papers to the participants and ask them to rate how important each paper is for their work: "In your opinion, how important are the following pieces of research?" Following the rating categories used by Begel and Zimmermann <ref type="bibr" target="#b5">[6]</ref>, participants can label a research idea as: "Essential", "Worthwhile", "Unimportant", "Unwise", and "I Don't Understand". The last category was included to address the diverse background of participants-not all participants will understand all technologies.</p><p>We chose to ask the question "In your opinion, how important are the following pieces of research?" to allow practitioners to provide feedback based on their personal experience. We decided not to ask about the willingness to adopt because other research has shown that adoption depends on many different factors (social, cultural, and educational factors, exposure, and many more <ref type="bibr">[7] [8]</ref>), which are often external to the actual research. A reliable assessment of the adoptability would require a significant time commitment by practitioners. Lastly, adoption also heavily depends on the type of research, e.g., tools and techniques are adopted differently than say empirical studies. Follow-up: Rational behind specific ratings (see Figure <ref type="figure" target="#fig_1">1</ref>.b). One limitation of ratings is their inability to capture reasons why participants viewed a certain research idea in a particular way. To capture the reasons behind some ratings, we included follow-up questions.</p><p>More specifically, if there was one or more summaries that a participant labeled as "Unwise", we randomly selected one of those summaries and asked participants to elaborate the reasons why they felt that the high-level research idea was unwise to pursue. Participants could enter free text to express their thoughts; the follow-up question was optional.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Data Analysis</head><p>We compute several statistics to characterize the overall perspectives that practitioners have on software engineering research. We measure the proportion of ratings that are Essential (best response), Essential or Important (positive feedback), or Unwise (worst response), respectively. More formally, let E, W, Ui, and Uw denote the number of essential, worthwhile, unimportant, and unwise ratings received.</p><p> E-score: The percentage of ratings that are "Essential" E-score  EW-score: The percentage of ratings that are "Essential" or "Worthwhile".</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>EW-score</head><p> U-Score: The percentage of ratings that are "Unwise"</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>U-score</head><p>The statistics can be computed for different groups, e.g., all ratings, ratings by certain demographics, ratings for specific conferences, or ratings for individual papers. To group the reasons why research ideas were selected as unwise,</p><p>we use an open card sort <ref type="bibr" target="#b8">[9]</ref>. Card sorting is widely used to create mental models and derive taxonomies from data. Our card sort consisted of two phases: in the preparation phase, we create one card for each response to the follow-up question to why a research idea is unwise. In the execution phase, cards are sorted into meaningful groups with a descriptive title. Our card sort was open, meaning we had no predefined groups; instead, we let the groups emerge and evolve during the sorting process. By contrast, a closed card sort has predefined groups, which is typically used when the themes are known in advance. All three authors jointly sorted the cards.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">RESULTS</head><p>We invited 3,000 randomly selected practitioners who were working in a technical role to take the survey; 512 participants respond (response rate 17%). Among the participants, 291 (56.8%) of them work as developers, 87 (17.0%) as testers, and 102 (19.9%) as program manager. The participants collectively provided 17,913 ratings. Each paper was rated by 16 to 47 participants (since we randomly picked papers to show to survey respondents the number of ratings per papers follows a hypergeometric distribution). 217 participants rated at least one paper as "Unwise", 173 of them (79.7%) provide their reasons for a randomly selected paper. Of the ratings, 2,745 (15.3%) were "I Don't Understand", which demonstrates the need of having a way for participants to not provide a rating if they don't have enough knowledge or context to assess a research idea.</p><p>To show the potential of practitioner feedback, we consider three questions:</p><p>1. How relevant is software engineering research in the practitioner's perspectives? (Section 3.1) 2. What are highly rated research topics that practitioners deem essential? (Section 3.2) 3. What are the reasons why practitioners consider certain research topics to be unwise? (Section 3.3)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Relevance of Software Engineering Research</head><p>Figure <ref type="figure" target="#fig_2">2</ref> shows the percentage of ratings across the various categories for different demographics:</p><p> all participants (All),  participants that are developers (Dev),  participants that are testers (Test),  participants that are program managers (PM),  participants with low experience, which we define as the 25% with the least experience in years (ExpLow)  participants with medium experience (ExpMed),  participants with most experience, which we define as the 25% with the most experience in years (ExpHigh),  participants with advanced degree (Adv),  participants without advanced degree (NonAdv),  participants with CS degree (CS),  participants without CS degree (NonCS),  participants who are individual contributors (IC), and  participants who are managers (Mgr).   From the figure we can observe that all demographics give more "Essential" and "Worthwhile" ratings as compared to "Unimportant" or "Unwise". The EW-score for all participants is 71%, and the E-score is 20%. This is an encouraging finding as it shows that practitioners do value work done in the software engineering research community. However, it also shows that there is room for improvement.</p><p>We observed several differences between the demographics (all statistically significant at a p-level of 0.001):</p><p> Testers were more positive about the relevance of software engineering research (EW-score of 76%, E-score of 23%) than developers or program managers.  As experience increased, participants were more critical and considered more studies as unimportant as well as less studies as essential. For the participants with low experience (Ex-pLow), the EW-score is 75% and the E-score is 23%; in contrast, for participants with high experience (ExpHigh), the EWscore drops to 64% and the E-score to 14%.  Participants who were in Management roles (Mgr) were more critical than individual contributors (IC). They had an EWscore of 68% and E-Score of 18%.</p><p>We did not observe any statistically significant difference in ratings between participants with and without advanced degree. Similarly, there was no statistically significant difference between participants with and without CS degree.</p><p>In addition to demographics, we can break down relevance scores by conference and year. This can help organizers to ensure that the conference program matters for practitioners. Figures <ref type="figure">3</ref> and<ref type="figure">4</ref> show the changes in the relevance scores for papers published in ICSE, ESEC/FSE, and FSE in the last 5 years. Over time, the EW-scores are close to or above 70%, which shows that the practitioners who we surveyed found that the majority of software engineering research presented at ICSE, ESEC/FSE, and FSE worthwhile to be pursued.</p><p>We also notice that except for a drop for ESEC/FSE and FSE from 2009 (EW-score of 79%) to 2011 (EW-score of 70%), the scores for ICSE, ESEC/FSE, and FSE are relatively stable. This shows the health of the conference series in general is good along the years. It would be great if their health could improve further in the years ahead.</p><p>Monitoring health of conferences is one example of how the approach in this paper could be used. A conference could poll a representative set of practitioners (or attendees for that matter) every year to see if relevance scores of the conference are improving and to ensure that the presented work matters for practitioners.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Highly Rated Research Ideas</head><p>Table <ref type="table" target="#tab_1">1</ref> highlights the ten paper summaries rated the highest by the 512 participants in our survey. The papers are sorted in terms of their E-score scores (descending), followed by EW-scores (descending), followed by U-scores (ascending). Among the top-10 summaries, at least half of the respondents agreed that the work is essential. These papers cover a diverse set of topics including improving system performance, debugging tools, adaptive systems, testing multithreaded programs, and collaboration conflict detection, among others. Some readers may be surprised with summary P10 about a new algorithm for Bayesian inference over probabilistic programs. This idea had a high number participants choosing "I don't understand", which suggests that it may be a specialized topic that is highly relevant to some participants but not to the ones who are unfamiliar with the topic. In addition, we ranked summaries by the job role (developer, tester, and program manager). We required a paper summary to be rated by at least five people to be included in a role-specific ranking. We show the list of top-5 papers for each role in our technical report <ref type="bibr" target="#b4">[5]</ref>. We made the following observations:</p><p> Developers are highly interested on improving system performance, detecting collaboration conflicts, debugging techniques, and detecting concurrency bugs.  Testers are highly interested in system monitoring, adaptive systems, finding linkages between bug reports to the fixing commits, and lightweight verification tools.  Program managers are highly interested in a diverse set of topics including building agile teams, team awareness, software product line construction, bug finding, and debugging tools, among others.</p><p>Figure <ref type="figure" target="#fig_4">5</ref> shows a boxplot of the distribution of EW-scores computed on a per paper basis. We can observe that practitioners rate most papers favorably. For the majority of papers the EW-score is higher than 0.5. Again we can observe that testers are more positive than developers and program managers.</p><p>These findings can direct research into areas that are considered to be relevant by practitioners.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Reasons Why (Certain) Research is Considered "Unwise"</head><p>In a few cases (3.4% of all practitioners rated research ideas as "Unwise". In those cases, we asked a follow-up question for why respondents think the research idea is unwise.</p><p>To identify common reservations, we took the responses and clustered them into groups. We performed an open card sort <ref type="bibr" target="#b8">[9]</ref> to create the groups. First we printed each response on a card, we then discussed the comments and iteratively sorted them into groups.</p><p>Our card sort identified eight categories that are discussed below. We ignored cards that contained no rationale ("Doesn't sound wise to me") or when participants rejected an idea solely because it was not using Microsoft technology ("I think we should focus on Windows First").</p><p>A tool is not needed. This group consists of comments where the practitioner perceived a tool as not useful to their daily work, e.g., the tool cannot help make their tasks being performed easier or with higher quality. The respondent deemed the current state-of-practice good enough and believed that no additional support is necessary.</p><p>"The tool that would result would not be something I would use or can imagine anyone else using"</p><p>"I don't know how it could be used for daily work" "I don't believe that a framework will make the design and maintenance of such systems any easier",</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>"The proposed tool is already available in the form of TFS or SharePoint list"</head><p>An empirical study is not actionable. The practitioners perceived that the subject analyzed by an empirical study was not relevant and/or the findings of the study were deemed to be not actionable or of little benefit.</p><p>"I wouldn't expect anything actionable or relevant to come out of this study"</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>"I don't see what's the value to study the difference between these two development (methodologies)"</head><p>"Don't see any need for this study since enough is known about common fallacies of this type", "Don't know why there would be any benefit of knowing the answer to the proposed question", etc.</p><p>Generalizability issue. Practitioners criticized that a study was limited to a few systems and findings found by analyzing these systems might not be applicable to real systems that matter to them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>"Empirical study on this platforms may not be reusable on others"</head><p>"Case study for a project is always less useful than researching around a topic. Lessons learned from one project can be very specific to this project"</p><p>"Might want to consider bugs in same applications over different platforms"</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>"Developers are not alike"</head><p>A subcategory of generalizability was scalability. Practitioners deemed a technique to be unlikely to cope with the size, complexity, and variability that characterize systems that practitioners are working on.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>"I don't see this being used for large-scale systems"</head><p>"The set of software update that needs testing is not a small number and new software updates happen almost every week. And it is not the same set of software installed by different users"</p><p>"Energy consumption characteristics will vary from device to device and over time"</p><p>"From past attempts: -too many states -too many false positives"</p><p>"For a complex program, there will be too much info, and the developer will not be able to understand"</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>"As the complexity of the bug goes up, the solution may or may not go up"</head><p>Cost outweighs benefit. Practitioners deemed the cost of using and maintaining a particular tool to be higher than the benefit gained by using the tool.</p><p>"Development cost of this approach will overkill the gain it gives"</p><p>"Huge time investment for little return" "I believe the cost of implementing and maintain such a solution would be greater than the cost of developers fixing bugs manually" Questionable assumptions about inputs or conditions. Practitioners deemed a particular input/condition crucial towards the success of a research might not hold in practice.</p><p>"The whole research assumes that there are requirement documents and design documents in software development… which is false in most software projects nowadays"</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>"Such a tool makes it easier for people to focus on test coverage &amp; state coverage. Which doesn't really help detect bugs"</head><p>"Description is often not filled correctly. hence it is unwise to rely on it"</p><p>"Analyzing documentation written by humans seems inherently risky. Engineers are not known for writing good documentation, and I suspect that will only get worse as we accelerate our deliverables" Disbelief in a particular technology or methodology. Some practitioners had strong disbelief in a particular technology or methodology on top of which a research work is based.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>"I don't believe in design patterns, force fitting something into a pattern is not wise"</head><p>"UML is half dead!" "Multi-threading is to be avoided at all cost" "I don't think UML is a good tool to use in the development process"</p><p>Another solution/problem seems better/more important. Practitioners believed that it is better to work on an alternative solution/problem that will also solve the need addressed by some research work.</p><p>"Not sure if this is the best or the easiest way to find new uses.</p><p>Usually I look at forums/books/tools for that"</p><p>"Making yet another language isn't really solving anything. Instead, give me more functionality within my language and/or give me tools to do these types of things"</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>"Better organization of how Linux is packaged and distributed would solve this issue without the need of deep analysis and investigations"</head><p>"I don't think natural language is that important. Instead helping users find the keywords or tags is should be the focus"</p><p>Proposed solution has side effects. Practitioners perceived that although a research work can solve a problem, it might cause other problems as side effects.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>"It seems that there could be potentially disastrous results if the automation does not fix the issue it detects correctly. It could induce laziness or uncaring attitude of developers, e.g., 'it doesn't matter if we introduce bugs, the repair app will fix them'"</head><p>"Design Patterns … derive their flexibility at the expense of comprehensibility of the interacting parts of a system" "This approach can introduce "false" exception / bug conditions, increasing the cost and time to market, while introducing the opportunity to over engineer the code"</p><p>"Specific techniques to rank devs can lead to devs not working together and lower productivity/morale" "Drag and drop solutions have always seemed to me as a quick and easy way to write inefficient code"</p><p>"It can easily lead to group think with our competition. We need to think outside the box, not just copy"</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">DISCUSSION</head><p>We discuss several aspects of this work: the relationship between citation counts and perceived relevance (Section 4.1), the cost of practitioner feedback (Section 4.2), how feedback could be integrated into conferences (Section 4.3), and limitations of this work (Section 4.4).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Citation Count vs. Perceived Relevance</head><p>We analyzed the relationship between citation counts and the practitioner's perspectives as captured by E-, EW-, and U-scores. Citation counts are often used in academia as a measure of importance and impact. For the analysis, we used the citation counts from ESEC/FSE 2009 and ICSE 2010. We collected the citation counts from Google Scholar on Aug 18, 2014. We ignored more recent instances of the conferences because citations need time to be built up. It would be unfair to compare papers from ICSE 2014 with papers from ICSE 2010 as authors had four more years to read and cite work from ICSE 2010.</p><p>Figure <ref type="figure" target="#fig_5">6</ref> shows scatter plots between citations received by papers published in ESEC/FSE 2009 and ICSE 2010 with their relevance scores computed from practitioners' ratings. From the regression lines, we find that the number of citations is not necessarily positively correlated with the three relevance scores. We also computed Spearman correlations. The correlation between the citation count and E-score is -0.07 with a p-value of 0.53 (not significant); the correlation between the citation count and EW-score is -0.13 with a p-value of 0.23 (not-significant); the correlation between the citation count and U-score is 0.04 with a p-value of 0.73 (again not significant). Thus, we can conclude that there is no correlation between the citation count and relevance scores of papers.</p><p>Some papers were cited only a few times, but practitioners considered the work to be solving a problem that is essential to their needs.</p><p>To illustrate such cases, Table <ref type="table">2</ref> shows the top-5 studies that were favored by practitioners but less so by academia and vice versa. To get this list, we divided the rank of a paper based on citation counts with the rank based on E-scores. Papers favored by academia have high citation counts and relatively low E-scores and for papers favored by practitioners vice versa.</p><p>The absence of a correlation shows that the relevance scores introduced in this paper add extra information to the assessment of research that cannot be captured by citation counts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Fast, Lightweight, and Inexpensive Assessment of Perceived Relevance</head><p>We want to stress that the survey-based approach presented in this paper is a fast, lightweight, and inexpensive way to assess perceived relevance of research ideas and to collect feedback.</p><p>Most participants of our survey responded within the first 3 days. We closed the survey after 8 days and collected more than 17,913 ratings. This process is faster than a typical conference review process that can take 1-3 months.</p><p>Surveys with Likert-scales are a lightweight way to collect feedback. The survey tool used for this study (SurveyGizmo.com) provides optimized views for mobile devices which gives participants the freedom to take the survey at any time they like, for example, while waiting in line for lunch. The Fatigue and the Accessibility scores <ref type="bibr" target="#b9">[10]</ref> of the survey were estimated to be low by the survey tool.</p><p>The cost of running the survey is also low: Summarizing the papers and implementing the survey took approximately 80 hours. The 512 survey participants took 22.5 minutes on average<ref type="foot" target="#foot_0">1</ref> to complete the survey (for a total of 192 hours). Setting up the analysis framework for the survey took another 40 hours. The monetary cost were a license of the survey tool (Enterprise Plan, 1 month) for $199 and 3 Amazon gift certificates as incentive to participate in the survey (each $75; total $225).</p><p>We would like to emphasize that survey-based practitioner feedback as proposed in this paper is different and by no means meant to replace the work of program committees (PCs). In addition to checking papers for relevance, PC members must check papers for many other criteria such as originality, presentation, correctness, etc. This requires reading the full paper, a larger time commitment, and often travel to a physical PC meeting to discuss papers with other experts in person.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Towards Feedback-Driven Conferences</head><p>We believe that embedding practitioner feedback into conferences (and maybe even journals) can provide great value to the software engineering community.</p><p>For example, this could work as follows:</p><p>1. The Program Committee (PC) reviews the submitted papers and selects the accepted papers.</p><p>2. After notification, the Authors of each paper provide a short summary that is used in the survey. While this is extra work, in return the authors would get feedback from practitioners.</p><p>An alternative is to ask the PC members to provide a summary and have the Authors validate the summary.</p><p>3. The summaries are then used to for the survey that is sent to the Practitioners.</p><p>To increase the representativeness, the survey should be sent to multiple companies, or even better, a representative panel of industry practitioners (covering different companies and parts of the software industry) who are willing to regularly provide feedback on software engineering research.</p><p>We recommend using a similar scale as in our survey. Instead of following only for research ideas that were rated as Unwise, we suggest to have a feedback option for any research idea. In addition, the survey should provide a way for the Practitioner to trace back a research idea to the actual paper after they have completed the survey.</p><p>Such a survey design has advantages for many stakeholders:</p><p> Conference organizers can use the practitioner feedback to assess the perceived relevance of their conference for industry. They can monitor the scores over time (as illustrated in Section 3.1 for ICSE and FSE) and take steps to increase the relevance, driven by actual data. The survey can also serve as publicity for Table <ref type="table">2</ref>. Top studies favored by academia and practitioners</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>FAVORED BY PRACTITIONERS</head><p>A new technique that not only detects leaks, but also points developers to the locations where the underlying errors may be fixed.</p><p>A technique to engineer applications with a self-healing layer for service-oriented systems that dynamically reveals and fixes interoperability problems.</p><p>A technique to monitor if a system fulfils its requirements expressed as probabilistic properties (e.g., performance, reliability, safety, and availability requirements) at runtime Automatically detecting security vulnerabilities in client-side self-contained components that interact with one another. Failure to release unneeded system resources results in resource leaks, which can lead to performance degradation and system crashes. The paper presents a new tool that performs static analysis to find code that causes resource leaks in Java programs.</p><p>FAVORED BY ACADEMIA Empirical study on whether the bug fixes recorded in these historical datasets is a fair representation of the full population of bug fixes. Technique to verify the correctness of a family of programs in a software product line against a set of properties. Empirical study of using software defect data from one project to predict defects in another project.</p><p>A graph model based on Markov chains, which captures bug tossing history, to better assign developers to bug reports Over 30 years ago, the preprocessor cpp was developed to extend the programming language C by lightweight metaprogramming capabilities. The paper describes a study that analyzes 40 C projects to investigate how cpp preprocessor is employed to implement variability.</p><p>the conference and possibly attract extra attendees if done before the conference.</p><p> Authors can take the (text-based) feedback to improve their research and make it more relevant to practitioners if they want. They also get additional visibility for their work.</p><p> Practitioners get an overview of the latest research, which several participants appreciated in our study, e.g., "Thanks for that summary, it is actually interesting by itself", or "Reading through just the titles was a fascinating read -some really interesting work going on!"</p><p>We believe that the approach introduced in this paper is an effective means to help reduce the gap between practitioner needs and software engineering research efforts. Lastly feedback does not have to be limited to practitioners. A conference could survey its attendees to get a sense how happy they were with the paper selection.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Limitations</head><p>We acknowledge the following limitations of findings presented in this paper. The limitations could easily be addressed through a community-driven move to feedback-driven conferences.</p><p>The statistics reported in this work depend on the summaries that were created by ourselves. We have followed a process to help improve the quality of the summaries that we generated. It is possible that some participants had poor understanding of some of the summaries. To reduce the impact of this issue, we included an "I Don't Understand" option in the survey and ignored responses marked as such. Note summaries are needed because it is not practical to ask survey participants to read entire papers and many abstracts are not concise enough. Ideally summaries would be created by the authors of the papers and/or PC members as outlined in the previous section.</p><p>The findings in this paper are based on practitioner feedback from one company. We acknowledge that perspectives of practitioners in other companies and/or industries such as automotive, aerospace, or banking may be different. As we discussed in Section 4.3, ideally the survey would be send to a representative panel of practitioners.</p><p>Even though the statistics and insights in this paper come only from one company, we believe that they are still useful because we surveyed a large number of practitioners (more than 500) with diverse backgrounds. While some projects are larger in size at Microsoft, most development practices in the company are adapted from the general software engineering community and also used outside Microsoft. Microsoft is a large organization that produces a wide range of software and hardware products such as operating systems, productivity software, web browsers, video games, search engines, game consoles, tablets, phones, and many more. Technical employees at Microsoft come from many different schools, countries, with many different cultural backgrounds and we argue that they are thus highly representative of developers all over the world <ref type="bibr" target="#b10">[11]</ref>.</p><p>In this work, we focused on assessing research work's perceived relevancy in the eyes of Microsoft engineers. Perceived relevancy does not mean that a research work will be adopted by practitioners.</p><p>In the survey we did not ask developers to answer whether they are willing to adopt a research idea. Asking about adoption assumes the availability of tools, which is not always the case, e.g., for empirical papers. In addition, adoption typically depends on different factors, e.g., social, culture, education, exposure, and many more <ref type="bibr" target="#b6">[7]</ref> [8], which often are external to the actual research. These issues make it difficult for developers to provide objective assessments of the adoptability. In reality, an actual decision whether a research con-tribution can be adopted would require a significant time commitment by practitioners. With this work and the question about relevance, we wanted to explore lightweight feedback techniques.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">RELATED WORK</head><p>Related work falls into three areas: papers related to the SIGSOFT Impact Project, retrospective studies, and attempt to rank the software engineering community.</p><p>ACM SIGSOFT Impact Project. Our work is partly inspired by the Impact project performed by ACM SIGSOFT. The goal of the project is to assess the importance of software engineering research among the practitioners. This is done by "a series of studies and briefings, each involving literature searchers and, where possible, personal interviews" <ref type="bibr" target="#b0">[1]</ref>. Several research studies under the Impact project has resulted in a number of publications including:</p><p> Ryder and Soffa investigated how exception handling is used today and traced back current state-of-the-practice to studies in software engineering that helped shape the current state-of-thepractice <ref type="bibr" target="#b11">[12]</ref>.  Ryder et al. analyzed modern programming languages and documented past studies in software engineering and programming languages that have impact on features in these modern programming languages <ref type="bibr" target="#b12">[13]</ref>.  Estublier et al. investigated how software configuration management systems have evolved along the years and the impact of research performed in universities and industries <ref type="bibr" target="#b13">[14]</ref>.  Clarke and Rosenblum reported the historical development of runtime assertion checking and described how it has been used in some industries as reported in a number of publications <ref type="bibr" target="#b14">[15]</ref>.  Emmerich et al. investigated a number of successful middleware technologies and showed that findings in the research community have impact on the development of these technologies <ref type="bibr">[16] [17]</ref>.  Rombach et al. investigated successes in the practice of software inspections, reviews, and walkthroughs and reported how these have been impacted by software engineering research <ref type="bibr" target="#b17">[18]</ref>.</p><p>Studies under the Impact project looked at the current state-of-thepractice and documented how this state-of-the-practice has been affected/influenced by previously done research work. Different from these studies, in our work we are interested in a complementary approach for evaluating a research work early, based on its potential to address developers need when it matures in the future. Rather than starting with the state-of-practice and looking back, in this work, we start with the state-of-research and look forward to see if these studies can potentially impact how developers do things in the future. Both the retrospective Impact project and our future looking project are important pieces of information to assess the health of software engineering research.</p><p>Retrospective Studies in Software Engineering. Lavallée and Robillard performed a restrospective study by systematically reviewing existing studies in the field of software process improvement <ref type="bibr" target="#b18">[19]</ref>. They obtained a set of research papers to review from representative venues that publish software process improvement studies, grouped these papers, and reported their findings. Other systematic review studies, for example on fault prediction <ref type="bibr" target="#b19">[20]</ref>, analyzed papers published in an area over several years to review the current state-of-the-art. These papers neither spanned research topics nor did they use practitioner input on the relevance of papers.</p><p>Misirli et al. shared their experience in deploying software analytics solutions, in particular effort estimation and defect prediction solutions, in the industry by interviewing 12 practitioners and obtaining their feedback <ref type="bibr" target="#b20">[21]</ref>. Other work has focussed on how practitioners perceived specific software enginerring concepts such as coupling <ref type="bibr" target="#b21">[22]</ref>, bad smells <ref type="bibr" target="#b22">[23]</ref>, and productivity <ref type="bibr" target="#b23">[24]</ref>. Our study investigates a wider range of topics and involves a much larger number of practitioners.</p><p>Ranking Studies. Ranking schemes like the work published in the Journal of Systems and Software <ref type="bibr" target="#b24">[25]</ref> [26] ranked individuals and institutions based on their publications in various venues (typically several journals). The ranking did not account for any views from practitioners. Similarly, Ren and Taylor <ref type="bibr" target="#b26">[27]</ref> provided a ranking of organizations and individuals using papers published in two journals (TSE and TOSEM) and two conferences (ICSE and FSE) where all papers were weighted similarly. Ren and Taylor summarized the various steps in the ranking process as follows (quoted directly from source): "1) Choose a field, 2) Select representative publication venues for the field, and, optionally assign a weight to each venue, 3) Set the time range for consideration, 4) Assign a score to each published paper, possibly biased by the venue's weight, 5) Divide the score among multiple authors if the paper has more than one author, 6) Sum the scores for each scholar and each institution, and finally, 7) Rank the scholars and institutions based on sums of their scores" <ref type="bibr" target="#b26">[27]</ref>.</p><p>Our study is significantly different from these ranking studies, our goal is not to rank papers but to understand the perceived relevance of the research ideas to the broader practitioner community to help advance the state-of-the-art in software engineering research. The ranking of papers discussed above has also been subject to criticism <ref type="bibr" target="#b27">[28]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">CONCLUSION</head><p>In this paper, we proposed to collect practitioner feedback through surveys as a fast and lightweight way to get input on what matters for industry. Such data can help conference organizers to assess and improve the relevance of their meetings, authors to improve their research, and practitioners to discover the latest software engineering research. As a proof-of-concept, we performed such a survey at Microsoft. We invited 3,000 practitioners working in various technical roles to provide feedback on software engineering research.</p><p>From 512 engineers (response rate 17%), we received in total 17,913 ratings and 173 comments on research ideas. We used this data to assess the health of software engineering research, identify important research topics, and common reservations against research results. Our experiment at Microsoft suggests that practitioners are generally positive to studies done by the software engineering research community -71% of all ratings were positive -but there is room for improvement.</p><p>The next step for this work is to replicate our feedback surveys in other companies based in various countries. This is important to get a broader view on software engineering research (not just from one company), as relevance of research ideas could vary by domain and geography. Replicating the surveys for open source developers is important too as they often have a different motivation than practitioners in the commercial software industry.</p><p>As part of the replication, we believe that there is an opportunity (and need) to assemble a representative panel of practitioners who are willing to provide feedback to software engineering research. Panels are often used in market and user research for surveys. A requirement for such a panel would be that it includes practitioners from different companies, domains, countries, genders, etc. at representative proportions. Once assembled, the panel could also be used for other research surveys.</p><p>Lastly, we are interested in repeating the survey by partnering with conference organizers on an ongoing basis to have industry-accessible, vetted, 1-5 sentences summaries of SE research papers, which can then be rated by a wide range of practitioners to assess the relevance of papers at the conference. Repeating this process regularly will help improve the relevance of software engineering research in the years to come.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>Demographics. (answers were required):  Primary work area: Development, Test, Program Manager, Other  Role: Individual contributor, Lead, Architect, Manager, Executive, Others  Experience in years (decimal value)  Major in Computer Science (Boolean value)  Has advanced (i.e., postgraduate) degree (Boolean value)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. Some questions in our survey. On the first page of the survey, we asked for demographics and rating of research ideas (Figure 1.a). On the second page, we asked a follow-up question to gather additional qualitative free text feedback, when participants rated a research idea as "Unwise" (Figure 1.b)</figDesc><graphic coords="3,85.20,53.76,441.60,216.48" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. Percentage of ratings of various demographics.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 .Figure 4 .</head><label>34</label><figDesc>Figure 3. Relevancy scores from 2010-2014 (ICSE) Figure 4. Relevancy scores from 2009-2013 (ESEC/FSE, FSE)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 .</head><label>5</label><figDesc>Figure 5. Distribution of EW-scores per paper</figDesc><graphic coords="6,71.28,53.76,204.72,163.92" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 .</head><label>6</label><figDesc>Figure 6. Citation count vs. relevancy scores (ESEC/FSE 2009 and ICSE 2010)</figDesc><graphic coords="7,222.96,53.76,166.08,138.96" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 .</head><label>1</label><figDesc>Highly rated research ideas. Total is the number of people who rated a paper and did not select "I Don't Understand" P1 An approach to help developers identify and resolve conflicts early during collaborative software development, before those conflicts become severe and before relevant changes fade away in the developers' memories. A new algorithm for Bayesian inference over probabilistic programs, based on data flow analysis techniques from the program analysis community to deal with loops. Inference refers to the process of calculating the posterior distribution specified by the probabilistic program.</figDesc><table><row><cell>Paper Summary</cell><cell>Total</cell><cell cols="3">E-Score EW-Score U-Score</cell></row><row><cell></cell><cell>39</cell><cell>0.62</cell><cell>0.85</cell><cell>0.00</cell></row><row><cell>P2 Technique that clusters call stack traces to help performance analysts effectively discover highly impactful performance bugs (e.g., bugs impacting many users with long response</cell><cell>30</cell><cell>0.60</cell><cell>1.00</cell><cell>0.00</cell></row><row><cell>delay).</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>P3 Symbolic analysis algorithm for buffer overflow detection that scale to millions of lines of code (MLOC) and can effectively handle loops and complex program structures.</cell><cell>29</cell><cell>0.55</cell><cell>0.97</cell><cell>0.03</cell></row><row><cell>P4 Automatic generation of efficient multithreaded random tests that effectively trigger concurrency bugs.</cell><cell>29</cell><cell>0.55</cell><cell>0.90</cell><cell>0.03</cell></row><row><cell>P5 Debugging tool that uses objects as key abstractions to support debugging operations. Instead of setting breakpoints that refer to source code, one sets breakpoints with reference to a</cell><cell>29</cell><cell>0.55</cell><cell>0.90</cell><cell>0.03</cell></row><row><cell>particular object.</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>P6 Technique to make runtime reconfiguration of distributed systems in response to changing environments and evolving requirements safe and being done in a low-disruptive way</cell><cell>31</cell><cell>0.55</cell><cell>1.00</cell><cell>0.00</cell></row><row><cell>through the concept of version consistency of distributed transactions.</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>P7 A new technique that not only detects leaks, but also points developers to the locations where the underlying errors may be fixed.</cell><cell>25</cell><cell>0.52</cell><cell>1.00</cell><cell>0.00</cell></row><row><cell>P8 An approach which automatically prevents database deadlocks which happen when a database is being accessed by multiple database-intensive applications which hold locks to</cell><cell>34</cell><cell>0.50</cell><cell>0.94</cell><cell>0.00</cell></row><row><cell>different tables.</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>P9 A technique to engineer applications with a self-healing layer for service-oriented systems that dynamically reveals and fixes interoperability problems.</cell><cell>30</cell><cell>0.50</cell><cell>0.93</cell><cell>0.03</cell></row><row><cell></cell><cell>14</cell><cell>0.50</cell><cell>0.79</cell><cell>0.00</cell></row></table><note><p>P10</p></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>The survey tool records start and end times of people taking the survey, the average time to complete the survey was</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_1"><p>22.5  minutes. (When computing the average we ignored durations longer than two hours because participants likely got interrupted and completed the survey at a later point in time.)</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">ACKNOWLEDGMENTS</head><p>Thanks to everyone who responded to our survey and to Tom Ball, Christian Bird, Prem Devanbu, Miryung Kim, Emerson Murphy-Hill, Andreas Zeller, and the anonymous ESEC/FSE reviewers for providing feedback on this work.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Determining the Impact of Software Engineering Research on Practice</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">J</forename><surname>Osterweil</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Ghezzi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kramer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">L</forename><surname>Wolf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="39" to="49" />
			<date type="published" when="2008-03">March 2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">How healthy are software engineering conferences?</title>
		<author>
			<persName><forename type="first">B</forename><surname>Vasilescua</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Serebrenik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Mens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">G V D</forename><surname>Brand</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Pek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science of Computer Programming</title>
		<imprint>
			<biblScope unit="volume">89</biblScope>
			<biblScope unit="page" from="251" to="272" />
			<date type="published" when="2014-09">September 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<author>
			<persName><forename type="first">L</forename><surname>Briand</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Van Der Hoek</surname></persName>
		</author>
		<title level="m">Insights and Lessons Learned from Analyzing ICSE 2014 Survey and Review Data</title>
		<meeting><address><addrLine>Luxembourg</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Personal Opinion Surveys</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">A</forename><surname>Kitchenham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">L</forename><surname>Pfleeger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Guide to Advanced Empirical Software Engineering</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="63" to="92" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Appendix to The Health of Software Engineering Research</title>
		<author>
			<persName><forename type="first">D</forename><surname>Lo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Nagappan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Zimmermann</surname></persName>
		</author>
		<idno>. MSR-TR-2014-119</idno>
		<ptr target="http://research.microsoft.com/apps/pubs/?id=228247" />
		<imprint>
			<date type="published" when="2014">2014</date>
			<publisher>Microsoft Research</publisher>
			<pubPlace>Redmond, WA</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Analyze This! 145 Questions for Data Scientists in Software Engineering</title>
		<author>
			<persName><forename type="first">A</forename><surname>Begel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Zimmermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICSE</title>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Social influences on secure development tool adoption: why security tools spread</title>
		<author>
			<persName><forename type="first">S</forename><surname>Xiao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Witschey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">R</forename><surname>Murphy-Hill</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CSCW&apos;14: Proceeding of the Conference on Computer Supported Cooperative Work</title>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Quantifying Developers&apos; Adoption of Security Tools</title>
		<author>
			<persName><forename type="first">J</forename><surname>Witschey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Zielinska</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Welk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Murphy-Hill</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Mayhorn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Zimmermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ESEC/FSE&apos;15: Proceedings of joint meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering</title>
		<meeting><address><addrLine>Bergamo, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<author>
			<persName><forename type="first">D</forename><surname>Spencer</surname></persName>
		</author>
		<title level="m">Card Sorting: Designing Usable Categories, Rosenfeld Media</title>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Survey</forename><surname>Surveygizmo</surname></persName>
		</author>
		<author>
			<persName><surname>Diagnostics</surname></persName>
		</author>
		<ptr target="http://surveygizmov4.helpgizmo.com/help/article/link/diagnostics" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<ptr target="http://www.microsoft.com/about/diversity/en/us/default.aspx" />
		<title level="m">Global Diversity and Inclusion</title>
		<imprint>
			<publisher>Microsoft</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Influences on the design of exception handling ACM SIGSOFT project on the impact of software engineering research on programming language design</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">G</forename><surname>Ryder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">L</forename><surname>Soffa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGSOFT Software Engineering Notes</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="2003-07">July 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">The impact of software engineering research on modern progamming languages</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">G</forename><surname>Ryder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">L</forename><surname>Soffa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Burnett</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Softw. Eng. Methodol</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="431" to="477" />
			<date type="published" when="2005-10">October 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Impact of software engineering research on the practice of software configuration management</title>
		<author>
			<persName><forename type="first">J</forename><surname>Estublier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Leblang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Hoek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Conradi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Clemm</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Tichy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wiborg-Weber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Softw. Eng. Methodol</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="383" to="430" />
			<date type="published" when="2005-10">Oct 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Historical Perspective on Runtime Assertion Checking in Software Development</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">A</forename><surname>Clarke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Rosenblum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">SIGSOFT Software Eng. Notes</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="25" to="37" />
			<date type="published" when="2006-05">May 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">The Impact of Research on Middleware Technology</title>
		<author>
			<persName><forename type="first">W</forename><surname>Emmerich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Aoyama</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Sventek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">SIGSOFT Softw. Eng. Notes</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="21" to="46" />
			<date type="published" when="2007-01">Jan 2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">The Impact of Research on the Development of Middleware Technology</title>
		<author>
			<persName><forename type="first">W</forename><surname>Emmerich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Aoyama</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Sventek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Softw. Eng. Methodol</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="1" to="48" />
			<date type="published" when="2008-08">Aug 2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Impact of research on practice in the field of inspections, reviews and walkthroughs: learning from successful industrial uses</title>
		<author>
			<persName><forename type="first">D</forename><surname>Rombach</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ciolkowski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Jeffery</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Laitenberger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Mcgarry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Shull</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGSOFT Software Engineering Notes</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="26" to="35" />
			<date type="published" when="2008-11">Nov 2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">The impacts of software process improvement on developers: A systematic review</title>
		<author>
			<persName><forename type="first">M</forename><surname>Lavallée</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">N</forename><surname>Robillard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ICSE</title>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">A Systematic Literature Review on Fault Prediction Performance in Software Engineering</title>
		<author>
			<persName><forename type="first">T</forename><surname>Hall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Beecham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Bowes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Gray</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Counsell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Softw. Eng</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1276" to="1304" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">A Retrospective Study of Software Analytics Projects: In-Depth Interviews with Practitioners</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">T</forename><surname>Misirli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Caglayan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bener</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Turhan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="54" to="61" />
			<date type="published" when="2013-10">Sept-Oct 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">An empirical study on the developers&apos; perception of software coupling</title>
		<author>
			<persName><forename type="first">G</forename><surname>Bavota</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Dit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Oliveto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D</forename><surname>Penta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Poshyvanyk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">D</forename><surname>Lucia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICSE &apos;13: Proceedings of the 2013 International Conference on Software Engineering</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Do They Really Smell Bad? A Study on Developers&apos; Perception of Bad Code Smells</title>
		<author>
			<persName><forename type="first">F</forename><surname>Palomba</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Bavota</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Di Penta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Oliveto</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICSME&apos;14: International Conference on Software Maintenance and Evolution</title>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Software developers&apos; perceptions of productivity</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">N</forename><surname>Meyer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Fritz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">C</forename><surname>Murphy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Zimmermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FSE 2014: Proc of the Intl. Symposium on Foundations of Software Engineering</title>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<author>
			<persName><forename type="first">W</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Tse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Glass</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Basili</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">An Assessment of Systems and Software Engineering Scholars and Institutions</title>
		<imprint>
			<date type="published" when="2002">2002-2006. 2009</date>
			<biblScope unit="volume">82</biblScope>
			<biblScope unit="page" from="1370" to="1373" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">An assessment of systems and software engineering scholars and institutions</title>
		<author>
			<persName><forename type="first">W</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Tse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Glass</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Basili</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systems and Software</title>
		<imprint>
			<biblScope unit="volume">84</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="162" to="168" />
			<date type="published" when="2003">2003-2007 and 2004-2008. 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Automatic and versatile publications ranking for research institutions and scholars</title>
		<author>
			<persName><forename type="first">J</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">N</forename><surname>Taylor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">50</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="81" to="85" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Stop the numbers game</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">L</forename><surname>Parnas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">50</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="19" to="21" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
