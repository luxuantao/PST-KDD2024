<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Computing Nash Equilibria: Approximation and Smoothed Complexity</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Xi</forename><surname>Chen</surname></persName>
							<email>xichen00@mails.thu.edu.cn</email>
							<affiliation key="aff0">
								<orgName type="institution">Tsinghua University</orgName>
								<address>
									<settlement>Beijing</settlement>
									<country key="CN">P.R.China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Xiaotie</forename><surname>Deng</surname></persName>
							<email>deng@cs.cityu.edu.hk</email>
							<affiliation key="aff1">
								<orgName type="institution">City University of Hong</orgName>
								<address>
									<settlement>Kong Hong Kong</settlement>
									<country key="CN">P.R.China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Shang-Hua</forename><surname>Teng</surname></persName>
							<email>steng@cs.bu.edu</email>
							<affiliation key="aff2">
								<orgName type="institution">Boston University</orgName>
								<address>
									<settlement>Boston</settlement>
									<region>Akamai</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Computing Nash Equilibria: Approximation and Smoothed Complexity</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">A01D43D3CFB9CC3C44662451373FB045</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T11:19+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We advance significantly beyond the recent progress on the algorithmic complexity of Nash equilibria by solving two major open problems in the approximation of Nash equilibria and in the smoothed analysis of algorithms.</p><p>• We show that no algorithm with complexity poly(n, 1 ) can compute an -approximate Nash equilibrium in a two-player game, in which each player has n pure strategies, unless PPAD ⊆ P. In other words, the problem of computing a Nash equilibrium in a twoplayer game does not have a fully polynomial-time approximation scheme unless PPAD ⊆ P.</p><p>• We prove that no algorithm for computing a Nash equilibrium in a two-player game can have smoothed complexity poly(n, 1 σ ) under input perturbation of magnitude σ, unless PPAD ⊆ RP. In particular, the smoothed complexity of the classic Lemke-Howson algorithm is not polynomial unless PPAD ⊆ RP.</p><p>Instrumental to our proof, we introduce a new discrete fixed-point problem on a high-dimensional hypergrid with constant side-length, and show that it can host the embedding of the proof structure of any PPAD problem. We prove a key geometric lemma for finding a discrete fixed-point, a new concept defined on n + 1 vertices of a unit hypercube. This lemma enables us to overcome the curse of dimensionality in reasoning about fixed-points in high dimensions.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Shortly after Spielman and Teng <ref type="bibr" target="#b23">[24]</ref> proved that the smoothed complexity of the simplex algorithm with shadow-vertex pivoting rule is polynomial, a number of people <ref type="bibr" target="#b0">[1]</ref> asked them whether their analysis can be extended to another classic algorithm, the Lemke-Howson algorithm <ref type="bibr" target="#b14">[15]</ref>. Indeed, whether the smoothed complexity of the Lemke-Howson algorithm is polynomial has been the question most frequently raised during talks on smoothed analysis. The Lemke-Howson algorithm is the most popular method for computing a Nash equilibrium in a two-player game. It can be viewed as an extension of the simplex algorithm for linear programming and its worst-case complexity is also exponential <ref type="bibr" target="#b22">[23]</ref>. As the simplex algorithm can be used to solve zero-sum two-player games <ref type="bibr" target="#b17">[18]</ref>, a special subclass of two-player games, it is natural to conjecture that the Lemke-Howson algorithm has smoothed polynomial complexity like the simplex algorithm. Earlier and in the same spirit, it was asked <ref type="bibr" target="#b20">[21]</ref> whether the problem of finding a Nash equilibrium in a two-player game is in P as two-player zero-sum games and linear programming <ref type="bibr" target="#b12">[13]</ref>.</p><p>Motivated by the result of Bárány, Vempala, and Vetta <ref type="bibr" target="#b1">[2]</ref> that random two-player games can be solved in polynomial time, the following conjecture was included in a recent survey on smoothed analysis <ref type="bibr" target="#b24">[25]</ref>: Smoothed 2-NASH Conjecture: The problem of finding a Nash equilibrium in a two-player game is in smoothed polynomial time.</p><p>A positive answer to this conjecture would provide an encouraging result to the computation of Nash equilibria.</p><p>However, so far, no polynomial smoothed analysis of the Lemke-Howson algorithm or any other algorithm for computing Nash equilibria in two-player games has been found.</p><p>In the final installment of a series of recent exciting developments initiated by Daskalakis, Goldberg and Papadimitriou <ref type="bibr" target="#b8">[9]</ref>, Chen and Deng <ref type="bibr" target="#b3">[4]</ref> proved that 2-NASH, the problem of computing a Nash equilibrium in a two-player game, is PPAD-complete. These results, despite unknowns about the PPAD complexity class <ref type="bibr" target="#b21">[22]</ref>, provide strong evidence that this search problem might be hard for P.</p><p>These developments inspired us to attempt disproving the Smoothed 2-NASH Conjecture. In this regard, we formulated a competing conjecture that, 2-NASH is not in smoothed polynomial time unless PPAD ⊆ RP. A connection between the smoothed complexity and approximation complexity of Nash equilibria ( <ref type="bibr" target="#b24">[25]</ref>, Proposition 9.12) then led us to the conjecture: 2-NASH is PPAD-hard to approximate in fully polynomial time.</p><p>By proving these two conjectures, we advance significantly beyond the recent progress on the algorithmic complexity of Nash equilibria. Not only do we answer the question about the smoothed complexity of the Lemke-Howson algorithm, but our investigation also enables us to settle an important open question about Nash equilibria by proving 2-NASH does not have a fully polynomial-time approximation scheme, unless PPAD ⊆ P.</p><p>Consequently, it is unlikely that the n O(log n/ 2 ) -time algorithm of Lipton, Markakis, and Mehta <ref type="bibr" target="#b15">[16]</ref>, the fastest algorithm known today for finding an -approximate Nash equilibrium, can be improved to poly(n, 1/ ). Also, it is unlikely that the average-case polynomial time result of <ref type="bibr" target="#b1">[2]</ref> is extendible to the smoothed model.</p><p>Our results on approximation and smoothed complexity of Nash equilibria, together with those of <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b8">9]</ref> on "exact" Nash equilibria, demonstrate computational difference between two-player games and their zero-sum specializations. These results may further encourage the study of the difference between local search and fixed-point computation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Nash Equilibria of Two-Player Games</head><p>A two-player game ( or bimatrix game ) <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b14">15]</ref> is a non-cooperative game between two players in which the players have m and n choices of actions or pure strategies, respectively. The games can be specified by two m × n matrices A = (a i,j ) and B = (b i,j ). If the first player chooses action i and the second player chooses action j, then their payoffs are a i,j and b i,j , respectively. A mixed strategy of a player is a probability distribution over its choices. The Nash Equilibrium Theorem <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b18">19]</ref> on non-cooperative games when specialized to bimatrix games states that there exists a profile of possibly mixed strategies, called a Nash equilibrium, such that neither player can gain by changing his or her ( mixed ) strategy alone.</p><p>Let P n denote the set of all probability vectors in R n , i.e., non-negative vectors whose entries sum to 1.</p><p>Mathematically, a profile of mixed strategies can be expressed by two column vectors (x * ∈ P m , y * ∈ P n ). A Nash equilibrium is then a pair (x * , y * ) such that for all x ∈ P m and y ∈ P n , (x * ) T Ay * ≥ x T Ay * and (x * ) T By * ≥ (x * ) T By. <ref type="bibr" target="#b0">(1)</ref> Computationally, one might settle with an approximate Nash equilibrium. An -relatively-approximate Nash equilibrium is a pair (x * , y * ) that satisfies</p><formula xml:id="formula_0">(x * ) T Ay * ≥ (1 -)x T Ay * and (x * ) T By * ≥ (1 -)(x * ) T By,</formula><p>for all x ∈ P m , y ∈ P n , while an -approximate Nash equilibrium is a pair (x * , y * ) that satisfies</p><formula xml:id="formula_1">(x * ) T Ay * ≥ x T Ay * - and (x * ) T By * ≥ (x * ) T By -.</formula><p>The zero-sum two-player game <ref type="bibr" target="#b17">[18]</ref> is a two-player game (A, B) with B = -A. It can be formulated as a linear program and can be solved in (weakly) polynomial time <ref type="bibr" target="#b12">[13]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Our Results and Approaches</head><p>Our main complexity-theoretic results are:</p><formula xml:id="formula_2">• It is PPAD-complete to compute a 1/n c -approximate</formula><p>Nash equilibrium of an n × n normalized<ref type="foot" target="#foot_0">1</ref> two-player game, for any fixed c &gt; 0. Thus, no algorithm can compute an -approximate Nash equilibrium in time poly(n, 1/ ) for all , unless PPAD ⊆ P. • The smoothed complexity of the Lemke-Howson algorithm or in fact of any algorithm for bimatrix games is not poly(n, 1/σ) under perturbations with magnitude σ, unless PPAD ⊆ RP.</p><p>The first result implies that it is also PPAD-hard to find a 1/poly(n)-relatively-approximate Nash equilibrium in an n × n two-player game. It also implies that for any fixed c &gt; 0, it remains PPAD-complete to compute the first (1 + c) log n-bits of an exact Nash equilibrium in a twoplayer game, even when the entries of the matrices that defined the game are integers of poly(n) magnitude. Thus, computing these leading bits is as hard as finding an exact Nash equilibrium of a rational two-player game.</p><p>We emphasize that the PPAD-hard games constructed in <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b3">4]</ref> can not be used to demonstrate that the problem of computing a 1/poly(n)-approximate Nash equilibrium in a {2, 3, 4}-player game is PPAD-hard. For example, we can compute in polynomial time a 1/n-approximate Nash equilibrium in the PPAD-hard two-player games constructed by Chen and Deng <ref type="bibr" target="#b3">[4]</ref>, although they proved that finding a 2 -Θ(n) -approximate Nash equilibrium in these games is PPAD-complete. Thus, their proof does not apply to the search of 1/poly(n)-approximate Nash equilibria.</p><p>This limitation of <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b3">4]</ref> is inherent in their choice of the PPAD-complete fixed-point problems from which they build their { 2, 3, 4 }-player games. The exponential dependency is the result of the fact that the approximation precision needed increases geometrically in the number of bits required to represent the coordinate of a point in the search space. In order to prove our new result, we need a reduction from a PPAD-complete fixed-point problem on hypergrids of a constant or polynomial side-length, which seems inconceivable in previous approaches.</p><p>As an instrumental step of our work, we introduce a family of high-dimensional discrete fixed-point problems, one associated with the (8 × 8 ... × 8) n-dimensional hypergrid.</p><p>Fortunately and somewhat surprisingly, the fixed-point problem is still PPAD-complete in this hypergrid with a seemingly very small side-length. We show this hypergrid has enough flexibility and structure to host the embedding of the proof structure of any PPAD problem.</p><p>However, high dimensionality come with their own challenges, as the original approach defines a fixed point to be a unit hypercube with 2 n points, which creates new difficulties to the efficiency of the reduction. As a critical step of our reduction, we prove a geometric lemma for finding a fixed point defined on n + 1 vertices of a unit hypercube. This lemma allows us to overcome the curse of dimensionality in reasoning about fixed points in high dimensions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Notations</head><p>We will use bold lower-case Roman letters such as a to denote vectors and upper-case Roman letters such as A to denote matrices. We denote the i th -entry of a by a i and the (i, j) th entry of A by a i,j . Further, (1) Z d + denotes the set of d-dimensional vectors with positive integer entries, (2)</p><formula xml:id="formula_3">Z d [a,b] = { q ∈ Z d | a ≤ q i ≤ b, ∀ 1 ≤ i ≤ d }, (3) R m×n [a:b]</formula><p>is the set of m × n matrices with real entries between a and b, (4) a|b is the dot-product of two vectors. ( <ref type="formula">5</ref>) e i stands for the unit vector whose i th entry is equal to 1 and all other entries are zeros, (6) for x, y ∈ R and ∈ R + , by x = y ± , we mean y -≤ x ≤ y + , (7) for p, q ∈ R n and ∈ R + , by p = q ± , we mean p i = q i ± , for all i, and (8) a game </p><formula xml:id="formula_4">(A, B) is positively normalized if A, B ∈ R n×n [0,1] .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">PPAD and Discrete Fixed Points</head><formula xml:id="formula_5">A binary relation R ⊂ {0, 1 } * × {0,</formula><formula xml:id="formula_6">x of R 1 , if y satisfies that (f (x), y) ∈ R 2 , then (x, g(y)) ∈ R 1 . Q R1 and Q R2 are polynomial-time equiv- alent if Q R2 is also reducible to Q R1 .</formula><p>The complexity class PPAD <ref type="bibr" target="#b21">[22]</ref> is sub-class of TFNP, containing problems polynomial-time reducible to: Definition 2.1 (LEAFD). The input instance of LEAFD is a pair (M, 0 n ) where M defines a polynomial-time Turing machine satisfying: <ref type="bibr" target="#b0">(1)</ref>. For every</p><formula xml:id="formula_7">v ∈ {0, 1} n , M (v) is an ordered pair (u 1 , u 2 ) with u 1 , u 2 ∈ {0, 1} n ∪ {"no"}; (2). M (0 n ) = ("no", 1 n ) and the first component of M (1 n ) is 0 n . This instance defines a directed graph G = (V, E) with V = {0, 1} n and (u, v) ∈ E iff v is the second compo- nent of M (u) and u is the first component of M (v).</formula><p>The output is a directed leaf of G other than 0 n . A vertex is a directed leaf if its out-degree plus in-degree equals one.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Problem Brouwer f</head><p>We say an integer function f (n) is well-behaved if it is polynomial-time computable and there exists an integer constant n 0 such that</p><formula xml:id="formula_8">3 ≤ f (n) ≤ n/2 for all n ≥ n 0 . For example, f 1 (n) = 3, f 2 (n) = n/2 , f 3 (n) = n/3 , and f 4 (n) = log n are all well-behaved functions. Let K p = {q ∈ Z d | q i ∈ {p i , p i + 1} , ∀ i.} for p ∈ Z d . Let A d r = { q ∈ Z d | 0 ≤ q i ≤ r i -1, ∀ i. }, for d ∈ Z 1 + and r in Z d + , denote the hypergrid with side lengths specified by r. The boundary of A d r , ∂(A d r ), is the set of points q ∈ A d r with q i ∈ {0, r i -1 } for some i. For each r ∈ Z d + , let Size [r] = 1≤i≤d log(r i + 1) . Definition 2.2 (Brouwer-Mapping Circuit). For d ∈ Z 1 + , r ∈ Z d + , a Boolean circuit C is a Brouwer-</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>mapping circuit with parameters d and r if it has Size [r] input bits and 2d output bits</head><formula xml:id="formula_9">∆ + 1 , ∆ - 1 , ..., ∆ + d , ∆ - d . C is valid if • ∀ p ∈ A d</formula><p>r , the 2d output bits evaluated at p satisfy: case i, 1 ≤ i ≤ d: ∆ + i = 1 and all other 2d -1 bits are 0; or case (d + 1):</p><formula xml:id="formula_10">∀ i, ∆ + i = 0 and ∆ - i = 1. • ∀ p ∈ ∂(A d r )</formula><p>, if there exists an i such that p i = 0, letting i max = max { i | p i = 0 }, then the output bits satisfy the i th max case, otherwise ( ∀ i, p i = 0 and some p i is r i -1 ), the output bits satisfy the d + 1 st case.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 2.3 (Brouwer Color Assignment and Panchromatic Simplex). Let C be a valid Brouwer-mapping circuit with parameters d and r. It defines a color assignment Color</head><formula xml:id="formula_11">C : A d r → { 1, 2, ..., d + 1} as: Color C [p] = i if the output bits of C evaluated at p satisfy the i th case. A subset P ⊂ A d r is accommodated if P ⊂ K p for some point p ∈ A d r . P ⊂ A d r is a panchromatic simplex of C if it is accommodated and contains exactly d + 1 points with distinct d + 1 colors.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 2.4 (BROUWER f ). For a well-behaved function f and an integer</head><formula xml:id="formula_12">n &gt; 0, let d = n/f (n) and m = f (n). An input instance of BROUWER f is a pair (C, 0 n ),</formula><p>where C is a valid Brouwer-mapping circuit with parameters d and r with r i = 2 m for all i : 1 ≤ i ≤ d. The output of the problem is then a panchromatic simplex of circuit C. Both BROUWER f2 <ref type="bibr" target="#b2">[3]</ref> and BROUWER f3 <ref type="bibr" target="#b8">[9]</ref> are PPADcomplete. In section 5, we will establish the following theorem. It states that the complexity of finding a fixed point is independent of the shape or dimension of the search space. Theorem 2.5 (High-Dimensional Fixed Points). For each well-behaved function f , BROUWER f is PPAD-complete.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Smoothed Analysis and Approximation</head><p>In the smoothed analysis <ref type="bibr" target="#b23">[24]</ref> of two-player games, we consider perturbed games: For a pair of m × n matrices A and B with</p><formula xml:id="formula_13">| a i,j |, | b i,j | ≤ 1, let A and B be matrices with a i,j = a i,j + r A i,j , b i,j = b i,j + r B i,j</formula><p>, while r A i,j and r B i,j are chosen independently and uniformly from [-σ, σ] or from Gaussian distribution with variance σ 2 . We refer to these perturbations as σ-uniform and σ-Gaussian perturbations. An algorithm for bimatrix games has polynomial smoothed complexity <ref type="bibr" target="#b24">[25]</ref> if it finds a Nash equilibrium of (A, B) in expected time poly(m, n, 1/σ), for all (A, B).</p><p>The following lemma shows that if the smoothed complexity of the bimatrix game, under uniform or Gaussian perturbations, is low, then one can quickly find an approximate Nash equilibrium. See the full version <ref type="bibr" target="#b6">[7]</ref> for a proof. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Approximating Nash Equilibria is Hard</head><p>In this section, we prove our main theorem: </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Well-Supported Nash Equilibria</head><p>In our analysis, we will use an alternative notion of approximate Nash equilibria as introduced in <ref type="bibr" target="#b8">[9]</ref>: For a game G = (A, B), let a i and b i denote the i th row of A and the i th column of B, respectively. An -well-supported Nash equilibrium of G is a pair (x * , y * ), such that for all j, k,</p><formula xml:id="formula_14">b j |x * &gt; b k |x * + ⇒ y * k = 0 and a j |y * &gt; a k |y * + ⇒ x * k = 0.</formula><p>We prove the following lemma in our full version <ref type="bibr" target="#b6">[7]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 4.4 (Polynomial Equivalence). In a bimatrix game</head><formula xml:id="formula_15">(A, B) with A, B ∈ R n×n [0:1]</formula><p>, for any 0 ≤ ≤ 1, (1) eachwell-supported Nash equilibrium is also an -approximate Nash equilibrium; and (2) from any 2 /(8n)-approximate Nash equilibrium (u, v), one can find in polynomial time an -well-supported Nash equilibrium (x, y).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">From Brouwer to Approximate Nash</head><p>We reduce the search of a panchromatic simplex in an instance of BROUWER f1 ( which will be simply referred to as BROUWER in this section ) to the computation of a 1/n capproximate Nash equilibrium in a positively normalized bimatrix game, for some constant c &gt; 0. Recall f 1 (n) = 3. Our reduction will use ideas and gadgets from <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b3">4]</ref>.</p><p>However, we will need to develop several new techniques to meet the geometric and combinatorial challenges in the consideration of high-dimensional fixed-points.</p><p>Let U = (C, 0 3n ) be an input instance of BROUWER, which colors the hypergrid B n = Z n [0,7] with colors from { 1, ..., n, n + 1}. Let m be the smallest integer such that 2 m ≥ Size [C] and N = 2 6m+1 = 2K, where Size [C] is the number of gates plus the number of input and output variables in a Boolean circuit C. We first, in polynomial time, construct an N × N bimatrix game G U = (A U , B U ). Our construction ensures for = 1/K 3 , = 2 /(8N ),</p><formula xml:id="formula_16">• Property A 1 : | a U i,j |, | b U i,j | ≤ N 3 , ∀ 1 ≤ i, j ≤ N and • Property A 2 :</formula><p>From every -approximate Nash equilibrium of game G U , we can compute a panchromatic simplex P of circuit C in polynomial time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>By Lemma 4.4 it suffices to show</head><p>• Property A 2 : From each -well-supported Nash equilibrium of game G U , we can compute a panchromatic simplex P of circuit C in polynomial time.</p><p>We normalize G U to obtain G U = (A U , B U ) by setting</p><formula xml:id="formula_17">a U i,j = a U i,j + N 3 2N 3 and b U i,j = b U i,j + N 3 2N 3 , ∀ i, j.</formula><p>From Property A 2 , a panchromatic simplex P of C can be found in polynomial time from every N -10 -approximate Nash equilibrium of G U . By the following lemma, ( proof omitted ), we can extend the constant 10 to any fixed c &gt; 0.</p><p>Lemma 4.5. If the problem of finding an n -c -approximate Nash equilibrium in an n × n positively normalized game is PPAD-complete for some constant c = c 0 &gt; 0, then the problem is PPAD-complete for every constant c &gt; 0.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Overcome the Curse of Dimensionality</head><p>We now prove a key geometric lemma for finding a panchromatic simplex in order to overcome the curse of dimensionality. Our reduction will then build on this lemma.</p><p>For 2 and z n+1 = -1≤i≤n e i /K 2 . We encode the i th color by vector z i .</p><formula xml:id="formula_18">a ∈ R + , let π(a) = max{ i | 0 ≤ i ≤ 7 and i &lt; a } be the largest integer in [0 : 7] that is smaller than a. Let E n = { z 1 , z 2 ...z n , z n+1 } where z i = e i /K</formula><p>For p ∈ R n + , let q = π(p) be the lattice point in B n with</p><formula xml:id="formula_19">q i = π(p i ), ∀ i. Let ξ(p) = z t , where t = Color C [π(p)]. Definition 4.6 (Well-Positioned Points). A real a ∈ R + is poorly-positioned if there is an integer t : 0 ≤ t ≤ 7 such that | a -t | ≤ 80K = 80/K 2 . A point p ∈ R n + is well- positioned if none of its components is poorly-positioned, otherwise, it is poorly-positioned. Let S = { p 1 , p 2 ..., p h } be a set of h points in R n [0,8] . Let I B (S) = { k | p k is a poorly-positioned point }, and I G (S) = { k | p k is a well-positioned point }.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 4.7 (Key Geometry: Equiangle Averaging Segment). Let</head><formula xml:id="formula_20">S = { p i , 1 ≤ i ≤ n 3 } be n 3 points in R n [0,8] such that p i = p i-1 + n i=1 e i /K, ∀ 1 &lt; i ≤ n 3 . If there is a vector r k ∈ R n [0,1/K 2 ] for each k in I B (S), such that, k∈IG(S) ξ(p k ) + k∈IB (S) r k ∞ = O( ), then Q = {π(p k ), k ∈ I G (S)} is a panchromatic simplex of Boolean circuit C.</formula><p>Proof. We first prove that</p><formula xml:id="formula_21">Q = { q k = π(p k ), 1 ≤ k ≤ n 3 } is accommodated, and |Q | ≤ n + 1. As sequence {p k } is strictly increasing, {q k } is non-decreasing. Since n/K 1,</formula><p>there exists at most one k i , for each i, such that</p><formula xml:id="formula_22">q ki i = q ki-1 i + 1, which implies that Q is accommodated. Moreover, as {q k } is non-decreasing, |Q | ≤ n + 1. As Q ⊂ Q , Q is also accommodated and |Q| ≤ n + 1.</formula><p>Because 1/K 2 1/K 1, there is at most one k i , for each i, such that p ki i is poorly-positioned. Since every poorly-positioned point has at least one poorly-positioned component,</p><formula xml:id="formula_23">|I B (S)| ≤ n and |I G (S)| ≥ n 3 -n.</formula><p>For every 1 ≤ i ≤ n + 1, let W i denote the number points in q k : k ∈ I G (S) that is colored i by circuit C.</p><formula xml:id="formula_24">G+: P[T ] = [ x[v] = min(x[v1] + x[v2], xC [v] ) ± ] G ζ : P[T ] = [ x[v] = c ± ] G ×ζ : P[T ] = [ x[v] = min(c x[v1], xC [v] ) ± ] G=: P[T ] = [ x[v] = min(x[v1], xC [v] ) ± ] G&lt;: P[T ] = x[v] =B 1 if x[v1] &lt; x[v2] - x[v] =B 0 if x[v1] &gt; x[v2] + G-: P[T ] = min(x[v1] -x[v2], xC [v]) -≤ x[v] x[v] ≤ max(x[v1] -x[v2], 0 ) + G∨: P[T ] = x[v] =B 1 if x[v1] =B 1 or x[v2] =B 1 x[v] =B 0 if x[v1] =B 0 and x[v2] =B 0 G∧: P[T ] = x[v] =B 0 if x[v1] =B 0 or x[v2] =B 0 x[v] =B 1 if x[v1] =B 1 and x[v2] =B<label>1</label></formula><formula xml:id="formula_25">G¬: P[T ] = x[v] =B 0 if x[v1] =B 1 x[v] =B 1 if x[v1] =B 0</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 1. Constraint P[T]</head><p>It suffices to show that</p><formula xml:id="formula_26">W i &gt; 0 for all i in order prove Q is a panchromatic simplex, Let r G = k∈IG(S) ξ(p k ) and r B = k∈IB (S) r k . Since |I B (S)| ≤ n and r k ∞ ≤ 1/K 2 , we have r B ∞ ≤ n/K 2 , and r G ∞ ≤ r B ∞ + O( ) ≤ n/K 2 + O( ).<label>(2)</label></formula><p>Assume by way of contradiction that one of W i is zero:</p><formula xml:id="formula_27">(i) W n+1 = 0: Suppose W i * = max 1≤i≤n W i , then W i * ≥ n 2 -1. But r G i * ≥ (n 2 -1)/K 2 n/K 2 + O( ), since = 1/K 3 ,</formula><p>which contradicts with (2) above.</p><p>(ii) W t = 0 for some</p><formula xml:id="formula_28">1 ≤ t ≤ n: We assert W n+1 ≤ n 2 /2, for otherwise, |r G t | &gt; n 2 /(2K 2 ) n/K 2 + O( ), contradicting with (2). Suppose W i * = max 1≤i≤n+1 W i , then W i * ≥ n 2 -1 and i * = n + 1. So r G i * ≥ (n 2 -1 - n 2 /2)/K 2 n/K 2 + O( ), contradicting with<label>(2)</label></formula><p>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Gadget Games and Constraints</head><p>To construct game G U , we transform a prototype game G * = (A * , B * ), a zero-sum game to be defined, by adding "gadget" games: We will build a collection of gadgets</p><formula xml:id="formula_29">S U = { T 1 , ..., T l } for some l ≤ K. Each T ∈ S U defines two N × N matrices (L[T ], R[T ]), as shown in Figure 2.</formula><p>We define a function named BUILDGAME that takes a valid collection (will be defined) of gadgets S U and returns a bimatrix game</p><formula xml:id="formula_30">G U = (A U , B U ) = BUILDGAME(S U ) as: A U = A * + T ∈S U L[T ], B U = B * + T ∈S U R[T ].</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.1">Nodes, Values and Capacities</head><p>We choose two sets V A and V I with |V A | = |V I | = K. It will become clear what these elements are. So, don't worry too much about them now. We call elements in V A arithmetic nodes and elements in V I internal nodes.</p><p>Below, we will always use v to denote a node in V A and w to denote a node in V I . We also pick two one-to-one correspondences C A and C I to index these sets:</p><formula xml:id="formula_31">C A maps V A to [K] = {1, 2, ..., K } and C I maps V I to [K].</formula><p>Let (x ∈ P N , y ∈ P N ) be a pair of probability vectors.</p><formula xml:id="formula_32">For each v ∈ V A , let x[v] = x 2k-1 and x C [v] = x 2k-1 + x 2k</formula><p>, where k = C A (v). We refer to x[v] and x C [v] as the value and capacity, respectively, of v in (x, y). Similarly, the value and capacity of each w ∈ V I is y[w] = y 2t-1 and y C [w] = y 2t-1 + y 2t , respectively, where t = C I (w).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.2">The Prototype Game and its Properties</head><p>Our prototype G * = (A * , B * ) is the game of Matching Pennies with parameter M = 2 18m+1 = 2K 3 : A * is a K × K block-diagonal matrix where each diagonal block is a 2 × 2 matrix of all M 's, and B * = -A * . All games we will consider below belong to the following class:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 4.8 (Class L). A two-player game (A, B) belongs to class</head><formula xml:id="formula_33">L if 0 ≤ A -A * , B -B * ≤ 1.</formula><p>Every equilibrium (x, y) of G * enjoys a nice property:</p><formula xml:id="formula_34">x C [v] = y C [w] = 1/K, for all v ∈ V A and w ∈ V I .</formula><p>Let P denote the following constraint on (x, y):</p><formula xml:id="formula_35">[ x C [v] = 1/K ± , y C [w] = 1/K ± , ∀ v ∈ V A , w ∈ V I ].</formula><p>Lemma 4.9 (Nearly Uniform Capacities). If G ∈ L, then every 1.0-well-supported Nash equilibrium (x, y) of game G satisfies constraint P for = 2 -18m = 1/K 3 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.3">Gadgets and their Constraints</head><p>We use all the nine types of gadgets designed in <ref type="bibr" target="#b3">[4]</ref> for our construction:</p><formula xml:id="formula_36">{ G ζ , G ×ζ , G = , G + , G -, G &lt; , G ∧ , G ∨ , G ¬ }.</formula><p>Among them, G ∧ , G ∨ and G ¬ are logic gadgets. They will be used to simulate the logic gates in the Boolean circuit C. Associated with probability vectors (x, y), the value of <ref type="figure">c,</ref><ref type="figure">w</ref>) is a 6-tuple that implements an arithmetic or logic constraint P[T ], which requires the values of nodes v, v 1 and v 2 to satisfy certain functional relationship. The requirements for logic gadgets will hold exactly and the requirements for arithmetic ones will hold approximately. By Figure <ref type="figure">1</ref>, the logic constraints implemented by the logic gadgets are effective only when the values of their input nodes are representations of binary bits. In gadget T , v 1 ∈ V A ∪ {nil} and v 2 ∈ V A ∪ {nil} are the first and second input nodes, respectively, v ∈ V A is the output node, and w ∈ V I is the internal node of the gadget. Parameter c is only used in G ζ and G ×ζ gadgets:</p><formula xml:id="formula_37">v ∈ V A represents boolean 1 (x[v] = B 1) if x[v] = x C [v]; it represents boolean 0 (x[v] = B 0 ) if x[v] = 0. A gad- get T = (G, v 1 , v 2 , v,</formula><formula xml:id="formula_38">when type G = G ζ , we have c ∈ R and 0 ≤ c ≤ 1/K -; when G = G ×ζ , 0 ≤ c ≤ 1; otherwise, c = nil.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 4.10 (Valid Collection). A collection S of gadgets is valid if for each pair</head><formula xml:id="formula_39">T = (G, v 1 , v 2 , v, w, c) and T = (G , v 1 , v 2 , v , c , w ) in S, v = v and w = w .</formula><p>For every valid collection S, BUILDGAME(S) satisfies the following constraints: </p><formula xml:id="formula_40">Let T = (G, v 1 , v 2 , v, c, w), L[T ] = (L i,j ) and R[T ] = (R i,j ). Let k = C A (v) and t = C I (v). Then • i = 2k or 2k -1 ⇒ L i,j = 0, ∀ 1 ≤ j ≤ 2K; • j = 2t or 2t -1 ⇒ R i,j = 0, ∀ 1 ≤ i ≤ 2K; • i = 2k or 2k -1 ⇒ 0 ≤ L i,j ≤ 1, ∀ 1 ≤ j ≤ 2K; • j = 2t or 2t -1 ⇒ 0 ≤ R i,j ≤ 1, ∀ 1 ≤ i ≤ 2K. As S is valid, G ∈ L. As |V A | = |V I | = K, | S | ≤ K.</formula><p>Theorem 4.13 (Gadget Constraints). If S is a valid collection of gadgets, and (x, y) is an -well-supported Nash equilibrium of BUILDGAME(S), then for all T ∈ S, constraint P[T ] as defined in Figure <ref type="figure">1</ref> is satisfied by (x, y).</p><p>Proof. A similar theorem is proved in <ref type="bibr" target="#b3">[4]</ref>, also see <ref type="bibr" target="#b6">[7]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Construction of the Game G U</head><p>Our objective is to design a bimatrix game G U to encode n 3 points in R n [0,8] , to simulate the π function, and the boolean circuit C so that in every -well-supported equilibrium of G U , the sum of the n 3 vectors as given in Lemma 4.7 is close to zero, i.e., O( ). To achieve this, We build a valid collection S U of gadgets to define the bimatrix game. Then Q defined in Lemma 4.7 is a panchromatic simplex of C, which can be computed in polynomial time.</p><p>Let us define some notations that will be useful. Let S be a valid collection of gadgets. A node v ∈ V A ( or node w ∈ V I ) is said to be unused if none of the gadgets in S uses v (or w) as its output node (or internal node). Suppose T ∈ S is a gadget such that S ∪ {T } is valid. We will use INSERT(S, T ) to denote the insertion of T into S.</p><p>To encode these n 3 points, let {v k i } 1≤k≤n 3 ,1≤i≤n be n 4 distinguished nodes in set V A . We start with S U = ∅ and insert a number of gadgets into it so that, in every -wellsupported Nash equilibrium (x, y) of G U , values of these nodes encode</p><formula xml:id="formula_41">n 3 points S = { p k : 1 ≤ k ≤ n 3 } in R n [0,8]</formula><p>that approximately satisfy all the conditions of Lemma 4.7.</p><p>In our encoding, we let</p><formula xml:id="formula_42">p k i = 8Kx[v k i ].</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>L[T ] and R[T ],</head><p>where</p><formula xml:id="formula_43">T = (G, v 1 , v 2 , v, c, w) Set L[T ] = (Li,j) = R[T ] = (Ri,j) = 0 k = CA(v), k1 = CA(v1), k2 = CA(v2</formula><p>), and t = CI (w)</p><formula xml:id="formula_44">G+: L 2k-1,2t-1 = L 2k,2t = 1 R 2k 1 -1,2t-1 = R 2k 2 -1,2t-1 = R 2k-1,2t = 1 G δ : L 2k-1,2t = L 2k,2t-1 1 R 2k-1,2t-1 = 1, Ri,2t = c, ∀ 1 ≤ i ≤ 2K G ×δ : L 2k-1,2t-1 = L 2k,2t = 1 R 2k 1 -1,2t-1 = c, R 2k-1,2t = 1 G=: L 2k-1,2t-1 = L 2k,2t = 1 R 2k 1 -1,2t-1 = R 2k-1,2t = 1 G-: L 2k-1,2t-1 = L 2k,2t = 1 R 2k 1 -1,2t-1 = R 2k 2 -1,2t = R 2k-1,2t = 1 G&lt;: L 2k-1,2t = L 2k,2t-1 = 1 R 2k 1 -1,2t-1 = R 2k 2 -1,2t = 1 G∨: L 2k-1,2t-1 = L 2k,2t = R 2k 1 -1,2t-1 = 1 R 2k 2 -1,2t-1 = 1, Ri,2t = 1/(2K), ∀ 1 ≤ i ≤ 2K G∧: L 2k-1,2t-1 = L 2k,2t = R 2k 1 -1,2t-1 = 1 R 2k 2 -1,2t-1 = 1, Ri,2t = 3/(2K), ∀ 1 ≤ i ≤ 2K G¬: L 2k-1,2t = L 2k,2t-1 = 1 R 2k 1 -1,2t-1 = R 2k 1 ,2t = 1</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 2. Matrices L[T] and R[T]</head><p>EXTRACTBITS(S, v, v 1 , v 2 , v 3 ) </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 3. Function ExtractBits</head><p>We define two functions EXTRACTBITS and COLOR-INGSIMULATION. They will be used as the building blocks of our reduction. EXTRACTBITS given in Figure <ref type="figure">3</ref>, enables us to realize the π function. We have Lemma 4.14 (Encoding Binary with Games). Suppose S is a valid collection of gadgets. For each v ∈ V A and three unused nodes v 1 , v 2 , v 3 ∈ V A , let S be the set obtained after calling EXTRACTBITS(S, v, v 1 , v 2 , v 3 ). Then S is also valid and in every -well-supported Nash equilibrium  <ref type="bibr">[1:n]</ref> ) simulates circuit C on input π(p), given a valid collection S: (i) Pick 3n unused nodes {v i,j } i∈ <ref type="bibr">[1:n]</ref>j∈ <ref type="bibr">[1:3]</ref>  </p><formula xml:id="formula_45">(x, y) of game G = BUILDGAME(S ), if a = 8Kx[v] is well-positioned, then x[v i ] = B b i ,</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>For each {v</head><formula xml:id="formula_46">i } i∈[1:n] ⊂ V A and 3n unused nodes {v + i , v - i } i∈[1:n] ⊂ V A , let p ∈ R n + denote the point encoded by {v i } i∈[1:n] . Think p as a point in S = p k : 1 ≤ i ≤ n 3 . COLORINGSIMULATION(S, {v i } i∈[1:n] , v + i , v - i i∈</formula><formula xml:id="formula_47">p i = 8Kx[v i ], q = π(p), and ∆ + i [q] and ∆ - i [q]</formula><p>, for all i, be the output bits of C evaluated at q. Then, S is valid. Moreover, if (x, y) is an -well-supported equilibrium of BUILDGAME(S ), and p is a well-positioned point, then</p><formula xml:id="formula_48">x[v + i ] = B ∆ + i [q] and x[v - i ] = B ∆ - i [q] for all i ∈ [1 : n].</formula><p>Note that if the point p in the lemma above is not wellpositioned, the values of {v + i , v - i } could be arbitrary. Fortunately, because S is valid and thus (x, y) must satisfy P,</p><formula xml:id="formula_49">we know 0 ≤ x[v + i ], x[v - i ] ≤ 1/K + .</formula><p>We build S U and thus G U with a four-step construction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Part 1 [ Equiangle Sampling Segment ] :</head><p>S U = ∅. Insert properly-valued G ζ gadgets and G + gadgets to ensure that in each -well-supported Nash equilibrium (x, y) of the resulting game,</p><formula xml:id="formula_50">x[v k i ] = min( x[v 1 i ] + (k -1)/(8K 2 ), x C [v k i ] ) ± O( ), for all k ∈ [1 : n 3 ] and i ∈ [1 : n]. Part 2 [ Point Coloring ] : Pick 2n 4 unused nodes {v k+ i , v k- i } i∈[1:n],k∈[1:n 3 ] from V A . For each integer k ∈ [1 : n 3 ], call function COLORING- SIMULATION(S U , {v k i }, {v k+ i , v k- i } i∈[1:n] ).</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Part 3 [ Summing up the Coloring Vectors</head><formula xml:id="formula_51">] : Pick 2n unused nodes {v + i , v - i } i∈[1:n] from V A</formula><p>and insert properly-valued G ×ζ gadgets and G + gadgets to ensure in the resulting game, every -well-supported Nash equilibrium (x, y) satisfies </p><formula xml:id="formula_52">x[v + i ] = 1≤k≤n 3 1 K x[v k+ i ] ± O(n 3 ) and x[v - i ] = 1≤k≤n 3 1 K x[v k- i ] ± O(n 3 ). Part 4. For each i ∈ [1 : n], pick unused nodes v i , v i ∈ V A and w 1 i , w 2 i , w 3 i ∈ V I . Insert the following gadgets: INSERT S U , (G + , v 0 i , v + i , v i , nil, w 1 i ) , INSERT S U , (G -, v i , v - i , v i , nil, w 2 i ) , INSERT S U , (G = , v i , nil, v 0 i , nil, w 3 i ) .</formula><formula xml:id="formula_53">1: if p ∈ W then 2: Color C [p] = ColorC [ψ(p)] 3: else if p ∈ ∂ A d+1 r then 4:</formula><p>if there exists i such that pi = 0 then 5:</p><p>Color we replace the color d + 1 by a special color "red". In another word, if the output bits of C evaluated at p satisfy the d + 1 st case, then Color C [p] ="red".</p><p>The basic idea of our reduction is to iteratively embed an instance of BROUWER f2 into one for a space one dimension higher. We use the following concept to describe such embedding processes. A triple T = (C, d, r) is a coloring triple if r ∈ Z d with r i ≥ 7 for all 1 ≤ i ≤ d and C is a valid Brouwer-mapping circuit with parameters d and r. We let Size [C] denote the number of gates plus the number of input and output variables in a circuit C.</p><p>Our embedding is defined by a sequence of three polynomial-time transformations: L 1 (T, t, u), L 2 (T, u), and L 3 (T, t, a, b). They embed a coloring triple T into a larger T such that from every panchromatic simplex of T , one can find a panchromatic simplex of T efficiently.</p><p>Both L 1 and L In the construction of C , we use a snake-pattern W ⊂ A d+1 r to realize the longer t th dimension of A d r in the twodimensional space defined by the shorter t th and d + 1 st dimensions, see Figure <ref type="figure" target="#fig_2">4</ref> and 5. In Figure <ref type="figure" target="#fig_5">5</ref>, ψ is a onto map ( defined in the full version <ref type="bibr" target="#b6">[7]</ref> ) from W to A d r . The proof of Lemma 5.1 can be found in <ref type="bibr" target="#b6">[7]</ref>.</p><p>By repeatedly applying the three operations L 1-3 , we can prove Theorem 2.5. The proof is relatively procedural and can be found in <ref type="bibr" target="#b6">[7]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Extensions and Open Questions</head><p>As the fixed-points and Nash equilibria are fundamental to many other search and optimization problems, our results and techniques may have a broader scope of applications and implications.</p><p>Our hardness results can be naturally extended to both r-player games <ref type="bibr" target="#b19">[20]</ref> and r-graphical games <ref type="bibr" target="#b11">[12]</ref>, for every fixed r ≥ 3. Recently, there are a few exciting extensions of our work: Huang and Teng <ref type="bibr" target="#b10">[11]</ref> applied our result to show that the problem of finding a market equilibrium in a Leontief exchange economy does not have a fully polynomialtime approximation scheme, unless PPAD ⊆ P. They also show that the smoothed complexity of neither Scarf's general market equilibrium algorithm nor any other algorithm for Leontief market is likely polynomial. Chen, Teng, and Valiant <ref type="bibr" target="#b7">[8]</ref> solved one of our conjectures by extending the PPAD-hardness result to the approximation of win-lose bimatrix games. In addition, we proved in <ref type="bibr" target="#b5">[6]</ref> that the problem of computing a 1/poly(n)-approximate Nash equilibrium remains PPAD-complete for a sparse bimatrix game (A, B) in which each row and column of A and B contains at most a constant number of nonzero entries.</p><p>There remains a complexity gap on the approximation of Nash equilibria in two-player games: Lipton, Markakis and Mehta <ref type="bibr" target="#b15">[16]</ref> show that an -approximate Nash equilibrium can be computed in n O(log n/ 2 ) -time, while this paper shows that no algorithm can find an -approximate Nash equilibrium in poly(n, 1/ )-time for of order 1/poly(n), unless PPAD ⊆ P. However, our hardness result does not cover the case when is a constant between 0 and 1, or of order 1/polylog(n). Naturally, it is unlikely that finding an -approximate Nash equilibrium is PPAD-complete when is an absolute constant, for otherwise, all the search problems in PPAD would be solvable in n O(log n) -time, due to the result of <ref type="bibr" target="#b15">[16]</ref>.</p><p>Thinking optimistically, we would like to see the following conjectures to be true.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conjecture 1 (PTAS for NASH).</head><p>There is an O(n k+ -c )time algorithm for finding an -approximate Nash equilibrium in a two-player game, for some constants c and k.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conjecture 2 (Smoothed 2-NASH: Constant σ).</head><p>There is an algorithm to compute a Nash equilibrium in a two-player game with smoothed complexity O(n k+σ -c ) under perturbations with magnitude σ, for some constants c and k.</p><p>We also conjecture that Theorem 4.3 remains true without any complexity assumption on PPAD. A positive answer would extend the result of Savani and von Stengel <ref type="bibr" target="#b22">[23]</ref> to smoothed games.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Lemma 3 . 1 (</head><label>31</label><figDesc>Smoothed Nash vs Approximate Nash). If 2-NASH can be solved in smoothed poly(m, n, 1/σ) time under σ-uniform perturbations or σ-Gaussian perturbations, then for all &gt; 0, there exists a randomized algorithm to compute an -approximate Nash equilibrium in a two-player game with expected time O(poly(m, n, 1/ )) or O(poly(m, n, log max(m, n)/ )), respectively.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Theorem 4 . 1 (Theorem 4 . 3 (</head><label>4143</label><figDesc>Unlikely FPTAS for 2-NASH). For any constant c &gt; 0, the problem of computing a 1/n c -approximate Nash equilibrium of a positively normalized n × n bimatrix game is PPAD-complete. Setting = 1/poly(n), by Theorem 4.1 and Lemma 3.1: Theorem 4.2 (Hardness of Smoothed 2-NASH). 2-NASH is not in smoothed polynomial time, under uniform or Gaussian perturbations, unless PPAD ⊆ RP. Consequently, Simplex vs Lemke-Howson: Smoothed Perspective). The smoothed complexity of the Lemke-Howson algorithm is not polynomial under uniform or Gaussian perturbations, unless PPAD ⊆ RP.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Lemma 4 .</head><label>4</label><figDesc>11 (P). Let G = BUILDGAME(S). If S is valid then G ∈ L and | S | ≤ K. So, by Lemma 4.9, each -wellsupported Nash equilibrium of G satisfies constraint P. Proof. For each T ∈ S, (L[T ], R[T ]) of Figure 2 satisfy: Property 4.12.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>where b 1 b 2 b 3 is the binary representation of integer π(a) ∈ [0 : 7].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4. The 2-Dimensional View of Set W</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 .</head><label>5</label><figDesc>Figure 5. L 3 (T,t,a,b)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>in V A . Call EXTRACTBITS(S, v t , v t,1 , v t,2 , v t,3 ), for each 1 ≤ t ≤ n;(ii) View the values of {v i,j } as 3n input bits of C. Insert the corresponding logic gadgets from {G ∨ , G ∧ , G ¬ } into S to simulate the evaluation of C, one for each gate, and place the 2n output bits in {v + i , v - i }.</figDesc><table><row><cell>Lemma 4.15 (Point Coloring). Let S be the set of gad-</cell></row><row><cell>gets after calling the above COLORINGSIMULATION. For</cell></row><row><cell>a pair of probability vectors (x, y), let p be the point with</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head></head><label></label><figDesc>and two integers 1 ≤ t ≤ d, u &gt; r t , L 1 (T, t, u) pads dimension t to size u, i.e., it builds a new coloring triple T = (C , d, r ) with r t = u and r i = r i , ∀ i :1 ≤ i = t ≤ d. For u ≥ 7, L 2 (T, u) adds a dimension to T by constructing T = (C , d + 1, r ) such that r d+1 = u and r i = r i , ∀ i : 1 ≤ i ≤ d. L 3 (T, t,a, b) is the one that does all the hard work. and r i = r i for all 1 ≤ i = t ≤ d. Moreover, there exists a polynomial g(n) such that Size [C ] = Size [C] + O(g(Size [r ])) and T can be computed in time polynomial in Size [C ]. (2) From each panchromatic simplex P of coloring triple T , one can compute a panchromatic simplex P of T in polynomial time.</figDesc><table><row><cell>Lemma 5.1 (L 3 (T, t, a, b): Snake Embedding). Given a</cell></row><row><cell>coloring triple T = (C, d, r) and an integer 1 ≤ t ≤ d,</cell></row><row><cell>if r t = a(2b + 1) + 5 for some integers a, b ≥ 1, then we</cell></row><row><cell>can construct a new coloring triple T = (C , d + 1, r )</cell></row><row><cell>that satisfies the following two conditions. (1) r t = a + 5,</cell></row><row><cell>r d+1 = 4b + 3,</cell></row></table><note><p><p>2 </p>are very simple operations. Given a T = (C, d, r)</p></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>As an -approximate Nash equilibrium (x, y) of game (A, B) becomes a c • -approximate Nash equilibrium in game (cA, cB) for c &gt; 0. Following Lipton, Markakis, and Mehta<ref type="bibr" target="#b15">[16]</ref>, we normalize the matrices A and B so that all their entries are between 0 and 1, or between -1 and 1 when studying -approximate Nash equilibria.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Acknowledgements</head><p>In order to help readers who might be interested in both this paper and <ref type="bibr" target="#b3">[4]</ref>, the authors of both papers decided to use some common notations and terminologies in the presentation.</p><p>We would like to thank everyone who asked about the smoothed complexity of the Lemke-Howson algorithm. Part of Teng's work was done while visiting Tsinghua University and Microsoft Beijing Research Lab. His work is supported by the NSF grants CCR-0311430 and ITR CCR-0325630. Xiaotie Deng would like to thank the support of City University of Hong Kong for his research. Several critical ideas of this work were shaped when the authors were attending ISAAC2005 at Sanya, Hainan, China.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6">Analysis of the Reduction</head><p>We now prove the correctness of our construction. Let (x, y) be an -well-supported Nash equilibrium of G U . Recall S = {p k , with p k i = 8Kx[v k i ], 1 ≤ k ≤ n 3 } is the set of n 3 points that we want to produce. Let I G = I G (S) and I B = I B (S). For each t ∈ I G , let c t ∈ [1 : n+1] be the color of q t = π(p t ) assigned by C, and for each i ∈ [1 :</p><p>By Part 1 of our construction, we have Lemma 4.17 <ref type="bibr">(Accommodated)</ref>.</p><p>For each 1 ≤ k ≤ n 3 , let r k denote the vector that, after Part 2, satisfies</p><p>, for all i. The construction and Lemma 4.9 guarantees that Lemma 4.18 (Correct Encoding of Colors). For each t ∈ I G , r t = Kz ct ± ; for each t ∈ I B , r t ∞ ≤ 1/K + .</p><p>Recall that Part 3 sums up these n 3 vectors r k . Let r denote the vector that can be defined after Part 3, with</p><p>, for all i : 1 ≤ i ≤ n. Ideally, with the gadgets inserted in Part 4, we wish to establish r ∞ = O( ). However, whether or not this condition holds depends on the values of {v 1 i } 1≤i≤n . For example, in the case when x[v 1  i ] = 0, the magnitude of x[v - i ] could be much larger than that of x[v + i ]. We are able to establish the following lemma which is sufficient to carry out our correctness proof of the reduction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 4.19 (Well-Conditioned Solution). For all</head><p>Now we start to show that Q is a panchromatic simplex of C. By Lemma 4.17, it suffices to show that W i &gt; 0, ∀ i.</p><p>By Part 3 of the construction and Lemma 4.18,</p><p>where</p><p>As</p><p>Lemma 4.20 (Color Gap). If one of W i equals zero, then r G ∞ ≥ n 2 /(3K 2 ), and thus r ∞ 4 .</p><p>Therefore, if Q is not a panchromatic simplex, then one of the W i 's is equal to 0, and hence r ∞ 4 . Had the Part 4 of our construction guaranteed that r ∞ = O( ), we would have completed the proof. As it is not always the case, we prove the following lemma to complete the proof.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 4.21 (Well-Conditioness). For all</head><p>Proof. In this proof, we will use Lemma 4.22 below about the boundary conditions of circuit C.</p><p>First, if there exists an integer k : 1 ≤ k ≤ n such that x[v 1  k ] ≤ 4 , then q t k = 0 for all t ∈ I G , according to Part 1. By Lemma 4.22.1, W n+1 = 0. Let l be the integer such that W l = max 1≤i≤n W i . As</p><p>4 . Now consider the following cases :</p><p>&gt; 1 and hence q t l &gt; 0. By Lemma 4.22.2, we have W l = 0, which contradicts with the assumption.</p><p>Second, if there exists an integer</p><p>-4 , which contradicts with the assumption that x[v 1  k ] ≥ 1/K -2n 3 /K 2 &gt; 4 ( see <ref type="bibr">Lemma 4.19.1 )</ref>. Below, we assume W n+1 &lt; n 2 /2.</p><p>Let l be the integer such that W l = max 1≤i≤n+1 W i . Because W k = 0, we have W l ≥ n 2 -1 and l = k. As</p><p>4 . We now consider the following two cases : (1) If x[v 1  l ] &lt; 1/K -2n 3 /K 2 , then we get a contradiction in Lemma 4.19.2; (2) If x[v 1  l ] ≥ 1/K -2n 3 /K 2 , then p t l &gt; 1 and thus q t l &gt; 0 for all t ∈ I G . By Lemma 4.22.4, we have W l = 0 which contradicts with the assumption. Lemma 4.22. For each q ∈ B n and</p><p>k, and (4) if q k = 7 and Color C [q] = l = k, then q l = 0.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">PPAD-Completeness of Brouwer f</head><p>Our reduction starts with the 2D problem BROUWER f2 . To simplify the proof, we modify the definition of problem BROUWER f as follows: In the original definition, each valid Brouwer-mapping circuit C defines a color assignment from the search space to {1..., d + 1}. In this section,</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Jonathan Kelner and a number of other people asked whether the smoothed complexity of the Lemke-Howson algorithm or Nash Equilibria is polynomial</title>
		<author>
			<persName><forename type="first">John</forename><surname>Reif</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nicole</forename><surname>Immorlica</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Steve</forename><surname>Vavasis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christos</forename><surname>Papadimitriou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mohammad</forename><surname>Mahdian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ding-Zhu</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Santosh</forename><surname>Vempala</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aram</forename><surname>Harrow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Adam</forename><surname>Kalai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Imre</forename><surname>Bárány</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Adrian</forename><surname>Vetta</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001">2001-2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Nash equilibria in random games</title>
		<author>
			<persName><forename type="first">I</forename><surname>Bárány</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Vempala</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Vetta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FOCS 2005</title>
		<imprint>
			<biblScope unit="page" from="123" to="131" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">On the complexity of 2d discrete fixed point problem</title>
		<author>
			<persName><forename type="first">X</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Deng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICALP 2006</title>
		<imprint>
			<biblScope unit="page" from="489" to="500" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Settling the complexity of 2-player nash-equilibrium</title>
		<author>
			<persName><forename type="first">X</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Deng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FOCS</title>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">3-nash is ppad-complete</title>
		<author>
			<persName><forename type="first">X</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Deng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ECCC</title>
		<imprint>
			<biblScope unit="page" from="5" to="134" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Sparse games are hard</title>
		<author>
			<persName><forename type="first">X</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Deng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S.-H</forename><surname>Teng</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Computing nash equilibria: Approximation and smoothed complexity</title>
		<author>
			<persName><forename type="first">X</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Deng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S.-H</forename><surname>Teng</surname></persName>
		</author>
		<idno>ECCC TR06- 023</idno>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">The approximation complexity of win-lose games</title>
		<author>
			<persName><forename type="first">X</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S.-H</forename><surname>Teng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">A</forename><surname>Valiant</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006">2006</date>
			<publisher>Tsinghua-BU-MIT</publisher>
		</imprint>
	</monogr>
	<note>Manuscript</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">The complexity of computing a nash equilibrium</title>
		<author>
			<persName><forename type="first">C</forename><surname>Daskalakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Goldberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Papadimitriou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">STOC</title>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Three-player games are hard</title>
		<author>
			<persName><forename type="first">C</forename><surname>Daskalakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Papadimitriou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ECCC</title>
		<imprint>
			<biblScope unit="page" from="5" to="139" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">On the approximation and smoothed complexity of leontief market equilibria</title>
		<author>
			<persName><forename type="first">L.-S</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S.-H</forename><surname>Teng</surname></persName>
		</author>
		<idno>TR06-031</idno>
	</analytic>
	<monogr>
		<title level="j">ECCC</title>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Graphical models for game theory</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Kearns</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">L</forename><surname>Littman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">P</forename><surname>Singh</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="253" to="260" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A Polynomial Algorithm in Linear Programming</title>
		<author>
			<persName><forename type="first">L</forename><surname>Khachian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Dokl. Akad. Nauk, SSSR</title>
		<imprint>
			<biblScope unit="volume">244</biblScope>
			<biblScope unit="page" from="191" to="194" />
			<date type="published" when="1979">1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Bimatrix equilibrium points and mathematical programming</title>
		<author>
			<persName><forename type="first">C</forename><surname>Lemke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Management Science</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="681" to="689" />
			<date type="published" when="1965">1965</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Equilibrium points of bimatrix games</title>
		<author>
			<persName><forename type="first">C</forename><surname>Lemke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">J T</forename><surname>Howson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Soc. Indust. Appl. Math</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="413" to="423" />
			<date type="published" when="1964">1964</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Playing large games using simple strategies</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">J</forename><surname>Lipton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Markakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Mehta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EC 2003</title>
		<imprint>
			<biblScope unit="page" from="36" to="41" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">On total functions, existence theorems and computational complexity</title>
		<author>
			<persName><forename type="first">N</forename><surname>Megiddo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Papadimitriou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theoret. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">81</biblScope>
			<biblScope unit="page" from="317" to="324" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">The Theory of Games and Economic Behavior</title>
		<author>
			<persName><forename type="first">O</forename><surname>Morgenstern</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Neumann</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1947">1947</date>
			<publisher>Princeton University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Equilibrium point in n-person games</title>
		<author>
			<persName><forename type="first">J</forename><surname>Nash</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Porceedings of the National Academy of the USA</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="48" to="49" />
			<date type="published" when="1950">1950</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Noncooperative games</title>
		<author>
			<persName><forename type="first">J</forename><surname>Nash</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals of Mathematics</title>
		<imprint>
			<biblScope unit="volume">54</biblScope>
			<biblScope unit="page" from="289" to="295" />
			<date type="published" when="1951">1951</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Algorithms, games, and the internet</title>
		<author>
			<persName><forename type="first">C</forename><surname>Papadimitriou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">STOC 2001</title>
		<imprint>
			<biblScope unit="page" from="749" to="753" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">On the complexity of the parity argument and other inefficient proofs of existence</title>
		<author>
			<persName><forename type="first">C</forename><surname>Papadimitriou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computer and System Sciences</title>
		<imprint>
			<biblScope unit="page" from="498" to="532" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Exponentially many steps for finding a nash equilibrium in a bimatrix game</title>
		<author>
			<persName><forename type="first">R</forename><surname>Savani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Stengel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FOCS 2004</title>
		<imprint>
			<biblScope unit="page" from="258" to="267" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Smoothed analysis of algorithms: Why the simplex algorithm usually takes polynomial time</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Spielman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S.-H</forename><surname>Teng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. ACM</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="385" to="463" />
			<date type="published" when="2001">2004. 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Smoothed analysis of algorithms and heuristics: Progress and open questions</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Spielman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S.-H</forename><surname>Teng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Foundations of Computational Mathematics</title>
		<editor>
			<persName><forename type="first">L</forename><forename type="middle">M</forename><surname>Pardo</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><surname>Pinkus</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">E</forename><surname>Süli</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Todd</surname></persName>
		</editor>
		<imprint>
			<publisher>Cambridge University Press</publisher>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="274" to="342" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
