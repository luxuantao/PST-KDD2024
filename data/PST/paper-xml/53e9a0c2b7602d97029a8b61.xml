<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Fine-Grained Reputation System for Reliable Service Selection in Peer-to-Peer Networks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><roleName>Member, IEEE</roleName><forename type="first">Yanchao</forename><surname>Zhang</surname></persName>
							<email>yczhang@njit.edu</email>
						</author>
						<author>
							<persName><roleName>Senior Member, IEEE</roleName><forename type="first">Yuguang</forename><surname>Fang</surname></persName>
							<email>fang@ece.ufl.edu</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">New Jersey Institute of Technology</orgName>
								<orgName type="institution" key="instit2">University Heights</orgName>
								<address>
									<postCode>07102</postCode>
									<settlement>Newark</settlement>
									<region>NJ</region>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">University of Florida</orgName>
								<address>
									<addrLine>435 Engineering Building</addrLine>
									<postBox>PO Box 116130</postBox>
									<postCode>32611</postCode>
									<settlement>Gainesville</settlement>
									<region>FL</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A Fine-Grained Reputation System for Reliable Service Selection in Peer-to-Peer Networks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">A3E1D6A3D500BB323D36CB94E6B8F2F6</idno>
					<idno type="DOI">10.1109/TPDS.2007.1043</idno>
					<note type="submission">received 18 Nov. 2005; revised 5 July 2006; accepted 22 Sept. 2006; published online 9 Jan. 2007.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T11:34+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>P2P</term>
					<term>QoS</term>
					<term>reliability</term>
					<term>reputation</term>
					<term>security</term>
					<term>DHT</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Distributed peer-to-peer (P2P) applications have been gaining momentum recently. In such applications, all participants are equal peers simultaneously functioning as both clients and servers to each other. A fundamental problem is, therefore, how to select reliable servers from a vast candidate pool. To answer this important open question, we present a novel reputation system built upon the multivariate Bayesian inference theory. Our system offers a theoretically sound basis for clients to predict the reliability of candidate servers based on self-experiences and feedbacks from peers. In our system, a fine-grained quality of service (QoS) differentiation method is designed to satisfy the diverse QoS needs of individual nodes. Our reputation system is also applicationindependent and can simultaneously serve unlimited P2P applications of different type. Moreover, it is semidistributed in the sense that all application-related QoS information is stored across system users either in a random fashion or through a distributed hash table (DHT). In addition, we propose to leverage credits and social awareness as reliable means of seeking honest feedbacks. Furthermore, our reputation system well protects the privacy of users offering feedbacks and is secure against various attacks such as defaming, flattering, and the Sybil attack. We confirm the effectiveness and efficiency of the proposed system by extensive simulation results.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>I N many distributed peer-to-peer (P2P) applications, such as grid computing <ref type="bibr" target="#b0">[1]</ref>, it is essential that a client be able to predict the reliability of candidate servers in offering the desired quality of service (QoS). A natural solution is to leverage the reputations of candidate servers. This necessitates the design of a sound reputation system, which is the focus of this paper.</p><p>Reputation systems have been investigated extensively in the past, for which a comprehensive survey can be found in <ref type="bibr" target="#b1">[2]</ref>. In such a system, users share QoS experiences and consult others' feedbacks on candidate servers before making a choice. Most previous proposals focus on devising reputation engines that derive dependable reputation scores for servers. Among them, the line of approaches <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b5">[6]</ref> based on single-variate Bayesian inference <ref type="bibr" target="#b6">[7]</ref> are notable for their firm basis in statistics. This is in contrast to the intuitive and ad hoc natures of most other reputation engines, as noted in <ref type="bibr" target="#b3">[4]</ref>. The main drawback of <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b5">[6]</ref>, is that they all classify a service as either good or bad without any interim state. Such a binary QoS differentiation method limits their potential in many P2P applications in which servers have diverse capabilities and clients have various QoS demands. In addition, no strong incentives are designed to stimulate honest participation in the reputation system. These solutions do not consider protecting the privacy of references either, which is important for seeking honest feedback from them (see <ref type="bibr">Section 4.4)</ref>.</p><p>This paper presents the design of a novel reputation system with the following notable properties:</p><p>. QoS-aware. We devise a novel Dirichlet reputation engine based on multivariate Bayesian inference <ref type="bibr" target="#b6">[7]</ref>.</p><p>Firmly rooted in statistics, our design can satisfy the diverse QoS requirements of individual nodes by a fine-grained QoS differentiation method. . Incentive-aware. We motivate honest participation in the reputation system by charging users who inquire about others' reputations and rewarding those who provide honest feedbacks on inquired servers. . Socially aware. We incorporate the concept of social groups into the reputation system design as a reliable means of soliciting honest feedback and alleviating the cold-start problem (see Section 4.1). This design is motivated by the sociological fact that people tend to contribute to the associated social groups. . Application-independent. Unlike many previous solutions all designed for a concrete P2P application, our reputation system can simultaneously serve unlimited P2P applications of different type. This can greatly amortize the design and development costs of the reputation system. . Semidistributed. The proposed system features a central server 1 that maintains user accounts and answers reputation inquiries. All application-related QoS information, however, is stored across system users either in a random fashion or through a distributed hash table (DHT) <ref type="bibr" target="#b7">[8]</ref>.</p><p>. Secure. The proposed system can well protect the privacy of references and withstand various misbehaviors, such as defaming and flattering, by lightweight techniques like multivariate outlier detection <ref type="bibr" target="#b8">[9]</ref> and symmetric-key cryptographic functions. The rest of this paper is organized as follows: Section 2 introduces some related terms and definitions as well as the Dirichlet-Multinomial model on which our system is built. This is followed by the detailed system design in Section 3. Next, we illustrate a number of challenges facing the design of a practical reputation system along with the corresponding solutions. Section 5 evaluates the performance of our reputation system. We then survey related work in Section 6 and end with conclusions and future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">PRELIMINARIES 2.1 Terms and Definitions</head><p>Users of our reputation system can be classified as clients, servers, and references giving feedbacks on servers. A feedback reflects a reference's own QoS experiences with the referred server. Each user may play one of the three roles under different contexts. In this paper, we assume rational users who only attempt to misbehave if the expected benefit of doing so is greater than that of acting honestly. How to deal with malicious users who intend to interrupt the system functioning without considering their own gains is beyond the scope of this paper. We also refer to each interaction between a client and server pair as a transaction.</p><p>We define the reputation of a server as the probability that he<ref type="foot" target="#foot_0">2</ref> is expected to demonstrate a certain behavior, as assessed by a client based on self-experiences with and other users' feedbacks on him. This definition implies that a server can affect his reputation by different behaviors, but cannot decide it. Reputation is also application-dependent. For example, a user may be reputable in grid computing but notorious in file sharing. A client considers a server reliable if believing that server to meet his personal QoS need with a sufficiently high probability. The most important factor affecting the reliability decision-making process is the reputation of that server.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">The Dirichlet-Multinomial Model</head><p>Our system is firmly rooted in the classical Bayesian inference theory used to estimate one or more unknown quantities from the results of a sequence of multinomial trials. For clarity, we outline the adopted Dirichlet-Multinomial model as follows and refer to <ref type="bibr" target="#b6">[7]</ref> for more details.</p><p>A multinomial trials process is a sequence of independent, identically distributed (IID) random variables U 1 ; U 2 ; . . . , each taking one of k possible outcomes fo i g k i¼1 . We then denote the common probability density function (PDF) of the trial variables by p i ¼ PrðU j ¼ o i Þ for 1 i k, where p i &gt; 0 and P k i¼1 p i ¼ 1. Let p ¼ ðp 1 ; . . . ; p k Þ and z ¼ ðz 1 ; . . . ; z k Þ, which is the vector of observation counts of each outcome after N multinomial trials, namely, P k i¼1 z i ¼ N. The multinomial sampling distribution <ref type="bibr" target="#b6">[7]</ref> states that</p><formula xml:id="formula_0">fðzjpÞ ¼ MultðNjp 1 ; . . . ; p k Þ ¼ N! Q k i¼1 z i ! Y k i¼1 p z i i :<label>ð1Þ</label></formula><p>As a common practice in Bayesian inference, assume that p has a conjugate prior distribution<ref type="foot" target="#foot_1">3</ref> known as the Dirichlet,</p><formula xml:id="formula_1">fðpÞ ¼ Dirðpj 1 ; . . . ; k Þ ¼ Àð P k i¼1 i Þ Q k i¼1 Àð i Þ Y k i¼1 p iÀ1 i ;<label>ð2Þ</label></formula><p>where p i 6 ¼ 0 if i &lt; 1 and À is the gamma function. <ref type="foot" target="#foot_2">4</ref> The positive parameters i can be interpreted as "prior observation counts" for events governed by p i . Then, the posterior distribution is also Dirichlet <ref type="bibr" target="#b6">[7]</ref>:</p><p>fðpjzÞ ¼ fðzjpÞ Â fðpÞ fðzÞ</p><formula xml:id="formula_2">¼ Àð P k i¼1 ð i þ z i ÞÞ Q k i¼1 Àð i þ z i Þ Y k i¼1 p i þz i À1 i ¼ Dirðpj 1 þ z 1 ; . . . ; k þ z k Þ:<label>ð3Þ</label></formula><p>The posterior distribution can be used to make statements about p considered as a set of random quantities. The posterior mean of p i , which may be interpreted as the posterior probability of observing outcome o i in a future multinomial trial, is</p><formula xml:id="formula_3">E½p i jz ¼ i þ z i P k i¼1 ð i þ z i Þ :<label>ð4Þ</label></formula><p>To apply the Dirichlet-Multinomial model, we need to first specify the prior distribution fðpÞ. In our reputation system, we always use a uniform prior distribution by setting i ¼ 1 for 1 i k. This is equivalent to a priori assuming that each o i is likely to occur with the same probability, as E½p i j0 ¼ 1 k .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">SYSTEM DESIGN</head><p>This section illustrates the design of our reputation system. We first give a design overview and explain how user accounts are maintained. Then we present the concept of fine-grained QoS experience vectors and how to efficiently store such vectors. Finally, we detail the process of reputation query and reliability assessment as well as how to stimulate participation in the reputation system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Design Overview</head><p>Fig. <ref type="figure" target="#fig_1">1</ref> depicts the architecture of our reputation system consisting of a central server and distributed users.</p><p>Extending our system to a fully distributed one is part of our ongoing work. The central server mainly comprises four subcomponents: an account manager in charge of registering users and crediting/debiting user accounts, a query processor dealing with reputation queries from system users, a feedback collector gathering feedbacks on queried servers from system users, and a reputation engine deriving reputation scores for queried servers based on the collected feedbacks. For reasons of fault tolerance, load balance, and resilience to DoS/DDoS attacks, the central server may be replaced with a distributed server cluster in practice. We, however, focus on the single server case in this paper for ease of presentation. Each user logs QoS experiences with servers after each transaction. Upon a query from the central server, a user returns the QoS experiences (if any) with the queried server. In addition, a user may inquire the central server about the reputation of a candidate server before transacting with him. The operations of our reputation system can be best illustrated by the following example in grid computing. Suppose that Alice desires some computation services from Bob, and that a higher QoS is associated with a greater monetary cost and vice versa. Since Alice is asked to prepay the service, she wishes to assess the reputation of Bob before transacting with him. She achieves this by making a query to the central server. Upon the query by Alice, the central server collects feedbacks on Bob from some other users, based on which to derive a reputation score for Bob which, in turn, is returned to Alice. In addition, the central server credits the accounts of the users offering honest feedbacks and debits Alice's account accordingly. Then Alice can assess Bob's reliability based on the reputation score and decide whether to transact with him.</p><p>Realizing the above procedure requires solutions to the following questions: First, how does the central server maintain user account information to ensure secure operations of the reputation system? Second, how do system users record their QoS experiences to enable fine-grained QoS differentiation? Third, how does a system user check with the central server about the reputation of a candidate server and determine his reliability? Fourth, how does the central server search feedbacks on queried servers and differentiate between honest and dishonest feedbacks? Last, how does the central server urge honest participation in the reputation system? In the following, we will answer the above questions one by one.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">User Account Maintenance</head><p>Similarly to Gmail, 5 our reputation system adopts an invitation-based registration policy to reduce the amount of abuse, so misbehaving users cannot register near-infinite number of accounts as with a completely open registration policy. In particular, the central server only registers users with an invitation code which is received, for example, from an existing account holder or through their mobile phone.</p><p>We assume that the central server maintains a sufficiently long master key K which it keeps confidential. The central server assigns a unique identifier ID to each registered user . Let HMAC k ðmÞ denote a keyed-hash message authentication code (HMAC) <ref type="bibr" target="#b9">[10]</ref> of message m using a symmetric key k. The central server also sends a shared key k ¼ HMAC K ðID Þ to user through the Transport Layer Security (TLS) protocol <ref type="bibr" target="#b10">[11]</ref>. The central server need not store all the individual shared keys to save its storage. Instead, it can derive any shared key using K on the fly as needed. Since HMAC k ðmÞ is computationally efficient, the computational overhead is negligible. Hereafter, when saying that a message is securely sent or transmitted between two entities, we mean that the message is encrypted and authenticated with efficient symmetrickey algorithms based on their shared key. For example, a secure message m from user to the central server is of format hfmg k ; HMAC k ðmÞi, where fmg k denotes the encryption of message m using a symmetric key k. Upon receipt of it, the central server derives k and then uses it to decrypt fmg k and compute an HMAC on m. If the HMAC matches the received one, the central server is assured that m indeed came from user .</p><p>In addition to user accounts, the central server maintains a social network for system users, of which a snapshot is shown in Fig. <ref type="figure" target="#fig_0">2</ref>. Let G ¼ fG i g 1 i¼1 be the set of network social groups the central server maintains. In our system, each user is affiliated with at least one social group G i 2 G, where the cardinality of G i is jG i j ! 1. That is, each user at least belongs to a social group containing only himself. A joint request for group G i needs the consensus of ð0 1Þ fraction of existing group members, where is a system parameter chosen by the central server. For example, supposing that user requests to join group G i , the central server performs the following operations:   Note that similar operations can be performed to expel a faulty group member. For example, the central server need receive d jG i je (or another predetermined number) authenticated requests from members of G i to remove . We will show the use of the social network in solving the cold-start problem in Section 4.1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Fine-Grained QoS Experience Vectors</head><p>In this section, we introduce an important data structure, called a QoS experience vector (Q-vector for short), to record users' QoS experiences. For ease of presentation, we take client and server s with regard to application C as an example hereafter.</p><p>Our system adopts a fine-grained QoS differentiation method in contrast to the binary one used in <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b5">[6]</ref>. Assume that the QoS of C is divided into publicly known $ ! 2 levels and that any client can unambiguously map the QoS he experienced into one of the $ levels after each transaction. We denote by E C ;s ¼ ðID s ; C; e 1 ;s ; Á Á Á ; e $ ;s Þ the Q-vector of client for server s with respect to application C. Each e i ;s ð1 i $Þ is a counter corresponding to the ith QoS level and initialized to zero. After each transaction with s, user maps his QoS experience into one of the $ levels and then increases the corresponding counter by one. Note that each user only needs to maintain a Q-vector for who has ever offered services to him.</p><p>Old service experiences may not always be relevant for determining the current reliability of servers that may vary their behaviors or service qualities over time. To deal with this situation, we introduce a discount factor between [0, 1.0] to assign more weight to recency. At regular intervals, user should update fe i ;s g $ i¼1 to fe i ;s g $ i¼1 , so the counter values may not be integers. If the counter values are too small to be meaningful, e.g., all much smaller than 1, user can delete E C ;s to save memory space. Discounting the past not only can help identify servers who offer good services initially and bad services afterwards, but also can permit a disreputable server to reform by starting to provide high-quality services. Following the same process, each user needs to periodically discount all the Q-vectors he maintains. Note that each user has the right incentive to properly discount his QoS-vectors that provide important inputs to his reliability decision-making process.</p><p>The discount factor and interval are system parameters determined by the central server to control how fast past experiences are forgotten. Obviously, the smaller , the shorter the discount interval, the more quickly past experiences fall into oblivion, and vice versa. We will further show the effects of these two parameters using simulations in Section 5.4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Deriving Reputation Scores from</head><p>Self-Experiences Now, we discuss how user derives a reputation score for server s based on his own QoS experiences with s, i.e., E C ;s . Let p s;i denote the probability of s providing the ith QoS level of application C. Whenever updating E C ;s other than using the discounting method, user generates a reputation score R C ;s ¼ ðID ; ID s ; C; r 1 ;s ; Á Á Á ; r $ ;s Þ, where</p><formula xml:id="formula_4">r i ;s ¼ e i ;s þ 1 P $ i¼1 e i ;s þ 1</formula><p>is the posterior mean of p s;i computed according to (4). R C</p><p>;s is one of the factors affecting the decision of on s's reliability, as shown in Section 3.7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Storage of Reputation Scores</head><p>In our reputation system, R C ;s also serves as 's feedback on s regarding application C. The next question is how to store such reputation scores to enable efficient queries by the central server. We are aware of the following four approaches.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5.1">Approach 1</head><p>In the first approach, whenever deriving a new reputation score, a user securely sends it to the central server which saves all the received reputation scores for later use. This method, though simple, would cause significant storage overhead on the central server, as our reputation system may involve numerous P2P applications and users and thus contain thousands of millions of reputation scores. As a result, we discard this method in our design.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5.2">Approach 2</head><p>In this approach, each user independently stores his reputation scores. Upon receiving a query from the central server, he responds with the reputation score (if any) for the queried server. This approach can significantly reduce the storage overhead of the central server and the communication overhead of dynamically submitting reputation scores. The drawback, however, lies in the low query efficiency. The reason is that the central server has no knowledge about which users have the desired reputation scores, so it may need to send a number of queries. We will dwell on this point in Section 3.5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5.3">Approach 3</head><p>The third approach is a novel combination of the first approach with a distributed hash table (DHT) <ref type="bibr" target="#b7">[8]</ref>. In particular, the central server assigns to each user a virtual ID, g ID ¼ dhðID Þe , where h indicates a fast hash function such as SHA-1 <ref type="bibr" target="#b11">[12]</ref> and dme denotes the first bits of value m. Hereafter, we may also refer to user as ID or g ID . When a user submits a reputation score, the central server dispatches the score to several users before discarding it. The purpose is to harness the storage capacity of all users to provide distributed storage of reputation scores. Consider, for example, user who derived a new reputation score R C ;s . He securely transmits it to the central server which, in turn, forwards R C ;s to selected users by the following process.</p><p>The central server first calculates values of bits called score IDs, fdhðID s ; C; iÞe g i¼1 , where ! 1 is a system parameter called the redundancy index. Let n be an integer between 0 and 2 À 1 and successorðnÞ be the first virtual user ID clockwise from n, if virtual user IDs and score IDs are represented as a circle of numbers of 0 to 2 À 1. Then, the central server securely transmits hID s ; C; fR C ;s g K i individually to users fsuccessorðdhðID s ; C; iÞe Þg i¼1 . The encryption of R C</p><p>;s is to ensure that only the central server can decrypt and know the content of R C ;s . <ref type="foot" target="#foot_3">6</ref> Upon receiving hID s ; C; fR C ;s g K i, the chosen users save it for later queries by the central server. In addition, a timer needs to be set for hID s ; C; fR C ;s g K i, which is deleted after the timer expires. Why does the central server let users store hID s ; C; fR C</p><p>;s g K i? This is to improve system fault tolerance in case some users cannot respond to its query for various reasons, such as going offline. The choice of represents a trade-off between fault tolerance and system overhead: the larger , the higher fault tolerance, and the larger the communication overhead and the average storage cost of users, and vice versa.</p><p>Our system can well handle dynamic user sign-up or sign-off requests. For instance, when user signs up for the reputation system, the successor of some score IDs allocated to user successorð g ID Þ may become g ID . The central server then redistributes such reputation scores from user successorð g ID Þ to user . When user signs off from the reputation system, all the reputation scores he stores are reallocated to user successorð g ID Þ. No other actions need be taken in the presence of user sign-ups or sign-offs.</p><p>Another design issue is how to balance the load across system users. Since the distribution of user virtual IDs and reputation score IDs is unlikely to be uniform in practice, some users may store many more reputation scores than others, leading to load imbalance. A previous solution is to let each user have multiple virtual IDs <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b12">[13]</ref> to ensure a more uniform coverage of the range ½0; 2 À 1. In our system, this means that each user need store all the reputation scores with successor IDs equal to one of his virtual IDs. This technique, however, can only help balance the distribution of reputation score IDs on system users, and cannot address another reason for load imbalance which is unique to our reputation system. Note that score IDs are generated based on server IDs and application indexes. It is very possible that some servers are highly popular and serve many more users than others. As a result, there will be many more reputation scores associated with their score IDs and two users may have distinct storage and communication costs even when they are assigned the same number of score IDs.</p><p>We further alleviate the load imbalance by introducing a popularity index technique. In particular, for each application C, the central server maintains a popularity index containing the top users for which the maximum reputation scores are submitted during the last time period . Upon receiving a reputation score for any indexed user s, the central server picks a random x 2 ½1; and sends the encrypted reputation score to users fsuccessorðdhðID s kckikxÞe Þg i¼1 as before. Therefore, the storage of the reputation scores for any indexed user is uniformly distributed to instead of users. The choice of , called the popularity branching factor, determines a trade-off between load balance and system overhead. It is also possible to use different values of according to a user's rank in the popularity index. A popularity index may change after each time period , in which case the central server need redistribute reputation scores accordingly.</p><p>As compared to Approach 2, this approach can ensure deterministic queries by the central server because it knows exactly who store the desired reputation scores. This is achieved at the cost of increased communication overhead incurred by dynamic distributions of reputation scores.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5.4">Approach 4</head><p>In Approach 3, the central server is involved in distributing reputation scores among users. We can reduce the load of the central server by letting a user directly send a reputation score to corresponding other users instead of via the central server. For this purpose, a distributed routing protocol is required to enable a user to locate other users who should store his reputation score. This can be achieved by Chord <ref type="bibr" target="#b7">[8]</ref> or any other distributed P2P lookup protocol. Note that each user needs to periodically download the popularity index for the desired application from the central server with the purpose of correctly achieving load balance.</p><p>An important problem Chord does not address is the secure communication between two users, as otherwise an attacker may easily impersonate authentic system users to disseminate or even harmful useless information. To address this issue, we require the central server to assign an ID-based key IK ¼ KHðID Þ to each user upon registration, where HðxÞ indicates a hash function mapping an input x to an element of a cyclic group G G 1 defined in the Appendix. Assume that user computes a new reputation score R C</p><p>;s to be sent to user selected by the same method in Approach 3. He derives a shared key k ; by computing k ; ¼ êðIK ; HðID ÞÞ, get 's IP address through Chord, and sends hM; HMAC k ; ðMÞi to , where ê is the bilinear pairing function defined in the Appendix and M :¼ hID ; ID s ; C; fR C ;s g k i. The purpose of fR C ;s g k is to ensure the privacy of user (see Section 4.4) because only the central server can decrypt it using k .</p><p>Upon receiving the message, user generates k ; ¼ êðIK ; HðID ÞÞ, which is equal to k ; . The reason is that k</p><formula xml:id="formula_5">; ¼ k ; because êðIK ; HðID ÞÞ ¼ êðHðID Þ; HðID ÞÞ K ¼ êðHðID Þ; HðID ÞÞ K ¼ êðKHðID Þ; HðID ÞÞ ¼ êðIK ; HðID ÞÞ:<label>ð5Þ</label></formula><p>The first-line and third-line equations are due to the bilinearity of ê, and the second-line equation is because of its symmetry. Then, user calculates HMAC k; ðMÞ and compares it with HMAC k ; ðMÞ. If they are equal, is assured that the reputation score indeed came from , who is also a legitimate user of the reputation system. Note that an attacker may impersonate user , but he would not have been in possession of IK , thus being unable to derive a correct k ; .</p><p>In contrast to Approach 3, this approach can greatly reduce the load of the central server. The cost is that each user has to be involved in the Chord operations, which can be greatly amortized if our reputation system is integrated with any P2P application (e.g., file sharing) built upon Chord.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6">Query for Reputation Scores</head><p>Assume that user cannot predict the reliability of server s based on his own QoS experiences with s. He securely transmits a reputation query containing hID s ; C; n r i to the central server, where n r is the number of desired references to s. Upon receipt of the query, the central server performs the following different operations, depending on how reputation scores are stored.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6.1">Case 1</head><p>Consider first the case that the each user independently stores his reputation scores (Approach 2). The central server securely sends a query hID s ; Ci to each randomly chosen user . If user has R C</p><p>;s , he securely sends it back to the central server. Let p s be the probability of each user having a reputation score for s, and let X be a random variable denoting the number of users the central server needs to inquire until obtaining n r reputation scores. Then, we have</p><formula xml:id="formula_6">PrðX ¼ xÞ ¼ x À 1 n r À 1 p nr s ð1 À p s Þ xÀnr ; and E½X ¼ nr p s and Var½X ¼ n r ð1Àp s Þ p 2 s</formula><p>. The inquiry overhead is in inverse proportion to the popularity of servers. For example, if p s ¼ 0:005 or 0:025 and n r ¼ 20, the central server has to on the average inquire 4,000 and 800 users, respectively, until obtaining 20 reputation scores.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6.2">Case 2</head><p>Now, we consider the case in which reputation scores are stored through the DHT (i.e., Approaches 3 and 4). For ease of presentation, below we assume that s is not on the popularity index of application C, but the extension to any indexed server is straightforward. Let user g ID be a random online one among users fsuccessorðdhðID s kCkiÞe Þg i¼1 . The central server securely sends a query hID s ; C; n r i to user . Upon receipt of the query, if user stores fewer than n r encrypted reputation scores, he sends all of them to the central server; otherwise, he sends randomly selected n r of them. After receiving the encrypted reputation scores, the central server decrypts them using either the master key K (Approach 3) or the individual shared keys (Approach 4). One may consider reducing the load on the central server by letting user directly send reputation queries for s to other users. This is impossible in our system because all the reputation scores have been encrypted and can only be accessible to the central server for protecting references' privacy.</p><p>In both cases, let be the set of reputation scores for s returned to the central server, where jj n r . The central server cannot simply aggregate these reputation scores because there might be outliers in which are very different from the rest based on some measure. These outliers might have been created by users who attempt to defame or flatter user s, so it is necessary to identify and remove them from . Assuming that nonoutliers are the majority in , we can apply any existing multivariate outlier detection technique to find outliers in . Below we describe a distance-based method <ref type="bibr" target="#b13">[14]</ref> for its simplicity and efficiency. In particular, we calculate the sum of the euclidean distances of each reputation score in from all the others. A reputation score is said to be an outlier if there are no more than À 1 other distance sums larger than its distance sum. Here, is called an outlier index between 1; b n r 2 c Â Ã decided by the central server. There is also a trade-off regarding the choice of : if is large, more outliers will be removed but more nonoutliers may be mislabeled as outliers; and vice versa. Let 0 be the set of reputation scores from which outliers have been eliminated. The central server generates a reputation score R C s ¼ fID s ; C; r 1 s ; Á Á Á ; r $ s g, where</p><formula xml:id="formula_7">r i s ¼ P x2 0 r i</formula><p>x;s j 0 j :</p><p>Finally, the central server securely sends R s to the requesting user . If no reputation scores for s are found, the central server also need inform about it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.7">Reliability Assessment</head><p>Assume that user has computed R C ;s and obtained R C s from the central server and that his lowest and highest tolerable QoS levels are # L and # H , both in½1; $. He computes a reliability indicator as</p><formula xml:id="formula_8">I C ;s ¼ ð1 À Þ X # H i¼# L r i ;s þ X # H i¼# L r i s :<label>ð6Þ</label></formula><p>Here, " 2 ½0; 1:0 is called a trust indicator chosen by user to reflect the level of his trust on others' QoS experiences with s.</p><p>User considers s reliable if I ;s ! ' and unreliable otherwise, where ' a 2 ½0; 1:0 is a threshold chosen by itself. In the former case, starts to transact with s. Otherwise, he starts to check another candidate server, if any.</p><p>It is obvious that our fine-grained QoS differentiation method enables independent reliability decision-making of individual nodes with diverse QoS requirements. Consider grid computing <ref type="bibr" target="#b0">[1]</ref> as an example whose QoS is defined as the time t (in seconds) taken to finish a unit computation task. Assume that if the binary QoS differentiation method <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b5">[6]</ref> is used, the QoS is classified as good for t &lt; 60 and bad otherwise, namely, $ ¼ 2. In contrast, in our reputation system, the QoS is classified as six levels ð$ ¼ 6Þ : t ! 60, 48 t &lt; 60, 36 t &lt; 48, 24 t &lt; 36, 12 t &lt; 24, and t &lt; 12. Suppose that the QoS requirements of users 1 and 2 are t &lt; 60 and t &lt; 36, respectively. Obviously, the binary method cannot enable 2 to correctly assess the reliability of a candidate server, while our method can do so.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.8">Stimulating Participation With Credits</head><p>Another issue left for discussion is how to motivate users to respond to reputation queries and participate in storing reputation scores if the DHT is used. This is important because users in the open system have individual interests and are generally reluctant to serve others for free <ref type="bibr" target="#b14">[15]</ref>. We address this issue by a credit-based approach. In particular, upon the registration of any user , the central server opens a credit account for him with zero balance. Below, we continue with the previous example to illustrate the crediting/debiting process of users' credit accounts.</p><p>Upon receiving a reputation query hID s ; C; n r i from user , the central server processes it only when his credit balance exceeds n r . After obtaining 0 , the central server debits 's account with j 0 j credits and increases the account of each reference in 0 by 1 credit. This means that user needs to pay more to learn more QoS experiences of others. Since reputation queries require credits, a user is well urged to share his reputation scores to earn credits for future use. In addition, if the DHT is used, the central server can grant certain credits to the user who returns stored reputation scores. Alternatively, willingness to store and return reputation scores can be part of the user agreement that any user has to comply with.</p><p>Intuitively, one may think of punishing references who offer outlier reputation scores identified in . This measure, however, may discourage good users from sharing their QoS experiences. The reason is that some users may have slightly different QoS experiences with the same server from most other users due to subjective judgment. Even when offering honest reputation scores, these users may still be classified as outliers. As a result, we believe it enough not to reward them without further punishing them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">PROBLEMS AND SOLUTIONS</head><p>In this section, we describe some important problems to be aware of when designing a practical reputation system, as well as our corresponding solutions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Cold-Start</head><p>There are two types of cold-start problems to be considered.</p><p>The first one is pertinent to our reputation system, by which we mean that a system newcomer with initially zero credit is unable to immediately perform reputation queries. He has no reputation scores to share with others for earning credits, either. Of course, he can gradually create some reputation scores by temporarily taking the risk of assuming that all servers are reliable. We provide a better solution by utilizing the social network the central server maintains (see Section 3.2). In particular, we allow credit transfer between system users so that existing members of a social group can lend credits to either a group newcomer or an existing member with insufficient credits. This measure guarantees that at least part of a social group has to actively share their reputation scores. It is possible that some selfish users may exploit this measure to free ride on others' efforts and frequently request credits from social group peers. We assume that social group members are alert to this situation. They can also actively check with the central server about the available credit of any group peer. If some peer always has very few credits, the rest of the social group can request the central server to remove that user from the social group after reaching a consensus.</p><p>The second cold-start problem relates to the target P2P applications of our reputation system. In particular, an application newcomer will struggle to act as servers because there are no reputation scores for him, and so clients have no way to assess his reliability. This problem can also be greatly alleviated by using the social network.</p><p>More specifically, social group peers of the newcomer can initially offer reputation scores for him to make him considered reliable by other users. However, they are unable to overuse this feature because, as time goes on, there will be more reputation scores available that reflect the real QoS offered by the newcomer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Change of Identities</head><p>A user may rejoin the system under a new identity if he can benefit from doing so. A more advanced version is know as the Sybil attack <ref type="bibr" target="#b15">[16]</ref>, where an ill-intended user is in control of multiple identities and uses them in concert to take advantage of the system. Such misbehavior is a challenging issue for any practical reputation system. We are not claiming to completely defeat such misbehavior, but attempt to make it more difficult to launch and less beneficial. First, by an invitation-based registration policy (see Section 3.2), our reputation system renders it difficult for an ill-intended user to freely register near-infinite number of accounts. In addition, we can prevent computerautomated registration requests by introducing a CAPCHA <ref type="bibr" target="#b16">[17]</ref> into the registration process, which typically requires a user to type the letters of a distorted image, sometimes with the addition of an obscured sequence of letters or digits that appears on the screen. Furthermore, newcomers to our reputation system are granted zero credit, which is the lowest possible credit level. This measure can further discourage a user from changing his identity.</p><p>Another form of the above misbehavior is that a user may rejoin a P2P application under a new identity if he knows he has been considered disreputable by many other users. <ref type="foot" target="#foot_4">7</ref> Our reputation system can partially mitigate this misbehavior by the invitation-based registration policy and the consensus-based social group enrollment: Existing reputable group members may refuse the join request of a user who frequently changes his identity. Other countermeasures are totally application-dependent. For example, the application administrator can charge a new user an entry fee. Further investigation of this issue is beyond the scope of this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">QoS Variations over Time</head><p>Servers may offer varied QoS over time either deliberatively or unintentionally. For example, a server may initially provide good services to build up a good reputation and offer bad services afterward. On the other hand, a disreputable server may start to provide good services to regain a good reputation. Our reputation system can well accommodate QoS variations, be they good or bad, by discounting the past QoS experiences and deleting too old reputation scores. Also note that, as discussed before, the social network maintained by the central server can help a disreputable user to participate in service provision. That is, the disreputable user is treated as an application newcomer by his social group peers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Privacy of References</head><p>Resnick and Zeckhauser reported some interesting statistics about eBay's reputation system <ref type="bibr" target="#b17">[18]</ref>: Only 0.6 percent and 1.6 percent of all the feedbacks provided by buyers and sellers, respectively, were negative, which seem too low to reflect the reality. A convincing explanation is fear of retaliation from the rated party. We address this issue by well protecting the privacy of references. In particular, reputation scores submitted to the central server are encrypted and can only be decrypted by it. Even if the DHT is used, no user can learn the content of the encrypted reputation scores he saves. In addition, the central server only returns to the querying user an aggregated reputation score instead of collected raw reputation scores. Therefore, it is impossible for any server to know the reputation score a particular client gives for him, and clients can be assured of offering honest reputation scores without incurring retaliation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Dishonest Reputation Scores</head><p>Guaranteeing the privacy of references functions as a doubleedged sword to our reputation system. More specifically, it not only encourages well-behaved users to share honest reputation scores, but also facilitates ill-behaved users to offer dishonest ones without fear of being punished. Dishonest reputation scores can be either unfairly positive ones used to flatter conspirators, or unfairly negative ones aimed at defaming other users, say, competitors.</p><p>Our reputation system is designed to defend well against dishonest feedbacks. Let us first revisit the process of collecting reputation scores for a queried server (see Section 3.6). If the DHT is not used, the central server inquires random users about desired reputation scores. Under the assumption that well-behaved users are always the majority, the probability of ill-behaved users being chosen will be very low. If the DHT is used, the contacted user returns to the central server some reputation scores randomly chosen from all the reputation scores he records for the queried server. The probability of dishonest reputation scores being selected will be low as well under the same assumption. It is also worth noting that the contacted user, if ill-behaved, cannot send purposefully selected reputation scores to the central server for his blindness to the content of encrypted reputation scores. In both cases, the central server can run a multivariate outlier detection technique to identify outliers or dishonest reputation scores (if any) as the last line of defense. We believe that our countermeasures above are sufficient to discourage ill-behaved yet rational users from propagating dishonest reputation scores, as they might only achieve their ill intention with a rather small probability.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">PERFORMANCE EVALUATION</head><p>In this section, we evaluate the performance of the proposed reputation system through simulations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Simulation Setup</head><p>Unless otherwise stated, we use grid computing <ref type="bibr" target="#b0">[1]</ref> as an example and simulate 100 clients and two servers denoted by s 1 and s 2 , respectively. Again, the QoS is defined as the time t (in seconds) taken to finish a unit computation task and classified as six levels: t ! 60 ðl 1 Þ, 48 t &lt; 60 ðl 2 Þ, 36 t &lt; 48 ðl 3 Þ, 24 t &lt; 36 ðl 4 Þ, 12 t &lt; 24 ðl 5 Þ, and t &lt; 12 ðl 6 Þ. We assume that the probabilities of s 1 and s 2 providing each QoS level are {0, 0.05, 0.05, 0.1, 0.3, 0.5} and {0, 0.5, 0.3, 0.1, 0.05, 0.05}, respectively. In addition, the clients are divided into five equally sized groups, of which the lowest tolerable QoS levels are l 2 =l 3 =l 4 =l 5 =l 6 , respectively, and the highest one is all l 6 . The simulation is divided into discrete sessions. At the beginning of each session, each client sends two reputation queries to the central server, each requesting 99 references to s 1 and s 2 , respectively. To simplify the simulation, we assume that all the clients have the same trust indicator 0.99 (see ( <ref type="formula" target="#formula_8">6</ref>)), which amounts to assuming that each client puts the same trust in his own QoS experiences and those of each other client. Then each client requests service from s 1 or s 2 who has the higher reliability indicator and records his QoS experience after the transaction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Benefits of Fine-Grained QoS Differentiation</head><p>Here, we show the advantages of our fine-grained QoS differentiation method over the binary one <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b5">[6]</ref>. For the latter, we assume that the application specifies two QoS levels: bad for t ! 60 and good otherwise. Based on the behavior profiles of s 1 and s 2 given above, all the clients will derive the same reliability indicator equal to 1.0 for s 1 and s 2 , and thus will randomly choose one of them. In contrast, the application specifies six QoS levels defined in Section 5.1 for our fine-grained method. We are also interested in two performance metrics: server selection ratio (SSR), defined as the fraction of clients selecting s 1 in each session, and service contentment ratio (SCR), defined as the fraction of clients obtaining the desired QoS level in each session.</p><p>Fig. <ref type="figure" target="#fig_2">3</ref> shows the SSRs under both methods. In session 1, there were no reputation scores for s 1 and s 2 so that each client considered them equally reliable and randomly chose one of them. Therefore, both methods have almost the same SSR. As time goes on, however, more and more diverse reputation scores for both servers were available with our fine-grained method. As a result, increasingly more clients derived a higher reliability indicator for s 1 and thus selected him, which leads to the shown big SSR difference. In particular, the average and maximum SSR differences are 40.06 percent and 56 percent, respectively, and the variance is 0.32 percent.</p><p>Fig. <ref type="figure">4</ref> depicts the SCRs under both methods. As we can see, both methods have nearly identical SCRs in session 1 where clients randomly selected one of s 1 and s 2 . Since most clients selected the more reliable s 1 afterward with our finegrained method, there are many more clients whose QoS needs were satisfied across the subsequent sessions. More specifically, the average and maximum SCR differences are 23.14 percent and 42 percent, respectively, and the variance is 0.29 percent.</p><p>To sum up, the above results clearly demonstrate the benefits of our fine-grained QoS differentiation method in meeting the various QoS needs of clients.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Filtering Outlier Reputation Scores</head><p>In the last section, each client is assumed to always offer honest reputation scores. This subsection studies the efficacy of distance-based multivariate outlier detection in eliminating dishonest reputation scores (or outliers). For lack of space, we focus on filtering defaming outliers, but it should be noted that our approach performs equally well in detecting flattering outliers. In the simulation, an outlier is generated as a set of six random numbers normalized by their sum, which follow the multinomial distribution {0, 0.5, 0.3, 0.1, 0.05, 0.05}. Similarly, a nonoutlier is generated with the multinomial distribution {0, 0.05, 0.05, 0.1, 0.3, 0.5}. We also assume that the central server aggregates the reputation scores for s 1 from all the 100 clients and then determines the reliability of s 1 in offering a QoS level higher than l 3 . In addition to s 1 's reliability indicator (denoted by I s 1 ), we have interest in the false positive rate, defined as the proportion of nonoutliers that were mislabeled as outliers, and the false negative rate, defined as the proportion of outliers that were not detected.</p><p>We can see from Fig. <ref type="figure">5</ref> that, without outlier detection, I s 1 decreases dramatically with the increase of outliers, which is no surprise. In addition, the outlier detection technique can greatly alleviate the impact of outliers and make I s 1 approach its true value, 0.9. The larger the outlier index , the higher the efficacy of outlier detection. Another observation is that outlier detection fails when the percentage of outliers reaches 50 percent, in which case there is no longer clear distinction between outliers and nonoutliers. We believe that this issue cannot be easily solved by any technical means. This scenario also reflects an underlying assumption of all practical reputation systems: Outliers are assumed to be always the minority.</p><p>Figs. 6 and 7 depict the false positive and negative rates with varying outlier indexes, respectively. As we can see, when the number of outliers is fixed, a larger outlier index can result in a higher false positive rate but a lower false negative rate, and vice versa. We opt for a larger because it may lead to more trustable reliability decisions, though it may cause some nonoutliers to be unable to get deserved credits. In practice, the central server can decide and dynamically adjust it by empirical means. Further investigation on how to choose is part of our future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Effects of Discounting the Past</head><p>In this section, we evaluate the impact of the aforementioned discount method on the reliability decision-making process. For this purpose, we assume that each client always selects s 1  as the server and evaluates its reliability in offering a QoS level higher than l 3 based on his own QoS experiences in past sessions. We also assume that the behavior profile of s 1 is {0, 0.5, 0.3, 0.1, 0.05, 0.05} for the first 100 sessions and changes to {0, 0.05, 0.05, 0.1, 0.3, 0.5} afterward.</p><p>Fig. <ref type="figure">8</ref> shows the average reputation indicators for s 1 with varying discount factors across sessions, where the discount interval is fixed to be one session. It is obvious that a smaller discount factor, say ¼ 0:25, can help catch the QoS variations of s 1 more quickly at the cost of generating reputation indicators far from the true value. In particular, when ¼ 0, each client discards all his past QoS experiences and derives a reliability indicator 0.6 for s 1 . On the contrary, a larger can lead to a more trustful reputation indicator at the cost of accommodating the QoS variations of s 1 more slowly. Fig. <ref type="figure">9</ref> depicts the impact of , in which is fixed to be 0.75. Since a larger discount interval is equivalent to a larger discount factor, we can observe the similar trend as in Fig. <ref type="figure">8</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Load Balance with the Popularity Index</head><p>Here, we show how the popularity index technique (see Section 3.5) can help achieve load balance when the DHT is used to store reputation scores. We assume that there are 100 clients and 100 reputation score IDs, and that the redundancy index is 1. The popularity index contains 10 reputation score IDs whose numbers of associated reputation scores are uniformly distributed between [80, 99]. For the rest of reputation score IDs, the numbers of associated reputation scores are uniformly distributed between <ref type="bibr" target="#b9">[10,</ref><ref type="bibr">30]</ref>. Since the usefulness of multiple virtual IDs in improving load balance has been validated in <ref type="bibr" target="#b7">[8]</ref>, we assume that each client has one virtual ID to simplify the simulation. Fig. <ref type="figure" target="#fig_6">10</ref> shows the standard deviation (STD) of the number of reputation scores per node, where each point represents the average of 150 runs. As we can see, the popularity index can obviously result in a more balanced usage of client resources: the greater the popularity branching factor , the higher the level of load balance we can achieve.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">RELATED WORK</head><p>Recent years have witnessed a growing interest in reputation systems research. Due to space constraints, we only discuss prior art that is more germane to our work and refer to <ref type="bibr" target="#b1">[2]</ref> for a comprehensive survey.</p><p>Previous proposals <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b5">[6]</ref> use single-variate Bayesian inference <ref type="bibr" target="#b6">[7]</ref> to build reputation engines and thus are all special cases of our Dirichlet reputation engine. Built upon multivariate Bayesian inference, our system can satisfy the diverse QoS needs of individual nodes. Our work also differs significantly from <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b5">[6]</ref> by stimulating honest participation in the reputation system by credits and social awareness. In <ref type="bibr" target="#b18">[19]</ref>, Whitby et al. propose an iterative method for filtering dishonest feedbacks, but their scheme is only applicable to the single-variate Beta reputation systems <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b5">[6]</ref>. <ref type="bibr">Fernandes et al. [20]</ref> propose rewarding users for active and honest participation in the reputation system but do not consider fine-grained QoS differentiation or most of the issues presented in Section 4. Furthermore, the issue of service differentiation in P2P networks is addressed in <ref type="bibr" target="#b20">[21]</ref>, where peer reputation scores are mapped to various levels of service. By contrast, our scheme considers the QoS differentiation issue when deriving the reputation scores via multivariate Bayesian inference. Damiani et al. <ref type="bibr" target="#b21">[22]</ref> present a reputation-based approach for choosing reliable resources in P2P file sharing applications, in which separate reputations are associated with resources and servers who share resources, respectively. This idea can help further alleviate the application-related cold-start problem when our system is applied to file-sharing-like P2P applications.  In this paper, we present a novel fine-grained reputation system to support reliable service selection in P2P networks. Firmly rooted in statistics, our system offers a theoretically sound basis for clients to choose reliable servers based on their self-experiences and peers' feedbacks on candidate servers. In addition, it can meet the diverse QoS requirements of individual nodes via a fine-grained QoS differentiation method. Our system is also applicationindependent and can simultaneously serve an arbitrary number of P2P applications. Moreover, we design strong incentives to motivate honest and active participation in the reputation system. We also propose various methods to ensure efficient storage and queries of users' feedbacks. Furthermore, our reputation system is designed to provide strong defense against various attacks. The effectiveness and efficiency of our system are confirmed by extensive simulation results.</p><p>As the future work, we first plan to build an experimental reputation system on PlanetLab <ref type="bibr" target="#b22">[23]</ref> to further evaluate our design in a more realistic setting. We will also seek ways to reduce the involvement of the central server and extend our current system to a fully distributed one.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>APPENDIX THE PAIRING TECHNIQUE</head><p>The pairing technique is finding growing applications in cryptography <ref type="bibr" target="#b23">[24]</ref>, <ref type="bibr" target="#b24">[25]</ref>. Let G G 1 be an additive cyclic group of prime order q and G G 2 be a multiplicative cyclic group of the same order. Assume that the discrete logarithm problem (DLP) is hard 8 in both G G 1 and G G 2 . A pairing is a bilinear map ê : G G 1 Â G G 1 ! G G 2 if, for all P ; Q; R; S 2 G G 1 , we have 9 êðP þ Q; R þ SÞ ¼ êðP; RÞêðP; SÞêðQ; RÞêðQ; SÞ: ð7Þ Modified Weil <ref type="bibr" target="#b23">[24]</ref> and Tate <ref type="bibr" target="#b24">[25]</ref> pairings are examples of such bilinear maps, for which the Bilinear Diffie-Hellman Problem (BDHP) is believed to be hard. 10 Also note that ê is symmetric, i.e., êðP ; QÞ ¼ êðQ; P Þ for 8P , Q 2 G G 1 , which follows immediately from the bilinearity and the fact that G G 1 is a cyclic group. We refer to <ref type="bibr" target="#b23">[24]</ref>, <ref type="bibr" target="#b24">[25]</ref> for a more comprehensive description of how the pairing parameters should be chosen in practice for both efficiency and security. 8. It is computationally infeasible to extract the integer x 2 Z Z Ã q ¼ fij1 i q À 1g, given P , Q 2 G G 1 (respectively, P , Q 2 G G 2 ) such that Q ¼ xP (respectively, Q ¼ P x ). 9 .</p><p>I n p a r t i c u l a r , 8P , Q 2 G G 1 , 8a, b 2 Z Z Ã q , êðaP ; bQÞ ¼ êðaP ; QÞ b ¼ êðP ; bQÞ a ¼ êðP ; QÞ ab , etc.</p><p>10. It is believed that, given &lt; P; xP; yP; zP &gt; for random x; y; z 2 Z Z Ã q and P 2 G G 1 , there is no algorithm running in expected polynomial time, which can compute êðP ; P Þ xyz 2 G G 2 with nonnegligible probability.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. A snapshot of the social network of system users with four social groups and five users, where the directed link indicates group affiliation.</figDesc><graphic coords="3,319.58,69.17,190.37,107.32" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. The reputation system architecture.</figDesc><graphic coords="3,70.87,69.17,161.74,147.57" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Comparing server selection ratios.</figDesc><graphic coords="8,306.60,69.17,216.34,166.34" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .Fig. 5 .</head><label>45</label><figDesc>Fig. 4. Comparing service contentment ratios.</figDesc><graphic coords="9,47.91,69.17,207.67,166.79" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 6 .Fig. 7 .</head><label>67</label><figDesc>Fig. 6. The false positive rate.</figDesc><graphic coords="9,309.49,69.17,210.56,164.86" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 8 .Fig. 9 .</head><label>89</label><figDesc>Fig. 8. Average reputation indicators for s 1 with varying discount factors, where the discount interval is fixed to be 1 session.</figDesc><graphic coords="10,46.71,69.17,210.05,165.83" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 10 .</head><label>10</label><figDesc>Fig. 10. The standard deviation of number of reputation scores per node.</figDesc><graphic coords="10,310.45,69.17,208.63,161.97" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>1 .</head><label>1</label><figDesc>Randomly select djG i je existing members of group G i . 2. Poll each chosen user about user 's join request. 3. Verify the response HMAC k ðID ; ID G i Þ from each chosen user to make sure that the response was indeed sent by , where ID Gi indicates the unique ID of G i . 4. Link user to group G i if all the responses are authentic.</figDesc><table /><note><p>5. Gmail is a free Web mail and POP e-mail service provided by Google, Inc.</p></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_0"><p>No gender implication.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_1"><p>The property that the posterior distribution follows the same parametric form as the prior distribution is called conjugacy<ref type="bibr" target="#b6">[7]</ref>.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_2"><p>If x is an integer, ÀðxÞ ¼ ðx À 1Þ!.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_3"><p>Note that the informative structure of R C ;s means that R C;s is selfauthenticated, as any modification on fR C;s g K will render a meaningless decryption result.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="7" xml:id="foot_4"><p>The user can learn this by asking his social group peers to perform a reputation query on him.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>This work was supported in part by the US National Science Foundation under grants CNS-0626881, DBI-0529012, and ANI-0093241 (CAREER Award).</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>. For more information on this or any other computing topic, please visit our Digital Library at www.computer.org/publications/dlib.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<ptr target="http://www.ogf.org/" />
		<title level="m">Open Grid Forum</title>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A Survey of Trust and Reputation Systems for Online Service Provision</title>
		<author>
			<persName><forename type="first">A</forename><surname>Jøsang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ismail</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Boyd</surname></persName>
		</author>
		<ptr target="http://sky.fit.qut.edu.au/josang/papers/JIB2006-DSS.pdf" />
	</analytic>
	<monogr>
		<title level="j">Decision Support Systems</title>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Ratings in Distributed Systems: A Bayesian Approach</title>
		<author>
			<persName><forename type="first">L</forename><surname>Mui</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mohtashemi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Ang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Szolovits</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Halberstadt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 11th Workshop Information Technologies Systems</title>
		<meeting>11th Workshop Information Technologies Systems</meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The Beta Reputation System</title>
		<author>
			<persName><forename type="first">A</forename><surname>Jøsang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ismail</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 15th Bled Electronic Commerce Conf</title>
		<meeting>15th Bled Electronic Commerce Conf</meeting>
		<imprint>
			<date type="published" when="2002-06">June 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A Robust Reputation System for P2P and Mobile Ad-Hoc Networks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Buchegger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J.-Y. Le</forename><surname>Boudec</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Second Workshop Economics of Peer-to-Peer Systems</title>
		<meeting>Second Workshop Economics of Peer-to-Peer Systems</meeting>
		<imprint>
			<date type="published" when="2004-06">June 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Reputation-Based Framework for High Integrity Sensor Networks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ganeriwal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">B</forename><surname>Srivastava</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM Workshop Security of Ad Hoc and Sensor Networks (SASN &apos;04)</title>
		<meeting>ACM Workshop Security of Ad Hoc and Sensor Networks (SASN &apos;04)</meeting>
		<imprint>
			<date type="published" when="2004-10">Oct. 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><surname>Gelman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">B</forename><surname>Carlin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">S</forename><surname>Stern</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">B</forename><surname>Rubin</surname></persName>
		</author>
		<title level="m">Bayesian Data Analysis</title>
		<imprint>
			<publisher>Chapman &amp; Hall/CRC</publisher>
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
	<note>first ed.</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Chord: A Scalable Peer-to-Peer Lookup Service for Internet Applications</title>
		<author>
			<persName><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Morris</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Karger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Kaashoek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Balakrishnan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM Special Interest Group Data Comm. (SIGCOMM &apos;01)</title>
		<meeting>ACM Special Interest Group Data Comm. (SIGCOMM &apos;01)</meeting>
		<imprint>
			<date type="published" when="2001-08">Aug. 2001</date>
			<biblScope unit="page" from="149" to="160" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Mining Distance-Based Outliers in Near Linear Time with Randomization and a Simple Pruning Rule</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">D</forename><surname>Bay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Schwabacher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGKDD Int&apos;l Conf. Knowledge Discovery and Data Mining</title>
		<meeting>ACM SIGKDD Int&apos;l Conf. Knowledge Discovery and Data Mining</meeting>
		<imprint>
			<date type="published" when="2003-08">Aug. 2003</date>
			<biblScope unit="page" from="29" to="38" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">HMAC: Keyed-Hashing for Message Authentication, IETF RFC 2104</title>
		<author>
			<persName><forename type="first">H</forename><surname>Krawczyk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Bellare</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Canetti</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997-02">Feb. 1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">The Transport Layer Security (TLS) Protocol, IETF RFC 4346</title>
		<author>
			<persName><forename type="first">T</forename><surname>Dierks</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Rescorla</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006-04">Apr. 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
	</analytic>
	<monogr>
		<title level="m">Federal Information Processing Standards Publication 180-1</title>
		<imprint>
			<date type="published" when="1995-04">Apr. 1995</date>
		</imprint>
		<respStmt>
			<orgName>Digital Hash Standard</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Load Balancing in Dynamic Structured p2p Systems</title>
		<author>
			<persName><forename type="first">B</forename><surname>Godfrey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Lakshminarayanan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Surana</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Karp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE INFOCOM &apos;04</title>
		<meeting>IEEE INFOCOM &apos;04</meeting>
		<imprint>
			<date type="published" when="2004-03">Mar. 2004</date>
			<biblScope unit="page" from="2253" to="2262" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Outlier Mining in Large High-Dimensional Data Sets</title>
		<author>
			<persName><forename type="first">F</forename><surname>Angiulli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Pizzuti</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Knowledge Data Eng</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="203" to="215" />
			<date type="published" when="2005-02">Feb. 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">A Secure Incentive Protocol for Mobile Ad Hoc Networks</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Lou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Fang</surname></persName>
		</author>
		<idno type="DOI">10.1007/s11276-006-6220-3</idno>
		<ptr target="http://dx.doi.org/10.1007/s11276-006-6220-3" />
	</analytic>
	<monogr>
		<title level="m">Wireless Networks</title>
		<imprint/>
	</monogr>
	<note>to appear, available online</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">The Sybil Attack</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Douceur</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. First Int&apos;l Workshop Peer-to-Peer Systems (IPTPS &apos;02)</title>
		<meeting>First Int&apos;l Workshop Peer-to-Peer Systems (IPTPS &apos;02)</meeting>
		<imprint>
			<date type="published" when="2002-03">Mar. 2002</date>
			<biblScope unit="page" from="251" to="260" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">CAPTCHA: Using Hard AI Problems for Security</title>
		<author>
			<persName><forename type="first">L</forename><surname>Von Ahn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Blum</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">J</forename><surname>Hopper</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Langford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Int&apos;l Conf. Theory and Applications of Cryptology (EUROCRYPT &apos;03)</title>
		<meeting>Int&apos;l Conf. Theory and Applications of Cryptology (EUROCRYPT &apos;03)</meeting>
		<imprint>
			<date type="published" when="2003-05">May 2003</date>
			<biblScope unit="page" from="294" to="311" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Trust among Strangers in Internet Transactions: Empirical Analysis of Ebay&apos;s Reputation System</title>
		<author>
			<persName><forename type="first">P</forename><surname>Resnick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Zeckhauser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The Economics of the Internet and E-Commerce</title>
		<editor>
			<persName><forename type="first">M</forename><forename type="middle">R</forename><surname>Baye</surname></persName>
		</editor>
		<imprint>
			<publisher>Elsevier Science</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="volume">11</biblScope>
		</imprint>
	</monogr>
	<note>Applied Microeconomics</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Filtering Out Unfair Ratings in Bayesian Reputation Systems</title>
		<author>
			<persName><forename type="first">A</forename><surname>Whitby</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Josang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Indulska</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Icfaian J. Management Research</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="48" to="64" />
			<date type="published" when="2005-02">Feb. 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Pinocchio: Incentives for Honest Participation in Distributed Trust Management</title>
		<author>
			<persName><forename type="first">A</forename><surname>Fernandes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Kotsovinos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Dragovic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Int&apos;l Conf. Trust Management (iTrust &apos;04)</title>
		<meeting>Int&apos;l Conf. Trust Management (iTrust &apos;04)</meeting>
		<imprint>
			<date type="published" when="2004-03">Mar. 2004</date>
			<biblScope unit="page" from="63" to="77" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Service Differentiation in Peer-to-Peer Networks Utilizing Reputations</title>
		<author>
			<persName><forename type="first">M</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ammar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proc. ACM Fifth Int&apos;l Workshop Networked Group Comm</title>
		<imprint>
			<date type="published" when="2003-09">Sept. 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">A Reputation-Based Approach for Choosing Reliable Resources in Peer-to-Peer Networks</title>
		<author>
			<persName><forename type="first">E</forename><surname>Damiani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Di Vimercati</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Paraboschi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Samarati</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Violante</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM Conf. Computer Comm. Security (CCS &apos;02)</title>
		<meeting>ACM Conf. Computer Comm. Security (CCS &apos;02)</meeting>
		<imprint>
			<date type="published" when="2002-11">Nov. 2002</date>
			<biblScope unit="page" from="207" to="216" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Planetlab: An Overlay Testbed for Broad-Coverage Services</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">N</forename><surname>Chun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">E</forename><surname>Culler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Roscoe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">C</forename><surname>Bavier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">L</forename><surname>Peterson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Wawrzoniak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Bowman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proc. ACM SIGCOMM Computer Comm. Rev</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="3" to="12" />
			<date type="published" when="2003-07">July 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Identify-Based Encryption from the Weil Pairing</title>
		<author>
			<persName><forename type="first">D</forename><surname>Boneh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Franklin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Int&apos;l Cryptology Conf. (CRYPTO &apos;01)</title>
		<meeting>Int&apos;l Cryptology Conf. (CRYPTO &apos;01)</meeting>
		<imprint>
			<date type="published" when="2001-08">Aug. 2001</date>
			<biblScope unit="page" from="213" to="229" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Efficient Algorithms for Pairing-Based Cryptosystems</title>
		<author>
			<persName><forename type="first">P</forename><surname>Barreto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Bynn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Scott</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Int&apos;l Cryptology Conf. (CRYPTO &apos;02)</title>
		<meeting>Int&apos;l Cryptology Conf. (CRYPTO &apos;02)</meeting>
		<imprint>
			<date type="published" when="2002-08">Aug. 2002</date>
			<biblScope unit="page" from="354" to="368" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
