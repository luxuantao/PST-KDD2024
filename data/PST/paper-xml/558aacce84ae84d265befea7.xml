<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Supervisory Control of Hybrid Systems</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Xenofon</forename><forename type="middle">D</forename><surname>Koutsoukos</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Electrical Engineering</orgName>
								<orgName type="institution">University of Notre Dame</orgName>
								<address>
									<postCode>46556</postCode>
									<settlement>Notre Dame</settlement>
									<region>IN</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">Harris Corporation</orgName>
								<address>
									<postCode>32902</postCode>
									<settlement>Melbourne</settlement>
									<region>FL</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><roleName>FELLOW, IEEE</roleName><forename type="first">Panos</forename><forename type="middle">J</forename><surname>Antsaklis</surname></persName>
							<email>antsaklis.1@nd.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Electrical Engineering</orgName>
								<orgName type="institution">University of Notre Dame</orgName>
								<address>
									<postCode>46556</postCode>
									<settlement>Notre Dame</settlement>
									<region>IN</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">Harris Corporation</orgName>
								<address>
									<postCode>32902</postCode>
									<settlement>Melbourne</settlement>
									<region>FL</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><roleName>AND</roleName><forename type="first">James</forename><forename type="middle">A</forename><surname>Stiver</surname></persName>
							<email>jstiver@harris.com</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Electrical Engineering</orgName>
								<orgName type="institution">University of Notre Dame</orgName>
								<address>
									<postCode>46556</postCode>
									<settlement>Notre Dame</settlement>
									<region>IN</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><roleName>MEMBER, IEEE</roleName><forename type="first">Michael</forename><forename type="middle">D</forename><surname>Lemmon</surname></persName>
							<email>lemmon@maddog.ee.nd.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Electrical Engineering</orgName>
								<orgName type="institution">University of Notre Dame</orgName>
								<address>
									<postCode>46556</postCode>
									<settlement>Notre Dame</settlement>
									<region>IN</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">Harris Corporation</orgName>
								<address>
									<postCode>32902</postCode>
									<settlement>Melbourne</settlement>
									<region>FL</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Supervisory Control of Hybrid Systems</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">3BBB8F6BF11FC04083C8BBA490061A21</idno>
					<note type="submission">received October 29, 1999; revised March 28, 2000.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T11:02+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Controllability</term>
					<term>hybrid systems</term>
					<term>language theoretic framework</term>
					<term>natural invariants</term>
					<term>nondeterministic finite automata</term>
					<term>supervisory control</term>
					<term>transition stability</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>In this paper, the supervisory control of hybrid systems is introduced and discussed at length. Such control systems typically arise in the computer control of continuous processes, for example, in manufacturing and chemical processes, in transportation systems, and in communication networks. A functional architecture of hybrid control systems consisting of a continuous plant, a discrete-event controller, and an interface is used to introduce and describe analysis and synthesis concepts and approaches. Our approach highlights the interaction between the continuous and discrete dynamics, which is the cornerstone of any hybrid system study. Discrete abstractions are used to approximate the continuous plant. Properties of the discrete abstractions to be appropriate representations of the continuous plant are presented, and important concepts such as determinism and controllability are discussed. Supervisory control design methodologies are presented to satisfy control specifications described by formal languages. Several examples are used throughout the paper to illustrate our approach.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Hybrid dynamical systems are characterized by interacting continuous and discrete dynamics (see, e.g., <ref type="bibr" target="#b9">[11]</ref> and <ref type="bibr" target="#b8">[10]</ref> and the guest editor's introduction in this special issue). Hybrid control systems typically arise from computer-aided control of continuous processes, e.g., in manufacturing and chemical processes, in transportation systems, and in communication networks. The study of hybrid control systems is essential in designing supervisory controllers for continuous systems, and it is central in designing intelligent control systems with a high degree of autonomy (see, e.g., <ref type="bibr" target="#b12">[14]</ref>, <ref type="bibr" target="#b10">[12]</ref>, <ref type="bibr" target="#b11">[13]</ref>, <ref type="bibr" target="#b2">[3]</ref>, and <ref type="bibr" target="#b3">[4]</ref>). Hybrid system analysis and controller synthesis techniques may provide efficient approaches for the design and verification of complex engineering systems.</p><p>In this paper, the supervisory control of hybrid systems is introduced and discussed at length. The simplest example of a supervisory controller is perhaps the thermostat that regulates the temperature in our homes. The controller is really a switching mechanism that interacts with the continuous dynamics of the furnace to counteract the heat losses, so as to keep the temperature within a desirable range. The thermostat is further discussed in Section II-B. The type of supervisory control problems that is of interest here arises whenever a continuous system is to be controlled by a discrete process such as a switching mechanism or a digital computer program. Controllers of this type are being used to control many physical processes. Examples include the operation of chemical plants-start-up and shutdown procedures, fail-safe mechanisms, and control during regular operation by switching to different operating modes. They are also used to coordinate multiple interacting robots, to control manufacturing processes, and to coordinate the operation of autonomous vehicles.</p><p>A convenient way to represent such hybrid control systems is shown in Fig. <ref type="figure" target="#fig_0">1</ref>. The continuous process to be controlled, together with any continuous controllers, is identified as the "Plant" and is typically described by differential/difference equations. The "Controller" includes a discrete decision process that is typically a discrete-event system described, e.g., by a finite automaton. The "Interface" makes it possible for these different processes to communicate with each other. This control framework is quite flexible and can describe modern engineering systems where a computer process is used to control and coordinate several physical processes over a computer network. It can also describe a switching control system where a continuous plant is controlled by different continuous controllers over a number of operating regions. It should be noted that the representation of Fig. <ref type="figure" target="#fig_0">1</ref> is a functional one that is convenient for the mathematical study of such hybrid systems. In certain systems, Fig. <ref type="figure" target="#fig_0">1</ref> represents the actual control architecture, and the controller, interface, and plant can be identified in a natural way. In other systems, however, such separation is not so clear, and in that case, this representation is used primarily to study the system and identify its properties rather than to implement any control strategies. There are hybrid systems for which it may not be possible to separate the continuous from the discrete part in a natural way. However, a description as in Fig. <ref type="figure" target="#fig_0">1</ref> may be useful in analysis, and it may lead to a better understanding of important properties related to the interface of continuous and discrete dynamics.</p><p>Using the supervisory control framework as illustrated in Fig. <ref type="figure" target="#fig_0">1</ref>, it has been possible to design discrete-event controllers for hybrid systems. These controllers are based on discrete abstractions of the continuous dynamics. Applications have been primarily in the chemical process industry and include control of distillation columns and batch processes. The appeal of this approach is that it generalizes well-known concepts from digital control design. Note that this connection to digital control is described in Section IV-C. One of the main characteristics of the supervisory control approach has been the emphasis and explicit identification of the interface issues between the continuous and discrete dynamics. These interface issues are the cornerstone of any hybrid system study. The decision of how detailed a discrete abstraction should be is related to the fundamental question of how much information is needed by the controller to attain particular control goals. Note that the discrete-event plant models derived via discrete abstractions are typically nondeterministic, and this leads to significant difficulties in controlling hybrid systems. Those issues that were originally identified in a supervisory control framework have affected many different approaches to hybrid control systems that are discussed in this issue.</p><p>The types of problems that have been addressed by existing methods in supervisory control of hybrid systems are those with control specifications that can be described by formal languages accepted by finite automata, which approximate the continuous plant. Examples include safety problems, where the controller guarantees that the plant will not enter an unsafe operating region, e.g., guaranteeing that two interacting robots will not collide. Another example is reachability problems, where the controller drives the plant from an initial operating region or state to a desired one; this is the case, e.g., in the start-up procedure in a chemical plant. Note that this supervisory control framework is based on a logical approach for hybrid systems and does not directly address time issues. The emphasis is on the logical ordering of sequences of events, e.g., in a start-up procedure rather than on time constraints for an event to take place within a particular time window. However, certain time issues can be addressed using this approach by including a clock to be part of the continuous dynamics of the plant. This is done to describe digital control in a hybrid system framework, and details can be found in Section IV-C. It should be noted that the supervisory control approach does not intend to address problems that involve continuous controls, as it has been assumed that any continuous control action has already been considered and is included in the plant of Fig. <ref type="figure" target="#fig_0">1</ref>. It should also be noted that this approach does not address jumps in the continuous state that may occur when certain state variables are discontinuously reset. However, it includes switches where, typically, there are no jumps in the state value. There is, however, a large class of important engineering problems that can be solved using the supervisory control approach described in this paper.</p><p>In general, a great amount of research work has already been done in the hybrid systems area during the past decade (see, e.g., <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b1">[2]</ref>, [7], <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b9">[11]</ref>, <ref type="bibr" target="#b8">[10]</ref>), and in the many papers that have appeared in major decision and control conference proceedings, as well as the papers in this special issue. Several different mathematical paradigms have been used for modeling hybrid systems. In broad terms, the models differ with respect to the emphasis on or the complexity of the continuous and discrete dynamics. On one end of the spectrum there are equational models that include discontinuities such as switchings and jumps. Typically, these models are used in order to extend ideas from continuous systems and study traditional control problems such as stability, robustness, and optimal control. Some examples of such systems are discussed in <ref type="bibr" target="#b44">[45]</ref>, <ref type="bibr" target="#b41">[42]</ref>, <ref type="bibr" target="#b69">[70]</ref>, and in this special issue. Switched systems consisting of a family of continuous subsystems and a rule that orchestrates the switching between them is an important class of hybrid dynamical systems in this category (see <ref type="bibr" target="#b37">[38]</ref> for a survey of recent developments regarding the stability and design of switched systems). On the other end of the spectrum, there are computer science models that are mainly used to describe the behavior of real-time embedded systems. Models of this type are collectively known as hybrid automata <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b40">[41]</ref>, <ref type="bibr" target="#b22">[24]</ref>. Based on the type of the continuous dynamics they can represent, there are several variations of hybrid automata such as timed, rectangular, linear, and nonlinear hybrid automata. Hybrid system models that are based on Petri nets instead of finite automata have also been proposed <ref type="bibr" target="#b21">[23]</ref>, <ref type="bibr" target="#b30">[31]</ref>, <ref type="bibr" target="#b19">[21]</ref>. There are additional models spanning the rest of the spectrum that combine concepts from continuous control and discrete event systems. A survey of different models and methodologies can be found in <ref type="bibr" target="#b7">[9]</ref>. Finally, a unified hybrid system model and a formal comparison between models has been discussed in <ref type="bibr" target="#b15">[17]</ref>.</p><p>The work described in this paper is based on and represents extensions of developments reported in <ref type="bibr" target="#b59">[60]</ref>, <ref type="bibr" target="#b13">[15]</ref>, <ref type="bibr" target="#b62">[63]</ref>, <ref type="bibr" target="#b61">[62]</ref>, <ref type="bibr" target="#b63">[64]</ref>, and <ref type="bibr" target="#b64">[65]</ref>. Similar approaches based on approximations of the continuous plant model by a discrete event system have also been proposed in <ref type="bibr" target="#b46">[47]</ref>, <ref type="bibr" target="#b55">[56]</ref>, <ref type="bibr" target="#b18">[20]</ref>, and <ref type="bibr" target="#b39">[40]</ref>. Some important characteristics of these approaches are briefly discussed in Section II-D. A related area is hierarchical control of hybrid systems where a hierarchical structure is imposed on the system architecture to reduce complexity <ref type="bibr" target="#b16">[18]</ref>, <ref type="bibr" target="#b51">[52]</ref>. The design is based on the notion of hierarchical consistency, which ensures that the control objectives are satisfied by the precise models at the lower levels, although the design has been carried out at the higher levels of the hierarchy using coarse models. Discrete abstractions of continuous systems in finite quotient spaces have also been used to study formal verification and decidability of hybrid systems in <ref type="bibr" target="#b32">[33]</ref> and <ref type="bibr" target="#b33">[34]</ref>.</p><p>This paper is organized as follows. Modeling of hybrid systems in the proposed supervisory control framework is described in Section II. The properties of the discrete abstractions of the continuous plant are discussed in Section III. Methodologies for the design of the interface are presented in Section IV. More specifically, a methodology to design the partition of the continuous state space based on the natural invariants of the plant is presented in Section IV-A. Stability of transitions in the discrete event system (DES) plant with respect to variations in the initial state of the continuous plant is discussed in Section IV-B. The relation of the supervisory control framework of hybrid systems with digital control design is also described in Section IV. A language theoretic framework is used to describe performance specifications for hybrid systems and the problem of supervisory control design for hybrid systems is formulated in Section V-A. The notion of controllability for the languages generated by the abstracting DES plant model is defined and a methodology for supervisory control design is presented in Section V-B. The design methodology is illustrated using several examples, including a distillation column and a robotic manufacturing system. Finally, some concluding remarks are included in Section VI.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. MODELING HYBRID SYSTEMS</head><p>The hybrid control systems of interest here consist of a continuous (state, variable) system to be controlled, also called the plant, and a discrete event controller connected to the plant via an interface in a feedback configuration. It is generally assumed that the dynamic behavior of the plant is governed by a set of known nonlinear ordinary differential equations. In the model shown in Fig. <ref type="figure" target="#fig_0">1</ref>, the plant contains all continuous components of the hybrid control system, such as any conventional continuous controller that may have been developed, a clock if time and synchronous operations are to be modeled, and so on. The controller is an event-driven, asynchronous DES, described here by a finite-state automaton. The hybrid control system also contains an interface that provides the means for communication between the continuous plant and the DES controller.</p><p>The interface plays a key role in determining the dynamic behavior of the hybrid control system. Here, the interface has been chosen to be simply a partitioning of the state space (see Fig. <ref type="figure" target="#fig_1">2</ref>), and this is done without loss of generality. If memory is necessary to derive an effective control law, it is included in the DES controller and not in the interface. Also, the piecewise continuous command signal issued by the interface is simply a staircase signal as shown in Fig. <ref type="figure" target="#fig_2">3</ref>, not unlike the output of a zero-order hold in a digital control system. Note that signals such as ramps, sinusoids, etc., can be generated if desired by including an appropriate continuous system at (the input of) the plant. The simple interface used in the model allows the analysis of properties such as controllability, stability, and determinism. More important, it enables the development of controller design methodologies. The simplicity of the interface with the resulting benefits in identifying central issues and concepts in hybrid control systems is perhaps the main characteristic of the approach.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Hybrid System Model</head><p>In this section, we present our mathematical model for supervisory hybrid control systems shown in Fig. <ref type="figure" target="#fig_0">1</ref>. The description of the interface is done very carefully in order to take into consideration important phenomena such as chattering, delays in switching, etc., so Sections II-A and II-B are rather technical by necessity. The modeling approach is illustrated via two simple examples in this section. A distillation column and a robotic manufacturing example may be found in Section V.</p><p>1) Continuous Plant: The plant is in general a nonlinear, time-invariant system represented by a set of ordinary differential equations <ref type="bibr" target="#b0">(1)</ref> where and are the state and input vectors, respectively, and , , with some time interval. For each fixed , the function is continuous in and meets the conditions for existence and uniqueness of solutions for initial states . Note that the plant input and state are continuous-time vector-valued signals. Boldface letters are used here to denote vectors and vector-valued signals.</p><p>The representation of the plant is quite general and can be used to describe a large class of systems that includes time-invariant nonlinear systems and switching systems. For example, a linear switching system consisting of subsystems can be described by where , , , and , where implies that the system is actuated at time .</p><p>2) Controller: The controller (or supervisor) is a discrete event system that is modeled as a deterministic finite automaton <ref type="bibr" target="#b24">[26]</ref>. This automaton is specified by , where is the set of states, is the set of plant symbols, is the set of controller symbols, is the state transition function, and is the output function. The symbols in set are called controller symbols because they are generated by the controller. Likewise, the symbols in set are called plant symbols and are generated based on events in the plant. The action of the controller is described by the equations</p><formula xml:id="formula_0">(2) (3)</formula><p>where , , and . The index is analogous to a time index in that it specifies the order of the symbols in the sequence. The input and output signals associated with the controller are sequences of symbols. Tildes are used to indicate a symbol-valued set or sequence. For example, is the set of plant symbols, also called the alphabet, and is the th symbol of a sequence of plant symbols. Subscripts are also used, e.g., , which denotes the th member of the symbol alphabet .</p><p>3) Interface: The controller and plant cannot communicate directly in a hybrid control system because each utilizes different types of signals. Thus, an interface is required that can convert continuous-time signals to sequences of symbols and vice versa. The way that this conversion is accomplished determines, to a great extent, the nature of the overall hybrid control system. The interface consists of two simple subsystems: the generator and the actuator. The generator issues symbols to the controller and plays the role of a sampler together with a quantizer of the signals analogous to an analog-to-digital converter (sampler) in a digital control system. The actuator injects the appropriate control signal into the plant and is analogous to a digital-to-analog converter (typically a zero-order hold) in a digital control system. The generator and the actuator perform, however, more general functions than their counterparts in a typical digital control system.</p><p>The generator is the subsystem of the interface that converts the continuous-time output (state) of the plant to an asynchronous, symbolic input for the controller. To perform this task, two processes must be in place. First, a triggering mechanism is required, which will determine when a plant symbol should be generated. Second, a process to determine which particular plant symbol should be generated is required. In the generator, the triggering mechanism is based on the idea of plant events. A plant event is simply an occurrence in the plant, an idea borrowed from the field of discrete event systems. In the case of hybrid control, a plant event is defined by specifying a hypersurface that separates the plant's state space into two disjoint sets. The plant event occurs whenever the plant state trajectory crosses this hypersurface. The basis for this definition of a plant event is that an event is considered to be the realization of a specified condition. This condition can be given as an open region of the state space, separated from the remainder of the state space by a hypersurface. If the state crosses the hypersurface into the given open region, the event has occurred. Mathematically, the set of plant events recognized by the generator is determined by a set of smooth functionals, , defined on the state space of the plant. Each functional must satisfy the condition <ref type="bibr" target="#b3">(4)</ref> which ensures that the null space of the functional, , forms an -dimensional smooth hypersurface separating the state space.</p><p>Let the sequence of plant events be denoted by , where means the th plant event was triggered by crossing the hypersurface defined by . Let the sequence of plant event instants be given by , where is the time of the th plant event and</p><p>. A simple way of expressing the conditions for the generation of plant events is by , . In this case, an assumption is made that the derivative is nonzero, i.e., at the crossing. Note, however, that these conditions do not take into account the case where the crossing occurs exactly at a point where . In this case, one must use the following conditions:</p><formula xml:id="formula_1">s.t. , s.t. , ,<label>(5) and (6)</label></formula><p>The first group, (5), contains three conditions: 1) at the time of the plant event the plant state lies on the triggering hypersurface; 2) immediately after the event the plant state lies on the negative (positive) side of the triggering hypersurface; and 3) prior to reaching the triggering hypersurface, the plant state lies on the positive (negative) side. The fourth condition, <ref type="bibr" target="#b5">(6)</ref>, concerns the ordering of the sequences. It requires that plant events be ordered chronologically and simultaneous plant events be ordered according to their number, i.e., the value of . The generation of plant events is illustrated in Fig. <ref type="figure" target="#fig_3">4</ref>.</p><p>A plant event will only cause a plant symbol to be generated if the hypersurface is crossed in a defined direction. The reason for this is that in many applications sensors only detect when a threshold is crossed in one direction, e.g., a thermostat. When the hypersurface is crossed in the opposite direction, the event is silent. For convenience, assume that a null symbol is generated. At each time in the sequence , a plant symbol is generated according to the function . The sequence of plant symbols can now be defined as nonsilent event silent event (7)</p><p>where identifies the hypersurface that was crossed. Alternatively, one could select the interface to generate information bearing symbols when crossed in either direction.</p><p>The actuator converts the sequence of controller symbols to a plant input signal, using the function , as follows: <ref type="bibr" target="#b6">(8)</ref> where is a characteristic function taking on the value of unity over the time interval and zero elsewhere.</p><p>is the time of the th control symbol, which is based on the sequence of plant symbol instants, defined in (5), according to <ref type="bibr" target="#b7">(9)</ref> where is the total delay associated with the interface and controller. Following the occurrence of a plant event, it takes time for a new control policy to be used by the plant. It will be assumed that . The plant input can only take on certain constant values, where each value is associated with a particular controller symbol. Thus, the plant input is a piecewise constant signal, which may change only when a controller symbol occurs.</p><p>In the interface, a delay was introduced. The presence of the delay is necessary for two reasons. First, from a practical point of view, the generator will not be able to detect an event until after the state has actually crossed the hypersurface. Second, if a nonzero delay is not used, it is possible that the differential equation (1) will exhibit solutions that switch between different control policies infinitely many times in a finite time interval. Such behavior does not occur in physical systems. Systems capable of exhibiting such behavior are referred to as Zeno systems. In supervisory hybrid control systems, we want the systems to be non-Zeno. It is, of course, possible for two plant events to occur within the period of a single delay. In such a case, each event will be acted upon, in turn, units of time after it occurs. In this way, the delay can pose a problem for the controller, but it is unavoidable as real systems cannot react instantaneously.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. DES Plant Model</head><p>In a hybrid control system, the plant taken together with the actuator and generator behaves like a discrete event system; it accepts symbolic inputs via the actuator and produces symbolic outputs via the generator (see Fig. <ref type="figure" target="#fig_4">5</ref>). This situation is somewhat analogous to the way a continuous-time plant, equipped with a zero-order hold and a sampler, "looks" like a discrete-time plant. In a hybrid control system, the DES that models the plant, actuator, and generator is called the DES plant model. From the DES controller's point of view, it is the DES plant model that is controlled. In the following, we present a simple example of a thermostat/furnace in order to illustrate the approximation of a continuous plant by a DES plant model. A methodology for the extraction of the DES plant is described after the thermostat/furnace example and is illustrated with additional examples.</p><p>1) Example-Thermostat/Furnace System: The hybrid system in this example consists of a typical thermostat and furnace. Assuming the thermostat is set at 70 F, the system behaves as follows. If the room temperature falls below 70 , the furnace starts and remains on until the room temperature reaches 75 . At 75 , the furnace shuts off. For simplicity, we will assume that when the furnace is on it produces a constant amount of heat per unit time.</p><p>The plant in the thermostat/furnace hybrid control system is made up of the furnace and room. It can be modeled with the following differential equation: <ref type="bibr" target="#b8">(10)</ref> where the plant state is the temperature of the room in degrees Fahrenheit, the input is the voltage on the furnace control circuit, and is the outside temperature. The units for time are minutes. The constants used in this example correspond to particular given data. This model of the furnace is certainly a simplification, but it is adequate for this example.</p><p>The thermostat partitions the state space of the plant with two hypersurfaces as follows:</p><p>(11) The first hypersurface detects when the state exceeds 75, and the second detects when the state falls below 70. The associated functions and are very simple in this case: <ref type="bibr" target="#b11">(13)</ref> So there are two plant symbols: and . The DES controller is shown in Fig. <ref type="figure" target="#fig_5">6</ref>. The output function of the controller is defined as off ( <ref type="formula">14</ref>) on <ref type="bibr" target="#b13">(15)</ref> and the actuator operates as</p><formula xml:id="formula_2">(16)<label>(17)</label></formula><p>The thermostat/heater example has a simple DES plant model, which is useful to illustrate how these models work. Fig. <ref type="figure" target="#fig_6">7</ref> shows the DES plant model for the heater/thermostat. The convention for labeling the arcs is to list the controller symbols, which enable the transition followed by a "/" and then the plant symbols, which can be generated by the transition. Note that two of the transitions are labeled with null symbols . This reflects the fact that nothing actually happens in the system at these transitions. When the controller receives a null symbol, it remains in the same state and reissues the current controller symbol. This is equivalent to the controller's doing nothing, but it serves to keep all the symbolic sequences, , , etc., in phase with each other.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Extraction of the DES Plant Model</head><p>The DES plant model is a nondeterministic finite automaton, which is represented mathematically by . is the set of states, is the set of plant symbols, and is the set of control symbols. is the state transition function. For a given DES plant state and a given control symbol, it specifies a set of possible new DES plant states. The output function, , maps the previous and current states to a set of plant symbols. Note that the DES plant model is a nondeterministic automaton and the state transition function  is defined as a mapping from to the power set of , since for a given state and input symbol the next state is not uniquely defined. The output function is defined similarly.</p><p>The set of DES plant model states is based upon the set of hypersurfaces realized in the generator. Each open region in the state space of the plant, bounded by hypersurfaces, is associated with a state of the DES plant. Whenever a plant event occurs, there is a state transition in the DES plant. Stating this more rigorously, an equivalence relation, , can be defined on the set as follows:</p><formula xml:id="formula_3">iff (<label>18</label></formula><formula xml:id="formula_4">)</formula><p>Each of the equivalence classes of this relation is associated with a unique DES plant state. Thus, it is convenient to index the set of states with a binary vector such that is the th element of and is associated with the set . The equivalence relation is not defined for states that lie on the hypersurfaces. When the continuous state touches a hypersurface, the DES plant model remains in its previous state until the hypersurface is crossed. Formally, the set of DES plant states is defined as a set of equivalence classes on the state space of the plant.</p><p>The set of DES plant states is defined as follows.</p><p>(</p><formula xml:id="formula_5">)<label>19</label></formula><p>So, for example, the state is defined as and ( <ref type="formula">20</ref>)</p><p>The DES plant state corresponds to the most recently entered region of the plant state space and is defined as follows: <ref type="bibr" target="#b19">(21)</ref> where <ref type="bibr" target="#b20">(22)</ref> The limit must be used here because at exactly , the continuous state will be on a boundary. Note that no plant symbol is generated if the state trajectory moves along the boundaries. Note that problems associated with the boundaries of regions that partition the state space and the continuity of the analog-to-digital maps defined from these partitions have been studied at length in <ref type="bibr" target="#b46">[47]</ref> and <ref type="bibr" target="#b14">[16]</ref>.</p><p>The state of the DES plant model represents how much can be known about the system by observing the plant symbols without actually calculating the trajectories. So after a plant symbol is generated, nothing can be ascertained beyond the resulting region. Now we are in a position to determine the state transition function and the output function .</p><p>Note that two DES plant states , are adjacent at if for all where and are the binary vectors associated with and , respectively, and represents the closure of . When two DES plant states are adjacent at , it means that the regions corresponding to these states are separated by the hypersurface , and the point lies on this hypersurface on the boundary of both regions. Thus, identifies a possible transition point between the regions. The following proposition states that for a given DES plant state and control symbol , a possible successor state is if the stated conditions are met. Assume that for the hypersurfaces defined by , we have that [see comments following ( <ref type="formula" target="#formula_1">5</ref>)].</p><p>Proposition 1: Given a hybrid control system, described by ( <ref type="formula">1</ref>)-( <ref type="formula">9</ref>), with and continuously differentiable, then iff and exist such that following conditions are satisfied:</p><p>• and are adjacent at ;</p><formula xml:id="formula_6">• ; • . Further, if</formula><p>, we also have that . The usefulness of this proposition is that it allows the extraction of a DES automaton model of the continuous plant and interface as illustrated in Fig. <ref type="figure" target="#fig_7">8</ref>. Note that in certain cases, this is a rather straightforward task. For instance, it is known that if a particular region boundary is only crossed in one direction under a given command, then the conditions of the proposition need only be tested at a single point on the boundary. This condition is true for the double integrator example that follows. In general, this may not be the case, but one can restrict the area of interest to an operating region of the plant state space, thus reducing the computations required.</p><p>As stated above, the DES plant model is an approximation of the actual hybrid system. Specifically, the state of the DES plant model is an approximation of the state of the continuous plant. As a result, the future behavior cannot be determined uniquely, in general, from knowledge of the DES plant state. The approach taken here is to incorporate all the possible future behaviors into the DES plant model. From a control point of view, this means that if undesirable behaviors can be eliminated from the DES plant (through appropriate control policies), then these behaviors can likewise be eliminated from the actual system. On the other hand, just because a control policy permits a given behavior in the DES plant, there is no guarantee that the behavior will occur in the actual system. This phenomenon is due to the nondeterminism in the DES plant model and is further discussed in Section III.</p><p>1) Example-Double Integrator: The system consists of a double integrator plant, which is controlled by a discrete event system. A double integrator plant may used as a simple example for satellite control, modeling the relation between the angular position and velocity and the reaction jets. The plant is given by the differential equation <ref type="bibr" target="#b21">(23)</ref> The generator recognizes four plant events:</p><formula xml:id="formula_7">(24) (25)</formula><p>These four plant events are generated when the plant state crosses either the or axis, in a positive or negative direction. Symbols are attached to the plant events as follows:</p><p>(26) <ref type="bibr" target="#b25">(27)</ref> Note that the same symbol can be used to label more than one plant event and that does not necessarily have to depend on the state . In this example, the plant symbol only identifies the axis that was crossed, as illustrated in Fig. <ref type="figure" target="#fig_8">9</ref>.</p><p>We assume that there are two controller symbols, , so the actuator provides two possible inputs to the plant</p><formula xml:id="formula_8">if if . (<label>28</label></formula><formula xml:id="formula_9">)</formula><p>Using Proposition 1, we extract the DES plant for this system, which is shown in Fig. <ref type="figure" target="#fig_9">10</ref>. To illustrate how the DES plant was extracted, start with the DES plant state (i.e., ) and consider whether . and satisfy the conditions of the proposition, showing that indeed . Proceeding in this way, we extract the DES plant model. Proposition 1 is also used to find the plant symbols generated by the transitions. In the sample instance, , there are two possible symbols: and . By convention, the nonsilent symbol takes precedence, so . A controller that drives the state of the double integrator in clockwise circles is designed in Section V-B.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Related Models</head><p>There are supervisory approaches to hybrid control in the literature that are related to the approach described above.  One is the Nerode-Kohn approach to hybrid control systems that is based on automata theory. The model and related work can be found in <ref type="bibr" target="#b46">[47]</ref> and <ref type="bibr" target="#b47">[48]</ref>. This approach is similar to the one described here. The main differences are in the way plant events are generated and the explicit introduction of time as a parameter of the control signals. The plant and controller are represented by interacting nondeterministic sequential automata. The control automaton is a nondeterministic sequential automaton, which has as an infinite input alphabet consisting of sensor measurements and an infinite output alphabet consisting of control laws. The plant is modeled as a nondeterministic sequential automaton, which represents a system given by time-variant ordinary differential equations. The input alphabet of the plant is the infinite alphabet of control laws and the output alphabet of the plant is the infinite alphabet of sensor measurements. The automata interact at times , where the interval between successive times, , can vary. To facilitate analysis, several specializations of the above model are imposed. First, the time between successive plant-controller interactions is required to be constant, i.e., . Second, the plant is assumed to be time-invariant. Third, the control automaton is decomposed into a finite automaton equipped with an interface. The model is shown in Fig. <ref type="figure" target="#fig_10">11</ref>. Here, the control automaton has been separated into three parts: an analog-to-digital converter, an internal control automaton, and a digital-to-analog converter. The internal control automaton is a finite automaton. That means the analog-to-digital converter converts real-number sensor measurements to one of a finite number of input symbols. The digital-to-analog converter maps output symbols to a control law and a duration for which the control law should remain in effect.</p><p>The plant automaton represents an underlying system defined by ordinary differential equations. The plant evolves </p><p>where , and and are the control function and disturbance function, each with domain . A hybrid system is formed by connecting the plant automaton to the control automaton as follows. The output of the controller consists of pairs specifying a duration and a control law for that duration. This makes up the corresponding input to the plant automaton. The output of the plant automaton is connected to the input of the controller automaton.</p><p>The next two approaches are motivated by chemical process control applications and are directly related to our work. Qualitative modeling of linear systems with quantized state measurements has also been considered by Lunze <ref type="bibr" target="#b38">[39]</ref>. The main characteristic of the model is that the partition is predetermined by sensor quantizations. Discrete-time systems of the form <ref type="bibr" target="#b29">(30)</ref> are considered. It is assumed that only quantized state measurements , which represent the qualitative states, are available. The state variables are quantized independently from each other with resolution , according to the equation <ref type="bibr" target="#b30">(31)</ref> where satisfies the relation <ref type="bibr" target="#b31">(32)</ref> Graphically, the state space is partitioned into the rectangular blocks whose edges have the direction of the axes and length as illustrated in Fig. <ref type="figure" target="#fig_11">12</ref>. A nondeterministic automaton is used to describe the qualitative behavior similarly to the hybrid control system model presented earlier in the section. The system is also approximated by a stochastic automaton with the assumption that the initial state is uniformly distributed over the corresponding rectangular region of the state space. More recently, Lunze has considered more general grids in order to derive deterministic discrete-event representations for linear continuous systems <ref type="bibr" target="#b39">[40]</ref>.</p><p>A similar model where the plant state evolves in and the control input and measurement signals are symbolic is considered by Raisch <ref type="bibr" target="#b54">[55]</ref>, <ref type="bibr" target="#b55">[56]</ref>. In addition, the state is affected by real-valued unknown but bounded disturbances. More specifically, the plant is modeled as a nonlinear discrete-time system with state transition function (33) <ref type="bibr" target="#b33">(34)</ref> where</p><p>is the state at time and is the disturbance. The control and measurement symbols are and , respectively, and is the measurement map that converts the state to the corresponding measurement symbol. A requirement imposed on is that it can be solved with respect to the first argument, i.e.,</p><p>. A contribution of this modeling framework is the formulation of a hierarchy of discrete abstractions with respect to the approximation accuracy. The approximation accuracy of the DES plant model can be improved by including past measurements and control signals.</p><p>The state of the DES plant model (approximating automaton) is defined by</p><formula xml:id="formula_11">if if . (<label>35</label></formula><formula xml:id="formula_12">)</formula><p>The approximation accuracy depends on the length of the measurement and control signals and can be adjusted to the specification requirements. An important characteristic of the approach is that the time needed for a transition, which is , is retained in the discrete approximation. The approach has been applied to examples from process control in <ref type="bibr" target="#b53">[54]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. PROPERTIES OF THE DES PLANT MODEL</head><p>In this section, we discuss properties for the DES plant model to be a useful representation of the continuous system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. DES Plant Model as an Approximation</head><p>The DES plant model is an approximation of the actual system and its behavior is an abstraction of the system's behavior. Specifically, the state of the DES plant model is an approximation of the state of the continuous plant. As a result, the future behavior of the actual continuous system cannot be determined uniquely, in general, from knowledge of the DES plant state. The approach taken here is to incorporate all the possible future behaviors into the DES plant model. Thus, we construct a conservative approximation of the behavior of the continuous plant that includes the behavior of the plant, and can be realized by a finite-state machine. Note that different continuous processes may be represented by a DES model. From a control point of view, this means if un- desirable behaviors can be eliminated from the DES plant (through appropriate control policies), then these behaviors will be eliminated from the actual system. On the other hand, just because a control policy permits a given behavior in the DES plant, there is no guarantee that the behavior will occur in the actual system.</p><p>Raisch and coworkers <ref type="bibr" target="#b54">[55]</ref>, <ref type="bibr" target="#b55">[56]</ref> have used a behavioral approach for the representation of dynamical systems in order to formalize the issues related to the approximation accuracy of the discrete abstractions and the effects of the supervisor. We briefly discuss this approach to illustrate the issues related to the approximation of the plant by a DES plant model.</p><p>A dynamical system can be described as a triple with the time axis, the signal space, and</p><p>(the set of all functions ) the behavior <ref type="bibr" target="#b66">[67]</ref>. In our modeling formalism, the behavior of the DES plant model consists of all the pairs of plant and control symbols that the nondeterministic automaton can generate. The time axis represents here the occurrences of events as defined in Section II. A necessary condition for the DES plant model to be a valid approximation of the continuous plant is that the behavior of the continuous plant model is contained in the behavior of the DES plant model, i.e., . Since the controller is represented by the automaton , its behavior can also be described as . The main objective of the controller is to restrict the behavior of the DES plant model in order to specify the control specifications. The specifications can be described by a behavior . Supervisory control of hybrid systems is based on the fact that if undesirable behaviors can be eliminated from the DES plant, then these behaviors can likewise be eliminated from the actual system. This is described formally by the relation <ref type="bibr" target="#b35">(36)</ref> and is depicted in Fig. <ref type="figure" target="#fig_12">13</ref>. The challenge is to find a discrete abstraction with behavior , which is an approximation of the behavior of the continuous system and for which is possible to design a supervisor in order to guarantee that the behavior of the closed-loop system satisfies the specifications . A more accurate approximation of the plant's behavior can be obtained by considering a finer partitioning of the state space for the extraction of the DES plant. A totally ordered set of discrete abstractions for a given system has been presented in <ref type="bibr" target="#b54">[55]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Determinism</head><p>An interesting aspect of the DES plant's behavior is that it is distinctly nondeterministic. This fact is illustrated in Fig. <ref type="figure" target="#fig_13">14</ref>. The figure shows two different trajectories generated by the same control symbol. Both trajectories originate in the same DES plant state . Fig. <ref type="figure" target="#fig_13">14</ref> shows that for a given control symbol, there are at least two possible DES plant states that can be reached from . Nondeterminism in the DES plant therefore arises due to uncertainty in the DES states reached under a controlled transition. Transitions within a DES plant will usually be nondeterministic unless the boundaries of the partition sets are invariant manifolds with respect to the vector fields that describe the continuous plant. More details about such partitions are presented in Section IV. The problem of obtaining deterministic discrete-event representations for specific classes of hybrid systems has been considered in <ref type="bibr" target="#b20">[22]</ref> and <ref type="bibr" target="#b39">[40]</ref>.</p><p>There is an advantage to having a hybrid control system in which the DES plant model is deterministic. It allows the controller to drive the plant state through any desired sequence of regions provided, of course, that the corresponding state transitions exist in the DES plant model. If the DES plant model is not deterministic, this will not always be possible. This is because even if the desired sequence of state transitions exists, the sequence of inputs that achieves it may also permit other sequences of state transitions. Unfortunately, given a continuous-time plant, it may be difficult or even impossible to design an interface that leads to a DES plant model that is deterministic. Fortunately, it is not generally necessary to have a deterministic DES plant model in order to control it. The supervisory control problem for hybrid systems can be formulated and solved when the DES plant model is nondeterministic.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. INTERFACE</head><p>The interface plays a key role in determining the dynamic behavior of the hybrid control system. Many times, the partition of the state space (generator in the interface) is determined by physical constraints and it is fixed and given. Here, we assume that we can select the partition and we focus on specific problems for the interface design. First, we present a methodology to design the partition of the continuous state space based on the natural invariants of the plant. Next, we </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Generator Design</head><p>A methodology is presented <ref type="bibr" target="#b62">[63]</ref>, <ref type="bibr" target="#b63">[64]</ref> to design the interface for a plant described by <ref type="bibr" target="#b36">(37)</ref> where certain smoothness assumptions apply. The approach is based on the natural invariants of <ref type="bibr" target="#b36">(37)</ref>. We assume that the plant is given, the set of available control policies is given, and the control goals are specified as follows. Each control goal for the system is given as a starting set and a target set, each of which is an open subset of the plant state space. To realize the goal, the controller must be able to drive the plant state from anywhere in the starting set to somewhere in the target set using the available control policies. Generally, a system will have multiple control goals.</p><p>We propose the following solution to this interface design problem. For a given target region, identify the states that can be driven to that region by the application of a single control policy. If the starting region is contained within this set of states, the control goal is achievable via a single control policy. If not, then this new set of states can be used as a target region and the process can be repeated. When the regions have been identified, the generator is designed to tell the controller, via plant symbols, which region the plant state is currently in. Note that similar methods based on backward analysis of the dynamics have been discussed in <ref type="bibr" target="#b52">[53]</ref> and <ref type="bibr" target="#b65">[66]</ref>. Computational algorithms for the use of the phase-space geometric description of dynamics have been developed in <ref type="bibr" target="#b70">[71]</ref>.</p><p>To describe the regions mentioned above, we use the concept of the flow <ref type="bibr" target="#b48">[49]</ref>. Let the flow for the plant (1) be given by , where</p><p>The flow represents the state of the plant after an elapsed time of , with an initial state of , and with a constant input of . Since the plant is time invariant, there is no loss of generality when the initial state is defined at . The flow is defined over both positive and negative values of time. The flow can be extended over time using the forward flow function,</p><p>, and the backward flow function, , [ denotes the power set of ], which are defined as follows:</p><p>(39) <ref type="bibr" target="#b39">(40)</ref> The backward and forward flow functions can be defined on an arbitrary set of states in the following natural way: (41) <ref type="bibr" target="#b41">(42)</ref> where</p><p>. For a target region, , is the set of initial states from which the plant can be driven to with the input . In addition, is the set of states that can be reached with input and an initial state in . Note that the backward and forward flow functions applied on the set of states correspond to the precondition and postcondition operators used in verification algorithms of hybrid systems <ref type="bibr" target="#b0">[1]</ref>. Now, a generator design procedure can be described using the backward flow function. For a given starting region and target region , use the following algorithm.</p><p>1. If , stop. 2. Identify the regions, , .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Let . 4. Go to 1).</head><p>There are two problems associated with this algorithm as stated. First, it will not stop if there is no sequence of available control policies that will achieve the control goal, and second, actually identifying the regions given by the flow functions is quite involved. The first issue is related to the adequacy of the available control policies and will not be dealt with here. The second problem will be addressed. The difficulty in identifying a region given by a flow function is integrating over all the points in the target region. Here, we will focus on identifying subsets of , which we call common flow regions. Common flow regions are bounded by invariant manifolds and an exit boundary. The invariant manifolds are used because the state trajectory can neither enter nor leave the common flow region through an invariant manifold. The exit boundary is chosen as the only boundary through which state trajectories leave the common flow region.</p><p>To design the generator, it is necessary to select the set of hypersurfaces, and the associated functions, , described in Section II. These hypersurfaces make up the invariant manifolds and exit boundaries mentioned above, as well as form the boundary for the target region(s). A target region is specified as <ref type="bibr" target="#b42">(43)</ref> where is the index set indicating which hypersurfaces bound the target region. A common flow region is specified as <ref type="bibr" target="#b43">(44)</ref> where is an index set indicating which hypersurfaces form the invariant manifolds bounding and defines the exit boundary for . The goal, of course, is that should include only states whose trajectories lead to the target region. Fig. <ref type="figure" target="#fig_14">15</ref> shows an example of this where and . The target region is surrounded by , and the common flow region lies between and above the exit boundary . Consider the hypersurfaces defined by . These hypersurfaces must first be invariant under the vector field of the given control policy . This can be achieved by choosing them to be integral manifolds of an -dimensional distribution, which is invariant under . An -dimensional distribution is invariant under if it satisfies <ref type="bibr" target="#b44">(45)</ref> where the indicates the Lie bracket. Of the invariant distributions, those that have integral manifolds as we require are exactly those that are involutive (according to Frobenius). This means <ref type="bibr" target="#b45">(46)</ref> Therefore, by identifying the involutive distributions that are invariant under the vector field , we have identified a set of candidate hypersurfaces. For details of these relationships between vector fields and invariant distributions, see <ref type="bibr" target="#b25">[27]</ref>. Since an -dimensional involutive distribution can be defined as the span of vector fields, over each of which it will then be invariant, and the control policy only gives one vector field , there will be more than one family of hypersurfaces that are all invariant under . The set of all invariant hypersurfaces can be found in terms of functionally independent mappings that form the basis for the desired set of functionals . This basis is obtained by solving the characteristic equation <ref type="bibr" target="#b46">(47)</ref> where is the th element of . In the following, the approach for the generator design based on natural invariants is illustrated using the double integrator example. More details can be found in <ref type="bibr" target="#b62">[63]</ref> and <ref type="bibr" target="#b63">[64]</ref>, and the application of the method to a simplified model of an autonomous underwater vehicle can be found in <ref type="bibr" target="#b61">[62]</ref>. A methodology based on natural invariants has also been used in a Petri net framework for modeling and control of hybrid systems in <ref type="bibr" target="#b30">[31]</ref> and <ref type="bibr" target="#b29">[30]</ref>.</p><p>1) Example-Double Integrator: Consider the double integrator example. Suppose we are given the plant <ref type="bibr" target="#b47">(48)</ref> three available control policies (49) and the following control goal: drive the plant state to the interior of the unit circle from any initial point. So the starting set consists of the entire state space, and the target set is <ref type="bibr" target="#b49">(50)</ref> The target set is bounded by the hypersurface given by <ref type="bibr" target="#b50">(51)</ref> The first step is to calculate the invariants that can be used to obtain hypersurfaces. There are three families of invariants, one for each of the three control policies, which can be found by solving the characteristic equation ( <ref type="formula">47</ref>) for the double integrator</p><formula xml:id="formula_14">(52) (53)<label>(54)</label></formula><p>The first hypersurface, , is used to identify the target region. Given the hypersurfaces and the regions of the partition, a controller can be easily designed. Note that our synthesis methodology is described in Section V. Here, we present an intuitive way for the design of the controller. There is only one control goal for this example, and therefore, the entire controller will consist of a single subautomaton. Start by creating a controller state , which is associated with the target region. Two common flow regions, labeled and , were identified that lead to the target region. Then, create two more controller states, and .</p><p>consists of the trajectories that reach the target region under control policy and therefore, ; likewise . Connect to with a transition labeled , which is generated when the plant state crosses to enter the target region. Do the same for . Next, create to go with , and add a transition to labeled . When all the common flow regions have their associated states and transitions, the controller is shown in Fig. <ref type="figure" target="#fig_16">16(c</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Transition Stability</head><p>In this section, logical invariance of the DES plant transitions to variations in the initial continuous state is defined and conditions for inferring "stable" DES plant transitions are presented. For more details, the reader is referred to <ref type="bibr" target="#b35">[36]</ref>. Ideally, the transitions in the DES plant should be unchanged by small perturbations in the state of the continuous plant. The important property is referred to here as transition stability, and it is related to the notion of "structural stability." This section presents a set of sufficient conditions ensuring the stability of transitions in the DES plant with respect to variations in the initial state of the continuous plant. These conditions are based on the Lyapunov stability theory, and hence, the notion of logical stable transitions is clearly related to conventional stability of continuous systems.</p><p>Assume that the partition of the state space is given. Let denote the finite collection of disjoint sets that partition the state space of the continuous plant, and denote the th element as , . The desired behavior of the continuous plant can be described as a desired language for the DES plant model as described in Section V. This is a formal specification on how the plant should transition between elements of . The problem considered here is concerned with conditions that ensure that such transitions occur in a stable manner. DES plant validity can be viewed in terms of the invariance of plant and control event sequences to small perturbations in the state of the continuous plant. An arc of the DES plant represents a transition of the continuous plant's state between two subsets from . The labeling of that by a plant symbol arc represents the symbolic behavior of that transition. A valid DES plant would preserve that labeling under small perturbations of the initial continuous state. This viewpoint is formalized in the following definition of -stability.</p><p>Let be a DES plant model for a hybrid dynamical system. Let and be two vertices in corresponding to the sets and , respectively. Consider the arc labeled with the control symbol and plant symbol . Let be the control vector associated with control symbol through the interface actuator mapping , and denote by the transition operator generated by the differential equation . The arc is transition-stable (or -stable) iff for all , there exists an open neighborhood centered at and a finite time such that the set <ref type="bibr" target="#b65">(66)</ref> is an open subset of and the plant symbol issued during the transition is identical for all transitions starting in and ending in . We consider a special case of nonlinear continuous plant, which is described by the following set of differential equations: <ref type="bibr" target="#b66">(67)</ref> where , is the state vector for the th differential equation, and , are the components of the control vector for the th equation. In this case, the collection of mappings for represents a set of control policies. The control policies of the th differential equation are linearly mixed by the components of the control vector . Such a nonlinear system is often referred to as being "affine" in its control vectors. Under suitable assumptions, it includes the class of nonlinear systems that can be linearized through appropriate feedback.</p><p>Consider a DES plant model of a hybrid system whose continuous plant is affine in its control policies. Consider an arc of the DES plant with control symbol label , and let be its corresponding control vector. Note that a sufficient condition for the transition to be -stable is that all trajectories starting in are attracted to and are repelled by any other elements of . This condition is satisfied provided contains a global attractor for the controlled system and all other , are repellors. These conditions can easily be established by constructing a Lyapunov functional over the state space such that the system is globally stable to . To ensure that all other sets are repelling, it is sufficient to guarantee that there exists Lyapunov functional , for each of these generator sets, which always forces the state trajectory out of the set.</p><p>In order to formulate these sufficient conditions, we use the Lie directional derivative of a functional. Let be a continuous differentiable functional and let be a smooth vector field. Let denote the gradient vector of . The Lie (directional) derivative of , is defined as the inner product of the gradient of with the vector field , . The LaSalle invariance principle <ref type="bibr" target="#b34">[35]</ref> can be used to establish the following sufficient conditions.</p><p>This arc is -stable if there exists a set of continuously differentiable positive definite functionals , , which are zero on a closed proper subset of , , such that for all and . . . <ref type="bibr" target="#b67">(68)</ref> and for all , for and . . .</p><p>The above conditions are clearly not necessary for -stability. For many situations, they may only have to hold in a local sense. Nevertheless, these conditions are very valuable. Dynamical systems are always influenced by unpredicted external disturbances, which may force the plant state off the controlled trajectory. When such disturbances occur, it is desirable that the transition remain "stable." One way to ensure that is to require that the sets of the partition are global attractors and repellors. Therefore, while the above conditions are restrictive, they provide a test that is useful in the face of unmodeled disturbances.</p><p>The sufficient conditions pertain to a single transition arc of the DES plant for a given control symbol. These conditions form a system of linear inequality constraints in the control space of the continuous plant. Feasible points satisfying the inequality system are therefore constant control vectors , which guarantee that the single arc is -stable. By finding the feasible points for each arc in the DES plant, a set of control vectors , associated with the control symbols is obtained. The systematic application of this approach to every arc in a given DES plant can then be used to determine an actuator mapping , which -stabilizes the entire DES plant.</p><p>Deciding the -stability of the entire DES plant can only be done if there exists a numerically efficient method for finding feasible points. One class of algorithms for doing this is the method of centers algorithms <ref type="bibr" target="#b45">[46]</ref>. Method of center algorithms compute a sequence of convex bodies and their centers in such a way that the computed centers converge to a feasible point. Depending on the analytic form of the convex bodies and the centers, different types of algorithms are obtained. A particularly well-known example is the ellipsoid method <ref type="bibr" target="#b45">[46]</ref>. In this algorithm, the convex bodies are ellipsoidal sets containing the set of feasible vectors, and the centers are the geometric centers of these ellipsoids. In <ref type="bibr" target="#b35">[36]</ref>, the ellipsoid method is used as an inductive learning algorithm for inferring -stable interfaces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Digital Control in a Hybrid Framework</head><p>In a digital control system, a continuous-time plant is controlled by a digital computer. The plant output is sampled and quantized to provide the input to the controller, and the control signal is passed through a zero-order hold to provide the plant input. Here, we show that such a digital control system is a special case of a hybrid control system. The more general framework of hybrid control systems is used to discuss problems encountered in digital control such as chattering and limit cycles and to illustrate the connection between hybrid and digital systems. More details can be found in <ref type="bibr" target="#b60">[61]</ref>. Section IV-A presented a method for designing the interface of a hybrid control system using the natural invariants of the system. Here, this method is used as an alternative to the usual quantization technique of digital control. An example illustrates the application of this method to a digital control problem; it also shows the application of a DES controller design approach to digital control.</p><p>A digital control system can be viewed as a special case of a hybrid control system in which the plant, interface, and controller obey certain constraints. In a digital control system, the events are triggered at regular (or, if desired, irregular) intervals of time. This gives rise to sampling in time and requires that there must be a clock present in the system. In digital control, this clock is normally not modeled explicitly, but in our hybrid control framework it will appear as part of the plant. A convenient way to do this is to use a two-state oscillator, such as <ref type="bibr" target="#b69">(70)</ref> where is the clock frequency. If required, can be made a function of the plant input and then the clock frequency can be changed by the controller. To implement the sampling, hypersurfaces of the type <ref type="bibr" target="#b70">(71)</ref> are used, where and are real constants. A single hypersurface with and would model the typical case where the sampling rate is given by . In this case, the partition of the state space looks like a grid. By adding more hypersurfaces, each with its own measurement function , multirate sampling can be modeled.</p><p>When modeling digital control, the measurement function(s) is a quantizer. The value of each state at the sampling instant is truncated or rounded and restricted to the range of values acceptable to the digital controller. For example, a controller implemented on an 8-bit computer might only have the capability to measure a state to 256 possible values. In that case, we might have a set of plant symbols given by ( <ref type="formula">72</ref>) and a measurement function given by trunc modulo (73)</p><p>Quantization of this type will form a grid-like partition of the state space into regions, each associated with the same plant symbol.</p><p>On the other side of the interface, the actuator models a zero-order hold. Controller symbols, representing quantized plant input values, are converted to piecewise constant plant inputs. In an example akin to the one given above, the set of controller symbols is given by (74) and is given by (75) Finally, the controller is an automaton that implements the desired control strategy for the digital controller.</p><p>The designer is free to choose the sampling rate(s) and the quantization level(s) for each state. These choices determine the dimensions of the -dimensional boxes that fill up the state space. What the designer cannot do is change the basic shape of the boxes that form the partition; in digital control with sampling in time they will always be rectangular. On the other hand, most hybrid control design possibilities cannot be realized in digital control because of the need for a grid-like partition.</p><p>In digital control, the problem of choosing the appropriate control policy is many times handled by approximating an existing continuous control law. Since state-space trajectories are not generally straight lines, they will not flow "neatly" through the grid-like partition of the digital control system. Trajectories in a given region of the partition will inevitably leave that region through more than one of the region's boundaries. This gives rise to nondeterministic behavior in the DES plant. The problem cannot be solved by changing the size of the region because it will still have the same grid-like shape. In hybrid control, the strategy is to shape the regions according to the system trajectories so as to control which boundaries the trajectories can pass through. This is not possible with a digital control system. Fig. <ref type="figure" target="#fig_18">17</ref> shows an example of the added flexibility afforded by hybrid control over standard digital control.</p><p>Since the problems encountered in digital control are largely a result of the quantization, it is reasonable to try to solve them by changing the way the quantization is done. The usual quantization forms a grid-like partition of the state space, forming an array of -dimensional boxes-each with its own symbol. The problem is that these quantization levels may have no relationship to the state trajectories that flow through them. To reduce this problem, the grid-like partition can be replaced with a partition based on the natural invariants of the system. The following illustrating example explores the use of invariants for quantization.</p><p>1) Example-Double Integrator: In this example, we have a double integrator that we wish to stabilize. The interface is designed to quantize based on system invariants and the controller is again designed with methods from hybrid control. We start with a double integrator plant (76)</p><p>The natural invariants of the system are to be used in the quantization. Three possible inputs are used to control the double integrator , and they are used to compute three invariant functions for the system. The invariant function associated with the input 2 is computed as follows. The control policy is  The controller for this case is</p><formula xml:id="formula_16">if if otherwise.<label>(84)</label></formula><p>Fig. <ref type="figure" target="#fig_19">18</ref>(b) shows a state trajectory for this system. Note that chattering has been avoided and the controller easily follows from the interface design by identifying the hypersurfaces that will drive the state to the origin.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. SUPERVISORY CONTROL DESIGN</head><p>In conventional control, theoretic measures of system performance are frequently taken to be norms ("size") of some important signals within the control system. Unfortunately, norm-based performance measures may be inappropriate for supervised systems, since many times the space of interest is not metric and such measures do not exist. A different way to express performance of a system is needed that, for example, may be used to supervise the start-up procedure of a process plant. In the following, we use a language theoretic framework to describe performance specifications for hybrid systems, and we formulate the supervisory control problems for hybrid systems. We also use the language generated by the DES plant to examine the controllability of the hybrid control system, we present a methodology for controller design, and we illustrate the framework using several examples.</p><p>Once the DES plant model of a hybrid system has been extracted, a supervisor can be designed using controller synthesis techniques based on discrete-event systems. Our work builds upon the framework of supervisory control theory initiated by Ramadge and Wonham <ref type="bibr" target="#b56">[57]</ref>, <ref type="bibr" target="#b57">[58]</ref>, <ref type="bibr" target="#b67">[68]</ref>. Here, we adapt several of those results and apply them to the DES plant model obtained from a hybrid control system. The main differences between the Ramadge-Wonham framework and the DES plant models of the hybrid control framework are the nondeterminism of the plant and the inability to disable plant events individually. These differences and an extension of the supervisor synthesis algorithm in <ref type="bibr" target="#b56">[57]</ref> to the design of hybrid control systems are discussed in Section V-B. The logical DES approach to the design of hybrid control systems has been described in <ref type="bibr" target="#b64">[65]</ref>. Note that more details for supervisory control of nondeterministic discrete-event systems can be found, e.g., in <ref type="bibr" target="#b23">[25]</ref>, <ref type="bibr" target="#b31">[32]</ref>, and <ref type="bibr" target="#b49">[50]</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. The Supervisory Control Problem for Hybrid Systems</head><p>The objective is to develop methodologies that, given the system description and performance specifications, extract discrete-event controllers that supervise the plant to guarantee that these specifications are satisfied. The symbolic behavior of the plant is explicitly seen from the DES controller's perspective. From the controller's perspective, it is the DES plant model that is controlled. The state symbol sequence represents the symbolic evolution of the continuous plant over the event partition. In order to represent the evolution of the DES plant model, we introduce some notions from the theory of discrete event systems (see, e.g., <ref type="bibr" target="#b57">[58]</ref> and <ref type="bibr" target="#b17">[19]</ref>) that are necessary for the presentation of the design approach.</p><p>Consider the set of all plant symbols , which is also called the alphabet. This set consists of all the plant symbols that can possibly be generated by the DES plant model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Denote by</head><p>the set of all finite strings formed by concatenation of symbols from the alphabet, including the empty string ; the operation is called the Kleene closure. A language is formally defined as a subset of . The usual set operations, such as union, intersection, difference, and complement (with respect to ), are applicable to languages. In addition, the prefix-closure of , denoted by , is defined as the set of all prefixes of strings in . The language is said to be prefix-closed if all the prefixes of the language are also in , or equivalently, if . In our approach, the DES plant is represented as a nondeterministic finite automaton. The behavior of the DES plant is represented by the language . This is the set of all finite sequences of symbols the DES plant can generate. Since the language is generated by a finite automaton, it is known to be prefix-closed and regular <ref type="bibr" target="#b24">[26]</ref>.</p><p>The plant symbols , which are in the language of a given DES plant model, are defined as follows. Given a finite sequence of plant symbols defined over the set , then if there exists and such that the following conditions hold:</p><p>(85) (86)</p><p>Since each specification can be described by a language consisting of symbols generated by the DES plant model, the formal description of the performance specifications depends directly on the selected extraction of the DES plant.</p><p>In the supervisory control paradigm, the objective of the controller is to restrict the behavior of a given uncontrolled DES in order to satisfy prescribed specifications on the languages generated by the system. Performance specifications can be viewed as requiring that certain undesirable sequences of events are not permitted to occur, while at the same time, certain other desirable sequences are permitted. The uncontrolled DES plant model is assumed to generate "illegal behavior" that should be avoided by appropriate control action. Each specification can be described by a language consisting of symbols generated by the DES plant model. The "legal behavior" is characterized as a subset of the DES language after accounting for all the performance specifications that are imposed on the system.</p><p>The plant symbols in the DES plant are divided into two sets, those that are controllable and those that are uncontrollable:</p><p>. A plant symbol's being controllable means that the supervisor can prevent it from being issued by the DES plant model. When the supervisor prevents a controllable plant symbol from being issued, the plant symbol is said to be disabled. We assume that the state transition function of the DES plant is controlled by an external agent in the sense that the controllable events can be disabled by a supervisor.</p><p>Before we present the extension of the logical DES framework <ref type="bibr" target="#b57">[58]</ref> to hybrid control systems, the important differences must be discussed. The Ramadge-Wonham (RW) model consists of two interacting DESs, the generator and the supervisor. The RW generator is analogous to our DES plant, and the RW supervisor corresponds to our DES controller. In the RW framework, the plant symbols can be individually disabled, at any time and in any combination, by a command from the supervisor, while the plant symbols in can never be disabled. This is in contrast to our DES plant, where each command (controller symbol) from the DES controller disables a particular subset of determined by the complement of the set given by the transition function . The particular subset of that is disabled by a given controller symbol depends on the state transition function and output function of the DES plant model. In addition, there is no guarantee that any arbitrary subset of can be disabled while the other plant symbols remain enabled. The inability to disable plant symbols individually is what differentiates the DES plant model from the automata of earlier frameworks.</p><p>The DES plant model is connected in the feedback loop to a supervisor . For each possible string of plant symbols generated by the DES plant model, the supervisor specifies the control symbol to be applied. Each control symbol, in turn, disables a particular set of plant symbols in order to prevent undesirable sequences of events. Therefore, the supervisor (or controller) can be described as a function <ref type="bibr">(87)</ref> specifying the control action to be taken for each possible string. Note that the control always contains the set , since the supervisor never disables an uncontrollable event. The language generated by the closed-loop system is defined recursively as follows:</p><p>1) ; 2) iff and and .</p><p>Given the DES plant model and desired language , the objective in the supervisory control problem for hybrid systems is to build a supervisor such that . In addition, it is required that the supervisor is maximally permissive, meaning that the language is as large as possible. In this paper, we are interested in the case when the languages and are regular. In this case, the supervisor can be realized as a deterministic finite automaton in a straightforward manner, as shown in the examples of Section V-B. Note that this case is of special interest, since the supervisor has an implementable finite representation. For more details on the realization of supervisors, see, e.g., <ref type="bibr" target="#b17">[19]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Controllability and Supervisor Design</head><p>The basic problem in supervisory control design of hybrid systems is to modify the behavior of the DES plant model so that it satisfies the specifications described by a desired language . Therefore, the main question is if the language can be achieved by supervision of the DES plant model. This question is directly related to the controllability of the language . More generally, the concept of controllability of a language is used to identify all the possible closed-loop behaviors that can be achieved by control given a DES with language . Next, we discuss controllability for DES systems <ref type="bibr" target="#b57">[58]</ref>, and then we present a definition of controllable languages for DES plant models extracted from hybrid dynamical systems.</p><p>Given a discrete-event system described by a finite automaton, it is possible to determine whether a desired language can be achieved by supervision; i.e., whether it is pos-sible to design a controller such that the system will be restricted to some target language . Such a controller can be designed if is prefix closed and satisfies the following condition:</p><p>(88) When (88) is true, the desired language is said to be controllable, and provided is prefix-closed, a controller can be designed that will restrict the system to the language . This condition is very intuitive. It requires that if an uncontrollable symbol occurs after the generator has produced a prefix of , the resulting string must still be a prefix of because the uncontrollable symbol cannot be prevented. It is clear that if an uncontrollable event occurs along a string in , then the extended string must remain in . If the desired language is not attainable for a given DES, it may be possible to find a more restricted language that is. Since we want the least restricted behavior, it is desirable to find the supremal element of the family of controllable sublanguages of under the partial order of set inclusion. An algorithm for finding this behavior, which is referred to as the supremal controllable sublanguage of the desired language, is described in <ref type="bibr" target="#b67">[68]</ref>. The supremal controllable sublanguage is the largest subset of that can be attained by a controller and can be found via the following iterative procedure:</p><formula xml:id="formula_17">(89) (90) (91)</formula><p>The basis of the algorithm is a fixed point iteration of a certain operator on languages. The largest fixed point of the iteration is computed by iterative applications of the operator. Each iteration of (91) corresponds to the application of the operator. For finite automata and regular languages, this fixed-point iteration converges in finite steps <ref type="bibr" target="#b57">[58]</ref>. It can be shown that is also a regular language, and therefore, it can be realized by a supervisor described by a finite automaton.</p><p>Since the DES plant model belongs to a slightly different class of automata than the Ramadge-Wonham framework, we present another definition for controllable language that applies to the DES plant. We assume in this section that all languages are prefix-closed, is the initial state, and is a finite sequence of plant symbols, , defined over the set . In a hybrid control system, the controller must provide a controller symbol, following the generation of each plant symbol. Furthermore, the effect of the controller symbol on the behavior of the system is revealed, at least partially, by the current state of the DES plant. For this reason, it is desirable to determine the state of the DES plant model from a finite sequence of plant (output) symbols. In order to satisfy this objective, we assume that the current state can be determined uniquely from the previous state and plant symbol. This assumption should not be confused with the nondeterminism of the DES plant model. Note that the DES plant is said to be deterministic if for a given state and control (input) event, there is only one possible subsequent state. As we have shown, the DES plant model is described, in general, by a nondeterministic finite automaton. Here, our assumption is made with respect to the plant (output) symbols and is similar to the concept of observability <ref type="bibr" target="#b50">[51]</ref>. This is a realistic assumption for practical applications of hybrid systems. The plant symbols represent the measurements from the continuous plant. Each plant symbol corresponds to a hypersurface and to a direction of crossing that hypersurface, and it is issued when the continuous state crosses this hypersurface. If the current state is known and a plant symbol is detected, then we can determine the successor state uniquely. Note that this assumption is not inconsistent with nondeterminism in the DES plant model, since in a nondeterministic DES plant model, the successor state cannot be determined uniquely by the current state and the control symbol applied by the controller.</p><p>Since the current state can be determined uniquely from the previous state and plant symbol, for any initial state and sequence of plant symbols produced by the DES, there exists a unique sequence of DES plant states capable of producing the sequence . This assumption implies the existence of a mapping, , which takes an initial state together with a sequence of plant symbols and maps them to the corresponding sequence of states. The th state in the sequence can also be written as , where was the initial state. The mapping is needed for the following definition for controllable languages, which applies to the DES plant.</p><p>A language is controllable with respect to a given DES plant if</p><p>, there exists such that</p><p>where . This definition requires that for every prefix of the desired language , there exists a control , which will enable only symbols that will cause the string to remain in . This definition implies the next technical result shown in <ref type="bibr" target="#b64">[65]</ref>.</p><p>Proposition 2: If the language is controllable, then a controller can be designed that will restrict the given DES plant to the language .</p><p>Since the concept of controllability for the language generated by the DES plant model can be seen as an extension of the Ramadge-Wonham framework to the hybrid system case, the conditions in (92) reduce to those of (88) under appropriate restrictions. These restrictions basically are that the plant symbols fall into a controllable/uncontrollable dichotomy and a control policy exists to disable any combination of controllable plant symbols.</p><p>For hybrid control systems, the supremal controllable sublanguage of the DES plant can be found by a similar iterative scheme:</p><p>(93) such that (94)</p><p>For regular languages, it can be shown that the above iteration also converges in finite steps and that is regular. From (94), it follows that for any , there exists a control symbol such that ; therefore, the language is controllable. This result yields the following proposition.</p><p>Proposition 3: For a DES plant and language , is controllable and contains all controllable sublanguages of .</p><p>The supremal controllable sublanguage is regular and can be realized with a supervisor described by a finite automaton as illustrated by the following examples. Related work on the supremal controllable sublanguage in the discrete-event model of nondeterministic hybrid control systems can be found in <ref type="bibr" target="#b68">[69]</ref>.</p><p>1) Example-Double Integrator: The system consists of a double integrator plant, which is controlled by a discrete event system. Consider the double integrator example with the DES plant shown in Fig. <ref type="figure" target="#fig_9">10</ref>. Let the initial state be . Then the language generated by this automaton is . If we want to drive the plant in clockwise circles, then the desired language is . In this example, it can be shown that the language is controllable because it satisfies (92). This can also be seen by observing Fig. <ref type="figure" target="#fig_9">10</ref>. If the current state is either or , then the system can evolve in a clockwise direction. If the current state is , then the plant symbol can be disabled by selecting the control symbol . Similarly, for , can be disabled by selecting . Therefore, according to Proposition 2, a controller can be designed to achieve the stated control goal. The controller for this example is shown in Fig. <ref type="figure" target="#fig_20">19</ref>, and its output function is as follows:</p><p>(96) (97)</p><p>2) Example-More Complex DES Plant Model: This example has a richer behavior and will illustrate the generation of a supremal controllable sublanguage as well as the design of a controller. We start immediately with the DES plant model shown in Fig. <ref type="figure" target="#fig_21">20</ref>.</p><p>The language generated by this DES is , where</p><p>A problem that appears very often in hybrid system is to supervise the system so that it will not enter an unsafe region. Suppose we want to control the DES so that it never enters state . We simply remove the transitions to and then compute the resulting language. This desired language is therefore (99)</p><p>In this example, the language is not controllable. This can be seen by considering the string , for which there exists no that will prevent the DES plant from deviating from by generating and entering state . Since  is not controllable, we find the supremal controllable sublanguage of as defined in (95). The supremal controllable sublanguage is (100) Obtaining a DES controller once the supremal controllable sublanguage has been found is straightforward. The controller is a DES whose language is given by . Since the language is regular, the supervisor is implemented by a finite automaton that generates the language . Details regarding the equivalence between finite automata and regular languages can be found in <ref type="bibr" target="#b24">[26]</ref>. The output of the controller in each state is the controller symbol, which enables only transitions that are found in the controller. The existence of such a controller symbol is guaranteed by the fact that is controllable. For this example, the controller is shown in Fig. <ref type="figure" target="#fig_22">21</ref> and its output function is as follows:</p><p>(101) (102)</p><p>3) Example-Distillation Column: This example uses the model of a two-product distillation column with a single feed. A complete description of the nonlinear model can be found in <ref type="bibr" target="#b43">[44]</ref>. Here, a condensed description is given to show the source of the DES plant model and provide insight into the physical meaning of the states and events. Fig. <ref type="figure" target="#fig_23">22</ref> shows the distillation column. represents the feed flow into the column, is the flow of bottom product out of the column, is the mole fraction of the light compound in the bottom product, is the flow of distillate out of the column, and is the mole fraction of light compound in To obtain a hybrid control system, appropriate control policies and plant symbols must be chosen. Their selection is based on our knowledge of the control goals and the design constraints, and it will determine the interface. Let the control policies be These input values correspond to , , , and . Next, plant symbols are defined based on events as follows:  falls below 2; exceeds 2; falls below 0.13; exceeds 0.13; falls below 0.12; exceeds 0.12; falls below 0.08; exceeds 0.08; falls below 0.84; exceeds 0.84; falls below 0.85; exceeds 0.85; falls below 0.95; exceeds 0.95. We would like to keep below 0.13, above 0.95, and the feed at 2. These conditions correspond to increased production of high-purity products. Simulations reveal that given the available controls and events, this is not possible; that is, even if the initial state is in this region, no available control policy will cause it to remain there. It is possible to drive the system close to this point, however. Specifically, our control goal shall be twofold: first, to drive the system near the ideal point, and second, to avoid having a high feed rate (2 kmol/min) when the system is not near the ideal point.</p><p>The distillation column is an example of a rather complex hybrid system. The generator was designed to recognize 14 different plant events. This leads to 32 distinct regions in the state space, and therefore, there are 32 DES plant states. Fig. <ref type="figure" target="#fig_24">23</ref> shows the DES plant model. The two states labeled " " correspond to the desired operating regions of the system. This DES plant model was extracted by automating the testing process and implementing it on a computer.</p><p>A controller was obtained by automating the procedure for finding the supremal controllable sublanguage. The controller is shown in Fig. <ref type="figure" target="#fig_25">24</ref>. This controller drives the plant from the initial state to a loop containing the two good states. Note that in this figure, the states of the controller have been labeled with the controller symbol that is generated by that state.</p><p>4) Example-Robotic Manufacturing System: An example of a free floating robotic vehicle with two articulated arms is presented. The robotic arms shown in Fig. <ref type="figure" target="#fig_26">25</ref> are required to obtain components from a parts bin and move these components to work areas where assembly operations are to be performed. The tasks of fetching the workpiece, transporting it to the work area, and then returning to the parts bin to fetch another workpiece are performed repeatedly. The introduction of a shared resource generates a mutual exclusion constraint on the system. This example is particularly interesting because of the free-floating base, which makes the dynamics quite challenging. Similar problems arise in control and coordination of modern complex engineering applications such as autonomous vehicles and multibatch chemical processes. The robotic manufacturing example described here has been used in <ref type="bibr" target="#b36">[37]</ref> to illustrate various concepts in hybrid system theory. A simplified version of the system without the free rotating table has been used in <ref type="bibr" target="#b27">[29]</ref> and <ref type="bibr" target="#b26">[28]</ref> to illustrate regulatory control of hybrid systems based on discrete abstractions.</p><p>The motions of the arms are described by the following ordinary differential equations:</p><p>(103) <ref type="bibr">(104)</ref> where and are the angular positions of arm 1 and arm 2 with respect to the body axis of the robot. For this example, the control law is a proportional feedback law with gain and with reference inputs and . These reference inputs represent commands that direct the arm to move to the parts bin or work area. The movement of the arms will induce a body rotation so that the total angular momentum of the system is conserved. Let and denote the inertial angles of the robot arms 1 and 2, respectively. The body angle with respect to the inertial frame must satisfy <ref type="bibr">(105)</ref> where and are the moments of inertia for the body and arms, respectively.  The available control policies for the th robotic arm are defined as follows:</p><p>drive arm to parts bin; drive arm to work area; stop arm . Note that continuous controllers that guarantee that each command signal is executed in a suitable manner may be necessary. As discussed in Section II, it is assumed that these continuous controllers are included in the description of the plant. Next, plant symbols are defined based on events as follows:</p><p>Arm 1 approaches the parts bin; Arm 1 enters the parts bin;</p><p>Arm 1 exits the parts bin; Arm 1 leaves the parts bin; Arm 2 approaches the parts bin; Arm 2 enters the parts bin; Arm 2 exits the parts bin; Arm 2 leaves the parts bin. The generator was designed to recognize eight different plant events. This leads to nine different regions in the state space, and therefore, the DES plant model has nine states as shown in Fig. <ref type="figure" target="#fig_27">26</ref>.</p><p>We want to control the robotic manufacturing system so that it never enters the critical section. Therefore, the control requirement for the DES plant is that it never enters state .  The controller shown in Fig. <ref type="figure" target="#fig_28">27</ref> was obtained based on the supremal controllable sublanguage and does not allow the robotic arms to enter the critical section at the same time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. CONCLUSIONS</head><p>In this paper, the supervisory control of hybrid systems has been introduced and discussed at length. Discrete abstractions that are represented by a DES plant model have been used to approximate the continuous plant. In general, the abstracting DES models are nondeterministic. Properties of the DES plant model to be a valid representation of the continuous plant have been presented. The emphasis has been put on the design of the interface between the continuous plant and the discrete event controller. A methodology to design the partition of the continuous state space based on the natural invariants of the plant has been briefly outlined. The robustness problem of the discrete transitions sub-ject to small variations of the continuous system has also been addressed. Note that robustness to parameter variation is still an open issue in supervisory control of hybrid systems. An alternative methodology to the usual quantization technique of digital control based on the interface of hybrid control systems has been presented. The types of problems that have been addressed are those with control specifications that can be described by formal languages accepted by the DES plant model. The supervisory control problem for hybrid systems has been formulated, and algorithms for supervisory design based on the controllability of the specification language have been presented. Although the approach in this paper was based on a continuous-time model of the plant, similar results have been obtained using discrete-time systems <ref type="bibr" target="#b64">[65]</ref>, <ref type="bibr" target="#b58">[59]</ref>. It should be noted that our coverage is primarily of a tutorial nature, and so many technical details have been just briefly outlined or simply omitted; the reader should consult the references for further details.</p><p>In this paper, we focused on the case when finite automata are used to describe both the plant and the controller. Hybrid control approaches based on Petri nets have been reported in the literature (see, e.g., the survey paper <ref type="bibr" target="#b6">[8]</ref>). A similar approach to the one described in this paper using Petri nets, which may be computationally more efficient for large concurrent systems, has been reported in <ref type="bibr" target="#b21">[23]</ref> and <ref type="bibr" target="#b30">[31]</ref>. This approach addresses a particular class of supervisory control problems described by convex constraints on the marking of the Petri nets <ref type="bibr" target="#b42">[43]</ref>.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Hybrid control system.</figDesc><graphic coords="2,360.18,25.92,116.64,145.08" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Partition of the continuous state space.</figDesc><graphic coords="3,325.56,25.92,221.76,100.68" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Command signal issued by the interface.</figDesc><graphic coords="4,67.14,25.92,176.64,108.96" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Generation of plant events.</figDesc><graphic coords="5,345.24,25.92,182.40,111.72" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. DES plant model.</figDesc><graphic coords="6,80.22,25.92,150.48,172.44" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. Controller for the thermostat/furnace system.</figDesc><graphic coords="6,316.74,110.52,203.52,63.48" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. DES plant for the thermostat/furnace system.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Extraction of the DES plant model.</figDesc><graphic coords="7,345.24,25.92,182.40,66.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 9 .</head><label>9</label><figDesc>Fig. 9. Generator for the double integrator example.</figDesc><graphic coords="8,63.18,25.92,184.56,119.40" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 10 .</head><label>10</label><figDesc>Fig. 10. DES plant for the double integrator.</figDesc><graphic coords="8,84.78,178.02,141.36,102.84" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 11 .</head><label>11</label><figDesc>Fig. 11. Hybrid system model.</figDesc><graphic coords="8,361.62,25.92,113.76,133.80" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 12 .</head><label>12</label><figDesc>Fig. 12. Partition of the two-dimensional state space into rectangular blocks.</figDesc><graphic coords="9,349.74,25.92,173.28,126.72" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Fig. 13 .</head><label>13</label><figDesc>Fig. 13. DES plant model as an approximation.</figDesc><graphic coords="10,78.84,25.90,153.16,80.18" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Fig. 14 .</head><label>14</label><figDesc>Fig. 14. Nondeterminism of the DES plant model.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Fig. 15 .</head><label>15</label><figDesc>Fig. 15. Target region and invariants.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Fig. 16 (</head><label>16</label><figDesc>Fig.16(a) illustrates what we have so far. Now the target can be extended to include or and more common flow regions can be obtained. Let the new target be given by</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Fig. 16 .</head><label>16</label><figDesc>Fig. 16. (a) Target region and invariants. (b) Final regions for double integrator. (c) Controller.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head></head><label></label><figDesc>these invariant functions are quantized to form the plant symbols round (83) Now, the quantization yields the partition shown in Fig. 18(a).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head>Fig. 17 .</head><label>17</label><figDesc>Fig. 17. Nongrid-like partition.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_19"><head>Fig. 18 .</head><label>18</label><figDesc>Fig. 18. (a) Quantization. (b) State trajectory.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_20"><head>Fig. 19 .</head><label>19</label><figDesc>Fig. 19. Controller for the double integrator.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_21"><head>Fig. 20 .</head><label>20</label><figDesc>Fig. 20. DES plant model.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_22"><head>Fig. 21 .</head><label>21</label><figDesc>Fig. 21. DES controller.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_23"><head>Fig. 22 .</head><label>22</label><figDesc>Fig. 22. Distillation column.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_24"><head>Fig. 23 .</head><label>23</label><figDesc>Fig. 23. DES plant for the distillation column.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_25"><head>Fig. 24 .</head><label>24</label><figDesc>Fig. 24. Sample controller for distillation column.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_26"><head>Fig. 25 .</head><label>25</label><figDesc>Fig. 25. Robotic manufacturing system on a free rotating platform.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_27"><head>Fig. 26 .</head><label>26</label><figDesc>Fig. 26. DES plant model for the free-floating robotic system.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_28"><head>Fig. 27 .</head><label>27</label><figDesc>Fig. 27. DES controller for the free-floating robotic system.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>PROCEEDINGS OF THE IEEE, VOL. 88, NO. 7, JULY 2000</p></note>
		</body>
		<back>

			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This work was supported in part by the National Science Foundation under Grant ECS95-31485 and by the Army Research Office under Grant DAAG55-98-1-0199.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>in electrical and computer engineering from the National Technical University of Athens in 1993. He received the M.S. degrees in electrical engineering and applied mathematics in 1998, and the Ph.D degree in electrical engineering, all from the University of Notre Dame, Notre Dame, IN.</p><p>From 1993 to 1995, he was with the National Center for Space Applications, Hellenic Ministry of National Defense, Athens, as a Computer Engineer in the areas of image processing and remote sensing. He is currently employed with Harris Corporation, Melbourne, FL, where he is involved in the analysis and design of satellite communications systems and serves as the Leader of the Controls Analysis Group. His research interests are in the area of mixed discrete and continuous control systems.</p><p>Michael D. <ref type="bibr">Lemmon</ref>  </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">The algorithmic analysis of hybrid systems</title>
		<author>
			<persName><forename type="first">R</forename><surname>Alur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Courcoubetis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Halbwachs</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Henzinger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P.-H</forename><surname>Ho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Nicollin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Oliveiro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Sifakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Yovine</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theoret. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">138</biblScope>
			<biblScope unit="page" from="3" to="34" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Hybrid Systems III, Verification and Control</title>
		<author>
			<persName><forename type="first">R</forename><surname>Alur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Henzinger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Sontag</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Lecture Notes in Computer Science</title>
		<imprint>
			<biblScope unit="volume">1066</biblScope>
			<date type="published" when="1996">1996</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>Berlin, Germany</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Defining intelligent control</title>
		<author>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Contr. Syst</title>
		<imprint>
			<biblScope unit="page" from="58" to="66" />
			<date type="published" when="1994-06">June 1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Intelligent control</title>
	</analytic>
	<monogr>
		<title level="m">Encyclopedia of Electrical and Electronics Engineering</title>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Wiley</publisher>
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<author>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Kohn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lemmon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Nerode</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sastry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Hybrid Systems V</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting><address><addrLine>Berlin, Germany</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1999">1999</date>
			<biblScope unit="volume">1567</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Hybrid Systems II</title>
		<author>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Kohn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">A</forename><surname>Nerode</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">S</forename><surname>Sastry</surname></persName>
		</editor>
		<imprint>
			<biblScope unit="volume">999</biblScope>
			<date type="published" when="1995">1995</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>Berlin, Germany</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">On hybrid control of complex systems: A survey</title>
		<author>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Koutsoukos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">3rd Int. Conf. ADMP&apos;98, Automation of Mixed Processes: Dynamic Hybrid Systems</title>
		<meeting><address><addrLine>Reims, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1998-03">Mar. 1998</date>
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">On hybrid control of complex systems: A survey</title>
		<author>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Koutsoukos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Zaytoon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Automat</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">9-10</biblScope>
			<biblScope unit="page" from="1023" to="1045" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Introduction to the special issue on hybrid systems</title>
		<author>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lemmon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Discrete Event Dyn. Syst</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page">10</biblScope>
			<date type="published" when="1998-06">June 1998</date>
		</imprint>
	</monogr>
	<note>Special Issue on Hybrid Control Systems</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Hybrid control systems: An introductory discussion to the special issue</title>
		<author>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Nerode</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Automat. Contr</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="page" from="457" to="460" />
			<date type="published" when="1998-04">Apr. 1998</date>
		</imprint>
	</monogr>
	<note>Special Issue on Hybrid Control Systems</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">An Introduction to Intelligent and Autonomous Control</title>
		<editor>P. Antsaklis and K. Passino</editor>
		<imprint>
			<date type="published" when="1993">1993</date>
			<publisher>Kluwer</publisher>
			<pubPlace>Norwell, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Introduction to intelligent control systems with high degrees of autonomy</title>
		<author>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Passino</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">An Introduction to Intelligent and Autonomous Control</title>
		<editor>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">K</forename><surname>Passino</surname></persName>
		</editor>
		<meeting><address><addrLine>Norwell, MA</addrLine></address></meeting>
		<imprint>
			<publisher>Kluwer</publisher>
			<date type="published" when="1993">1993</date>
			<biblScope unit="page" from="1" to="26" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Toward intelligent autonomous control systems: Architecture and fundamental issues</title>
		<author>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Passino</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Intell. Robot. Syst</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="315" to="3423" />
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Hybrid system modeling and autonomous control systems</title>
		<author>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Stiver</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lemmon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">Hybrid</forename><surname>Systems</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Grossman</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><surname>Nerode</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><forename type="middle">P</forename><surname>Ravn</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">H</forename><surname>Rischel</surname></persName>
		</editor>
		<imprint>
			<biblScope unit="volume">736</biblScope>
			<biblScope unit="page" from="366" to="392" />
			<date type="published" when="1993">1993</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>Berlin, Germany</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><surname>Branicky</surname></persName>
		</author>
		<title level="m">Studies in hybrid systems: Modeling, analysis, and control</title>
		<imprint>
			<date type="published" when="1995">1995</date>
		</imprint>
		<respStmt>
			<orgName>Massachusetts Institute of Technology, Cambridge</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. dissertation</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A unified framework for hybrid control: Model and optimal control theory</title>
		<author>
			<persName><forename type="first">M</forename><surname>Branicky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Borkar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Mitter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Automat. Contr</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="31" to="45" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Hierarchical hybrid control systems: A lattice formulation</title>
		<author>
			<persName><forename type="first">P</forename><surname>Caines</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y.-J</forename><surname>Wei</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Automat. Contr</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="501" to="508" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Introduction to the modeling, control and optimization of discrete event systems</title>
		<author>
			<persName><forename type="first">C</forename><surname>Cassandras</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Lafortune</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Olsder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Trends in Control. A European Perspective</title>
		<editor>
			<persName><forename type="first">A</forename><surname>Isidori</surname></persName>
		</editor>
		<meeting><address><addrLine>Berlin, Germany</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="217" to="291" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Synthesis of supervisory controllers for hybrid systems based on approximating automata</title>
		<author>
			<persName><forename type="first">J</forename><surname>Cury</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Krogh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Niinomi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Automat. Contr</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="564" to="568" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Differential Petri nets: Representing continuous systems in a discrete-event world</title>
		<author>
			<persName><forename type="first">I</forename><surname>Demongodin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Koussoulas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Automat. Contr</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="573" to="579" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Reduction of timed hybrid systems</title>
		<author>
			<persName><forename type="first">S</forename><surname>Digennaro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Horn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kulkarni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Ramadge</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Discrete Event Dynamic Systems: Theory and Applications</title>
		<imprint>
			<date type="published" when="1998">1998</date>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="343" to="351" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Modeling hybrid control systems using programmable timed Petri nets</title>
		<author>
			<persName><forename type="first">K</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lemmon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Automat</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">9-10</biblScope>
			<biblScope unit="page" from="1187" to="1208" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">The theory of hybrid automata</title>
		<author>
			<persName><forename type="first">T</forename><surname>Henzinger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 11th Annu. Symp. Logic in Computer Science</title>
		<meeting>11th Annu. Symp. Logic in Computer Science</meeting>
		<imprint>
			<date type="published" when="1996">1996</date>
			<biblScope unit="page" from="278" to="292" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Discrete-event control of nondeterministic systems</title>
		<author>
			<persName><forename type="first">M</forename><surname>Heymann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Lin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Automat. Contr</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="3" to="17" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Introduction to Automata Theory, Languages and Computation</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Hopcroft</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Ullman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1979">1979</date>
			<publisher>Addison-Wesley</publisher>
			<pubPlace>Reading, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><surname>Isidori</surname></persName>
		</author>
		<title level="m">Nonlinear Control Systems</title>
		<meeting><address><addrLine>Berlin, Germany</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Design of hybrid system regulators</title>
		<author>
			<persName><forename type="first">X</forename><surname>Koutsoukos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 38th IEEE Conf. Decision and Control</title>
		<meeting>38th IEEE Conf. Decision and Control<address><addrLine>Phoenix, AZ</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-12">Dec. 1999</date>
			<biblScope unit="page" from="3990" to="3995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Hybrid control of a robotic manufacturing system</title>
	</analytic>
	<monogr>
		<title level="m">Proc</title>
		<meeting>null</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<author>
			<persName><forename type="first">Conf</forename><surname>Ieee Mediterranean</surname></persName>
		</author>
		<title level="m">Control and Automation, Haifa, Israel</title>
		<imprint>
			<date type="published" when="1999-06">June 1999</date>
			<biblScope unit="page" from="144" to="159" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Programmable timed Petri nets in the analysis and design of hybrid control systems</title>
		<author>
			<persName><forename type="first">X</forename><surname>Koutsoukos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lemmon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 37th IEEE Conf. Decision and Control</title>
		<meeting>37th IEEE Conf. Decision and Control<address><addrLine>Tampa, FL</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1998-12">Dec. 1998</date>
			<biblScope unit="page" from="1617" to="1622" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Timed Petri nets in hybrid systems: Stability and supervisory control</title>
		<author>
			<persName><forename type="first">X</forename><surname>Koutsoukos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lemmon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Discrete Event Dyn. Syst</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="137" to="173" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Non-blocking supervisory control of nondeterministic systems under partial observation and decentralization</title>
		<author>
			<persName><forename type="first">R</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Shayman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Automat. Contr</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="1160" to="1175" />
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Reachability analysis of hybrid systems using bisimulations</title>
		<author>
			<persName><forename type="first">G</forename><surname>Lafferriere</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Pappas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sastry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 37th IEEE Conf. Decision and Control</title>
		<meeting>37th IEEE Conf. Decision and Control<address><addrLine>Tampa, FL</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1998">1998</date>
			<biblScope unit="page" from="1623" to="1628" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Hybrid systems with finite bisimulations</title>
		<author>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Kohn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lemmon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Hybrid Systems V</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">A</forename><surname>Nerode</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">S</forename><surname>Sastry</surname></persName>
		</editor>
		<meeting><address><addrLine>Berlin, Germany</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1999">1999</date>
			<biblScope unit="volume">1567</biblScope>
			<biblScope unit="page" from="186" to="203" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Stability by Lyapunov&apos;s Direct Method</title>
		<author>
			<persName><forename type="first">J</forename><surname>Lasalle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Lefschetz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1961">1961</date>
			<publisher>Academic</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Inductively inferring valid logical models of continuous-state dynamical systems</title>
		<author>
			<persName><forename type="first">M</forename><surname>Lemmon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theoret. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">138</biblScope>
			<biblScope unit="page" from="201" to="210" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Supervisory hybrid systems</title>
		<author>
			<persName><forename type="first">M</forename><surname>Lemmon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Markovsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Contr. Syst. Mag</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="page" from="42" to="55" />
			<date type="published" when="1999-08">Aug. 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Basic problems in stability and design of switched systems</title>
		<author>
			<persName><forename type="first">D</forename><surname>Liberzon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Morse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Contr. Syst. Mag</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="59" to="70" />
			<date type="published" when="1999-10">Oct. 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Qualitative modeling of linear dynamical systems with quantised state measurements</title>
		<author>
			<persName><forename type="first">J</forename><surname>Lunze</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Automatica</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="417" to="431" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Deterministic discrete-event representations of linear continuous-variable systems</title>
		<author>
			<persName><forename type="first">J</forename><surname>Lunze</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Nixdorf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Schroder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Automatica</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="396" to="406" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Hybrid I/O automata</title>
		<author>
			<persName><forename type="first">N</forename><surname>Lynch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Segala</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Vaandrager</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Weinberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Hybrid Systems III, Verification and Control</title>
		<editor>
			<persName><forename type="first">R</forename><surname>Alur</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">T</forename><forename type="middle">A</forename><surname>Henzinger</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">E</forename><forename type="middle">D</forename><surname>Sontag</surname></persName>
		</editor>
		<meeting><address><addrLine>Berlin, Germany</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1996">1996</date>
			<biblScope unit="volume">1066</biblScope>
			<biblScope unit="page" from="496" to="510" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Hybrid closed loop systems: A nonlinear control perspective</title>
		<author>
			<persName><forename type="first">N</forename><surname>Mcclamroch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Rui</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Kolmanovsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Reyhanoglu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 36th IEEE Conf. Decision and Control</title>
		<meeting>36th IEEE Conf. Decision and Control</meeting>
		<imprint>
			<date type="published" when="1997">1997</date>
			<biblScope unit="page" from="114" to="119" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">Supervisory Control of Discrete Event Systems using Petri Nets</title>
		<author>
			<persName><forename type="first">J</forename><surname>Moody</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998">1998</date>
			<publisher>Kluwer Academic</publisher>
			<pubPlace>Norwell, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><surname>Morari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Zafiriou</surname></persName>
		</author>
		<title level="m">Robust Process Control</title>
		<meeting><address><addrLine>Englewood Cliffs, NJ</addrLine></address></meeting>
		<imprint>
			<publisher>Prentice-Hall</publisher>
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Supervisory control of families of linear set-point controllers-Part 1: Exact matching</title>
		<author>
			<persName><forename type="first">A</forename><surname>Morse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Automat. Contr</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="page" from="1271" to="1281" />
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<monogr>
		<title level="m" type="main">Problem Complexity and Method Efficiency in Optimization</title>
		<author>
			<persName><forename type="first">A</forename><surname>Nemirovsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Yudin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1983">1983</date>
			<publisher>Wiley</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Models for hybrid systems: Automata, topologies, controllability, observability</title>
		<author>
			<persName><forename type="first">A</forename><surname>Nerode</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Kohn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">Hybrid</forename><surname>Systems</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Grossman</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><surname>Nerode</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><forename type="middle">P</forename><surname>Ravn</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">H</forename><surname>Rischel</surname></persName>
		</editor>
		<imprint>
			<biblScope unit="volume">736</biblScope>
			<biblScope unit="page" from="317" to="356" />
			<date type="published" when="1993">1993</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>Berlin, Germany</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Multiple agent hybrid control architecture</title>
	</analytic>
	<monogr>
		<title level="s">Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">Hybrid</forename><surname>Systems</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Grossman</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><surname>Nerode</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><forename type="middle">P</forename><surname>Ravn</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">H</forename><surname>Rischel</surname></persName>
		</editor>
		<imprint>
			<biblScope unit="volume">736</biblScope>
			<biblScope unit="page" from="297" to="316" />
			<date type="published" when="1993">1993</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>Berlin, Germany</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">H</forename><surname>Nijmeijer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Van Der Schaft</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nonlinear Dynamical Control Systems</title>
		<imprint>
			<date type="published" when="1990">1990</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>Berlin, Germany</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Supervisory control using failure semantics and partial observations</title>
		<author>
			<persName><forename type="first">A</forename><surname>Overkamp</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Automat. Contr</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="498" to="510" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Observability of discrete event dynamic systems</title>
		<author>
			<persName><forename type="first">C</forename><surname>Özveren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Willsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Automat. Contr</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="797" to="806" />
			<date type="published" when="1990">1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">Hierarchically consistent control systems</title>
		<author>
			<persName><forename type="first">G</forename><surname>Pappas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Lafferriere</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sastry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 37th IEEE Conf. Decision and Control</title>
		<meeting>37th IEEE Conf. Decision and Control<address><addrLine>Tampa, FL</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1998">1998</date>
			<biblScope unit="page" from="4336" to="4341" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">-approximation of differential inclusions</title>
		<author>
			<persName><forename type="first">A</forename><surname>Puri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Borkar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Varaiya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Hybrid Systems III, Verification and Control</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">R</forename><surname>Alur</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">T</forename><forename type="middle">A</forename><surname>Henzinger</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">E</forename><forename type="middle">D</forename><surname>Sontag</surname></persName>
		</editor>
		<meeting><address><addrLine>Berlin, Germany</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1996">1996</date>
			<biblScope unit="volume">1066</biblScope>
			<biblScope unit="page" from="362" to="376" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Approximating automata and discrete control for continuous systems-Two examples from process control</title>
		<author>
			<persName><forename type="first">J</forename><surname>Raisch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>O'young</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Meder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Itigin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">Germany</forename><surname>Berlin</surname></persName>
		</editor>
		<imprint>
			<biblScope unit="volume">1567</biblScope>
			<biblScope unit="page" from="279" to="303" />
			<date type="published" when="1999">1999</date>
			<publisher>Springer-Verlag</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<analytic>
		<title level="a" type="main">A totally ordered set of discrete abstractions for a given hybrid system</title>
		<author>
			<persName><forename type="first">J</forename><surname>Raisch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">O</forename><surname>Young</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">Hybrid</forename><surname>Systems</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">I</forename><forename type="middle">V</forename></persName>
		</editor>
		<editor>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">W</forename><surname>Kohn</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><surname>Nerode</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">S</forename><surname>Sastry</surname></persName>
		</editor>
		<imprint>
			<biblScope unit="volume">1273</biblScope>
			<biblScope unit="page" from="342" to="360" />
			<date type="published" when="1997">1997</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>Berlin, Germany</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">Discrete approximation and supervisory control of continuous systems</title>
		<author>
			<persName><forename type="first">J</forename><surname>Raisch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">O</forename><surname>Young</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Automat. Contr</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="568" to="573" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">Supervisory control of a class of discrete event processes</title>
		<author>
			<persName><forename type="first">P</forename><surname>Ramadge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Wonham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. Contr. Optim</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="206" to="230" />
			<date type="published" when="1987-01">Jan. 1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">The control of discrete event systems</title>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE</title>
		<meeting>IEEE</meeting>
		<imprint>
			<date type="published" when="1989-01">Jan. 1989</date>
			<biblScope unit="volume">77</biblScope>
			<biblScope unit="page" from="81" to="89" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<monogr>
		<title level="m" type="main">Analysis and design of hybrid control systems</title>
		<author>
			<persName><forename type="first">J</forename><surname>Stiver</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995">1995</date>
			<pubPlace>Notre Dame, IN</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Dept. Elect. Eng., Univ. Notre Dame</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. dissertation</note>
</biblStruct>

<biblStruct xml:id="b59">
	<analytic>
		<title level="a" type="main">A novel discrete event system approach to modeling and analysis of hybrid control systems</title>
		<author>
			<persName><forename type="first">J</forename><surname>Stiver</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 29th Annu. Allerton Conf. Communication, Control and Computing</title>
		<meeting>29th Annu. Allerton Conf. Communication, Control and Computing</meeting>
		<imprint>
			<date type="published" when="1991-02-04">Oct. 2-4, 1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<analytic>
		<title level="a" type="main">Digital control from a hybrid perspective</title>
		<author>
			<persName><forename type="first">J</forename><surname>Stiver</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lemmon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 33rd IEEE Conf. Decision and Control</title>
		<meeting>33rd IEEE Conf. Decision and Control<address><addrLine>Lake Buena Vista, FL</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994-12">Dec. 1994</date>
			<biblScope unit="page" from="4241" to="4246" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title level="a" type="main">Hybrid control system design based on natural invariants</title>
	</analytic>
	<monogr>
		<title level="m">Proc. 34th IEEE Conf. Decision and Control</title>
		<meeting>34th IEEE Conf. Decision and Control<address><addrLine>New Orleans, LA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1995-12">Dec. 1995</date>
			<biblScope unit="page" from="1455" to="1460" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<analytic>
		<title level="a" type="main">Interface and controller design for hybrid control systems</title>
	</analytic>
	<monogr>
		<title level="m">Hybrid Systems II</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">W</forename><surname>Antsaklis</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><surname>Kohn</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">S</forename><surname>Nerode</surname></persName>
		</editor>
		<editor>
			<persName><surname>Sastry</surname></persName>
		</editor>
		<meeting><address><addrLine>Berlin, Germany</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1995">1995</date>
			<biblScope unit="volume">999</biblScope>
			<biblScope unit="page" from="462" to="492" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<analytic>
		<title level="a" type="main">An invariant based approach to the design of hybrid control systems</title>
	</analytic>
	<monogr>
		<title level="m">IFAC 13th Triennial World Congr</title>
		<meeting><address><addrLine>San Francisco, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1996">1996</date>
			<biblScope unit="volume">J</biblScope>
			<biblScope unit="page" from="467" to="472" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<analytic>
		<title level="a" type="main">A logical DES approach to the design of hybrid control systems</title>
	</analytic>
	<monogr>
		<title level="j">Math. Comput. Modeling</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">11/12</biblScope>
			<biblScope unit="page" from="55" to="76" />
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b65">
	<analytic>
		<title level="a" type="main">Control design for integrator hybrid system</title>
		<author>
			<persName><forename type="first">M</forename><surname>Tittus</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Egardt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Automat. Contr</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="491" to="500" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b66">
	<analytic>
		<title level="a" type="main">Paradigms and puzzles in the theory of dynamical systems</title>
		<author>
			<persName><forename type="first">J</forename><surname>Willems</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Automat. Contr</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="259" to="294" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<analytic>
		<title level="a" type="main">On the supremal controllable sublanguage of a given language</title>
		<author>
			<persName><forename type="first">W</forename><surname>Wonham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Ramadge</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. Contr. Optim</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="637" to="659" />
			<date type="published" when="1987-05">May 1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b68">
	<analytic>
		<title level="a" type="main">On the supremal controllable sublanguage in the discrete-event model of nondeterministic hybrid control systems</title>
		<author>
			<persName><forename type="first">X</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lemmon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Antsaklis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Automat. Contr</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="2098" to="2103" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<analytic>
		<title level="a" type="main">Stability theory for hybrid dynamical systems</title>
		<author>
			<persName><forename type="first">H</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Michel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Hou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Automat. Contr</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="461" to="474" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b70">
	<analytic>
		<title level="a" type="main">Extracting and representing qualitative behaviors of complex systems in phase spaces</title>
		<author>
			<persName><forename type="first">F</forename><surname>Zhao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artif. Intell</title>
		<imprint>
			<biblScope unit="volume">369</biblScope>
			<biblScope unit="issue">1-2</biblScope>
			<biblScope unit="page" from="51" to="92" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b71">
	<monogr>
		<title level="m" type="main">Koutsoukos was born in Athens</title>
		<author>
			<persName><forename type="first">D</forename><surname>Xenofon</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1969">1969</date>
			<pubPlace>Greece</pubPlace>
		</imprint>
	</monogr>
	<note>He received the Dipl. degree</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
