<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A teamwork model for understanding an agile team: A case study of a Scrum project</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2009-11-20">20 November 2009</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Nils</forename><forename type="middle">Brede</forename><surname>Moe</surname></persName>
							<email>nilsm@sintef.no</email>
						</author>
						<author>
							<persName><forename type="first">Torgeir</forename><surname>Dingsøyr</surname></persName>
							<email>torgeird@sintef.no</email>
						</author>
						<author>
							<persName><forename type="first">Tore</forename><surname>Dybå</surname></persName>
							<email>tored@sintef.no</email>
						</author>
						<title level="a" type="main">A teamwork model for understanding an agile team: A case study of a Scrum project</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2009-11-20">20 November 2009</date>
						</imprint>
					</monogr>
					<idno type="MD5">CD3E3398470BB873A9A84C641C6611A7</idno>
					<idno type="DOI">10.1016/j.infsof.2009.11.004</idno>
					<note type="submission">Received 30 July 2009 Received in revised form 26 October 2009 Accepted 12 November 2009</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T09:44+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>Agile software development Scrum Software engineering Teamwork Empirical software engineering Case study</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Context: Software development depends significantly on team performance, as does any process that involves human interaction. Objective: Most current development methods argue that teams should self-manage. Our objective is thus to provide a better understanding of the nature of self-managing agile teams, and the teamwork challenges that arise when introducing such teams. Method: We conducted extensive fieldwork for 9 months in a software development company that introduced Scrum. We focused on the human sensemaking, on how mechanisms of teamwork were understood by the people involved. Results: We describe a project through Dickinson and McIntyre's teamwork model, focusing on the interrelations between essential teamwork components. Problems with team orientation, team leadership and coordination in addition to highly specialized skills and corresponding division of work were important barriers for achieving team effectiveness. Conclusion: Transitioning from individual work to self-managing teams requires a reorientation not only by developers but also by management. This transition takes time and resources, but should not be neglected. In addition to Dickinson and McIntyre's teamwork components, we found trust and shared mental models to be of fundamental importance.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Software development depends significantly on team performance, as does any process that involves human interaction. A common definition of a team is ''a small number of people with complementary skills who are committed to a common purpose, set of performance goals, and approach for which they hold themselves mutually accountable" <ref type="bibr" target="#b21">[22]</ref>.</p><p>The traditional perspective on software development is rooted in the rationalistic paradigm, which promotes a plan-driven product-line approach to software development using a standardized, controllable, and predictable software engineering process <ref type="bibr" target="#b14">[15]</ref>. Today, this traditional mechanistic worldview is challenged by the agile perspective that accords primacy to uniqueness, ambiguity, complexity, and change, as opposed to prediction, verifiability, and control. The goal of optimization is being replaced by those of flexibility and responsiveness <ref type="bibr" target="#b32">[33]</ref>.</p><p>Setting up a work team is usually motivated by benefits such as increased productivity, innovation, and employee satisfaction. Research on software development teams has found that team performance is linked with the effectiveness of teamwork coordination <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b24">25]</ref>. In the traditional plan-driven approach, work is coordinated in a hierarchy that involves a command-and-control style of management in which there is a clear separation of roles <ref type="bibr" target="#b32">[33,</ref><ref type="bibr" target="#b33">34]</ref>. In the agile approach, work is coordinated by the self-managing team, in which the team itself decides how work is coordinated <ref type="bibr" target="#b7">[8]</ref>.</p><p>A team that follows a plan-driven model often consists of independently focused self-managing professionals, and a transition to self-managing teams is one of the biggest challenges when introducing agile (change-driven) development <ref type="bibr" target="#b32">[33]</ref>. Neither culture nor mind-sets of people can be changed easily, which makes the move to agile methodologies all the more formidable for many organizations <ref type="bibr" target="#b7">[8]</ref>. In addition, it is not sufficient to put individuals together in a group, tag them ''self-managing", and expect that they will automatically know how to coordinate and work effectively as an agile team.</p><p>Our objective is to provide a better understanding of the nature of self-managing agile teams, which can in turn benefit the effective application of agile methods in software development. To this end, we conducted a longitudinal study that draws on the general literature of teamwork and self-managing teams. Such a study can provide valuable insights for understanding the challenge of introducing the self-managing agile team. We sought to answer the following research question: How can we explain the teamwork challenges that arise when introducing a self-managing agile team? The remainder of this paper is organized as follows: Section 2 gives an overview of the literature on teamwork and agile software development. Section 3 describes our research question and method in detail. Section 4 presents results from a nine-month fieldwork of teamwork in a Scrum team. Section 5 contains a discussion of the findings. Section 6 concludes and provides suggestions for further work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Background: teamwork and agile software development</head><p>In this section, we give a short introduction to the field of teamwork, teamwork in agile development, and the teamwork model that is used as the basis for our work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.">Teamwork</head><p>The topic of teamwork has attracted research from several disciplines <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b40">41]</ref>. The concept of teamwork carries with it a set of values that encourage listening and responding constructively to views expressed by others, giving others the benefit of the doubt, providing support, and recognizing the interests and achievements of others <ref type="bibr" target="#b21">[22]</ref>. Such values are important because they promote individual performance, which boosts team performance, and they help teams to perform well as a group, and good team performance boosts the performance of the organization.</p><p>Research on teamwork includes the development of tests to identify personality characteristics, because it has often been argued that good teams need a certain blend of personalities. Examples are the Belbin test <ref type="bibr" target="#b6">[7]</ref> and the Myers-Briggs Type indicator. There is also a great deal of research on climate at work group and team level. The most studied model of team climate is that of <ref type="bibr" target="#b47">[48]</ref> who suggests that four climate factors (vision, participative safety, task orientation, and support for innovation) are essential for team innovation to occur.</p><p>Furthermore, there are studies of teams over time, which indicate that teams go through set phases. The most well-known of these studies are those of Tuckman <ref type="bibr" target="#b45">[46]</ref>, who identified the phases as forming, storming, norming, and performing. Other studies have focused on the relationships between team members and argue that group cohesiveness is important for team success (cited in <ref type="bibr" target="#b40">[41]</ref>). However, the use of teams does not always result in success for the organization <ref type="bibr" target="#b16">[17]</ref>. Team performance is complex, and the actual performance of a team depends not only on the competence of the team itself in managing and executing its work, but also on the organizational context provided by management.</p><p>Much research has been devoted to what is described as selfmanaging, autonomous, or empowered teams <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b25">26,</ref><ref type="bibr" target="#b44">45,</ref><ref type="bibr" target="#b46">47]</ref>. One of the reasons that the use of self-managing teams has become popular is that some research suggests that their use promotes more satisfied employees, lower turnover, and lower absenteeism <ref type="bibr" target="#b9">[10]</ref>. Others also claim that self-managing teams are a prerequisite for the success of innovative projects <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b43">44]</ref>.</p><p>Although the majority of studies report that using self-managing teams has positive effects, some studies offer a more mixed assessment; such teams can be difficult to implement, and they risk failure when used in inappropriate situations or without sufficient leadership and support <ref type="bibr" target="#b17">[18]</ref>. In addition, research on team performance indicates that the effects of autonomous work groups are highly situational dependent and that the effects of autonomous work-group practices depend on such factors as the nature of the workforce and the nature of the organization <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b16">17]</ref>. Further, autonomy on the individual level may conflict with autonomy on the group level. When a team as a whole is given a great deal of autonomy, it does not follow that the individual team members are given high levels of individual autonomy. Barker <ref type="bibr" target="#b4">[5]</ref>, for example, pointed out that self-managing groups may end up controlling group members more rigidly than they do under traditional management styles, while Markham and Markham <ref type="bibr" target="#b28">[29]</ref> suggested that it may be difficult to incorporate both individual autonomy and group autonomy in the same work group. For Individuals to be motivated and satisfied with their jobs they need to have control over their own work and over the scheduling and implementation of their own tasks <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b25">26]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.">Teamwork in agile development: the Scrum team</head><p>In a software team, the members are jointly responsible for the end product and must develop shared mental models by negotiating shared understandings about both the teamwork and the task <ref type="bibr" target="#b27">[28]</ref>. Project goals, system requirements, project plans, project risks, individual responsibilities, and project status must be visible and understood by all parties involved <ref type="bibr" target="#b20">[21]</ref>.</p><p>Most current development methods have it as a premise that software teams should self-organize or self-manage <ref type="bibr" target="#b35">[36,</ref><ref type="bibr" target="#b41">42]</ref>. Scrum, which is a project-management-oriented agile development method, was inspired by a range of fields, such as complexity theory, system dynamics, and Nonaka and Takeuchi's theory of knowledge creation <ref type="bibr" target="#b34">[35]</ref>, and has adapted aspects of these fields to a setting of software development. Self-management is a defining characteristic in Scrum. Compared with traditional commandand-control oriented management, Scrum represents a radically new approach for planning and managing software projects, because it brings decision-making authority to the level of operational problems and uncertainties.</p><p>Rising and Janoff <ref type="bibr" target="#b35">[36]</ref> describe Scrum as a development process for small teams, which includes a series of short development phases or iterations (''sprints"). A Scrum team is given significant authority and responsibility for many aspects of their work, such as planning, scheduling, assigning tasks to members, and making decisions: ''The team is accorded full authority to do whatever it decides is necessary to achieve the goal" <ref type="bibr" target="#b42">[43]</ref>.</p><p>However, despite the popularity of the method, a systematic review of empirical studies of agile development <ref type="bibr" target="#b15">[16]</ref> found only one case study of Scrum in the research literature prior to 2006.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.">Dickinson and McIntyre's teamwork model</head><p>The issue of what processes and components comprise teamwork and how teamwork contributes to team effectiveness and team performance has been much studied <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b25">26,</ref><ref type="bibr" target="#b29">30,</ref><ref type="bibr" target="#b38">39]</ref>, but there is no consensus concerning its conceptual structure <ref type="bibr" target="#b37">[38]</ref>. Salas et al. <ref type="bibr" target="#b39">[40]</ref> identify 136 different models in their literature review and present a representative sample of 11 models and frameworks.</p><p>Using recent research and previous reviews, Dickinson and McIntyre <ref type="bibr" target="#b12">[13]</ref> identified and defined seven core components of teamwork. Using these components and their relationships as a basis, they proposed the teamwork model that is used in this work. The model consists of a learning loop of the following basic teamwork components: communication, team orientation, team leadership, monitoring, feedback, backup, and coordination (Fig. <ref type="figure" target="#fig_1">1</ref>).</p><p>We selected the Dickinson and McIntyre teamwork model for the following reasons:</p><p>1. It includes the most common elements that are considered in most research on teamwork processes <ref type="bibr" target="#b37">[38,</ref><ref type="bibr" target="#b38">39]</ref>. In addition, it considers important elements that are required in self-managed teams: team orientation, functional redundancy and backup behavior <ref type="bibr" target="#b31">[32,</ref><ref type="bibr" target="#b34">35]</ref>, communication, feedback and learning <ref type="bibr" target="#b32">[33]</ref>, and shared leadership <ref type="bibr" target="#b21">[22]</ref>. Further, the model covers important elements that are found in software teams, such as coordination of work <ref type="bibr" target="#b24">[25]</ref>. 2. It specifies what teamwork skills should be observed, in that the model is presented with a conceptual framework for developing measures of teamwork performance that can ensure effective individual and team performance <ref type="bibr" target="#b12">[13]</ref>, pp. 22. 3. It considers the teamwork process as a learning loop in which teams are characterized as adaptable and dynamically changing over time. Continuous self-management requires a capacity for double-loop learning that allows operating norms and rules to change along with transformation in the wider environment <ref type="bibr" target="#b31">[32]</ref>.</p><p>Each component of the model is explained in Table <ref type="table">1</ref>. According to Dickinson and McIntyre, team leadership and team orientation are 'input' components of teamwork because at least one of these attitudes is required for an individual to participate in a team task. Team leadership can be shown by several team members that is also a prerequisite for a team's being self-managing. In such teams, team members should share the authority to make decisions, rather than having: (a) a centralized decision structure in which one person (e.g. the team leader) makes all the decisions or (b) a decentralized decision structure in which all team members make decisions regarding their work individually and independently of other team members <ref type="bibr" target="#b19">[20]</ref>. So, while the traditional perspective of a single leader suggests that the leadership function is a specialized role that cannot be shared without jeopardizing group effectiveness, when leadership is shared, group effectiveness is achieved by empowering the members of the team to share the tasks and responsibilities of leadership <ref type="bibr" target="#b21">[22]</ref>.</p><p>In the Dickinson and McIntyre model, the components of monitoring, feedback, and backup are the intermediate processes for ensuring effective teamwork. Finally, the 'output' component is coordination because it defines the performance of the team. Communication is a transversal component of particular importance, because it links the other components. To build software effectively, there is a need for tight coordination among the various efforts involved so that the work is completed and fits together <ref type="bibr" target="#b24">[25]</ref>. Table <ref type="table">1</ref> The Dickinson and McIntyre teamwork model: definitions of teamwork components.</p><p>Team orientation: Refers to the team tasks and the attitudes that team members have towards one another. It reflects an acceptance of team norms, the level of group cohesiveness, and the importance of team membership, e.g. assigning high priority to team goals participating willingly in all relevant aspects of the team Team leadership: Involves providing direction, structure, and support for other team members. It does not necessarily refer to a single individual with formal authority over others. Team leadership can be shown by several team members, e.g. explaining to other team members exactly what is needed from them during an assignment listening to the concerns of other team members Monitoring: Refers to observing the activities and performance of other team members and recognizing when a team member performs correctly. It implies that team members are individually competent and that they may subsequently provide feedback and backup, e.g. being aware of other team members' performance recognizing when a team member performs correctly Feedback: Involves the giving, seeking, and receiving of information among team members. Giving feedback refers to providing information regarding other members' performance. Seeking feedback refers to requesting input or guidance regarding performance and to accepting positive and negative information regarding performance, e.g. responding to other members' requests for information about their performance accepting time-saving suggestions offered by other team members Backup: Involves being available to assist other team members. This implies that members have an understanding of other members' tasks. It also implies that team members are willing and able to provide and seek assistance when needed, e.g. filling in for another member who is unable to perform the task helping another member correct a mistake Coordination: Refers to team members executing their activities in a timely and integrated manner. It implies that the performance of some team members influences the performance of others. This may involve an exchange of information that subsequently influences another member's performance. Coordination represents the output of the model and reflects the execution of team activities such that members respond as a function of the behavior of others, e.g. passing performance-relevant data to other members in an efficient manner facilitating the performance of other members' jobs Communication: Involves the exchange of information between two or more team members in the prescribed manner and using appropriate terminology. Often, the purpose of communication is to clarify or acknowledge the receipt of information, e.g. verifying information prior to making a report acknowledging and repeating messages to ensure understanding</p><p>In the rest of the paper, we will explain the challenges that arise when introducing agile methods by appeal to the mechanisms that influence teamwork that are suggested by Dickinson and McIntyre <ref type="bibr" target="#b12">[13]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Research method</head><p>We designed a single-case holistic study <ref type="bibr" target="#b48">[49]</ref> of a project that used Scrum, focusing on mechanisms that influence teamwork. When designing the study, we focused on human sensemaking and on how the mechanisms of teamwork were understood by the people involved. Given that our study was an interpretative field study, we used the seven principles for conducting such studies that were proposed by Klein and Myers <ref type="bibr" target="#b23">[24]</ref> in order to determine the main choices that were related to research method. Table <ref type="table">2</ref> gives an overview of these principles and a description of how we used them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Study context</head><p>The field study was conducted in a company that introduced Scrum in order to improve their ability to deliver iteratively and on time, increase quality, and improve teamwork. The company has three regional divisions with one separate ICT division. The ICT division consists of a consulting department, an IT management department, and a development department. The ICT division develops and maintains a series of off-the-shelf software products that are developed in-house, in addition to software development projects for outside customers. During the study, the development department had 16 employees, divided into a Java and a .Net group.</p><p>The goal of the project studied was to develop a plan and coordination system for owners of cables (e.g. electricity, fiber) and pipes (water, sewer). We refer to the project as ''Alpha", because this was the first project for which the company used agile methods, in this case Scrum. Alpha produced a combination of textual user interfaces and map functionality. Alpha was to use a commercial package for the map functionality, which was to be customized by a well-known subcontractor located in another city. The subcontractor could only deliver their part of the system 4 weeks before the first deliverable to the customer. This was recognized as a risk, but it was decided that it would be even riskier to develop this component internally. The company would also be responsible for maintenance and support after final installation. Four thousand hours, six developers, one Scrum master, and a product owner were allocated to the project. The product owner was employed by the same company as the developers and acted as a representative for the client, which was the local government of a Norwegian city. Internally, there were plans for reusing deliveries from Alpha and to re-sell the product to other public departments when it was finished. An extra 800 h were allocated to achieve this aim. Before Alpha was begun in May 2006, some initial architectural work was done and some coding activities had started. Alpha used .Net technology and was supposed to last for 10 months.</p><p>The developers had usually worked alone on projects divided into modules or on smaller projects, so Alpha was the first experience of working on a larger project for most.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Data sources and analysis</head><p>The two first authors conducted direct observation and collected documents throughout the whole project. In addition, we interviewed the Scrum master, product owner, and developers (Table <ref type="table" target="#tab_0">3</ref>). The interview guide covered the components in the Dickinson and McIntyre model in addition to questions related to Scrum (Appendix A).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Table 2</head><p>The use of Klein and Myers' principles in this field research.</p><p>The principles for interpretive field research <ref type="bibr" target="#b23">[24]</ref> How we used each principle 1. The fundamental principle of the hermeneutic circle We improved our understanding of the project by moving back and forth between phases and events. The project had three main phases, which had different teamwork characteristics. For each of the phases, we described concrete events. The data analysis involved multiple researchers having ongoing discussions about the findings 2. The principle of contextualization To clarify for our readers how situations emerged, we describe the work and organization of the company, as well as the context of the project we used to study teamwork 3. The principle of interaction between researchers and subjects</p><p>The researchers' understanding of the project developed through observations, interviews and discussions with the team participants in the coffee breaks and during lunch. We discussed project status, progress, and how issues were perceived by team participants 4. The principle of abstraction and generalization</p><p>We describe our findings and relate them to the model of We visited the team once or twice a week, conducting a total of 60 observations, each of which lasted from 10 min to 8 h. We observed project meetings and developers working. We often discussed Alpha's status and progress, and how team participants perceived issues during their coffee breaks and lunch. Notes were taken on dialogues, interactions, and activities. The dialogues were transcribed and integrated with notes to produce a detailed record of each session. We also collected Scrum artifacts, such as product backlogs, sprint backlogs, and burn-down charts. All data from the interviews, observations, and documents were imported into a tool for analyzing qualitative data, Nvivo (www.qsrinternational.com). We categorized interesting expressions, observations, and text from documents, using the teamwork concepts proposed by Dickinson and McIntyre as the main categories.</p><p>We used a variety of strategies to analyze the material <ref type="bibr" target="#b26">[27]</ref>. First, we described the project and context in a narrative to achieve an understanding of what was going on in the project. Then, we described aspects of teamwork using Dickinson and McIntyre's model by pointing to events in three main phases of the project, which had different teamwork characteristics.</p><p>In the analysis, we emphasized how events were interpreted by different participants in the project. Material to describe an event was taken across all sources and synthesized, as shown in the example in Fig. <ref type="figure" target="#fig_2">2</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Results: teamwork in an agile project</head><p>The team that worked on Alpha organized the project according to generally recommended Scrum practices. Plans were made at the beginning of each sprint, after the team had reviewed what was produced in the previous sprint. Features were recorded in the sprint backlog. The team that worked on Alpha held three project retrospectives to identify and discuss problems and opportunities that arose during the development process. Daily meetings were organized throughout the project, though these were less frequent in the last two sprints. These meetings were usually about updating the others on progress, development issues, and the project in general. The daily meetings we observed lasted from 10 to 35 min, but were usually shorter than 15 min. The product owner, who was situated in another city, often participated in these meetings by telephone. He participated because both he and the Scrum master thought that it was important to share information constantly and participate in the decision-making process.</p><p>Alpha began in May 2006, with the first installation planned for October and the final installation for November 2006. However, the first installation was not approved until December 2006 and from January 2007, two developers continued working with change requests until the final installation was approved in October 2007. Five of the sprints lasted 1 month, the sprint during summer for two. Fig. <ref type="figure" target="#fig_3">3</ref> shows major events in the project together with a project-participant satisfaction graph. This figure was created by the team in the final project retrospective and was based on a timeline exercise <ref type="bibr" target="#b11">[12]</ref>. To create the project-participant satisfaction graph, each team member first drew his own graph for the emotional ups and downs during the project, after which the graphs were merged.</p><p>In the initial planning phase, before coding began, several meetings were used to discuss the overall architecture, and decide on the technology and development platform. As can be seen from Fig. <ref type="figure" target="#fig_3">3</ref>, the team was frustrated in this period, because of what the team described as ''endless discussion without getting anywhere". After Scrum was introduced and code writing began, the team was more satisfied with Alpha. In the first retrospective, the team itself concluded that the team members were taking responsibility, that they were dedicated to the project, and that the team was protected against external issues. Meetings and work were perceived as well-coordinated. During the first retrospective, a developer said:</p><p>Earlier we worked more alone, and when you got a project doomed to failure, you would get a lot of negative response. That was unpleasant. Now we share both the risk and opportunities.</p><p>The team was satisfied with their performance in sprints 1-4. However, in sprint 5, problems with integrating a deliverable from the subcontractor emerged, which resulted in the two last sprints being chaotic and the project being delayed. During this period, we saw many empty pizza boxes in the office space, which indicated that the developers were working late. Developers told us they also worked at weekends. The team became less satisfied, as shown in Fig. <ref type="figure" target="#fig_3">3</ref>.</p><p>However, after the client had approved the first installation, the team became more satisfied. In the last retrospective, the team described the project as a good one, except for the problems related to the deliverable from the subcontractor. Then again, the team saw this as something beyond their control.</p><p>Despite the teams' overall satisfaction with the teamwork, throughout the project we observed problems with completing the backlog and following the sprint plan, unproductive meetings, developers often being silent in the planning meetings, and developers often reporting working on issues other than those that it had been initially planned to work on. In addition, the developers received little feedback when talking about what they were doing. In what follows, we will use the data we collected to try to explain some of our observations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">Introducing Scrum: sprints 1-2</head><p>The project leader participated in a Scrum master certification course. The first sprint was initiated with a two-day Scrum course. The first day was spent on introducing Scrum to the whole development department, the second on planning the first sprint for Alpha.</p><p>The first sprint completed most of the backlog, and the team was satisfied with the progress. However, in the first retrospective (see Fig. <ref type="figure">4</ref>), the team reported problems with both defining a stable sprint backlog and finishing it. We observed these problems as well. The team also ended up working on tasks that were not discussed or identified during the sprint planning meeting.</p><p>In this company, each team member is usually assigned to work on a specific software module from the beginning to the end. This way of working is known as an isomorphic team structure <ref type="bibr" target="#b20">[21]</ref>. The advantages with this structure are that it is organizationally Fig. <ref type="figure">4</ref>. From the review and retrospective meeting in sprint 2. simple, it allows many tasks to be completed in parallel, and task responsibilities can be clearly defined and understood. The Scrum master subscribed to this view [interview]:</p><p>Let the person who knows most about the task perform it! We cannot afford several people doing the same thing in this project. We need to continue working as we have done before.</p><p>The team mostly kept this structure after introducing Scrum. A developer said [interview]:</p><p>Because we have to deliver every month, there is never time to swap tasks.</p><p>Because of the division of work, the developers typically created their own plan for their own module, often without discussing it with the team. A developer commented [interview]: Some are more motivated by the perfect technical solution, than thinking of when things need to be done.</p><p>In this phase, one developer even implemented features for future projects, without informing the others (this kind of behavior is often referred to as decision hijacking <ref type="bibr" target="#b2">[3]</ref>). This was discussed in a daily stand-up of the second sprint: Developer: The customer databases will be used by several applications, so I have implemented support for dealing with various technologies, including Oracle. It took a lot of time. Scrum master: Did we not agree on postponing this? Developer: We need this later and now it is done. This illustrates how developers prioritized individual goals over team goals, and subsequently a lack of team orientation. As a result of this incident, the Scrum master lost trust in this developer and started to supervise him. Consequently, the developer was not part of the team leadership any more, even when discussing modules where he was seen as the expert. We observed that he was sometimes absent from the daily meetings. This is consistent with findings from Bandow such that if team members do not feel that their input is valued, they may be less willing to share information <ref type="bibr" target="#b3">[4]</ref>.</p><p>The Scrum master also observed that the team was not reporting problems. In interviews, we found that the developers thought that the Scrum master was overreacting to problems stated at the daily meetings, which resulted in the team not reporting problems when the Scrum master was present. After the Scrum master confronted the team with this issue, the situation improved. However, for the rest of the project, the Scrum master still felt that problems were reported too late. This was confirmed by our observations of daily stand-ups.</p><p>In the second retrospective of Alpha, we found two more reasons for problems not being reported: problems were discovered late and they were seen as personal. One developer said: People working alone results in the team not discovering problems, because you do not get feedback on your work.</p><p>Because of the isomorphic team structure, the developers perceived new emerging tasks and new problems as personal; as a result, they did not seek assistance when needed. They focused on their own modules, which resulted in problems with monitoring each other and subsequently with giving feedback and implementing backup behavior. In the second retrospective meeting, one developer said:</p><p>When we discover new problems, we feel we own them ourselves, and that we will manage to solve them before the next meeting tomorrow. But this is not the case, it always takes longer.</p><p>When individuals are independent and have more control over their schedule and the implementation of their tasks, there is less interaction between the group members <ref type="bibr" target="#b25">[26]</ref>. One developer said [Retrospective sprint 2]:</p><p>When it comes to the daily scrum, I do not pay attention when Ann is talking. For me, what she talks about is a bit far off the topic and I cannot stay focused. She talks about the things she is working on. I guess this situation is not good for the project.</p><p>In Alpha, this resulted in problems with communication, giving feedback, and the possibility of monitoring teammates. In addition, team orientation was hindered, because information sharing and feedback was delayed by people not listening. It seemed that the isomorphic team structure resulted in individual goals being seen as more important than team goals.</p><p>In this phase, the team spent more than 100 h rewriting a module. The developer responsible for the module said [interview]: I was supposed to create a database that every project could use. After I had created it, I explained how it was done during a stand-up, and then I went on vacation. Later, when they started using it, they did not understand how it was supposed to be used, and they decided to rewrite the whole module. The team had probably not understood what I was talking about when I explained the database in the daily stand-up. If I had not gone on vacation they would not have needed to do the rewriting. . . another problem is the daily meeting. It's only a short debrief, there is never time to discuss what you are working on.</p><p>The developer did not verify that the team had understood how he had implemented the module (communication), and no one gave feedback to the effect that they did not understand how the module was implemented during the stand-up. In addition to missing monitoring, the lack of communication and feedback was the reason for the rewriting, and the consequence was reduced progress and team efficiency.</p><p>In the second retrospective, the team concluded [retrospective report]:</p><p>The team must work more on the same tasks, and then no one will sit alone. Working alone results in knowledge not being disseminated, and there is no backup. Also, problems are being discovered late and developers not getting feedback on their work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">Everyday work: sprints 3-4</head><p>When the team was getting used to planning and conducting sprints, work was perceived as motivating and developers expressed satisfaction at having something completed early in the project. However, in this phase, many expressed having problems in transferring what was written in the sprint backlog to actual work tasks. Initially, the team viewed this difficulty as being caused by the introduction of ''features" rather than the specification of technical requirements. However, the difficulty seemed to run deeper. One developer expressed: I have the impression that the sprint backlog has been somewhat distanced from what we have really planned to do.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Another stated:</head><p>It is really difficult to get answers to questions, because no-one really knows where we are going. This indicates that the team lacked a clear idea of how to achieve the final result. Applying two different visions for Alpha, one covering the Alpha project and the other future projects, did not help this situation and weakened the team orientation. Team leadership was already weak and was seldom shown by team members other than the Scrum master and the product owner. The product owner described the challenge with giving clear direction, support, and structure to the developers [interview]:</p><p>You need to give an answer according to what you think, and sometimes I'm not certain I'm giving the right answer. . .. and you need to give a quick answer; otherwise the developers will start doing something else.</p><p>The team discussions, communication, and feedback improved in this period. One developer said [interview]:</p><p>Using Scrum forces us to work closer with each other, and the result is more communication.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Another said:</head><p>The good thing about Scrum is that Scrum reminds us to talk to each other about the project.</p><p>However, often, discussions ended without conclusion. One developer said [interview]:</p><p>When we discuss technical issues, it often ends in a kind of ''religious" discussion, and then I give up. And then you let people continue to do what they are doing. This shows a challenge with respect to team leadership. The person leading the discussion does not listen to the concerns of other team members.</p><p>In this period, we observed the structure of the stand-up proposed by Scrum being followed. However there was little communication, coordination, and feedback between the developers in these meetings. One developer said after a stand-up:</p><p>The daily meetings are mostly about reporting to the Scrum master. When he is not there, the meetings are better because then we communicate with each other.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Another developer said:</head><p>When he is in the meeting we often end up only giving a brief report about status and not the issues we need to talk about.</p><p>Without a clear understanding of the system being developed, planning was difficult. In addition, the monthly planning meetings somehow excluded the developers and turned out to constitute communication only between the Scrum master and the product owner. During the retrospective, the team identified a need to spend more time planning, but two of the developers whom we observed being silent in the planning meeting thought that they spent too much time on planning. Nevertheless, a lack of thorough discussion was probably one reason for important tasks sometimes not being identified before the end of each sprint. This reduced the validity of the common backlog, did not strengthen the communication, coordination of tasks or the possibility of giving feedback, and again resulted in the developers focusing more on their own plan, thereby weakening the team orientation.</p><p>Another reason for the developers performing tasks other than those identified in the planning meeting was the need to adapt to the constantly changing environment. The high complexity of the project and open issues regarding technology, client, and subcontractor resulted in a high level of uncertainty when creating the sprint backlog. We observed the team being sensitive to changes in both the internal and external environment. However, the team did not manage to update the plan to adapt to the changing conditions. Subsequently, it was unclear how much progress had been made, which made it difficult to monitor team members' performance.</p><p>Despite the lack of monitoring, the developers did sometimes look at each other's code. One developer described [interview] the difficulty of giving feedback and raised the issue of trust regarding this matter: You look at someone's code, and then you think, that was a strange way of doing it. There is no problem getting criticism from people you feel safe with, but when you get feedback from people you do not like, it is different. It is also difficult to give feedback when you are not 100% sure you know that your way of doing it is better.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.">Emergency Scrum: sprints 5-6</head><p>The major event in this phase was that the deliverable from the subcontractor was delayed, and when it was delivered it was found not to work as intended. The code was unstable and the response time was too long. This came as a surprise to the team. One developer said [interview]:</p><p>This was a shock to us. The end users could not start testing and we had to spend a lot of time trying to fix this. It took almost a month to locate the problems.</p><p>Given that the developers were specialized, only two developers worked on this problem, even at weekends. One developer explained [interview]: It's chaotic now. We work long hours, but I do not do too much. I have done what I was supposed to, and I cannot help them. I do not know anything about what they are doing, so it does not help if I try assist.</p><p>The isomorphic team structure and missing monitoring resulted in a lack of backup behavior.</p><p>The integration problem resulted in a backlog not being finished, but it also became evident that not being strict about the criteria for marking work as having been completed affected this. One developer said [interview]:</p><p>We classified tasks as finished before they were completed and we knew there was still work to be done. It seems that the Scrum master wants to show progress and make us look a little better than we really are. These tasks are then not on the list of the next sprint since they officially are done, but we know there is still some more work needed. Each sprint starts with doing things that we have said were finished and then you know you will not finish the sprint.</p><p>The Scrum master and some team members gave the impression that the team was better than they actually were and this is related to a particular challenge to team leadership, which is known as ''impression management" <ref type="bibr" target="#b31">[32]</ref>. Impression management is a barrier for learning and improving work practices.</p><p>Before this last period began, developers had given priority to the project for 6 months and had worked more than initially planned. Now, new projects began to start, and because the completion of Alpha was planned to release resources at this time, several developers were supposed to start working full-time on the new projects. Alpha started losing resources, and this became a problem because of poor backup. One developer said [interview]: When correcting errors in this phase, each person was responsible for correcting the errors he had introduced. This is not how it should have been done.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>The Scrum master said [interview]:</head><p>We are having problems in one of the modules, but other developers do not want to fix the problem. They want to wait for the developer who wrote the code.</p><p>In this phase, it also became clear that insufficient attention had been paid to long-term planning. One developer said [interview]:</p><p>It turned out that certain parts of the system were simply forgotten. There has been a failure somewhere. . . the product owner and the client asked for things that no one had thought of and that were not in the backlog.</p><p>Two reasons for this omission of certain parts of the system were that the dissemination of information was not coordinated among the team-members and that no one had the responsibility for the overall technical solution. Dissemination of information among the team-members became an even bigger challenge at the end. Because the team was losing resources, key personnel were absent from the daily stand-up, which resulted in the rest of the team having problems in monitoring the progress of the project and in coming to a common understanding of the changing situation.</p><p>After the last planned sprint, only two developers continued to work on the project, in addition to the Scrum master and the product owner. The rest of the team members joined other projects, as had been planned earlier. The two remaining programmers spent 1400 h on finalizing the project (correcting errors and doing more testing). The final testing was done 7 months after the last sprint.</p><p>The client was satisfied with the delivered functionality but not with the system performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Discussion</head><p>We have described the introduction of the agile process Scrum in a software development project, using the teamwork model proposed by Dickinson and McIntyre <ref type="bibr" target="#b12">[13]</ref>, Fig. <ref type="figure" target="#fig_1">1</ref>. We now discuss the case in light of our research question: ''How can we explain the teamwork challenges that arise when introducing a self-managing agile team?" We found the following:</p><p>Dickinson and McIntyre proposed that team leadership and team orientation promote team members' capability to monitor their teammates' performance. This does not seem to be borne out by our case study, in a number of ways. Due to the isomorphic team structure, the developers focused on their own modules and often created their own plan and made their own decisions. In addition, problems were seen as personal. This low team orientation on the part of the developers resulted in them not knowing what the others were doing, and as a result it was difficult to monitor others' performance. The team members seemed to be used to having a very high degree of individual autonomy. This created problems when the team members tried to change their normal way of working to become part of a self-managed team. Our findings confirm previous research by Langfred <ref type="bibr" target="#b25">[26]</ref>, such that there can be a negative effect on team performance when teams are trying to function as a self-managed team when the team members have high individual autonomy. Team leadership was also not distributed as it should be in a self-managing team <ref type="bibr" target="#b31">[32]</ref>. Only a few team-members participated in the decision-making, and the Scrum master focused more on command-and-control than providing direction and support for other team members. The Scrum master even ended up supervising one developer because this developer implemented features for future projects, without informing the others. Because the team-members felt the Scrum master overreacted when they reported problems, they started reporting fewer problems, which again limited the possibility of monitoring each other.</p><p>The Dickinson and McIntyre model suggests that performance monitoring drives both the content of feedback and timely backup behavior. Due to the fact that the team members did not monitor each other much, there was little feedback and almost no backup, which become evident when the team started to lose resources at the end of the project. The team members did provide some positive feedback, but several found it difficult to both give and accept negative feedback. Our findings also confirm the results of previous research by Levesque et al. <ref type="bibr" target="#b27">[28]</ref>, such that when the roles that group members play become increasingly specialized and as a result reduce team redundancy and backup, there is a corresponding decline in the amount of time that team members spend working with or communicating with each other. This is also consonant with Marks et al. <ref type="bibr" target="#b29">[30]</ref>, such that if effective backup is to be provided, teammates need to be informed of each others' work in order to identify what type of assistance is required at a particular time. Marks et al. <ref type="bibr" target="#b29">[30]</ref> identify three ways of providing such backup: (1) providing a teammate with verbal feedback or coaching, (2) physically assisting a teammate in carrying out a task, or (3) completing a task for a teammate when it is observed that the workload is too much for him. These means seems to be missing at Alpha.</p><p>Dickinson and McIntyre argue that, when all the aforementioned teamwork competences occur in unison, they serve synergistically as a platform for team coordination. The Alpha team had problems with all the teamwork competences and as a consequence they had problems coordinating the teamwork. Important tasks were even forgotten. Marks et al. <ref type="bibr" target="#b29">[30]</ref> also argue that when teams have communication problems they are likely to experience problems with coordinating their work.</p><p>According to the Dickinson and McIntyre model, the feedback resulting from team coordination should serve as input back into the team processes. The team identified early on [second retrospective] the need for developers to start working on the same tasks, the lack of backup, problems not being reported, and lack of feedback. The researchers observed, and the team members thought, that the teamwork improved during the course of the project. However, it seemed to be difficult to change the teamwork, because changing meant changing not only the developers' way of working but also organizational structures. The team worked better together in the later phases, but did not improve the team orientation and team leadership in such a way that monitoring was improved. One reason is the observation of what Morgan <ref type="bibr" target="#b31">[32]</ref> defines as ''impression management", when the team gave the impression to be better than they actually were. Impression management is a barrier to learning <ref type="bibr" target="#b31">[32]</ref>. Continuous self-management requires a capacity for learning that allows operating norms and rules to change in response to changes in the wider environment <ref type="bibr" target="#b31">[32]</ref>.</p><p>In the Dickinson and McIntyre model, communication acts as the glue that links together all other teamwork processes. In Scrum, the daily stand-up is the most important mechanism for achieving such communication. Everyone should communicate with everyone else. However, because of problems with team leadership and a lack of monitoring, these meetings were mostly used by the Scrum master for getting an overview of what was going on in the project. Developers were reporting to the Scrum master and not talking to each other. Communication improved when the Scrum master was absent. As a result of the highly specialized skills and corresponding division of work, there was less interaction and communication between the group members. However, this improved in the last phase of the project because by that time, the developers had become accustomed to talking to each other at the daily stand-up.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.">Implications for theory</head><p>The Dickinson and McIntyre model explains most of our observations. However, it does not model any of the critical antecedents and outcomes of the team process. In the case of Alpha, it was obvious that the team had problems becoming a well-functioning team from the beginning, and that this was one reason for the team having problems in self-managing.</p><p>In addition, Dickinson and McIntyre do not describe certain important components, such as trust and shared mental models. We observed that the team had not developed trust at the group level. A lack of trust among the Scrum master and the members of the team was an important reason for why problems were not reported and why a team member was given instructions on what to do. Our findings are consonant with those of Salas et al. <ref type="bibr" target="#b38">[39]</ref>: without sufficient trust, team members will expend time and energy protecting, checking, and inspecting each other as opposed to collaborating to provide value-added ideas. It is evident that trust is a prerequisite for shared leadership, feedback, and communication. Our finding regarding the lack of trust also confirms previous research on trust <ref type="bibr" target="#b3">[4]</ref>, such that team members may not be willing to share information if they fear being perceived as incompetent.</p><p>The team lacked a shared mental model on what the outcome of the project should be. Working cooperatively requires the team to have shared mental models <ref type="bibr" target="#b38">[39]</ref>. Our results are also consonant with Salas et al.'s <ref type="bibr" target="#b38">[39]</ref> findings that without a shared understanding, the individual members may be headed toward different goals, which in turn will lead to ineffective/lack of feedback or assistance. Shared mental models are also a prerequisite for communication, monitoring, and team orientation. In addition, our finding confirms the results of previous research on shared mental models in software development teams, such that not all teams develop increasingly shared mental models over time <ref type="bibr" target="#b27">[28]</ref>.</p><p>Having problems with trust and developing shared mental models could also be a reason why the team did not manage to change the team process more than we observed. In addition, the previous ways of working in the company hindered effective teamwork, and in this setting the team did not succeed in improving their teamwork skills significantly during the project.</p><p>For theory, this study shows that:</p><p>There is a vast literature on teamwork that is very relevant for agile development and that deserves more attention.</p><p>Dickinson and McIntyre's model <ref type="bibr" target="#b12">[13]</ref> should be extended to include trust and shared mental models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.">Implication for practice</head><p>Agile software development emphasizes that teams should be self-managed. However, Scrum and agile methods offer no advice on how shared leadership should be implemented. A practical implication of Langfred's <ref type="bibr" target="#b25">[26]</ref> findings is that, if an organization believes in letting teams be more self-managing, great care must be taken in the implementation. This is especially important when the team members have high individual autonomy.</p><p>The Alpha project was the first big project for most developers. Even though they had worked together for years, they should probably have spent more time together focusing on improving teamwork in the initial phase of the project. The successful teams that Katzenbach et al. <ref type="bibr" target="#b21">[22]</ref> observed all gave themselves the time to learn to be a team. If developers who work together have problems becoming a team, they will also have problems becoming a selfmanaging team.</p><p>What people should do to provide backup is not specified clearly in Scrum. In the literature on self-managed teams, backup behavior has been identified as an important prerequisite for self-management <ref type="bibr" target="#b31">[32,</ref><ref type="bibr" target="#b34">35]</ref>. In our study, highly specialized skills and a corresponding division of work was the most important barrier to achieving backup and then self-management.</p><p>Scrum is not very specific on how to establish monitoring in development teams, although this is implicitly a prerequisite for feedback, coordination, and backup. Combining Scrum with, for example, the practice of pair programming in XP <ref type="bibr" target="#b5">[6]</ref> would improve monitoring, feedback, and backup.</p><p>We believe that our study has the following main implications for practice:</p><p>An isomorphic project structure will hinder teamwork because the division of work will make it more difficult for developers to develop shared mental models, trust each other, communicate, coordinate work, and provide backup. One way of handling this is to organize cross-training and appreciate generalist to build redundancy in the organization <ref type="bibr" target="#b30">[31]</ref>. Self-management should be enabled when starting to use agile methods such as Scrum, and be aware that high individual autonomy may results in problems creating a selfmanaging team. The way in which agile practices are taken up is dependent on the companies' former development process. Changes take time and resources, and for the company in this study, previous practices were sustained throughout their first agile project. The development process should be adjusted for enabling efficient work, by making room for reflection and learning. However, achieving learning in software processes is not trivial.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.">Limitations</head><p>The main limitations of our study are the single-case design and the possibility of bias in data collection and analysis. The fact that we used a single-case holistic design makes us more vulnerable to bias and eliminates the possibility of direct replication or the analysis of contrasting situations. Therefore, the general criticisms about single-case studies, such as uniqueness and special access to key informants, may also apply to our study. However, our rationale for choosing Alpha as our case was that it represents a critical case for explaining the challenges for teamwork that arise when introducing self-managing agile teams. We used Alpha to determine whether we could confirm, challenge, or extend Dickinson and McIntyre's <ref type="bibr" target="#b12">[13]</ref> teamwork model. Our goal was not to provide statistical generalizations about a population on the basis of data collected from a sample of that population. On the contrary, our mode of generalization is analytical, i.e., we used a previously developed theory as a template with which we compared the empirical results of the case study, which is similar to Yin's <ref type="bibr" target="#b48">[49]</ref> concept of Level Two inference.</p><p>Another possible limitation is that we based much of our data collection and analysis on semi-structured interviews <ref type="bibr" target="#b13">[14]</ref>. The use of multiple data sources made it possible to find evidence for episodes and phenomena from more than one data source; we also observed, talked to, and interviewed the team members over a period of 9 months, which made it possible to study the phenomena from different viewpoints as they emerged and changed.</p><p>Could it be that we as researchers influenced the teamwork characteristics by our presence in the project? Our presence and questions might have made the team members more aware of teamwork characteristics, but we do not think their behavior was influenced by our presence. The everyday demands of the projects were high, and we did not observe changes in behavior that seemed to relate to our interview or observation phases.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4.">Future work</head><p>The results of this study point out a number of directions for future research. Firstly, our study highlights several challenges that must be met when self-managing teams are introduced into agile development. Accordingly, further work should focus on identifying and addressing other problems that may arise when introducing agile development.</p><p>Secondly, the extended teamwork model should be used for studying mature agile development teams, in order to get a better understanding of the main challenges in such teams. Also, teams using shorter sprints (e.g. 2-3 weeks) should be studied, since this will give the team more frequent feedback, which affect team learning and the other elements in the Dickinson and McIntyre teamwork model.</p><p>Thirdly, our study tries to answer ''How can we explain the teamwork challenges that arise when introducing a self-managing agile team?" through Dickinson and McIntyre's teamwork model. However, there are other relevant streams of research to address the adoption of methods and technology, e.g. the diffusion of innovation literature <ref type="bibr" target="#b36">[37]</ref>. Other models that attempt to explain the relationship between user perceptions, attitudes and use intentions include the technology acceptance model (TAM) <ref type="bibr" target="#b10">[11]</ref>, and the theory of planned behavior <ref type="bibr" target="#b1">[2]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Conclusion</head><p>We have conducted a nine-month field study of professional developers in a Scrum team. We found that the model of Dickinson and McIntyre <ref type="bibr" target="#b12">[13]</ref>, together with trust and shared mental models, explain our findings. In addition to these teamwork components, highly specialized skills and a corresponding division of work was the most important barrier for achieving effective teamwork. We have also seen that Scrum has several mechanisms in place for supporting the recommendations of the framework, but that many of these mechanisms are not easy to implement in practice.</p><p>Transitioning from individual work to self-managing teams requires a reorientation not only by developers but also by management. Making such changes takes time and resources, but it is a prerequisite for the success of any kind of agile method based on self-management.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>0950-5849/$ -see front matter Ó 2009 Elsevier B.V. All rights reserved. doi:10.1016/j.infsof.2009.11.004</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. The Dickinson and McIntyre teamwork model [13].</figDesc><graphic coords="3,123.42,67.92,340.17,150.92" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Overview of the coding process. Example material from the concept ''team orientation".</figDesc><graphic coords="5,123.42,67.92,340.17,258.18" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Main events in the project and project satisfaction.</figDesc><graphic coords="6,87.87,67.92,425.54,197.12" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 3</head><label>3</label><figDesc>Dickinson and  McIntyre<ref type="bibr" target="#b12">[13]</ref> 5. The principle of dialogical reasoningWe useDickinson and  McIntyre's model to identify areas of investigation in the case. Our assumptions are also based on the general literature of teamwork and self-management Our social background is European6. The principle of multiple interpretationsTo collect multiple, and possibly contradictory interpretations of events we collected data from all participants in the project and from multiple data sources. The case study narrative and findings have been presented to Alpha and led to feedback 7. The principle of suspicion By means of the analysis, we were sensitive to how roles and personalities affected attitudes to teamwork to discover false preconceptions In addition to observations, we also performed interviews with different roles at different levels, and multiple interviews with all team members. This increased the chance of unveiling possibly incorrect or incomplete meanings Data sources.</figDesc><table><row><cell>Source</cell><cell>Comment</cell></row><row><cell>Observations and</cell><cell></cell></row><row><cell>informal dialogues</cell><cell></cell></row></table><note><p><p>Participant observation and observation of the daily stand-up, sprint and planning meetings, sprint reviews, and sprint retrospective as well as other meetings. The 60 observations and informal dialogues were documented in field notes, which also include pictures Interviews</p>We interviewed the Scrum master and three developers in June 2006, five of the developers in September 2006, and all developers, the Scrum master, and the product owner after the project was completed (March 2007). The 17 interviews were all transcribed Documents Product backlog, sprint backlogs, burn-down charts, minutes from review, retrospective and planning meetings</p></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>N.B. Moe et al. / Information and Software Technology 52 (2010) 480-491</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_1"><p>N.B. Moe et al. / Information and Software Technology 52 (2010) 480-491</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgement</head><p>This work was supported by the EVISOFT project, which is partially funded by the Research Council of Norway under Grant 174390/I40.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Appendix A</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.1. Interview guide</head><p>The respondent was informed of the nature of the study and how long the interview will take. The respondent was told why it is important to tape the interview and that only the researchers would have access to the transcript. The respondent was finally asked if he/she would agree to the interview being taped. </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">How do personality team processes and task characteristics relate to job satisfaction and software quality?</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">T</forename><surname>Acuna</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Gomez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Juristo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information and Software Technology</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="627" to="639" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">The theory of planned behavior</title>
		<author>
			<persName><forename type="first">I</forename><surname>Ajzen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Organizational Behavior and Human Decision Processes</title>
		<imprint>
			<biblScope unit="volume">50</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="179" to="211" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Aligning software project decisions: a case study</title>
		<author>
			<persName><forename type="first">A</forename><surname>Aurum</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Wohlin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Porter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Software Engineering and Knowledge Engineering</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="795" to="818" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Time to create sound teamwork</title>
		<author>
			<persName><forename type="first">D</forename><surname>Bandow</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Journal for Quality and Participation</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="41" to="47" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Tightening the iron cage -concertive control in self-managing teams</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Barker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Administrative Science Quarterly</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="408" to="437" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Extreme Programming Explained: Embrace Change</title>
		<author>
			<persName><forename type="first">K</forename><surname>Beck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Anders</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
	<note>second ed.</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Team Roles at Work, Butterworth-Heinemann</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">M</forename><surname>Belbin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993">1993</date>
			<pubPlace>Boston, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Balancing Agility and Discipline: a Guide for the Perplexed</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">W</forename><surname>Boehm</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Turner</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003">2003</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">What type of leadership behaviors are functional in teams? A meta-analysis</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">S</forename><surname>Burke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">C</forename><surname>Stagl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">F</forename><surname>Goodwin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Salas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">A</forename><surname>Halpin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Leadership Quarterly</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="288" to="307" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">What makes teams work: group effectiveness research from the shop floor to the executive suite</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">G</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">E</forename><surname>Bailey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Management</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="239" to="290" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Perceived usefulness, perceived ease of use, and user acceptance of information technology</title>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">D</forename><surname>Davis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">MIS Quarterly</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="319" to="340" />
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Agile retrospectives: making good teams great</title>
		<author>
			<persName><forename type="first">E</forename><surname>Derby</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Larsen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006">2006</date>
			<publisher>Pragmatic Bookshelf</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A conceptual framework of teamwork measurement</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">L</forename><surname>Dickinson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">M</forename><surname>Mcintyre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Team Performance Assessment and Measurement: Theory, Methods, and Applications</title>
		<editor>
			<persName><forename type="first">M</forename><forename type="middle">T</forename><surname>Brannick</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">E</forename><surname>Salas</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">C</forename><surname>Prince</surname></persName>
		</editor>
		<meeting><address><addrLine>NJ</addrLine></address></meeting>
		<imprint>
			<publisher>Psychology Press</publisher>
			<date type="published" when="1997">1997</date>
			<biblScope unit="page" from="19" to="43" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Are case studies more than sophisticated storytelling? Methodological problems of qualitative empirical research mainly based on semi-structured interviews</title>
		<author>
			<persName><forename type="first">T</forename><surname>Diefenbach</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Quality and Quantity</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="875" to="894" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Improvisation in small software organizations</title>
		<author>
			<persName><forename type="first">T</forename><surname>Dybå</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="82" to="87" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Empirical studies of agile software development: a systematic review</title>
		<author>
			<persName><forename type="first">T</forename><surname>Dybå</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Dingsøyr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information and Software Technology</title>
		<imprint>
			<biblScope unit="volume">50</biblScope>
			<biblScope unit="issue">9-10</biblScope>
			<biblScope unit="page" from="833" to="859" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Teams in organizations: recent research on performance and effectiveness</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Guzzo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">W</forename><surname>Dickson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annual Review of Psychology</title>
		<imprint>
			<biblScope unit="volume">47</biblScope>
			<biblScope unit="page" from="307" to="338" />
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">The design of work teams</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Hackman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Handbook of Organizational Behavior</title>
		<editor>
			<persName><forename type="first">J</forename><surname>Lorsch</surname></persName>
		</editor>
		<meeting><address><addrLine>Englewood Cliffs, NJ</addrLine></address></meeting>
		<imprint>
			<publisher>Prentice-Hall</publisher>
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Teamwork quality and the success of innovative projects: a theoretical concept and empirical evidence</title>
		<author>
			<persName><forename type="first">M</forename><surname>Hoegl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">G</forename><surname>Gemuenden</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Organization Science</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="435" to="449" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Autonomy and teamwork in innovative projects</title>
		<author>
			<persName><forename type="first">M</forename><surname>Hoegl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">P</forename><surname>Parboteeah</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Human Resource Management</title>
		<imprint>
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="67" to="79" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Software project management: the manager&apos;s view, Communications of AIS</title>
		<author>
			<persName><forename type="first">J</forename><surname>Jurison</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="volume">2</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">The discipline of teams</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Katzenbach</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">K</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Harvard Business Review</title>
		<imprint>
			<biblScope unit="volume">71</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="111" to="120" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Beyond self-management: antecedents and consequences of team empowerment</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">L</forename><surname>Kirkman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Rosen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Academy of Management Journal</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="58" to="74" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">A set of principles for conducting and evaluating interpretive field studies in information systems</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">K</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D</forename><surname>Myers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">MIS quarterly</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="67" to="93" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Coordination in software development</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">E</forename><surname>Kraut</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">A</forename><surname>Streeter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="69" to="81" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">The paradox of self-management: individual and group autonomy in work groups</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">W</forename><surname>Langfred</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Organizational Behavior</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="563" to="585" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Strategies for theorizing from process data</title>
		<author>
			<persName><forename type="first">A</forename><surname>Langley</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999">1999</date>
			<publisher>Academy of Management</publisher>
			<biblScope unit="page" from="691" to="710" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Cognitive divergence and shared mental models in software development project teams</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">L</forename><surname>Levesque</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Wilson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">R</forename><surname>Wholey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Organizational Behavior</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="135" to="144" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Self-management and self-leadership reexamined: a levels-of-analysis perspective</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">E</forename><surname>Markham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">S</forename><surname>Markham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Leadership Quarterly</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="343" to="359" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">A temporally based framework and taxonomy of team processes</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>Marks</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Mathieu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">J</forename><surname>Zaccaro</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Academy of Management Review</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="356" to="376" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Overcoming barriers to self-management in software teams, Software</title>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">B</forename><surname>Moe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Dingsøyr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Dybå</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="20" to="26" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Images of Organizations</title>
		<author>
			<persName><forename type="first">G</forename><surname>Morgan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006">2006</date>
			<publisher>SAGE publications</publisher>
			<pubPlace>Thousand Oaks, CA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Theoretical reflections on agile development methodologies -the traditional goal of optimization and control is making way for learning and innovation</title>
		<author>
			<persName><forename type="first">S</forename><surname>Nerur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Balijepally</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">50</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="79" to="83" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Challenges of migrating to agile methodologies</title>
		<author>
			<persName><forename type="first">S</forename><surname>Nerur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Mahapatra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Mangalaraj</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">48</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="72" to="78" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">The Knowledge-Creating Company: How Japanese Companies Create the Dynamics of Innovation</title>
		<author>
			<persName><forename type="first">I</forename><surname>Nonaka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Takeuchi</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995">1995</date>
			<publisher>Oxford University Press</publisher>
			<biblScope unit="volume">12</biblScope>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">The Scrum software development process for small teams</title>
		<author>
			<persName><forename type="first">L</forename><surname>Rising</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">S</forename><surname>Janoff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="26" to="32" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">M</forename><surname>Rogers</surname></persName>
		</author>
		<title level="m">Diffusion of Innovations</title>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>The Free Press</publisher>
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
	<note>fourth ed.</note>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Teamwork behaviors -a review and an integration of frameworks</title>
		<author>
			<persName><forename type="first">V</forename><surname>Rousseau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Aube</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Savoie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Small Group Research</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="540" to="570" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Is there a &apos;&apos;big five&quot; in teamwork?</title>
		<author>
			<persName><forename type="first">E</forename><surname>Salas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">E</forename><surname>Sims</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">S</forename><surname>Burke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Small Group Research</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="555" to="599" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Fostering Team Effectiveness in Organizations: Toward an Integrative Theoretical Framework</title>
		<author>
			<persName><forename type="first">E</forename><surname>Salas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">C</forename><surname>Stagl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">S</forename><surname>Burke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">F</forename><surname>Goodwin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">52nd Nebraska Symposium on Motivation</title>
		<meeting><address><addrLine>Lincoln, NE</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Teamworking and knowledge management: a review of converging themes</title>
		<author>
			<persName><forename type="first">J</forename><surname>Sapsed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Bessant</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Partington</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Tranfield</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Young</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Management Reviews</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="71" to="85" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Primavera gets agile: a successful transition to agile development</title>
		<author>
			<persName><forename type="first">B</forename><surname>Schatz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Abdelshafi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="36" to="42" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<author>
			<persName><forename type="first">K</forename><surname>Schwaber</surname></persName>
		</author>
		<author>
			<persName><surname>Beedle</surname></persName>
		</author>
		<title level="m">Agile Software Development with Scrum</title>
		<meeting><address><addrLine>Upper Saddle River</addrLine></address></meeting>
		<imprint>
			<publisher>Prentice Hall</publisher>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">The new product development game</title>
		<author>
			<persName><forename type="first">H</forename><surname>Takeuchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Nonaka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Harvard Business Review</title>
		<imprint>
			<biblScope unit="issue">64</biblScope>
			<biblScope unit="page" from="137" to="146" />
			<date type="published" when="1986">1986</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Team self-management, organizational structure, and judgments of team effectiveness</title>
		<author>
			<persName><forename type="first">J</forename><surname>Tata</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Prasad</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Managerial Issues</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="248" to="265" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Developmental sequence in small groups</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">B W</forename><surname>Tuckman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Psychological Bulletin</title>
		<imprint>
			<biblScope unit="volume">63</biblScope>
			<biblScope unit="page" from="384" to="399" />
			<date type="published" when="1965">1965</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Individual self-management: analysis of professionals&apos; self-managing activities in functional and cross-functional work teams</title>
		<author>
			<persName><forename type="first">M</forename><surname>Uhl-Bien</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">B</forename><surname>Graen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Academy of Management Journal</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="340" to="350" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">The social psychology of innovation in groups</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>West</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Innovation and Creativity at Work: Psychological and Organizational Strategies</title>
		<editor>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>West</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><forename type="middle">L</forename><surname>Farr</surname></persName>
		</editor>
		<imprint>
			<publisher>Chichester</publisher>
			<date type="published" when="1990">1990</date>
			<biblScope unit="page" from="309" to="333" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">K</forename><surname>Yin</surname></persName>
		</author>
		<title level="m">Case Study Research: Design and Methods</title>
		<meeting><address><addrLine>Sage, Thousand Oaks, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="volume">xiv</biblScope>
			<biblScope unit="page">219</biblScope>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
