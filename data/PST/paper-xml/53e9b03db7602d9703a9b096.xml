<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Cluster Computing on the Fly: P2P Scheduling of Idle Cycles in the Internet</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Virginia</forename><surname>Lo</surname></persName>
							<email>lo@cs.uoregon.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer and Information Science</orgName>
								<orgName type="institution">University of Oregon</orgName>
								<address>
									<postCode>97403-1202</postCode>
									<settlement>Eugene</settlement>
									<region>Oregon</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Daniel</forename><surname>Zappala</surname></persName>
							<email>zappala@cs.uoregon.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer and Information Science</orgName>
								<orgName type="institution">University of Oregon</orgName>
								<address>
									<postCode>97403-1202</postCode>
									<settlement>Eugene</settlement>
									<region>Oregon</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Dayi</forename><surname>Zhou</surname></persName>
							<email>dayizhou@cs.uoregon.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer and Information Science</orgName>
								<orgName type="institution">University of Oregon</orgName>
								<address>
									<postCode>97403-1202</postCode>
									<settlement>Eugene</settlement>
									<region>Oregon</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Yuhong</forename><surname>Liu</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer and Information Science</orgName>
								<orgName type="institution">University of Oregon</orgName>
								<address>
									<postCode>97403-1202</postCode>
									<settlement>Eugene</settlement>
									<region>Oregon</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Shanyu</forename><surname>Zhao</surname></persName>
							<email>szhao@cs.uoregon.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer and Information Science</orgName>
								<orgName type="institution">University of Oregon</orgName>
								<address>
									<postCode>97403-1202</postCode>
									<settlement>Eugene</settlement>
									<region>Oregon</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Cluster Computing on the Fly: P2P Scheduling of Idle Cycles in the Internet</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">56CF7108E75A01CAC07873AA12F79D4E</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T09:52+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Peer-to-peer computing, the harnessing of idle compute cycles throughout the Internet, offers exciting new research challenges in the converging domains of networking and distributed computing. Our system, Cluster Computing on the Fly, seeks to harvest cycles from ordinary users in an open access, non-institutional environment.</p><p>We identify four important classes of cycle-sharing applications, each with distinct requirements that call for application-specific scheduling strategies. Our Wave Scheduler exploits large blocks of idle time at night, to provide higher quality of service for deadline-driven workpile jobs, using a geographic-based overlay to organize hosts by timezone. To verify the results of workpile jobs, CCOF sends quizzes to hosts and uses the accuracy of the quiz answers to determine trust ratings. Our PoP Scheduler disperses tasks comprising a point-ofpresence application, using scalable protocols to discover strategically located hosts to meet application-specific requirements for location, topological distribution, and resources.</p><p>The CCOF cycle sharing system encompasses all activities involved in the management of idle cycles: overlay construction for hosts donating cycles, resource discovery within the overlay, application-based scheduling, local scheduling on the host node, and meta-level scheduling among a community of application-level schedulers. Our work with CCOF reveals many of the critical challenges that lie ahead for P2P scheduling systems.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Peer-to-peer computing, the harnessing of idle compute cycles throughout the Internet, offers an exciting new challenge for P2P networks beyond current information sharing applications. Experience has shown that not only are idle cycles widely available throughout the Internet, but in addition, many users are willing to share cycles <ref type="bibr" target="#b13">[14]</ref>, <ref type="bibr" target="#b6">[7]</ref>, <ref type="bibr">[16]</ref>. This creates a compelling opportunity for research in this new juncture between the fields of networking and distributed computing.</p><p>Our research addresses the problem of peer-to-peer computing, which encompasses all of the activities involved with utilizing idle cycles from ordinary users in a distributed, open environment. In contrast to Grid computing <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b11">[12]</ref> and other institution-based cyclesharing systems <ref type="bibr" target="#b15">[17]</ref>, we are targeting an open environment, one that is accessible by the average citizen and does not require membership in any organization. Peer-to-peer computing represents the next step in distributed computing, providing potentially greater computing power than institutional-based projects while also empowering ordinary users. This view of P2P computing is the focus of several other current research projects <ref type="bibr" target="#b12">[13]</ref>, <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b3">[4]</ref>.</p><p>P2P computing in an open environment gives rise to a new generation of resource management problems that are dramatically different from those addressed by traditional scheduling systems, including issues of resource discovery, trust, incentives, fairness, security, and new criteria for evaluating performance. We use the term "P2P scheduling system" to encompass all activities involved in the management of idle cycles: overlay management for hosts donating cycles, resource discovery within the overlay, application-based scheduling, local scheduling on the host node, and metalevel scheduling which involves coordination of efforts among a community of application-based schedulers.</p><p>We believe that peer-to-peer scheduling solutions must be driven by the characteristics and goals of the specific applications to be scheduled. We identify four important classes of problems that are particularly wellsuited to capturing idle cycles in the Internet: infinite workpile, deadline-driven workpile, tree-based search, and point-of-presence applications.</p><p>Popular applications for harvesting idle cycles from ordinary users, such as SETI@home <ref type="bibr" target="#b7">[8]</ref>, are limited to CPU-intensive workpile applications and require donors of cycles to manually coordinate through a centralized web site. More general cycle-sharing systems, such as Condor <ref type="bibr" target="#b15">[17]</ref>, provide automatic scheduling but require a centralized matchmaking service and are limited to members of participating institutions. Our goal is the development of a scheduling infrastructure that supports automatic scheduling of these four broad classes of applications in an open environment.</p><p>In this paper, we discuss the problems faced by P2P scheduling systems that presume an open and large scale environment. We first present a taxonomy of P2P cycle sharing applications and their specific requirements. We then describe the Cluster Computing on the Fly architecture and discusses issues and open problems involved in the design of an open P2P scheduling system. We conclude by illustrating how CCOF addresses some of these problems. In particular, we introduce CCOF's Wave Scheduler, which harvests night time idle cycles by using geographic timezones to organize the hosts, and CCOF's method for verification of results returned by the hosts. We also describe our PoP Scheduler, which utilizes scalable protocols to schedule point-of-presence applications by discovering strategically located hosts to meet application-specific requirements for location, topological distribution, and available resources.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. P2P SCHEDULING SYSTEMS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. P2P Cycle-sharing Applications</head><p>We organize P2P cycle-sharing applications into four classes whose scheduling needs are starkly distinct, calling for individualized scheduling services that are tailored to those needs.</p><p>1) Infinite workpile applications: These applications consume huge amounts of compute time under a master-slave model in which the master delivers code to as many hosts as possible, over long periods of time. Each host computes intensively and then returns the results back to the master node. The workpile application is "embarrassingly parallel" in that there is no communication at all between slave nodes. Examples of infinite workpile applications include SETI@home <ref type="bibr" target="#b6">[7]</ref>, the Stanford Folding Project <ref type="bibr" target="#b10">[11]</ref>, and numerous mathematical applications ranging from number theory to cryptography <ref type="bibr" target="#b13">[14]</ref>.</p><p>Infinite workpile applications need scheduling that can (a) automatically identify large blocks of idle cycles and (b) support validation of results. Performance may be measured by some large-grained metric representing the yield of idle cycles, such as tasks completed per day or week. For the protection of the wider community, safeguards need to be installed to provide some notion of fairness among competing workpile jobs, as well as security against denial-of-service attacks from a malicious job that preys on the generosity of participating hosts.</p><p>2) Workpile applications with deadlines: Deadlinedriven workpile applications are similar to infinite workpile applications, but their needs for compute cycles are more moderate. These applications are deadline-driven because they require that results be returned within a specified deadline (on the order of days or weeks). Examples of this class of application include compute intensive jobs: complex insurance analysis, simulation experiments with a large parameter space, 3D modeling and ray tracing code. These jobs needs to be completed to meet a business presentation deadline, research publication deadline, or school project deadline.</p><p>While many scheduling strategies are suitable for infinite workpile jobs with and without deadlines, the urgency of deadlines calls for more aggressive approaches for discovery and scheduling of cycles.</p><p>3) Tree-based search applications: This class of applications requires substantial compute cycles, with loose coordination among subtasks requiring low communication overhead. Distributed branch-and-bound algorithms, alpha-beta search, and recursive backtracking algorithms are used for a wide range of optimization problems; these computationally intensive state-space search algorithms are ideal candidates for P2P scheduling.</p><p>Distributed branch-and-bound algorithms use a tree of slave processes rooted in a single master node. The tree dynamically grows as slave processes expand the search space and is dynamically pruned as subspaces leading to costly solutions are abandoned. There is a small amount of communication among slave nodes to inform other slaves of newly discovered lower bounds.</p><p>The scheduler manages the dynamic population of host nodes by continuously providing new hosts while the search tree is growing. It must also support communication among slave nodes, either indirectly through the master or directly from slave to slave.</p><p>4) Point-of-presence applications: PoP applications typically consume minimal cycles but require placement throughout the Internet (or throughout some subset of the Internet). The dispersement of tasks from a PoP application is driven by specific requirements of the job. For example, distributed monitoring applications (security monitoring, traffic analysis, etc.) require widely and evenly distributed placement as well as placement at strategic locations. Testing of distributed protocols requires placement of test-bots </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. An Open P2P Cycle-Sharing Architecture</head><p>In the CCOF architecture, hosts join a variety of community-based overlay networks, depending on how they would like to donate their idle cycles. Clients then form a compute cluster on the fly by discovering and scheduling sets of machines from these overlays. The basic service offered by CCOF is best-effort in the sense that any host may preempt guest code at any time. Hosts retain local control and can thus offer a range of quality of service options.</p><p>The components of this architecture, as shown in Figure <ref type="figure" target="#fig_0">1</ref>, highlight the many complex research issues to be addressed in the design of an open P2P scheduling system which include the following:</p><p>1) Overlay management of host communities: An important area of research for P2P computing lies in the organization of communities of hosts willing to share idle cycles. One way to organize such communities is through the creation of overlay networks based on factors such as interest, geography, performance, trust, institutional affiliation, or generic willingness to share cycles. Communities may span multiple organizations, such as a collaborative research project among several research groups. Chess enthusiasts, or participants in the Intel Philanthropic project [16] may form a community based on their hobbies or a spirit of volunteerism. Users may form nested communities based on trust, such as a group of family and friends, co-workers, and customers. We assume that it is possible to exclude untrusted hosts from the overlay using a central certificate-granting authority, as proposed by Pastry <ref type="bibr" target="#b19">[21]</ref>.</p><p>This arena of research exceeds the immediate bounds of scheduling research per se, but has a direct impact on it. Past work on overlay networks <ref type="bibr" target="#b18">[20]</ref>, <ref type="bibr" target="#b22">[24]</ref>, <ref type="bibr" target="#b19">[21]</ref>, trust and reputation systems, performance analysis and monitoring all serve as the foundations for new work in this direction.</p><p>2) Resource discovery: The problem of resource discovery is extremely difficult in an open environment in which the set of participating hosts is potentially very large and highly dynamic. Resource discovery takes on new dimensions when the resource (compute cycles) is perishable, cannot be shared, and is dynamic. Moreover, the search for idle cycles may be coupled with the need for other resources such as memory and data. Work has already begun in this area, much of it focused towards institutional and Grid Computing environments. <ref type="bibr" target="#b14">[15]</ref>, <ref type="bibr" target="#b15">[17]</ref>, <ref type="bibr" target="#b8">[9]</ref>.</p><p>We conducted a comprehensive study of generic searching methods in a highly dynamic environment for workpile applications <ref type="bibr" target="#b24">[26]</ref>. We compared four scalable search methods: expanding ring, advertisement-based, random walk and rendezvous point. We model a variety of workloads, simple scheduling strategies and stabilities of hosts. Our preliminary results show that under light workloads, rendezvous point performs best with respect to job completion, while under heavy workloads its performance falls below the other techniques. We expected rendezvous point to consistently outperform the other search techniques because of its inherent advantage in gathering knowledge about the idle cycles. However, in a peer-to-peer environment, which satisfies requests on-demand, large jobs may dominate, resulting in delays for scheduling smaller jobs. With respect to message-passing overhead, rendezvous point dramatically outperforms the other discovery strategies.</p><p>3) Application scheduling: The application scheduler is responsible for selection of hosts for a P2P computation from a pool of candidates, for exporting the code to the hosts, and for managing and verifying returned results. Application scheduling requires an analysis of both the application's needs and the nature of the offered resources. The scheduler's decision about which hosts to select becomes very complex since trust, performance, and fairness all come into play. Strategies such as oversubscription and duplication scheduling, may be used for maximum flexibility. Furthermore, if coordination across a set of host nodes is required, it may be desirable to organize the selected hosts into a new overlay to support the interprocess communication needs of the application, further complicating the host selection process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4) Local scheduling:</head><p>The local scheduler tracks idle cycles and negotiates with the application scheduler using local criteria for trust, fairness, and performance to decide which tasks to accept. It also interacts with its own native scheduler to inject those jobs into the scheduling queue.</p><p>Because each host may implement its own policies, we envision Quality of Service as an important feature of P2P computing. The job of a local scheduler can be viewed as an admission control problem, similar to that faced by integrated services networks <ref type="bibr" target="#b5">[6]</ref>. Some hosts may provide guaranteed service by accepting only CCOF jobs -they have no local tasks that may preempt guest code. Likewise, a host may offer predictive service by providing a statistical performance estimate based on past behavior.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5) Incentives and fairness:</head><p>The choice of policies and mechanisms for fairness in a P2P scheduling system is a non-trivial decision since the notion of fairness is itself open to debate. Several current projects require strict fairness, fairly tightly controlled accounting of cycles and resources consumed through a variety of economic and social models (credit-based systems, bartering systems and auction-based systems, ticketbased systems) <ref type="bibr" target="#b12">[13]</ref>, <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b0">[1]</ref>. Our philosophy is much more open -we presume that the donors of idle cycles are more relaxed: they are concerned with immediate access to idle cycles but not cycle-for-cycle equality. Under this model of long-term fairness, it is still necessary to enforce some kind of accounting. In either case, interesting research questions arise with respect to what incentives work best, how to measure contributions and usage for fairness in a large scale and dynamic environment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6) Trust and reputation:</head><p>Trust and reputation systems are needed throughout P2P scheduling for the formation of trust-based overlays as described above, for local hosts to use when deciding whether to accept or reject tasks from an application, and for applications to use to select host nodes from multiple candidates. Several new trust systems for P2P networks have recently been developed that can potentially be utilized in an open environment <ref type="bibr" target="#b20">[22]</ref>, <ref type="bibr" target="#b21">[23]</ref>. However, several difficult problems remain: how to effectively utilize the trust values to make scheduling decisions and also how to determine whether the results returned by a host are correct or not. In Section 3 we describe how our CCOF application scheduler probes host nodes using undetectable quiz codes to develop a trust rating for each host, as well as to validate returned results.</p><p>7) Security: How can a host defend itself against denial of service attacks, such as when a malicious node occupies large numbers of hosts with useless code? Or worse yet uses hosts to launch a distributed denial of service attack or a worm?</p><p>We assume that hosts protect themselves from a variety of attacks by running guest code within a virtual machine monitor, creating a "sandbox" that protects the host and controls resource usage <ref type="bibr" target="#b2">[3]</ref>. Despite this protection, hosts must still protect their resources from being misused. Preventing denial-of-service attacks, particularly those that are launched from the cluster itself, is a difficult problem. Likewise, the CCOF system itself can be abused if malicious users schedule large numbers of useless tasks.</p><p>One possibility for coping with these problems is for hosts to deny network access for untrusted clients, using the trust and reputation systems discussed above. Likewise, users can give priority to projects they have deemed trustworthy through any outside form of communication. In cases where a greater degree of openness is desired, it may be possible to use network monitors to detect and take action against attacks. We are working closely with fellow researchers at the University of Oregon who are working on distributed detection of worms and denial-of-service attacks.</p><p>8) Performance monitoring: The P2P scheduling environment is radically different from traditional scheduling domains. Evaluation of scheduling performance is thus faced with several challenges. What are are the appropriate metrics, benchmarks, performance monitoring tools and techniques for an open P2P scheduler? What kinds of user interfaces, testing, simulation, and monitoring tools will be most effective?</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. CLUSTER COMPUTING ON THE FLY</head><p>In this section we present CCOF's support for two classes of P2P applications: deadline-driven workpile applications and point-of-presence applications. Workpile jobs, with their heavy demand for free cycles, are scheduled using CCOF's Wave Scheduler, which captures available night time cycles in timezones from east to west. CCOF also provides a simple yet effective quiz system for verifying the results returned by hosts. CCOF scheduling of PoP applications involves fully distributed algorithms for careful placement of tasks according to topological or performance-based criteria.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Wave Scheduling for Workpile Applications</head><p>Wave scheduling seeks to capture cycles from the millions of machines that lie completely idle at night. By following night timezones around the globe, it continuously gives workpile tasks dedicated access to cycles without interruption from users reclaiming their machines. Wave scheduling is thus particularly useful for workpile applications with deadlines since it provides a higher guarantee of ongoing available cycles.</p><p>Wave scheduling was motivated by the notion of prime time v. non-prime time scheduling regimes enforced by parallel job schedulers <ref type="bibr" target="#b23">[25]</ref>, <ref type="bibr" target="#b17">[19]</ref> and by wave scheduling in systolic computing systems.</p><p>The CCOF Wave Scheduler uses a CAN-based DHT overlay to organize nodes located in different time zones. Our wave scheduling protocol functions as follows (see Figure <ref type="figure" target="#fig_1">2</ref>).</p><p>1) Timezones in the CAN overlay: . We select one dimension of the d-dimensional mesh to represent time zones. For example, a 1 x 24 CAN space could be divided into hourly zones 1 through 23 based on its second dimension.</p><p>2) Host nodes join the overlay: A host node that wishes to offer its night time cycles knows which time zone it occupies, say zone 8. It randomly selects a node label in zone 8 such as (0.37, 7.12) and sends a join message to that node. According to the CAN protocol, the message will reach the physical node in charge of CAN node (0.37, 7.12) who will split the portion of the CAN space it owns, giving part of it to the new host node.</p><p>3) Application scheduler selects initial nightzone: The scheduler for a workpile application knows which timezones are currently nightzones. It selects one of these nightzones (based on some nightzone selection criteria) and decides on the number H of hosts it would like to target. This number could be an over-estimation of the number it would ideally like to schedule in order to achieve more flexibility.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4) Application scheduler selects set of target hosts:</head><p>The scheduler randomly generates a collection of H node labels in the target nightzone. It sends a request message to each target host using CAN routing which finds the physical host managing that host node. After negotiations, the application scheduler selects a subset of those nodes to ship tasks to. It can make its selection based on trust or other criteria.</p><p>5) Migration to next timezone: When morning comes to a host node, it selects a new target nightzone, randomly selects a host node in that nightzone for migration, and after negotiating with that host, migrates the unfinished task to the new host.</p><p>6) Returning results to the application: Whenever a task finishes computing its results on a host node, it sends the results directly back to the application. If the application is offline, it can store the results in the CAN distributed file system. The application can later retrieve results using the DHT lookup.</p><p>We are investigating the use of wave scheduling for deadline-driven workpile tasks to see if it compares favorably with two other models: centralized masterslave approach and distributed master-slave approach. In both latter cases, idle nodes advertise their availability dynamically to the masters and the only option is to sleep when cycles are withdrawn. Our current evaluation includes application harvest yield (results returned per day); utilization (fraction of idle cycles being consumed relative to demand); host impact; and overlay traffic generated by the scheduler, by task migration, and return of results.</p><p>Our current implementation and evaluation is simulation-based, but in the future, we would like to do empirical experiments assuming we can find sufficient numbers and placements of volunteer nodes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Trust-based Verification for Workpile Applications</head><p>We validate the correctness of results returned by host nodes to the workpile application using a quiz mechanism. The application node sends a set of quizzes to the hosts whose solutions are known beforehand. Based on the hosts performance on the quizzes, the application can then decide whether to accept or reject the results. We are investigating two methods for quizzing hosts. One method uses quizzes that are distinct from the actual application code. These are packaged so that a (malicious) host cannot distinguish quiz code from genuine application code. If the host passes its quiz, it will then be sent another task, this one containing application code. The second method embeds simple short quizzes into the application code. Quiz and application results are periodically sent back from the host to the application. If the application node receives wrong quiz answers, it can immediately reschedule the task on another host. Note that for both methods, when a host does return correct (or incorrect) results, this information can be used to give that host an appropriate trust ranking. This information is stored in a reputation system such as Eigenrep <ref type="bibr" target="#b21">[23]</ref> or TrustMe <ref type="bibr" target="#b20">[22]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Scheduling Point-of-Presence Applications</head><p>Our investigation of scheduling PoP applications is motivated by collaborative work at the University of Oregon on distributed security monitoring systems and distributed massively multiplayer games.</p><p>Topological distribution of monitoring tasks involves placement of these tasks on selected hosts throughout the overlay such that ordinary nodes are within t hops of j host nodes. This problem has been proposed abstractly as leader election in distributed systems, and as the dominating set problem in graph theory.</p><p>This task is much more difficult in an open, large scale environment. One of our approaches uses a torusbased overlay similar to CAN <ref type="bibr" target="#b18">[20]</ref> that provides its regular node labeling scheme and Lee distances <ref type="bibr" target="#b16">[18]</ref> to elect leaders using only local computation in constant time. Another approach is a fully distributed protocol that uses gossiping in a tournament-style backoff algorithm. Initially, each node says hello to its k-hop neighbors. Nodes then gossip with its immediate neighbors and either persists as a leader or backs-off based on the information each neighbor provides on the number of non-leader nodes it covers. We have developed several versions of this algorithm that trade off communication overhead and latency for accuracy. We are also investigating placement of game-bots throughout the Internet that meet varying level of performance with respect to network bandwidth and computational power.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. CCOF Architecture</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Task initiation and migration in wave scheduling</figDesc></figure>
		</body>
		<back>

			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This work was supported in part by the National Science Foundation under grant ANI-9977524.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Our-Grid: An Approach to Easily Assemble Grids with Equitable Resource Sharing</title>
		<author>
			<persName><forename type="first">N</forename><surname>Andrade</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Cirne</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Brasileiro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Roisenberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">9th Workshop on Job Scheduling Strategies for Parallel Processing</title>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Implicit Coscheduling: Coordinated Scheduling with Implicit Information in Distributed Systems</title>
		<author>
			<persName><forename type="first">A</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2001-08">August 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Xen and the Art of Virtualization</title>
	</analytic>
	<monogr>
		<title level="m">ACM Symposium on Operating Systems Principles</title>
		<imprint>
			<date type="published" when="2003-10">October 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<ptr target="http://boinc.berkeley.edu" />
		<title level="m">BOINC: Berkeley Open Infrastructure for Network Computing</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">An Open Peer-to-Peer Infrastructure for Cycle-Sharing</title>
		<author>
			<persName><forename type="first">A</forename><surname>Butt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Fang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Midkiff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Vitek</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Supporting Real-Time Applications in an Integrated Services Packet Network: Architecture and Mechanism</title>
		<author>
			<persName><forename type="first">David</forename><forename type="middle">D</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Scott</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lixia</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGCOMM</title>
		<imprint>
			<date type="published" when="1992-08">August 1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Seti@home: An experiment in public-resource computing</title>
		<author>
			<persName><forename type="first">D</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Cobb</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Korpela</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lebofsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Werthimer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="page" from="56" to="61" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">SETI@home: An Experiment in Public-Resource Computing</title>
		<author>
			<persName><forename type="first">D</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Cobb</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Korpela</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lebofsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Werthimer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">45</biblScope>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">High-Performance Schedulers</title>
		<author>
			<persName><forename type="first">F</forename><surname>Berman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The GRID Blueprint for a New Computing Infrastructure</title>
		<editor>
			<persName><forename type="first">I</forename><surname>Foster</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">C</forename><surname>Kesselman</surname></persName>
		</editor>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Grid Computing Making the Global Infrastructure a Reality</title>
		<author>
			<persName><forename type="first">F</forename><surname>Berman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Fox</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Hey</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
			<publisher>John Wiley and Sons Ltd</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">@</forename><surname>Folding</surname></persName>
		</author>
		<author>
			<persName><surname>Home</surname></persName>
		</author>
		<ptr target="http://folding.stanford.edu/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<author>
			<persName><forename type="first">I</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kesselman</surname></persName>
		</author>
		<title level="m">The GRID Blueprint for a New Computing Infrastructure</title>
		<imprint>
			<publisher>Morgan Kaufmann Publishers, Inc</publisher>
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">SHARP: An Architecture for Secure Resource Peering</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Chase</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Chun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Schwab</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Vahdat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP</title>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Computing Science -Collective Wisdom</title>
		<author>
			<persName><forename type="first">B</forename><surname>Hayes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">American Scientist</title>
		<imprint>
			<date type="published" when="1998-04">March-April 1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">A Peer-to-Peer Approach to Resource Location in Grid Environments</title>
		<author>
			<persName><forename type="first">A</forename><surname>Iamnitchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Nurmi</surname></persName>
		</author>
		<ptr target="http://www.intel.com/cure/" />
	</analytic>
	<monogr>
		<title level="m">Symp. on High Performance Distributed Computing</title>
		<imprint>
			<date type="published" when="2002-08">Aug. 2002</date>
		</imprint>
	</monogr>
	<note>The Intel Philanthropic Peer-to-Peer Program</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Condor -A Hunter of Idle Workstations</title>
		<author>
			<persName><forename type="first">M</forename><surname>Litzkow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Livny</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">W</forename><surname>Mutka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Eighth International Conference on Distributed Computing Systems</title>
		<imprint>
			<date type="published" when="1988-06">June 1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Lee Distance, Gray Codes and the Torus. Intl</title>
		<author>
			<persName><forename type="first">V</forename><surname>Lo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Bose</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Broeg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Telecomm. Systems</title>
		<imprint>
			<date type="published" when="1998-10">Oct 1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Job Scheduling for Prime Time vs. Non-Prime time</title>
		<author>
			<persName><forename type="first">V</forename><surname>Lo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Mache</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">th IEEE International Conference on Cluster Computing (CLUSTER 2002)</title>
		<imprint>
			<date type="published" when="2002-09">Sep 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A Scalable Content Addressable Network</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ratnasamy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Francis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Handley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Karp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGCOMM</title>
		<imprint>
			<date type="published" when="2001-08">Aug. 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Pastry: Scalable, Decentralized Object Location, and Routing for Large-Scale Peer-to-Peer Systems</title>
		<author>
			<persName><forename type="first">A</forename><surname>Rowstron</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Druschel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">th IFIP/ACM Int&apos;l Conf</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<date type="published" when="2001-11">Nov. 2001</date>
		</imprint>
	</monogr>
	<note>on Distributed Systems Platforms</note>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">TrustMe: Anonymous Management of Trust Relationships in Decentralized P2P Systems</title>
		<author>
			<persName><forename type="first">Aameek</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ling</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Intl. Conf. on Peer-to-Peer Computing</title>
		<imprint>
			<date type="published" when="2003-09">Sep. 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">The Eigentrust Algorithm for Reputation Management in P2P Networks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Kamvar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Schlosser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Garcia-Molina</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">12th International World Wide Web Conference</title>
		<imprint>
			<date type="published" when="2003">2003. 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Chord: A Scalable Peer-to-Peer Lookup Service for Internet Applications</title>
		<author>
			<persName><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Morris</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Karger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Kaashoek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Balakrishnan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGCOMM</title>
		<imprint>
			<date type="published" when="2001-08">Aug. 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">OpenPBS v2.3: The Portable Batch System Software</title>
		<imprint>
			<date type="published" when="2000-09">Sep. 2000</date>
			<publisher>Veridian Systems</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Cluster Computing on the Fly: Resource Discovery in a Cycle Sharing Peer-to-Peer System</title>
		<author>
			<persName><forename type="first">D</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Lo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">To appear, IEEE Intl. Symp. on Cluster Computing and the Grid</title>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
