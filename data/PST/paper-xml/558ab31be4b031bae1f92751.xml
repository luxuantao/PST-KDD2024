<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Power Analysis of Mobile 3D Graphics</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Bren</forename><surname>Mochocki</surname></persName>
							<email>bmochock@cse.nd.edu</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Dept of CSE</orgName>
								<orgName type="department" key="dep2">Dame Notre Dame</orgName>
								<orgName type="institution">University of Notre</orgName>
								<address>
									<region>IN</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Kanishka</forename><surname>Lahiri</surname></persName>
							<email>klahiri@nec-labs.com</email>
							<affiliation key="aff1">
								<orgName type="laboratory">NEC Laboratories America Princeton</orgName>
								<address>
									<region>NJ</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Srihari</forename><surname>Cadambi</surname></persName>
							<email>cadambi@nec-labs.com</email>
							<affiliation key="aff2">
								<orgName type="laboratory">NEC Laboratories America Princeton</orgName>
								<address>
									<region>NJ</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Power Analysis of Mobile 3D Graphics</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">1CB8577C3CDB9F143D3A1B181FBF72B3</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T03:44+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The world of 3D graphics, until recently restricted to high-end workstations and game consoles, is rapidly expanding into the domain of mobile platforms such as cellular phones and PDAs. Even as the mobile chip market is poised to exceed production of 500 million chips per year, incorporation of 3D graphics in handhelds poses several serious challenges to the hardware designer. Compared with other platforms, graphics on handhelds have to contend with limited energy supplies and lower computing horsepower. Nevertheless, images must still be rendered at high quality since handheld screens are typically held closer to the observer's eye, making imperfections and approximations very noticeable.</p><p>In this paper, we provide an in-depth quantitative analysis of the power consumption of mobile 3D graphics pipelines. We analyze the effects of various 3D graphics factors such as resolution, frame rate, level of detail, lighting and texture maps on power consumption. We demonstrate that significant imbalance exists across the workloads of different graphics pipeline stages. In addition, we illustrate how this imbalance may vary dynamically, depending on the characteristics of the graphics application. Based on this observation, we identify and compare the benefits of candidate Dynamic Voltage and Frequency Scaling (DVFS) schemes for mobile 3D graphics pipelines. In our experiments we observe that DVFS for mobile 3D graphics reduces energy by as much as 50%.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Traditionally, 3D graphics applications have been developed for either desktop computers or dedicated gaming consoles. However, with the increasing popularity and capabilities of mobile computing devices such as PDAs and cellular phones, many 3D graphics applications such as gaming, GPS-backed maps and animated chats emerge as possible applications for current and future mobile platforms. Since the mobile market far exceeds the PC market, a very large volume opportunity exists for 3D graphics. The mobile gaming industry already reports revenue in excess of $2.6 billion worldwide, and is expected to exceed $11 billion by the year 2010 <ref type="bibr" target="#b0">[1]</ref>. In <ref type="bibr" target="#b1">[2]</ref>, the author predicts that all but the least expensive cellular phones will feature 3D processing capabilities by 2006, creating a sales opportunity of over 500 million chips per year.</p><p>Similar to the evolution of console gaming, players of mobile games will expect high-quality 3D experience. Yet, several major differences between mobile graphics processors and traditional gaming consoles make this a challenge. First, handheld devices have slower processors that are less capable of handling large compute-intensive workloads. Second, handheld batteries have limited lifetimes, necessitating lowpower schemes for compute-intensive applications such as 3D graphics. Finally, although handheld screens typically have lower resolutions than desktops or laptops (leading to lower energy consumption), each pixel must still be rendered accurately since the screen is held close to the observer's eye; making imperfections and approximations easily noticeable. For example, effects such as anti-aliasing and imperfect shading can result in jagged edges and reduced image quality.</p><p>In this paper, we present a quantitative study of the different factors that influence energy consumption of a handheld device while running a 3D graphics application. From our our analysis, we observe that a significant opportunity exists for dynamic voltage and frequency scaling (DVFS) in mobile 3D graphics processing. We then experimentally investigate the applicability of different DVFS schemes for energy-efficient 3D graphics processing in handheld devices.</p><p>To understand the need for power-efficient 3D graphics, consider Figure <ref type="figure" target="#fig_0">1</ref>, which illustrates an increasing disparity between the energy requirements of 3D graphics processing on handhelds, and energy available from state-of-the-art batteries. It is estimated that battery capacities (assuming the weight of the battery is constant) will increase at rates of 5 to 10% per year <ref type="bibr" target="#b2">[3]</ref>. Concurrently, however, screen resolution and frame rates will also increase. Current resolutions for handhelds are 176 x 144 (QCIF), 320 x 280 (QVGA), 320 x 320 (Palm Treo <ref type="bibr" target="#b3">[4]</ref>) and 480 x 320 (Sony Clie <ref type="bibr" target="#b4">[5]</ref>). <ref type="bibr" target="#b5">[6]</ref> reports that a 4inch LCD screen with a resolution of 800x600 pixels (SVGA) is being developed and is expected to be available in the next few years. Based on this, it is reasonable to expect that SVGA screens will be prevalent in handhelds by the end of the decade. For Figure <ref type="figure" target="#fig_0">1</ref>, we assumed (i) screen resolutions increase uniformly from QCIF in 2002 to SVGA in 2009, (ii) average frame rates increase from 10 frames per second (fps) in 2002 to 20 fps in 2009 and (iii) voltage and clock frequencies vary as speculated by the ITRS <ref type="bibr" target="#b6">[7]</ref>. It is clear that improvements in battery technology alone cannot be expected to satisfy the energy requirements of 3D graphics processing in future handheld devices.</p><p>Due to the above trends, the area of low-power mobile 3D graphics processing has recently started to receive interest. Application-level techniques for improving energy efficiency of graphics processing while trading off the quality of the rendered frames include novel texturing and Level-of-Detail (LoD) management strategies <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b8">[9]</ref>. A related area is the prediction and analysis of 3D workload requirements <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b10">[11]</ref>. However, most work in this area is targeted towards high-end gaming platforms such as PCs and gaming consoles.</p><p>On the hardware side, several low-power graphics processors (GPUs) have started to appear featuring conventional power management schemes. The GPU described in <ref type="bibr" target="#b11">[12]</ref> uses clock gating to deactivate unused components, and optionally can activate a "step mode", which prevents multiple stages of the graphics pipeline from executing at the same time. A GPU that utilizes Dynamic Frequency Scaling (DFS) is presented in <ref type="bibr" target="#b12">[13]</ref>, which includes three performance states, but does not consider voltage scaling. Recently, performance and power modeling techniques for GPUs have been proposed <ref type="bibr" target="#b13">[14]</ref>.</p><p>Similar to <ref type="bibr" target="#b13">[14]</ref>, the analysis framework we use for our work is also based on trace-driven simulation. More widespread availability of such modeling and analysis frameworks will spur further research on power-efficient graphics processing. Numerous techniques for Dynamic Voltage and Frequency Scaling (DVFS) have been proposed over the last decade <ref type="bibr" target="#b14">[15]</ref>, leading to commercial products today that feature DVFS, including processors for mobile handsets <ref type="bibr" target="#b15">[16]</ref>. It is known that general-purpose DVFS policies (such as those based on utilization measurements) often do not perform well for specific applications <ref type="bibr" target="#b16">[17]</ref>, resulting in more specialized techniques that are tailored to important application domains <ref type="bibr" target="#b17">[18]</ref>, <ref type="bibr" target="#b18">[19]</ref>. No prior work that we are aware of has investigated the application of DVFS for power-efficient 3D graphics processing.</p><p>The rest of this paper is organized as follows. In Section II, we briefly review 3D graphics pipelines. In Section III, we describe the methodology we used to analyze the performance and energy consumption of the 3D graphics pipeline, along with motivational studies. In Section IV, we present detail experimental studies that analyze the effects of different factors on pipeline energy consumption. Based on these observations, in Section V, we identify and compare candidate DVFS schemes for 3D pipelines, and conclude in Section VI.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. 3D GRAPHICS PIPELINE</head><p>In typical graphics processors all surfaces are fundamentally represented with triangular patches <ref type="bibr" target="#b19">[20]</ref>. During rendering, each triangle is drawn in a series of three basic steps, which can be implemented as three stages in a pipeline architecture (Figure <ref type="figure" target="#fig_1">2(a)</ref>).</p><p>1) The geometry stage applies geometric transforms to each triangle, and computes its perspective projection onto the screen. It also culls triangles that will not be seen and computes shading information for each vertex.</p><p>2) The triangle setup stage determines which pixels lie within the projection of each triangle. Along each triangle edge, it uses interpolation and lookup to obtain shading, texture and z-values for each pixel.</p><p>3) The rendering stage computes the actual color for each pixel, and also performs hidden-surface elimination and the final interpolation of shading and texture values. Several factors affect the perceived quality of 3D graphics. Key quality factors discussed in this paper include:</p><p>• Resolution -either the total number of pixels on the screen, or the number of pixels per inch of screen. Note that handheld devices are typically held close to the eye, and consequently demand a higher number of pixels per inch than desktop monitors. • Frame rate -the rate with which the scene is redrawn.</p><p>To create an illusion of smooth motion, this should be at least 10 to 12 frames per second. Below this rate, motion appears jerky, and games feel unresponsive. It is important to note however, that the frame rate can vary considerably during the course of an animation without spoiling the illusion of motion. • Level of detail -the sampling used to represent curved shapes with triangular patches. This determines how smooth the shapes' silhouettes appear, and if the individual triangles are visible on the surface due to shading. • Lighting model -the type of lighting applied to the scene. Possible lighting models include spot lighting (illumination only in specified areas of the scene), point lighting (illumination from nearby light sources) and parallel lighting (illumination from distant light sources). • Texture model -how textures, usually in the form of 2D images, are applied to surfaces. There are several different methods of applying textures to surfaces, with different tradeoffs between computation and visual quality.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. EVALUATION FRAMEWORK</head><p>Motivated by the emergence of commercial multi-core application processors in the mobile handset domain <ref type="bibr" target="#b20">[21]</ref>, we consider a system architecture consisting of three embedded processors, each of which executes a specific stage of the 3D graphics pipeline (Figure <ref type="figure" target="#fig_1">2(a)</ref>). The different pipeline stages communicate with each other through shared buffers mapped to local memories. DMA engines transfer data between stages.</p><p>The methodology we used for analyzing the 3D graphics pipeline is illustrated in Figure <ref type="figure" target="#fig_1">2(b)</ref>. We adapted a software library <ref type="bibr" target="#b21">[22]</ref> that implements OpenGL/ES <ref type="bibr" target="#b22">[23]</ref>, a standard interface for developing 3D graphics applications on resourceconstrained systems. OpenGL/ES is a variant of the popular OpenGL standard (aimed at high-performance devices). The applications we used consisted of ones obtained from <ref type="bibr" target="#b23">[24]</ref> as well as custom benchmarks. We selected benchmarks that clearly exhibited specific 3D effects (e.g., types of lighting) as opposed to complex animation sequences, in order to isolate and better understand the impact of individual factors. The library was modified to generate a trace of triggers indicating start and completion points of each pipeline stage for each triangle being processed. The applications and the modified library were cross-compiled and linked to the target architecture <ref type="bibr" target="#b24">[25]</ref>. To drive the subsequent analysis, traces of executed instructions, triggers, and triangles were collected using fast, cycle-accurate, instruction-level simulation <ref type="bibr" target="#b25">[26]</ref>. The resulting traces were provided to a trace-based analysis tool that was developed to analyze performance and energy consumption of the different pipeline stages under a given system architecture. The simulator uses an instruction-level energy model that was developed using measurement of actual current drawn by a commercial processor <ref type="bibr" target="#b26">[27]</ref>. The processor can be operated at 11 different voltage and frequency levels, with an associated overhead of 150µs each time the operating point is changed. Different voltage/frequency scaling policies and their impact on the 3D pipeline are easily evaluated using this framework. Note that, in our work, we use performance and energy models developed for a general-purpose embedded processor (ARM). However, the framework is flexible, and could be enhanced to incorporate models developed for custom GPUs as well 1 . JFreechart <ref type="bibr" target="#b27">[28]</ref> is used to graphically display the analysis results (Figure <ref type="figure" target="#fig_1">2(c)</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Imbalance in the Graphics Pipeline</head><p>We used the above framework to compare the workload across the pipeline stages for three different benchmarks: TexCube, which features the rotation of a textured cube on one of its diagonals, RoomRev, which depicts a revolving room containing curved geometric objects, and MovSphere, which displays a lit sphere moving toward the camera with increasing LoD. Figure <ref type="figure" target="#fig_2">3</ref> reports the results of these studies, for animation sequences aimed at a screen resolution of 176x220. From the figure we observe that the workload in each benchmark varies significantly across stages. In the case of the TexCube <ref type="bibr" target="#b23">[24]</ref> benchmark, rendering consumes 11x more cycles than geometry and setup combined. However, the results also show that 1 Our experimental results in absolute terms, are specific to ARM. However, we believe that the observed trends and conclusions drawn from them are sufficiently general, and are applicable to pipelines consisting of custom processing elements as well. contrary to expectation, rendering is not always the bottleneck. For the RoomRev <ref type="bibr" target="#b23">[24]</ref> benchmark, geometry has the maximum workload, exceeding rendering by 5X, while in the MovSphere benchmark, setup dominates rendering by 9X. Clearly, large, application-dependent imbalances may exist between different pipeline stages. In general, we observe that the imbalance may shift dynamically, depending on the animation sequence, leading to variable "hot spots". In the next section, we study the factors on which such imbalance depends in more detail. IV. PERFORMANCE AND ENERGY ANALYSIS Resolution, level of detail (LoD), lighting, texture maps and frame rate are factors that play a vital role in determining the quality of 3D graphics. We analyze in detail how these factors affect energy in handhelds, and how the graphics hardware developer can make design choices to lower energy consumption but maintain the quality of the 3D images. Significantly, the inherent pipeline imbalance exposed by our analysis translates to an opportunity for the hardware designer to employ dynamic voltage and frequency scaling. Our analysis also provides information for the application developer to write energyefficient mobile 3D graphics applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Effect on Performance</head><p>We start by analyzing how the above factors affect handheld graphics processing requirements, and use this information to devise energy-saving strategies. Our measurements are represented by execution cycles obtained from the framework described in Section III. Resolution: Figure <ref type="figure">4</ref> shows the performance with increasing resolution for the MovSphere benchmark with a LoD of 3. In our setup, an LoD of 3 means that 256 (4 3+1 ) triangles are used to represent the surface of the sphere. The resolutions chosen are currently used in handhelds and gaming consoles (the latter will likely be used in future handhelds). The three different curves show the number of execution cycles for each pipeline stage. The execution time for rendering increases linearly with the number of pixels. Thus, at high resolutions, the predominant performance bottleneck and power consumption unit is the rendering engine. Level of Detail (LoD): Figure <ref type="figure">5</ref> shows the performance with increasing LoD for the MovSphere benchmark. A LoD of d implies that 4 d+1 triangles are used to represent the sphere. We note that the geometry and triangle setup execution times increase exponentially with LoD (i.e., linearly with the number of triangles). This is because the number of vertices on which the geometry stage operates is linearly proportional to the number of triangles. On the other hand, the rendering stage execution time increases more slowly. Thus, the overwhelming effect on performance with increasing LoD is from the geometry and triangle setup stage. In other words, if the LoD can be reduced without affecting picture quality, performance can be significantly enhanced.</p><p>Lighting: Figure <ref type="figure">6</ref> shows the performance for three different lighting schemes, namely, spotlight, parallel light and point light, all with an LoD of 3. The execution times for the different lighting schemes are roughly equivalent, but activating any of the lighting schemes comes with a large cost to the geometry stage, since lighting is done on a per-vertex basis.</p><p>We also observed that a spotlight requires a larger LoD to produce better picture quality; this is because a spotlight has a distinct boundary, which when depicted with few triangles shows up in a "jagged" manner resulting in poor image quality. Therefore, spotlights necessitate the use of a larger LoD, while point and parallel lights do not. Since increasing the LoD results in an exponential increase in execution time, it is clear that graphics application programmers should minimize the use of spotlights to enhance handheld graphics performance. Texture Maps: Figure <ref type="figure">7</ref> shows the performance for different texturing schemes. The first set of 4 points use a single texture map, while the second set of 4 points use 2 texture maps. We evaluate the following four texturing schemes, popularly used in OpenGL/ES. Textures are represented by texture maps, consisting of texels (pixels in the texture map).</p><p>• Nearest: In this scheme, the renderer picks a single representative texel for each pixel that has to be rendered. • MipMap Nearest: Mipmapping involves making multiple copies of the original texture map, with each copy having half the resolution of the previous one. Depending on the distance of the object from the observer, a suitable texture map is selected. For example, if the object is far away, a low-resolution texture map is chosen. A representative texel from the chosen texture map is picked (as in the "Nearest" scheme). • Linear: Here a weighted average of four texels closest to the pixel is chosen for texturing. The weights are based on the Manhattan distance between the texel and pixel. • MipMap Linear: This is a combination of the mipmap and linear schemes. From the figures, we note that while mipmapping improves image quality, it has little effect on execution time. However, bilinear texturing schemes increase execution time significantly. Hence, we believe it is better for handhelds to employ mipmapping texturing schemes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Influence on Energy</head><p>We now discuss how the above analysis can help design more energy-efficient mobile graphics processors. In particular, we find that a direct result of tuning the resolution, lighting, level of detail and texturing is a change in the balance between the three main stages of the graphics pipeline. In other words, the performance bottleneck shifts from one stage to the other depending on the factors being changed. We observe the following from our analysis:</p><p>• Resolution: The execution time of the rendering stage increases the fastest with resolution, making it the performance bottleneck at high resolutions. This creates an imbalance between the rendering stage and other stages. • LoD: Since a larger LoD implies more triangles per object, we see that with increasing LoD, the geometry stages becomes the performance bottleneck. However, it must be noted that in most applications, as resolution increases, so does the LoD. This means that the geometry and rendering bottlenecks (caused by increasing LoD and increasing resolutions respectively) might offset each other during the course of the application. Thus, the imbalance could be "dynamic" and application-dependent. • Lighting: The cost for activating lighting is very large in the geometry stage but has little impact on other stages. However, the change in workload across the different lighting schemes is minimal. Since most applications use lighting to emphasize 3D features of objects in the scene, it is usually difficult to avoid this cost. However, it may be possible in some cases to replace the lighting calculation with "pre-lit" texture maps, thus shifting the workload for some objects from the geometry to the render stage. • Texture Maps: The commonly used linear and mipmapping texturing schemes make the rendering stage the bottleneck, with the linear scheme proving to be more computationally expensive. These variable performance bottlenecks provide an opportunity for power reduction via dynamic voltage and frequency scaling (DVFS), whose application we consider next.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. POWER SAVING TECHNIQUES</head><p>To effectively exploit the imbalance between different stages of the graphics pipeline via DVFS, accurate prediction of future pipeline workload is necessary. In this section, we compare a few different workload predictors and the savings they achieve in terms of pipeline energy consumption.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Workload Prediction Schemes</head><p>In the presence of imbalance, a basic technique that can be used to reduce energy is dynamic frequency scaling (DFS), which is used in <ref type="bibr" target="#b12">[13]</ref>, where the frequencies of all stages are reduced as much as possible so that the target frame rate is met. In our work, we use dynamic voltage and frequency scaling for mobile 3D graphics, with two further innovations. First, we use non-uniform DVFS where each stage in the graphics pipeline uses a different voltage and frequency. Second, we use history-based workload predictors for 3D graphics to set voltage and frequency. In all the schemes we consider, the voltage and frequency can be changed at most once per frame.</p><p>1) Oracle Uniform (OU): "Oracle" implies a perfect workload predictor. OU refers to a DVFS technique where voltage and frequency of the geometry, setup and rendering stages are all set to the same value, based on perfect knowledge of future workloads. The voltage and frequency is set to the maximum of the three stages. 2) Oracle Non-uniform (ON): In this technique, the voltage and frequency of the each pipeline stage is set independently, again based on perfect knowledge of future workloads. Thus, the geometry, setup and rendering engines could have different frequencies and voltages.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3) Uniform Window-based Predictor 1 (UW1):</head><p>The oracle schemes can tell us how well voltage scaling works and how useful non-uniform voltage scaling is. However, history-based prediction schemes are more practical than the oracle schemes. In the UW1 scheme, the workload of each pipeline stage in the current frame is predicted to be the same as the corresponding workloads in the previous frame. Using this prediction, the voltage and frequency of the each stage are set to the same value. 4) Uniform Window-based Predictor 5 (UW5): This is the same as the UW1 scheme, except the workload of the current frame is determined using the average of the workloads of 5 previous frames.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5) Non-uniform Window-based Predictor 1 (NW1):</head><p>In this scheme, the workloads for the geometry, setup and rendering stages are predicted to be the same as the corresponding workloads in the previous frame. Then, the frequency and voltage of each stage is set independently. 6) Non-uniform Window-based Predictor 5 (NW5): This is the same as NW1 except the workload prediction is based on the average of the previous 5 frames.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Results for DVFS-based Energy Reduction Schemes</head><p>Figure <ref type="figure" target="#fig_5">8</ref>(a) shows energy estimates for the above DVFS schemes for the multicube example with a target frame rate of 25 fps. The multicube example is an extension of the texcube example consisting of 3 cubes revolving around a central frustum; the cubes have different texture maps and lighting to resemble real applications. Workloads predictions are made in terms of ARM execution cycles. Comparing "Oracle Uniform" against baseline DFS shows that voltage scaling alone reduces energy by 41%. Our technique of non-uniform voltage scaling ("Oracle Non-uniform") further reduces energy by 19%. The history-based predictors perform almost as well as the oracle predictors, with the non-uniform predictor (NW5) achieving a 19% energy reduction over the uniform predictor (UW5). Overall, with non-uniform voltage scaling with history-based workload prediction, we see an energy reduction of 54% compared to DFS (used in <ref type="bibr" target="#b12">[13]</ref>).</p><p>Nevertheless, like all predictors, the estimates of historybased predictors can be inaccurate. For instance, if the actual workload turns out to be larger than the predicted workload, the resultant frame rate will not meet the target since voltage and frequency will have been reduced according to the prediction. Figure <ref type="figure" target="#fig_5">8</ref>(b) shows this data for the multicube example. Two important points emerge from the figure. First, the average frame rate for history-based predictors is close to the target of 25 fps. Second, the minimum frame rate is around 22 fps. Our measurements indicate that the minimum frame rate occurs less than 9% of the time. Despite this, the difference between 22 and 25 fps was imperceptible to the human eye, which was verified using on-screen emulation. Consequently, for this benchmark, the history-based scheme does not affect animation quality.</p><p>We also note that the overall energy improvement is almost equal to the sum of the reductions from voltage scaling and non-uniform voltage scaling. Therefore the effect on energy due to the missed target frame rates is negligible. In other words, the fact that the history-based scheme occasionally misses the frame rate due to mis-predictions does not reduce energy consumption. Finally, it is worth noting that the voltage transition overhead of 150µs is small enough not to affect the frame rates, since voltage changes are applied once per frame.</p><p>Figure <ref type="figure" target="#fig_5">8</ref>(c) shows frame rates for the MovSphere example. As the sphere draws closer to the observer, the level of detail (LoD) increases, resulting in increased workload. The historybased predictors have a downward spike in the frame rate between the frames where the LoD switch occurs. When an LoD switch occurs, the speed needs to be increased, but the history-based predictors do not detect that until it is too late. Therefore, the frame rate drops significantly, in this case to below 10 fps, which is noticeable. In this case, history-based predictors with a window of 1 can correct themselves faster than predictors with a window of 5. Nonetheless, such historybased predictors are not suitable when workloads change quickly by large amounts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. CONCLUSIONS</head><p>In this paper we presented a detailed quantitative analysis of the workload variations and imbalances of different stages of a mobile 3D graphics pipeline, and the potential for DVFS based power savings that exploit such variations and imbalances. Our studies show that history-based DVFS strategies achieve success for examples with slowly changing graphics workloads, with savings of over 50%. Our studies also motivate more specialized prediction techniques. We believe that this paper will prove to be a valuable starting point for future work in low-power mobile 3D graphics.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Disparity between mobile 3D graphics energy and battery capacity.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Framework for analyzing the 3D graphics pipeline: (a) pipeline stages and mapping to an example system architecture; (b) methodology for performance/power analysis; (c) screenshot of front-end of trace-based simulator.</figDesc><graphic coords="2,363.27,59.33,194.64,128.08" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Analysis of the workload of different stages of the 3D graphics pipeline for different applications.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 . 4 Fig. 5 .</head><label>445</label><figDesc>Fig. 4. Mobile 3D graphics performance with increasing resolutions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 6 .Fig. 7 .</head><label>67</label><figDesc>Fig. 6. Mobile 3D graphics performance for different lighting schemes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Comparing energy savings and frame rates for the different power management schemes</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments:</head><p>The authors are grateful to Matthew M. Miller of NEC Laboratories America for useful discussions, and to the anonymous reviewers for their feedback.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Mobile Games Industry Worth US $11.2 Billion by 2010</title>
		<ptr target="http://www.3g.co.uk/PR" />
		<imprint>
			<date type="published" when="1459-05">May2005/1459.htm. May 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">3D Poised for Market Expansion</title>
		<author>
			<persName><forename type="first">P</forename><surname>Glaskowsky</surname></persName>
		</author>
		<ptr target="http://www.mdronline.com/publications/mpw/issues/mpw111.html#item1" />
		<imprint>
			<date type="published" when="2003-08">Aug 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Batteries in a Portable World</title>
		<author>
			<persName><forename type="first">I</forename><surname>Buchmann</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001">2001</date>
			<publisher>Cadex Electronics, Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Treo 650 smartphone details</title>
		<ptr target="http://www.palm.com/us/products/smartphones/treo650/details.epl" />
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
		<respStmt>
			<orgName>Palm Corporation</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Peg-th55, the ultimate handheld for power users</title>
		<author>
			<persName><forename type="first">Sony</forename><surname>Electronics</surname></persName>
		</author>
		<ptr target="http://sonyelectronics.sonystyle.com/micros/clie/models/th55.html" />
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Fujitsu creates 800x600 pda lcd</title>
		<author>
			<persName><forename type="first">The</forename><surname>Register</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><forename type="middle">K</forename></persName>
		</author>
		<ptr target="http://www.theregister.co.uk/2003/07/15/fujitsu_creates_800x600_pda_lcd%/" />
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">International Technology Roadmap for Semiconductors (ITRS 2004)</title>
		<ptr target="http://www.itrs.net/Common/2004Update/2004_000_ORTC.pdf" />
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">3D Graphics Rendering Time Modeling and Control for Mobile Terminals</title>
		<author>
			<persName><forename type="first">N</forename><surname>Tack</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Moran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Lafruit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Lauwereins</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Int. Conf. on 3D Web technology</title>
		<meeting>Int. Conf. on 3D Web technology</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="109" to="117" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Graphics for the Masses: A Hardware Rasterization Architecture for Mobile Phones</title>
		<author>
			<persName><forename type="first">T</forename><surname>Akenine-Moller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Strom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH</title>
		<meeting>ACM SIGGRAPH</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="801" to="808" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Dynamic 3D Graphics Workload Characterization and the Architectural Implications</title>
		<author>
			<persName><forename type="first">T</forename><surname>Mitra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">Z</forename><surname>Chiueh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Intl. Symp. on Microarchitecture (MICRO-32)</title>
		<meeting>Intl. Symp. on Microarchitecture (MICRO-32)</meeting>
		<imprint>
			<date type="published" when="1999-11">Nov. 1999</date>
			<biblScope unit="page" from="62" to="71" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Rendering Time Estimation for Real-Time Rendering</title>
		<author>
			<persName><forename type="first">M</forename><surname>Wimmer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Wonka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Eurographics Symposium on Rendering</title>
		<imprint>
			<date type="published" when="2003">2003. 2003</date>
			<biblScope unit="page" from="118" to="128" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">3D Graphics LSI Core for Mobile Phone Z3D</title>
		<author>
			<persName><forename type="first">M</forename><surname>Kameyama</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Kato</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Fujimoto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Negishi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Kodama</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Inoue</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Kawai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graphics Hardware</title>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="60" to="66" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A 210-mW Graphics LSI Implementation Full 3-D Pipeline With 264 Mtexels/s Texturing for Mobile Multimedia Applications</title>
		<author>
			<persName><forename type="first">R</forename><surname>Woo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J.-H</forename><surname>Sohn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S.-J</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H.-J</forename><surname>Yoo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Journal of Solid-State Circuits</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="page" from="358" to="367" />
			<date type="published" when="2004-02">February 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A flexible simulation framework for graphics architectures</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">W</forename><surname>Sheaffer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">P</forename><surname>Luebke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Skadron</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Eurographics Conference on Graphics Hardware</title>
		<meeting>of the Eurographics Conference on Graphics Hardware</meeting>
		<imprint>
			<date type="published" when="2004-08">Aug. 2004</date>
			<biblScope unit="page" from="85" to="94" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">The Simulation and Evaluation of Dynamic Voltage Scaling Algorithms</title>
		<author>
			<persName><forename type="first">T</forename><surname>Pering</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Burd</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Brodersen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Int. Symp. Low Power Electronics &amp; Design</title>
		<meeting>Int. Symp. Low Power Electronics &amp; Design</meeting>
		<imprint>
			<date type="published" when="1998-08">Aug. 1998</date>
			<biblScope unit="page" from="76" to="81" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Intel Application Processors [Online]</title>
		<ptr target="http://developer.intel.com/design/pca/applicationprocessors" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Policies for Dynamic Clock Scheduling</title>
		<author>
			<persName><forename type="first">D</forename><surname>Grunwald</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Levis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Farkas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">B</forename><surname>Morrey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Neufeld</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Symp. Operating Systems Design and Implementation</title>
		<meeting>Symp. Operating Systems Design and Implementation</meeting>
		<imprint>
			<date type="published" when="2000-10">Oct. 2000</date>
			<biblScope unit="page" from="73" to="86" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Integrated Power Management for Video Streaming to Mobile Handheld Devices</title>
		<author>
			<persName><forename type="first">S</forename><surname>Mohapatra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Int. Conf. on Multimedia</title>
		<imprint>
			<date type="published" when="2003-11">Nov. 2003</date>
			<biblScope unit="page" from="582" to="591" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Energy Aware Wireless Systems with Adaptive Power-Fidelity Tradeoffs</title>
		<author>
			<persName><forename type="first">V</forename><surname>Raghunathan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">L</forename><surname>Pereira</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">B</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">K</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. VLSI Systems</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="211" to="225" />
			<date type="published" when="2005-02">Feb. 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">H</forename><surname>Watt</surname></persName>
			<affiliation>
				<orgName type="collaboration">D Computer Graphics</orgName>
			</affiliation>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>Addison-Wesley</publisher>
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">A 600MIPS 120-mW 70-µA Leakage Triple-CPU Mobile Application Processor Chip</title>
		<author>
			<persName><forename type="first">S</forename><surname>Torii</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ISSCC</title>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="136" to="138" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">A 3-D Rendering Library for Mobile Devices</title>
		<author>
			<persName><forename type="first">Hans-Martin</forename><surname>Will</surname></persName>
		</author>
		<ptr target="http://ogl-es.sourceforge.net/" />
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">OpenGL ES Overview</title>
		<author>
			<persName><forename type="first">Khronos</forename><surname>Group</surname></persName>
		</author>
		<ptr target="http://www.khronos.org/opengles" />
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Typhoon Labs-OpenGL ES Tutorials</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Villar</surname></persName>
		</author>
		<ptr target="http://www.khronos.org/devu/opengles_challenge/" />
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">B</forename><surname>Gatliff</surname></persName>
		</author>
		<ptr target="http://www.billgatliff.com" />
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Simit-ARM: Very fast functional and cycle-accurate simulators for ARM</title>
		<author>
			<persName><forename type="first">W</forename><surname>Qin</surname></persName>
		</author>
		<ptr target="http://http://sourceforge.net/projects/simit-arm/" />
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">JouleTrack: A Web Based Tool for Software Energy Profiling</title>
		<author>
			<persName><forename type="first">A</forename><surname>Sinha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Chandrakasan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 38th Design Automation Conference</title>
		<meeting>the 38th Design Automation Conference</meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="220" to="225" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">D</forename><surname>Gilbert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Morgner</surname></persName>
		</author>
		<author>
			<persName><surname>Jfreechart</surname></persName>
		</author>
		<ptr target="http://www.jfree.org/jfreechart/" />
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
