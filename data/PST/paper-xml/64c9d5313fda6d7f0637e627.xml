<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">METAGPT: META PROGRAMMING FOR MULTI-AGENT COLLABORATIVE FRAMEWORK</title>
				<funder ref="#_KmHPrd6 #_CZG2tXE #_DvnvmAZ">
					<orgName type="full">unknown</orgName>
				</funder>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2023-08-01">1 Aug 2023</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Sirui</forename><surname>Hong</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">DeepWisdom</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Xiawu</forename><surname>Zheng</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">Xiamen University</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Jonathan</forename><surname>Chen</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">DeepWisdom</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Yuheng</forename><surname>Cheng</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">The Chinese University of Hong Kong</orgName>
								<address>
									<settlement>Shenzhen</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Ceyao</forename><surname>Zhang</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">The Chinese University of Hong Kong</orgName>
								<address>
									<settlement>Shenzhen</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Zili</forename><surname>Wang</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Steven</forename><surname>Ka</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Shing</forename><surname>Yau</surname></persName>
							<affiliation key="aff3">
								<orgName type="institution">Nanjing University</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Zijuan</forename><surname>Lin</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">Xiamen University</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Liyang</forename><surname>Zhou</surname></persName>
							<affiliation key="aff4">
								<orgName type="institution">University of Pennsylvania</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Chenyu</forename><surname>Ran</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">DeepWisdom</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Lingfeng</forename><surname>Xiao</surname></persName>
							<affiliation key="aff5">
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>Berkeley</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Chenglin</forename><surname>Wu</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">DeepWisdom</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">METAGPT: META PROGRAMMING FOR MULTI-AGENT COLLABORATIVE FRAMEWORK</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2023-08-01">1 Aug 2023</date>
						</imprint>
					</monogr>
					<idno type="arXiv">arXiv:2308.00352v1[cs.AI]</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-01-03T08:38+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Recently, remarkable progress has been made in automated task-solving through the use of multiagents driven by large language models (LLMs). However, existing works primarily focuses on simple tasks lacking exploration and investigation in complicated tasks mainly due to the hallucination problem. This kind of hallucination gets amplified infinitely as multiple intelligent agents interact with each other, resulting in failures when tackling complicated problems.Therefore, we introduce MetaGPT, an innovative framework that infuses effective human workflows as a meta programming approach into LLM-driven multi-agent collaboration. In particular, MetaGPT first encodes Standardized Operating Procedures (SOPs) into prompts, fostering structured coordination. And then, it further mandates modular outputs, bestowing agents with domain expertise paralleling human professionals to validate outputs and reduce compounded errors. In this way, MetaGPT leverages the assembly line work model to assign diverse roles to various agents, thus establishing a framework that can effectively and cohesively deconstruct complex multi-agent collaborative problems. Our experiments conducted on collaborative software engineering tasks illustrate MetaGPT's capability in producing comprehensive solutions with higher coherence relative to existing conversational and chat-based multi-agent systems. This underscores the potential of incorporating human domain knowledge into multi-agents, thus opening up novel avenues for grappling with intricate real-world challenges. The GitHub repository of this project is made publicly available on: https://github.com/geekan/MetaGPT</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Through prolonged collaborative practice, humans have developed widely accepted standardized operating procedures (SOPs) across many domains <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b2">3]</ref>. These SOPs play a critical role in supporting task decomposition and efficient coordination. For instance, in software engineering, the waterfall methodology delineates orderly phases of requirements analysis, system design, coding, testing, and deliverables. This consensus workflow enables effective collaboration among multitudes of engineers <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2]</ref>. Moreover, human roles possess specialized expertise tailored to their assigned responsibilities: software engineers leverage programming proficiency to implement code, while product managers employ market analysis to formulate business needs. Without standardized outputs, collaboration becomes disorderly <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b5">6]</ref>. For example, product managers must conduct comprehensive competitive analyses examining user needs, industry trends, and rival offerings, and subsequently create Product Requirements Documents (PRDs) with clear standardized structure outlining prioritized goals to guide development. Such normative artifacts are critical outputs crystallizing collective understanding to progress complex, multifaceted projects requiring interconnected contributions across roles <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b8">9]</ref>. Therefore, structured documents, reports, and visuals providing unambiguous dependencies are imperative.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>LLM based Automatic Programming Automatic programming is a hot research topics in NLP. Researchers trained classifiers to identify and reject erroneous programs <ref type="bibr" target="#b20">[21]</ref>, and developed the mechanism of iterative feedback to generate embedded control programs <ref type="bibr" target="#b21">[22]</ref>. There are also state-of-the-art methods that utilize majority voting to select candidate programs <ref type="bibr" target="#b22">[23]</ref> and use execution results to improve program synthesis <ref type="bibr" target="#b23">[24,</ref><ref type="bibr" target="#b24">25]</ref>. More recently, agent based on LLMs <ref type="bibr" target="#b25">[26,</ref><ref type="bibr" target="#b26">27,</ref><ref type="bibr" target="#b27">28]</ref> have facilitated the development of automatic programming. Li et al. <ref type="bibr" target="#b10">[11]</ref> proposed a simple role-play agent framework that realizes automatic programming based on one-sentence user requirements through the interaction of two roles. Moreover, Qian et al. <ref type="bibr" target="#b28">[29]</ref> utilized multiple agents for software development, but they did not incorporate advanced human teamwork experience. Although existing multi-agent cooperation <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b28">29]</ref> has currently improved productivity, they did not fully drawn on efficient workflows in human production practices. Thus, they are hard to solve more complex software engineering problems.</p><p>Besides, A series of the fundamental and important works where this paper is based need to be mentioned. ReAct <ref type="bibr" target="#b25">[26]</ref> utilizes Chain of Thought prompts <ref type="bibr" target="#b29">[30]</ref> to generate reasoning trajectories and action plans with LLMs. Reflexion <ref type="bibr" target="#b26">[27]</ref> Figure <ref type="figure">1</ref>: A comparative depiction of the software development SOP between MetaGPT and real-world human team. The MetaGPT approach showcases its ability to decompose high-level tasks into detailed actionable components handled by distinct roles (ProductManager, Architect, ProjectManager, Engineer), thereby facilitating role-specific expertise and coordination. This methodology mirrors human software development teams, but with the advantage of improved efficiency, precision, and consistency. The diagram illustrates how MetaGPT is designed to handle task complexity and promote clear role delineations, making it a valuable tool for complex software development scenarios infers more intuitive future actions through self-reflection. Both papers illustrate how the Re-Act style loop of reasoning is a good design paradigm for empowering LLM-based agents. ToolFormer <ref type="bibr" target="#b30">[31]</ref> can teach themselves to use external tools via simple APIs. SWIFTSAGE <ref type="bibr" target="#b27">[28]</ref> assigns difficult situations to slow thinking to deal with, while normal situations are dealt with directly by fast thinking. Based on the above design, we emphasize that role division of labor is helpful for complex task processing.</p><p>Multi-agent Collaboration Prior works have explored using multiple LLMs in a collaborative setting to solve complex tasks <ref type="bibr" target="#b31">[32,</ref><ref type="bibr" target="#b28">29]</ref>. The motivation is that by cross-agent interaction, LLMs can collectively exhibit enhanced performance through aggregating their individual strengths. There have been many previous explorations of multi-agent, including collective thinking <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b15">16]</ref>, conversation dataset collection <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b32">33]</ref>, sociological phenomenon research <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b33">34]</ref>, collaboration for efficiency <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b34">35,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b28">29]</ref>. (i) Collective thinking: many advanced works <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b15">16]</ref> enhanced the task solving capabilities of LLM by integrating the multiple-agent discussion. (ii) Conversation dataset collection: Wei et al. <ref type="bibr" target="#b32">[33]</ref> and Li et al. <ref type="bibr" target="#b10">[11]</ref> built a conversation datasets through Role Playing. (iii) Sociological phenomenon research: Park et al. <ref type="bibr" target="#b9">[10]</ref> constructed a town of 25 agents, realizing simple language interaction, social cognition, and memory of the agents, while there is a lack of cooperation and production. Akata et al. <ref type="bibr" target="#b33">[34]</ref> studied LLM cooperation and coordination behavior by having multiple agents play a repeated game. (iv) Collaboration for efficiency: Cai et al. <ref type="bibr" target="#b11">[12]</ref> modeled cost reduction by having a combination of large models as tool makers and small models as Tool users. Zhang et al. <ref type="bibr" target="#b34">[35]</ref> built a framework for collaboration between agents that enables verbal communication, collaboration, and improved efficiency. Li et al. <ref type="bibr" target="#b10">[11]</ref> and Qian et al. <ref type="bibr" target="#b28">[29]</ref> proposed a multi-agent framework for software development. However, their cross-agent communication are natural language conversations, not a standardized software engineering document, and do not incorporate advanced human process management experience. The key issues persist on multiagent cooperation around maintaining coherence, avoiding unproductive loops, and directing beneficial interactions. Therefore, this paper emphasizes the practice of advanced human processes (e.g., SOPs in software development) in multi-agent system.</p><p>Autonomous System Design Existing autonomous systems like AutoGPT <ref type="bibr" target="#b17">[18]</ref> automate tasks by breaking down high-level goals into multiple sub-goals and executing them in ReAct-style loops, while faces challenges with coherence and validation. LangChain <ref type="bibr" target="#b19">[20]</ref> helps develop LLM applications in combination with other computational tools or knowledge bases. Recently, the multi-agent architecture has been proven to be an effective design. GPTeam <ref type="bibr" target="#b35">[36]</ref> creates LLM based multiple agents that work together to achieve a predetermined goal. AgentVerse <ref type="bibr" target="#b18">[19]</ref> is a LLM powered multi-agent scenario simulation framework. Langroid <ref type="bibr" target="#b36">[37]</ref> builds LLM-based multi-agent programming. SocraticAI <ref type="bibr" target="#b37">[38]</ref> improves problem-solving by leveraging the power of multiple agents in socratic dialogue. Since most of them are not embedded in advanced human management experience, they are unable to solve larger and more complex real-world projects. Our MetaGPT incorporates human workflow insights for more controlled and validated performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Meta Programming for Collaborative Agents via Standardized Operating Procedure</head><p>In this section, we first give an overview of our proposed meta programming multi-agent collaborative framework MetaGPT for solving complicated real-world problems. And then, we will elaborate how our the core component design in our framework in Section 3.2. To better illustrate our design philosophy, we choose the software development to illustrate how our MetaGPT dispatches multi-agents to realize the standardized workflow (SOP) of the software development team and complete the end-to-end development process with only one human input of task requirements is required. The main working pipeline is depicted in Figure <ref type="figure" target="#fig_0">2</ref>. In Section 3.3, we present a practical example to illustrate how MetaGPT coordinates the multi-agents with distinct roles to fulfill a one-line requirement: Make the 2048 sliding tile number puzzle.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Framework Overview</head><p>We examine the design and operational mechanisms of MetaGPT by investigating its core component architecture, knowledge sharing approaches, and rationale for executing intricate workflows. The design of MetaGPT is organized into two layers, each with distinct responsibilities in supporting system functionality: Foundational Components Layer. This layer establishes core building blocks necessary for individual agent operations and system-wide information exchange, including Environment, Memory, Role, Action and Tools. As depicted in Figure <ref type="figure" target="#fig_1">3</ref>, the Environment enables shared workspaces and communication. Memory stores and retrieves historical messages. Roles encapsulate domain-specific skills and workflows. Actions execute modular subtasks. Tools  ? Knowledge Sharing. This mechanism allows agents to exchange information effectively, contributing to a shared knowledge base. Agents can store, retrieve, and share data at different levels of granularity. It not only enhances coordination but also reduces redundant communication, increasing overall operational efficiency.</p><p>? Encapsulating Workflows. This mechanism leverages SOPs to break down complex tasks into smaller, manageable components. It assigns these subtasks to suitable agents and supervises their performance by standardized output, ensuring that their actions align with the overarching objectives.</p><p>The division into foundational and collaborative layers promotes modularity while ensuring both individual and collective agent capabilities. The components offer reusable building blocks and utilities while the collaboration modules integrate purposeful coordination.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Core Component Design</head><p>In the MetaGPT framework, we define key components like Environment, Memory, Roles, Actions and Tools in detail, and develop foundational capabilities related to collaboration.</p><p>? Environment -Offers a collaborative workspace and communication platform for agents.</p><p>? Memory -Facilitates agents in storing and retrieving historical messages and context.</p><p>? Roles -Encapsulate specialized skills, behaviors, and workflows based on domain expertise.</p><p>? Actions -Procedures executed by agents to accomplish subtasks and generate outputs.</p><p>? Tools -Collective utilities and services that agents can utilize to enhance their capabilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Role Definitions</head><p>The MetaGPT framework facilitates the creation of various specialized role classes, such as ProductManager, Architect, and others, which inherit from the base Role class. A base role class is characterized by a set of key attributes: name, profile, goal, constraints, and description. Specifically, Profile represents the domain expertise of the role or job title. For instance, an Architect's profile might encompass software design, while a ProductManager's profile could concentrate on product development and management. Goal signifies the primary responsibility or objective that the role seeks to accomplish. A ProductManager's goal might be expressed in natural language as efficiently creating a successful product. Constraints denote limitations or principles the role must adhere to when performing actions. For example, an Engineer could have constraints to write standardized, modular, and maintainable code. The constraints might be articulated as The code you write should conform to code standards like PEP8, be modular, easy to read, and maintain. Description provides additional concrete identity to help establish the role more comprehensively. Role initialization in the MetaGPT framework employs natural language to thoroughly describe the responsibilities and constraints of each role. This not only aids human understanding but also directs the LLMs to generate actions that align with the role's profile, thereby rendering each agent proficient in its role. We define this process as anchor agents, which assists humans in encoding domain-specific responsibilities and capabilities to an LLM-based agent while also adding behavior guidance on expected functions. We will discuss this further in Section 3.2.2</p><p>For example, an Engineer in software company can be initialized using role-specific setting as follows in MetaGPT: The comprehensive role definitions provided by the MetaGPT framework enable the creation of highly specialized LLM-based agents, each tailored for specific domains and objectives. This not only introduces a layer of behavior guidance based on expected functions but also facilitates the creation of diverse and specialized agents, each expert in its domain. This leads to the development of more effective and efficient LLM-based agents capable of handling a wide range of tasks.</p><formula xml:id="formula_0">Role</formula><p>In MetaGPT, intelligent agents not only receive and respond to information, but they also observe the environment to extract critical details. These observations guide their thinking and subsequent actions. Finally, significant information extracted from the environment is stored in memory for future reference, effectively making every agent an active learner within the system.</p><p>They take on specialized roles and follow certain key behaviors and workflows:</p><p>Think &amp; Reflect Roles can retrieve role description (position) and prefix to frame thinking, and then reflect on what needs to be done and decide next actions, via _think() function. "Think first, then act" -carefully deliberate before replying</p><p>Observe Roles can observe the environment and think/act based on observations using the _observe() function. They watch for important information and incorporate into memory to enrich their contextual understanding and informing future decisions.</p><p>Broadcast Messages Roles can broadcast messages into the environment using the _publish_message() function. These messages contain details about current execution results and related action records, for publishing and sharing information.</p><p>Knowledge precipitation &amp; Act Roles are not only broadcasters but also recipients of information from their environment. Roles can assess the incoming messages for relevancy and timeliness, extract relevant knowledge from shared environment and maintain an internal knowledge repository to inform decisions.They execute actions via consulting to LLM with enriched contextual information and self knowledge. Execution results are encapsulated as Message while norm artifacts are shared by the environment.</p><p>State Management Roles can track their actions by updating their working status and monitoring a to-do list. This enables a role to process multiple actions sequentially without interruption. When executing each action, the role first updates its status to busy. After completing the action, it marks the status as idle again. This prevents other actions from interrupting the flow. This is a crucial capability in role design, making roles more human-like. It grants roles more natural execution dynamics grounded in real-world human collaboration phenomena.</p><p>In summary, the MetaGPT framework offers a versatile and powerful approach to designing and implementing intelligent agents with specialized capabilities. These agents can effectively collaborate, learn, adapt, and perform various tasks, making them valuable assets in a wide range of applications and domains.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">Prompts Instantiating SOPs</head><p>As previously discussed, MetaGPT employs prompts to instantiate real-world SOPs into well-defined agent workflows. We demonstrate how MetaGPT transforms SOPs into executable action instances through natural language prompts. This process involves using prompts to instantiate SOPs, providing step-by-step guidance based on established practices, and ensuring consistent, structured execution of complex sequencing tasks.</p><p>We first introduce the Action class in detail, then demonstrate the design of standardizing action-level granular prompts. Within the MetaGPT framework, Action serves as the atomic unit for agents to execute specific tasks, specified through natural language. The key attributes include:</p><p>Prefix A role-specific prefix is injected into prompts to establish a persona context. The set_prefix() method configures identifiers for role-specific prompts.</p><p>LLM proxy Each Action contains an LLM proxy, which can be invoked via the aask() method to enrich action details using input context expressed in natural language prompts. Additionally, various role-specific context parsing functions can be implemented within the Action class. These functions are designed to extract and provide sufficient contextual information from inputs to the LLMs. These parsers can selectively extract the most relevant information from inputs to create clear, focused prompts for the LLM proxy. This helps ensure the LLM is provided with sufficient context to generate useful output, rather than being overwhelmed by excessive irrelevant data.</p><p>This approach benefits the LLMs by reducing irrelevant noise and concentrating inputs on key context points. As a result, the prompts instantiate not only workflows but also the context-awareness required to adapt execution appropriately based on inputs.</p><p>Standardized outputs schema A structural representation defining expected output schema, used to extract structured data. We provide basic methods to parse LLM results into structured outputs.</p><p>Instruct content Structured data extracted from action output using the standardized output schema. This information is encapsulated as a message and is ultimately published to the environment.</p><p>Retry mechanism Defined by number of attempts and waiting time to enable retrying Actions for robustness.</p><p>Each Action in MetaGPT requires defining standardized output content by encoding high-quality expert-level structural key points. The LLMs then refine the Action based on this standardized output schema for the specific task. Essentially, we provide each Action with a prompt template conforming to standards for the role that can steer the LLM's behavior to generate normalized outputs.</p><p>We define a WritePRD Action for a ProductManager agent in MetaGPT to showcase the process. In this Action, we incorporate domain expertise by specifying required outputs such as Product Goals, User Stories, Competitive Analysis, Requirements Analysis and prioritized Requirement Pool. These outputs encapsulate key artifacts and  practices in product management according to industry conventions. Additionally, we instantiate supporting skills for the ProductManager agent such as web search APIs to enrich analysis, and diagramming tools like mermaid <ref type="bibr" target="#b38">[39]</ref> to visualize competitive quadrand charts.</p><p>As shown in Figure <ref type="figure" target="#fig_0">2</ref>, the ProductManager efficiently structures output sections. By equipping the agent with these complementary capabilities aligned with real-world product management responsibilities, the WritePRD Action can execute the subtask while adhering to standardized workflows.</p><p>In this manner, the WritePRD Action exemplifies how MetaGPT Action definitions combine domain knowledge, output schemas, and assistive skills to transform high-level SOPs into executable and customizable procedures for agents. By extracting real-world best practices into Action specifications, MetaGPT bridges abstract expertise with structured execution tailored to collaborative workflows. Moreover, each action becomes more than just an isolated function. It forms part of a comprehensive set of guidelines that steer the LLM's behavior within the realm of its role, ensuring the production of high-quality, structured, and task-specific outputs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.3">Actions for Standardized Outputs</head><p>The effectiveness of MetaGPT's instantiated workflows relies heavily on the establishment of standardized outputs for each action. These outputs draw on expert domain knowledge and industry best practices to adapt workflows to specific roles and contexts. Structured output designs serve the following purposes:</p><p>1) Standardized outputs foster consistent LLM results that are predictable, repeatable, and in line with agent responsibilities, guiding high-quality, structured, and task-specific LLM generation by setting output expectations.</p><p>2) Additionally, standardized schemas act as blueprints that constrain LLM behavior within appropriate boundaries for the role, maintaining focus on the target task and preventing digressions. As actions form part of comprehensive role-based guidelines, this role-conscious steering ensures outputs align with real-world quality standards.</p><p>Our method's capabilities are demonstrated on more complex system designs beyond mere game examples, such as content recommendation engines, search algorithm frameworks, and LLM-based operating systems. More detailed results can be found in Appendix A.</p><p>As depicted in Figure <ref type="figure" target="#fig_2">4</ref>, the architect agent generate a detailed system-level diagram illustrating the software architecture. This diagram includes clear definitions of crucial modules like User, CollaborativeFilteringModel, and Recommender, complemented by details about the important fields and methods within each module. This clarity aids engineers in understanding the core workflows and functional components. Furthermore, the design incorporates calling relationships between modules, following principles of separation of concerns and loose coupling at the system level. The translation from human natural language to a structured technical design provides actionable details which can facilitate engineering implementation, beyond high-level overviews.</p><p>Although the system design provides an overall framework and module design, it is insufficient on its own for engineers to implement complex system coding. Engineers still require additional details on how the operations are carried out within and between modules to convert the design into functional code. As illustrated in Figure <ref type="figure" target="#fig_3">5</ref>, the architect also creates a sequence flow diagram base on the system interface design, depicting the processes, objects involved, and the sequence of messages exchanged between them needed to carry out the functionality. As mentioned, this supplementing details makes the engineer and other collaborator such as project manager who is responsible for detail code design work easier.</p><p>Hence, the consistent, synergistic outputs of the architect roles are crucial for improving code quality by simplifying the engineer's task of translating specifications into functional code. They reduce ambiguity, misinterpretations, and confusion that can arise from freeform natural language.</p><p>In conclusion, the design and implementation of standardized outputs in MetaGPT offer a powerful tool for handling complex tasks. The conversion of complex tasks defined in natural language into structured and standardized outputs promotes collaborative consistency, reducing the need for excessive dialog turns that could lead to incoherence. Furthermore, it allows for clear and stable representation of structural information, which can be difficult to convey unambiguously through natural language alone, particularly for LLM-based agents. By providing these structured and standardized outputs, different agents gain a clear, aligned understanding of their tasks and responsibilities. This approach not only streamlines communication but also enhances the LLM-based multi-agents system's ability to administer and execute intricate tasks more effectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.4">Knowledge Sharing Mechanisms &amp; Customized Knowledge Management</head><p>In MetaGPT, each agent proactively curates personalized knowledge by retrieving relevant historical messages from shared environment logs. Instead of passively relying on dialogue, agents leverage role-based interests to extract pertinent information. Specifically, the environment replicates messages to provide a unified data repository. Agents register subscriptions based on message types meaningful for their roles. Matching messages are automatically dispatched to notify appropriate agents. Internally, agents maintain a memory cache indexing subscribed messages by content, publishing agent, and other attributes. Retrieval mechanisms allow agents to query this storage as needed to obtain contextual details. Updates synchronize across linked agent memories to maintain a consistent view. This decentralized yet unified access pattern mirrors how human organizations function -team members have shared records but customize views around their responsibilities. By framing information flows around agent roles, MetaGPT allows autonomous agents to efficiently self-serve appropriate knowledge.</p><p>As previously discussed, each agent in MetaGPT maintains a memory cache indexing subscribed messages pertinent to its role, enabling personalized knowledge curation. Specifically, the centralized environment replication of messages creates a unified data source.Agents then register subscriptions to obtain role-relevant messages automatically from this source. Internally, agent memory caches are indexed by content, source, and attributes to enable fast in-context retrieval. Rather than one-size-fits-all communications, this decentralized yet federated knowledge ecosystem mirrors how human teams customize information views around individual responsibilities while relying on shared records.</p><p>Message replication Whenever an agent generates a message, it is replicated to the shared environment log, creating a single source of truth. This ensures all agents have access to the same information.</p><p>Role-based subscriptions Agents can register subscriptions based on their roles and the types of messages that are meaningful for them. This is done based on predefined criteria that align with the agent's responsibilities and tasks.</p><p>Message dispatch When a new message matches the subscription criteria of an agent, it is automatically dispatched to notify the relevant agent. This proactive information dissemination prevents agents from missing out on important updates.</p><p>Memory caching and indexing Agents maintain an internal memory cache where they store and index subscribed messages by their content, the agent that published them, and other relevant attributes. This allows for efficient storage and retrieval of information.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Contextual retrieval</head><p>The environment maintain a shared memory pool where supports cacheing and indexing. At the same time, agents can query their internal memory as needed to obtain contextual details relevant to their current task. This helps in refining their understanding and making better decisions.</p><p>Updates synchronization Any updates or changes made to the messages are synchronized across all linked agent memories to maintain a consistent view of the information. This ensures that all agents have access to the most up-to-date data.</p><p>By aligning information flows around agent roles, MetaGPT empowers autonomous agents to efficiently serve appropriate knowledge. This pattern mirrors how human organizations function -while everyone has access to shared records, individuals tailor their views based on their specific responsibilities.</p><p>MetaGPT's combination of centralized message sharing with personalized role-based memory caches enables customized knowledge management, reducing irrelevant data while providing common context. This balances team coordination with individual efficiency.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">A Multi-Agent Collaboration Example</head><p>MetaGPT is capable of generating entire software systems from a single line of user instructions. This section will expand on Figure <ref type="figure" target="#fig_0">2</ref> and give a more detailed breakdown of MetaGPT using waterfall-style SOP, when prompted with "Make the 2048 sliding tile number puzzle game":</p><p>Alice (Product Manager): ready to WritePRD When the boss (user) puts forward a product requirement, Alice, the product manager, will draft 7 pieces of documents, including: Product goals, User stories, Competitive Analysis (in text and as a quadrant chart), Requirement analysis, Requirement Pool, UI design. Before Alice can hand off her work to the next LLM agent according to the waterfall SOP, her work will first be reviewed:</p><p>""" ## Anything UNCLEAR There are no unclear points. """</p><p>After review, Alice will post her work into the message queue under the "WritePRD" category. Bob, our LLM architect, is subscribed to the "WritePRD" category. Additionally, MetaGPT will notify the users of their current API usage in dollar amounts:</p><p>""" Total running cost: $0.072 | Max budget: $3.000 | Current cost: $0.072, prompt_tokens=848, completion_tokens=771 """ Bob (Architect): ready to WriteDesign Given the requirement analysis and feasibility analysis from Alice, our architect will draft an system design plan for the project, which starts with a high-level implementation approach:</p><p>""" Implementation approach: We will use Python's built-in libraries for the core game logic.</p><p>For the GUI, we will use the open-source library Pygame, which is a set of Python modules designed for writing video games. It includes computer graphics and sound libraries. For the high score tracking feature, we will use SQLite, a C library that provides a lightweight disk-based database. SQLite allows us to persist the high score even afterthe game is closed.</p><p>For testing, we will use Pytest, a mature full-featured Python testing tool. """</p><p>Following the implementation plan, architect Bob will create a list of files to atomize the complicated logic of the plan into a dozen files:</p><p>["main.py", "game.py", "gui.py", "database.py", "test_game.py", "test_gui.py", "test_database.py"] and generate mermaid diagrams to define data structures and interfaces along with program sequence flow diagram, as illustrated in Figure <ref type="figure" target="#fig_4">6</ref>. Bob will proceed to generate the file directories and empty files according to the design, and post all his work (documents and diagrams) into the message queue under the "WriteDesign" category.</p><p>Eve (Project Manager): ready to WriteTasks Eve is subscribed to the "WriteDesign" category and uses all the previously drafted UI, system design, API design documents to break down the project into simpler and more actionable tasks/tickets, usually at the complexity level of single file of code:</p><p>## Logic Analysis [ ("main.py", "Contains the main game loop and handles user input."), ("game.py", "Implements the game logic, including the board, score, and game over condition."), ("gui.py", "Handles the graphical user interface, including drawing the board, score, and game over screen."), ("database.py", "Manages the high score database, including getting and updating the high score."), ("test_game.py", "Tests the game logic."), ("test_gui.py", "Tests the graphical user interface."), ("test_database.py", "Tests the high score database.") ] ## Task list [ "game.py", "database.py", "gui.py", "main.py", "test_game.py", "test_database.py", "test_gui.py" ] ## Shared Knowledge """ 'game.py' contains the 'Game' class, which includes the game logic. 'database.py' contains the 'Database' class, which manages the high score database. 'gui.py' contains the 'GUI' class, which handles the graphical user interface. 'main.py' contains the main game loop and handles user input. """ Additionally, Eve, the project manager, will list out the project dependencies, including third-party packages written in Python as well as other languages and APIs specs. When there are missing details, the review/reflection process will iterative improve the generated content in the current phase until the reviewer is satisfied. e.g.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>""" ## Anything UNCLEAR</head><p>There is no main entry point defined in the project. We need to clarify whether the main game loop will be in 'main.py' or in another file. """ Alex (Engineer): ready to WriteCode and WriteCodeReview Given concrete tasks and coherent overall implementation plan in the form of "WriteTasks" messages, the LLM Engineer agents has enough information to generate error-free code. Alex will go through the list of files in the given order, and he generates each file as well as its corresponding unit tests.  -Total prompt tokens reflects the level of system interaction needed, counted as the number of prompt tokens used during task execution. -Total completion tokens provides a sense of the scale of output generated, counted as the number of completion tokens during task execution. -Time costs indicates the efficiency of the task execution process, measured as the total time consumed for task execution. -Money costs shows the cost-effectiveness of task execution process, calculated as the total monetary cost incurred during task execution. ? Cost of revisions Captures the maintenance effort required for the code. A higher value suggests a greater degree of code improvement and debugging. ? Code executability -Functional quality of the generated code Assessed on a grading scale from 'F' for total failure to 'P' for flawless execution and perfect conformity to task specifications: * F for complete failure, scoring 0 points. The generated code is non-functional or the workflow deviates entirely from specifications.</p><p>* R for runnable code, scoring 1 point. The code executes but workflow expectations may be unmet. * W for largely expected workflow, scoring 2 points. Code runs and workflow meets most specifications. * P for perfect match to expectations, scoring 3 points. Code functions flawlessly and workflow output perfectly matches specifications.</p><p>Experiments Settings We conducted seven diverse experiments using MetaGPT within a Python environment (version 3.9.6). These experiments aimed to demonstrate its versatility across various scenarios, including gaming, web development, and data analysis. MetaGPT version 8cc8b80 served as the experimental code, with GPT4-32k as the underlying language model. The experiments had specific configurations: a maximum token consumption limit of 1500, an investment cap of 3, and a maximum of 5 iterations. Moreover, we activated the code review feature and utilized the mermaid.js<ref type="foot" target="#foot_1">3</ref> for PDF and diagram generation. Each project underwent a single generation process. The complete experimental record form can be found in Appendix B.</p><p>To comprehensively validate the advantages of the MetaGPT framework, we conducted offline experimental evaluations of MetaGPT across a broad spectrum of more than 70 tasks, which were designed to evaluate the framework's feasibility and general applicability. This heterogeneous pool of tasks, spanning numerous domains and a range of complexity, was carefully chosen with an aim to provide an exhaustive assessment of the potential of MetaGPT. Each task was evaluated using key metrics, including the code statistics, documentation statistics, cost statistics, cost of revisions and the success rate in terms of code execution. For a more detailed understanding of our experimental setup and outcomes, we have appended a subset of these tasks in the Appendix B. In short, using the MetaGPT framework takes an average of 516 seconds and $1.12 to get a project containing 4.71 code files, 3 PRDs and 3 documents. After no more than three bug-fixes, the success rate of the project generated can reach 51.43%.</p><p>It is important to underscore that the statistics presented here represent the outcomes of the current experimental suite and are not to be considered as definitive performance benchmarks. The performance of MetaGPT may vary depending on the specific experimental conditions and the task configurations utilized.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Comparison with Alternative Approaches</head><p>In this section, we first provide a clear comparison of MetaGPT, AutoGPT, and AgentVerse's capabilities in Table <ref type="table" target="#tab_1">1</ref>.</p><p>Then we conduct experiments to quantify the performance of different framworks.</p><p>Framework Capability Comparison MetaGPT stands out with its extensive functionality. Unique to MetaGPT are the abilities to generate PRDs and Technical Designs, emphasizing its comprehensive project execution approach.</p><p>MetaGPT is also the only framework capable of API Interface Generation, offering an edge in rapid API design prototyping scenarios.</p><p>Code Review, a crucial component of the development process, is a feature available in both MetaGPT and AgentVerse, but notably absent in AutoGPT. MetaGPT sets itself apart further by incorporating Precompilation Execution, a feature that facilitates early error detection and thereby, enhances the quality of the code. In terms of collaborative features, MetaGPT and AgentVerse both support Role-Based Task Collaboration, a mechanism which facilitates multi-agent collaboration and enhances teamwork by partitioning tasks among specific roles. However, MetaGPT exclusively offers Role-Based Task Management, a feature that not only decomposes tasks but also oversees their administration, thus underlining its comprehensive project management capabilities. When assessing Code Generation abilities, all three frameworks exhibit proficiency. However, MetaGPT delivers a more encompassing solution, addressing wider aspects of the development process, thereby offering a comprehensive toolset for project management and execution.</p><p>This comparison is based on the current states of the respective frameworks. Future updates might add or alter the features of these tools. However, as of this analysis, MetaGPT outshines its counterparts in providing a more comprehensive and robust solution for project execution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Quantitative Experiment Comparison</head><p>To evaluate the performance of various frameworks such as MetaGPT, AutoGPT, and AgentVerse, we conducted experiments across 7 diverse tasks. These tasks includes python games generation, CRUD code generation and simple data analysis, This approach was aimed to illuminate the distinctive strengths and shortcomings of each framework under scrutiny. The results are shown in Table <ref type="table" target="#tab_2">2</ref> As evidenced by the data presented in Table <ref type="table" target="#tab_2">2</ref>, MetaGPT exhibits robust performance across a diverse set of tasks, achieving successful execution in all but two instances: Flappy Bird and Tank Battle. These tasks, which possess high interaction demands, were not successfully completed by MetaGPT due to the strict constraints and limited resources allocated for manual adjustments. In direct contrast, the competing frameworks, AutoGPT and AgentVerse, did not accomplish successful execution in any of the tasks, marking a stark differentiation in the effectiveness of the MetaGPT framework.</p><p>We also provide more details about the runtime statistics about MetaGPT, shown in Table <ref type="table" target="#tab_3">3</ref>. Across the aforementioned experimental projects, an average of 4.71 code files (including but not limited to formats such as CSS, py, js) were present per project, with an average of 42.99 lines of code per file. Regarding PRD files, each project generated an average of three PRD files (considering pdf, mmd, and png with the same name as one file). Additionally, for project documentation, there were three documents on average per project, typically comprising product requirement documents, API documentation, and system architecture documentation, with each document averaging 80 lines. In terms of cost analysis, each project consumed an average of 26626.86 tokens for prompts and 6218.00 tokens upon task completion, resulting in a total cost of $ 1.09 for completing the tasks. The entire construction process took 517.71 seconds. Compared to traditional software engineering development timelines and costs, MetaGPT's time and monetary expenses amount to less than one-thousandth.</p><p>We adopt Code of Revisions as the metric of resolving errors encountered during project execution by means of dependency replacement, code modifications, or other corrective actions, until successful execution or encountering the next issue. The maximum number of allowed in Code of Revision is three; exceeding this limit results in the project being considered a failure if it continues to encounter errors. Regarding Code of Revisions, each project required an average of 0.6 revisions, with the majority of issues relating to dependencies, resource unavailability, and missing parameters. The overall success rate (WP rate -running successfully and generally meeting expectations) stands at 57.14%.</p><p>Although AutoGPT is currently the most prevalent single-agent framework, it was unable to successfully complete any tasks using the GPT4-32k configuration with its default setup in our experiments. As a single agent, its characteristics must be manually established prior to the execution process, and these cannot be altered mid-way. AutoGPT is capable of decomposing user-provided tasks into multiple smaller subtasks and executes them sequentially. However, our observations throughout the experimental procedure highlight a significant drawback of AutoGPT: its lack of completeness evaluation and the expertise of the single agent.</p><p>AutoGPT lacks a mechanism to assess the completeness of a task. It merely marks a task as completed after saving the generated results, without any further examination for validity or completeness. To attempt to create a more efficient loop, we employed the AutoGPT implementation in LangChain and integrated the Python Read-Eval-Print Loop (REPL) tool. Our intent was to enable AutoGPT to debug and refine the code it authored. However, the agent's lack of specialized knowledge prevented it from utilizing the feedback provided by the interpreter to improve its code. Consequently, the tasks remained unsuccessful due to the generation of incomplete and non-functional code.</p><p>Despite implementing three specialized roles: Writer, Tester, and Reviewer, AgentVerse failed across all benchmark tasks. These roles performs collaboration in a manner of online judges (OJs). The conversation within AgentVerse primarily revolves around the Writer role creating code, the Tester identifying areas of failure or error messages during code execution, and the Reviewer suggesting modifications, which is similar to the Engineer we implement in MetaGPT capable of coding and code-review. The dialogues within AgentVerse primarily focus on the code itself rather than the overall task. However, the absence of roles responsible for breaking down large tasks into smaller, manageable ones places AgentVerse at a disadvantage. This lack of task decomposition and division of work significantly reduces the likelihood of successfully completing larger, more complex tasks. The shortcomings of AgentVerse underscore the importance of clear role delineation and strategic task segregation across different phases in the handling of complex problem-solving scenarios.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Ablation Studies</head><p>Our ablation studies involve systematically reducing the number of roles engaged in the development process, and subsequently examining the effects on the executable output and the validity of intermediate files. We selected Brick Breaker and Gomoku as tasks, given their complexity which necessitates a team with diverse roles and a multi-step workflow, analogous to the reality of game development, characterized by clear role divisions and teamwork.</p><p>Our initial experiments with MetaGPT were conducted employing a fully-staffed team, including four distinct roles: a ProductManager, an Architect, a ProjectManager, and an Engineer, in alignment with the experimental settings of Section 4.1 . For the ablation studies, we used a set of metrics: total number of lines in code files, money costs,cost of revisions, and code executability, as defined in Section 4.1 . These metrics were chosen to enable the straightforward quantification of aspects such as the quality of code generation, the cost-effectiveness of the task, and the functional quality of the generated code.</p><p>After obtaining results from this fully equipped team, we progressively remove the Architect, ProjectManager, and ProductManager roles in subsequent experiments, assessing how their absence impacts the overall task performance.</p><p>As depicted in Table <ref type="table" target="#tab_4">4</ref> and Table <ref type="table" target="#tab_5">5</ref>, retaining three roles while removing either the Architect or ProjectManager leads to a moderate decrease in code statistics, 29 and 14 fewer lines for Brick Breaker and 33 and 47 fewer lines for Gomoku.</p><p>Additionally, 1-2 extra revisions are necessitated. However, overall task executability is largely preserved. More substantial reductions in code volume and increases in required fixes become evident when transitioning from three roles to just two,the ProductManager and Engineer. In this scenario, the game tests show 62 and 63 line decreases respectively, and increments of 2 and 3 in revisions.</p><p>Additionally, it is critical to note that when the team is reduced to a single agent, the executability of the code significantly deteriorates. Even with additional revision costs incurred, the code remains non-executable. Therefore, the presence of multiple roles not only enhances code quality but also reinforces the robustness and feasibility of the code implementation.</p><p>In summary, through quantitative comparisons across conditions, we underscore the advantages of specialized multiagent frameworks for complex tasks. This validates the importance of role modularity and collaboration for holistic task completion. Despite the immense potential of MetaGPT in automating end-to-end processes, it also has several limitations. Primarily, it occasionally references non-existent resource files like images and audio. Furthermore, during the execution of complex tasks, it is prone to invoking undefined or unimported classes or variables. These phenomenons are widely attributed to the hallucinatory tendency inherent in large language models and could be handled by a more clear and efficient agent collaboration workflow.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>In this work, we have presented MetaGPT, a promising framework for collaborative agents through SOPs that manages LLMs to mimic the efficient human workflows. To encodes SOPs into prompts, MetaGPT manages multi-agents through role definition, task decomposition, process standardization and other technical design and eventually complete the end-to-end development process with only one-line requirement. Our illustrative example in software development showcases the potential of this framework with detailed SOPs and prompts. The experimental results demonstrate our MetaGPT can produce comprehensive solutions with higher coherence relative to existing conversational and chat-based multi-agent system. We believe that this work opens new possibilities for the way multi-agents interact and cooperate, redefines the landscape of complex problem-solving, and points a potential pathway towards Artificial General Intelligence.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Detailed Standardard Output Artifacts</head><p>This appendix provides additional examples of standardized output artifacts generated by different roles in MetaGPT during collaborative workflows. These help illustrate the structure and format of outputs that aim to match industry conventions and domain-specific best practices.</p><p>ProductManager Outputs The product manager role produces PRD including product goals, user stories, competitive analysis, competitive quadrant chart, requirement analysis and requirement pool. ("Implement the basic 2048 game mechanics", "P0"), ("Design a visually appealing and intuitive user interface", "P0"), ("Add different difficulty levels", "P1"), ("Display the current score and high score", "P0"), ("Ensure a quick response time", "P0") ] ## Anything UNCLEAR There are no unclear points.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2) PRD of Snake Game Design</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>## Original Requirements</head><p>The boss wants us to create a snake game.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>## Product Goals</head><p>[ "Create a snake game that is easy to play and understand", "Ensure the game is challenging and engaging to keep users interested", "Design the game to be visually appealing and responsive" ] ## User Stories [ "As a user, I want to be able to easily control the snake so that I can play the game without difficulty", "As a user, I want the game to progressively get more difficult so that I am constantly challenged", "As a user, I want to be able to pause and resume the game so that I can play at my own pace", "As a user, I want the game to have a visually appealing design so that I enjoy playing", "As a user, I want the game to respond quickly to my actions so that I can play effectively" ] ## Competitive Analysis [ "Python Snake Game: Simple and easy to play but lacks visual appeal", "Google Snake Game: Visually appealing and responsive but can be too difficult for beginners", "Classic Snake Game: Offers a good level of challenge but lacks modern design elements", "Slither.io: Multiplayer game with modern design but can be too complex for some users", "Snake '97: Retro design that appeals to nostalgia but lacks modern gameplay elements" ] ## Competitive Quadrant Chart '''mermaid quadrantChart title Reach and engagement of campaigns x-axis Low Reach --&gt; High Reach y-axis Low Engagement --&gt; High Engagement quadrant-1 We should expand quadrant-2 Need to promote quadrant-3 Re-evaluate quadrant-4 May be improved "Python Snake Game": [0.3, 0.6] "Google Snake Game": [0.45, 0.23] "Classic Snake Game": [0.57, 0.69] "Slither.io": [0.78, 0.34] "Snake '97": [0.40, 0.34] "Our Target Product": [0.5, 0.6] ''' ## Requirement Analysis The product should be a snake game that is easy to play, visually appealing, and progressively challenging. It should have responsive controls and allow users to pause and resume the game. ("Easy to control snake movement", "P0"), ("Progressive difficulty levels", "P0"), ("Pause and resume feature", "P1"), ("Visually appealing design", "P1"), ("Responsive controls", "P0") ] ## Anything UNCLEAR There are no unclear points.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>## Requirement Pool</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Architect Outputs</head><p>The software architect role produces technical specifications like system architecture diagrams and interface definitions. We showcase the interface design for search algorithms framework 8, LLM-based operation system 9,Minimalist Pomodoro timer 10, Pyrogue game 11, and Match3 puzzle game 12          </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B MetaGPT Experimental Tasks Detail</head></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: A Schematic diagram of the software development process within the MetaGPT framework. This diagram illustrates the sequential software development process within the MetaGPT framework. Upon receiving a requirement from human, the product manager commences the process by conducting requirement and feasibility analyses. The architect then formulates a specific technical design for the project. Next, the project manager performs sequence flow illustration to address each requirement. The engineer takes responsibility for the actual code development, followed by quality assurance (QA) engineer who carries out comprehensive testing. This schematic showcases MetaGPT's emulation of real-world.</figDesc><graphic url="image-2.png" coords="5,72.00,22.06,467.98,616.36" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Core components overview of MetaGPT.</figDesc><graphic url="image-3.png" coords="6,72.00,72.00,467.99,219.37" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: System interface design automatically generated by the architect agent in MetaGPT. Taking content recommendation engine development as an example.</figDesc><graphic url="image-4.png" coords="9,72.00,72.00,468.01,149.71" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Sequence flow diagram automatically generated by the architect agent in MetaGPT. Taking content recommendation engine development as an example</figDesc><graphic url="image-5.png" coords="9,72.00,267.62,468.01,185.87" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Sequence flow diagram and system interface design automatically generated by the agent Bob in MetaGPT.</figDesc><graphic url="image-7.png" coords="12,315.96,345.24,198.43,145.04" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>running cost: $1.118 | Max budget: \$3.000 | Current cost: \$0.158, prompt_tokens=4565, completion_tokens=354 Done generating. """On the first try, MetaGPT has successfully generated an error-free 2048 sliding tile puzzle game. All these from a single line of user instruction.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: The MetaGPT-generated runtime interface for the 2048 sliding tile puzzle game.</figDesc><graphic url="image-8.png" coords="14,235.80,72.00,140.41,146.83" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>[</head><label></label><figDesc></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: The system interface design for search algorithms frameworks automatically generated by the architect agent in MetaGPT.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: The system interface design for LLM-based operation system automatically generated by the architect agent in MetaGPT.</figDesc><graphic url="image-10.png" coords="24,72.00,80.96,468.01,126.22" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: The interface design for Minimalist Pomodoro timer by the architect agent in MetaGPT.</figDesc><graphic url="image-11.png" coords="24,226.44,261.85,159.12,145.70" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 11 :</head><label>11</label><figDesc>Figure 11: The interface design for Pyrogue game by architect agent in MetaGPT.</figDesc><graphic url="image-12.png" coords="24,72.00,451.32,467.98,241.84" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 12 :</head><label>12</label><figDesc>Figure 12: The interface design for Match3 puzzle game by architect agent in MetaGPT.</figDesc><graphic url="image-13.png" coords="25,72.00,119.73,468.01,95.35" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 13 :</head><label>13</label><figDesc>Figure 13: The sequence flow diagram for search algorithms frameworks automatically generated by the project manager agent in MetaGPT.</figDesc><graphic url="image-14.png" coords="25,72.00,336.40,467.99,307.08" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 14 :</head><label>14</label><figDesc>Figure 14: The sequence flow diagram for LLM-based operation system by project manager agent in MetaGPT.</figDesc><graphic url="image-15.png" coords="26,118.80,80.66,374.39,204.33" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Figure 15 :</head><label>15</label><figDesc>Figure 15: The sequence flow chart for Minimalist Pomodoro timer by the project manager agent in MetaGPT.</figDesc><graphic url="image-16.png" coords="26,156.24,328.18,299.52,365.27" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 :</head><label>1</label><figDesc>Comparison of capabilities across MetaGPT, AutoGPT, and AgentVerse. Note that '?' indicates the presence of a given feature in the respective framework.</figDesc><table><row><cell>Framwork capabiliy</cell><cell cols="3">AutoGPT AgentVerse MetaGPT</cell></row><row><cell>PRD generation</cell><cell></cell><cell></cell><cell>?</cell></row><row><cell>Tenical design genenration</cell><cell></cell><cell></cell><cell>?</cell></row><row><cell>API interface generation</cell><cell></cell><cell></cell><cell>?</cell></row><row><cell>Code generation</cell><cell>?</cell><cell>?</cell><cell>?</cell></row><row><cell>Precompilation execution</cell><cell></cell><cell></cell><cell>?</cell></row><row><cell>Role-based task management</cell><cell></cell><cell></cell><cell>?</cell></row><row><cell>Code review</cell><cell></cell><cell>?</cell><cell>?</cell></row><row><cell>Role-based task collaboration</cell><cell></cell><cell>?</cell><cell>?</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 2 :</head><label>2</label><figDesc>Comparison of task executability between AutoGPT, AgentVerse, and MetaGPT. The tasks are scored based on a grading system from '0' to '3', where '0' denotes 'complete failure', '1' denotes 'runnable code', 2 denotes 'largely expected workflow', and '3' denotes 'perfect match to expectations' (shown in Section 4.1).</figDesc><table><row><cell>Task</cell><cell cols="4">AutoGPT AgentVerse LangChain w/ Python REPL tool MetaGPT</cell></row><row><cell>Flapy bird game</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell></row><row><cell>Tank battle game</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>0</cell></row><row><cell>2048 game</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>1</cell></row><row><cell>Snake game</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>2</cell></row><row><cell>Brick breaker game</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>3</cell></row><row><cell>Excel data process</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>3</cell></row><row><cell>CRUD manage</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>3</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 3 :</head><label>3</label><figDesc>The statistical analysis of MetaGPT in software development. The minimum (Min), maximum (Max), and average (Avg.) values for various statistical indexes are reported. '#' denotes 'The number of'</figDesc><table><row><cell>Statistical index</cell><cell>Min</cell><cell>Max</cell><cell>Avg.</cell></row><row><cell># Code files</cell><cell>3.00</cell><cell>6.00</cell><cell>4.71</cell></row><row><cell># Documents files</cell><cell>3.00</cell><cell>3.00</cell><cell>3.00</cell></row><row><cell># PRD files</cell><cell>3.00</cell><cell>3.00</cell><cell>3.00</cell></row><row><cell># Lines of codes</cell><cell>17.00</cell><cell>96.00</cell><cell>42.99</cell></row><row><cell># Prompt tokens</cell><cell cols="3">21934.00 32517.00 26626.86</cell></row><row><cell># Completion tokens</cell><cell>5312.00</cell><cell>7104.00</cell><cell>6218.00</cell></row><row><cell>Cost statistics</cell><cell>$ 0.90</cell><cell>$ 1.35</cell><cell>$ 1.09</cell></row><row><cell>Cost of revisions(only R, W and P)</cell><cell>0.00</cell><cell>2.00</cell><cell>0.60</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 4 :</head><label>4</label><figDesc>Ablation study on roles in Brick breaker game development. '#' denotes 'The number of', 'Product' denotes 'Product manager', 'Project' denotes 'Project manager'. 'F' denotes 'complete failure', 'R':unnable code, 'W': argely expected workflow, 'P': perfect. Engineer Product Architect Project # agents Lines of code Money cost Cost of revisions Code executability</figDesc><table><row><cell>?</cell><cell></cell><cell></cell><cell></cell><cell>1</cell><cell>89</cell><cell>$ 0.876</cell><cell>8</cell><cell>F</cell></row><row><cell>?</cell><cell>?</cell><cell></cell><cell></cell><cell>2</cell><cell>115</cell><cell>$ 1.022</cell><cell>4</cell><cell>R</cell></row><row><cell>?</cell><cell>?</cell><cell>?</cell><cell></cell><cell>3</cell><cell>177</cell><cell>$ 1.204</cell><cell>2</cell><cell>W</cell></row><row><cell>?</cell><cell>?</cell><cell></cell><cell>?</cell><cell>3</cell><cell>162</cell><cell>$ 1.221</cell><cell>2</cell><cell>R</cell></row><row><cell>?</cell><cell>?</cell><cell>?</cell><cell>?</cell><cell>4</cell><cell>191</cell><cell>$ 1.350</cell><cell>1</cell><cell>P</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 5 :</head><label>5</label><figDesc>Ablation study on roles in Gomoku game development.</figDesc><table><row><cell>'#' denotes 'The number of', 'Product' denotes</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head></head><label></label><figDesc>be a 2048 game that is easy to play, visually appealing, and engaging. It should have different difficulty levels and a quick response time. The game should also display the current score and high score, and have an intuitive user interface.</figDesc><table><row><cell cols="2">1) PRD of 2048 Game Design</cell></row><row><cell cols="2">## Requirement Analysis ## Original Requirements The boss wants us to create a 2048 game. ## Product Goals [ The product should ## Requirement Pool</cell></row><row><cell>[</cell><cell>"Create a 2048 game that is easy to understand and play",</cell></row><row><cell></cell><cell>"Ensure the game is engaging and retains user interest",</cell></row><row><cell></cell><cell>"Design the game to be visually appealing and intuitive"</cell></row><row><cell>]</cell><cell></cell></row><row><cell cols="2">## User Stories</cell></row><row><cell></cell><cell>without</cell></row><row><cell></cell><cell>interruptions",</cell></row><row><cell></cell><cell>"As a user, I want the game to have an appealing design, so that I enjoy my playing experience",</cell></row><row><cell></cell><cell>"As a user, I want the game to have different difficulty levels, so that I can challenge myself"</cell></row><row><cell>]</cell><cell></cell></row><row><cell cols="2">## Competitive Analysis</cell></row><row><cell>[</cell><cell></cell></row><row><cell></cell><cell>"2048 by Gabriele Cirulli: The original game, simple and intuitive, but lacks variety",</cell></row><row><cell></cell><cell>"2048 Number puzzle game by Estoty Entertainment LLC: Offers different board sizes, but has</cell></row><row><cell></cell><cell>intrusive ads",</cell></row><row><cell></cell><cell>"2048 by Androbaby: Has a clean design, but lacks difficulty levels",</cell></row><row><cell></cell><cell>"2048 by R. App: Offers undo feature, but the design is not very appealing",</cell></row><row><cell></cell><cell>"2048 by Ketchapp: Has a modern design, but the controls are not very responsive",</cell></row><row><cell></cell><cell>"2048 by X-Flow: Offers different game modes, but the user interface is not very intuitive",</cell></row><row><cell></cell><cell>"2048 by Solebon LLC: Has a minimalistic design, but lacks variety in gameplay"</cell></row><row><cell>]</cell><cell></cell></row><row><cell cols="2">## Competitive Quadrant Chart</cell></row><row><cell cols="2">'''mermaid quadrantChart</cell></row><row><cell></cell><cell>title Reach and engagement of campaigns</cell></row><row><cell></cell><cell>x-axis Low Reach --&gt; High Reach</cell></row><row><cell></cell><cell>y-axis Low Engagement --&gt; High Engagement</cell></row><row><cell></cell><cell>quadrant-1 We should expand</cell></row><row><cell></cell><cell>quadrant-2 Need to promote</cell></row><row><cell></cell><cell>quadrant-3 Re-evaluate</cell></row><row><cell></cell><cell>quadrant-4 May be improved</cell></row></table><note><p>[ "As a user, I want to be able to start a new game easily so that I can play whenever I want", "As a user, I want to see my current score and high score, so that I can track my progress", "As a user, I want the game to respond quickly to my actions, so that I can play</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Table 6 :</head><label>6</label><figDesc>Subset of MetaGPT Experimental Tasks' Prompt .js code for Flappy Bird where you control a yellow bird continuously flying between a series of green pipes. The bird flaps every time you left click the mouse. If the bird falls to the ground or hits a pipe, you lose. This game goes on infinitely until you lose and you get points the further you go.<ref type="bibr" target="#b3">4</ref> Tank battle game create a tank battle game. 5 Excel data process Write an excel data processing program based on streamlit and pandas,The screen first has an excel upload processing button. After the excel is uploaded, use pandas to display the data content in the excel.The program is required to be concise, easy to maintain, and not over-designed.The program as a whole uses streamlit to process web screen display, and pandas is sufficient to process excel reading and display. Others do not need to introduce additional packages. 6 CRUD manage Write a management program based on the crud addition, deletion, modification and query processing of the customer business entity,The customer needs to save the information of name, birthday, age, sex, and phone.The data is stored in client.db as a whole, and it is judged whether the customer table exists. If it does not exist, it needs to be created first.When querying, you need to query by name, and when deleting, you also need to delete by name.The program is required to be concise, easy to maintain, and not over-designed.The screen is realized through streamlit and sqlite, no need to introduce other additional packages. 7 Music transcriber Developing a program to transcribe sheet music into a digital format, Providing error-free transcribed symbolized sheet music intelligence from audio through signal processing involving pitch and time slicing then training a neural net to run Onset Detected CWT transforming scalograms to chromagrams decoded with Recursive Neural Network focused networks. 8 Custom press releases Create custom press releases, Develop a Python script that extracts relevant information about company news from external sources, such as social media extract update interval database for recent changes. The program should create press releases with customizable options and export writings to PDFs, NYTimes API JSONs, media format styled with interlink internal fixed character-length metadata. 9 Gomoku game Implement a Gomoku game using Python, incorporating an AI opponent with varying difficulty levels. 10 Weather dashboard Create a Python program to develop an interactive weather dashboard.</figDesc><table><row><cell cols="2">Task ID Task</cell><cell>Prompt</cell></row><row><cell>0</cell><cell>Snake game</cell><cell>create a snake game.</cell></row><row><cell>1</cell><cell>Brick breaker game</cell><cell>create a brick breaker game.</cell></row><row><cell>2</cell><cell>2048 game</cell><cell>create a 2048 game for the web.</cell></row><row><cell>3</cell><cell>Flappy bird game</cell><cell>write p5</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8"><head>Table 7 :</head><label>7</label><figDesc>Subset of MetaGPT experimental tasks' details. An Average (Avg.) of 70 tasks were calculated and 10 randomly selected tasks is included. '#' denotes 'The number of', while 'ID' is 'Task ID'. #lines of code #lines per code file #doc files #lines of doc #lines per doc file #prompt tokens #completion tokens time costs money costs</figDesc><table><row><cell>Code executability</cell><cell>W(2)</cell><cell>P(3)</cell><cell>R(1)</cell><cell></cell><cell>F(0)</cell><cell></cell><cell></cell><cell>F(0)</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>R(1)</cell><cell></cell><cell></cell><cell>P(3)</cell><cell>P(3)</cell><cell>R(1)</cell><cell></cell><cell></cell><cell></cell><cell>W(2)</cell><cell></cell><cell>P(3)</cell><cell></cell><cell></cell><cell>W(1.51)</cell></row><row><cell>Cost of revision</cell><cell>$ 1.09 1. TypeError</cell><cell>$ 1.35 1. TypeError</cell><cell>$ 1.04 1. lack</cell><cell>@app.route('/')</cell><cell>$ 1.01 1. PNG file miss-</cell><cell>ing 2. Compile bug</cell><cell>fixes</cell><cell>$ 1.30 1. PNG file</cell><cell>missing 2. Com-</cell><cell>pile bug fixes 3.</cell><cell>pygame.surface not</cell><cell>initialize</cell><cell>$ 1.51 1. dependency er-</cell><cell>ror 2. ModuleNot-</cell><cell>FoundError</cell><cell>$ 0.90 0</cell><cell>$ 0.92 0</cell><cell>$ 1.27 1. tensorflow ver-</cell><cell>sion error 2. model</cell><cell>training method not</cell><cell>implement</cell><cell>$ 1.27 1. dependency error</cell><cell>2. URL 403 error</cell><cell>$ 0.92 1. dependency er-</cell><cell>ror 2. missing main</cell><cell>func.</cell><cell>$1.12 0.51(only R,W or P)</cell></row><row><cell>Cost statistics</cell><cell>582.04</cell><cell>566.30</cell><cell>553.11</cell><cell></cell><cell>481.34</cell><cell></cell><cell></cell><cell>599.58</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>585.10</cell><cell></cell><cell></cell><cell>398.83</cell><cell>435.83</cell><cell>621.73</cell><cell></cell><cell></cell><cell></cell><cell>550.88</cell><cell></cell><cell>438.50</cell><cell></cell><cell></cell><cell>516.71</cell></row><row><cell></cell><cell>6157.00</cell><cell>6238.00</cell><cell>6316.00</cell><cell></cell><cell>5312.00</cell><cell></cell><cell></cell><cell>6567.00</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>7336.00</cell><cell></cell><cell></cell><cell>5832.00</cell><cell>7104.00</cell><cell>6499.00</cell><cell></cell><cell></cell><cell></cell><cell>5734.00</cell><cell></cell><cell>5363.00</cell><cell></cell><cell></cell><cell>6218.00</cell></row><row><cell></cell><cell>24087.00</cell><cell>32517.00</cell><cell>21934.00</cell><cell></cell><cell>22951.00</cell><cell></cell><cell></cell><cell>30087.00</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>35590.00</cell><cell></cell><cell></cell><cell>25673.00</cell><cell>29139.00</cell><cell>29372.00</cell><cell></cell><cell></cell><cell></cell><cell>24799.00</cell><cell></cell><cell>24109.00</cell><cell></cell><cell></cell><cell>26626.86</cell></row><row><cell></cell><cell>70.00</cell><cell>76.67</cell><cell>78.33</cell><cell></cell><cell>67.33</cell><cell></cell><cell></cell><cell>70.00</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>96.00</cell><cell></cell><cell></cell><cell>87.00</cell><cell>110.67</cell><cell>100.33</cell><cell></cell><cell></cell><cell></cell><cell>90.00</cell><cell></cell><cell>84.67</cell><cell></cell><cell></cell><cell>80.00</cell></row><row><cell>Doc statistics</cell><cell>210.00</cell><cell>230.00</cell><cell>235.00</cell><cell></cell><cell>202.00</cell><cell></cell><cell></cell><cell>210.00</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>294.00</cell><cell></cell><cell></cell><cell>261.00</cell><cell>332.00</cell><cell>301.00</cell><cell></cell><cell></cell><cell></cell><cell>270.00</cell><cell></cell><cell>254.00</cell><cell></cell><cell></cell><cell>240.00</cell></row><row><cell></cell><cell>3.00</cell><cell>3.00</cell><cell>3.00</cell><cell></cell><cell>3.00</cell><cell></cell><cell></cell><cell>3.00</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>3.00</cell><cell></cell><cell></cell><cell>3.00</cell><cell>3.00</cell><cell>3.00</cell><cell></cell><cell></cell><cell></cell><cell>3.00</cell><cell></cell><cell>3.00</cell><cell></cell><cell></cell><cell>3.00</cell></row><row><cell></cell><cell>39.20</cell><cell>31.83</cell><cell>66.00</cell><cell></cell><cell>32.80</cell><cell></cell><cell></cell><cell>33.83</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>36.50</cell><cell></cell><cell></cell><cell>18.25</cell><cell>79.00</cell><cell>43.00</cell><cell></cell><cell></cell><cell></cell><cell>43.00</cell><cell></cell><cell>31.00</cell><cell></cell><cell></cell><cell>42.98</cell></row><row><cell>Code statistics</cell><cell>196.00</cell><cell>191.00</cell><cell>198.00</cell><cell></cell><cell>164</cell><cell></cell><cell></cell><cell>203.00</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>219.00</cell><cell></cell><cell></cell><cell>73.00</cell><cell>316.00</cell><cell>215.00</cell><cell></cell><cell></cell><cell></cell><cell>215.00</cell><cell></cell><cell>93.00</cell><cell></cell><cell></cell><cell>191.57</cell></row><row><cell>ID</cell><cell>#code files 0 5.00</cell><cell>1 6.00</cell><cell>2 3.00</cell><cell></cell><cell>3 5.00</cell><cell></cell><cell></cell><cell>4 6.00</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>5 6.00</cell><cell></cell><cell></cell><cell>6 4.00</cell><cell>7 4.00</cell><cell>8 5.00</cell><cell></cell><cell></cell><cell></cell><cell>9 5.00</cell><cell></cell><cell>10 3.00</cell><cell></cell><cell></cell><cell>Avg. 4.71</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_0"><p>In computer programming, create, read, update, and delete (CRUD) are the four basic operations of persistent storage</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_1"><p>https://github.com/mermaid-js/mermaid</p></note>
		</body>
		<back>

			<div type="funding">
<div><p>"2048 by <rs type="person">Gabriele Cirulli</rs>": [0.8, 0.6] "<rs type="programName">2048 Number puzzle game by Estoty Entertainment LLC</rs>": [0.7, 0.4] "2048 by Androbaby": [0.6, 0.5] "2048 by <rs type="person">R. App</rs>": [0.5, 0.3] "2048 by Ketchapp": [0.7, 0.5] "2048 by <rs type="person">X-Flow</rs>": [0.6, 0.6] "<rs type="programName">2048 by Solebon LLC</rs>": [0.5, 0.4] "<rs type="programName">Our Target Product</rs>": [0.7, 0.7] '''</p></div>
			</div>
			<listOrg type="funding">
				<org type="funding" xml:id="_KmHPrd6">
					<orgName type="program" subtype="full">2048 Number puzzle game by Estoty Entertainment LLC</orgName>
				</org>
				<org type="funding" xml:id="_CZG2tXE">
					<orgName type="program" subtype="full">2048 by Solebon LLC</orgName>
				</org>
				<org type="funding" xml:id="_DvnvmAZ">
					<orgName type="program" subtype="full">Our Target Product</orgName>
				</org>
			</listOrg>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Team Roles at Work</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">M</forename><surname>Belbin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">2012</date>
			<publisher>Routledge</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Agile Manifesto. Manifesto for agile software development</title>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Peopleware: Productive Projects and Teams</title>
		<author>
			<persName><forename type="first">T</forename><surname>Demarco</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">R</forename><surname>Lister</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Communication and co-ordination practices in software engineering projects</title>
		<author>
			<persName><forename type="first">R</forename><surname>Ian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Seamus</forename><surname>Mcchesney</surname></persName>
		</author>
		<author>
			<persName><surname>Gallagher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information and Software Technology</title>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Pitfalls of agent-oriented development</title>
		<author>
			<persName><forename type="first">Michael</forename><surname>Wooldridge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nicholas</forename><forename type="middle">R</forename><surname>Jennings</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Second International Conference on Autonomous Agents</title>
		<meeting>the Second International Conference on Autonomous Agents</meeting>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Representing social structures in uml</title>
		<author>
			<persName><forename type="first">Henry</forename><surname>Van</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dyke</forename><surname>Parunak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">James</forename><surname>Odell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ICAS</title>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Founding agents&apos;&quot; autonomy&quot; on dependence theory</title>
		<author>
			<persName><forename type="first">Cristiano</forename><surname>Castelfranchi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ECAI</title>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Influences and reaction: a model of situated multiagent systems</title>
		<author>
			<persName><forename type="first">Jacques</forename><surname>Ferber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jean-Pierre</forename><surname>M?ller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICMAS</title>
		<imprint>
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A meta-model for the analysis and design of organizations in multi-agent systems</title>
		<author>
			<persName><forename type="first">Jacques</forename><surname>Ferber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Olivier</forename><surname>Gutknecht</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICMAS</title>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<author>
			<persName><forename type="first">Sung</forename><surname>Joon</surname></persName>
		</author>
		<author>
			<persName><surname>Park</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C O'</forename><surname>Joseph</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Carrie</forename><forename type="middle">J</forename><surname>Brien</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Meredith</forename><forename type="middle">Ringel</forename><surname>Cai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Percy</forename><surname>Morris</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><forename type="middle">S</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName><surname>Bernstein</surname></persName>
		</author>
		<title level="m">Generative agents: Interactive simulacra of human behavior</title>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Camel: Communicative agents for</title>
		<author>
			<persName><forename type="first">Guohao</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hasan</forename><surname>Abed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Al</forename><surname>Kader Hammoud</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hani</forename><surname>Itani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dmitrii</forename><surname>Khizbullin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bernard</forename><surname>Ghanem</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">exploration of large scale language model society</title>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<author>
			<persName><forename type="first">Tianle</forename><surname>Cai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xuezhi</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tengyu</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xinyun</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Denny</forename><surname>Zhou</surname></persName>
		</author>
		<title level="m">Large language models as tool makers</title>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Unleashing cognitive synergy in large language models: A task-solving agent through multi-persona self-collaboration</title>
		<author>
			<persName><forename type="first">Zhenhailong</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shaoguang</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wenshan</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tao</forename><surname>Ge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Furu</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Heng</forename><surname>Ji</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Improving factuality and reasoning in language models through multiagent debate</title>
		<author>
			<persName><forename type="first">Yilun</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shuang</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Antonio</forename><surname>Torralba</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Joshua</forename><forename type="middle">B</forename><surname>Tenenbaum</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Igor</forename><surname>Mordatch</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Encouraging divergent thinking in large language models through multi-agent debate</title>
		<author>
			<persName><forename type="first">Tian</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhiwei</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wenxiang</forename><surname>Jiao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xing</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yan</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rui</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yujiu</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhaopeng</forename><surname>Tu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shuming</forename><surname>Shi</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<author>
			<persName><forename type="first">Rui</forename><surname>Hao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Linmei</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Weijian</forename><surname>Qi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Qingliu</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yirui</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Liqiang</forename><surname>Nie</surname></persName>
		</author>
		<title level="m">Chatllm network: More brains, more intelligence</title>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<author>
			<persName><forename type="first">Shuyan</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Frank</forename><forename type="middle">F</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hao</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xuhui</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Robert</forename><surname>Lo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Abishek</forename><surname>Sridhar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xianyi</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yonatan</forename><surname>Bisk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Daniel</forename><surname>Fried</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Uri</forename><surname>Alon</surname></persName>
		</author>
		<title level="m">A realistic web environment for building autonomous agents</title>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title/>
		<author>
			<persName><surname>Torantulino</surname></persName>
		</author>
		<ptr target="https://github.com/Significant-Gravitas/Auto-GPT" />
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">Auto-gpt</note>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<ptr target="https://github.com/OpenBMB/AgentVerse" />
		<title level="m">yushengsu thu, chanchimin, libowen2121, Xial-kotori, Dr-Left, tzw2698, and zhouxh19. Agentverse</title>
		<imprint>
			<date type="published" when="1998">1998. 2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Harrison</forename><surname>Chase</surname></persName>
		</author>
		<author>
			<persName><surname>Langchain</surname></persName>
		</author>
		<ptr target="https://github.com/hwchase17/langchain" />
		<imprint>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Lever: Learning to verify language-to-code generation with execution</title>
		<author>
			<persName><forename type="first">Ansong</forename><surname>Ni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Srini</forename><surname>Iyer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dragomir</forename><surname>Radev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Veselin</forename><surname>Stoyanov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wen-Tau</forename><surname>Yih</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sida</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xi</forename><surname>Victoria</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lin</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICML</title>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Errors are useful prompts: Instruction guided task programming with verifier-assisted iterative prompting</title>
		<author>
			<persName><forename type="first">Marta</forename><surname>Skreta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Naruki</forename><surname>Yoshikawa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sebastian</forename><surname>Arellano-Rubach</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhi</forename><surname>Ji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lasse</forename><surname>Bj?rn Kristensen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kourosh</forename><surname>Darvish</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Al?n</forename><surname>Aspuru-Guzik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Florian</forename><surname>Shkurti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Animesh</forename><surname>Garg</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Competition-level code generation with alphacode</title>
		<author>
			<persName><forename type="first">Yujia</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Junyoung</forename><surname>Chung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nate</forename><surname>Kushman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Julian</forename><surname>Schrittwieser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R?mi</forename><surname>Leblond</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tom</forename><surname>Eccles</surname></persName>
		</author>
		<author>
			<persName><forename type="first">James</forename><surname>Keeling</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Felix</forename><surname>Gimeno</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Agustin</forename><surname>Dal Lago</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science</title>
		<imprint>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Execution-guided neural program synthesis</title>
		<author>
			<persName><forename type="first">Xinyun</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chang</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dawn</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICLR</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Latent execution for neural program synthesis beyond domainspecific languages</title>
		<author>
			<persName><forename type="first">Xinyun</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dawn</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yuandong</forename><surname>Tian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">NeurIPS</title>
		<imprint>
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<author>
			<persName><forename type="first">Shunyu</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jeffrey</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dian</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nan</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Izhak</forename><surname>Shafran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Karthik</forename><surname>Narasimhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yuan</forename><surname>Cao</surname></persName>
		</author>
		<title level="m">React: Synergizing reasoning and acting in language models</title>
		<imprint>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Reflexion: an autonomous agent with dynamic memory and self-reflection</title>
		<author>
			<persName><forename type="first">Noah</forename><surname>Shinn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Beck</forename><surname>Labash</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ashwin</forename><surname>Gopinath</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Swiftsage: A generative agent with fast and slow thinking for complex interactive tasks</title>
		<author>
			<persName><forename type="first">Yicheng</forename><surname>Bill Yuchen Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Karina</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Prithviraj</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Faeze</forename><surname>Ammanabrolu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shiyu</forename><surname>Brahman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chandra</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yejin</forename><surname>Bhagavatula</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiang</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName><surname>Ren</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<author>
			<persName><forename type="first">Chen</forename><surname>Qian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xin</forename><surname>Cong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Cheng</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Weize</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yusheng</forename><surname>Su</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Juyuan</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhiyuan</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Maosong</forename><surname>Sun</surname></persName>
		</author>
		<title level="m">Communicative agents for software development</title>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Chain-of-thought prompting elicits reasoning in large language models</title>
		<author>
			<persName><forename type="first">Jason</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xuezhi</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dale</forename><surname>Schuurmans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Maarten</forename><surname>Bosma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Fei</forename><surname>Xia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ed</forename><surname>Chi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Quoc</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Denny</forename><surname>Le</surname></persName>
		</author>
		<author>
			<persName><surname>Zhou</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2022">2022</date>
			<publisher>NeurIPS</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<author>
			<persName><forename type="first">Timo</forename><surname>Schick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jane</forename><surname>Dwivedi-Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Roberto</forename><surname>Dess?</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Roberta</forename><surname>Raileanu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Maria</forename><surname>Lomeli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Luke</forename><surname>Zettlemoyer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nicola</forename><surname>Cancedda</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Thomas</forename><surname>Scialom</surname></persName>
		</author>
		<author>
			<persName><surname>Toolformer</surname></persName>
		</author>
		<title level="m">Language models can teach themselves to use tools</title>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Multi-agent collaboration: Harnessing the power of intelligent llm agents</title>
		<author>
			<persName><forename type="first">Yashar</forename><surname>Talebirad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Amirhossein</forename><surname>Nadiri</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Multi-party chat: Conversational agents in group settings with humans and models</title>
		<author>
			<persName><forename type="first">Jimmy</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kurt</forename><surname>Shuster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Arthur</forename><surname>Szlam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jason</forename><surname>Weston</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jack</forename><surname>Urbanek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mojtaba</forename><surname>Komeili</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Playing repeated games with large language models</title>
		<author>
			<persName><forename type="first">Elif</forename><surname>Akata</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lion</forename><surname>Schulz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Julian</forename><surname>Coda-Forno</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Seong</forename><surname>Joon Oh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matthias</forename><surname>Bethge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Eric</forename><surname>Schulz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Building cooperative embodied agents modularly with large language models</title>
		<author>
			<persName><forename type="first">Hongxin</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Weihua</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jiaming</forename><surname>Shan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Qinhong</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yilun</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Joshua</forename><forename type="middle">B</forename><surname>Tenenbaum</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tianmin</forename><surname>Shu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chuang</forename><surname>Gan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Alec2435, HaniaA, ryderwishart, and zoan37</title>
		<author>
			<persName><forename type="first">Timconnorz</forename></persName>
		</author>
		<ptr target="https://github.com/101dotxyz/GPTeam" />
	</analytic>
	<monogr>
		<title level="j">Gpteam</title>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Mohannadcse</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Ashishhoodaiitd</forename></persName>
		</author>
		<ptr target="https://github.com/langroid/langroid" />
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title/>
		<author>
			<persName><surname>Runzheyang</surname></persName>
		</author>
		<author>
			<persName><surname>Socraticai</surname></persName>
		</author>
		<ptr target="https://github.com/RunzheYang/SocraticAI" />
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<ptr target="https://github.com/mermaid-js/mermaid" />
		<title level="m">Knut Sveidqvist and Contributors to Mermaid. Mermaid: Generate diagrams from markdown-like text</title>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
