<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">sTuples: Semantic Tuple Spaces £</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Deepali</forename><surname>Khushraj</surname></persName>
							<email>deepali.khushraj@nokia.com</email>
							<affiliation key="aff0">
								<orgName type="department">Nokia Research Center 5</orgName>
								<address>
									<addrLine>Wayside Road Burlington</addrLine>
									<postCode>01803</postCode>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Ora</forename><surname>Lassila</surname></persName>
							<email>ora.lassila@nokia.com</email>
							<affiliation key="aff1">
								<orgName type="department">Nokia Research Center 5</orgName>
								<address>
									<addrLine>Wayside Road Burlington</addrLine>
									<postCode>01803</postCode>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Tim</forename><surname>Finin</surname></persName>
							<email>finin@cs.umbc.edu</email>
							<affiliation key="aff2">
								<orgName type="institution">University of Maryland</orgName>
								<address>
									<addrLine>Hilltop Circle Baltimore</addrLine>
									<postCode>1000, 21250</postCode>
									<region>MD</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">sTuples: Semantic Tuple Spaces £</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">022A531A26139C4D729F9D4489026AB2</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T17:35+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Tuple Spaces offer a coordination infrastructure for communication between autonomous entities by providing a logically shared memory along with data persistence, transactional security as well as temporal and spatial decoupling-properties that make it desirable in distributed systems for e-commerce and pervasive computing applications. In most Tuple Space implementations, tuples are retrieved by employing type-value matching of ordered tuples, object-based polymorphic matching, or XML-style pattern matching. In a heterogeneous environment, this can pose several limitations. This paper discusses the architecture and implementation of a prototype semantic infrastructure, which uses Semantic Web technologies to represent and retrieve tuples from a Tuple Space. Semantic Tuple Spaces (sTuples) overcomes limitations of the JavaSpaces Tuple Space implementation, by making use of a web ontology language and RACER, a description-logic reasoning engine. The sTuples infrastructure extends and integrates with Vigil, a secure framework for communication and access of intelligent services in a pervasive environment. Specialized agents, such as the tuple-recommender agent, task-execution agent and publish-subscribe agent, which have a better understanding of the environment, reside on the Tuple Space and play an important role in providing user-centric reasoning.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>The original vision of Pervasive Computing (PerCom) was formulated by Mark Weiser <ref type="bibr" target="#b27">[28]</ref> more than a decade ago. Since then, there have been significant developments in wireless technology and device capabilities; however, there £ This work was partially supported by DARPA contract are significant research challenges that are yet to be completely addressed. A few important research challenges in such an environment include auto-configuration of entities, context-sensitive behavior and the creation of unobtrusive services. We believe that the Semantic Web <ref type="bibr" target="#b1">[2]</ref> can help realize these challenges by providing semantic interoperability. Semantic interoperability here refers to a common understanding of the semantics associated with both data and services in a pervasive environment.</p><p>To enable semantic interoperability, we need semantic infrastructures and semantic gadgets <ref type="bibr" target="#b17">[18]</ref> that would allow heterogeneous entities to work together in a pervasive environment. It is important that semantic gadgets and semantic infrastructures both have built-in capabilities to process and infer meaningful information from semantic meta data associated with data and services. In addition to this, semantic infrastructures should also cater to factors such as network QoS, device limitations, security, transactional integrity, synchronization, context-based factors etc. The Semantic Tuple Spaces (sTuples) work aims at providing one such semantic infrastructure by extending the Tuple Space model.</p><p>The Tuple Space model was initially conceived for parallel computing in David Gelernter's Linda system <ref type="bibr" target="#b5">[6]</ref>. In AI parlance, a Tuple Space is similar to a blackboard system. It can be viewed as a logically shared memory, where producers add tuples to the space, while consumers read or extract tuples from the space using a search template. The look up for tuples on the space is based on content; hence it can also be viewed as an associative memory. Although Tuple Spaces were not originally designed to be used as mobile middleware, they provide several features, which make them an interesting model for the same <ref type="bibr" target="#b19">[20]</ref>. One major shortcoming of Tuple Space implementations that impedes it from being a suitable infrastructure for PerCom is the way tuples are represented and retrieved from space. In most implementations, tuples are retrieved by employing typevalue matching of ordered tuples (e.g. Linda), object-based polymorphic matching (e.g. JavaSpaces), or XML style pat-tern matching (e.g. Ruple). The shortcomings in these approaches are discussed in subsequent sections.</p><p>In this paper, we present the architecture and implementation of the sTuples infrastructure. The sTuples infrastructure overcomes limitations of the JavaSpaces Tuple Space implementation, by using the web ontology language, DAML+OIL <ref type="bibr" target="#b11">[12]</ref> and RACER <ref type="bibr" target="#b8">[9]</ref>, a description-logic reasoning engine. The sTuples infrastructure also extends and integrates with Vigil <ref type="bibr" target="#b15">[16]</ref>, a secure framework for communication and access of intelligent services in a pervasive environment.</p><p>The key focus of our work is to: Enhance Tuple Representation and Searches: Representation is enhanced by introducing the concept of a Semantic Tuple, and extending it to represent data and servicedescriptions in a pervasive environment. Tuple template matching is enhanced by using a semantic match on top of object-based matching.</p><p>Provide User Centric Reasoning: This is achieved by using agents on the space that provide unobtrusive data and services, that execute atomic or composite tasks on behalf of the user; and that dynamically deliver/notify data or events to the user.</p><p>Serve as a Semantic Infrastructure in PerCom: This is achieved by integrating with Vigil, employing constructs of the Tuple Space and by incorporating semantics in Tuple Spaces.</p><p>The rest of the paper is organized as follows: Section 2.1 provides a discussion on Tuple Spaces, existing implementations and its attractiveness and shortcomings as a middleware. Section 2.2 provides a description of the Vigil framework. Section 2.3 briefly discusses the role of AI in PerCom and the Semantic Web. Section 3 motivates the use of sTuples. Section 4 presents how tuples are represented and retrieved in sTuples and provides an example of its use. Section 5 presents enhancements made to the Vigil framework. Section 6 discusses the purpose and implementation details of specialized agents. Section 7 provides implementation insights, points out possible future work and concludes the paper.</p><p>In this paper, we do not take into account issues related to scalability and security of Tuple Spaces. We also do not touch upon issues concerning distributed Tuple Space implementations. These issues have been discussed in <ref type="bibr" target="#b22">[23]</ref> and <ref type="bibr" target="#b9">[10]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Background</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.">Tuple Spaces</head><p>Why Tuple Spaces? The Tuple Space paradigm renders itself as a suitable middleware because it provides properties like: data persistence, temporal &amp; spatial decoupling, transactional security, synchronization constructs and associative memory lookup. Temporal decoupling is useful because entities involved in communication do not have to exist at the same time. The persistent nature of tuples enables the consumer to utilize data, regardless of the connection state of the producer. Spatial decoupling provides for group interactions and implicit fault tolerance <ref type="bibr" target="#b23">[24]</ref>. Tuple spaces provide transactional integrity <ref type="bibr" target="#b21">[22]</ref>  <ref type="bibr" target="#b28">[29]</ref>, which is an important requirement for m-commerce applications. Recent implementations of Tuple Spaces allow entities to exchange executable code; this facilitates the creation of mobile agents. There are several implementations of lookup services like Jini's Reggie service <ref type="bibr" target="#b26">[27]</ref>. We believe that the functionality of a lookup service augments rather than replaces the functionality of a Tuple Space; thus, they should be used together.</p><p>Existing Tuple Spaces and their Limitations: Several implementations of Tuple Spaces exist, which essentially differ in the degree of extensions that they provide. A tuple in Linda <ref type="bibr" target="#b5">[6]</ref> is defined as an ordered set of values (or fields). Tuples can contain actual fields (the value itself) and formal fields (a wild card). In order to match a tuple in Linda, the template and tuple should have the same arity and ordering of fields. The actual matching is done by comparing field values (actuals or formals) and field types of the template and candidate tuples. TSpaces, JavaSpaces and GigaSpaces are all object-oriented Tuple Spaces. In JavaSpaces and GigaSpaces tuples have data as well as executable code, and tuples, in addition to the fields, are typed. The tuples are stored as serialized objects on the space to allow exchange of executable code. These systems support polymorphic type matching, where the returned result could be a subtype of the tuple template. The supported operations include read, write, take and notify. Features such as transactional security and support for multiple spaces are also provided <ref type="bibr" target="#b21">[22]</ref>. IBM's TSpaces system is a combination of Tuple Space and relational database features. It supports simple types and objects as fields in a tuple as opposed to using only serialized objects <ref type="bibr" target="#b28">[29]</ref>. Ruple and other XML Space implementations use a document-centric approach where XML documents are stored on the space and retrieved using XML query syntax (XQL) <ref type="bibr" target="#b25">[26]</ref>. Lime extends the Linda model to support mobility in both wired and ad hoc networks <ref type="bibr" target="#b24">[25]</ref>. MARS introduces reactivity in Tuple Spaces for mobile agent coordination <ref type="bibr" target="#b2">[3]</ref>.</p><p>In all these implementations, we see a general transition from type-value matching to OO based polymorphic type matching to XML type querying. There are shortcomings in all of these approaches. One, it provides only syntactic interoperability-XML representations can cater to syntactic interoperability; however, they cannot cater to semantic interoperability because the same XML tag can be interpreted differently across systems E.g. A field tag could re-fer to magnetic field or a branch of knowledge. Two, existing implementations do not have representations that are expressive enough and that can be reasoned by machines. E.g. a radio service cannot advertise itself as service that does not play music that belongs to genre hard rock. Three, inexact matching-the read and take operations in existing implementations do not account for subsumption based or partial matches. E.g. a query for a monochrome printer on the space will not consider a color printer as a valid match. Four, need for common ontology-a common ontology to refer to common terms is required; however, object-based interfaces and other data-structures cannot be adapted as a standard to share ontologies, as they do not meet basic requirements of an ontology language <ref type="bibr" target="#b10">[11]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.">Vigil</head><p>In sTuples, we integrate Tuple Spaces with the Vigil <ref type="bibr" target="#b15">[16]</ref> framework to create clients and services. Vigil realizes the Smart Home scenario, in which mobile users can access devices like printers, lights etc. over low-bandwidth or shortrange wireless networks. In our system, Vigil acts as a communication gateway by abstracting and translating communication protocols such as infrared and Bluetooth <ref type="bibr" target="#b4">[5]</ref>. The core component of Vigil is the Service Manager(SM) component, which acts as a mediator between services and users in a particular Smart Home. In our implementation, the SM integrates with sTuples. SMs are arranged in a hierarchy, and form the core of the Vigil system. The SM provides the user with a list of available services and also acts as a broker to subscribe, unsubscribe or forward commands from users to the services. The main idea behind the hierarchical configuration of SMs is the relegation of services on the basis of domains such as buildings, floors, and particular rooms <ref type="bibr" target="#b13">[14]</ref>. To share services across SMs, messages are routed to foreign SMs by following the tree hierarchy. Vigil also provides distributed trust, access control and authentication. Hardware and software services are not distinguished so that a mobile user can access them in the same way. The information flow in the system takes place using Centaurus Capability Markup Language (CCML) <ref type="bibr" target="#b14">[15]</ref>, an XML-based language for data exchange.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.">AI and Semantic Web</head><p>There are several aspects of AI that help enable semantic interoperability as mentioned in <ref type="bibr" target="#b16">[17]</ref>. Aspects of AI that help achieve this include: knowledge representation and reasoning through the Semantic Web, automated planning to enable service composition, machine learning to bootstrap existing knowledge on the web and the use of software agents that act on behalf of the user and exhibit reactivity, pro-activity, autonomy and sociability <ref type="bibr" target="#b12">[13]</ref> .</p><p>The vision of the Semantic Web <ref type="bibr" target="#b1">[2]</ref> expands on the vision of the WWW by associating accessible formal semantics with content and services. An important characteristic of the Semantic Web is that it can address "anything", any object -virtual or physical -that has a URI. This allows us to overlay the Semantic Web on a Pervasive Computing environment, making it possible to represent and interlink devices, their capabilities, and the functionality they offer.</p><p>Motivated by the need to automate functions on the Web, the introduction of semantics offers greater interoperability of information systems: via the use of shared ontologies, semantics enable automated software (such as autonomous agents) to reason about content and services, and produce intelligent responses even to unforeseen situations. Ontologies ("specifications of conceptualization" <ref type="bibr" target="#b6">[7]</ref>) are expressed using languages such as RDF <ref type="bibr" target="#b18">[19]</ref> or its more expressive Description Logic (DL) -based extension DAML+OIL <ref type="bibr" target="#b11">[12]</ref>. sTuples currently uses the DAML+OIL ontology language <ref type="foot" target="#foot_2">1</ref> .</p><p>In DL parlance, the term TBox refers to terminological axioms used to define concepts in a domain and ABox refers to assertional axioms about individuals. RACER implements an optimized tableau calculi algorithm for DL to enable reasoning over multiple TBoxes and ABoxes. The use of a DL reasoner -in our case RACER <ref type="bibr" target="#b8">[9]</ref> -offers attractive computational characteristics over other forms of logic and over other types of reasoners.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Motivation</head><p>Consider the scenario where a user is attending a conference. Data Tuple: A registered user at a conference should be able to accesses data tuples on the space that has information about the proceedings and schedule for the conference. By making use of semantics attached to the data tuple, the user's personal agent can then synchronize the conference schedule with his trip's schedule and research interests to help create a personalized conference agenda. Synchronous Access: The speaker should be able to write a data tuple that contains his PowerPoint presentation on the space, and other registered users should be able to access the presentation. Users should also be able to add annotations to slides, to share their opinion about the presentation with others. The synchronization constructs of the space help multiple users access the tuple. Access Rights and Service Tuple: By using access rights provided by Vigil a registered user gets rights to access data and services in the conference space based on his registration type. For example, the user can enroll for academic, student or industrial track registration. Access rights are also governed by the user's role in the conference. For example, invited speakers and authors of accepted papers should be able to get a handle to service tuples on the space that would allow them to control the projected presentation or dim lights or control the speaker volume in the room. Subscription to Tuples: Conference volunteers can access the room reservation service to reschedule or handle last minute changes to the schedule. If the conference schedule changes, then a user who has subscribed to the conference schedule tuple through the publish-subscribe agent should be notified of changes. Semantic Search: Registered users should also be able to browse for presentations, or schedule of events on the Tuple Space based on the research track that is of interest to them. For, example a user should be able to search for all talks on the space that are related to the work on both Semantic Web and pervasive computing within universities in the US. Task-Execution: Users should have the ability to schedule an atomic task or a set of associated tasks that access data and service tuples in the conference room E.g. by using the task-execution agent a speaker can get a control of the Pow-erPoint service and have the lights switched off when it is time for him to present the talk Unobtrusive behavior: Users should only be presented with tuples that are of interest to them. E.g. advertisement tuples that represent hotel discounts should not be presented by the recommender-agent to a user who lives locally.</p><p>In order to implement such a scenario we need an intelligent middleware infrastructure that has built-in semantic capabilities. Tuples in such a space should be expressive enough, and should support both syntactic and semantic interoperability.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">sTuples: Representation and Retrieval</head><p>The sTuples system extends Outrigger <ref type="bibr" target="#b21">[22]</ref>, Sun's implementation of the JavaSpaces service specification, to support intelligent matching of tuples.</p><p>A Semantic Tuple in sTuples extends JavaSpace's objectbased tuple and acts a role marker in the system. For an object tuple to become a valid semantic tuple, it must contain an object field of type DAML+OIL Individual. This object field contains assertional axioms(ABox) about the service instance or data instance that is being shared. Alternatively, the object field can provide a URL from where assertional axioms about the shared data or service can be loaded. From an implementation point of view, a generic Semantic-Tuple interface that extends the JavaSpace's Entry <ref type="bibr" target="#b21">[22]</ref> interface is introduced. System designers can choose to extend/implement this interface to create application specific tuples.</p><p>The Semantic Tuple Manager and the Semantic Tuple Matcher are two primary components that are incorporated into Outrigger. There are two extensions to the Semantic Tuple: Service Tuple and Data Tuple. A service tuple is used to advertise a service, whereas a data tuple is used to share data/information provided by a service/agent. Each of these tuple types have specific object fields, which are discussed in the following section. Figure <ref type="figure">1</ref> gives an overview of the components on the space and the interaction between entities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 1. Semantic Space with Specialized Agents</head><p>Semantic Tuple Manager: This component manages the addition, removal and state changes of tuples. Every time a write operation is performed all ABoxes associated with the tuple are asserted into the knowledge base. There are two modes of operation: one in which the axioms associated with newly encountered resources and imports are asserted into the knowledge base, and the other in which only the specified axioms are asserted. Before new facts and rules are committed into the knowledge base, the tuples are validated and also a check on the consistency of the knowledge base is performed. If an inconsistency (using Racer macros abox-consistent? and tbox-coherent?) is detected by the reasoner, the description is retracted from the knowledge base and the write operation fails. Every time a remove operation is performed the facts are removed from the Tuple Space.</p><p>Semantic Tuple Matcher: This component implements the algorithm for matching templates and interfaces with Racer to draw additional inferences, which is achieved by classifying the TBox <ref type="bibr" target="#b8">[9]</ref> and realizing the ABox. A tuple can be retrieved from space by performing a read or take operation. In order to invoke these operations, a semantic template that best matches the consumer's requirements is passed as an input. A semantic tuple template is a special case of a semantic tuple where assertional axioms are based on terminological axioms provided by the TupleTemplate ontology. A snapshot of the template ontology is given in figure <ref type="figure">2</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 2. Semantic Tuple Template Ontology</head><p>The TupleTemplate class has several properties. The has-Field property links a TupleTemplate with a TupleField. The TupleField class is an abstract class with two subclasses: DesiredField and UndesiredField, where both classes are disjoint. The TupleField class has two properties fieldType and fieldValue. The range of the fieldType property is a Property-this property makes it similar to the property daml:onProperty used to express restrictions on properties using daml:Restriction. The fieldValue property can point to any Resource. It also has a property called priorityNumber, which indicates how important a particular field is with respect to other fields. The tuple template has the hasDegree-OfMatch property, using which the user can specify the type of matches that are acceptable, which could be one of Ex-actMatch, PluggedInMatch or SubsumptionMatch. The tuple template's hasTupleCategory property refers to the possible classes that the tuple can be an individual of. The has-FieldGroup property is used to map a tuple template to a FieldGroup, which essentially is a collection of TupleFields with a requiredCardinality restriction.</p><p>Template matching is done by posing several queries to the reasoning engine. The matching algorithm works as follows: The matcher first validates the incoming tuple template instance.It then searches for candidate tuples. A semantic tuple becomes a candidate result, only if the has-TupleCategory field is satisfied. The TBox is classified and the Abox is realized, before the reasoner gets queried-this is done so that all hidden classes that an individual belongs to become visible. It then iterates over every TupleField in the tuple template to select matches from the list of candidate semantic tuples. Since the fieldValue's range is any re-source, it could be of type instance, class or qualified value. Based on the type of the fieldValue property, and the acceptable degree of match, different cases are handled. The property name that the fieldType refers to, is used as an argument for queries about related-individuals and also to retrieve individual-role-fillers <ref type="bibr" target="#b7">[8]</ref>.</p><p>The following steps are performed for every TupleField of the tuple template:</p><p>1. The first step is to find an exact match, which occurs when a tuple and a template are equivalent. In our prototype, a template is considered equivalent to a tuple if all the TupleField properties (including the Desired-Field and UndesiredField properties) specified by the template "exactly match" the description of a tuple.</p><p>2. Subsumption Matches-if there are no exact matches and if the preferred degree of match indicates subsumption as valid then queries are posed to find subsumption based relations.</p><p>3. Plugged-In Matches-if there are no exact matches and if the preferred degree of match indicates plugged-in as valid, queries are posed to extract plugged-in tuples.</p><p>4. If none of the above worked then the match has failed and no tuple is returned.</p><p>At each step a weight is assigned to every tuple that gets selected, based on its degree of match. The weights given for each of these matches is configurable. If an undesired field is present in the tuple, then there is a clash of interest due to which the tuple is assigned a negative weight. For FieldGroups the procedure remains the same except that the required cardinality should be satisfied in the group. After processing all the TupleFields in the template, the tuple with the highest weight gets selected.</p><p>Due to ontology modeling errors, the knowledge base can become inconsistent. The evaluation functions in RACER are used to detect such errors. The ABox querying mechanism enables us to detect the consistency of an ABox in context of a TBox. Other ABox and TBox retrieval queries are used to derive most specific instantiators of an individual, to query for related individuals, to determine concept/role descendants and ancestors, to ascertain equivalent concepts etc.</p><p>There are two inference modes that Racer supports to classify and realize the knowledge base. In the eager mode answering queries requires only a knowledge base lookup. The lazy mode avoids computations that are unrelated to a query. When a write operation is performed on the space, only a knowledge base coherency check is required. Since this can be done even when the knowledge base is not classified, we operate the reasoner in lazy mode. However, based on the system load, the knowledge base is classified at regular intervals-this is done to reduce the time required to perform operations such as read and take.</p><p>A simplified view of the modifications made to the Outrigger matching scheme is discussed below. All operations on the space use the Entry class to either store objects on the space or, as a template, to search for objects from the space. The EntryRep class, which represents the Entry object that gets marshalled from the client to the space, was modified to keep track of indexes corresponding to fields that contain semantic information. The space maintains a TypeTree object that keeps track of all the entry types and subtypes that the space has encountered thus far. It also maintains an EntryHolderSet for every entry type in the TypeTree. In the object-based match, an entry holder set is first selected from the tree based on type of the incoming template. A hash code is then computed for every entry in the holder set, and if the hash value of the template and the entry matches then the match is considered valid. The new matching scheme works as follows: If the template does not have any semantic content then we can do the regular object-based match, else we go further and try to find a semantic match for the template. Based on the EntryRep index the DAML content is extracted and the data is sent to the Semantic Tuple Matcher component. If there are any matches, then the Semantic Tuple Matcher returns a vector of all tuples that match the template description. The tuples in the vector are ordered in descending degree of match. After the semantic matches are retrieved, an object-based match is performed on the selected tuples to ensure that a tuple where both the semantic match and object-based match succeed gets selected. The first tuple in the vector that passes the object-based match gets selected and is passed back to the client.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">An Example</head><p>To advertise service tuples on the space we created several service ontologies like Light Service, Printer Service, Room Reservation Service, Music Service etc. All our service related ontologies are sub-classed from the TupleService class.</p><p>A snapshot of the Light Service instance in the LAIT Lab at UMBC is shown in Figure <ref type="figure" target="#fig_0">3</ref>. The LAIT Lab Light Service is an instance of a LightService that provides light from a source that is located on a table, which is used for reading and whose energy source in electric. The light service also happens to be a secondary light source in the room.</p><p>Alice enters the room and wants to get control of a light service so that she can read a book in the room. She searches for tuples on the space using the template as shown in Figure <ref type="figure" target="#fig_1">4</ref>:</p><p>The template indicates that she is looking for an electric reading light that is located on a table or on the floor. It also indicates that the user wants control of only a non-primary light source in the room. sTuples searches for all tuples on the space that can provide the best match for Alice's query. Using the classification support provided by the reasoner, the space figures out that LAITLabLightService provides a light source that belongs to the class FluorescentReadingLight. From, the service ontology it also figures out that a FluorescentReading-Light had energy source Electric and therefore it also belongs to the class ElectricReadingLight. Since the LAITLab-LightService's location, category and control type all match with the template the service tuple gets selected as a valid match.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">sTuples with Vigil</head><p>The Semantic Tuple Space can be viewed as an extension layer to the Service Manager(SM) component in the original Vigil framework discussed in Section 2.2. The Service Manager still acts as a mediator between the services and mobile users; however, it now uses constructs of the Tuple Space to incorporate features such as data persistence, leasing, transactional integrity, spatial decoupling etc. The persistent nature of tuples on the space, allows the data and its state to be preserved even when the system goes down. The leasing mechanism on the space is used to handle unwanted and outdated tuples. Transactional integrity is preserved by using constructs of the Tuple Space (this feature is not used by current implementations of Vigil Clients/Services). Producers and Consumers of data tuples do not have to be present in the vicinity at the same time to share information-this kind of spatial decoupling is very useful in a pervasive environment where network QoS can keep changing and where the communicating entities are constantly moving in and out of a given space.</p><p>The following enhancements were made to the Vigil framework:</p><p>1. Service Registration: A Vigil service can now advertise itself by registering a service tuple with the SM. A service tuple instance contains the service id, the DAML+OIL instance describing the service, a freetext message describing service functionality, a service </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Object Registration:</head><p>The CCML object registration message is introduced to publish data tuples on the space. An object tuple contains a unique id to identify the producer of the tuple, a DAML+OIL instance of the sharable data and a list of users who are subscribed to this object. The subscribed user's list is required to handle user movement across multiple spaces.</p><p>3. Leasing: The leasing mechanism on the space is used to maintain semantic tuples on the space. A timer thread is associated with Vigil's Service Client to renew objects and service registrations that have expired.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">CCML Translator:</head><p>The CCML translator utility module creates semantic tuples from CCML messages for service and object registration. The specialized agents make use of this module to understand incoming CCML messages for interest registration, object subscription, task execution etc.</p><p>5. Specialized Agents: Communication between the specialized agents and the service clients take place through the SM in the current implementation. New CCML message types such as Interests Registration Request/Response/Update, Published Object Subscription Request/Response and Task Execution Request/Response etc. are introduced in the system. The CCML Parser is updated to understand these new messages.</p><p>6. Inter-space Communication: The service managers in the Vigil system are arranged in a tree-like hierarchy. Every Service Manager uses its own Semantic Tuple Space and specialized agents. The specialized agents allow clients and services to do read operations on data and services across spaces and to do a take operation across spaces, when appropriate delegation and access rights are available.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">sTuples: Specialized Agents</head><p>Specialized agents reside on the Semantic Tuple Space to off-load the user and to incorporate user semantics in delivering data and services to the user. Our prototype implements three specialized agents as shown in figure <ref type="figure">1</ref>. These agents make use of service tuples and data tuples. Several concepts from ontologies like DAML Time (http://www.kestrel.edu/DAML/2000/12/TIME.daml) and Cyc (http://opencyc.sourceforge.net/daml/cyc.daml) were used to create ontologies in sTuples. For the sake of conciseness, the ontology modeling details are excluded.</p><p>Tuple Recommender Agent: In the original Vigil framework, the client's service list was created based on access rights only; however, in a pervasive environment since there can be a plethora of data and service tuples, customized recommendations is important. This agent pushes unwanted data and services into the periphery of user's attention and presents only services or data tuples that are of interest to the user.</p><p>There are several aspects of context: location, temporal information, user preferences, environmental factors (like light, temperature etc.), proximity of resources, resource availability, schedules etc. <ref type="bibr" target="#b3">[4]</ref>. Our interest registration ontology takes into account only factors related to temporal information(like time and date), user preferences and location.</p><p>The client registers interests with the recommender agent by sending a CCML message of the type Interests-Registration-Request to the Service Manager. The Service Manager forwards this request to the recommender gent after verifying the validity of the CCML message using the digital signature attached to the message. Upon receiving the request, the recommender agent checks to see if the message is from a valid Service Manager, otherwise it drops the request. The client expresses his preferences in the message using a pre-defined ontology. This ontology captures the user's preferences (specified using the tuple template ontology) along with time and location factors. The incoming DAML+OIL instance is parsed using the Jena API to extract individual interest descriptions from the incoming DAML+OIL instance. An entry is created for every individual interest description; each entry contains: the client id, the DAML data describing the kind of service, or object that it is interested in, location preference, time preference and an expiration time associated with the interest registration request. All entries are added to the interested-entries table and are indexed using a unique id. Two lists are maintained: the active-entries-list and the passive-entries-list. Entries are moved from the passive list to the active list by checking the time preference of every entry in the passive list regularly. A non-blocking readIfExists operation is performed on every entry in the active list where the timeout is set to NO WAIT. If the read operation does not return back any tuple from the space, then a notify is registered with the space, with the lease time set according to the time out of the interest registration request. When a matching tuple is acquired from space, a service description of the service tuple or an instance of object tuple is sent back to the client that initiated the request. To avoid too many Interests-Registration-Response messages from being sent back to the client the results are buffered for a short time span, after which a single Interests-Registration-Response message is sent.</p><p>The user can specify his time preference as: all-the-time, morning, noon, night etc. Or, he could specify a time range using day, month, year, hour, minute etc. The location preference can be specified to access services that do not belong to the same Service Manager. The Service Managers create an instance of the location class of the space ontology to specify where they are. A mapping of the location name to the Vigil handle is specified using this instance. Using this mechanism clients can register for all services or objects that are available on a particular floor, building etc. A few of the services or objects might not be accessible to the client; however, the client can request for permissions to access them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Task-Execution Agent:</head><p>The key idea of this agent is to off-load certain well-defined tasks that the user performs by acting as a proxy on behalf of the user. The client registers tasks with the task-execution agent the same way it registers tasks with the recommender agent. The CCML message type for task registration is Task-Execution-Request. The ontology used to express tasks includes two types of tasks: simple and composite. Every simple task specifies the time at which the task should get executed. The tuple template associated with a task is used to search for tuples on the space. The agent performs a read operation on the space to acquire a desirable tuple associated with the task. If the desired tuple is a service tuple, then the agent tries to subscribe to the task by sending a CCML message of type Subscription-Request to the Vigil service. If the subscription fails due to lack of access right and delegation, then the agent does another read operation on the space to look for alternate service tuples. If a match takes place, then a subscription request is sent out to the new service. If the Subscription-Response is a success, then the CCML Service Parameters <ref type="bibr" target="#b15">[16]</ref> from the response are stored in a parameterlist. In Vigil, commands (like switching the light ON or OFF) are executed by modifying the value associated with parameters in the list and sending the updated parameter-list back to the service. The task ontology allows the specification of these commands. It also provides a wait time associated with every command in the task. The agent can execute the next command of the task only after the wait time for the last command has expired. After a command is executed an update is received from the service which contains a new CCML Service Parameter list. The task ontology also allows the specification of output parameters. The values associated with output parameters from the parameter-list are sent back to the user or might serve as an input for other tasks. Example Scenario: A user might register a task with the execution agent to turn off the music service 5 minutes after all people in the room have left.</p><p>The client specifies the task by creating an instance of a SimpleTask or CompositeTask class. A composite task is composed of several atomic tasks. The ontology supports control constructs to execute Sequential, Concurrent and Unordered tasks. Sequence allows a sequence of atomic tasks to be performed one after the other; Concurrent allows the parallel execution of multiple atomic tasks; and Unordered allows the atomic tasks to be executed in some unspecified order. The user can also specify the start time and stop time of atomic task for tasks that do not require immediate execution.</p><p>Publish-Subscribe Agent: This agent dynamically delivers data to subscribed users. A service/agent can publish data or events that are meant to be shared by multiple users by writing a data tuple on the semantic space. The subscription request to this agent is routed the same way as it is done for the other agents. The CCML message type for the request is Published Object Subscription. The description of the subscription object is provided by using the tuple template ontology. Upon receiving a subscription request from the user, the agent searches the space for published data tuples that best matches the user's subscription request. If such a data tuple exists, it does a take operation on the tuple, updates its list of subscribed users, and writes the updated tuple back to space. The actual data associated with the selected object tuple is sent back to the client using the response message. This agent registers a notify operation for every subscription request to get notified of new objects or changes to objects that might occur on the space. Example Scenario: As mentioned in the motivating scenario section, users can subscribe to the conference schedule tuple. If the schedule changes then the subscribed users get notified of this change. Users could also subscribe to specialized advertisements on the conference space that offer discounts or special deals. For example, registered users in a conference might be entitled to special discounts in shops located close to the venue of the conference. As part of future work, we want to support subscription requests that contain rules, based on which the user gets notified.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Conclusions</head><p>In order to verify the semantic matching that sTuples performs; ontologies were created for the printer service, music service, light service and room-recommender service. A vCard ontology was created to create data tuples. Several instantiations of these services and data tuples were written on the space and different types of tuple templates were created to see what service instances get picked up by sTuples. The reaping interval to eliminate unused entries on the space was set to about 3 minutes. The matching algorithm on sTuples, increased the time required to retrieve a tuple to a couple of seconds under low-load conditions (where there are about 2 to 3 candidate service instance matches). Under high-load conditions (where there are about 12 to 15 candidate service instance matches) the retrieval time increased to approximately 3 seconds. As part of future work several optimizations can be performed on the Tuple Space, to enable a faster retrieval of tuples. Further empirical evaluation is beyond the scope of this paper.</p><p>As part of current work, the recommender agent is undergoing enhancements to do semantic association rule learning. The recommender agent should be able to recommend tuples based on the access patterns of users on a particular space. Consider the scenario where a user wants to access the postal address of the current location from the space. It is likely that he will next try to look for a map quest agent that gives directions from the current location to the closest airport(or some other destination). It is also likely that he will next try to get a handle to the closest printer service on the space to print out directions. There are several such usage patterns of data and services in a space based on the context of deployment. Such patterns can be mined by making use of an association-based rule learning algorithm such as the Apriori algorithm <ref type="bibr" target="#b0">[1]</ref>. The semantic knowledge about data and services can be used to deduce more that what a traditional association rule mining algorithm can achieve. For example, the recommender agent might mine an association rule, which indicates that every time a map quest service tuple is used a laser printer service tuple is also used. By looking at the description of the tuples it can infer that a laser printer is a type of printer; hence when a map quest service tuple is used there is a good chance that any printer service tuple is used(not just laser printers).</p><p>In the future, semantic descriptions can be introduced to express the functionality of methods/behaviors in addition to data in a tuple. This will enable heterogeneous mobile agents to use sTuples. sTuples should also migrate from DAML+OIL to OWL. Most constructs outside the scope of OWL DL such as qualified cardinality restrictions were not used while developing our ontologies. However, in some ontologies the type separation between Classes and Individuals was not always maintained. With minor modifications to our ontologies we should be able to migrate from DAML+OIL to OWL DL. Currently the Centaurus Client is made available to the user through a fairly primitive graphical interface. The user specifies preferences, registers tasks and subscribes to data services using this interface. In the future we would like to integrate the Centaurus Client/Service with the user's Personal Agent to better understand preferences and usage patterns. Also, the taskexecution agent in our system does not currently use a planner to execute composite tasks. In the future, we would like to recommend composable tasks. In addition to the security provided by JavaSpaces and Vigil additional security can be enforced on tuples by using the policy ontologies.</p><p>In this paper, we have presented a Tuple Space based Semantic Infrastructure that overcomes shortcomings of existing Tuple Space implementations by introducing semantic matching of tuples on top of object based polymorphic matching. The sTuples system provides a generic framework to implement clients and services in a pervasive environment by introducing semantic tuples and its extensions, service tuple and data tuple. sTuples integrates with Vigil, which serves as a communication gateway and provides distributed trust and access control. Specialized agents cater to unobtrusive behavior of data and services, task execution and subscription to data tuples. The use of semantics enable clients and services developed by heterogeneous systems to work together by making use of shared ontologies and generic tools to process web ontologies. sTuples uses Racer, a sound and complete description-logic reasoner to detect inconsistencies and inferred subsumptions. The OWA(Open World Assumption) that Racer makes is a desirable feature since, in a pervasive environment, information can be incomplete. The Tuple Space's notify operation is implemented by making use of Racer's publish-subscribe mechanism. The Semantic Tuple Spaces system helped us validate our ideas, and makes us believe that entering the Semantic Web can help realize the original vision of Pervasive Computing by providing Semantic Interoperability.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. Light Service Instance</figDesc><graphic coords="6,317.28,80.30,203.01,104.51" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4. Light Service Search Template</figDesc><graphic coords="7,58.56,80.32,249.01,436.52" type="bitmap" /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>Proceedings of the First Annual International Conference on Mobile and Ubiquitous Systems: Networking and Services (MobiQuitous'04) 0-7695-2208-4/04 $20.00 © 2004 IEEE</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_1"><p>Proceedings of the First Annual International Conference on Mobile and Ubiquitous Systems: Networking and Services (MobiQuitous'04)</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_2"><p>Eventually we plan to migrate to OWL [21] Proceedings of the First Annual International Conference on Mobile and Ubiquitous Systems: Networking and Services (MobiQuitous'04) 0-7695-2208-4/04 $20.00 ©</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2004" xml:id="foot_3"><p>IEEE   </p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Fast Algorithms for Mining Association Rules</title>
		<author>
			<persName><forename type="first">R</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Srikant</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 20th Int. Conf. Very Large Data Bases, (VLDB)</title>
		<editor>
			<persName><forename type="first">J</forename><forename type="middle">B</forename><surname>Bocca</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">M</forename><surname>Jarke</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">C</forename><surname>Zaniolo</surname></persName>
		</editor>
		<meeting>20th Int. Conf. Very Large Data Bases, (VLDB)</meeting>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1994">1994</date>
			<biblScope unit="page" from="12" to="15" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">T</forename><surname>Berners-Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hendler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Lassila</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Semantic Web. Scientific American</title>
		<imprint>
			<biblScope unit="volume">284</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="34" to="43" />
			<date type="published" when="2001-05">May 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">MARS: A programmable coordination architecture for mobile agents</title>
		<author>
			<persName><forename type="first">G</forename><surname>Cabri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Leonardi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Zambonelli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Internet Computing</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="26" to="35" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">A Survey of Context-Aware Mobile Computing Research</title>
		<author>
			<persName><forename type="first">G</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Kotz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
		<respStmt>
			<orgName>Dept. of Computer Science, Dartmouth College</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Information Agents for Mobile and Embedded Devices</title>
		<author>
			<persName><forename type="first">T</forename><surname>Finin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Joshi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Kagal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Ratsimore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Korolev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Lecture Notes in Computer Science</title>
		<imprint>
			<biblScope unit="volume">2182</biblScope>
			<biblScope unit="page" from="264" to="286" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Generative Communication in Linda</title>
		<author>
			<persName><forename type="first">D</forename><surname>Gelernter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Programming Languages and Systems</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="80" to="112" />
			<date type="published" when="1985">1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A Translation Approach to Portable Ontology Specifications</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">R</forename><surname>Gruber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Knowledge Aquisition</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="199" to="220" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<author>
			<persName><forename type="first">V</forename><surname>Haarslev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Moller</surname></persName>
		</author>
		<title level="m">RACER User&apos;s Guide and Reference Manual</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">RACER System Description</title>
		<author>
			<persName><forename type="first">V</forename><surname>Haarslev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Möller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Lecture Notes in Computer Science</title>
		<imprint>
			<biblScope unit="page">701</biblScope>
			<date type="published" when="2001">2083. 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><surname>Handorean</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G.-C</forename><surname>Roman</surname></persName>
		</author>
		<title level="m">Secure Sharing of Tuple Spaces in Ad Hoc Settings</title>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
		<respStmt>
			<orgName>Washington University in St. Louis</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Requirements for a Web Ontology language</title>
		<author>
			<persName><forename type="first">J</forename><surname>Heflin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Volz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Dale</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">The DARPA Agent Markup Language</title>
		<author>
			<persName><forename type="first">J</forename><surname>Hendler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">L</forename><surname>Mcguinness</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>IEEE Intelligent Systems</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Software Agents</title>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">R</forename><surname>Jennings</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Wooldridge</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEE Review</title>
		<imprint>
			<biblScope unit="page" from="17" to="20" />
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Vigil: Providing Trust for Enhanced Security in Pervasive Systems</title>
		<author>
			<persName><forename type="first">L</forename><surname>Kagal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">U</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
			<pubPlace>Baltimore County</pubPlace>
		</imprint>
		<respStmt>
			<orgName>University of Maryland</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Centaurus: An Infrastructure for Service Management in Ubiquitous Computing Environments</title>
		<author>
			<persName><forename type="first">L</forename><surname>Kagal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Korolev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Avancha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Joshi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Finin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Yesha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Wireless Networks</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="619" to="635" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Vigil: Enforcing Security in Ubiquitous Environments</title>
		<author>
			<persName><forename type="first">L</forename><surname>Kagal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Undercoffer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Joshi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Finin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Grace Hopper Celebration of Women in Computing</title>
		<imprint>
			<date type="published" when="2002">2002. 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Serendipitous interoperability</title>
		<author>
			<persName><forename type="first">O</forename><surname>Lassila</surname></persName>
		</author>
		<idno>HIIT Publications 2002-001</idno>
	</analytic>
	<monogr>
		<title level="m">The Semantic Web Kick-off in Finland -Vision, Technologies, Research, and Applications</title>
		<editor>
			<persName><forename type="first">Eero</forename><surname>Hyvönen</surname></persName>
		</editor>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
		<respStmt>
			<orgName>University of Helsinki</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Semantic Gadgets: Ubiquitous Computing Meets the Semantic Web</title>
		<author>
			<persName><forename type="first">O</forename><surname>Lassila</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Adler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Spinning the Semantic Web</title>
		<editor>
			<persName><forename type="first">D</forename><surname>Fensel</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><surname>Hendler</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">W</forename><surname>Wahlster</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">H</forename><surname>Lieberman</surname></persName>
		</editor>
		<imprint>
			<publisher>MIT Press</publisher>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="363" to="376" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Resource Description Framework (RDF) Model and Syntax Specification. W3C Recommendation, World Wide Web Consortium</title>
		<author>
			<persName><forename type="first">O</forename><surname>Lassila</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">R</forename><surname>Swick</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999-02">February 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Middleware for Mobile Computing</title>
		<author>
			<persName><forename type="first">C</forename><surname>Mascolo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Capra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Emmerich</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NETWORKING Tutorials</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="20" to="58" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">OWL Web Ontology Language Overview. W3C Working Draft, World Wide Web Consortium</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">L</forename><surname>Mcguinness</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Van Harmelen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003-03">March 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">JavaSpace Specification, 1998. Sun Microsystems. JavaSpace Specification</title>
		<author>
			<persName><forename type="first">S</forename><surname>Microsystems</surname></persName>
		</author>
		<ptr target="http://java.sun.com/products/jini/specs" />
		<imprint>
			<date type="published" when="1998-03">March 1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Towards Scalability in Tuple Spaces</title>
		<author>
			<persName><forename type="first">P</forename><surname>Obreiter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Graef</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium of Applied Computing (SAC) Special Track on Coordination Models, Languages and Applications</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="344" to="350" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">An Investigation into the use of the Tuple Space Paradigm in Mobile Computing Environments. Master&apos;s thesis</title>
		<author>
			<persName><forename type="first">S</forename><surname>Paul</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999">1999</date>
		</imprint>
		<respStmt>
			<orgName>Lancaster University</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">LIME: Linda Meets Mobility</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">P</forename><surname>Picco</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">L</forename><surname>Murphy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G.-C</forename><surname>Roman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Software Engineering</title>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="368" to="377" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Ruple: an XML Space Implementation</title>
		<author>
			<persName><forename type="first">P</forename><surname>Thompson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">XML 2002 Conference and Exposition</title>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Jini architecture overview</title>
		<author>
			<persName><forename type="first">Waldo</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1998-07">July 1998</date>
		</imprint>
		<respStmt>
			<orgName>SUN-LABS</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">The Computer for the 21st Century</title>
		<author>
			<persName><forename type="first">M</forename><surname>Weiser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Scientific American</title>
		<imprint>
			<biblScope unit="volume">265</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="66" to="75" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">T spaces</title>
		<author>
			<persName><forename type="first">P</forename><surname>Wyckoff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Mclaughry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Lehman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Ford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM Systems Journal</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="454" to="474" />
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
