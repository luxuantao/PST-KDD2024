<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Route Planning for Unmanned Aerial Vehicle (UAV) on the Sea Using Hybrid Differential Evolution and Quantum-Behaved Particle Swarm Optimization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2013-10-14">October 14, 2013</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><roleName>Student Member, IEEE</roleName><forename type="first">Yangguang</forename><surname>Fu</surname></persName>
							<email>yang-guangfu@yahoo.com.cn</email>
						</author>
						<author>
							<persName><roleName>Senior Member, IEEE</roleName><forename type="first">Mingyue</forename><surname>Ding</surname></persName>
							<email>myding@mail.hust.edu.cn</email>
						</author>
						<author>
							<persName><forename type="first">Chengping</forename><surname>Zhou</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Hanping</forename><surname>Hu</surname></persName>
							<email>hphu@mail.hust.edu.cn</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">School of Computer Science and Technology</orgName>
								<orgName type="institution">University of South China</orgName>
								<address>
									<postCode>421001</postCode>
									<settlement>Hengyang</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">College of Life Science and Technology</orgName>
								<orgName type="laboratory">Image Information Processing and Intelligence Control Key Laboratory of Education Ministry of China</orgName>
								<orgName type="institution">Huazhong University of Science and Technology</orgName>
								<address>
									<postCode>430074</postCode>
									<settlement>Wuhan</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">Institute for Pattern Recognition and Artificial Intelligence</orgName>
								<orgName type="laboratory">State Key Laboratory for Multi-Spectral Information Processing Technologies</orgName>
								<orgName type="institution">Huazhong University of Science and Technology</orgName>
								<address>
									<postCode>430074</postCode>
									<settlement>Wuhan</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Route Planning for Unmanned Aerial Vehicle (UAV) on the Sea Using Hybrid Differential Evolution and Quantum-Behaved Particle Swarm Optimization</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2013-10-14">October 14, 2013</date>
						</imprint>
					</monogr>
					<idno type="MD5">1868289461D3CDE8236EDB8001DBBB5B</idno>
					<idno type="DOI">10.1109/TSMC.2013.2248146</idno>
					<note type="submission">received September 5, 2011; revised June 6, 2012; accepted November 30, 2012. Date of publication June 6, 2013; date of current version</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T16:21+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Differential evolution (DE)</term>
					<term>quantum-behaved particle swarm optimization (QPSO)</term>
					<term>route planning</term>
					<term>terrain pretreatment</term>
					<term>unmanned aerial vehicle (UAV)</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper presents a hybrid differential evolution (DE) with quantum-behaved particle swarm optimization (QPSO) for the unmanned aerial vehicle (UAV) route planning on the sea. The proposed method, denoted as DEQPSO, combines the DE algorithm with the QPSO algorithm in an attempt to further enhance the performance of both algorithms. The route planning for UAV on the sea is formulated as an optimization problem. A simple method of pretreatment to the terrain environment is proposed. A novel route planner for UAV is designed to generate a safe and flyable path in the presence of different threat environments based on the DEQPSO algorithm. To show the high performance of the proposed method, the DEQPSO algorithm is compared with the real-valued genetic algorithm, DE, standard particle swarm optimization (PSO), hybrid particle swarm with differential evolution operator, and QPSO in terms of the solution quality, robustness, and the convergence property. Experimental results demonstrate that the proposed method is capable of generating higher quality paths efficiently for UAV than any other tested optimization algorithms.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. Introduction</head><p>U NMANNED aerial vehicles (UAVs) have demonstrated their usefulness in both military and civilian applications <ref type="bibr" target="#b0">[1]</ref>. The route planning problem is of great importance to UAV. Route planning generates a path between an initial prescribed location and desired destination having an optimal or near-optimal performance under specific constraint conditions <ref type="bibr" target="#b1">[2]</ref>- <ref type="bibr" target="#b3">[4]</ref>.</p><p>During the past few decades, extensive work has been devoted to route planning for UAV. Several approaches have been proposed for UAV route planning. Among them, the Voronoi diagram-based method was widely used. In <ref type="bibr" target="#b4">[5]</ref> and <ref type="bibr" target="#b5">[6]</ref>, the threat regions are modeled as points, and these point threats are used to generate the Voronoi diagram. The Voronoi diagram partitions the battle area into several convex polygons that contain one and only one threat. The graph containing the start and destination locations is searched using Eppstein's k-best paths algorithm <ref type="bibr" target="#b6">[7]</ref> to find an optimal path for UAV. However, it is difficult to combine the motion constraints of UAV with graphic-based algorithms, unless the maneuverability of UAV is good enough. In order to take the motion constraints of UAV into account during the planning process, Szczerba et al. <ref type="bibr" target="#b7">[8]</ref> proposed the sparse A* search (SAS) algorithm to plan a realtime route for aircraft. The SAS algorithm can efficiently prune the search space since various route constraints are taken into consideration during the planning process. However, it can only plan a path based on known environment information, and is incapable of planning paths in unknown, partially known, or changing environments. To solve this problem, Koenig <ref type="bibr" target="#b8">[9]</ref> proposed the D* Lite algorithm for goal-directed navigation in an unknown terrain. Nevertheless, when the problem space becomes larger and more complex, the time spent to find the optimal or near-optimal path may increase exponentially.</p><p>It is generally accepted that evolutionary computation is an efficient and effective optimization technique and has been used as a viable candidate to solve path planning problems. In <ref type="bibr" target="#b9">[10]</ref>, a genetic algorithm (GA) <ref type="bibr" target="#b10">[11]</ref> was used to solve the task assignment and path planning problems for multiple UAVs. The objective function is determined as an accumulated sum of the required time to finish the tasks on each target and the optimization is achieved by using a GA. Multiple paths are found as the candidate paths from each UAV to each target. Based on evolutionary computation concepts, an adaptive evolutionary planner/navigator (EP/N) was developed in <ref type="bibr" target="#b11">[12]</ref> as a novel approach to path planning and navigation. The EP/N combines the concept of evolutionary computation with problem-specific chromosome structures and operators. Zheng et al. <ref type="bibr" target="#b1">[2]</ref>- <ref type="bibr" target="#b3">[4]</ref> and Nikolos et al. <ref type="bibr" target="#b12">[13]</ref>, <ref type="bibr" target="#b13">[14]</ref> both present a 2-D or 3-D route planner for UAV using evolutionary algorithms. An in-depth discussion of other existing algorithms, such as dynamic programming, simulated 2168-2216 c 2013 IEEE annealing, and artificial potential field for the route planning oriented applications, can be found in <ref type="bibr" target="#b3">[4]</ref>.</p><p>Particle swarm optimization (PSO) is an evolutionary computation algorithm first proposed by Kennedy and Eberhart <ref type="bibr" target="#b14">[15]</ref>. Its development is based on the study of the social behavior of bird flocking and fish schooling. Each particle adjusts its flying in the search space in terms of its own flying experience and its companions' flying experience. Successful applications of PSO to function optimization, neural network training, and fuzzy system control <ref type="bibr" target="#b15">[16]</ref> have demonstrated that PSO is a promising and efficient optimization method. Many significant improvements are proposed to improve the performance of the PSO algorithm. An excellent overview of the basic concepts of PSO and its variants can be found in <ref type="bibr" target="#b16">[17]</ref>.</p><p>However, most improvements are based on the framework of position and velocity, never deviating from the conventional position and velocity update rules. To this end, Sun et al. <ref type="bibr" target="#b17">[18]</ref>, <ref type="bibr" target="#b18">[19]</ref> put forward the quantum-behaved particle swarm optimization (QPSO) algorithm model from the perspective of quantum mechanics view rather than the Newtonian rules assumed in all previous versions of PSO. In recent years, QPSO algorithm has been widely used in economic load dispatch <ref type="bibr" target="#b19">[20]</ref>, <ref type="bibr" target="#b20">[21]</ref>, model parameter extraction <ref type="bibr" target="#b21">[22]</ref>, multiobjective optimization of composite structures <ref type="bibr" target="#b22">[23]</ref>, multiple sequence alignment <ref type="bibr" target="#b23">[24]</ref>, QoS multicast routing <ref type="bibr" target="#b24">[25]</ref>, and many other optimization problems <ref type="bibr" target="#b25">[26]</ref>, <ref type="bibr" target="#b26">[27]</ref>.</p><p>Differential evolution (DE) is also a stochastic algorithm first proposed by Storn and Price <ref type="bibr" target="#b27">[28]</ref>. In DE, new parameter vectors are generated by adding the weighted difference between two population vectors to a third vector. The mutated vector's parameters are then mixed with the parameters of another predetermined vector, i.e., the target vector, to yield the so-called trial vector. If the trial vector yields a lower cost function value than the target vector, the trial vector replaces the target vector in the following generation. A hybrid particle swarm with differential evolution operator (DEPSO) was proposed in <ref type="bibr" target="#b28">[29]</ref> and was shown to outperform the PSO and DE for a set of benchmark functions. The DEPSO algorithm has been applied to recurrent neural network training <ref type="bibr" target="#b29">[30]</ref> and the design of linear phase finite impulse response (FIR) filters <ref type="bibr" target="#b30">[31]</ref>.</p><p>Inspired by Zhang and Xie <ref type="bibr" target="#b28">[29]</ref>, a hybrid DE with QPSO, termed DEQPSO, was put forward in this paper. The DEQPSO algorithm combines the DE algorithm with QPSO algorithm in an attempt to further enhance the performance of both algorithms. The primary objective of this paper is to describe a general route planning strategy based on DEQPSO. Therefore, based on our recent work <ref type="bibr" target="#b31">[32]</ref>, <ref type="bibr" target="#b32">[33]</ref>, the novel DEQPSO algorithm is employed to plan a path for UAV on the sea in the presence of different threat environments. In order to ensure the sea-skimming flight for UAV, a simple method of pretreatment to the terrain environment is proposed. The route planning problem is simplified as a 2-D one through assuming the UAV flies at constant altitude above the sea level. Using the statistical method, the performance of DEQPSO is compared against GA, DE, PSO, DEPSO, and QPSO through the UAV route planning oriented application. Simulation results demonstrated the effectiveness and feasibility of the proposed approach when compared with other tested algorithms.</p><p>The remainder of this paper is organized as follows. The concise description of DE and QPSO are given in Section II. The proposed DEQPSO is stated in Section III. The terrain pretreatment is described in Section IV. Section V presents the application of the proposed DEQPSO algorithm to the UAV route planning problem. Experimental results of route planning are shown in Section VI. Finally, the paper is concluded in Section VII.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. DE and QPSO</head><p>In this section, basic concepts of DE and QPSO are introduced, followed by a detailed introduction of DEQPSO in the next section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Differential Evolution</head><p>Differential evolution is a relatively new population-based stochastic global optimization algorithm, which is first proposed by Storn and Price <ref type="bibr" target="#b27">[28]</ref>. Similar to the structure of GAs <ref type="bibr" target="#b10">[11]</ref>, DE also contains the concepts of selection, crossover, and mutation, but differs from the traditional evolutionary algorithms in terms of the classical genetic operators. DE starts with a randomly initialized population of m individuals</p><formula xml:id="formula_0">X i = [x i1 , • • • , x id ](i = 1, • • • , m)</formula><p>, where d is the dimension of the problem to be solved. A differential operator is used to generate new donor individuals</p><formula xml:id="formula_1">U i = [u i1 , • • • , u id ](i = 1, • • • , m)</formula><p>as follows:</p><formula xml:id="formula_2">u k+1 ij = x k r 1 ,j + λ(x k r 2 ,j -x k r 3 ,j )<label>(1)</label></formula><p>where</p><formula xml:id="formula_3">r 1 , r 2 , r 3 ∈ {1, 2, • • • , m}\{i} and r 1 = r 2 = r 3 ;λ ∈ [0, 2],</formula><p>which is determined by the user, is a constant factor of the differential vector x k r 2 ,jx k r 3 ,j . The superscript k represents the kth iteration. Afterward, a trail individual T i is created to add the diversity of the mutated donor individual</p><formula xml:id="formula_4">t k+1 ij = u k+1 ij , rand(j) ≤ CR ∧ j = rnbr(i) x k ij , rand(j) &gt; CR , j = rnbr(i) (2)</formula><p>where CR ∈ [0, 1] is the crossover probability, rand(j) is a uniform random number within [0, 1], rnbr(i) ∈ {1, 2, • • • , d}, i.e., rnbr(i) is a randomly chosen integer in the range of <ref type="bibr">[1, d]</ref>,</p><p>where d is the dimension of the problem to be solved. After the mutation procedure and the crossover procedure, a greedy selection technique is used to decide whether or not the parent should be replaced by its offspring</p><formula xml:id="formula_5">X k+1 i = T k+1 i , J(T k+1 i ) ≤ J(X k i ) X k i , J(T k+1 i ) &gt; J(X k i )<label>(3)</label></formula><p>where J(•) is the function to be minimized, and T i is the trial individual. There are many different DE versions because of different mutation schemes and different crossover strategies. The DE described by ( <ref type="formula" target="#formula_2">1</ref>)-( <ref type="formula" target="#formula_5">3</ref>) is known as the standard version DE/rand/1/bin <ref type="bibr" target="#b33">[34]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Quantum-Behaved Particle Swarm Optimization</head><p>In PSO <ref type="bibr" target="#b14">[15]</ref>, each particle adjusts its position in search space according to its own flying experience and companions' flying experience. The ith particle</p><formula xml:id="formula_6">X i = [x i1 , x i2 , • • • , x id ] is associated with a velocity vector V i = [v i1 , v i2 , • • • , v id ],</formula><p>where d is the dimension of the problem to be solved. During the search process, every particle keeps track of the personal best (pbest) position P i = [p i1 , p i2 , • • • , p id ] found by itself and the global best (gbest) position P g = [p g1 , p g2 , • • • , p gd ] achieved by any particle in the swarm. During the iteration procedure, the velocity and position of the particle are updated according to (4) <ref type="bibr" target="#b34">[35]</ref>, <ref type="bibr" target="#b35">[36]</ref> </p><formula xml:id="formula_7">v k+1 ij = wv k ij + c 1 r k 1i (p k ij -x k ij ) + c 2 r k 2i (p k gj -x k ij ), x k+1 ij = x k ij + v k+1 ij , (i = 1, 2, • • • , m; j = 1, 2, • • • , d)<label>(4)</label></formula><p>where r 1 and r 2 are two pseudo-random scalar values drawn uniformly from the unit interval. The superscript k in (4) denotes the kth iteration. The acceleration coefficients c 1 and c 2 are 2.0 for almost all applications <ref type="bibr" target="#b35">[36]</ref>. Factor w is the inertial weight and m is the size of swarm. Deforming the velocity updating formula shown in (4), we have</p><formula xml:id="formula_8">v k+1 ij = wv k ij + (c 1 r k 1i + c 2 r k 2i ) c 1 r k 1i c 1 r k 1i + c 2 r k 2i p k ij + c 2 r k 2i c 1 r k 1i + c 2 r k 2i p k gj -x k ij . (<label>5</label></formula><formula xml:id="formula_9">)</formula><p>Because c 1 , c 2 are deterministic constants and r 1 , r 2 are random numbers, (5) can be rewritten as</p><formula xml:id="formula_10">v k+1 ij = wv k ij + (ξ 1 + ξ 2 )[( ξ 1 ξ 1 + ξ 2 p k ij + ξ 2 ξ 1 + ξ 2 p k gj ) -x k ij ]. (<label>6</label></formula><formula xml:id="formula_11">) Define ξ = ξ 1 + ξ 2 and ξ 1 /(ξ 1 + ξ 2 ) = ζ, then v k+1 ij = wv k ij + ξ(q k ij -x k ij ), q k ij = ζp k ij + (1 -ζ)p k gj .<label>(7)</label></formula><p>Equations ( <ref type="formula" target="#formula_8">5</ref>)-( <ref type="formula" target="#formula_11">7</ref>) are mathematically identical to (4). Clerc and Kennedy <ref type="bibr" target="#b36">[37]</ref> illustrated that as the system iterates, each particle is pulled toward its local attractor</p><formula xml:id="formula_12">Q i = [q i1 , q i2 , • • • , q id ]</formula><p>based on the interaction of particles' individual searches and group's public search to ensure convergence.</p><p>QPSO algorithm <ref type="bibr" target="#b17">[18]</ref> assumes that there is 1-D delta potential well on each dimension at the local attractor point, and every particle in the swarm has quantum behavior. The quantum state of a particle is depicted by a wave function instead of the position and velocity used in PSO. The probability density functions of the position to which each particle flies can be deduced from the Schrödinger equation. The measurement of the position for each particle from the quantum state to the classical one can be implemented by using the Monte Carlo simulation method, and the position of the ith particle is updated as follows:</p><formula xml:id="formula_13">x k+1 ij = q k ij ± (l k ij /2) ln(1/μ) (<label>8</label></formula><formula xml:id="formula_14">)</formula><p>where μ is a uniformly distributed pseudorandom number on the unit interval. q ij and l ij are the jth dimension of the ith particle's local attractor and delta potential well characteristic length, defined as follows <ref type="bibr" target="#b18">[19]</ref>:</p><formula xml:id="formula_15">l k ij = 2ϕ|mbest k j -x k ij |, mbest k j = m i=1 p k ij /m (9)</formula><p>where ϕ is the contraction-expansion coefficient and mbest is the mean best position of the population. Substituting ( <ref type="formula" target="#formula_11">7</ref>) and ( <ref type="formula">9</ref>) into (8), the position of particle can be updated as follows:</p><formula xml:id="formula_16">x k+1 ij = ζp k ij + (1 -ζ)p k gj ± ϕ| m i=1 p k ij /m -x k ij | ln(1/μ). (<label>10</label></formula><formula xml:id="formula_17">)</formula><p>III. Hybrid of DE and QPSO (DEQPSO) Based on the aforementioned DE and QPSO, we proposed a new algorithm that combines the ideas of both algorithms, called DEQPSO, in an attempt to further enhance the global search abilities of both algorithms. Just like the DEPSO <ref type="bibr" target="#b28">[29]</ref>, the proposed DEQPSO also consists of two stages. In each generation of the DEQPSO, the population is first updated by using the QPSO algorithm, as described in Section II-B. After that, the DE algorithm is performed.</p><p>However, the DE used in DEQPSO is somewhat different from the DE mentioned in Section II-A. In the canonical DE, as formulated in (1), the donor vector is generated by three different individuals of the current population. For the proposed DEQPSO, the donor vector is generated by adding the weighted difference between two or more personal best positions to the global best position obtained by QPSO at the first stage. In other words, the differential operator in DEQPSO is performed on the personal best positions rather than the individuals of the current population. In this way, the donor vector is given by</p><formula xml:id="formula_18">u k+1 ij = p k gj + N l=1 δ k lj /N (<label>11</label></formula><formula xml:id="formula_19">)</formula><formula xml:id="formula_20">where l = [δ l1 , δ l2 , • • • , δ ld ] (l = 1, 2, • • • , N</formula><p>) is the general difference vector. l and the jth dimension of l is defined as</p><formula xml:id="formula_21">l = P r ll -P r 2l , δ lj = p r 1l ,j -p r 2l ,j<label>(12)</label></formula><p>where (13) Without loss of generality, the analysis for ¯ (N) can be restricted to a single dimension. For simplicity, we assume that all personal best positions are drawn uniformly from the interval [-1, 1]. Denote f 1 (x), f 2 (x), and f 3 (x) as the probability density functions of ¯ (1), ¯ (2), and ¯ (3) respectively, then the expressions of them are given in ( <ref type="formula" target="#formula_22">14</ref>)-( <ref type="formula">16</ref>)</p><formula xml:id="formula_22">f 1 (x) = (2 -|x|)/4, |x| &lt; 2 0, otherwise<label>(14)</label></formula><formula xml:id="formula_23">f 2 (x) = ⎧ ⎨ ⎩ (3|x| 3 -6x 2 + 4)/12, 0 &lt; |x| &lt; 1 (-|x| 3 + 6x 2 -12|x| + 8)/12, 1 ≤ |x| &lt; 2 0, otherwise<label>(15)</label></formula><formula xml:id="formula_24">f 3 (x)= ⎧ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎨ ⎪ ⎪ ⎪ ⎪ ⎪ ⎪ ⎩ (-405|x| 5 +810x 4 -720x 2 +352)/2560, 0 &lt; |x| &lt; 2/3 (405|x| 5 -2430x 4 + 5400|x| 3 -5040x 2 +1200|x| + 544)/5120, 2/3 ≤ |x| &lt; 4/3 (-81|x| 5 + 810x 4 -3240|x| 3 + 6480x 2</formula><p>-6480|x| + 2592)/5120, 4/3 ≤ |x| &lt; 2 0, otherwise.</p><p>(16) Plots of f 1 (x), f 2 (x), f 3 (x) are illustrated in Fig. <ref type="figure" target="#fig_0">1</ref>. It is not difficult to find that ¯ (1) follows a Simpson distribution, while ¯ (2) and ¯ (3) both follow a bell-shaped distribution.</p><p>In order to further verify the above theoretical analysis, a preliminary experiment is conducted. For each ¯ (N) (N = 1, 2, 3), one million random points are generated using <ref type="bibr" target="#b12">(13)</ref>. The histograms of these points are shown in Fig. <ref type="figure" target="#fig_1">2</ref>, which displays the frequency groups of values occurred. As pointed out in <ref type="bibr" target="#b28">[29]</ref>, the bell-shaped distribution is better for problem solving. However, it can be found from (13) that the calculation of ¯ (3) is more complicated, and requires more computational resources than that of ¯ (2). As a compromise, N = 2 is selected for ¯ (N). Therefore, <ref type="bibr" target="#b10">(11)</ref> can be simplified to</p><formula xml:id="formula_25">u k+1 ij = p k gj + [(p k r 1 ,j -p k r 2 ,j ) + (p k r 3 ,j -p k r 4 ,j )]/2<label>(17)</label></formula><p>where</p><formula xml:id="formula_26">r 1 , r 2 , r 3 , r 4 ∈ {1, 2, • • • , m}\{i, g} and r 1 = r 2 = r 3 = r 4 .</formula><p>That is, the randomly chosen integers r 1 , r 2 , r 3 , and r 4 are not only mutually different but also different from the running index i and global best position index g.</p><p>As with the canonical DE described in Section II-A, after the mutation operation as shown in ( <ref type="formula" target="#formula_25">17</ref>) is finished, the crossover operation is employed to increase the diversity of the mutated individual</p><formula xml:id="formula_27">U i = [u i1 , u i2 , • • • , u id ].</formula><p>Nevertheless, the formation process of the trial individual in the proposed DEQPSO is different from that in the canonical DE. As shown in ( <ref type="formula">2</ref>), the trial individual T i of the canonical DE is formed by the mutated individual U i and the individual X i . But the trial individual T i of the DEQPSO is formed by the mutated individual U i and the personal best position P i , and can be expressed as</p><formula xml:id="formula_28">t k+1 ij = u k+1 ij , rand(j) ≤ CR ∧ j = rnbr(i) p k ij , rand(j) &gt; CR , j = rnbr(i)<label>(18)</label></formula><p>where u ij is the mutated donor individual defined in <ref type="bibr" target="#b16">(17)</ref>, p ij is the jth dimension of the ith particle's personal best position, and CR ∈ [0, 1] is the crossover probability. The remaining variables in <ref type="bibr" target="#b17">(18)</ref> are the same as those in <ref type="bibr" target="#b1">(2)</ref>. This is the way, for each individual X i , a trial individual T i is created. A greedy selection technique given by ( <ref type="formula" target="#formula_5">3</ref>) is used to decide whether or not the individual X i should be replaced by the trial individual T i . Therefore, if the trail individual T i yields a better value of the fitness function, it replaces the individual X i in the next generation; otherwise, the individual X i is retained in the population. As a result, the incorporation of the DE algorithm to the QPSO algorithm makes the population, updated by QPSO, either get better or remain unchanged but never deteriorate. Theoretically, the performance of QPSO can be improved relatively by the incorporation of DE, and the performance of DEQPSO can be better than that of QPSO. In the worst case, the performance of DEQPSO will be as good as that of QPSO.</p><p>The detailed implementation of the DEQPSO algorithm can be described as follows.</p><p>Step 1) Initialize each particle with a random position in the solution space.</p><p>Step 2) Calculate the local attractor of each particle and the mean best position mbest of the population, then update the position of each particle according to <ref type="bibr" target="#b9">(10)</ref>.</p><p>Step 3) Evaluate each renewed particle based on the userspecified fitness function J.</p><p>Step 4) Compute the personal best position pbest of each particle and the global best poison gbest of the population using ( <ref type="formula" target="#formula_29">19</ref>) and ( <ref type="formula" target="#formula_31">20</ref>), respectively</p><formula xml:id="formula_29">P k+1 i = arg min 1≤j≤k+1 J(X j i ) = P k i , i f J(P k i ) ≤ J(X k+1 i ) X k+1 i , if J(P k i ) &gt; J(X k+1 i ) (<label>19</label></formula><formula xml:id="formula_30">)</formula><formula xml:id="formula_31">P k+1 g = arg min 1≤i≤m J(P k+1 i ) = P k g , i f J(P k g ) ≤ J(P k+1 i ) P k+1 i , if J(P k g ) &gt; J(P k+1 i ). (<label>20</label></formula><formula xml:id="formula_32">)</formula><p>Step 5) For each particle, calculate the mutated donor individual U i and the trail individual T i using ( <ref type="formula" target="#formula_25">17</ref>) and ( <ref type="formula" target="#formula_28">18</ref>), respectively. Step 6) Compare the fitness values of each particle and the trail individual, and update the population according to (3).</p><p>Step 7) Update the personal best position pbest of each particle and the global best poison gbest of the new population using ( <ref type="formula" target="#formula_29">19</ref>) and ( <ref type="formula" target="#formula_31">20</ref>), respectively. Step 8) Repeat Steps 2-7 until the stopping condition is satisfied. The stopping criterion depends on the type of problem to be solved. Usually, the algorithm is run for a fixed number of objective function evaluations (thus a fixed number of iterations) and ends when the process starting with Step 2 has been repeated a predefined number of times. Another termination condition available is a prespecified error bound. In this case, the algorithm is run for the user-defined maximum number of iterations, but at any time if the prespecified error threshold is reached, then the algorithm stops. The theoretical optimal value of the problem to be optimized is needed to be known beforehand when the second criterion is adopted, whereas the theoretical optimal values of many real-world engineering optimization problems are unknown in advance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. Pretreatment</head><p>When the mission is to plan a path for UAV on the sea, the battlefield environment usually includes the marine terrain map, the layout of threats, and the positions of launch site and target site. Clearly, the marine terrain map is invariable, while the other factors may change dynamically during the task completion. Moreover, terrain preprocessing is essential for later effective route planning. For a given island, whether the UAV can fly across or not depends on the elevation of this island and the maneuvering performance of UAV itself. In fact, on one hand, UAV should fly at a low altitude so as not to be detected by radar and enhance the terrain masking effect; on the other hand, the lower the flight height, the larger the probability of crash. Consequently, to prevent the UAV from colliding with island, all islands are defined as no-fly zones that can be fitted by some parametric curves. In order to reduce the probability of detection by radar, the UAV is required to execute a sea-skimming flight with a minimum constant clearance between UAV and the sea level.</p><p>The fitting of geometric primitives to a set of boundary points of a closed region is a basic task in pattern recognition and computer vision. The use of primitive models allows reduction and simplification of data and, consequently, makes the post-processing faster and simpler. Among these primitive models, ellipse is profusely and widely used in many applications such as medical imaging, object recognition, target detection, industrial inspections, and so on. For the problem at hand, all no-fly zones are modeled as ellipse regions.</p><p>In view of the above-mentioned facts, the main task of terrain pretreatment includes two stages. The first stage is to find the contour of each island. The second stage is to fit the contour points obtained in the previous stage by an ellipse. Taking an island as an example, the contour extraction and ellipse fitting are described in this section, respectively. The situation of multiple islands can be implemented through loop processing easily.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Contour Extraction</head><p>Contour extraction is the procedure of finding the boundary points of a given object. It is convenient to extract the contour of an island from the shuttle radar topography mission (SRTM) data <ref type="bibr" target="#b37">[38]</ref> that gives the terrain elevation of the earth. First, it is easy to distinguish between the island and the sea, since the elevation value of the island is nonzero and that of the sea is zero. Therefore, a boundary point of an island can be defined as follows: the elevation of this point is nonzero and there is at least one point with zero elevation value in the 8-connected neighborhood of this point. Categorize theses boundary points in a way that each set of boundary points corresponds to the contour of an island. In fact, if a boundary point is in the 8-connected neighborhood of another boundary point, then these two boundary points must belong to the same contour. As shown in Fig. <ref type="figure" target="#fig_2">3</ref>, the white line around the black island is the contour of this island.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Ellipse Fitting</head><p>After obtaining the contour set of every island, we use ellipse to fit each island. In general, an ellipse can be determined by a vector [x 0 , y 0 , a, b, θ], where (x 0 , y 0 ) is the center of the ellipse, a and b are the length of semi-major axis and semiminor axis, respectively, and θ ∈ [-π/2, π/2] is the angle between the major axis and the positive horizontal axis. The parametric equation of an ellipse can be depicted by these five parameters according to</p><formula xml:id="formula_33">x = x 0 + a cos(θ) cos(α) -b sin(θ) sin(α) y = y 0 + a sin(θ) cos(α) + b cos(θ) sin(α)<label>(21)</label></formula><p>where α ∈ [0, 2π]. Note that an ellipse reduces to a circle when a = b = r and θ = 0. The algebraic equation of an ellipse can be written as the general conic as defined in</p><formula xml:id="formula_34">f (x, y) = Ax 2 + Bxy + Cy 2 + Dx + Ey + F = 0. (<label>22</label></formula><formula xml:id="formula_35">)</formula><p>Therefore, to fit the boundary points of an island by an ellipse, the key is to estimate the geometrical parameters [x 0 , y 0 , a, b, θ] or the algebraic parameters [A, B, C, D, E, F ]. The classical ellipse fitting algorithms <ref type="bibr" target="#b38">[39]</ref>, <ref type="bibr" target="#b39">[40]</ref> usually are based on either least square method or computationally expensive iterative approach. Current ellipse fitting techniques mainly center on finding the set of parameters that minimize some distance measure between the data points and the ellipse.</p><p>However, the aim of ellipse fitting in this paper is a little different from that of the current ellipse fitting methods. We are inclined to find a set of geometrical parameters such that the boundary points of an island are all inside the ellipse represented by the geometrical parameters. Moreover, for a given island, among two ellipses that can cover this island, the one having smaller area is preferred. Such a requirement stems from the fact that the smaller the area of no-fly zone, the larger the area of free-fly zone, since the island fitted by an ellipse is treated as a no-fly zone. Consequently, the canonical ellipse fitting algorithms are not applicable for our problem, and a simple ellipse fitting method is proposed in this paper.</p><p>Let S = {(x i , y i )|i = 1, • • • , n} represent the set of the boundary points of an island, where n is the number of boundary points. The distance between any two points (x i , y i ) and (x j , y j ) in S can be calculated by</p><formula xml:id="formula_36">d ij = ((x i -x j ) 2 + (y i -y j ) 2 ) 1/2 . (<label>23</label></formula><formula xml:id="formula_37">)</formula><p>Among these obtained distances, we can find the maximum distance between arbitrary two points in S. Denote this maximum length as d 1 , and record the corresponding coordinates of these two points as A(x 1 , y 1 ) and B(x 2 , y 2 ), respectively, then it follows that</p><formula xml:id="formula_38">d 1 = max 1≤i,j≤n d ij = ((x 1 -x 2 ) 2 + (y 1 -y 2 ) 2 ) 1/2 . (<label>24</label></formula><formula xml:id="formula_39">)</formula><p>Furthermore, the distance between any point (x i , y i ) ∈ S and line AB can be derived according to</p><formula xml:id="formula_40">d(x i , y i ) = |(y 2 -y 1 )(x i -x 2 ) -(x 2 -x 1 )(y i -y 2 )|/d 1 . (25)</formula><p>Similarly, we can find the maximum distance between the boundary points and the line AB. Denote this maximum length as d 2 , then we have</p><formula xml:id="formula_41">d 2 = max 1≤i≤n d(x i , y i ). (<label>26</label></formula><formula xml:id="formula_42">)</formula><p>To construct an ellipse to fit one given island, a natural thought is to set the middle point and the slop angle of line segment AB to be the center and the deflection angle of the ellipse respectively. At the same time, let d 1 be the length of major axis and d 2 be the length of semi-minor axis, then the five parameters of ellipse is given by ( <ref type="formula">25</ref>) As mentioned before, the fitting ellipse should simultaneously satisfy the following two criteria: 1) all boundary points of an island must be contained in the interior of the resulting ellipse, and 2) the area of the reported ellipse should be as small as possible. However, as shown in Fig. <ref type="figure" target="#fig_3">4</ref>, we find that the innermost ellipse depicted by <ref type="bibr" target="#b26">(27)</ref> does not fit closely over the island. In order to remedy this perceived deficiency, a bounding box of ellipse E low and a circumscribed ellipse of the bounding box are built, both with the same center and the same slope angle as the innermost ellipse. It is easy to find that the inscribed ellipse (the innermost one, denoted as E low ) and the circumscribed ellipse (the outermost one, denoted as E up ) of the bounding box can be regarded as the lower bound and upper bound of the ellipse to be fitted.</p><formula xml:id="formula_43">⎧ ⎨ ⎩ (x 0 , y 0 ) = ((x 1 + x 2 )/2, (y 1 + y 2 )/2) (a, b) = (d 1 /2, d 2 ) θ = arctan((y 1 -y 2 )/(x 1 -x 2 )).<label>(27)</label></formula><p>Therefore, the optimal ellipse can be obtained through increasing the length of the semi-major axis and semi-minor axis by certain step size until all the boundary points of an island are all inside of the ellipse, while the center and the angle of inclination both remain unchanged. It is worthwhile noting that the ratio of the semi-major axis and semi-minor axis are maintained to ensure the similarity. An arbitrary boundary point (x i , y i ) is in the interior of the ellipse defined in <ref type="bibr" target="#b21">(22)</ref> if and only if</p><formula xml:id="formula_44">f (x i , y i ) = Ax 2 i + Bx i y i + Cy 2 i + Dx i + Ey i + F &lt; 0. (<label>28</label></formula><formula xml:id="formula_45">)</formula><p>The ellipse drawn with solid thick line in Fig. <ref type="figure" target="#fig_3">4</ref> is the optimal one that covers the island completely.</p><p>The procedure of pretreatment for an island can be described as follows.</p><p>Step 1) Extract the contour of the given island and save all boundary points in set S.</p><p>Step 2) Calculate the initial geometrical parameters of the ellipse according to <ref type="bibr" target="#b26">(27)</ref>.</p><p>Step 3) Judge whether all boundary points in S are in the interior of the ellipse or not according to <ref type="bibr" target="#b27">(28)</ref>. If yes, output the current ellipse as the optimal fitted ellipse; otherwise, go to Step 4.</p><p>Step 4) Increase the length of the semi-major axis and semiminor axis by predefined step size, while the center and the angle of inclination as well as the ratio of semi-major axis and semi-minor axis are all kept unchanged, then go to Step 3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. DEQPSO for UAV Route Planning A. Route Formulation</head><p>For the route planning problem in the marine environment, the UAV is assumed to fly at constant altitude <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b13">[14]</ref> above the sea level, which is quite different from the ground based navigation <ref type="bibr" target="#b32">[33]</ref>, where a terrain following is usually required to enhance terrain masking effect and avoid hostile radar detection. In addition, a great advantage of this assumption is that it reduces the path planning problem from a 3-D space search to a 2-D plane search, for which less memory overhead and computation time are needed. As a result, it is not necessary for the altitude of a path node to engage in the coding of a path in the case of UAV navigation on the sea.</p><p>In general, when the population based algorithm is used, each possible solution in the problem space can be represented by an individual in the population. An individual in swarm is referred to as a particle. In fact, a particle with arbitrarily small mass and volume is a potential path in the search space. The entries of each particle represent the coordinates of path nodes. Consequently, the particles representation builds a oneto-one mapping between particles and candidate paths. The terms particle, individual, path, route, and solution are used interchangeably in this paper.</p><p>The population is denoted by a matrix X T , where m is the size of the population. The start point and endpoint of a path do not engage in the coding of particles since all paths have the same start point and endpoint. Suppose each path to be composed of n path nodes except for the first node (start point) and the last one (target point), then the total number of path nodes of a potential path is n + 2. To record the horizontal position (x, y) of each path node, the dimension of each particle should be 2n. The position vector of the ith particle is given by</p><formula xml:id="formula_46">= [X 1 , X 2 , • • • , X m ]</formula><formula xml:id="formula_47">X i = [x i1 , • • • , x in , x i,n+1 , • • • , x i,2n ]<label>(29)</label></formula><p>where x ij is the jth dimension of the ith particle's position</p><formula xml:id="formula_48">(i = 1, • • • , m; j = 1, • • • , 2n</formula><p>). The first half of X i from x i1 to x in and the rest of X i from x i,n+1 to x i,2n represent the abscissa values and ordinate values of the n path nodes on the ith path, respectively. Let the control points be the path nodes defined in <ref type="bibr" target="#b28">(29)</ref>, and a B-Spline curve <ref type="bibr" target="#b40">[41]</ref> is constructed to represent the original path X i . The position vector of the ith particle in the form of B-Spline can be written as</p><formula xml:id="formula_49">X i = [x i1 , • • • , x iN , x i,N+1 , • • • , x i,2N ] (<label>30</label></formula><formula xml:id="formula_50">)</formula><p>where N is the number of discrete points in the B-Spline curve except for the launching site and target site. Consequently, the total number of discrete points of a candidate B-Spline path is N + 2. Similarly, the first half of X i from x i1 to x iN represent the abscissa values of the N discrete way points on the ith path and the rest of X i from x i,N+1 to x i,2N are the corresponding ordinate values. As a result, the jth way point on the ith path is specified by the 2-D coordinates (x ij , x i,j+N ), j = 1, • • • , N. Suppose W ij represents the jth way point on the ith path, then X i can be rewritten as</p><formula xml:id="formula_51">X i = {W i1 , W i2 , • • • , W iN }, i = 1, • • • , m. (31)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Model of Evaluation Function</head><p>Designing reasonable fitness function is of great importance when an optimization algorithm is applied to solve actual problems. The performance of each particle is measured by the fitness function, which in general is application-dependant and provides the inextricable link between the optimization algorithm and the physical world. Consequently, the core is to set up an accurate and effective representation model of cost function for a route planning application. Once the model of cost function is established, it becomes the sole criterion for evaluating whether a particle or path is good or not. The smaller the cost value, the better the path.</p><p>Cost function used in available literature <ref type="bibr" target="#b3">[4]</ref>- <ref type="bibr" target="#b7">[8]</ref> is normally composed of at least the length cost and the threat cost of path, since the constraints that have to be satisfied by a qualified path should include but not limited to: 1) minimizing the path length to the target, and 2) minimizing the UAV' exposure to threats. Unfortunately, these two primary minimizations are impossible to be met simultaneously. We can obtain a shorter path with less regard of the exposure to radar, or the less exposure to surface-to-air missile with a longer path length. Therefore, a suitable selection of the weight coefficient provides a tradeoff between path length and threat avoidance. Aside from the length cost and the threat cost of path, other constraints that have to be satisfied by the UAV such as the restrictions of turning angle α, climbing/diving angle β, and flying height h, etc. are needed to be incorporated into the cost function <ref type="bibr" target="#b31">[32]</ref>, <ref type="bibr" target="#b32">[33]</ref>. However, as we pointed out in Section V-A, through assuming the UAV flies at constant altitude above the sea level, the route planning problem is simplified as a 2-D one. Consequently, the restrictions of climbing/diving angle and flying height are not needed any more.</p><p>To combine the above-mentioned three types of costs, the cost function for a specific path X i is weighted by the path length, threat, and turn angle</p><formula xml:id="formula_52">J(X i ) = 3 k=1 w k J k (X i )<label>(32)</label></formula><p>where J 1 (X i ), J 2 (X i ), J 3 (X i ) are the costs of path length, threat, and turning angle respectively. Coefficients w 1 , w 2 , w 3 are their corresponding weight coefficients. For a given path X i , the coordinates of the path nodes can be represented as {(x i1 , x i,n+1 ), (x i2 , x i,n+2 ), • • • , (x in , x i,2n )}. Taking these path nodes as the control points of the B-Spline curve, the path X i in the form of B-Spline curve can be represented as {W i1 , W i2 , • • • , W iN } according to <ref type="bibr" target="#b30">(31)</ref>. Remember that W ij is the discrete way point rather than the control point of B-Spline curve. W ij = (x ij , x i,j+N ) and W i,j+1 = (x i,j+1 , x i,j+N+1 ) are the previous way point and the next one of the jth path segment of the discrete B-Spline curve respectively. The path length cost J 1 is defined as the sum of all path segment lengths from the start point to endpoint</p><formula xml:id="formula_53">J 1 (X i ) = N j=0 W ij W i,j+1<label>(33)</label></formula><p>where W i0 and W i,N+1 are the start point and endpoint respectively. Note that both W i0 and W i,N+1 keep unchanged for all i = 1, • • • , m, since all particles have the same start point and endpoint. The symbol ||•|| represents the Euclidean distance of a vector (the same hereinafter).</p><p>In our previous work <ref type="bibr" target="#b1">[2]</ref>- <ref type="bibr" target="#b3">[4]</ref> and recent work <ref type="bibr" target="#b31">[32]</ref>, <ref type="bibr" target="#b32">[33]</ref>, only the threat from air-defense radars or surface-to-air missiles is considered. However, the threat considered in this paper includes not only the threat from air-defense radars or surface-to-air missiles, but also the threat from terrain such as islands. As mentioned in Section IV, the terrain is pretreated and all islands fitted by ellipse are designated as terrain threats. Without loss of generality, K radar threat sets {T 1 , T 2 , • • • , T K } are represented by circles with different centre points and radii. The center records the position of a radar threat and the length of radius indicates the cover range of this radar threat. For a given ellipse, when the length of semi-major axis and that of semi-minor axis are equal, this ellipse degrades to a circle. In other words, a circle can be viewed as a special case of an ellipse. In this way, radar threats and terrain threats both can be treated as ellipses for consistency.</p><p>For the path segment W ij W i,j+1 , how to calculate the threat cost of this path segment? One simple solution is to first sample the path segment W ij W i,j+1 , then compute the threat cost between each sampling point and each threat region. According to <ref type="bibr" target="#b20">(21)</ref>, we can get the focus of the elliptic threat region as follows:</p><formula xml:id="formula_54">F 1 = (x 0 , y 0 ) -(a 2 -b 2 ) 1/2 (cos θ, sin θ) F 2 = (x 0 , y 0 ) + (a 2 -b 2 ) 1/2 (cos θ, sin θ). (<label>34</label></formula><formula xml:id="formula_55">)</formula><p>As shown in Fig. <ref type="figure" target="#fig_4">5</ref>(b), for each sampling point, if the sum of the distance between this sampling point and the left focus F 1 of the elliptic threat, and the distance between this sampling point and the right focus F 2 is less than the length of major axis of the elliptic threat, a penalty is added to the threat cost. However, it is hard to choose an appropriate sampling rate. For one thing, a high sampling rate will spend a large amount of time to calculate the threat cost. For another, the threat cost may be not accurate enough and cannot represent the real threat cost if the sampling rate is too low.</p><p>In consideration of the conflict between sample accuracy and computational efficiency, a new method based on the location relation of path segment and threat region was proposed in this paper, as shown in Fig. <ref type="figure" target="#fig_4">5(a)</ref>. In our approach, the path segments are classified into two types: intersecting with threat region and not intersecting with threat region (including tangency and remoteness). There is no need to calculate the threat cost of those path segments that not intersect with any threat region. In other words, UAV is allowed to intersect a point on the boundary of a threat but with high threat cost to fly through the interior of a threat. The threat cost of a path segment that intersects one of the threat regions is proportion to the length of path segment, which is contained in that threat region. For simplicity, suppose the coordinates of way points W ij and W i,j+1 are (x 1 , y 1 ) and (x 2 , y 2 ) respectively, then the parametric equation of path segment W ij W i,j+1 can be expressed as</p><formula xml:id="formula_56">x = x 1 + t(x 2 -x 1 ) y = y 1 + t(y 2 -y 1 ) (<label>35</label></formula><formula xml:id="formula_57">)</formula><p>where t ∈ [0, 1]. Note that the parametric equation of the elliptic threat region shown in Fig. <ref type="figure" target="#fig_4">5</ref> can be depicted by <ref type="bibr" target="#b20">(21)</ref>, where θ = π/9. Substituting ( <ref type="formula" target="#formula_56">35</ref>) into ( <ref type="formula" target="#formula_33">21</ref>), we get the following algebraic equation:</p><formula xml:id="formula_58">(A 2 4 + A 2 5 )t 2 + 2(A 4 A 6 + A 5 A 7 )t + A 2 6 + A 2 7 -a 2 b 2 = 0 (36) where ⎧ ⎪ ⎪ ⎨ ⎪ ⎪ ⎩ A 4 = a[(y 2 -y 1 ) cos θ -(x 2 -x 1 ) sin θ] A 5 = b[(x 2 -x 1 ) cos θ + (y 2 -y 1 ) sin θ] A 6 = a[(y 1 -y 0 ) cos θ -(x 1 -x 0 ) sin θ] A 7 = b[(x 1 -x 0 ) cos θ -(y 1 -y 0 ) sin θ]. (37) Denote G = A 2 4 + A 2 5 , H = 2(A 4 A 6 + A 5 A 7 ), I = A 2 6 + A 2 7 - a 2 b 2 ,</formula><p>then the discriminant of ( <ref type="formula">36</ref>) is given by</p><formula xml:id="formula_59">δ = H 2 -4GI. (<label>38</label></formula><formula xml:id="formula_60">)</formula><p>Note that the path segment W ij W i,j+1 intersects with the threat region only if δ &gt; 0.</p><p>The detailed implementation of the new method of threat cost computation can be described as follows.</p><p>Step 1) For each threat T k , compute the discriminant δ k according to <ref type="bibr" target="#b37">(38)</ref>.</p><p>Step 2) If δ k ≤ 0, then the threat cost of the kth threat region to path segment W ij W i,j+1 is zero, i.e., J 2,k (W i,j W i,j+1 ) = 0; else go to Step 3.</p><p>Step 3) Calculate the length of path segment W ij W i,j+1 which is included in the k th threat region, denoted as l k .</p><p>Compute the distance from threat center O to the path segment</p><formula xml:id="formula_61">W ij W i,j+1 , denoted as d k . Step 4) If d k ≤ 1, then J 2,k (W i,j W i,j+1 ) = a k l k ; else J 2,k (W i,j W i,j+1 ) = a k l k /d k ,</formula><p>where a k is the length of semi-major axis of the kth threat region and also is the supremum of d k .</p><p>Step 5) Threat cost of X i can be expressed by where K is the number of threats, and s k indicates the threat intensity of the kth threat.</p><formula xml:id="formula_62">J 2 (X i ) = K k=1 N j=0 s k J 2,k (W i,j W i,j+1 )<label>(39)</label></formula><p>In the view of physical limitation of UAV, it can only turn with an angle less than or equal to a predetermined maximum turning angle. Therefore, the turning angle constraint should be enforced at each way point where UAV is unlikely to make a sharp turn at such a point. In order to get the turning angle at each discrete way point (not control point), we first give the definition of the azimuth angle of a path segment, which is defined as the included angle between this path vector and the north, i.e., the positive of y-axis. According to the notation used in <ref type="bibr" target="#b34">(35)</ref>, the azimuth angle of this path segment can be calculated as</p><formula xml:id="formula_63">α ij = ⎧ ⎨ ⎩ arctan( x/</formula><p>y), y ≥ 0 arctan( x/ y) + π, y &lt; 0, x &gt; 0 arctan( x/ y)π, y &lt; 0, x ≤ 0 <ref type="bibr" target="#b39">(40)</ref> where x = x 2x 1 and y = y 2y 1 . According to <ref type="bibr" target="#b39">(40)</ref>, it is clear that if the included angle is anticlockwise, then the azimuth angle is positive and ranged in [0, π]; otherwise, it is negative and ranged in [-π, 0]. For example, as shown in Fig. <ref type="figure" target="#fig_5">6</ref>, when the previous way point W ij is fixed, for the four possible next way points W i,j+1 <ref type="bibr" target="#b0">(1)</ref>, W i,j+1 <ref type="bibr" target="#b1">(2)</ref>, W i,j+1 <ref type="bibr" target="#b2">(3)</ref>, and W i,j+1 (4) located in the four quadrants respectively, the azimuth angles are 60°, -70°, -145°, and 150°accordingly.</p><p>The turning angle constructed by three successive way points W ij , W i,j+1 , and W i,j+2 is defined as the difference of the azimuth angle (in degree) of the current path segment W ij W i,j+1 and that of the next one W i,j+1 W i,j+2 . That is, the turning angle α ij = α i,j+1α ij , as shown in Fig. <ref type="figure" target="#fig_6">7</ref>. If the azimuth angle of the current path segment is smaller than that of the next one, the turn angle formed by them is positive; otherwise, it is negative.</p><p>Then, the turning angle cost is measured by the difference between the current turning angle and predetermined maximum turning angle α max . When the current turning angle is less than or equal to α max , the cost of this turning angle is set to zero. In this way, the turning angle cost J 3 can be calculated according to where α i0 and α i,N-1 are the turn angles formed by the way points {W i0 , W i1 , W i2 } and {W i,N-1 , W i,N , W i,N+1 }, respectively. Penalty factor p 3 is a positive constant.</p><formula xml:id="formula_64">⎧ ⎨ ⎩ J 3 (X i ) = p 3 N-1 j=0 dα ij dα ij = α ij -α max , α ij &gt; α max 0, α ij ≤ α max (41)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Route Planning Using DEQPSO</head><p>The detailed implementation of route planning based on the DEQPSO algorithm can be described as follows.</p><p>Step 1) Choose appropriate parameters such as population size, particle dimensions, and maximum number of iterations.</p><p>Step 2) Input the environmental information of war field and selected parameters in Step 1.</p><p>Step 3) Initialize each particle randomly in the problem space to generate initial coarse paths.</p><p>Step 4) Calculate the local attractor of each particle and the mean best position mbest of the population, then update the position of each particle according to (10).</p><p>Step 5) Evaluate each renewed path based on the cost function defined in (32).</p><p>Step 6) Compute the personal best position pbest of each particle and the global best position gbest of the population using ( <ref type="formula" target="#formula_29">19</ref>) and ( <ref type="formula" target="#formula_31">20</ref>), respectively. Step 7) For each particle, calculate the mutated donor individual and the trail individual using ( <ref type="formula" target="#formula_25">17</ref>) and ( <ref type="formula" target="#formula_28">18</ref>), respectively.</p><p>Step 8) Compare the cost values of each particle and the trail individual, and update the population according to (3). Step 9) Update the personal best position pbest of each particle and the global best poison gbest of the new population using ( <ref type="formula" target="#formula_29">19</ref>) and ( <ref type="formula" target="#formula_31">20</ref>), respectively. Step 10) Repeat Steps 4) to 9) until the maximum number of iterations is reached.</p><p>Step 11) Output gbest as the optimal path when the loop ends.</p><p>In fact, route planning using DEQPSO algorithm is equivalent to the QPSO and DE are performed alternately. Steps 4-6 are the QPSO operation, and Steps 7-9 are the DE operation. It is not difficult to find that the number of object function evaluations of DEQPSO is twice as large as that of QPSO and that of DE. Therefore, to ensure that all tested algorithms have the same number of objective function evaluations, Steps 4-6 are carried out at the odd iterations, and Steps 7-9 are carried out at the even iterations. In other words, if the DEQPSO algorithms is run for 100 iterations, then both Steps 4-6 and Steps 7-9 are run for 50 iterations, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. Experimental Results</head><p>The route planning for UAV based on the GA, DE, PSO, DEPSO, QPSO, and DEQPSO algorithms was implemented in a MATLAB 7.6 programming environment on a PC with Intel Core2 Duo E7200 CPU running Windows XP. The SRTM digital elevation data (3 arc second, approx. 90 m resolution) is used as the war field terrain <ref type="bibr" target="#b37">[38]</ref>.</p><p>The pretreatment result of the war field terrain is shown in Fig. <ref type="figure" target="#fig_7">8</ref>, where the land is black and the sea is white. It can be seen from Fig. <ref type="figure" target="#fig_7">8</ref> that the resulting ellipses cover the islands well. As mentioned in Section IV-B, the word well means not only all boundary points of an island are contained in the interior of the resulting ellipses, but also the area of each fitted ellipse is small. The islands fitted by ellipse are designated as terrain threats. Note that terrain threats remain unchanged during the planning process, since the terrain is fixed and static while other battle field environments such as the launch site, target point, and radar threats may be changing.</p><p>Unless otherwise specified, the following parameter values are used in our route planning experiments. The weight coefficients in the cost function are all set to be 1/3, resulting in uniform effect of the three terms in the cost function <ref type="bibr" target="#b12">[13]</ref>, <ref type="bibr" target="#b40">[41]</ref>. In view of the physical limitation of UAV, the maximum turning angle α max is set to 30° <ref type="bibr" target="#b3">[4]</ref>. The population size, number of path nodes, and maximum number of iterations are set to 80, 6, and 100, respectively. For fair comparison, all algorithms use the same prespecified number of function evaluations as the stopping condition. Each experiment was run for 8000 objective function evaluations, which is equivalent to 100 iterations using a swarm size of 80. For each algorithm, a total of 20 runs were carried out on every experiment. The crossover and mutation probability for the used real-valued GA are 0.7 and 0.05, respectively. Roulette wheel selection, arithmetic crossover, and random mutation are used as genetic operators. The mutation factor λ and crossover constant CR of DE and DEPSO are 0.9 and 0.85, respectively. The setting of the cross constant of DEQPSO is the same as that of DEPSO to avoid an invidious comparison. For PSO and DEPSO, the inertial weight coefficient w varies from 0.9 to 0.4 linearly while for QPSO and DEQPSO the contraction-expansion coefficient φ is decreased linearly from 1.0 to 0.5. The values for the above parameters were selected based on suggestions in other literature <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b13">[14]</ref>, <ref type="bibr" target="#b17">[18]</ref>, <ref type="bibr" target="#b18">[19]</ref>, <ref type="bibr" target="#b35">[36]</ref>, where these values have been found, empirically, to provide good performance. No effort is spent in tuning these parameters for obtaining better results.</p><p>When solving real-world problems, usually the fitness calculation accounts for the most time because the PSO-based algorithms are highly computation efficient <ref type="bibr">[42]</ref>. That is, the main computation pressure centers on the calculation of objective function. In addition, the proposed DEQPSO has the same number of objective function evaluations as five other tested algorithms. Thus, the DEQPSO does not impose any additional burden in terms of objective function evaluations. As a result, the main computation efforts of these algorithms are almost the same, although they may not be perfectly identical. Hence, the running time of these algorithms are not compared and the computation efforts are not used as a performance metric to compare different algorithms.</p><p>We compare the performance of all algorithms based on the following three factors: solution quality, stability, and convergence speed of each algorithm. The solution quality can be expressed by the mean best cost value, also accounting for the search ability of an algorithm. The mean best cost value is defined as the average of 20 best cost values produced by 20 trials. The smaller the mean cost value, the higher the quality of solution. Similarly, the stability of an algorithm can be reflected by the standard deviation. The larger the standard deviation value, the worse the stability of an algorithm. The convergence speed of an algorithm is defined as how fast the algorithm can converge to the optimal or suboptimal solution. Hence, under the given maximum number of iterations, the smaller the number of iterations needed to ensure that the algorithm converges to the optimal or suboptimal solution, the faster the convergence speed.</p><p>Two test cases are designed to compare the performance of the GA, DE, PSO, DEPSO, QPSO, and DEQPSO in the presence of different battlefield environments, which mainly mean different start points, endpoints, and radar threats. The information of these two test cases is described in Table <ref type="table" target="#tab_1">I</ref>. The first column of Table I represents the test case number. As noted above (Section V-B), the radar threats are modeled by circles with different centers and radii. Threat <ref type="bibr">(122,</ref><ref type="bibr">162,</ref><ref type="bibr" target="#b39">40)</ref> means the center of this threat is (122,162) with the radius of 40. The start point and endpoint are depicted by their coordinates.</p><p>For the purpose of comparison, the best paths of case 1 generated by the GA (dashed thin line), DE (solid thin line),  The relationship between number of iterations and average best fitness values over 20 runs is shown in Fig. <ref type="figure" target="#fig_9">10</ref>. Following the suggestion of Nikolos et al. <ref type="bibr" target="#b12">[13]</ref>, the average best fitness  value is defined as the reciprocal of the mean best cost value <ref type="bibr" target="#b32">[33]</ref>. It is easy to see from Fig. <ref type="figure" target="#fig_9">10</ref> that DEQPSO not only has stronger global searching ability, but also achieves a faster convergence speed than five other tested algorithms. The proposed DEQPSO speeds up the convergence speed of both DE and QPSO. The QPSO converges faster than DEPSO from the beginning to about the 55th iteration, and slower than DEPSO at the later stage of evolution. The convergence property of PSO is similar to that of DE, although the convergence speed of PSO is slightly faster. However, both PSO and DE converge faster than GA. During 20 times experiments, the minimum, maximum, average, and standard deviation (St Dev) of cost value are recorded in Table <ref type="table" target="#tab_2">II</ref>. From the statistics given in Table <ref type="table" target="#tab_2">II</ref>, it is concluded that the route planner based on DEQPSO possesses the minimum mean cost and standard deviation, which further demonstrates the high performance and robustness of DEQPSO. In other words, the performance of DEQPSO is superior to that of five other tested algorithms in terms of the four statistics listed in Table <ref type="table" target="#tab_2">II</ref>. Although the mean cost of PSO is smaller than that of DE, the standard deviation of PSO is larger than that of DE. The minimum cost of QPSO is smaller than that of DEPSO, but the mean cost and standard deviation of QPSO are both larger than those of DEPSO. Note that the mean cost of DEQPSO is 42.6768, while the mean cost of DE and the mean cost of QPSO are 94.1321 and 80.3806, respectively. Moreover, the three other statistics of DEQPSO all are smaller than those of DE and QPSO. It shows  <ref type="table" target="#tab_3">III</ref>. Similarly, the best paths of case 2 generated by six tested algorithms during 20 runs are shown in Fig. <ref type="figure" target="#fig_10">11</ref>, and the convergence curves are shown in Fig. <ref type="figure" target="#fig_11">12</ref>. These experimental results demonstrated that the DEQPSO still maintains its superiority as compared to five other tested algorithms. Under the same terrain environment and different radar threats environments, the route planners based on six tested algorithms still can successfully generate threat-avoidance paths. However, it is easy to find that the best path (solid thick line) generated by DEQPSO is shorter and smoother than those generated by the GA (dashed thin line), DE (solid thin line), PSO (dashed thick line), DEPSO (dash-dot thick line), QPSO (dotted thick line). The cost value of the best path generated by DEQPSO is 13.4718, while the cost values of the best paths generated by five other algorithms GA, DE, PSO, DEPSO, and QPSO are 122.0474, 60.4365, 33.7864, 28.7416, and 28.2268, respectively. In other words, the best path produced by DEQPSO is with less cost value and is more flyable. The best path generated by DEPSO and the best path generated by QPSO are almost the same, however, on average, the DEPSO can find path with higher quality compared with QPSO.</p><p>As can be seen from Fig. <ref type="figure" target="#fig_11">12</ref>, the DEQPSO achieves the fastest convergence speed among the six algorithms according to the position relationship of convergence curves shown in Fig. <ref type="figure" target="#fig_11">12</ref>. It shows that the hybrid strategy works well. The QPSO converges faster than DEPSO at the early stage of evolution but is surpassed by DEPSO eventually. The convergence speed of PSO and that of DE are still both faster than that of GA. From the statistical results shown in Table <ref type="table" target="#tab_3">III</ref>,   The two test cases described above are conducted under the same parameter setting. The number of path nodes used in case 1 and case 2 is six. The only difference between case 1 and case 2 is that the start points, endpoints, and radar threats are changed. Keep in mind that the number of path nodes is the number of B-Spline control points rather than the number of discrete way points in the B-Spline curve. In fact, the number of path nodes of a route, i.e., the dimension of a particle, which is equal for each particle, is a problemdependent parameter determined by user. Note that the value of dimension makes a tradeoff between accuracy of the path and computational efficiency. Therefore, the number of path nodes n (equivalent to the dimension of the particle) has a very close relationship with accuracy of the path and computational efficiency. On one hand, more path nodes may lead to more accurate path; on the other hand, greater number of path nodes results in larger memory overhead, more computational time, and slower convergence speed. Theoretically, other conditions being equal, the larger the dimension of the particle, the more accurate the path will be, and the more complicate the problem becomes. Therefore, too large value of dimension may result in failure of planning.</p><p>In order to investigate the effect of the number of path nodes on the generated paths, another test case is designed to further compare the performance of the GA, DE, PSO, DEPSO, QPSO, and DEQPSO. Case 3 is the same as case 1 except for the number of path nodes, which is set to be eight in case 3. Note that the dimension of a particle is twice as large as the number of path nodes as shown in <ref type="bibr" target="#b28">(29)</ref>. Therefore, the dimension of each particle increases from 12 to 18 when the number of path nodes increases from six to eight. Figs. 13 and 14 show the experimental results of case 3 and the corresponding experimental data is recorded in Table <ref type="table" target="#tab_4">IV</ref>.  As can be seen from Fig. <ref type="figure" target="#fig_12">13</ref>, although the dimension of each particle has been increased from 12 to 18, the route planners based on six tested algorithms still can successfully generate threat-avoidance paths. Similar to case 1, the best paths generated by QPSO and DEQPSO still are more optimal than the best paths produced by PSO and DEPSO. The best paths generated by GA and DE are with high path length cost, which will result in high fuel consumption. The path cost of the best path generated by DEQPSO is 23.9171, while the path costs of the best paths generated by DE and QPSO are 108.2318 and 33.4885, respectively. This suggests that the hybrid DE with QPSO is more effective.</p><p>By comparing the convergence curves shown in Fig. <ref type="figure" target="#fig_9">10</ref> and<ref type="figure" target="#fig_13">14</ref>, it is easy to find that as a result of the increase of particle dimension, the convergence speed of all six tested algorithms slowed down. However, the DEQPSO still has the fastest convergence speed among six tested algorithms. The GA still is prone to be trapped in local optima.</p><p>Compared with the results given in Table <ref type="table" target="#tab_2">II</ref>, all four statistics of each algorithm shown in Table IV are increased relatively, which is mainly because the number of path nodes has been increased to eight. That is to say, as the dimension of the particle increases, the problem to be solved becomes more and more complex. Therefore, it is more difficult for every algorithm to find the global optimal solution of the problem at hand in high dimensional search space compared with low dimensional solution space. However, the DEQPSO still has an advantage over five other algorithms. The performance of GA is still poor and far from perfect.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VII. Conclusion</head><p>In this paper, a hybrid differential evolution with quantumbehaved particle swarm optimization was successfully developed to solve the UAV route planning on the sea. To reduce the probability of detection by radar, the UAV was required to execute a sea-skimming flight. The terrain pretreatment was performed and all islands were designated as terrain threats. The proposed DEQPSO algorithm showed its high performance in solving path planning problem for UAV in different known and static threat environments. The simulation results revealed that the DEQPSO algorithm can not only obtain a better solution, but also improved the robustness and speeded up the convergence of DE and QPSO. Most importantly, the DEQPSO presented in this paper was directed toward solving the path planning problem, but the ideas were general and the proposed algorithm is universally suitable to solve many optimization problems in other areas, provided that the problem-specific particle structure and the problemdependent fitness function are established reasonably.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Probability density functions of ¯ (1), ¯ (2), and ¯ (3).</figDesc><graphic coords="4,77.00,53.34,198.24,156.10" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Histograms of points tested for ¯ (1), ¯ (2), and ¯ (3).</figDesc><graphic coords="4,340.52,54.07,197.76,154.37" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Contour of an island.</figDesc><graphic coords="5,352.73,54.31,168.96,106.13" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .</head><label>4</label><figDesc>Fig.4. Procedure of ellipse fitting for an island: the rectangle is the bounding box of given island, the innermost ellipse is the inscribed ellipse of the bounding box. The outermost ellipse is the circumscribed ellipse of the bounding box. The ellipse drawn with a solid thick line is the optimal fitted ellipse.</figDesc><graphic coords="6,355.02,53.74,168.48,105.70" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Threat cost computation. (a) New method of threat cost computation. (b) Simple solution to the threat cost computation.</figDesc><graphic coords="8,321.02,53.71,236.64,109.73" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. Azimuth angle of a path segment.</figDesc><graphic coords="9,93.72,53.89,161.28,141.55" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Turning angle formed by three successive way points.</figDesc><graphic coords="9,366.73,53.65,140.64,117.79" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Pretreatment result of the war field terrain.</figDesc><graphic coords="10,52.00,53.62,248.16,247.82" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 9 .</head><label>9</label><figDesc>Fig. 9. Optimal paths produced by six algorithms in case 1.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 10 .</head><label>10</label><figDesc>Fig. 10. Convergence curves of average best fitness values in case 1.</figDesc><graphic coords="11,49.22,158.17,250.08,255.46" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 11 .</head><label>11</label><figDesc>Fig. 11. Optimal paths produced by six algorithms in case 2.</figDesc><graphic coords="12,54.50,53.89,244.32,249.55" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 12 .</head><label>12</label><figDesc>Fig. 12. Convergence curves of average best fitness values in case 2.</figDesc><graphic coords="12,314.52,53.78,250.08,190.66" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Fig. 13 .</head><label>13</label><figDesc>Fig. 13. Optimal paths produced by six algorithms in case 3.</figDesc><graphic coords="13,52.22,53.89,244.32,249.55" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Fig. 14 .</head><label>14</label><figDesc>Fig. 14. Convergence curves of average best fitness values in case 3.</figDesc><graphic coords="13,311.73,175.18,250.56,190.66" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>r 11 -P r 21 ) + (P r 12 -P r 22 ) + (P r 13 -P r 23 )]/3 N=3.</figDesc><table><row><cell></cell><cell cols="2">P r 1l , P r 2l are two personal best positions randomly</cell></row><row><cell cols="3">chosen, and r 1l , r 2l are two random integers different from the global best position index g. Denote ¯ (N) = N l=1 l /N,</cell></row><row><cell cols="3">then we have</cell></row><row><cell>¯ (N)=</cell><cell>⎧ ⎨ ⎩</cell><cell>P r 11 -P r 21 , N = 1, [(P r 11 -P r 21 ) + (P r 12 -P r 22 )]/2, N = 2, [(P</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>TABLE I</head><label>I</label><figDesc>Description of Test Cases</figDesc><table><row><cell cols="3">Case Start point Endpoint</cell><cell>Radar threats</cell></row><row><cell>1</cell><cell>(45,20)</cell><cell>(480,480)</cell><cell>{(122,162,40),(241,165,69), (250,376,68),(383,370,50),(413,224,60)}</cell></row><row><cell>2</cell><cell>(6,324)</cell><cell>(478,98)</cell><cell>{ (48,289,26),(160,277,46), (246,154,59),(279,381,52),(403,181,43)}</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>TABLE II Performance</head><label>II</label><figDesc>Comparison of Six Algorithms on Case 1</figDesc><table><row><cell cols="4">Algorithm Min cost Max cost Mean cost</cell><cell>St Dev</cell></row><row><cell>GA</cell><cell>79.6212</cell><cell>296.2684</cell><cell>180.7552</cell><cell>60.3477</cell></row><row><cell>DE</cell><cell>68.1877</cell><cell>121.4221</cell><cell>94.1321</cell><cell>16.3309</cell></row><row><cell>PSO</cell><cell>37.7698</cell><cell>146.9959</cell><cell>91.7527</cell><cell>25.8049</cell></row><row><cell>DEPSO</cell><cell>29.4937</cell><cell>93.3127</cell><cell>52.1495</cell><cell>17.6887</cell></row><row><cell>QPSO</cell><cell>24.3221</cell><cell>130.4247</cell><cell>80.3806</cell><cell>38.7537</cell></row><row><cell>DEQPSO</cell><cell>13.3511</cell><cell>89.2102</cell><cell>42.6768</cell><cell>16.1117</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>TABLE III Performance</head><label>III</label><figDesc>Comparison of Six Algorithms on Case 2 As mentioned before, the search ability and stability of an algorithm can be reflected by the mean fitness value and the standard deviation value, respectively. Therefore, it is concluded that the DEQPSO has a better search ability and robustness than five other tested algorithms. Like the performance of DEPSO is superior to the performance of DE and that of PSO, the performance of DEQPSO is superior to the performance of DE and that of QPSO. The hybrid of DE and QPSO has effectively improved both the performance of DE and the performance of QPSO. Although the minimum cost of PSO is smaller than that of DE, the other statistics of PSO are larger than those of DE. This means the best path produced by PSO is more optimal than the best path generated by DE, but DE can find better solutions than PSO on average and is more robust than PSO. The minimum cost and the maximum cost of QPSO are both a little bit smaller than those of DEPSO, but the mean cost and standard deviation of QPSO are both larger than those of DEPSO, which indicates that the DEPSO performs better than QPSO in global searching and stability. The four statistics of QPSO are smaller than those of GA and those of PSO. It shows that the performance of QPSO is superior to the performance of GA and that of PSO.Similar experiment results obtained on case 1 and case 2 testify that the performance of DEQPSO is independent of changed battlefield environments that mainly mean different start points, endpoints, and radar threats environments.</figDesc><table><row><cell>Algorithm</cell><cell>Min cost</cell><cell cols="2">Max cost Mean cost</cell><cell>St Dev</cell></row><row><cell>GA</cell><cell>122.0474</cell><cell>565.4372</cell><cell>278.4554</cell><cell>103.2404</cell></row><row><cell>DE</cell><cell>60.4365</cell><cell>146.3689</cell><cell>88.985</cell><cell>23.6963</cell></row><row><cell>PSO</cell><cell>33.7864</cell><cell>202.0917</cell><cell>110.2283</cell><cell>60.2844</cell></row><row><cell>DEPSO</cell><cell>28.7416</cell><cell>167.5141</cell><cell>62.6349</cell><cell>28.6479</cell></row><row><cell>QPSO</cell><cell>28.2268</cell><cell>167.2273</cell><cell>67.4208</cell><cell>36.5379</cell></row><row><cell>DEQPSO</cell><cell>13.4718</cell><cell>172.5341</cell><cell>55.7776</cell><cell>21.8477</cell></row><row><cell cols="5">we observe that the mean cost value and the corresponding</cell></row><row><cell cols="5">standard deviation of the DEQPSO are both less than those of</cell></row><row><cell cols="2">five other algorithms.</cell><cell></cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>TABLE IV Performance</head><label>IV</label><figDesc>Comparison of Six Algorithms on Case 3</figDesc><table><row><cell>Algorithm</cell><cell>Min cost</cell><cell cols="2">Max cost Mean cost</cell><cell>St Dev</cell></row><row><cell>GA</cell><cell>163.3224</cell><cell>523.1075</cell><cell>344.5924</cell><cell>86.1318</cell></row><row><cell>DE</cell><cell>108.2318</cell><cell>163.3038</cell><cell>146.6107</cell><cell>18.0779</cell></row><row><cell>PSO</cell><cell>48.4226</cell><cell>159.7019</cell><cell>93.0995</cell><cell>32.9265</cell></row><row><cell>DEPSO</cell><cell>39.0039</cell><cell>110.6302</cell><cell>67.1483</cell><cell>22.3292</cell></row><row><cell>QPSO</cell><cell>33.4885</cell><cell>119.4212</cell><cell>85.4156</cell><cell>27.5228</cell></row><row><cell>DEQPSO</cell><cell>23.9171</cell><cell>84.1367</cell><cell>44.9066</cell><cell>22.1078</cell></row></table></figure>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Vectorfield path following for miniature air vehicles</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">R</forename><surname>Nelson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">B</forename><surname>Barber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">W</forename><surname>Mclain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">W</forename><surname>Beard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Rob</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="519" to="529" />
			<date type="published" when="2007-06">Jun. 2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Real-time route planning for unmanned air vehicle with an evolutionary algorithm</title>
		<author>
			<persName><forename type="first">C</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ding</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Pattern Recognit. Artif. Intell</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="63" to="81" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Coevolving and cooperating path planner for multiple unmanned air vehicles</title>
		<author>
			<persName><forename type="first">C</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ding</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eng. Appl. Artif. Intell</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="887" to="896" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Evolutionary route planner for unmanned air vehicles</title>
		<author>
			<persName><forename type="first">C</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ding</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Rob</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="609" to="620" />
			<date type="published" when="2005-08">Aug. 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Coordinated target assignment and intercept for unmanned air vehicles</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">W</forename><surname>Beard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">W</forename><surname>Mclain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>Goodrich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">P</forename><surname>Anderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Robo. Autom</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="911" to="922" />
			<date type="published" when="2002-12">Dec. 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Coordination variables, coordination functions, and cooperative-timing missions</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">W</forename><surname>Mclain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">W</forename><surname>Beard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Guid. Control Dyn</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="150" to="161" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Finding the k shortest paths</title>
		<author>
			<persName><forename type="first">D</forename><surname>Eppstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. Comput</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="652" to="673" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Robust algorithm for real-time route planning</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">J</forename><surname>Szczerba</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Galkowski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Glicktein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Ternullo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Aerosp. Electron. Syst</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="869" to="878" />
			<date type="published" when="2000-07">Jul. 2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Fast replanning for navigation in unknown terrain</title>
		<author>
			<persName><forename type="first">S</forename><surname>Koenig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Likhachev</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Rob</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="354" to="363" />
			<date type="published" when="2005-06">Jun. 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Cooperative task assignment/path planning of multiple unmanned aerial vehicles using s</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Eun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Bang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Aircr</title>
		<imprint>
			<biblScope unit="volume">46</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="338" to="343" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Genetic Algorithms+ Data Structures = Evolution Programs</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Michalewicz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996">1996</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>Berlin, Germany</pubPlace>
		</imprint>
	</monogr>
	<note>rd ed.</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Adaptive evolutionary planner/navigator for mobile robots</title>
		<author>
			<persName><forename type="first">X</forename><surname>Jing</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Michalewicz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Lixin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Trojanowski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Evol. Comput</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="18" to="28" />
			<date type="published" when="1997-04">Apr. 1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Evolutionary algorithm based offline/online path planner for UAV navigation</title>
		<author>
			<persName><forename type="first">I</forename><surname>Nikolos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Valavanis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Tsourveloudis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kostaras</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Syst., Man, Cybern., B Cybern</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="898" to="912" />
			<date type="published" when="2003-12">Dec. 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">UAV path planning using evolutionary algorithms</title>
		<author>
			<persName><forename type="first">I</forename><surname>Nikolos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Zografos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Brintaki</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Innov. Intell. Mach</title>
		<imprint>
			<biblScope unit="volume">70</biblScope>
			<biblScope unit="page" from="77" to="111" />
			<date type="published" when="2007-05">May 2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Particle swarm</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Eberhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Int. Conf. Neural Netw</title>
		<meeting>IEEE Int. Conf. Neural Netw</meeting>
		<imprint>
			<date type="published" when="1995-11">Nov. 1995</date>
			<biblScope unit="page" from="1942" to="1948" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Analysis of the publications on the applications of particle swarm optimisation</title>
		<author>
			<persName><forename type="first">R</forename><surname>Poli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Artif. Evol. Appl</title>
		<imprint>
			<biblScope unit="volume">2008</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="10" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Particle swarm optimization: Basic concepts, variants and applications in power systems</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Del Valle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">K</forename><surname>Venayagamoorthy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Mohagheghi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Hernandez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">G</forename><surname>Harley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Evol. Comput</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="171" to="195" />
			<date type="published" when="2008-04">Apr. 2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Particle swarm optimization with particles having quantum behavior</title>
		<author>
			<persName><forename type="first">J</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc</title>
		<meeting>null</meeting>
		<imprint>
			<date type="published" when="2001">2001. 2004</date>
			<biblScope unit="page" from="325" to="331" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A global search strategy of quantumbehaved particle swarm optimization</title>
		<author>
			<persName><forename type="first">J</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Feng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Conf</title>
		<meeting>IEEE Conf</meeting>
		<imprint>
			<date type="published" when="2004-12">Dec. 2004</date>
			<biblScope unit="page" from="111" to="116" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Particle swarm approach based on quantum mechanics and harmonic oscillator potential well for economic load dispatch with valve-point effects</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">D S</forename><surname>Coelho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">C</forename><surname>Mariani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Energy Convers. Manage</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="3080" to="3085" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Solving the economic dispatch problem with a modified quantum-behaved particle swarm optimization method</title>
		<author>
			<persName><forename type="first">J</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Fang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Energy Convers. Manage</title>
		<imprint>
			<biblScope unit="volume">50</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="2967" to="2975" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">MESFET DC model parameter extraction using quantum particle swarm optimization</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">L</forename><surname>Sabat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">D S</forename><surname>Coelho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Abraham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Microelectron. Reliab</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="660" to="666" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Quantum behaved particle swarm optimization (QPSO) for multi-objective design optimization of composite structures</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">N</forename><surname>Omkar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Khandelwal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">V S</forename><surname>Ananth</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">Narayana</forename><surname>Naik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Gopalakrishnan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Expert Syst. Appl</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="11312" to="11322" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Multiple sequence alignment using the hidden markov model trained by an improved quantum-behaved particle swarm optimization</title>
		<author>
			<persName><forename type="first">J</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Fang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Ding</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Long</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Inform. Sci</title>
		<imprint>
			<biblScope unit="volume">182</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="93" to="114" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">QoS multicast routing using a quantum-behaved particle swarm optimization algorithm</title>
		<author>
			<persName><forename type="first">J</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Fang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eng. Appl. of Artif. Intell</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="123" to="131" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">A quantum particle swarm optimizer with chaotic mutation operator</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">D S</forename><surname>Coelho</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Chaos, Solitons Fractals</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="1409" to="1418" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Gaussian quantum-behaved particle swarm optimization approaches for constrained engineering design problems</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">D S</forename><surname>Coelho</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Expert Syst. Appl</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="1676" to="1683" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Differential evolution: A simple and efficient heuristic for global optimization over continuous spaces</title>
		<author>
			<persName><forename type="first">R</forename><surname>Storn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Price</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Global Opt</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="341" to="359" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">DEPSO: hybrid particle swarm with differential evolution operator</title>
		<author>
			<persName><forename type="first">W.-J</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X.-F</forename><surname>Xie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Int. Conf. Syst., Man Cybern</title>
		<meeting>IEEE Int. Conf. Syst., Man Cybern</meeting>
		<imprint>
			<date type="published" when="2003-10">Oct. 2003</date>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="3816" to="3821" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Modeling of gene regulatory networks with hybrid differential evolution and particle swarm optimization</title>
		<author>
			<persName><forename type="first">R</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">K</forename><surname>Venayagamoorthy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">C</forename><surname>Wunsch Ii</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Neural Netw</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="917" to="927" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Differential evolution particle swarm optimization for digital filter design</title>
		<author>
			<persName><forename type="first">B</forename><surname>Luitel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">K</forename><surname>Venayagamoorthy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE CEC</title>
		<meeting>IEEE CEC</meeting>
		<imprint>
			<date type="published" when="2008-06">Jun. 2008</date>
			<biblScope unit="page" from="3954" to="3961" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Path planning for UAV based on quantum-behaved particle swarm optimization</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ding</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Cai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Sun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SPIE Int. Symp. Multispectral Image Process</title>
		<meeting>SPIE Int. Symp. Multispectral Image ess</meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="volume">7497</biblScope>
			<biblScope unit="page" from="74970B" to="74971" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Phase angle-encoded and quantumbehaved particle swarm optimization applied to three-dimensional route planning for UAV</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ding</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Syst., Man, Cybern., A, Syst. Humans</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="511" to="526" />
			<date type="published" when="2012-03">Mar. 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Differential Evolution: A Practical Approach to Global Optimization</title>
		<author>
			<persName><forename type="first">K</forename><surname>Price</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Storn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lampinen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005">2005</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>Berlin, Germany</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">A modified particle swarm optimizer</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Eberhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE World Congr</title>
		<meeting>IEEE World Congr</meeting>
		<imprint>
			<date type="published" when="1998-05">May 1998</date>
			<biblScope unit="page" from="69" to="73" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Empirical study of particle swarm optimization</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Eberhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc</title>
		<meeting>null</meeting>
		<imprint>
			<date type="published" when="1999">2001. 1999</date>
			<biblScope unit="page" from="1945" to="1950" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">The particle swarm: Explosion, stability, and convergence in a multidimensional complex space</title>
		<author>
			<persName><forename type="first">M</forename><surname>Clerc</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Evol. Comput</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="58" to="73" />
			<date type="published" when="2002-02">Feb. 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><surname>Jarvis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">I</forename><surname>Reuter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Nelson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Guevara</surname></persName>
		</author>
		<ptr target="http://srtm.csi.cgiar.org" />
		<title level="m">Hole-Filled Seamless SRTM Data V4</title>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Direct least square fitting of ellipses</title>
		<author>
			<persName><forename type="first">A</forename><surname>Fitzgibbon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Pilu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Fisher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Pattern Anal. Mach. Intell</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="476" to="480" />
			<date type="published" when="1999-05">May 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">A multi-population genetic algorithm for robust and fast ellipse detection</title>
		<author>
			<persName><forename type="first">J</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Kharma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Grogono</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Pattern Anal. Appl</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="149" to="162" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Path planning of unmanned aerial vehicles using B-splines and particle swarm optimization</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">L</forename><surname>Foo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Knutzon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Kalivarapu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Oliver</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Winer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Aerosp. Comput., Inform., Commun</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="271" to="290" />
			<date type="published" when="2009-04">Apr. 2009</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
