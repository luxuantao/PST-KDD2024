<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Unified Attribute-Based Access Control Model Covering DAC, MAC and RBAC</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Xin</forename><surname>Jin</surname></persName>
							<email>xjin@cs.utsa.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Institute for Cyber Security &amp; Department of Computer Science</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Ram</forename><surname>Krishnan</surname></persName>
							<email>ram.krishnan@utsa.edu</email>
							<affiliation key="aff1">
								<orgName type="department">Institute for Cyber Security &amp; Dept. of Elect</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Ravi</forename><surname>Sandhu</surname></persName>
							<email>ravi.sandhu@utsa.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Institute for Cyber Security &amp; Department of Computer Science</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">A Unified Attribute-Based Access Control Model Covering DAC, MAC and RBAC</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">165FFDB4ACB78ACE322F9943831167C0</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T17:22+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Attribute</term>
					<term>XACML</term>
					<term>DAC</term>
					<term>MAC</term>
					<term>RBAC</term>
					<term>ABAC</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Recently, there has been considerable interest in attribute based access control (ABAC) to overcome the limitations of the dominant access control models (i.e, discretionary-DAC, mandatory-MAC and role based-RBAC) while unifying their advantages. Although some proposals for ABAC have been published, and even implemented and standardized, there is no consensus on precisely what is meant by ABAC or the required features of ABAC. There is no widely accepted ABAC model as there are for DAC, MAC and RBAC. This paper takes a step towards this end by constructing an ABAC model that has "just sufficient" features to be "easily and naturally" configured to do DAC, MAC and RBAC. For this purpose we understand DAC to mean owner-controlled access control lists, MAC to mean lattice-based access control with tranquility and RBAC to mean flat and hierarchical RBAC. Our central contribution is to take a first cut at establishing formal connections between the three successful classical models and desired ABAC models.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Starting with Lampson's access matrix in the late 1960's, dozens of access control models have been proposed. Only three have achieved success in practice: discretionary access control (DAC) <ref type="bibr" target="#b23">[24]</ref>, mandatory access control (MAC, also known as lattice based access control or multilevel security) <ref type="bibr" target="#b21">[22]</ref> and role-based access control (RBAC) <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b22">23]</ref>. While DAC and MAC emerged in the early 1970's it took another quarter century for RBAC to develop robust foundations and flourish. RBAC emerged due to increasing practitioner dissatisfaction with the then dominant DAC and MAC paradigms, inspiring academic research on RBAC. Since then RBAC has become the dominant form of access control in practice.</p><p>Recently there has been growing practitioner concern with the limitations of RBAC, which has been met by researchers in two different ways. On one hand researchers have diligently and creatively extended RBAC in numerous directions. Conversely there is growing appreciation that a more general model, specifically attribute-based access control (ABAC), could encompass the demonstrated benefits of DAC, MAC and RBAC while transcending their limitations. Identities, clearances, sensitivity, roles and other properties of users, subjects and objects can all be expressed as attributes. Languages for specifying permitted accesses based on the values and relationships among these attributes provide policy flexibility and customization. However, the proliferation and flexibility of policy configuration points in ABAC leads to greater difficulty in policy expression and comprehension relative to the simplicity of DAC, MAC and RBAC. It will require strong and comprehensive foundations for ABAC to flourish.</p><p>Intuitively, an attribute is a property expressed as a name:value pair associated with any entity in the system, including users, subjects and objects. Appropriate attributes can capture identities and access control lists (DAC), security labels, clearances and classifications (MAC) and roles (RBAC). As such ABAC supplements and subsumes rather than supplants these currently dominant models. Moreover any number of additional attributes such as location, time of day, strength of authentication, departmental affiliation, qualification, and frequent flyer status, can be brought into consideration within the same extensible framework of attributes. Thus the proliferation of RBAC extensions might be unified by adding appropriate attributes within a uniform framework, solving many of these shortcomings of core RBAC. At the same time we should recognize that ABAC with its flexibility may further confound the problem of role design and engineering. Attribute engineering is likely to be a more complex activity, and a price we may need to pay for added flexibility.</p><p>Much as RBAC concepts were around for decades before their formalization <ref type="bibr" target="#b12">[13]</ref>, nascent ABAC notions have been around for a while (see related work). The ABAC situation today is analogous to RBAC in its pre-1992 pre-RBAC and 1992-1996 early-RBAC periods <ref type="bibr" target="#b12">[13]</ref>. Although considerable literature has been published, there is no agreement on what ABAC means. Fundamental questions such as components of core models lack authoritative answers, let alone a widely accepted ABAC model.</p><p>In this paper, we take a first step towards our eventual goal of developing an authoritative family of foundational models for attribute based access control. We believe this goal can be achieved only by means of incremental steps that advance our understanding. ABAC is a rich platform. Addressing it in its full scope from the beginning is infeasible. There are simply too mnay moving parts. A reasonable first step is to develop a formal ABAC model that is just sufficiently expressive to capture DAC, MAC and RBAC. This provides us a well-defined scope while ensuring that the resulting model has practical relevance. There have been informal demonstrations, such as <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b20">21]</ref>, of the classical models using attributes. Our goal is to develop more complete and formal constructions.</p><p>The paper is organized as follows. We review previous work in section 2. In section 3, we characterize the three classical models from an ABAC perspective and informally identify the minimal features of an unifying ABAC model. In section 4, we give an overview of the ABAC α model. In section 5, we present the formal definition of the model as well as functional specifications. In section 6, we show the configurations for DAC, MAC and RBAC in ABAC α . Section 7 concludes the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>Extensions to RBAC by combining attributes and roles have been widely studied. <ref type="bibr" target="#b14">[15]</ref> defines parameterized privileges to restrict access to a subset of objects. Similar literature such as parameterized role <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b13">14]</ref>, object sensitive role <ref type="bibr" target="#b11">[12]</ref> and attributed role <ref type="bibr" target="#b27">[27]</ref> are also proposed. RB-RBAC model <ref type="bibr" target="#b3">[4]</ref> use attributes to assist automatic user-role assignment.</p><p>Several attribute based access control systems and models have been proposed. The UCON model <ref type="bibr" target="#b20">[21]</ref> focuses on usage control where authorizations are based on the attributes of the involved components. It is attribute-based but, rather than dealing with core ABAC concepts, it focuses on advanced access control features such as mutable attributes, continuous enforcement, obligations and conditions. UCON more or less assumes that an ABAC model is in place on top of which the UCON model is constructed. <ref type="bibr" target="#b20">[21]</ref> sketches out instantiation of DAC, MAC and RBAC in UCON but the constructions are informal and not complete. Informal mappings of an ABAC system into DAC, MAC and RBAC are also described in <ref type="bibr" target="#b7">[8]</ref>. Damiani et al <ref type="bibr" target="#b8">[9]</ref> describe an informal framework for attribute based access control in open environments. Bonatti et al <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b6">7]</ref> present a uniform structure to logically formulate and reason about both service access and information disclosure constraints according to related entity attributes. Similarly, <ref type="bibr" target="#b28">[28,</ref><ref type="bibr" target="#b29">29,</ref><ref type="bibr" target="#b30">30</ref>] develop a service negotiation framework for requesters and providers to gradually expose their attributes. However, none of these investigates their connections with DAC, MAC and RBAC. Wang et al <ref type="bibr" target="#b26">[26]</ref> proposes a framework that models an attribute-based access control system using logic programming with set constraints of a computable set theory. This work mainly focus on how set theory helps define the policy, rather than the model itself. Flexible access control system <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b4">5]</ref> can specify some features of attribute based access policies. Yuan and Tong <ref type="bibr" target="#b31">[31]</ref> describe ABAC in the aspects of authorization architecture and policy formulation. This work focus on enforcement level rather than policy level of the model. Bo et al <ref type="bibr" target="#b18">[19]</ref> mention that DAC, MAC and RBAC is configurable through ABAC. However, neither formal model nor details of the configurations are provided. Role-based trust management <ref type="bibr" target="#b19">[20]</ref> is a flexible approach for access control in distributed systems where access control decisions are based on tracking chaining credentials. However, its core idea is extensions to role based access control. XACML <ref type="bibr" target="#b0">[1]</ref> and SAML <ref type="bibr" target="#b1">[2]</ref> are access control-related web services standards that both support attribute-based access control. These standard languages are designed without a formal ABAC model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">ABAC α : Covering DAC, MAC and RBAC</head><p>Our goal is to develop an ABAC model that has "just sufficient" features to be "easily and naturally" configured to do DAC, MAC and RBAC. We recognize these terms are qualitative, hence the quotation marks. For clarity of reference we designate this model as ABAC α and understand ABAC to denote the larger concept. Our goal is to eventually develop a family of ABAC models, analogous to RBAC96 <ref type="bibr" target="#b22">[23]</ref>, which will become the de facto standard for defining, refining and evolving ABAC. The contributions of this paper are one step towards this goal.</p><p>We very much expect ABAC to include advanced features that go significantly beyond ABAC α , e.g., mutable attributes <ref type="bibr" target="#b20">[21]</ref>, environment attributes <ref type="bibr" target="#b31">[31]</ref> and connection attributes <ref type="bibr" target="#b17">[18]</ref>. At this point it is premature to consider whether ABAC α might be the core ABAC model, an advanced model or a special case of some model in a prospective ABAC family. Which features belong in a core ABAC model, which belong in advanced models and which are outside the scope of ABAC are crucial questions that researchers must eventually resolve. However, for the moment, we deliberately limit our scope to developing ABAC α .</p><p>ABAC α is motivated by the fact that the three classical models have been widely deployed and remain in active widespread use. The value of ABAC has been perceived in benefits it provides beyond DAC, MAC and RBAC, such as dynamic access control <ref type="bibr" target="#b24">[25]</ref>. Nonetheless, it is of interest to develop ABAC α that captures these three without incorporating "extraneous" features. We anticipate that ABAC α will eventually fit somewhere within the yet-to-be-developed authoritative family of ABAC models.</p><p>For purpose of ABAC α we understand DAC to mean owner-controlled access control lists <ref type="bibr" target="#b23">[24]</ref>, MAC to mean lattice-based access control with tranquility <ref type="bibr" target="#b21">[22]</ref> (i.e.,subject and object label do not change)and RBAC to mean core or flat RBAC (RBAC 0 ), and hierarchical RBAC (RBAC 1 ) <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b22">23]</ref>. Extensions beyond these interpretations of DAC, MAC and RBAC may or may not require extensions to ABAC α , comprehensive study of which is outside the scope of this paper. The intrinsic features of ABAC α that follow from the above interpretation of DAC, MAC and RBAC are highlighted in Table <ref type="table" target="#tab_0">1</ref>. This table recognizes three kinds of familiar entities: users, subjects (or sessions in RBAC) and objects. Each user, subject and object has attributes associated with it. The range of each attribute is either atomic valued or set valued, with atomic values partially ordered or unordered and set values ordered by subset. Let us consider each column in turn.</p><p>Column 1. In all cases subject attribute values are constrained by attributes of the creating user. In MAC, users can only create subjects whose clearance is dominated by that of the user. In RBAC, subjects can only be assigned roles assigned to or inherited by the creating user. In DAC, MAC and RBAC, the subject's creator is set to be the creating user. Interestingly this is the only column with YES values for all rows.</p><p>Column 2. For object attributes in MAC a subject can only create objects with the same or higher classification as the subject's clearance. In DAC there is no constraint on the access control list associated with a newly created object. It is up to the creator's discretion. However, we recognize that DAC has a constraint on newly created objects in that root user usually has all access rights to every object and the owner can not forbid this. RBAC does not speak to object creation.</p><p>Column 3. In MAC clearances are values from a lattice of security labels. In RBAC 1 roles are partially ordered by permission inheritance. DAC and RBAC 0 do not require ordered attribute values.</p><p>Column 4. In MAC the clearance attribute is atomic valued as a single label from a lattice. In RBAC 0 and RBAC 1 attributes are sets of roles, and in DAC each access control list is a set of user identities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Column 5.</head><p>In DAC the user who created an object can modify its access control lists. MAC (with tranquility) does not permit modification of an object's classification. RBAC 0 and RBAC 1 do not speak to this issue. Column 6. Modification of subject attributes by the creating user is explicitly permitted in RBAC 0 and RBAC 1 to allow dynamic activation and deactivation of roles. DAC and MAC do not require this feature.</p><p>Each column imposes requirements on ABAC α so we have YES across the entire row. Table <ref type="table" target="#tab_0">1</ref> is, of course, not a complete list of all required features to configure the classical models, but rather highlights the salient requirements that stem from each classical model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">ABAC α Components</head><p>Based on the above analysis, we present a unified ABAC α model informally in this section followed by its formalization in the next section. The structure of ABAC α model is shown in Figure <ref type="figure" target="#fig_0">1</ref>. The core components of this model are: users (U ), subjects (S), objects (O), user attributes (U A), subject attributes (SA), object attributes (OA), permissions (P ), authorization policies, and constraint checking policies for creating and modifying subject and object attributes.</p><p>An attribute is a function which takes an entity such as a user and returns a specific value from its range. An attribute range is given by a finite set of atomic values. An atomic valued attribute will return one value from the range, while a set valued attribute will return a subset of the range. Each user is associated with a finite set of user attribute functions whose values are assigned by security administrators (outside the scope of the model). These attributes represent the user properties, such as name, clearance, roles and gender. Subjects are created by users to perform some actions in the system. For the purpose of this paper, subjects can only be created by a user and are not allowed to create other subjects. The creating user is the only one who can terminate a subject. Each subject is associated with a finite set of subject attribute functions which require an initial value at creation time. Subject attributes are set by the creating user and are constrained by policies established by security architects (discussed later). For example, a subject attribute value may be inherited from a corresponding user attribute. This is shown in Figure <ref type="figure" target="#fig_0">1</ref> as an arrow from user attributes to subject attributes. Objects are resources that need to be protected. Objects are associated with a finite set of object attribute functions. Objects may be created by a subject on behalf of its user. At creation, the object's attribute values may be set by the user via the subject. The values may be constrained by the corresponding subject's attributes. For example, the new object may inherit values from corresponding subject attributes. In Figure <ref type="figure" target="#fig_0">1</ref>, the arrow from subject attributes to object attributes indicates this relationship.</p><p>Constraints are functions which return true when conditions are satisfied and false otherwise. Security architects configure constraints via policy languages. Constraints can apply at subject and object creation time, and subsequently at subject and object attribute modification time.</p><p>Permissions are privileges that a user can hold on objects and exercise via a subject. Permissions enable access of a subject to an object in a particular mode, such as read or write. Permissions definition is dependent on specific systems built using this model.</p><p>Authorization policy. Authorization policies are two-valued boolean functions which are evaluated for each access decision. An authorization policy for a specific permission takes a subject, an object and returns true or false based on attribute values. More generally, access decision may be three-valued, possibly returning "don't know" in addition to true and false. This is appropriate Security architects are able to specify different authorization policies using the language offered in this model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Formal ABAC α Model</head><p>The basic sets and functions in ABAC α are given in Table <ref type="table" target="#tab_1">2</ref>. U is the set of existing users and UA is a set of attribute function names for the users in U. Each attribute function in UA maps a user in U to a specific value. This could be atomic or set valued as determined by the type of the attribute function (attType). We specify similar sets and functions for subjects and objects. Sub-Creator is a distinguished attribute that maps each subject to the user who creates it (an alternate would be to treat this attribute as a function in SA). Finally, P is a set of permissions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Policy Configuration Points.</head><p>We define four policy configuration points as shown in Table <ref type="table" target="#tab_2">3</ref>. The first is for authorization policies (item 1 in table <ref type="table" target="#tab_2">3</ref>). The security architect specifies one authorization policy for each permission. The authorization function returns true or false based on attributes of the involved subject and object. The second configuration point is constraints for subject attribute assignment (item 2 in table <ref type="table" target="#tab_2">3</ref>). The third is constraints for object attributes assignment at the time of object creation (item 3 in table <ref type="table" target="#tab_2">3</ref>). The fourth is constraints for object attribute modification after the object has been created (item 4 in table <ref type="table" target="#tab_2">3</ref>). Note that we have not provided a configuration point for subject attribute modification after it has been created. For the stated purposes in this paper, the function SubCreator captures necessary information.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Policy Configuration Languages.</head><p>Each policy configuration point is expressed using a specific language. The languages specify what information is available for the functions that configure the four points discussed above. For example, in LConstrSub function, only attributes from the user who wants to create the subject as well as the proposed subject attribute values are allowed. Since all specification languages share the same format of logical structure while differing only in the values they can use for comparison, we define a template called Common Policy Language (CPL). CPL is not a complete language unless terminals set and atomic are specified. It can be instantiated for specifying each configuration point. CPL is defined in table <ref type="table" target="#tab_3">4</ref>.  Functional Specifications. The ABAC α functional specification, as shown in Table <ref type="table" target="#tab_4">5</ref>, outlines the semantics of various functions that are required for creation and maintenance of the ABAC α model components. Our intention here is to only provide a sample set of key functions due to space limitations. The first column lists all the function names as well as required parameters. The second column represents the conditions which need to be satisfied before the updates, which are listed in the third column, can be executed. N AM E refers to set of all names for various entities in the system.</p><formula xml:id="formula_0">::= ϕ ∧ ϕ | ϕ ∨ ϕ | ( ϕ ) | ¬ ϕ | ∃ x ∈ set.ϕ | ∀ x ∈ set. ϕ | set</formula><p>The first kind of functions are administrative in nature which are designed to be invoked only by security administrators. We do not specify the authorization conditions for administrative functions which are outside the scope of ABAC α . They mainly deal with user and user attribute management. One important issue with the user management is that the subjects created by a user are forced to be terminated whenever user attributes are modified or the user is deleted. We understand there are various options here (discussion on this question is out of scope due to lack of space). The second kind of functions are system functions which can be invoked by subjects and users. By default, the first function parameter is the invoker of each function. For example, CreateSubject is invoked by user u and ModifyObjectAtt is invoked by subject s. The third kind of functions are authorization policies and subject and object attribute constraint functions which are left to be configured by security architects.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">ABAC α : Configuring DAC, MAC and RBAC</head><p>In this section, we show the capability of ABAC α in configuring DAC, MAC and RBAC. For this illustration, we set P={read, write}. <ref type="table" target="#tab_6">6</ref>). Each object is associated with the same number of set-valued attributes as that of permissions and there is a one to one semantic mapping between them. An object attribute returns the list of users that hold the permission indicated by the object attribute name. Object attribute createdby is set to be the owner of this object. <ref type="table" target="#tab_9">7</ref>). Each user is associated with an atomic-valued attribute uclearance. Each subject is also associated with an atomic-valued attribute sclearance. Each object is associated with an atomic-valued attribute sensitivity. Similar to MAC, the user and subject attributes represent their clearance in the system. The sensitivity attribute of the object represents the object's  classification in MAC. The 3 attributes share the same range which is represented by a system maintained lattice L. <ref type="table" target="#tab_10">8</ref>). Each user and subject is associated with set-valued attributes urole and srole respectively. Each object is associated with the same number of set-valued attributes as that of permissions and there is a one to one semantic mapping between them. Each attribute returns the role that is assigned the permission on this specific object. For example, rrole of object obj returns the role which is assigned the permission of reading obj. The ranges of all attributes are the same as that of a system defined set of role names R which are unordered for RBAC 0 and partially ordered for RBAC 1 . Note that subjects model sessions in RBAC.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DAC (Table</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>MAC (Table</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>RBAC (Table</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion and Future Work</head><p>In this paper, we proposed a unified ABAC α model and showed that it can be used to naturally configure the three classical models. We believe the insights gained in this paper will assist understanding the connections between desired ABAC model and widely-deployed classical models. In addition, we hope this work will inspire further research in formally designing foundational ABAC models.</p><p>Some extensions of classical models can also be accommodated. In MAC, it is useful to categorize subjects into different types as read only and read write for both security and availability. The rule governing their actions can be different in that read only subjects are allowed to read all levels of objects. While read write subjects' action is strictly regulated. Another example is in RBAC, certain level of automatic permission-role assignment can be achieved by interpreting permissions as accessing a group of objects with the same attribute expression. Organization based access control model (OrBAC) <ref type="bibr" target="#b16">[17]</ref> is another example of abstracting activities, objects and so on.</p><p>The first aspect of future work is to extend and consolidate the proposed model. Examples are to accommodate static/dynamic separation of duty in RBAC and subjects carrying additional attributes other than the corresponding users to reflect contextual information. Security properties and expressive power of this model are important questions for further theoretical analysis. On the other hand, useful instances of this model with various relationships between user, subject and object attributes can be developed for specific groups of application. For example, usable ABAC α instance in organizations offer better guidance than general ABAC α . In future work, we plan to develop XACML profiles for ABAC models as we develop them. By design XACML does not recognize user-subject mapping but assumes that subject attributes are correctly produced from user attributes prior to making access decisions. Modeling this process will therefore require extensions to XACML.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Unified ABAC model structure</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>setcompare set | atomic ∈ set | atomic atomiccompare atomic setcompare ::= ⊂ | ⊆ | atomiccompare ::= &lt; | = | ≤ LAuthorization is a CPL instantiation for specifying authorization policies in which set and atomic are specified as follows: set::= setsa(s) | setoa(o) atomic::= atomicsa(s) | atomicoa(o) setsa ∈ {sa | sa ∈ SA ∧ attType(sa) = set } setoa ∈ {oa | oa ∈ OA ∧ attType(oa) = set } atomicoa ∈ {oa | oa ∈ OA ∧ attType(oa) = atomic } atomicsa ∈ {sa | sa ∈ SA ∧ attType(sa) = atomic } LAuthorization allows one to specify policies based only on the value of involved subject and object. Parameters such as s and o in this and following languages are formal parameters as introduced in table 3. LConstrSub is a CPL instantiation for specifying ConstrSub where: set::= setua(u) | value atomic::= atomicua(u) | value setua ∈ {ua | ua ∈ UA ∧ attType(ua) = set } atomicua ∈ {ua | ua ∈ UA ∧ attType(ua)= atomic } value ∈ {val | (sa, val) ∈ saset ∧ sa ∈ SA} This instance is different from above because in the constraint function for subject attributes, only the attribute of user who wants to create the subject and the proposed values for subject attributes are allowed. LConstrObj is a CPL instantiation for specifying ConstrObj where: set::= setsa(s) | value atomic::= atomicsa(s) | value setsa ∈ {sa | sa ∈ SA ∧ attType(sa) = set } atomicsa ∈ {sa | sa ∈ SA ∧ attType(sa)= atomic } value ∈ {val | (oa, val) ∈ oaset ∧ oa ∈ OA} Here we use subject attributes instead of user attributes. LConstrObjMod, used to specify ConstrObjMod, is the same as above except: set::= setsa(s) | setoa(o) | value and atomic::= atomicsa(s) | atomicoa(o) | value. Note that this language allows one to compare proposed new attribute values with current attribute values of an object unlike LConstrObj.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>(urole)=Range(srole)=Range(rrole)=Range(wrole)=R R is a set of atomic roles define by the system. attType(urole)=attType(srole)=attType(rrole)=attType(wrole)=set Thus, urole: U → 2 R , srole: S → 2 R , rrole: O → 2 R , wrole: O → 2 R Configuration points 1. Authorization policy Authorization read (s:S, o:O)≡∃r∈srole(s).r∈rrole(o) Authorizationwrite(s:S, o:O)≡∃r∈srole(s).r∈wrole(o) (same as above) 2. ConstrSub(u:U, s:S, {(srole,val1)}:SASET)≡val1⊆urole(u) 3. ConstrObj(s:S, o:O, {(rrole,val1),(wrole,val2)}:OASET) returns false. 4. ConstrObjMod(s:S, o:O, {(rrole,val1),(wrole,val2)}:OASET) returns false.RBAC1 configuration Basic sets and functionsThe basic sets and functions are the same as RBAC0 except: R is a partially ordered set defined by the system.Configuration points 1. Authorization policy Authorization read (s:S, o:O)≡∃r1∈srole(s). ∃r2∈rrole(o).r2≤r1Authorizationwrite(s:S, o:O)≡∃r1∈srole(s). ∃r2∈wrole(o).r2≤r1 (same as above) 2. ConstrSub(u:U, s:S, {(srole,val1)}:SASET)≡∀r1∈val1.∃r2∈urole(u).r1≤r2 3. ConstrObj(s:S, o:O, {(rrole,val1),(wrole,val2)}:OASET) returns false. 4. ConstrObjMod(s:S, o:O, {(rrole,val1),(wrole,val2)}:OASET) returns false.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 .</head><label>1</label><figDesc>ABACα intrinsic requirements</figDesc><table><row><cell></cell><cell>Subject</cell><cell>Object</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell cols="2">attribute attribute</cell><cell></cell><cell></cell><cell></cell><cell>Subject</cell></row><row><cell></cell><cell>values</cell><cell>values</cell><cell></cell><cell>Attribute</cell><cell></cell><cell>attribute</cell></row><row><cell></cell><cell cols="4">constrained constrained Attribute functions</cell><cell>Object</cell><cell>modification</cell></row><row><cell></cell><cell cols="3">by creating by creating range</cell><cell>return</cell><cell cols="2">attributes by creating</cell></row><row><cell></cell><cell>user?</cell><cell cols="4">subject? ordered? set value? modification?</cell><cell>user?</cell></row><row><cell>DAC</cell><cell>YES</cell><cell>YES</cell><cell>NO</cell><cell>YES</cell><cell>YES</cell><cell>NO</cell></row><row><cell>MAC</cell><cell>YES</cell><cell>YES</cell><cell>YES</cell><cell>NO</cell><cell>NO</cell><cell>NO</cell></row><row><cell>RBAC0</cell><cell>YES</cell><cell>NA</cell><cell>NO</cell><cell>YES</cell><cell>NA</cell><cell>YES</cell></row><row><cell>RBAC1</cell><cell>YES</cell><cell>NA</cell><cell>YES</cell><cell>YES</cell><cell>NA</cell><cell>YES</cell></row><row><cell>ABACα</cell><cell>YES</cell><cell>YES</cell><cell>YES</cell><cell>YES</cell><cell>YES</cell><cell>YES</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 .</head><label>2</label><figDesc>Basic sets and functions of ABACα U, S and O represent finite sets of existing users, subjects and objects respectively. UA, SA and OA represent finite sets of user, subject and object attribute functions respectively. (Henceforth referred to as simply attributes.) P represents a finite set of permissions. For each att in UA ∪ SA ∪ OA, Range(att) represents the attribute's range, a finite set of atomic values. SubCreator: S → U . For each subject SubCreator gives its creator. attType: UA ∪ SA ∪ OA → {set, atomic}. Specifies attributes as set or atomic valued. Each attribute function maps elements in U, S and O to atomic or set values.</figDesc><table><row><cell>∀ua ∈ UA. ua : U →</cell><cell>Range(ua) if attType(ua) = atomic 2 Range(ua) if attType(ua) = set</cell></row></table><note><p>∀sa ∈ SA. sa : S → Range(sa) if attType(sa) = atomic 2 Range(sa) if attType(sa) = set ∀oa ∈ OA. oa : O → Range(oa) if attType(oa) = atomic 2 Range(oa) if attType(oa) = set in multi-policy systems. It suffices for our purpose to consider just two values.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 3 .</head><label>3</label><figDesc>Policy configuration points and languages of ABACα</figDesc><table><row><cell>1. Authorization policies.</cell><cell></cell></row><row><cell cols="2">For each p ∈ P, Authorizationp(s:S,o:O) returns true or false.</cell></row><row><cell cols="2">Language LAuthorization is used to define the above functions (one per permission),</cell></row><row><cell>where s and o are formal parameters.</cell><cell></cell></row><row><cell cols="2">2. Subject attribute assignment constraints.</cell></row><row><cell cols="2">Language LConstrSub is used to specify ConstrSub(u:U,s:S,saset:SASET), where u, s</cell></row><row><cell cols="2">and saset are formal parameters. The variable saset represents proposed attribute name</cell></row><row><cell cols="2">and value pairs for each subject attribute. Thus SASET is a set defined as follows:</cell></row><row><cell cols="2">SASET = ∀sa∈SA OneElement(SASETsa)</cell></row><row><cell>For each sa in SA, SASETsa =</cell><cell>{sa} × Range(sa) if attType(sa) = atomic {sa} × 2 Range(sa) if attType(sa) = set</cell></row><row><cell cols="2">We define OneElement to return a singleton subset from its input set.</cell></row></table><note><p>3. Object attribute assignment constraints at object creation time. Language LConstrObj is used to specify ConstrObj(s:S,o:O,oaset:OASET), where s, o and oaset are formal parameters. The variable oaset represents proposed attribute name and value pairs for each object attribute. Thus OASET is a set defined as follows: OASET = ∀oa∈OA OneElement(OASEToa) For each oa in OA, OASEToa = {oa} × Range(oa) if attType(oa) = atomic {oa} × 2 Range(oa) if attType(oa) = set 4. Object attribute modification constraints. Language LConstrObjMod is used to specify ConstrObjMod(s:S,o:O,oaset:OASET), where s, o and oaset are formal parameters.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 4 .</head><label>4</label><figDesc>Definition of CPL ϕ</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 5 .</head><label>5</label><figDesc>Functional specification Creation and maintenance of user and their attributes. UASET is a set containing name and value pairs for each user attribute. UASET = ∀ua∈UA OneElement(UASETua)</figDesc><table><row><cell>Functions</cell><cell cols="2">Conditions</cell><cell>Updates</cell></row><row><cell cols="2">Administrative functions: ∀ua ∈ UA. UASETua =</cell><cell cols="2">{ua} × Range(ua) if attType(ua) = atomic {ua} × 2 Range(ua) if attType(ua) = set</cell></row><row><cell>AddUser</cell><cell>u / ∈U</cell><cell></cell><cell>U =U∪{u}</cell></row><row><cell>(u:NAME,uaset:UASET)</cell><cell></cell><cell></cell><cell>forall (ua,va)∈uaset do</cell></row><row><cell></cell><cell></cell><cell></cell><cell>ua(u)=va</cell></row><row><cell>DeleteUser(u:NAME)</cell><cell>u∈U</cell><cell></cell><cell>S =S\{s|SubCreator(s)=u}</cell></row><row><cell>/*delete all u's subjects*/</cell><cell></cell><cell></cell><cell>U =U\{u}</cell></row><row><cell>ModifyUserAtt</cell><cell>u∈U</cell><cell></cell><cell>forall (ua,va)∈uaset do</cell></row><row><cell>(u:NAME,uaset:UASET)</cell><cell></cell><cell></cell><cell>ua(u)=va</cell></row><row><cell>/*delete all u's subjects*/</cell><cell></cell><cell></cell><cell>S =S\{s|SubCreator(s)=u}</cell></row><row><cell cols="3">System functions: User level operations.</cell></row><row><cell>CreateSubject</cell><cell cols="2">u∈U ∧ s / ∈S∧</cell><cell>S =S∪{s};SubCreator(s)=u</cell></row><row><cell cols="3">(u, s:NAME,saset:SASET) ConstrSub(u, s, saset)</cell><cell>forall (sa,va)∈saset do</cell></row><row><cell></cell><cell></cell><cell></cell><cell>sa(s)=va</cell></row><row><cell>DeleteSubject</cell><cell cols="2">s∈S ∧ u∈U ∧</cell><cell>S =S\{s}</cell></row><row><cell>(u, s:NAME)</cell><cell cols="2">SubCreator(s)=u</cell></row><row><cell>ModifySubjectAtt</cell><cell cols="2">s∈S ∧ u∈U ∧</cell><cell>forall (sa,va)∈saset do</cell></row><row><cell cols="3">(u, s:NAME,saset:SASET) SubCreator(s)=u ∧</cell><cell>sa(s)=va</cell></row><row><cell></cell><cell cols="2">ConstrSub(u, s, saset)</cell></row><row><cell>CreateObject</cell><cell cols="2">s∈S ∧ o / ∈O ∧</cell><cell>O =O∪{o}</cell></row><row><cell cols="3">(s, o:NAME,oaset:OASET) ConstrObj(s, o, oaset)</cell><cell>forall (oa,va)∈oaset do</cell></row><row><cell></cell><cell></cell><cell></cell><cell>oa(o)=va</cell></row><row><cell>ModifyObjectAtt</cell><cell cols="2">s∈S ∧ o∈O ∧</cell><cell>forall (oa,va)∈oaset do</cell></row><row><cell cols="4">(s, o:NAME,oaset:OASET) ConstrObjMod(s, o, oaset) oa(o)=va</cell></row><row><cell>∀ p ∈ P</cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>. Authorizationp; ConstrSub; ConstrObj; /</head><label></label><figDesc>*Left to be specified by security architects*/ ConstrObjMod</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>Table 6 .</head><label>6</label><figDesc>DAC (Owner-controlled access control lists) configuration</figDesc><table><row><cell>Basic sets and functions</cell></row><row><cell>UA={}, SA={}, OA={reader, writer, createdby}</cell></row><row><cell>P ={read, write}</cell></row><row><cell>Range(reader)=Range(writer)=Range(createdby)=U</cell></row><row><cell>attType(reader)=attType(writer)=set</cell></row><row><cell>attType(createdby)=atomic</cell></row><row><cell>Thus, reader: O → 2 U ,writer: O → 2 U , createdby: O → U</cell></row><row><cell>The function SubCreator is defined in Table 2.</cell></row><row><cell>Configuration points</cell></row><row><cell>1. Authorization policy</cell></row><row><cell>Authorization read (s:S, o:O)≡SubCreator(s)∈reader(o)</cell></row><row><cell>Authorizationwrite(s:S, o:O)≡SubCreator(s)∈writer(o)</cell></row><row><cell>2.</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Constraint for subject attribute is not required</head><label></label><figDesc>Note that SubCreator is implicitly captured in function CreateSubject in Table5. Function ConstrSub(u:U, s:S, {}:SASET) is defined to return true.3.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8"><head>Constraint for object attribute at creation time</head><label></label><figDesc></figDesc><table><row><cell>ConstrObj(s:S, o:O, {(reader,val1), (writer,val2), (createdby,val3)}:OASET)≡</cell></row><row><cell>val3=SubCreator(s)</cell></row><row><cell>4. Constraint for object attribute at modification time</cell></row><row><cell>ConstrObjMod(s:S, o:O, {(reader,val1), (writer,val2), (createdby,val3)}:OASET)≡</cell></row><row><cell>createdby(o)=SubCreator(s)</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9"><head>Table 7 .</head><label>7</label><figDesc>MAC configuration</figDesc><table><row><cell>Basic sets and functions</cell></row><row><cell>UA={uclearance}, SA={sclearance}, OA={sensitivity}</cell></row><row><cell>P={read, write}</cell></row><row><cell>Range(uclearance)=Range(sclearance)=Range(sensitivity)=L</cell></row><row><cell>L is a lattice defined by system.</cell></row><row><cell>attType(uclearance)=attType(sclearance)=attType(sensitivity)= atomic</cell></row><row><cell>Thus, uclearance: U → L, sclearance: S → L, sensitivity: O → L.</cell></row><row><cell>Configuration points</cell></row><row><cell>1. Authorization policies</cell></row><row><cell>Authorization read (s:S, o:O)≡sensitivity(o)≤sclearance(s)</cell></row><row><cell>Liberal Star: Authorizationwrite(s:S, o:O)≡sclearance(s)≤sensitivity(o)</cell></row><row><cell>Strict Star: Authorizationwrite(s:S, o:O)≡sclearance(s)=sensitivity(o)</cell></row><row><cell>2. ConstrSub(u:U, s:S, {(sclearance,value)}:SASET)≡value≤uclearance(u)</cell></row><row><cell>3. ConstrObj(s:S, o:O, {(sensitivity, value)}:OASET)≡sclearance(s)≤value</cell></row><row><cell>4. ConstrObjMod(s:S, o:O, {(sensitivity, value)}:OASET) returns false.</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_10"><head>Table 8 .</head><label>8</label><figDesc>RBAC configurations</figDesc><table><row><cell>RBAC0 configuration</cell></row><row><cell>Basic sets and functions</cell></row><row><cell>UA={urole}, SA={srole}, OA={rrole, wrole}</cell></row><row><cell>P={read, write}</cell></row><row><cell>Range</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgment. The authors are partially supported by grants from AFOSR MURI and the State of Texas Emerging Technology Fund.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<author>
			<orgName type="collaboration">OASIS</orgName>
		</author>
		<title level="m">Extensible access control markup language (XACML)</title>
		<imprint>
			<date type="published" when="2005">v2.0 (2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<author>
			<orgName type="collaboration">OASIS</orgName>
		</author>
		<title level="m">Security assertion markup language (SAML)</title>
		<imprint>
			<date type="published" when="2005">v2.0 (2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A formal model for parameterized role-based access control</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">E</forename><surname>Abdallah</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">J</forename><surname>Khayat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Formal Aspects in Security and Trust</title>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A model for attribute-based user-role assignment</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>Al-Kahtani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">S</forename><surname>Sandhu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACSAC</title>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A logical framework for reasoning about access control models</title>
		<author>
			<persName><forename type="first">E</forename><surname>Bertino</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Catania</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Ferrari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Perlasca</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SACMAT</title>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Regulating service access and information release on the web</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">A</forename><surname>Bonatti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Samarati</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>ACM CCS</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A uniform framework for regulating service access and information release on the web</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">A</forename><surname>Bonatti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Samarati</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Comp. Secur</title>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Role-based access control with X.509 attribute certificates</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">W</forename><surname>Chadwick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Otenko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Ball</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Internet Computing</title>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">New paradigms for access control in open environments</title>
		<author>
			<persName><forename type="first">E</forename><surname>Damiani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">D C</forename><surname>Di Vimercati</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Samarati</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. Sym. on Sig. Proc. and Info. Tech</title>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Supporting parameterised roles with object-based access control</title>
		<author>
			<persName><forename type="first">M</forename><surname>Evered</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">HICSS</title>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Proposed nist standard for role-based access control</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">F</forename><surname>Ferraiolo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sandhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Gavrila</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Richard Kuhn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Chandramouli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Inf. Syst. Secur</title>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Fine-Grained Access Control with Object-Sensitive Roles</title>
		<author>
			<persName><forename type="first">J</forename><surname>Fischer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Marino</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Majumdar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Millstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ECOOP 2009</title>
		<editor>
			<persName><forename type="first">S</forename><surname>Drossopoulou</surname></persName>
		</editor>
		<meeting><address><addrLine>Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="volume">5653</biblScope>
			<biblScope unit="page" from="173" to="194" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Roles in information security: A survey and classification of the research area</title>
		<author>
			<persName><forename type="first">L</forename><surname>Fuchs</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Pernul</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sandhu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comp. and Secur</title>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">A design for parameterized roles</title>
		<author>
			<persName><forename type="first">M</forename><surname>Ge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">L</forename><surname>Osborn</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
			<publisher>DBSec</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Role templates for content-based access control</title>
		<author>
			<persName><forename type="first">L</forename><surname>Giuri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Iglio</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Workshop on RBAC</title>
		<imprint>
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Flexible support for multiple access control policies</title>
		<author>
			<persName><forename type="first">S</forename><surname>Jajodia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Samarati</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">L</forename><surname>Sapino</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">S</forename><surname>Subrahmanian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Database Syst</title>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Organization based access control</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>El Kalam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Benferhat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Miège</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>El Baida</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Cuppens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Saurel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Balbiani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Deswarte</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Trouessin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">POLICY</title>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">An attribute based framework for riskadaptive access control models</title>
		<author>
			<persName><forename type="first">S</forename><surname>Kandala</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sandhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Bhamidipati</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011">2011</date>
			<publisher>ARES</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A flexible attribute based access control method for grid computing</title>
		<author>
			<persName><forename type="first">B</forename><surname>Lang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">T</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Siebenlist</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ananthakrishnan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Freeman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Grid Comput</title>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Design of a role-based trust management framework</title>
		<author>
			<persName><forename type="first">N</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">H</forename><surname>Winsborough</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE S&amp;P</title>
		<imprint>
			<date type="published" when="2002">2002. 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">The UCONabc usage control model</title>
		<author>
			<persName><forename type="first">J</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sandhu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Inf. Syst. Secur</title>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Lattice-based access control models</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">S</forename><surname>Sandhu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Role-based access control models</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">S</forename><surname>Sandhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">J</forename><surname>Coyne</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">L</forename><surname>Feinstein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">E</forename><surname>Youman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Access control: Principles and practice</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">S</forename><surname>Sandhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Samarati</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Com. Mag</title>
		<imprint>
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Attribute-Based Authentication and Authorisation Infrastructures for E-Commerce Providers</title>
		<author>
			<persName><forename type="first">C</forename><surname>Schläger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sojer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Muschall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Pernul</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EC-Web</title>
		<editor>
			<persName><forename type="first">K</forename><surname>Bauknecht</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">B</forename><surname>Pröll</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">H</forename><surname>Werthner</surname></persName>
		</editor>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="volume">4082</biblScope>
			<biblScope unit="page" from="132" to="141" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title/>
		<author>
			<persName><surname>Springer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006">2006</date>
			<pubPlace>Heidelberg</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">A logic-based framework for attribute based access control</title>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wijesekera</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Jajodia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">2nd ACM Workshop on FMSE</title>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Extended RBAC with role attributes</title>
		<author>
			<persName><forename type="first">J</forename><surname>Yong</surname></persName>
			<affiliation>
				<orgName type="collaboration">10th Pacific Asia Conf. on Info. Sys.</orgName>
			</affiliation>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Bertino</surname></persName>
			<affiliation>
				<orgName type="collaboration">10th Pacific Asia Conf. on Info. Sys.</orgName>
			</affiliation>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Toleman</surname></persName>
			<affiliation>
				<orgName type="collaboration">10th Pacific Asia Conf. on Info. Sys.</orgName>
			</affiliation>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Roberts</surname></persName>
			<affiliation>
				<orgName type="collaboration">10th Pacific Asia Conf. on Info. Sys.</orgName>
			</affiliation>
		</author>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Prunes: an efficient and complete strategy for automated trust negotiation over the internet</title>
		<author>
			<persName><forename type="first">T</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Winslett</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>ACM CCS</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Interoperable strategies in automated trust negotiation</title>
		<author>
			<persName><forename type="first">T</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Winslett</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">E</forename><surname>Seamons</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001">2001</date>
			<publisher>ACM CCS</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Supporting structured credentials and sensitive policies through interoperable strategies for automated trust negotiation</title>
		<author>
			<persName><forename type="first">T</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Winslett</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">E</forename><surname>Seamons</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Inf. Syst. Secur</title>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Attributed based access control (ABAC) for web services</title>
		<author>
			<persName><forename type="first">E</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Tong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Intl. ICWS</title>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
