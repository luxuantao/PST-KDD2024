<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Exceptions Are Strictly More Powerful Than Call/CC</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="1995-07">July 1995</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Mark</forename><surname>Lillibridge</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Computer Science</orgName>
								<orgName type="institution">Carnegie Mellon University Pittsburgh</orgName>
								<address>
									<postCode>15213</postCode>
									<region>PA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Exceptions Are Strictly More Powerful Than Call/CC</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="1995-07">July 1995</date>
						</imprint>
					</monogr>
					<idno type="MD5">59F8CC7BC5C67F958979EB43D437CFD7</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T10:06+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>studies of programming constructs</term>
					<term>control primitives</term>
					<term>exceptions</term>
					<term>recursion</term>
					<term>λcalculus</term>
					<term>type theory</term>
					<term>functional programming</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We demonstrate that in the context of statically typed pure functional lambda calculi, exceptions are strictly more powerful than call/cc. More precisely, we prove that the simply typed lambda calculus extended with exceptions is strictly more powerful than Girard's F ω [6, 15] (a superset of the simply typed lambda calculus) extended with call/cc and abort. This result is established by showing that the first language is Turing equivalent while the second language permits only a subset of the recursive functions to be written. We show that the simply typed lambda calculus extended with exceptions is Turing equivalent by reducing the untyped lambda calculus to it by means of a novel method for simulating recursive types using exception-returning functions. The result concerning F ω extended with call/cc is from a previous paper of the author and Robert Harper's.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The relationship between the programming features of exceptions and call/cc (call with current continuation) in statically typed pure functional programming languages has been an open question for some time. Carl Gunter, et. al, write in a recent paper <ref type="bibr" target="#b6">[7]</ref>:</p><p>It is folklore (the authors know of no published proof) that neither exceptions nor continuations can be expressed as a macro in terms of the other (at least if no references are present), even though they are closely related.</p><p>In this paper we demonstrate that exceptions cannot be expressed as a macro using only call/cc in a statically typed pure functional lambda calculi, thus partially answering half of <ref type="bibr">Gunter, et. al</ref> ,'s open question. Left open is the question of whether or not exceptions can be defined using a macro in terms of call/cc and either fix, recursive types, or some similar feature.</p><p>We do this by showing that when call/cc is added to even as powerful a statically typed pure functional lambda calculi as Girard's F ω <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b14">15]</ref>, the set of functions expressible in the resulting language is still a subset of the recursive functions. However, when exceptions are added to even so limited a language as the simply typed lambda calculus (λ → ), the resulting language permits all computable functions to be expressed. (In particular, unlike in the first case, potentially non-terminating functions can be written.) This demonstrates that exceptions are strictly more powerful than call/cc for statically typed pure functional lambda calculi -not even a full global transformation on a program can reduce exceptions to call/cc.</p><p>The first of these results is a previous result of the author with Robert Harper. The second is new to this paper and involves a novel method for simulating recursive types using exception-raising functions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">The Power of Call/CC</head><p>In a recent paper <ref type="bibr" target="#b8">[9]</ref>, the author and Robert Harper considered an extension of F ω with call/cc and abort, obtaining a number of results. We summarize briefly here the relevant results: Four evaluation strategies were considered, differing in whether they use call-by-name or call-by-value parameter passing and in whether or not they evaluate beneath type abstractions.</p><p>Not evaluating beneath type abstractions treats type instantiation as a significant computation step, possibility including effects. Strategies of this type are used in Quest <ref type="bibr" target="#b2">[3]</ref> and LEAP <ref type="bibr" target="#b13">[14]</ref>, and are directly compatible with extensions that make significant uses of types at run time <ref type="bibr" target="#b10">[11]</ref> (for example, "dynamic" types <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b2">3]</ref>). Since polymorphic expressions are kept distinct from their instances, the anomalies that arise in implicitly polymorphic languages in the presence of references <ref type="bibr" target="#b15">[16]</ref> and control operators <ref type="bibr" target="#b9">[10]</ref> do not occur.</p><p>Strategies that evaluate beneath type abstractions are inspired by the operational semantics of ML <ref type="bibr" target="#b11">[12]</ref>. Evaluation proceeds beneath type abstractions, leading to a once-for-all-instances evaluation of polymorphic terms. Type instantiation application is retained as a computation step, but its force is significantly attenuated by the fact that type expressions may contain free type variables, precluding primitives that inductively analyze their type arguments. The superficial efficiency improvement gained by evaluating beneath type abstractions comes at considerable cost since it is incompatible with extensions such as mutable data structures and control operators <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b9">10]</ref>.</p><p>All the strategies were shown to be sound except for the strategy most like ML (the call-byvalue, evaluating beneath type abstractions strategy) which was shown to be unsound for full F ω .</p><p>Restricting so that polymorphism can only be used on values, not general expressions,<ref type="foot" target="#foot_0">1</ref> restores soundness for this strategy. Typed CPS (continuation-passing style) transforms were then given for each strategy from the appropriate sound subset into F ω and proven correct. Since F ω is known to be strongly normalizing (see <ref type="bibr" target="#b5">[6]</ref>) and the transforms are recursive functions, this implies that all programs in the original language terminate. Hence, adding call/cc to F ω permits at most only recursive functions to be written.</p><p>It should be noted that because the simply typed lambda calculus (λ → ), the polymorphic lambda calculus (F 2 ), and the core of ML, Core-ML <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b4">5]</ref>, are proper subsets of F ω that this result applies to adding call/cc to them as well.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">The Power of Exceptions</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Motivation</head><p>It is standard practice when giving the semantics of untyped programming languages such as Scheme <ref type="bibr" target="#b3">[4]</ref>, to explain exceptions by use of a transform similar in spirit to a CPS transform whereby expressions returning a value of "type" τ are transformed to expressions that return a value of "type" τ + σ where α + β represents a sum type, the values of which are either a tag left and a value of type α or a tag right and a value of type β, and where σ is the "type" of the values carried by the exception. If the original expression evaluates to a value v then the transformed expression evaluates to the value left(v) where v is v transformed. <ref type="foot" target="#foot_1">2</ref> If, on the other hand, the original expression when evaluated raises an uncaught exception carrying the value v then the transformed expression evaluates to right(v).</p><p>Such a transform is easily written in the statically typed case where σ is a base type. See Figure <ref type="figure" target="#fig_0">1</ref>, for example. Here, b is a base-type meta-variable, τ a type meta-variable, x a termvariable meta-variable, and M and N are term meta-variables. F V (M ) denotes the free variables of M and is used to prevent unwanted capture. Under the appropriate assumptions, it can be proved that if M : τ then M : [τ ].</p><p>However, problems arise when σ is a non-base type. If σ is an arrow type, infinite recursion results at the type level, preventing the transform from working because infinite types are not permitted in λ → . (E.g., if σ = int → int then &lt;σ&gt; = &lt;int&gt;→[int] = int→(&lt;int&gt;+&lt;σ&gt;) = int→(int+(int→(&lt;int&gt; +&lt;σ&gt;))) = . . ..)</p><p>By adding recursive types to the destination calculus, the transform can be made to work as in Figure <ref type="figure" target="#fig_1">2</ref>. The rules for variables, lambdas, and applications are the same as before. We use a formulation of recursive types (µα. τ ) where there is an isomorphism (µα.f (α)) ∼ = f (µα.f (α)) mediated by two built in primitives:</p><formula xml:id="formula_0">roll : f (µα.f (α)) → µα.f (α) unroll : (µα.f (α)) → f (µα.f (α))</formula><p>such that unroll(roll(x)) = x when x:f (µα.f (α)) and roll(unroll(y)) = y when y:µα.f (α) where f is any function mapping types to types. For this transform, we only need one recursive type,  µα. &lt;σ&gt; α , so roll:&lt;σ&gt; γ → γ and unroll:γ → &lt;σ&gt; γ (f = λα. &lt;σ&gt; α ). Aside from using this recursive type to avoid the problem of infinite types, the transform is unchanged.</p><formula xml:id="formula_1">&lt;b&gt; = b &lt;τ 1 → τ 2 &gt; = &lt;τ 1 &gt; → [τ 2 ] [τ ] = &lt;τ &gt; + &lt;σ&gt; x = left(x) λx:τ. M = left(λx:&lt;τ &gt;. M ) M N = case M of (x ∈ F V (M )) left(x) =&gt; case N of left<label>(</label></formula><formula xml:id="formula_2">&lt;b&gt; α = b &lt;τ 1 → τ 2 &gt; α = &lt;τ 1 &gt; α → [τ 2 ] α [τ ] α = &lt;τ &gt; α + α γ = µα. &lt;σ&gt; α &lt;τ &gt; = &lt;τ &gt; γ [τ ] = [ τ ] γ raise M = case M of left<label>(</label></formula><p>It is well known that adding recursive types to the simply typed lambda calculus allows the full untyped lambda calculus to be simulated. The following encoding of the untyped lambda calculus in λ → extended with recursive types suffices:</p><formula xml:id="formula_3">= µα. α → α x = x λx. m = roll(λx: . m) m n = (unroll m) n</formula><p>Here, roll:( → ) → , unroll: → ( → ), and under appropriate assumptions, m : for all untyped lambda calculus terms m.</p><p>A question naturally arises: since the transform suggests that exceptions carrying arrow types have an inherently recursive character, can we simulate the untyped lambda calculus using just arrow-type carrying exceptions? The following two sections answer this question in the affirmative.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Simulating recursive types with exceptions</head><p>The key idea is to use exception-raising functions to simulate the values of a recursive type. Suppose we wish to simulate values of the recursive type µα. f (α). We will use functions of type = unit → unit and exceptions carrying values of type f ( ) where unit is the type containing exactly one value, denoted (). The key definitions of roll and unroll are as follows:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>roll</head><p>= λx:f ( ). λy:unit. (raise x; ()) unroll = λx: . (x(); †) handle y =&gt; y where † is any expression of type f ( ). Having a term of this type is needed to make unroll type check. The term is never actually evaluated though unless unroll is called with a value not generated by roll, which is arguably an error. Many exception implementations (SML, for example <ref type="bibr" target="#b11">[12]</ref>) allow their equivalent of a raise statement to have an arbitrary type since it will never "return". This feature can be used to construct a † of type f ( ) if no value of type f ( ) is otherwise available.</p><p>Roll packs up its argument of type f ( ) and stores it in a newly created function which it then returns. This function is built so that when called it will raise an exception carrying the argument to roll. The extra code to return () after raising the exception is solely for typing purposes as it is never executed. Since the types of the exceptions that a function may raise are not part of its type, the resulting function just has type unit → unit = as desired.</p><p>Unroll can later retrieve the value that was passed into roll by simply calling the new function with () and catching the resulting exception which will be carrying the desired value. Hence, we have the crucial equations that unroll(roll(x)) = x when x:f ( ) and roll(unroll(y)) = y when y: , y produced by roll. The later restriction on y is not a problem for the simulation because if we take a closed well-typed expression in λ → plus recursive types and evaluate the encoding of the expression in λ → plus exceptions, we are guaranteed that unroll will never be called on a term not generated by roll. This is because there are no values of recursive type in the original language that are not created via roll.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Simulating the untyped lambda calculus</head><p>By combining the well known encoding from the untyped lambda calculus to the simply typed lambda calculus plus recursive types with our method of simulating recursive types using exceptions, we obtain an encoding from the untyped lambda calculus to the simply typed lambda calculus with exceptions. In fact, it suffices for us to just have one kind of exception which carries values of type (unit→unit)→(unit→unit). Figure <ref type="figure" target="#fig_3">3</ref> contains (working) SML code demonstrating how to do this. The code is entirely monomorphic and uses only those features present in the simply typed lambda calculus extended with exceptions of the aforementioned type.</p><p>Since the untyped lambda calculus is Turing equivalent <ref type="bibr" target="#b1">[2]</ref> and the encoding transform is recursive (syntax directed, in fact), this implies that the simply typed lambda calculus extended with exceptions of the above type is Turing equivalent. Hence, all computable functions can be written in it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Conclusion</head><p>We have shown by a novel method that exceptions can be used to simulate recursive types. From this and the well known fact that the untyped lambda calculus can be encoded in the simply typed lambda calculus (λ → ) plus recursive types, it follows that the untyped lambda calculus can be encoded in λ → extended with exceptions. Because the untyped lambda calculus is Turing equivalent, this implies that all computable functions can be written in λ → extended with exceptions. The ability to have exceptions of distinguishable flavors, possibly carrying values of different types, is not required.</p><p>From previous work of the author's with Robert Harper, it is known that adding call/cc to F ω (a superset of λ → ) preserves the fact that all programs terminate. It follows from this that only a subset of the recursive functions can be written in F ω extended with call/cc. Since the set of all computable functions is proper superset of the recursive functions, the language λ → extended with exceptions is strictly more powerful than the language F ω extended with call/cc. Hence not even a full global transformation on a program can rewrite away exceptions in F ω extended with call/cc. We are grateful to Robert Harper and Mark Leone for their comments on an earlier draft of this work.  </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Exception transform for σ a base type</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Exception transform using recursive types</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>simulate values of the recursive type * \mu a. a -&gt; a using a ML exception of type * (unit-&gt;unit)-&gt;(unit-&gt;unit): *) type star = unit -&gt; unit; type fstar = star -&gt; star; exception E of fstar; fun roll(x:fstar):star = fn y:unit =&gt; (raise E(x); ()); fun unroll(x:star):fstar = (x(); (fn y:star =&gt; y)) handle E(z) =&gt; z; (* * Define an encoding of the untyped lambda calculus in * ML using the previous simulation: * * The rules for encoding using the below functions are as * .M) = lam(fn x =&gt; encode(M)) * encode(M N) = app(encode(M),encode(N)) *) fun app(x:star,y:star):star = (unroll x) y; fun lam(x:star-&gt;star):star = roll(x); (* * As an example, we use the encoding of omega = w w * where w = \x.x x to write a hanging function: * * (Omega reduces to itself in one beta-reduction step, * resulting in an infinite reduction sequence.) *) fun hang() = let val w = lam (fn x =&gt; app(x,x))in app(w,w) end;</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: SML code to encode the untyped lambda calculus</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>More precisely, terms of the form Λα. M are allowed only when M is a call-by-value value. (Because this strategy evaluates under lambda abstractions, Λα. M is considered a value here only when M is itself a value.)</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>More accurately, the transform evaluates to a value equal to left(v). A similar caveat applies to the uncaught exception case.</p></note>
		</body>
		<back>

			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This research was sponsored by the Defense Advanced Research Projects Agency, CSTO, under the title "The Fox Project: Advanced Development of Systems Software", ARPA Order No. 8313, issued by ESD/AVS under Contract No. F19628-91-C-0168. The author was supported by a National Science Foundation Graduate Fellowship.</p><p>The views and conclusions contained in this document are those of the author and should not be interpreted as representing official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Dynamic typing in a statically-typed language</title>
		<author>
			<persName><forename type="first">Martín</forename><surname>Abadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Luca</forename><surname>Cardelli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Benjamin</forename><surname>Pierce</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gordon</forename><surname>Plotkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Sixteenth Annual ACM Symposium on Principles of Programming Languages</title>
		<meeting>the Sixteenth Annual ACM Symposium on Principles of Programming Languages<address><addrLine>Austin</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1989-01">January 1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">The Lambda Calculus: Its Syntax and Semantics</title>
		<author>
			<persName><forename type="first">P</forename><surname>Henk</surname></persName>
		</author>
		<author>
			<persName><surname>Barendregt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Studies in Logic and the Foundations of Mathematics</title>
		<meeting><address><addrLine>North-Holland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1984">1984</date>
			<biblScope unit="volume">103</biblScope>
		</imprint>
	</monogr>
	<note>revised edition</note>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Typeful programming</title>
		<author>
			<persName><forename type="first">Luca</forename><surname>Cardelli</surname></persName>
		</author>
		<idno>45</idno>
		<imprint>
			<date type="published" when="1989">1989</date>
		</imprint>
		<respStmt>
			<orgName>DEC Systems Research Center</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Revised 4 report on the algorithmic language Scheme</title>
		<author>
			<persName><forename type="first">William</forename><surname>Clinger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathan</forename><surname>Rees</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LISP Pointers</title>
		<imprint>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="1" to="55" />
			<date type="published" when="1991-09">July-Sep. 1991</date>
		</imprint>
	</monogr>
	<note>IV</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Principal type schemes for functional programs</title>
		<author>
			<persName><forename type="first">Luis</forename><surname>Damas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Robin</forename><surname>Milner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Ninth ACM Symposium on Principles of Programming Languages</title>
		<imprint>
			<date type="published" when="1982">1982</date>
			<biblScope unit="page" from="207" to="212" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Interprétation Fonctionnelle et Élimination des Coupures dans l&apos;Arithmétique d&apos;Ordre Supérieure</title>
		<author>
			<persName><forename type="first">Jean-Yves</forename><surname>Girard</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1972">1972</date>
		</imprint>
		<respStmt>
			<orgName>Université Paris VII</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A generalization of exceptions and control in ML-like languages</title>
		<author>
			<persName><forename type="first">Carl</forename><forename type="middle">A</forename><surname>Gunter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Didier</forename><surname>Rémy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jon</forename><forename type="middle">G</forename><surname>Riecke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Conference on Functional Programming and Computer Architecture</title>
		<imprint>
			<biblScope unit="page" from="12" to="23" />
			<date type="published" when="1995-06">1995. June 1995</date>
			<pubPlace>La Jolla, CA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Polymorphic type assignment and CPS conversion</title>
		<author>
			<persName><forename type="first">Robert</forename><surname>Harper</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mark</forename><surname>Lillibridge</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGPLAN Workshop on Continuations CW92</title>
		<editor>
			<persName><forename type="first">Olivier</forename><surname>Danvy</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">Carolyn</forename><surname>Talcott</surname></persName>
		</editor>
		<meeting>the ACM SIGPLAN Workshop on Continuations CW92<address><addrLine>Stanford, CA 94305</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1992-06">June 1992</date>
			<biblScope unit="page" from="13" to="22" />
		</imprint>
		<respStmt>
			<orgName>Department of Computer Science, Stanford University</orgName>
		</respStmt>
	</monogr>
	<note>Published as technical report STAN-CS-92-1426</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Explicit polymorphism and CPS conversion</title>
		<author>
			<persName><forename type="first">Robert</forename><surname>Harper</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mark</forename><surname>Lillibridge</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Twentieth ACM Symposium on Principles of Programming Languages</title>
		<meeting><address><addrLine>Charleston, SC</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1993-01">January 1993</date>
			<biblScope unit="page" from="206" to="219" />
		</imprint>
	</monogr>
	<note>Expanded journal version to appear in Journal of Functional Programming</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Polymorphic type assignment and CPS conversion</title>
		<author>
			<persName><forename type="first">Robert</forename><surname>Harper</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mark</forename><surname>Lillibridge</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LISP and Symbolic Computation</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="361" to="380" />
			<date type="published" when="1993-11">November 1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Compiling polymorphism using intensional type analysis</title>
		<author>
			<persName><forename type="first">Robert</forename><surname>Harper</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Greg</forename><surname>Morrisett</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Twenty-Second ACM Symposium on Principles of Programming Languages</title>
		<meeting><address><addrLine>San Francisco, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1995-01">January 1995</date>
			<biblScope unit="page" from="130" to="141" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">The Definition of Standard ML</title>
		<author>
			<persName><forename type="first">Robin</forename><surname>Milner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mads</forename><surname>Tofte</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Robert</forename><surname>Harper</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990">1990</date>
			<publisher>MIT Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">The essence of ML</title>
		<author>
			<persName><forename type="first">John</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Robert</forename><surname>Harper</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Fifteenth ACM Symposium on Principles of Programming Languages</title>
		<meeting><address><addrLine>San Diego, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1988-01">January 1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">LEAP: A language with eval and polymorphism</title>
		<author>
			<persName><forename type="first">Frank</forename><surname>Pfenning</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Peter</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">TAPSOFT &apos;89, Proceedings of the International Joint Conference on Theory and Practice in Software Development</title>
		<meeting><address><addrLine>Barcelona, Spain</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag LNCS</publisher>
			<date type="published" when="1989-03">March 1989</date>
			<biblScope unit="volume">352</biblScope>
			<biblScope unit="page" from="345" to="359" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Programming in higher-order typed lambda-calculi</title>
		<author>
			<persName><forename type="first">Benjamin</forename><surname>Pierce</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Scott</forename><surname>Dietzen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Spiro</forename><surname>Michaylov</surname></persName>
		</author>
		<idno>CMU-CS-89-111</idno>
		<imprint>
			<date type="published" when="1989-03">March 1989</date>
			<pubPlace>Pittsburgh, Pennsylvania</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Carnegie Mellon University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Type inference for polymorphic references</title>
		<author>
			<persName><forename type="first">Mads</forename><surname>Tofte</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information and Computation</title>
		<imprint>
			<biblScope unit="volume">89</biblScope>
			<biblScope unit="page" from="1" to="34" />
			<date type="published" when="1990-11">November 1990</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
