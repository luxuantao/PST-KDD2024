<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Broadcast Delivery</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">John</forename><forename type="middle">W</forename><surname>Wong Lnvited Paper</surname></persName>
						</author>
						<title level="a" type="main">Broadcast Delivery</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">3C6553E7DBE35B8E3CD20E162FCBF09A</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T05:26+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper is concerned with the architecture and performance of systems that use a broadcast channel to deliver information to a community of users. lnformation is organized into units called pages, and at any instant of time, two or more users may request the same page. Broadcast delivery is attractive for such an environment because a single transmission of a page will satisfy all pending requests for that page. Three alternative architectures for broadcast information delivery systems are considered. They are one-way broadcast, two-way interaction, and hybrid one-way broadcasthwo-way interaction. An important design issue is the scheduling of page transmissions such that the user response time is minimized. For each architecture, existing scheduling algorithms are described, and their mean response time performance evaluated. Properties of scheduling algorithms that yield optimal mean response time are discussed. A comparative discussion of the performance differences of the three architectures is also provided.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I . INTRODUCTION</head><p>Broadcast channels have been used t o deliver information t o a community of users for several decades. This i s exemplified by radio and television. Such systems use a policy called scheduled broadcast where users are informed as t o when a particular piece of information will be transmitted. A user must wait until the scheduled time before the required information can be received. This is a simple and effective approach t o serve a large population of users. Radio and television are examples of systems that use the concept of broadcast delivery for information dissemination.</p><p>Recent advances in computer and communication technologies have led t o the development of information delivery systems that provide users with timely access to information. The basic configuration of such systems i s shown i n Fig. <ref type="figure" target="#fig_0">1</ref>. lnformation i s organized into units called pages, and stored on disk. Users submit requests and receive the requested pages through their terminals. The service computer retrieves the requested pages and transmits them t o the usersviaacommunication network. Adatabase i s main-Manuscript received <ref type="bibr">April 15,1988;</ref><ref type="bibr">revised October 17,1988.</ref>   tained, and information pages in the database are updated regularly by service providers. These updates are issued locally or remotely at service provider terminals.</p><p>A common example of an information delivery system is teletext[l]-[4]which uses aone-way broadcast channel. The service computer transmits the available pages t o all users in a continuous manner, and there i s n o preannounced schedule as t o when a particular page will be transmitted. When a user request i s submitted, the terminal examines the incoming stream of data until the required page is detected. This page i s then captured and displayed. Note that teletext uses the concept of broadcast delivery. Due t o the one-way broadcast, a request does not propagate beyond the user terminal; this feature is sometimes described as pseudointeractive. A key design issue in teletext is the scheduling of page transmissions such that the user response time is minimized. Response time is defined to be the elapsed time from when a request is submitted t o when the requested page is received.</p><p>Another common example of an information delivery system is videotex [I], [2], [5]- <ref type="bibr">[8]</ref> which uses a two-way communication network. All user requests are submitted to the service computer where they are processed. Processing a user request involves the retrieval and transmission of the required page. Most videotex systems currently in operation are based o n individual response and not o n broadcast delivery <ref type="bibr">[91-[111, i.e</ref>., a page is transmitted t o the requesting user only. With individual response, the operation of videotex i s identical to that of an interactive computer system. It i s rather intuitive that the response time performance can be improved if broadcast delivery is used. In this case, all pending requests for the same page will be serviced by a single transmission, resulting in a reduction of response 0018-921918811200-1566$01 .OO 8 1988 I EEE time when compared to individual response. It i s therefore obvious that the performance benefits resulting from broadcast delivery should not be ignored. An example of an information system that uses broadcast delivery can be found in <ref type="bibr">[12]</ref>.</p><p>The key application of information deliverysystems is the provision of access t o information such as news, weather, financial information, and advertisement. Other useful applications include document retrieval and software distribution [13]. Broadcast delivery has also been suggested as a means t o deliver frequently accessed information t o processors in a distributed database system <ref type="bibr">[14]</ref>.</p><p>This paper i s concerned with the architecture and performance of broadcast information delivery systems. Issues such as hardware, software, database organization, and transmission technology will not be considered. It is felt that the merit and potential of broadcast delivery are best addressed by decoupling the architectural concepts from the technologies used i n system implementation. For that reason, the term page will be used i n a rather general context, namely, it may contain any type of information t o be delivered t o the users.</p><p>Several factors of system design can affect the response time. Among them are the processing speed of the service computer, the capacity of the broadcast channel, and the disk characteristics. However, these factors are of a static nature since they depend, t o a large extent, on the technologies used in system implementation. A more dynamic factor is the scheduling of page transmissions, i.e., the order i n which the pages are broadcast t o all users. Emphasis is therefore placed on the development of good scheduling algorithms and the evaluation of their response time performance.</p><p>Three alternative architectures for broadcast information delivery systems are considered i n this paper. They are i) one-way broadcast, ii) two-way interaction, and iii) hybrid one-way broadcastltwo-way interaction.</p><p>Architecture i) is exemplified by teletext. Due t o the oneway broadcast, system state information such as the number of pending requests for the various pages i s not available t o the service computer where the scheduling decisions are made. One can only rely o n information such as howfrequentlyagiven page is requested bythe users. Oneway broadcast has the property that the response time i s not affected by the load (or the rate at which requests are made). It can therefore support a potentially infinite user population. It also has the property that the response time tends t o increase with the number of pages N. This i s due t o the fact that when N i s large, more pages will likely be transmitted before the required page.</p><p>Architecture ii) i s exemplified by videotexwith broadcast delivery. Since all requests are submitted t o the service computer, scheduling decisions can be based o n system state information such as the order i n which the requests are submitted or the number of pending requests for the various pages. This architecture requires the availability of a request channel (from user terminal t o service computer), and has the undesirable property that the request channel may become overloaded when the volume of requests i s heavy.</p><p>Architecture iii) is hybrid in the sense that some pages are serviced by one-way broadcast while the others are serviced by two-way interaction. Proposals for hybrid architectures can be found in <ref type="bibr">[51, [91, [151.</ref> Scheduling algorithms for page transmission have been developed for the three architectures mentioned above. In this paper, the mean response time performance of these algorithms is evaluated. The techniques used to obtain performance results include probability theory, queueing theory, Markovdecision theory, and discrete event simulation. This paper is organized as follows. Section I I is devoted t o one-way broadcast. A performance model i s developed, and the mean response timeof a simple probabilistic scheduling algorithm is derived. In that algorithm, page i i s selected with probability p, at each broadcast instance. A general treatment of the page transmission problem is considered next. Using a Markov decision process formulation, it i s shown that transmitting pages according t o a broadcast cycle (i.e., transmitting a fixed sequence of pages repeatedly) results in optimal mean response time. In general, a broadcast cycle may contain several appearances of each page, and the particular cycle that yields optimal mean response time cannot be determined easily. A procedure for designing a good broadcast cycle, i.e., a cycle that gives near-optimal, if not optimal mean response time, is presented. Finally, a detailed model o f user behavior is considered, and the performance advantage of having local memory i n the user terminal i s discussed.</p><p>Section Ill deals with the two-way interaction architecture. The first scheduling algorithm considered i s firstcome, first-served (FCFS) with the modification that a new request joins the queue at the same position as an earlier request for the same page if such a request is in the system. Analytic results are derived for the mean response time. A Markov decision process formulation of the page scheduling problem i s presented next. This formulation i s based o n the number of pending requests for the various pages. I n general, it i s not possible t o characterize the scheduling algorithm that yields optimal mean response time. Using results for special cases, three heuristic scheduling algorithms have been proposed. Simulation results comparing the performance of these algorithms are discussed. The last algorithm considered in Section Ill is broadcast polling. In that algorithm, the servicecomputer polls all user terminals t o determine whether a given page is required, and that page is transmitted if a positive response i s received. This is a restricted form of two-way interaction because a user request is not submitted until a poll indicating the required page is received.</p><p>Section IV is concerned with the hybrid one-way broadcastltwo-way interaction architecture. This architecture i s designed t o avoid the performance penalties due to a large number of pages i n one-way broadcast and request channel overload in two-way interaction. Pages are classified as either frequently or infrequently requested. Requests for frequently requested pages are serviced by one-way broadcast while those for infrequently requested pages are submitted t o the service computer for processing. The service computer repeatedly transmits the next K frequently requested pages (according t o a broadcast cycle) followed by a transmission of an infrequently requested page (if at least one such page i s requested). Analytic results for the mean response time are derived, and the performance characteristics of the hybrid architecture are discussed.</p><p>In Section V, the performance of the three alternative architectures is compared. This is accomplished by characterizing the conditions under which a particular architecture is superior. Finally, Section VI contains some concluding remarks and a discussion of future research directions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. ONE-WAY BROADCAS~</head><p>In this section, the modeling and performanceevaluation of scheduling algorithms for the one-way broadcast architecture are discussed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Performance Model</head><p>Most performance results are based on the model in [I], <ref type="bibr">[16]</ref>. In that model, timeon the broadcast channel is divided into equal size slots. The slot length represents the time to transmit a page of information. The arrival process of user requests is assumed to be Poisson. This assumption is accurate for systems that serve a large population of users. For each request, the probability that page i is requested is assumed to be q,, i = 1,2, . . ., N, where N is the total number of pages. This assumption reflects the page usage statistics by all users (i.e., the frequency that a given page is requested), but not the page request pattern by a particular user (e.g., the sequence of pages requested). A model which takes the latter into consideration will be discussed in Section II-E.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Probabilistic Page Selection</head><p>A simple algorithm for scheduling page transmissions is probabilistic page selection <ref type="bibr">[I]</ref>. That algorithm operates as follows. At each broadcast instance, page i is selected with probabilityp,, i = 1,2, . , N. Let SI be the mean response time of a request for page i. In deriving SI, it is assumed that a request arriving during a page i transmission must wait for the next full transmission of page i. SI is then given by</p><formula xml:id="formula_0">1 1 s = -+ - ' PI 2'</formula><p>Equation ( <ref type="formula">1</ref>) is based on that fact that a request arriving at random (a consequence of the Poisson arrival process assumption) will wait on average half a slot for the current transmission to complete, plus l/pl, the mean number of slots until the end of the next page i transmission.</p><p>Let S be the mean response time over all requests, we have S is minimized when p,/p, = 6/4 for all i, j . Since Cy=l p, = 1, the best setting for p I is given by (3) for i = 1, 2, * . ., N, and the resulting minimum mean response time is min s = (jl 4 ) + 2. A drawback of probabilistic page selection is that the response time may be arbitrarily large. Also, as we shall see later, probabilistic page selection is inferior to other algorithms for the one-way broadcast architecture.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Optimal Scheduling Policy</head><p>An important theorem on the scheduling of page transmissions is proved in <ref type="bibr">[16]</ref>. It is based on a Markov decision process formulation and states that acyclic policy is optimal as far as minimizing the mean response time is concerned. An outline of the proof is presented in this section.</p><p>In the Markov decision process formulation, the model described in Section Il-A is used. Time slots on the broadcast channel are assumed to be numbered from slot 1, with slot k starting at time k -1 and ending at time k. The following variables are also defined: For convenience, it is assumed that initially, Zl(l) = 1 for all i. This assumption does not affect the result because the optimal scheduling policy is derived for a system that runs for an infinitely long time.</p><p>The behavior of the model can be described by the following equations:  To decide which page to transmit in slot k, it is useful to have information given by the n,(k)'s. Due to the one-way broadcast, this information is not available to the service computer where the scheduling decisions are made. However, for a given sequence of page transmissions, the variables Z,(k) (i = 1, 2, . . . , N; k = 1, 2, * -) are completely characterized (see ( <ref type="formula">6</ref>)), and the service computer can determine the probability distribution of n,(k) for all i. Specifically, since the arrival process is assumed to be Poisson.</p><p>The vector Z(k) = (Zl(k), Z,(k), . . . , Z,(k)) is used as the state in the Markov decision process formulation. For a given sequence of page transmissions, the expected cost of running the system until the end of slot t is defined to be</p><formula xml:id="formula_1">t N v, = c c E[n;(k)] k = l i = l</formula><p>where €[.I is the expected value taken over all request arrival patterns. Using (7), V, is given by</p><formula xml:id="formula_2">I N VI = C C q,EJ,(k),<label>(9)</label></formula><formula xml:id="formula_3">k = l 1 = 1</formula><p>and the long run average cost per unit time i s</p><formula xml:id="formula_4">1 V = lim -V, . t -m t<label>(10)</label></formula><p>I n <ref type="bibr">[16]</ref>, it is shown that if the above limit exists, Vis related t o the mean response time S as follows:</p><p>V</p><p>x</p><formula xml:id="formula_5">S = -+ 0.5. (<label>11</label></formula><formula xml:id="formula_6">)</formula><p>Minimizing V will therefore minimize the mean response time also. Two properties of the cost function V are proved in <ref type="bibr">[16]</ref>. First, it i s suboptimal t o stop transmittinga pagealtogether, regardless of how low the page request probability is. Secondly, for a given set of page request probabilities, an upper bound on the inter-appearance gap (i.e., the time between successive transmissions of the same page) can be defined. For any page transmission sequence where the interappearance gaps of some pages exceed the upper bound, the cost can always be reduced by using a revised sequence with no gaps exceeding the bound.</p><p>The second property implies that a policy can be improved by revising the sequence of page transmissions such that Z,(k) is bounded from above for all i and k. Under this condition, the number of combinations of Z,(k)'s is finite. This corresponds to a finite-state Markov decision process, and it i s known that an optimal nonrandomized stationary policy exists <ref type="bibr">[17]</ref>. For such a policy, the scheduling decision for slot k is uniquelydetermined byz(k) and i s independent of k. This implies that if the states at times k and I are equal, then those at times k + rn and I + rn are alsoequal forall rn. Sincethe numberof states isfinite, some state must repeat. Thus the optimal policy i s cyclic and the cycle length i s the smallest integer L such that z(k) = Z(k + L) for all k.</p><p>To complete the informal argument, it is easy t o see that the mean response time exists for a cyclic policy. This i s supported by the fact that the worst-case response time is given by the cycle length L. One thus concludes that among all policies for which the mean response timeexists,acyclic policy i s optimal. A sufficient condition for the existence of the mean response time is given i n <ref type="bibr">[16]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Design of Broadcast Cycle</head><p>A cyclic policy is characterized by transmitting pages according t o a broadcast cycle. A simple example of a broadcast cycle is (1, 2, . . . , N). I n general, a broadcast cycle may contain several appearances of each page, and the particular cycle that yields optimal mean response time cannot be determined easily. This i s due t o the time complexity i n evaluating a large number of possible cycles. In <ref type="bibr">[18]</ref>, analytic resultsfor the mean responsetimeof any given cycle are derived. These results are then used to obtain a lower bound mean response time. A procedure t o design agood broadcast cycle (i.e., a cycle that yields near-optimal, if not optimal, mean response time) is also presented. These results are discussed below.</p><formula xml:id="formula_7">I L - I Fig. 2. A broadcast cycle.</formula><p>Consider a cycle with finite length L and each page appearing at least once. The following useful parameters can be identified (see Fig. <ref type="figure">2</ref>): i) Appearance frequencies k,, i = 1,2, . . . , N; k, is the number of appearances of page i i n the cycle.</p><p>ii) Inter-appearance gaps T:, r = 1,2, * . , k, and i = 1, 2, * * , N; T i is the number of slots between the beginning of the rth and ( r + 1)st appearance of page i i n the cycle when r &lt; k,, and between the beginning of the last appearance in the current cycle and the beginning of the first appearance i n the next cycle when r = k,. Note that E : = , T i = L.</p><p>Consider a page i request arriving at random; the probability that this request will fall into the gap represented by T: is TYL. Under this condition, the mean time until the beginning of the next full transmission of page i is TY2. The mean response time of a request for page i is therefore given by ( <ref type="formula">12</ref>) and the mean response time over all requests i s</p><formula xml:id="formula_8">N N k, S = q,S, = -2L ,=1 c q, r = l c (T:)* + 1.<label>(13)</label></formula><p>, = 1</p><p>Equation ( <ref type="formula" target="#formula_8">13</ref>) can be used to compute the mean response time for any given cycle. It can also be used t o develop a lower bound for the mean response time. Suppose the k,'s are given, the right-hand side of ( <ref type="formula" target="#formula_8">13</ref>) is minimized when all the Ti's are equal, i.e., <ref type="bibr">(14)</ref> We can thus write the following relationship:</p><formula xml:id="formula_9">(1 5) L N S 1 -c % + I . 2 , = I k,</formula><p>The right-hand side of (15) i s minimized when the k,'s are chosen such that (1 6 ) Substituting ( <ref type="formula">16</ref>) into (15) and noting that</p><formula xml:id="formula_10">T i = L, we get / N \ 2</formula><p>The lower bound in (17 i) The cycle length L must not exceed L*(L* is related t o the amount of memory used t o store the cycle); ii) the inter-appearance gap of any page must not exceed T*; this implies that the worst-case response time is T* + 1; and iii) the mean response time S i s minimized.</p><formula xml:id="formula_11">)</formula><p>The basic approach i s t o design a good cycle for each cycle length L in the range N 5 L 5 L*, and select from among the cycles that meet criterion ii), the one with the lowest mean response time.</p><p>The algorithm t o design a good cycle for a given L i s given below <ref type="bibr">[18]</ref>. Without lossof generaIity,thepagesareordered such that q, 2 q2 2 . . . 2 qN, and the cycle positions are numbered 0 , 1 , . . . , L -1.</p><p>Select integer k,'s such that Cy=l k, = L and k,lk, i s as close t o &amp;/G as possible for all i, j (see (16)).</p><p>For i = 1 t o N, select integer T:'s such that T i = L and that Ti i s as close t o Llk, as possible for all r (see (14)).</p><p>F o r i = 1 to N -1 , assign cycle positions t o page i w i t h the objective of matching the inter-appearance gaps obtained in step 2. Note that this is not always possible when i &gt; 1 because one or more cycle positions needed for page i may have been assigned t o pages with lower indices already (see [I81 for more details). Assign page N t o the remaining free positions in the cycle.</p><p>The above procedure attempts t o reduce the major contribution t o the mean response time by assigning the popular pages first. The less popular pages receive less favorable treatment, and finally, the least popular page i s assigned the remaining cycle positions, which may not be a good assignment for that page.</p><p>The cycle design procedure has been shown t o yield cycles with near-optimal mean response time. As a numerical example, consider the following selection of parameter values: N = 100, L* = 1000, T* = 300, and q, given by Zipf's law <ref type="bibr">[19]</ref>, i.e., q, = c l i where c is a normalization constant given b y c = (C~=,l/j)-'. <ref type="bibr">Zipf</ref> For completeness, the same parameter values are used tocompare the performance of probabilistic page selection and cyclic page transmission. For probabilistic page selection, the minimum mean response time, as computed from (4), i s 67.1. This i s substantially higher than that for page transmissions using a good broadcast cycle.</p><p>Finally, it should be mentioned that one-way broadcast has the property that a given transmission may not satisfy any outstanding requests. Such a transmission i s referred t o as superfluous. From the performance point of view, superfluous transmissions are undesirable because they represent wastage of resources. An analytic expression for the fraction of transmissions that are superfluous i s derived i n [20]. I n general, this fraction is a decreasing function of the arrival rate X because as X increases, the chance of a transmission satisfying at least one request i s also increased.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E. An Individual User's Perspective of Response Time</head><p>The analytic results presented so far are based on the assumption that page i is requested with probability 4,.</p><p>While this assumption is accurate for the derivation of mean response time over all requests, it does not provide sufficient detail t o study the response time from the perspective of a single user. To study this perspective, a more detailed model of user behavior is developed in [21]. Two cases are considered:</p><formula xml:id="formula_12">i) i i)</formula><p>Given request sequence case: The user has a prespecified sequence of requests, e.g., i7, i2, . . ., in where i, is a page index and n is the number of requests i n the sequence. Average request sequence case: The page request pattern i s probabilistic and governed by the following parameters: f, = Pr [first request i s for page i] and p,, = [(m + 11th request i s for pagejlmth request i s for page i] for m 2 1 and i, j = 1, 2, . . . , N.</p><p>Page transmissions are based on a broadcast cycle. For both cases, the arrival of the first request i s assumed t o occur at random. When a request for page i i s satisfied, a user will spend athinktimeat his terminal before submitting his next request. The think time i s assumed t o be exponentially distributed with mean dependent on the page index i. The exponential think time assumption i s commonly used in performance analysis of interactive computer systems [22].</p><p>In [21], analytic expressions for the mean response time are derived for the two page request patterns mentioned above. These expressions are rather complicated and will not be presented here. Through numerical examples, it i s shown that the mean response time seen by a single user can be influenced by a variety of parameters such as the user think time, the user request pattern, and the broadcast cycle used [21].</p><p>A one-way broadcast system where the user terminal has local memory is also considered i n [21]. Performance improvement i s possible if this local memory is managed in such a way that it contains the requested page most of the time. A strategy for memory management, called the linked pages scheme, i s proposed in <ref type="bibr">[21]</ref>. That scheme requires the availability of space i n each page to store control information. The control information in page i is a list of linked pages; these are the most likely referenced pages after page i.</p><p>Let D be the size of local storage i n unit of pages. After a request for a page (say page i ) is satisfied, the user terminal enters a phase to prefetch the D most likely referenced pages associated with page i. This phase is terminated when the D pages are fetched or when the user submits a new request. Analytic results for the mean response time of the linked pages scheme are derived i n <ref type="bibr">[21]</ref>. A numerical example is also presented to show the performance improvement when the linked pages scheme i s used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I I I. TWO-WAY INTERACTION</head><p>In two-way interaction, user requests are submitted t o the service computer where they are processed. Processing a request involves the retrieval of the required pageand the transmission of that page t o the user. As mentioned previously, current implementations of two-way systems are mostly based o n individual response, but the performance advantage of broadcast delivery should not be ignored. For the same reason, it is expected that the use of broadcast delivery i n two-way systems will gain popularity in the future.</p><p>A consequence of the two-way architecture i s that detailed state information such as the order in which the requests are submitted or the number of outstanding requests for the various pages i s available t o the service computer. This is in contrast with one-way broadcast where such information is not available. In this section, the performanceof a number of scheduling algorithms for the twoway architecture with broadcast delivery is discussed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. First-Come First-Served Scheduling</head><p>The first algorithm considered i s first-come first-served (FCFS) with the modification that a new request joins the queueat the same position as an earlier request for the same page if such a request is i n the system. Analytic results for the mean response time are derived in <ref type="bibr">[23]</ref>. The model used is a single-server infinite-capacityqueuewith different types of requests, each corresponding t o a particular information page (see Fig. <ref type="figure">4</ref>). Once again, the arrival process of user requests i s assumed t o be Poisson with rate A, and the probability that a request is for page i i s q,, i = 1, 2, . . . , N.</p><p>The processing time of a request (i.e., the time t o retrieve the requested page plus the time t o transmit that page) is assumed t o be exponentially distributed. The service rate p is assumed to be the same for all request types. For mathematical tractability, the following assumptions are also made:</p><formula xml:id="formula_13">i) i i)</formula><p>The delay at the request channel (from user terminal t o service computer) i s small compared to the processing time and can be ignored. At the end of processing a given page, all pending requests for that page are satisfied, regardless of whether these requests arrived before the start of processing or not. This is different from the one-way broadcast model where it was assumed that a request can only be satisfied by the first full transmission of the required page.</p><p>Let n, be the number of page i requests i n the system. The FCFS algorithm i s modeled by rejecting a new request for page i if n, = 1 (see Fig. <ref type="figure">4</ref>). This will not affect the behavior of the model as far as the order in which requests are processed is concerned. Although a request may be rejected, it is responded t o when the request for the same page i n the system is processed.</p><p>The resulting model is a single server queue with different classes of customers (class i corresponds t o requests for page i) and population size constraints <ref type="bibr">[24]</ref>. Let = (n,, n2, . . . , nN) be a state of the model. The population size constraint i s characterized by R, the set of feasible states R = ( r ~( n , = 0 or 1 for all i).</p><p>Let P(n) be the probability that the system is in state equilibrium. Using the results in <ref type="bibr">[24]</ref>, w e have at N P(rJ) = P(O)n!p" rI q,"1</p><formula xml:id="formula_14">(18)</formula><p>where p = XIp is the traffic intensity, n = nl, and P(0) is the probability that the system i s idle.</p><p>Let P(n) be the equilibrium probability that there are n requests in the system, regardless of type. This i s a less detailed state description and can be obtained by summing over all state probabilities in (18) such that E,"=, n, = n. P(n) i s given by (1 9)</p><formula xml:id="formula_15">/ = I P(n) = n!p"P(O)g(N, n ) where N R(n) is the set of feasible states such that E,"=, nl = n. Since f ( n ) = 1, w e have P(0) = (E n = O n!p"g(N, n))-'.</formula><p>(21 1 To derive the mean response time, the following events A,(n) = n requests in system and none of type i, B,(n, k ) = n requests in system and k t h request in are defined for i = 1, 2, . . ., N:  </p><formula xml:id="formula_16">0 i n &lt; N,</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>24) n e R ( n ) s t n , = O 1'1</head><p>If at the moment of a type i arrival, event A,(n) is satisfied, then the request i s accepted and its mean response time will be (n + l)/p. O n the other hand, if event B,(n, k ) i s satisfied, the request i s rejected, and its mean response time i s given by k/p. The mean response time of a request for page i can therefore be obtained by  <ref type="formula">23</ref>) into (25) and after simplification, we get individual response. Furthermore, the mean response time under individual response becomes unbounded when the traffic intensityapproaches1.0. On theother hand,asystem with broadcast delivery can handle a traffic intensity larger than 1.0. The above results indicate that for a given system configuration, the response time can be improved if broadcast delivery is used, and such an improvement can be achieved without increasing the processing capacity of the system.</p><p>It i s important to note that the derivation of (26) is based on the assumption that the delay at the request channel is negligible. Therefore the conclusions drawn from the results in Fig. <ref type="figure">5</ref> are accurate only when the request channel i s not overloaded (or when the request arrival rate is small compared t o the service rate at the request channel).</p><formula xml:id="formula_17">p n = O " \" (<label>26</label></formula><formula xml:id="formula_18">)</formula><p>where P( <ref type="formula">0</ref>) is given by (21), and g-'(N, N) = g-'(N, -1) = 0.</p><p>The mean response time over all requests i s given by S = Note that the result for SI i s expressed in terms of g(N, n ) and g-'(N, n). Both terms involve a sum of products over a set of feasible states. Since the number of states grows exponentially with N, it is important that an efficient algorithm to compute theg(.) and g -' ( . ) functions be available.</p><p>Such a procedure can be found in [23]. It i s based o n the following recursive relationships:</p><formula xml:id="formula_19">e= 1 4,SI. i) g(N, n ) = g(N -1, n ) + qNg(N -1, n -1) ii) g -N ( N , n ) = g(N -I, n).</formula><p>The derivation of these relationships i s an extension of Buzen's work on computational algorithms for queueing network models <ref type="bibr">[25]</ref>. Although relationship ii) is for page N only, numerical results for page i # N can be obtained by re-ordering the page indices such that pagei is the last page. The operation count t o compute SI for all i is OW3).</p><p>As a numerical example, consider a model with the following parametervalues: N = 1 0 0 , ~ = 1.0, and page request probabilities given by Zipf's law <ref type="bibr">[19]</ref>. The mean response time under broadcast delivery i s shown i n described in Section Ill-A except that individual users are explicitly represented. More specifically, there are K independent users interacting with a service computer. The user think times are assumed t o be independent and exponentially distributed with mean I/?. With the explicit modeling of individual users, the number of states i n the decision process i s finite, and existing solution techniques can be applied directly.</p><p>The state of the decision process is defined t o be [(n,, n2,   . . . , nN),/] where n, i s the number of pending requests for page i, 0 5 n, 5 K, and Cy=l n, 5 K. The parameter j represents the state of the service computer. When j = 0, the computer i s idle, and when j &gt; 0, the service computer i s processing the requests for page j . State transitions are caused by request arrivals and service completions. Consider a system i n state [(n,, n2, . . . , nN), /]. When a page i request arrives, the system will enter state [(n,, . . . , n, + 1, . . . , nN), /I. The transition rate i s given by q, (K -Cy=, n,)y. Transition out of a state due t o service completion occurs at rate p and is only possible when j &gt; 0. The next state entered i s [(n,, . . . , n, = 0, . . . , nN), j ' ] , since the broadcast of page j satisfies all pending requests for that page. Implicit i n the transition is that the system has made a decision t o process the requests for page j ' next. The set of decisions for all feasible states defines a schedulingpolicy. The objective i s t o determine the scheduling policy that yields optimal mean response time.</p><p>I n the Markov decision process formulation, cost is incurred at a rate of E;",, n, per unit time. For a given scheduling policy, let C(x) be the instantaneous rate atwhich cost is being incurred at time x. C(x) is given by where n,(x) is the number of pending requests for page i at time x. If V, is the total cost incurred u p t o time t, we have</p><formula xml:id="formula_20">VI = 1' C(x) dx, (<label>28</label></formula><formula xml:id="formula_21">)</formula><p>and the average cost per unit time is given by ( <ref type="formula">29</ref>)</p><formula xml:id="formula_22">V = lim -5 C(x) dx.</formula><p>Similar to (IO), V i s directly related t o the mean response time if it exists. Therefore minimizing Vwill also minimize the mean response time. <ref type="bibr">Howard [28]</ref> has developed a policy-iteration algorithm which can be used t o determine the optimal scheduling policy. That algorithm i s based on an iterative procedure which startswith an arbitrary policy and selectivelychanges decisions until a policy that minimizes V i s obtained. An immediate difficulty i n applying Howard's algorithm is that the number of states grows rapidly with N and K, and consequently, it i s not possible t o obtain optimal scheduling policies for realistic settings of the model parameters.</p><p>The approach used in [27] i s t o apply Howard's algorithm t o examples with small N and K, and try t o identify properties of the optimal scheduling policy. These properties are used todevelopthe following heuristic schedulingalgorithms for the two-way architecture: i) Most Request First (MRF): Select the page with the largest number of pending requests; break ties in an arbitrary manner. ii) MRF-Low (MRFL): Select the page with the largest number of pending requests; break ties in favor of the page with the lowest request probability. Longest Wait First (LWF): Select the page for which the total waiting time of all pending requests is largest.</p><p>It i s conjectured that M R F i s optimal when the page request probabilities are equal (i.e., q, = 1/N for all i). The other two algorithms are motivated by the observation that the optimal scheduling policy tends t o give preferential treatment t o pages with low request probabilities when the page request probabilities are not equal <ref type="bibr">[27]</ref>.</p><p>Numerical results are presented in <ref type="bibr">[27]</ref> t o compare the performance of the above scheduling algorithms and FCFS. The key observations are as follows. When the load is light, the mean response time i s insensitive t o the scheduling algorithm used. This i s t o be expected because few scheduling decisions are required. As the load increases, M R F yields the best response time performance for the case of are for a system with 100 pages and p = 1 (the curve for FCFS i s identical to that i n Fig. <ref type="figure">5</ref>). We observe that LWF has the best performance, and MRFL is second best. It should be noted, however, that from the implementation point of view, LWF incurs more schedulingoverhead than the other algorithms. If thisoverhead isan important issue, then MRFL i s a good alternative.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Broadcast Polling</head><p>An interesting algorithm t o schedule page transmissions i n a two-way system is reported i n [20]. That algorithm is called broadcast polling and is different from the scheduling algorithms mentioned so far i n the way user requests are submitted t o the service computer.</p><p>Broadcast polling can best be explained by considering its implementation on a unidirectional ring network <ref type="bibr">[20]</ref>. The basic configuration is shown in Fig. <ref type="figure" target="#fig_12">8</ref>. The service computer polls the users by transmitting a short polling message around the ring. This message contains a page identifier(say pagei)and an indicator bitwhich is initiallycleared t o zero. A user terminal, upon receiving the polling mes- sage, sets the indicator bit t o one if it has a request for page i. When the polling message returns t o the service computer, page i is transmitted if the indicator bit has been set. The order in which the various pages are polled is defined by a cycle.</p><p>Broadcast polling has been suggested as an alternative to one-way broadcast [20] because superfluous transmissions are avoided. Simulation results showing the performance characteristics of broadcast polling are presented i n <ref type="bibr">[20]</ref>. Bounds are also derived for Sbp, the mean response time under broadcast polling. The derivations are summarized below.</p><p>Suppose the time t o transmit an information page i s one unit, and that t o transmit a polling message is H . At heavy load, almost all polling messages return with a positive indication, and the broadcast polling scheme approaches a oneway architecture with a page transmission time of 1 + H.</p><p>If C is the cycle used to poll the various pages, then</p><formula xml:id="formula_23">SbP 5 (1 + H ) S ( C )<label>(30)</label></formula><p>where S(C) is the mean response time of a one-way system using broadcast cycle C, and is given by ( <ref type="formula" target="#formula_8">13</ref>). Equation ( <ref type="formula" target="#formula_23">30</ref>) indicates that at heavy load, the broadcast polling scheme is inferior t o one-way broadcast.</p><p>Toderivealower bound,we notethat at light load,almost all polling messages return with a negative indication, and an arriving request experiences what looks like a one-way system with page transmission time equal to H , until the requested page is transmitted. We thus have the following relationship:</p><formula xml:id="formula_24">Sbp 2 HS(C) + 1 .<label>(31)</label></formula><p>Since H i s typically much smaller than 1 (the page transmission time), broadcast polling is superior t o one-way broadcast at light load.</p><p>Finally, it should be mentioned that the problem of designing agood cycle for broadcast polling i s not straightforward because the best cycle i s dependent o n the request arrival rate <ref type="bibr">[20]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. HYBRID ONE-WAY BROADCAST/TWO-WAY INTERACTION</head><p>It is expected that in the future, information delivery systems will have many pages and will serve large user populations. One-way broadcast is suitable for large user populations but the response time tends t o increase with the number of pages. Two-way interaction, on the other hand, may suffer from request channel overload when the request arrival rate increases. A hybrid architecture which is appropriate for large-scale information delivery systems is investigated in <ref type="bibr">[29]</ref>. I n that architecture, pages are classified as either frequently requested or infrequently requested. Requests for frequently requested pages (f-requests) are serviced using a broadcast cycle (one-way broadcast), while those for infrequently requested pages (i-requests) are submitted t o the service computer for processing (two-way interaction).</p><p>By servicing i-requests on demand, the hybrid architecture reduces the number of pages that are serviced according t o a broadcast cycle. This leads t o good response time performance for the f-requests. If the pages are classified such thatthevolumeof i-requests i s low, thedemand placed on the request channel and service computer will not be significant. This leads t o good response time performance for the i-requests also.</p><p>A model is developed requests i s assumed t o be Poisson with rate X and the probability that a request is for page i is assumed t o be q,, i = 1,2, . . . , N. The information pages are ordered such that 91 2 q2 2 . . . 2 qN. The first F pages (0 5 F I N) are classified as frequently requested, and the remaining N -F pages as infrequently requested. It follows that the arrival rates of f-requests and i-requests are hF = X 9, and A, = h Er=,+, 9, respectively. The page transmission time is assumed to be constant and equal t o one time unit, and the procedure described in Section 11-D i s used to design a broadcast cycle for the F frequently requested pages.</p><p>In addition, the following t w o assumptions are made for mathematical tractability:</p><p>i) The delay experience by an i-request at the request channel is small compared t o the disk service time and page transmission time, and can be ignored.This i s accurate when the volume of i-request i s low. ii) The i-requests are serviced using individual response even though broadcast delivery i s employed. The error in the mean response time is not significant if the volume of i-requests is l o w because under that condition, the chance of having t w o or more outstanding i-requests for the same page is minimal.</p><p>With the above assumptions, there i s n o need t o model the request channel and therefore an i-request is first processed by the disk server. The retrieved page is placed o n the i-request queue. The disk is modeled b y an exponential server with service rate pn, which i s dependent on the number of pages n t o be retrieved. The state dependent service rate is an accurate representation of disk scheduling algorithms that are designed to reduce the disk seek time, e.g., <ref type="bibr">SCAN [30]</ref>. The algorithm for scheduling page transmissions operates as follows. The service computer makes K consecutive transmissions of frequently requested pages (according t o a broadcast cycle), followed by the transmission of the first page i n the i-request queue (if at least one such page is waiting). The above step is repeated indefinitely.</p><p>Analytic results for the mean response time are derived in [291; a brief outline of the analysis i s given below. For the i-requests, the mean response time has two components. The first component corresponds t o the mean response time at the disk server which is given by standard results for an MIMII model with state dependent service rates <ref type="bibr">[26]</ref>. The second component corresponds t o the mean response time at the i-request queue, and i s obtained by a discrete time analysis.</p><p>Thef-requests are serviced according to a broadcast cycle. However, there are instances where a slot may be inserted for the transmission of a page in the i-request queue. The mean response time of f-requests is therefore given by the results in ( <ref type="formula">12</ref>) and (131, modified to account for such insertions. Let S, and SF be the mean response time of i-requests and f-requests respectively. The mean response time over all requests is given by S = X,S, + hFSFA.</p><p>Numerical results on the performance of the hybrid architecture are presented in <ref type="bibr">[29]</ref>. The key observations are as follows. Adesirableoperating condition i s that h, is small compared t o the service rates of the disk and transmission servers. Under this condition, the queueing delay experienced by the i-requests is minimal, and the number of slots inserted into the broadcast cycle for the f-requests is not significant. When the load (or A) increases, h, may also increase and the above condition should be maintained in order t o achieve good response time performance. One possibility i s t o reduce K; this would improve the effective service rate of the transmission server with respect t o the i-requests. This approach may not be effective because the disk server may be the bottleneck. A more effective approach, however, is to reduce A, by classifying more pages as frequently requested (i.e., by increasing F). The typical behavior is shown in Fig. <ref type="figure" target="#fig_14">10</ref> where the mean response time is plotted against the mean arrival rate for the following parameter settings: 1000 pages, Zipf's law page request probabilities, K = 5, and a constant disk service rate of 1.0.</p><p>A simple cycle, i.e., (1, 2, . . . , F ) , i s used t o transmit the frequentlyrequested pages. Weobservethat as Fincreases, the system can handle a heavier arrival rate. This i s due t o the fact that the volume of i-requests is reduced. However, more pages are classified as frequently requested, and as a result, the mean response time of f-requests becomes higher.Thisexplainsthedegradation in mean responsetime over all requests at light load.</p><p>The above discussion suggests that an adaptive scheme could be used. I n that scheme, the number of pages classified as frequently requested is changed dynamically according t o the request arrival rate, such that the volume of i-requests i s low enough t o achieve good response time performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. COMPARISON OF THE THREE ARCHITECTURAL ALTERNATIVES</head><p>The discussions i n Sections Il-IV have focused on the performance of scheduling algorithms for a particular architecture. In this section, the relative merits of the three architectural alternatives are considered.</p><p>An immediate observation is that existing results are derived using models that are developed specifically for a given architecture. Very often, assumptions are made for reasons of mathematical tractability. As a result, the assumptions used in one model may not be completely identical t o those used in another model. For example, i n one-way broadcast, page retrieval is not modeled, the page transmission time is assumed to be constant, and a user request i s not satisfied until the next full transmission of the requested page is complete. In two-way interaction, page retrieval and page transmission are combined into a single processing time which is assumed t o have an exponential distribution. Also, a user request can be satisfied by the current processingof the requested page. Finally, in the hybrid architecture, page retrieval and page transmission are modeled separately. As a result of these differences i n model assumptions, existing results cannot be used t o compare the performance of the alternative architectures. However, w e can make some general remarks about their performance differences.</p><p>First, one-way broadcast has the undesirable propertythat superfluous transmissions may occur. Such transmissions can be avoided i n a two-way system. Hence, the two-way architecture has the potential of better resource utilization. More detailed state information is also available in a twoway system, and i n principle, more effective scheduling algorithms for page transmission can b e designed. These performance advantages are, however, gained at the expense of requiring a request channel.</p><p>An important consideration in the two-way architecture istheamountoftrafficontherequestchannel.Thischannel may becomea bottleneck if the load i s heavy. Oneapproach t o reduce the amount of traffic is t o use the hybrid architecture because thef-requests will not be transmitted t o t h e service computer. Another approach is to use broadcast polling where all pending requests for the same page are submitted in one polling message. Within the two-way architecture, there i s also a tradeoff between the volume of traffic o n the request channel and the amount of state information available t o the service computer. When requests are submitted separately, the service computer will have detailed state information, but all requests will be transmitted o n the request channel. On the other hand, when a scheme like broadcast polling is used, the amount of traffic o n the request channel is reduced, but the service computer only knows whether there are any pending requests for the page indicated in the poll. It does not have state information for the other pages.</p><p>With respect t o mean response time performance, the following observations can be made:</p><p>When the request arrival rate is low, the two-way architecture is best. This is rather intuitive because a request can be processed quickly, and there i s n o need to wait for the required page t o be transmitted according t o a broadcast cycle. When the request arrival rate is high, the two-way architecture may suffer from excessivedelay because iii) iv) the request channel may become overloaded. This can be alleviated by using broadcast polling, the hybrid architecture, or one-way broadcast. One-way broadcast is not effectivewhen the number of pages is large. However, it is still the best architecture when the arrival rate is very heavy. The hybrid architecture seems t o be best among the three architectural alternatives because by suitable selection of parameters, it possesses the advantages of both one-way broadcast and two-way interaction.</p><p>Apart from response time performance, it is important t o consider the variety of services that can be provided by the three alternative architectures. A brief discussion i s given below. For one-way broadcast, the service provided i s restricted t o information delivery only. Two-way interaction is more versatile i n the sense that transaction oriented services can also be provided (similarly for the hybrid architecture).</p><p>In a two-way system, one can visualize a scenario where some requests require individual response (e.g., transaction oriented) while the others can be serviced by broadcast delivery.This is referred toasrnixedde/ivery <ref type="bibr">[31]</ref>.The model i n Fig. <ref type="figure">4</ref> has been extended t o include mixed delivery in <ref type="bibr">[31]</ref>.</p><p>Specifically, there are N + 1 request types: type 0 corresponds t o those requiring individual response and for type i, i = 1, 2, . . . , N, the request is for page i which can be serviced by broadcast delivery. The same FCFS discipline i s used except that a type 0 request always joins the queue.</p><p>Analytic results for the mean response time of mixed delivery are available i n <ref type="bibr">[31]</ref>. Let A, , be the mean arrival rate of type 0 requests and Ab be the total arrival rate of all other request types. The corresponding traffic intensities are denoted by po = A,/p and Pb = hb/p respectively, where I / p i s the mean processing time. The results i n <ref type="bibr">[31]</ref> indicate that the mean response time becomes unbounded when po approaches 1, but remains finite even when pb i s larger than 1. It i s also observed that for requests that can be satisfied by broadcast delivery, the presence of type 0 requests has the same effect as if the processing capacity were reduced by a fraction equal t o po. The same property has been observed i n analytic solutions t o mixed queueing network models <ref type="bibr">[32]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. CONCLUDING REMARKS</head><p>Recent research in modeling and analysis has led t o a good understanding of the performance of broadcast information delivery systems. The available results have been reviewed in this paper, and their derviations provided wherever appropriate. It is expected that future information delivery systems will become more complex. Additional research i s therefore needed t o further understand their performance characteristics. Some potential research problems are discussed below.</p><p>When modeling one-way broadcast, page retrieval is not included in the model. An implicit assumption made is that a page i s always i n memory when it i s needed for transmission. This might not be true if the system does not have sufficient main memory t o store all pages. Additional constraints may therefore be imposed o n the broadcast cycle design. As an example, a service computer may be forced t o transmit some other page in memory because the required page is still o n disk. It i s o f interest t o study the broadcast cycle design problem under the condition that there i s insufficient memory to store all pages.</p><p>The issue of insufficient main memory to store all pages is also relevant i n the two-way interaction architecture. Underthiscondition,algorithmsare needed fordiskscheduling and memory page replacement, as well as for page transmission. Some preliminary results o n the performanceof these algorithms areavailable in [33]. In that paper, it was observed that good algorithms for page transmission (e.g., MRF o r LWF depending o n whether the page request probabilities are equal or not) should be used for disk scheduling and page replacement also, except when page retrieval i s significantly slower than page transmission. In that case, a disk scheduling algorithm which minimizes the seek time should be used.</p><p>For two-way interaction, we have observed a tradeoff between the volume of traffic o n the request channel and the amount of information available t o the service computer. Further investigation of this tradeoff will undoubtedly lead t o new algorithms for scheduling page transmissions. A related problem is the modeling of the request channel. This has been avoided in current performance studies mainly because of mathematical tractability, but becomes important when the volume of user requests is heavy.</p><p>The effect of local storage at a user terminal o n performance has been discussed in Section II-E. Results are available for one-way broadcast only. The corresponding results for the other two architectures will also be of interest. An idea worth further investigation is the grouping of related pages into a page set. When a page is requested, attempts should be madeto receive the related pages and store them locally. This can be accomplished by waiting for the transmission of the required pages (an approach similar to the linked pages scheme in Section 11-E), or by submitting a request for a collection of related pages. Alternatively, the service computer may broadcast the page set as a group.</p><p>Finally, a model which allows a fair performance comparison of the various architectures for information delivery systems is needed. Such a model should include the request channel, finite memory in the service computer, one or moredisks, and thecommunication channel for page transmission.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. A typical information delivery system.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>X</head><label></label><figDesc>= arrival rate of user requests n,(k) = number of requests for page i waiting at the b,(k) = number of arrivals requesting page i during slot k u,(k) = and Z,(k) = number of slots elapsed since the beginning beginning of slot k 1, if page i is transmitted during slot k i 0, otherwise of the last page i transmission, until the beginning of slot k.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>k + 1) = [ Iu,(k)ln,(k) + b,W and Z,(k + 1) = 1 + [ Iu,(k)]Z,(k).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Mean response time versus cycle length.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>Fig. 4. Queueing model for FCFS scheduling.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>and FCFS order i s of type i, 1 I n i N and 1 i k I n.By summing the appropriate state probabilities, it can be shown that [23]:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>(</head><label></label><figDesc></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 5 .Fig. 6 .</head><label>56</label><figDesc>Fig. 6. Modeling of scheduling decisions in a two-way system.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Mean response time versus traffic intensity.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. A ring network with broadcast polling.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Fig. 9 .</head><label>9</label><figDesc>Fig. 9. Model of a hybrid architecture.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Fig. 10 .</head><label>10</label><figDesc>Fig. 10. Mean response time versus arrival rate.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>This work was supported by the Natural Sciences and EngineeringResearch Council of Canada.The author is w i t h the Department of Computer Science, Uni-</figDesc><table><row><cell>versity of Waterloo, Waterloo, Ontario, Canada N2L 3C1. He is cur-</cell></row><row><cell>rentlyon leaveat IBM Zurich Research Laboratory, CH-8803 Rusch-</cell></row><row><cell>likon, Switzerland.</cell></row><row><cell>I E E E Log Number 8825166.</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>PROCEEDINGS OF THE IEEE, VOL. 76, NO. 12, DECEMBER 1988</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_1"><p>PROCEEDINGS OF T H E IEEE, VOL. 76,NO. 12, DECEMBER 1988   </p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">The Architecture of Videotex Systems</title>
		<author>
			<persName><forename type="first">J</forename><surname>Gecsei</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1983">1983</date>
			<publisher>Prentice-Hall</publisher>
			<pubPlace>Englewood Cliffs, NI</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">F</forename><surname>Alber</surname></persName>
		</author>
		<title level="m">Videotex/Teletext: Principles and Practices</title>
		<meeting><address><addrLine>New York, NY</addrLine></address></meeting>
		<imprint>
			<publisher>McGraw-Hill</publisher>
			<date type="published" when="1985">1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A description of the broadcast telidon system</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Storey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Vincent</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Fitzgerald</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">/ E H Trans. Consumer Electron</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="1980">1980</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">New information systems using thedomestic television receiver</title>
		<author>
			<persName><forename type="first">P</forename><surname>Mothersole</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proc. Inst. €lec. €ng</title>
		<imprint>
			<biblScope unit="volume">126</biblScope>
			<biblScope unit="issue">12</biblScope>
			<date type="published" when="1979">1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Videotex networks</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J</forename><surname>Ball</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">V</forename><surname>Bochmann</surname></persName>
		</author>
		<author>
			<persName><surname>Gecsei</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="8" to="14" />
			<date type="published" when="1980-12">Dec. 1980</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Data structuring facilities for interactive videotex systems</title>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">W</forename><surname>Tompa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Gecsei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">V</forename><surname>Bochmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="72" to="81" />
			<date type="published" when="1981-08">Aug. 1981</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Videotex: advancing to higher bandwidth</title>
		<author>
			<persName><forename type="first">M</forename><surname>Sugimoto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Taniguchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Yokoi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Hata</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">/€E€ Commun. Mag</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="22" to="30" />
			<date type="published" when="1988-02">Feb. 1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Videotex tutorial</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">D</forename><surname>Ott</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">L</forename><surname>Strand</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Telecommunication Networks</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="385" to="398" />
			<date type="published" when="1983">1983</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">INDAX: an operational interactive cabletext sys-[I 51 tem</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">L</forename><surname>Ellis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">W</forename><surname>Gates</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">L</forename><surname>Peckham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">P</forename><surname>Gray ; € € E /</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Selected Areas Commun</title>
		<imprint>
			<biblScope unit="volume">SAC-I</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="285" to="294" />
			<date type="published" when="1983-02">Feb. 1983</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Bildschirmtext and the CEPTvideotex system</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Vignau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SelectedAreas Commun</title>
		<imprint>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="254" to="259" />
			<date type="published" when="1983-02">Feb. 1983</date>
		</imprint>
	</monogr>
	<note>SAC-I</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Theapplication of digital broadcast communication to large-scale information systems</title>
		<author>
			<persName><forename type="first">S</forename><surname>Harashima</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Kumamoto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Kitamma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">K</forename><surname>Cifford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Lucassen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">T</forename><surname>Berlin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">l€€€ J. Selected Areas Commun</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="457" to="467" />
			<date type="published" when="1981-12">Dec. 1981. May 1985</date>
		</imprint>
	</monogr>
	<note>/€€€ Trans. Commun.</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Telesoftware: adding intelligence to teletext</title>
		<author>
			<persName><forename type="first">J</forename><surname>Hedger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Eason</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proc. Inst. Elec. €ng</title>
		<imprint>
			<biblScope unit="volume">126</biblScope>
			<date type="published" when="1979-12">Dec. 1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">The datacycle architecture for very high throughput database systems</title>
		<author>
			<persName><forename type="first">C</forename><surname>Herman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Copal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">C</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Weinrib</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Loveless</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SlCMOD lnternational Conf. on Management of Data</title>
		<meeting>ACM SlCMOD lnternational Conf. on Management of Data<address><addrLine>San Francisco, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1979">1987. July 1979</date>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="298" to="303" />
		</imprint>
	</monogr>
	<note>Touch-tone teletext: a combined teletext-viewdata system</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">On the optimality of cyclic transmission in teletext systems</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">H</forename><surname>Ammar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">W</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">/€E€ Trans. Commun</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="68" to="73" />
			<date type="published" when="1987-01">Jan. 1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">On sequential decisions and Markov processes</title>
		<author>
			<persName><forename type="first">C</forename><surname>Derman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Management Sci</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<date type="published" when="1962">1962</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">The design of teletext broadcast cycles</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">H</forename><surname>Ammar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">W</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Performance Evaluation</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="235" to="242" />
			<date type="published" when="1985-12">Dec. 1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Human Behavior and the Principle of Least Effort</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">K</forename><surname>Zipf</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1949">1949</date>
			<publisher>Addison-Wesley</publisher>
			<pubPlace>Reading, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Teletext-like information delivery using broadcast polling</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">H</forename><surname>Ammar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Networks and lSDN Systems</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="107" to="115" />
			<date type="published" when="1986">1986</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Response time in a teletext system: an individual user&apos;s perspective</title>
	</analytic>
	<monogr>
		<title level="j">/€€E Trans. Commun</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">11</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Analytic modeling of interactive systems</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">R</forename><surname>Muntz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. /€€E</title>
		<meeting>/€€E</meeting>
		<imprint>
			<date type="published" when="1975-06">June 1975</date>
			<biblScope unit="volume">63</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Analysisof broadcast delivery in a videotex system</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">W</forename><surname>Wongand</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">H</forename><surname>Ammar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">/€€E Trans. Comput</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="863" to="866" />
			<date type="published" when="1985-09">Sept. 1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Queueing networks with population size constraints</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">S</forename><surname>Lam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ISM]. Res. Develop</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="370" to="378" />
			<date type="published" when="1977-07">July 1977</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Computational algorithms for closed queueing 1159-1170, NOV. 1987. networks with exponential servers</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">P</forename><surname>Buzen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="527" to="531" />
			<date type="published" when="1973-09">Sept. 1973</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<author>
			<persName><forename type="first">L</forename><surname>Kleinrock</surname></persName>
		</author>
		<title level="m">Queueing Systems</title>
		<meeting><address><addrLine>New York, NY</addrLine></address></meeting>
		<imprint>
			<publisher>Wiley Interscience</publisher>
			<date type="published" when="1975">1975</date>
			<biblScope unit="volume">1</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Scheduling algorithms for videotex systems under broadcast delivery</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">D</forename><surname>Dykeman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">H</forename><surname>Ammar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">W</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. lnternational Conf. on Communications</title>
		<meeting>lnternational Conf. on Communications<address><addrLine>Toronto, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1986">1986</date>
			<biblScope unit="page" from="1847" to="1851" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Dynamic Programming and Markov Processes</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Howard</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1960">1960</date>
			<publisher>M.I.T. Press</publisher>
			<pubPlace>Cambridge, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Architecture and performance of large scale information delivery networks</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">W</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">D</forename><surname>Dykeman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">J</forename><surname>Denning</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">H</forename><surname>Ammar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 72th lnternational Teletraffic Congress</title>
		<meeting>72th lnternational Teletraffic Congress<address><addrLine>Torino, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1986">1988. Oct. 1986</date>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="1174" to="1180" />
		</imprint>
	</monogr>
	<note>Response time performance of videotex systems</note>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Queueing network modelswith multiple closed chains: theory and computational algorithms</title>
		<author>
			<persName><forename type="first">M</forename><surname>Reiser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Kobayashi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">D</forename><surname>Dykeman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">W</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. /€€€ lnfocorn &apos;88</title>
		<meeting>/€€€ lnfocorn &apos;88<address><addrLine>New Orleans, LA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1967">1975. 1988. 1967</date>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="page" from="9" to="21" />
		</imprint>
	</monogr>
	<note>A performance study of broadcast information delivery systems</note>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">D. degrees in computer science from the University of California at Los Angeles, in 1970,1971, and 1975 respectively. Since 1975, he has been with the University of Waterloo, Canada, where he is currently a Professor of Computer Science and Electrical Engineering. From September 1981 to August 1982, he was a Visiting Scientist at the IBM Zurich Research Laboratory, working on performance analysis of local area networks. His research interests include computer networks, communication protocols, and performance evaluation. Dr. Wong is a member of the Editorial Board of the Performance Evaluation journal. He has served on program committees of several conferences on computer communications</title>
		<author>
			<persName><forename type="first">John</forename><forename type="middle">W</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Wong received the B.S. degree in engineeringand theM.S.and Ph</title>
		<imprint/>
	</monogr>
	<note>he was Program Chairman of the IEEE INFOCOM &apos;84 Conference</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
