<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Possible Worlds and Resources: The Semantics of BI £</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2002-11-29">November 29, 2002</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">David</forename><forename type="middle">J</forename><surname>Pym</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Peter</forename><forename type="middle">W</forename><surname>O'hearn</surname></persName>
							<email>ohearn@dcs.qmul.ac.uk.</email>
						</author>
						<author>
							<persName><forename type="first">Hongseok</forename><surname>Yang</surname></persName>
							<email>hyang@ropas.kaist.ac.kr.1</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Ý University of Bath</orgName>
								<address>
									<settlement>England</settlement>
									<country key="GB">U.K</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution" key="instit1">Þ Queen Mary</orgName>
								<orgName type="institution" key="instit2">University of London</orgName>
								<address>
									<settlement>England</settlement>
									<country key="GB">U.K</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Possible Worlds and Resources: The Semantics of BI £</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2002-11-29">November 29, 2002</date>
						</imprint>
					</monogr>
					<idno type="MD5">D34439ED1F105CDD7D72BE523F72E310</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T09:50+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The logic of bunched implications, BI, is a substructural system which freely combines an additive (intuitionistic) and a multiplicative (linear) implication via bunches (contexts with two combining operations, one which admits Weakening and Contraction and one which does not). BI may be seen to arise from two main perspectives. On the one hand, from proof-theoretic or categorical concerns and, on the other, from a possible-worlds semantics based on preordered (commutative) monoids. This semantics may be motivated from a basic model of the notion of resource. We explain BI's proof-theoretic, categorical and semantic origins. We discuss in detail the question of completeness, explaining the essential distinction between BI with and without (the unit of ). We give an extensive discussion of BI as a semantically based logic of resources, giving concrete models based on Petri nets, ambients, computer memory, logic programming, and money.</p><p>£ This paper grew out of material presented by Pym in a lecture at the 1998 MFPS conference, in London, and by O'Hearn in a lecture at the 2000 meeting, in Hoboken. We are grateful to the organizers, Mike Mislove and Steve Brookes, for inviting us to present our results at MFPS. O'Hearn and Pym were partially supported by the EPSRC.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The purpose of this paper is is to explore, from the point of view of resources and in the context of a broader investigation of "resource modelling", algebraic and possible worlds semantics for BI, the logic of bunched implications <ref type="bibr" target="#b37">[38,</ref><ref type="bibr" target="#b40">41,</ref><ref type="bibr" target="#b36">37]</ref>. Propositional BI, our focus in this paper, freely combines the ´ª Á ´µfragment of propositional linear logic and propositional intuitionistic logic via the formulation of contexts not as finite sequences of propositions but rather as finite bunches of propositions. The basic formulation of BI is explained in § 2. An elementary version of the possible worlds semantics was briefly described in the introductory paper on BI <ref type="bibr" target="#b37">[38]</ref>; in this paper that semantics is developed more fully, with a substantial collection of computational examples. A detailed account of (propositional and predicate) BI's semantics (elementary, categorical, and topological) and proof theory (including typed -calculi and their models), will appear in a forthcoming monograph <ref type="bibr" target="#b41">[42]</ref>, which therefore includes some content in common with the present paper, which nevertheless presents a quite distinct perspective.</p><p>Our starting point in this paper is the monoidal semantics of substructural logics, which was independently discovered by several researchers in the late 1960s <ref type="bibr" target="#b26">[27,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b51">52,</ref><ref type="bibr" target="#b47">48]</ref>. The version of the semantics we use is based on a preordered commutative monoid Å ´Å AE Úµ of possible worlds. The basic idea is to use the monoidal structure to define the semantics of the multiplicative, or substructural, connectives (Á, £, £ , in BI's notation) in the standard way, while using also a standard interpretation of the additives ( , , , , ). In the first, elementary, version of our semantics, the interpretation of additives is just Kripke's semantics of intuitionistic logic, formulated using the comparison relation Ú in Å. When the order is discrete, this amounts to a semantics of classical logic in a powerset Boolean algebra. In our most sophisticated semantics, the semantics of multiplicatives is again based on the monoidal structure, while that for additives is based on Grothendieck sheaves. BI accepts the multiplicatives and additives as being Particularly important here is the use of "referenced". What this illustrates is that resources are often uniquely identifiable or located. Examples include addressible locations in computer memory, web addresses identified by URLs, and people. This calls the assumption that AE be a total operation into question, and suggests a first refinement of the basic model of resource arising from preordered monoids: in order to use AE to talk about different collections, it is useful for AE to be partial. For example, if Ñ ¼ and Ñ ½ describe sets of uniquely identifiable resources, then we can stipulate that Ñ ¼ AE Ñ ½ be defined only when the resources described are disjoint. We will see later that this kind of partiality is useful when accounting for update, and for allocation and deallocation.</p><p>We begin our arguments, in § 2, with a brief proof-theoretic description of BI, including a sketch of its categorical semantics. In § 3, we introduce three semantics for BI: Firstly, we give an account of BI-algebras. Secondly, via a brief diversion to give account of BI in terms of Gabbay's notion of fibring <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b41">42]</ref>, we give a Kripke forcing semantics, based on an algebra of worlds which can be directly motivated our basic model of resource. <ref type="foot" target="#foot_0">1</ref> Thirdly, we discuss BI's partial monoid semantics, explaining its value in resource modelling.</p><p>After presenting this material, we consider, in § 3.5, the technical issue of completeness. BI's calculus forces a rather delicate treatment of inconsistency which forces us to refine the elementary Kripke forcing semantics to exploit technically its inherently topological structure. Specifically, we explain how the elementary version of the forcing semantics is complete for BI without inconsistency but incomplete when consistency is added, and discuss how to recover completeness for BI with by moving to topological setting within which is internalized. We conclude § 3 with a summary of the technical properties, including completeness, of a semantics based on partial monoids, consequences of which include the decidability and the finite model property for propositional BI <ref type="bibr" target="#b18">[19]</ref>. Note that full propositional linear logic, with exponentials, is undecidable even when restricted to the intuitionistic fragment, that the status of MELL is unknown, and that neither has the finite model property <ref type="bibr" target="#b25">[26,</ref><ref type="bibr" target="#b28">29]</ref>. Note also that the releveant logic R is undecidable <ref type="bibr" target="#b44">[45]</ref>.</p><p>In § 4, after further discussion of resource modelling, we present a number of concrete models, which illustrate a range of features of resources, including: distribution (Petri nets, Ambients); resource allocation, deallocation and access (the separation model); update (the pointer model); group membership (logic programming); and cost (coins required for purchases). The richness of these models provides many challenges for the development of a good general model of resource.</p><p>Our technical development culminates, in § 5, with a less elementary semantics. It is again based on (preordered) commutative monoids but this time topological concepts (topological monoids and sheaves) are brought to bear in order to give a complete account of inconsistency, i.e., BI with and completeness. Our most sophisticated semantics, for which we give a detailed proof of completeness, is based on Grothendieck sheaves on preordered monoids. We show that this semantics encompasses the "pointer logic" examples, the elementary formulation of which is based on partial monoids.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">A Proof-theoretic Perspective</head><p>In this section we recall the fundamentals of BI from the point of view of its proof-theoretic roots first discussed in <ref type="bibr" target="#b37">[38]</ref>. In terms of provability, the description here is equivalent to the algebraic account given in the next section; some readers may wish to skim this section and refer back as necessary.</p><p>Linear logic <ref type="bibr" target="#b19">[20]</ref> provides a system within which connectives defined by multiplicative and additive rules co-exist. Specifically, in the intuitionistic linear setting, we get both multiplicative conjunction, introduced by</p><formula xml:id="formula_0">½ ³ ½ ¾ ³ ¾ ½ ¾ ³ ½ ª ³ ¾</formula><p>and additive conjunction, introduced by ³ ½ ³ ¾ ³ ½ ²³ ¾ However, linear logic gives no corresponding analysis of implication: Starting from its basic multiplicative implication, ´, introduced by ³ ³ ´ linear logic recovers not merely additive but intuitionistic implication, , via its modality, : there is a translation of intuitionistic logic into intuitionistic linear logic which renders ³ as ´ ³µ ´ . However, one can ask whether it is possible to have both a multiplicative and an additive implication co-existing without recourse to modalities. From the point of view of natural deduction, having the two requisite elimination rules together is unproblematic:</p><formula xml:id="formula_1">³ ´ ¡ ³ ¡ ´ ³ ³</formula><p>But the co-existence of the two requisite introduction rules presents an immediate difficulty: Given ³ ³</p><p>´ ´Á how can we distinguish Á ? A semantically clean solution (cf. an alternative, semantically less desirable solution described in <ref type="bibr" target="#b50">[51]</ref> and discussed in <ref type="bibr" target="#b41">[42]</ref>) is to introduce a context-forming operation ";" in addition to ",". Then we can formulate a second introduction rule:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>³ ³ Á</head><p>As a consequence we form not finite sequences of assumptions but rather finite trees, with assumptions at the leaves and ","s and ";"s at the internal nodes. Such a structure is called a bunch <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b42">43,</ref><ref type="bibr" target="#b37">38,</ref><ref type="bibr" target="#b41">42]</ref>. Bunches are given by the following grammar:</p><p>³ Ñ in which Ñ and are units for "," and ";", respectively. We write ´¡µ to denote that ¡ is a sub-bunch of in the evident sense. We then take the following equivalence , , on bunches:</p><p>• Commutative monoid equations for "," and Ñ ;</p><formula xml:id="formula_2">IDENTITY AND STRUCTURE ³ ³ Ü ÓÑ ³ ¡ ³ ´where ¡ µ ´¡µ ³ ´¡ ¡ ¼ µ ³ Ï ´¡ ¡µ ³ ´¡µ ³ MULTIPLICATIVES Ñ Á Á Á ´ Ñ µ ¡ Á ´¡µ Á ³ ¡ ¡ ³ £ £ Á ´³ µ ¡ ³ £ ´¡µ £ ³ ³ £ £ Á ³ £ ¡ ³ ¡ £ ADDITIVES Á ´ µ ¡ ´¡µ ³ ¡ ¡ ³ Á ´³ µ ¡ ³ ´¡µ ³ ³ Á ³ ¡ ³ ¡ ³ ³ ³ ½ ³ ¾</formula><p>´ ½ ¾µ Á ³ ¡´³µ ¡´ µ ¡´ µ Table <ref type="table">1</ref>: Natural Deduction System for BI: NBI • Commutative monoid equations for ";" and ;</p><formula xml:id="formula_3">• Congruence: if ¡ ¡ ¼ , then ´¡µ ´¡¼ µ.</formula><p>Given this structure, we can define BI, the logic of bunched implications <ref type="bibr" target="#b37">[38,</ref><ref type="bibr" target="#b40">41,</ref><ref type="bibr" target="#b41">42]</ref>, as a natural deduction system, as in Table <ref type="table">1</ref>, in which we use £ , pronounced "magic wand", for multiplicative implication and £, pronounced "star", for multiplicative conjunction, and for their additive counterparts, and for disjunction. The units of £, and are denoted Á, and (inconsistency), respectively.</p><p>Notice that Weakening (W) and Contraction (C),</p><formula xml:id="formula_4">´¡µ ³ ´¡ ¡ ¼ µ ³ Ï ´¡ ¡µ ³ ´¡µ ³</formula><p>are permitted for ";" but not for ",". Notice also that the rules for the additives are presented in the multiplicative style but with combination of bunches using ";". Thus the more familiar additive forms arise via Contraction.</p><p>The metatheory of this system is discussed in <ref type="bibr" target="#b41">[42]</ref>, where it is shown that NBI is strongly normalizing and has the subject reduction property. BI may also be presented as Cut-free sequent calculus <ref type="bibr" target="#b41">[42]</ref>. Note, in particular, that we have freely combined propositional intuitionistic logic and propositional multiplicative intuitionistic linear logic.</p><p>Corresponding to BI's natural deduction system is a lambda calculus, « . The correspondence between « and BI's natural deduction system follows the pattern for intuitionistic logic except that we have two abstraction operations (and so two applications) corresponding to the additive («Ü ³ Å) and multiplicative ( Ü ³ Å) implications. The metatheory of « is discussed in <ref type="bibr" target="#b41">[42]</ref> and its applications to the semantics of Idealized Algol and Syntactic Control of Interference are discussed in <ref type="bibr" target="#b37">[38,</ref><ref type="bibr" target="#b36">37,</ref><ref type="bibr" target="#b41">42,</ref><ref type="bibr" target="#b35">36]</ref>.</p><p>Categorically, BI's proofs can be interpreted in doubly closed categories (DCCs) which carry two symmetric monoidal closed structures, one of which is cartesian. This structure provides a crisp accuont of the essential difference between BI and linear logic: to model linear logic two closed categories are used (where one is often a Kleisli category <ref type="bibr" target="#b3">[4]</ref>), instead of a single category with two closed structures. See <ref type="bibr" target="#b37">[38,</ref><ref type="bibr" target="#b36">37,</ref><ref type="bibr" target="#b41">42]</ref> for a fuller account of the differences with linear logic.</p><p>The two monoidal closed in a DCC structures are used to interpret the multiplicative conjunction and implication and the additive conjunction and implication in the usual adjoint relationship <ref type="bibr" target="#b27">[28]</ref>:</p><formula xml:id="formula_5">ª ℄ ´ ℄ and ¢ ℄ ℄</formula><p>where ª is a symmetric monoidal product, with corresponding internal hom ´ , and ¢ is cartesian product, with correponding internal hom . To interpret , we must also have co-products (bi-DCCs). A DCC alone does not constitute a definition of a model of BI, for which we must also have an interpretation of BI's syntax. Such an interpretation is a function from BI's language of propositions to the objects of a DCC, defined by induction on the structure of propositions.</p><p>The interpretation of BI in a bi-cartesian DCC, with the two closed structures ´¢ ½ µ and ´ª Á ´µ and co-product ´• ¼µ, is given by a function ℄ ℄ such that:</p><formula xml:id="formula_6">³ ℄ ℄ ³℄ ℄ • ℄ ℄ ℄ ℄ ¼ ³ ℄ ℄ ³℄ ℄ ¢ ℄ ℄ ℄ ℄ ½ ³ ℄ ℄ ℄ ℄ ³℄ ℄ ³ £ ℄ ℄ ³℄ ℄ ª ℄ ℄ Á℄ ℄ Á ³ £ ℄ ℄ ℄ ℄ ´ ³℄ ℄</formula><p>We interpret a bunch by replacing each "," with £ and each ";" with . We write ℄ ℄ when we want to indicate that the interpretation is in the (bi-C)DCC . Soundness and completeness results for the interpretation of BI's proofs in DCCs are given in <ref type="bibr" target="#b41">[42]</ref>.</p><p>Examples of DCCs are discussed in <ref type="bibr" target="#b37">[38,</ref><ref type="bibr" target="#b41">42]</ref>, including Ë Ø ¢ Ë Ø, in which the tensor product and function space are given by Á ´½ ¼µ</p><formula xml:id="formula_7">´ ¼ ½ µ ª ´ ¼ ½ µ ´´ ¼ ¢ ¼ µ • ´ ½ ¢ ½ µ ´ ¼ ¢ ½ µ • ´ ½ ¢ ¼ µµ ´ ¼ ½ µ ´´ ¼ ½ µ ´´ ¼ ¼ µ ¢ ´ ½ ½ µ ´ ¼ ½ µ ¢ ´ ½ ¼ µµ</formula><p>This model can also be used to show that BI's treatment of intuitionistic implication is quite different from linear logic's. Specifically, we can see that there is no functor</p><formula xml:id="formula_8">Ë Ø ¢ Ë Ø Ë Ø ¢ Ë Ø such that</formula><p>´</p><p>: we have that ´½ ¼µ ´¾ ¾µ ´¾ ½µ but, for any , ´´¾ ¾µ ´ µ, for sets and of the same cardinality. Thus, in general, there is no way to interpret linear logic's modality , with the property that ³</p><p>´ ³µ ´ , as an endofunctor on models of BI.</p><p>A general construction of DCCs is given by Day's tensor product <ref type="bibr" target="#b10">[11]</ref>. Given a small (symmetric) monoidal category ´ AE Áµ, there is a (symmetric) monoidal structure on the category ÓÔ Set℄, defined as follows: The unit Á of the monoidal structure is Á℄. Given functors and , the formula for the tensor product is written using co-ends:</p><p>´ ª µ</p><formula xml:id="formula_9">¼ ¢ ¼ ¢ ª ¼ ℄</formula><p>The formula for ´uses an end:</p><p>´ ´ µ</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Set</head><p>´ ª µ℄ Set ÓÔ ´ µ ´ ª µ℄</p><p>The formulae for ´ ª µ and ´ ´ µ are both contravariant in , giving the morphism parts of the functors.</p><p>This construction also provides the basic categorical framework within which we can formulate the theory of Kripke models for BI <ref type="bibr" target="#b37">[38,</ref><ref type="bibr" target="#b41">42]</ref>, wherein the semantics of proofs is also developed. We return this point in § 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">A Semantic Perspective</head><p>We begin our semantic development, in § 3.1, with a basic algebraic semantics of BI, together with BI's associated Hilbert-type proof system, based directly on preordered commutative monoids. The Hilberttype calculus, which we show to be equivalent to NBI, will provide a convenient basis, in § 5.3, for proving our most general completeness theorem. In § 3.2, we introduce BI's elementary possible worlds semantics and, in § 3.3, pause to relate BI to Gabbay's fibring of logics <ref type="bibr" target="#b17">[18]</ref>. We proceed, in § § 3.4 and 3.5, to discuss soundness, completeness and incompleteness results for BI's elementary possible worlds semantics.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">An Algebraic Semantics and a Calculus</head><p>For the remainder of the paper, we shall be concerned primarily with truth and provability, rather than the structure of proofs. For technical simplicity, therefore, we present a simple algebraic semantics and a simple associated Hilbert-type calculus for BI <ref type="bibr" target="#b41">[42]</ref>. This presentation of BI does not make use of bunches, i.e., BI's tree-structured contexts, described in § 2.</p><p>In order to motivate the algebraic semantics, it is useful to recall briefly BI's categorical interpretation, sketched in § 2: The main point is that we have a single category with two adjunctions,</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>£ ℄ £ ℄ and</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>℄ ℄</head><p>that characterize the two implications. The algebraic models we will present are collapsed versions of these categorical structures, where the additive implication corresponds to intuitionistic logic and the multiplicative £ to a basic substructural logic.</p><p>To describe the models, first recall that Heyting algebras are the algebraic models of intuitionistic propositional logic. A Heyting algebra is a lattice with greatest and least elements in which the meet is residuated, which is to say that there is an implication operator, , satisfying iff An algebraic model of a basic substructural logic containing conjunction £, unit Á and implication £ is similar, except that £ is not required to be meet, and Á is not required to be top. That is, we would require a partial order with a (monotone) commutative monoid structure that is residuated, so that</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>£ iff £</head><p>Because we have all of the connectives of intuitionistic logic and the basic substructural logic at the same time, we simply ask for a single algebra that has both kinds of structure: Note that the same underlying order is used to describe the residuated structure in both cases; this corresponds to the DCC structure in categorical semantics. Having two residuated structures for one preorder is intimately related to the possibility of having a possible worlds semantics that directly combines the monoidal semantics of substructural logics and (Kripke or Grothendieck) semantics of intuitionistic logic.</p><formula xml:id="formula_10">³ ³ ³ ³ ³ ³ ³ ½ ¾ ³ ´ ½ ¾µ ³ ³ ³ ³ ½ ¾ ´ ½ ¾µ ³ ³ ³ ³ ³ £ ´ £ µ ´³ £ µ £ ³ £ Á ³ Á £ ³ ³ £ ³ £ ³ £ £ ³ £ ³ ³ £ ³ £ ³ £</formula><p>From this notion of BI-algebra, it is straightforward to derive a collection of axioms and rules for proving judgements ³ , where the formulae ³ and are built from propositional variables, the additive connectives , , , and , and the multiplicative connectives Á, £ and £ . The axioms and rules of this Hilbert-type system, HBI, given in Table <ref type="table" target="#tab_0">2</ref>, are those for a presentation of intuitionistic propositional logic together with the rules for the substructural fragment. This way of formulating the system is proof-theoretically unsophisticated but it is adequate for capturing provability and admits straightforward soundness and, in particular, completeness proofs with respect to both the BI-algebras introduced in this section and the Grothendieck topological models discussed in § 5.3. Obviously, by induction on the structure of proofs in HBI and NBI, we have the following:</p><p>Lemma 1 (equivalence of NBI and HBI) ³ is provable in</p><formula xml:id="formula_11">HBI iff ³ is provable in NBI.</formula><p>The reader will recognize in HBI laws for coproducts, products, tensor products, and implicational adjunctions. We say that " ³ is provable" to indicate that ³ can be proven using this system. This structure also explains how to give the appropriate notion of interpretation of BI's formulae in BI-algebras, so that can state the expected soundness and completeness properties. Let be BI-algeba. We write ³℄ ℄ ℄ ℄ if the interpretation of ³ in is below the interpretation of in . If ³℄ ℄ ℄ ℄ for all interpretations in all BI-algebras, then we write ³℄ ℄ ℄ ℄.</p><p>Theorem 2 (soundness) If ³ is provable in HBI, then ³℄ ℄ ℄ ℄.</p><p>Proof-sketch By induction on the structure of proofs in HBI.</p><p>By constructing a term BI-algebra, we get completeness for HBI and BI-algebras.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 3 (model existence)</head><p>There is a BI-algebra Ì and an interpretation ℄ ℄ Ì such that if ³ is not provable in HBI, then ³℄ ℄ Ì ℄ ℄ Ì .</p><p>Proof-sketch The Heyting part of the algebra is constructed in the usual way <ref type="bibr" target="#b52">[53]</ref>. The remaining key components are defined as follows:</p><p>• Elements of the algebra are equivalence classes of propositions ³℄ given by inter-derivability;</p><p>• ³℄ ℄ iff ³ ;</p><p>• ³℄ £ ℄ ³ £ ℄;</p><p>• Á Á℄;</p><p>• ³ £ ℄ ³℄ £ ℄.</p><p>The result follows.</p><formula xml:id="formula_12">Theorem 4 (completeness) If ³℄ ℄ ℄ ℄, then ³ is provable in HBI.</formula><p>Proof By the contrapositive. Suppose that ³ , then, by Lemma 3, we get ³℄ ℄ ℄ ℄.</p><p>We will give several models in which the additives are treated classically. So we define "Boolean BI" to be the consequence relation generated by the rules of HBI, plus reductio ad absurdum:</p><formula xml:id="formula_13">´³ µ ³ Ê</formula><p>An algebra model for this system is a Boolean BI-algebra, a BI-algebra in which the Heyting (additive) component is, in fact, Boolean.</p><p>Whilst the notion of BI-algebra is useful as a reference point, the definition itself does not suggest directly a declarative way of reading formulae; neither does it tell us if there are any interesting BI-algebras. Possible worlds models, with respect to which we may give a forcing semantics, address both of these points.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Forcing Semantics</head><p>In this section, we consider BI from the perspective of truth-conditional semantics. The basic idea is to adapt the intuitionistic idea of the creative subject exploring a collection of pre-ordered states of knowledge, or worlds, to a setting in which the collection of worlds carries the structure of a model of resource.</p><p>Following from the Introduction, we take the collection of worlds to be given by a pre-ordered (commutative) monoid, Å ´Å AE Úµ where Å is a set of resources, AE is a (commutative) monoidal combination, with unit , and Ú is a pre-order on Å subject to the bifunctoriality, or monotonicity, condition that that if Ñ ½ Ú Ñ ¾ and Ò ½ Ú Ò ¾ , then Ñ ½ AE Ò ½ Ú Ñ ¾ AE Ò ¾ . Such a structure may be seen as modifying the intuitionistic structure by introducing a decomposition of worlds, given by AE. Starting from this structure, we give the following:</p><p>• A basic forcing semantics for BI without , based on a satisfaction relation of the form</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Ñ ³</head><p>where Ñ ¾ Å and ³ is BI formula, including appropriate soundness and completeness theorems;</p><p>• Incompleteness of the basic semantics in the presence of ;</p><p>• A partial monoid semantics, suggesting a different class of models, well-motivated by resource semantics, for which a completeness theorem is obtainable (though beyond the scope of this article) <ref type="bibr" target="#b18">[19]</ref>.</p><p>We will indicate, without going into too much technical detail, how the forcing semantics, at least in the absence of inconsistency, may be seen as a restriction of the semantics of BI's proofs in DCCs. Before we proceed to develop BI's forcing semantics with respect to preordered monoids of worlds, we make a brief technical detour.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">BI via Fibring</head><p>It is possible, following Gabbay's Preface to <ref type="bibr" target="#b41">[42]</ref>, to understand BI in terms of Gabbay's notion of fibring logics <ref type="bibr" target="#b17">[18]</ref>. Let Ä ½ and Ä ¾ be two logics with implication µ ½ and µ ¾ . Assume these logics are characterized by semantics and models of the form</p><formula xml:id="formula_14">Å ½ ´Ë½ ½ ½ ½ µ and Å ¾ ´Ë¾ ¾ ¾ ¾ µ</formula><p>where Ë is a set of possible worlds, ¾ Ë is the assignment to the atoms and is a family of relations and/or functions used to define, recursively, the truth table for the connectives of Ä . Combining the two languages allows the formation of the language Ä ½ Ä ¾ ℄, in which formulae may be formed by freely using connectives from both Ä ½ and Ä ¾ .</p><p>There are various ways of providing semantics for the combined language but a simple and transparent methodology is that of dovetailing. The semantics for dovetailing has the form ´Ë ½ ¾ µ, obtained by putting both semantical conditions ½ and ¾ side-by-side and joining the requirements on of both logics. This methodology is quite uniform: The combination of logics is done methodologically, not logicby-logic, so that for given components, their composite is determined.</p><p>Consider ³ ´p µ ½ ´q µ ¾ pµµ. From the point of view of language Ä ½ ³ has the form p µ ½ , where is atomic. Ä ½ does not recognize ´q µ ¾ pµ, because µ ¾ is not in the language. Let Å ½ ´Ë½ ½ ½ ½ µ be a model of Ä ½ and start evaluating Ø ¯½ , for Ø ¾ Ë ½ . In the inductive course of evaluation of µ ½ , we will have occasion to evaluate × ¯ for some points × ¾ Ë ½ appropriately related to Ø via the relations and functions of ½ . If were a real atom of Ä ½ , then the assignment ½ would have given us the value but ´q µ ¾ pµ is not a real atom. So how can we get a value for × ¯½ ? The answer is that we fibre a (possibly set of) model(s) of the language Ä ¾ , with each point × ¾ Ë ½ . Let ½ ¾ be the fibring function and write</p><formula xml:id="formula_15">½ ¾ ´×µ Å × ¾ ´Ë× ¾ × ¾ × ¾ × ¾ µ and let × ¯½ iff × ¾ ¯¾ (in Å × ¾ )</formula><p>The model Å × ¾ knows how to give a value to .</p><p>The above is fibred semantics for the combined language. The function ½ ¾ assigning to each × a model Å × ¾ is a fibring function. Of course, we also need an ¾ ½ for passage from Ä ¾ models to Ä ½ models. Dovetailing amounts to insisting that × × ¾ . A straightforward calculation (see <ref type="bibr" target="#b16">[17]</ref> for the ideas) calculation shows that we can take models of the form ´Ë ½ ¾ µ and evaluate Ä connectives using , respectively.</p><p>If we perform dovetailing on intuitionistic with the Kripke semantics ´Ë Ú µ and on substructural £ with the semigroup semantics ´Ë AE µ, then we automatically get an algebra of worlds of the form ´Ë Ú AE µ satisfying the following condition below:</p><formula xml:id="formula_16">Ü Ú Ü ¼ and Ý Ú Ý ¼ imply Ü AE Ý Ú Ü ¼ AE Ý ¼</formula><p>This is our bifunctoriality condition, which may be seen arising from the persistence, or resource-preserving property, of the intuitionistic connectives.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Basic Forcing Semantics and Soundness</head><p>The semantics is stated in terms of a judgement form Ñ ³, which says that formula ³ is true at, or with respect to, a world Ñ.</p><p>As we have seen, we start with a preordered commutative monoid of worlds, Å ´Å AE Úµ, for which we have the bifunctoriality condition and for which equality in the monoid (up to which the monoid laws hold) is that which is given by the equivalence relation Ú Û. Given such a monoid, semantic clauses can be given for a form of truth, conjunction and implication as follows:</p><formula xml:id="formula_17">Ñ Á iff Ñ Ú Ñ ³ £ iff Ò Ò ¼ ¾ Å ´Ñ Ú Ò AE Ò ¼ and Ò ³ and Ò ¼ µ Ñ ³ £ iff Ò ¾ Å ´Ò ³ implies Ò AE Ñ µ</formula><p>Now, the conjunction thus obtained does not admit Weakening or Contraction generally, in that the implications -if Ñ ³ £ , then Ñ ³, and -if Ñ ³, then Ñ ³ £ ³ do not necessarily hold. However, it does have the implicational adjunction</p><formula xml:id="formula_18">-Ñ ´³ £ µ £ iff Ñ ³ £ ´ £ µ .</formula><p>Variations on this semantics have been taken as the basis for a number of notions of model for substructural logics (e.g., <ref type="bibr" target="#b51">[52,</ref><ref type="bibr" target="#b19">20]</ref>).</p><p>Of course, a substructural logic with only these three connectives is very weak and the way in which other connectives are added is one place where significant divergence occurs. However, a simple point is central: there is already enough structure to interpret all of the connectives of intuitionistic logic, in the style of possible worlds semantics, without adding anything to the basic set-up:</p><formula xml:id="formula_19">Ñ ³ iff Ñ ³ and Ñ Ñ ³ iff Ñ ³ or Ñ Ñ ³ iff Ò Ú Ñ Ò ³ implies Ò</formula><p>We must also handle the units of and , and , respectively:</p><formula xml:id="formula_20">Ñ always Ñ never</formula><p>While the clause for is straightforward, we shall see later that that for is somewhat problematic.</p><p>All propositions are required to satisfy Kripke Monotonicity (K): Ñ ³ and Ò Ú Ñ implies Ò ³.</p><p>Given these definitions, together with an assignment ØÓÑ×´Ñµ of the atomic propositions which are true at each world Ñ, so that Ñ p iff p ¾ ØÓÑ×´Ñµ we can define a semantic notion of logical consequence. This semantics can formulated in the category Å ÓÔ Ë Ø℄ of presheaves over the evident preorder category Å ÓÔ .</p><p>Let Å ´Å AE Úµ be a preordered commutative monoid. We write Ñ Å just in case Ñ Å ³ , where ³ is the formula obtained from by replacing each "," by £ and each ";" by . We then write Å ³ just in case, for all Ñ in Å, if Ñ Å , then Ñ Å ³. Finally, we write ³ just in case, for all Å, Å ³.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 5 (soundness) If</head><p>³, then ³.</p><p>Proof A straightforward induction on the structure of proofs <ref type="bibr" target="#b41">[42]</ref>.</p><p>Soundness can also be stated in algebraic terms, by saying that the the collection of downwards-closed subsets of a preordered commutative monoid forms a BI-algebra. The semantic clauses just given specify the algebra structure. Note that there is nothing essential about intuitionistic logic here. In the special case in which the preorder is an equivalence relation, the semantics will validate the law of the excluded middle, so we get a Boolean BI-algebra (in this case, the semantic clauses for additives reduce to those of a semantics of classical logic in a powerset).</p><p>The possible worlds semantics gives a large number of models of BI, for the simple reason that there are so very many (preordered) commutative monoids. This brings up a curious historical fact. In many presentations of systems of substructural logic -see, for example, <ref type="bibr" target="#b44">[45]</ref> -this (or a similar) semantics is altered, typically by imposing additional conditions, with the effect of precluding the existence of the additive implication (be it intuitionistic or classical). The reason, so it seems <ref type="bibr" target="#b11">[12]</ref>, is that if one omits Weakening from standard sequent calculus then the law</p><formula xml:id="formula_21">³ ´ µ ´³ µ ´³ µ</formula><p>of distribution, is lost (distribution is a consequence of having a full strength intuitionistic ). However, this choice seems curious: a simple semantics is altered to match a somewhat singular choice in the proof theory. The result is a logic in which it is very difficult to read the additive connectives in a simple way -where means "and" and means "or": these lead to distribution.</p><p>Independently of these general arguments, we stress a practical point: to deny is to deny access to the structure of a host of simple, naturally occurring, models. Of course, if none of these models were interesting the price would not be so great; this brings us back to our motivation in resource modelling and so to what we therefore call the resource interpretation of the connectives. In the resource interpretation we think of a formula as making a declarative statement about some state-of-affairs but the truth of it is to be judged relative to access to available resources. Consider ³ £ . We read it informally as follows:</p><p>³ £ is true just if the current resource can be decomposed into constituents in such a way as to make ³ true of one constituent and true of the other.</p><p>Similarly, we read ³ £ as follows: ³ £ is true just if, whenever we are given resources that make ³ true, combining with what we already have, will then also be made true.</p><p>This kind of reading also works for the additive connnectives; for example: ³ is true just if any consistent resource that makes ³ true also makes true.</p><p>That the resource interpretation works for the full-strength additive implication, as well as conjunction and disjunction, is significant, since it is the extension of a reading of multiplicatives to other connectives that is often problematic in substructural logics.</p><p>A very simple model, which is obtained by taking worlds as natural numbers, where Ú is the usual less than (reversed), AE is addition and is , may readily be seen to support these intuitions (to which we return in § 4.6). <ref type="foot" target="#foot_1">2</ref> We emphasize that neither our monoidal model of resource nor the corresponding resource interepretation of the connectives is forced by our semantics. Rather, they merely are supported by it.</p><p>We conclude by remarking that an alternative presentation of the semantics of substructural connectives is both possible and commonplace in relevant logic <ref type="bibr" target="#b12">[13]</ref>. Briefly, our use of a monoidal product AE together with an order Ú may be replaced by a ternary relation Ê on a set of worlds, so that, for example, the forcing relation for £ is rendered as Ð ³ £ iff for all Ñ Ò ¾ Å such that Ê´Ð Ñ Òµ, if Ñ ³, then Ò .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Completeness and Incompleteness</head><p>The monoid semantics gives us a way to construct BI-algebras but the algebras obtained are very special.</p><p>Although it gives a limited class of models, Kripke's semantics is still complete for intuitionistic logic. So it is natural to ask: what is the status of the elementary monoid models with respect to BI ?</p><p>The key issue is the handling of inconsistency in the presence of multiplicative connectives. The propositions p and p £ are both consistent yet the proposition p £ ´p £ µ is inconsistent since p £ ´p £ µ This is not a problem in and of itself, but the fact that £ does not preserve consistency, together with the treatment of in the elementary semantics, leads to incompleteness.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Proposition 6 (elementary incompleteness</head><formula xml:id="formula_22">) ´p £ µ ´q £ µ ´p £q £ µ in the elementary monoid semantics but ´p £ µ ´q £ µ ´p £ q £ µ in BI's calculus.</formula><p>Proof The key to showing incompleteness is that the formula ´³ £ µ expresses consistency of ³ in the monoid semantics, in the following sense:</p><p>Ñ ´³ £ µ holds iff there is an Ò such that Ò ³.</p><p>Now, we can use the totality of the monoid operation against itself.</p><p>To see why the semantic judgement in the proposition is true, given Ò where Ò p and Ñ where Ñ q, we have that Ò AE Ñ p £ q and, because of the existential formula characterizing ´p £ ¼µ ¼,</p><p>this is enough to give us the judgement.</p><p>The unprovability of the syntactic judgement is easy to establish via the cut-elimination theorem for BI's sequent calculus <ref type="bibr" target="#b40">[41,</ref><ref type="bibr" target="#b41">42]</ref>. (Also, at the end of § 5.3, we give an explicit counter-model.)</p><p>A more conceptual, partial explanation of this incompleteness can be seen by considering where a standard completeness argument breaks down. In this (which is essentially a Yoneda lemma argument), we use the propositions of BI to build a term model. Formally, the term monoid has the set of formulae as its underlying set and the order and monoid structure are given by -³ Ú iff ³ , -³ AE ³ £ and -</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Á.</head><p>Then the main subsidiary lemma is</p><formula xml:id="formula_23">³ is provable iff ³ in the term model</formula><p>This lemma is established by a routine induction on , but there is a sticking point: the proof breaks down when we encounter or . For example, from ³ ¼ ½ it does not follow that ³ ¼ or ³ ½ , as would be needed for the result: take ³ ¼ ½ . Similarly, the monoid semantics would require that ³ never holds: but this is not the case when ³ .</p><p>However, the proof based on the Yoneda lemma does go through for the ´ µ-free fragment, so we may conclude the following:</p><formula xml:id="formula_24">Proposition 7 (completeness for ´ µ-free fragment) If ³ and are ´ µ-free formulae then ³ is provable iff ³ in all monoid models.</formula><p>The absence of is not important, however. The failure of the argument of represents a failure of the easy proof, based on the Yoneda lemma, rather than the failure of completeness. In <ref type="bibr" target="#b41">[42]</ref>, it is shown that this elementary result can be extended to the -free fragment, using an argument (beyond our present scope, but see § 5.2) based on the construction of prime bunches. Proposition 6 shows that the restriction on cannot be removed.</p><p>We emphasize also that the incompleteness of the elementary monoid semantics arises from the interaction between the two implications and inconsistency, .</p><p>So, what are we to make of our completeness and incompleteness results so far ? The answer lies in the internalization of inconsistency by the semantics. Consider that the (complete) algebraic models in § 3.1 or, more generally, the categorical semantics of proofs in <ref type="bibr" target="#b37">[38,</ref><ref type="bibr" target="#b41">42]</ref> include representatives for inconsistency (the initial object, ¼, which interprets ). The elementary forcing semantics, in contrast, can handle inconsistency only by denying the existence of a world at which is forced. Completeness for a monoid-based forcing semantics can be achieved in settings in which internal representives for inconsistency are available. We develop such a semantics <ref type="bibr" target="#b41">[42]</ref> in § § 5 and 5.3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6">Partial Monoids of Resources-as-worlds</head><p>We have seen how a basic model of resource corresponds to the algebra worlds required for BI's possible worlds semantics. We have explained some of the theory but also described a technical problem: the treatment of in the elementary semantics yields an incompleteness. We have discussed internalizing and we present the details of this solution <ref type="bibr" target="#b41">[42]</ref> in § 5.3. In terms of resources, a way to see the problem is to trace it to the assumption that the combining operation AE is always defined; but why, in terms of resources, should it be ?</p><p>In many situations resources are considered as located, or uniquely identifiable. Examples include addressible memory locations in computer memory, web addresses identified by URLs, and people. In such cases, in order to use £ to talk about different collections, it is useful for AE to be partial. For example, if Ñ and Ò describe sets of uniquely identifiable resources, then we can stipulate that Ñ AE Ò is defined only when the resources described are disjoint. Then, in a forumula ³ £ the conjuncts will talk about disjoint collections of the uniquely identified resources. We shall see later that this kind of partiality is useful when accounting for update, and for allocation and deallocation.</p><p>Mathematically, we give a semantics based on (commutative) preordered monoids, Å ´Å AE Úµ, in which AE Å ¢ Å ¶ Å is a partial function (satisfying the evident monotonicity conditions). The key cases in the forcing semantics based on partial monoids are, of course, for and for the multiplicatives:</p><formula xml:id="formula_25">Ñ iff never Ñ ³ £ iff there exist Ò, Ò ¼ such that ´Ò AE Ò ¼ µ ,</formula><p>Ñ Ú Ò AE Ò ¼ , and Ò ³ and Ò ¼ Ñ ³ £ iff for all Ò such that Ò ³, if ´Ñ AE Òµ , then Ñ AE Ò , where denotes definedness. The utility of such semantics is illustrated in the next section, in which we develop concrete computational models based directly upon it.</p><p>The soundness and completeness of the partial monoid semantics for BI with was is shown in <ref type="bibr" target="#b18">[19]</ref>. The methods of <ref type="bibr" target="#b18">[19]</ref> go well beyond the scope of this paper but build on it by using the Grothendieck topological models that we introduce in § 5.3 to formulate the system of semantic tableaux. The analysis in <ref type="bibr" target="#b18">[19]</ref> utilizes labelled semantic tableaux, with the algebra of labels begin given by the worlds of a Grothendieck topology, q.v. § 5.3, and yields several strong logical results for propositional BI, including decidability and the finite model property.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Computational Models</head><p>So far we have provided a conceptual discussion of the notion of resource as a basis for BI's model theory and developed the basic meta-theory of an elementary forcing semantics.</p><p>In this section, we consider BI's use as a basis for a range of models in which the notion of resource is concrete:</p><p>• Petri nets: classical true concurrency <ref type="bibr" target="#b14">[15]</ref>;</p><p>• Ambient logic: mobile processes <ref type="bibr" target="#b7">[8]</ref>;</p><p>• Memory allocation and deallocation: a basic separation model <ref type="bibr" target="#b45">[46,</ref><ref type="bibr" target="#b21">22]</ref>;</p><p>• Pointer logic: program logic for mutable data structures <ref type="bibr" target="#b21">[22]</ref>;</p><p>• Logic programming: sharing and group membership <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3]</ref>; • Money: an example of cost.</p><p>These models give concrete examples of the resource interpretation of BI-algebras and BI's forcing semantics.</p><p>Resource, however, is a multi-faceted notion, with aspects such as location, ownership, protection, and competition for resources. These concepts are reflected, either explicitly or implicitly, in some of the specific models which follow in this section but are not part of the mathematical axiomatization of resource that we have so far developed. To obtain a richer theory would require a thorough treatment of the dynamics of processes. We emphasize, however, that it is not dynamics alone, with (say) associated modalities, that is at issue: rather the question concerns the interaction between dynamics and resource.</p><p>So before considering these concrete examples, it is worth pausing to ask whether it is possible to add structure to our resource semantics, corresponding to ideas such as sharing or ownership, or to add axioms which would exclude examples that are not "resource-like". These questions are the subject of current research but we conjecture that an appropriate logical setting is given by a forcing relation of the form Ñ È ³ in which we intend that Ñ denotes an element of resource, perhaps drawn from a monoidal structure of this kind we have discussed, È denotes a process term located at a resource Ñ, and ³ denotes a propositional assertion in a logic based on BI. The whole judgement, Ñ È ³, is then read as "the propositional assertion ³ is true of process È located at resource Ñ". This gives us a direct way to approach the concept of distributed resources.</p><p>Given a framework along these lines, we can see how it is possible to define modalities which describe the interaction between resources and processes. There are many choices available in their definition, but two general classes may readily be identified. <ref type="foot" target="#foot_2">3</ref> Firstly, "temporal" polymodal necessity and possibility, which require no evolution of the resource component and which provide a basis for the modalities occurring in the examples of this section: Ñ È Ø℄³ iff for every É, if ´Ñ È µ Ø ´Ñ Éµ is an evolution located at Ñ, then Ñ É ³; Ñ È Ø ³ iff for some É, if ´Ñ È µ Ø ´Ñ Éµ is an evolution located at Ñ, then Ñ É ³.</p><p>Here, an evolution Ø, such as an action in a process algebra but whose internal structure is not considered here, is a map between pairs of resources (worlds) and propositions. These judgements indicate how to generalize process logics such as that presented in <ref type="bibr" target="#b33">[34]</ref> to include explicit resource components. Secondly, we may also introduce "spatial" modalities, which do require an evolution of the resource components of their defining judgements and whose relationship with the temporal modalities is analogous to the that between £ and (or, more closely, that between the additive quantifiers ( and ) and their mutliplicative counterparts ( Ò Û and Ò Û ) <ref type="bibr" target="#b37">[38,</ref><ref type="bibr" target="#b40">41,</ref><ref type="bibr" target="#b41">42]</ref>). Here, the intuition is that the resource required for an evolution may be located separately from the data which will evolve. For example, we might define a spatial necessity as Ñ È Ø℄ Ò Û ³ iff for every Ò and É, if ´Ñ È µ Ø ´Ñ AE Ò Éµ is an evolution located at Ò, then Ñ AE Ò É ³.</p><p>The detailed technical development of these ideas is beyond our present scope. For now, we content ourselves with the examples which follow.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Petri Nets</head><p>Petri nets provide a basic, concrete, model of computation, which fits well with the resource interpretation of BI's semantics. A central tenet of net theory is that resource is distributed throughout a net, in the form of tokens that reside in places. A distribution of tokens is called a marking; a net evolves according to local rules which show how to go from one marking to another. As in <ref type="bibr" target="#b14">[15]</ref>, we consider a basic notion of net which does not have capacities.</p><p>Formally, a net AE ´È Ì ÔÖ ÔÓ×Øµ consists of sets È and Ì of places and transitions and two functions ÔÖ ÔÓ×Ø Ì Å, from transitions to markings, where a marking is a finite multiset of places and Å denotes the set of all markings. A marking may be regarded as a function Å È AE from places to natural numbers that is zero on all but finitely many places. Addition of markings is given by ´Å • AEµÔ ÅÔ • AEÔ. We let ℄ denote the empty marking.</p><p>There are several ways that nets can be used to provide a model of BI. One way internalizes the reachability relation on markings, by conflating it with the intuitionistic ordering in the model. If Å and AE are markings, then define</p><formula xml:id="formula_26">Å µ AE iff there are Ø Å ¼ such that Å ÔÖ ´Øµ • Å ¼ and AE ÔÓ×Ø´Øµ • Å ¼</formula><p>We can then define a preorder on markings by</p><formula xml:id="formula_27">Å Ú AE iff there are Å ½ Å Ò such that Å Å ½ µ ¡ ¡ ¡ µ Å Ò AE</formula><p>Then ´Å ℄ • Úµ is a preordered commutative monoid and so this gives us an interpretation of all the connectives. Now, this model is just the Petri net semantics of linear logic described by Engberg and Winskel <ref type="bibr" target="#b14">[15]</ref>, except that they did not include . This omission seems strange in retrospect, given that it exists naturally in the model. Admitting it enables some of the discrepancies between model and logic observed by Engberg and Winskel to be avoided. These include the need to state an axiom for distrubition of over , which is implied by the more primitive rules for , as well as the ability to state negative properties of nets using ³ ³ . A basic example is mutual exclusion, where we say that two places cannot be marked at the same time. To see how this works, consider the following net, which represents processes either producing an item to a buffer or consuming an item from the buffer: b t r Ö and Ø denote ready processes and terminated processes, respectively and represents a buffer whose tokens are items produced. Then we can say that a process is not both ready and terminated using ´Ö£Ø£ µ.</p><p>Using £ , we can further say that a process is not both ready and terminated in any marking reachable from a given marking Å ¼ Å ¼ £ ´Ö £ Ø £ µ. Note the rôle of in Ö £ Ø £ . It enables the state, at a given time, to be partitioned into three parts where Ö is true in one, Ø in another, and where the third part is arbitrary.</p><p>There are two other natural models of BI using Petri nets. One interprets the Ú relation on markings not as reachability, but as multiset inclusion. The other interprets Ú as equality, and is thus a model of Boolean BI.</p><p>However, if we were to detach Ú from reachability, we would have to have some other way of accounting for net dynamics. We could certainly do this by using modalities for transitions (e.g., <ref type="bibr" target="#b43">[44]</ref>), but a detailed development is beyond the scope of this paper. The main question is whether a logic of nets could be obtained that combines a convincing account of multiplicities, as in Engberg and Winskel's work, with a straightforward account of dynamics as in temporal logics.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Ambient Logic</head><p>In <ref type="bibr" target="#b7">[8]</ref>, Cardelli and Gordon introduced a logic, the "ambient logic", for describing properties of their calculus of mobile ambients. Here we relate ambient logic to BI's resource semantics.</p><p>At the core of ambient logic is a notion of a labelled tree. This is described with a process calculus-style notation, as follows:</p><formula xml:id="formula_28">È É ¼ È É È ℄</formula><p>The notation È ℄ is for an edge labelled , atop tree È . These terms come with an equivalence relation , which is the least congruence (with respect to and ℄) making ´¼ µ a total commutative monoid. This monoid thus gives us a possible worlds model of Boolean BI.</p><p>The ambient logic has a modality, the "ambient match" ³℄, for dealing with the labelled part È ℄ in the grammar of tree-terms.</p><p>È ³℄ iff É È É℄ and É ³</p><p>For an example of the interaction of £ and match, ℄℄ £</p><p>℄℄ says that there is a path in the tree consisting of an followed by a and another path starting with an which has no as a successor.</p><p>In the original ambient logic, the trees were combined also with process calculus terms. This is just as in Mads Dam's thesis <ref type="bibr" target="#b9">[10]</ref>, except that ambient logic has the full strangth additives of classical logic, rather than the weaker additives of linear logic (which deny classicaly-valid properties such as distribution of over ) that Dam was concerned to model. In fact, for essentially any process calculus one immediately gets a model of Boolean BI just by observing that parallel composition is part of a commutative monoid, which gives the semantics of multiplicatives, and by interpreting additives using the boolean algebra structure of a powerset.</p><p>In this specific case of ambient logic, however, the interplay between £, ambient match, and temporal modalities allows for compact and intuitive specifications of properties about process mobility. For instance, "eventually the agent crosses the firewall" might be (at least partially) rendered as</p><formula xml:id="formula_29">ÒØ ℄ £ Ö Û ÐÐ ℄ µ ¦ Ö Û ÐÐ ÒØ ℄ £ ℄</formula><p>Similar, that the agent never enters the firewall might be</p><formula xml:id="formula_30">ÒØ ℄ £ Ö Û ÐÐ ℄ µ £ ´ £ Ö Û ÐÐ ÒØ ℄ £ ℄µ</formula><p>Ultimately, the novelty of ambient logic lies in the interaction between location (Ò ℄) and parallelism (rather than only £ as ). In fact, it is not at this time clear if a substructural logic for, say, CCS or -calculus, with £ interpreted directly as , would be a useful logic of processes.</p><p>An odd property of ambient trees is worth mentioning: it is possible to have several paths with the same labels. For instance,</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>¼℄℄</head><p>¼℄℄ is a tree with two paths labelled , and this tree is distinct from ¼℄℄.</p><p>This feature is motivated by the design of the ambient calculus.</p><p>In any case, the ambient logic and its descendents (e.g., <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b5">6]</ref>) give a collection of naturally-occurring examples of the possible world models: Mathematically, all the descendents of ambient logic are based on specific models of the total monoid semantics of BI (advanced by the first author in 1997 and presented in <ref type="bibr" target="#b37">[38,</ref><ref type="bibr" target="#b41">42]</ref>), along with additional connectives or atomic formulae. In particular, ambient logic illustrates our basic point, of the desirability of having full-strength additives alongside multiplicative connectives (consider the use of classical negation in the statement that the agent doesn't cross the firewall). Cardelli and Gordon came to this conclusion about additives independently, which perhaps underlines the naturality of the simple way of combining multiplicatives with full-strength additives, taken by ambient logic and BI.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Resource Allocation and Deallocation: The Basic Separation Model</head><p>The models discussed so far in this section are all based on total monoids: given worlds Ñ and Ò we can always form their combination Ñ AE Ò. However, we have mentioned that BI may also be given a semantics based on partial monoids. Here we provide an example which directly makes use of this semantics. We also show, in § 5.4, that this example may be couched in terms of our most general total semantics. Suppose we are given an infinite set Ê × Ö ¼ Ö ½ . We think of the elements of Ê × as primitive resources, or resource IDs, that can be allocated and deallocated. The partial monoid structure is given by taking a world to be a finite subset of Ê ×, and AE to be union of disjoint sets. In more detail, where denotes undefinedness,</p><formula xml:id="formula_31">Ñ AE Ò Ñ Ò if Ñ Ò otherwise.</formula><p>The unit of AE is the empty set. By taking Ú to be equality we get a model of Boolean BI. (An intuitionistic model is obtained by taking Ú to be inclusion.) With this model, if ³ £ holds for a given collection of resources then ³ and hold for disjoint subcollections. This is an example of what John Reynolds refers to as resource separation <ref type="bibr" target="#b46">[47]</ref>.</p><p>Separation gives us a way to talk about allocation and deallocation of resources. To describe this we consider a simple model where a system state is a pair × Ñ, where × Î Ö Ê × is a function mapping variables (Ü, Ý,...) to IDs and Ñ is a finite set of IDs (thought of as the set of currently active, or allocated, IDs). We consider three actions for altering the state. In the following, Ü and Ý are variables:</p><p>• Ü Ý is the usual assignment command;</p><p>• Ò Û´Üµ generates a new resource ID and binds it to Ü;</p><p>• ×ÔÓ× ´Üµ deallocates the ID bound to Ü.</p><p>In order to describe atomic propositions, we parametrize with the × component, writing Ñ × ³.</p><p>We are technically remaining in a propositional setup, but this obviously paves the wayto a consideration of quantifiers. The basic proposition is the activity assertion Ø´Üµ, which says that the ID denoted by Ü is in the state:</p><formula xml:id="formula_32">Ñ × Ø´Üµ iff ×Ü Ñ.</formula><p>Notice that the semantics of Ø is "exact", in that Ü must describe the only ID in Ñ. We can describe a "loose" variant using Ø´Üµ £ .</p><p>Here is a Hoare logic axiom for allocation <ref type="bibr" target="#b45">[46]</ref>:</p><formula xml:id="formula_33">³ Ò Û´Üµ ³ £ Ø´Üµ</formula><p>where Ü is not free in ³. To understand this axiom, suppose ³ holds of an "active set" Ò before Ò Û´Üµ is executed. Then Ò Û will select some ID Ö not in Ò, bind it to Ü, and add Ö to the active set. In the resulting active set Ò Ö the formula ³ £ Ø´Üµ will hold, because Ø´Üµ will hold in Ö (with the binding ×Ü Ö) while ³ will remain true of Ò.</p><p>Here is the axiom for disposal <ref type="bibr" target="#b21">[22]</ref>:</p><formula xml:id="formula_34">³ £ Ø´Üµ ×ÔÓ× ´Üµ ³</formula><p>In words, if Ü is active, and ³ holds for all the allocated resource IDs other than Ü, then ³ will hold for the entire active set after Ü's ID is removed. (The exact interpretation of Ø is important for this axiom.)</p><p>Notice that there is no "unique reference" property (where only one copy of an ID is present) implicit in the axiom for disposal. The unique reference property is often suggested as being important for ensuring that a disposed reference will not be subsequently used. In fact, however, there are many situations where such a property is impractical to expect, such as when working with doubly-linked lists or graph structures. To describe a simple example violating "unique reference" we use an equality predicate Ü Ý, which holds just if Ü and Ý denote the same ID in ×: Ñ × Ü Ý iff ×Ü ×Ý.</p><p>Then ´Ü Ýµ £ Ø´Üµ ×ÔÓ× ´Üµ Ü Ý is an instance of the ×ÔÓ× axiom. Here, Ü and Ý are aliases (different names for the same ID), but disposal can still be reasoned about. The essential point is that the postcondition does not have Ø´Ýµ or</p><p>Ø´Üµ. This precludes reasoning about subsequent attempts to dispose Ü or Ý (which are in fact the same in the postcondition), because the axiom for disposal requires an activity assertion in its precondition. Aliases of this form can be introduced by assignment. For instance, using the usual Hoare axioms for assignment and sequencing, we could infer</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Ø´Ýµ Ü Ý ×ÔÓ× ´Üµ Ü Ý</head><p>This use of £ to account for disposal in a way that is compatible with aliasing is reminiscent of region-based memory management <ref type="bibr" target="#b49">[50]</ref>; see especially the recent <ref type="bibr" target="#b34">[35]</ref> for a Hoare logic approach to regions.</p><p>Allocation and deallocation are essential operations that systems programs provide for managing resources. But the concept of resource captured by the model in this section is rather trivial: ID's, without contents (essentially like LISP gensym symbols, but with disposal). The same thing can be done with computer memory, where we consider the resources to be cells with contents, but then we have one additional issue to face: update.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Resource Separation, Pointer Aliasing, and Update</head><p>Next we present a model where "resource" corresponds to "portion of computer memory". In this model the memory is made up of cons cells, which can have basic data (such as integers) in their components, or pointers to other cons cells. The model presented in this section is from work on using BI to reason about pointers <ref type="bibr" target="#b21">[22]</ref>, which builds on work of Reynolds <ref type="bibr" target="#b45">[46]</ref>. (In fact the work on allocation and deallocation in the previous section is also from <ref type="bibr" target="#b45">[46,</ref><ref type="bibr" target="#b21">22]</ref>, but for a simplified model where locations or names do not have associated contents.) A related example, presented from the point of view of a dependently-typed -calculus which is intimately related to BI, can be found in <ref type="bibr" target="#b22">[23]</ref>.</p><p>The inclusion of pointers brings out several issues, most importantly sharing. That is, data structures are often constructed so that there are two or more pointers to the same cell, as happens when considering graphs or circular or doubly-linked lists. When this happens, there are multiple ways to refer to the same cell, or in short, there is aliasing. For example, if we use the notations Ü ½ and Ü ¾ to refer to the first and second components of a cons cell then Ü, Ý ¾ and Ü ¾ ¾ are all aliases in the situation represented by the following box-and-pointer diagram:</p><formula xml:id="formula_35">² ± Ö Ö Ö Ö ¹ 3 4</formula><p>x y</p><p>Traditionally, aliasing complicates the logic of update, because an alteration to a single cell can affect the values of many syntactically unrelated expressions. The purpose in this section is to illustrate how this complexity can be avoided, using resource separation. Because aliasing and update are subtle, we treat this model in more detail that the previous ones.</p><p>Formally, the worlds in this model are heaps ¾ À, which are thought of as collections of cons cells in storage:</p><formula xml:id="formula_36">Î Ð ÁÒØ Ò Ð ÄÓ À ÄÓ ¶ Ò Î Ð ¢ Î Ð</formula><p>Here, ÄÓ is an infinite set of locations and ¶ Ò is for finite partial functions. Each cell in memory is identified by a location and when ´ µ ´ µ this represents a situation in which has in its first component and in its second. When ´ µ is undedined this represents a situation where there is no cell in the heap corresponding to .</p><p>We use a combining operation on heaps that is partial:</p><p>AE ¼ denotes the union of disjoint heaps (i.e., the union of functions with disjoint domains); is the empty heap. When the domains of and ¼ overlap, AE ¼ is undefined.</p><p>The order we consider at this point is discrete: the equality relation on À, and the clauses for the additive connectives remain as in the elementary monoid semantics. This gives us a Boolean BI-algebra, where the Boolean algebra part is just the set of subsets of À. (An alternative, intuitionistic, model is also of interest: it works by taking the relation Ú ¼ between worlds to be graph superset of partial functions <ref type="bibr" target="#b45">[46]</ref>.)</p><p>In order to describe atomic propositions, we assume a function × Î Ö Î Ð where Î Ö Ü Ý is a set of variables. The basic proposition is the points-to relation, which has the form Ü , where and range over variables, integers and Ò Ð: Ü iff ×Ü ÓÑ´ µ and ´×Üµ ℄ ℄× ℄ ℄× , where ℄ ℄× gives the value of in ×. Notice the exact nature of this interpretation, where the domain of is required to be a singleton: Ü means that Ü points to in the current heap, and also that Ü is the only cell in the current heap.</p><p>As </p><formula xml:id="formula_37">² ± Ö Ö Ö 4 x y</formula><p>Notice that in each subheap we have a dangling pointer, which is a location not in the domain of the heap.</p><p>Here is a Hoare logic axiom that corresponds to an assignment to the cdr of a cons cell <ref type="bibr" target="#b45">[46]</ref>:</p><formula xml:id="formula_38">´Ü Ý Þµ £ ³ Ü ¾ Û ´Ü Ý Ûµ £ ³</formula><p>The idea of this axiom is as follows: If the precondition holds then, by the semantics of £, we know that ³ must be true for an area of memory that excludes the cell Ü. Therefore, the assignment to Ü ¾ cannot affect ³: hence, we can slot the update to the cell into the postcondition, without needing to check for potential aliases in ³. By using £, the operationally local nature of a heap alteration can be mirrored in the logic.</p><p>Allocation and deallocation can be treated as in the previous subsection:</p><formula xml:id="formula_39">³ £ ´Ü --µ ×ÔÓ× ´Üµ ³ ³ Ò Û´Üµ ³ £ ´Ü --µ</formula><p>In the axiom for Ò Û, we again require that Ü is not free in ³. The --notation is used to indicate an allocated cons cell, where we are unsure of the specific contents. (With quantifiers, Ü --can be regarded as an abbreviation for ÝÞ Ü Ý Þ.)</p><p>Using the rules for update and disposal, here is a proof outline for a pair of statements for deleting a node Þ from the middle of a linked list:</p><formula xml:id="formula_40">´Ü Þµ £ ´Ý µ £ ´Þ Ýµ Ü ¾ Ý ´Ü Ýµ £ ´Ý µ £ ´Þ Ýµ dispose(z)</formula><p>´Ü Ýµ £ ´Ý µ Because of the placement of £ we know that the first statement, Ü ¾ Ý, will not affect either of the assertions Ý or Þ Ý. Similarly, £ ensures that in reasoning about the ×ÔÓ× ´Þµ statement we do not need to check for potential aliases in Ü Ý or Ý .</p><p>While £ is about separation, the implication £ can be used to describe new, or fresh, pieces of storage.</p><p>These two connectives interact in an interesting way: The formula ´Ü ¿ µ £ ´´Ü µ £ ³µ says that ´Ü ¿ µ is true in the current heap, but also that if we update the first component to then ³ will be true. To see why, first note that the semantics of £ splits the heap, say,</p><formula xml:id="formula_41">³ ² Ö 3 x 5</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Rest of Heap</head><p>into two portions, one where ´Ü ¿ µ and a second heap where the location denoted by Ü is dangling:</p><formula xml:id="formula_42">³ ² Ö x</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Rest of Heap</head><p>We have included a dangling pointer out of the rest of the heap here to emphasize that the location might be referenced from within a heap cell, as well as from Ü. Because the association ´Ü ¿ µ has been, in a sense, retracted by deleting the association from the heap in the right conjunct, this frees £ to extend the second heap with a different cons cell. The semantics of £ then ensures that ³ must be true when this second heap is extended with a new binding of location to contents that makes ´Ü µ true:</p><formula xml:id="formula_43">³ ² Ö 7 x 5</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Rest of Heap</head><p>So, the intuitive description in terms of updating follows from several steps in the semantics, which add up to "update as deletion followed by extension". This idea can be used to formulate the weakest precondition for assignment statements Ü ½ Ý and Ü ¾ Ý that alter the first or second component of a cons cell in the heap. Similarly, £ can be used to formulate a weakest precondition form of the rule for Ò Û.</p><p>We conclude by remarking that the semantic structure of this model is incompatible with the formal system of linear logic. To see this, consider that ³ AE ³ always holds in linear logic, using the decomposition ³ ³ AE and the rule of Dereliction for . However, here we have ´Ü ½ ¾µ £ ´Ü ½ ¾µ because the antecedent can hold in a heap where Ü ½ ¾ while the consequent cannot. This shows that there can be no which decomposes ³ into ³ £ in this model.</p><p>We make this point not in criticism of linear logic but merely in support of our contention that there are interesting and naturally occurring models in which both £ and exist independently. It is natural to want to have access to the structure of these models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Logic Programming</head><p>BI gives rise to a notion of logic programming which builds in a sharing interpretation of BI's connectives <ref type="bibr" target="#b37">[38,</ref><ref type="bibr" target="#b40">41,</ref><ref type="bibr" target="#b41">42,</ref><ref type="bibr" target="#b36">37,</ref><ref type="bibr" target="#b1">2]</ref>. Our underlying notion of logic programming is that introduced in <ref type="bibr" target="#b32">[33,</ref><ref type="bibr" target="#b31">32]</ref>, based on the sequent calculus. Programs, È , and goals, , are modelled by the left-and right-hand sides, respectively, of sequents È read as, "Is there an instance of which is a consequence of È ?" <ref type="foot" target="#foot_3">4</ref>In BI, programs are bunches of formulae, consisting of data, or "facts", and procedures, made up of "program clauses". The bunched structure gives rise to a style of programming based on group membership, or controlled access to resources. To see this, consider the bunch</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>´Ô´ ½µ Ô´ ¾µµ ´Ô´ ½µ Ô´ ¾µµ</head><p>Here, Ô´Üµ means "Ü is a person". The bunch structure shows that ½ and ¾ belong to the same group and that ½ and ½ belong to different groups. To say that two individuals may compete, we say simply Ü Ý Ô´Üµ £ Ô´Ýµ £ ÓÑÔ Ø ´Ü Ýµ which is to say that Ü and Ý have access to each other only if they belong to different groups.</p><p>A logic programming language, BLP, based directly on BI has been implemented by Pablo Armelín <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3]</ref>, in the continuation-passing style, using the OCaml system <ref type="bibr" target="#b8">[9]</ref>. The code for the example given above, together with its Prolog equivalents, is discussed below.</p><p>To understand the semantics of logic programming, we start with the fragment of the logic for which uniform proofs are complete for logical consequence. Reading proofs from the root upwards, i.e., using the rules as reduction operators <ref type="bibr" target="#b23">[24]</ref>, uniform proof requires that right rules be applied whenever possible, so that left rules are applied only when the right-hand side is atomic. Uniform proofs are said to be simple just in case the implicational left rules are restricted to be essentially unary. For example, in first-order intuitionistic logic, we get</p><formula xml:id="formula_44">³ Ø Ü℄ « Ø Ü℄ ¬ Ø Ü℄ ³ « ¬ Ä</formula><p>with «, ¬ atomic and « Ø Ü℄ ¬ Ø Ü℄ (often, ³ « is retained in the left-hand premiss).</p><p>In intuitionistic logic, simple uniform proofs, which are goal-directed and in which the non-determinism is confined to the choice of implicational formula, are complete for hereditary Harrop sequents <ref type="bibr" target="#b32">[33,</ref><ref type="bibr" target="#b31">32]</ref>.</p><p>Simple, uniform proofs amount to the analytic notion of resolution. In BI, the corresponding class of sequents may be defined. Bunched hereditary Harrop formulae are given by the following grammar, in which denotes atoms (we simplify a bit, for brevity):</p><formula xml:id="formula_45">Definite formulae £ £ Ü Ò Û Ü Goal formulae £ £ Ü Ò Û Ü</formula><p>Roughly speaking, data is modelled by definite formulae which are atomic (and conjunctions of atoms) and procedures are modelled by implicational definite formulae. The universal quantifiers are used to express the generality of procedures and existentials are used to express what in Prolog are called "logical variables" <ref type="bibr" target="#b24">[25]</ref>. Here, for simplicity, we suppress all first-order and quantificational concerns.</p><p>A bunched hereditary Harrop sequent is a sequent È , where È is a bunch of definite formulae, i.e., a program, consisting of data and procedures. Such sequents are the basis of the bunched logic programming language BLP. A denotational semantics for BLP (in the absence of ) may be given within BI's elementary resource semantics by giving a reconstruction of the Kripke-style least fixed point semantics for intuitionistic logic programming <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b0">1,</ref><ref type="bibr" target="#b31">32,</ref><ref type="bibr" target="#b39">40,</ref><ref type="bibr" target="#b1">2]</ref>. We sketch the key steps, for simplicity in a purely propositional setting, as follows:</p><p>• Define a commutative monoid È ´È ¡ Úµ of programs-as-worlds, in which È is the set of hereditary Harrop bunches, ¡ is £ and its unit is Ñ , and É Ú È just in case, for some È ¼ , É È È ¼ . This reading of programs as worlds treats the data and procedures as accessible resources. As we have suggested, the bunching of the two conjunctions, £ and , allows the expression of access restrictions between groups of data;</p><p>• Interpret goals with respect to programs È as follows:</p><p>℄ ℄´È µ Ê Ê È where Ê denotes resolution proof (i.e., ℄ ℄ ¾ Ó ´ È ÓÔ Ë Ø℄µ, where È is the evident preorder category of programs-as-worlds);</p><p>• An Herbrand interpretation (giving a meaning to a program in terms of the atomic formulae it is able to prove) is then obtained by taking the union of all possible atomic goals:</p><formula xml:id="formula_46">È ℄ ℄ À ℄ ℄´È µ • A complete lattice À of Herbrand interpretations, ℄ ℄ À , is induced as follows:</formula><p>-The least interpretation, À , is given by</p><formula xml:id="formula_47">È ℄ ℄ À , for all È ; -Let È ℄ ℄ À½ÙÀ¾ È ℄ ℄ À½ È ℄ ℄ À¾ and È ℄ ℄ À½ØÀ¾ È ℄ ℄ À½ È ℄ ℄ À¾ ; -Let È ℄ ℄ À½ Ú È ℄ ℄ À¾ just in case È ℄ ℄ À½ È ℄ ℄ À¾ ; •</formula><p>We can now define an operator, Ì À À, on Herbrand interpretations which iteratively constructs a model corresponding to the execution of BLP programs. There are three cases in the iteration, arising from the form of BI's sequent calculus <ref type="bibr" target="#b40">[41,</ref><ref type="bibr" target="#b41">42,</ref><ref type="bibr" target="#b1">2]</ref>. The proof-theoretic details of this system are beyond our scope here but the semantic sense of the three cases should be clear. The first corresponds to instances of the Axiom rule required in BLP <ref type="bibr" target="#b1">[2]</ref>,</p><formula xml:id="formula_48">È ¼¼¼ Ê Á È Ê Ü ÓÑ</formula><p>where È È ¼¼¼ . The second corresponds to the £ Ê × rule <ref type="bibr" target="#b1">[2]</ref>,</p><formula xml:id="formula_49">È ¼ Ê È Ê £ Ê ×</formula><p>where È È ¼ £ , and the third corresponds to the Ê × rule <ref type="bibr" target="#b1">[2]</ref>,</p><formula xml:id="formula_50">È ¼ Ê È ¼¼ Ê Á È Ê Ê ×</formula><p>where È È ¼¼ ´È ¼ µ. Then T is defined as follows:</p><formula xml:id="formula_51">È ℄ ℄ Ì´Àµ Ê Ê È Ê and ℄ ℄ À È ¼¼¼ Á Ê Ê È Ê , £ ¾ È and ℄ ℄ À È ¼ Ê Ê È Ê , ¾ È , ℄ ℄ À È ¼ and ℄ ℄ À È ¼¼ Á ,</formula><p>where may be assumed to be BI's elementary forcing relation, 5 with ℄ ℄ À determining the base case, i.e., ℄ ℄ À provides the required assignment of atoms to worlds, as discussed in § 3.4;</p><p>• The operator T may readily be shown to be monotone and continuous so that, by Tarski's fixed point theorem, we get a semantics for programs È via the least fixed point, Ì ´À µ, of Ì: .</p><formula xml:id="formula_52">Ì ´À µ ¼ Ì ´À µ</formula><p>The resource semantics of BLP arises in two ways here. Firstly, as we have seen, our reading of programs as worlds treats the data and procedures in programs as accessible resources. Secondly, each of the strata of È ℄ ℄ Ì ´À µ , i.e., each power of Ì, is composed of proofs which are representable as terms of the «calculus to which the sharing interpretation described in <ref type="bibr" target="#b37">[38,</ref><ref type="bibr" target="#b41">42]</ref> applies directly. The details of BLP's deterministic operational semantics, and the resource semantics for the construction of proofs that provides, are beyond the scope of this example; see <ref type="bibr" target="#b1">[2]</ref>. Applications of BLP are concerned with controlled access to resources. Recall the example of competing individuals belonging to different groups introduced at the beginning of this section.</p><p>A complete BLP program to describe this set-up is given below. Here, T is , the unit of , and ℄ is additive universal quantification. <ref type="foot" target="#foot_4">6</ref>5 A slight variation is that the semantics for additive implicational goals, , should be given as</p><formula xml:id="formula_53">℄℄ À È iff ℄℄ À ´È ℄µ</formula><p>, where ℄ denotes the definite formula with all top-level conjunctions, or £, replaced (recursively) by ";" or ",", respectively. This "normal form" for programs is needed to allow the completeness of resolution proof.</p><p>(p(a1) ; p(a2)), (p(b1) ; p(b2)), [x,y]compete(x,y) *-p(x) * p(y) * T</p><p>Notice that the definition of compete has been slightly modified to take into account that there might be more than two groups; but they may be disregarded.</p><p>An alternative solution would be to decorate each group with a multiplicative unit to signal that it can be ignored. So we might have for example (p(a1) ; p(a2) ; I), (p(b1) ; p(b2) ; I), (p(a5) ; p(a6) ; I) However, the first approach is to be recommended since it doesn't produce redundant solutions. Adding a unit to each group allows the unit operation to be performed in different places, but without changing the solution.</p><p>The following is an equivalent Prolog program for this problem. It uses tags to distinguish the groups:</p><p>p(a1,t1). p(a2,t1). p(b1,t2). p(b2,t2).</p><p>compete(X,Y) :-p(X,T) , p(Y,U) , T\=U.</p><p>Thinking of political parties as an example of groups, sometimes they split into rival factions but each faction in turn might want to keep its former allies. This situation might be represented by the bunch ´Ô´ ½µ Ô´ ¾µµ ´Ô´ ½µ ´Ô´ ¾½µ Ô´ ¾¾µµ ´Ô´ ¾¿µ Ô´ ¾ µµµ. Notice that ¾½ competes with ½ and ¾ but also with ¾¿ and ¾ . If we call Ü and Ý allies if they do not compete, then despite ½'s being an ally of ¾½, and also of ¾¿, ¾½ and ¾¿ are not allies. The modification of the program to reflect this state of affairs is straightforward:</p><p>(p(a1) ; p(a2)), (p(b1) ; (p(b21) ; p(b22)) , (p(b23) ; p(b24))),</p><p>[x,y]compete(x,y) *-p(x) * p(y) * T Notice that the defining clause needed no modification.</p><p>To modify the Prolog program we could start by adding an extra tag to reflect the structure of the problem like this p(a1,t1,_). p(a2,t1,_). p(b1,t2,_). p(b21,t2,t1). p(b22,t2,t1). p(b23,t2,t2). p(b24,t2,t2). compete(X,Y) :-p(X,T,_) , p(Y,U,_) , T\=U. compete(X,Y) :-p(X,T,V) , p(Y,U,W) , T=U , V\=W. and we should be aware that the whole program has had to be modified to account for the extra tag. Alternatively, a more flexible implementation may be used, like using lists of tags as a second argument:</p><p>where the basic propositions are -coin : I have (at least) one coin in my pocket, -choc : I have enough to buy a chocolate, and -candy : I have enough to buy a candy.</p><p>Here we are regarding (A1) and (A2) as axioms, so coin choc: we indend that you must have at least two coins to buy a choclate.</p><p>With this as background, we now move on to consider some judgements which illustrate the most important, or unusual, consequences of the readings. Certainly, the most distinctive feature of BI is its joint treatment of the two implications. As an example of how £ works, we certainly expect -coin coin £ choc because if I have a coin in my pocket, and if you give me another, then I will have enough to buy a chocolate. However,</p><p>-coin coin choc because a single coin is not enough to buy a chocolate.</p><p>It is here that the reader will detect similarity with Girard's "Marlboro's and Camels" reading of linear logic <ref type="bibr" target="#b20">[21]</ref>. However, the divergences are both more interesting than the similarities and illustrate how great is the difference between BI and linear logic. First, and foremost, Girard's reading is about "proofs-asactions" where, for example, -choc: the (type of the) act of buying a chocolate.</p><p>In contrast, our reading is not about proofs. We do not regard a proposition as a resource and (so) a proof as a way to manipulate resources. Rather, the reading is completely declarative: a proposition is a statement about the world whose judgement of truth may involve consideration of resources.</p><p>Secondly, the difference is not merely one of emphasis but can be seen on the level of logical consequence. For instance, -coin £ choc coin choc is something we would expect, because coin £ choc is true when you have one coin in your pocket but coin choc is not. In linear logic, however, where ³ is rendered as ³ AE , one gets -coin AE choc coin choc ´ coin AEchocµ no matter what coin and choc are, because one can compose on the left with dereliction ³ ³.</p><p>There are other examples in BI which violate the "use once" idea from linear logic (here Á is the unit of the multiplicative conjunction, £):</p><p>-Á ´coin ´coin chocµµ £ choc, and -Á coin £ ´´coin coin chocµ chocµ. Now these judgements seem wrong from the point of view of linear logic because -Á ´coin ²´ coin AE chocµµ AE choc, and -Á coin AE ´ coin AE´ coin AE chocµµ AEchoc.</p><p>The first case would violate the idea that a linear function of type ² AE must use one of its input components but not both, and the second would violate the idea that a linear function cannot use its argument twice. However, if one discards this perspective and thinks declaratively, using the reading of formulae advanced in this section, then the truth of BI's judgements is straightforward.</p><p>In BI, the proof of the last judgement, when viewed as an « -term <ref type="bibr" target="#b37">[38,</ref><ref type="bibr" target="#b36">37,</ref><ref type="bibr" target="#b41">42]</ref>, does indeed use its argument twice. Indeed, in <ref type="bibr" target="#b37">[38]</ref> we advanced a resource reading of proofs to justify this judgement; the declarative justification is much more immediate. All of the true judgements we have claimed in this section, and non-judgements, are correct with respect to the semantics of this paper. (That is, when we assume the (A1) and (A2) as axioms.) All told, what this indicates is that BI and (intuitionistic) linear logic are incomparable extensions of intuitionistic logic, and the basic substructural logic (sometimes called BCI logic or multiplicative intuitionistic linear logic <ref type="bibr" target="#b11">[12]</ref>). That is, when we consider formulae which mix additives and multiplicatives, we have some judgements that hold in BI but not linear logic; and some the other way around.</p><p>While the "proofs-as-actions" reading of linear logic is very appealing, and gives a consistent way of understanding the semantics of the judgements above given by linear logic's consequence relation, we claim that the declarative resource reading gives a clear justification for the exact opposite position on the corresponding judgements, the position taken by BI.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Topological Forcing Semantics</head><p>There are several mathematical ways to incorporate the kind of partiality found in the pointer model, including taking a partial operation as primitive <ref type="bibr" target="#b18">[19]</ref> and taking a ternary relation semantics as primitive. For now, however, we show how to handle inconsistency without resorting to partiality in the semantics. To this end, we observe some of the lessons learnt in the model theory of intuitionistic logic (see <ref type="bibr" target="#b27">[28,</ref><ref type="bibr" target="#b15">16]</ref>). Briefly, Kripke models are a special form of topological model, in which the open sets are the downwardsclosed subsets of a pre-order: Topological models are, in turn, a special kind of Grothendieck sheaf model. Pragmatically speaking, since topological ideas give rise to many interesting models of intuitionistic logic, we would like to have access to these in the model theory of BI.</p><p>While it is possible (see recent work by Galmiche, Méry and Pym <ref type="bibr" target="#b18">[19]</ref>) to give sound and complete elementary models of BI with using partial monoids, we believe the topological (sheaf-theoretic) methods which we adopt in this section, as in <ref type="bibr" target="#b37">[38,</ref><ref type="bibr" target="#b40">41,</ref><ref type="bibr" target="#b36">37,</ref><ref type="bibr" target="#b41">42]</ref>, give an appropriate level of clarity and elegance whilst retaining the total semantics. <ref type="foot" target="#foot_5">7</ref> Moreover, whilst our first class of topological models, based on sheaves, weakens our semantic basis in resources, this basis is recovered in our second class of topological models, based on Grothendieck sheaves over pre-ordered monoids.</p><p>Returning to our theoretical development, we describe three classes of models based on topological structures:</p><p>-Open topological monoids;</p><p>-Sheaves on open topological monoids; -Grothendieck sheaves on preordered monoids.</p><p>Each of these classes of topological models yields (soundness and) completeness theorems for BI. The unifying feature of these models in respect of completeness is their internalization of inconsistency via their semantics for .</p><p>We present the first two briefly, as stepping stones on our way to our final notion of model, for which we present a detailed proof of soundness and completeness. Our main addition in each case will be to include an appropriate continuity condition on the monoid operation in question.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Open Topological Monoids</head><p>A (commutative) topological monoid is a (commutative) monoid in the category Top of topological spaces and continuous maps between them, i.e., a topological space , with open sets Ç´ µ, together with two arrows, a tensor product £ ¢ and its unit ½ such that the usual monoidal diagrams commute <ref type="bibr" target="#b29">[30]</ref>.</p><p>We need to interpret a formula ³ £ as the tensor product, Í £ Î of the interpretations, respectively Í and Î , of ³ and . </p><formula xml:id="formula_54">Í £ ´ Î µ ´Í £ Î µ Proof Þ ¾ Í £ ´Ë Î µ iff there exist Ü ¾ Í and Ý ¾ Î , for some , such that Þ Ü £ Ý iff Þ ¾ Ë ´Í £ Î µ.</formula><p>The interpretation of BI in an open topological monoid now follows exactly as for the interpretation of intuitionistic logic in a topological space, i.e., with ℄ ℄</p><p>, with the addition of the following:</p><formula xml:id="formula_55">³ £ ℄ ℄ ³℄ ℄ £ ℄ ℄ Á℄ ℄ ´½µ and if ³℄ ℄ Í and ℄ ℄ Î , then ³ £ ℄ ℄ Ë ¾Á Ï</formula><p>where each Ï is such that Ï £ Í Î . This interpretation is well-defined: Lemma 9 (multiplicative function space) ³ £ ℄ ℄ £ ³℄ ℄ ℄ ℄.</p><p>Proof We have Ë ¾Á ´Ï £ Íµ Î , so that ´Ë ¾Á Ï µ £ Í Î , by distributivity.</p><p>We can obtain soundness and completeness for these models just as for BI-algebras.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Sheaf-theoretic Models</head><p>An alternative way to give a topological semantics to BI, instead of the algebraic treatment in § 5.1, is to give a forcing semantics in the category of sheaves over a topological monoid. We start with a commutative open topological monoid,</p><p>´ £ µ. The symmetric monoidal structure of a (commutative) topological monoid, , gives rise, via Day's construction of a tensor product <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b37">38]</ref>, to a symmetric monoidal closed structure on the category Ë ´ µ of sheaves on <ref type="bibr" target="#b41">[42]</ref>. </p><formula xml:id="formula_56">Í p iff p℄℄´Í µ for p ¾ Ä Í ³ £ iff for some Î Î ¼ ¾ Ç´ µ, Í Î AE Î ¼ and Î ³ and Î ¼ Í ³ £ iff for all Î ¾ Ç´ µ, Î ³ implies Í AE Î Í ³ iff Í ³ and Í Í ³ iff for some Î Î ¼ ¾ Ç´ µ such that Í Î Î ¼ , Î ³ and Î ¼ Í ³ iff for all Î Í, Î ³ implies Î Í for all Í ¾ Ç´ µ Í Á iff Í Á Í iff Í Table 3: Semantics in Sheaves</formula><p>It is a routine matter to check that this definition is consistent with the usual presentation of the sheaftheoretic semantics of intuitionistic logic <ref type="bibr" target="#b30">[31]</ref>.</p><p>As usual, we write Í just in case Í ³ , where ³ is the formula obtained from by replacing each "," by £ and each ";" by . We then write ³ just in case, for all Í in , if Í , then Í ³. Finally, we write ³ just in case, for all , ³.</p><p>Theorem 11 (soundness and completeness)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>³ if and only if ³</head><p>We do not give detailed proofs of the soundness and completeness of BI for topological Kripke BImodels, preferring to give these results to the more general setting of Grothendieck sheaves in § 5.3. The details of these results can be found in <ref type="bibr" target="#b41">[42]</ref>, for both propositional BI and predicate BI <ref type="bibr" target="#b40">[41]</ref>. However, a few remarks will be informative. We sketch the construction of a term model, which is the basis of a completeness proof <ref type="bibr" target="#b41">[42]</ref>. We define a term topological Kripke BI-model, in which we suppress the routine definition of ℄ ℄, as follows:</p><p>is , where is the set of sets of consistent bunches and where is the evident equality generated by derivability, i.e., if Ë and Ë ¼ are sets of consistent bunches, then Ë Ë ¼ iff, for any ¾ Ë, there exists ¼ ¾ Ë ¼ such that ³ ³ ¼ ;</p><p>-Open sets are elements of closed under prime evaluation of bunches. The prime evaluation, , of a bunch is constructed as follows:</p><p>-Close under consequences generated by the propositions in . For example, closing ´³ ³ £ µ under consequences requires evaluating the bunch to ´ µ, and closing ´³ £ µ under consequences requires evaluating such a bunch to ´³ µ. Let denote the result of all such evaluations of a bunch (see <ref type="bibr" target="#b41">[42]</ref> for the details); -Extend , using ";", with the bunch , to get (and, obviously, we can treat ";" as set union). The bunch is such that if ³, then ³, if ³, then ´³µ, and has the disjunction property.</p><p>So, for any open set Ç, if Ë ¾ Ç is a set of bunches and ¾ Ë, then ¾ Ë.</p><p>Note that prime evaluation generates a set of bunches;</p><p>-The monoid operation, AE, is given by the consistent prime evaluation of the combination of bunches using the comma, ",": £ ¡ ¡ , where denotes isomorphism of labelled trees, so that</p><formula xml:id="formula_57">½ Ñ AE ¡ ½ ¡ Ò ½ £ ¡ ½ ½ £ ¡ ¾ ¾ £ ¡ ½ ¾ £ ¡ ¾ . . . . . .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Ò ´ ¡µ</head><p>where ´ ¡µ £ ¡ £ ¡ ; -The unit, is given by Ñ , where Ñ is the unit of ",";</p><p>-³℄ ℄´ µ ¨ ¨is a proof of ³ . Here we intend a restriction of ¨to normal proofs in BI's natural deduction system <ref type="bibr" target="#b37">[38,</ref><ref type="bibr" target="#b40">41,</ref><ref type="bibr" target="#b41">42]</ref>.</p><p>Notice that we remove the inconsistent bunches and that we will always be left with at least the empty set. This property of the term model, together with the appropriate modificaton of the forcing clause for , yields completeness. To see this, consider the following example: Let p ¾ Ä. Then both p and p £ are consistent bunches but their monoidal combination is not. However, it is easy to see that p AE p £ ´p AE p £ µ Ò ´p AE p £ µ and . How is this to be seen as being consistent with the elementary forcing semantics, in which is never forced ? The answer is simply that, in order for completeness to go through in the presence of inconsistency, we must use a setting in which "never" is part of the model: the empty set fills exactly this rôle: just as in the elementary monoid semantics, models inhabit functor categories Set Å ÓÔ but for completeness with , we refine this setting to that of sheaves (with the corresponding modification of the forcing relation) on an Å which is a topological space.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Grothendieck Sheaf-theoretic Models</head><p>In this section, we give a class of models which generalizes the ones we have so far described and in which we give detailed proofs of soundness and completeness. We work with Grothendieck topologies <ref type="bibr" target="#b30">[31]</ref>, the algebraic generalization of topological spaces, on preordered commutative monoids. This setting allows us to recover the appealing simplicity of the elementary preordered commutative monoid semantics whilst retaining the topological treatment of inconsistency, via the empty set, which gives rise to completeness in the presence of . The connection between the two topological formulations is the usual one <ref type="bibr" target="#b30">[31]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 12 (GTM)</head><formula xml:id="formula_58">A Grothendieck Topological Monoid is a structure Å Å AE Ú Â where Å AE Ú is a preordered commutative monoid and Â is a map Â Å</formula><p>´ ´Åµµ satisfying the following:</p><p>1. Sieve: for any Ñ ¾ Å and Ë ¾ Â´Ñµ, "Ñ Ú Ë", i.e., for any Ñ</p><formula xml:id="formula_59">¼ ¾ Ë, Ñ Ú Ñ ¼ ; 2. Maximality: for any Ò ¼ such that Ò ¼ Ò, Ò ¼ is in Â´Òµ; 3. Stability: for any Ñ, Ò ¾ Å and Ë ¾ Â´Ñµ such that Ñ Ú Ò, there exists Ë ¼ ¾ Â´Òµ such that "Ë Ú Ë ¼ ": for any Ò ¼ ¾ Ë ¼ , there exists Ñ ¼ ¾ Ë such that Ñ ¼ Ú Ò ¼ ; 4. Transitivity: for any Ñ ¾ Å, Ë ¾ Â´Ñµ and Ë Ñ ¼ ¾ Â´Ñ ¼ µ Ñ ¼ ¾Ë , Ë Ñ ¼ ¾Ë Ë Ñ ¼ ¾ Â´Ñµ; 5. Continuity: for any Ñ, Ò ¾ Å and Ë ¾ Â´Ñµ "Ë AE Ò ¾ Â´Ñ AE Òµ", i.e., Ñ ¼ AE Ò Ñ ¼ ¾ Ë ¾ Â´Ñ AE Òµ.</formula><p>Such a Â is usually called a Grothendieck topology.</p><formula xml:id="formula_60">Ñ p iff Ñ ¾ Ô℄ ℄ Ñ iff always Ñ ³ iff Ñ ³ and Ñ Ñ ³ iff for any Ò Ú Ñ, if Ò ³, then Ò Ñ ³</formula><p>iff there exists Ë ¾ Â´Ñµ such that for any Ñ ¼ ¾ Ë,  <ref type="table" target="#tab_5">4</ref>.</p><formula xml:id="formula_61">Ñ ¼ ³ or Ñ ¼ Ñ iff ¾ Â´Ñµ Ñ Á iff there exists Ë ¾ Â´Ñµ such that for any Ñ ¼ ¾ Ë, Ñ ¼ Ú Ñ ³ £ iff there exists Ë ¾ Â´Ñµ such that for any Ñ ¼ ¾ Ë, there exist Ò ³ Ò ¾ Å such that Ñ ¼ Ú Ò ³ AE Ò , Ò ³ ³ and Ò Ñ ³ £ iff for any Ò, if Ò ³ then Ò AE Ñ</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 15</head><p>Let be a GRM and ³ be the formula obtained from a bunch by replacing each ";" by and each "," by £ with association respecting the tree structure of , a sequent ³ is said to be valid in , written ³, if and only if, for any world Ñ ¾ Å, Ñ ³ implies Ñ ³. A sequent ³ is valid, written ³, iff, for any GRM , it is valid in .</p><p>The first two results give the well-definedness of the Grothendieck semantics.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 16 Given an interpretation ℄ ℄ which makes (K) and (Sh) hold for atomic propositions, (K) holds for the interpretation of any BI proposition .</head><p>Proof For any Ñ Ò ¾ Å such that Ò Ú Ñ and Ñ , we must show Ò . The proof proceeds by the induction on the structure of the proposition . In most of the cases, the inductive step is immediate. We give just those cases which differ from the corresponding ones in the preordered commutative monoid semantics.</p><p>-³ : since Ñ ³ , there exists Ë Ñ ¾ Â´Ñµ such that for all Ñ ¼ ¾ Ë Ñ , Ñ ¼ ³ or Ñ ¼</p><p>. By the stability axiom, there exists Ë Ò ¾ Â´Òµ such that for all Ò ¼ ¾ Ë Ò , Ò ¼ Ú Ñ ¼ for some Ñ ¼ ¾ Ë Ñ . Then, by the induction hypothesis, Ò ¼ ³ or Ò ¼ for any Ò ¼ ¾ Ë Ò .</p><p>-´Å AE Ú Âµ satisfies all of the axioms in this section; -(K) implies (Sh); and -when an interpretation makes (K) hold for atomic propositions, the interpretations of ³ ³ £</p><p>Á can be simplifed as follows:</p><formula xml:id="formula_62">Ñ iff never Ñ ³ iff Ñ ³ or Ñ Ñ ³ £ iff there exist Ò ³ Ò such that Ñ Ú Ò ³ AE Ò , Ò ³ ³ and Ò Ñ Á iff Ñ Ú</formula><p>BI is sound and complete with respect to GRMs (we shall sometimes refer to these as "GTM models"). For simplicity, we establish these results for GRMs with respect to BI's Hilbert system, HBI, described in § 3. </p><formula xml:id="formula_63">½ ´³ £ µ £ ³ £ ´ £ µ ¾ ³ £ ´ £ µ ´³ £ µ £ ¿ ³ £ Á ³ ³ ³ £ Á ³ £ £ ³ ³ ³ £ £</formula><p>1. the proof of this case follows from the following lemma:</p><p>Lemma For any Ñ ¾ Å and BI propositions ³ ¼ , ¼ and ¼ , Ñ ´³¼ £ ¼ µ £ ¼ iff there exists Ë ¾ Â´Ñµ such that for any Ñ ¼ ¾ Ë, there exists Ñ</p><formula xml:id="formula_64">¼ , Ñ ¼ and Ñ ¼ in Å such that Ñ ¼ Ú ´ Ñ ¼ AE Ñ ¼ µ AE Ñ ¼ , Ñ ¼ ³ ¼ , Ñ ¼ ¼ and Ñ ¼ ¼ .</formula><p>Suppose the above lemma holds. Then, by the associativity and commutativity of AE, Ñ ´³ £ µ £ iff Ñ ´ £ µ £ ³. As will be shown in 5, this is equivalent to Ñ ³ £ ´ £ µ.</p><p>The proof of the above lemma proceeds using axioms of a Grothendieck topology, as follows:</p><formula xml:id="formula_65">if: for any Ñ ¼ ¾ Ë, since Ñ ¼ AE Ñ ¼ ¾ Â´ Ñ ¼ AE Ñ ¼ µ by the maximality axiom, Ñ ¼ AE Ñ ¼ ³ ¼ £ ¼ . Therefore, Ñ ´³¼ £ ¼ µ £ ¼ . only if: since Ñ ´³¼ £ ¼ µ £ ¼ , there exists Ë ¾ Â´Ñµ such that for any Ñ ¼ ¾ Ë, there exist Ò Ñ ¼ and Ñ ¼ such that Ñ ¼ Ú Ò Ñ ¼ AE Ñ ¼ , Ò Ñ ¼ ³ ¼ £ ¼ and Ñ ¼ ¼ . We'll show that for any Ñ ¼ in Ë, there exists Ë Ñ ¼ such that for any ¾ Ë Ñ ¼ , there exist Ñ ¼ Ñ ¼ satisfying that Ú ´ Ñ ¼ AE Ñ ¼ µ AE Ñ ¼ , Ñ ¼ ³ and Ñ ¼</formula><p>. Then, the conclusion follows from</p><formula xml:id="formula_66">Ë Ñ Ë Ñ ¼ ¾Ë Ë Ñ ¼ , which is in Â´Ñµ by the transitivity axiom. Let's choose Ñ ¼ in Ë. Since Ò Ñ ¼ ³ ¼ £ ¼ , there exists Ë Ò Ñ ¼ such that for any Ù ¾ Ë Ò Ñ ¼ , there exist Ù and Ù satisfying that Ù Ú Ù AE Ù , Ù ³ ¼ and Ù ¼ . Let Ë Ò Ñ ¼ AE Ñ ¼ ÙAE Ñ ¼ Ù ¾ Ë Ò Ñ ¼ . Then, by the continuity of AE, Ë Ò Ñ ¼ AE Ñ ¼ ¾ Â´Ò Ñ ¼ AE Ñ ¼ µ. Since Ñ ¼ Ú Ò Ñ ¼ AE Ñ ¼</formula><p>, by the stability axiom, there exists Ë Ñ ¼ ¾ Â´Ñ ¼ µ such that for any ¾ Ë Ñ ¼ , Ú Ù AE Ñ ¼ for some Ù ¾ Ë Ò Ñ ¼ , which, by the monotonicity of AE, implies that Ú ´ Ù AE Ù µ AE Ñ ¼ .</p><p>2. this case is handled while proving the case ½.</p><p>3. for any Ñ ¾ Å such that Ñ ³ £ Á, there exists Ë ¾ Â´Ñµ such that for any Ñ </p><formula xml:id="formula_67">¼ ¾ Ë, there exist Ñ ¼ Ñ ¼ in Å such that Ñ ¼ Ú Ñ ¼ AE Ñ ¼ , Ñ ¼ ³ and Ñ ¼ Á.</formula><formula xml:id="formula_68">Ñ ¼ ¾ Ë, Ñ ¼ AE Ù Ù ¾ Ë Ñ ¼ ¾ Â´ Ñ ¼ AE Ñ ¼ µ. For any Ñ ¼ ¾ Ë and Ù ¾ Ë Ñ ¼ , since Ñ ¼ AE Ù Ú Ñ ¼ AE Ñ ¼ and Ñ ¼ ³, by (K), Ñ ¼ AE Ù ³.</formula><p>Therefore, by (Sh), Ñ ¼ AE Ñ ¼ ³, and since Ñ ¼ Ú Ñ ¼ AE Ñ ¼ , (K) implies that Ñ ¼ ³ for all Ñ ¼ ¾ Ë. 4. for any Ñ ¾ Å such that Ñ ³, since Ñ Ñ AE , Ñ AE ¾ Â´Ñµ. Since ¾ Â´ µ and Ú , Á. Therefore, Ñ ³ £ Á. 5. for any Ñ ¾ Å such that Ñ ³ £ , there exists Ë ¾ Â´Ñµ such that for any Ñ</p><formula xml:id="formula_69">¼ ¾ Ë, there exist Ñ ¼ Ñ ¼ in Å such that Ñ ¼ ³, Ñ ¼ and Ñ ¼ Ú Ñ ¼ AE Ñ ¼ . Since AE is commutative, for any Ñ ¼ ¾ Ë, Ñ ¼ Ú Ñ ¼ AE Ñ ¼ . Therefore, Ñ ³ £ . 6. for any Ñ ¾ Å such that Ñ ³ £ , there is Ë ¾ Â´Ñµ such that for any Ñ ¼ ¾ Ë, there exist Ñ ¼ Ñ ¼ in Å such that Ñ ¼ ³, Ñ ¼ and Ñ ¼ Ú Ñ ¼ AE Ñ ¼ . Since ³ and , for any Ñ ¼ ¾ Ë, Ñ ¼ and Ñ ¼ . Therefore, Ñ £ . -´£ £ µ induce a residuated (closed) structure. ³ £ ½ ³ £ ³ £ ¾ ³ £ -for any Ñ Ò ¾ Å such that Ñ ³ and Ò</formula><p>, by the maximality axiom, Ñ AE Ò is in Â´Ñ AE Òµ, from which it follows that Ñ AE Ò ³ £ . Since ³ £ , Ñ AE Ò . -for any Ñ ¾ Å such that Ñ ³ £ , by the interpretation of £, there exists Ë ¾ Â´Ñµ such that for any Ñ ¼ ¾ Ë, there exist</p><formula xml:id="formula_70">Ñ ¼ and Ñ ¼ in Ë such that Ñ ¼ Ú Ñ ¼ AE Ñ ¼ , Ñ ¼ ³ and Ñ ¼ . Since ³ £ , for any Ñ ¼ ¾ Ë, Ñ ¼ £ , from which it follows that Ñ ¼ AE Ñ ¼ . By (K), Ñ ¼ for all Ñ ¼ ¾ Ë. By (Sh), Ñ .</formula><p>Proposition 20 (completeness) For any two BI propositions, if ³ in all GTM models, then ³ .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Proof</head><p>The proof proceeds in a similar way to that for the completeness of ´ µ-free fragments, which can be seen, essentially, as constructing a complete model and using Yoneda embedding. Here, in contrast to the term model described for sheaves, disjunction is handled via the Grothendieck topology, Â. The treatment of additives is standard, following the treatment for intuitionistic logic <ref type="bibr" target="#b38">[39]</ref>. We present the completeness argument for intuitionistic as well as substructural connectives, in order to be self-contained. Define a GTM as follows:</p><p>-Å is an equivalent class of a proposition ³, written ³℄, with respect to the relation given by provability;</p><p>-³℄ Ú ℄ iff ³ . It can be easily shown that the choice of ³ and doesn't matter; -³℄ AE ℄ ³ £ ℄. Also, it can be easily shown that the choice doesn't matter; -Á℄;</p><p>-Â´ ³℄µ is a collection of a finite (possibly empty) family ³ ½ ℄ ³ Ò ℄ such that ³ ℄ Ú ³℄ for all and ³℄ Ú ³ ½ ³ Ò ℄. Here again, the choice doesn't matter.</p><p>We claim that the above entities do indeed satisfy all of the conditions required for a model. It is straightforward to show that ´Å Ú AE µ is a preordered commutative monoid and that Â satisfies the sieve and maximality axioms. We deal with the other three conditions.</p><p>-Stability: for any ³℄ ℄ ¾ Å and ³ Ð ℄ Ð¾Ä ¾ Â´ ³℄µ such that ℄ Ú ³℄, let's consider the family ³ Ð ℄ Ð¾Ä . Since for any Ð ¾ Ä, ³ Ð ℄ Ú ℄ and ℄ Ú Ï Ð¾Ä ´³Ð µ℄, the family ³ Ð ℄ Ð¾Ä belongs to Â´ ℄µ. Moreover, ³ Ð ℄ Ú ³ Ð ℄ for all Ð ¾ Ä, from which the other requirement for the stability axiom follows.</p><p>-Transitivity: for any ³℄ ¾ Å, ³ Ð ℄ Ð¾Ä ¾ Â´ ³℄µ and ³ Ð ℄ ¾Ã Ð ¾ Â´ ³ Ð ℄µ Ð¾Ä , let Ë ³ Ð ℄ Ð¾Ä ¾Ã Ð . From the definition of Â, for any Ð ¾ Ä and ¾ Ã Ð , ³ Ð ℄ Ú ³ Ð ℄ Ú ³℄. Again, from the definition of Â, ³℄ Ú Ï Ð¾Ä ³ Ð ℄ Ú Ï Ð¾Ä Ï ¾Ã Ð ³ Ð ℄, which implies ³℄ Ú Ï Ð¾Ä ¾Ã Ð ³ Ð ℄. Therefore, Ë is in Â´ ³℄µ.</p><p>-Continuity: for any ³℄ ℄ ¾ Å and ³ Ð ℄ Ð¾Ä ¾ Â´ ³℄µ, let's consider the family ³ Ð £ ℄ Ð¾Ä .</p><p>Then ³ Ð £ ℄ Ú ³ £ ℄ for any Ð ¾ Ä and ³ £ ℄ Ú ´ÏÐ¾Ä ³ Ð µ £ ℄ Ï Ð¾Ä ´³Ð £ µ℄.</p><p>Let the interpretation ℄ ℄ of atomic propositions be given by p℄℄ ³℄ ³ p . Notice that ℄ ℄ satisfies (K) and (Sh). The resulting model has the following property:</p><p>For any two propositions ³ ¼ and</p><formula xml:id="formula_71">¼ , ³ ¼ ℄ ¼ iff ³ ¼ ¼ .</formula><p>Before considering why the above property holds, notice that the completeness result follows from it in the usual way. We show the above property by the induction on the structure of ¼ .</p><p>-¼ p: this case follows from the definition of ℄ ℄. ´p £ q £ µ iff for any Ò Ú such that Ò there is an Ð such that Ð p £ q and Ð AE Ò iff there are Ð, Ð ¼ such that Ð p, Ð ¼ q and Ð AE Ð ¼ which cannot be so because, for any Ð and Ð ¼ , if Ð p and Ð ¼ q, then Ð AE Ð ¼ . Therefore, ´p £ q £ µ Therefore, ´´p £ µ µ ´´q £ µ µ but ´´p £ q £ µ µ in this model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">The Pointers Model as a Grothendieck Sheaf</head><p>In § 4.4, we presented a model where the combining operation AE is a partial function. As promised in § 4.4, we conclude our treatment of resource semantics by showing that show that this model can be understood as a Grothendieck sheaf, i.e., within the model-theoretic framework based on total monoids.</p><p>Let À be the set of heaps, extended with a new least element, . We can define an operation AE in which AE ¼ is the union of ¼ ¾ À if they are disjoint and otherwise. Also, AE is strict in both arguments and the unit is again the empty heap. The ordering we take is the flat one, in which is least and all other elements are incomparable.</p><p>We can define a Grothendieck simple topology on À , by setting Â´ µ Â´Ñµ Ñ if Ñ</p><p>The points-to relation is extended so that always forces it. Notice that since Â´ µ contains , it follows from the semantic clauses that ³ always holds.</p><p>The connection between the pointer model and this sheaf presentation can then be stated as follows:</p><p>For every ¾ À, ³ in the sheaf model just given iff ³ in the pointer model.</p><p>This does not mention but, because of the way it is treated in the topology, the two models do indeed agree on logical consequence:</p><p>³ in the sheaf model just given iff ³ in the pointer model.</p><p>Finally, the pointer model of Reynolds <ref type="bibr" target="#b45">[46]</ref> can also be seen as a Grothendieck sheaf model. The underlying set of worlds is À , as above, but this time the ordering on worlds is the one in which Ú ¼ if the graph of is a supergraph of the graph of ¼ . This is an intuitionistic model, corresponding to Reynolds' intuitionistic treatment of pointers, whereas the previous one provides a model of Boolean BI.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Towards a Theory of Resource</head><p>We should like to conclude by being clear about what this paper does and does not accomplish. Firstly, starting from a notion of resource (de)composition, we have shown how a natural semantics of BI's formulae may be obtained, and how a number of naturally occurring examples fit well with it. Further, we have shown completeness properties of the semantics. We admit that our most general notion of model, the Grothendieck semantics, is difficult to motivate exclusively in terms of resources but it does allow for a wider range of models, and has paved the way for new results <ref type="bibr" target="#b18">[19]</ref>. In particular, <ref type="bibr" target="#b18">[19]</ref> shows the completeness of the simpler partial monoid semantics, which we would argue can be regarded as a basic model of (de)composition.</p><p>Secondly, we do not claim to have constructed a good general theory of resource. Whilst the theory we have presented is certainly general, it is not very specific to resource: our concrete computational models have a much richer resource-specific structure which is not captured by our general semantics. In a similar vein, we do not claim to have established "the logic of resources". There is currently no such logic: rather, there are different logics -including BI, linear logic, various logics used in AI -which are "resource sensitive" in that they allow for models or interpretations in which a notion of resource may be seen. None of them, however, provides an all-encompassing account.</p><p>As we have indicated in Section 4, to obtain a richer theory would require a thorough treatment of the dynamics of processes, their interaction with resources, and (say) modal logics expressing the properties of interacting processes and resources.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table /><note><p><p>Hilbert-type System for BI: HBI</p>A BI-algebra is a Heyting algebra equipped with an additional residuated commutative monoid structure.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>a first example in this model, the formula ´Ü ¿ Ýµ £ ´Ý Üµ corresponds to the box-andpointer diagram pictured earlier. To relate this picture to the formal definition, if the formula is true at a heap , then we must have that ×Ü and ×Ý are locations, by the definition of , and that they are distinct, by the definition of £. For, £ splits into two subheaps, one where ×Ü is the only defined location and the other where ×Ý is defined. Notice the importance of dangling pointers here: the picture corresponding to</figDesc><table><row><cell>the left conjunct is</cell><cell>3</cell><cell>¹ Ö Ö Ö x y</cell></row><row><cell>while that for the right is</cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head></head><label></label><figDesc>The tensor product of two open sets is not necessarily open, however. Consequently, we must require that the monoidal structure be defined by open maps, i.e., which map open sets to open sets. An open topological monoid is one in which the maps £ and , which define the monoidal structure are open. Let ´ £ µ be a topological monoid. Then, for all open sets Í, Î , ¾ Á, where Á is some indexing set,</figDesc><table><row><cell>Lemma 8 (distributivity)</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head></head><label></label><figDesc>Definition 10 Let Ä be a set of propositional letters.Let  ´ £ µ be an open topological monoid and let È´Äµ denote the collection of BI propositions over a language Ä of propositional letters. A topological ¢ È´Äµ, satisfying the conditions in Table3and ℄ ℄ È´Äµ ¶ Ë ´ µ is a partial function from the BI propositions over Ä to the objects of Ë ´ µ such that: Kripke monotonicity: If Î Í, then, for each ³ ¾ È´Äµ, Í ³ implies Î ³.</figDesc><table><row><cell>Kripke BI-model is a triple</cell><cell></cell></row><row><cell>Ë ´ µ</cell><cell>℄ ℄</cell></row><row><cell cols="2">As before, wherever no confusion will arise, we shall refer to a model</cell></row><row><cell>Ë ´ µ</cell><cell>℄ ℄</cell></row><row><cell>simply as .</cell><cell></cell></row></table><note><p>where Ç´ µ</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 4 :</head><label>4</label><figDesc>Semantics in Grothendieck Sheaves in which Å Å AE Ú Â is a GTM, Â-Ã is a GTI and is a forcing relation on Å ¢ È´Äµ satisfying the conditions given in Table</figDesc><table><row><cell>Definition</cell></row></table><note><p><p><p><p><p>13 (GTI)</p>Let Å be a GTM and È´Äµ be the collection of BI propositions over a language Ä of propositional letters, a Grothendieck Topological Interpretation, GTI, is a function ℄ ℄ Ä ´Åµ satisfying:</p>6. (K): for any Ñ Ò ¾ Å such that Ò Ú Ñ, Ò ¾ p℄℄ implies Ñ ¾ p℄℄; 7. (Sh): for any Ñ ¾ Å and Ë ¾ Â´Ñµ, if, for all Ñ ¼ ¾ Ë, Ñ ¼ ¾ p℄℄, then Ñ ¾ p℄℄.</p>Definition 14 (GRM)</p>A Grothendieck Resource Model, or GRM, is a triple Å Â-Ã</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>Proposition 19 (soundness)</head><label></label><figDesc>For any BI propositions ³ and , if ³ , then ³ Proof It is standard that , , , , induce a Heyting algebra . We show that Á, £ and £ induce a residuated commutative monoid structure -´Á £µ induce a monotone commutative monoidal structure</figDesc><table><row><cell>in any GTM model.</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head></head><label></label><figDesc>By the interpretation of Á, for any Ñ ¼ ¾ Ë, there exists Ë Ñ ¼ ¾ Â´ Ñ ¼ µ such that for any Ù ¾ Ë Ñ ¼ , Ù Ú . By the continuity of AE, for any</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8"><head></head><label></label><figDesc>³ ¼ ℄ ³ and ³ ¼ ℄ iff (by the induction hypothesis) ³ ¼ ³ and ³ ¼ any ³ ½ ℄ such that ³ ½ ℄ Ú ³ ¼ ℄ and ³ ½ ℄ ³, ³ ½ ³ by the induction hypothesis, From the definition of Ú, ³ ½ ³ ¼ . Therefore, ³ ½ ³ by the induction hypothesis. Since ³ ¼ ³℄ Ú ³ ¼ ℄,³ ¼ ³℄. Again, by the induction hypothesis, ³ ¼ ³ . Therefore, ³ ¼ ³ . Then, ³ ¼ ³℄ Ú ³ ¼ ℄ and ³ ¼ ℄ Ú ³ ¼ ℄ and ³ ¼ ℄ Ú ³ ¼ ´³ µ℄ ´³¼ ³µ ´³¼ µ℄. Therefore, Ë ¾ Â´ ³ ¼ ℄µ. Moreover, by the induction hypothesis, ³ ¼ ³℄ ³ and ³ ¼ ℄. Thus, ³ ¼ ℄ ³ ; only if: since ³ ¼ ℄ ³ , there exist Ë ¾ Â´ ³ ¼ ℄µ such that for any³ ¼ ℄ ¾ Ë, ³ ¼ ℄ ³ or ³ ¼ ℄ . By induction hypothesis, for any ³ ¼ ¾ Ë, ³ ¼ ³ or ³ ¼ , which implies ³ ¼ ³ . Ï ³ ¼ ¾Ë ³ ¼ ³ follows from this. Since ³ ¼ ℄ Ú Ï ³ ¼ ¾Ë ³ ¼ ℄, ³ ¼ ³ . ¾ Â´ ³ ¼ ℄µ iff ³ ¼ ℄ Ú ℄ iff ³ ¼ .This case is the counterpart to the case in the sheaf-theoretic semantics discussed in § 5.2. : ³ ¼ ℄ ¾ Â´ ³ ¼ ℄µ and ³ ¼ ℄ Ú Á℄ because ³ ¼ Á. Therefore, ³ ¼ ℄ Á; only if: since ³ ¼ ℄ Á, there exists ³ Ð ℄ Ð¾Ä ¾ Â´ ³ ¼ ℄µ such that ³ Ð ℄ Ú Á℄ for any Ð ¾ Ä, which : if: ³ ¼ ℄ ¾ Â´ ³ ¼ ℄µ and ³ ¼ ℄ Ú ³℄ AE ℄. Moreover, by the induction hypothesis, ³℄ ³ and ℄ . Therefore, ³ ¼ ℄ ³ £ ; only if: since ³ ¼ ℄ ³ £ , there exists ³ Ð ℄ Ð¾Ä ¾ Â´ ³ ¼ ℄µ such that for any Ð ¾ Ä, there exist Ð ℄ Ð ℄ such that ³ Ð ℄ Ú Ð ℄ AE Ð ℄, Ð ℄ ³ and Ð ℄ . By the induction hypothesis, Ð ³ and Ð for any Ð ¾ Ä. For anyÐ ¾ Ä, since ³ Ð ℄ Ú Ð £ Ð ℄, ³ Ð ³£ . Since ³ ¼ Ï Ð¾Ä ³ Ð , ³ ¼ ³ £ . -¼ ³ £ : if: for any ³ ½ ℄ such that ³ ½ ℄ ³, by induction hypothesis, ³ ½ ³. Therefore, ³ ¼ £ ³ ½ .Again, by the induction hypothesis, ³ ¼ £ ³ ½ ℄ . Equivalently, ³ ¼ ℄ AE ³ ½ ℄ ; only if: by the induction hypothesis, ³℄ ³. Since ³ ¼ ℄ ³ £ , ³ ¼ ℄ AE ³℄ . By the induction hypothesis again, ³ ¼ £ ³ . Therefore, ³ ¼ ³ £ .We conclude this part with a simple example, a specific counter-model to the entailment, ´´p £ µ µ ´´q £ µ µ ´p £ q £ µ used in Proposition 6. We define a preordered monoid Å ´Å AE Úµ, where -the carrier set Å £ µ iff for all Ò Ú such that there is an Ð such that Ð p and Ò AE Ð iff there exists Ð such that Ð p and Ð . Since is such an Ð, we have</figDesc><table><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>;</cell></row><row><cell cols="5">-¼ -the order is Û Ú ; : both ³ ¼ ℄</cell><cell>and ³ ¼</cell><cell>always hold.</cell></row><row><cell cols="5">-the multiplication is -¼ ³ : AE e a ³ ¼ ℄ ³ e e a ³ ¼ ³ . -¼ ³ a a</cell><cell>iff</cell></row><row><cell cols="6">-the Grothendieck topology is hypothesis, ³ ½ ℄ Â´ µ</cell><cell>Â´ µ</cell><cell>and ³ ½ Â´ µ</cell><cell>. Again, by the induction</cell></row><row><cell cols="6">Define an interpretation and forcing relation as follows:</cell><cell>.</cell></row><row><cell cols="2">-¼ ³ : -Ñ p iff Ñ</cell><cell></cell><cell></cell><cell>or Ñ</cell><cell>;</cell></row><row><cell cols="4">if: consider Ë -Ñ q iff Ñ</cell><cell cols="2">³ ¼ ³℄ ³ ¼ or Ñ .</cell></row><row><cell>-Ñ</cell><cell cols="2">iff Ñ</cell><cell></cell><cell>.</cell></row><row><cell>Now,</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>´p £ µ</cell><cell>. However,</cell></row><row><cell>-¼</cell><cell cols="2">: ³ ¼ ℄</cell><cell></cell><cell></cell></row><row><cell></cell><cell>implies</cell><cell>Ï</cell><cell cols="3">Ð¾Ä ³ Ð Á. Since ³ ¼ ℄ Ú Ï Ð¾Ä ³ Ð ℄, ³ ¼</cell><cell>Ï</cell><cell>Ð¾Ä ³ Ð . Therefore, ³ ¼ Á.</cell></row></table><note><p>iff : if: for ; only if: since ³ ¼ ³ ³, ³ ¼ ³℄ ³ ℄ iff -¼ Á: if-¼ ³ £ ´p</p></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>Technically, the types of models arising in the two semantics are both instances of the class of categorical models used to interpret BI's proofs. However, they are conceptually quite distinct. We shall return to this point in the sequel.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>Note that this is an affine model: Weakening, ³ £ ³, is admissible and Á .</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_2"><p>Here we assume we are starting from Boolean BI, i.e., with classical additives, so that we may use the ordering, Ú, in a preordered monoid to interpret the temporal modalities. (Of course, the use of simple ordering is itself a simplified treatment of the more general relational notion of modality.) It is possible to take intuitionistic additives, but since they must exploit the ordering Ú for their definition, we must impose, using the techniques discussed in<ref type="bibr" target="#b48">[49]</ref>, additional relational structure to give meaning to the modalities.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_3"><p>In general, contains what Prolog calls "logical variables", which are existentially quantified, and we seek substitution instances of which are consequences of È .</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_4"><p>Note that predicate BI, in addition to the usual additive predication and quantification found in intuitionistic logic and linear logic, also admits multiplicative predication and quantifiers<ref type="bibr" target="#b37">[38,</ref><ref type="bibr" target="#b40">41,</ref><ref type="bibr" target="#b41">42]</ref>. This topic is beyond our present scope.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="7" xml:id="foot_5"><p>As we have seen in § 4.4, in which we discussed a model of BI based on pointers, partial monoids may be seen as a natural basis for resource modelling. Note, however, that we show in § 5.4 the pointers model may be rendered as a Grothendieck sheaf-theoretic model.</p></note>
		</body>
		<back>

			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Yang was supported by NSF grant INT-9813854.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Please note the complexity of this solution compared to the simplicity of the BLP version.</p><p>The bunch structure also helps to give fine control over the scope of predicates. In the example above, we can think of a variety of ways in which constants can be predicated. For example ¾ might be a special kind of person. It would be possible to modify the program in the following way:</p><p>(p(a1) ; q(a2) ; [x]p(x) &lt;-q(x)), (p(b1) ; (p(b21) ; q(b22)) , (p(b23) ; p(b24))), [x,y]compete(x,y) *-p(x) * p(y) * T Now this program says that ¾ is a Õ but also that all Õs are Ôs. However, this relation between Ôs and Õs holds only for the group formed by ½ and ¾, i.e., is local to that world. Other Õs appearing in other places in the program, for example ¾¾, will not be picked up by the local implication, . Note that this local implication matches the ";" combining Ô´ ½µ and Õ´ ¾µ.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6">Money</head><p>We finish this section with an example based on cost; specifically, the use of money to purchase goods. We do this to make a contrast with the well known resource reading of linear logic, exemplified by Girard's famous "Marlboro's and Camels" example.</p><p>In this example, the resources are coins, which can be used to buy chocolates or candy from a vending machine. (This, of course, is borrowed from C.A.R. Hoare.) A model for the discussion in this section is given by the natural numbers, with addition as AE and the usual interpretation of Ú.</p><p>A proposition is a statement about cost and the judgement of consequence is read as follows:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>³</head><p>If I have enough money to make ³ true, then I have enough to make true.</p><p>We posit meanings for the connectives as follows:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>³</head><p>If I were to obtain enough money to make ³ true, then I should also have enough to make true;</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>³</head><p>The money I have got is enough to make ³ true and enough to make true; ³</p><p>The money I have got is enough to make ³ true or to make true; We hope the reader can take these informal descriptions in good spirit. Given these readings the following judgements say that for one coin I can buy a candy and for two I can buy a chocolate.</p><p>(A1) coin candy, and (A2) coin £ coin choc, -: since Ñ , ¾ Â´Ñµ. By the stability axiom, ¾ Â´Òµ.</p><p>-Á: since Ñ Á, there exists Ë Ñ ¾ Â´Ñµ such that Ñ ¼ Ú for all Ñ ¼ ¾ Ë Ñ . By the stability axiom, there is Ë Ò ¾ Â´Òµ such that for any Ò</p><p>. By the stability axiom, there exists</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 17 Given an intepretation ℄ ℄ which makes (K) and (Sh) hold for atomic propositions, (Sh) holds for the interpretaion of any BI proposition .</head><p>Proof For any Ñ ¾ Å and Ë ¾ Â´Ñµ such that Ñ ¼ for all Ñ ¼ ¾ Ë, we should show that Ñ ³.</p><p>We use the induction on the structure of .</p><p>p: this case follows from the assumptions about ℄ ℄.</p><p>-: for any Ò ¾ Å including the case that Ò Ñ, Ò ³.</p><p>-³ : for any Ñ ¼ ¾ Ë, Ñ ¼ ³ and Ñ ¼ . By induction hypothesis, Ñ ³ and Ñ .</p><p>-³ : for any Ò Ú Ñ such that Ò ³, by the stability axiom, there exists Ë Ò ¾ Â´Òµ such that for any </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Contributions to the theory of logic programming</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">R</forename><surname>Apt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">H</forename><surname>Van Emden</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. ACM</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="841" to="862" />
			<date type="published" when="1982">1982</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Bunched logic programming (extended abstract)</title>
		<author>
			<persName><forename type="first">P</forename><surname>Armelín</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Pym</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IJCAR 2001, number 2083 in LNAI</title>
		<meeting>IJCAR 2001, number 2083 in LNAI</meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="289" to="304" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<author>
			<persName><forename type="first">Pablo</forename><surname>Armelín</surname></persName>
		</author>
		<title level="m">Logic Programming with Bunched Logic</title>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
		<respStmt>
			<orgName>University of London, forthcoming</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. thesis</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Linear -calculus and categorical models revisited</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">N</forename><surname>Benton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">M</forename><surname>Bierman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">C V</forename><surname>De Paiva</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M E</forename><surname>Hyland</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Sixth Workshop on Computer Science Logic</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">E</forename><surname>Börger</surname></persName>
		</editor>
		<meeting>the Sixth Workshop on Computer Science Logic<address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1992">1992</date>
			<biblScope unit="volume">702</biblScope>
			<biblScope unit="page" from="61" to="84" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Operating System Principles</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">Brinch</forename><surname>Hansen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1973">1973</date>
			<publisher>Prentice Hall</publisher>
			<pubPlace>New Jersey</pubPlace>
		</imprint>
	</monogr>
	<note>Series in Automatic Computation</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">A spatial logic for querying graphs</title>
		<author>
			<persName><forename type="first">L</forename><surname>Cardelli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Gardner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Ghelli</surname></persName>
		</author>
		<imprint>
			<biblScope unit="page">2</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A query language for semistructured data based on the ambient logic</title>
		<author>
			<persName><forename type="first">L</forename><surname>Cardelli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Ghelli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ESOP&apos;01</title>
		<meeting>ESOP&apos;01</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Anytime, anywhere: modal logics for mobile processes</title>
		<author>
			<persName><forename type="first">L</forename><surname>Cardelli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Gordon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference Record of the 27th. Annual ACM SIGPLAN-SIGACT Symposium on Pronciples of Programming Languages</title>
		<meeting><address><addrLine>New York, Boston, Massachusetts</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">The Functional Approach to Programming</title>
		<author>
			<persName><forename type="first">G</forename><surname>Cousineau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mauny</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998">1998</date>
			<publisher>Cambridge University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Relevance logic and concurrent computation</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Dam</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990">1990</date>
		</imprint>
		<respStmt>
			<orgName>University of Edinburgh</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. thesis</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">On closed categories of functors</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">J</forename><surname>Day</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Reports of the Midwest Category Seminar</title>
		<editor>
			<persName><forename type="first">S</forename><forename type="middle">Mac</forename><surname>Lane</surname></persName>
		</editor>
		<imprint>
			<biblScope unit="volume">137</biblScope>
			<biblScope unit="page" from="1" to="38" />
			<date type="published" when="1970">1970</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>Berlin-New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A historical introduction to substructural logics</title>
		<author>
			<persName><forename type="first">K</forename><surname>Dosen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Substructural Logics</title>
		<editor>
			<persName><forename type="first">K</forename><surname>Dosen</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">P</forename><forename type="middle">Schroeder</forename><surname>Heister</surname></persName>
		</editor>
		<imprint>
			<publisher>Oxford University Press</publisher>
			<date type="published" when="1993">1993</date>
			<biblScope unit="page" from="1" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Relevant logic and entailment</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Dunn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Alternatives to Classical Logic, number 166 in Synthese Library</title>
		<editor>
			<persName><forename type="first">D</forename><surname>Gabbay</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">F</forename><surname>Guenthner</surname></persName>
		</editor>
		<meeting><address><addrLine>Dordrecht, Holland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1986">1986</date>
			<biblScope unit="volume">III</biblScope>
			<biblScope unit="page" from="117" to="224" />
		</imprint>
	</monogr>
	<note>Handbook of Philosophical Logic</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">The semantics of predicate logic as a programming language</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">H</forename><surname>Van Emden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Kowalski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the ACM</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="733" to="742" />
			<date type="published" when="1976">1976</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Completeness results for linear logic on Petri nets</title>
		<author>
			<persName><forename type="first">U</forename><surname>Engberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Winskel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Conference on Mathematical Foundations of Computer Science</title>
		<meeting>the Conference on Mathematical Foundations of Computer Science<address><addrLine>Gdansk, Poland</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1993">1993</date>
			<biblScope unit="volume">711</biblScope>
			<biblScope unit="page" from="442" to="452" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Sheaves and logic</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">P</forename><surname>Fourman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Scott</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Applications of Sheaf Theory to Algebra, Analysis, and Topology</title>
		<title level="s">Lecture Notes in Mathematics</title>
		<editor>
			<persName><forename type="first">M</forename><forename type="middle">P</forename><surname>Fourman</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">C</forename><forename type="middle">J</forename><surname>Mulvey</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Scott</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1979">1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Labelled Deductive Systems; principles and applications</title>
		<author>
			<persName><forename type="first">D</forename><surname>Gabbay</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996">1996</date>
			<publisher>Oxford University Press</publisher>
			<biblScope unit="volume">1</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Fibring Logics</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">M</forename><surname>Gabbay</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998">1998</date>
			<publisher>Oxford University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Resource Tableaux (extended abstract)</title>
		<author>
			<persName><forename type="first">D</forename><surname>Galmiche</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Méry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Pym</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. CSL 2002</title>
		<meeting>CSL 2002<address><addrLine>Edinburgh</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="volume">2471</biblScope>
			<biblScope unit="page" from="183" to="199" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Linear logic</title>
		<author>
			<persName><forename type="first">J.-Y</forename><surname>Girard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theoretical Computer Science</title>
		<imprint>
			<biblScope unit="page" from="1" to="102" />
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Towards a geometry of interaction</title>
		<author>
			<persName><forename type="first">J.-Y</forename><surname>Girard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the AMS-IMS-SIAM Joint Summer Research Conference</title>
		<editor>
			<persName><forename type="first">J</forename><forename type="middle">W</forename><surname>Gray</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><surname>Scedrov</surname></persName>
		</editor>
		<meeting>the AMS-IMS-SIAM Joint Summer Research Conference<address><addrLine>Boulder, Colorado</addrLine></address></meeting>
		<imprint>
			<publisher>American Mathematical Society</publisher>
			<date type="published" when="1987">1989. June 14-20, 1987</date>
			<biblScope unit="volume">92</biblScope>
			<biblScope unit="page" from="69" to="108" />
		</imprint>
	</monogr>
	<note>Categories in Computer Science and Logic</note>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">BI as an assertion language for mutable data structures</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">S</forename><surname>Ishtiaq</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>O'hearn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">28th ACM-SIGPLAN Symposium on Principles of Programming Languages</title>
		<meeting><address><addrLine>London</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computing Machinery</publisher>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="14" to="26" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">A relevant analysis of natural deduction</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">S</forename><surname>Ishtiaq</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Pym</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Logic and Computation</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="809" to="838" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">C</forename><surname>Kleene</surname></persName>
		</author>
		<title level="m">Mathematical Logic</title>
		<imprint>
			<publisher>Wiley and Sons</publisher>
			<date type="published" when="1968">1968</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Logic for Problem-solving</title>
		<author>
			<persName><forename type="first">R</forename><surname>Kowalski</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1979">1979</date>
			<publisher>Elsevier</publisher>
			<pubPlace>North-Holland</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">The finite model property for various fragments of linear logic</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Lafont</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Symb. Logic</title>
		<imprint>
			<biblScope unit="volume">62</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="1202" to="1208" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Deductive Systems and Categories I</title>
		<author>
			<persName><forename type="first">J</forename><surname>Lambek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Math. Systems Theory</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="278" to="318" />
			<date type="published" when="1968">1968</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Introduction to Higher-Order Categorical Logic</title>
		<author>
			<persName><forename type="first">J</forename><surname>Lambek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Scott</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986">1986</date>
			<publisher>Cambridge University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Deciding provability of linear logic formulas</title>
		<author>
			<persName><forename type="first">P</forename><surname>Lincoln</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Linear Logic</title>
		<editor>
			<persName><forename type="first">Y</forename><surname>Lafont</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J.-Y</forename><surname>Girard</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">L</forename><surname>Regnier</surname></persName>
		</editor>
		<imprint>
			<publisher>Cambridge University Press</publisher>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="109" to="122" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Categories for the Working Mathematician</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">Mac</forename><surname>Lane</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1971">1971</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<author>
			<persName><forename type="first">S</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Mac</forename><surname>Lane</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Moerdijk</surname></persName>
		</author>
		<title level="m">Sheaves in Geometry and Logic</title>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">A logical analysis of modules in logic programming</title>
		<author>
			<persName><forename type="first">D</forename><surname>Miller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Logic. Programming</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">1&amp; 2</biblScope>
			<biblScope unit="page" from="431" to="483" />
			<date type="published" when="1981">1981</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Uniform proofs as a foundation for logic programming</title>
		<author>
			<persName><forename type="first">D</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Nadathur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Pfenning</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ščedrov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals of Pure and Applied Logic</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="page" from="125" to="157" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><surname>Milner</surname></persName>
		</author>
		<title level="m">Communication and Concurrency</title>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Prentice Hall</publisher>
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<author>
			<persName><forename type="first">H</forename><surname>Niss</surname></persName>
		</author>
		<title level="m">Regions are Imperative</title>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
		<respStmt>
			<orgName>University of Copenhagen</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">On bunched typing. To appear</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">W</forename><surname>O'hearn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Functional Programming</title>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Resource interpretations, bunched implications and the « -calculus (preliminary version)</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">W</forename><surname>O'hearn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc TLCA &apos;99</title>
		<editor>
			<persName><forename type="first">J.-Y</forename><surname>Girard</surname></persName>
		</editor>
		<meeting>TLCA &apos;99</meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1999">1999</date>
			<biblScope unit="volume">1581</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">The logic of bunched implications</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">W</forename><surname>O'hearn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Pym</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bulletin of Symbolic Logic</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="215" to="244" />
			<date type="published" when="1999-06">June 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Constructive sheaf semantics</title>
		<author>
			<persName><forename type="first">E</forename><surname>Palmgren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematical Logic Quarterly</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="page" from="321" to="225" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title level="m" type="main">Proofs, Search and Computation in General Logic</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Pym</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990">1990</date>
		</imprint>
		<respStmt>
			<orgName>Univ of Edinburgh</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. thesis</note>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">On bunched predicate logic</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Pym</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. LICS&apos;99</title>
		<meeting>LICS&apos;99</meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="183" to="192" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">The Semantics and Proof Theory of the Logic of the Logic of Bunched Implications</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Pym</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Applied Logic Series</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<date type="published" when="2002">2002</date>
			<publisher>Kluwer Academic Publishers</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">Relevant Logic: A Philosophical Examination of Inference</title>
		<author>
			<persName><forename type="first">S</forename><surname>Read</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988">1988</date>
			<pubPlace>Basil Blackwell</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<monogr>
		<title level="m" type="main">Distributed Algorithms: Modeling and Analysis with Petri Nets</title>
		<author>
			<persName><forename type="first">W</forename><surname>Reisig</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998">1998</date>
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
		<title level="m" type="main">An Introduction to Substructural Logics</title>
		<author>
			<persName><forename type="first">G</forename><surname>Restall</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>Routledge</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><surname>Reynolds</surname></persName>
		</author>
		<title level="m">Lectures on reasoning about shared mutable data structure</title>
		<meeting><address><addrLine>Tandil, Argentina</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Separation logic: A logic for shared mutable data structures</title>
		<author>
			<persName><forename type="first">J</forename><surname>Reynolds</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. LICS &apos;02</title>
		<meeting>LICS &apos;02</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">The semantics of entailment, i</title>
		<author>
			<persName><forename type="first">R</forename><surname>Routley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">K</forename><surname>Meyer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Truth, Syntax and Modality</title>
		<editor>
			<persName><forename type="first">H</forename><surname>Leblanc</surname></persName>
		</editor>
		<meeting><address><addrLine>North-Holland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1973">1973</date>
			<biblScope unit="page" from="199" to="243" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<monogr>
		<author>
			<persName><forename type="first">Alex</forename><surname>Simpson</surname></persName>
		</author>
		<title level="m">The Proof Theory and Semantics of Intuitionistic Modal Logic</title>
		<imprint>
			<date type="published" when="1994">1994</date>
		</imprint>
		<respStmt>
			<orgName>University of Edinburgh</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. thesis</note>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Region-based memory management</title>
		<author>
			<persName><forename type="first">Mads</forename><surname>Tofte</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jean-Pierre</forename><surname>Talpin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information and Computation</title>
		<imprint>
			<biblScope unit="volume">132</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="109" to="176" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Lectures on Linear Logic. Number 29 in Lecture Notes</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">S</forename><surname>Trolestra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CSLI</title>
		<imprint>
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">Semantics for relevant logics</title>
		<author>
			<persName><forename type="first">A</forename><surname>Urquhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Symbolic Logic</title>
		<imprint>
			<biblScope unit="page" from="1059" to="1073" />
			<date type="published" when="1972">1972</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<monogr>
		<title level="m" type="main">Topology via Logic</title>
		<author>
			<persName><forename type="first">S</forename><surname>Vickers</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989">1989</date>
			<publisher>Cambridge University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
