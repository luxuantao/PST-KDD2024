<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Survivable Network Design with Degree or Order Constraints</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Chi</forename><surname>Lap</surname></persName>
						</author>
						<author>
							<persName><surname>Lau</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Joseph</forename><forename type="middle">(</forename><surname>Seffi</surname></persName>
						</author>
						<author>
							<persName><forename type="first">)</forename><surname>Naor</surname></persName>
							<email>naor@cs.technion.ac.il</email>
						</author>
						<author>
							<persName><forename type="first">Mohammad</forename><forename type="middle">R</forename><surname>Salavatipour</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Mohit</forename><surname>Singh</surname></persName>
							<email>mohits@andrew.cmu.edu</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">CSE Dept</orgName>
								<orgName type="institution">The Chinese Univ. of Hong Kong Shatin</orgName>
								<address>
									<settlement>Hong Kong</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Microsoft Research One Microsoft Way Redmond</orgName>
								<address>
									<postCode>98052</postCode>
									<region>WA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">Dept. of Computing Science</orgName>
								<orgName type="institution">University of Alberta</orgName>
								<address>
									<settlement>Edmonton, Alberta</settlement>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<orgName type="department">Tepper School of Business</orgName>
								<orgName type="institution">Carnegie Mellon University</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff4">
								<address>
									<settlement>San Diego</settlement>
									<region>California</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Survivable Network Design with Degree or Order Constraints</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">49FF6366895E4B984FD032F8F259B320</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T10:34+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>F.2.2 [Analysis of Algorithms and Problem Complexity]: Non Numerical Algorithms and Problems-Computations on discrete structures; G.2.2 [Discrete Mathematics]: Graph Theory-Network Problems Algorithms</term>
					<term>Performance Approximation algorithms for NP-hard problems</term>
					<term>Network design</term>
					<term>Bounded degree</term>
					<term>Iterative rounding</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We present algorithmic and hardness results for network design problems with degree or order constraints. We first consider the SURVIVABLE NETWORK DESIGN problem with degree constraints on vertices: the objective is to find a minimum cost subgraph satisfying certain connectivity requirements as well as degree upper bounds on the vertices. A well known special case is the MIN-IMUM BOUNDED DEGREE SPANNING TREE problem which has attracted much attention recently. Denote by Bv the degree constraint of vertex v. We present a (2, 2Bv + 3)-approximation algorithm for the element-connectivity SURVIVABLE NETWORK DE-SIGN problem with degree constraints on terminals, i.e., the cost of the solution is at most twice the optimum solution (satisfying the degree bounds), and the degree of each terminal vertex v is at most 2Bv + 3. This extends the most general network design model which admits a 2-approximation algorithm (with no degree constraints), and implies the first constant factor (bicriteria) approximation algorithms for many network design problems with degree constraints, including the MINIMUM BOUNDED DEGREE STEINER TREE problem. In the edge connectivity SURVIVABLE</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Network design is a central topic in combinatorial optimization, approximation algorithms, and operations research. The basic setting of network design problems is to find a minimum cost subgraph satisfying connectivity requirements between vertices. This captures a wide variety of classical problems such as MINIMUM COST FLOW, MINIMUM STEINER TREE, HAMILTONIAN CYCLE, etc. Furthermore, research results in this area provide algorithmic tools and insights (e.g., hardness results) for the design of practical networks such as telecommunication networks. Notable successes along this line of research are Jain's 2-approximation algorithm for the edge-connectivity SURVIVABLE NETWORK DESIGN problem <ref type="bibr" target="#b18">[18]</ref>, and its generalization to element-connectivity <ref type="bibr" target="#b7">[7,</ref><ref type="bibr">5]</ref>.</p><p>A recent research trend is to study a more general class of network design problems where there are natural budget constraints. This is motivated by the need for more sophisticated and realistic models for the design of practical networks. The first type of constraints we study is degree constraints on vertices. The objective is to find a minimum cost subgraph satisfying connectivity requirements as well as degree bounds (e.g. workloads) on the vertices. A well-known example is the MINIMUM BOUNDED DEGREE SPAN-NING TREE problem, which includes the TRAVELING SALESMAN problem as a special case. Very recently, Goemans <ref type="bibr" target="#b14">[14]</ref> obtained an approximation algorithm for this problem, with only an additive error of two on the degrees, following a long line of research. We note that the basis underlying the breakthrough results of Goemans <ref type="bibr" target="#b14">[14]</ref> and Jain <ref type="bibr" target="#b18">[18]</ref> is the uncrossing technique in combinatorial optimization.</p><p>We study a common generalization of the above two problems. Our main result is a generalization of the 2-approximation algorithm for the element-connectivity SURVIVABLE NETWORK DE-SIGN problem (which is the most general network design problem admitting a 2-approximation algorithm), providing near-optimal bounds on the degrees. This yields the first constant factor (bicriteria) approximation algorithms for many network design problems with degree constraints, including MINIMUM BOUNDED DEGREE STEINER NETWORK, MINIMUM BOUNDED DEGREE STEINER TREE, etc. Our results extend to directed graphs and we provide the first constant factor (bicriteria) approximation algorithms for MINIMUM BOUNDED DEGREE ARBORESCENCE, MINIMUM BOUNDED DE-GREE STRONGLY k-EDGE-CONNECTED SUBGRAPH, etc. A striking aspect of our method is its simplicity. Our approach is based on a natural extension of Jain's iterative rounding method. This provides an elegant and unifying algorithmic framework for a broad range of network design problems with degree constraints. In fact, very recently, the techniques used in this paper have been extended to give an (1, Bv + 1)-approximation algorithm for the MINIMUM BOUNDED DEGREE SPANNING TREE problem <ref type="bibr" target="#b33">[33]</ref>, settling a 15year-old conjecture affirmatively. In contrast, we present hardness results for the vertex-connectivity SURVIVABLE NETWORK DE-SIGN problem with degree constraints, even if all edges have zero cost.</p><p>The second type of constraints we study is order constraints. Specifically, we study the problem of finding a minimum cost λedge-connected subgraph with at least k vertices, which we call the (k, λ)-subgraph problem. This generalizes some classical and well-studied problems such as the k-MST problem (which is the (k, 1)-subgraph problem) and the minimum cost λ-edge-connected subgraph problem (which is the (n, λ)-subgraph problem with n being the number of vertices). We give a poly-logarithmic approximation algorithm for the (k, 2)-subgraph problem. However, by relating it to the DENSEST k-SUBGRAPH problem, we give evidence that (k, λ)-subgraph might be hard to approximate for arbitrary λ.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Previous Work</head><p>Network design problems have a very rich literature. For classical network design problems, we shall just highlight a few results and refer the reader to <ref type="bibr" target="#b24">[24]</ref> for a survey. In the SURVIVABLE NET-WORK DESIGN problem, we are given a connectivity requirement ruv for each pair of vertices, and the goal is to find a minimum cost subgraph satisfying the connectivity requirements. This is a very general problem which captures many interesting problems as special cases (e.g., minimum Steiner tree, minimum Steiner forest, minimum k-edge-connected subgraph) and has many applications. Jain <ref type="bibr" target="#b18">[18]</ref> gave a 2-approximation algorithm for the edgeconnectivity SURVIVABLE NETWORK DESIGN problem by using an elegant iterative rounding approach. Later, Fleischer, Jain, and Williamson <ref type="bibr" target="#b7">[7]</ref> have generalized this result to element-connectivity SURVIVABLE NETWORK DESIGN problem (another solution was proposed in <ref type="bibr">[5]</ref>). On the other hand, the vertex-connectivity SUR-VIVABLE NETWORK DESIGN problem is shown to be very hard to approximate <ref type="bibr" target="#b23">[23]</ref>.</p><p>Network design problems with degree constraints have been studied extensively in the last 15 years . A simpler setting is minimizing the maximum degree subgraph (without considering the cost) satisfying certain connectivity requirements. A well-known example is the MINIMUM DEGREE SPANNING TREE (MDST) problem, where the objective is to find a spanning tree of smallest maximum degree. This problem is already NP-hard as it generalizes the HAMILTONIAN PATH problem. Fürer and Raghavachari <ref type="bibr" target="#b8">[8,</ref><ref type="bibr" target="#b9">9]</ref> gave an elegant approximation algorithm returning a solution with maximum degree at most one off the optimal solution. (The result holds for the Steiner version of the problem as well.) Ravi, Raghavachari, and Klein <ref type="bibr" target="#b30">[30,</ref><ref type="bibr" target="#b19">19]</ref> considered the MINIMUM DEGREE k-EDGE-CONNECTED SUBGRAPH problem, and gave an approximation algorithm with performance ratio O(n δ ) for any fixed δ &gt; 0 in polynomial time, and O(log n/ log log n) in sub-exponential time. Recently, Feder, Motwani, and Zhu <ref type="bibr" target="#b6">[6]</ref> obtained a polynomial time O(k log n)-approximation algorithm for this problem, for any fixed k, thus answering an open question in <ref type="bibr" target="#b30">[30]</ref>. Our main result implies the first constant factor approximation algorithm even for the most general edge-connectivity requirements.</p><p>For the more general problem of finding a minimum cost subgraph with given connectivity requirements and degree bounds Bv on every vertex v, the most-studied case is the MINIMUM BOUNDED DEGREE SPANNING TREE (MBDST) problem. Let OPT be the cost of an optimal solution to the MBDST problem. We say an algorithm is an (α, f (Bv))-approximation algorithm if the returned solution has cost at most α • OPT (with OPT being the cost of the optimum solution satisfying the degree bounds) and the degree at each vertex v is at most f (Bv). The first approximation was an (O(log n), O(log n • Bv))-algorithm by <ref type="bibr" target="#b27">[27,</ref><ref type="bibr" target="#b29">29]</ref>. This was subsequently improved in a series of papers <ref type="bibr" target="#b21">[21,</ref><ref type="bibr" target="#b22">22,</ref><ref type="bibr" target="#b3">3,</ref><ref type="bibr" target="#b4">4,</ref><ref type="bibr" target="#b31">31]</ref>. Very recently, Goemans <ref type="bibr" target="#b14">[14]</ref> made a breakthrough on this problem by giving a (1, Bv + 2)-approximation algorithm. Remarkably, the proof of the result of Goemans is considerably simpler than that of the previous results. Very little is known for more general connectivity requirements. For the MINIMUM BOUNDED DEGREE STEINER TREE problem, there is an (O(log n), O(Bv log n))-approximation algorithm <ref type="bibr" target="#b29">[29]</ref>. This bound was improved to (O(1), O(Bv+log n))approximation by <ref type="bibr" target="#b20">[20]</ref>, but the algorithm runs in quasi polynomial time. Our main result implies the first polynomial time (2, 2Bv + 3)-approximation even for the most general model of edge-connectivity requirements.</p><p>For network design problem with order constraints, the most well-studied problem is the k-MST problem, where the objective is to find a minimum cost tree spanning at least k vertices. The approximation factor for this problem was improved from √ k and O(log 2 k) in <ref type="bibr" target="#b28">[28,</ref><ref type="bibr" target="#b1">1]</ref> down to constant in <ref type="bibr" target="#b2">[2,</ref><ref type="bibr" target="#b12">12]</ref> and very recently to 2 <ref type="bibr" target="#b13">[13]</ref>. For the case of metric costs on the edges, the k-TSP problem, which asks to find a minimum cost TSP tour visiting at least k vertices, can also be approximated within factor 2 <ref type="bibr" target="#b13">[13]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">New results</head><p>Suppose that we are given an undirected graph with connectivity requirements ruv on pairs of vertices u and v, and degree bounds Bv on each vertex v. The edge-connectivity SURVIVABLE NET-WORK DESIGN problem with degree constraints asks for a minimum cost subgraph such that there are at least ruv edge disjoint paths between vertices u and v and the degree of each vertex is at most Bv. We obtain the following result. This gives the first constant factor bicriteria approximation algorithms for a broad range of network design problems with degree constraints such as the MINIMUM STEINER TREE problem, the MINIMUM STEINER FOREST problem, the MINIMUM k-EDGE-CONNECTED SUBGRAPH problem, etc. It also implies the first constant factor approximation algorithm for minimizing the maximum degree version of many problems (by setting Bv = B for all v).</p><p>We then consider the more general element-connectivity SUR-VIVABLE NETWORK DESIGN problem with degree constraints. Given an undirected graph G, the set of vertices is partitioned into terminals and non-terminals. The edges and the non-terminals are called elements. Suppose that we are given a connectivity requirement ruv for each pair of terminal vertices u and v, and a degree bound Bv on each terminal vertex v. The objective is to find a minimum cost subgraph such that there are at least ruv element-disjoint paths between terminal vertices u and v and the degree of each terminal vertex v is at most Bv. We obtain the following result. THEOREM 1.2. There is a polynomial time (2, 2Bv + 3)approximation algorithm for the element-connectivity SURVIVABLE NETWORK DESIGN problem with degree constraints on terminals.</p><p>We remark that both Theorems 1.1 and 1.2 hold for (1) connectivity requirements that are weakly supermodular (technical definition is deferred to later); and (2) the case where there are both lower and upper degree bounds. In fact, the lower bounds will never be violated. For directed graphs, we study the problem of finding a minimum cost subgraph which satisfies connectivity requirements that are intersecting supermodular or crossing supermodular (technical definition is deferred to later) and indegree and outdegree constraints. We have not tried to optimize the constants in Theorem 1.3; in fact we believe they can be improved (we leave the details for the journal version). We state it here just to illustrate the generality of the technique and the scope it can be applied to. In contrast to the above theorems, we present a hardness result for the vertex-connectivity version of the SURVIVABLE NETWORK DE-SIGN problem with degree constraints, even if the cost of the subgraph is not considered. THEOREM 1.4. For any &gt; 0, there is no polynomial time (∞, 2 log 1-n Bv)-approximation algorithm for the vertex connectivity SURVIVABLE NETWORK DESIGN problem unless NP ⊆ DT IM E(n polylog (n) ).</p><p>Next, we turn our attention to network design problems with order constraints. We study the (k, λ)-subgraph problem, i.e. the problem of finding a minimum cost λ-edge-connected subgraph with at least k vertices. This problem generalizes the classical k-MST problem to higher connectivity requirements. However, it seems that this line of generalization might be difficult as shown by the following result. THEOREM 1.5. An α-approximation algorithm for the (k, λ)subgraph problem (even for the unweighted case) for arbitrary λ, implies an (α log 2 k)-approximation algorithm for the DENSEST k-SUBGRAPH problem.</p><p>Notice that the best known approximation algorithm for the DENS-EST k-SUBGRAPH problem has ratio O(n 1 3 -) for some constant &gt; 0. Finally, for the (k, 2)-subgraph problem, we are able to obtain the following. THEOREM 1.6. There is an O(log 3 k)-approximation algorithm for the (k, 2)-subgraph problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Techniques and Overview</head><p>Iterative rounding for the edge connectivity SURVIVABLE NET-WORK DESIGN problem (without degree constraints) works as follows. Formulate the SURVIVABLE NETWORK DESIGN problem as an integer program, and then solve the linear programming relaxation of the problem to find a basic optimum solution x. Pick an edge e * with highest value (i.e. xe * ≥ xe for all e ∈ E) and add it to the solution subgraph H (initially H is empty). Then consider the residual problem, where the edges in H are pre-selected, and repeat the above procedure (find a basic optimum solution, add an edge with highest value to H, and construct the residual problem) until all the connectivity requirements are satisfied. Jain <ref type="bibr" target="#b18">[18]</ref> proved that the edge picked in each iteration has value at least 1/2 (i.e. xe * ≥ 1/2), implying a 2-approximation algorithm for the problem.</p><p>We return to our problem. The starting point is that degree constraints are defined only on single vertices, and so the uncrossing technique as in <ref type="bibr" target="#b18">[18,</ref><ref type="bibr" target="#b14">14]</ref> can be applied to show that a basic optimal solution is characterized by a laminar family of tight sets. This immediately implies that, in the first iteration, there exists an edge having value at least 1/2. Now comes the key difference. Since degree constraints are packing constraints, we must allow for nonintegral degree constraints in the residual problem, otherwise the residual problem may be infeasible, or its cost may significantly increase. By doing so, however, it is not necessarily true anymore that the picked edges in later iterations have value at least 1/2. We are indeed going to decrease the degree constraints by fractional values ≥ 1/2. However, to overcome the latter difficulty the "problematic" degree constraints are identified, deleted from the residual problem, and a basic solution is computed again. This incurs an extra additive constant 3 in the approximation ratio. Once "problematic" degree constraints are deleted, we can show that the picked edges in the residual problems always have value at least 1/2 (even though there can be non-integral degree constraints). This implies a (2, 2Bv + 3)-approximation algorithm for the problem.</p><p>The above technique is also adapted to prove the claimed guarantees for the element connectivity SURVIVABLE NETWORK DE-SIGN problem (Theorem 1.2) and for the directed graph result (Theorem 1.3). In fact, the technique developed is so general and powerful that it can be extended to settle the conjecture on the MINIMUM BOUNDED DEGREE SPANNING TREE problem <ref type="bibr" target="#b33">[33]</ref> affirmatively, i.e. to give a (1, Bv + 1)-approximation algorithm for the MBDST problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">SURVIVABLE NETWORK DESIGN WITH DEGREE CONSTRAINTS</head><p>For ease of exposition, we start with Theorem 1.1. Theorem 1.2 is deferred to the full version of this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Edge-Connectivity SNDP with Degree Constraints</head><p>This section addresses a generalization of the EC-SNDP with non-uniform upper and lower bounds on vertex degrees, and presents a bicriteria approximation algorithm which will imply Theorem 1.1. More specifically, assume we are given a complete graph G = (V, E) and nonnegative costs c : E → R + for the edges, an integer valued connectivity requirements function ri,j on pairs of vertices i, j, and a degree upper bound Bi and lower bound Li for each vertex i. We also have an upper-bound Ue ≥ 1 on the multiplicity of edge e in the solution (which would be 1 if each edge can be picked only once). The goal is to find a subset of edges F of minimum cost such that the subgraph H = (V, F ) satisfies the connectivity requirements and the degree bounds, that is, H has ri,j edge disjoint paths between vertices i, j, for each pair i, j, and each vertex i has Li ≤ deg H (i) ≤ Bi and each edge e appears at most Ue times in H.</p><p>Our method is a simple extension of Jain's iterative rounding method for solving EC-SNDP (above problem without degree constraints). Jain's method consists of solving an LP (linear programming) relaxation, finding an optimal basic solution x * , rounding an edge e with x * e ≥<ref type="foot" target="#foot_0">1</ref> 2 to 1, and then repeating with a new LP relaxation for the residual problem (the problem obtained from the original one by adding edge e to the solution subgraph). The key point in Jain's method and proof is that every basic solution has an edge with value ≥ 1  2 . We show that with some extra care, the same property holds in our more general setting. Thus our method finds a subgraph that satisfies all of the edge connectivity requirements, such that the degree of every vertex i is at least Li and at most 2Bi + 3 and has cost within a factor of 2 of the LP optimal cost 1 .</p><p>An integer function on sets of vertices f :</p><formula xml:id="formula_0">2 V → Z + that has f (V ) = 0 is called weakly supermodular if one of the two inequal- ities: f (A) + f (B) ≤ f (A ∩ B) + f (A ∪ B) or f (A) + f (B) ≤ f (A -B) + f (B -A), holds for every pair of sets A, B ⊆ V with A ∩ B = ∅.</formula><p>An important point in Jain's method is that the connectivity requirements are specified via a weakly supermodular function f on the sets of vertices; it is well known that a connectiv- 3. return H = (V, F ).</p><formula xml:id="formula_1">1. Initialization F ← ∅, f ← f , and ∀i ∈ V : B i = Bi; 2. While f = ∅ do (a)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 1: Bounded Degree EC-SND Algorithm</head><p>ity requirement function ri,j (i.e., r : V × V → Z + ) is captured by a weakly supermodular function f . When we update the LP from one iteration to the next one (to account for one or more edges being added to the solution subgraph), it is easy to update the function f and to verify that the new function stays weakly supermodular. We denote x(U ) := P e∈U xe, and δ(S) for a set S ⊂ V denotes the set of edges with exactly one end-point in S. Here is the LP relaxation for EC-SNDP with degree bounds:</p><formula xml:id="formula_2">(LP) minimize zLP = X e∈E ce xe subject to x(δ(S)) ≥ f (S), ∀ S ⊆ V x(δ(i)) ≥ Lv, ∀ v ∈ V x(δ(i)) ≤ Bv, ∀ v ∈ V 0 ≤ xe ≤ Ue ∀ e ∈ E</formula><p>Clearly the first part of Theorem 1.1 follows from the following.</p><p>THEOREM 2.1. If the LP has an optimal solution of cost zLP , then there exists an integral solution x of cost ≤ 2zLP that satisfies all of the constraints on f and Li ≤ P e∈δ(i) xe ≤ 2Bi + 3, ∀i ∈ V . Moreover, x can be computed in polynomial time.</p><p>The proof of this theorem follows from an extension of Jain's method <ref type="bibr" target="#b18">[18]</ref> explained below. First note that any degree lower bound constraint can be considered as a connectivity constraint (with f ({v}) = Lv for the cut S = {v}). By doing so, the new function f obtained from the connectivity constraints and degree lower bounds remains weakly supermodular. Therefore, if we satisfy all the connectivity constraints then we have satisfied the degree lower bounds too. So from now on, we assume that aside from connectivity constraints we only have degree upper bounds. We simply refer to them as degree constraints. Since the algorithm may change the degree bounds Bi's to fractional values, we may assume that Bi's are all fractional.</p><p>We say that a pair of sets A, B intersect properly if all of the sets A∩B, A-B, B-A are nonempty, and we say that a family of sets L = {A1, A2, . . . , A } is laminar if no two of its sets are properly intersecting. For any set A ⊆ V , let χ A denote the incidence vector of the set of edges δ(A); note that in the constraints matrix of the LP, χ A is the row for the set A (the constraint for A may be either a connectivity constraint or a degree bound). Consider any solution</p><p>x of the LP. We call a set of vertices A tight (w.r.t. x) if either A = {v} and x satisfies the degree constraint for v with equality, x(δ(v)) = Bv, or x satisfies the connectivity constraint for A with equality, x(δ(A)) = f (A) (in the latter case, A may be a singleton or not). The following lemma characterizes the tight constraints (i.e. constraints satisfied as equalities) of a basic feasible solution.</p><p>LEMMA 2.2. Let the requirement function f of (LP) be weakly supermodular, and let x be a basic solution of (LP) such that 0 &lt; xe &lt; 1 for all edges e ∈ E. Then, there exists a laminar family L of tight sets such that L partitions into a set of singletons L for the degree constraints, and the remaining sets L = L -L for the connectivity constraints, such that:</p><formula xml:id="formula_3">(i) Every set A = {v} ∈ L has Bv &gt; 0 and every set A ∈ L has f (A) ≥ 1. (ii) |L| = |E|. (iii) The vectors χ A, A ∈ L, are linearly independent. (iv) x is the unique solution to: {x(δ(v)) = Bv, ∀{v} ∈ L } S {x(δ(A)) = f (A), ∀A ∈ L }.</formula><p>PROOF. The proof follows from the uncrossing method, see Lemmas 4.1-4.3 of <ref type="bibr" target="#b18">[18]</ref>, or Chapter 52.4 of <ref type="bibr" target="#b32">[32]</ref>. The main point is that if two tight sets A, B are properly intersecting then neither can be a singleton set, so the connectivity constraints for A, B must be holding with equality (the degree constraints are irrelevant); then either A ∩ B, A ∪ B are tight and</p><formula xml:id="formula_4">χ A + χ B = χ A∩B + χ A∪B or A -B, B -A are tight and χ A + χ B = χ A-B + χ B-A.</formula><p>The algorithm is now given in Figure <ref type="figure">1</ref>. The following lemma is similar to the key lemma in <ref type="bibr" target="#b18">[18]</ref>. LEMMA 2.3. Let L be a laminar family of tight sets satisfying conditions (i)-(iv) in Lemma 2.2. Moreover, suppose that: 1) each f (A) is an integer, for A ⊆ V , and 2) each vertex i that has a degree constraint has at least five incident edges with non-zero values. Then, in the unique solution x to the system, there is an edge e * such that xe * ≥ 1  2 .</p><p>Now we give the sketch of the proof of Lemma 2.3. This is similar to the proof of key lemma in <ref type="bibr" target="#b18">[18]</ref> as described in <ref type="bibr" target="#b34">[34]</ref>(Theorem 23.6). Let L be the laminar family of tight sets obtained in Lemma 2.2 when applied to the basic solution just before we execute line 2c. The number of sets in L is equal to the number of edges in G. We can view L as a forest of rooted trees where each vertex in the tree corresponds to a set in L and a root is a set not contained in any other set. Set T is the parent of S if it is the smallest set containing S. Following terminology of <ref type="bibr" target="#b34">[34]</ref>, S is said to own end-point v of edge e = (u, v) if S is the smallest set containing v. A subtree owns e if one of the sets of L corresponding to the vertices in that subtree owns e. Note that there are a total of 2m end-points in G. The proof is established by showing that if every edge e has xe &lt; 1/2 then we can assign end-points to the sets in such a way that for every set S, S gets at least 3 end-points and each of its descendants gets 2 endpoints. We get a contradiction of having more than 2m end-points, once this argument is applied to the roots of the trees in the forest of laminar family. We need one more definition from <ref type="bibr" target="#b34">[34]</ref>. For every set S ∈ L we define the corequirement of S as coreq(S) = 1  2 |δ(S)|f (S). The counting argument leading to a contradiction is done through the following lemma which is essentially Lemma 23.21 of <ref type="bibr" target="#b34">[34]</ref>. LEMMA 2.4. Let T be a subtree rooted at S and assume that ∀e, xe &lt; 1/2. The endpoints owned by T can be redistributed in such a way that S gets at least 3 endpoints and each of its descendants gets 2. Furthermore, if coreq(S) = 1/2, then S gets at least 4 endpoints and if S is a degree constraint then it gets at least 5 endpoints.</p><p>PROOF. First, note that the fractional-value tight sets are singletons coming from degree constraints. Each degree constraint is a leaf in the forest and each owns at least 5 endpoints by the assumption on x (line 2b). The same argument as in <ref type="bibr" target="#b34">[34]</ref> shows that every other leaf (which is not a degree constraint) satisfies the requirements of the lemma. We say a set S has a surplus of p if p + 2 endpoints have been assigned to it. Consider a non-leaf set S.</p><p>(1) If S has two or more children, one of which is a degree constraint, then it can collect three endpoints from the surplus of its degree constraint child, and one endpoint from the surplus of one if its other children, for a total of at least 4.</p><p>(2) If S has only one child, say S , and it is a degree constraint, then since δG(S) = δG(S ) (by linear independence), S owns at least one endpoint. It can also collect 3 endpoints from the surplus of S , for a total of at least 4.</p><p>(3) If none of the children of S are degree constraints, then the same analysis as in <ref type="bibr" target="#b34">[34]</ref> shows that S satisfies the requirements of the lemma.</p><p>We are now ready to prove Theorem 2.1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Proof of Theorem 2.1:</head><p>The results of Jain <ref type="bibr" target="#b18">[18]</ref> and Grötschel et al., <ref type="bibr" target="#b16">[16,</ref><ref type="bibr">Theorem 6.4.9]</ref> show that a basic optimal solution x * of the initial LP (if it exists) can be found in polynomial time. It can be seen that the updated function f stays weakly supermodular (since we are subtracting a symmetric submodular function). It is clear that the final edge set F (at termination) satisfies all of the connectivity requirements.</p><p>We need to prove that the cost of F is ≤ 2zLP , where zLP is the cost of x * (the optimal solution of the initial LP) and that deg F (i) ≤ 2Bi + 3 for all vertices i. We prove the former by induction on the number of iterations in which line 2c is executed. The base case is clear since we round up edges e with xe ≥ 1/2. The induction hypothesis is that the algorithm finds an edge set F of cost ≤ 2z LP that satisfies the connectivity constraints where z LP is the solution to the current LP. Now, zLP ≥ z LP + ce 2 , because x * restricted to the edges in E -F satisfies all the constraints of current LP (this needs detailed verification for the connectivity constraints and for the degree bounds) and the cost of x * restricted to the edges in</p><formula xml:id="formula_5">E -F is ≤ zLP -ce 2 , hence, z LP ≤ zLP -ce 2 . Hence, the cost of F is c(F ) = c(F ) + ce ≤ 2z LP + ce ≤ 2zLP .</formula><p>Finally we prove that for every vertex i ∈ V : deg F (i) ≤ 2Bi + 3. Consider a degree constraint, say for vertex i, and focus on the last iteration in which B i changes or the constraint gets deleted in line 2b (so B i &gt; 0 and we will not add any edge incident to i in future iterations). Suppose that we have added α edges incident to vertex i before this iteration. Since each edge added had value</p><formula xml:id="formula_6">≥ 1/2: Bi ≥ α 2 + B i .</formula><p>If in this iteration we add β ≥ 1 more edges incident to i then the final degree of i will be α + β (by the assumption that this is the last such iteration); and we must have had B i ≥ β/2 (because xe ≥ 1/2, we have xe ≥ xe /2); therefore we have: α + β ≤ 2Bi. If we delete this constraint at this iteration (in line 2b) and solve the problem for this relaxed version, in the worst case, the final solution contains all the (at most) 4 remaining edges incident with vertex i. So the degree of i will be α + 4 whereas Bi (the initial degree bound for i) is at least α 2 + B i , which implies that α + 4 ≤ 2Bi + 4 -2B i , and since α + 4 is an integer and B i &gt; 0: α + 4 ≤ 2Bi + 3.</p><p>2</p><p>Remark 1: One may wonder whether the bicriteria approximation guarantee of this theorem is best possible. The following example shows that the integrality gap of the LP is at least the min-imum between (2, 2Bv + 1) and (2, Bv + 2). That is, if the LP is feasible and has an optimal solution with cost zLP , then in any integral solution the cost is at least 2zLP , and each vertex v has degree at least 2Bv + 1 or Bv + 2 (note that it is well-known that if we do not have degree bounds then the integrality gap is at least 2). Take a 3-regular 3-edge connected graph G with no Hamiltonian path. 2 Let rij = 1 for every pair of vertices in G and for all i ∈ V , let Bi = 1. Assigning xe = 1/3 to every edge gives a feasible solution with cost |V (G)|/2 and degree bounds satisfied. It's not hard to see that this is also an optimal solution. On the other hand, any feasible integer solution with degree bounds at most 2 (which is 2Bi = Bi + 1) needs to be a Hamiltonian path in G.</p><p>Remark 2: Our iterative rounding method applies also to the setting of minimizing the maximum degree subject to edge-connectivity constraints. We start with the above LP and introduce a new variable Δ, and replacing the degree constraints x(δ(i)) ≤ Bi, ∀i ∈ V by x(δ(i)) ≤ Δ, ∀i ∈ V . The objective function is to minimize Δ. Let (LP-Δ) denote this linear program. The following theorem follows immediately from Theorem 2.1, which implies the first constant factor approximation algorithm for many smallest maximum degree subgraph (satisfying connectivity requirements) problems. THEOREM 2.5. If (LP-Δ) has an optimal solution with objective value Δ * , then there exists an integral solution x of maximum degree ≤ 2 Δ * +3 that satisfies all of the constraints on f . Moreover, x can be computed in polynomial time.</p><p>Remark 3: For the average degree claim, notice that the number of edges in the support is at most 2n -1, since a basic feasible solution is characterized by a laminar family which has at most 2n -1 members. A naive argument (even if we take all the edges in the support) shows that the average degree bound is violated by an additive constant 4; this can be improved to 2 by a more careful argument, as follows.</p><p>Let's assume that B is the average degree upper bound (i.e. B =</p><formula xml:id="formula_7">1 n P i∈V Bi).</formula><p>Then the arguments in the proof of Theorem 2.1 can also be used to show that in the final solution, the average degree of the vertices is at most B + 2; in other words, the degree of each vertex v in the final solution, on average, is at most Bv + 2 (i.e. the second part of Theorem 1.1). To prove this, we modify each iteration of the algorithm by adding the following line after line 2a and before line 2b: (a') If there are any edges e = (u, v) with xe ≥ 1 then add a copy of e to F ; decrease Ue and the bounds for B u and B v by 1 and go to Step 2d.</p><p>It is easy to check that the same analysis shows that with this reformulation the cost of the solution is still at most 2zLP .</p><p>Consider the first iteration in which we have a totally fractional solution, i.e. xe &lt; 1 for all edges e. For each vertex v let αv ≥ 0 be the number of edges incident with vertex v selected so far; thus B v = Bvαv because all the edges e selected so far had xe ≥ 1, and the degree bounds were decremented by 1. CLAIM 2.6. From now until the end of the algorithm, we select a total of at most 2n -1 other edges. 2 Such graphs exist. The following construction was brought to our attention by Jim Geelen and Jacques Verstraete. Let P denote the Petersen graph and Pv be the graph obtained from it by deleting one vertex v, and let us call the neighbors of v in P as w1, w2, and w3 (so these 3 vertices have degree 2 in Pv). Now, take 3 copies of Pv, and 3 new vertices v1, v2, and v3, and attach them as follows: add edges from vj to each of the 3 copies of wj (1 ≤ j ≤ 3). It's not hard to argue that this graph on 30 vertices does not have any Hamiltonian path. PROOF. By Lemma 2.2, the number of sets in L is equal to the number of edges (remaining) in the graph. Also, since the ground set has n vertices, an easy induction shows that the number of sets in L is at most 2n -1. Therefore the number of edges in G (with non-zero values) is at most 2n -1.</p><p>Each time we select an edge e with xe ≥ 1/2, we increase the total degree by two (as it has two end-points), whereas the LP would increase the total degree by at least 1 (at least 1/2 for each endpoint). So we increase the total degrees by an extra (at most) 1 in every iteration with respect to the LP solution. Since there are at most 2n -1 iterations left (by the above claim), we increase the total degrees by an extra amount of at most 2n -1 (compared to LP), which is an average of at most 2 per vertex.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Directed Graphs</head><p>Our iterated rounding technique extends to directed graphs with some restricted types of connectivity requirements and degree bounds, via the results of Melkonian and Tardos <ref type="bibr" target="#b26">[26]</ref>.</p><p>For a set of vertices S, δ out (S) denotes the set of arcs {ij ∈ E | i ∈ S, j ∈ S}, and δ in (S) denotes the set of arcs {ij ∈ E | i ∈ S, j ∈ S}. An integer function on sets of vertices f : 2 V → Z + is called crossing supermodular if the inequality</p><formula xml:id="formula_8">f (A) + f (B) ≤ f (A ∩ B) + f (A ∪ B)</formula><p>holds for every pair of sets A, B ⊆ V such that A ∩ B = ∅ and A ∪ B = V . The connectivity requirement of "k-edge-connected spanning subgraph" can be formulated via the crossing supermodular function f (S) = k, ∀∅ = S V , but the connectivity requirement of "directed Steiner tree" cannot be so formulated. An integer function on sets of vertices f : 2 V → Z + is called intersecting supermodular if the inequality</p><formula xml:id="formula_9">f (A) + f (B) ≤ f (A ∩ B) + f (A ∪ B)</formula><p>holds for every pair of sets A, B ⊆ V such that A ∩ B = ∅. This is a stronger requirement than crossing supermodularity; for example the connectivity requirements of a strongly k-edge-connected subgraph cannot be formulated as an intersecting connectivity requirement function. An example of an intersecting supermodular function is the connectivity requirement of an arborescence. Given a directed graph G = (V, E) and a specific vertex r ∈ V called the root, a subgraph H = (V, E ) of G is called an r-arborescence if there is exactly one directed path from r to every other vertex. In other words, it is a spanning tree rooted at r. Another example of an intersecting supermodular connectivity requirement function comes from the rooted k-edge-connected subgraph problem.</p><p>First we address the problem of finding a minimum cost subgraph satisfying intersecting supermodular connectivity requirements and non-uniform degree requirements (both in-degrees and outdegrees). In the following the connectivity requirements are specified by an intersecting supermodular function f . Furthermore, for simplicity, we assume that the connectivity requirement function comes from the rooted k-edge-connected subgraph problem. Figure <ref type="figure" target="#fig_2">2</ref> is the LP-relaxation for our problem (as before Ue is the upper bound on the multiplicity of edge e): THEOREM 2.7. If the above LP (for directed graphs) has an optimal solution of cost zLP , then there exists an integral solution x of cost ≤ 4zLP that satisfies all of the constraints on f if f is intersecting supermodular and x(δ out (i)) ≤ 4B out i + 6 and x(δ in (i)) ≤ 4B in i + 6 for all i ∈ V . Moreover, x can be computed in polynomial time. The proof of this theorem follows from an extension of the methods of Jain and of Melkonian &amp; Tardos <ref type="bibr" target="#b18">[18,</ref><ref type="bibr" target="#b26">26]</ref>, similar to our proof of Theorem 2.1</p><formula xml:id="formula_10">(DLP) minimize zDLP = X e∈E ce xe subject to X e∈δ in (S) xe ≥ f (S), ∀ S ⊆ V, r / ∈ S X e∈δ out (i) xe ≤ B out i , ∀ i ∈ V X e∈δ in (i) xe ≤ B in i , ∀ i ∈ V, i = r 0 ≤ xe ≤ Ue, ∀ e ∈ E</formula><p>We say that a pair of sets A, B are crossing if all of the sets A ∩ B, A -B, B -A, V -(A ∪ B) are nonempty, and we say that a family of sets L = {A1, A2, . . . , A } is cross-free if no two of its sets are crossing. For any set A ⊆ V , let χ A denote the incidence vector of the set of arcs δ out (A); note that in the constraints matrix of the LP, we rewrite the out-degree constraints x(δ out (i)) ≤ B out i as x(δ in (V -{i})) ≤ B out i , and that χ A is the row for the set A (the constraint for A may be either a connectivity constraint or a degree bound). Consider any solution x of the LP. We call a set of vertices A tight (w.r.t. x) if either A = {i} or A = V -{i} and x satisfies the degree constraint for i with equality, x(δ out (i)) = B out i or x(δ in (i)) = B in i , or x satisfies the connectivity constraint for A with equality, x(δ out (A)) = f (A) (in the latter case, A may be a singleton or not). The following lemma follows from arguments similar to those of proof of Lemma 3 in <ref type="bibr" target="#b26">[26]</ref>. LEMMA 2.8. Let the requirement function f of (DLP) be intersecting supermodular, and let x be a basic solution of (LP) such that 0 &lt; xe &lt; 1 for all edges e ∈ E. Then there exists a cross-free family Q of tight sets such that Q partitions into a set of singletons or complements of singletons Q for the degree constraints, and the remaining sets Q = Q -Q for the connectivity constraints form a laminar family, such that:</p><formula xml:id="formula_11">(i) Every set A = {i} ∈ Q has B in i ≥ 1, every set A = V -{i} ∈ Q has B out i ≥ 1, and every set A ∈ Q has f (A) ≥ 1. (ii) |Q| = |E|. (iii) The vectors χ A, A ∈ Q, are linearly independent. (iv) x is the unique solution to {x(δ in (i)) = B in i , ∀{i} ∈ Q } S {x(δ out (i)) = B out i , ∀V -{i} ∈ Q } S {x(δ in (A)) = f (A), ∀A ∈ Q }.</formula><p>LEMMA 2.9. <ref type="bibr" target="#b26">[26]</ref> Let Q be a cross-free family of tight sets satisfying the conditions in Lemma 2.8. Moreover, suppose that: 1) each f (S) ≥ 1 is an integer, for S ∈ Q, and 2) each vertex that has a in-degree constraint has at least eight in-going edges with non-zero values and each vertex that has an out-degree constraint has at least eight out-going edges with non-zero values. Then in the unique solution x to the system, there is an edge e * such that xe * ≥ 1  4 .</p><p>This lemma is the same as the key lemma in <ref type="bibr" target="#b26">[26]</ref>; Our rounding algorithm is very similar to that of Theorems 2.1: The only difference is that we delete degree constraints (in-degree/out-degree) for vertices with at most seven incident edges (in going/out-going respectively). By the above lemmas, there is at least one edge e with x * e ≥ 1 4 . We add one such edge e to our solution edge set and update the degree bounds and function f accordingly. An easy argument similar to that of Theorem 2.1 shows that the cost of the solution is at most 4zLP and that for each vertex v ∈ V the final out-degree (in-degree) of v is at most 4B out v + 6 (4B in v + 6). We leave the proof of Lemma 2.9 to the full version of the paper.</p><p>For the second claim of Theorem 1.3, we use a technique in <ref type="bibr" target="#b26">[26]</ref> (which in turn is inspired by Frank <ref type="bibr" target="#b11">[11]</ref>) to decompose a crossing supermodular connectivity requirement function into two intersecting supermodular connectivity requirement functions (see <ref type="bibr" target="#b26">[26]</ref>). For example, the strongly k-edge-connected subgraph problem can be decomposed into two rooted k-edge-connected subgraph problems, and similarly for the bounded degree version. So, an (a, b, c)approximation algorithm for the latter problem immediately gives a (2a, 2b, 2c)-approximation algorithm for the former problem. This shows the second claim of Theorem 1.3 where the connectivity requirement function comes from the strongly k-edge-connected subgraph problem. In fact, we believe that the approximation ratios in Theorem 1.3 can be improved (details to appear in the journal version).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Hardness of Low Degree Subset k-Vertex</head><p>Connected Subgraph</p><p>In this subsection, we show that unlike the degree bounded EC-SNDP for which we presented a (2, 2Bv + 3)-bicriteria approximation algorithm, the vertex-connectivity version, which we call degree bounded VC-SNDP is very hard to approximate. In the VC-SNDP we are given a weighted undirected graph G = (V, E) with degree bound Bv for every v ∈ V , and a connectivity requirement r : V × V → Z + . We want to find a minimum cost subgraph G satisfying the connectivity requirements and the degree bounds. As we will see, it is hard to get an (∞, 2 log 1-n • Bv)-approximation for this problem. In other words, even if all edge costs are zero and we just have to approximate the degree bounds it is still hard. In fact the same hardness holds for a more special case of the problem, called degree-bounded subset k-vertex connected subgraph (DkVC for short) in which ruv = k for every pair u, v ∈ S for some set S ⊆ V and ruv = 0 otherwise. An α-approximation for DkVC will find a solution G in which the degree of every vertex v is at most αBv and there are ruv vertex-disjoint paths between every pair u, v ∈ V . The following theorem immediately implies Theorem 1.4. THEOREM 2.10. Unless NP ⊆ DTIME(n polylog(n) ) there is no 2 log 1-n -approximation for DkVC for some &gt; 0.</p><p>We have a similar hardness result for the Low Degree Directed Steiner Forest (LDSF) problem. In LDDSF, we are given a directed graph G = (V, E), degree bounds Bv for every v ∈ V , and connectivity requirements r : V × V → {0, 1}. The goal is to find smallest α ≥ 1 and a subgraph G satisfying the connectivity requirements in which the degree of each vertex v is at most αBv. The proofs of Theorems 2.10 and 2.11 follow from the construction for the hardness of vertex-connectivity version of survivable network design problem (SNDP) and subset connectivity <ref type="bibr" target="#b23">[23]</ref>. Details appear in the full version of the paper. THEOREM 2.11. Unless NP ⊆ DTIME(n polylog (n) ) there is no 2 log 1-n -approximation for LDSF for some &gt; 0.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">MINIMUM COST λ-CONNECTED K-SUBGRAPHS</head><p>In this section we focus on the following class of problems. Given are a (multi)graph G(V, E) with edge costs c : E → R + , and positive integers k and connectivity requirement λ ≥ 1; the (k, λ)-subgraph problem asks to find a minimum cost λ-edge-connected subgraph of G with at least k vertices. We should point out that edge costs induce an arbitrary function. Furthermore, we are not allowed to take more copies of an edge than are present in the graph. Otherwise, a 2-approximate solution can be computed by taking a 2-approximate k-MST solution T , and then taking λ copies of T .</p><p>Note that the (k, λ)-subgraph problem contains, as special cases, several classical problems. For instance, the minimum cost λedge-connected spanning subgraph problem is just the minimum (n, λ)-subgraph, and the classical k-MST problem is the (k, 1)edge-subgraph problem. Another related and well-studied problem is that of k-TSP (finding a minimum cost traveling salesman tour visiting at least k vertices) for the metric cost functions. Although there are approximation algorithms for each of these special cases, we are not aware of any study of the more general problem of (k, λ)-subgraph. As we will see below, it seems that this problem for arbitrary values of λ (and even unweighted graphs) is very difficult to approximate.</p><p>For this reason, we look into the approximability of the (k, 2)subgraph, which is the first generalization of k-MST to higher connectivity. We show that (k, 2)-subgraph has an O(log 3 k)-approximation. This algorithm is based on the results of <ref type="bibr" target="#b1">[1,</ref><ref type="bibr" target="#b17">17]</ref>. It works for the rooted version of the problem where a particular vertex r ∈ V is required to be in the solution. It is easy to see that given an algorithm for the rooted version, we can try all possible vertices as the root to obtain an algorithm for the unrooted version. THEOREM 3.1. There is an O(log 3 k)-approximation algorithm for the rooted (k, 2)-subgraph problem.</p><p>As mentioned earlier, we show that for arbitrary values of λ, the (k, λ)-subgraph problem seems to be very difficult. As evidence, we show a reduction from the k-dense-subgraph problem. In the k-dense-subgraph problem we are given a graph G and integer k and have to find a subgraph with k vertices with maximum number of induced edges. Despite considerable effort, the best known approximation algorithm for the k-dense-subgraph problem has ratio O(n 1 3 -) for some constant &gt; 0 <ref type="bibr" target="#b10">[10]</ref>. We can prove that: THEOREM 3.2. If there is an α-approximation algorithm for (k, λ)-subgraph for arbitrary λ, even for unweighted graphs, then there is an (α • log 2 k)-approximation for the k-dense subgraph problem.</p><p>Therefore, obtaining any poly-logarithmic approximation for the (k, λ)-subgraph problem would imply a poly-logarithmic approximation for the k-dense subgraph problem. Proof of Theorem 3.2 appears in the full version of this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Proof of Theorem 3.1</head><p>Recall that an instance I to the rooted (k, 2)-subgraph has a graph G = (V, E), parameter k, and a root r ∈ V . Our algorithm, which is based on <ref type="bibr" target="#b1">[1,</ref><ref type="bibr" target="#b17">17]</ref>, has a key procedure, which we call it Partial. This procedure tries to find a 2-edge-connected subgraph on at least k 4 vertices that contains the root and whose cost is at most O(log 2 k)-factor of the optimum solution to instance I. Then, by running this procedure at most O(log k) rounds, we find a (k, 2)-subgraph of cost at most O(log 3 k) of the optimum solution to I.</p><p>Procedure Partial is a Kruskal-like algorithm. At any given time during this procedure, we have a set of 2-edge-connected components which we call clusters. We start with every vertex as a single cluster and at each iteration we try to connect two or more clusters.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Procedure Partial</head><p>1. Let every vi ∈ V be a single cluster Ci with multiplicity one. 4. Among all p candidate sets, let Mq (1 ≤ q ≤ p) be the one with the smallest ratio rq.</p><p>5. Merge all the clusters in Mq by adding the edges in Fq. Contract the new cluster into a single vertex and assign its multiplicity as the sum of the multiplicities of all the vertices contracted.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Goto</head><p>Step 3 unless there is a cluster of size (multiplicity) at least k 4 . Return the largest cluster. Once there is at least one cluster that contains at least k 4 vertices the procedure stops and returns that cluster. The main step of this procedure is to find the set of clusters that have to be merged. We always look for clusters that have about the same size (more specifically, factor at most two apart) to find a group of size at least two that are to be merged. To simplify the algorithm, at each iteration we contract each cluster Ci into a single vertex and use ci to refer to that (contracted) cluster. The multiplicity of that vertex is the number of vertices contracted into that vertex.</p><p>For any two clusters Ci and Cj we define d2(Ci, Cj) as the minimum cost of two edge-disjoint paths that run between these two clusters. To compute d2(Ci, Cj ) we use a min-cost flow algorithm between ci and cj <ref type="bibr" target="#b32">[32]</ref>. Consider a fixed cluster Ci and let Si be the set of clusters of size (multiplicity) between si and 2si where si ≤ |Ci| ≤ 2si (we consider all possible values of si that satisfy this inequality, and therefore the corresponding set Si, separately). First, we consider all clusters Cj ∈ Si and compute the minimum ratio r1 = d2(Ci, Cj)/si. So far {Ci, Cj} is one candidate for the merge (using the two disjoint paths found between them). This set has ratio r1. Next we compute other sets of clusters as candidates for merge with Ci. To do so, we compute a minimum ratio cycle containing ci (again, we work with contracted clusters), where the ratio of a cycle is equal to the cost of its edges divided by si times the number of vertices corresponding to the clusters from Si -Ci in that cycle. We later show how to compute a minimum ratio cycle. Every such cycle defines a set of clusters from Si (including Ci) as a candidate whose ratio is the ratio of the cycle (as defined). We do this for all values of si (that satisfy si ≤ |Ci| ≤ 2si) and</p><p>The Main (k, 2)-subgraph Algorithm 1. Guess the value of optimum solution; let it be μ.</p><p>2. Delete all the vertices v with d2(v, r) &gt; μ as they cannot belong to OPT (r is the root). 4. Uncontract all the clusters contracted in the root (and their paths) and return it. also for all clusters Ci. Among all candidate sets found, take the one with the smallest ratio and merge the clusters in that set. The full description of procedure Partial is given in Figure <ref type="figure" target="#fig_3">3</ref> Here are more details for step 3c. First subdivide every edge (temporarily) by adding a new vertex into it and replacing it by a path of length 2. For every vertex cj corresponding to a cluster Cj ∈ Si -Ci, let all edges e of that vertex have w(e) = 1. Every other edge e, including the ones incident to vertex ci (for cluster Ci), have w(e) = 0. Then we compute a cycle D containing vertex ci with minimum ratio `Pe∈D c(e) ´/(si P e∈D w(e)). This can be done using the min-ratio cycle algorithms <ref type="bibr" target="#b25">[25]</ref>. We prove the following upper bound on the cost of the solution returned by Partial. Let OPT be an optimum solution and μ be its cost. First we show how using this lemma we obtain an O(log 3 k)approximation for (k, 2)-subgraph. We guess the cost of the optimum solution, μ (we can do binary search for μ, or as we explain later do it in O(log k) iterations). The main algorithm is given in Figure <ref type="figure" target="#fig_6">4</ref>. The following lemma follows from the algorithm and Lemma 3.3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>LEMMA 3.4. The cost of the solution returned by the Main Algorithm is at most O(μ log 3 k).</head><p>To guess the value μ, for every vertex v = r, first we compute d2(r, v). Let L be the kth smallest value. Clearly, L ≤ μ ≤ kL. So it is enough to start with estimate μ = L and then double the estimate of μ if the algorithm does not succeed; we have to do this at most O(log k) times. To prove Lemma 3.3 we need the following two claims. These two claims are the heart of the proof of correctness, specially Claim 3.6. We defer the proof of the first claim to the full version of the paper. CLAIM 3.5. If the largest ratio used by procedure Partial so far is at most r then every cluster with p vertices has cost at most 3rp log p. CLAIM 3.6. Procedure partial never merges the clusters of a candidate set with ratio larger than (24μ log k)/k. PROOF. By way of contradiction, suppose that all the clusters found so far have size smaller than k 4 and the smallest ratio that the procedure finds is larger than r = 24μ log k/k. We group the clusters into at most log k buckets by placing clusters of size between k/2 i and k/2 i+1 into bucket i, for i ≥ 2. Ignore all the clusters that do not intersect the optimum solution. If we consider buckets that have exactly one cluster inside, then the number of vertices inside them is at most k 4 + k 8 +, . . . &lt; k 2 . Thus, there are at least k 2 vertices of the optimum that are in the buckets with at least two clusters each. So there is at least one such bucket, say bucket j, that contains at least k 2 log k vertices of the optimum and all the clusters of this bucket have size between s = k/2 j+1 and 2s = k/2 j . Thus, the optimum intersects at least = k 4s log k ≥ 2 clusters in this bucket. Take the optimum solution and contract each of these clusters into a single vertex and call this set of vertices P = {p1, . . . , p }. Now in the optimum solution, make a parallel copy of every edge to obtain an Eulerian graph, call it G . We call two cycles that meet in exactly one vertex a bi-cycle. Our goal is to obtain an edge-disjoint collection T of cycles and bi-cycles of G with the following properties: (i) each bi-cycle in T is marked to exactly two and each cycle in T is marked to at least two vertices of P such that each D ∈ T contains the vertices of P marked to it, (ii) no vertex of P is marked by more than one element of T , and (iii) at least /3 vertices of P are marked by some element of T . To construct T , we start with T = ∅ and every vertex of P is unmarked. Take an Eulerian tour of G , starting from vertex p1 ∈ P . Each time we visit a vertex put that vertex and the edge we traversed on the stack. The first time we re-visit a vertex v, we look at all the vertices and the edges on the stack until the most recent copy of v on the stack:</p><p>1. If there are no unmarked vertices of P in this set then we pop all the vertices and edges from the stack and discard them; continue with the Euler tour.</p><p>2. If there are at least two unmarked vertices of P in this set we have found a cycle containing at least two unmarked vertices of P . We place this cycle in T , mark those unmarked vertices of P in the cycle, and pop all the edges and vertices until the most recent copy of v on the stack; continue with the Euler tour.</p><p>3. If there is exactly one unmarked vertex from P then we have found a cycle with exactly one unmarked vertex of P . We continue with the tour until we either find another cycle containing v and exactly one other unmarked vertex of P (in which case we place this bi-cycle in T , mark those two vertices of P with this bi-cycle, and pop all its edges and vertices from the stack) or we find a cycle with at least two unmarked vertices of P ; in the latter case we ignore the first cycle found with only one unmarked vertex of P and continue.</p><p>Each time (except possibly the very last iteration) we ignore a cycle containing exactly one unmarked vertex of P (in step 3 above) in the next round we mark at least two vertices from P . So for every vertex left unmarked in P there are at least 2 vertices marked. It is easy to see that at the end there are at least two marked vertices in P if ≤ 5 and at least 2 /3 -1 marked vertices in P if ≥ 6.</p><p>In either case we have at least /3 marked vertices. Now by the assumption, the ratio of each cycle and bi-cycle in T is larger than r. This implies for every cycle D ∈ T : By property (iii) for set T , the sum in the denominator is at least s /3. This implies: </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>THEOREM 1 . 1 .</head><label>11</label><figDesc>There is a polynomial time (2, 2Bv + 3)approximation algorithm for the edge-connectivity SURVIVABLE NET-WORK DESIGN problem. Moreover, on average, the degree bounds are violated by at most 2.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Find a basic feasible solution x with cut requirement f and remove every edge e with xe = 0. (b) If there are any B i 's where vertex i has at most 4 nonzero incident edges delete those constraints and goto the next iteration. (c) For each edge e = (u, v) with xe ≥ 1/2 add xe copies of xe to F and decrease the bounds for B u and B v by xe. (d) For every S ⊆ V : f (S) ← f (S) -|δF (S)|.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: LP for directed case</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>2. p ← 0 3 .</head><label>3</label><figDesc>For every Ci and every si satisfying si ≤ |Ci| ≤ 2si do (a) Let Si be the set of clusters (vertices) with multiplicity between si and 2si.(b) Find a cluster Cj ∈ Si with the smallest ratio of d2(Ci, Cj )/si; p ← p + 1; Let Mp = {Ci, Cj } be a candidate set, its edge set Fp be the edges of the two disjoint paths found to compute d2(Ci, Cj ), and its ratio be d2(Ci, Cj)/si.(c) Find a cycle D containing (vertex) ci with the smallest ratio of P e∈D c(e)/(si • |D ∩ (Si -Ci)|); p ← p + 1; Let Mp be the set of clusters of Si on cycle D (including Ci), Fp be the set of edges of this cycle, and rp be its ratio.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: The main subroutine used in the algorithm for (k, 2)subgraph problem</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>3 .</head><label>3</label><figDesc>While k &gt; 0 do (a) Run Partial with parameter k; let Ci be the largest cluster found and s = |Ci| ≥ 2.(b) Connect Ci to the root using two edge-disjoint paths P1 and P2 with total cost at most μ. Let p be the total number of vertices in Ci ∪ P1 ∪ P2.(c) Contract Ci and these two paths into the root and set k = kp + 1.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: The algorithm for (k, 2)-subgraph problem</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>LEMMA 3 . 3 .</head><label>33</label><figDesc>The cost of the solution returned by Partial is at most O(μ log 2 k).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head></head><label></label><figDesc>P e∈D c(e)/(s•|D ∩P |) &gt; r and for every bi-cycle B ∈ T : P e∈B c(e)/s &gt; r. Thus P cycle D∈T P e∈D c(e) + P bi-cycle B∈T P e∈B c(e) P cycle D∈T (s • |D ∩ P |) + P bi-cycle B∈T s &gt; r.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>Here and elsewhere, we assume that the LP relaxation has an optimal solution, that is, it has a solution of minimum cost that satisfies all of the constraints; of course, if the LP has no feasible solution, then the problem has no feasible solution, and so the issue of approximation is pointless.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">ACKNOWLEDGMENTS</head><p>Many results in this paper were obtained in collaboration with Joseph Cheriyan. In particular, we thank him for allowing us to put the proof of Theorem 1.2 in this submission.</p></div>
			</div>


			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>* This work was partly done during a visit to Egerváry Research Group on Combinatorial Optimization (EGRES) in Budapest. Supported by European MCRTN Adonet, Contract Grant No. 504438. † On leave from the Computer Science Dept., Technion, Haifa, Israel. ‡ Supported by NSERC and a start-up grant from the University of Alberta. § Supported by NSF ITR grant CCR-0122581 (The ALADDIN project) and NSF Grant CCF-0430751.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName><surname>References</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">New approximation guarantees for minimum-weight k-trees and prize-collecting salesmen</title>
		<author>
			<persName><forename type="first">B</forename><surname>Awerbuch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Azar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Blum</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Vempala</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. Computing</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="254" to="262" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A constant-factor approximation algorithm for the k-MST problem</title>
		<author>
			<persName><forename type="first">A</forename><surname>Blum</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ravi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Vempala</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Comput. Syst. Sci</title>
		<imprint>
			<biblScope unit="volume">58</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="101" to="108" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">What would Edmonds do? Augmenting paths and witnesses for degree-bounded MSTs</title>
		<author>
			<persName><forename type="first">K</forename><surname>Chaudhuri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Riesenfeld</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Talwar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of APPROX 2005</title>
		<meeting>of APPROX 2005</meeting>
		<imprint>
			<biblScope unit="page" from="26" to="39" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Push relabel and an improved approximation algorithm for the bounded-degree mst problem</title>
		<author>
			<persName><forename type="first">K</forename><surname>Chaudhuri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Riesenfeld</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Talwar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ICALP</title>
		<meeting>of ICALP</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Network design via iterative rounding of setpair relaxations</title>
		<author>
			<persName><forename type="first">J</forename><surname>Cheriyan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Santosh</forename><surname>Vempala</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Adrian</forename><surname>Vetta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Combinatorica</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="255" to="275" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">k-Connected spanning subgraphs of low degree</title>
		<author>
			<persName><forename type="first">T</forename><surname>Feder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Motwani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zhu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ECCC report</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Iterative rounding 2-approximation algorithms for minimum-cost vertex connectivity problems</title>
		<author>
			<persName><forename type="first">L</forename><surname>Fleischer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">P</forename><surname>Williamson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Comput. Syst. Sci</title>
		<imprint>
			<biblScope unit="volume">72</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="838" to="867" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">An NC approximation algorithm for the minimum degree spanning tree problem</title>
		<author>
			<persName><forename type="first">M</forename><surname>Fürer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Raghavachari</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 28th Annual Allerton Conf. on Commun., Control and Computing</title>
		<meeting>of the 28th Annual Allerton Conf. on Commun., Control and Computing</meeting>
		<imprint>
			<date type="published" when="1990">1990</date>
			<biblScope unit="page" from="274" to="281" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Approximating the minimum-degree Steiner tree to within one of optimal</title>
		<author>
			<persName><forename type="first">M</forename><surname>Fürer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Raghavachari</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. of Algorithms</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="409" to="423" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">The Dense k-subgraph problem</title>
		<author>
			<persName><forename type="first">U</forename><surname>Feige</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Kortsarz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Peleg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Preliminary version in the Proc. 34-th IEEE FOCS pp</title>
		<imprint>
			<date type="published" when="1993">2001. 1993</date>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="page" from="692" to="701" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Kernel Systems of Directed Graphs</title>
		<author>
			<persName><forename type="first">A</forename><surname>Frank</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Acta Sci. Math (Szeged)</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="page" from="63" to="76" />
			<date type="published" when="1979">1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A 3-Approximation for the minim tree spanning k vertices</title>
		<author>
			<persName><forename type="first">N</forename><surname>Garg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 37th IEEE FOCS</title>
		<meeting>of the 37th IEEE FOCS</meeting>
		<imprint>
			<date type="published" when="1996">1996</date>
			<biblScope unit="page" from="302" to="309" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Saving an epsilon: a 2-approximation for the k-MST problem in graphs</title>
		<author>
			<persName><forename type="first">N</forename><surname>Garg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 37th STOC</title>
		<meeting>of the 37th STOC</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="396" to="402" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Minimum Bounded-Degree Spanning Trees</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">X</forename><surname>Goemans</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 47th Annual IEEE Symposium on Foundations of Computer Science</title>
		<meeting>of the 47th Annual IEEE Symposium on Foundations of Computer Science</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="273" to="282" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A general Approximation Technique for Constrained Forest Problems</title>
		<author>
			<persName><forename type="first">M</forename><surname>Goemans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Williamson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. on Computing</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="296" to="317" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Geometric Algorithms and Combinatorial Optimization</title>
		<author>
			<persName><forename type="first">M</forename><surname>Grötschel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Lovász</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Schrijver</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988">1988</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Approximating Buy-at-Bulk and Shallow-light k-Steiner trees</title>
		<author>
			<persName><forename type="first">M</forename><surname>Hajiaghayi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Kortsarz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Salavatipour</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
	<note>In proceedings of APPROX</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A factor 2 approximation algorithm for the generalized Steiner network problem</title>
		<author>
			<persName><forename type="first">K</forename><surname>Jain</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Combinatorica</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="39" to="60" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Approximation algorithms for finding low-degree subgraphs</title>
		<author>
			<persName><forename type="first">P</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Krishan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Raghavachari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ravi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Networks</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="203" to="215" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Quasi-polynomial time approximation algorithm for low-degree minimum-cost steiner trees</title>
		<author>
			<persName><forename type="first">J</forename><surname>Könemann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ravi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 23rd Conference on Foundations of Software Technology and Theoretical Computer Science</title>
		<meeting>of the 23rd Conference on Foundations of Software Technology and Theoretical Computer Science</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">A matter of degree: Improved approximation algorithms for degree bounded minimum spanning trees</title>
		<author>
			<persName><forename type="first">J</forename><surname>Könemann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ravi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. on Computing</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="page" from="1783" to="1793" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Primal-Dual meets local search: approximating MSTs with nonuniform degree bounds</title>
		<author>
			<persName><forename type="first">J</forename><surname>Könemann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ravi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. on Computing</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="763" to="773" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Hardness of approximation for vertex-connectivity network design problems</title>
		<author>
			<persName><forename type="first">G</forename><surname>Kortsarz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Krauthgamer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. on Computing</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="704" to="720" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Approximating min-cost connectivity problems, Survey Chapter</title>
		<author>
			<persName><forename type="first">G</forename><surname>Kortsarz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Nutov</surname></persName>
		</author>
		<editor>Approximation Algorithms and Metaheuristics, Editor T.F. Gonzalez</editor>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Combinatorial Optimization with Rational Objective Functions</title>
		<author>
			<persName><forename type="first">N</forename><surname>Megiddo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematics of Operation Research</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="414" to="424" />
			<date type="published" when="1979">1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Algorithms for a Network Design Problem with Crossing Supermodular Demands</title>
		<author>
			<persName><forename type="first">V</forename><surname>Melkonian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Tardos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Networks</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="256" to="265" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Many birds with one stone: Multi-objective approximation algorithms</title>
		<author>
			<persName><forename type="first">R</forename><surname>Ravi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">V</forename><surname>Marathe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">S</forename><surname>Ravi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Rosenkrants</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">B</forename><surname>Hunt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 25th STOC</title>
		<meeting>of the 25th STOC</meeting>
		<imprint>
			<date type="published" when="1993">1993</date>
			<biblScope unit="page" from="438" to="447" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Spanning trees short or small</title>
		<author>
			<persName><forename type="first">R</forename><surname>Ravi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sundaram</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">V</forename><surname>Marathe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Rosenkrants</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">S</forename><surname>Ravi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal on Discrete Mathematics</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="178" to="200" />
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Approximation Algorithms for degree-constrained minimum-cost network-design problems</title>
		<author>
			<persName><forename type="first">R</forename><surname>Ravi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">V</forename><surname>Marathe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">S</forename><surname>Ravi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Rosenkrants</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">B</forename><surname>Hunt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="page" from="58" to="78" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Approximation through local optimality: designing networks with small degree</title>
		<author>
			<persName><forename type="first">R</forename><surname>Ravi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Raghavachari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Klein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 12 Conference on Foundations of Sofware Tech. and Theoret. Comput. Sci</title>
		<meeting>of the 12 Conference on Foundations of Sofware Tech. and Theoret. Comput. Sci</meeting>
		<imprint>
			<date type="published" when="1992">1992</date>
			<biblScope unit="volume">652</biblScope>
			<biblScope unit="page" from="279" to="290" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Delegate and conquer: An LP-based approximation algorithm for minimum degree MSTs</title>
		<author>
			<persName><forename type="first">R</forename><surname>Ravi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Singh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ICALP</title>
		<meeting>of ICALP</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Combinatorial Optimization -Polyhedra and Efficiency</title>
		<author>
			<persName><forename type="first">A</forename><surname>Schrijver</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005">2005</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Approximating Minimum Bounded Degree Spanning Trees to within One of Optimal</title>
		<author>
			<persName><forename type="first">M</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">C</forename><surname>Lau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 39th STOC</title>
		<meeting>of the 39th STOC</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Approximation Algorithms</title>
		<author>
			<persName><forename type="first">V</forename><surname>Vazirani</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001">2001</date>
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
