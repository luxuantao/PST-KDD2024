<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">TiltType: Accelerometer-Supported Text Entry for Very Small Devices</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Kurt</forename><surname>Partridge</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Saurav</forename><surname>Chatterjee</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Vibha</forename><surname>Sazawal</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Gaetano</forename><surname>Borriello</surname></persName>
						</author>
						<author role="corresp">
							<persName><forename type="first">Roy</forename><surname>Want</surname></persName>
							<email>roy.want@intel.com</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Computer Science and Engineering</orgName>
								<orgName type="institution">University of Washington</orgName>
								<address>
									<postCode>352350, 98195-2350</postCode>
									<settlement>Seattle</settlement>
									<region>WA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution" key="instit1">Intel Research</orgName>
								<orgName type="institution" key="instit2">Mission College Blvd</orgName>
								<address>
									<postCode>2200, 95052-8119</postCode>
									<settlement>Santa Clara</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">TiltType: Accelerometer-Supported Text Entry for Very Small Devices</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">050D844DC216EB28AECEBBD49DCC6189</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T07:48+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Input/output devices</term>
					<term>interaction techniques</term>
					<term>wearable computing</term>
					<term>mobile devices</term>
					<term>text entry</term>
					<term>accelerometer applications</term>
					<term>wristwatch computers</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>TiltType is a novel text entry technique for mobile devices. To enter a character, the user tilts the device and presses one or more buttons. The character chosen depends on the button pressed, the direction of tilt, and the angle of tilt. TiltType consumes minimal power and requires little board space, making it appropriate for wristwatch-sized devices. But because controlled tilting of one's forearm is fatiguing, a wristwatch using this technique must be easily removable from its wriststrap. Applications include two-way paging, text entry for watch computers, web browsing, numeric entry for calculator watches, and existing applications for PDAs.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>INTRODUCTION</head><p>Among text-entry devices for the desktop, the keyboard has no rival. But among mobile devices, it is far from dominant. Mobile devices are small, and users type much more slowly on small keyboards than they do on full-sized ones (see <ref type="bibr" target="#b11">[12]</ref> for one study). Some mobile devices do use a physical keyboard or a soft keyboard, but most PDAs also recognize handwriting, and most cellphones use the phone's twelve-key keypad for text entry.</p><p>Still smaller devices, such as wristwatches and small oneway pagers, use a different text entry technique called navigate/select. Navigate/select is nothing like a keyboard. The user first scrolls through a sequence of characters to find the desired one and then selects it. Navigate/select tends to be slow and tiresome because the user must constantly monitor the display during the navigation step. The widespread use of navigate/select among very small devices is unfortunate, because better text entry would benefit several applications including instant messaging, calendaring, web browsing, and general purpose computing (e.g. on the Linux Wristwatch).</p><p>We have constructed a watch-sized text entry device called TiltType (see Figure <ref type="figure" target="#fig_0">1</ref>). TiltType uniquely combines two kinds of input: tilting and button pressing. Tilt is particularly suited to small devices (although not limited to them) because tilt sensors can be compact. Button pressing provides natural haptic and audio feedback, which tilting lacks. Used together, tilting and button pressing enable a greater expressiveness than either technique alone.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>THE TILTTYPE USER INTERFACE</head><p>Our prototype requires two hands to operate. Strictly speaking, one-handed text entry is possible while the device is strapped on a wrist. But this approach is fatiguing because tilting the device requires tilting the whole forearm. Therefore, watches that use TiltType must be easily removable from the wrist. Our prototype uses Velcro, although a finished product would probably use a more rugged locking mechanism.</p><p>To enter a character, the user either tilts the device in one of the eight compass directions (North, Northeast, East, etc.) or keeps it level. When the user presses a button, the device tentatively displays the character corresponding to that tilt direction and button. If the user changes the tilt direction while holding the button, the displayed character changes to the character assigned to the new tilt direction. Releasing the button commits the displayed character to the screen.</p><p>Using nine tilting directions and three of TiltType's four buttons allows twenty-seven character entries. The English alphabet just fits, with one entry left for a space character.</p><p>In addition to the normal tilt angles, the device responds to "extreme" tilt angles that are close to vertical. Extreme tilt angles make more positions available for symbols of other languages, and allow "0" to be entered using the same buttons that the other numerals use.</p><p>The fourth button is used for backspace and other special features. Because backspace is a common operation, we made it easiest to perform, by a press and release, regardless of tilt angle. By using this fourth button as a shift key, the user accesses other character sets such as numbers and punctuation, and invokes other features such as capitalizing the next character and clearing the screen.</p><p>Figure <ref type="figure" target="#fig_1">2</ref> shows the mapping of the most common characters. The remaining printable ASCII characters can be entered by other tilt/button combinations. In the hope of shortening learning time, we placed the letters in alphabetic order. The Future Work section below describes our ideas for constructing an alternative mapping designed for speed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>THE MECHANICS OF TILTTYPING</head><p>Figure <ref type="figure" target="#fig_2">3</ref> shows how TiltType maps tilt into characters. In Figure <ref type="figure" target="#fig_2">3a</ref>, the user enters a "C" by pressing the upper left button and tilting the device forward and right for a total tilt of about 30 degrees. Assume for the moment that all acceleration is due to gravity. Gravity acts as a constant downward force ending on the surface of a sphere surrounding the origin. Projecting the gravity vector into TiltType's plane gives the point whose X and Y coordinates are reported by the accelerometer. The radial distance to the point is proportional to the sine of the tilt angle. The set of valid points forms a disc, with points on the perimeter corresponding to a full tilt of 90 degrees.</p><p>Figure <ref type="figure" target="#fig_2">3b</ref> shows the role of fixed thresholds in mapping the coordinate space to character cells. We chose Cartesian thresholds instead of radial thresholds to simplify the computation. This approach distorts the mapping somewhat. Only about 15 degrees of tilt is needed to select a side character such as "F", but over 21 (or 15 âˆš 2) degrees is necessary to select a corner character such as "C". The extreme positions need at least 60 degrees of tilt in a side direction. The Cartesian thresholds make extreme positions unreachable if a corner is tilted too far down.</p><formula xml:id="formula_0">! " # $ % &amp; ' ( ) * + , - . / 0 1 2 3 4 5</formula><p>Fixed thresholding is not the only way to map acceleration into characters. We tried out another approach in which the tilt at the time of each button press marked the center of the character grid. Thresholds were set relative to this point. But this method proved confusing. As users searched for characters, they expected that leveling the device would select the character in the center position. They also expected that repeated presses of the same button at the same tilt angle would enter the same character, whether it was in the center position or not. For these reasons, we implemented fixed thresholds.</p><p>To accommodate users that prefer a slight offset to all tilts, we added a recalibration operation that permanently changes the origin's position.</p><p>Earlier we assumed that gravity was the only force. In reality, additional acceleration can be externally imposed, such as when the user is inside a moving vehicle. We used TiltType on a bus and found that the error rate did increase, but text entry was not impossible.</p><p>Additional acceleration also occurs when the user translates or rotates the device. Rapid translational acceleration can significantly affect the measurements. Movements over a large distance during normal use are unusual, but intense forces over a small distance can occur when the user releases a button. We overcome this problem by buffering the measurements and using the values recorded a few milliseconds before the button release takes place <ref type="bibr" target="#b0">[1]</ref>.</p><p>Rotational acceleration does become noticeable at faster text entry speeds. But this effect is exaggerated in our prototype because the accelerometer is located in a corner of the board to simplify design. An accelerometer at the device's center should be less affected by angular acceleration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>INFORMAL OBSERVATIONS</head><p>We have not run controlled experiments, but we did demonstrate TiltType at a public open house. TiltType was well received. Of the fifty or so people who tried it (mostly children between ages eight and sixteen), all but one were able to enter a few characters, and many were able to enter their name. Initial text entry speeds were slow, but this generally did not appear to dampen their interest.</p><p>We made several observations in our own use of the device. We tended to tilt the device well beyond the thresholds to avoid ambiguities at the boundary. A few degrees of difference in the thresholds therefore did not seem to affect our performance. We also noticed that few errors arose from accidentally entering extreme characters. The large difference in tilt angle between the extreme and normal characters made this unlikely.</p><p>We found that we committed many symmetry errors in which the device was either tilted in the wrong direction, or tilted properly while the wrong button was pressed. With practice these errors seemed to occur less often.</p><p>The "tentative character" visual feedback helped us learn the character mapping, but was difficult to see at some tilt angles. Not surprisingly, we found that memorizing the character positions boosted our text entry speeds. Using only kinesthetic and haptic feedback, we could then enter text without having to look at the screen. We still needed to check for errors, but several characters could be checked at the same time when the device was examined at a normal viewing angle.</p><p>We did not feel any fatigue from using TiltType. The lack of fatigue may be due to its small mass and the small range of muscle movements. The buttons on the prototype require only one newton of operating force, which makes them more comfortable than conventional watch buttons. As can happen with conventional keyboards, overuse of TiltType might cause Repetitive Stress Injury (RSI), although we do not have the long-term data necessary to speculate on the nature or probability of injury.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IMPLEMENTATION</head><p>TiltType measures 4.0 cm x 3.7 cm x 1.4 cm. The display is anchored to a printed circuit board that also houses an ADXL202E MEMS accelerometer, a PIC16F877 microcontroller, a potentiometer for adjusting the screen contrast, four buttons, and a connector for serial communication to a PC or PDA. TiltType is powered by two 3V lithium coin cells. The display, an Optrex DMC-50448N character LCD, was chosen for its small size and simple interface. Despite having only eight columns and two lines, it worked well for our conceptual evaluation. All these parts are available from Digikey except the accelerometer, which can be obtained directly from Analog Devices.</p><p>The microprocessor reads the accelerometer about twenty times a second. The samples are not averaged, but capacitors on the accelerometer filter out noise above 100 Hz.</p><p>The accelerometer consumes 1.6mW with a 33% duty-cycle.</p><p>A more sophisticated design could further reduce its awake time for greater power savings.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>RELATED WORK</head><p>TiltType was inspired by Unigesture <ref type="bibr" target="#b10">[11]</ref>, another text-entry device that uses an accelerometer. Unigesture's goal is to enable one-handed text-entry on PDA or cellphone-sized devices. Unigesture does not use buttons. Instead, a tilting gesture is mapped to a group of characters, and a sequence of gestures is mapped to a specific word by T9style dictionary lookup. Unigesture was inspired by nontext-entry accelerometer-based user interfaces developed by Rekimoto <ref type="bibr" target="#b9">[10]</ref>, Harrison et al. <ref type="bibr" target="#b2">[3]</ref>, and Levin and Yarin <ref type="bibr" target="#b6">[7]</ref>.</p><p>Bitman <ref type="bibr" target="#b5">[6]</ref> is a toy that also uses tilt for text-entry. However, it uses a simpler, navigate/select interaction technique. One tilt dimension is used to scroll linearly through the alphabet; the other is used to switch between upper and lower case.</p><p>Other kinds of wearable keyboards have been developed for mobile users. The Twiddler is popular in the wearable computing community. It uses one-handed chording combinations of twelve buttons to enter characters. However, it is about the size of a stapler, which is too large for many users. L3's WristPC keyboard provides a full QWERTY keyboard on a forearm, but is larger still.</p><p>Some systems <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b3">4]</ref> allow "virtually typing." The user makes typing motions onto any surface, and the system determines what keys would have been pressed had there been a keyboard present. These systems are bulkier than watches and do not include their own displays.</p><p>Some PDA touch-screen techniques, such as Graffitiâ„¢ and Quikwriting <ref type="bibr" target="#b8">[9]</ref>, could also work on a watch. Some adjustments would be necessary, as there is little room to carry even a shrunken stylus, and using one's finger would block the display. An interface that combined a touch-sensitive display with an accelerometer and buttons would be more expressive than TiltType, and might enable new interaction techniques.</p><p>In another PDA input technique, Dasher <ref type="bibr" target="#b12">[13]</ref>, users choose a path through a scrolling field of characters whose target sizes are adjusted according to the probability of that character being entered next. It would be interesting to see if an accelerometer could be used as a control input for Dasher.</p><p>Other forms of text entry could be adapted for very small devices. Morse code is feasible, although its learning curve intimidates many users. A few devices (such as the Samsung Watch Phone) use speech recognition, although speech is sensitive to noise and non-private. Speech recognition also requires a relatively large amount of processing power, which takes its toll in either battery size or battery lifetime.</p><p>As with other techniques, TiltType could benefit from macros and word completion, such as developed by POBox <ref type="bibr" target="#b7">[8]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>FUTURE WORK</head><p>Important metrics in the evaluation of any text-entry system are typing speed, error rates, and learning times. We plan to conduct user studies to measure these quantities. Data from these studies will also be useful in constructing a model of timings for moving between various positions. For example, pressing different buttons while in the same tilt position is probably faster than pressing buttons while changing tilt positions. Changing tilt angle along one axis may be faster than changing it along two. Using this model, a more optimal keyboard mapping can be designed that maps more common English letter sequences onto more rapidly typed TiltType positions.</p><p>A trade-off exists between the number of buttons and the number of tilt positions. We chose four buttons because many watches have four buttons, and because this design fit the number of characters in the English language. But using more buttons and fewer tilt angles might lead to faster text entry or lower error rates. We also chose two concentric zones, the normal positions and the extreme positions, but more concentric zones may also be possible. A general study modeled after those carried out for marking menus <ref type="bibr" target="#b4">[5]</ref> would help clarify these tradeoffs.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: TiltType prototype for text entry. (a) Labels indicate characters that can be entered by tilting in that direction. (b) TiltType is small enough to be worn on the wrist. (c) Two hands are necessary for text entry.</figDesc><graphic coords="1,446.69,299.50,120.24,71.39" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Mapping of positions to the most common characters. Special characters include the space character, zero, and caps lock. Zero is selected by an extreme downward tilt (see text).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Characters are chosen by projecting the acceleration vector into the plane of the device and comparing the projection's coordinates to fixed thresholds.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>â€  Gaetano Borriello is jointly affiliated with Intel Research, Seattle, and the University of Washington.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>We thank our paper shepherd Ken Hinckley and the anonymous reviewers for their helpful and detailed suggestions. We also thank James Landay, Ken Fishkin, Anthony LaMarca, and David Koizumi for their ideas and comments.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Issues and techniques in touch-sensitive tablet input</title>
		<author>
			<persName><forename type="first">W</forename><surname>Buxton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Hill</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Rowley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="215" to="224" />
			<date type="published" when="1985">1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Body coupled Fin-geRing: Wireless wearable keyboard</title>
		<author>
			<persName><forename type="first">M</forename><surname>Fukumoto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Tonomura</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference Proceedings on Human Factors in Computing Systems</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1997">1997</date>
			<biblScope unit="page" from="147" to="154" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Squeeze me, hold me, tilt me! An exploration of manipulative user interfaces</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">L</forename><surname>Harrison</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">P</forename><surname>Fishkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Gujar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Mochon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Want</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference proceedings on Human Factors in computing systems</title>
		<imprint>
			<publisher>ACM Press/Addison-Wesley Publishing Co</publisher>
			<date type="published" when="1998">1998</date>
			<biblScope unit="page" from="17" to="24" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Lightglove: Wrist-worn virtual typing and pointing</title>
		<author>
			<persName><forename type="first">B</forename><surname>Howard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Howard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 5th IEEE International Symposium on Wearable Computers</title>
		<meeting>5th IEEE International Symposium on Wearable Computers</meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="172" to="173" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">An emprical evaluation of some articulatory and cognitive aspects of &apos;marking menus</title>
		<author>
			<persName><forename type="first">G</forename><surname>Kurtenbach</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Sellen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Buxton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Human Computer Interaction</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">R</forename><surname>Kuwakubo</surname></persName>
		</author>
		<author>
			<persName><surname>Bitman</surname></persName>
		</author>
		<ptr target="http://www.vector-scan.com" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Bringing sketching tools to keychain computers with an acceleration-based interface</title>
		<author>
			<persName><forename type="first">G</forename><surname>Levin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Yarin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM SIGCHI 99</title>
		<meeting>of ACM SIGCHI 99</meeting>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">POBox: An efficient text input method for handheld and ubiquitous computers</title>
		<author>
			<persName><forename type="first">T</forename><surname>Masui</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Symposium on Handheld and Ubiquitous Computing (HUC&apos;99)</title>
		<meeting>the International Symposium on Handheld and Ubiquitous Computing (HUC&apos;99)</meeting>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="289" to="300" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Quikwriting: continuous stylus-based text entry</title>
		<author>
			<persName><forename type="first">K</forename><surname>Perlin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th annual ACM Symposium on User Interface Software and Technology</title>
		<meeting>the 11th annual ACM Symposium on User Interface Software and Technology</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1998">1998</date>
			<biblScope unit="page" from="215" to="216" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Tilting operations for small screen interfaces</title>
		<author>
			<persName><forename type="first">J</forename><surname>Rekimoto</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th annual ACM UIST</title>
		<meeting>the 9th annual ACM UIST</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1996">1996</date>
			<biblScope unit="page" from="167" to="168" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">The unigesture approach: One-handed text entry for small devices</title>
		<author>
			<persName><forename type="first">V</forename><surname>Sazawal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Want</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Borriello</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
	<note>In MobileHCI. to appear</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Investigating touchscreen typing: The effect of keyboard size on typing speed. Behavior &amp; Information</title>
		<author>
			<persName><forename type="first">A</forename><surname>Sears</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Revis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Swatski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Crittenden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Shneiderman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Technology</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="17" to="22" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Dasher-a data entry interface using continuous gestures and language models</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Ward</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">F</forename><surname>Blackwell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J C</forename><surname>Mackay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th annual ACM UIST</title>
		<meeting>the 13th annual ACM UIST</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="129" to="137" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
