<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Distributed, concurrent, and independent access to encrypted cloud databases</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Luca</forename><surname>Ferretti</surname></persName>
							<email>luca.ferretti@unimore.it</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Modena and Reggio Emilia</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Michele</forename><surname>Colajanni</surname></persName>
							<email>michele.colajanni@unimore.it</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Modena and Reggio Emilia</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Mirco</forename><surname>Marchetti</surname></persName>
							<email>mirco.marchetti@unimore.it</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Modena and Reggio Emilia</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Distributed, concurrent, and independent access to encrypted cloud databases</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">4084CB594ACC6EA30838A5F94DFB1CAE</idno>
					<idno type="DOI">10.1109/TPDS.2013.154</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T07:10+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Cloud</term>
					<term>Security</term>
					<term>Confidentiality</term>
					<term>SecureDBaaS</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Placing critical data in the hands of a cloud provider should come with the guarantee of security and availability for data at rest, in motion, and in use. Several alternatives exist for storage services, while data confidentiality solutions for the Database as a Service paradigm are still immature. We propose a novel architecture that integrates cloud database services with data confidentiality and the possibility of executing concurrent operations on encrypted data. This is the first solution supporting geographically distributed clients to connect directly to an encrypted cloud database, and to execute concurrent and independent operations including those modifying the database structure. The proposed architecture has the further advantage of eliminating intermediate proxies that limit the elasticity, availability and scalability properties that are intrinsic in cloud-based solutions. The efficacy of the proposed architecture is evaluated through theoretical analyses and extensive experimental results based on a prototype implementation subject to the TPC-C standard benchmark for different numbers of clients and network latencies.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>In a cloud context, where critical information is placed in infrastructures of untrusted third parties, ensuring data confidentiality is of paramount importance <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b1">[2]</ref>. This requirement imposes clear data management choices: original plain data must be accessible only by trusted parties that do not include cloud providers, intermediaries, Internet; in any untrusted context data must be encrypted. Satisfying these goals has different levels of complexity depending on the type of cloud service. There are several solutions ensuring confidentiality for the storage as a service paradigm (e.g., <ref type="bibr" target="#b2">[3]</ref>- <ref type="bibr" target="#b4">[5]</ref>), while guaranteeing confidentiality in the database as a service (DBaaS) paradigm <ref type="bibr" target="#b5">[6]</ref> is still an open research area. In this context, we propose SecureDBaaS as the first solution that allows cloud tenants to take full advantage of DBaaS qualities, such as availability, reliability, elastic scalability, without exposing unencrypted data to the cloud provider.</p><p>The architecture design was motivated by a threefold goal: to allow multiple, independent, and geographically distributed clients to execute concurrent operations on encrypted data, including SQL statements that modify the database structure; to preserve data confidentiality and consistency at the client and cloud level; to eliminate any intermediate server between the cloud client and the cloud provider. The possibility of combining availability, elasticity, and scalability of a typical cloud DBaaS with data confidentiality are demonstrated through a prototype of SecureDBaaS that supports the execution of concurrent and independent operations to the remote encrypted database from many geographically dis-tributed clients as in any unencrypted DBaaS setup. To achieve these goals, SecureDBaaS integrates existing cryptographic schemes, isolation mechanisms, and novel strategies for management of encrypted metadata on the untrusted cloud database. This paper contains a theoretical discussion about solutions for data consistency issues due to concurrent and independent client accesses to encrypted data. In this context, we cannot apply fully homomorphic encryption schemes <ref type="bibr" target="#b6">[7]</ref> because of their excessive computational complexity.</p><p>The SecureDBaaS architecture is tailored to cloud platforms and does not introduce any intermediary proxy or broker server between the client and the cloud provider. Eliminating any trusted intermediate server allows Se-cureDBaaS to achieve the same availability, reliability and elasticity levels of a cloud DBaaS. Other proposals (e.g., <ref type="bibr" target="#b7">[8]</ref>- <ref type="bibr" target="#b10">[11]</ref>) based on intermediate server(s) were considered impracticable for a cloud-based solution because any proxy represents a single point of failure and a system bottleneck that limits the main benefits (e.g., scalability, availability, elasticity) of a database service deployed on a cloud platform. Unlike SecureDBaaS, architectures relying on a trusted intermediate proxy do not support the most typical cloud scenario where geographically dispersed clients can concurrently issue read/write operations and data structure modifications to a cloud database.</p><p>A large set of experiments based on real cloud platforms demonstrate that SecureDBaaS is immediately applicable to any DBMS because it requires no modification to the cloud database services. Other studies where the proposed architecture is subject to the TPC-C standard benchmark for different numbers of clients and network latencies show that the performance of concurrent read and write operations not modifying the SecureDBaaS database structure is comparable to that of unencrypted cloud database. Workloads including modifications to the database structure are also supported by SecureD-BaaS, but at the price of overheads that seem acceptable to achieve the desired level of data confidentiality. The motivation of these results is that network latencies, which are typical of cloud scenarios, tend to mask the performance costs of data encryption on response time. The overall conclusions of this paper are important because for the first time they demonstrate the applicability of encryption to cloud database services in terms of feasibility and performance.</p><p>The remaining part of this paper is structured as following. Section 2 compares our proposal to existing solutions related to confidentiality in cloud database services. Section 3 and Section 4 describe the overall architecture and how it supports its main operations, respectively. Section 5 reports some experimental evaluation achieved through the implemented prototype. Section 6 outlines the main results. Space limitation requires us to postpone the assumed security model in Appendix A, to describe our solutions to concurrency and data consistency problems in Appendix B, to detail the prototype architecture in Appendix C.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>SecureDBaaS provides several original features, that differentiate it from previous work in the field of security for remote database services.</p><p>â€¢ It guarantees data confidentiality by allowing a cloud database server to execute concurrent SQL operations (not only read/write, but also modifications to the database structure) over encrypted data. Cryptographic file systems and secure storage solutions represent the earliest works in this field. We do not detail the several papers and products (e.g., Sporc <ref type="bibr" target="#b2">[3]</ref>, Sundr <ref type="bibr" target="#b3">[4]</ref>, Depot <ref type="bibr" target="#b4">[5]</ref>) because they do not support computations on encrypted data.</p><p>Different approaches guarantee some confidentiality (e.g., <ref type="bibr" target="#b11">[12]</ref>, <ref type="bibr" target="#b12">[13]</ref>) by distributing data among different providers and by taking advantage of secret sharing <ref type="bibr" target="#b13">[14]</ref>. In such a way, they prevent one cloud provider to read its portion of data, but information can be reconstructed by colluding cloud providers. A step forward is proposed in <ref type="bibr" target="#b14">[15]</ref>, that makes it possible to execute range queries on data and to be robust against collusive providers. SecureDBaaS differs from these solutions as it does not require the use of multiple cloud providers, and makes use of SQL-aware encryption algorithms to support the execution of most common SQL operations on encrypted data.</p><p>SecureDBaaS relates more closely to works using encryption to protect data managed by untrusted databases. In such case, a main issue to address is that cryptographic techniques cannot be naÃ¯vely applied to standard DBaaS because DBMS can only execute SQL operations over plaintext data.</p><p>Some DBMS engines offer the possibility of encrypting data at the filesystem level through the so called Transparent Data Encryption feature <ref type="bibr" target="#b15">[16]</ref>, <ref type="bibr" target="#b16">[17]</ref>. This feature makes it possible to build a trusted DBMS over untrusted storage. However, the DBMS is trusted and decrypts data before their use. Hence, this approach is not applicable to the DBaaS context considered by SecureDBaas, because we assume that the cloud provider is untrusted.</p><p>Other solutions, such as <ref type="bibr" target="#b17">[18]</ref>, allow the execution of operations over encrypted data. These approaches preserve data confidentiality in scenarios where the DBMS is not trusted, however they require a modified DBMS engine and are not compatible with DBMS software (both commercial and open source) used by cloud providers. On the other hand, SecureDBaaS is compatible with standard DBMS engines, and allows tenants to build secure cloud databases by leveraging cloud DBaaS services already available. For this reason, SecureDBaaS is more related to <ref type="bibr" target="#b8">[9]</ref> and <ref type="bibr" target="#b7">[8]</ref> that preserve data confidentiality in untrusted DBMSs through encryption techniques, allow the execution of SQL operations over encrypted data, and are compatible with common DBMS engines. However, the architecture of these solutions is based on an intermediate and trusted proxy that mediates any interaction between each client and the untrusted DBMS server. The approach proposed in <ref type="bibr" target="#b8">[9]</ref> by the same authors of the DBaaS model <ref type="bibr" target="#b5">[6]</ref>, works by encrypting blocks of data instead of each data item. Whenever a data item that belongs to a block is required, the trusted proxy needs to retrieve the whole block, to decrypt it, and to filter out unnecessary data that belong to the same block. As a consequence, this design choice requires heavy modifications of the original SQL operations produced by each client, thus causing significant overheads on both the DBMS server and the trusted proxy. Other works <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b10">[11]</ref> introduce optimization and generalization that extend the subset of SQL operators supported by <ref type="bibr" target="#b8">[9]</ref>, but they share the same proxy-based architecture and its intrinsic issues. On the other hand, SecureDBaaS allows the execution of operations over encrypted data through SQL-aware encryption algorithms. This technique, initially proposed in CryptDB <ref type="bibr" target="#b7">[8]</ref>, makes it possible to execute operations over encrypted data that are similar to operations over plaintext data. In many cases, the query plan executed by the DBMS for encrypted and plaintext data is the same.</p><p>The reliance on a trusted proxy that characterize <ref type="bibr" target="#b8">[9]</ref> and <ref type="bibr" target="#b7">[8]</ref> facilitates the implementation of a secure DBaaS, and is applicable to multi-tier Web applications, which are their main focus. However, it causes several drawbacks. Since the proxy is trusted, its functions cannot be outsourced to an untrusted cloud provider. Hence, the proxy is meant to be implemented and managed by the cloud tenant. Availability, scalability, and elasticity of the whole secure DBaaS service are then bounded by availability, scalability, and elasticity of the trusted proxy, that becomes a single point of failure and a system bottleneck. Since high availability, scalability and elasticity are among the foremost reasons that lead to the adoption of cloud services, this limitation hinders the applicability of <ref type="bibr" target="#b8">[9]</ref> and <ref type="bibr" target="#b7">[8]</ref> to the cloud database scenario. SecureDBaaS solves this problem by letting clients connect directly to the cloud DBaaS, without the need of any intermediate component and without introducing new bottlenecks and single points of failure.</p><p>A proxy-based architecture requiring that any client operation should pass through one intermediate server is not suitable to cloud-based scenarios, in which multiple clients, typically distributed among different locations, need concurrent access to data stored in the same DBMS. On the other hand, SecureDBaaS supports distributed clients issuing independent and concurrent SQL operations to the same database and possibly to the same data. SecureDBaaS extends our preliminary studies <ref type="bibr" target="#b18">[19]</ref> showing that data consistency can be guaranteed for some operations by leveraging concurrency isolation mechanisms implemented in DBMS engines, and identifying the minimum isolation level required for those statements. Moreover, we now consider theoretically and experimentally a complete set of SQL operations represented by the TPC-C standard benchmark <ref type="bibr" target="#b19">[20]</ref>, in addition to multiple clients, and different client-cloud network latencies that were never evaluated in literature.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">ARCHITECTURE DESIGN</head><p>SecureDBaaS is designed to allow multiple and independent clients to connect directly to the untrusted cloud DBaaS without any intermediate server. Figure <ref type="figure" target="#fig_0">1</ref> describes the overall architecture. We assume that a tenant organization acquires a cloud database service from an untrusted DBaaS provider. The tenant then deploys one or more machines (Client 1 through N) and install a SecureDBaaS client on each of them. This client allows a user to connect to the cloud DBaaS to administer it, to read and write data, and even to create and modify the database tables after creation.</p><p>We assume the same security model that is commonly adopted by the literature in this field (e.g., <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b8">[9]</ref>), where: tenant users are trusted, the network is untrusted, and the cloud provider is honest-but-curious, that is, cloud service operations are executed correctly, but tenant information confidentiality is at risk. For these reasons, tenant data, data structures, and metadata must be encrypted before exiting from the client. A thorough presentation of the security model adopted in this paper is in Appendix A.</p><p>The information managed by SecureDBaaS includes plaintext data, encrypted data, metadata, and encrypted metadata. Plaintext data consist of information that a tenant wants to store and process remotely in the cloud DBaaS.</p><p>To prevent an untrusted cloud provider from violating confidentiality of tenant data stored in plain form, Se-cureDBaaS adopts multiple cryptographic techniques to transform plaintext data into encrypted tenant data, and encrypted tenant data structures because even the names of the tables and of their columns must be encrypted. SecureDBaaS clients produce also a set of metadata consisting of information required to encrypt and decrypt data as well as other administration information. Even metadata are encrypted and stored in the cloud DBaaS. SecureDBaaS moves away from existing architectures that store just tenant data in the cloud database, and save metadata in the client machine <ref type="bibr" target="#b8">[9]</ref> or split metadata between the cloud database and a trusted proxy <ref type="bibr" target="#b7">[8]</ref>. When considering scenarios where multiple clients can access the same database concurrently, these previous solutions are quite inefficient. For example, saving metadata on the clients would require onerous mechanisms for metadata synchronization, and the practical impossibility of allowing multiple clients to access cloud database services independently. Solutions based on a trusted proxy are more feasible, but they introduce a system bottleneck that reduces availability, elasticity and scalability of cloud database services.</p><p>SecureDBaaS proposes a different approach where all data and metadata are stored in the cloud database. SecureDBaaS clients can retrieve the necessary metadata from the untrusted database through SQL statements, so that multiple instances of the SecureDBaaS client can access to the untrusted cloud database independently with the guarantee of the same availability and scalability properties of typical cloud DBaaS. Encryption strategies for tenant data, and innovative solutions for metadata management and storage are described in the following two subsections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Data management</head><p>We assume that tenant data are saved in a relational database. We have to preserve the confidentiality of the stored data and even of the database structure because table and column names may yield information about saved data. We distinguish the strategies for encrypting the database structures and the tenant data.</p><p>Encrypted tenant data are stored through secure tables into the cloud database. To allow transparent execution of SQL statements, each plaintext table is transformed into a secure table because the cloud database is untrusted. The name of a secure table is generated by encrypting the name of the corresponding plaintext table. Table names are encrypted by means of the same encryption algorithm and an encryption key that is known to all the SecureDBaaS clients. Hence, the encrypted name can be computed from the plaintext name. On the other hand, column names of secure tables are randomly generated by SecureDBaaS, hence even if different plaintext tables have columns with the same name, the names of the columns of the corresponding secure tables are different. This design choice improves confidentiality by preventing an adversarial cloud database from guessing relations among different secure tables through the identification of columns having the same encrypted name.</p><p>SecureDBaaS allows tenants to leverage the computational power of untrusted cloud databases by making it possible to execute SQL statements remotely and over encrypted tenant data, although remote processing of encrypted data is possible to the extent allowed by the encryption policy. To this purpose, SecureDBaaS extends the concept of data type, that is associated to each column of a traditional database by introducing the secure type. By choosing a secure type for each column of a secure table, a tenant can define fine-grained encryption policies, thus reaching the desired trade-off between data confidentiality and remote processing ability. A secure type is composed by three fields: data type, encryption type, and field confidentiality. The combination of the encryption type and of the field confidentiality parameters defines the encryption policy of the associated column.</p><p>The data type represents the type of the plaintext data (e.g., int, varchar). The encryption type identifies the encryption algorithm that is used to cipher all the data of a column. It is chosen among the algorithms supported by the SecureDBaaS implementation. As in <ref type="bibr" target="#b7">[8]</ref>, SecureD-BaaS leverages several SQL-aware encryption algorithms that allow the execution of statements over encrypted data. It is important to observe that each algorithm supports only a subset of SQL operators. These features are discussed in Appendix C. When SecureDBaaS creates an encrypted table, the data type of each column of the encrypted table is determined by the encryption algorithm used to encode tenant data. Two encryption algorithms are defined compatible if they produce encrypted data that require the same column data type.</p><p>As a default behavior, SecureDBaaS uses a different encryption key for each column, hence equal values stored in different columns are transformed into different encrypted representations. This design choice guarantees the highest confidentiality level, because it prevents an adversarial cloud provider to identify data that are repeated in different columns. However, to allow remote processing of SQL statements over encrypted data, sometimes it is required to encrypt different columns by means of the same encryption key. Common examples are the join queries and the foreign key constraint.</p><p>The field confidentiality parameter allows a tenant to define explicitly which columns of which secure table should share the same encryption key (if any). SecureD-BaaS offers three field confidentiality attributes:</p><p>â€¢ Column (COL) is the default confidentiality level that should be used when SQL statements operate on one column; the values of this column are encrypted through a randomly generated encryption key that is not used by any other column. â€¢ Multi-column (MCOL) should be used for columns referenced by join operators, foreign keys, and other operations involving two columns; the two columns are encrypted through the same key. â€¢ Database (DBC) is recommended when operations involve multiple columns; in this instance, it is convenient to use the special encryption key that is generated and implicitly shared among all the columns of the database characterized by the same secure type. The choice of the field confidentiality levels make it possible to execute SQL statements over encrypted data while allowing a tenant to minimize key sharing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Metadata management</head><p>Metadata generated by SecureDBaaS contain all the information that is necessary to manage SQL statements over the encrypted database in a way transparent to the user. Metadata management strategies represent an original idea because SecureDBaaS is the first architecture storing all metadata in the untrusted cloud database together with the encrypted tenant data. SecureDBaaS uses two types of metadata.</p><p>â€¢ Database metadata are related to the whole database. There is only one instance of this metadata type for each database.</p><p>â€¢ Table metadata are associated with one secure table.</p><p>Each table metadata contains all information that is necessary to encrypt and decrypt data of the associated secure table. This design choice makes it possible to identify which metadata type is required to execute any SQL statement so that a SecureDBaaS client needs to fetch only the metadata related to the secure table/s that is/are involved in the SQL statement. Retrieval and management of database metadata are necessary only if the SQL statement involves columns having the field confidentiality policy equal to database. This design choice minimizes the amount of metadata that each SecureDBaaS client has to fetch from the untrusted cloud database, thus reducing bandwidth consumption and processing time. Moreover, it allows multiple clients to access independently metadata related to different secure tables, as we discuss in Section 4.3 and Appendix B.</p><p>Database metadata contain the encryption keys that are used for the secure types having the field confidentiality set to database. A different encryption key is associated with all the possible combinations of data type and encryption type. Hence, the database metadata represent a keyring and do not contain any information about tenant data.</p><p>The structure of a table metadata is represented in Figure <ref type="figure">2</ref>. â€¢ Secure type: the secure type of the column, as defined in Section 3.1. This allows a SecureDBaaS client to be informed about the data type and the encryption policies associated to a column. â€¢ Encryption key: the key used to encrypt and decrypt all the data stored in the column. SecureDBaaS stores metadata in the metadata storage table that is located in the untrusted cloud as the database. This is an original choice that augments flexibility, but opening two novel issues in terms of efficient data retrieval and data confidentiality. To allow SecureDBaaS clients to manipulate metadata through SQL statements, we save database and table metadata in a tabular form. Even metadata confidentiality is guaranteed through encryption. The structure of the metadata storage table is shown in Figure <ref type="figure">3</ref>. This table uses one row for the database metadata, and one row for each table metadata.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fig. 3. Organization of database metadata and table metadata in the metadata storage table.</head><p>and table metadata are encrypted through the same encryption key before being saved. This encryption key is called master key. Only trusted clients that already know the master key can decrypt the metadata and acquire information that is necessary to encrypt and decrypt tenant data. Each metadata can be retrieved by clients through an associated ID, which is the primary key of the metadata storage table. This ID is computed by applying a Message Authentication Code (MAC) function to the name of the object (database or table) described by the corresponding row. The use of a deterministic MAC function allows clients to retrieve the metadata of a given table by knowing its plaintext name.</p><p>This mechanism has the further benefit of allowing clients to access each metadata independently, which is an important feature in concurrent environments. In addition, SecureDBaaS clients can use caching policies to reduce the bandwidth overhead.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">OPERATIONS</head><p>In this section we outline the setup setting operations carried out by a database administrator (DBA), and we describe the execution of SQL operations on encrypted data in two scenarios: a naÃ¯ve context characterized by a single client, and realistic contexts where the database services are accessed by concurrent clients.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Setup phase</head><p>We describe how to initialize a SecureDBaaS architecture from a cloud database service acquired by a tenant from a cloud provider. We assume that the DBA creates the metadata storage table that at the beginning contains just the database metadata, and not the table metadata. The DBA populates the database metadata through the SecureDBaaS client by using randomly generated encryption keys for any combinations of data types and encryption types, and stores them in the metadata storage table after encryption through the master key. Then, the DBA distributes the master key to the legitimate users. User access control policies are administrated by the DBA through some standard data control language as in any unencrypted database.</p><p>In the following steps, the DBA creates the tables of the encrypted database. He must consider the three field confidentiality attributes (COL, MCOL, DBC) introduced at the end of the Section 3. Let us describe this phase by referring to a simple but representative example shown in Figure <ref type="figure">4</ref>, where we have three secure tables named ST1, ST2 and ST3. Each table STi (i = 1, 2, 3) includes an encrypted table Ti that contains encrypted tenant data, and a table metadata Mi. (Although in the reality the names of the columns of the secure tables are randomly generated, for the sake of simplicity, this figure refers to them through C1-CN .) Fig. <ref type="figure">4</ref>. Management of the encryption keys according to the field confidentiality parameter.</p><p>For example, if the database has to support a join statement among the values of T1.C2 and T2.C1, the DBA must use the MCOL field confidentiality for T2.C1 that references T1.C2 (solid arrow). In such a way, Se-cureDBaaS can retrieve the encryption key specified in the column metadata of T1.C2 from the metadata table M1 and can use the same key for T2.C1. The solid arrow from M2 to M1 denotes that they explicitly share the encryption algorithm and the key.</p><p>When operations (e.g., algebraic, order comparison) involve more than two columns, it is convenient to adopt the DBC field confidentiality. This has a twofold advantage: we can use the special encryption key that is generated and implicitly shared among all the columns of the database characterized by the same secure type; we limit possible consistency issues in some scenarios characterized by concurrent clients (see Appendix B). For example, the columns T1.C3, T2.C3 and T3.C1 in Figure <ref type="figure">4</ref> share the same secure type. Hence, they reference the database metadata, as represented by the dashed line, and use the encryption key associated to their data and encryption type. As they have the same data and encryption types, T1.C3, T2.C3 and T3.C1 can use the same encryption key even if no direct reference exists between them. The database metadata already contain the encryption key K associated with the data and the encryption types of the three columns, because the encryption keys for all combinations of data and encryption types are created in the initialization phase. Hence K is used as the encryption key of the T1.C3, T2.C3 and T3.C1 columns and copied in M1, M2 and M3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Sequential SQL operations</head><p>We describe the SQL operations in SecureDBaaS by considering an initial simple scenario in which we assume that the cloud database is accessed by one client. Our goal here is to highlight the main processing steps, hence we do not take into account performance optimizations and concurrency issues that will be discussed in Section 4.3 and Appendix B.</p><p>The first connection of the client with the cloud DBaaS is for authentication purposes: SecureDBaaS relies on standard authentication and authorization mechanisms provided by the original DBMS server. After the authentication, a user interacts with the cloud database through the SecureDBaaS client. SecureDBaaS analyzes the original operation to identify which tables are involved and to retrieve their metadata from the cloud database. The metadata are decrypted through the master key and their information is used to translate the original plain SQL into a query that operates on the encrypted database.</p><p>Translated operations contain neither plaintext database (table and column names) nor plaintext tenant data. Nevertheless, they are valid SQL operations that the SecureDBaaS client can issue to the cloud database. Translated operations are then executed by the cloud database over the encrypted tenant data. As there is a one-to-one correspondence between plaintext tables and encrypted tables, it is possible to prevent a trusted database user from accessing or modifying some tenant data by granting limited privileges on some tables. User privileges can be managed directly by the untrusted and encrypted cloud database. The results of the translated query that includes encrypted tenant data and metadata are received by the SecureDBaaS client, decrypted, and delivered to the user. The complexity of the translation process depends on the type of SQL statement.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Concurrent SQL operations</head><p>The support to concurrent execution of SQL statements issued by multiple independent (and possibly geographically distributed) clients is one of the most important benefits of SecureDBaaS with respect to state-of-the-art solutions. Our architecture must guarantee consistency among encrypted tenant data and encrypted metadata, because corrupted or out-of-date metadata would prevent clients from decoding encrypted tenant data resulting in permanent data losses. A thorough analysis of the possible issues and solutions related to concurrent SQL operations on encrypted tenant data and metadata is contained in the Appendix B). Here, we remark the importance of distinguishing two classes of statements that are supported by SecureDBaaS: SQL operations not causing modifications of the database structure, such as read, write, update; operations involving alterations of the database structure through creation, removal and modification of database tables (Data Definition Layer operators).</p><p>In scenarios characterized by a static database structure, SecureDBaaS allows clients to issue concurrent SQL commands to the encrypted cloud database without introducing any new consistency issues with respect to unencrypted databases. After metadata retrieval, a plaintext SQL command is translated into one SQL command operating on encrypted tenant data. As metadata do not change, a client can read them once and cache them for further uses, thus improving performance.</p><p>SecureDBaaS is the first architecture that allows concurrent and consistent accesses even when there are operations that can modify the database structure. In such cases, we have to guarantee the consistency of data and metadata through isolation levels, such as the snapshot isolation <ref type="bibr" target="#b20">[21]</ref>, that we demonstrate can work for most usage scenarios.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">EXPERIMENTAL RESULTS</head><p>We demonstrate the applicability of SecureDBaaS to different cloud DBaaS solutions by implementing and handling encrypted database operations on emulated and real cloud infrastructures. The present version of the SecureDBaaS prototype supports PostgreSQL, MySql and SQL Server relational databases. As a first result, we can observe that porting SecureDBaaS to different DBMS required minor changes related to the database connector, and minimal modifications of the codebase. We refer to the Appendix C for an in-depth description of the prototype implementation.</p><p>Other tests are oriented to verify the functionality of SecureDBaaS on different cloud database providers. Experiments are carried out in Xeround <ref type="bibr" target="#b21">[22]</ref>, Postgres Plus Cloud Database <ref type="bibr" target="#b22">[23]</ref>, Windows SQL Azure <ref type="bibr" target="#b23">[24]</ref>, and also on an IaaS provider, such as Amazon EC2 <ref type="bibr" target="#b24">[25]</ref>, that requires a manual setup of the database. The first group of cloud providers offer ready-to-use solutions to tenants, but they do not allow a full access to the database system. For example, Xeround provides a standard MySql interface and proprietary APIs that simplify scalability and availability of the cloud database, but do not allow a direct access to the machine. This prevents the installation of additional software, the use of tools, and any customization. On the positive side, SecureDBaaS using just standard SQL commands can encrypt tenant data on any cloud database service. Some advanced computation on encrypted data may require the installation of custom libraries on the cloud infrastructure. This is the case of Postgres Plus Cloud that provides SSH access to enrich the database with additional functions.</p><p>The next set of experiments evaluate the performance and the overheads of our prototype. We use the Emulab <ref type="bibr" target="#b25">[26]</ref> testbed that provides us a controlled environment with several machines, assuring repeatability of the experiments for the variety of scenarios to consider in terms of workload models, number of clients and network latencies.</p><p>As the workload model for the database, we refer to the TPC-C benchmark <ref type="bibr" target="#b19">[20]</ref>. The DBMS server is Post-greSQL9.1 deployed on a quad-core Xeon having 12GB of RAM. Clients are connected to the server through a LAN where we can introduce arbitrary network latencies to emulate WAN connections that are typical of cloud services. The experiments evaluate the overhead of encryption, compare the response times of plain vs. encrypted database operations, and analyze the impact of network latency. We consider two TPC-C compliant databases with 10 warehouses that contain the same number of tuples: plain tuples consist of 1046MB data, while SecureDBaaS tuples have size equal to 2615MB because of encryption overhead. Both databases use repeatable read (snapshot) isolation level <ref type="bibr" target="#b26">[27]</ref>.</p><p>In the first set of experiments, we evaluate the overhead introduced when one SecureDBaaS client executes SQL operations on the encrypted database. Client and database server are connected through a LAN where no network latency is added.</p><p>To evaluate encryption costs, the client measures the execution time of the 44 SQL commands of the TPC-C benchmark. Encryption times are reported in the histogram of the Figure <ref type="figure" target="#fig_1">5</ref> that has a logarithmic Yaxis. TPC-C operations are grouped on the basis of the class of transaction: Order Status, Delivery, Stock Level, Payment, New Order. From this figure, we can appreciate that the encryption time is below 0.1ms for the majority of operations, and below 1ms for almost all operations but two. The exceptions are represented by two operations of the Stock level and Payment transactions where the encryption time is two orders of magnitude higher. This high overhead is caused by the use of the order preserving encryption that is necessary for range queries <ref type="bibr" target="#b27">[28]</ref> (see Appendix C).</p><p>To evaluate the performance overhead of encrypted SQL operations, we focus on the most frequently executed SELECT, INSERT, UPDATE and DELETE commands of the TPC-C benchmark. In the Figures <ref type="figure" target="#fig_2">6</ref> and<ref type="figure">7</ref>, we compare the response times of SELECT and DELETE, and UPDATE and INSERT operations, respectively. The Y -axis reports the boxplots of the response times expressed in ms (at a different scale), while the X-axis identifies the SQL operations. In SELECT, DELETE, and  UPDATE operations, the response times of SecureDBaaS SQL commands is almost doubled, while the INSERT operation is, as expected, more critical from the computational point of view and it achieves a tripled response time with respect to the plain version. This higher overhead is motivated by the fact that an INSERT command has to encrypt all columns of a tuple, while an UPDATE operation encrypts just one or few values.</p><p>The second set of the experiments is oriented to evaluate the impact of network latency and concurrency on the use of a cloud database from geographically distant clients. To this purpose, we emulate network latencies through the traffic shaping utilities available in the Linux kernel by introducing synthetic delays from 20ms to 150ms in the client-server connection. These values are representative of round-trip times in continental (in the ranges 40-60ms) and inter-continental (in the ranges 80-150ms) connections <ref type="bibr" target="#b28">[29]</ref>, that are expected when a cloudbased solution is deployed.  These experimental results demonstrate that the response times of the SQL operations issued to a remote database is dominated by network latencies even in well connected regions. Each response time is two orders of magnitude higher than the corresponding time of a plain SQL operation in a LAN environment. Thanks to this effect, the overhead of SecureDBaaS for the most common SELECT operation falls from 57% to 1.31% and to 0.26% in correspondence of network latencies equal to 20 ms and 80 ms, respectively.</p><p>The last set of experiments assess the performance of SecureDBaaS in realistic cloud database scenarios, as well as its ability to support multiple, distributed and independent clients. The testbed is similar to that described previously, but now the runs are repeated by varying the number of concurrent clients (from 1 to 40) and the network latencies (from plain LAN to delays reaching 150 ms). All clients execute concurrently the benchmark for 300 seconds. The results in terms of throughput refer to three types of database operations:</p><p>â€¢ Original TPC-C: the standard TPC-C benchmark;</p><p>â€¢ Plain-SecureDBaaS: SecureDBaaS that use plain encryption, that is, all SecureDBaaS functions and data structures with no encryption; it allows us to evaluate the overhead of SecureDBaaS without the cost of cryptographic operations; â€¢ SecureDBaaS: SecureDBaaS referring to the highest confidentiality level. Figure <ref type="figure" target="#fig_3">8</ref> shows the system throughput referring to 20 clients issuing requests to SecureDBaaS as a function of the network latency. The Y -axis reports the number of committed transactions per minute during the entire experiment. This figure shows two important results:</p><p>â€¢ if we exclude the cryptographic costs, SecureDBaaS does not introduce significant overheads. This can be appreciated by verifying that the throughput of Plain-SecureDBaaS and Original TPC-C overlies for any realistic Internet delay (&gt;20ms); â€¢ as expected, the number of transactions per minute executed by SecureDBaaS are lower than those referring to Original TPC-C and Plain-SecureDBaaS, but the difference rapidly decreases as the network latency increases to the extent that is almost nullified in any network scenario that can be realistically referred to a cloud database context. tend to mask cryptographic overheads for any number of clients. For example, the overheads of SecureDBaaS with 40 concurrent clients decreases from 20% in a 40ms scenario to 13% in a realistic scenario where the clientserver latency is equal to 80ms. This result is important because it confirms that SecureDBaaS is a valid and practical solution for guaranteeing data confidentiality in real cloud database services.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSIONS</head><p>We propose an innovative architecture that guarantees confidentiality of data stored in public cloud databases. Unlike state of the art approaches, our solution does not rely on an intermediate proxy that we consider a single point of failure and a bottleneck limiting availability and scalability of typical cloud database services. A large part of the research includes solutions to support concurrent SQL operations (including statements modifying the database structure) on encrypted data issued by heterogenous and possibly geographically dispersed clients. The proposed architecture does not require modifications to the cloud database, and it is immediately applicable to existing cloud DBaaS, such as the experimented Post-greSQL Plus Cloud Database <ref type="bibr" target="#b22">[23]</ref>, Windows Azure <ref type="bibr" target="#b23">[24]</ref> and Xeround <ref type="bibr" target="#b21">[22]</ref>. There are no theoretical and practical IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. limits to extend our solution to other platforms and to include new encryption algorithms.</p><p>It is worth to observe that experimental results based on the TPC-C standard benchmark show that the performance impact of data encryption on response time becomes negligible because it is masked by network latencies that are typical of cloud scenarios. In particular, concurrent read and write operations that do not modify the structure of the encrypted database cause negligible overhead. Dynamic scenarios characterized by (possibly) concurrent modifications of the database structure are supported, but at the price of high computational costs.</p><p>These performance results open the space to future improvements that we are investigating.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. SecureDBaaS architecture.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Encryption times of TPC-C benchmark operations grouped by transaction class.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. Plain vs. encrypted SELECT and DELETE operations.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. TPC-C performance (20 concurrent clients)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figures 9 Fig. 9 .Fig. 10 .</head><label>9910</label><figDesc>Fig. 9. TPC-C performance (latency equal to 40 ms)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>Table metadata contain the name of the related Fig. 2. Structure of table metadata. secure table and the unencrypted name of the related plaintext table. Moreover, table metadata include column metadata for each column of the related secure table. Each column metadata contain the following information. the name of the column of the secure table. This is the only information that links a column to the corresponding plaintext column because column names of secure tables are randomly generated.</figDesc><table /><note><p>â€¢ Plain name: the name of the corresponding column of the plaintext table. â€¢ Coded name:</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>Table 1 reports the response times of the most frequent SQL operations in the plain and encrypted cases for 20ms, 40ms and 80ms latencies. The last column of this table also reports the absolute</figDesc><table><row><cell></cell><cell>2</cell><cell></cell><cell></cell><cell></cell></row><row><cell>Response Time [ms]</cell><cell>0.5 1 1.5</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>0</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>UPDATE</cell><cell>UPDATE</cell><cell>INSERT</cell><cell>INSERT</cell></row><row><cell></cell><cell></cell><cell>(Plain)</cell><cell>(Encrypted)</cell><cell>(Plain)</cell><cell>(Encrypted)</cell></row><row><cell cols="6">Fig. 7. Plain vs. encrypted UPDATE and INSERT opera-</cell></row><row><cell>tions.</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="2">Network</cell><cell>SQL</cell><cell>Plaintext</cell><cell>Encrypted</cell><cell>Overhead</cell></row><row><cell>delay</cell><cell></cell><cell>com-</cell><cell>response</cell><cell>response</cell><cell>(absolute</cell></row><row><cell></cell><cell></cell><cell>mand</cell><cell>time</cell><cell>time</cell><cell>and</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>percentage)</cell></row><row><cell></cell><cell></cell><cell>SELECT</cell><cell>0.478 ms</cell><cell>0.753 ms</cell><cell>0.275 ms 57%</cell></row><row><cell>LAN</cell><cell></cell><cell>DELETE</cell><cell>0.369 ms</cell><cell>0.783 ms</cell><cell>0.414 ms 112%</cell></row><row><cell></cell><cell></cell><cell>UPDATE</cell><cell>0.397 ms</cell><cell>0.951 ms</cell><cell>0.554 ms 140%</cell></row><row><cell></cell><cell></cell><cell>INSERT</cell><cell>0.517 ms</cell><cell>1.442 ms</cell><cell>0.925 ms 179%</cell></row><row><cell></cell><cell></cell><cell>SELECT</cell><cell>20.67 ms</cell><cell>20.94 ms</cell><cell>0.27 ms 1.31%</cell></row><row><cell>20 ms</cell><cell></cell><cell>DELETE</cell><cell>20.66 ms</cell><cell>20.97 ms</cell><cell>0.31 ms 1.50%</cell></row><row><cell></cell><cell></cell><cell>UPDATE</cell><cell>20.67 ms</cell><cell>21.12 ms</cell><cell>0.45 ms 2.18%</cell></row><row><cell></cell><cell></cell><cell>INSERT</cell><cell>20.85 ms</cell><cell>21.61 ms</cell><cell>0.76 ms 3.65%</cell></row><row><cell></cell><cell></cell><cell>SELECT</cell><cell>40.64 ms</cell><cell>40.90 ms</cell><cell>0.26 ms 0.64%</cell></row><row><cell>40 ms</cell><cell></cell><cell>DELETE</cell><cell>40.65 ms</cell><cell>40.92 ms</cell><cell>0.27 ms 0.66%</cell></row><row><cell></cell><cell></cell><cell>UPDATE</cell><cell>40.62 ms</cell><cell>41.08 ms</cell><cell>0.46 ms 1.13%</cell></row><row><cell></cell><cell></cell><cell>INSERT</cell><cell>40.82 ms</cell><cell>41.56 ms</cell><cell>0.74 ms 1.81%</cell></row><row><cell></cell><cell></cell><cell>SELECT</cell><cell>80.76 ms</cell><cell>80.97 ms</cell><cell>0.21 ms 0.26%</cell></row><row><cell>80 ms</cell><cell></cell><cell>DELETE</cell><cell>80.67 ms</cell><cell>81.01 ms</cell><cell>0.34 ms 0.42%</cell></row><row><cell></cell><cell></cell><cell>UPDATE</cell><cell>80.65 ms</cell><cell>81.09 ms</cell><cell>0.44 ms 0.55%</cell></row><row><cell></cell><cell></cell><cell>INSERT</cell><cell>80.86 ms</cell><cell>81.63 ms</cell><cell>0.77 ms 0.95%</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>TABLE 1</head><label>1</label><figDesc></figDesc><table><row><cell>Response times and overheads of SQL operations for</cell></row><row><cell>different network latencies</cell></row><row><cell>and percentage overhead introduced by SecureDBaaS.</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>We would like to thank Prof. Lorenzo Alvisi of the University of Texas at Austin for his constructive comments on preliminary versions of this paper.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A view of cloud computing</title>
		<author>
			<persName><forename type="first">M</forename><surname>Armbrust</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Fox</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Griffith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Joseph</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Katz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Konwinski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Patterson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Rabkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">53</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Guidelines on security and privacy in public cloud computing</title>
		<author>
			<persName><forename type="first">W</forename><surname>Jansen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Grance</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Tech. Rep. NIST Special Publication</title>
		<imprint>
			<biblScope unit="page" from="800" to="144" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Sporc: group collaboration using untrusted cloud resources</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J</forename><surname>Feldman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">P</forename><surname>Zeller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Freedman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">W</forename><surname>Felten</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 9th USENIX conference on Operating Systems Design and Implementation</title>
		<meeting>of the 9th USENIX conference on Operating Systems Design and Implementation</meeting>
		<imprint>
			<date type="published" when="2010-10">October 2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Secure untrusted data repository (sundr)</title>
		<author>
			<persName><forename type="first">J</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Krohn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>MaziÃ¨res</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Shasha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 6th USENIX conference on Opearting Systems Design and Implementation</title>
		<meeting>of the 6th USENIX conference on Opearting Systems Design and Implementation</meeting>
		<imprint>
			<date type="published" when="2004-10">October 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Depot: Cloud storage with minimal trust</title>
		<author>
			<persName><forename type="first">P</forename><surname>Mahajan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Setty</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Clement</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Alvisi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dahlin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Walfish</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Providing database as a service</title>
		<author>
			<persName><forename type="first">H</forename><surname>Hacig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Â¸</forename></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Iyer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Mehrotra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 18th IEEE International Conference on Data Engineering</title>
		<meeting>of the 18th IEEE International Conference on Data Engineering</meeting>
		<imprint>
			<date type="published" when="2002-02">February 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Fully homomorphic encryption using ideal lattices</title>
		<author>
			<persName><forename type="first">C</forename><surname>Gentry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 41st annual ACM symposium on Theory of computing</title>
		<meeting>of the 41st annual ACM symposium on Theory of computing</meeting>
		<imprint>
			<date type="published" when="2009-05">May 2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">CryptDB: protecting confidentiality with encrypted query processing</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Popa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">M S</forename><surname>Redfield</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Zeldovich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Balakrishnan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 23rd ACM Symposium on Operating Systems Principles</title>
		<meeting>of the 23rd ACM Symposium on Operating Systems Principles</meeting>
		<imprint>
			<date type="published" when="2011-10">October 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Executing sql over encrypted data in the database-service-provider model</title>
		<author>
			<persName><forename type="first">H</forename><surname>Hacig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Â¸</forename></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Iyer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Mehrotra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM SIGMOD international conference on Management of data</title>
		<meeting>of the ACM SIGMOD international conference on Management of data</meeting>
		<imprint>
			<date type="published" when="2002-06">June 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Efficiency and security trade-off in supporting range queries on encrypted databases</title>
		<author>
			<persName><forename type="first">J</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Omiecinski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 19th annual IFIP WG 11.3 working conference on Data and Applications Security</title>
		<meeting>of the 19th annual IFIP WG 11.3 working conference on Data and Applications Security</meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2005-08">August 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Aggregation queries in the databaseas-a-service model</title>
		<author>
			<persName><forename type="first">E</forename><surname>Mykletun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Tsudik</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 20th annual IFIP WG 11.3 working conference on Data and Applications Security</title>
		<meeting>of the 20th annual IFIP WG 11.3 working conference on Data and Applications Security</meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2006-08">July-August 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Database management as a service: Challenges and opportunities</title>
		<author>
			<persName><forename type="first">D</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">El</forename><surname>Abbadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Emekci</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Metwally</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 25th IEEE International Conference on Data Engineering</title>
		<meeting>of the 25th IEEE International Conference on Data Engineering</meeting>
		<imprint>
			<date type="published" when="2009-04">March-April 2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Distributing data for secure database services</title>
		<author>
			<persName><forename type="first">V</forename><surname>Ganapathy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Thomas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Feder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Garcia-Molina</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Motwani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 4th ACM International Workshop on Privacy and Anonymity in the Information Society</title>
		<meeting>of the 4th ACM International Workshop on Privacy and Anonymity in the Information Society</meeting>
		<imprint>
			<date type="published" when="2011-03">March 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">How to share a secret</title>
		<author>
			<persName><forename type="first">A</forename><surname>Shamir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">11</biblScope>
			<date type="published" when="1979">1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">AS5: A secure searchable secret sharing scheme for privacy preserving database outsourcing</title>
		<author>
			<persName><forename type="first">M</forename><surname>Hadavi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Damiani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Jalili</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Cimato</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Ganjei</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 5th International Workshop on Autonomous and Spontaneous Security</title>
		<meeting>of the 5th International Workshop on Autonomous and Spontaneous Security</meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013-09">September 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Oracle advanced security</title>
		<ptr target="http://www.oracle.com/technetwork/database/options/advanced-security" />
		<imprint>
			<date type="published" when="2013-04">April 2013</date>
		</imprint>
	</monogr>
	<note>Oracle corporation</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">The design and implementation of a transparent cryptographic file system for unix</title>
		<author>
			<persName><forename type="first">G</forename><surname>Cattaneo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Catuogno</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">D</forename><surname>Sorbo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Persiano</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the FREENIX Track: 2001 USENIX Annual Technical Conference</title>
		<meeting>of the FREENIX Track: 2001 USENIX Annual Technical Conference</meeting>
		<imprint>
			<date type="published" when="2001-04">April 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Balancing confidentiality and efficiency in untrusted relational dbmss</title>
		<author>
			<persName><forename type="first">E</forename><surname>Damiani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">D C</forename><surname>Vimercati</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Jajodia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Paraboschi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Samarati</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 10th ACM conference on Computer and communications security</title>
		<meeting>of the 10th ACM conference on Computer and communications security</meeting>
		<imprint>
			<date type="published" when="2003-10">October 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Supporting security and consistency for cloud database</title>
		<author>
			<persName><forename type="first">L</forename><surname>Ferretti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Colajanni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Marchetti</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 4th International Symposium on Cyberspace Safety and Security</title>
		<meeting>of the 4th International Symposium on Cyberspace Safety and Security</meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2012-12">December 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Transaction processing performance council</title>
		<author>
			<persName><surname>Tpc-C</surname></persName>
		</author>
		<ptr target="http://www.tpc.org" />
		<imprint>
			<date type="published" when="2013-04">April 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">A critique of ansi sql isolation levels</title>
		<author>
			<persName><forename type="first">H</forename><surname>Berenson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Bernstein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Gray</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Melton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>O'neil</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>O'neil</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM SIGMOD</title>
		<meeting>of the ACM SIGMOD</meeting>
		<imprint>
			<date type="published" when="1995-06">June 1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Xeround: The cloud database</title>
		<author>
			<persName><surname>Xeround</surname></persName>
		</author>
		<ptr target="http://xeround.com" />
		<imprint>
			<date type="published" when="2013-04">April 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Postgres Plus Cloud Database</title>
		<author>
			<persName><surname>Enterprisedb</surname></persName>
		</author>
		<ptr target="http://enterprisedb.com/cloud-database" />
		<imprint>
			<date type="published" when="2013-04">April 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Windows azure</title>
		<ptr target="http://www.windowsazure.com" />
		<imprint>
			<date type="published" when="2013-04">April 2013</date>
			<publisher>Microsoft corporation</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Amazon elastic compute cloud (amazon ec2)</title>
		<ptr target="http://aws.amazon.com/ec2" />
		<imprint>
			<date type="published" when="2013-04">April 2013</date>
		</imprint>
	</monogr>
	<note>Amazon Web Services (AWS)</note>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">An integrated experimental environment for distributed systems and networks</title>
		<author>
			<persName><forename type="first">B</forename><surname>White</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lepreau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Stoller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ricci</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Guruprasad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Newbold</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hibler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Barb</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Joglekar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 5th USENIX conference on Operating Systems Design and Implementation</title>
		<meeting>of the 5th USENIX conference on Operating Systems Design and Implementation</meeting>
		<imprint>
			<date type="published" when="2002-12">December 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Making snapshot isolation serializable</title>
		<author>
			<persName><forename type="first">A</forename><surname>Fekete</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Liarokapis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>O'neil</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>O'neil</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Shasha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Database Systems</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Order-preserving encryption revisited: Improved security analysis and alternative solutions</title>
		<author>
			<persName><forename type="first">A</forename><surname>Boldyreva</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Chenette</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>O'neill</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Advances in Cryptology -CRYPTO 2011</title>
		<meeting>of the Advances in Cryptology -CRYPTO 2011</meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2011-08">August 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">IP Latency Statistics</title>
		<author>
			<persName><surname>Verizon</surname></persName>
		</author>
		<ptr target="http://www.verizonbusiness.com/about/network/latency" />
		<imprint>
			<date type="published" when="2013-04">April 2013</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
