<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Why MAC Address Randomization is not Enough: An Analysis of Wi-Fi Network Discovery Mechanisms</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Mathy</forename><surname>Vanhoef</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Célestin</forename><surname>Matte</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Univ Lyon</orgName>
								<orgName type="institution" key="instit2">INSA Lyon</orgName>
								<address>
									<settlement>Inria</settlement>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">CITI</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Mathieu</forename><surname>Cunche</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Univ Lyon</orgName>
								<orgName type="institution" key="instit2">INSA Lyon</orgName>
								<address>
									<settlement>Inria</settlement>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">CITI</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Leonardo</forename><forename type="middle">S</forename><surname>Cardoso</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Univ Lyon</orgName>
								<orgName type="institution" key="instit2">INSA Lyon</orgName>
								<address>
									<settlement>Inria</settlement>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">CITI</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Frank</forename><surname>Piessens</surname></persName>
						</author>
						<author>
							<persName><forename type="first">K</forename><forename type="middle">U</forename><surname>Leuven</surname></persName>
						</author>
						<title level="a" type="main">Why MAC Address Randomization is not Enough: An Analysis of Wi-Fi Network Discovery Mechanisms</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">8DA8AA4B3E3AA0FBE9DB3EBC5D7D7076</idno>
					<idno type="DOI">10.1145/2897845.2897883</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T16:06+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We present several novel techniques to track (unassociated) mobile devices by abusing features of the Wi-Fi standard. This shows that using random MAC addresses, on its own, does not guarantee privacy.</p><p>First, we show that information elements in probe requests can be used to fingerprint devices. We then combine these fingerprints with incremental sequence numbers, to create a tracking algorithm that does not rely on unique identifiers such as MAC addresses. Based on real-world datasets, we demonstrate that our algorithm can correctly track as much as 50% of devices for at least 20 minutes. We also show that commodity Wi-Fi devices use predictable scrambler seeds. These can be used to improve the performance of our tracking algorithm. Finally, we present two attacks that reveal the real MAC address of a device, even if MAC address randomization is used. In the first one, we create fake hotspots to induce clients to connect using their real MAC address. The second technique relies on the new 802.11u standard, commonly referred to as Hotspot 2.0, where we show that Linux and Windows send Access Network Query Protocol (ANQP) requests using their real MAC address.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Tracking people through their mobile devices has become controversial but common. For example, leaked documents show the NSA tracks people's cell phone location, and later analyses this data under programs such as Co-Traveler to infer relationships between people <ref type="bibr" target="#b17">[19]</ref>. Under the programs Gilgamesh and Shenanigans, captured cell phone locations are used to perform targeted drone attacks <ref type="bibr" target="#b39">[41]</ref>. As a more commercial example, smart trash cans in the UK used Wi-Fi to track the movements of people, in order to gain insight into people's shopping behaviour <ref type="bibr" target="#b20">[22]</ref>. This is possible because Wi-Fi-enabled devices routinely transmit probe requests to search for nearby networks, and these requests contain the unique MAC address of the device. An attacker can easily capture and track these requests. In response to these privacy violations, most Operating Systems (OSs) have now implemented different variants of MAC address randomization. While a commendable initiative, we show that all implementations of MAC address randomization fail to provide adequate privacy.</p><p>First, we analyse the content of probe requests by focusing on Information Elements (IEs), which are used to communicate extended information on the device and its capabilities. Based on real-world datasets containing more than 8 million probe requests, we show that the number of elements, their value, and the order they are in form a fingerprint of a device (called the IE fingerprint). This IE fingerprint can be used to defeat MAC address randomization. In some cases, the IE fingerprint even uniquely identifies a device in the datasets. We also found that the Wi-Fi Protected Setup (WPS) element may leak the original MAC address of the device.</p><p>We continue by studying the sequence number field, which is incremented for each transmitted frame. We consolidate previous observations <ref type="bibr" target="#b16">[18]</ref> that this field is not reset upon identifier change in current implementations of MAC address randomization. By combining the sequence number field with the IE fingerprint, we present an algorithm that tracks devices over time and thus defeats MAC address randomization. Based on simulations, we show that this algorithm can track a significant fraction of devices.</p><p>Inspired by the work of Bloessl et al. <ref type="bibr" target="#b4">[6]</ref>, we also analyze the scrambler seeds of commodity Wi-Fi devices. We find that this field in the 802.11 physical layer is predictable and can thus be used for tracking. As opposed to the sequence number field, the scrambler seed is managed by the hardware. Hence it is more difficult, if not impossible, to fix this unwanted predictability through software updates.</p><p>Finally, we introduce and analyze active attacks which reveal a target device's real MAC address despite randomization. This is done by creating fake Access Points (APs) that advertise either popular SSIDs, or the support of Hotspot 2.0. A station will reveal its real MAC address when connecting to, or respectively communicating with, our fake APs. By spoofing only 5 SSIDs, we were able to retrieve the MAC address of 17.4% of devices. The attack abusing the Hotspot 2.0 standard uncovered the MAC address of 5.2% of devices.</p><p>To summarize, our main contributions are:</p><p>• We study information elements in probe requests, and discover new fields and techniques to track users.</p><p>• We demonstrate that scrambler seeds of commodity Wi-Fi radios are predictable, and show that devices are trackable through this field.</p><p>• We show that advertising fake hotspots, in particular when combined with the Hotspot 2.0 protocol, can completely defeat MAC address randomization.</p><p>The remainder of this paper is organized as follows. Section 2 introduces relevant parts of the 802.11 standard, and datasets used throughout the paper. A privacy analysis of information elements in probe requests is done in Section 3, and in Section 4 we demonstrate how combining this with predictable sequence numbers can be used to track devices. In Section 5, we show that scrambler seeds of commodity devices are predictable. Section 6 introduces attacks based on fake APs and the Hotspot 2.0 protocol. Finally, Sections 7 and 8 discuss related work and conclude.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">BACKGROUND</head><p>In this section, we introduce vendor implementations of MAC address randomization, relevant parts of the 802.11 physical layer, the Hotspot 2.0 standard, and used datasets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">MAC Address Randomization</head><p>To prevent third parties from using the MAC address to track devices, several vendors have implemented MAC address randomization. This follows the suggestion of Gruteser et al. <ref type="bibr" target="#b23">[25]</ref> to use disposable interface identifiers in order to improve users' privacy. In practice, this implies that probe requests no longer use the real MAC address of the device. For example, a new MAC address can be used for each scan iteration, where one scan iteration consists of sending probe requests on all usable channels. However, since a (draft) specification on MAC address randomization does not yet exist, iOS, Windows, and Linux, all implemented their own variants of MAC address randomization. This raises the question whether their implementations actually guarantee privacy. In the remainder of the paper, we use randomization as a synonym of MAC address randomization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.1">iOS</head><p>Apple added MAC address randomization to its devices starting from iOS 8 <ref type="bibr" target="#b40">[42]</ref>. In iOS 8, randomized addresses are only used while unassociated and in sleep mode <ref type="bibr" target="#b16">[18]</ref>. iOS 9 was extended to also use randomization in what Apples calls location and auto-join scans <ref type="bibr" target="#b40">[42]</ref>. Based on our own experiments, this means that randomization is now also used when the device is active, i.e., when the screen is turned on.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.2">Android</head><p>Android 6.0 uses randomization for background scans if the driver and hardware support it <ref type="bibr">[2]</ref>. Unfortunately, we did not have a device to test and verify this in practice.</p><p>Although Android versions before 6.0 do not support randomization, several applications supporting this feature have been released <ref type="bibr" target="#b7">[9,</ref><ref type="bibr" target="#b1">3]</ref>. Common features of those applications are a periodical update of the MAC address to a random value, but also the manual modification of this address by the user. Note that those applications require root privilege to operate, which reduce their impact for the average user.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.3">Windows</head><p>Microsoft supports randomization since <ref type="bibr">Windows 10 [45]</ref>. Enabling randomization is possible if the hardware and driver support it. Interestingly, not only does Windows use random addresses for probe requests, it also uses a random address when connecting to a network. To assure the client always uses the same address when connecting to a particular network, a per-network address is calculated as follows <ref type="bibr" target="#b25">[27,</ref><ref type="bibr" target="#b26">28]</ref>:</p><formula xml:id="formula_0">addr = SHA-256(SSID, macaddr , connId , secret)[:6] (1)</formula><p>Here SSID is the name of the network, macaddr the original MAC address, and connId a parameter that changes if the user removes (and re-adds) the network to its preferred network list. The secret parameter is a 256-bits cryptographic random number generated during system initialization, unique per interface, and kept the same across reboots <ref type="bibr" target="#b26">[28]</ref>. Bits in the most significant byte of addr are set so it becomes a locally administered, unicast address. This hash construction is similar to the generation of IPv6 interface identifiers as proposed in RFC 7217 <ref type="bibr" target="#b19">[21]</ref>. It assures that systems relying on fixed MAC addresses continue to work as expected, e.g., when authentication is performed based on the MAC address. Users can also manually instruct the OS to daily update the per-network address randomly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.4">Linux</head><p>Linux added support for MAC address randomization during network scans in kernel version 3.18. The address should be randomized for each scan iteration <ref type="bibr" target="#b22">[24]</ref>. Drivers must be updated to support this feature. The mvm module of the iwlwifi driver supports randomization since kernel 3.18. The brcmfmac driver added support for this in kernel 4.5.</p><p>The privacy-oriented Linux distribution Tails <ref type="bibr" target="#b0">[1]</ref> does not support MAC address randomization during network scans. Instead, it generates a (new) random MAC address at boot. This random address keeps the first 3 bytes of the original address, the Organization Unique Identifier (OUI), and only randomizes the last three bytes. While not as optimal as periodical address changes, it does prevent tracking over extended periods of time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">The Wi-Fi Physical Layer</head><p>The 802.11 standard defines two popular modulation techniques: Direct-Sequence Spread Spectrum (DSSS) and Orthogonal Frequency Division Multiplexing (OFDM). A disadvantage of OFDM is its high peak-to-average power ratio, increasing the bit-error ratio and out-of-band radiation <ref type="bibr" target="#b42">[44]</ref>. This problem can be mitigated by using a scrambler that removes repetitive patterns in the data being modulated and transmitted. In 802. For a bitstring x ∈ F n 2 , xi denotes the i-th bit of x (with 0 ≤ i &lt; n). The shift function of the LFSR becomes:</p><formula xml:id="formula_1">Definition 2. The shift function SL : F 7 2 → F 7 2 is de- fined by SL(x0x1 . . . x6) = x1 . . . x6L(x0x1 . . . x6).</formula><p>The resulting LFSR is shown in Fig. <ref type="figure">1</ref>.</p><p>The layout of (legacy OFDM-encoded) frames is shown in Fig. <ref type="figure">2</ref>. Scrambling is done on all data bits starting from, and including, the SERVICE field (see Fig. <ref type="figure">2</ref>). After scrambling, the tail field is overwritten with zeros. The scrambler is self-synchronizing. This means that the Scrambler Init field is initialized to all zeros, so the first 7 feedback bits will effectively be written to this field. Hence, the Scrambler Init field does not contain the scrambler seed, but the state of the LFSR after 7 shifts. Since probe requests are generally sent at the most reliable encoding available, DSSS is used in the 2.4 GHz band, and OFDM in the 5 GHz band. Surprisingly, DSSS frames use a fixed value for the scrambler seed [31, §17.2.4]. Only legacy 802.11 radios generate a random seed for DSSS-encoded frames. This makes the DSSS-encoded probe requests in the 2.4 GHz irrelevant in our attacks that rely on the scrambler seed. In contrast, OFDM-encoded frames use variable scrambler seeds. Therefore, when investigating the generation of scrambler seeds in Sect. 5, we will focus on probe requests transmitted in the 5 GHz band.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Hotspot 2.0</head><p>Hotspot 2.0 is an initiative of the Wi-Fi Alliance to streamline network discovery and selection, aiming to create a roaming experience matching that of cellular phones <ref type="bibr" target="#b44">[46]</ref>. It allows clients to discover hotspots for which they have appropriate credentials, and provides automatic roaming between wireless networks. Hotspot 2.0 relies on 802.11u, a standard providing a communication channel even when the station is unassociated with an Access Point (AP) <ref type="bibr" target="#b30">[32]</ref>. Stations use this channel to query an AP for network access information using the Access Network Query Protocol (ANQP). For example, ANQP can be used for discovering which credentials can be used to authenticate to a hotspot.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Datasets</head><p>Throughout our study, we used several datasets to pinpoint identifying elements contained in Wi-Fi frames and to evaluate the performances of our tracking attacks. The following datasets were used: the Train-station dataset captured around one large train station in Lyon in October 2015; the Lab dataset, a 5-day-long capture in October 2015 in our laboratory; and the Sapienza probe request dataset <ref type="bibr" target="#b2">[4]</ref> that has been captured by <ref type="bibr" target="#b2">Barbera et al. in 2013</ref>. Table <ref type="table" target="#tab_1">1</ref> summarizes the characteristics of those datasets.</p><p>In order to limit privacy risks when analyzing the datasets, In all datasets we removed probe requests sent from locally administered addresses. These are either random MAC addresses, or specially assigned ones, and in general do not remain constant. Since we use MAC addresses as unique devices identifiers to check the performance of our algorithms, they would distort our results. Finally, based on sequence numbers and device-specific IEs, we detected and removed one device that kept the first three bytes of its MAC address, but randomized the last three.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">PROBE REQUEST FINGERPRINTING</head><p>In this section, we study how much identifying information can be found in probe requests besides MAC addresses, timing, and sequence numbers. In particular, we study the data carried in the frame body of probe requests, and show that it can be used to fingerprint and identify devices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Information Element Fingerprint</head><p>Probe requests include data in their frame body under the form of Information Elements (IEs) [31, §7.2.3], also called tagged parameters, or tags. These IEs are not mandatory and are used to advertise the support of various functionalities. They are generally composed of several subfields whose size can range from one bit to several bytes. We identify 12 useful elements, presented in Table <ref type="table" target="#tab_2">2</ref>. This list is not exhaustive and could be extended. Selected IEs include items related to Supported Rates, High Throughput capabilities and Interworking Capabilities. Because they are optional, those IEs are not included by all devices and the set of IEs can therefore vary from one device to another, depending on the configuration and capabilities of the device. While the 802.11 standard states that IEs must be sorted in ascending order based on their tag [31, §8.4.2.1], several devices ignore this and use a custom order. Therefore the order of IEs is also potential source of information. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.1">Entropy</head><p>We evaluate the quantity of information brought by these different elements using the three datasets introduced in Section 2.4. Following the approach of Panopticlick <ref type="bibr" target="#b14">[16]</ref>, we empirically evaluate the amount of information provided by each element by computing its entropy in the datasets. The entropy of an element i is computed as follows:</p><formula xml:id="formula_2">Hi = - j∈E i fi,j * log fi,j<label>(2)</label></formula><p>where Ei is the domain of possible values for element i and fi,j is the frequency (i.e., probability) of the value j for the element i in the dataset. We consider the absence of an element as a possible value.</p><p>Results of our analysis of the IEs are presented in Table <ref type="table" target="#tab_2">2</ref>. The Entropy column presents the amount of identifying bits provided by the elements. The Stability column presents the fraction of devices for which the value of the element is constant throughout the datasets. Finally, the Affected Devices column presents the fraction of devices that include this IE in their probe requests.</p><p>What appears in this table is that all of these elements are stable for most devices over the observation period. Since most of these IEs reflect intrinsic capabilities of the device, there is no reason for them to change over time. Upon further inspection, it appears that elements which are not stable over time are generated by a small group of device. Most of the studied IEs are present in almost all devices. For instance, the HT capabilities tag, used to advertise capabilities for the High-Throughput 802.11n standard, is the most useful one for fingerprinting. This tag includes a lot of subfields whose values vary from one device to another, providing a lot of identifying information.</p><p>There is a high diversity in the amount of information provided by the selected elements. For instance, the HT capabilities info provides up to 4.74 bits of entropy, while the HT Antenna Selection Capabilities provides only 0.711 bit in the best case. This difference can be explained by a larger element (in term of bits), and also by a variance of the value of this element. Some differences between the datasets are likely due to their age. In particular, some features were not yet widespread when the Sapienza dataset was produced in 2013. Back then, few devices had an Extended Capabilities IE, while now it is wide-spread. Apart from this, the three datasets display the same trends for all the elements. The Overall row presents the information for all the IEs considered together. We can observe that for 88.8% to 93.8% of devices, the included IEs as well as their values do not change over time. More importantly, the amount of information brought by all the IEs together is above 5.4 bits in all three datasets.</p><p>Note that the WPS element is not stable for all devices. This does not mean that its content varies over time, but that it is intermittently included by some devices, since we consider the lack of an element as a possible value. When the WPS element is present, it always has the same content.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.2">Anonymity sets</head><p>To further study the impact of those IEs, we evaluate the usefulness of the IEs as a device identifier. For each IE fingerprint, we form a set of all the devices sharing this fingerprint (called an anonymity set) and compute the size of this set. Figure <ref type="figure" target="#fig_2">3</ref> shows the distribution of the set sizes. The three datasets exhibit a similar distribution. First, we can observe that there is a significant number of devices alone in their set (leftmost impulse), which means that they have a unique fingerprint. Then, there is a large number of small groups, meaning that although those devices cannot be uniquely identified by the IE fingerprint, they are in a small anonymity set. Finally, there is a small number of large sets, meaning that a large number of devices share the same fingerprint.</p><p>This last case is likely caused by highly popular device models: they are found in large numbers and share the same characteristics. A corollary of this observation is that the identifying potential of IEs is reduced for such device models.</p><p>Those results show that the IEs can serve as a unique identifier for some devices and that, for the rest of the devices, it can be used as a first step toward full identification.  </p><formula xml:id="formula_3">salt ← 0x526480f8c99b4be5a65558ed5f5d6084 UUID ← SHA-1(MAC , salt) UUID[6] ← (5 4) | (UUID[6] &amp; 0x0f) UUID[8] ← 0x80 | (UUID[8] &amp; 0x3f) return UUID[:16]</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Wi-Fi Protected Setup (WPS)</head><p>One of the IEs found in probe requests is dedicated to Wi-Fi Protected Setup (WPS), a protocol simplifying device pairing. We show that the unique identifier contained in this IE can be used to reveal the real MAC address of the device. Some devices add a WPS IE to their broadcast probe requests to advertise their support of the protocol (see Table <ref type="table" target="#tab_3">3</ref>). In our datasets, between 3.7% and 8.6% of devices broadcast at least one probe request with such an IE. One notable field of this IE is the Universally Unique Identifier (UUID) of the device, which is by definition identifying.</p><p>There is no official specification for the generation of the UUID, but the Wi-Fi Alliance recommends <ref type="bibr">[47, §3.19]</ref> to follow the specification of RFC 4122 <ref type="bibr" target="#b32">[34]</ref> and to derive it from the MAC address of one of the device's interfaces. More specifically, RFC 4122 specifies that the UUID should be derived from the truncation of the digest obtained from a cryptographic hashing of the MAC address.</p><p>On Linux, wpa_supplicant is responsible for the addition of the WPS element. It generates the UUID by computing the SHA-1 hash of the MAC address with a fixed seed, before truncating it. The full algorithm is shown in Algorithm 1. It was shown in <ref type="bibr" target="#b12">[14]</ref> that hashed MAC address are reversible through brute-forcing, due to their relatively small address space. Hence it is possible to recover the MAC address that was used to generate the UUID. In other words, if the UUID is calculated in this manner, it leaks the real MAC address.</p><p>We calculated the UUID based on the MAC address as described in Algorithm 1 for the Train-station and Lab datasets. This revealed that roughly 75% of all devices using the WPS IE indeed derive the UUID from the MAC address (see Table <ref type="table" target="#tab_3">3</ref>). For the Sapienza dataset, which preserves only the OUI part of the MAC addresses, we attempted to recover the original MAC address by testing all possible values for the last three bytes of the address (together with the given OUI). This proved extremely successful, as this yielded a result for 92% of the devices. Because we do not have access to the original MAC addresses, we cannot guarantee that all of the recovered addresses are the one used as the Wi-Fi MAC address. Indeed, RFC 4122 <ref type="bibr" target="#b32">[34]</ref> recommends to use the address of one of the interfaces, meaning other MAC addresses, such as the Bluetooth one, can be used. We informed the authors of the Sapienza dataset about theses de-anonymization issues. Using the same method, we tested our own datasets again, this time exhaustively testing all possible values for the last three bytes of the MAC address, while keeping the advertised OUI. This uncovered 7 new MAC addresses for the Train-station dataset, and none for Lab. These 7 addresses are all one bit away from the Wi-Fi MAC address of the device, indicating that they are the address of another interface (e.g., the Bluetooth address). We also found a few devices using bogus UUIDs (12:34:56. . . or 00:00:00. . . ). We conclude that, at the exception of devices using bogus UUIDs, the WPS element is a unique identifier in all our datasets. Moreover, the UUID field of the WPS element can be used to reveal the real MAC address of a device.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">SSID fingerprint</head><p>Probe requests include a Service Set Identifier (SSID) element, which is used to specify a network searched by the device. We show that the SSID fingerprint, i.e., the list of SSIDs searched by a device, can be a unique identifier. Devices including this element send multiple probe requests to cover all the SSIDs in their preferred network list (one probe for each network). During each scan iteration, devices send an ordered burst of probe requests over a small timeframe.</p><p>Although the practice of putting SSIDs in probe requests is progressively abandoned for obvious privacy reasons, it is still observed for a number of reasons. First, some active devices are not up-to-date and are still running an OS that does not include this privacy-enhancing modification. Second, using a probe request with an SSID is the only way to discover a hidden access point. No matter how up-to-date the OS is, a device with configured hidden networks will broadcast the corresponding SSID. Finally, we have observed that some  recent devices like the iPad 2 running iOS 9.1 or the One Plus One running Android 5.1.1 broadcast probe requests with SSIDs when waking up from sleep mode. We conjecture this is because some OSes, as a way to speed up the network-reactivation process, offer separate APIs to initiate background and on-demand (wake up) scans.</p><p>In our datasets we found that 29.9% to 36.4% of devices broadcast at least one SSID. Among these, 53% to 64.8% broadcast a unique list of SSIDs. Therefore, this list can be used as an additional unique identifier to track devices.</p><p>Using the same method as for IEs, we computed the distribution of anonymity sets for SSIDs. The results are shown in Fig. <ref type="figure" target="#fig_4">4</ref>. For readability, we removed the empty SSID list, corresponding to devices which do not broadcast any SSID.</p><p>As for IE fingerprints, the three datasets exhibit a similar distribution. For instance, in the Lab dataset, 87 SSID fingerprints are unique, and 26 devices share the same fingerprint. Apart from these extreme values, it appears that the anonymity set of devices sending SSIDs is small (&lt; 2% of devices). This makes the SSID fingerprint a good tool for identifying and tracking devices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">IDENTIFIER-FREE TRACKING</head><p>In this section, we present an algorithm to track devices even if MAC address randomization is used. That is, we assume no unique identifiers are available. Our algorithm first clusters probe requests by their Information Element (IE) fingerprint, and then distinguishes devices in each cluster by relying on predictable sequence numbers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Adversary and System Model</head><p>We assume the adversary is a passive observer who wants to track the movements of people in a certain area. This is done by tracking people's mobile devices, and by placing radio receivers that cover the complete target area. The radios only have to be able to receive broadcast probe requests, full monitor mode support is not required. In practice many institutions, e.g., shopping centers, universities, etc., can use existing infrastructure for this purpose. We assume not all probe requests are captured due to packet loss, and do not require all channels to be monitored. In other words, our algorithm can handle missed packets, and works as long as several consecutive network scans of a device are not missed.</p><p>Our algorithm relies on the IE fingerprint and on the predictable sequence numbers of probe requests. Note that all 802.11 frames, apart from control frames, contain a 12-bit sequence number. It is used to detect retransmissions and reconstruct fragmented packets. Based on our tests, all Wi-Fi radios use an incremental counter to initialize the sequence number. Even when MAC address randomization is enabled, we found that iOS, Linux, and Windows, all use incremental sequence numbers in probe requests. This confirms and extends the observations by Freudiger <ref type="bibr" target="#b16">[18]</ref>. Unsurprisingly, in our datasets all devices use an incremental sequence counter. However, roughly one third of devices reset their sequence number on specific occasions. In particular, many devices reset their sequence counter between scan iterations, likely because they turn off the radio chip when idle.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Tracking Algorithm</head><p>Our algorithm works in two phases. First it uses the IE fingerprint to group probes requests into clusters. Then, it relies on predictable sequence numbers to distinguish probe requests sent from different devices within one cluster. If successful, each final cluster corresponds to a unique device.</p><p>The full algorithm is shown in Algorithm 2. Its input is the list of probe requests P, and the parameters ∆T and ∆S. Parameter ∆S is the (assumed) maximum distance between sequence numbers of probe requests sent by the same device, and ∆T the (assumed) maximum time between two network scans of a device. The list of probes requests P can come from multiple APs. The first phase corresponds to the first forall loop. In this loop, all probe requests are assigned to some cluster C based on their IE fingerprint. The algorithm uses the fingerprint function to extract the IE fingerprint based on the information elements that are present (see Section 3). The hashmap M maps fingerprints to the cluster that contains probe requests with the given fingerprint.</p><p>In the second phase, our algorithm iterates over all clusters C in the hashmap M. Here, we rely on sequence numbers and packet arrival times to distinguish devices that have the same IE fingerprint. Effectively, each cluster C is divided into a list of subclusters S. The sequence number of a probe request is denoted by p.seq, and the arrival time by p.time. The notation S[i].last references the last probe request that has been added to the subcluster S[i]. In the nested forall loop, we search for a cluster such that the last probe request added to this cluster has an arrival time and sequence number that indicate that it was sent by the same device as probe request p. Care must be taken so devices that reset their sequence number after one scan iteration do not get split up into different clusters. As a heuristic, we assume that if a device exhibits this behaviour, all devices with the same IE fingerprint also have this behaviour. We can then detect devices that reset their sequence number by calculating the maximum sequence number within a cluster. If this number is lower than 100, we assume devices with this fin- gerprint reset their sequence number. We get the following definition for the distance between two sequence numbers:</p><p>Definition 3. The sequence distance d(x, y, max ) between two sequence numbers x and y is defined as:</p><formula xml:id="formula_4">d(x, y, max ) =      |x -y| if max &lt; 100 y -x if x &lt; y 2 12 -x + y otherwise</formula><p>Here max represents the maximum sequence number in a given cluster. All subclusters are appended to the final list of subclusters D. Finally, the algorithm returns D, where it is assumed each cluster in D corresponds to one device.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Evaluation</head><p>We investigated the performance of our algorithm based on our real-world datasets. To control the number of concurrent devices, and the duration that they are present, we first filtered these datasets. To only simulate devices that remain in the tracked area for a given duration, we removed devices of which we lost too many consecutive probe requests. This indicates that the device moved outside the tracked area. We rely on sequence numbers to determine how many frames are lost: if 64 or more consecutive frames are lost, we assume the device moved outside the tracked area, and we remove the device. For devices that reset their sequence number after each scan iteration, we only base ourselves on the time between frames to determine if a device went out of range. We also removed the WPS information element in all probe requests, and replaced all SSIDs with a broadcast (empty) SSID. This assures we are tracking devices without relying on obvious unique identifiers. We only make use of MAC addresses to measure the performance of our algorithm.</p><p>We consider a device to be successfully tracked if there is exactly one cluster that contains all probe requests sent  by this device, and no other frames are in this cluster. Put differently, all probe requests of this device have to be successfully linked together without a single error. With this definition, the tracking probability under various conditions is shown in Fig. <ref type="figure" target="#fig_5">5</ref>. We used a value of 64 for ∆S, and 500 seconds for ∆T . These rather large values are picked so the tracking algorithm can tolerate several missed probe requests. Our results are promising. Even when simulating as much as 1024 concurrent devices, over a duration of 20 minutes, we manage to successfully track a significant amount of devices. For shorter tracking durations, and when the number on concurrent devices is more realistic, we manage to track roughly half of all devices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Discussion and Countermeasures</head><p>The main reason why certain devices are not successfully tracked, is because some clusters contain probe requests of multiple devices. In Section 5, we show that scrambler seeds can further distinguish devices in these clusters. The second type of error is that probe requests of some devices are spread out over multiple clusters. This is caused by the variability of the IE fingerprint (see Section 3). Hence, improvements to the fingerprint function may further increase the tracking probability of our algorithm.</p><p>In our datasets, we generally only monitor one channel. This makes it harder to distinguish devices using sequence numbers, since the average gap between sequence numbers of captured frames is relatively high. Monitoring multiple channels may further increase the tracking probability.</p><p>The 802.11 standard only requires that the same sequence number is used for retransmissions, and that the same number is used for all fragments of a packet [31, §8.2.4.4.2]. Hence, one can reset the sequence counter to a random (unused) value if a new MAC address is being used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">PREDICTABLE SCRAMBLER SEEDS</head><p>In this section, we study the scrambler seeds of commodity Wi-Fi radios, and find that all of them use predictable seeds. We show this can be used to improve our tracking algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Background and Experimental Setup</head><p>Recently, Bloessl et al. discovered that the scrambler seeds of two (prototype) radios used in wireless vehicular networks are predictable <ref type="bibr" target="#b4">[6]</ref>. They showed this can be used to improve vehicle tracking algorithms. While the 802.11 standard says that scrambler seeds should be initialized with a pseudorandom nonzero seed [31, §18.3.5.5], we wondered whether commodity Wi-Fi radios also use predictable seeds in practice. To answer this question, we need a radio that exports the scrambler seed of received Wi-Fi frames. Since most commodity devices do not do so, we implemented this ourselves using a software-defined radio. We used an Ettus USRP N210, and relied on the gr-ieee802-11 project <ref type="bibr" target="#b3">[5]</ref> to decode OFDM frames. The code was modified to take the scrambler initialization value from the SERVICE field, and undo the initial 7 shifts to obtain the original scrambler seed value (see Section 2.2).</p><p>Because gr-ieee802-11 is not as optimized as real Wi-Fi receivers, decoding frames using it is not easy. To increase its reliability, all captures were made in an RF-shielded room. For each device being tested, we made it transmit data frames of various lengths, and using different bitrates. Based on these captures, we studied the predictability of the scrambler seed. In our analysis, we mainly focus on the scrambler seed behaviour of a device when it is transmitting frames at 6 Mbps. This is done because probe requests in the 5 GHz band are always sent at a bitrate of 6 Mbps (see Section 2.2). Finally, we confirmed our predictions by capturing and analyzing real probe requests in the 5 GHz band.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Analysis</head><p>We found that most devices do not reset the state of the scrambler at all. Put differently, the state of the LFSR after transmitting a frame is reused as the seed of the next frame. We say these LFSRs are used in a free-wheeling mode, where the state is never explicitly initialized. Let end state denote the state of the LFSR after producing the last bit of the scrambler sequence. Then one would expect that the end state is directly used as the seed for the next frame. Interestingly, we found that most devices perform additional LFSR shifts before writing out the next scrambler seed. It is unclear why devices do this, perhaps for alignment reasons. Nevertheless, in our case, it is only important to predict how many additional LFSR shifts are performed to get the scrambler seed. To rigorously analyze this behaviour, we define the shift distance between two LFSR states as follows: Definition 4. The shift distance DL(x, y) between two LFSR states x and y is defined as:</p><formula xml:id="formula_5">DL(x, y) = 0 if x = y 1 + DL(SL(x), y) otherwise</formula><p>Recall that SL(x) represents the result of one LFSR shift on the state x. Hence, the shift distance is the number of shifts needed to reach the second state from the first state. The shift distance allows us to report how many additional shifts a device performs before writing out the seed value into the SERVICE field. If we state that a device uses a particular shift distance, it implies it operates in a free-wheeling mode, and the reported distance denotes the shift distance between the end state and the scrambler seed of the next frame.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.1">Asus Fonepad (K004 ME371MG)</head><p>This radio always uses a shift distance of 22, making it trivial to predict the next scrambler seed value based on the previous frame. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.2">One Plus and Samsung Galaxy A3</head><p>The radio in these devices always uses a shift distance of 6, once again making it trivial to predict the next seed value.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.3">TP-Link TL-WN821N</head><p>This device uses an RTL8192CU radio chip which always uses a fixed seed value of 124. We consider this a bug in the radio: using a fixed scrambler seed value means frames are always mapped to the same physical signal. If this happens to be a disadvantageous signal, for example because it has a high peak to average power ratio <ref type="bibr" target="#b42">[44]</ref>, retransmissions are also sent using this disadvantageous signal. Hence, certain frames experience systematically higher frame error rates <ref type="bibr" target="#b4">[6]</ref>.</p><p>Nevertheless, even a fixed seed value can be used to improve our tracking algorithm. For example, when tracking a device with a fixed seed, we can exclude all frames with a different seed value as coming from this device. Without access to the seed, we could have incorrectly labelled certain frames as being transmitted by this particular device.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.4">iPad Air 2 (A1566)</head><p>We found that this device only uses seed values of 8, 64, and 72. The seed value 72 was used considerably more than 8 and 64. Interestingly, in these three values, only the 4th and 7th bits are ever set. These bit positions correspond to the LFSR feedback taps used in the scrambler (see Fig. <ref type="figure">1</ref>). Similar to the TP-Link device, we consider using only a few fixed values for the scrambler seed to be a bug in the radio.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.5">Wi-Pi: Ralink RT5370</head><p>This radio also operates in a free-wheeling mode. After transmitting a frame using a bitrate of 6 Mbps and 12 Mbps, it uses a shift distance of 6. After transmitting a frame using a bitrate of 9 Mbps, it uses a shift distance of 10. Somewhat surprisingly, it uses a shift distance of 61 after sending a beacon at 6 Mbps. This serves as a good example that for some devices, the shift distance may also depend on the type of the previous frame. Thankfully, probe requests are always sent at 6 Mbps in the 5 GHz band, and no other frames are transmitted in between. Consequently, the scrambler seed of radios exhibiting this behaviour remains predictable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.6">Intel 7260 AC</head><p>This radio operates in a free-wheeling mode, where the shift distance depends on the bitrate and the PSDU length of the previously transmitted frame. Recall that the PSDU denotes the actual MAC layer bytes being transmitted (see Fig. <ref type="figure">2</ref>). To better analyze this behaviour, we also made several captures were we sent frames at 12 Mbps. The resulting shift distances are summarized in Table <ref type="table" target="#tab_6">4</ref>. For example, if the previous frame was sent at 6 Mbps, and had a PSDU length of 13 bytes, the shift distance will be 46.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.7">Samsung Galaxy S3 &amp; iPhone 5 (A1429)</head><p>The radios in these devices all exhibit the same behaviour, and operate in a free-wheeling mode. When the previous frame was sent at 6 Mbps, it uses a shift distance from the set {110, 114, 118, 122}. We are currently unable to predict which shift value in this set is used. When the previous frame was sent at 12 Mbps, the set of possible shift distances is {102, 106, 110, 114}. While this means we cannot precisely predict the next scrambler seed value, it still can be used to improve the tracking probability. We conjecture that a more detailed study of this radio chip, e.g., reverse engineering its operations, would reveal how a shift distance is selected from our current set of possible distances.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.8">Atheros AR9271</head><p>The Atheros AR9271 radio uses an incremental counter to initialize the scrambler seed. That is, the scrambler seed is explicitly initialized, and incremented by one for each transmitted frame. This makes it easy to predict the next seed value, even when some frames of unknown lengths are missed. It is the only device we tested that does not operate in a free-wheeling mode. We confirmed this behaviour using an Alfa AWUS036NHA and a TP-Link TL-WN722N, which both contain an Atheros AR9271 radio.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Improved Tracking Algorithm</head><p>The scrambler bit provides us 7 extra bits of information to identify a device. That is, in the tracking algorithm of section 4, we can now distinguish devices based on the scrambler seeds of frames. Though current Wi-Fi radios do not export the received seed, we believe it is easy for manufacturers to support this. In fact, newer radios may already be doing this to support the 802.11ac standard. In 802.11ac, certain bits of the seed in RST and CTS frames have a special purpose <ref type="bibr" target="#b18">[20]</ref>. This requires that certain bits of the seed must remain available after demodulating the physical signal. This makes it more likely that future devices can, and perhaps will, export the scrambler seed of received frames.</p><p>In practice, we must be able to determine the type of scrambler a device uses. Otherwise, we cannot predict the next scrambler seed. Since all devices use the same (random) MAC address in one scan iteration, we can easily determine the type of scrambler used by grouping the frames based on the MAC address. Another option is to immediately send a probe reply when receiving a probe requests. In turn, the device will send an ACK, which will also contain a scrambler seed. Based on the probe request and the ACK, we can determine the type of scrambler being used. Hence, in our tracking algorithm, we can assume the type of scrambler is known.</p><p>To simulate knowledge of scrambler seeds, the first frame of each device is assigned a random seed value. Since only probe requests sent in the 5 GHz band contain a scrambler seed, we expect that few scrambler seed values will be missed by an attacker. Hence, we assign subsequent frames a random seed that lies within a distance of 16 or less of the previous frame. Similarly, in Algorithm 2, we search a cluster such that the last probe request added to this cluster has a scrambler seed that is within a distance of 16 of the probe requests being added. Figure <ref type="figure">6</ref> shows the impact on the tracking probability when knowledge of scrambler seeds is simulated in this manner. For comparison, the tracking probability without using scrambler seeds is shown as Figure <ref type="figure">6</ref>: Probability of a device being successfully tracked, in function of the duration that the device was present, and the number of concurrent devices. Tracking is done using Algorithm 2, with the addition that knowledge of scrambler seeds is also simulated. The dashed line is the probability as reported in Fig. <ref type="figure" target="#fig_5">5</ref>, and is repeated for convenience.</p><p>a dashed line. We conclude that using scrambler seeds can increase the tracking probability by as much as 10%.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">FAKE ACCESS POINTS ATTACKS</head><p>In this Section we show how two service discovery mechanisms of Wi-Fi can be abused to gain identifying information on unassociated stations. This is accomplished by creating fake APs with specific characteristics and identifiers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Reviving the Karma Attack</head><p>Once a device has detected an AP advertising an SSID matching one of its preferred (configured) networks, it will automatically initiate the association process with this AP. From this point on, most devices that implement MAC address randomization will use their real MAC address to connect with the AP. The only exception is Windows, which uses a per-network random MAC address (see Section 2.1). Using the real MAC address may be necessary because some APs restrict association and Internet connectivity based on the MAC address being used.</p><p>A consequence of this switch to the real MAC address when associating to an AP is that, by advertising an SSID familiar to a device, the latter will automatically reveal a permanent identifier. Existing attacks that advertised SSIDs in order to get association requests from victims, such as the well-known Karma attack <ref type="bibr" target="#b9">[11]</ref>, relied on the SSIDs that the victim broadcasts in probe requests. However, since modern devices avoid broadcasting SSIDs, the Karma attack is no longer applicable. Our solution to this problem is to advertise a list of popular SSIDs, hoping that at least one of them is in the preferred network list of the victim.</p><p>As seen in section 3.3, popular SSIDs are configured in a large number of devices. Indeed, SSIDs configured in Wi-Fi devices follow a long-tailed distribution, which means that a small number of popular SSIDs are found in many devices.</p><p>Using our datasets, we simulate the efficiency of this attack. We compute the number of devices that include at least one of the top-n popular SSIDs. Figure <ref type="figure" target="#fig_7">7</ref> presents the cumulative distribution of the number of affected devices in function of the number of advertised SSIDs. We can see that a relatively short list of popular SSIDs is enough to  trigger association requests from a large fraction of the devices. For instance, the top-20 SSIDs in the Train-station dataset covers more than 33 % of the devices.</p><p>We tested and verified this attack in practice. Airbase-ng was used to create fake APs from a list of popular SSIDs. We made the assumption that the most popular SSIDs are open hotspots that do not use encryption. Therefore, the APs we broadcast were configured to be open hotspots. Although airbase-ng supports the creation of multiple SSIDs, our experiments revealed that it does not properly handle a large numbers of SSIDs. Therefore, we limited our attack to a reasonable number of SSIDs, i.e., 5 SSIDs. This number of advertised SSIDs can be increased by running multiple instances of airbase-ng on distinct interfaces.</p><p>The performance of the attack is evaluated by computing the fraction of devices that are trying to associate (connect) to our fake AP over the total number of devices that have been observed. A device is considered as observed when we collected at least 5 probe requests from its MAC address. This conservative approach was taken to avoid counting devices that are too far to detect our AP, or that are not staying in range long enough to start the association process.</p><p>We executed the attack for one hour using a list of the 5 top SSIDs of the Train-station dataset in a dense urban area. During this experiment, a total of 2481 stations were observed and our fake APs triggered association attempts from a total of 434 devices (17.4%). Increasing the number of advertised SSIDs, as well as responding to probe requests containing an SSID with a matching probe response, has the potential to improve the number of affected devices.</p><p>Note that this attack does not necessarily need to be active. An attacker could rely on nearby, genuine, APs with popular SSIDs to trigger association requests. In many locations, APs with popular SSIDs are commonplace. For instance, in Europe, Wi-Fi networks such as Fon or Free_WiFi can be found in large numbers in populated areas.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Hotspot 2.0 Honeypot</head><p>We show that the service discovery mechanisms introduced by Hotspot 2.0 (HS2.0) can be leveraged to reveal the real MAC address of Linux and Windows devices. Ad-ditionally, we discover another predictable counter that can be used to improve our tracking algorithm of Section 4.</p><p>Because HS2.0 APs do not advertise all their capabilities in beacons, stations need to retrieve the full list by contacting the AP. In practice, a station sends ANQP queries to the AP, and the latter replies with an ANQP response containing a list of the available services (see Section 2.3).</p><p>The real identity of devices can be easily uncovered if stations use their real MAC address for querying the AP. Our observations confirm that this is the case for a Linux computer using wpa_supplicant, and a computer running Windows 10. However, an Apple device running iOS 9.1 kept its randomized MAC address when sending the ANQP query. We found that Windows and iOS devices only send ANQP queries if at least one HS2.0 network was configured on the device.</p><p>The fact that the iOS device does not fall back to a persistent identifier is a positive point. However, ANQP queries include a 1-byte field named Dialog Token that is used to identify each GAS transaction <ref type="bibr">[32, §7.4.7.13]</ref>. As multiple GAS transactions are initiated, the value of this field will be incremented. The Dialog Token field is therefore predictable and could be used in our tracking algorithm in the same way sequence numbers and scrambler seeds were used (see Section 4 and 5, respectively). In our captures, the typical time between two consecutive queries is below 60 seconds, providing a good temporal granularity for tracking.</p><p>A variant of the Fake AP attack can therefore be mounted by leveraging this service discovery mechanism: a simple AP advertising HS2.0 capabilities will induce all surrounding HS2.0 compatible stations to send ANQP queries, thus revealing their real MAC address or a predictable field.</p><p>We tested this attack in practice using hostapd, which was configured to advertise HS2.0 capabilities. A fake HS2.0 AP was deployed in a dense urban location for two 20 minute sessions. During those sessions, 1523, respectively 562, probing stations were observed. At the same time, we recorded 80 (5.25%), respectively 92 (16.37%) stations sending ANQP queries to the HS2.0 AP. This small fraction can be explained by the fact that this technology is still in the early stages of its deployment. Hence, not all devices support this feature. Additionally, as HS2.0 is not yet widespread, only a few devices have a configured HS2.0 network. This means iOS and Windows devices will not send ANQP queries.</p><p>Finally, we observed that none of the stations sending ANQP queries had a MAC address that was registered by Apple. This confirms the previous observations about the requirements of at least one configured HS2.0 network to get involved in HS2.0 service discovery requests.</p><p>Our results show that the recent HS2.0 standard is potentially a source of privacy leakage, since several implementations reveal their real MAC address or a predictable field when initiating ANQP queries. The importance of this issue will increase with the number of compatible stations, but also with the increasing number of access points. Indeed, similar to the previous attack, pervasive deployment of genuine HS2.0 will remove the need of creating a fake AP with HS2.0 capabilities. We hope that by discovering this attack in the early stages of the adoption of HS2.0, manufacturers will address this issue before HS2.0 becomes widespread.</p><p>A simple countermeasure is to follow the iOS example, by using the temporary random MAC address when querying HS2.0. There is indeed no requirement in the specifica-tions <ref type="bibr">[32, §5.9]</ref> for the station to use its real MAC address when querying list of services to an AP. Similarly, picking a cryptographic random value for the Dialog Token assures it cannot be used to track devices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">RELATED WORK</head><p>The possibility to track individuals based on the radio signals of their mobile device has received considerable attention from the research community. Musa et al. <ref type="bibr" target="#b35">[37]</ref> used Wi-Fi tracking techniques to collect data on urban mobility. Surveillance systems based on Wi-Fi tracking have also been presented by several works <ref type="bibr" target="#b28">[30,</ref><ref type="bibr" target="#b11">13,</ref><ref type="bibr" target="#b36">38]</ref>. Cuthbert et al. demonstrated how an airborne Wi-Fi sniffer can be used to passively track and locate owners of Wi-Fi devices <ref type="bibr" target="#b11">[13]</ref>. Humbert et al. studied tracking strategies against mobile users that change identifiers when entering mix-zones <ref type="bibr" target="#b27">[29]</ref>.</p><p>Privacy issues of Wi-Fi-enabled devices were studied by Greenstein et al. <ref type="bibr" target="#b21">[23]</ref>. In parallel, attempts were made at reducing private information leakage in Wi-Fi <ref type="bibr" target="#b23">[25,</ref><ref type="bibr" target="#b38">40,</ref><ref type="bibr" target="#b33">35]</ref>. Gruteser et al. introduced the idea of using a disposable identifier instead of a permanent MAC address <ref type="bibr" target="#b23">[25]</ref>. Then, proposals <ref type="bibr" target="#b38">[40,</ref><ref type="bibr" target="#b33">35]</ref> were made to improve the privacy in the service discovery mechanisms of Wi-Fi. These improvements involve the obfuscation of device and network identifiers and require significant modifications of the protocol.</p><p>After the introduction of MAC address randomization in iOS 8, several works have attempted to understand its internals and started to identify limitations <ref type="bibr" target="#b34">[36,</ref><ref type="bibr" target="#b16">18]</ref>. In particular, Freudiger found that sequence numbers and timing information can be used to re-identify random MAC addresses as implemented by iOS <ref type="bibr" target="#b16">[18]</ref>. However, they did not investigate other devices or operating systems, nor other means to de-anonymize or track Wi-Fi frames.</p><p>Bernados et al. <ref type="bibr" target="#b6">[8]</ref> studied the feasibility of MAC address randomization for associated devices in real-life conditions. They found that existing devices can support this with only minor changes, but note that higher layers must also be configured so they do not leak any identifiers.</p><p>Bloessl et al. showed that the scrambler seed of the IEEE 802.11p physical layer could be used for tracking in wireless vehicular networks <ref type="bibr" target="#b4">[6]</ref>. They specifically investigated two prototype radio chips. The first one is a radio chip implemented on Field Programmable Gate Array (FPGA), and the second is an industrial-grade Atheros AR5414A-B2B chip. Both were using predictable scrambler seeds.</p><p>Others focused on inter-frame arrival time and sequence numbers to identify devices. Guo et al. <ref type="bibr" target="#b24">[26]</ref> use these values to detect spoofing on a network with a semi-active method, as an intrusion detection mechanism. Desmond et al. <ref type="bibr" target="#b13">[15]</ref> fingerprint devices using inter-frame time analysis alone. They reach a success rate of 70 to 80% to differentiate frames from 45 different devices probing for more than one hour.</p><p>Other means of device fingerprinting can be used to defeat MAC address randomization. Physical layer fingerprinting of wireless devices based on unique characteristics of their hardware is possible <ref type="bibr" target="#b5">[7,</ref><ref type="bibr" target="#b10">12]</ref> but requires expensive dedicated hardware. Pang et al. <ref type="bibr" target="#b37">[39]</ref> showed that devices replacing their identifiers with temporary ones are still trackable through traffic analysis. They focused on MAC-layer fields used by associated devices. In <ref type="bibr" target="#b15">[17]</ref>, Franklin et al. showed that the inter-frame timing of probe requests can form a fingerprint of the wireless device driver. Access points are vulnerable to passive clock skew fingerprinting <ref type="bibr" target="#b31">[33]</ref>. This technique was reused by Cristea et al. <ref type="bibr" target="#b8">[10]</ref> to fingerprint smartphones, but it relies on TCP timestamps, which are not sent by unassociated devices. Stöber et al. apply passive traffic analysis to identify devices, even when the traffic is encrypted <ref type="bibr" target="#b41">[43]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">CONCLUSION</head><p>We study data contained in Wi-Fi probe requests, and demonstrate that they hold enough information to perform tracking, even if the MAC address is periodically randomized. First, the list of information elements form a fingerprint of a device. This fingerprint has enough entropy to identify a device or a small group of devices. We show that when combining this fingerprint with frame sequence numbers, tracking devices is possible regardless of their MAC address. In particular we rely on the observation that most devices do not reset the frame sequence counter when the MAC address is changed. In addition, we show that the scrambler seeds used at the physical layer is predictable in many commodity Wi-Fi devices. Being managed at the hardware level, there is currently no way to reset nor change its value, which makes it a persistent threat. Finally, we introduce two active attacks that leverage service discovery mechanisms of Wi-Fi in order to obtain identifying information on devices that are using MAC address randomization.</p><p>Our findings highlight the difficulty of implementing antitracking solutions for wireless devices. In particular, it shows that MAC address randomization alone is not enough to protect users' privacy. However, several measures can be taken to limit the impact of the issues presented in this paper. At the software level, the driver (or firmware) should reset the sequence number field as well as any other predictable field found in frames. Additionally, the amount of information elements in probe requests should be kept to a bare minimum to avoid fingerprinting. Finally, Wi-Fi radios, which are generally implemented in hardware, should be modified so scrambler seeds are not predictable. This can be accomplished by letting the hardware generate cryptographically random seeds, or by allowing the driver to instruct the radio which scrambler seed value should be used.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>x 0 x 1 x 2 x 3 x 4 x 5 x 6 Figure 1 :</head><label>61</label><figDesc>Figure 1: The scrambler used in 802.11 frames.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Number of devices that share the same IE fingerprint with a group (i.e., anonymity set) of varying size.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Number of devices that share the same SSID fingerprint with a group (i.e., anonymity set) of varying size.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Probability of a device being successfully tracked using Algorithm 2, in function of the duration that the device was present, and the number of concurrent devices.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Cumulative distribution of the number of affected devices as a function of the number of SSIDs.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc><ref type="bibr" target="#b9">11</ref>, the scrambler XORs the input data with a bit sequence generated by a Linear Feedback Shift Register (LFSR) whose feedback function is [31, §18.3.5.5]: Format of legacy OFDM frames. The Tail field is zeroed and not scrambled. Bits are shown in transmit order.</figDesc><table><row><cell></cell><cell>Scrambled Data</cell><cell></cell><cell></cell></row><row><cell>Rate 4 bits Figure 2:</cell><cell>12 symbols Length 12 bits Reserved 1 bit Definition PLCP Preamble Signal 24 bits SERVICE 16 bits PSDU variable Tail 6 bits Parity 1 bit Scrambler Init 7 bits Reserved 9 bits</cell><cell>Tail 6 bits</cell><cell>Padding variable</cell></row></table><note><p>1. The 802.11 scrambler feedback function L : F 7 2 → F2 is defined by L(x0x1 . . . x6) = x0 ⊕ x3. We call x0 and x3 the feedback taps. Here F2 is the field {0, 1}, and F n 2 a bitstring of length n representing LFSR states. Concatenation of bitstrings x and y is denoted by xy.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 :</head><label>1</label><figDesc>Details of the probe requests datasets.</figDesc><table><row><cell>Dataset</cell><cell>Lab</cell><cell>Train-station</cell><cell>Sapienza</cell></row><row><cell>#MAC addr.</cell><cell>500</cell><cell>10 000</cell><cell>160 000</cell></row><row><cell cols="2">#Probe Req. 120 000</cell><cell>110 000</cell><cell>8 million</cell></row><row><cell>Time frame</cell><cell>Oct '15</cell><cell>Oct/Nov '15</cell><cell>Feb/May '13</cell></row><row><cell>Location</cell><cell>Lab</cell><cell>Train Station</cell><cell>Rome</cell></row><row><cell cols="4">we restricted the capture to probe requests only, which means</cell></row><row><cell cols="4">that no network data was collected. In addition, we applied</cell></row><row><cell cols="4">to our datasets the same anomyzation method as used by</cell></row><row><cell cols="4">Barbera et al. on the Sapienza dataset: once collected, all</cell></row><row><cell cols="4">identifiers (MAC addresses and SSIDs) were replaced by a</cell></row><row><cell cols="3">pseudonym, preventing any re-identification.</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 2 :</head><label>2</label><figDesc>Analysis of the Information Elements of probe requests in the considered datasets. For each item: the entropy brought by the element, the percentage of devices for which this item is stable over time, and the percentage of devices that include this item in their probe requests.</figDesc><table><row><cell>Element</cell><cell>Lab</cell><cell cols="3">Entropy (bits) Station Sapienza Lab</cell><cell cols="3">Stability Station Sapienza Lab</cell><cell cols="2">Affected devices Station Sapienza</cell></row><row><cell>HT capabilities info</cell><cell>3.94</cell><cell>4.74</cell><cell>3.35</cell><cell cols="2">96.0% 95.9%</cell><cell>99.6%</cell><cell cols="2">90.9% 90.0%</cell><cell>81.1%</cell></row><row><cell>Ordered list of tags numbers</cell><cell>4.23</cell><cell>5.24</cell><cell>4.10</cell><cell cols="2">93.6% 94.2%</cell><cell>91.2%</cell><cell cols="2">100% 100%</cell><cell>100%</cell></row><row><cell>Extended capabilities</cell><cell>2.59</cell><cell>2.57</cell><cell>0.064</cell><cell cols="2">98.5% 99.4%</cell><cell>99.9%</cell><cell cols="2">55.4% 51.3%</cell><cell>0.6%</cell></row><row><cell>HT A-MPDU parameters</cell><cell>2.59</cell><cell>2.67</cell><cell>2.54</cell><cell cols="2">97.8% 99.1%</cell><cell>99.7%</cell><cell cols="2">90.9% 90.0%</cell><cell>81.1%</cell></row><row><cell>HT MCS set bitmask</cell><cell>1.49</cell><cell>1.43</cell><cell>1.16</cell><cell cols="2">97.6% 99.0%</cell><cell>99.9%</cell><cell cols="2">90.9% 90.0%</cell><cell>81.1%</cell></row><row><cell>Supported rates</cell><cell>1.18</cell><cell>2.10</cell><cell>1.36</cell><cell cols="2">98.2% 95.9%</cell><cell>99.8%</cell><cell cols="2">100% 99.9%</cell><cell>100%</cell></row><row><cell cols="2">Interworking -access net. type 1.08</cell><cell>1.11</cell><cell>0.006</cell><cell cols="2">99.6% 99.6%</cell><cell>100.0%</cell><cell cols="2">47.5% 46.1%</cell><cell>0.04%</cell></row><row><cell>Extended supported rates</cell><cell>1.00</cell><cell>1.77</cell><cell>0.886</cell><cell cols="2">98.0% 96.3%</cell><cell>99.4%</cell><cell cols="2">99.1% 72.6%</cell><cell>99.7%</cell></row><row><cell>WPS UUID</cell><cell cols="2">0.878 0.788</cell><cell>0.658</cell><cell cols="2">98.2% 99.2%</cell><cell>99.6%</cell><cell>8.4%</cell><cell>5.5%</cell><cell>3.6%</cell></row><row><cell>HT extended capabilities</cell><cell cols="2">0.654 0.623</cell><cell>0.779</cell><cell cols="2">97.8% 98.9%</cell><cell>99.9%</cell><cell cols="2">90.9% 90.0%</cell><cell>81.1%</cell></row><row><cell>HT TxBeam Forming Cap.</cell><cell cols="2">0.598 0.587</cell><cell>0.712</cell><cell cols="2">97.8% 98.9%</cell><cell>99.9%</cell><cell cols="2">90.9% 90.0%</cell><cell>81.1%</cell></row><row><cell>HT Antenna Selection Cap.</cell><cell cols="2">0.579 0.576</cell><cell>0.711</cell><cell cols="2">98.0% 98.9%</cell><cell>99.9%</cell><cell cols="2">90.9% 90.0%</cell><cell>81.1%</cell></row><row><cell>Overall</cell><cell>5.48</cell><cell>7.03</cell><cell>5.65</cell><cell cols="2">92.5% 90.7%</cell><cell>88.8%</cell><cell>-</cell><cell>-</cell><cell>-</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 3 :</head><label>3</label><figDesc>Results of the WPS UUID re-identification attack</figDesc><table><row><cell>Dataset</cell><cell>Number of clients</cell><cell>Fraction of success-</cell></row><row><cell></cell><cell>with WPS a tag</cell><cell>fully reversed UUID</cell></row><row><cell>Lab</cell><cell>8.4%</cell><cell>76.1% (35/46)</cell></row><row><cell cols="2">Train-station 5.5%</cell><cell>73.9% (391/529)</cell></row><row><cell>Sapienza</cell><cell>3.6%</cell><cell>92.0% (5378/5844)</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>Table 4 :</head><label>4</label><figDesc>Intel 7260 AC shift distances in function of the bitrate and PSDU length (in bytes) of the previous frame.</figDesc><table><row><cell>Bitrate</cell><cell>PSDU byte length modulo 12 0 1 2 3 4 5 6 7 8 9 10 11</cell></row><row><cell cols="2">6 Mbps 22 46 14 14 54 54 22 46 46 46 22 22</cell></row><row><cell cols="2">12 Mbps 54 54 54 54 54 38 54 54 54 38 38 38</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.">ACKNOWLEDEGMENTS</head><p>This research is partially funded by the Research Fund KU Leuven and Région Rhône-Alpes's ARC7. Mathy Vanhoef holds a Ph. D. fellowship of the Research Foundation -Flanders (FWO). This work used the FIT/CorteXlab facility (https://www.cortexlab.fr) for its measurement campaign.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Tails -privacy for anyone anywhere</title>
		<ptr target="https://tails.boum.org" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">O</forename><surname>Abukmail</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mac</forename><surname>Wifi</surname></persName>
		</author>
		<author>
			<persName><surname>Changer</surname></persName>
		</author>
		<ptr target="https://play.google.com/store/apps/details?id=com.wireless.macchanger" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">CRAWDAD dataset sapienza/probe-requests</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">V</forename><surname>Barbera</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Epasto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Mei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kosta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">C</forename><surname>Perta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Stefa</surname></persName>
		</author>
		<ptr target="http://crawdad.org/sapienza/probe-requests/20130910" />
		<imprint>
			<date type="published" when="2013-09">10 November, 2015. Sept. 2013</date>
		</imprint>
	</monogr>
	<note>v. 2013-09-10</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<author>
			<persName><forename type="first">B</forename><surname>Bloessl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Segata</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Sommer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Dressler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OFDM receiver for GNU radio</title>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="volume">802</biblScope>
		</imprint>
	</monogr>
	<note>SRIF Workshop</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">The scrambler attack: A robust physical layer attack on location privacy in vehicular networks</title>
		<author>
			<persName><forename type="first">B</forename><surname>Bloessl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Sommer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Dressler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Eckhoff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ICNC</title>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Wireless device identification with radiometric signatures</title>
		<author>
			<persName><forename type="first">V</forename><surname>Brik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Banerjee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Gruteser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Oh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">MobiCom</title>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Wi-Fi internet connectivity and privacy: hiding your tracks on the wireless internet</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">O</forename><surname>Carlos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Bernardos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Juan</forename><forename type="middle">Carlos</forename><surname>Zúńiga</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE CSCN</title>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Chainfire</forename><surname>Pry-Fi</surname></persName>
		</author>
		<ptr target="https://play.google.com/store/apps/details?id=eu.chainfire.pryfi" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Fingerprinting smartphones remotely via ICMP timestamps</title>
		<author>
			<persName><forename type="first">M</forename><surname>Cristea</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Groza</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications Letters</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1081" to="1083" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
	<note>IEEE</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Attacking automatic wireless network selection</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Dai Zovi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Macaulay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Sixth Annual SMC Inf. Assurance Workshop</title>
		<meeting>of the Sixth Annual SMC Inf. Assurance Workshop</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">On physical-layer identification of wireless devices</title>
		<author>
			<persName><forename type="first">B</forename><surname>Danev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Zanetti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Capkun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys (CSUR)</title>
		<imprint>
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page">6</biblScope>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Snoopy: Distributed tracking and profiling framework</title>
		<author>
			<persName><forename type="first">C</forename><surname>Daniel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Glenn</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">2012. 2012</date>
			<biblScope unit="volume">44</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Analysing the privacy policies of Wi-Fi trackers</title>
		<author>
			<persName><forename type="first">L</forename><surname>Demir</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Cunche</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Lauradoux</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 2014 workshop on physical analytics</title>
		<meeting>of the 2014 workshop on physical analytics</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Identifying unique devices through wireless fingerprinting</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">C C</forename><surname>Desmond</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">C</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">C</forename><surname>Pheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">S</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">WiSec</title>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">How unique is your web browser?</title>
		<author>
			<persName><forename type="first">P</forename><surname>Eckersley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Privacy Enhancing Technologies</title>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Passive data link layer 802.11 wireless device driver fingerprinting</title>
		<author>
			<persName><forename type="first">J</forename><surname>Franklin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Mccoy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Tabriz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Neagoe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">V</forename><surname>Randwyk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Sicker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security</title>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">How talkative is your mobile device? An experimental study of Wi-Fi probe requests</title>
		<author>
			<persName><forename type="first">J</forename><surname>Freudiger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">WiSec</title>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">NSA tracking cellphone locations worldwide, Snowden documents show</title>
		<author>
			<persName><forename type="first">B</forename><surname>Gellman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Soltani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">The Washington Post</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Channel bounding and MAC protection mechanisms for 802.11ac</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">X</forename><surname>Gong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Hart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Xia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Want</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">GLOBECOM</title>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">A method for generating semantically opaque interface identifiers with ipv6 stateless address autoconfiguration (slaac)</title>
		<author>
			<persName><forename type="first">F</forename><surname>Gont</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">RFC</title>
		<imprint>
			<biblScope unit="volume">7217</biblScope>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">No, this isn&apos;t a scene from minority report. This trash can is stalking you</title>
		<author>
			<persName><forename type="first">D</forename><surname>Goodin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Ars Technica</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Can Ferris Bueller still have his day off? protecting privacy in the wireless era</title>
		<author>
			<persName><forename type="first">B</forename><surname>Greenstein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gummadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Kohno</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Seshan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wetherall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX HotOS</title>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">iwlwifi: mvm: support random MAC address for scanning</title>
		<author>
			<persName><forename type="first">E</forename><surname>Grumbach</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Linux commit effd05ac479b</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Enhancing location privacy in wireless LAN through disposable interface identifiers: A quantitative analysis</title>
		<author>
			<persName><forename type="first">M</forename><surname>Gruteser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Grunwald</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mobile Networks and Applications</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="315" to="325" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Sequence number-based MAC address spoof detection</title>
		<author>
			<persName><forename type="first">F</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Chiueh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">RAID</title>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Experience with MAC address randomization in Windows 10</title>
		<author>
			<persName><forename type="first">C</forename><surname>Huitema</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">93th Internet Engineering Task Force Meeting (IETF)</title>
		<imprint>
			<date type="published" when="2015-07">July 2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Personal communication</title>
		<author>
			<persName><forename type="first">C</forename><surname>Huitema</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015-11">Nov. 2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Tracking games in mobile networks</title>
		<author>
			<persName><forename type="first">M</forename><surname>Humbert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">H</forename><surname>Manshaei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Freudiger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J.-P</forename><surname>Hubaux</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conf. on Decision and Game Theory for Security</title>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Mobile location tracking in metro areas: Malnets and others</title>
		<author>
			<persName><forename type="first">N</forename><surname>Husted</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Myers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications</title>
		<imprint>
			<biblScope unit="volume">802</biblScope>
			<biblScope unit="page" from="11" to="2012" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
	<note>IEEE Std</note>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
	</analytic>
	<monogr>
		<title level="m">Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications: Amendment 9: Interworking with External Networks</title>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="volume">802</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">On fast and accurate detection of unauthorized wireless access points using clock skews</title>
		<author>
			<persName><forename type="first">S</forename><surname>Jana</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">K</forename><surname>Kasera</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">MobiCom</title>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">A universally unique identifier (UUID) URN namespace</title>
		<author>
			<persName><forename type="first">P</forename><surname>Leach</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mealling</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Salz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">RFC</title>
		<imprint>
			<biblScope unit="volume">4122</biblScope>
			<date type="published" when="2005-07">July 2005</date>
		</imprint>
	</monogr>
	<note>Proposed Standard</note>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Privacy-preserving 802.11 access-point discovery</title>
		<author>
			<persName><forename type="first">J</forename><surname>Lindqvist</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Aura</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Danezis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Koponen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Myllyniemi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Mäki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Roe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">WiSec</title>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<author>
			<persName><forename type="first">B</forename><surname>Misra</surname></persName>
		</author>
		<ptr target="http://blog.airtightnetworks.com/ios8-mac-randomization-analyzed/" />
		<title level="m">iOS 8 MAC randomization -analyzed</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Tracking unmodified smartphones using Wi-Fi monitors</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">B M</forename><surname>Musa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Eriksson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SenSys</title>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">CreepyDOL: Cheap, distributed stalking</title>
		<author>
			<persName><forename type="first">B</forename><surname>O'connor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">BlackHat</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">11 user fingerprinting</title>
		<author>
			<persName><forename type="first">J</forename><surname>Pang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Greenstein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gummadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Seshan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wetherall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">MobiCom</title>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="volume">802</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Tryst: The case for confidential service discovery</title>
		<author>
			<persName><forename type="first">J</forename><surname>Pang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Greenstein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Seshan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wetherall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">HotNets</title>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">The NSA&apos;s secret role in the U.S. assassination program</title>
		<author>
			<persName><forename type="first">J</forename><surname>Scahill</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Greenwald</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Intercept</title>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Privacy and your app</title>
		<author>
			<persName><forename type="first">K</forename><surname>Skinner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Novak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Apple Worldwide Dev. Conf. (WWDC)</title>
		<imprint>
			<date type="published" when="2015-06">June 2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Who do you sync you are?: smartphone fingerprinting via application behaviour</title>
		<author>
			<persName><forename type="first">T</forename><surname>Stöber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Frank</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Schmitt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Martinovic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">WiSec</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">An overview of peak-to-average power ratio reduction techniques for OFDM systems</title>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Tellambura</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE ISSPIT</title>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Wireless networking in Windows 10</title>
		<author>
			<persName><forename type="first">W</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Windows Hardware Engineering Community conference (WinHEC)</title>
		<imprint>
			<date type="published" when="2015-03">Mar. 2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
		<title level="m" type="main">Wi-Fi Alliance. Hotspot 2.0 (Release 2) Technical Specification v1</title>
		<imprint>
			<date type="published" when="2010">1.0, 2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<monogr>
		<author>
			<persName><forename type="first">Wi-Fi</forename><surname>Alliance</surname></persName>
		</author>
		<title level="m">Wi-Fi Simple Configuration Protocol and Usability Best Practices for the Wi-Fi Protected Setup Program</title>
		<imprint>
			<date type="published" when="2011-04">April 2011</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
