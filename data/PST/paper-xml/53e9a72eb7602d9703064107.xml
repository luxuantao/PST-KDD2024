<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Energy-Aware Data-Centric Routing in Microsensor Networks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Azzedine</forename><surname>Boukerche</surname></persName>
							<email>boukerche@site.uottawa.ca</email>
							<affiliation key="aff0">
								<orgName type="department">SITE</orgName>
								<orgName type="institution">University of Ottawa</orgName>
								<address>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Xiuzhen</forename><surname>Cheng</surname></persName>
							<email>cheng@gwu.edu</email>
							<affiliation key="aff1">
								<orgName type="department">Dept. of Computer Science</orgName>
								<orgName type="institution">George Washington University</orgName>
								<address>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Joseph</forename><surname>Linus</surname></persName>
							<email>jlinus@cs.unt.edu</email>
							<affiliation key="aff2">
								<orgName type="department">Dept. of Computer Sciences</orgName>
								<orgName type="institution">University of North Texas</orgName>
								<address>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Energy-Aware Data-Centric Routing in Microsensor Networks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">1BCED9274A030B254E30E5125975A1A0</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T08:12+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>C.2 [Computer-Communication Networks]: Distributed Systems</term>
					<term>C.4 [Performanceof Systems]: Modeling Techniques</term>
					<term>Algorithms, Performance, Experimentation Energy, Routing, Sensors, Network Simulator NS-2, Wireless Neyworks</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Large-scale wireless sensors are expected to play an increasingly important role in future civilian and military settings where collaborative microsensors could be very effective in monitoring their operations. However, low power and innetwork data processing make data-centric routing in wireless sensor networks a challenging problem.</p><p>In this paper, we propose a novel and efficient energyaware distributed heuristic, which we refer to as EAD, to build a special rooted broadcast tree with many leaves that is used to facilitate data-centric routing in wireless microsensor networks. Our EAD algorithm makes no assumption on local network topology, and is based on residual power. It makes use of a neighboring broadcast scheduling and distributed competition among neighboring nodess. We discuss the implementation of our scheme, and present an extensive simulation experiments to study the its performance. Our experimental results indicate clearly that our EAD scheme outperforms previous schemes.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Research on wireless microsensor networks has received a great deal of interest in recent years mainly due to its wide applications, such as monitoring (habitat, medical, seismic, contamination transport), surveillance, and pre-warning purposes.</p><p>Wireless microsensor networks <ref type="bibr" target="#b18">[18]</ref> usually contains thousands or millions of sensors, which are randomly and densely deployed (10 to 20 sensors per m 2 ). A sensor network provides a global view of the monitored area based on local observations measured by each sensor. Sensors are powered by battery, which is impossible to get recharged after deployement. Note that sensor networks are designed to have long operation time (i.e., several years). However, sensors do not have unlimited resource supplies, e.g., power, CPU, memory, etc. Consequently, they are prone to failure. Thereby making routing schemes based on unique addresses that are originated and applied in IP networks, a challenging problem in wireless sensor networks.</p><p>Within a sensor the dominant energy consumer is the radio transceiver <ref type="bibr" target="#b11">[11]</ref>. For a sensor network with short transmission range, the radio consumes almost the same amount of energy in transmit, receive and idle mode <ref type="bibr" target="#b1">[1]</ref>. Therefore the only way to save energy is to completely turn off the radio. However, a sleeping sensor can't function as a relay even though it can continue sensing and it can wakeup when some events are detected. Thus, we can't turn off all sensors at the same time in a sensor network. Some sensors must be active for traffic relaying.</p><p>In this paper, we propose to construct a virtual backbone, which contains all active sensors, to assist energyaware routing. All sensors not in the virtual backbone turn off their radios in order to conserve thier power supply. Backbone sensors are in charge of in-network data processing and traffic relaying. This virtual backbone can be easily reconfigured when its topology changes. Our work is motivated by SPAN <ref type="bibr" target="#b5">[5]</ref>, GAF <ref type="bibr" target="#b22">[22]</ref> and LEACH <ref type="bibr" target="#b14">[14]</ref>. While SPAN and GAF are promising methods, they may not be suitable for dense microsensor networks, mainly due to their assumptions and the unique features of sensor networks presented above. A sensor with tens neighbors may not afford to store its 2-hop neighborhoods' information as is done in the SPAN model, and it may not have information such as the position of the nodes as in the GAF model. In this paper, we propose an algorithm to compute a broadcast tree rooted at the gateway. This broadcast tree spans all sensors and it has large number of leaves. All the leaf sensors turn off their radios to save power while all active sensors stay alert for traffic relaying. We map our problem to the construction of the spanning tree with maximum number of leaves, which is known as an NP-hard problem, since it is equivalent to minimum connected dominating set <ref type="bibr" target="#b12">[12]</ref>. The reduced topology by all non-leaf nodes forms the virtual backbone. We present a novel Energy-Aware Data-centric routing heuristic, which we refer to as EAD, that exhibits a low message overhead. EAD computes a broadcast tree approximating optimal spanning tree with maximum number of leaves.</p><p>The novel concepts involved in EAD include the neighboring broadcast scheduling and the distributed competition among neighbors, based on residual energy. These two characteristics ensure that the resultant tree has many leaves and sensors with higher residual power have higher chance to be non-leaf nodes. EAD follows the energy-aware paradigm and results in a special rooted broadcast tree, which is designed intentionally for data-centric routing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">NETWORK MODEL</head><p>In this paper, we consider wireless microsensor networks for monitoring abnormal events. Example applications include habitat monitoring <ref type="bibr" target="#b15">[15,</ref><ref type="bibr" target="#b17">17]</ref>, contamination transport monitoring <ref type="bibr" target="#b11">[11]</ref>, forest fire prewarning <ref type="bibr" target="#b23">[23]</ref>, etc. We assume that the network contains hundreds or thousands of smart sensors deployed randomly in the target area. There exists one gateway that connects the microsensor network to the outside distributed system such as Internet. The gateway is located at the boundary of the monitored area, where it is reachable by at least some sensors. We refer to each microsensor as data source or event source since data in a sensor network is generated by sensors, and the gateway as data sink or event sink.</p><p>The architecture of a microsensor <ref type="bibr" target="#b18">[18]</ref> contains 4 components: sensing circuitry, digital processing, power supply, and radio transceiver. Among these 4 components, radio transceiver is the dominant power consumer <ref type="bibr" target="#b1">[1,</ref><ref type="bibr" target="#b10">10,</ref><ref type="bibr" target="#b18">18]</ref>. The energy spent for sensing and data processing is negligible. For example, the power consumed by a Berkeley mote <ref type="bibr" target="#b17">[17]</ref> to transmit 1 bit data is equivalent to 800 instructions. For sensors with short transmission range like mote, the energy consumed for different mode (transmit, receive and idle) are comparable, while a sleeping sensor (radio is off) consumes little energy. Figure <ref type="figure" target="#fig_0">1</ref> gives more concrete idea on radio consumption in a typical sensor. Thus to save energy the sensor needs to completely turn off its radio.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">DATA-CENTRIC ROUTING IN MICRO-SENSOR NETWORKS</head><p>In-networking processing can significantly improve the scalability and lifetime of microsensor networks. At each sensor, the local raw data is first combined with partially processed data delivered from sensors farther away from the sink, and then the aggregated result is transmitted to the sensor closer to the sink or the sink itself for further processing. Intuitively, data is routed along a reversed multicast tree with the sink as the root. Data aggregation happens at each non-leaf node, which summarizes the outputs based on the aggregation function (SUM, AVG, MEAN, MAX, etc.) from all sensors in the subtree rooted at itself and transmits the aggregated data to its parent. This process is termed data- centric routing <ref type="bibr" target="#b13">[13,</ref><ref type="bibr" target="#b15">15,</ref><ref type="bibr" target="#b16">16,</ref><ref type="bibr" target="#b17">17]</ref>. Figure <ref type="figure" target="#fig_2">2</ref> gives an example of data-centric routing where the highest temperature needs to be reported to the user.  Traditional network-wide routing is termed address-centric routing <ref type="bibr" target="#b16">[16]</ref>. A packet is routed based on the unique destination IP address and its data payload remains unchanged during the delivery from source to destination. This routing scheme does not work with microsensor networks because of the lackness of globally unique address and the extreme energy constraints for the large volume of raw data. In a microsensor network, data is processed before transmission. Redundant and useless data is discarded. Local data is aggregated to provide globally-effective result. It is possible that an information packet contains different values from hop to hop during the transmission from a leaf to intermediate sensors then to the sink in the tree, because each intermediate sensor may aggregate multiple packets. In this aspect, microsensor network is the pure peer-to-peer network.</p><p>The reversed multicast tree construction for data-centric routing is determined by the following application scenarios of microsensor networks: periodic, event-driven and querybased. Actually a sensor network may support all these 3 kinds of data traffic. For periodic traffic, all sensors report their measurements back to the user once every fixed time interval, as preprogrammed before deployment. This kinds of networks require all sensors to be synchronized (when to turn on their radios) such that in-network processing can be done at each intermediate sensor to guarantee one broadcast per sensor per time interval. For this kind of application, all broadcast trees have the same effects with respect to radio transceiver energy consumption since each sensor broadcasts exactly once in a designated time interval. But latency and power consumption for data processing may be significantly different. In event-driven model, no traffic flows within the network unless some special events are detected. These events must be reported to the user immediately after the detection. The multicast tree for data aggregation and dissemination is a Steiner tree containing the sink and all sensors detecting the events, plus relay sensors to bridge the traffic. The number of relay sensors needs to be minimized to decrease the total power consumption. This problem is NP-hard. In query model, routes need to be computed for query and data transmission between sink and the queried sensor. This problem is similar to that in event-driven model, except that query model includes the query, which propagates from the sink to the sources.</p><p>In all of these application scenarios, sensors remain in sleep mode most of the time in order to save energy. If all sensors need to report their readings periodically, then they must turn on their radios at roughly the same time. In a large embedded sensor network, synchronization is do-able but expensive. If only part of the network is involved at a time, as in event-driven and query model, sensors have no idea when an event will happen and when a query will be submitted. Simply turning on all the sensors is a big waste while turning off all of them make the network malfunction since a sleep sensor can not receive any message. An intuitive idea to overcome these problems is to activate a small subset of sensors at any instant of time such that they can collaboratively and quickly respond to spontaneous events and queries. But how many sensors need to be on? Too few active sensors causes network partition and packet loss while too many causes unnecessary energy expenditure and higher interference. We propose to use a spanning tree with maximum number of leaves rooted at the sink as a virtual backbone to facilitate data-centric routing.</p><p>Each sensor is either a leaf or an inner node in the tree. All leaf nodes turn off their radios to save energy. They periodically wake up to replace neighboring sensors with depleted power. Building a spanning tree with maximum number of leaves is equivalent to constructing a minimum connected dominating set, which is NP-Complete <ref type="bibr" target="#b12">[12]</ref>. There exist no efficient heuristics thus we have to seek good approximation algorithms. In this paper, we propose an message-efficient distributed heuristic to build an energy-aware rooted spanning tree with many leaves.</p><p>Let's look at how a spanning tree rooted at the sink (a reversed broadcast tree) may help with the existing data dissemination models in literature. The first one we study is directed diffusion <ref type="bibr" target="#b15">[15]</ref>. An interest is broadcasted by the sink first. Each intermediate sensor receiving the interest must broadcast it at least once to setup the reverse path to the sink. The target sensor (specified by the interest) sends back the data along several paths. The sink may reinforce the preferred path after the initial exploratory stage. Without location information, the interest must be broadcasted globally. This consumes energy and wireless bandwidth. If all the active sensors form a spanning tree rooted at the sink, the dissemination of the interest can be restricted to the non-leaf tree node. If the queried sensor is sleeping, an active neighbor can either activate it directly or store the query until the target sensor wakes up. Another interesting attempt for data-centric routing is described in <ref type="bibr" target="#b16">[16]</ref>. This reference describes an event-driven sensor network. All the sensors sensing the same event (within the same event radius) first aggregate the data then transmit the result to the sink. The computation of the transmission path is formed to a network Steiner tree problem, which is NP-hard. It is obvious that our virtual backbone can be used to relay the aggregated result to the sink. For applications with frequent occurrence of queries and events, our proposed approach is extremely helpful. Actually for a dense sensor network in which each sensor has tens of neighbors, only a few percent of total sensors need to be active at any time and these sensors form a virtual backbone rooted at the sink, ready for query and event dissemination. We are going to propose EAD, a heuristic to build a rooted broadcast tree with many leaves.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">EAD: THE HEURISTIC TO CONSTRUCT A ROOTED BROADCAST TREE WITH MANY LEAVES</head><p>In this section, we give the details of EAD plus a brief description of broadcast tree maintenance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">EAD description</head><p>We assume each sensor has its radio transceiver on and is sensing the common channel when the network is initially deployed. We also assume that all the sensors have the same transmission range. In other words, we only consider symmetric links. The control message contains 4 fields: type, level, parent, power. Let v be the sender of the message. Then typev indicates the status of v: 0 -undefined; 1 -leaf node; 2 -non-leaf node. levelv refers to the number of hops from v to the sink; parentv is the next hop of v in the path to the sink; powerv is the residual power Ev. If Ev is unavailable, we can use the difference between the expected lifetime of the battery and the total time with radio transceiver already on. The heuristic is sketched in Figure <ref type="figure" target="#fig_3">3</ref>.  Initially each sensor v has status 0. Sink first broadcasts msg(2, 0, N U LL, ∞), where ∞ indicates that the sender is the sink. When any node v receives msg <ref type="bibr" target="#b2">(2,</ref><ref type="bibr">levelu,</ref><ref type="bibr">parentu,</ref><ref type="bibr">Eu)</ref> from node u, it becomes a leaf node, senses the channel until it is idle, then waits for T v 2 time. If the channel is still idle, v broadcasts msg(1, levelu + 1, u, Ev). If v receives msg(1, levelu, parentu, Eu) from u, it senses the channel until it is idle, waits for time T v 1 . If the channel is still idle, v broadcasts msg(2, levelu + 1, u, Ev). In other words, it becomes a non-leaf node. Note that a waiting sensor goes back to sensing (see Figure <ref type="figure" target="#fig_3">3</ref>) if the common channel is occupied by other sensors before it times out. If a node v with status 1 receives msg(2, levelu, v, Ew) from w indicating that v is its parent, v broadcasts msg(2, levelv, parentv, Ev) immediately after the channel is idle (No waiting!). This process continues until every sensor is either a leaf node, or a nonleaf node. A sensor with status 2 will become a leaf node if it detects no children.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Receive from leaf node</head><p>Note that we use T v 1 and T v 2 to ensure that no two neighboring broadcasts are scheduled at the same time. T v 1 and T v 2 can be computed locally. Let Nv be the set of 1-hop neighbors of v. We require</p><formula xml:id="formula_1">T v 1 &gt; maxu∈N v {T u 2 }</formula><p>to ensure that a sensor becomes a non-leaf node in the tree only when necessary. We also require T v 1 and T v 2 be monotonically decreasing functions of Ev, the residual power of v. The basic idea is to force the neighboring sensors with higher energy broadcast earlier than those with lower residual power. For example, we can choose</p><formula xml:id="formula_2">T v 1 = 2 • t0 + c Ev and T v 2 = t0 + c</formula><p>Ev , where t0 is the upper bound of the propagation time between any pair of neighboring sensors, and c &gt; 0 is an adjusting constant. Note that with properly selected functions for T v 1 and T v 2 , local broadcasting among neighboring sensors can be scheduled without conflict.</p><p>The main features of EAD include the scheduling of local broadcasts by T1 and T2, and the distributed competition among neighboring nodes in order to become a non-leaf tree node by T1. The intuition behind the algorithm is stated below. After a sensor u announces its status 2 (non-leaf node) through broadcast, all its 1-hop neighbors with status 0 become leaf nodes. They announce their status in the reverse order of their residual power, with higher energy node in the neighborhood broadcasts earlier (for example, T v 2 = t0 + c Ev ). When the 2-hop neighbors of u with status 0 hear these broadcastings, They start to compete with each other. The winner are those with highest residual energy among its neighboring competitors (thus with smallest T1 among its neighboring competitors). Figure <ref type="figure" target="#fig_4">4</ref> gives an illustrative example. In Figure <ref type="figure" target="#fig_4">4</ref>(i) The original sensor network topology is given. Each sensor is labeled with its residual power. The islands indicate the competing neighboring groups in (ii) and (iii). In Figure <ref type="figure" target="#fig_4">4</ref>(ii), sink broadcasts to its 4 neighbors. The 2-hop neighbors form 3 neighboring groups. The sensors with highest energy in each group (replaced by triangles) win the local competition. In Figure <ref type="figure" target="#fig_4">4</ref>(iii), winners become non-leaf nodes. Each specifies its own parent, the neighbor with the highest energy in the partial tree. Each designated parent becomes a non-leaf node, with its neighbors not in the tree joining the tree immediately after the parent announces its new status. Latter, the neighbors of the winners (not in the tree) join the tree as children of its corresponding winner. Their (the winners) 2-hop neighbors (not in the tree) form 4 neighboring competing groups. Figure <ref type="figure" target="#fig_4">4</ref>(iv) Repeats (iii) to get the final broadcast tree with many leaves. Note that 2 winners (triangles) in (iii) become leaf nodes in the final tree event hough they the winner in (iii), since they have no children.</p><p>Note that EAD grows a broadcast tree from the sink. After the algorithm is done, all the leaf nodes can turn off their radios to save energy. They switch to "power-on" periodically or when some events are detected. This heuristic takes linear number of messages. Actually each node broadcasts at most twice the induced graph by all non-leaf nodes form the virtual backbone. Due to the broadcast nature of wireless communication, the virtual backbone may have a mesh structure. But each sensor records its parent leading to the sink. The sink can restrict the broadcast of queries to nodes within the virtual backbone and the sources can send back data to the sink along the backbone.</p><p>EAD also implies an algorithm for robust and efficient broadcast. It is stated below: Sink first broadcasts a message containing level 0. After receiving a message with level k the first time, v senses the channel until it is idle, waits for time T v 2 . If the channel is still idle, v broadcasts a message with level k + 1. If the channel is occupied by other sensors before v times out, v senses the channel again. This process continues until v's broadcast succeeds. Each node only broadcasts once.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Maintaining the broadcast tree</head><p>Our strategy extensively explores the dense connectivity of sensor networks.The maintainance of the tree is taken care of using a strategy similer to the one described in <ref type="bibr" target="#b14">[14]</ref>.The maintainance of the tree becomes important for two reasons. First,the non-leaf nodes may die thus orphaning all the child nodes which are transmitting data to that non-leaf node.Secondly,the non-leaf nodes which form the backbone tree have to stay awake all the time.This induces a huge energy drain on them as compared to the leaf nodes which are awake only occassionaly.This leads to fatigue in the nonleaf nodes.To impose an fairly similar energy demand on all nodes and to distribute to the work on the nodes the algorithm is executed in rounds .The technique effectively used in <ref type="bibr" target="#b14">[14]</ref> takes care of node fatigue and orphaned nodes.The initial pahse of the algorithm is the "initialization" phase where the nodes execute the EAD to elect the non-leaf nodes and set up the backbone. Once that is over the nodes proceed to "data-transmit" phase.In this phase the nodes transmit the data to the sink.Together the initialization phase and the data-transmit phase constitute a round.The round ends at the end of a data-transmit phase. When one round ends, the initialization for the next round begins and dead nodes and orphaned nodes are thus taken care of. The algorithm is effective since the initialization phase is significantly small compared to the data-transmission phase. When a non-leaf node effectively dies,its leaf nodes will have to resort to direct transmission to the sink which is costly.But this condition is only till the next leaf rotation round.As soon as the data-transmit state for current round expires,the sink will initiate a new round initialization by re-construction of the tree.This takes care of fatigue in the non-leaf nodes which have to stay awake all the time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">OPTIMIZATION TO LARGE SCALE DENSE SENSOR NETWORKS</head><p>EAD is efficient when the network size is small. For largescale sensor networks, EAD may take too much time since the execution process is propagated from the sink to the whole network. We propose in this section two approaches to "pre-process the network topology". The idea is to turn off the radios of some sensors such that only a subset of sensors attend the execution of EAD. Our approaches guarantee a rooted broadcast tree spanning all sensors even though only a subset of them execute EAD.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Position-based approach</head><p>Assume each sensor knows its position. Wattenhofer et. al. in <ref type="bibr" target="#b21">[21]</ref> have proved that if every node u has at least one active neighbor in each direction α, where α ≤ 120 • , then the topology is connected. Based on this claim, we propose the following heuristic.</p><p>We assume initially all sensors are in sleep mode. A sensor wakes up randomly (once every T0 time units) and broadcasts a hello message containing its own position. An active sensor u hearing a hello message from v determines whether v resides in one of its expected directions or not. u replies with a message containing its position and an INV I bit. If there is no active neighbor in the direction where v resides, INV I = 1; Otherwise, INV I = 0. If v receives a reply with INV I bit on, or detects that it has no neighbor in at least one direction (based on received message), v remains on. Otherwise, v returns back to sleep. After some time, the network enters an equilibrium state. After T0, we apply EAD over all active sensors to build a broadcast tree rooted at the sink. Those sleeping sensors wake up periodically (with period T0) to determine its parent, the active neighbor with highest energy. If an active node in the tree detects no children after T0 time units, it turns off its transceiver and goes back to sleep.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Topology-based approach</head><p>Note that the position-based approach described in Subsection 5.1 depends on the precise node position. However, location discovery in dense microsensor networks is very challenging <ref type="bibr" target="#b19">[19,</ref><ref type="bibr" target="#b20">20]</ref>. Existing algorithms achieve results with errors within several meters <ref type="bibr" target="#b19">[19]</ref>. For dense sensor networks with transmission range less than 10 meters, this error range is not tolerable. In this subsection, we propose a topologybased approach.</p><p>How to determine which sensor should be active if no position information is available? Let's consider the number of active neighbors in each direction α again, as in Subsection 5.1. Assume each sensor has k directions. Note that if α = 120 • , then k = 3. Let n be the number of active neighbors. Suppose that ni neighbors are in direction i. Then n1, n2, • • • , n k follow the multinomial distribution:</p><formula xml:id="formula_3">pn 1 ,n 2 ,••• ,n k = n! n1! • n2! • • • n k ! • p n 1 1 • p n 2 2 • • • p n k k (1)</formula><p>where pn 1 ,n 2 ,••• ,n k is the probability that ni neighbors are in directions i, pi is the probability that a neighbor is in direction i, and n1</p><formula xml:id="formula_4">+ n2 + • • • + n k = n.</formula><p>If all neighbors have the same probability to be in any direction i, that is,</p><formula xml:id="formula_5">p1 = p2 = • • • = p k = 1 k , then pn 1 ,n 2 ,••• ,n k = n! n1! • n2! • • • n k ! • 1 k n (2)</formula><p>The probability P that at least one neighbor appears in each If u receives a message with INIT bit on, or u detects that it has less than 4 active neighbors, it will remain wake-up; otherwise, it goes back to sleep. After T0 time, apply EAD to build a broadcast tree rooted at the sink. Not that with this approach, we can not guarantee a tree spanning all active sensors. But since sleeping sensors wake up periodically in order to determine its parent in the tree, they can be invited to join the tree as non-leaf nodes by active neighbors who need help to connect to the tree.</p><formula xml:id="formula_6">direction is È n 1 ≥1,n 2 ≥1,••• ,n k ≥1 pn 1 ,n 2 ,••• ,n k .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">SIMULATION EXPERIMENTS</head><p>The experiments were carried out using the Network Simulator ns-2 <ref type="bibr" target="#b24">[24]</ref>. In order to evaluate the performance of EAD, we choose the following metrics:</p><p>• Total number of active nodes: indicates the node failures due to low energy with passing time.The failure of a node is characterized by inability to generate packets that meet or exceed a thresh hold value (CSThresh). Efficient routing algorithms should have enough nodes alive throughout the simulation time to send data to base station.</p><p>• Throughput: shows the volume of data transmitted to the sink.The throughput of the algorithm shows the efficiency of the algorithm to deliver data to the sink.The primary task of the algorithm is to deliver data to the sink from the leaf nodes as efficiently as possible.We use this metric to evaluate the data throughput achieved by EAD.</p><p>• Energy expended: measures of the total energy expended by the network as a whole up to that point in time during simulation.Energy expended is an important parameter in evaluating the effectiveness of our algorithm. This metric shows the power saving capability of the algorithm.</p><p>Let us now turn to our reslts.</p><p>Figures <ref type="figure">5</ref><ref type="figure">6</ref><ref type="figure">7</ref>show the number of nodes alive plotted against simulation time when the network contains 50, 150 and 200 nodes respectively. The amount of energy per node is 2 J at the beginning. As we can see from the figures, the number of nodes alive decreases after some simulation time. As non-leaf nodes that fail the load on the remaining nodes increase and more nodes are woken up and recruited in the tree, the failures increase rapidly after a critical point in simulation. In figure <ref type="figure">5</ref> the node failures increase rapidly for the EAD curve after 200 seconds. Similarly for the rest of the curves the node failures increase rapidly towards the end of the simulations. Both EAD and LEACH behave in a similer way in this respect. It can be seen that EAD performs better than LEACH in the figures in terms of the node failure rate. EAD routs the data packets to the sink by multihop routing as opposed to LEACH where the clusterheads have to tranmit the data directly to the base station. The energy dissipated is lower in the case of EAD because the backbone node transmits only to a neighboring node up one level from it.</p><p>Figures 8-10 portray the total energy dissipated vs simulation time for the same set of network topologies. This is a limited energy supply and the amount of energy per node is 2 J. For this particular simulation the sleep energy have been set to zero. In actual sensor networks PSleep is a negligible quantity which can be safely ignored in a simulated environment like this. Energy dissipated is a measure of the power awareness of our algorithm, which attempts to extend network lifetime by forming a routing tree rooted at the sink, and recruiting only a minimum number of non-leaf nodes. The non leaf nodes are the only nodes that have to stay awake throughout a single round to be able to receive from the leaf nodes and transmit to the base station. This is the reason why EAD performs better compared to LEACH. The amount of work invloved in setting up the virtual back bone in the case of EAD makes it slightly costlier than LEACH during the set-up phase but this is not a disadvantage when looking at the overall performance. The energy savings in the steady or data-transmit phase of EAD makes it more efficient than LEACH overall.   of nodes respectively. The amount of energy per node is still 2 J. The throughput to the sink is cumulative and steadily increases with the simulation time. The gradual flattening of the curve towards the end of simulation is due to the fact that nodes are failing with passing simulation time. From graph 12 we can see that the throughput rate slows down after 300 seconds. Similar behavior is seen in other graphs also. This is because of the fact that the number of live nodes is significantly low, and this lowers the throughput.</p><p>The throughput growth from 30000 to 35000 data signals in figure <ref type="figure" target="#fig_2">12</ref> is significantly slow for this reason.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">CONCLUSIONS</head><p>In this paper we have proposed an efficient Energy-Aware Data-centric routing heuristic, to build a broadcast tree rooted at gateway to facilitate data-centric routing in dense wireless microsensor networks. EAD computes a tree with many leaves. With the transceivers of all leaf nodes being turned off, the network lifetime can be greatly extended. Simulation study shows that EAD performs very well.</p><p>As a future work, we intend to extend our simulation experiments to take the residual power of parent nodes into consideration, thereby improving the averaged power over all active neighbors.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Energy consumption for a typical sensor reported in [11].</figDesc><graphic coords="2,317.00,54.28,238.45,112.03" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: An example to demonstrate data-centric routing. Label x(y) at each node means the local temperature measurement is x while the aggregated value so far is y. The aggregation function is max.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: State diagram for the proposed heuristic run by any node v other than sink.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: An illustrative example</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 13 :</head><label>13</label><figDesc>Figure 5: EAD-50 Nodes</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 : The probability that at least one neighbor appears in each direction.</head><label>1</label><figDesc>Typical values of P are listed in Table1.Note that if each sensor has 4 or 5 active neighbors, then with probability around 50%, it has one neighbor in each</figDesc><table><row><cell>k n</cell><cell>3</cell><cell>4</cell><cell>5</cell><cell>6</cell><cell>7</cell><cell>8</cell><cell>9</cell><cell>10</cell><cell>11</cell><cell>12</cell><cell>13</cell><cell>14</cell><cell>15</cell></row><row><cell>3</cell><cell cols="13">0.22 0.44 0.62 0.74 0.83 0.88 0.92 0.95 0.97 0.98 0.98 0.99 0.99</cell></row><row><cell>4</cell><cell></cell><cell cols="12">0.09 0.23 0.38 0.51 0.62 0.71 0.78 0.83 0.87 0.91 0.93 0.95</cell></row><row><cell>5</cell><cell></cell><cell></cell><cell cols="11">0.04 0.12 0.22 0.32 0.43 0.52 0.61 0.68 0.74 0.79 0.83</cell></row><row><cell>6</cell><cell></cell><cell></cell><cell></cell><cell cols="10">0.01 0.05 0.11 0.19 0.27 0.36 0.44 0.51 0.58 0.64</cell></row><row><cell></cell><cell cols="3">Simulation time</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">4500 seconds.</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell cols="5">Starting Energy for each node</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>2J</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell cols="7">Threshold for Error-free packet, RXThresh</cell><cell></cell><cell></cell><cell>6e -9 W</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell cols="5">Threshold for detection, CSThresh</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>1e -9 W</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell cols="5">Radio Electronics Energy, Excvr</cell><cell></cell><cell></cell><cell></cell><cell cols="2">0e -9 J/Bit</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell cols="6">Transmit Amplifier energy, friss amp</cell><cell></cell><cell cols="5">9.6741659015025702e -12 J/m 2</cell><cell></cell></row><row><cell></cell><cell cols="5">Amplifier energy, tworay amp</cell><cell></cell><cell></cell><cell cols="5">1.303703703703703e -15 J/m 4</cell><cell></cell></row><row><cell></cell><cell cols="4">Beam forming energy, bf</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">5e -9 J/bit/Signal</cell><cell></cell><cell></cell></row><row><cell></cell><cell cols="6">Energy dissipation during sleep, PSleep</cell><cell></cell><cell></cell><cell></cell><cell>0</cell><cell></cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 2 :</head><label>2</label><figDesc>Simulation Parameters direction if k = 3. Based on this observation, we propose our algorithm as follows. Note that we assume initially all sensors have power off. A sensor u randomly (once every T0 time units) wakes up and broadcasts a hello message. An active neighbor v replies a message with a binary INV I bit. If v has less than 4 neighbors, then INIT = 1; Otherwise, INIT = 0.</figDesc><table /></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName><surname>References</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title/>
		<ptr target="http://www.rfm.com" />
	</analytic>
	<monogr>
		<title level="j">ASH Transceiver Designer&apos;s guide</title>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">New distributed algorithm for connected dominating set in wireless ad hoc networks</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">M</forename><surname>Alzoubi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P.-J</forename><surname>Wan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Frieder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 35th Hawaii International Conference on System Sciences</title>
		<meeting>35th Hawaii International Conference on System Sciences</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="3881" to="3887" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Protocols For Data Propagation In Wireless Sensor Networks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Boukerche</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Nikoletseas</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
	<note>Submitted</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">ASCENT: adaptive self-configuring sensor networks topologies</title>
		<author>
			<persName><forename type="first">A</forename><surname>Cerpa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Estrin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE INFOCOM&apos;02</title>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="1278" to="1287" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Span: an energy-efficient coordination algorithm for topology maintenance in ad hoc wireless networks</title>
		<author>
			<persName><forename type="first">B</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Jamieson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Balakrishnan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Morris</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001-07">2001. July 2001</date>
			<biblScope unit="page" from="85" to="96" />
			<pubPlace>MobiCom</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Virtual Backbone-Based Routing in Multihop Ad Hoc Wireless Networks</title>
		<author>
			<persName><forename type="first">X</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D.-Z</forename><surname>Du</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
	<note>submitted</note>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Polynomial-time approximation scheme for minimum connected dominating set in ad hoc wireless networks</title>
		<author>
			<persName><forename type="first">X</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D.-Z</forename><surname>Du</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>to appear in Networks</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Connected domination in ad hoc wireless networks</title>
		<author>
			<persName><forename type="first">M</forename><surname>Cadei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D.-Z</forename><surname>Du</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 6th International Conference on Computer Science and Informatics</title>
		<meeting>6th International Conference on Computer Science and Informatics</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">On the construction of virtual backbone for ad hoc wireless networks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Butenko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D.-Z</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Pardalos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2nd Conference on Cooperative Control and Optimization</title>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Next century challenges: scalable coordination in sensor networks</title>
		<author>
			<persName><forename type="first">D</forename><surname>Estrin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Govindan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SPIE</title>
		<imprint>
			<biblScope unit="page" from="229" to="237" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">D</forename><surname>Estrin</surname></persName>
		</author>
		<ptr target="http://nesl.ee.ucla.edu/tutorials/mobicom02" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Computers and intractability: a guide to the theory of NP-completeness</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">R</forename><surname>Garey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Johnson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1978">1978</date>
			<pubPlace>Freeman, San Francisco</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Building efficient wireless sensor networks with low-level naming</title>
		<author>
			<persName><forename type="first">J</forename><surname>Heidemann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Silva</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Intanagonwiwat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Govindan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Estrin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Ganesan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the eighteenth ACM Symposium on Operating Systems Principles (SOSP&apos;01)</title>
		<meeting>the eighteenth ACM Symposium on Operating Systems Principles (SOSP&apos;01)</meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="146" to="159" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Energy-efficient communication protocol for wireless microsensor networks</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">R</forename><surname>Heinzelman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Chandrakasan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Balakrishnan</surname></persName>
		</author>
		<idno>HICSS&apos;00</idno>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Directed diffusion: a scalable and robust communication paradigm for sensor networks</title>
		<author>
			<persName><forename type="first">C</forename><surname>Intanagonwiwat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Govindan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Estrin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th annual international conference on Mobile computing and networking (MobiCom&apos;02)</title>
		<meeting>the 6th annual international conference on Mobile computing and networking (MobiCom&apos;02)</meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="56" to="67" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Impact of Data Aggregation in Wireless Sensor Networks</title>
		<author>
			<persName><forename type="first">B</forename><surname>Krishnamachari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Estrin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Wicker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Preceedings of the 22nd International Conference on Distributed Computing Systems Workshops (ICDCSW&apos;02)</title>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="575" to="578" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">TAG: a tiny aggregation service for ad-hoc sensor networks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Madden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Franklin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Hellerstein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Hong</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
	<note>to appear in OSDI</note>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Energy-centric enabling technologies for wireless sensor networks</title>
		<author>
			<persName><forename type="first">R</forename><surname>Min</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Bhardwaj</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S.-H</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Ickes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Shih</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Sinha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Chandrakasan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002-08">August 2002</date>
			<publisher>IEEE Wireless Communications</publisher>
			<biblScope unit="page" from="28" to="39" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">A directionality based location discovery scheme for wireless sensor networks, WSNA&apos;02</title>
		<author>
			<persName><forename type="first">A</forename><surname>Nasipuri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Li</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="105" to="111" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Dynamic fine-grained localization in ad-hoc networks of sensors</title>
		<author>
			<persName><forename type="first">A</forename><surname>Savvides</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C.-C</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">B</forename><surname>Strivastava</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">ACM Sigmobile</title>
		<imprint>
			<biblScope unit="page" from="166" to="179" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Distributed topology control for power efficient operation in multihop wireless ad hoc networks</title>
		<author>
			<persName><forename type="first">R</forename><surname>Wattenhofer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Bahl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y.-M</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">INFOCOM</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="1388" to="1397" />
			<date type="published" when="2001">2002. 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<author>
			<persName><forename type="first">Y</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Heidemann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Estrin</surname></persName>
		</author>
		<title level="m">Geography-informed energy conservation for ad hoc routing, MobiCom</title>
		<meeting><address><addrLine>Rome, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-07">2001. July 2001</date>
			<biblScope unit="page" from="70" to="84" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">An energy-efficient MAC protocol for wireless sensor networks</title>
		<author>
			<persName><forename type="first">W</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Heidemann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Estrin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">INFOCOM</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="1567" to="1576" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">The Network Simulator ns-2 Documentation</title>
		<ptr target="www.isi.edu/nsman/ns" />
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
