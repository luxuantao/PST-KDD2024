<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Computer-Aided Design</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Xiang</forename><surname>Chen</surname></persName>
							<email>xchen@cad.zju.edu.cn</email>
							<affiliation key="aff0">
								<orgName type="laboratory">State Key Laboratory of CAD&amp;CG</orgName>
								<orgName type="institution">Zhejiang University</orgName>
								<address>
									<settlement>Hangzhou</settlement>
									<country key="CN">PR China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Shuming</forename><surname>Gao</surname></persName>
							<email>smgao@cad.zju.edu.cn</email>
							<affiliation key="aff0">
								<orgName type="laboratory">State Key Laboratory of CAD&amp;CG</orgName>
								<orgName type="institution">Zhejiang University</orgName>
								<address>
									<settlement>Hangzhou</settlement>
									<country key="CN">PR China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Youdong</forename><surname>Yang</surname></persName>
							<email>yyoudong@cad.zju.edu.cn</email>
							<affiliation key="aff0">
								<orgName type="laboratory">State Key Laboratory of CAD&amp;CG</orgName>
								<orgName type="institution">Zhejiang University</orgName>
								<address>
									<settlement>Hangzhou</settlement>
									<country key="CN">PR China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Shuting</forename><surname>Zhang</surname></persName>
							<email>zhangshuting@cad.zju.edu.cn</email>
							<affiliation key="aff0">
								<orgName type="laboratory">State Key Laboratory of CAD&amp;CG</orgName>
								<orgName type="institution">Zhejiang University</orgName>
								<address>
									<settlement>Hangzhou</settlement>
									<country key="CN">PR China</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Computer-Aided Design</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">DDDE052423768DDE3AD3AB0BEBF55536</idno>
					<idno type="DOI">10.1016/j.cad.2010.12.008</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T12:30+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>Top-down assembly design Top-down component design Multi-level assembly model Shape skeleton Layout skeleton Skeleton interface Skeleton feature Inheritance mechanism</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>To enable next generation CAD tools to effectively support top-down design of products, a top-down assembly design process is refined from the traditional product design process to better exhibit the recursive-execution and structure-evolvement characteristics of product design. Based on the top-down assembly design process, a multi-level assembly model is put forward to capture the abstract information, skeleton information and detailed information involved. The multi-level assembly model is a meta-level implementation and is easy to be extended. Moreover, the inheritance mechanisms are explored to ensure the feasibility of information transferring and conversion between different design phases in the top-down assembly design process. A top-down assembly design sample is analyzed at length to show the application effects of the multi-level assembly model and the relevant inheritance mechanisms. In addition, a practical topic about the model adaptation of existing CAD systems is also discussed for a broader application of the top-down assembly design. Finally, the conclusion of the work and the future directions for further exploration are given.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Due to the rapid development of global economics environment, many new products possess the characteristics of great complexity and scale, and need knowledge from multiple disciplines. Therefore, how to design these products effectively and efficiently is of great significance. Among various strategies for product design, the top-down approach is a quite prominent and natural way. In a top-down approach an overview of the product is first formulated, and each component (could be a part or a sub-assembly) is then refined in greater detail, sometimes in many additional subcomponent levels, until the base components are defined exactly. In this way the complex design work of a product is subdivided into several simpler design works of sub-modules gradually and recursively, hence to reduce the difficulty and complexity of the design. Meanwhile, these subdivided works could be executed in parallel once most of the interdependence among them has been predetermined. This parallelizability makes design cooperation between different groups possible.</p><p>Considering the importance of the top-down approach in product design, computer-based tools and packages should be provided to help designers carry out the top-down product design more easily and conveniently. Unfortunately, with the limited support of most commercial CAD software to the top-down product design nowadays, there are still many design works that cannot be powered up by computers. This will waste too much time in the product design and eventually delay the time the new product enters the market. It is obviously a loss to both companies and consumers.</p><p>To make next generation CAD tools supporting the top-down product design better, the following fundamental issues should be considered:</p><p>1. A reasonable top-down assembly design process underlaid which is suitable for computerization. 2. An integrated multi-level assembly model for capturing information in different levels of abstraction. 3. Various flexible mechanisms which ensure the transition and association of design information between different design phases.</p><p>The work here is exactly meant to explore the novel assembly design process, assembly model and inheritance mechanisms that are required by next generation CAD tools in order to support top-down product design effectively. Specifically, in this paper, a more accurately and compactly depicted top-down assembly design process is refined from traditional product design process. Based on the top-down assembly design process, we present a multi-level assembly model which has the ability to capture the important data and knowledge in design and thus can support different stages of the top-down assembly design. This model is a meta-level implementation and can support mainstream CAD systems through adaptation and extension. Meanwhile, the relevant inheritance mechanisms are explored to ensure the effective transmission and evolvement of design information 0010-4485/$ -see front matter Â© 2011 Elsevier Ltd. All rights reserved. doi:10.1016/j.cad.2010.12.008 between different design phases in the whole product design process.</p><p>The rest of the paper is organized as follows. Section 2 reviews some previous studies related to this work. Section 3 introduces the top-down assembly design process and analyzes the requirements for the corresponding computer-based supporting tool. In Section 4 we give the details of a multi-level top-down assembly model and Section 5 describes various inheritance mechanisms for top-down assembly design. Section 6 shows a topdown assembly design sample and some relevant applications of the multi-level assembly model. Then in Section 7, the adaptation and extension method for the existing CAD systems is discussed for practical top-down assembly design. Finally, conclusion and future work are provided.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Related works</head><p>Traditional mechanical design is a top-down process which starts with overall sketch and rough requirements to detailed and refined components gradually. It is well recognized that, in the long history of evolvement in mechanical design, top-down product design is always an important issue and the relevant computerbased tools supporting top-down design are absolutely necessary.</p><p>Some works analyze the characteristics of traditional top-down product design and discover the interesting issues about it. Libardi et al. <ref type="bibr" target="#b0">[1]</ref> give an overview of the literature before 1988 about the development of computer environments for mechanical assembly design. In the review, support for top-down design and multiple viewpoints is one of the key points. Wen Jian et al. <ref type="bibr" target="#b1">[2]</ref> overview the state of the art in the research of top-down product design and point out some problems which need to be overcome in top-down design systems, such as assembly model representation for topdown product design and the reasoning method from conceptual model to parametric model. The research conducted by MÃ¤ntylÃ¤ <ref type="bibr" target="#b2">[3]</ref> is a pioneer work which addresses the top-down product design system seriously. In the work, the author points out that the design process could be decomposed into functional design, conceptual design and detail design, while a top-down product design system should support multiple abstraction models for all the three design phases. Many important concepts and issues about top-down design approach in mechanical engineering are also discussed, such as abstract geometry, focus change, geometry inheritance and redesign problem.</p><p>The whole top-down product design consists of several design phases dealing with different levels of design information. Many relevant works are presented for specific design phases in the topdown product design.</p><p>There are a number of methods and techniques for establishing function structure in conceptual design. Sturges et al. <ref type="bibr" target="#b3">[4]</ref> present functional flow charts and functional logic diagrams for function representation. Umeda et al. <ref type="bibr" target="#b4">[5]</ref> propose the Function-Behavior-State (FBS) model which associates the function symbols, behaviors and states together, the first one the subjective part and the latter two the objective parts. Karnopp et al. <ref type="bibr" target="#b5">[6]</ref> discuss the use of bond graphs in modeling of electrical, mechanical and hydraulic systems. Gui et al. <ref type="bibr" target="#b6">[7]</ref> developed a set of behavioral specifications to capture the inter-relationships among components. More details and discussion about these techniques can be found in <ref type="bibr" target="#b7">[8]</ref>.</p><p>Layout design is a very important part in the embodiment design phase which follows the conceptual design. There are also some works concentrating on the development of computer-based tools for layout design. Lashin et al. <ref type="bibr" target="#b8">[9]</ref> analyze six levels of abstraction from the coarsest convex hull to the finest geometric model and conclude that the abstraction level 2 model is suited for design of large layouts, in which all the geometry necessary to check function, spatial compatibility, etc., are described.</p><p>Csabai et al. <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b10">11]</ref> use design spaces and interface features in their 3D Layout Module to determine the kinematic constraints between functional components in layout design. Based on their representation, kinematic analysis could be executed in an early stage during the whole design process. Mantripragada et al. <ref type="bibr" target="#b11">[12]</ref> present the concept of DFC (datum flow chain) to capture the fundamental structure of assembly. The logical layout design could be carried out to establish directed chains of dimensional datums to control how parts are located with respect to each other. Besides the works mentioned, Clement et al. <ref type="bibr" target="#b12">[13]</ref> present a model called TTRS (technologically and topologically related surfaces) to associate elementary surfaces. Along with TTRS, the MGDE (minimum geometric datum elements) is used to define the reference frames of various surfaces associations. Although the TTRS and MGDE are mainly presented for dimensioning and tolerancing, the idea of the ''abstraction of real surfaces'' behind MGDE could be potentially used in layout design to help design kinematic relationships.</p><p>In the last two decades, feature-based assembly modeling has attracted many researchers' attention. Shah et al. <ref type="bibr" target="#b13">[14]</ref> describe the assembly modeling as an extension of feature-based modeling for parts. In the work an assembly feature is used to bind two components together, which is substantially an association between two form features on different parts. Constraints on mating features' shapes and relative positions are defined in assembly features. Holland et al. <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b15">16]</ref> use ''Related'' and ''Relation'' as the base classes for both part and assembly modeling. Assembly features are used in both assembly modeling and assembly planning (assembly sequence planning, assembly motion planning, fixture planning, etc.), which include handling features for handling components and connection features for connecting components together. Shyamsundar et al. <ref type="bibr" target="#b16">[17]</ref> introduce the concept of virtual space and present a geometric representation AREP for collaborative assembly design. Assembly features in the work are classified into relational assembly features indicating the relation between geometric features, and assembly form features as the result of joining certain shape features of two components together. Singh et al. <ref type="bibr" target="#b17">[18]</ref> present assembly ports to group together the interface information between parts. Based on the port representation, analysis for label matching, dimension evaluation, mating constraint solvability, etc. could be carried on to automate the mating definition and reduce the designers' effort. Kim et al. <ref type="bibr" target="#b18">[19]</ref> describe their ARM (assembly relation model) and develop an AsD ontology based on ARM which captures the semantics of assembly/joining concepts and relations. The AsD ontology is applied in collaborative product development and shows its capability in maintaining the design intent of assembly relations. However, the presented ontology is not aimed at capturing the design knowledge and information involved in the dynamic top-down assembly design process.</p><p>Besides the work that focuses on specific design phases, many researchers have also explored integration methods of the different information representation involved in conceptual design and downstream product development. <ref type="bibr">Kusiak et al. [20]</ref> use diagraphs to help the transformation from conceptual design and embodiment design. Brunetti et al. <ref type="bibr" target="#b20">[21]</ref> present a feature-based representation to establish the relationships among requirements, functions, working principles and geometric models. Roy et al. <ref type="bibr" target="#b21">[22]</ref> give an object-oriented approach to help the product design passing through the complete product's life cycle from functional requirements to artifacts. Bronsvoort et al. <ref type="bibr" target="#b22">[23]</ref> describe a multiple-view feature modeling approach for integral product design which includes conceptual design view, assembly design view, part detail design view and part manufacturing planning view. The consistency maintenance mechanism is also discussed in the work.</p><p>Some commercial CAD systems like UG, Pro/E and CATIA notice the significance of top-down product design and extend their systems to support it more or less. As a representative one, Pro/E <ref type="bibr" target="#b23">[24]</ref> develops some top-down design functions such as 2D layout, 3D skeleton model, parameter declaration and geometry feature publishing. These functions are built based on the existing parametric modeling system and strengthen the association between design knowledge to some extent. After analyzing the differences between top-down product design modules of commercial CAD systems, Aleixos et al. <ref type="bibr" target="#b24">[25]</ref> propose a hierarchical control framework above commercial CAD systems and some design rules for integration of conceptual and detail design. Mun et al. <ref type="bibr" target="#b25">[26,</ref><ref type="bibr" target="#b26">27]</ref> present a neutral skeleton model to exchange design information between collaborative OEM and suppliers, through which the intellectual property of companies could be protected and engineering changes during development could be propagated. Lee et al. <ref type="bibr" target="#b27">[28]</ref> present an interesting cellularbased approach to generating progressive solid models which are in various levels of detail. However, these models are generated from detailed feature-based models and are mainly used for visualization, analysis and collaboration.</p><p>Besides the works mentioned above, there are several researches focusing on the representation of the whole product in a single integrated model. Fenves et al. <ref type="bibr" target="#b28">[29]</ref><ref type="bibr" target="#b29">[30]</ref><ref type="bibr" target="#b30">[31]</ref><ref type="bibr" target="#b31">[32]</ref> present a welldefined Core Product Model (CPM) which is a base-level model not tied to any specific application or software, and is aimed at capturing product information shared throughout the whole product's lifecycle. The Open Assembly Model (OAM) <ref type="bibr" target="#b32">[33,</ref><ref type="bibr" target="#b33">34]</ref> extended from CPM provides an object-oriented definition of an assembly model which incorporates representations for tolerance, kinematics, assembly relationships and assembly features. Manbub Murshed et al. <ref type="bibr" target="#b34">[35]</ref> present Open Assembly Model Plus (OAM+) to support legacy systems engineering. The assembly feature is the key part of OAM+, and screw representation is adopted to express the relations between parts which can support kinematic analysis and force analysis well.</p><p>In general, the research on top-down product design is still preliminary. There are two problems with the works described above. The first one is the absence of an assembly model dedicated to top-down product design. Some works discover and establish significant concepts about the top-down product design, while others mainly focus on the representation of design information in some specific design phases. Although the OAM and OAM+ are quite useful assembly models for representing conventional assembly information, they are not designed to be dedicated to the top-down product design. Commercial CAD systems develop some functions for top-down design indeed, but the models and methods used are generally different and strongly dependent on their own conventions. The second problem is the insufficiency of data transferring and association mechanisms for top-down product design. The aim of the multi-level assembly model and various inheritance mechanisms presented in this paper is to solve these two problems, which account for the very obstacles of implementing general computer-based tools supporting top-down product design.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Top-down product design process</head><p>The product design process can be divided to five phases according to Shah et al. <ref type="bibr" target="#b35">[36]</ref> (the division in Pahl et al. <ref type="bibr" target="#b36">[37]</ref> is only a little different): functional design, conceptual design, embodiment design, detail design and engineering analysis as shown in Fig. <ref type="figure" target="#fig_0">1</ref>.</p><p>However, these design phases are, in general, not sequential. Indeed, they are mostly iterative, recursive and mixed together, with no clear borderlines between different phases. Based on this observation, we refine a top-down assembly design process which involves the evolution of assembly structure (tree-based hierarchical model <ref type="bibr" target="#b37">[38]</ref>) during product design as shown in Fig. <ref type="figure" target="#fig_1">2</ref>. The refined top-down assembly design process is more simple and compact at fine granularity and hence more suitable for the computerization of top-down product design.</p><p>In the top-down assembly design process, an elemental subprocess top-down component design (denoted by TDCD below) is executed on each component along with the expansion of the assembly tree. When top-down assembly design starts, the TDCD is executed at the product root and the product is decomposed into several sub-components. Then loose-coupled and parallel execution of TDCD is carried out on each of the sub-components after handling most of the coupled data among them. The last step repeats recursively when some sub-components still have sub-sub-components. Finally the product design finishes when TDCD has been successfully executed on every part (leaves in the assembly tree) of the product.</p><p>Fig. <ref type="figure" target="#fig_2">3</ref> gives the detailed flow chart of TDCD on an arbitrary component. The key points of TDCD are explained below.</p><p>Precondition: The execution of TDCD on a component requires the predefinition of overall function and shape skeleton of the component. In other words, overall function and shape skeleton are the prerequisite of TDCD. For the product root, the overall function and shape skeleton are defined based on the requirements of the product; for components other than the product's root, the required information is generated during the TDCD of its parent assembly. Here shape skeleton is a vague and incomplete shape of a component, which is similar to the concept ''design space'' or ''base shape'' mentioned in other works <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b19">20]</ref>. It is often used like an envelope which constrains the spatial dimension and rough shape of a component.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Content:</head><p>The inner behavior of TDCD is quite different according to the type of the component.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>TDCD on assembly:</head><p>When the component under TDCD is an assembly, abstract design and skeleton design are executed first, and then TDCD of subcomponents are launched recursively. These three steps are further described below: (a) The abstract design deals with abstract information such as functions, ideas and concepts which are the main responsibilities of functional design and conceptual design in traditional design process. The overall function is decomposed to establish a function structure and an engineering structure with specific physical behavior is found to deliver the desired functions. The result of abstract design is actually a ''concept'' (or principle solution) of the product at a specific abstract level. (b) Based on the result of abstract design, skeleton design is carried out which mainly considers information about shape and spatial arrangement. Assembly is first decomposed into several sub-components and mapped to the design concept as a realization structure. Then the shape skeletons of these sub-components are generated within the shape skeleton of the assembly. After that, skeleton interfaces are defined between sub-components and link the corresponding shape skeletons together. Here the skeleton interface is an abstract form of assembly interface which describes the mating rules and relative motions between two or more components. Finally the spatial arrangement (relative positions of shape skeletons) is determined by specific kinematic constraints embedded in the skeleton interfaces. The result of skeleton design is a ''3d-layout'' which describes the spatial configuration of the assembly elements and kinematic behaviors between them. (c) When abstract design and skeleton design finish, the TDCD should be executed on each sub-component of the assembly recursively. However, the precondition of TDCD described before needs to be prepared for the successful execution of TDCD. Fortunately, it can be seen from (a) &amp; (b) that the functions and shape skeletons of sub-components have already been generated in abstract design and skeleton design, hence the TDCD is able to be carried out on each sub-component of the assembly recursively. In other words, the invariant needed for recursion is perfectly maintained during TDCD.</p><p>TDCD on part: On the other hand, when a component under TDCD is a part, the shape skeleton of the part is refined to the detailed shape while various design aspects such as manufacturing cost and ergonomics are considered.</p><p>It can be seen that, although it is a bit ideal as to practical situations, the top-down assembly design process can describe the product design without vague borderlines and overlapping phases. As a result, computational models and relevant algorithms which need exact data-flow information during product design can be brought in based on the top-down assembly design process.</p><p>Based on the top-down assembly design process, we list below the requirements on computer-based tools supporting top-down assembly design:</p><p>1. An integrated multi-level assembly model is needed for capturing information in different levels of abstraction during topdown assembly design. It should represent not only the detailed geometric information but also the more abstract information such as function and layout. CAD system independent property should be kept on the integrated multi-level model so that commercial CAD models can be extended and adapted to it. 2. Various inheritance mechanisms should be provided to ensure the transition and association of design information between different design phases.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Effective approaches for combinations of top-down design and</head><p>bottom-up design should be explored to sufficiently reuse the abundant existing models. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Multi-level assembly model for top-down assembly design</head><p>Inspired by CPM <ref type="bibr" target="#b31">[32]</ref> and OAM <ref type="bibr" target="#b33">[34]</ref>, we extend and revise the previous work <ref type="bibr" target="#b38">[39,</ref><ref type="bibr" target="#b39">40]</ref> in order to support top-down assembly design better. A new multi-level assembly model is put forward here to capture multiple levels of design information, which includes the information for abstract design, skeleton design and detail design in top-down assembly design process. The abstract design mainly processes abstract information such as function and behavior, while the skeleton design processes information about the spatial arrangement of components (a.k.a. layout). Those design information is all represented in the multi-level assembly model. Meanwhile, the information for detail design such as geometry and material is also covered certainly. The whole class diagram of the multi-level assembly model is shown in Fig. <ref type="figure" target="#fig_3">4</ref>. More details of the model are described below: Main assembly structure TDComponent is the abstract base class that represents a component which could be either a part or a sub-assembly in the product, and the prefix TD means top-down here. TDComponent contains the common data of an arbitrary component in a product regardless of the component type, i.e. the data shared by part and sub-assembly. TDPart and TDAssembly derived from TDComponent are the main concrete classes for controlling the product's structure and managing product data in the whole design process. TDPart represents an elementary part used in the product, which is a leaf in the assembly tree. Meanwhile, TDAssembly represents a sub-assembly (including the assembly root of the product), which is a non-leaf node and contains some child nodes under it as the components of the assembly. AssemblyInterface is used to represent the assembly interfaces between components of an assembly, in which kinematic relationships, connection forms and corresponding geometric-mating relationships are all managed. In addition, CoupledRelationManager maintains the coupled relations among components, such as algebraic equations for constraining relevant design parameters.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Abstract information</head><p>Function and Behavior represent information processed in abstract design. They are the common data stored in class TDComponent, which contain functional and behavioral information of a component respectively.</p><p>Function describes ''what to do'', i.e. the intended behavior of a component, and a reasonable function-taxonomy (e.g. <ref type="bibr" target="#b40">[41]</ref>) could be adopted to help the description. In addition, specific function parameters and constraints are stored to give quantitative information about a component. Feature could also have functions because of the fine-granularity relationships between functional and geometric information.</p><p>Compared with function, behavior is a more objective concept which describes the way a component achieves its function, hence various behaviors could realize the same function, and the association between them is not one-to-one. On the other hand, behaviors of components can be seen as sequential state transitions along time which is determined by some specific physical phenomena and principles.</p><p>Currently, the support for abstract design is still preliminary in our model. Details about function and behavior information used in abstract design are not further explored here. Meanwhile, the connection between the abstract information and other information in the multi-level assembly model needs to be complemented.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Skeleton information</head><p>ShapeSkeleton represents the rough shape of a component which somewhat likes an envelope (see Fig. <ref type="figure" target="#fig_4">5</ref>). It is the carrier and presenter of significant geometries and parameters derived from earlier design. ShapeSkeleton is stored in TDComponent so that each component in a product can have one. Here we formally define a shape skeleton as:</p><p>A preliminary but sufficient 3D geometric model with significant form knowledge and parameters embedded in, and the base of the following design as both the space restriction and form restriction. LayoutSkeleton represents the fundamental layout of an assembly. Generally, the layout of an assembly consists of a number of functional components linked together through kinematic relationships. Here we define a layout skeleton as:</p><p>A skeleton-level assembly consisting of the child components' shape skeletons, which are arranged in three-dimensional space and connected together through the assembly interfaces defined between them.</p><p>Fig. <ref type="figure" target="#fig_5">6</ref> shows an example of layout skeleton. As the layout skeleton contains the three-dimensional layout information of an assembly, preliminary kinematic analysis can be carried out in an early design phase; hence the flaws of existing design could be revealed and recovered in time, and later designs based on the layout skeleton could be executed more robustly.</p><p>The design of skeleton related information adheres to the least commitment principle. Designers do not need to consider unrelated or unimportant information of the product in design.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Detailed information</head><p>Feature is a generalized abstract class for all types of features. Each feature contains a Form representation which includes geometric information and material information in Geometry and Material respectively. Besides that, form also possesses a set of constraints abstracted by class Constraint. There are various concrete constraints such as ParametricConstraint and Geometric-Constraint derived from Constraint. An extension of the constraint category could easily be integrated into the assembly model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Multi-level assembly interface information</head><p>AssemblyInterface stores multi-level information of an assembly interface which connects two or more components together. The information in an assembly interface includes the connection type, the connection forms and the various relevant constraints.</p><p>The SkeletonInterface and ConcreteInterface represent the two implementation levels of an assembly interface. SkeletonInterface stores information about the kinematic aspect of an assembly interface, while ConcreteInterface stores information about the physical form of an assembly interface.</p><p>The SkeletonFeature and ConcreteFeature are all derived classes of abstract class Feature. A concrete feature is just the form feature used in traditional feature-based design. On the other hand, the skeleton feature contains a group of abstract geometric elements used as anchor for defining kinematic constraints (the idea comes from the interface feature in <ref type="bibr" target="#b9">[10]</ref>, and the MGDE concept in <ref type="bibr" target="#b12">[13]</ref> shows similar thoughts behind its abstraction mechanism). The skeleton feature is positioned parametrically in the shape skeleton and can be seen as the abstraction of the concrete feature dedicated for connection. An illustration example of the skeleton feature and concrete feature in an assembly interface is shown in Fig. <ref type="figure" target="#fig_6">7</ref>.</p><p>Normally, a skeleton interface contains kinematic constraints between two or more skeleton features, while a concrete interface contains form constraints and mating constraints between two or more concrete features. Furthermore, the skeleton features should have inner consistencies with the corresponding concrete features in an assembly interface, while the involved kinematic constraints, form constraints and mating constraints should be also consistent. It should be pointed out that sometimes ConcreteInterface could have extra component which has no main functions but aims at the implementation of the assembly interface (like a bearing between shaft and housing). This specific relationship is also maintained in the model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Inheritance information</head><p>Due to the existence of multiple levels of knowledge and information in the product model, it is required that the information transition and association are correctly established and maintained. InheritanceManager is such a manager that exists in each component to manage different kinds of information inheritance instances. The abstract class Inheritance is the super class of various concrete inheritance types which have specific purposes such as function inheritance and geometry inheritance. The relevant inheritance mechanisms are described in next section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Component instancing</head><p>During the top-down assembly design, designers may frequently want to instance new components from existing ones and locate them in different positions in the assembly. Due to different design requirements, there could be various instancing strategies, and designers should be able to select the one suitable for them. The following mechanisms are provided along with the multi-level assembly model for instancing new components:</p><p>(a) Each component has a transform field which is essentially a matrix. Every time a component is instanced, a new transform is created to represent its unique position in the assembly. (b) When designers want to instance a new component identical to an existing one throughout the design process, the shallow copy mode is activated. In this mode, the same contents of the original component are referenced by the newly created one concurrently. Fig. <ref type="figure" target="#fig_7">8</ref>(a) shows how a top-down part is instanced under the shallow copy mode. All the references to the contents of the original part such as function and form are copied to the new one. Therefore, any time one of the two parts is changed, the other part is also changed accordingly since they share the same copy of contents. The shallow copy mode is suitable for the symmetrical components in the assembly. (c) When designers want to instance a new component from an existing one and make them independent after the instancing, the deep copy mode is activated. In this mode, the same contents of the original component are copied first and the new component references the copied contents. Fig. <ref type="figure" target="#fig_7">8</ref>(b) shows how a top-down part is instanced under the shallow copy mode. All the contents of the original part such as function and form are copied, and then the new part references the new copies of the contents. Therefore, the two parts could be changed independently since they do not share the same copy of contents. The deep copy mode is often used for the components with the same configuration, e.g. the feature structures, located in different assembly levels. In all, the multi-level assembly model integrates information of different design stages together in a single extensible framework. Currently, the model puts emphasis upon the information required by the embodiment design and detail design phases of traditional top-down product design process. Information involved in these design activities such as skeleton information and detailed shape information is represented suitably. Meanwhile, the connections between the information like assembly interface, various constraints and inheritances are contained. However, to include the information involved in the abstract design better, the representation of function, behavior and the relevant connections (besides the constraints of physical laws) to other information in the multi-level assembly model should be explored further.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Inheritance mechanisms</head><p>In the top-down assembly design, designers need to switch among abstract design, skeleton design and detail design continuously until the detailed model of all parts in the whole product are generated. During this process, there are multiple levels of model representations involved as described before, and the design knowledge and information need to be transferred fluently and accurately between the various model representations. As a result, how to support the information flow in computer-based tool supporting top-down assembly design is a serious problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Inheritance definition</head><p>To transfer between various design phases during the topdown assembly design smoothly, the existing high-level design information should be utilized as both the design base and the design constraints in low-level designs. Considering that, we need here a new concept:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Inheritance, which normally means the process of transmission of characteristics from parents to offspring, is used here to refer to the process of transferring design information from high-level design to low-level design and establishing associations between them.</head><p>We believe that an intelligent tool for design information inheritance during top-down assembly design is significant for designers. Using this tool, designers should be able to choose the data they are interested in or need, and the choice on the way of how these data are used should also be provided. Then the tool transfers the design information and establishes suitable associations automatically for designers. As a result, designers could use the existing design information without recreating them from scratch. Meanwhile, the inherited information could also play the role of design constraints for following design. This eases the burden of designers without loss of semantic accuracy of existing design information.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Inheritance classification</head><p>Due to the diversity of design information involved in top-down assembly design, various design information inheritances could happen. We list here four different inheritances according to the objects and data processed: Function inheritance: Functional information in high-level design should be able to be inherited to constrain the low-level design information. For example, volume of a part could be decided by function parameters defined in abstract design, and the length, width and height of the part could be further constrained through the volume.</p><p>Geometry inheritance: Geometric information in the shape skeleton of a component should be able to be used to decide the positions or dimensions of geometric information in a detailed model of the component or shape skeletons of the sub-components.</p><p>Feature inheritance: Feature information is at a higher level than geometric information. Therefore, the feature information in a shape skeleton should be able to be inherited in whole to determine the preliminary shapes of detailed models or child shape skeletons.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Interface inheritance:</head><p>The assembly interface is multi-level itself. Therefore, the skeleton interface should be able to be inherited to generate the corresponding concrete interface. Moreover, skeleton features and concrete features for assembly interfaces should be inherited either from shape skeleton to detailed model or from shape skeleton to suitable child shape skeletons.</p><p>The inheritances listed above are representative ones in topdown assembly design, and the relevant mechanisms for their implementation are described below.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Inheritance mechanisms</head><p>To support the various information inheritances in top-down assembly design, a set of robust inheritance mechanisms with diversity of intention should be explored. Intrinsically, inheritance could be regarded as the composition of specific ''copy'' and ''association'' operations (Fig. <ref type="figure" target="#fig_8">9</ref>), in which ''copy'' means making a duplicate object from the original one and ''association'' means linking the duplicated object and the original one for further change propagation. Below we explain the details of the inheritance mechanisms for the multiple information inheritances described above.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>(a) Function inheritance</head><p>Usually the quantitative data in function related information are some function parameters constrained by some algebraic equations, and designers choose several parameters to be inherited to restrict the following design activities. The inheritance of algebraic parameters is straightforward in which the copies of parameters are created with their values and corresponding association equations are established.</p><p>Of course, designers could constrain the design parameters in low level to parameters in high level directly without inheritance, but in this way the low level model is tightly-coupled to the high level model. In other words, when the high level model is absent, the low level model becomes invalid as the needed parameters cannot be found. This confuses and disturbs designers when they want to use the low level model alone (situation like this happens quite often). On the other hand, with the help of parameters inheritance, the low level model is loosely-coupled to the high level model because there are extra copies of parameters in the low level model which ensure the integrality (Fig. <ref type="figure" target="#fig_9">10</ref>).</p><p>In order to thoroughly support the abstract design, more powerful function inheritance mechanism is needed which could transmit non-quantitative functional knowledge from a high-level  design to a low-level design. However, as the abstract information is not fully represented in the current multi-level assembly model, the relevant inheritance mechanism cannot be explored here and will be developed in the future.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>(b) Geometry inheritance</head><p>The geometric elements in the shape skeleton are always needed to be referred to in defining the shapes of sub-skeletons or detailed models, while geometry inheritance mechanism works in this situation. Again, two operations ''copy'' and ''association'' are executed in sequence to inherit a geometric element.</p><p>The geometric elements to be inherited are often the ones which could be used as a datum for reference. Hence datum point, datum axis, datum plane, vertex, edge and plane are candidates for geometric inheritance. Moreover, the inherited geometric elements are all converted to datum elements, e.g. the inheritance of an edge is a datum axis. The reason is that designers would not use a single geometric element to construct the body of the shape. In other words, they just use it to position the main body of the shape. The copy of geometric elements uses the internal geometric data of source element to generate the target element (Fig. <ref type="figure" target="#fig_10">11</ref>).</p><p>After a copy operation of a geometric element, an association relation (GEsrc, GEtar) between source and target geometric element is established. Such relations are maintained in the inheritance manager of components (see Fig. <ref type="figure" target="#fig_3">4</ref>). Shape modification is supervised so that inheritances will be checked when any shape modification happens, and the affected inheritance will notify the target model to regenerate the inherited element according to the new source element (Fig. <ref type="figure" target="#fig_11">12</ref>).</p><p>The geometric element inheritance mechanism makes the source model and the target model loosely coupled again, as the target model could still be valid when the association between source model and target model is cut off.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>(c) Feature inheritance</head><p>As shape feature is used so often in design nowadays, feature inheritance mechanism must be provided with diversity of use.  For a feature inheritance, we define three modes with different meanings and intentions.</p><p>Non-parametric mode: Only the shape of the source feature is copied to the target model (Fig. <ref type="figure" target="#fig_12">13</ref>). Mostly, a designer inherits a feature purely for its shape information, and the parameters in the feature are not important to him. Actually, designer of the source feature may not want the parameters in it to be modified in following design. Therefore, the body of the source feature is copied to the target model without any parameters, and designer of the target model can refer to the geometric elements in the shape for the following design. Association between the body of source feature and the body of the target feature is established for consistency maintenance. Once the body of the source feature is    modified, the inheritance will regenerate the body of the target feature.</p><p>Partially-parametric mode: Not only the shape but also the parametric information of the source feature is copied to the target model (Fig. <ref type="figure" target="#fig_13">14</ref>). When designers want to control the shape of the target feature in the absence of the source model, this mode is useful. The parametric information of a feature includes feature type, parameters and geometric references. Copying of the feature type and parameters is straightforward, while copying of the geometric references is achieved through geometry inheritance described above. Associations between the feature-parameters are established through algebraic equations, while the associations between the geometric references are established the same as the association in geometry inheritance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fully-parametric mode:</head><p>The difference between the partiallyparametric mode and the fully-parametric mode is whether the geometric references of a feature are also copied parametrically along with the feature itself. The geometric elements used as references in defining a feature F are generated by some existing features before F (in the design history); hence the modification of parameters in the existing features may change the shape or position of F . In other words, feature F depends on some features before it in the design history. If designers want to get more control on an inherited feature, not only the inherited feature but also the features on which the inherited one depends should be copied to the target model parametrically (Fig. <ref type="figure" target="#fig_14">15</ref>). The feature dependency is often a long link since the features on which a feature depends may still depend on other features, and FDAG (feature dependency directed acyclic graph <ref type="bibr" target="#b41">[42]</ref>) is a quite suitable representation to express it. Therefore, when a feature is selected to be inherited in the fully-parametric mode, the dependency link of the feature is extracted from the FDAG, which decides all the features that should also be inherited parametrically (Fig. <ref type="figure" target="#fig_15">16</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>(d) Interface inheritance</head><p>Since assembly interface has different levels of representations, multiple inheritance mechanisms should be provided for them. Once an assembly interface is defined in an assembly, skeleton features or concrete features are created on relevant components of the assembly interface. After that, if one of such components is a sub-assembly and further subdivided to sub-components, the skeleton features or concrete features on the sub-assembly should be inherited to sub-components as the existing design knowledge and constraints. Moreover, all components have their shape skeletons. Since the skeleton features or concrete features for assembly interface are always created on shape skeletons first, the features should also be inherited to the detailed model from the shape skeletons.</p><p>Skeleton feature inheritance: As described before, the skeleton feature is composed of a group of abstract geometric elements used as an anchor for defining kinematic constraints. Therefore, the inheritance of skeleton features is actually the inheritance of these geometric elements (Fig. <ref type="figure" target="#fig_16">17</ref>), while the geometry inheritance mechanisms described above could help.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Concrete feature inheritance:</head><p>A concrete feature for assembly interface is the physical form in a component model for connection with other components. Hence the feature inheritance  mechanisms described above is the natural way to inherit the concrete feature for assembly interface (Fig. <ref type="figure" target="#fig_17">18</ref>).</p><p>Skeleton feature to concrete feature inheritance: In an assembly interface, the skeleton feature is not exactly the same as the concrete feature but the abstract form of it, hence the inheritance described here is actually an implicit inheritance. Concrete features should be generated according to the already designed skeleton features. We define a common skeleton feature which consists of a plane, a point, a normal axis and an extra orientation axis in the plane. The predefined skeleton feature could be used as the geometric anchor for definition of six lower-kinematic pairs, i.e. prismatic pair, revolute pair, cylindrical pair, screw pair, planar pair and spherical pair. Different geometric elements in the common skeleton are activated for different types of kinematicpair definitions, while the inactivated elements are usually used for determining positions (Fig. <ref type="figure" target="#fig_8">19</ref>). The definition of higher kinematicpairs is much more difficult and has unlimited types theoretically, hence it will not be discussed here.</p><p>In fact, inheritance from skeleton feature to concrete feature depends on the type of concrete interface defined to implement the corresponding skeleton interface. The same skeleton interface could have several different types of concrete interface, due to the fact that the same kinematic relation could have different physical forms to implement it (e.g. the two different forms in Fig. <ref type="figure" target="#fig_18">20</ref> for prismatic pair). In order to inherit skeleton feature to concrete feature, the internal knowledge of different skeleton features and concrete features could be used to establish different rules for generating concrete features based on specific skeleton features. For example, Fig. <ref type="figure" target="#fig_1">21</ref> shows the generation of concrete features in a pin-hole interface, in which the positions and orientations of pin and hole are determined by the skeleton features, while the common parameters (diameter and length here) are defined in the concrete interface for ensuring consistency between pin and hole. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Top-down assembly design sample</head><p>Here a top-down assembly design sample is used to illustrate the usefulness of the multi-level assembly model and the inheritance mechanisms. In this sample an engine for an automobile is designed from the overall function and shape skeleton to the most detailed geometry. There are six components in the engine assembly, which includes one shell part, two rod sub-assemblies, two piston parts and one crankshaft. Moreover, the rod sub-assembly is composed of the rod body and the end cap.</p><p>Fig. <ref type="figure" target="#fig_1">22</ref> shows a brief evolution process for the engine design, which does not give the function related information for clarity. It can be seen that in the design process, engine evolves from the shape skeleton to the layout skeleton which consists of shape skeletons of components in the engine, and then the components of the engine continue the evolution from their shape skeletons. In the components, the shell, piston and crankshaft are all parts and the detailed models are generated from their shape skeletons. On the other hand, the rod is a sub-assembly hence the layout skeleton of the rod is generated from the shape skeleton of rod. After that, recursive design is carried out on the rod body and end cap respectively. Finally, the design finishes when detailed models of the rod body and end cap are generated from their shape skeletons. The detailed model of an assembly is easy to get by assembling the detailed models of components in the assembly.</p><p>The assembly structure and relevant model information is shown in Fig. <ref type="figure" target="#fig_2">23</ref>. It can be seen that each component has its own shape skeleton. Besides that, each assembly has an extra layout skeleton controlling the spatial arrangement the subcomponents' shape skeletons and the assembly interfaces between them. Skeleton interfaces between shape skeletons in the layout skeletons of engine model are shown in Fig. <ref type="figure" target="#fig_21">24</ref>, in which the concrete features for connection are already added on to the shape skeletons based on the skeleton features.</p><p>The inheritance mechanisms are used throughout the engine design (Fig. <ref type="figure" target="#fig_22">25</ref>). The shape skeleton of the crankshaft uses two faces in the overall shape skeleton to define the start and end of the shaft, hence two reference planes inherited from the two selected faces    are generated in the crankshaft model (geometry inheritance). The design of the piston inherits the features of shape skeleton and adds new features to generate the detailed model of the piston (feature inheritance). During the design of the rod, there are two skeleton features defined on the shape skeleton of it. One is for the revolute-pair between rod and piston, and the other is for the revolute-pair between rod and crankshaft. Then at a suitable time designers can inherit these two skeleton features to generate the concrete holes on the shape skeleton (interface inheritance).</p><p>When the top-down assembly design of engine finishes, the layout skeleton can be used as the main controller for the engine assembly, i.e. the parameters defined in it can be modified according to specific needs. The multi-level assembly model and the inheritance mechanisms used in the engine design ensure that the engine model changes correctly when the layout skeleton is modified (Fig. <ref type="figure" target="#fig_23">26</ref>).</p><p>Moreover, the multi-level assembly model has another benefit that deserves attention. The multi-resolution representation of an assembly could be easily generated based on the multi-level assembly model. As each component in the assembly has its own shape skeleton, the multi-resolution assembly model can be generated through the combination of shape skeletons and detailed models (Fig. <ref type="figure" target="#fig_24">27</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Discussion</head><p>In order to make next generation computer-based tools supporting top-down assembly design more useful and receivable, some practical problems need to be considered. One of them is the adaptation and extension for existing CAD systems. Since current CAD systems have good support for detailed geometric modeling, how to adapt and extend the abilities of the existing CAD systems to build the top-down assembly design tool, rather than to create brand new systems, is quite meaningful.</p><p>In the work, the presented multi-level assembly model is essentially a neutral high-level framework built on top of some common infrastructures of today's mainstream CAD systems such as solid models, features and constraints. It has no specific requirements on these infrastructures although there are different implementations of them. Therefore the presented multi-level assembly model can be seen as independent of any CAD systems which support feature-based modeling well, and native models of these existing CAD systems could be adapted and extended to construct a top-down assembly design environment based on the presented model. Fig. <ref type="figure" target="#fig_25">28</ref> displays the adaptation and extension for native models of existing CAD systems. In the picture, the main classes in the multi-level assembly model are shown and classified into two categories, one is the part that is not hard to be adapted and the other is the part that needs extension.</p><p>The classes which could be generally adapted from native model of CAD systems are: TDComponent, Form, ShapeSkeleton, ConcreteFeature and Constraint. TDComponent could be adapted from a native assembly as a host assembly, which aggregates the shape skeleton and other more detailed models. Form could be supported well by the traditional B-rep model and the material   information of an existing CAD system. ShapeSkeleton is intrinsically a simplified shape model, hence could be adapted from NativePart easily. ConcreteFeature is the same as traditional form feature which is used in most existing CAD systems. Constraint is an abstract class for concrete constraints such as parametric constraint and geometric constraint which could be supported well in existing CAD systems. However, there are still some complex constraints such as a non-linear equation system which cannot be supported in some CAD systems. Therefore the adaptation for constraint is still partial.</p><p>On the other hand, the classes which have no direct correspondences in existing CAD systems are: AssemblyInterface, Skele-tonInterface, ConcreteInterface, LayoutSkeleton, SkeletonFeature, Inheritance, InheritanceManager, CoupledRelationManager, Function and Behavior. The limited support to the listed information is obviously an obstacle. Existing CAD systems need extensions for the unsupported information to construct effective top-down assembly design modules. Once the extensions succeed, even the computer-based environment for collaborative top-down assembly design between heterogeneous CAD systems is likely to be created, which could provide more powerful support to complex product design.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">Conclusion and future works</head><p>In this paper, a multi-level assembly model for top-down assembly design is presented. Differing from existing assembly models, it captures abstract information, skeleton information and detailed information that belongs to different design phases, and thus can effectively support top-down assembly design. As the base for constructing the multi-level assembly model, the traditional product design process is a bit too coarse and has no clear borderlines between design phases. Therefore, a top-down assembly design process is refined from the traditional product design process. The top-down assembly design process consists of many fine-granularity TDCD (''top-down component design'') design steps which are executed recursively along with the expansion of an assembly tree structure. In our opinion, the topdown assembly design process could depict the product design process more simply and compactly at the fine-granularity level which eases the computerization of top-down assembly design. Furthermore, various inheritance mechanisms for transferring and converting information pertaining to different design phases are also classified and described respectively. Function inheritance, geometry inheritance, feature inheritance and interface inheritance are the main items of the classification, each with its own specialties. These inheritance mechanisms could help to propagate design knowledge for designers and ensure design consistencies between different design phases. Practical uses of top-down assembly design are discussed for extending the scope and deepness of its application. The adaptation and extension for native models of existing systems is helpful for the rapid development of topdown assembly design modules on mature CAD systems.</p><p>In the future, the multi-level assembly model with inheritance mechanisms will be implemented based on an existing CAD system to check its validity in real complex design tasks. Besides that, great efforts are needed to address the following issues, which could bring vast benefits to next generation CAD systems supporting topdown assembly design:</p><p>Complementing the abstract information: The abstract information in current top-down assembly models is still preliminary and does not contain all the information involved in functional design or conceptual design. Therefore, the multi-level assembly model needs further expansion in order to effectively support the above two design phases, e.g. incorporating the Function-Behavior-State (FBS) model. Furthermore, the connections and smooth transitions between the abstract information and other information in the top-down assembly model are required. Meanwhile, the relevant inheritance mechanisms for abstract information should also be explored.</p><p>Incorporating other design paradigms: Since today's design is dynamic and incremental, product requirements always change during the design process, as well as the product solutions which fulfill the product's requirements. Several works have addressed these problems in various aspects, such as the works by Zeng et al. <ref type="bibr" target="#b42">[43,</ref><ref type="bibr" target="#b43">44]</ref> which give the set-theory based mathematical formulation of design process and describe the design specification, product description and product performances involved in the dynamic design processes, the work by Otto et al. <ref type="bibr" target="#b44">[45]</ref> which discusses the reverse engineering and redesign problem and the work by Zeng et al. <ref type="bibr" target="#b45">[46]</ref> which establishes the mathematical foundation of the freehand design sketches evolving in conceptual design. The multi-level assembly model presented in this paper should be enhanced with more assistant design-variation mechanisms to support the incremental character of design process. For example, the mechanisms for adjusting a product's structure are needed, which could combine several parts to a sub-assembly or split a sub-assembly into several parts during the top-down design process, while the relevant skeletons, constraints and inheritances are reasonably maintained. Besides the incremental design, our model should also consider and incorporate the characteristics of some other design paradigms, such as design in context and mechatronical design. Combining the top-down and bottom-up design: Although topdown design and bottom-up design are two distinct ways for constructing products, in many real-world designs of complex products, they are used together. Therefore, the methods for smooth integration of the two design approaches are needed to take full advantages of both. A demonstrative framework for the integration of top-down design and bottom-up design is shown in Fig. <ref type="figure" target="#fig_26">29</ref>. The main ideas behind are skeleton-based assembly retrieval and linking: (a) during the design process, the skeleton which controls the product layout and component shapes is a quite suitable query for searching assemblies. The skeleton model consists of key components with important design parameters and the relations between them. In fact, the skeleton model is the well-defined common result at some milestones in the whole design process and plays the role of leading the following design activities; (b) after assembly retrieval, the returned models need to be filtered and adjusted in order to satisfy design constraints and specifications the designers require. Therefore, methods and tools for establishing the link between the query skeleton and the retrieved assembly should be provided, which make the high level control of the assembly through the skeleton possible. Based on assembly retrieval and skeleton linking, innovative design and model reuse could be seamlessly integrated, which is actually a way for achieving the integration of top-down design and bottomup design.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Traditional product design process.</figDesc><graphic coords="3,338.27,63.93,197.77,280.92" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Top-down assembly design along with evolution of assembly structure.</figDesc><graphic coords="4,142.99,63.92,299.52,337.45" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Flow chart of TDCD on an arbitrary component.</figDesc><graphic coords="5,98.69,63.93,407.88,395.49" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. The multi-level assembly model for top-down design.</figDesc><graphic coords="6,82.77,63.92,420.12,502.55" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. The shape skeleton (left) and the final shape (right) of a piston model.</figDesc><graphic coords="6,357.05,599.25,140.40,65.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. A layout skeleton with three shape skeletons and two prismatic pairs.</figDesc><graphic coords="7,54.23,63.92,227.88,90.04" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. The skeleton feature (left) and corresponding slot feature (right) involved in an assembly interface with prismatic pair.</figDesc><graphic coords="7,317.11,63.93,240.12,77.96" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. The two different part-instancing strategies.</figDesc><graphic coords="8,92.15,63.93,401.40,101.67" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 9 .</head><label>9</label><figDesc>Fig. 9. The intension of inheritance.</figDesc><graphic coords="9,125.38,63.93,354.60,125.09" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 10 .</head><label>10</label><figDesc>Fig. 10. The comparison of evaluation without inheritance and with inheritance.</figDesc><graphic coords="9,48.12,223.79,240.12,134.11" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 11 .</head><label>11</label><figDesc>Fig. 11. The inheritance of geometric elements.</figDesc><graphic coords="9,316.90,223.79,240.48,180.80" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 12 .</head><label>12</label><figDesc>Fig. 12. The effect of inheritance under shape modification.</figDesc><graphic coords="9,316.68,435.54,240.84,147.05" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Fig. 13 .</head><label>13</label><figDesc>Fig. 13. Non-parametric feature inheritance.</figDesc><graphic coords="10,148.88,63.93,288.00,61.67" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Fig. 14 .</head><label>14</label><figDesc>Fig. 14. Partially-parametric feature inheritance.</figDesc><graphic coords="10,136.51,157.38,312.48,61.24" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Fig. 15 .</head><label>15</label><figDesc>Fig. 15. Fully-parametric feature inheritance.</figDesc><graphic coords="10,142.91,341.87,299.88,79.85" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Fig. 16 .</head><label>16</label><figDesc>Fig. 16. The finding of the features to be inherited based on FDAG.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Fig. 17 .</head><label>17</label><figDesc>Fig. 17. The inheritance of skeleton feature.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Fig. 18 .</head><label>18</label><figDesc>Fig. 18. The inheritance of concrete feature.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head>Fig. 20 .</head><label>20</label><figDesc>Fig. 20. Two different implementations of prismatic pair.</figDesc><graphic coords="11,316.39,63.93,241.31,67.08" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_19"><head>Fig. 19 .Fig. 21 .</head><label>1921</label><figDesc>Fig. 19. Skeleton feature for lower-kinematic pairs (activated elements are shown in red). (For interpretation of the references to colour in this figure legend, the reader is referred to the web version of this article.)</figDesc><graphic coords="11,85.75,568.62,433.80,157.82" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_20"><head>Fig. 22 .Fig. 23 .</head><label>2223</label><figDesc>Fig. 22. Top-down assembly design process of engine.</figDesc><graphic coords="12,109.10,184.77,367.56,296.87" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_21"><head>Fig. 24 .</head><label>24</label><figDesc>Fig. 24. Skeleton interfaces in the layout skeletons of engine model.</figDesc><graphic coords="13,144.15,63.92,316.80,243.93" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_22"><head>Fig. 25 .</head><label>25</label><figDesc>Fig. 25. Some inheritances in engine design.</figDesc><graphic coords="13,64.77,337.64,206.82,220.92" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_23"><head>Fig. 26 .</head><label>26</label><figDesc>Fig. 26. The change propagation on modification of parameters in the layout skeleton.</figDesc><graphic coords="14,145.50,63.93,294.70,149.16" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_24"><head>Fig. 27 .</head><label>27</label><figDesc>Fig. 27. Some multi-resolution models of engine.</figDesc><graphic coords="14,141.39,246.86,302.76,79.42" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_25"><head>Fig. 28 .</head><label>28</label><figDesc>Fig. 28. The adaptation and extension for native models of existing CAD systems.</figDesc><graphic coords="14,112.15,360.06,361.44,184.73" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_26"><head>Fig. 29 .</head><label>29</label><figDesc>Fig. 29. The framework for integration of top-down design and bottom-up design.</figDesc><graphic coords="15,62.47,63.93,480.24,230.40" type="bitmap" /></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>The authors are very grateful for the financial support from NSF of China (No. 60736019).</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Computer environments for the design of mechanical assemblies: a research review</title>
		<author>
			<persName><forename type="first">E</forename><surname>Libardi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Dixon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Simmons</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Engineering with Computers</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="121" to="136" />
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Research state and development directions of product top-down design</title>
		<author>
			<persName><forename type="first">Wen</forename><surname>Jian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Tian</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Integrated Manufacturing Systems</title>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A modeling system for top-down design of assembled products</title>
		<author>
			<persName><forename type="first">M</forename><surname>MÃ¤ntylÃ¤</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM Journal of Research and Development</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="page" from="636" to="659" />
			<date type="published" when="1990">1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A systematic approach to conceptual design</title>
		<author>
			<persName><forename type="first">R</forename><surname>Sturges</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O'</forename><surname>Shaughnessy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Reed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Concurrent Engineering</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page">93</biblScope>
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Supporting conceptual design based on the function-behavior-state modeler. Artificial Intelligence for Engineering Design</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Umeda</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ishii</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Yoshioka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Shimomura</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Tomiyama</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Analysis and Manufacturing</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="275" to="288" />
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">System dynamics: a unified approach</title>
		<author>
			<persName><forename type="first">D</forename><surname>Karnopp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Margolis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Rosenberg</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990">1990</date>
			<publisher>John Wiley &amp; Sons</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Functional understanding of assembly modelling</title>
		<author>
			<persName><forename type="first">J-K</forename><surname>Gui</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>MÃ¤ntylÃ¤</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Design</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="435" to="451" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Collaborative conceptual design -state of the art and future trends</title>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Neelamkavil</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Pardasani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer-Aided Design</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="page" from="981" to="996" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A CAD-based tool for development of large layouts</title>
		<author>
			<persName><forename type="first">G</forename><surname>Lashin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Feldhusen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Research in Engineering Design</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="217" to="228" />
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<author>
			<persName><forename type="first">A</forename><surname>Csabai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Stroud</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">C</forename><surname>Xirouchakis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Container spaces and functional features for top-down 3D layout design</title>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="page" from="1011" to="1035" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Design support using constraint-driven design spaces</title>
		<author>
			<persName><forename type="first">A</forename><surname>Csabai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Taiber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Xirouchakis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Geometric constraint solving and applications</title>
		<editor>
			<persName><forename type="first">B</forename><surname>Br Uderlin</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">D</forename><surname>Roller</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1998">1998</date>
			<biblScope unit="page" from="82" to="106" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">The datum flow chain: a systematic approach to assembly design and modeling</title>
		<author>
			<persName><forename type="first">R</forename><surname>Mantripragada</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Whitney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Research in Engineering Design</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="150" to="165" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Theory and practice of 3D tolerancing for assembly</title>
		<author>
			<persName><forename type="first">A</forename><surname>Clement</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Desrochers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Riviere</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CIRP seminar on computer aided tolerancing</title>
		<imprint>
			<date type="published" when="1991">1991</date>
			<pubPlace>USA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Penn State University</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Assembly modeling as an extension of feature-based design</title>
		<author>
			<persName><forename type="first">J</forename><surname>Shah</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Rogers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Research in Engineering Design</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="218" to="237" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Assembly features in modeling and planning</title>
		<author>
			<persName><forename type="first">W</forename><surname>Holland</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Bronsvoort</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Robotics and Computer Integrated Manufacturing</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="277" to="294" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Feature modelling for assembly</title>
		<author>
			<persName><forename type="first">W</forename><surname>Van Holland</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Bronsvoort</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Jansen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Graphics and Robotics</title>
		<imprint>
			<biblScope unit="page" from="131" to="148" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Internet-based collaborative product design with assembly features and virtual design spaces</title>
		<author>
			<persName><forename type="first">N</forename><surname>Shyamsundar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gadh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer-Aided Design</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="page" from="637" to="651" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Port-compatibility and connectability based assembly design</title>
		<author>
			<persName><forename type="first">P</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Bettig</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computing and Information Science in Engineering</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page">197</biblScope>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Ontology-based assembly design and information sharing for collaborative product development</title>
		<author>
			<persName><forename type="first">K</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Manley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer-Aided Design</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="page" from="1233" to="1250" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Transformation from conceptual to embodiment design</title>
		<author>
			<persName><forename type="first">A</forename><surname>Kusiak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Szczerbicki</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IIE transactions</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="6" to="12" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">A feature-based approach towards an integrated product model including conceptual design information</title>
		<author>
			<persName><forename type="first">G</forename><surname>Brunetti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Golob</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer-Aided Design</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="page" from="877" to="887" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Function-to-form mapping: model, representation and applications in design synthesis</title>
		<author>
			<persName><forename type="first">U</forename><surname>Roy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Pramanik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sudarsan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sriram</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Lyons</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer-Aided Design</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="page" from="699" to="719" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Multiple-view feature modelling for integral product development</title>
		<author>
			<persName><forename type="first">W</forename><surname>Bronsvoort</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Noort</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer-Aided Design</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="page" from="929" to="946" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Pro/engineer advanced top-down design</title>
		<author>
			<persName><surname>Ptc</surname></persName>
		</author>
		<idno>823-310- 01</idno>
		<imprint>
			<date>2000i2</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Integrated modeling with top-down approach in subsidiary industries</title>
		<author>
			<persName><forename type="first">N</forename><surname>Aleixos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Company</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Contero</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computers in Industry</title>
		<imprint>
			<biblScope unit="page" from="97" to="116" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Representation and propagation of engineering change information in collaborative product development using a neutral reference model</title>
		<author>
			<persName><forename type="first">J</forename><surname>Hwang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Mun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Han</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Concurrent Engineering</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page">147</biblScope>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Protection of intellectual property based on a skeleton model in product design collaboration</title>
		<author>
			<persName><forename type="first">D</forename><surname>Mun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hwang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Han</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer-Aided Design</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="page" from="641" to="648" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A cellular topology-based approach to generating progressive solid models from feature-centric models</title>
		<author>
			<persName><forename type="first">J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer-Aided Design</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="page" from="217" to="229" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">A core product model for representing design information</title>
		<author>
			<persName><forename type="first">S</forename><surname>Fenves</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page">6736</biblScope>
		</imprint>
		<respStmt>
			<orgName>US National Institute of Standards and</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technology Internal Report</note>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">CPM2: A revised core product model for representing design information</title>
		<author>
			<persName><forename type="first">S</forename><surname>Fenves</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Foufou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Bock</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Bouillon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sriram</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">NISTIR</title>
		<imprint>
			<biblScope unit="page">7185</biblScope>
			<date type="published" when="2004">2004</date>
		</imprint>
		<respStmt>
			<orgName>National Institute of Standards and Technology</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">A product information modeling framework for product lifecycle management</title>
		<author>
			<persName><forename type="first">R</forename><surname>Sudarsan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Fenves</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sriram</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer-Aided Design</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="page" from="1399" to="1411" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">CPM2: a Core Model for Product Data</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">J</forename><surname>Fenves</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Foufou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Bock</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">D</forename><surname>Sriram</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computing and Information Science in Engineering</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="14501" to="14506" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Information models for product representation: core and assembly models</title>
		<author>
			<persName><forename type="first">S</forename><surname>Rachuri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Baysal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Roy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Foufou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Bock</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Fenves</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Product Development</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="207" to="235" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">A model for capturing product assembly information</title>
		<author>
			<persName><forename type="first">S</forename><surname>Rachuri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y-H</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Foufou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">C</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Roy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computing and Information Science in Engineering</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="11" to="21" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">OAM+: an assembly data model for legacy systems engineering</title>
		<author>
			<persName><forename type="first">Manbub</forename><surname>Murshed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Shah</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">J</forename><surname>Jagasivamani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Wasfy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Hislop</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">W</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASME conference proceedings, american society of mechanical engineers</title>
		<imprint>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="869" to="881" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">Parametric and feature-based CAD/CAM: concepts, techniques, and applications</title>
		<author>
			<persName><forename type="first">J</forename><surname>Shah</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>MÃ¤ntylÃ¤</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995">1995</date>
			<publisher>Wiley-Interscience</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title level="m" type="main">Engineering design: a systematic approach</title>
		<author>
			<persName><forename type="first">G</forename><surname>Pahl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Beitz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Wallace</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Blessing</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Bauert</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996">1996</date>
			<publisher>Springer Verlag</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">A hierarchical data structure for representing assemblies: part 1</title>
		<author>
			<persName><forename type="first">K</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">C</forename><surname>Gossard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer-Aided Design</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="15" to="19" />
			<date type="published" when="1985">1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">The skeleton in the multi-level assembly model for top-down innovation design of mechanical product</title>
		<author>
			<persName><forename type="first">X</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Zhang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009. 2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">A framework for collaborative top-down assembly design</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">T</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">D</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the asme international design engineering technical conferences and computers and information in engineering conference 2007</title>
		<meeting>the asme international design engineering technical conferences and computers and information in engineering conference 2007</meeting>
		<imprint>
			<publisher>Pts a and B</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="139" to="149" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title level="m" type="main">The representation of function in computer-based design</title>
		<author>
			<persName><forename type="first">S</forename><surname>Szykman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Racz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sriram</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999">1999</date>
			<publisher>Citeseer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Toward effective mechanical design reuse: CAD model retrieval based on general and partial shapes</title>
		<author>
			<persName><forename type="first">M</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">F</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jyh</forename><surname>Fuh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><forename type="middle">M</forename><surname>Qiu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Mechanical Design</title>
		<imprint>
			<biblScope unit="volume">131</biblScope>
			<biblScope unit="page">8</biblScope>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">A science-based approach to product design theory part I: formulation and formalization of design process</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Zeng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Gu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Robotics and Computer Integrated Manufacturing</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="331" to="339" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">A science-based approach to product design theory part II: formulation of design requirements and products</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Zeng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Gu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Robotics and Computer Integrated Manufacturing</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="341" to="352" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Product evolution: a reverse engineering and redesign methodology</title>
		<author>
			<persName><forename type="first">K</forename><surname>Otto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Wood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Research in Engineering Design</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="226" to="243" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Mathematical foundation for modeling conceptual design sketches</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Zeng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Pardasani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Dickinson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Antunes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computing and Information Science in Engineering</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page">150</biblScope>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
