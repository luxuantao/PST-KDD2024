<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Computational lambda-calculus and monads</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Eugenio</forename><surname>Moggi</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Lab. for Found. of Comp. Sci</orgName>
								<orgName type="institution">University of Edinburgh</orgName>
								<address>
									<postCode>EH9 3JZ</postCode>
									<settlement>Edinburgh</settlement>
									<country key="GB">UK</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">On leave from Univ. di Pisa</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Computational lambda-calculus and monads</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">6BC420DD9CFAB9A082F00AE1C7A104CB</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T12:28+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The λ-calculus is considered an useful mathematical tool in the study of programming languages. However, if one uses βη-conversion to prove equivalence of programs, then a gross simplification 1 is introduced. We give a calculus based on a categorical semantics for computations, which provides a correct basis for proving equivalence of programs, independent from any specific computational model. * Research partially supported by EEC Joint Collaboration Contract # ST2J-0374-C(EDB).</p><p>1 Programs are identified with total functions from values to values.</p><p>• The logical approach gives a class of possible models for the language. Then the problem is to prove that two terms denotes the same object in all possible models.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Introduction</head><p>This paper is about logics for reasoning about programs, in particular for proving equivalence of programs. Following a consolidated tradition in theoretical computer science we identify programs with the closed λ-terms, possibly containing extra constants, corresponding to some features of the programming language under consideration. There are three approaches to proving equivalence of programs:</p><p>• The operational approach starts from an operational semantics, e.g. a partial function mapping every program (i.e. closed term) to its resulting value (if any), which induces a congruence relation on open terms called operational equivalence (see e.g. <ref type="bibr" target="#b9">[10]</ref>). Then the problem is to prove that two terms are operationally equivalent.</p><p>• The denotational approach gives an interpretation of the (programming) language in a mathematical structure, the intended model. Then the problem is to prove that two terms denote the same object in the intended model.</p><p>The operational and denotational approaches give only a theory (the operational equivalence ≈ and the set T h of formulas valid in the intended model respectively), and they (especially the operational approach) deal with programming languages on a rather case-by-case basis. On the other hand, the logical approach gives a consequence relation (Ax A iff the formula A is true in all models of the set of formulas Ax), which can deal with different programming languages (e.g. functional, imperative, non-deterministic) in a rather uniform way, by simply changing the set of axioms Ax, and possibly extending the language with new constants. Moreover, the relation is often semidecidable, so it is possible to give a sound and complete formal system for it, while T h and ≈ are semidecidable only in oversimplified cases. We do not take as a starting point for proving equivalence of programs the theory of βη-conversion, which identifies the denotation of a program (procedure) of type A → B with a total function from A to B, since this identification wipes out completely behaviours like non-termination, non-determinism or side-effects, that can be exhibited by real programs. Instead, we proceed as follows:</p><p>1. We take category theory as a general theory of functions and develop on top a categorical semantics of computations based on monads.</p><p>2. We consider how the categorical semantics should be extended to interpret λ-calculus.</p><p>At the end we get a formal system, the computational lambda-calculus (λ c -calculus for short), for proving equivalence of programs, which is sound and complete w.r.t. the categorical semantics of computations.</p><p>The methodology outlined above is inspired by <ref type="bibr" target="#b12">[13]</ref> 2 , and it is followed in <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b7">8]</ref> to obtain the λ p -calculus. The view that "category theory comes, logically, before the λ-calculus" led us to consider a categorical semantics of computations first, rather than to modify directly the rules of βη-conversion to get a correct calculus.</p><p>A type theoretic approach to partial functions and computations is attempted in <ref type="bibr" target="#b0">[1]</ref> by introducing a type constructor Ā, whose intuitive meaning is the set of computations of type A. Our categorical semantics is based on a similar idea. Constable and Smith, however, do not adequately capture the general axioms for computations (as we do), since they lack a general notion of model and rely instead on operational, domainand recursion-theoretic intuition.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">A categorical semantics of computations</head><p>The basic idea behind the semantics of programs described below is that a program denotes a morphism from A (the object of values of type A) to T B (the object of computations of type B). This view of programs corresponds to call-by-value parameter passing, but there is an alternative view of "programs as functions from computations to computations" corresponding to call-by-name (see <ref type="bibr" target="#b9">[10]</ref>). In any case, the real issue is that the notions of value and computation should not be confused. By taking callby-value we can stress better the importance of values. Moreover, call-by-name can be more easily represented in call-by-value than the other way around.</p><p>There are many possible choices for T B corresponding to different notions of computations, for instance in the category of sets the set of partial computations (of type B) is the lifting B + {⊥} and the set of non-deterministic computations is the powerset P(B). Rather than focus on specific notions of computations, we will identify the general properties that the object T B of computations must have. The basic requirement is that programs should form a category, and the obvious choice for it is the Kleisli category for a monad.  2 "I am trying to find out where λ-calculus should come from, and the fact that the notion of a cartesian closed category is a late developing one (Eilenberg &amp; Kelly (1966)), is not relevant to the argument: I shall try to explain in my own words in the next section why we should look to it first".</p><p>T and µ: T 2 .</p><p>→ T are natural transformations and the following equations hold:</p><formula xml:id="formula_0">• µ T A ; µ A = T (µ A ); µ A • η T A ; µ A = id T A = T (η A ); µ A A computational model is a monad (T, η, µ) satis- fying the mono requirement: η A is a mono for every A ∈ C.</formula><p>There is an alternative description of a monad (see <ref type="bibr" target="#b6">[7]</ref>), which is easier to justify computationally. Definition 1.2 A Kleisli triple over C is a triple (T, η, * ), where T : Obj(C) → Obj(C), η A : A → T A, f * : T A → T B for f : A → T B and the following equations hold:</p><formula xml:id="formula_1">• η * A = id T A • η A ; f * = f • f * ; g * = (f ; g * ) *</formula><p>Every Kleisli triple (T, η, * ) corresponds to a monad (T, η, µ) where T (f :</p><formula xml:id="formula_2">A → B) = (f ; η B ) * and µ A = id * T A .</formula><p>Intuitively η A is the inclusion of values into computations and f * is the extension of a function f from values to computations to a function from computations to computations, which first evaluates a computation and then applies f to the resulting value. The equations for Kleisli triples say that programs form a category, the Kleisli category C T , where the set C T (A, B) of morphisms from A to B is C(A, T B), the identity over A is η A and composition of f followed by g is f ; g * . Although the mono requirement is very natural there are cases in which it seems appropriate to drop it, for instance: it may not be satisfied by the monad of continuations.</p><p>Before going into more details we consider some examples of monads over the category of sets.</p><p>Example 1.3 Non-deterministic computations:</p><formula xml:id="formula_3">• T ( ) is the covariant powerset functor, i.e. T (A) = P(A) and T (f )(X) is the image of X along f • η A (a) is the singleton {a} • µ A (X) is the big union ∪X</formula><p>Computations with side-effects:</p><p>• T ( ) is the functor ( × S) S , where S is a nonempty set of stores. Intuitively a computation takes a store and returns a value together with the modified store.</p><p>• η A (a) is (λs: S. a, s )</p><p>• µ A (f ) is (λs: S.eval(f s)), i.e. the computation that given a store s, first computes the pair computation-store f , s = f s and then returns the pair value-store a, s = f s .</p><p>Continuations:</p><formula xml:id="formula_4">• T ( ) is the functor R R ( )</formula><p>, where R is a nonempty set of results. Intuitively a computation takes a continuation and returns a result.</p><p>• η A (a) is (λk: R A .ka)</p><formula xml:id="formula_5">• µ A (f ) is (λk: R A .f (λh: R R A .hk))</formula><p>One can verify for himself that other notions of computation (e.g. partial, probabilistic or non-deterministic with side-effects) fit in the general definition of monad.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">A simple language</head><p>We introduce a programming language (with existence and equivalence assertions), where programs denote morphisms in the Kleisli category C T corresponding to a computational model (T, η, µ) over a category C. The language is oversimplified (for instance terms have exactly one free variable) in order to define its interpretation in any computational model. The additional structure required to interpret λ-terms will be introduced incrementally (see Section 2), after computations have been understood and axiomatized in isolation.</p><p>The programming language is parametric in a signature (i.e. a set of base types and unary command symbols), therefore its interpretation in a computational model is parametric in an interpretation of the symbols in the signature. To stress the fact that the interpretation is in C T (rather than C), we use τ 1 τ 2 (instead of τ 1 → τ 2 ) as arities and ≡ : τ (instead of = : T τ ) as equality of computations of type τ .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>• Given an interpretation [[A]] for any base type A,</head><p>i.e. an object of C T , then the interpretation of a type τ :</p><formula xml:id="formula_6">: = A | T τ is an object [[τ ]] of C T defined in the obvious way, [[T τ ]] = T [[τ ]].</formula><p>• Given an interpretation [[p]] for any unary command p of arity τ 1 τ 2 , i.e. a morphism from</p><formula xml:id="formula_7">[[τ 1 ]] to [[τ 2 ]] in C T , then the interpretation of a well-formed program x: τ e: τ is a morphism [[x: τ e: τ ]] in C T from [[τ ]] to [[τ ]</formula><p>] defined by induction on the derivation of x: τ e: τ (see Table <ref type="table" target="#tab_0">1</ref>).</p><p>• On top of the programming language we consider equivalence and existence assertions (see Table <ref type="table" target="#tab_1">2</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Remark 1.4</head><p>The let-constructor is very important semantically, since it corresponds to composition in the Kleisli category C T . While substitution corresponds to composition in C. In the λ-calculus (let x=e in e ) is usually treated as syntactic sugar for (λx.e )e, and this can be done also in the λ c -calculus. However, we think that this is not the right way to proceed, because it amounts to understanding the let-constructor, which makes sense in any computational model, in terms of constructors that make sense only in λ c -models. On the other hand, (let x=e in e ) cannot be reduced to the more basic substitution (i.e. e [x: = e]) without collapsing C T to C.</p><p>The existence assertion e ↓ means that e denotes a value and it generalizes the existence predicate used in the logic of partial terms/elements, for instance:</p><p>• a partial computation exists iff it terminates;</p><p>• a non-deterministic computation exists iff it gives exactly one result;</p><p>• a computation with side-effects exists iff it does not change the store.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Extending the language</head><p>In this section we describe the additional structure required to interpret λ-terms in a computational model. It is well-known that λ-terms can be interpreted in a cartesian closed categories (ccc), so one expects that a monad over a ccc would suffice, however, there are two problems:</p><p>• the interpretation of (let x=e in e ), when e has other free variables beside x, and</p><p>• the interpretation of functional types.</p><p>Example 2.1 To show why the interpretation of the let-constructor is problematic, we try to interpret x 1 : τ 1 (let x 2 =e 2 in e): τ , when both x 1 and x 2 are free in e. Suppose that g 2 : τ 1 → T τ 2 and g: τ 1 × τ 2 → T τ are the interpretations of x 1 : τ 1 e 2 : τ 2 and x 1 : τ 1 , x 2 : τ 2 e: τ respectively. If T were Id C , then [[x 1 : τ 1 (let x 2 =e 2 in e): τ ]] would be id τ1 , g 2 ; g. In the general case, Table <ref type="table" target="#tab_0">1</ref> says that ; above is indeed composition in the Kleisli category, therefore id τ1 , g 2 ; g becomes id τ1 , g 2 ; g * . But in id τ1 , g 2 ; g * there is a type mismatch, since the codomain of id τ1 , g 2 is τ 1 × T τ 2 , while the domain of T g is</p><formula xml:id="formula_8">T (τ 1 × τ 2 ).</formula><p>The problem is that the monad and cartesian products alone do not give us the ability to transform a pair value-computation (or computation-computation) into a computation of a pair. What is needed is a morphism t A,B from A × T B to T (A × B), so that x 1 : τ 1 (let x 2 =e 2 in e): T τ will be interpreted by id τ1 , g 2 ; t τ1,τ2 ; g * .</p><p>Similarly for interpreting x: τ p(e 1 , e 2 ): τ , we need a morphism ψ A,B : T A × T B → T (A × B), which given a pair of computations returns a computation computing a pair, so that, when g i : τ → T τ i is the interpretation of x: τ e i : τ i , then [[x: τ p(e 1 , e 2 ): τ ]] is g 1 , g 2 ; ψ τ1,τ2 ; [[p]] * . Definition 2.2 A strong monad over a category C with finite products is a monad (T, η, µ) together with a natural transformation t</p><formula xml:id="formula_9">A,B from A × T B to T (A × B) s.t. t 1,A ; T (r A ) = r T A t A×B,C ; T (α A,B,C ) = α A,B,T C ; (id A × t B,C ); t A,B×C (id A × η B ); t A,B = η A×B (id A × µ B ); t A,B = t A,T B ; T (t A,B ); µ A×B</formula><p>where r and α are the natural isomorphisms</p><formula xml:id="formula_10">• r A : 1 × A → A • α A,B,C : (A × B) × C → A × (B × C) Remark 2.3</formula><p>The natural transformation t with the above properties is not the result of some ad hoc considerations, instead it can be obtained via the following general principle:</p><p>when interpreting a complex language the 2category Cat of small categories, functors and natural transformations may not be adequate and one may have to use a different 2-category which captures better some fundamental structures underlying the language.</p><p>Since monads and adjunctions are 2-category concepts, the most natural way to model computations (and datatypes) for more complex languages is simply by monads (and adjunctions) in a suitable 2-category.</p><p>Following this general principle we can give two explanations for t, one based on enriched categories (see <ref type="bibr" target="#b3">[4]</ref>) and the other on indexed categories (see <ref type="bibr" target="#b2">[3]</ref>). The first explanation takes as fundamental a commutative monoidal structure on C, which models the tensor product of linear logic (see <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b13">14]</ref>). If C is a monoidal closed category, in particular a ccc, then it can be enriched over itself by taking C(A, B) to be the object B A . The equations for t are taken from <ref type="bibr" target="#b4">[5]</ref>,</p><p>where a one-one correspondence is established between functorial and tensorial strengths<ref type="foot" target="#foot_0">3</ref> :</p><p>• the first two equations say that t is a tensorial strength of T , so that T is a C-enriched functor.</p><p>• the last two equations say that η and µ are natural transformations between C-enriched functors, namely η:</p><formula xml:id="formula_11">Id C . → T and µ: T 2 . → T .</formula><p>So a strong monad is just a monad over C enriched over itself in the 2-category of C-enriched categories. The second explanation was suggested to us by G. Plotkin, and takes as fundamental structure a class D of display maps over C, which models dependent types (see <ref type="bibr" target="#b1">[2]</ref>), and induces a C-indexed category C/ D . Then a strong monad over a category C with finite products amounts to a monad over C/ D in the 2-category of C-indexed categories, where D is the class of first projections (corresponding to constant type dependency).</p><p>In general the natural transformation t has to be given as an extra parameter for models. However, t is uniquely determined (but it may not exists) by T and the cartesian structure on C, when C has enough points.</p><p>Proposition 2.4 If (T, η, µ) is a monad over a category C with finite products and enough points (i.e. for any f, g: A → B if h; f = h; g for every points h: 1 → A, then f = g), and t A,B is a family of morphisms s.t. for all points a: 1 → A and b:</p><formula xml:id="formula_12">1 → T B a, b ; t A,B = b; T ( ! B ; a, id B )</formula><p>where ! B is the unique morphism from B to the terminal object 1, then (T, η, µ, t) is a strong monad over C.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Remark 2.5 The tensorial strength t induces a natural transformation ψ</head><formula xml:id="formula_13">A,B from T A × T B to T (A × B), namely ψ A,B = c T A,T B ; t T B,A ; (c T B,A ; t A,B ) *</formula><p>where c is the natural isomorphism</p><formula xml:id="formula_14">• c A,B : A × B → B × A</formula><p>The morphism ψ A,B has the correct domain and codomain to interpret the pairing of a computation of type A with one of type B (obtained by first evaluating the first argument and then the second). There is also a dual notion of pairing, ψA,B = c A,B ; ψ B,A ; T c B,A (see <ref type="bibr" target="#b4">[5]</ref>), which amounts to first evaluating the second argument and then the first.</p><p>The reason why a functional type A → B in a programming language (like ML) cannot be interpreted by the exponential B A (as done in a ccc) is fairly obvious; in fact the application of a functional procedure to an argument requires some computation to be performed before producing a result. By analogy with partial cartesian closed categories (see <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b10">11]</ref>), we will interpret functional types by exponentials of the form (T B)</p><p>A .</p><p>Definition 2.6 A λ c -model over a category C with finite products is a strong monad (T, η, µ, t) together with a T -exponential for every pair A, B of objects in C, i.e. a pair</p><formula xml:id="formula_15">(T B) A , eval A,T B : ((T B) A × A) → T B</formula><p>satisfying the universal property that for any object C and f :</p><formula xml:id="formula_16">(C × A) → T B there exists a unique h: C → (T B) A , denoted by Λ A,T B,C (f ), s.t. f = (Λ A,T B,C (f ) × id A ); eval A,T B</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Like p-exponentials, a T -exponential (T B)</head><p>A can be equivalently defined by giving a natural isomorphism</p><formula xml:id="formula_17">C T (C × A, B) ∼ = C(C, (T B)</formula><p>A ), where C varies over C. The programming language introduced in Section 1.1 and its interpretation can be extended according to the additional structure available in a λ c -model as follows:</p><p>• there is a new type 1, interpreted by the terminal object of C, and two new type constructors τ 1 × τ 2 and τ 1 τ 2 interpreted by the product</p><formula xml:id="formula_18">[[τ 1 ]]×[[τ 2 ]</formula><p>] and the T -exponent (T [[τ 2 ]]) [[τ1]] respectively</p><p>• the interpretation of a well-formed program Γ e: τ , where Γ is a sequence</p><formula xml:id="formula_19">x 1 : τ 1 , . . . , x n : τ n , is a morphism in C T from [[Γ]] (i.e. [[τ 1 ]] × . . . × [[τ n ]]) to [[τ ]] (see Table 3) 4 .</formula><p>We claim that the formal system is sound and complete w.r.t. interpretation in λ c -models. Soundness amounts to showing that the inference rules are admissible in any λ c -model, while completeness amounts to showing that any λ c -theory has an initial model (given by a term-model construction). The inference rules of the λ c -calculus are partitioned as follows:</p><p>• general rules for terms denoting computations, but with variables ranging over values (see Table <ref type="table">4</ref>)<ref type="foot" target="#foot_3">5</ref> </p><p>• the inference rules for let-constructor and types of computations (see Table <ref type="table" target="#tab_2">5</ref>)</p><p>• the inference rules for product and functional types (see Table <ref type="table" target="#tab_3">6</ref>)</p><p>Remark 3.1 A comparison among λ c -, λ v -and λ pcalculus shows that:</p><p>• the λ v -calculus proves less equivalences between λ-terms, e.g. (λx.x)(yz) ≡ (yz) is provable in the λ c -but not in the λ v -calculus</p><p>• the λ p -calculus proves more equivalences between λ-terms, e.g. (λx.yz)(yz) ≡ (yz) is provable in the λ p -but not in the λ c -calculus, because y can be a procedure, which modifies the store (e.g. by increasing the value contained in a local static variable) each time it is executed.</p><p>• a λ-term e has a value in the λ c -calculus, i.e. e is provably equivalent to some value (either a variable or a λ-abstraction), iff e has a value in the λ v -calculus/λ p -calculus. So all three calculi are correct w.r.t. call-by-value operational equivalence.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusions and further research</head><p>The main contribution of this paper is the categorytheoretic semantics of computations and the general principle for extending it to more complex languages (see Remark 2.3), while the λ c -calculus is a straightforward fallout, which is easier to understand and relate to other calculi. This semantics of computations corroborates the view that (constructive) proofs and programs are rather unrelated, although both of them can be understood in terms of functions. For instance, various logical modalities (like possibility and necessity in modal logic or why not and of course of linear logic) are modelled by monads or comonads which cannot have a tensorial strength. In general, one should expect types suggested by logic to provide a more fine-grained type system without changing the nature of computations.</p><p>Our work is just an example of what can be achieved in the study of programming languages by using a category-theoretic methodology, which free us from the irrelevant detail of syntax and focus our mind on the important structures underlying programming languages. We believe that there is a great potential to be exploited here. The λ c -calculus open also the possibility to develop a new Logic of Computable Functions (see <ref type="bibr" target="#b11">[12]</ref>), based on an abstract semantic of computations rather than domain theory, for studying axiomatically different notions of computation and their relations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>SEMANTICS var</head><p>x: τ     </p><formula xml:id="formula_20">x: τ = η [[τ ]] let x: τ e 1 : τ 1 = g 1 x 1 : τ 1 e 2 : τ 2 = g 2 x: τ (let x 1 =e 1 in e 2 ): τ 2 = g 1 ; g * 2 p: τ 1 τ 2 x: τ e 1 : τ 1 = g 1 x: τ p(e 1 ): τ 2 = g 1 ; p * [ ] x: τ e: τ = g x: τ [e]: T τ = g; η T [[τ ]]</formula></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Definition 1 . 1 A</head><label>11</label><figDesc>monad over a category C is a triple (T, η, µ), where T : C → C is a functor, η: Id C .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>→</head><label></label><figDesc></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>µ x: τ e: T τ = g x: τ µ(e): τ = g; µ [[τ ]]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Table 3 :</head><label>3</label><figDesc>π i Γ e: τ 1 × τ 2 = g Γ π i (e): τ 1 = g; T (π i ) λ Γ, x 1 : τ 1 e 2 : τ 2 = g Γ (λx 1 : τ 1 .e 2 ): τ 1 τ 2 = Λ [[τ1]],T [[τ2]],[[Γ]] (g); η [[τ1 τ2]] app Γ e 1 : τ 1 = g 1 Γ e: τ 1 τ 2 = g Γ e(e 1 ): τ 2 = g, g 1 ; ψ (T [[τ2]]) [[τ 1 ]] ,[[τ1]] ; (eval [[τ1]],T [[τ2]] ) * Interpretation in a λ c -modelWe write [x: = e] for the substitution of x with e in .E.x Γ x ↓ τ subst Γ e ↓ τ Γ, x: τ A Γ A[x: = e]≡ is an congruence relationTable 4: General rulesWe write (let x=e in e) for (let x 1 =e 1 in (. . . (let x n =e n in e) . . .)), where n is the lenght of the sequence x (and e). In particular, (let ∅=∅ in e) stands for e. unit Γ (let x=e in x) ≡ e: τ ass Γ (let x 2 =(let x 1 =e 1 in e 2 ) in e) ≡ (let x 1 =e 1 in (let x 2 =e 2 in e)): τ x 1 ∈ FV(e) let.β Γ (let x 1 =x 2 in e) ≡ e[x 1 : = x 2 ]: τ let.p Γ p(e) ≡ (let x=e in p(x)): τ E.[ ] Γ [e] ↓ T τ T.β Γ µ([e]) ≡ e: τ T.η Γ [µ(x)] ≡ x: T τ</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Programs and their interpretation 1 e 1 ≡ e 2 : τ 2 ⇐⇒ g 1 = g 2</figDesc><table><row><cell>RULE SYNTAX</cell><cell></cell><cell>SEMANTICS</cell></row><row><cell>eq</cell><cell></cell><cell></cell></row><row><cell>x: τ 1 e 1 : τ 2</cell><cell>=</cell><cell>g 1</cell></row><row><cell>x: τ 1 e 2 : τ 2</cell><cell>=</cell><cell>g 2</cell></row><row><cell>x: τ ex</cell><cell></cell><cell></cell></row><row><cell>x: τ 1 e: τ 2</cell><cell>=</cell><cell>g</cell></row><row><cell>x: τ 1 e ↓ τ 2</cell><cell cols="2">⇐⇒ g factors through η [[τ2]]</cell></row></table><note><p><p>i.e. there exists (unique</p>) h s.t. g = h; η [[τ2]]</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 :</head><label>2</label><figDesc>Atomic assertions and their interpretation RULE SYNTAXSEMANTICS varx 1 : τ 1 , . . . , x n : τ n x i :τ i = π n i ; η [[τi]] let Γ e 1 : τ 1 = g 1 Γ, x 1 : τ 1 e 2 : τ 2 = g 2 Γ (let x 1 =e 1 in e 2 ): τ 2 = id [[Γ]] , g 1 ; t [[Γ]],[[τ1]] ; g * Γ e 1 : τ 1 = g 1 Γ e 2 : τ 2 = g 2 Γ e 1 , e 2 : τ 1 × τ 2 = g 1 , g 2 ; ψ [[τ1]],[[τ2]]</figDesc><table><row><cell>2</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 5 :</head><label>5</label><figDesc>rules for let and computational types , e 2 ≡ (letx 1 , x 2 =e 1 , e 2 in x 1 , x 2 ): τ 1 × τ 2 E.π i Γ π i (x) ↓ τ i ×.β Γ π i ( x 1 , x 2 ) ≡ x i : τ i ×.η Γ π 1 (x), π 2 (x) ≡ x: τ 1 × τ 2 E.λ Γ (λx: τ 1 .e) ↓ τ 1 τ 2 β Γ (λx 1 : τ 1 .e 2 )(x 1 ) ≡ e 2 : τ 2 η Γ (λx 1 : τ 1 .x(x 1 )) ≡ x: τ 1 τ 2</figDesc><table><row><cell cols="3">E. *  Γ  *  ↓ 1</cell></row><row><cell cols="3">1.η Γ  *  ≡ x: 1</cell></row><row><cell>E.</cell><cell>Γ</cell><cell>x 1 , x 2 ↓ τ 1 × τ 2</cell></row><row><cell>let.</cell><cell>Γ</cell><cell>e 1</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 6 :</head><label>6</label><figDesc>rules for product and functional types</figDesc><table /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_0"><p>A functorial strength for an endofunctor T is a natural transformation st A,B : B A → (T B) T A which internalizes the action of T on morphisms.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_1"><p>The λ c -calculusIn this section we introduce a formal system, the λ ccalculus, with two basic judgements: existence (Γ e ↓ τ ) and equivalence (Γ e 1 ≡ e 2 : τ ).</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_2"><p><ref type="bibr" target="#b3">4</ref> In a language with products nonunary commands can be treated as unary commands from a product type.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_3"><p>The general rules of sequent calculus, more precisely those for substitution and quantifiers, have to be modified slightly, because variables range over values and types can be empty. These modifications are similar to those introduced in the logic of partial terms (see Section 2.4 in<ref type="bibr" target="#b8">[9]</ref>).</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>My thanks to M. Hyland, A. Kock (and other participants to the 1988 Category Theory Meeting in Sussex) for directing me towards the literature on monads. Discussions with R. Amadio, R. Burstall, J.Y. Girard, R. Harper, F. Honsell, Y. Lafont, G. Longo, R. Milner, G. Plotkin provided useful criticisms and suggestions. Thanks also to M. Tofte and P. Taylor for suggesting improvements to an early draft.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Partial objects in constructive type theory</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Constable</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">F</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2nd LICS Conf</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">The theory of constructions: Categorical semantics and topostheoretic models</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M E</forename><surname>Hyland</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Pitts</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. AMS Conf. on Categories in Comp. Sci. and Logic</title>
		<meeting>AMS Conf. on Categories in Comp. Sci. and Logic<address><addrLine>Boulder</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1987">1987. 1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">T</forename><surname>Johnstone</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Pare</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Indexed Categories and their Applications</title>
		<title level="s">Lecture Notes in Mathematics</title>
		<imprint>
			<publisher>Springer Verlag</publisher>
			<date type="published" when="1978">1978</date>
			<biblScope unit="volume">661</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Basic Concepts of Enriched Category Theory</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">M</forename><surname>Kelly</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1982">1982</date>
			<publisher>Cambridge University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">A</forename><surname>Kock</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Strong functors and monoidal monads. Archiv der Mathematik</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<date type="published" when="1972">1972</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">The linear abstract machine</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Lafont</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theoretical Computer Science</title>
		<imprint>
			<biblScope unit="volume">59</biblScope>
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">of Graduate Texts in Mathematics</title>
		<author>
			<persName><forename type="first">E</forename><surname>Manes</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1976">1976</date>
			<publisher>Springer Verlag</publisher>
			<biblScope unit="volume">26</biblScope>
		</imprint>
	</monogr>
	<note>Algebraic Theories</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Categories of partial morphisms and the partial lambda-calculus</title>
		<author>
			<persName><forename type="first">E</forename><surname>Moggi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings Workshop on Category Theory and Computer Programming</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting>Workshop on Category Theory and Computer Programming<address><addrLine>Guildford</addrLine></address></meeting>
		<imprint>
			<publisher>Springer Verlag</publisher>
			<date type="published" when="1985">1985. 1986</date>
			<biblScope unit="volume">240</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">The Partial Lambda-Calculus</title>
		<author>
			<persName><forename type="first">E</forename><surname>Moggi</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988">1988</date>
		</imprint>
		<respStmt>
			<orgName>University of Edinburgh</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Call-by-name, call-by-value and the λ-calculus</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">D</forename><surname>Plotkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theoretical Computer Science</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<date type="published" when="1975">1975</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Continuity and Effectiveness in Topoi</title>
		<author>
			<persName><forename type="first">G</forename><surname>Rosolini</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986">1986</date>
		</imprint>
		<respStmt>
			<orgName>University of Oxford</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Scott</surname></persName>
		</author>
		<title level="m">A type-theoretic alternative to CUCH, ISWIM, OWHY. Oxford notes</title>
		<imprint>
			<date type="published" when="1969">1969</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Relating theories of the λ-calculus</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Scott</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">To H.B. Curry: essays in Combinarory Logic, lambda calculus and Formalisms</title>
		<editor>
			<persName><forename type="first">R</forename><surname>Hindley</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><surname>Seldin</surname></persName>
		</editor>
		<imprint>
			<publisher>Academic Press</publisher>
			<date type="published" when="1980">1980</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Linear logic, * -autonomous categories and cofree coalgebras</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A G</forename><surname>Seely</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. AMS Conf. on Categories in Comp. Sci. and Logic</title>
		<meeting>AMS Conf. on Categories in Comp. Sci. and Logic<address><addrLine>Boulder</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1987">1987. 1987</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
