<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Dropout as a Bayesian Approximation: Representing Model Uncertainty in Deep Learning</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Yarin</forename><surname>Gal</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Cambridge</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Dropout as a Bayesian Approximation: Representing Model Uncertainty in Deep Learning</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2022-12-25T13:08+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Deep learning tools have gained tremendous attention in applied machine learning. However such tools for regression and classification do not capture model uncertainty. In comparison, Bayesian models offer a mathematically grounded framework to reason about model uncertainty, but usually come with a prohibitive computational cost. In this paper we develop a new theoretical framework casting dropout training in deep neural networks (NNs) as approximate Bayesian inference in deep Gaussian processes. A direct result of this theory gives us tools to model uncertainty with dropout NNsextracting information from existing models that has been thrown away so far. This mitigates the problem of representing uncertainty in deep learning without sacrificing either computational complexity or test accuracy. We perform an extensive study of the properties of dropout's uncertainty. Various network architectures and nonlinearities are assessed on tasks of regression and classification, using MNIST as an example. We show a considerable improvement in predictive log-likelihood and RMSE compared to existing state-of-the-art methods, and finish by using dropout's uncertainty in deep reinforcement learning.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Deep learning has attracted tremendous attention from researchers in fields such as physics, biology, and manufacturing, to name a few <ref type="bibr" target="#b1">(Baldi et al., 2014;</ref><ref type="bibr" target="#b0">Anjos et al., 2015;</ref><ref type="bibr" target="#b3">Bergmann et al., 2014)</ref>. Tools such as neural networks (NNs), dropout, convolutional neural networks (convnets), and others are used extensively. However, these are fields in which representing model uncertainty is of crucial importance <ref type="bibr" target="#b21">(Krzywinski &amp; Altman, 2013;</ref><ref type="bibr" target="#b10">Ghahramani, 2015)</ref>. With the recent shift in many of these fields towards the use of Bayesian uncertainty <ref type="bibr" target="#b13">(Herzog &amp; Ostwald, 2013;</ref><ref type="bibr">Trafi-</ref>Proceedings of the 33 rd International Conference on Machine Learning, New York, NY, USA, 2016. JMLR: W&amp;CP volume 48. Copyright 2016 by the author(s). <ref type="bibr">mow &amp; Marks, 2015;</ref><ref type="bibr" target="#b30">Nuzzo, 2014)</ref>, new needs arise from deep learning tools.</p><p>Standard deep learning tools for regression and classification do not capture model uncertainty. In classification, predictive probabilities obtained at the end of the pipeline (the softmax output) are often erroneously interpreted as model confidence. A model can be uncertain in its predictions even with a high softmax output (fig. <ref type="figure">1</ref>). Passing a point estimate of a function (solid line 1a) through a softmax (solid line 1b) results in extrapolations with unjustified high confidence for points far from the training data. x * for example would be classified as class 1 with probability 1. However, passing the distribution (shaded area 1a) through a softmax (shaded area 1b) better reflects classification uncertainty far from the training data.</p><p>Model uncertainty is indispensable for the deep learning practitioner as well. With model confidence at hand we can treat uncertain inputs and special cases explicitly. For example, in the case of classification, a model might return a result with high uncertainty. In this case we might decide to pass the input to a human for classification. This can happen in a post office, sorting letters according to their zip code, or in a nuclear power plant with a system responsible for critical infrastructure <ref type="bibr" target="#b25">(Linda et al., 2009)</ref>. Uncertainty is important in reinforcement learning (RL) as well <ref type="bibr" target="#b36">(Szepesvári, 2010)</ref>. With uncertainty information an agent can decide when to exploit and when to explore its environment. Recent advances in RL have made use of NNs for Q-value function approximation. These are functions that estimate the quality of different actions an agent can take. Epsilon greedy search is often used where the agent selects its best action with some probability and explores otherwise. With uncertainty estimates over the agent's Q-value function, techniques such as <ref type="bibr">Thompson sampling (Thompson, 1933</ref>) can be used to learn much faster.</p><p>Bayesian probability theory offers us mathematically grounded tools to reason about model uncertainty, but these usually come with a prohibitive computational cost. It is perhaps surprising then that it is possible to cast recent deep learning tools as Bayesian models -without changing either the models or the optimisation. We show that the use of dropout (and its variants) in NNs can be interpreted as a Bayesian approximation of a well known prob- abilistic model: the Gaussian process (GP) <ref type="bibr" target="#b31">(Rasmussen &amp; Williams, 2006)</ref>. Dropout is used in many models in deep learning as a way to avoid over-fitting <ref type="bibr" target="#b35">(Srivastava et al., 2014)</ref>, and our interpretation suggests that dropout approximately integrates over the models' weights. We develop tools for representing model uncertainty of existing dropout NNs -extracting information that has been thrown away so far. This mitigates the problem of representing model uncertainty in deep learning without sacrificing either computational complexity or test accuracy.</p><p>In this paper we give a complete theoretical treatment of the link between Gaussian processes and dropout, and develop the tools necessary to represent uncertainty in deep learning. We perform an extensive exploratory assessment of the properties of the uncertainty obtained from dropout NNs and convnets on the tasks of regression and classification. We compare the uncertainty obtained from different model architectures and non-linearities in regression, and show that model uncertainty is indispensable for classification tasks, using MNIST as a concrete example. We then show a considerable improvement in predictive loglikelihood and RMSE compared to existing state-of-theart methods. Lastly we give a quantitative assessment of model uncertainty in the setting of reinforcement learning, on a practical task similar to that used in deep reinforcement learning <ref type="bibr" target="#b28">(Mnih et al., 2015)</ref>.<ref type="foot" target="#foot_0">1</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Related Research</head><p>It has long been known that infinitely wide (single hidden layer) NNs with distributions placed over their weights converge to Gaussian processes <ref type="bibr" target="#b29">(Neal, 1995;</ref><ref type="bibr" target="#b42">Williams, 1997)</ref>. This known relation is through a limit argument that does not allow us to translate properties from the Gaussian process to finite NNs easily. Finite NNs with distributions placed over the weights have been studied extensively as Bayesian neural networks <ref type="bibr" target="#b29">(Neal, 1995;</ref><ref type="bibr" target="#b26">MacKay, 1992)</ref>. These offer robustness to over-fitting as well, but with challenging inference and additional computational costs. Variational inference has been applied to these models, but with limited success <ref type="bibr" target="#b14">(Hinton &amp; Van Camp, 1993;</ref><ref type="bibr" target="#b2">Barber &amp; Bishop, 1998;</ref><ref type="bibr" target="#b11">Graves, 2011)</ref>. Recent advances in variational inference introduced new techniques into the field such as sampling-based variational inference and stochastic variational inference <ref type="bibr" target="#b5">(Blei et al., 2012;</ref><ref type="bibr" target="#b19">Kingma &amp; Welling, 2013;</ref><ref type="bibr" target="#b32">Rezende et al., 2014;</ref><ref type="bibr" target="#b38">Titsias &amp; Lázaro-Gredilla, 2014;</ref><ref type="bibr" target="#b15">Hoffman et al., 2013)</ref>. These have been used to obtain new approximations for Bayesian neural networks that perform as well as dropout <ref type="bibr" target="#b6">(Blundell et al., 2015)</ref>. However these models come with a prohibitive computational cost. To represent uncertainty, the number of parameters in these models is doubled for the same network size. Further, they require more time to converge and do not improve on existing techniques. Given that good uncertainty estimates can be cheaply obtained from common dropout models, this might result in unnecessary additional computation. An alternative approach to variational inference makes use of expectation propagation <ref type="bibr" target="#b12">(Hernández-Lobato &amp; Adams, 2015)</ref> and has improved considerably in RMSE and uncertainty estimation on VI approaches such as <ref type="bibr" target="#b11">(Graves, 2011)</ref>. In the results section we compare dropout to these approaches and show a significant improvement in both RMSE and uncertainty estimation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Dropout as a Bayesian Approximation</head><p>We show that a neural network with arbitrary depth and non-linearities, with dropout applied before every weight layer, is mathematically equivalent to an approximation to the probabilistic deep Gaussian process <ref type="bibr" target="#b9">(Damianou &amp; Lawrence, 2013)</ref> (marginalised over its covariance function parameters). We would like to stress that no simplifying assumptions are made on the use of dropout in the literature, and that the results derived are applicable to any network architecture that makes use of dropout exactly as it appears in practical applications. Furthermore, our results carry to other variants of dropout as well (such as drop-connect <ref type="bibr" target="#b40">(Wan et al., 2013)</ref>, multiplicative Gaussian noise <ref type="bibr">(Srivastava et al., 2014), etc.)</ref>. We show that the dropout objective, in effect, minimises the Kullback-Leibler divergence between an approximate distribution and the posterior of a deep Gaussian process (marginalised over its finite rank covariance function parameters). Due to space constraints we refer the reader to the appendix for an in depth review of dropout, Gaussian processes, and variational inference (section 2), as well as the main derivation for dropout and its variations (section 3). The results are summarised here and in the next section we obtain uncertainty estimates for dropout NNs.</p><p>Let y be the output of a NN model with L layers and a loss function E(•, •) such as the softmax loss or the Euclidean loss (square loss). We denote by W i the NN's weight matrices of dimensions K i × K i−1 , and by b i the bias vectors of dimensions K i for each layer i = 1, ..., L. We denote by y i the observed output corresponding to input x i for 1 ≤ i ≤ N data points, and the input and output sets as X, Y. During NN optimisation a regularisation term is often added. We often use L 2 regularisation weighted by some weight decay λ, resulting in a minimisation objective (often referred to as cost),</p><formula xml:id="formula_0">L dropout := 1 N N i=1 E(y i , y i ) + λ L i=1 ||W i || 2 2 + ||b i || 2 2 .</formula><p>(1) With dropout, we sample binary variables for every input point and for every network unit in each layer (apart from the last one). Each binary variable takes value 1 with probability p i for layer i. A unit is dropped (i.e. its value is set to zero) for a given input if its corresponding binary variable takes value 0. We use the same values in the backward pass propagating the derivatives to the parameters.</p><p>In comparison to the non-probabilistic NN, the deep Gaussian process is a powerful tool in statistics that allows us to model distributions over functions. Assume we are given a covariance function of the form</p><formula xml:id="formula_1">K(x, y) = p(w)p(b)σ(w T x + b)σ(w T y + b)dwdb</formula><p>with some element-wise non-linearity σ(•) and distributions p(w), p(b). In sections 3 and 4 in the appendix we show that a deep Gaussian process with L layers and covariance function K(x, y) can be approximated by placing a variational distribution over each component of a spectral decomposition of the GPs' covariance functions. This spectral decomposition maps each layer of the deep GP to a layer of explicitly represented hidden units, as will be briefly explained next.</p><p>Let W i be a (now random) matrix of dimensions K i × K i−1 for each layer i, and write ω = {W i } L i=1 . A priori, we let each row of W i distribute according to the p(w) above. In addition, assume vectors m i of dimensions K i for each GP layer. The predictive probability of the deep GP model (integrated w.r.t. the finite rank covariance function parameters ω) given some precision parameter τ &gt; 0 can be parametrised as</p><formula xml:id="formula_2">p(y|x, X, Y) = p(y|x, ω)p(ω|X, Y)dω (2) p(y|x, ω) = N y; y(x, ω), τ −1 I D y x, ω = {W 1 , ...,W L } = 1 K L W L σ ... 1 K 1 W 2 σ W 1 x + m 1 ...</formula><p>The posterior distribution p(ω|X, Y) in eq. ( <ref type="formula">2</ref>) is intractable. We use q(ω), a distribution over matrices whose columns are randomly set to zero, to approximate the intractable posterior. We define q(ω) as:</p><formula xml:id="formula_3">W i = M i • diag([z i,j ] Ki j=1 ) z i,j ∼ Bernoulli(p i ) for i = 1, ..., L, j = 1, ..., K i−1</formula><p>given some probabilities p i and matrices M i as variational parameters. The binary variable z i,j = 0 corresponds then to unit j in layer i − 1 being dropped out as an input to layer i. The variational distribution q(ω) is highly multimodal, inducing strong joint correlations over the rows of the matrices W i (which correspond to the frequencies in the sparse spectrum GP approximation).</p><p>We minimise the KL divergence between the approximate posterior q(ω) above and the posterior of the full deep GP, p(ω|X, Y). This KL is our minimisation objective</p><formula xml:id="formula_4">− q(ω) log p(Y|X, ω)dω + KL(q(ω)||p(ω)). (3)</formula><p>We rewrite the first term as a sum</p><formula xml:id="formula_5">− N n=1 q(ω) log p(y n |x n , ω)dω</formula><p>and approximate each term in the sum by Monte Carlo integration with a single sample ω n ∼ q(ω) to get an unbiased estimate − log p(y n |x n , ω n ). We further approximate the second term in eq. ( <ref type="formula">3</ref>) and obtain</p><formula xml:id="formula_6">L i=1 pil 2 2 ||M i || 2 2 + l 2</formula><p>2 ||m i ||<ref type="foot" target="#foot_1">2</ref> 2 with prior length-scale l (see section 4.2 in the appendix). Given model precision τ we scale the result by the constant 1/τ N to obtain the objective: <ref type="formula">1</ref>) for an appropriate setting of the precision hyper-parameter τ and length-scale l. The sampled ω n result in realisations from the Bernoulli distribution z n i,j equivalent to the binary variables in the dropout case 2 .</p><formula xml:id="formula_7">L GP-MC ∝ 1 N N n=1 − log p(y n |x n , ω n ) τ (4) + L i=1 p i l 2 2τ N ||M i || 2 2 + l 2 2τ N ||m i || 2 2 . Setting E(y n , y(x n , ω n )) = − log p(y n |x n , ω n )/τ we recover eq. (</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Obtaining Model Uncertainty</head><p>We next derive results extending on the above showing that model uncertainty can be obtained from dropout NN models.</p><p>Following section 2.3 in the appendix, our approximate predictive distribution is given by q(y * |x * ) = p(y * |x * , ω)q(ω)dω</p><p>(5)</p><p>where ω = {W i } L i=1 is our set of random variables for a model with L layers.</p><p>We will perform moment-matching and estimate the first two moments of the predictive distribution empirically. More specifically, we sample T sets of vectors of realisations from the Bernoulli distribution {z t 1 , ..., z t L } T t=1 with</p><formula xml:id="formula_8">z t i = [z t i,j ] Ki j=1 , giving {W t 1 , ..., W t L } T t=1 .</formula><p>We estimate</p><formula xml:id="formula_9">E q(y * |x * ) (y * ) ≈ 1 T T t=1 y * (x * , W t 1 , ..., W t L ) (6)</formula><p>following proposition C in the appendix. We refer to this Monte Carlo estimate as MC dropout. In practice this is equivalent to performing T stochastic forward passes through the network and averaging the results. We estimate the second raw moment in the same way:</p><formula xml:id="formula_10">E q(y * |x * ) (y * ) T (y * ) ≈ τ −1 I D + 1 T T t=1 y * (x * , W t 1 , ..., W t L ) T y * (x * , W t 1 , ..., W t L )</formula><p>following proposition D in the appendix. To obtain the model's predictive variance we have:</p><formula xml:id="formula_11">Var q(y * |x * ) y * ≈ τ −1 I D + 1 T T t=1 y * (x * , W t 1 , ..., W t L ) T y * (x * , W t 1 , ..., W t L ) − E q(y * |x * ) (y * ) T E q(y * |x * ) (y *</formula><p>) which equals the sample variance of T stochastic forward passes through the NN plus the inverse model precision. Note that y * is a row vector thus the sum is over the outerproducts. Given the weight-decay λ (and our prior lengthscale l) we can find the model precision from the identity</p><formula xml:id="formula_12">τ = pl 2 2N λ . (<label>7</label></formula><formula xml:id="formula_13">)</formula><p>We can estimate our predictive log-likelihood by Monte Carlo integration of eq. ( <ref type="formula">2</ref>). This is an estimate of how well the model fits the mean and uncertainty (see section 4.4 in the appendix). For regression this is given by:</p><formula xml:id="formula_14">log p(y * |x * , X, Y) ≈ logsumexp − 1 2 τ ||y − y t || 2 − log T − 1 2 log 2π − 1 2 log τ −1</formula><p>(8) with a log-sum-exp of T terms and y t stochastic forward passes through the network.</p><p>Our predictive distribution q(y * |x * ) is expected to be highly multi-modal, and the above approximations only give a glimpse into its properties. This is because the approximating variational distribution placed on each weight matrix column is bi-modal, and as a result the joint distribution over each layer's weights is multi-modal (section 3.2 in the appendix).</p><p>Note that the dropout NN model itself is not changed. To estimate the predictive mean and predictive uncertainty we simply collect the results of stochastic forward passes through the model. As a result, this information can be used with existing NN models trained with dropout. Furthermore, the forward passes can be done concurrently, resulting in constant running time identical to that of standard dropout.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Experiments</head><p>We next perform an extensive assessment of the properties of the uncertainty estimates obtained from dropout NNs and convnets on the tasks of regression and classification. We compare the uncertainty obtained from different model architectures and non-linearities, both on tasks of extrapolation, and show that model uncertainty is important for classification tasks using <ref type="bibr">MNIST (LeCun &amp; Cortes, 1998)</ref> as an example. We then show that using dropout's uncertainty we can obtain a considerable improvement in predictive log-likelihood and RMSE compared to existing stateof-the-art methods. We finish with an example use of the model's uncertainty in a Bayesian pipeline. We give a quantitative assessment of the model's performance in the setting of reinforcement learning on a task similar to that used in deep reinforcement learning <ref type="bibr" target="#b28">(Mnih et al., 2015)</ref>.</p><p>Using the results from the previous section, we begin by qualitatively evaluating the dropout NN uncertainty on two regression tasks. We use two regression datasets and model scalar functions which are easy to visualise. These are tasks one would often come across in real-world data analysis. We use a subset of the atmospheric CO 2 concentrations dataset derived from in situ air samples collected at Mauna Loa Observatory, Hawaii <ref type="bibr" target="#b18">(Keeling et al., 2004</ref>) (referred to as CO 2 ) to evaluate model extrapolation. In the appendix (section D.1) we give further results on a second dataset, the reconstructed solar irradiance dataset <ref type="bibr" target="#b22">(Lean, 2004)</ref>, to assess model interpolation. The datasets are fairly small, with each dataset consisting of about 200 data points. We centred and normalised both datasets. Different shades of blue represent half a standard deviation. Marked with a dashed red line is a point far away from the data: standard dropout confidently predicts an insensible value for the point; the other models predict insensible values as well but with the additional information that the models are uncertain about their predictions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.">Model Uncertainty in Regression Tasks</head><p>We trained several models on the CO 2 dataset. We use NNs with either 4 or 5 hidden layers and 1024 hidden units. We use either ReLU non-linearities or TanH non-linearities in each network, and use dropout probabilities of either 0.1 or 0.2. Exact experiment set-up is given in section E.1 in the appendix.</p><p>Extrapolation results are shown in figure <ref type="figure" target="#fig_1">2</ref>. The model is trained on the training data (left of the dashed blue line), and tested on the entire dataset. Fig. <ref type="figure" target="#fig_1">2a</ref> shows the results for standard dropout (i.e. with weight averaging and without assessing model uncertainty) for the 5 layer ReLU model. Fig. <ref type="figure" target="#fig_1">2b</ref> shows the results obtained from a Gaussian process with a squared exponential covariance function for comparison. Fig. <ref type="figure" target="#fig_1">2c</ref> shows the results of the same network as in fig. <ref type="figure" target="#fig_1">2a</ref>, but with MC dropout used to evaluate the predictive mean and uncertainty for the training and test sets. Lastly, fig. <ref type="figure" target="#fig_1">2d</ref> shows the same using the TanH network with 5 layers (plotted with 8 times the standard deviation for visualisation purposes). The shades of blue represent model uncertainty: each colour gradient represents half a standard deviation (in total, predictive mean plus/minus 2 standard deviations are shown, representing 95% confidence). Not plotted are the models with 4 layers as these converge to the same results.</p><p>Extrapolating the observed data, none of the models can capture the periodicity (although with a suitable covariance function the GP will capture it well). The standard dropout NN model (fig. <ref type="figure" target="#fig_1">2a</ref>) predicts value 0 for point x * (marked with a dashed red line) with high confidence, even though it is clearly not a sensible prediction. The GP model represents this by increasing its predictive uncertainty -in effect declaring that the predictive value might be 0 but the model is uncertain. This behaviour is captured in MC dropout as well. Even though the models in figures 2 have an incorrect predictive mean, the increased standard deviation expresses the models' uncertainty about the point.</p><p>Note that the uncertainty is increasing far from the data for the ReLU model, whereas for the TanH model it stays bounded. This is not surprising, as dropout's uncertainty draws its properties from the GP in which different covariance functions correspond to different uncertainty estimates. ReLU and TanH approximate different GP covariance functions (section 3.1 in the appendix) and TanH saturates whereas ReLU does not. For the TanH model we assessed the uncertainty using both dropout probability 0.1 and dropout probability 0.2. Models initialised with dropout probability 0.1 initially exhibit smaller uncertainty than the ones initialised with dropout probability 0.2, but towards the end of the optimisation when the model has converged the uncertainty is almost indistinguishable. It seems that the moments of the dropout models converge to the moments of the approximated GP model -its mean and uncertainty. It is worth mentioning that we attempted to fit the data with models with a smaller number of layers unsuccessfully.</p><p>The number of forward iterations used to estimate the uncertainty (T ) was 1000 for drawing purposes. A much smaller numbers can be used to get a reasonable estimation to the predictive mean and uncertainty (see fig. <ref type="figure" target="#fig_2">3</ref> for example with T = 10).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.">Model Uncertainty in Classification Tasks</head><p>To assess model classification confidence in a realistic example we test a convolutional neural network trained on the full MNIST dataset <ref type="bibr" target="#b23">(LeCun &amp; Cortes, 1998)</ref>. We trained the LeNet convolutional neural network model <ref type="bibr">(Le-Cun et al., 1998)</ref> with dropout applied before the last fully connected inner-product layer (the usual way dropout is used in convnets). We used dropout probability of 0.5. We trained the model for 10 6 iterations with the same learning rate policy as before with γ = 0.0001 and p = 0.75. We used Caffe <ref type="bibr" target="#b16">(Jia et al., 2014)</ref> reference implementation for this experiment.</p><p>We evaluated the trained model on a continuously rotated image of the digit 1 (shown on the X axis of fig. <ref type="figure">4</ref>). We scatter 100 stochastic forward passes of the softmax input (the output from the last fully connected layer, fig. <ref type="figure">4a</ref>), as well as of the softmax output for each of the top classes (fig. <ref type="figure">4b</ref>). For the 12 images, the model predicts classes [1 1 1 1 1 5 5 7 7 7 7 7].</p><p>The plots show the softmax input value and softmax output value for the 3 digits with the largest values for each corresponding input. When the softmax input for a class is larger than that of all other classes (class 1 for the first 5 images, class 5 for the next 2 images, and class 7 for the rest in fig <ref type="figure">4a</ref>), the model predicts the corresponding class. Looking at the softmax input values, if the uncertainty envelope of a class is far from that of other classes' (for example the left most image) then the input is classified with high confidence. On the other hand, if the uncertainty envelope intersects that of other classes (such as in the case of the middle input image), then even though the softmax output can be arbitrarily high (as far as 1 if the mean is far from the means of the other classes), the softmax output uncertainty can be as large as the entire space. This signifies the model's uncertainty in its softmax output value -i.e. in the prediction. In this scenario it would not be reasonable to use probit to return class 5 for the middle image when its uncertainty is so high. One would expect the model to ask an external annotator for a label for this input. Model uncertainty in such cases can be quantified by looking at the entropy or variation ratios of the model prediction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.">Predictive Performance</head><p>Predictive log-likelihood captures how well a model fits the data, with larger values indicating better model fit. Uncertainty quality can be determined from this quantity as well (see section 4.4 in the appendix). We replicate the experiment set-up in Hernández-Lobato &amp; Adams (2015) and compare the RMSE and predictive log-likelihood of dropout (referred to as "Dropout" in the experiments) to that of Probabilistic Back-propagation (referred to as "PBP", (Hernández-Lobato &amp; Adams, 2015)) and to a popular variational inference technique in Bayesian NNs (referred to as "VI", <ref type="bibr" target="#b11">(Graves, 2011)</ref>). The aim of this experiment is to compare the uncertainty quality obtained from a naive application of dropout in NNs to that of specialised methods developed to capture uncertainty.</p><p>Following our Bayesian interpretation of dropout (eq. ( <ref type="formula">4</ref>)) we need to define a prior length-scale, and find an optimal model precision parameter τ which will allow us to evaluate the predictive log-likelihood (eq. ( <ref type="formula">8</ref>)). Similarly to (Hernández-Lobato &amp; Adams, 2015) we use Bayesian optimisation (BO, <ref type="bibr" target="#b34">(Snoek et al., 2012;</ref><ref type="bibr" target="#b33">Snoek &amp; authors, 2015)</ref>) over validation log-likelihood to find optimal τ , and set the prior length-scale to 10 −2 for most datasets based on the range of the data. Note that this is a standard dropout NN, where the prior length-scale l and model precision τ are simply used to define the model's weight decay through eq. ( <ref type="formula" target="#formula_12">7</ref>). We used dropout with probabilities 0.05 and 0.005 since the network size is very small (with 50 units following (Hernández-Lobato &amp; Adams, 2015)) and the datasets are fairly small as well. The BO runs used 40 iterations following the original setup, but after finding the optimal parameter values we used 10x more iterations, as dropout takes longer to converge. Even though the model doesn't converge within 40 iterations, it gives BO a good indication of whether a parameter is good or not. Finally, we used mini-batches of size 32 and the Adam optimiser <ref type="bibr" target="#b20">(Kingma &amp; Ba, 2014)</ref>. Further details about the various datasets are given in <ref type="bibr" target="#b12">(Hernández-Lobato &amp; Adams, 2015)</ref>.</p><p>The results are shown in table <ref type="table" target="#tab_1">1</ref>. Dropout significantly outperforms all other models both in terms of RMSE as well as test log-likelihood on all datasets apart from Yacht, for which PBP obtains better RMSE. All experiments were averaged on 20 random splits of the data (apart from Protein for which only 5 splits were used and Year for which one split was used). Some of the dropout results have a rather large standard deviation because of single outliers: the median for most datasets gives much better performance than the mean. For example, on the Boston Housing dataset dropout achieves median RMSE of 2.68 with an IQR interval of <ref type="bibr">[2.45, 3.35</ref>] and predictive log-likelihood median of -2.34 with IQR <ref type="bibr">[-2.54, -2.29</ref>]. In the Concrete Strength dataset dropout achieves median RMSE of 5.15.</p><p>To implement the model we used Keras <ref type="bibr" target="#b8">(Chollet, 2015)</ref>, an open source deep learning package based on Theano <ref type="bibr" target="#b4">(Bergstra et al., 2010)</ref> Dropout's RMSE in table 1 is given by averaging stochastic forward passes through the network following eq. ( <ref type="formula">6</ref>) (MC dropout). We observed an improvement using this estimate compared to the standard dropout weight averaging, and also compared to much smaller dropout probabilities (near zero). For the Boston Housing dataset for example, repeating the same experiment with dropout probability 0 results in RMSE of 3.07 and predictive log-likelihood of -2.59. This demonstrates that dropout significantly affects the predictive log-likelihood and RMSE, even though the dropout probability is fairly small.</p><p>We used dropout following the same way the method would be used in current research -without adapting model structure. This is to demonstrate the results that could be obtained from existing models when evaluated with MC dropout. Experimenting with different network architectures we expect the method to give even better uncertainty estimates.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4.">Model Uncertainty in Reinforcement Learning</head><p>In reinforcement learning an agent receives various rewards from different states, and its aim is to maximise its expected reward over time. The agent tries to learn to avoid transitioning into states with low rewards, and to pick actions that lead to better states instead. Uncertainty is of great importance in this task -with uncertainty information an agent can decide when to exploit rewards it knows of, and when to explore its environment.</p><p>Recent advances in RL have made use of NNs to estimate agents' Q-value functions (referred to as Q-networks), a function that estimates the quality of different actions an agent can take at different states. This has led to impressive results on Atari game simulations, where agents superseded human performance on a variety of games <ref type="bibr" target="#b28">(Mnih et al., 2015)</ref>. Epsilon greedy search was used in this setting, where the agent selects the best action following its current Q-function estimation with some probability, and explores otherwise. With our uncertainty estimates given by a dropout Q-network we can use techniques such as Thompson sampling <ref type="bibr" target="#b37">(Thompson, 1933)</ref> to converge faster than epsilon greedy while avoiding over-fitting.</p><p>We use code by <ref type="bibr">(Karpathy &amp; authors, 2014</ref><ref type="bibr">(Karpathy &amp; authors, -2015) )</ref> that replicated the results by <ref type="bibr" target="#b28">(Mnih et al., 2015)</ref> with a simpler 2D setting. We simulate an agent in a 2D world with 9 eyes pointing in different angles ahead (depicted in fig. <ref type="figure" target="#fig_3">5</ref>). Each eye can sense a single pixel intensity of 3 colours. The agent navigates by using one of 5 actions controlling two motors at its base. An action turns the motors at different angles and different speeds. The environment consists of red circles which give the agent a positive reward for reaching, and green circles which result in a negative reward. The agent is further rewarded for not looking at (white) walls, and for walking in a straight line.</p><p>We trained the original model, and an additional model with dropout with probability 0.1 applied before the every weight layer. Note that both agents use the same network structure in this experiment for comparison purposes. In a real world scenario using dropout we would use a larger model (as the original model was intentially selected to be small to avoid over-fitting). To make use of the dropout Qnetwork's uncertainty estimates, we use Thompson sampling instead of epsilon greedy. In effect this means that we perform a single stochastic forward pass through the network every time we need to take an action. In replay, we perform a single stochastic forward pass and then backpropagate with the sampled Bernoulli random variables. Exact experiment set-up is given in section E.2 in the appendix.</p><p>In fig. <ref type="figure" target="#fig_4">6</ref> we show a log plot of the average reward obtained by both the original implementation (in green) and our approach (in blue), as a function of the number of batches. Not plotted is the burn-in intervals of 25 batches (random moves). Thompson sampling gets reward larger than 1 within 25 batches from burn-in. Epsilon greedy takes 175 batches to achieve the same performance. It is interesting to note that our approach seems to stop improving after 1K batches. This is because we are still sampling random moves, whereas epsilon greedy only exploits at this stage.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Conclusions and Future Research</head><p>We have built a probabilistic interpretation of dropout which allowed us to obtain model uncertainty out of existing deep learning models. We have studied the properties of this uncertainty in detail, and demonstrated possible applications, interleaving Bayesian models and deep learning models together. This extends on initial research studying dropout from the Bayesian perspective <ref type="bibr" target="#b41">(Wang &amp; Manning, 2013;</ref><ref type="bibr" target="#b27">Maeda, 2014)</ref>.</p><p>Bernoulli dropout is only one example of a regularisation technique corresponding to an approximate variational distribution which results in uncertainty estimates. Other variants of dropout follow our interpretation as well and correspond to alternative approximating distributions. These would result in different uncertainty estimates, trading-off uncertainty quality with computational complexity. We explore these in follow-up work.</p><p>Furthermore, each GP covariance function has a one-toone correspondence with the combination of both NN nonlinearities and weight regularisation. This suggests techniques to select appropriate NN structure and regularisation based on our a priori assumptions about the data. For example, if one expects the function to be smooth and the uncertainty to increase far from the data, cosine nonlinearities and L 2 regularisation might be appropriate. The study of non-linearity-regularisation combinations and the corresponding predictive mean and variance are subject of current research.  </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>(a) Arbitrary function f (x) as a function of data x (softmax input) (b) σ(f (x)) as a function of data x (softmax output) Figure 1. A sketch of softmax input and output for an idealised binary classification problem. Training data is given between the dashed grey lines. Function point estimate is shown with a solid line. Function uncertainty is shown with a shaded area. Marked with a dashed red line is a point x * far from the training data. Ignoring function uncertainty, point x * is classified as class 1 with probability 1.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 .</head><label>2</label><figDesc>Figure2. Predictive mean and uncertainties on the Mauna Loa CO2 concentrations dataset, for various models. In red is the observed function (left of the dashed blue line); in blue is the predictive mean plus/minus two standard deviations (8 for fig.2d). Different shades of blue represent half a standard deviation. Marked with a dashed red line is a point far away from the data: standard dropout confidently predicts an insensible value for the point; the other models predict insensible values as well but with the additional information that the models are uncertain about their predictions.</figDesc><graphic url="image-5.png" coords="5,55.44,151.14,243.00,68.14" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. Predictive mean and uncertainties on the Mauna Loa CO2 concentrations dataset for the MC dropout model with ReLU non-linearities, approximated with 10 samples.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 .</head><label>5</label><figDesc>Figure 5. Depiction of the reinforcement learning problem used in the experiments. The agent is in the lower left part of the maze, facing north-west.</figDesc><graphic url="image-13.png" coords="8,306.01,483.66,242.99,202.49" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 .</head><label>6</label><figDesc>Figure6. Log plot of average reward obtained by both epsilon greedy (in green) and our approach (in blue), as a function of the number of batches.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 .</head><label>1</label><figDesc>Average test performance in RMSE and predictive log likelihood for a popular variational inference method (VI, Graves (2011)), Probabilistic back-propagation (PBP, Hernández-Lobato &amp; Adams (2015)), and dropout uncertainty (Dropout).</figDesc><table><row><cell></cell><cell cols="3">Avg. Test RMSE and Std. Errors</cell><cell cols="3">Avg. Test LL and Std. Errors</cell></row><row><cell>Dataset</cell><cell>VI</cell><cell>PBP</cell><cell>Dropout</cell><cell>VI</cell><cell>PBP</cell><cell>Dropout</cell></row><row><cell>Boston Housing</cell><cell cols="6">4.32 ±0.29 3.01 ±0.18 2.97 ±0.85 -2.90 ±0.07 -2.57 ±0.09 -2.46 ±0.25</cell></row><row><cell>Concrete Strength</cell><cell cols="6">7.19 ±0.12 5.67 ±0.09 5.23 ±0.53 -3.39 ±0.02 -3.16 ±0.02 -3.04 ±0.09</cell></row><row><cell>Energy Efficiency</cell><cell cols="6">2.65 ±0.08 1.80 ±0.05 1.66 ±0.19 -2.39 ±0.03 -2.04 ±0.02 -1.99 ±0.09</cell></row><row><cell>Kin8nm</cell><cell cols="3">0.10 ±0.00 0.10 ±0.00 0.10 ±0.00</cell><cell cols="3">0.90 ±0.01 0.90 ±0.01 0.95 ±0.03</cell></row><row><cell>Naval Propulsion</cell><cell cols="3">0.01 ±0.00 0.01 ±0.00 0.01 ±0.00</cell><cell cols="3">3.73 ±0.12 3.73 ±0.01 3.80 ±0.05</cell></row><row><cell>Power Plant</cell><cell cols="6">4.33 ±0.04 4.12 ±0.03 4.02 ±0.18 -2.89 ±0.01 -2.84 ±0.01 -2.80 ±0.05</cell></row><row><cell>Protein Structure</cell><cell cols="6">4.84 ±0.03 4.73 ±0.01 4.36 ±0.04 -2.99 ±0.01 -2.97 ±0.00 -2.89 ±0.01</cell></row><row><cell>Wine Quality Red</cell><cell cols="6">0.65 ±0.01 0.64 ±0.01 0.62 ±0.04 -0.98 ±0.01 -0.97 ±0.01 -0.93 ±0.06</cell></row><row><cell cols="7">Yacht Hydrodynamics 6.89 ±0.67 1.02 ±0.05 1.11 ±0.38 -3.43 ±0.16 -1.63 ±0.02 -1.55 ±0.12</cell></row><row><cell>Year Prediction MSD</cell><cell cols="6">9.034 ±NA 8.879 ±NA 8.849 ±NA -3.622 ±NA -3.603 ±NA -3.588 ±NA</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0">Code and demos are available at http://yarin.co.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1">In the appendix (section 4.1) we extend this derivation to classification. E(•) is defined as softmax loss and τ is set to 1.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>The authors would like to thank Dr Yutian Chen, Mr Christof Angermueller, Mr Roger Frigola, Mr Rowan McAllister, Dr Gabriel Synnaeve, Mr Mark van der Wilk, Mr Yan Wu, and many other reviewers for their helpful comments. Yarin Gal is supported by the Google European Fellowship in Machine Learning.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Neural networks applied to discriminate botanical origin of honeys</title>
		<author>
			<persName><forename type="first">O</forename><surname>Anjos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Iglesias</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Peres</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Martínez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Á</forename><surname>García</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Taboada</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Food chemistry</title>
		<imprint>
			<biblScope unit="volume">175</biblScope>
			<biblScope unit="page" from="128" to="136" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Searching for exotic particles in high-energy physics with deep learning</title>
		<author>
			<persName><forename type="first">P</forename><surname>Baldi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Sadowski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Whiteson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature communications</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Ensemble learning in Bayesian neural networks</title>
		<author>
			<persName><forename type="first">D</forename><surname>Barber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Bishop</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">NATO ASI SERIES F COMPUTER AND SYSTEMS SCIENCES</title>
		<imprint>
			<biblScope unit="volume">168</biblScope>
			<biblScope unit="page" from="215" to="238" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">On the use of artificial neural networks in simulation-based manufacturing control</title>
		<author>
			<persName><forename type="first">S</forename><surname>Bergmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Stelzer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Strassburger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Simulation</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="76" to="90" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Theano: a CPU and GPU math expression compiler</title>
		<author>
			<persName><forename type="first">James</forename><surname>Bergstra</surname></persName>
		</author>
		<author>
			<persName><surname>Breuleux</surname></persName>
		</author>
		<author>
			<persName><surname>Olivier</surname></persName>
		</author>
		<author>
			<persName><surname>Bastien</surname></persName>
		</author>
		<author>
			<persName><surname>Frédéric</surname></persName>
		</author>
		<author>
			<persName><surname>Lamblin</surname></persName>
		</author>
		<author>
			<persName><surname>Pascal</surname></persName>
		</author>
		<author>
			<persName><surname>Pascanu</surname></persName>
		</author>
		<author>
			<persName><surname>Razvan</surname></persName>
		</author>
		<author>
			<persName><surname>Desjardins</surname></persName>
		</author>
		<author>
			<persName><surname>Guillaume</surname></persName>
		</author>
		<author>
			<persName><surname>Turian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Warde-Farley</forename><surname>Joseph</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yoshua</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Python for Scientific Computing Conference (SciPy)</title>
				<meeting>the Python for Scientific Computing Conference (SciPy)</meeting>
		<imprint>
			<date type="published" when="2010-06">June 2010</date>
		</imprint>
	</monogr>
	<note>Oral Presentation</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Variational Bayesian inference with stochastic search</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">M</forename><surname>Blei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">I</forename><surname>Jordan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">W</forename><surname>Paisley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICML</title>
				<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName><forename type="first">C</forename><surname>Blundell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Cornebise</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Kavukcuoglu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wierstra</surname></persName>
		</author>
		<title level="m">Weight uncertainty in neural networks. ICML</title>
				<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Compressing neural networks with the hashing trick</title>
		<author>
			<persName><forename type="first">W</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">T</forename><surname>Wilson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Tyree</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Weinberger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chen</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename></persName>
		</author>
		<idno>ICML-15</idno>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Franc</forename><forename type="middle">¸ois</forename><surname>Chollet</surname></persName>
		</author>
		<author>
			<persName><surname>Keras</surname></persName>
		</author>
		<ptr target="https://github.com/fchollet/keras" />
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Deep Gaussian processes</title>
		<author>
			<persName><forename type="first">A</forename><surname>Damianou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Lawrence</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AISTATS</title>
				<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Probabilistic machine learning and artificial intelligence</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Ghahramani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">521</biblScope>
			<biblScope unit="issue">7553</biblScope>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Practical variational inference for neural networks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Graves</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIPS</title>
				<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Probabilistic backpropagation for scalable learning of bayesian neural networks</title>
		<author>
			<persName><forename type="first">J</forename><surname>Hernández-Lobato</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Adams</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICML-15</title>
				<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Experimental biology: Sometimes Bayesian statistics are better</title>
		<author>
			<persName><forename type="first">S</forename><surname>Herzog</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Ostwald</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="page">494</biblScope>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Keeping the neural networks simple by minimizing the description length of the weights</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Van Camp</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the sixth annual conference on Computational learning theory</title>
				<meeting>the sixth annual conference on Computational learning theory</meeting>
		<imprint>
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Stochastic variational inference</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D</forename><surname>Hoffman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">M</forename><surname>Blei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Paisley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1303" to="1347" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<author>
			<persName><forename type="first">Y</forename><surname>Jia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Shelhamer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Donahue</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Karayev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Long</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Girshick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Guadarrama</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Darrell</surname></persName>
		</author>
		<author>
			<persName><surname>Caffe</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1408.5093</idno>
		<title level="m">Convolutional architecture for fast feature embedding</title>
				<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">A</forename><surname>Karpathy</surname></persName>
		</author>
		<author>
			<persName><surname>Javascript</surname></persName>
		</author>
		<ptr target="https://github.com/karpathy/convnetjs" />
		<imprint>
			<biblScope unit="page" from="2014" to="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Atmospheric CO2 concentrations (ppmv) derived from in situ air samples collected at Mauna Loa Observatory</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">D</forename><surname>Keeling</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">P</forename><surname>Whorf</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
			<pubPlace>Hawaii</pubPlace>
		</imprint>
	</monogr>
	<note>and the Carbon Dioxide Research Group</note>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">D</forename><surname>Kingma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Welling</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1312.6114</idno>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
	<note type="report_type">Auto-encoding variational Bayes. arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<author>
			<persName><forename type="first">Diederik</forename><surname>Kingma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jimmy</forename><surname>Ba</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1412.6980</idno>
		<title level="m">Adam: A method for stochastic optimization</title>
				<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Points of significance: Importance of being uncertain</title>
		<author>
			<persName><forename type="first">M</forename><surname>Krzywinski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Altman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature methods</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">9</biblScope>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Solar irradiance reconstruction. NOAA/NGDC Paleoclimatology Program</title>
		<author>
			<persName><forename type="first">J</forename><surname>Lean</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
			<pubPlace>USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">The mnist database of handwritten digits</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Lecun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Cortes</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Gradientbased learning applied to document recognition. Proceedings of the IEEE</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Lecun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Bottou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Haffner</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998">1998</date>
			<biblScope unit="volume">86</biblScope>
			<biblScope unit="page" from="2278" to="2324" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Neural network based intrusion detection system for critical infrastructures</title>
		<author>
			<persName><forename type="first">O</forename><surname>Linda</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Vollmer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Manic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IJCNN 2009. International Joint Conference on</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2009">2009. 2009</date>
		</imprint>
	</monogr>
	<note>Neural Networks</note>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">A practical Bayesian framework for backpropagation networks</title>
		<author>
			<persName><forename type="first">D</forename><surname>Mackay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Neural computation</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">S</forename><surname>Maeda</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1412.7003</idno>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
	<note type="report_type">A Bayesian encourages dropout. arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Human-level control through deep reinforcement learning</title>
		<author>
			<persName><forename type="first">V</forename><surname>Mnih</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Kavukcuoglu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Silver</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>Rusu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Veness</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">518</biblScope>
			<biblScope unit="issue">7540</biblScope>
			<biblScope unit="page" from="529" to="533" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Bayesian learning for neural networks</title>
		<author>
			<persName><forename type="first">R</forename><surname>Neal</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995">1995</date>
		</imprint>
		<respStmt>
			<orgName>University of Toronto</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Statistical errors</title>
		<author>
			<persName><forename type="first">Regina</forename><surname>Nuzzo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">506</biblScope>
			<biblScope unit="issue">13</biblScope>
			<biblScope unit="page" from="150" to="152" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Gaussian Processes for Machine Learning (Adaptive Computation and Machine Learning)</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">E</forename><surname>Rasmussen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2006">2006</date>
			<publisher>The MIT Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Stochastic backpropagation and approximate inference in deep generative models</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Rezende</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mohamed</forename></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Wierstra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICML</title>
				<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Jasper</forename><surname>Snoek</surname></persName>
		</author>
		<author>
			<persName><surname>Spearmint</surname></persName>
		</author>
		<ptr target="https://github.com/JasperSnoek/spearmint" />
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Practical Bayesian optimization of machine learning algorithms</title>
		<author>
			<persName><forename type="first">Jasper</forename><surname>Snoek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Larochelle</forename><surname>Hugo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ryan</forename><forename type="middle">P</forename><surname>Adams</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in neural information processing systems</title>
				<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="2951" to="2959" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Dropout: A simple way to prevent neural networks from overfitting</title>
		<author>
			<persName><forename type="first">N</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Hinton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Krizhevsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Salakhutdinov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Algorithms for reinforcement learning</title>
		<author>
			<persName><forename type="first">C</forename><surname>Szepesvári</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Synthesis Lectures on Artificial Intelligence and Machine Learning</title>
				<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="volume">4</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">On the likelihood that one unknown probability exceeds another in view of the evidence of two samples</title>
		<author>
			<persName><forename type="first">W</forename><surname>Thompson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Biometrika</title>
		<imprint>
			<date type="published" when="1933">1933</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Doubly stochastic variational Bayes for non-conjugate inference</title>
		<author>
			<persName><forename type="first">M</forename><surname>Titsias</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lázaro-Gredilla</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICML</title>
				<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">D</forename><surname>Trafimow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Marks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Editorial. Basic and Applied Social Psychology</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Regularization of neural networks using dropconnect</title>
		<author>
			<persName><forename type="first">L</forename><surname>Wan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Zeiler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Lecun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Fergus</forename></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICML-13</title>
				<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<author>
			<persName><forename type="first">S</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Manning</surname></persName>
		</author>
		<title level="m">Fast dropout training. ICML</title>
				<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">Computing with infinite networks</title>
		<author>
			<persName><forename type="first">C</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
