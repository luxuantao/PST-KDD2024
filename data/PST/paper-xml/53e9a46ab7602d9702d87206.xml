<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Mitigating Congestion in Wireless Sensor Networks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Bret</forename><surname>Hull</surname></persName>
							<email>bwhull@csail.mit.edu</email>
							<affiliation key="aff0">
								<orgName type="department">MIT Computer Science</orgName>
								<orgName type="laboratory">Artificial Intelligence Laboratory The Stata Center</orgName>
								<address>
									<addrLine>32 Vassar St</addrLine>
									<postCode>02139</postCode>
									<settlement>Cambridge</settlement>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Kyle</forename><surname>Jamieson</surname></persName>
							<email>jamieson@csail.mit.edu</email>
							<affiliation key="aff0">
								<orgName type="department">MIT Computer Science</orgName>
								<orgName type="laboratory">Artificial Intelligence Laboratory The Stata Center</orgName>
								<address>
									<addrLine>32 Vassar St</addrLine>
									<postCode>02139</postCode>
									<settlement>Cambridge</settlement>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Hari</forename><surname>Balakrishnan</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">MIT Computer Science</orgName>
								<orgName type="laboratory">Artificial Intelligence Laboratory The Stata Center</orgName>
								<address>
									<addrLine>32 Vassar St</addrLine>
									<postCode>02139</postCode>
									<settlement>Cambridge</settlement>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Mitigating Congestion in Wireless Sensor Networks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">AECADE75B627481043A962B966C4866F</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T07:26+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>C.2.2 [Computer-Communication Networks]: Network Protocols Measurement</term>
					<term>performance</term>
					<term>design</term>
					<term>experimentation Wireless sensor networks</term>
					<term>congestion control</term>
					<term>flow control</term>
					<term>rate limiting</term>
					<term>network performance</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Network congestion occurs when offered traffic load exceeds available capacity at any point in a network. In wireless sensor networks, congestion causes overall channel quality to degrade and loss rates to rise, leads to buffer drops and increased delays (as in wired networks), and tends to be grossly unfair toward nodes whose data has to traverse a larger number of radio hops.</p><p>Congestion control in wired networks is usually done using end-to-end and network-layer mechanisms acting in concert. However, this approach does not solve the problem in wireless networks because concurrent radio transmissions on different "links" interact with and affect each other, and because radio channel quality shows high variability over multiple time-scales. We examine three techniques that span different layers of the traditional protocol stack: hop-by-hop flow control, rate limiting source traffic when transit traffic is present, and a prioritized medium access control (MAC) protocol. We implement these techniques and present experimental results from a 55-node in-building wireless sensor network. We demonstrate that the combination of these techniques, Fusion, can improve network efficiency by a factor of three under realistic workloads.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Provisioning a wireless sensor network so that congestion is a rare event is extremely difficult. Sensor networks deliver myriad types of traffic, from simple periodic reports to unpredictable bursts of messages triggered by external events that are being sensed. Even under a known, periodic traffic pattern and a simple network topology, congestion occurs in wireless sensor networks because radio channels vary in time (often dramatically) and concurrent data transmissions over different radio "links" interact with each other, causing channel quality to depend not just on noise but also on traffic densities. Moreover, the addition or removal of sensors, or a change in the report rate can cause previously uncongested parts of the network to become under-provisioned and congested. Last but not least, when sensed events cause bursts of messages, congestion becomes even more likely.</p><p>In traditional wired networks and cellular wireless networks, buffer drops and increased delays are the symptoms of congestion. Over the past many years, researchers have developed a combination of end-to-end rate (window) adaptation and network-layer dropping or signaling techniques to ensure that such networks can operate without collapsing from congestion. In addition to buffer overflows, a key symptom of congestion in wireless sensor networks is a degradation in the quality of the radio channel caused by an increase in the amount of traffic being sent in other parts of the network. Because radio "links" are not shielded from each other in the same way that wires or provisioned cellular wireless links are, traffic traversing any given part of the network has a deleterious impact on channel quality and loss rates in other parts of the network. Poor and time-varying channel quality, asymmetric communication channels, and hidden terminals all make even well-regulated traffic hard to deliver. In addition, under traffic load, multi-hop wireless sensor networks tend to severely penalize packets that traverse a larger number of radio hops, leading to large degrees of unfairness.</p><p>This paper studies three congestion control techniques that operate at different layers of the traditional protocol stack, and shows that the adverse effects of network congestion can be greatly alleviated when they operate in concert. The first technique is hop-by-hop flow control, in which nodes signal local congestion to each other via backpressure, reducing packet loss rates and preventing the wasteful transmissions of packets that are only destined to be dropped at the downstream node. The second technique is a source rate limiting scheme to alleviate the serious unfairness toward sources that have to traverse a larger number of wire- Bits/J Offered load (pps)</p><p>Figure <ref type="figure">1</ref>: Congestion collapse in a testbed deployment with no congestion control strategy. Channel and buffer loss rate as a function of per-node offered load (left). Percentage of each node's offered load that is received at the sink (complementary CDF, center). Network-wide bits successfully transmitted per unit energy (right).</p><p>less hops. The third technique is a prioritized MAC layer that gives a backlogged node priority over non-backlogged nodes for access to the shared medium, thus avoiding buffer drops. We combine these techniques into a strategy called Fusion. In isolation, each technique helps somewhat, but when acting in concert, Fusion dramatically improves network efficiency, fairness, and channel loss rates. These experimental findings, together with the design details of the aforementioned mechanisms, are the primary contributions of this paper.</p><p>In developing the techniques, we borrow heavily from previous work. For example, our hop-by-hop flow control scheme was inspired by work done on wired networks and by recent work <ref type="bibr" target="#b21">[22]</ref> that applies the idea to wireless sensor networks. Our source rate limiting scheme bears some similarity to, and was inspired by, previous work as well <ref type="bibr" target="#b23">[24]</ref>. However, the details of our schemes and their synergistic operation, as well as a detailed experimental evaluation of these approaches both individually and in concert, are important novel contributions of our work. We evaluate each scheme in a 55-node indoor wireless sensor network testbed. In our testbed, Fusion improves efficiency by a factor of three and fairness by a factor of more than two.</p><p>In the next section, we present the results of experiments that highlight the congestion problem in wireless sensor networks and describes various performance metrics that we use to evaluate different congestion control methods. We have developed a network stack in TinyOS that implements several variants of the three congestion control techniques mentioned above; Section 3 discusses how they operate together to control congestion. In Section 4, we study each congestion control mechanism in isolation and in concert, over different traffic patterns. Section 5 presents a detailed comparison with related work, and Section 6 summarizes our main results and describes future directions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">THE CONGESTION PROBLEM</head><p>This section diagnoses the two key symptoms of congestion collapse in wireless sensor networks. The following results are derived from an indoor, Mica2 wireless sensor network testbed, which we describe in detail in Section 4. Every node generates data at a constant rate, which other sensors forward over a multihop network to a single sink. As the offered load increases, loss rates quickly increase. Figure <ref type="figure">1</ref> (left) shows network-wide loss rates for various offered loads. We separate losses due to wireless channel errors from losses caused by a lack of buffer space at a sensor node. We see that channel losses dominate buffer drops and increase quickly with offered load. This dramatic increase in loss rates is one of the two symptoms of congestion collapse.</p><p>The second symptom of congestion collapse is starvation of most of the network due to traffic from nodes one hop away from the sink. Figure <ref type="figure">1</ref> (center ) illustrates this phenomenon. Given a percentage of packets p received from a given node at the sink, the complementary CDF plots the fraction of sensors that deliver at least p percent of their data to the sink. We see that as the offered load increases, a decreasing number of nodes get a disproportionately large portion of bandwidth.</p><p>Congestion collapse has dire consequences for energy efficiency in sensor networks, as Figure <ref type="figure">1</ref> (right) shows. When offered load increases past the point of congestion, fewer bits can be sent with the same amount of energy. The network wastes energy transmitting bits from the edge towards the sink, only to be dropped. We call this phenomenon livelock.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Metrics</head><p>Based on these quantitative observations, we propose a number of measures to evaluate the performance of sensor networks under congestion: network efficiency η, node imbalance ζ, aggregate sink received throughput, network fairness φ, and median packet latency.</p><p>We define efficiency as the number of hops "useful" packets travel, divided by the total number of packet transmissions in the network (Equation 1 in Table <ref type="table">1</ref>). A useful packet is any packet that eventually reaches a sink. Efficiency is important to measure because network bandwidth is limited, and energy is often a scarce resource in sensor networks. Motivated by the above energy result (Figure <ref type="figure">1</ref>, right), this definition extends previous notions of link efficiency <ref type="bibr">[29, §5.3</ref>] to a multi-hop sensor network setting. The denominator of the metric (total number of transmissions) includes all retransmissions, as well as transmissions associated with packets that are eventually dropped or corrupted.</p><p>Our efficiency metric penalizes failed transmissions, buffer drops, retransmissions due to lost acknowledgments, and channel losses. Efficiency penalizes a dropped packet to a greater extent if it travels a greater number of hops toward a sink. Efficiency therefore measures the fraction of transmissions in a sensor network that contribute to a packet's</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Metric</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition</head><p>Parameters Efficiency η = P u∈U hops(u)</p><formula xml:id="formula_0">P p∈P P h∈hops(p) xmits(p, h)<label>(1)</label></formula><p>U is the set of useful packets, P is the set of all packets, hops(p) ranges over each hop packet p takes, and xmits(p, h) counts the number of transmissions packet p undergoes at hop h. Fairness</p><formula xml:id="formula_1">φ = " P N i=1 ri " 2 N P N i=1 r 2 i .<label>(2)</label></formula><p>The average rate of packets delivered from the ith sensor is denoted ri. N is the number of sensors in the network.</p><p>Imbalance</p><formula xml:id="formula_2">ζ = packets received at i packets received at i's parent from i (<label>3</label></formula><formula xml:id="formula_3">)</formula><p>This metric is defined per-node i; packet counts are taken over the entire experiment.</p><p>Table <ref type="table">1</ref>: A summary of the metrics we use to evaluate the performance of a sensor network.</p><p>eventual delivery at the sink. Efficiency also measures the fraction of transmissions whose energy is not wasted. Related to efficiency is imbalance, a per-node measure of how well each node delivers its children's packets to its parent. We define the imbalance ζ at node i in Table <ref type="table">1</ref>. When ζ = 1 for node N , N receives and transmits equal amounts of data from its children to its parent. A large ζ indicates that N receives more data from its children than it successfully transmits. Imbalance differs from a simple buffer drop count, because wireless drops directly influence it.</p><p>While efficiency and imbalance capture how efficiently a sensor network delivers data in terms of its use of transmission opportunities and energy, they do not measure the overall rate of data delivery. We therefore report aggregate and median per-node throughput, both measured at the sink.</p><p>Achieving fairness is desirable because in many sensing applications there is a decreasing marginal utility of increasing a sensor's report rate. In other words, it is often more important to hear a low rate of traffic from N sensors spread out across a geographical region than a high rate from one sensor. Achieving fairness in multi-hop wireless networks is difficult and often comes at the cost of reduced aggregate throughput <ref type="bibr" target="#b12">[12,</ref><ref type="bibr" target="#b15">15]</ref>. We measure fairness φ with the index <ref type="bibr" target="#b8">[8]</ref> shown in Table <ref type="table">1</ref>.</p><p>Median packet latency is important to measure because many applications require that the time between sensing and reporting be minimal. Traffic overload in a sensor network often increases latency. It is important to note that while adding buffering and flow control helps to alleviate congestion, it also increases the queuing delay of packets at each hop, increasing end-to-end latency.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">MITIGATING CONGESTION</head><p>Our congestion control scheme, which we call Fusion, integrates three techniques: hop-by-hop flow control, rate limiting, and a prioritized MAC. Hop-by-hop flow control is designed to prevent nodes from transmitting if their packets are only destined to be dropped due to insufficient space in output queues at downstream nodes. Rate limiting meters traffic being admitted into the network to prevent unfairness toward sources far from a sink. A prioritized MAC ensures that congested nodes receive prioritized access to the chan-nel, allowing output queues to drain. While these techniques do not explicitly rely on topology information, we focus on single-sink, spanning-tree topologies in this paper.</p><p>We also note that the application of these techniques is difficult in the wireless domain. First, contention for the wireless channel occurs at both the sender and the receiver. Indoors, this contention is particularly problematic, since radio reflection makes propagation erratic and causes interference between two seemingly-disjoint sets of nodes. Second, there is a natural trade-off between channel utilization and fairness. By allowing nodes that provide transit for large amounts of traffic to transmit, we essentially allocate bandwidth to those nodes with the greatest contention. Finally, the wireless channel is inherently lossy, making distributed control of data flows even more challenging.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Hop-by-hop flow control</head><p>Hop-by-hop flow control has been proposed in wired localarea and wide-area networks <ref type="bibr" target="#b14">[14,</ref><ref type="bibr" target="#b16">16,</ref><ref type="bibr" target="#b17">17]</ref>, as well as in sensor networks <ref type="bibr" target="#b11">[11,</ref><ref type="bibr" target="#b21">22]</ref>. In our implementation, each sensor sets a congestion bit in the header of every outgoing packet. By taking advantage of the broadcast nature of the wireless medium, our implementation provides congestion feedback to all nodes in a radio neighborhood with every transmission. As a result, this implicit feedback obviates the need for explicit control messages that could use a large fraction of available bandwidth. Hop-by-hop flow control has two components: congestion detection and congestion mitigation. We first discuss two methods of detecting congestion, queue occupancy and channel sampling.</p><p>A simple way to detect congestion relies on monitoring a sensor's queue size: if the fraction of space available in the output queue falls below a high water mark α (in our implementation, α = 0.25), the congestion bit of outgoing packets is set; otherwise the congestion bit is cleared. This technique, which we evaluate in Section 4 as queue occupancy, incurs little additional overhead.</p><p>CODA <ref type="bibr" target="#b21">[22]</ref> proposes an alternate way to detect congestion. When a packet is waiting to be sent, the sensor samples the state of the channel at a fixed interval. Based on the number of times the channel is busy, it calculates a utilization factor. If utilization rises above a certain level, the congestion bit is set. Otherwise, the congestion bit is cleared.</p><p>This method, which we evaluate in Section 4 as channel sampling, requires the radio to continuously carrier sense the shared medium.</p><p>Congestion mitigation is the mechanism by which nodes in a given radio neighborhood throttle their transmissions to prevent queues at their next-hop node from overflowing. When a sensor overhears a packet from its parent with the congestion bit set, it stops forwarding data, allowing the parent to drain its queues. Without such a feedback mechanism, packet buffers could easily be overrun when a wave of traffic flows through the network. If a path experiences persistent congestion, hop-by-hop backpressure will eventually reach the source, allowing application-level flow control (described later in Section 3.4), to throttle the source rate.</p><p>One problem that arises when backpressure needs to propagate through multiple hops relates to the communication of congestion state. When a parent sets its congestion bit, its children stop transmitting. This prevents the children from informing their own children when they become congested. We fix this by allowing a congested node to send out one packet once it has heard a packet from its parent with the congestion bit set. A congested node may also send one additional packet per received packet, to compensate for children not hearing a packet that indicates congestion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Rate limiting</head><p>Due to the variability of channel conditions and workloads, points of congestion can occur anywhere in the network. These points of congestion usually result in an increase in the noise floor accompanied by a precipitous drop in the packet delivery rate. As network diameter grows in size, it becomes particularly problematic if transit traffic is dropped due to congestion, because the network has expended a significant amount of energy and bandwidth transmitting the packet over many hops (a problem referred to as livelock). Moreover, there is a natural tendency for the network to deliver traffic originating close to a sink at the expense of traffic sourced deeper inside the network. This rise in the noise floor and increase in unfairness are precisely the properties that source rate limiting addresses.</p><p>The rate limiting scheme we evaluate works as follows. Note that we make the simplifying assumption that all sensors offer the same traffic load and that the routing tree is not significantly skewed. A more general approach that better handles variable rates would require nodes to propagate their rates. For simplicity, we utilize a completely passive approach that relies on monitoring transit traffic to determine source rates. Each sensor listens to the traffic its parent forwards to estimate N , the total number of unique sources routing through the parent. We then use a token bucket scheme to regulate each sensor's send rate. A sensor accumulates one token every time it hears its parent forward N packets, up to a maximum number of tokens. The sensor is allowed to send only when its token count is above zero, and each send costs one token. This approach rate-limits the sensor to send at the same rate of each of its descendants.</p><p>We evaluate this simple rate limiting scheme in Section 4 both in isolation, and in concert with other congestion control mechanisms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">The MAC layer</head><p>Although sensors can react to congestion using the above network-layer mechanisms, they cannot always react to con-gestion fast enough to prevent buffer losses without some help from the MAC layer. A carrier sense multiple access (CSMA) MAC can aid congestion control.</p><p>A standard CSMA MAC layer gives all sensors competing to transmit an equal chance of success. However, during times of congestion, this approach can lead to reduced performance due to a congested sensor's inability to quickly propagate congestion control feedback to its neighbors. For example, consider a high fan-in scenario, where several sensors are forwarding through a common parent. On average, the parent sensor will gain access to the channel only after half its neighbors have transmitted. However, since the parent is congested, it may not have enough buffer space available to store packets from its children. Hence the parent has no choice but to drop packets that its children forward it. Consequently, it is imperative that congested sensors have prioritized access to the wireless medium.</p><p>In order to address this issue, we adopt a technique that Aad and Castelluccia advocate <ref type="bibr" target="#b1">[1]</ref>, making the length of each sensor's randomized backoff (before every transmit cycle) a function of its local congestion state. If a sensor is congested, its backoff window is one-fourth the size of a non-congested sensor's backoff window, making it more likely that a congested sensor will win the contention period, allowing queues to drain and increasing the likelihood congestion control information will propagate throughout a sensor's neighborhood.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.1">The hidden terminal problem</head><p>Hidden terminals occur when two senders that are not in radio range transmit to a common receiver. One way of reducing collisions between hidden terminals is to exchange RTS/CTS control packets before communicating. Although these control packets can collide, and some non-colliding transmissions may be stopped, the RTS/CTS exchange eliminates most data packet collisions. The added cost of the RTS/CTS exchange is worthwhile when data packets are substantially larger than control packets. However, in sensor networks, data packets are usually small <ref type="bibr" target="#b6">[6]</ref>, and on some platforms the RTS/CTS exchange would incur a 40% overhead <ref type="bibr" target="#b23">[24]</ref>. Consequently, we do not evaluate this mechanism.</p><p>Woo and Culler propose an interesting strategy to alleviate hidden terminals <ref type="bibr" target="#b23">[24]</ref> in tree-based topologies. When a node overhears its parent finish sending a packet, it waits for one packet-time plus a guard time, to avoid a likely hidden terminal collision with its grandparent. We evaluate this delay strategy with our other congestion control strategies in Section 4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Application adaptation</head><p>Applications play an important role in preventing congestion. When the networking stack is not ready to accept additional data, it signals applications via send failures. It is then up to the application to respond appropriately. Some applications will simply wait until the stack is ready again (the strategy we evaluate). Others may adjust their send rate via an AIMD controller or similar mechanism. Generally, applications will only allow small numbers of packets outstanding in the networking stack at once. Doing so prevents locally-generated traffic from starving route-through traffic.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">EXPERIMENTAL EVALUATION</head><p>In this section we evaluate our congestion control suite in a 55-node indoor wireless sensor network testbed. Each node is a Crossbow Mica2, which has an Atmel ATmega128L microcontroller with 4 KB of RAM, 128 KB of flash, and a CC1000 radio. The radio operates at 433 MHz, transmits at 38.4 Kbps, and uses Manchester encoding. Each node was attached to a Crossbow MIB600 interface board that provides both power and an Ethernet backchannel for programming and data collection. As Figures <ref type="figure" target="#fig_3">5</ref> and<ref type="figure" target="#fig_4">6</ref> show, we deployed nodes over an area of 16,076 square feet on one floor of our office building, with liberal coverage throughout the floor and a higher than average density in the top-left corner of the floor. We use Motelab <ref type="bibr" target="#b22">[23]</ref> to manage the testbed.</p><p>Characterizing the size of each node's neighborhood is difficult because of the vagaries of radio propagation. To characterize neighborhood size, we measure channel quality between all pairs of nodes in an unloaded network for several different transmit power levels. Note this measurement is performed without a routing protocol nor any other network stack modifications. One-by-one, each node sends a train of broadcast probe packets (without link-level retransmissions). We define the size of a node's neighborhood N (x) to be the expected number of nodes that will hear any given transmission. This value can be calculated using Equation <ref type="formula" target="#formula_4">4</ref>, where x is any node in the network, N is the set of all nodes, and pxy is the probability node y successfully receives node x's transmission.</p><formula xml:id="formula_4">N (x) = X y∈N -{x} pxy<label>(4)</label></formula><p>Figure <ref type="figure" target="#fig_1">2</ref> shows node neighborhood sizes in our testbed. Note that the average neighborhood size increases linearly with an exponential increase in power. For our experiments, we selected a transmit power level of -10 dBm, which is significantly lower than the default power level of 0 dBm. Our goal was to reduce radio power and increase spatial reuse, while maintaining a connected network.</p><p>We summarize each congestion control strategy in Table 2, providing experimental parameters for each. For every strategy except no congestion control, we use the MAC with prioritization features described in Section 3.3. For the no congestion control strategy, we use the unmodified MAC included with TinyOS (B-MAC). We evaluate each strategy under three workloads: a periodic workload, a high fan-in workload, and a correlated-event workload. We evaluate each technique using the metrics described in Section 2.</p><p>The sensors in our testbed run TinyOS 1.1, augmented with our own single-destination DSDV <ref type="bibr" target="#b18">[18]</ref> routing protocol. Each sensor monitors the channel quality from its neighbors by overhearing their transmissions, and selects routes that minimize the expected number of transmissions (ETX <ref type="bibr" target="#b4">[4]</ref>) required to deliver data to destinations. Each sensor uses an eight packet queue to buffer outgoing traffic. The MAC used in the radio stack is derived from the base TinyOS distribution, with modifications as described in Section 3.3. Our link-layer sends data semi-reliably with a maximum retransmission count of three.</p><p>All packets sent through the wireless sensor network are 36 bytes in length. The only other traffic running through the network during the experiments is infrequent routing up- dates, which are sent every ten seconds. In addition, we set the radio frequency to reduce the amount of outside interference from other wireless sensor networks in the building. We allow routes to stabilize for two minutes prior to the data collection phase of our experiments, and we pin routes for the duration of the experiment once the stabilization phase completes. Pinning routes ensures that the routing protocol does not influence the outcome of our experiments.</p><p>For each experimental data point in the periodic and correlated-event workload results, we report an average and confidence interval over 15 runs to one sink (node 6). Our high fan-in results average over 5 runs. We combine runs taken during different times of the day and on different days of the week. The traffic statistics collection phase of each run lasts four minutes for the periodic and high fan-in workloads, and one minute for the event experiment.</p><p>We evaluate all metrics as per-sensor offered load ranges from 0.25 packets per second to four packets per second for periodic and high fan-in workloads, and as event size ranges from one to eight packets for the correlated-event workload. Since the link-level throughput for the Mica2 caps at approximately 40 packets per second and our network has 55 sensors, we can be sure that our network becomes congested at four packets per second.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Periodic workload</head><p>The periodic workload models a typical monitoring sensor network in which readings are generated at fixed time intervals. Deployments exhibiting this traffic pattern are quite common in practice <ref type="bibr">[7,</ref><ref type="bibr" target="#b13">13,</ref><ref type="bibr">20]</ref>. In this workload, each sensor sources traffic at some offered load, and helps to forward other sensors' traffic to a sink. To avoid synchronizing periodic reports from different sensors, we introduce a random delay, which is large relative to the report rate, at the beginning of the experiment. Figure <ref type="figure">3</ref> shows a snapshot of the routing topology used to forward packets toward the sink.</p><p>We note here that it is deceptively difficult to provision a wireless sensor network to obviate the need for an congestion control, even under this simple workload. Even though a network designer knows the aggregate offered load a priori,</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Strategy</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Remarks</head><p>Parameters Queue occupancy Hop-by-hop flow control using queue occupancy (described in Section 3.1; α indicates the fractional queue occupancy at which congestion is indicated.</p><p>Queue size of eight, α = 0.25.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Channel sampling</head><p>Hop-by-hop flow control using channel sampling (described in Section 3.1). N indicates the number of epochs of length E that the channel is sensed for; α indicates the EWMA averaging parameter.</p><p>N = 4, E = 100 milliseconds, α = 0.85.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Delay</head><p>The queue occupancy strategy augmented with the delay technique as described in Section 3.3.1. After overhearing the end of a parent's transmission, we backoff for τ milliseconds, a bit more than one packet-time on the Mica2's CC1000 radio <ref type="bibr" target="#b3">[3]</ref>.</p><p>τ = 40 milliseconds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Rate limiting</head><p>We implement a simple rate limiting strategy as described in Section 3.2.</p><p>None.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fusion</head><p>This strategy simultaneously combines the queue occupancy, forwarding delay, and rate limiting algorithms.</p><p>As above.</p><p>No congestion control No congestion control related changes are made to the network layer or MAC. Transmission is attempted as soon as data enters the outgoing queue (after carrier sense and MAC backoff).</p><p>None.</p><p>Table <ref type="table">2</ref>: Summary of congestion control strategies evaluated in this paper and their relevant parameters. the unpredictable nature of radio makes it is almost impossible to know the actual forwarding topology of the network, making fine-grained channel bandwidth allocation difficult.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.1">Periodic workload: Network efficiency</head><p>Figure <ref type="figure">4</ref> shows how network efficiency η (defined in Equation 1) varies with per-sensor offered load for each congestion control strategy we examine. First, note the decreasing trend for each congestion control strategy. This trend is expected, because as the number of transmissions increases, the noise floor of the network rises, increasing the probability of packet corruption and retransmission. Additionally, the probability of collisions due to MAC contention and hidden terminals increases. These factors drive η down as offered load grows.</p><p>Rate limiting offers an incremental improvement in efficiency for the same reason that the efficiency vs. offered load trend is downward: fewer packet transmissions. In particular, rate limiting reduces the offered load near the sink of the network, where congestion and contention are worst. However, as the offered load increases, hidden terminals and interference prevent this strategy from exceeding the efficiencies of the other strategies.</p><p>Hop-by-hop flow control offers an additional improvement in efficiency, but succeeds for a different reason than rate limiting. Rather than reducing contention between the transit and leaf nodes of the network, hop-by-hop flow control improves efficiency by throttling transmissions based on queue contention in the local neighborhood. In addition, as offered load increases, queue occupancy congestion detection consistently outperforms channel sampling. This suggests that queue occupancy is at least as good as channel sampling as an indicator of congestion.</p><p>Combining these two flow control strategies in the Fusion scheme yields the highest gains in efficiency. Hop-by-hop flow control helps to throttle transmissions at every link in the network, while the rate limiting mechanism meters traffic being admitted into the network. Together, these two strategies complement each other, achieving a high level of efficiency even after the network reaches saturation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.2">Periodic workload: Imbalance</head><p>With an offered load of four packets per second, we plot distributions of node imbalance ζ for different congestion control strategies in Figure <ref type="figure" target="#fig_6">7</ref>. These results summarize node imbalances over multiple runs of the periodic experiment.</p><p>Without any congestion control strategy, the network has many hotspots: approximately five nodes (the 90th percentile) have an imbalance greater than 50. Furthermore, the tail of the imbalance CDF without congestion control is very heavy, indicating the presence of pathological hotspots in the network that are not successfully forwarding any traffic they receive. Rate limiting also exhibits a heavy tail, indicating that rate limiting does little to help these pathological nodes.</p><p>Channel sampling and occupancy-based congestion control both remove pathological hotspots from the network. We see a marked synergistic improvement when we combine the congestion control strategies in the Fusion scheme.</p><p>Figures <ref type="figure" target="#fig_3">5</ref> and<ref type="figure" target="#fig_4">6</ref> show the amount of traffic received by each node in one experimental run. The figures show a periodic workload of four packets per second using Fusion and no congestion control strategies, respectively. The thickness of each link is proportional to the number of packets the node at the head of the edge receives from the node at the tail of the edge.</p><p>In Figure <ref type="figure" target="#fig_3">5</ref>, note that the relatively thick edges in the graph form a forwarding backbone over which most traffic is sent. The rate limiter helps to shape traffic such that leaf nodes, especially those near the sink, do not overload the network. In addition, a conservation of packets property holds: for nodes that route traffic, several thin incoming links usually result in a much thicker outgoing link.</p><p>In contrast, in Figure <ref type="figure" target="#fig_4">6</ref> (with no congestion control) there is no clear forwarding backbone, nor does the conservation of packets property hold. For example, one or more thick edges entering a node lead to one thin edge exiting the same node. This implies a large number of buffer or wireless drops, and     explains the pathological hotspots we see in Figure <ref type="figure" target="#fig_6">7</ref>. Also note the lack of thick edges in the densely-populated upperleft hand corner of the map. This suggests a large number of wireless collisions in that geographic region.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.3">Periodic workload: Throughput and fairness</head><p>Next, we measure the aggregate received throughput at the sink, without regard to which nodes deliver the data. Figure <ref type="figure" target="#fig_7">8</ref> shows that as offered load increases, using a nonrate limiting congestion control strategy results in the highest throughput. This follows because while rate limiting can slow nodes down, so can network inefficiencies.</p><p>The throughput trend is of secondary importance, however, since fairness decreases substantially without congestion control. Figure <ref type="figure" target="#fig_9">9</ref> shows the distribution of throughputs that the sink receives from each node at an offered load of two packets per second. Note that without congestion control, more than 40% of the nodes deliver less than one packet every 100 seconds, making that part of the network almost useless. While congestion control sacrifices the high   throughput of a minority of nodes, it distributes bandwidth between nodes more fairly. Table <ref type="table" target="#tab_0">3</ref> shows the report period that a given percentage of nodes in the network can achieve when every sensor offers four packets per second. In the second column, we see that without any congestion control strategy, no throughput guarantees can be made about one quarter of the nodes. In contrast, nodes using an occupancy congestion control strategy can cover 90% of the network. If, however, we are only interested in the throughput 10% of the nodes in the network can achieve, no congestion control is the best strategy. This regime, however, is unlikely to be of much interest to sensor network designers, because 10% of the sensors would provide poor network coverage, particularly because these nodes are the ones closest to the sink.</p><p>As we vary offered load between 0.25 and four packets per second, we see the same trends for aggregate throughput. Without any form of congestion control, aggregate throughput increases as show in Figure <ref type="figure" target="#fig_7">8</ref>. However, the network mostly delivers data from nodes one hop away from the sink, resulting in a decrease in fairness as shown in the right hand  side of Figure <ref type="figure" target="#fig_10">10</ref>. Without a rate control policy, congestion control mechanisms suffer a similar fate, because nodes in the core of the network have more opportunities to inject packets into the network, since they have fewer hops over which hop-by-hop backpressure can act. Rate-limiting dramatically improves fairness because space opens up in node transmission queues for traffic from the edges of the network. Figure <ref type="figure" target="#fig_11">11</ref> shows median node throughput as a function of per-node offered load. Below an offered load of 0.5 packets per second, the network is in an underloaded state, and median received throughput increases with offered load. Above one packet per second, sensors need a congestion control strategy if more than half can provide any traffic at all. This result quantifies the high degree of unfairness that sensors at the edges experience when the network is an a state of congestion collapse. At least half the nodes running the Fusion strategy are able to maintain at least 0.1 packets per second as offered load increases, because rate control prevents the core of the network from overwhelming the edges.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.4">Periodic workload: Latency</head><p>Figure <ref type="figure" target="#fig_13">12</ref> shows how the median packet latency varies with offered load. We measure latency from the applicationlevel transmit on the sensor to the moment at which the sink receives the packet. Since we only measure the latency of packets received at the sink, this metric must be viewed with  fairness in mind. The primary source of latency is queuing delay, which increases as the number of hops a packet must traverse grows. As we increase offered load from zero to 0.5 packets per second, queues start to build and latency increase. Beyond an offered load of one packet per second for all strategies except Fusion, fairness declines sharply, since the edge's packets are dropped. Thus latency decreases with increasing offered load, since the sensors that get through are in the core of the network, closer to the sink. Since the Fusion strategy is the fairest, as offered load increases, a greater proportion of the packets received are from the edges (many hops away) and consequently latency is higher.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.5">Periodic workload: Sources of loss</head><p>Figure <ref type="figure" target="#fig_14">13</ref> shows network-wide wireless channel loss as a function of offered load. We calculate loss rate by dividing the sum transmission count (including retransmissions) by the sum reception count. As expected, the wireless loss rate increases for all strategies as the offered load increases. This trend is caused by rise in the noise floor, and possibly an increase in the number of collisions due to hidden terminals.</p><p>The no congestion control strategy suffers from the highest loss rates, which approach more than 80% at four packets per second. Channel sampling and rate limiting occupy the middle ground, with loss rates approaching 60% and 70%, respectively. The occupancy-based congestion con-  trol strategies perform even better, keeping loss rates under about 50%. The Fusion scheme performs the best overall, with close to a 50% decrease in drops at four packets per second. Surprisingly, there is no statistical difference in wireless drop rate between the occupancy + delay strategy and the occupancy strategy. This observation suggests that either hidden terminals are not the primary problem, or that the delay strategy does not often avoid them.</p><p>Figure <ref type="figure" target="#fig_15">14</ref> shows total network-wide buffer drops per packets received, as a function of offered load. This measures the probability that a packet will be dropped due to buffer overflow, given that it was successfully received. Surprisingly, the buffer drop rate is substantially higher for strategies that include hop-by-hop flow control. This trend is a direct result of the substantially higher wireless loss rates of the strategies that do not include hop-by-hop flow control, no congestion control and rate limiting. With these later strategies, nodes do not receive enough packets to fill up their forwarding queues and trigger buffer drops.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.6">Periodic workload: Energy considerations</head><p>Performance under a power-saving workload is important to low-power monitoring applications where a large number of sensors periodically sleep (forgetting their congestion state) in between low-rate packet transmissions. There are a wide variety of power-saving strategies proposed for sensor networks. CSMA-based sleep-wakeup algorithms <ref type="bibr" target="#b2">[2,</ref><ref type="bibr" target="#b25">26]</ref> elect a dynamic "backbone" of nodes that forwards traffic for the other power-saving nodes. Other proposals synchronize nodes' sleep-wakeup cycles <ref type="bibr" target="#b26">[27,</ref><ref type="bibr" target="#b20">21]</ref>. In TDMA-based sensor networks, data sources can sleep in all inactive time slots. For any of the above types of networks, the key challenge is designing and evaluating congestion control algorithms that can function soon after the node wakes up.</p><p>The congestion control techniques presented in this paper rely on channel overhearing to propagate congestion state. When combined with power-saving, it is not immediately clear how the reduction in overhearing time resulting from various sleep intervals will impact congestion control performance. To measure this impact, we constructed a topology and strategy that simulates the effects of the sleep-wakeup cycle. In this power-saving workload, a core set of nodes is selected to forward traffic. The remaining leaf nodes send traffic at a low data rate (one packet per second), sleeping for a given fraction of the period. After waking up, nodes forget their congestion state, listen for the remaining fraction of the period, then send.</p><p>Our results (omitted for brevity) for varying listen/sleep intervals indicate that sleep-wakeup power-saving strategies have a statistically insignificant impact on network performance. In particular, efficiency is dependent on offered rate, but not listen period. Unlike many protocols that rely on overhearing, hop-by-hop flow control is not cumulative: nodes are only concerned with the most recently propagated congestion state. Additionally, in deep multihop networks, transit nodes-which are on continuously and can fully benefit from congestion control-transmit the majority of packets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">High fan-in network experiments</head><p>Our high fan-in experiments evaluate congestion control in a wireless network where mitigating congestion is very difficult. We choose only a small subset of the nodes to perform the task of routing traffic in the network. Nodes still choose routes using the ETX metric, but only ten nodes out of 55 advertise routes to the sink. Figure <ref type="figure" target="#fig_16">15</ref> shows a representative routing topology used in one run of our experiments. Non-uniform deployments-where a high degree of fan-in is expected-motivate this workload. Heterogeneous sensor capabilities, such as differences in processor, memory, and power ability, can also motivate this choice of topology.</p><p>Note that in comparison with the topology formed in Figure <ref type="figure">3</ref> under the periodic workload, this topology has a higher degree of fan-in and a smaller network diameter. The high fan-in makes hop-by-hop congestion control more difficult, since each child must each receive congestion feedback before the aggregate demand on a parent decreases.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.1">High fan-in network: Network efficiency</head><p>Figure <ref type="figure" target="#fig_18">16</ref> shows network efficiency versus per-sensor offered load as offered load ranges from 0.25 to four packets per second. Comparing Figure <ref type="figure" target="#fig_18">16</ref> with Figure <ref type="figure">4</ref> (network ef- ficiency under the periodic workload), we make the following observations. Even at low offered load, network efficiency in the high fan-in network is lower than network efficiency in the periodic network. It is unlikely that poor link selection in the high fan-in network causes the lowered efficiency, because the wireless link drop rates for both the high fan-in and normal networks are equal at low transmission rates. The likely explanation, therefore, is wireless contention and network congestion at high fan-in nodes.</p><p>As offered load increases, the trend continues, with efficiency in the fan-in network marginally lower than in the normal network. Note that in a high fan-in topology, congestion control techniques work together to increase performance. Fusion outperforms all strategies at most offered loads.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Correlated-event workload</head><p>The correlated-event workload captures the effect of spatially-correlated events in a sensor network. Detection and tracking applications often use an event-oriented reporting model rather than sending a periodic stream of readings. In particular, this workload models the effects of a single, synchronized impulse of traffic on network performance.</p><p>Instead of collecting analog data from each sensor in our testbed, we model an event-based workload using the following methodology. At the beginning of the experiment, we run a distributed level-aware, sender-receiver based time synchronization protocol similar to the Timesync Protocol for Sensor Networks (TPSN) <ref type="bibr" target="#b5">[5]</ref>. Using an Ethernet backchannel, we verified synchronization of 91% of the testbed to within 29 ms (less than one packet-time) and all 55 nodes in our testbed to within 56 ms (between one and two packet-times).</p><p>After the synchronization phase, all sensors in the testbed simultaneously send B packets back-to-back (or, if the channel is carrier-sensed busy, as fast as possible) at the scheduled time of each event. There is sufficient time (20 seconds)  between each event to let traffic drain completely from the network.</p><p>We evaluate this correlated-event workload by varying the traffic burst size B. It is important to note that for this workload, which consists of a single impulse of traffic, rate limiting provides no improvement in network performance. Our rate limiting algorithm is designed to operate when there is significant steady-state traffic present throughout the network. As a result, we omit the rate limiting and Fusion schemes from our data sets for clarity and investigate in detail performance of the hop-by-hop variants.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.1">Correlated-event workload: Network efficiency</head><p>Even at small event sizes, the strong time correlation between events necessitates some kind of congestion control. This trend stands in contrast to that of the periodic and high fan-in workloads in which the benefits of congestion control were mainly seen at higher offered loads. Figure <ref type="figure" target="#fig_20">17</ref> shows network efficiency as each sensor's traffic burst size B varies between one and eight packets. As expected, a downward trend still exists for all strategies as network load increases. However, even at an event size of one, the occupancy + delay strategy yields close to an 80% gain in network efficiency over no congestion control. As B increases, the relative increase in network efficiency (versus no congestion control) increases for all strategies. At an event size of eight packets, the best strategy is approximately two times better than the baseline.</p><p>There is a clear benefit to using hop-by-hop flow control for a correlated-event workload to combat congestion caused by the wave of data flowing from the leaves to the sink.</p><p>Buffer occupancy augmented with a forwarding delay for hidden terminal reduction (occupancy + delay) performs better than all other strategies at small B. Without the delay strategy, synchronization in the correlated-event workload makes collisions much more likely. The forwarding delay allows a node's grandparent, which normally would exist as a hidden terminal and be prone to collision, a larger window to successfully complete its transmission. At larger values of B, the increase in network efficiency due to the   forwarding delay is negligible. For most event sizes, channel sampling performs worse than all strategies except for no congestion control.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.2">Correlated-event workload: Drop rate</head><p>For many types of applications designed to detect discrete, non-repeating events, the end-to-end packet drop rate is an important measure of performance. This stands in contrast to the periodic workload where often it is reasonable to assume that subsequent reports will supersede any lost data. Figure <ref type="figure" target="#fig_21">18</ref> shows the end-to-end drop rate as a function of event size B for various congestion control strategies. Note how all strategies perform better than no congestion control. In some cases, the lack of any congestion control can increase the end-to-end drop rate by almost 35%. Hop-by-hop flow control alleviates congestion in this workload because the backpressure desynchronizes packet transmissions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.3">Correlated-event workload: Latency</head><p>In Figure <ref type="figure" target="#fig_23">19</ref> we note that packet latency rises when using any of the congestion control strategies. This increase is to  be expected because all congestion control strategies operate by delaying transmissions. By decreasing the rate at which queues drain, wireless contention and collisions are reduced at the cost of increased queuing delays. For small event sizes, the increase in latency is in the neighborhood of 40%. However, the maximum increase in latency is seen when the event size is three, resulting in a latency increase of over 100% when compared to no congestion control.</p><p>Whether or not these increases in latency are actually meaningful depends on the application. It is important to note that latencies can by significantly reduced by decreasing the size of the forwarding queues, at the cost of increased losses when burst sizes are large.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">RELATED WORK</head><p>Wan et al. propose CODA <ref type="bibr" target="#b21">[22]</ref>, a congestion control system for sensor networks. CODA detects congestion by periodically sampling the channel load and comparing the fraction of time that the channel is busy to the optimal channel utilization. The system responds to congestion with a combination of hop-by-hop flow control and closed-loop regulation. In our work, we experimentally evaluate CODA's congestion detection mechanism (channel sampling) and one of its congestion mitigation mechanisms (hop-by-hop flow control). We make all our comparisons in a large sensor network testbed, expanding on previous small-scale testbed or simulation-based congestion control studies. We find that when used alone, channel sampling-based congestion detection performs worse than queue occupancy-based congestion detection. We also find that augmenting a hop-by-hop flow control mechanism (such as CODA) with rate limiting is beneficial.</p><p>Woo and Culler propose a rate control mechanism <ref type="bibr" target="#b23">[24]</ref> that admits traffic into the network using an AIMD controller. When a node hears that a packet it had previously sent was forwarded, it additively increases its transmission rate. When it does not hear a previous transmission being successfully forwarded (presumably after a timeout), it multiplicatively reduces its transmission rate. We evaluated a similarly motivated rate control mechanism. We found that rate limiting increases fairness, but its benefits to the net-work (as measured by our metrics from Section 2) are most significant when used in combination with other congestion control techniques.</p><p>Lu et al. propose RAP <ref type="bibr" target="#b11">[11]</ref>, a real-time communication protocol for sensor networks. The network layer of RAP ensures fairness between nodes and improves the ratio of packets that make their latency deadlines. To accomplish this task, RAP provides support for deadline-and distanceaware packet scheduling. Packets originating from sources deeper in the network have higher priority than packets originating from sources close to the sink. While RAP focuses on the network's ability to meet deadlines, our work focuses on managing overload and congestion in a sensor network.</p><p>Sankarasubramaniam et al. propose ESRT <ref type="bibr" target="#b19">[19]</ref>, the Event to Sink Reliable Transport Protocol. Their system addresses congestion control in the context of reliable delivery. ESRT keeps a network operating near its optimal load by broadcasting one-hop control messages to sources from the sink. The consequent assumption is that a data sink can reach all sources via a high-powered one-hop broadcast, which reduces overall network capacity. In contrast, our hop-by-hop flow control does not require a high-powered broadcast message to be sent by a sink.</p><p>Lemmon et al. study overload in sensor-actuator networks connected by a wired bus <ref type="bibr" target="#b10">[10]</ref>. The key difference between their overload problem from ours is that the communication network they consider is a shared bus, with no potential for spatial reuse. Additionally, their sensor nodes do not forward each other's traffic.</p><p>Zhao and Govindan conduct a comprehensive study of packet delivery performance in wireless sensor networks <ref type="bibr" target="#b28">[29]</ref>. Their study focuses on the physical and link layers, evaluating packet loss, packet loss correlations, and link asymmetry. Our study of congestion complements their work, studying end-to-end performance when sensors participate in multihop routing and congestion avoidance protocols. Our congestion control algorithms operate in a network with a wide range of link loss rates and asymmetries, as in their work.</p><p>Woo et al. examine routing in sensor networks <ref type="bibr" target="#b24">[25]</ref>, studying link estimation and neighborhood table management in particular. We use these mechanisms in our network layer implementation to support our congestion control algorithms.</p><p>Yi and Shakkottai propose a fair hop-by-hop congestion control algorithm for multihop wireless networks <ref type="bibr" target="#b27">[28]</ref>. They build a theoretical model and provide a simulation-based evaluation of their distributed algorithms. They make the assumption that simultaneous transmissions can occur over links in the same radio neighborhood, using orthogonal code division-multiplexing channels. Such approaches require sophisticated code management algorithms. In the sensor networks we analyze, all nodes operate at the same frequency, and hence parallel transmissions within the same radio neighborhood are not possible.</p><p>Hop-by-hop flow control protocols have been extensively studied in the context of ATM and local-area networks <ref type="bibr" target="#b9">[9,</ref><ref type="bibr" target="#b14">14,</ref><ref type="bibr" target="#b16">16,</ref><ref type="bibr" target="#b17">17]</ref>. The motivation in these high-speed networks is to avoid the burst behavior of end-to-end protocols like TCP at small round-trip times. In sensor networks, hop-by-hop flow control is attractive because it allows good congestion adaptation without incurring losses or requiring the expensive end-to-end acknowledgments that are unnecessary for many streams that don't require TCP-style reliability.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">CONCLUSION</head><p>This paper presents an experimental evaluation of three complementary congestion control strategies for wireless sensor networks. We show that unless a sensor network operating under load has some means of controlling congestion, it will face significant degradation in efficiency and fairness. As network load increases, or when channel variations cause fluctuations in achievable bandwidth, nodes must modulate their send rates based on local congestion feedback or the network will go into congestion collapse.</p><p>The metrics we use for evaluation express properties that designers and users of sensor networks should find desirable. Network efficiency quantifies the amount of energy that is wasted on transmissions that do not deliver packets. Fairness quantifies the degree of variation in send rates, which impacts sensor network coverage. Imbalance measures the inequity between packet receptions at a given node and its next hop, providing a clearer picture of the hotspots in a network and how that results in buffer and wireless drops. Latency is important because many event-driven applications require the timely reporting of sensor values.</p><p>We evaluate three techniques for mitigating congestion both in isolation and in concert. Our results show that hopby-hop flow control with a simple queue occupancy-based congestion detection method offers substantial efficiency improvements for all types of workloads and utilization levels. This finding holds because a successful wireless transmission requires both the sender and receiver to be contention-free with respect to both the wireless channel and queue space. Implementing a rate-limiting policy results in substantial improvements to fairness. Finally, MAC enhancements support the operation of hop-by-hop flow control.</p><p>We analyze two ways of detecting congestion: queue occupancy and channel sampling. In addition to offering significantly better performance, queue occupancy requires no support from the MAC layer and is very easy to implement on different platforms.</p><p>We present Fusion, a congestion control mechanism that combines rate limiting, hop-by-hop flow control, and a prioritized MAC. Our results show the efficacy of Fusion under a variety of workloads on a 55-node deployment. A simple periodic workload benefits because it is extremely difficult to adequately provision for varied link capacities of a large scale deployment. A high fan-in network realizes gains from congestion control because the nature of that topology makes transit nodes particularly prone to buffer drops. Correlatedevent workloads need congestion control to handle the sudden bursts of traffic that spatially-correlated events generate.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Future Work</head><p>The results presented in this paper point to a number of possible areas for future work. First, although the rate limiting scheme presented in Section 3.2 is effective at improving the fairness of networks under load, a robust rate limiting algorithm that correctly handles node failures, skewed routing topologies, and variable send rates would be useful.</p><p>Second, even though our implementation of hop-by-hop flow control relies on overhearing, an alternate implementation is possible with the use of link-level acknowledgments to indicate congestion state. Although we have briefly investigated this design point, we leave a performance comparison for future work.</p><p>Finally, while we offer hints as to the sources of loss in our network, more work needs to be done to find definitive answers. In particular, we are investigating whether losses occur because of hidden terminal collisions (in which case RTS/CTS might be a solution) or due to additive interference from distant sources of noise.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Neighborhood size (complementary CDF) as computed from Equation4, as a function of radio power level, for a 55-node indoor wireless sensor network testbed deployed over an area of 16,076 square feet on one floor of an office building.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :Figure 4 :</head><label>34</label><figDesc>Figure3: Routing topology in one run of an experiment with Fusion flow control and each node offering one packet per second, as formed by the ETX path selection metric. The thickness of each edge is proportional to the number of packets the node at the head of the edge received from the node at the tail of the edge.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Traffic flow in one run of a Fusion congestion controlled experiment with each node offering four packets per second. The thickness of each edge is proportional to the number of packets the node at the head of the edge receives from the node at the tail of the edge.</figDesc><graphic coords="7,337.42,67.61,197.80,225.45" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Traffic flow in one run of an experiment with no congestion control and each node offering four packets per second. The thickness of each edge is proportional to the number of packets the node at the head of the edge receives from the node at the tail of the edge.</figDesc><graphic coords="7,337.42,403.25,197.80,225.45" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Node imbalance ζ (CDF) for different flow control strategies. Each node offers four packets per second.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Average aggregate received throughput (measured at the sink) versus per-sensor offered load under a periodic workload. 99% confidence intervals are shown.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: Per-node throughput received at the SAP (complementary CDF) under a periodic workload. Each node offers two packets per second.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: Average fairness φ versus per-sensor offered load under a periodic workload. 99% confidence intervals are shown.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 11 :</head><label>11</label><figDesc>Figure 11: Median throughput as a function of offered load under a periodic workload. 99% confidence intervals are shown.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 12 :</head><label>12</label><figDesc>Figure 12: Median packet latency as a function of offered load under a periodic workload. 95% confidence intervals are shown.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 13 :</head><label>13</label><figDesc>Figure 13: Average network-wide wireless link drop rate (before retransmissions) versus per-sensor offered load under a periodic workload. 99% confidence intervals are shown.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Figure 14 :</head><label>14</label><figDesc>Figure 14: Total network-wide buffer drops per network-wide received packets as a function of persensor offered load under a periodic workload. 99% confidence intervals are shown.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Figure 15 :</head><label>15</label><figDesc>Figure15: Routing topology in one run of a high fan-in experiment with Fusion congestion control and each node offering one packet per second, as formed by the ETX path selection metric, restricted to gateway nodes. The thickness of each edge is proportional to the number of packets the node at the head of the edge received from the node at the tail of the edge.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head>Figure 16 :</head><label>16</label><figDesc>Figure 16: Average network efficiency η versus persensor offered load in a high fan-in network. 95% confidence intervals are shown. The curves for Occupancy and Occupancy + Delay overlap.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_20"><head>Figure 17 :</head><label>17</label><figDesc>Figure 17: Average network efficiency η as a function of event size B under a correlated-event workload. 99% confidence intervals are shown.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_21"><head>Figure 18 :</head><label>18</label><figDesc>Figure 18: End-to-end drop rate as a function of event size B under a correlated-event workload. 99% confidence intervals are shown.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_23"><head>Figure 19 :</head><label>19</label><figDesc>Figure 19: Median packet latency as a function of event size B under a correlated-event workload. 95% confidence intervals are shown.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 3 :</head><label>3</label><figDesc>Network coverage by congestion control strategy. Given that a network designer wants the network coverage shown in the left hand column, that percentage of sensors operating under different congestion control strategies can achieve at least the report rate show in the rightmost columns. The offered load in the network is periodic at two packets per second per sensor.</figDesc><table><row><cell>Maximum period</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank our shepherd John Heidemann as well as the anonymous reviewers for valuable feedback. We also thank Vladimir Bychkovsky, Michel Goraczko, Sam Madden, Allen Miu, and Stanislav Rost for their valuable feedback and help setting up the testbed.</p></div>
			</div>


			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper is based upon work supported by the National Science Foundation under Grant No. 0205445. This work was also supported by the MIT Project Oxygen partnership, Intel Corporation, and a Sloan Foundation Fellowship.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName><surname>References</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Differentiation Mechanisms for IEEE 802.11</title>
		<author>
			<persName><forename type="first">I</forename><surname>Aad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Castelluccia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the IEEE INFOCOM Conf</title>
		<meeting>of the IEEE INFOCOM Conf<address><addrLine>Anchorage, AK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-04">April 2001</date>
			<biblScope unit="page" from="209" to="218" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Span: An Energy-Efficient Coordination Algorithm for Topology Maintainence in Ad Hoc Wireless Networks</title>
		<author>
			<persName><forename type="first">B</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Jamieson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Balakrishnan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Morris</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM MOBICOM Conf</title>
		<meeting>of the ACM MOBICOM Conf<address><addrLine>Rome, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-07">July 2001</date>
			<biblScope unit="page" from="85" to="96" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<ptr target="http://www.chipcon.com" />
		<title level="m">CC1000 Transceiver Datasheet</title>
		<imprint/>
		<respStmt>
			<orgName>Chipcon Corporation</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A High-Throughput Path Metric for Multi-Hop Wireless Routing</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S J</forename><surname>De Couto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Aguayo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Bicket</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Morris</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM MOBICOM Conf</title>
		<meeting>of the ACM MOBICOM Conf</meeting>
		<imprint>
			<date type="published" when="2003-09">September 2003</date>
			<biblScope unit="page" from="134" to="146" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Timing-sync Protocol for Sensor Networks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ganeriwal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">B</forename><surname>Srivastava</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM Sensys Conf</title>
		<meeting>of the ACM Sensys Conf<address><addrLine>Los Angeles, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-11">November 2003</date>
			<biblScope unit="page" from="138" to="149" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Directed Diffusion: A Scalable and Robust Communication Paradigm for Sensor Networks</title>
		<author>
			<persName><forename type="first">C</forename><surname>Intanagonwiwat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Govindan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Estrin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM MOBICOM Conf</title>
		<meeting>of the ACM MOBICOM Conf<address><addrLine>Boston, MA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000-08">August 2000</date>
			<biblScope unit="page" from="56" to="67" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<ptr target="http://www.intel.com/labs/features/rs01031.htm" />
		<title level="m">New Computing Frontiers -The Wireless Vineyard</title>
		<imprint/>
		<respStmt>
			<orgName>Intel Corporation</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">The Art of Computer Systems Performance Analysis</title>
		<author>
			<persName><forename type="first">R</forename><surname>Jain</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991">1991</date>
			<publisher>Wiley</publisher>
		</imprint>
	</monogr>
	<note>First ed.</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">FLORAX-Flow-Rate Based Hop by Hop Backpressure Control for IEEE</title>
		<author>
			<persName><forename type="first">D</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Coleri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Dong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ergen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">5th IEEE Conf. on High Speed Networks and Multimedia Communications</title>
		<meeting><address><addrLine>Jeju Island, Korea</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-07">July 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Overload Management in Sensor-Actuator Networks used for Spatially-Distributed Control Systems</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D</forename><surname>Lemmon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Ling</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Sun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM Sensys Conf</title>
		<meeting>of the ACM Sensys Conf<address><addrLine>Los Angeles, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-11">November 2003</date>
			<biblScope unit="page" from="162" to="170" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">RAP: A Real-Time Communication Architecture for Large-Scale Wireless Sensor Networks</title>
		<author>
			<persName><forename type="first">C</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">M</forename><surname>Blum</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">F</forename><surname>Abdelzaher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Stankovic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>He</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the IEEE RTAS Symposium</title>
		<meeting>of the IEEE RTAS Symposium<address><addrLine>San Jose, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-09">September 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A New Model for Packet Scheduling in Multihop Wireless Networks</title>
		<author>
			<persName><forename type="first">H</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Bharghavan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM MOBICOM Conf</title>
		<meeting>of the ACM MOBICOM Conf<address><addrLine>Boston, MA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000-08">August 2000</date>
			<biblScope unit="page" from="87" to="98" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Wireless Sensor Networks for Habitat Monitoring</title>
		<author>
			<persName><forename type="first">A</forename><surname>Mainwaring</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Polastre</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Szewczyk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Culler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Anderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM WSNA Workshop</title>
		<meeting>of the ACM WSNA Workshop<address><addrLine>Atlanta, GA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-09">September 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">A Hop by Hop Rate-based Congestion Control Scheme</title>
		<author>
			<persName><forename type="first">P</forename><surname>Mishra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Kanakia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGCOMM Conf</title>
		<meeting>the ACM SIGCOMM Conf<address><addrLine>Baltimore, MD</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1992-08">August 1992</date>
			<biblScope unit="page" from="112" to="123" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Acheiving MAC Layer Fairness in Wireless Packet Networks</title>
		<author>
			<persName><forename type="first">T</forename><surname>Nandagopal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T.-E</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Bhargavan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM MOBICOM Conf</title>
		<meeting>of the ACM MOBICOM Conf<address><addrLine>Boston, MA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000-08">August 2000</date>
			<biblScope unit="page" from="87" to="98" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Selective Backpressure in Switched Ethernet LANs</title>
		<author>
			<persName><forename type="first">W</forename><surname>Noureddine</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Tobagi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE GLOBECOM Conf</title>
		<meeting>the IEEE GLOBECOM Conf<address><addrLine>Rio De Janeiro, Brazil</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-12">December 1999</date>
			<biblScope unit="page" from="1256" to="1263" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Reliable and Efficient Hop-by-Hop Flow Control</title>
		<author>
			<persName><forename type="first">C</forename><surname>Özveren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Simcoe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Varghese</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGCOMM Conf</title>
		<meeting>the ACM SIGCOMM Conf<address><addrLine>London, UK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994-08">August 1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Highly Dynamic Destination-Sequenced Distance-Vector Routing (DSDV) for Mobile Computers</title>
		<author>
			<persName><forename type="first">C</forename><surname>Perkins</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Bhagwat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Communication Review</title>
		<imprint>
			<date type="published" when="1994-10">October 1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">ESRT: Event-to-Sink Reliable Transport in Wireless Sensor Networks</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Sankarasubramaniam</surname></persName>
		</author>
		<author>
			<persName><surname>Özgür Akan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Akyildiz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM Mobihoc Conf</title>
		<meeting>of the ACM Mobihoc Conf<address><addrLine>Annapolis, MD</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-06">June 2003</date>
			<biblScope unit="page" from="177" to="189" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">An Adaptive Energy-Efficient MAC Protocol for Wireless Sensor Networks</title>
		<author>
			<persName><forename type="first">T</forename><surname>Van Dam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Langendoen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM Sensys Conf</title>
		<meeting>of the ACM Sensys Conf<address><addrLine>Los Angeles, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-11">November 2003</date>
			<biblScope unit="page" from="171" to="180" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">CODA: Congestion Detection and Avoidance in Sensor Networks</title>
		<author>
			<persName><forename type="first">C.-Y</forename><surname>Wan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Eisenman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Campbell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM Sensys Conf</title>
		<meeting>of the ACM Sensys Conf<address><addrLine>Los Angeles, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-11">November 2003</date>
			<biblScope unit="page" from="266" to="279" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">M</forename><surname>Welsh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Werner-Allen</surname></persName>
		</author>
		<author>
			<persName><surname>Motelab Webpage</surname></persName>
		</author>
		<ptr target="http://motelab.eecs.harvard.edu" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">A Transmission Control Scheme for Media Access in Sensor Networks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Woo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Culler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM MOBICOM Conf</title>
		<meeting>the ACM MOBICOM Conf<address><addrLine>Rome, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="221" to="235" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Taming the Underlying Challenges of Reliable Multihop Routing in Sensor Networks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Woo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Tong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Culler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM Sensys Conf</title>
		<meeting>of the ACM Sensys Conf<address><addrLine>Los Angeles, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-11">November 2003</date>
			<biblScope unit="page" from="14" to="27" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Geography-Informed Energy Conservation for Ad Hoc Routing</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Heidemann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Estrin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM MOBICOM Conf</title>
		<meeting>the ACM MOBICOM Conf<address><addrLine>Rome, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-07">July 2001</date>
			<biblScope unit="page" from="70" to="84" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">An Energy-Efficient MAC Protocol for Wireless Sensor Networks</title>
		<author>
			<persName><forename type="first">W</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Heidemann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Estrin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the IEEE INFOCOM Conf</title>
		<meeting>of the IEEE INFOCOM Conf<address><addrLine>New York, NY</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-06">June 2002</date>
			<biblScope unit="page" from="1567" to="1576" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Hop-by-hop Congestion Control over a Wireless Multi-hop Network</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Yi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shakkottai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the IEEE INFOCOM Conf</title>
		<meeting>of the IEEE INFOCOM Conf<address><addrLine>Hong Kong</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-06">June 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Understanding Packet Delivery Performance in Dense Wireless Sensor Networks</title>
		<author>
			<persName><forename type="first">J</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Govindan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM Sensys Conf</title>
		<meeting>of the ACM Sensys Conf<address><addrLine>Los Angeles, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-11">November 2003</date>
			<biblScope unit="page" from="1" to="13" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
