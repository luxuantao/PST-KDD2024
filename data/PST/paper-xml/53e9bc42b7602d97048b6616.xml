<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">An exact algorithm for IP column generation 1</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Francois</forename><surname>Vanderbeck</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Engineering and Judge Institute of Management Studies</orgName>
								<orgName type="institution">Cambridge University</orgName>
								<address>
									<addrLine>Trumpington Street</addrLine>
									<postCode>CB2 lAG</postCode>
									<settlement>Cambridge</settlement>
									<country key="GB">UK</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Laurence</forename><forename type="middle">A</forename><surname>Wolsey B'</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">CORE</orgName>
								<orgName type="institution">Universitk Catholique de Louvain</orgName>
								<address>
									<addrLine>Voie du Roman Pays 34</addrLine>
									<postCode>B-1348</postCode>
									<settlement>Louvain-la-Neuve</settlement>
									<country key="BE">Belgium</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">An exact algorithm for IP column generation 1</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">5D209EC11A459DDA36FC45E6FF274DC9</idno>
					<note type="submission">Received l April 1994; revised 1 August 1995</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T14:39+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>Integer programming; Column generation</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>An exact column generation algorithm for integer programs with a large (implicit) number of columns is presented. The family of problems that can be treated includes not only standard partitioning problems such as bin packing and certain vehicle routing problems in which the columns generated have 0-1 components and a right-hand side vector of l's, but also the cutting stock problem in which the columns and right-hand side are nonnegative integer vectors. We develop a combined branching and subproblem modification scheme that generalizes existing approaches, and also describe the use of lower bounds to reduce tailing-off effects.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Column generation formulations of integer programs have been proposed and discussed for several decades. Starting from the pioneering work of Gilmore and Gomory <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b5">6]</ref> on the cutting stock problem, Minoux <ref type="bibr">[12]</ref> shows how several important combinatorial optimization problems can be reformulated and tackled by column generation, numerous applications in the routing/distribution area are covered in a recent survey of <ref type="bibr">Desrosiers et al. [3]</ref>, and recently Hansen et al. <ref type="bibr" target="#b6">[7]</ref>, Savelsbergh <ref type="bibr">[14]</ref>, Vance et al. <ref type="bibr" target="#b15">[16]</ref> among others have shown different ways in which column generation and branch and bound can be combined to obtain guaranteed optimal solutions. Barnhart et al. <ref type="bibr" target="#b0">[1]</ref> survey some of the recent work in this area.</p><p>The problem to be solved is the Integer Program (Master): where q,b ~ Z~, W is a set defining the set of feasible columns and their associated costs, i.e. Q = {x: (x, w) ~ W} c Z"~, c o = minw{eX +fw: x = q, (x, w) E W } is the minimum cost solution associated with column q ~ Q, where (e,f) ~ R m x R ~ is the cost vector and w e R p represents auxiliary variables that may be real or integer. The variable 2q (indexed by a vector q ~ Z'~) is the number of times the vector q e Q is chosen, and L and K are lower and upper bounds on the sum of the )~q variables.</p><p>We set m = {1 ..... m}.</p><p>Typically the Master problem has such a large number of columns that they cannot be written out explicitly. Thus in practice one works with a linear programming relaxation involving only a small subset of the columns of Q. New columns are generated as needed when their reduced costs are negative and they are therefore candidates to improve the objective function. Using optimal dual variables Oz,/~, v) ~ R" x R x R + from this restricted linear programming relaxation, a pricing subproblem is solved exactly or heuristically to generate a column of negative reduced cost. This pricing subproblem takes the form = min {ex +J~' -rex: (x, w) e W } -It -v,</p><p>x.v,, and a solution (x, w) leads to a new column with q = x, cq = ex + fw.</p><p>Problem (P) contains many well-known models as special cases. The cutting stock problem is the case in which q e Q represents a feasible cutting pattern in which q~ pieces of length a~ are cut from a piece of length A. Here one can take W = {(x, w) ~ Z~ x {0, 1}: Yi"_ ~ a,x~ &lt;&lt;, Aw} with e = 0 and f = 1, so cq = w for all q e Q. The right-hand side b is the demand vector with b~ indicating how many pieces of length a~ must be cut in total. Here one can take L = ~_,ibiai/A "] and K = ~i[bi/lA/aiJ-] as a priori lower and upper bounds on the total number of pieces of length A needed.</p><p>The single depot capacitated vehicle routing problem involves a graph G = (V, E), ~: vehicles of capacity C, depot node 0, client demands dg for i e V\{0}, and edge lengths fe for e e E. Taking q to be the characteristic vector of client subsets S q c_ V\{0} visited on a feasible tour, we can take W = {(x, w) ~ {0, 1}"1 x {0, 1}IE': ~.,ee6(i) We = 2X i for i ~ V\ {0}, ~e~O(O) We = 2, Y~e~a(S) We &gt;~ 2Xi for all i, S with 0~S, i~ S, y4~udixi &lt;&lt;, C} where b(S) = {(i,j): i~S, j e V\S} and 6(0 = 6({i}) so that edges we form a single subtour including the depot node 0. Also e = 0, and Cq is the length of the shortest tour through the nodes Sqw {0}. Here b is a vector of l's indicating that each client is visited once, and L = 1 and K = • represent bounds on the number of vehicles used.</p><p>It is also possible to treat problems where columns can be generated from different subsets, in which case we talk of different (as opposed to identical) subproblems. For instance the single machine multi-item lot-sizing model with ~ items, n periods and demands d~ and production capacities C~ for item k in period t, where only one item can be produced in each period, is such a case. Here we suppose that q ~ R "+~ and q = (x k, ek) T for some k. W* = {(x *, e ~, y~, s k) ~ {0, 1}" × {0, 1} ~ × R% x R"+: k k s, ~_ x + yf = d, k + s, k, yf ~&lt; C, x~ for all t} represents the feasible production region for item k where w = (y*, s k) are the production and stock variables respectively, x k is the characteristic vector of the production periods for item k, and e* is the kth unit vector. Cq is the associated minimum cost of production, storage and set-up for item k when production is restricted to the periods defined by x*.</p><p>Here bi = 1 for all i indicates that exactly one item is produced in each period, and that exactly one production plan must be chosen for each item. The cardinality constraints with L --K = ~ are redundant.</p><p>Problems of the form (P) sometimes arise directly, but are also often obtained by applying Dantzig-Wolfe decomposition [2] to some different initial formulation. Thus Gilmore and Gomory formulated the cutting stock formulation directly in the form (P), but it is not the usual starting formulation for the multi-item lot-sizing problem. See Magnanti and Wolsey <ref type="bibr" target="#b10">[11]</ref> for a discussion of various other models leading to formulations of the form (P).</p><p>Here we present an algorithm that solves the problem (P) exactly. It has been largely motivated by problems with identical subproblems and in which b, q ~ Z~, in contrast to most previous work in which q E {0, 1} m and b~ = 1 for all i E M. To our knowledge no satisfactory general branching scheme has been proposed for such problems, see the recent survey <ref type="bibr" target="#b0">[1]</ref>. Though the scheme we propose is largely "conceptual", the algorithm can be implemented using a modular mixed integer programming system such as CPLEX, MINTO, OSL or XPRESS if an explicit mixed integer formulation of the set W defining the set of feasible columns is provided. The algorithm may be suitable for certain complicated problems for which column generation appears to be an appropriate approach, but in which the subproblem is still a difficult integer program. This is in contrast to most specific applications treated to date, where the subproblems are relatively easy problems that are solved rapidly by special purpose algorithms or heuristics. The desire for simplicity and speed is motivated by the fact that the subproblem needs to be solved a large number of times.</p><p>The contents of the paper are as follows. Section 2 contains a description of the algorithm, in particular a valid branching scheme, a corresponding method to modify the subproblems after branching, and verification that it can be implemented. In Section 3 we discuss the separate issue of how lower bounds can be used to improve the performance of the basic algorithm. In Section 4 we discuss how various steps of the algorithm simplify when the feasible columns are only 0-1 vectors, so that the problem is one of set partitioning where each item must be chosen b~ times. We then further specialize by taking bi = 1 for all i which gives the problem generally treated in earlier work.</p><p>In Section 5 we present some computational experience from two problems in order to show first that the "conceptual" algorithm and branching scheme presented in Section 2 can be implemented as described to solve a general class of cutting stock problems, and secondly to report briefly on the effectiveness of the early termination rules of Section 3 on a class of telecommunications problems. Finally we discuss some outstanding issues.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">The IP column generation algorithm</head><p>We describe a branch and bound algorithm for (P) in which we show that all fractional master solutions can be eliminated by branching on general upper (lower) bound constraints of the form 2q~&lt;K j (/&gt;L J), qEQ(q j) where Q(p) = {q ~ Q: q &gt;1 p} for p ~ Z'~.</p><p>Thus at each node u of an enumeration tree, we associate a problem P" that is characterized by cardinality constraints arising from branching. Let G" and Hu be the index sets of branching constraints at node u consisting of pairs (q J, K j) and pairs (q J, L j) respectively.</p><p>The problem at node u then takes the form</p><formula xml:id="formula_0">(P") min ~ Cq2q (=z") qEQ q2q = b, q~Q 2q &lt;~K ~, j~G", q~Q(qJ) y" 2q&gt;&gt;-L j, j~H", q~Q(qJ)</formula><p>Aq ~&gt; 0 and integer, q ~ Q.</p><p>Note that if the initial cardinality constraints L ~&lt; y~q~Q 2q ~&lt; K are present at the root node, they are also present at node u as Q = Q(0), 0 ~ G" represents the pair (0, K), and 0 E H" represents the pair (0, L). With (P") we associate a restricted linear program over a subset ~ _~ Q of the columns:</p><formula xml:id="formula_1">(LP"((~)) min ~ Cq)Cq (:Z~.p(0)) q~0. Z q'~q = b, qeF2 Z "~q ~Kj' J ~Gu, q~Q(qJ) 2~&gt;&gt;-L j, j~H", qE~(q j) ~&gt;~0 q~O, where ~2 = Q(q~)nO.</formula><p>With (LP"(Q)) we associate the subproblem designed to test whether any column q ~ Q\O has a negative reduced cost. Let (n, #, v) ~ R m × RI_~"I x RI+ wl be optimal dual variables for (LP"(Q)). To calculate the reduced cost of a column q e Q, we need to include the values of the dual variables #~, vj depending on whether q ~ Q(qJ) or not. To do this we explicitly introduce a 0-1 variable z j in the subproblem which takes the value 1 ifq e Q(qJ) and 0 otherwise. The resulting subproblem is</p><formula xml:id="formula_2">(SP"(n, #, v)) min (e-n)x+fw-#o-Vo -y~#i z j-~vf jeGUo j~HUo (= ~,..v) (x, w) ~ W, (x,z j) e Xqj j6GUowH"o,</formula><p>where XqJ={(x, zJ): z s=l if xt&gt;qJ and z j=0 otherwise}, G~ = G"\{0} and H; = H"\{0}. Now at each node u, a standard column generation algorithm is applied to solve problem (LP"(Q)). At each iteration the restricted LP Master Problem (LP"((~)) is solved giving an upper bound Z[p((~) on the value of the linear programming relaxation ZIp(Q). Taking an optimal dual solution (n, #, v), the subproblem (SW(n, #, v)) is then solved. If ~'"'~ &lt; 0 and (x, w) is an optimal solution, a new column q = x with cq = ex + fw is found, (~ is updated and a new iteration begins. If ~'"'~ = 0, (LP"(Q)) is solved, and either node u is pruned by standard arguments, or branching takes place.</p><p>In the latter case, let 2" be an optimal solution of (LP"(Q)). 2* is not integral. SEPARATION. Choose q* such that ~q~Q(q.~ 2* = :~ is fractional.</p><p>BRANCHING. Add two problems to the node list consisting of problem (P") plus the single constraint qeQ(q*) and (W) plus the single constraint qeQ(q*) respectively.</p><p>To establish that this algorithm can be implemented, we need to show that an appropriate vector q* can be found for the SEPARATION step, and that the subproblems at each node can be formulated as mixed integer programming problems.</p><p>Proposition 1. Given a feasible solution 2* of (W) that is not integral, there exists a vector q* ~ Z m such that y~q~o(q.) 2* is fractional.</p><p>Proof. Take q* to be any maximal (undominated) element of the set {q ~ Q: )t* ¢ z~+ }. Such an element always exists as Q is a finite set. Then Note that in practice it is desirable to choose a branching vector q* with as few positive components as possible, so as to minimize the changes in the subproblem.</p><p>As the set Q, the number of vectors qJ and scalars L j and K j -&lt; " ('-~Y4=~bi) are finite, and the problems (P") are more restricted at each level of the enumeration tree, it is easily verified that the integer programming column generation algorithm terminates finitely.</p><p>We terminate this section with some observations showing how the branching constraints, and additional subproblem constraints, simplify when K j and L j take their minimum and maximum values respectively. Observation 1. If K j = 0, then one can set 2q = 0 for all q e Q(qJ) in (pu), and set z j = 0 in the subproblem. The resulting set Xq~ reduces to x satisfying:</p><formula xml:id="formula_3">xl &lt;. (q{ --1) + (b i --q{ + 1)r/i, i 6 P+, (1 -t/i) &gt;/ 1, i~p + xrZ"~, qir{0,1}, i~P +,</formula><p>where P+ = {i ~ M: q~ &gt; 0}.</p><p>We can also bound K J. values for z[~. This means that it is of crucial importance to control the tailing-off effect.</p><p>Here we show how the basic algorithm can be adapted so as to partially tackle this drawback. First we need to obtain as tight a lower bound as possible on zip(Q) at each iteration. iltl i --f Observation 3. IfL j = mini: q~ ~ 1 (bi/q~), one can set 2q = 0 for all q ~ Q\Q(q~) satisfying y, i~rq i &gt; 0, and also set 2q = 0 for all q ~ Q(qJ) with ql &gt; q{ for some i E I. The resulting set XqJ reduces to (x, z j) satisfying xi = q~z 2, i r I, xi&gt;~q{z j, irP+\I, {0,1}.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Lower bounds for early termination of column generation</head><p>In practice, one of the well-known difficulties with column generation is the "tailing-off effect", namely the large number of iterations often needed to prove LP optimality. Potentially this can now happen at each node of the branch and bound tree, and what is more the subproblem to be solved at each iteration is now typically a difficult integer program. In addition it is our experience that the subproblem becomes considerably harder to solve as the dual variables converge to the optimal dual Proof. Dualizing all the constraints of (LPU(Q)) except for the initial cardinality constrainsts 0 6 G u n H" gives &gt;1 Z ibl + Z jt(J + vA j</p><formula xml:id="formula_4">ieM j~aUo j~H" o + min E [cq-E rqqi- E .gJ qEQ [ i~M jciGUo: q &gt;1 qJ subject to L ° ~&lt; ~ 2q &lt;~ K °, qeQ 2q~&gt;0, q~Q.</formula><p>The optimal solution of a two-sided cardinality knapsack problem: is min {K°7 *, L°7 * } where 7* -minq 7~. The claim now follows from the definition of (~'"'~. [] Note that when (~,u,~ = 0, z[v(Q) = LB "'u' v. Lasdon <ref type="bibr" target="#b9">[10]</ref> and <ref type="bibr">Farley [4]</ref> have also proposed lower bounds. The Lagrangian bound proposed above is a minor strengthening of that of Lasdon. Farley's is different in that it is based on rescaling of the dual variables n, and may often require the solution of an additional subproblem.</p><p>To make precise the potential value of a good lower bound, we suppose that the optimal value z of (P) is integral as in many applications, and that a best feasible solution of value z ~Nc has been found as well as a best possible lower bound zip on zip(Q), namely the largest value of LB ~'"'~ over the previous iterations. This leads to Observation 4. If ~Z~a] 7&gt; zip(0), then z"/&gt; [zip(O)-] = ~z[p(Q)], so further work at node u will not produce a better lower bound, and column generation at the node can be terminated. (~'"'" &gt; max{f1/K°, 61/L°} -#o -Vo = pl, and thus the constraint ~'"'* ~ p~ can be added. The other case is identical using Observation 5 in place of Observation 4. [] Note that when z is not restricted to be integer valued, the lower bound LB ~' ~' ~ can still be used in a similar way.</p><p>The basic algorithm can be modified based on the results of this section. Observation 4 can be used after solving the restricted Master LP to possibly terminate column generation, and Observation 5 to possibly prune the node. Then using the latest values of (n, #, v), p can be calculated, and used to introduce a cutoff constraint on the subproblem value. If the subproblem is infeasible, then again column generation terminates, and in addition the node is pruned if p---p2. The implicit bound used at each node is [-zip(Q)-].</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">The 0-1 case</head><p>Various aspects of the algorithm can be simplified when Q c__ {0, 1}", i.e. all the columns are 0-1 vectors corresponding to some subset of M = {1,...,m}. Let b = maxib i.</p><p>First we examine the branching rule.</p><p>Proposition 5. The branching vector q* ~ {0, 1} ~ can be chosen so that ~i~ 1 q* &lt;~ l) + 1.</p><p>Proof. From Observation 4, the lower bound for node u cannot be improved if rLB~'U'v~ &gt;~ ZIp(Q). This is equivalent to the condition LB~'"'~&gt; [-z[p((~)-] -1 or written explicitly: Proof. Let )~* be the current fractional solution.</p><p>Choose a minimal vector q* with ~q: q ~&gt; q, 2* = ~¢ Z 1 and let S* = {i: q/* = 1}. Without loss of generality, suppose that S*= {1,...,r}. Consider the partial sums '*=f~, s= 1 ..... r.</p><p>q: qi = 1, ie{1, .., ,s}</p><p>By hypothesis fs e Z 1 for s = 1 .... , r-1, as q* is minimal.</p><p>If the values of fs are distinct, we have f~&gt;f~+l+l for s=l .... ,r-2 and f,-l&gt;f, =~&gt;0. Thusfl ~&gt;r-l. Asb~&gt;bl =fl, weob-tainr~b+ 1.</p><p>Otherwise f~ =f~_ 1 for some s = 2 .... , r. Then y, = q: qi = 1, i~{1 ..... s} q: ql = 1, i~{1 ..... s-1}</p><p>But then</p><formula xml:id="formula_5">Z = = q: qi : |, ieS* q: qi = 1, i~S*\ {S)</formula><p>and q* is not minimal, a contradiction. [] With q~{O, 1} m, the additional constraints needed in the subproblem also simplify, and the auxiliary variables ql needed in Proposition 2 can be eliminated. Observation 6. Xp = {(x, z): x e {0, 1} m, z ~ {0, 1},</p><formula xml:id="formula_6">z ~ xi ifpi = 1, z ~&gt; 1 -Y,i:p,=l (1 -xl)}.</formula><p>Observations 1 and 3 also simplify.</p><p>Specializing further, now suppose that b = 1, i.e. bi = 1 for all i ~ M. Combining Proposition 5 with Observations 7 and 8 leads to one of the important branching schemes. Proposition 6 (Ryan and Foster <ref type="bibr">[13]</ref>). When = 1, if 2 is a fractional solution of (LW(Q)), then there exists a pair of rows {u, v} c M such that if q* is defined by q* = q* = 1 and q* = 0 otherwise. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Implementation</head><p>The algorithm and branching rule presented in Section 2 have been implemented as described with the branching pairs (qJ, K J), (q J, L j) chosen so that the support of qJ is as small as possible. Results for a small sample of cutting stock instances are presented in Table <ref type="table" target="#tab_0">1</ref>. The columns specify the name of the instance with the number of different items and the number of different types of rolls, then the number of nodes processed in the Branch and Bound algorithm, the number of Master iterations, the total number of columns generated, the number of times the subproblem is solved, the LP and IP values, the total CPU time (on a HP9000/712/80 using CPLEX 3.0), and finally the percentage of the total time spent in solving subproblems. The first five instances in Table <ref type="table" target="#tab_0">1</ref> are standard one-dimensional cutting stock problems, while the last five are instances of a model due to Hurkens <ref type="bibr" target="#b7">[8]</ref>, in which each roll is different and the cost of a cutting pattern is the size of the unused strip.</p><p>As one would expect, the last column shows that nearly all the computation time is spent in solving the mixed integer subproblems with a standard optimizer. We note that no instance has required using a separation with I P + [ &gt; 1. Instance 4b7c has been solved by Hurkens using MINTO and a special purpose algorithm for the subproblem. His algorithm runs about 10 times faster on this instance, but requires about twice as many nodes in the enumeration tree.</p><p>The early termination rules of Section 3 have also been implemented. Representative results from <ref type="bibr" target="#b16">[17]</ref> for five instances of a telecommunications (edge partitioning) model described in Sutter et al. <ref type="bibr" target="#b14">[15]</ref> are presented in Table <ref type="table">2</ref>. The first column gives the name of the instance including the number of nodes and edges in the network, the second the basic running time (CPU time in seconds on a Sparc 10 model 51, using CPLEX 2.1), the third the running time using the lower bound, and finally the time with both lower bound and subproblem cutoff.</p><p>More extensive computational results on different problems, branching rules, early termination, etc., can be found in companion papers. Several applications concerning the installation of multiplexing equipment are reported in Sutter et al. <ref type="bibr" target="#b14">[15]</ref> involving both b = 1 and general b. Results on implementation choices, heuristics and computational experience on different models including graph partitioning and multi-item lot-sizing are reported in Vanderbeck <ref type="bibr" target="#b16">[17]</ref>. Vanderbeck <ref type="bibr" target="#b17">[18]</ref> includes further computational results on the cutting stock problem and practical comparison of branching rules.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Further remarks</head><p>We emphasize that the algorithm presented in Section 2 generates an optimal integer solution for problem (P) even when the columns of Q are general integer, and not just 0-1, vectors. This means that the column generation scheme may have to generate points x e Q = projx(W) that are not extreme points of conv (Q), but are optimal subproblem solutions. This apparent contradiction is resolved once auxiliary variables w are permitted, and additional constraints or variables are added in the subproblem at node u of the enumeration tree.</p><p>An alternative and natural interpretation of the branching scheme proposed above is to introduce auxiliary integer variables y(qJ)= ~q~t2(qs)J.q, and then branch on the variables y(qJ). Such variables often arise naturally and may be a subset of the variables w appearing in the feasible region W of the subproblem: for instance in graph partitioning with b = 1, M is the set of nodes, and the choice of a pair {u, v} of nodes can be interpreted as branching on edge variables yuv where Yuv = 1 if both nodes u and v lie in the same set of the partition, and Yuv = 0 if (u, v) is an edge of the corresponding multicut.</p><p>A second possibility is to combine the above algorithm with the polyhedral approach by adding cutting planes to the Master IP problem (P). Again taking the graph partitioning problem as an example, let Zu~ = 1 -y,v represent the incidence vector of the multicut. Several families of valid inequalities Ye~E rruvZ,v &gt;~ rCo for the multicut polytope are known, so cuts Y,e~ 7ruv(1 -yu~) &gt;~ rCo can be added to (P), and the subproblems modified appropriately. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>(</head><label></label><figDesc>, S0167-6377/96/$15.00 Copyright © 1996 Elsevier Science B.V. All rights reserved PII S01 67-6377(96)00033-8</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>"* 1</head><label>1</label><figDesc>Y~q~Q~q.),~ ¢Z+ as the only fractional term in this sum is )~q*. [] Now we need to show that sets of the form Xp = { (x, z): z = 1 if x ~&gt; p, z = 0 otherwise} with p~Z~ can be formulated as MIPs. Let P + = {i ~ M: Pl &gt; 0} be the support of p. We introduce variables r/i for i ~ P+ where r/~ = 1 if x~ &gt;/p~ and ~/i = 0 if x~ &lt; pl. Proposition 2. Xp is the set of (x, z) satisfying Pirl i ~ Xi ~ (Pi --1) + (bi -Pi + 1)t/i, i E P+, z &lt;~ rl i, i e P +, ~&gt;1-S (1-~'), xeZ~, ze{0,1}, t/'e{0,1}, ieP +</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Proposition 3 .</head><label>3</label><figDesc>Given(n,/~, v) ~ R m x R'_a'l x RI+ H'I, ZIp(Q) &gt;i LB ~'~'~ = min{K°(~ ~'~'~ +/~o + Vo), L°(~ "'~'~ + Po + Vo)} + Y~i~urcibi + ~.;~opjK ~ + Z~; v~LJ) • Observation 2. K j ~&lt; min;: q~ &gt;~ ~Lbi/q{J as ql j Y,q~Q~¢) 2q &lt;~ Y,.~Qt¢~ qi2q &lt;~ ~,q~O qi2q = bi for all i ~ M such that q~ ~&gt; 1. Now suppose that for some j ~ H ", L j takes its maximum possible value as defined in Observa-= • b J tion 2, i.e. L i mini: qi~ ~&gt; 1 Lbl/q~J. If mini: q~ &gt;~ ~ ~ i/qiJ =mini:q~&gt;11(bi/q~), then let I={i: q~/&gt;l and b/~J-L j~ ¢~b.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Observation 5 .Proposition 4 .</head><label>54</label><figDesc>If~z[p~ ) ziNC, then Z" ) ziNC, and node u can be pruned.Observations 4 and 5 can be used once the subproblem at an iteration has been solved. What can be concluded a priori before solving the subproblem? Let Pl = max{fl/K °, 61/L ° } -#o -vo where 6,=[-ztp(Q)l-1-~,nibi-The constraint (or cutoff) ~'"'~ &lt;~ p can be added to the subproblem. If the subproblem is then infeasible, column generation terminates. If in addition p = P2, node u can be pruned.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>ff ~'"'* +#o + Vo), L°(( ~'"'~ + #o + Vo)} &gt; Fzt O.)q -1 or K°(~ ~'u'* + #o + Vo) &gt; 6~ and L°(~ ~'"'~ + #o + Vo) &gt; 6~. This in turn can be written as ~'"'* &gt; (61/K°) -#o -vo and ~'"'" &gt; (61/L °) -#o-Vo. Thus no improvement is obtained if</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>1 Observation 8 .</head><label>18</label><figDesc>(i) 0 &lt; Eq~Q~q*~2q &lt; 1, (ii) in the separation step, on one branch ~q~O~q*) )~q = 0 can be represented implicitly by removing all columns with q~ = q~ = 1, and adding the subproblem constraint xu + xv &lt;~ 1, (iii) on the other branch ~q~Q~¢)2q = 1 can be represented implicitly by removing all columns with q~ + q~ = 1, and adding the subproblem constraint Xu = Xv. Observation 7. If K j = 0, then one can set 2q = 0 for all q ~ Q(q~) in (P"), and drop z j in the subproblem. The resulting set XqJ reduces to x satisfying i: q~= 1 i= If L J = mini: q~= 1 bl for some j e H u, let I= {i: q~= l andbi=L j} # 0. Then one can set 2q = 0 for all q e Q\Q(qJ) satisfying ~i~tqi &gt; O, and auxiliary variables are no longer needed in the subprblem. Xqi reduces to x satisfying {x e {0, 1}m: xi ~ xk for all i, k with q{ = qJ = l andkEI}.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1</head><label>1</label><figDesc></figDesc><table><row><cell>Instance</cell><cell>BBnod</cell><cell>Mits</cell><cell>cols</cell><cell>SPs</cell><cell>LP</cell><cell>IP</cell><cell>Time</cell><cell>%SP</cell></row><row><cell>4bl</cell><cell>5</cell><cell>14</cell><cell>10</cell><cell>12</cell><cell>6.74</cell><cell>7</cell><cell>1.0 s</cell><cell>73.1</cell></row><row><cell>10bl</cell><cell>8</cell><cell>26</cell><cell>18</cell><cell>21</cell><cell>13.75</cell><cell>14</cell><cell>7 s</cell><cell>92.4</cell></row><row><cell>14b!</cell><cell>27</cell><cell>70</cell><cell>43</cell><cell>47</cell><cell>50.63</cell><cell>51</cell><cell>55 s</cell><cell>97.5</cell></row><row><cell>15bl</cell><cell>24</cell><cell>77</cell><cell>54</cell><cell>57</cell><cell>25.35</cell><cell>26</cell><cell>2 m 6 s</cell><cell>98.9</cell></row><row><cell>20bl</cell><cell>20</cell><cell>72</cell><cell>50</cell><cell>55</cell><cell>115.05</cell><cell>116</cell><cell>1 m 39 s</cell><cell>98.6</cell></row><row><cell>3b3</cell><cell>5</cell><cell>8</cell><cell>13</cell><cell>9</cell><cell>0</cell><cell>0</cell><cell>0.3 s</cell><cell>33.3</cell></row><row><cell>4b7c</cell><cell>1417</cell><cell>1741</cell><cell>546</cell><cell>7798</cell><cell>792055</cell><cell>1 674031</cell><cell>2 h 6 m 32 s</cell><cell>98.6</cell></row><row><cell>4b7</cell><cell>401</cell><cell>1065</cell><cell>474</cell><cell>3780</cell><cell>1054</cell><cell>1462</cell><cell>48 m 52 s</cell><cell>98.8</cell></row><row><cell>467d</cell><cell>7</cell><cell>31</cell><cell>64</cell><cell>119</cell><cell>81 843</cell><cell>Infeas.</cell><cell>19 s</cell><cell>97,4</cell></row><row><cell>4b7e</cell><cell>77</cell><cell>120</cell><cell>156</cell><cell>735</cell><cell>188 890</cell><cell>433 274</cell><cell>8 m 44 s</cell><cell>99,5</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>We are grateful to C, Hurkens, M. Savelsbergh, and a referee for their helpful comments and criticism, and to C. Hurkens for providing information and data for the generalized cutting stock model.</p></div>
			</div>


			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>1 This text presents research results of the Belgian programme on interuniversity poles of attraction, PAl contract no. 26, initiated by the Belgian state, Prime Minister's Office, Science Policy Programming. The scientific responsibility is assumed by its authors. This research was supported in part by Science Program SC1-CT91-620 of the EEC, and F. Vanderbeck was partially supported by a doctoral fellowship from the Centre Interuniversitaire d'Etudes Doctorales dans les Sciences du Management (CIM).</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Branch and price: Column generation for solving huge integer programs</title>
		<author>
			<persName><forename type="first">C</forename><surname>Barnhart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">L</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">L</forename><surname>Nemhauser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">W P</forename><surname>Savelsbergh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computational Optimization Center COC-94-03</title>
		<imprint>
			<date type="published" when="1994-02">February 1994 (revised May 1995</date>
		</imprint>
		<respStmt>
			<orgName>Georgia Institute of Technology, Atlanta</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Decomposition principle for linear programs</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">B</forename><surname>Dantzig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Wolfe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Oper. Res</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page">111</biblScope>
			<date type="published" when="1960">1960</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Time constrained routing and scheduling</title>
		<author>
			<persName><forename type="first">J</forename><surname>Desrosiers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Dumas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M</forename><surname>Solomon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Soumis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Handbooks in Operations Research and Management Science: Net works</title>
		<editor>
			<persName><forename type="first">M</forename><forename type="middle">E</forename><surname>Ball</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">T</forename><surname>Magnanti</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">C</forename><surname>Monma</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">G</forename><forename type="middle">L</forename><surname>Nemhauser</surname></persName>
		</editor>
		<meeting><address><addrLine>North-Holland, Amsterdam</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1990">1990</date>
			<biblScope unit="page">11</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A note on bounding a class of linear programming problems, including cutting stock problems</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>Farley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Oper. Res</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="page">923</biblScope>
			<date type="published" when="1990">1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A linear programming approach to the cutting stock problem</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">C</forename><surname>Gilmore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">E</forename><surname>Gomory</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Oper. Res</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="849" to="859" />
			<date type="published" when="1961">1961</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A linear programming approach to the cutting stock problem: Part II</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">C</forename><surname>Gilmore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">E</forename><surname>Gomory</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Oper. Res</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="863" to="888" />
			<date type="published" when="1963">1963</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Mixed integer column generation and the probabilistic maximum satisfiability problem</title>
		<author>
			<persName><forename type="first">P</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Jaumard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Poggi De Aragao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IPC02</title>
		<meeting>IPC02<address><addrLine>Pittsburg</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1992">1992</date>
			<biblScope unit="page" from="165" to="180" />
		</imprint>
		<respStmt>
			<orgName>Carnegie-Mellon University</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">C</forename><surname>Hurkens</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
	<note>private communication</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Min-cut clustering</title>
		<author>
			<persName><forename type="first">E</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">L</forename><surname>Mehrotra</surname></persName>
		</author>
		<author>
			<persName><surname>Nemhauser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Math. Programming</title>
		<imprint>
			<biblScope unit="volume">62</biblScope>
			<biblScope unit="page" from="133" to="152" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<author>
			<persName><surname>Ls</surname></persName>
		</author>
		<author>
			<persName><surname>Lasdon</surname></persName>
		</author>
		<title level="m">Optimization Theory for Large Systems, Macmillan</title>
		<meeting><address><addrLine>London</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1970">1970</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Optimal trees</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">L</forename><surname>Magnanti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">A</forename><surname>Wolsey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Network Models</title>
		<title level="s">Handbooks in Operations Research and Managament Science</title>
		<editor>
			<persName><forename type="first">M</forename><surname>Ball</surname></persName>
		</editor>
		<meeting><address><addrLine>North-Holland, Amsterdam</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="volume">7</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A class of combinatorial optimization problems with polynomially solvable large scale set-covering/partitioning relaxations</title>
		<author>
			<persName><forename type="first">M</forename><surname>Minoux</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">RAIRO</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="105" to="136" />
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">An integer programming approach to scheduling</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">M</forename><surname>Ryan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">A</forename><surname>Foster</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Scheduling of Public Transport Urban Passenger Vehicle and Crew Scheduling</title>
		<editor>
			<persName><forename type="first">A</forename><surname>Wren</surname></persName>
		</editor>
		<meeting><address><addrLine>North-Holland, Amsterdam</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1981">1981</date>
			<biblScope unit="page" from="269" to="280" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A branch and price algorithm for the generalized assignment problem</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">W P</forename><surname>Savelsbergh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computational Optimization Center COC-93-02</title>
		<meeting><address><addrLine>Atlanta</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1993">1993</date>
		</imprint>
		<respStmt>
			<orgName>Georgia Institute of Technology</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Optimal placement of add/drop multiplexers: Heuristic and exact algorithms</title>
		<author>
			<persName><forename type="first">A</forename><surname>Sutter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Vanderbeck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">A</forename><surname>Wolsey</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994">1994</date>
			<pubPlace>Louvain-la-Neuve</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Universit6 Catholique de Louvain</orgName>
		</respStmt>
	</monogr>
	<note>Core Discussion Paper 9479</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Solving binary cutting stock problems by column generation and branch-and-bound</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">H</forename><surname>Vance</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Barnhart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">L</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">L</forename><surname>Nemhauser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Optim. Appl</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="111" to="130" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Decomposition and column generation for integer programs</title>
		<author>
			<persName><forename type="first">F</forename><surname>Vanderbeck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Facult6 des Sciences Appliqres</title>
		<meeting><address><addrLine>Louvain-la-Neuve</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994">1994</date>
		</imprint>
		<respStmt>
			<orgName>Universit6 Catholique de Louvain</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. Thesis</note>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">On integer programming decomposition and ways to enforce integrality in the master</title>
		<author>
			<persName><forename type="first">F</forename><surname>Vanderbeck</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995-09">September 1995 (revised April 1996</date>
		</imprint>
		<respStmt>
			<orgName>University of Cambridge</orgName>
		</respStmt>
	</monogr>
	<note>Research Papers in Management Studies 1994-95 No. 29</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
