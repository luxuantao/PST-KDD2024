<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Under review as a conference paper at ICLR 2021 DENOISING DIFFUSION IMPLICIT MODELS</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<title level="a" type="main">Under review as a conference paper at ICLR 2021 DENOISING DIFFUSION IMPLICIT MODELS</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2022-12-25T13:19+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Denoising diffusion probabilistic models (DDPMs) have achieved high quality image generation without adversarial training, yet they require simulating a Markov chain for many steps in order to produce a sample. To accelerate sampling, we present denoising diffusion implicit models (DDIMs), a more efficient class of iterative implicit probabilistic models with the same training procedure as DDPMs. In DDPMs, the generative process is defined as the reverse of a particular Markovian diffusion process. We generalize DDPMs via a class of non-Markovian diffusion processes that lead to the same training objective. These non-Markovian processes can correspond to generative processes that are deterministic, giving rise to implicit models that produce high quality samples much faster. We empirically demonstrate that DDIMs can produce high quality samples 10× to 50× faster in terms of wall-clock time compared to DDPMs, allow us to trade off computation for sample quality, perform semantically meaningful image interpolation directly in the latent space, and reconstruct observations with very low error.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Deep generative models have demonstrated the ability to produce high quality samples in many domains <ref type="bibr" target="#b19">(Karras et al., 2020;</ref><ref type="bibr" target="#b34">van den Oord et al., 2016a)</ref>. In terms of image generation, generative adversarial networks (GANs, <ref type="bibr" target="#b9">Goodfellow et al. (2014)</ref>) currently exhibits higher sample quality than likelihood-based methods such as variational autoencoders <ref type="bibr" target="#b20">(Kingma &amp; Welling, 2013)</ref>, autoregressive models <ref type="bibr" target="#b35">(van den Oord et al., 2016b)</ref> and normalizing flows <ref type="bibr" target="#b26">(Rezende &amp; Mohamed, 2015;</ref><ref type="bibr" target="#b8">Dinh et al., 2016)</ref>. However, GANs require very specific choices in optimization and architectures in order to stabilize training <ref type="bibr" target="#b0">(Arjovsky et al., 2017;</ref><ref type="bibr" target="#b12">Gulrajani et al., 2017;</ref><ref type="bibr" target="#b18">Karras et al., 2018;</ref><ref type="bibr" target="#b4">Brock et al., 2018)</ref>, and could fail to cover modes of the data distribution <ref type="bibr">(Zhao et al., 2018)</ref>.</p><p>Recent works on iterative generative models <ref type="bibr" target="#b2">(Bengio et al., 2014)</ref>, such as denoising diffusion probabilistic models (DDPM, <ref type="bibr" target="#b14">Ho et al. (2020)</ref>) and noise conditional score networks (NCSN, <ref type="bibr" target="#b32">Song &amp; Ermon (2019)</ref>) have demonstrated the ability to produce samples comparable to that of GANs, without having to perform adversarial training. To achieve this, many denoising autoencoding models are trained to denoise samples corrupted by various levels of Gaussian noise. Samples are then produced by a Markov chain which, starting from white noise, progressively denoises it into an image. This generative Markov Chain process is either based on Langevin dynamics <ref type="bibr" target="#b32">(Song &amp; Ermon, 2019)</ref> or obtained by reversing a forward diffusion process that progressively turns an image into noise <ref type="bibr" target="#b31">(Sohl-Dickstein et al., 2015)</ref>.</p><p>A critical drawback of these models is that they require many iterations to produce a high quality sample. For DDPMs, this is because that the generative process (from noise to data) approximates the reverse of the forward diffusion process (from data to noise), which could have thousands of steps; iterating over all the steps is required to produce a single sample, which is much slower compared to GANs, which only needs one pass through a network. For example, it takes around 20 hours to sample 50k images of size 32 × 32 from a DDPM, but less than a minute to do so from a GAN on a Nvidia 2080 Ti GPU. This becomes more problematic for larger images as sampling 50k images of size 256 × 256 could take nearly 1000 hours on the same GPU.</p><p>To close this efficiency gap between DDPMs and GANs, we present denoising diffusion implicit models (DDIMs). DDIMs are implicit probabilistic models <ref type="bibr" target="#b22">(Mohamed &amp; Lakshminarayanan, 2016)</ref> and are closely related to DDPMs, in the sense that they are trained with the same objective function. In Section 3, we generalize the forward diffusion process used by DDPMs, which is Markovian, to non-Markovian ones, for which we are still able to design suitable reverse generative Markov chains. We show that the resulting variational training objectives have a shared surrogate objective, which is exactly the objective used to train DDPM. Therefore, we can freely choose from a large family of generative models using the same neural network simply by choosing a different, non-Markovian diffusion process (Section 4.1) and the corresponding reverse generative Markov Chain.</p><p>In particular, we are able to use non-Markovian diffusion processes which lead to "short" generative Markov chains (Section 4.2) that can be simulated in a small number of steps. This can massively increase sample efficiency only at a minor cost in sample quality.</p><p>In Section 5, we demonstrate several empirical benefits of DDIMs over DDPMs. First, DDIMs have superior sample generation quality compared to DDPMs, when we accelerate sampling by 10× to 100× using our proposed method. Second, DDIM samples have the following "consistency" property, which does not hold for DDPMs: if we start with the same initial latent variable and generate several samples with Markov chains of various lengths, these samples would have similar high-level features. Third, because of "consistency" in DDIMs, we can perform semantically meaningful image interpolation by manipulating the initial latent variable in DDIMs, unlike DDPMs which interpolates near the image space due to the stochastic generative process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">BACKGROUND</head><p>Given samples from a data distribution q(x 0 ), we are interested in learning a model distribution p θ (x 0 ) that approximates q(x 0 ) and is easy to sample from. Denoising diffusion probabilistic models <ref type="bibr">(DDPMs, Sohl-Dickstein et al. (2015)</ref>; <ref type="bibr" target="#b14">Ho et al. (2020)</ref>) are latent variable models of the form p θ (x 0 ) = p θ (x 0:T )dx 1:T , where p θ (x 0:T ) := p θ (x T )</p><formula xml:id="formula_0">T t=1 p (t) θ (x t−1 |x t )<label>(1)</label></formula><p>where x 1 , . . . , x T are latent variables in the same sample space as x 0 (denoted as X ). The parameters θ are learned to fit the data distribution q(x 0 ) by maximizing a variational lower bound:</p><formula xml:id="formula_1">max θ E q(x0) [log p θ (x 0 )] ≤ max θ E q(x0,x1,...,x T ) [log p θ (x 0:T ) − log q(x 1:T |x 0 )]<label>(2)</label></formula><p>where q(x 1:T |x 0 ) is some inference distribution over the latent variables. Unlike typical latent variable models (such as the variational autoencoder (Rezende et al., 2014)), DDPMs are learned with a fixed (rather than trainable) inference procedure q(x 1:T |x 0 ), and latent variables are relatively high dimensional. For example, <ref type="bibr" target="#b14">Ho et al. (2020)</ref> considered the following Markov chain with Gaussian transitions parameterized by a decreasing sequence α 1:T ∈ (0, 1] T :</p><formula xml:id="formula_2">q(x 1:T |x 0 ) := T t=1 q(x t |x t−1 ), where q(x t |x t−1 ) := N α t α t−1 x t−1 , 1 − α t α t−1 I (3)</formula><p>where the covariance matrix is ensured to have positive terms on its diagonal. This is called the forward process due to the autoregressive nature of the sampling procedure (from x 0 to x T ). We call the latent variable model p θ (x 0:T ), which is a Markov chain that samples from x T to x 0 , the generative process, since it approximates the intractable reverse process q(x t−1 |x t ). Intuitively, the forward process progressively adds noise to the observation x 0 , whereas the generative process progressively denoises a noisy observation (Figure <ref type="figure" target="#fig_0">1</ref>, left).</p><p>A special property of the forward process is that q(x t |x 0 ) := q(x 1:t |x 0 )dx 1:(t−1) = N (x t ; √ α t x 0 , (1 − α t )I); so we can express x t as a linear combination of x 0 and a noise variable :</p><formula xml:id="formula_3">x t = √ α t x 0 + √ 1 − α t , where ∼ N (0, I).<label>(4)</label></formula><p>When we set α T sufficiently close to 0, q(x T |x 0 ) converges to a standard Gaussian for all x 0 , so it is natural to set p θ (x T ) := N (0, I). If all the conditionals are modeled as Gaussians with trainable mean functions and fixed variances, the objective in Eq. ( <ref type="formula" target="#formula_1">2</ref>) can be simplified to<ref type="foot" target="#foot_0">1</ref> :</p><formula xml:id="formula_4">L γ ( θ ) := T t=1 γ t E x0∼q(x0), t∼N (0,I) (t) θ ( √ α t x 0 + √ 1 − α t t ) − t 2 2</formula><p>(5)</p><formula xml:id="formula_5">where θ := { (t) θ } T t=1 is a set of T functions, each<label>(t)</label></formula><p>θ : X → X (indexed by t) is a function with trainable parameters θ (t) , and γ := [γ 1 , . . . , γ T ] is a vector of positive coefficients in the objective that depends on α 1:T . In <ref type="bibr" target="#b14">Ho et al. (2020)</ref>, the objective with γ = 1 is optimized instead to maximize generation performance of the trained model; this is also the same objective used in noise conditional score networks <ref type="bibr" target="#b32">(Song &amp; Ermon, 2019)</ref> based on score matching <ref type="bibr" target="#b15">(Hyvärinen, 2005;</ref><ref type="bibr" target="#b36">Vincent, 2011)</ref>. From a trained model, x 0 is sampled by first sampling x T from the prior p θ (x T ), and then sampling x t−1 from the generative processes iteratively.</p><p>The length T of the forward process is an important hyperparameter in DDPMs. From a variational perspective, a large T allows the reverse process to be close to a Gaussian <ref type="bibr" target="#b31">(Sohl-Dickstein et al., 2015)</ref>, so that the generative process modeled with Gaussian conditional distributions becomes a good approximation; this motivates the choice of large T values, such as T = 1000 in <ref type="bibr" target="#b14">Ho et al. (2020)</ref>. However, as all T iterations have to be performed sequentially, instead of in parallel, to obtain a sample x 0 , sampling from DDPMs is much slower than sampling from other deep generative models, which makes them impractical for tasks where compute is limited and latency is critical.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">VARIATIONAL INFERENCE FOR NON-MARKOVIAN FORWARD PROCESSES</head><p>Because the generative model approximates the reverse of the inference process, we need to rethink the inference process in order to reduce the number of iterations required by the generative model. Our key observation is that the DDPM objective in the form of L γ only depends on the marginals<ref type="foot" target="#foot_1">2</ref> q(x t |x 0 ), but not directly on the joint q(x 1:T |x 0 ). Since there are many inference distributions (joints) with the same marginals, we explore alternative inference processes that are non-Markovian, which leads to new generative processes (Figure <ref type="figure" target="#fig_0">1</ref>, right). These non-Markovian inference process lead to the same surrogate objective function as DDPM, as we will show below. In Appendix A, we show that the non-Markovian perspective also applies beyond the Gaussian case.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">NON-MARKOVIAN FORWARD PROCESSES</head><p>Let us consider a family Q of inference distributions, indexed by a real vector σ ∈ R T ≥0 :</p><formula xml:id="formula_6">q σ (x 1:T |x 0 ) := q σ (x T |x 0 ) T t=2 q σ (x t−1 |x t , x 0 )<label>(6)</label></formula><p>where</p><formula xml:id="formula_7">q σ (x T |x 0 ) = N ( √ α T x 0 , (1 − α T )I) and for all t &gt; 1, q σ (x t−1 |x t , x 0 ) = N √ α t−1 x 0 + 1 − α t−1 − σ 2 t • x t − √ α t x 0 √ 1 − α t , σ 2 t I .<label>(7)</label></formula><p>The mean function is chosen to order to ensure that q σ (x t |x 0 ) = N ( √ α t x 0 , (1 − α t )I) for all t (see Lemma 1 of Appendix B), so that it defines a joint inference distribution that matches the "marginals" as desired. The forward process<ref type="foot" target="#foot_2">3</ref> can be derived from Bayes' rule:</p><formula xml:id="formula_8">q σ (x t |x t−1 , x 0 ) = q σ (x t−1 |x t , x 0 )q σ (x t |x 0 ) q σ (x t−1 |x 0 ) ,<label>(8)</label></formula><p>which is also Gaussian (although we do not use this fact for the remainder of this paper). Unlike the diffusion process in Eq. ( <ref type="formula">3</ref>), the forward process here is no longer Markovian, since each x t could depend on both x t−1 and x 0 . The magnitude of σ controls the how stochastic the forward process is; when σ → 0, we reach an extreme case where as long as we observe x 0 and x t for some t, then x t−1 become known and fixed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">GENERATIVE PROCESS AND UNIFIED VARIATIONAL INFERENCE OBJECTIVE</head><p>Next, we define a trainable generative process p θ (x 0:T ) where each p</p><formula xml:id="formula_9">(t)</formula><p>θ (x t−1 |x t ) leverages knowledge of q σ (x t−1 |x t , x 0 ). Intuitively, given a noisy observation x t , we first make a prediction<ref type="foot" target="#foot_3">4</ref> of the corresponding x 0 , and then use it to obtain a sample x t−1 through the reverse conditional distribution q σ (x t−1 |x t , x 0 ), which we have defined.</p><p>For some x 0 ∼ q(x 0 ) and t ∼ N (0, I), x t can be obtained using Eq. ( <ref type="formula" target="#formula_3">4</ref>). The model</p><formula xml:id="formula_10">(t)</formula><p>θ (x t ) then attempts to predict t from x t , without knowledge of x 0 . By rewriting Eq. ( <ref type="formula" target="#formula_3">4</ref>), one can then predict the denoised observation, which is a prediction of x 0 given x t :</p><formula xml:id="formula_11">f (t) θ (x t ) := (x t − √ 1 − α t • (t) θ (x t ))/ √ α t .<label>(9)</label></formula><p>We can then define the generative process with a fixed prior p θ (x T ) = N (0, I) and</p><formula xml:id="formula_12">p (t) θ (x t−1 |x t ) = N (f (1) θ (x 1 ), σ 2 1 I) if t = 1 q σ (x t−1 |x t , f (t) θ (x t )) otherwise, (10) where q σ (x t−1 |x t , f (t) θ (x t )</formula><p>) is defined as in Eq. ( <ref type="formula" target="#formula_7">7</ref>) with x 0 replaced by f (t) θ (x t ). We add some Gaussian noise (with covariance σ 2 1 I) for the case of t = 1 to ensure that the generative process is supported everywhere.</p><p>We optimize θ via the following variational inference objective (which is a functional over θ ):</p><formula xml:id="formula_13">J σ ( θ ) := E x 0:T ∼qσ(x 0:T ) [log q σ (x 1:T |x 0 ) − log p θ (x 0:T )] (11) = E x 0:T ∼qσ(x 0:T ) q σ (x T |x 0 ) + T t=2 log q σ (x t−1 |x t , x 0 ) − T t=1 log p (t) θ (x t−1 |x t ) − log p θ (x T )</formula><p>where we factorize q σ (x 1:T |x 0 ) according to Eq. ( <ref type="formula" target="#formula_6">6</ref>) and p θ (x 0:T ) according to Eq. ( <ref type="formula" target="#formula_0">1</ref>).</p><p>From the definition of J σ , it would appear that a different model has to be trained for every choice of σ, since it corresponds to a different variational objective (and a different generative process). However, J σ is equivalent to L γ for certain weights γ, as we show below.</p><p>Theorem 1. For all σ &gt; 0, there exists γ ∈ R T &gt;0 and C ∈ R, such that</p><formula xml:id="formula_14">J σ = L γ + C.</formula><p>The variational objective L γ is special in the sense that if parameters θ of the models</p><formula xml:id="formula_15">(t)</formula><p>θ are not shared across different t, then the optimal solution for θ will not depend on the weights γ (as global optimum is achieved by separately maximizing each term in the sum). This property of L γ has two implications. On the one hand, this justified the use of L 1 as a surrogate objective function for the variational lower bound in DDPMs; on the other hand, since J σ is equivalent to some L γ from Theorem 1, the optimal solution of J σ is also the same as that of L 1 . Therefore, if parameters are not shared across t in the model θ , then the L 1 objective used by <ref type="bibr" target="#b14">Ho et al. (2020)</ref> can be used as a surrogate objective for the variational objective J σ as well. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">DENOISING DIFFUSION IMPLICIT MODELS</head><p>From p θ (x 1:T ) in Eq. ( <ref type="formula">10</ref>), one can generate a sample x t−1 from a sample x t−1 via:</p><formula xml:id="formula_16">x t−1 = √ α t−1 x t − √ 1 − α t (t) θ (x t ) √ α t " predicted x0" + 1 − α t−1 − σ 2 t • (t) θ (x t )</formula><p>"direction pointing to xt"</p><formula xml:id="formula_17">+ σ t t random noise (<label>12</label></formula><formula xml:id="formula_18">)</formula><p>where t ∼ N (0, I) is standard Gaussian noise independent of x t , and we define α 0 := 1. Different choices of σ values results in different generative processes, all while using the same model θ , so re-training the model is unnecessary.</p><formula xml:id="formula_19">When σ t = (1 − α t−1 )/(1 − α t ) 1 − α t /α t−1 for all t,</formula><p>the forward process becomes Markovian, and the generative process becomes a DDPM.</p><p>We note another special case when σ t = 0 for all t<ref type="foot" target="#foot_4">5</ref> ; the forward process becomes deterministic given x t−1 and x 0 , except for t = 1; in the generative process, the coefficient before the random noise t becomes zero. The resulting model becomes an implicit probabilistic model <ref type="bibr" target="#b22">(Mohamed &amp; Lakshminarayanan, 2016)</ref>, where samples are generated from latent variables with a fixed procedure (from x T to x 0 ). We name this the denoising diffusion implicit model (DDIM, pronounced /d:Im/), because it is an implicit probabilistic model trained with the DDPM objective (despite the forward process no longer being a diffusion).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">ACCELERATED GENERATION PROCESSES</head><p>In the previous sections, the generative process is considered as the approximation to the reverse process; since of the forward process has T steps, the generative process is also forced to sample T steps. However, as the denoising objective L 1 does not depend on the specific forward procedure as long as q σ (x t |x 0 ) is fixed, we may also consider forward processes with lengths smaller than T , which accelerates the corresponding generative processes without having to train a different model.</p><p>Let us consider the forward process as defined not on all the latent variables x 1:T , but on a subset {x τ1 , . . . , x τ S }, where τ is an increasing sub-sequence of [1, . . . , T ] of length S. In particular, we define the sequential forward process over x τ1 , . . . , x τ S such that q(x τi |x 0 ) = N ( √ α τi x 0 , (1 − α τi )I) matches the "marginals" (see Figure <ref type="figure" target="#fig_1">2</ref> for an illustration). The generative process now samples latent variables according to reversed(τ ), which we term (sampling) trajectory. When the length of the sampling trajectory is much smaller than T , we may achieve significant increases in computational efficiency due to the iterative nature of the sampling process.</p><p>Using a similar argument as in Section 3, we can justify using the model trained with the L 1 objective, so no changes are needed in training. We show that only slight changes to the updates in Eq. ( <ref type="formula" target="#formula_17">12</ref>) are needed to obtain the new, faster generative processes, which applies to DDPM, DDIM, as well as all generative processes considered in Eq. ( <ref type="formula">10</ref>). We include these details in Appendix C.1.</p><p>In principle, this means that we can train a model with an arbitrary number of forward steps but only sample from some of them in the generative process. Therefore, the trained model could consider many more steps than what is considered in <ref type="bibr" target="#b14">(Ho et al., 2020)</ref> or even a continuous time variable t <ref type="bibr" target="#b6">(Chen et al., 2020)</ref>. We leave empirical investigations of this aspect as future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">RELEVANCE TO NEURAL ODES</head><p>Moreover, we can rewrite the DDIM iterate according to Eq. ( <ref type="formula" target="#formula_17">12</ref>), and its similarity to Euler integration for solving ODEs becomes more apparent:</p><formula xml:id="formula_20">1 α t−1 x t−1 = 1 α t x t + 1 − α t−1 α t−1 − 1 − α t α t (t) θ (x t )<label>(13)</label></formula><p>We can reparameterize ( √ 1 − α/ √ α) with λ and (x/ √ α) with H(λ) then sampling x 0 with Equation (13) can be treated as integration over the following ODE:</p><formula xml:id="formula_21">H(0) = 0 M λ θ (H(λ) λ 2 − 1)dλ + H(M ), H(M ) ∼ N (0, I)<label>(14)</label></formula><p>for some very large M (which corresponds to the case of α ≈ 0). This suggests that with enough T (discretization steps), the we can also reverse the generation process (going from t = 0 to T ), which encodes x 0 to x T and simulates the reverse of the ODE in Eq. ( <ref type="formula" target="#formula_21">14</ref>). This suggests that unlike DDPM, we can use DDIM to obtain encodings of the observations (as the form of x T ), which might be useful for other downstream applications that requires latent representations of a model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">EXPERIMENTS</head><p>In this section, we show that DDIMs outperform DDPMs in terms of image generation when fewer iterations are considered, giving speed ups of 10× to 100× over the original DDPM generation process. Moreover, unlike DDPMs, once the initial latent variables x T are fixed, DDIMs retain highlevel image features regardless of the generation trajectory, so they are able to perform interpolation directly from the latent space. DDIMs can also be used to encode samples that reconstruct them from the latent code, which DDPMs cannot do due to the stochastic sampling process.</p><p>For each dataset, we use the same trained model with T = 1000 and the objective being L γ from Eq. ( <ref type="formula">5</ref>) with γ = 1; as we argued in Section 3, no changes are needed with regards to the training procedure. The only changes that we make is how we produce samples from the model; we achieve this by controlling τ (which controls how fast the samples are obtained) and σ (which interpolates between the deterministic DDIM and the stochastic DDPM).</p><p>We consider different sub-sequences τ of [1, . . . , T ] and different variance hyperparameters σ indexed by elements of τ . To simplify comparisons, we consider σ with the form:</p><formula xml:id="formula_22">σ τi (η) = η (1 − α τi−1 )(1 − α τi ) 1 − α τi /α τi−1 ,<label>(15)</label></formula><p>where η ∈ R ≥0 is a hyperparameter that we can directly control. This includes an original DDPM generative process when η = 1 and DDIM when η = 0. We also consider DDPM where the random noise has a larger standard deviation than σ(1), which we denote as σ: στi = 1 − α τi /α τi−1 . This is used by the implementation in <ref type="bibr" target="#b14">Ho et al. (2020)</ref> only to obtain the CIFAR10 samples, but not samples of the other datasets. We include more details in Appendix D.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">SAMPLE QUALITY AND EFFICIENCY</head><p>In Table <ref type="table" target="#tab_0">1</ref>, we report the quality of the generated samples with models trained on CIFAR10 and CelebA, as measured by Frechet Inception Distance (FID <ref type="bibr" target="#b13">(Heusel et al., 2017)</ref>), where we vary the number of timesteps used to generate a sample (dim(τ )) and the stochasticity of the process (η). As expected, the sample quality becomes higher as we increase dim(τ ), presenting a tradeoff between sample quality and computational costs. We observe that DDIM (η = 0) achieves the best sample quality when dim(τ ) is small, and DDPM (η = 1 and σ) typically has worse sample quality compared to its less stochastic counterparts with the same dim(τ ), except for the case for dim(τ ) = 1000 and σ reported by <ref type="bibr" target="#b14">Ho et al. (2020)</ref> where DDIM is marginally worse. However, the sample quality of σ becomes much worse for smaller dim(τ ), which suggests that it is ill-suited for shorter trajectories. DDIM, on the other hand, achieves high sample quality much more consistently.</p><p>In Figure <ref type="figure" target="#fig_3">3</ref>, we show CIFAR10 and CelebA samples with the same number of sampling steps and varying σ. For the DDPM, the sample quality deteriorates rapidly when the sampling trajectory has   10 steps. For the case of σ, the generated images seem to have more noisy perturbations under short trajectories; this explains why the FID scores are much worse than other methods, as FID is very sensitive to such perturbations (as discussed in Jolicoeur-Martineau et al. ( <ref type="formula">2020</ref>)).</p><p>In Figure <ref type="figure" target="#fig_4">4</ref>, we show that the amount of time needed to produce a sample scales linearly with the length of the sample trajectory. This suggests that DDIM is useful for producing samples more efficiently, as samples can be generated in much fewer steps. Notably, DDIM is able to produce samples with quality comparable to 1000 step models within 20 to 100 steps, which is a 10× to 50× speed up compared to the original DDPM. Even though DDPM could also achieve reasonable sample quality with 100× steps, DDIM requires much fewer steps to achieve this; on CelebA, the FID score of the 100 step DDPM is similar to that of the 20 step DDIM.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">SAMPLE CONSISTENCY IN DDIMS</head><p>For DDIM, the generative process is deterministic, and x 0 would depend only on the initial state x T .</p><p>In Figure <ref type="figure" target="#fig_6">5</ref>, we observe the generated images under different generative trajectories (i.e. different τ ) while starting with the same initial x T . Interestingly, for the generated images with the same initial x T , most high-level features are similar, regardless of the generative trajectory. In many cases, samples generated with only 20 steps are already very similar to ones generated with 1000 steps in terms of high-level features, with only minor differences in details. Therefore, it would appear that x T alone would be an informative latent encoding of the image; and minor details that affects sample quality are encoded in the parameters, as longer sample trajectories gives better quality samples but do not significantly affect the high-level features. We show more samples in Appendix D.4.   Since the high level features of the DDIM sample is encoded by x T , we are interested to see whether it would exhibit the semantic interpolation effect similar to that observed in other implicit probabilistic models, such as GANs <ref type="bibr" target="#b9">(Goodfellow et al., 2014)</ref>. This is different from the interpolation procedure in <ref type="bibr" target="#b14">Ho et al. (2020)</ref>, since in DDPM the same x T would lead to highly diverse x 0 due to the stochastic generative process<ref type="foot" target="#foot_5">6</ref> . In Figure <ref type="figure">6</ref>, we show that simple interpolations in x T can lead to semantically meaningful interpolations between two samples. We include more details and samples in Appendix D.5. This allows DDIM to control the generated images on a high level directly through the latent variables, which DDPMs cannot.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">RECONSTRUCTION FROM LATENT SPACE</head><p>As DDIM is the Euler integration for a particular ODE, it would be interesting to see whether it can encode from x 0 to x T (reverse of Eq. ( <ref type="formula" target="#formula_21">14</ref>)) and reconstruct x 0 from the resulting x T (forward Error 0.014 0.0065 0.0023 0.0009 0.0004 0.0001 0.0001 of Eq. ( <ref type="formula" target="#formula_21">14</ref>))<ref type="foot" target="#foot_6">7</ref> . We consider encoding and decoding on the CIFAR-10 test set with the CIFAR-10 model with S steps for both encoding and decoding; we report the per-dimension mean squared error (scaled to [0, 1]) in Table <ref type="table" target="#tab_1">2</ref>. Our results show that DDIMs have lower reconstruction error for larger S values and have properties similar to Neural ODEs and normalizing flows. The same cannot be said for DDPMs due to their stochastic nature.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">RELATED WORK</head><p>Our work is based on a large family of existing methods on learning generative models as transition operators of Markov chains <ref type="bibr" target="#b31">(Sohl-Dickstein et al., 2015;</ref><ref type="bibr" target="#b2">Bengio et al., 2014;</ref><ref type="bibr" target="#b29">Salimans et al., 2014;</ref><ref type="bibr">Song et al., 2017;</ref><ref type="bibr" target="#b10">Goyal et al., 2017;</ref><ref type="bibr" target="#b21">Levy et al., 2017)</ref>. Among them, denoising diffusion probabilistic models (DDPMs, <ref type="bibr" target="#b14">Ho et al. (2020)</ref>) and noise conditional score networks (NCSN, <ref type="bibr" target="#b32">Song &amp; Ermon (2019;</ref><ref type="bibr">2020)</ref>) have recently achieved high sample quality comparable to GANs <ref type="bibr" target="#b4">(Brock et al., 2018;</ref><ref type="bibr" target="#b18">Karras et al., 2018)</ref>. DDPMs optimize a variational lower bound to the log-likelihood, whereas NCSNs optimize the score matching objective <ref type="bibr" target="#b15">(Hyvärinen, 2005)</ref> over a nonparametric Parzen density estimator of the data <ref type="bibr" target="#b36">(Vincent, 2011;</ref><ref type="bibr" target="#b25">Raphan &amp; Simoncelli, 2011)</ref>.</p><p>Despite their different motivations, DDPMs and NCSNs are closely related. Both use a denoising autoencoder objective for many noise levels, and both use a procedure similar to Langevin dynamics to produce samples <ref type="bibr" target="#b23">(Neal et al., 2011)</ref>. Since Langevin dynamics is a discretization of a gradient flow <ref type="bibr" target="#b17">(Jordan et al., 1998)</ref>, both DDPM and NCSN require many steps to achieve good sample quality. This aligns with the observation that DDPM and existing NCSN methods have trouble generating high-quality samples in a few iterations.</p><p>DDIM, on the other hand, is an implicit generative model <ref type="bibr" target="#b22">(Mohamed &amp; Lakshminarayanan, 2016)</ref> where samples are uniquely determined from the latent variables. Hence, DDIM has certain properties that resemble GANs <ref type="bibr" target="#b9">(Goodfellow et al., 2014)</ref> and invertible flows <ref type="bibr" target="#b8">(Dinh et al., 2016)</ref>, such as the ability to produce semantically meaningful interpolations. We derive DDIM from a purely variational perspective, where the restrictions of Langevin dynamics are not relevant; this could partially explain why we are able to observe superior sample quality compared to DDPM under fewer iterations. The sampling procedure of DDIM is also reminiscent of neural networks with continuous depth <ref type="bibr">(Chen et al., 2018;</ref><ref type="bibr" target="#b11">Grathwohl et al., 2018)</ref>, since the samples it produces from the same latent variable have similar high-level visual features, regardless of the specific sample trajectory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">DISCUSSION</head><p>We have presented DDIMs -an implicit generative model trained with denoising auto-encoding / score matching objectives -from a purely variational perspective. DDIM is able to generate highquality samples much more efficiently than existing DDPMs and NCSNs, with the ability to perform meaningful interpolations from the latent space. The non-Markovian forward process presented here seems to suggest continuous forward processes other than Gaussian (which cannot be done in the original diffusion framework, since Gaussian is the only stable distribution with finite variance). We also demonstrated a discrete case with a multinomial forward process in Appendix A, and it would be interesting to investigate similar alternatives for other combinatorial structures.</p><p>Moreover, since the sampling procedure of DDIMs is similar to that of an neural ODE, it would be interesting to see if methods that decrease the discretization error in ODEs, including multistep methods such as <ref type="bibr">Adams-Bashforth (Butcher &amp; Goodwin, 2008)</ref>, could be helpful for further improving sample quality in fewer steps <ref type="bibr" target="#b24">(Queiruga et al., 2020)</ref>. It is also relevant to investigate whether DDIMs exhibit other properties of existing implicit models <ref type="bibr" target="#b1">(Bau et al., 2019)</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A NON-MARKOVIAN FORWARD PROCESSES FOR A DISCRETE CASE</head><p>In this section, we describe a non-Markovian forward processes for discrete data and corresponding variational objectives. Since the focus of this paper is to accelerate reverse models corresponding to the Gaussian diffusion, we leave empirical evaluations as future work.</p><p>For a categorical observation x 0 that is a one-hot vector with K possible values, we define the forward process as follows. First, we have q(x t |x 0 ) as the following multinomial distribution:</p><formula xml:id="formula_23">q(x t |x 0 ) = Multi(α t x 0 + (1 − α t )1 K )<label>(16)</label></formula><p>where 1 K ∈ R K is a vector with all entries being 1/K, and α t decreasing from α 0 = 1 for t = 0 to α T = 0 for t = T . Then we define q(x t−1 |x t , x 0 ) as the following mixture distribution:</p><formula xml:id="formula_24">q(x t−1 |x t , x 0 ) =    Multi(x t ) with probability σ t Multi(x 0 ) with probability (α t−1 − σ t α t ) Multi(1 K ) with probability (1 − α t−1 ) − (1 − α t )σ t ,<label>(17)</label></formula><p>or equivalently:</p><formula xml:id="formula_25">q(x t−1 |x t , x 0 ) = Multi (σ t x t + (α t−1 − σ t α t )x 0 + ((1 − α t−1 ) − (1 − α t )σ t )1 K ) ,<label>(18)</label></formula><p>which is consistent with how we have defined q(x t |x 0 ).</p><p>Similarly, we can define our reverse process p θ (x t−1 |x t ) as:</p><formula xml:id="formula_26">p θ (x t−1 |x t ) = Multi σ t x t + (α t−1 − σ t α t )f (t) θ (x t ) + ((1 − α t−1 ) − (1 − α t )σ t )1 K ,<label>(19) where f (t)</label></formula><p>θ (x t ) maps x t to a K-dimensional vector. As (1 − α t−1 ) − (1 − α t )σ t → 0, the sampling process will become less stochastic, in the sense that it will either choose x t or the predicted x 0 with high probability. The KL divergence</p><formula xml:id="formula_27">D KL (q(x t−1 |x t , x 0 ) p θ (x t−1 |x t ))<label>(20)</label></formula><p>is well-defined, and is simply the KL divergence between two multinomials. Therefore, the resulting variational objective function should be easy to optimize as well. Moreover, as KL divergence is convex, we have this upper bound (which is tight when the right hand side goes to zero):</p><formula xml:id="formula_28">D KL (q(x t−1 |x t , x 0 ) p θ (x t−1 |x t )) ≤ (α t−1 − σ t α t )D KL (Multi(x 0 ) Multi(f (t) θ (x t ))</formula><p>). The right hand side is simply a multi-class classification loss (up to constants), so we can arrive at similar arguments regarding how changes in σ t do not affect the objective (up to re-weighting).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B PROOFS</head><p>Lemma 1. For q σ (x 1:T |x 0 ) defined in Eq. ( <ref type="formula" target="#formula_6">6</ref>) and q σ (x t−1 |x t , x 0 ) defined in Eq. ( <ref type="formula" target="#formula_7">7</ref>), we have:</p><formula xml:id="formula_29">q σ (x t |x 0 ) = N ( √ α t x 0 , √ 1 − α t I)<label>(21)</label></formula><p>Proof. Assume for any t ≤ T , q σ (x</p><formula xml:id="formula_30">t |x 0 ) = N ( √ α t x 0 , √ 1 − α t I) holds, if: q σ (x t−1 |x 0 ) = N ( √ α t−1 x 0 , 1 − α t−1 I)<label>(22)</label></formula><p>then we can prove the statement with an induction argument for t from T to 1, since the base case (t = T ) already holds.</p><p>First, we have that</p><formula xml:id="formula_31">q σ (x t−1 |x 0 ) := xt q σ (x t |x 0 )q σ (x t−1 |x t , x 0 )dx t and q σ (x t |x 0 ) = N ( √ α t x 0 , (1 − α t )I) (23) q σ (x t−1 |x t , x 0 ) = N √ α t−1 x 0 + 1 − α t−1 − σ 2 t • x t − √ α t x 0 √ 1 − α t , σ 2 t I .<label>(24)</label></formula><p>From Bishop (2006) (2.115), we have that q(x t−1 |x 0 ) is Gaussian and</p><formula xml:id="formula_32">E[q σ (x t−1 |x 0 )] = √ α t−1 x 0 + 1 − α t−1 − σ 2 t • √ α t x 0 − √ α t x 0 √ 1 − α t (25) = √ α t−1 x 0<label>(26)</label></formula><p>and</p><formula xml:id="formula_33">Cov[q σ (x t−1 |x 0 )] = σ 2 t I + 1 − α t−1 − σ 2 t 1 − α t (1 − α t )I = (1 − α t−1 )I (27) Therefore, q σ (x t−1 |x 0 ) = N ( √ α t−1 x 0 , √ 1 − α t−1 I)</formula><p>, which allows us to apply the induction argument.</p><p>Theorem 1. For all σ &gt; 0, there exists γ ∈ R T &gt;0 and C ∈ R, such that J σ = L γ + C.</p><p>Proof. From the definition of J σ :</p><formula xml:id="formula_34">J σ ( θ ) := E x 0:T ∼q(x 0:T ) q σ (x T |x 0 ) + T t=2 log q σ (x t−1 |x t , x 0 ) − T t=1 log p (t) θ (x t−1 |x t ) (28) ≡ E x 0:T ∼q(x 0:T ) T t=2 D KL (q θ (x t−1 |x t , x 0 )) p (t) θ (x t−1 |x t )) − log p (1) θ (x 0 |x 1 )</formula><p>where we use ≡ to denote "equal up to a value that does not depend on θ (but may depend on q σ )".</p><p>For t &gt; 1:</p><formula xml:id="formula_35">E x0,xt∼q(x0,xt) [D KL (q σ (x t−1 |x t , x 0 )) p (t) θ (x t−1 |x t ))] = E x0,xt∼q(x0,xt) [D KL (q σ (x t−1 |x t , x 0 )) q σ (x t−1 |x t , f (t) θ (x t )))] = E x0,xt∼q(x0,xt)   x 0 − f (t) θ (x t ) 2 2 2σ 2 t   (29) = E x0∼q(x0), ∼N (0,I),xt= √ αtx0+ √ 1−αt   (x t − )/ √ α t − (x t − (t) θ (x t ))/ √ α t 2 2 2σ 2 t   (30) = E x0∼q(x0), ∼N (0,I),xt= √ αtx0+ √ 1−αt   − (t) θ (x t ) 2 2 2dσ 2 t α t   (<label>31</label></formula><formula xml:id="formula_36">)</formula><p>where d is the dimension of x 0 . For t = 0:</p><formula xml:id="formula_37">E x0,x1∼q(x0,x1) − log p (1) θ (x 0 |x 1 ) ≡ E x0,x1∼q(x0,x1)   x 0 − f (t) θ (x 1 ) 2 2 2σ 2 1   (32) = E x0∼q(x0), ∼N (0,I),x1= √ α1x0+ √ 1−αt   − (1) θ (x 1 ) 2 2 2dσ 2 1 α 1  <label>(33)</label></formula><p>Therefore, when γ t = 1/(2dσ 2 t α t ) for all t ∈ {1, . . . , T }, we have</p><formula xml:id="formula_38">J σ ( θ ) ≡ T t=1 1 2dσ 2 t α t E (t) θ (x t ) − t 2 2 = L γ ( θ )<label>(34)</label></formula><p>for all θ . From the definition of "≡", we have that J σ = L γ + C.</p><p>In this section, we use β t and α t to be more consistent with the derivation in <ref type="bibr" target="#b14">Ho et al. (2020)</ref>, where α t = α t α t−1 (43)</p><formula xml:id="formula_39">β t = 1 − α t α t−1 (44)</formula><p>can be uniquely determined from α t (i.e. ᾱt ).</p><p>First, from the diffusion forward process: </p><formula xml:id="formula_40">q(x t−1 |x t , x 0 ) = N √ α t−1 β t 1 − α t x 0 + α t (1 − α t−</formula><p>which can be simplified to: We consider 4 image datasets with various resolutions: CIFAR10 (32 × 32, unconditional), CelebA (64 × 64), LSUN Bedroom (256 × 256) and LSUN Church (256 × 256). For all datasets, we set the hyperparameters α according to the heuristic in <ref type="bibr" target="#b14">(Ho et al., 2020)</ref> to make the results directly comparable. We use the same model for each dataset, and only compare the performance of different generative processes. For CIFAR10, Bedroom and Church, we obtain the pretrained checkpoints from the original DDPM implementation; for CelebA, we trained our own model using the denoising objective L 1 .</p><formula xml:id="formula_42">L t−1 = E x0, β t 2 2σ 2 t (1 − α t )α t − θ ( √ α t x 0 + √ 1 − α t , t)</formula><p>Our architecture for (t) θ (x t ) follows that in <ref type="bibr" target="#b14">Ho et al. (2020)</ref>, which is a U-Net <ref type="bibr" target="#b28">(Ronneberger et al., 2015)</ref> based on a Wide ResNet <ref type="bibr">(Zagoruyko &amp; Komodakis, 2016)</ref>. We use the pretrained models from <ref type="bibr" target="#b14">Ho et al. (2020)</ref> for CIFAR10, Bedroom and Church, and train our own model for the CelebA 64 × 64 model (since a pretrained model is not provided). Our CelebA model has five feature map resolutions from 64 × 64 to 4 × 4, and we use the original CelebA dataset (not CelebA-HQ) using the pre-processing technique from the StyleGAN <ref type="bibr" target="#b18">(Karras et al., 2018)</ref> repository.       </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Graphical models for diffusion (left) and non-Markovian (right) inference models.</figDesc><graphic url="image-1.png" coords="2,43.45,55.45,555.17,81.64" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Graphical model for accelerated generation, where τ = [1, 3].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: CIFAR10 and CelebA samples with dim(τ ) = 10 and dim(τ ) = 100.</figDesc><graphic url="image-21.png" coords="7,132.09,236.06,69.86,69.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Hours to sample 50k images with one Nvidia 2080 Ti GPU and samples at different steps.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Samples from DDIM with the same random x T and different number of steps.</figDesc><graphic url="image-32.png" coords="8,134.55,241.97,365.55,60.79" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: CIFAR10 samples from 1000 step DDPM, 1000 step DDIM and 100 step DDIM.</figDesc><graphic url="image-38.png" coords="18,151.58,236.19,308.84,59.22" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: CelebA samples from 1000 step DDPM, 1000 step DDIM and 100 step DDIM.</figDesc><graphic url="image-41.png" coords="18,151.58,484.29,308.84,52.58" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: CelebA samples from DDIM with the same random x T and different number of steps.</figDesc><graphic url="image-42.png" coords="18,137.04,601.90,365.13,89.90" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: Church samples from 100 step DDPM and 100 step DDIM.</figDesc><graphic url="image-44.png" coords="19,151.58,238.50,308.84,116.23" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 11 :</head><label>11</label><figDesc>Figure 11: More interpolations from the CelebA DDIM with dim(τ ) = 50.</figDesc><graphic url="image-45.png" coords="19,187.20,443.43,237.60,237.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 12 :</head><label>12</label><figDesc>Figure 12: More interpolations from the Bedroom DDIM with dim(τ ) = 50.</figDesc><graphic url="image-46.png" coords="20,187.20,112.62,237.59,237.59" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 13 :</head><label>13</label><figDesc>Figure 13: More interpolations from the Church DDIM with dim(τ ) = 50.</figDesc><graphic url="image-47.png" coords="20,187.20,440.60,237.59,237.59" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>CIFAR10 and CelebA image generation measured in FID. η = 1.0 and σ are cases of DDPM (although Ho et al. (2020) only considered T = 1000 steps, and S &lt; T can be seen as simulating DDPMs trained with S steps), and η = 0.0 indicates DDIM.</figDesc><table><row><cell></cell><cell></cell><cell></cell><cell cols="3">CIFAR10 (32 × 32)</cell><cell></cell><cell></cell><cell cols="3">CelebA (64 × 64)</cell></row><row><cell></cell><cell>S</cell><cell>10</cell><cell>20</cell><cell>50</cell><cell>100</cell><cell>1000</cell><cell>10</cell><cell>20</cell><cell>50</cell><cell>100</cell><cell>1000</cell></row><row><cell></cell><cell cols="2">0.0 13.36</cell><cell>6.84</cell><cell>4.67</cell><cell>4.16</cell><cell>4.04</cell><cell>17.33</cell><cell>13.73</cell><cell>9.17</cell><cell>6.53</cell><cell>3.51</cell></row><row><cell>η</cell><cell cols="2">0.2 14.04 0.5 16.66</cell><cell>7.11 8.35</cell><cell>4.77 5.25</cell><cell>4.25 4.46</cell><cell>4.09 4.29</cell><cell>17.66 19.86</cell><cell>14.11 16.06</cell><cell>9.51 11.01</cell><cell>6.79 8.09</cell><cell>3.64 4.28</cell></row><row><cell></cell><cell cols="2">1.0 41.07</cell><cell>18.36</cell><cell>8.01</cell><cell>5.78</cell><cell>4.73</cell><cell>33.12</cell><cell>26.03</cell><cell>18.48</cell><cell>13.93</cell><cell>5.98</cell></row><row><cell></cell><cell>σ</cell><cell cols="3">367.43 133.37 32.72</cell><cell>9.99</cell><cell>3.17</cell><cell cols="3">299.71 183.83 71.71</cell><cell>45.20</cell><cell>3.26</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 :</head><label>2</label><figDesc>Reconstruction error with DDIM on CIFAR-10 test set, rounded to 10 −4 .</figDesc><table><row><cell>S</cell><cell>10</cell><cell>20</cell><cell>50</cell><cell>100</cell><cell>200</cell><cell>500</cell><cell>1000</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>May 2016. Shengjia Zhao, Hongyu Ren, Arianna Yuan, Jiaming Song, Noah Goodman, and Stefano Ermon. Bias and generalization in deep generative models: An empirical study. In Advances in Neural Information Processing Systems, pp. 10792-10801, 2018.</figDesc><table><row><cell>Sergey Zagoruyko and Nikos Komodakis.</cell><cell>Wide residual networks.</cell><cell>arXiv preprint</cell></row><row><cell>arXiv:1605.07146,</cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head></head><label></label><figDesc>(x t−1 |x t ) = N (µ θ (x t , t), σ t I) (45)which leads to the following variational objective:L := E x 0:T ∼q(x 0:T ) q(x T |x 0 ) +</figDesc><table><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">1 − α t</cell><cell>1 )</cell><cell>x t</cell><cell>,</cell><cell>1 − α t−1 1 − α t</cell><cell>β t I</cell></row><row><cell></cell><cell></cell><cell></cell><cell cols="3">μ(xt,x0)</cell></row><row><cell cols="6">Ho et al. (2020) considered a specific type of p (t) θ (x t−1 |x t ):</cell></row><row><cell>p</cell><cell>(t)</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>T</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>log p (t)</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>t=1</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>(t)</cell><cell>− log p</cell><cell>(1) θ (x 0 |x 1 )  </cell></row><row><cell></cell><cell></cell><cell></cell><cell>Lt−1</cell><cell></cell><cell></cell></row><row><cell>One can write:</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>(47)</cell></row><row><cell cols="3">Ho et al. (2020) chose the parametrization</cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="2">µ θ (x t , t) =</cell><cell>1 √ α t</cell><cell>x t −</cell><cell>√</cell><cell>β t 1 − α t</cell><cell>θ (x</cell></row></table><note>θ T t=2 log q(x t−1 |x t , x 0 ) − θ (x t−1 |x t ) (46) ≡ E x 0:T ∼q(x 0:T )    T t=2 D KL (q(x t−1 |x t , x 0 )) p θ (x t−1 |x t )) t , t)</note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0">Please refer to Appendix C.2 for details.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1">We slightly abuse this term (as well as joints) when only conditioned on x0.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_2">We overload the term "forward process" for cases where the inference model is not a diffusion.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_3">SAMPLING FROM GENERALIZED GENERATIVE PROCESSESWith L 1 as the objective, we are not only learning a generative process for the Markovian inference process considered in<ref type="bibr" target="#b31">Sohl-Dickstein et al. (2015)</ref> and<ref type="bibr" target="#b14">Ho et al. (2020)</ref>, but also generative processes for many non-Markovian forward processes parametrized by σ that we have described. Therefore, we can essentially use pretrained DDPM models as the solutions to the new objectives, and focus on finding a generative process that is better at producing samples subject to our needs by changing σ.4  Learning a distribution over the predictions is also possible, but empirically we found little benefits of it.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_4">Although this case is not covered in Theorem 1, we can always approximate it by making σt very small.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_5">Although it might be possible if one interpolates all T noises, like what is done in<ref type="bibr" target="#b33">Song &amp; Ermon (2020)</ref>.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="7" xml:id="foot_6">Since xT and x0 have the same dimensions, their compression qualities are not our immediate concern.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="8" xml:id="foot_7">In this section we use teal to color notations used in<ref type="bibr" target="#b14">Ho et al. (2020)</ref>.</note>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C ADDITIONAL DERIVATIONS C.1 ACCELERATED SAMPLING PROCESSES</head><p>In the accelerated case, we can consider the inference process to be factored as:</p><p>where τ is a sub-sequence of [1, . . . , T ] of length S with τ S = T , and let τ := {1, . . . , T } \ τ be its complement. Intuitively, the graphical model of {x τi } S i=1 and x 0 form a chain, whereas the graphical model of {x t } t∈τ and x 0 forms a star graph. We define:</p><p>where the coefficients are chosen such that:</p><p>i.e., the "marginals" match.</p><p>The corresponding "generative process" is defined as:</p><p>in variational objective <ref type="bibr">(38)</ref> where only part of the models are actually being used to produce samples. The conditionals are:</p><p>where we leverage q σ,τ (x τi−1 |x τi , x 0 ) as part of the inference process (similar to what we have done in Section 3). The resulting variational objective becomes (define x τ L+1 = ∅ for conciseness):</p><p>where each KL divergence is between two Gaussians with variance independent of θ. A similar argument to the proof used in Theorem 1 can show that the variational objective J can also be converted to an objective of the form L γ .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C.2 DERIVATION OF DENOISING OBJECTIVES FOR DDPMS</head><p>We note that in <ref type="bibr" target="#b14">Ho et al. (2020)</ref>, a diffusion hyperparameter β t 8 is first introduced, and then relevant variables α t := 1 − β t and ᾱt = T t=1 α t are defined. In this paper, we have used the notation α t to represent the variable ᾱt in <ref type="bibr" target="#b14">Ho et al. (2020)</ref> for three reasons. First, it makes it more clear that we only need to choose one set of hyperparameters, reducing possible cross-references of the derived variables. Second, it allows us to introduce the generalization as well as the acceleration case easier, because the inference process is no longer motivated by a diffusion. Third, there exists an isomorphism between α 1:T and 1, . . . , T , which is not the case for β t . We consider two types of selection procedure for τ given the desired dim(τ ) &lt; T :</p><p>• Linear: we select the timesteps such that τ i = ci for some c;</p><p>• Quadratic: we select the timesteps such that τ i = ci 2 for some c.</p><p>The constant value c is selected such that τ −1 is close to T . We used quadratic for CIFAR10 and linear for the remaining datasets. These choices achieve slightly better FID than their alternatives in the respective datasets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D.3 CLOSED FORM EQUATIONS FOR EACH SAMPLING STEP</head><p>From the general sampling equation in Eq. ( <ref type="formula">12</ref>), we have the following update equation:</p><p>where</p><p>For the case of σ (DDPM with a larger variance), the update equation becomes:</p><p>which uses a different coefficient for compared with the update for η = 1, but uses the same coefficient for the non-stochastic parts. This update is more stochastic than the update for η = 1, which explains why it achieves worse performance when dim(τ ) is small.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D.4 SAMPLES AND CONSISTENCY</head><p>We show more samples in Figure <ref type="figure">7</ref>  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D.5 INTERPOLATION</head><p>To generate interpolations on a line, we randomly sample two initial x T values from the standard Gaussian, interpolate them with spherical linear interpolation <ref type="bibr" target="#b30">(Shoemake, 1985)</ref>, and then use the DDIM to obtain x 0 samples.</p><p>where θ = arccos</p><p>T ) x</p><p>(1) T</p><p>x (0) T</p><p>x</p><p>(1) T</p><p>. These values are used to produce DDIM samples.</p><p>To generate interpolations on a grid, we sample four latent variables and separate them in to two pairs; then we use slerp with the pairs under the same α, and use slerp over the interpolated samples across the pairs (under an independently chosen interpolation coefficient). We show more grid interpolation results in Figure <ref type="figure">11</ref> (CelebA), Figure <ref type="figure">12</ref> (Bedroom), and Figure <ref type="figure">13</ref> (Church).</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Martin</forename><surname>Arjovsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Soumith</forename><surname>Chintala</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Léon</forename><surname>Bottou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gan</forename><surname>Wasserstein</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1701.07875</idno>
		<imprint>
			<date type="published" when="2017-01">January 2017</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Seeing what a gan cannot generate</title>
		<author>
			<persName><forename type="first">David</forename><surname>Bau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jun-Yan</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonas</forename><surname>Wulff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">William</forename><surname>Peebles</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hendrik</forename><surname>Strobelt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bolei</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Antonio</forename><surname>Torralba</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Conference on Computer Vision</title>
				<meeting>the IEEE International Conference on Computer Vision</meeting>
		<imprint>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="4502" to="4511" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Deep generative stochastic networks trainable by backprop</title>
		<author>
			<persName><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Eric</forename><surname>Laufer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Guillaume</forename><surname>Alain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jason</forename><surname>Yosinski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Machine Learning</title>
				<imprint>
			<date type="published" when="2014-01">January 2014</date>
			<biblScope unit="page" from="226" to="234" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Pattern recognition and machine learning</title>
		<author>
			<persName><forename type="first">M</forename><surname>Christopher</surname></persName>
		</author>
		<author>
			<persName><surname>Bishop</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006">2006</date>
			<publisher>springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Large scale GAN training for high fidelity natural image synthesis</title>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Brock</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jeff</forename><surname>Donahue</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Karen</forename><surname>Simonyan</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1809.11096</idno>
		<imprint>
			<date type="published" when="2018-09">September 2018</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Numerical methods for ordinary differential equations</title>
		<author>
			<persName><forename type="first">John</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Charles</forename><surname>Butcher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nicolette</forename><surname>Goodwin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008">2008</date>
			<publisher>Wiley Online Library</publisher>
			<biblScope unit="volume">2</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName><forename type="first">Nanxin</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yu</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Heiga</forename><surname>Zen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ron</forename><forename type="middle">J</forename><surname>Weiss</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mohammad</forename><surname>Norouzi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">William</forename><surname>Chan</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2009.00713</idno>
		<title level="m">WaveGrad: Estimating gradients for waveform generation</title>
				<imprint>
			<date type="published" when="2020-09">September 2020</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<author>
			<persName><forename type="first">T Q</forename><surname>Ricky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yulia</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jesse</forename><surname>Rubanova</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Bettencourt</surname></persName>
		</author>
		<author>
			<persName><surname>Duvenaud</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1806.07366</idno>
		<title level="m">Neural ordinary differential equations</title>
				<imprint>
			<date type="published" when="2018-06">June 2018</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<author>
			<persName><forename type="first">Laurent</forename><surname>Dinh</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1605.08803</idno>
		<title level="m">Jascha Sohl-Dickstein, and Samy Bengio. Density estimation using real NVP</title>
				<imprint>
			<date type="published" when="2016-05">May 2016</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Generative adversarial nets</title>
		<author>
			<persName><forename type="first">Ian</forename><surname>Goodfellow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jean</forename><surname>Pouget-Abadie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mehdi</forename><surname>Mirza</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bing</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Warde-Farley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sherjil</forename><surname>Ozair</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aaron</forename><surname>Courville</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in neural information processing systems</title>
				<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="2672" to="2680" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Variational walkback: Learning a transition operator as a stochastic recurrent net</title>
		<author>
			<persName><forename type="first">Anirudh</forename><surname>Goyal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nan</forename><forename type="middle">Rosemary</forename><surname>Ke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Surya</forename><surname>Ganguli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
				<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="4392" to="4402" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<author>
			<persName><forename type="first">Will</forename><surname>Grathwohl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T Q</forename><surname>Ricky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jesse</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ilya</forename><surname>Bettencourt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName><surname>Duvenaud</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1810.01367</idno>
		<title level="m">FFJORD: Free-form continuous dynamics for scalable reversible generative models</title>
				<imprint>
			<date type="published" when="2018-10">October 2018</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Improved training of wasserstein gans</title>
		<author>
			<persName><forename type="first">Ishaan</forename><surname>Gulrajani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Faruk</forename><surname>Ahmed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Martin</forename><surname>Arjovsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aaron</forename><forename type="middle">C</forename><surname>Vincent Dumoulin</surname></persName>
		</author>
		<author>
			<persName><surname>Courville</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
				<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="5769" to="5779" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">GANs trained by a two Time-Scale update rule converge to a local nash equilibrium</title>
		<author>
			<persName><forename type="first">Martin</forename><surname>Heusel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hubert</forename><surname>Ramsauer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Thomas</forename><surname>Unterthiner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bernhard</forename><surname>Nessler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sepp</forename><surname>Hochreiter</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1706.08500</idno>
		<imprint>
			<date type="published" when="2017-06">June 2017</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Jonathan</forename><surname>Ho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ajay</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pieter</forename><surname>Abbeel</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2006.11239</idno>
		<imprint>
			<date type="published" when="2020-06">June 2020</date>
		</imprint>
	</monogr>
	<note type="report_type">Denoising diffusion probabilistic models. arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Estimation of Non-Normalized statistical models by score matching</title>
		<author>
			<persName><forename type="first">Aapo</forename><surname>Hyvärinen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Researc h</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="695" to="709" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Adversarial score matching and improved sampling for image generation</title>
		<author>
			<persName><forename type="first">Alexia</forename><surname>Jolicoeur-Martineau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rémi</forename><surname>Piché-Taillefer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Rémi Tachet des Combes, and Ioannis Mitliagkas</title>
				<imprint>
			<date type="published" when="2020-09">September 2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">The variational formulation of the fokkerplanck equation</title>
		<author>
			<persName><forename type="first">Richard</forename><surname>Jordan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Kinderlehrer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Felix</forename><surname>Otto</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM journal on mathematical analysis</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="17" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">A Style-Based generator architecture for generative adversarial networks</title>
		<author>
			<persName><forename type="first">Tero</forename><surname>Karras</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Samuli</forename><surname>Laine</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Timo</forename><surname>Aila</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1812.04948</idno>
		<imprint>
			<date type="published" when="2018-12">December 2018</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Analyzing and improving the image quality of stylegan</title>
		<author>
			<persName><forename type="first">Tero</forename><surname>Karras</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Samuli</forename><surname>Laine</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Miika</forename><surname>Aittala</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Janne</forename><surname>Hellsten</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jaakko</forename><surname>Lehtinen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Timo</forename><surname>Aila</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition</title>
				<meeting>the IEEE/CVF Conference on Computer Vision and Pattern Recognition</meeting>
		<imprint>
			<date type="published" when="2020">2020</date>
			<biblScope unit="page" from="8110" to="8119" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">P</forename><surname>Diederik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Max</forename><surname>Kingma</surname></persName>
		</author>
		<author>
			<persName><surname>Welling</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1312.6114v10</idno>
		<imprint>
			<date type="published" when="2013-12">December 2013</date>
		</imprint>
	</monogr>
	<note type="report_type">Auto-Encoding variational bayes. arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<author>
			<persName><forename type="first">Daniel</forename><surname>Levy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matthew</forename><forename type="middle">D</forename><surname>Hoffman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jascha</forename><surname>Sohl-Dickstein</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1711.09268</idno>
		<title level="m">Generalizing hamiltonian monte carlo with neural networks</title>
				<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<author>
			<persName><forename type="first">Shakir</forename><surname>Mohamed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Balaji</forename><surname>Lakshminarayanan</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1610.03483</idno>
		<title level="m">Learning in implicit generative models</title>
				<imprint>
			<date type="published" when="2016-10">October 2016</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Mcmc using hamiltonian dynamics. Handbook of markov chain monte carlo</title>
		<author>
			<persName><forename type="first">Neal</forename><surname>Radford</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="volume">2</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<author>
			<persName><forename type="first">Alejandro</forename><forename type="middle">F</forename><surname>Queiruga</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dane</forename><surname>Benjamin Erichson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><forename type="middle">W</forename><surname>Taylor</surname></persName>
		</author>
		<author>
			<persName><surname>Mahoney</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2008.02389</idno>
		<title level="m">Continuousin-depth neural networks</title>
				<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Least squares estimation without priors or supervision</title>
		<author>
			<persName><forename type="first">Martin</forename><surname>Raphan</surname></persName>
		</author>
		<author>
			<persName><surname>Eero</surname></persName>
		</author>
		<author>
			<persName><surname>Simoncelli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Neural computation</title>
		<idno type="ISSN">0899-7667</idno>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="1530" to="888X" />
			<date type="published" when="2011-02">February 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<author>
			<persName><forename type="first">Danilo</forename><surname>Jimenez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rezende</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Shakir</forename><surname>Mohamed</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1505.05770</idno>
		<title level="m">Variational inference with normalizing flows</title>
				<imprint>
			<date type="published" when="2015-05">May 2015</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Stochastic backpropagation and approximate inference in deep generative models</title>
		<author>
			<persName><forename type="first">Danilo</forename><surname>Jimenez Rezende</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shakir</forename><surname>Mohamed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Daan</forename><surname>Wierstra</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1401.4082</idno>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">U-net: Convolutional networks for biomedical image segmentation</title>
		<author>
			<persName><forename type="first">Olaf</forename><surname>Ronneberger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Philipp</forename><surname>Fischer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Thomas</forename><surname>Brox</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Medical image computing and computerassisted intervention</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="234" to="241" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Markov chain monte carlo and variational inference: Bridging the gap</title>
		<author>
			<persName><forename type="first">Tim</forename><surname>Salimans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Diederik</forename><forename type="middle">P</forename><surname>Kingma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Max</forename><surname>Welling</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1410.6460</idno>
		<imprint>
			<date type="published" when="2014-10">October 2014</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Animating rotation with quaternion curves</title>
		<author>
			<persName><forename type="first">Ken</forename><surname>Shoemake</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 12th annual conference on Computer graphics and interactive techniques</title>
				<meeting>the 12th annual conference on Computer graphics and interactive techniques</meeting>
		<imprint>
			<date type="published" when="1985">1985</date>
			<biblScope unit="page" from="245" to="254" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Deep unsupervised learning using nonequilibrium thermodynamics</title>
		<author>
			<persName><forename type="first">Jascha</forename><surname>Sohl-Dickstein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Eric</forename><forename type="middle">A</forename><surname>Weiss</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Niru</forename><surname>Maheswaranathan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Surya</forename><surname>Ganguli</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1503.03585</idno>
		<idno>arXiv:1706.07561</idno>
	</analytic>
	<monogr>
		<title level="m">Jiaming Song, Shengjia Zhao, and Stefano Ermon. A-nice-mc: Adversarial training for mcmc</title>
				<imprint>
			<date type="published" when="2015-03">March 2015. June 2017</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Generative modeling by estimating gradients of the data distribution</title>
		<author>
			<persName><forename type="first">Yang</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stefano</forename><surname>Ermon</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1907.05600</idno>
		<imprint>
			<date type="published" when="2019-07">July 2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Improved techniques for training Score-Based generative models</title>
		<author>
			<persName><forename type="first">Yang</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stefano</forename><surname>Ermon</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2006.09011</idno>
		<imprint>
			<date type="published" when="2020-06">June 2020</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<author>
			<persName><forename type="first">Aaron</forename><surname>Van Den Oord</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sander</forename><surname>Dieleman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Heiga</forename><surname>Zen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Karen</forename><surname>Simonyan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Oriol</forename><surname>Vinyals</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alex</forename><surname>Graves</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nal</forename><surname>Kalchbrenner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Senior</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Koray</forename><surname>Kavukcuoglu</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1609.03499</idno>
		<title level="m">WaveNet: A generative model for raw audio</title>
				<imprint>
			<date type="published" when="2016-09">September 2016a</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">Pixel recurrent neural networks</title>
		<author>
			<persName><forename type="first">Aaron</forename><surname>Van Den Oord</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nal</forename><surname>Kalchbrenner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Koray</forename><surname>Kavukcuoglu</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1601.06759</idno>
		<imprint>
			<date type="published" when="2016-01">January 2016b</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title level="m" type="main">A connection between score matching and denoising autoencoders</title>
		<author>
			<persName><forename type="first">Pascal</forename><surname>Vincent</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="1661" to="1674" />
		</imprint>
	</monogr>
	<note>Neural computation</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
