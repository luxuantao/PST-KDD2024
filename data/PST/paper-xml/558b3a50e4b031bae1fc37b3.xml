<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">The Automatic Design of Multiobjective Ant Colony Optimization Algorithms</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Manuel</forename><surname>López-Ibáñez</surname></persName>
							<email>manuel.lopez-ibanez@ulb.ac.be</email>
							<affiliation key="aff0">
								<orgName type="department">Institut de Recherches Interdisciplinaires et de Développements en Intelligence Artificielle</orgName>
								<orgName type="institution">Université libre de Bruxelles</orgName>
								<address>
									<postCode>1050</postCode>
									<settlement>Brussels</settlement>
									<country key="BE">Belgium</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Thomas</forename><surname>Stützle</surname></persName>
							<email>stuetzle@ulb.ac.be</email>
							<affiliation key="aff0">
								<orgName type="department">Institut de Recherches Interdisciplinaires et de Développements en Intelligence Artificielle</orgName>
								<orgName type="institution">Université libre de Bruxelles</orgName>
								<address>
									<postCode>1050</postCode>
									<settlement>Brussels</settlement>
									<country key="BE">Belgium</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">The Automatic Design of Multiobjective Ant Colony Optimization Algorithms</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">A2D278CB063588E5F08B388308C843A9</idno>
					<idno type="DOI">10.1109/TEVC.2011.2182651</idno>
					<note type="submission">received March 14, 2011; revised November 10, 2011; accepted December 13, 2011. Date of publication February 10, 2012; date of current version November 27, 2012.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T10:03+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Ant colony optimization (ACO)</term>
					<term>automatic algorithm configuration</term>
					<term>multiobjective optimization</term>
					<term>traveling salesman problem</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Multiobjective optimization problems are problems with several, typically conflicting, criteria for evaluating solutions. Without any a priori preference information, the Pareto optimality principle establishes a partial order among solutions, and the output of the algorithm becomes a set of nondominated solutions rather than a single one. Various ant colony optimization (ACO) algorithms have been proposed in recent years for solving such problems. These multiobjective ACO (MOACO) algorithms exhibit different design choices for dealing with the particularities of the multiobjective context. This paper proposes a formulation of algorithmic components that suffices to describe most MOACO algorithms proposed so far. This formulation also shows that existing MOACO algorithms often share equivalent design choices, but they are described in different terms. Moreover, this formulation is synthesized into a flexible algorithmic framework, from which not only existing MOACO algorithms may be instantiated, but also combinations of components that were never studied in the literature. In this sense, this paper goes beyond proposing a new MOACO algorithm, but it rather introduces a family of MOACO algorithms. The flexibility of the proposed MOACO framework facilitates the application of automatic algorithm configuration techniques. The experimental results presented in this paper show that the automatically configured MOACO framework outperforms the MOACO algorithms that inspired the framework itself. This paper is also among the first to apply automatic algorithm configuration techniques to multiobjective algorithms.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. Introduction</head><p>A NT COLONY optimization (ACO) [1] is a metaheuristic inspired by the pheromone trail laying and following behavior of some real ant species. ACO was originally designed for solving single-objective combinatorial optimization problems. Due to notable results on these problems, ACO algorithms were soon extended to tackle problems with more complex features <ref type="bibr" target="#b1">[2]</ref> and, in particular, multiple objective functions <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b3">[4]</ref>. The majority of these multiobjective ACO (MOACO) algorithms focus on problems in terms of Pareto optimality, that is, they do not make a priori assumptions about the decision maker's preferences. Moreover, most of these MOACO algorithms were proposed for bi-objective optimization problems, and, hence, these will be the focus of this paper.</p><p>Compared to the substantial amount of research on evolutionary computation and local search algorithms for tackling multiobjective optimization problems, there are relatively few works on MOACO algorithms. Most articles propose only one specific MOACO algorithm <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b5">[6]</ref>; rare are studies that compare a few MOACO design alternatives <ref type="bibr" target="#b6">[7]</ref>- <ref type="bibr" target="#b8">[9]</ref>. A first review of existing MOACO algorithms included about ten MOACO algorithms <ref type="bibr" target="#b3">[4]</ref>. It identified, among the ones proposed in the literature, the best MOACO algorithm adapted to a particular problem in a traditional "horse-race" experimental analysis. The algorithms tested in that review differ substantially with respect to the underlying ACO algorithm, e.g., some of them are based on the classical ant system <ref type="bibr" target="#b9">[10]</ref>, whereas others build upon the typically better performing MAX-MIN ant system (MMAS) <ref type="bibr" target="#b10">[11]</ref> and ant colony system (ACS) <ref type="bibr" target="#b11">[12]</ref>. Therefore, it is difficult to conclude anything about the specific design of each MOACO algorithm. A more recent review <ref type="bibr" target="#b2">[3]</ref> categorizes existing MOACO algorithms into several classes without any empirical comparison.</p><p>This paper integrates and extends our recent work on MOACO algorithms <ref type="bibr" target="#b12">[13]</ref>- <ref type="bibr" target="#b14">[15]</ref>, which has advanced in several directions. As a first step, we present an algorithmic framework that synthesizes many of the design choices proposed in the literature and that offers new possibilities never considered before. This framework allows us to instantiate existing MOACO algorithms by properly configuring the MOACO framework. More importantly, it allows us to combine ideas from different MOACO algorithms to produce new ones. A first insight from the use of this framework is that existing MOACO algorithms share more algorithmic components than the respective publications may suggest. A second contribution is that we can devise more powerful combinations of algorithmic components and, at the same time, we can assess the influence of each design choice on performance. In addition, the flexibility of this framework facilitates the application of automatic techniques for configuring multiobjective algorithms. Most previous works that aim to produce high performing algorithms by combining a flexible 1089-778X/$31.00 c 2012 IEEE software framework and an automatic configuration tool have dealt so far only with single-objective optimization problems <ref type="bibr" target="#b15">[16]</ref>. We proposed integrating the hypervolume indicator into the iterated F-race tool (I/F-Race) <ref type="bibr" target="#b16">[17]</ref>, <ref type="bibr" target="#b17">[18]</ref> in order to automatically configure our MOACO framework for tackling the bi-objective traveling salesman problem (bTSP) <ref type="bibr" target="#b14">[15]</ref>. The integration of unary quality indicators such as hypervolume and epsilon measure into I/F-Race allows us to automatically configure multiobjective algorithms with many continuous, categorical and conditional parameters for an optimization problem, given a set of representative instances of this problem. Independently, Wessing et al. <ref type="bibr" target="#b18">[19]</ref> presented results for configuring a multiobjective evolutionary algorithm using the hypervolume indicator. However, they considered only a single parameter, the variation operator, and configured the algorithm on a single instance; thus, their approach is prone to overtuning <ref type="bibr" target="#b19">[20]</ref>. In this paper, we show that, by automatically configuring a flexible framework that synthesizes design concepts from different MOACO algorithms, we are able to find new designs of MOACO algorithms for the bTSP that outperform the MOACO algorithms found in the literature. Our results demonstrate the effectiveness of the usage of automatic algorithm configuration techniques for the design of stochastic local search algorithms <ref type="bibr" target="#b20">[21]</ref> for multiobjective optimization problems in terms of Pareto-optimality.</p><p>This paper is structured as follows. Section II introduces basic concepts that will be used throughout this paper. We present a general MOACO framework for bi-objective combinatorial optimization problems in Section III. The components of this framework correspond to different alternative choices in the design of a MOACO algorithm. Next, we describe in Section IV how the existing framework is able to replicate the design of most MOACO algorithms proposed in the literature.</p><p>In Section V, we propose a method to automatically configure the MOACO framework for a particular bi-objective problem. The problem chosen is the bTSP, and we compare the results to the best MOACO configurations proposed in the literature. In particular, we perform a more comprehensive automatic configuration and comparison than the preliminary one described in our previous work <ref type="bibr" target="#b14">[15]</ref>. Finally, in addition to the proposed configuration of the framework for the bTSP, we extract some general conclusions from this paper and describe steps to exploit our proposals in Section VII.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. Preliminaries A. Bi-Objective Combinatorial Optimization</head><p>We propose here a framework based on ACO for tackling bi-objective combinatorial optimization problems (bCOPs) in terms of Pareto optimality. In such bCOPs, candidate solutions are evaluated according to an objective function vector f = (f 1 , f 2 ). Without a priori assumptions on the preferences of the decision maker, the goal is to determine a set of feasible solutions that "minimizes" the objective function vector f . Let u and v be vectors in R 2 . We say that u dominates v ( u ≺ v) iff u v and u i ≤ v i , i = 1, 2. Furthermore, u and v are nondominated iff u ⊀ v and v ⊀ u. To simplify the notation, we also say that a feasible solution s dominates another solution s iff f (s) ≺ f (s ). A solution s is a Pareto optimum iff no other feasible solution s exists such that f (s ) ≺ f (s). The goal in bCOPs then typically is to determine the set of all Pareto-optimal solutions. However, this task is usually computationally intractable, and, hence, it is preferable to approximate the Pareto set as well as possible in a given amount of time. Such an approximation is always a set of solutions that are mutually nondominated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. bTSP</head><p>The single-objective TSP is one of the most important combinatorial optimization problems and it is used as a case study in the development of many ACO algorithms. In the TSP, we are given a complete graph G = (V, E) with n = |V | nodes {v 1 , . . . , v n }, a set of edges E that fully connects the nodes, and a cost c(v i , v j ) associated with each edge. The goal is to find a Hamiltonian tour p = (p 1 , . . . , p n ) that minimizes the total cost</p><formula xml:id="formula_0">minimize f (p) = c v p n , v p 1 + n-1 i=1 c v p i , v p i+1 . (1)</formula><p>The bTSP is the direct extension of the above formulation. For each edge, a vector of costs is given with two components c 1 (v i , v j ) and c 2 (v i , v j ), i j, which correspond to the cost of the first and the second objective, respectively. We consider here the symmetric bTSP, where it additionally holds that c q (v i , v j ) = c q (v j , v i ), i j, q = 1, 2. We assume not to have a priori knowledge of the preferences of the decision maker. Therefore, the goal is to find the set of Hamiltonian tours that minimizes, in the sense of Pareto optimality, the vector of objective functions f = (f 1 , f 2 ). The bTSP is often used as a benchmark problem for testing multiobjective combinatorial optimization algorithms <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b12">[13]</ref>, <ref type="bibr" target="#b21">[22]</ref>- <ref type="bibr" target="#b23">[24]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. ACO</head><p>The ACO metaheuristic <ref type="bibr" target="#b0">[1]</ref> describes a number of algorithms inspired by the swarm behavior of real ants species. In ACO algorithms, a number of artificial ants construct candidate solutions to a problem. The construction decisions of the ants are biased by a common numerical information called (artificial) pheromone. This pheromone is updated according to the quality of the solutions constructed by the ants in order to bias the construction of new solutions in subsequent iterations. In particular, an ant constructs a candidate solution to a problem by iteratively adding solution components to its partial solution in a stochastic fashion. In the case of the TSP, the probability that an ant k chooses to visit node j after node i is given by</p><formula xml:id="formula_1">p k ij = τ ij α • η ij β l∈N k i [τ il ] α • [η il ] β if j ∈ N k i (2)</formula><p>where τ ij is the pheromone associated with adding the edge (i, j) to the current partial tour, η ij is a static greedy measure of the "goodness" of edge (i, j) called heuristic information, and N k i denotes the set of feasible choices available for ant k located in node i given its current partial solution. After a number of ants have constructed a solution each, one or more of these solutions are used to update the pheromone information in such a way so as to bias future choices toward high quality solutions. It is common in ACO algorithms to perform other actions, such as local search, to further improve solutions before updating the pheromone information. The pseudocode of the ACO metaheuristic is shown in Algorithm 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. Configurable MOACO Framework</head><p>There are a number of design questions when extending ACO algorithms to bCOPs. First, in single-objective ACO, the pheromone information is related to the objective function, that is, the components of higher quality solutions receive more pheromone. In a multiobjective context, the objective function is multidimensional and not scalar, and there is only a partial order among solutions. Moreover, in some problems, it could make sense to have different solution components for each objective, and, hence, associate different pheromone matrices to them <ref type="bibr" target="#b6">[7]</ref>. For example, in applications of ACO to multiobjective scheduling problems, one pheromone matrix may represent jobs×jobs relationships, and the other position×jobs relationships. In this case, both matrices could be updated with the same pheromone amount because their meaning is different. In other problems, such as the bTSP, both pheromone matrices represent the same solution components (an edge), and, hence, they would need to be updated either using different solutions or using different pheromone amounts <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b8">[9]</ref>. Alternatively, it could also make sense to use a single pheromone matrix <ref type="bibr" target="#b5">[6]</ref>. If multiple pheromone or heuristic matrices are used, they are typically aggregated during the solution construction by means of weights <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b6">[7]</ref>. However, there are strong differences among MOACO algorithms in the way this aggregation is done and how many weights are used. A further design question is which ants are selected for depositing pheromone. Existing MOACO algorithms select some (or all) nondominated solutions <ref type="bibr" target="#b6">[7]</ref>, or they select the best solutions with respect to the objective associated with the pheromone matrix that is updated <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b8">[9]</ref>. Finally, several MOACO algorithms make use of multiple colonies of ants <ref type="bibr" target="#b6">[7]</ref>, <ref type="bibr" target="#b8">[9]</ref>.</p><p>We take a component-wise view of the design of MOACO algorithms, which allows us to abstract from the particular design choices taken in earlier works. We have identified several algorithmic components that correspond to the design alternatives described above. We divide these components in three main groups: 1) those related to the definition of pheromones and the construction of solutions; 2) those related to the update of the pheromones; and 3) those related to the use of multiple colonies. We examine these components in more detail in the following section. We will discuss the connection between these components and existing MOACO algorithms in Section IV.</p><p>Our proposed MOACO framework does not specify many details, such as how pheromone values are initialized, updated, or evaporated. It neither specifies whether the pheromone information is updated using the best solutions found since the start of the algorithm (best-so-far) or found in the current iteration (iteration-best). These details are relegated to the underlying ACO algorithm, which we assume is an efficient implementation for the problem at hand of any modern ACO algorithm such as MMAS <ref type="bibr" target="#b10">[11]</ref> or ACS <ref type="bibr" target="#b11">[12]</ref>. This approach allows us to focus, in our framework, on the multiobjective components of MOACO algorithms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. MOACO Algorithm Components for Solution Construction</head><p>One of the most crucial design decisions when applying a ACO algorithm to a problem is the definition of pheromone (and heuristic) information. In the multiobjective context, this problem is exacerbated by the fact that there are several ways to evaluate a single solution, and by the fact that multiple solutions may be (Pareto-)optimal. This design question is answered by the following algorithmic components.</p><p>1) Single/Multiple Pheromone/Heuristic Information: We may have one (single) or several (multiple) matrices for either the pheromone information τ or, if applicable, the heuristic information η. In the case of multiple heuristic matrices, each matrix is associated with a different objective, such that η 1 and η 2 correspond to the heuristic information of each objective, respectively. For some problems, it may not be possible to define the heuristic information for each objective independently, so we will be forced to use a single heuristic matrix. Similarly, in the case of multiple pheromone matrices, τ 1 and τ 2 would be associated with each objective; the procedure that selects the solutions used for updating each matrix should enforce this distinction somehow.</p><p>During solution construction, whenever we have multiple matrices, we will need to aggregate them into a single matrix. The aggregation method is defined by the component Aggregation, which is described below. It is conceivable to use a different aggregation method for pheromone and heuristic information; however, we do not explore this possibility here.</p><p>2) Aggregation: The values from multiple pheromone (or heuristic) matrices need to be aggregated into a single pheromone (or heuristic) value. We have identified three alternatives in the literature. a) Weighted sum, for example</p><formula xml:id="formula_2">τ ij = (1 -λ)τ 1 ij + λτ 2 ij and η ij = (1 -λ)η 1 ij + λη 2 ij . b) Weighted product, for example τ ij = (τ 1 ij ) (1-λ) • (τ 2 ij ) λ and η ij = (η 1 ij ) (1-λ) • (η 2 ij ) λ . c</formula><p>) Random: at each construction step, given a uniform random number U(0, 1), an ant selects the first of the two matrices if U(0, 1) &lt; 1λ; otherwise, it selects the other matrix.</p><p>In the three aggregation methods described above, there is a weight λ that biases the aggregation toward one objective or the other. The set of weights is defined by the components N weights and NextWeight.</p><p>3) N weights and NextWeight: The set of weights is defined within the interval [0, 1] as = λ i = 1 -(i -1)/(N weights -1), i = 1, . . . , N weights where N weights = | | is a parameter of the framework. Component NextWeight determines which particular weight is used by an ant at a certain iteration. The options tested for NextWeight are either that all ants use the same weight at a certain iteration (one-weight-per-iteration), or that all weights are used at each iteration (all-weights-per-iteration). In the case of one-weight-per-iteration, the weight used in successive iterations follows an ordered sequence of the elements of , and the order is reversed when the last weight in the sequence is reached. In the case of all-weights-per-iteration, when the number of ants N a is larger than N weights , several ants will use the same weight. An obvious speedup is to compute the aggregation of the pheromone matrices only once per weight per iteration. This describes the behavior for a single colony; the multicolony case will be discussed in Section III-C.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. MOACO Algorithm Components for Pheromone Update</head><p>Given a set A upd of candidate solutions for updating the pheromone information, the PheromoneUpdate component decides which solutions update the pheromone information and how. The N upd parameter determines how many solutions are used to update each pheromone matrix. We consider the following alternatives for the PheromoneUpdate component.</p><p>1) Nondominated solutions. The solutions used for updating the pheromone information are the nondominated solutions in A upd . When there are more nondominated solutions than N upd , we apply the truncation mechanism of SPEA2 <ref type="bibr" target="#b24">[25]</ref> to select only N upd solutions. In principle, it is possible to combine this nondominated pheromone update method and multiple pheromone matrices by using the same solutions to update both matrices <ref type="bibr" target="#b6">[7]</ref> as long as the update is different in each pheromone matrix. 2) Best-of-objective. This mechanism first selects from A upd the N upd best solutions with respect to each objective. In the case of multiple pheromone matrices, each pheromone matrix is updated using the N upd solutions associated with the corresponding objective. Otherwise, the 2 • N upd solutions update the single pheromone matrix. 3) Best-of-objective-per-weight. For each weight λ and each objective, there is a list of the N upd best solutions for that objective generated using λ. In the particular case of λ = 0, we keep only the list for the first objective, and we do the same for λ = 1 and the second objective. When using multiple pheromone matrices, each matrix is updated using only solutions from lists associated with the same objective. In the single pheromone matrix case, both lists are used for the update. Therefore, in the particular case of two weights, this method is equivalent to best-of-objective.</p><p>The best-of-objective-per-weight method is used by the existing mACO-1 and mACO-2 algorithms <ref type="bibr" target="#b8">[9]</ref>, and we include it for completeness. However, it is not clear how this approach should be extended to multiple colonies, since solutions may be exchanged among colonies with different weights. The above methods do not describe whether A upd is composed of the best-so-far or iteration-best solutions, since this is determined by the particular underlying ACO algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. MOACO Algorithm Components for Multiple Colonies</head><p>Many MOACO algorithms propose the use of multiple ant colonies, using various definitions of what a colony is. One popular approach is to define two colonies, each of them having its own pheromone information. These colonies may exchange solutions that are used to update the pheromone information. Some ants, which sometimes are said to belong to "extra" colonies, aggregate the pheromone information of the two other colonies <ref type="bibr" target="#b8">[9]</ref>, <ref type="bibr" target="#b25">[26]</ref>. This approach is actually equivalent to using one colony with multiple pheromone matrices, which are aggregated by means of different weights using the all-weights-per-iteration option, and it does not seem appropriate to say that ants belong to different colonies simply because they use different weights. Differently, the multicolony architecture of Iredi et al. <ref type="bibr" target="#b6">[7]</ref> defines a colony as a group of ants associated with a particular pheromone information, such that ants from each colony construct solutions only according to the pheromone information of their colony. In the case of multiple pheromone information, each colony has two pheromone matrices, one for each objective. When a set of weights is used, each colony has its own set of weights c . This multicolony architecture allows us to generalize all previous components and, hence, we adopt it for our framework. Moreover, colonies cooperate by using a common archive of nondominated solutions for detecting dominated ones. Further cooperation is enforced by exchanging solutions for updating the pheromone information. This setting is controlled by the MultiColonyUpdate component described below. The number of colonies is given by component N col , and the components described below only have an effect when N col is larger than one.</p><p>1) MultiColonyWeights: In the case of multiple colonies, we create a set of weights c of size N weights for each colony c. These sets are constructed by following the two alternatives proposed by Iredi et al. <ref type="bibr" target="#b6">[7]</ref>: disjoint and overlapping intervals. In both cases, we first generate the necessary number of equally distributed weights in the interval [0, 1]. Then, for disjoint intervals, this set is partitioned into equal disjoint subintervals per colony, that is λ c,i = ((c -1) • N weights + (i -1))/(N weights • N col ), i = 1, . . . , N weights , c = 1, . . . , N col . In the case of overlapping intervals, the subintervals overlap by 50% and hence, c and c+1 share 50% of their weights.</p><p>2) MultiColonyUpdate: In the case of multiple colonies, the solutions generated by all colonies in the current iteration are stored in a common archive A iter , so that all colonies contribute to detect and remove dominated solutions. The set A upd is then built from the remaining nondominated solutions in A iter or from the archive of all nondominated solutions ever found, depending on the underlying ACO algorithm. After this step, the solutions in A upd are assigned back to each colony for updating the pheromone information. The basic method, called update by origin, assigns each solution from A upd to its original colony. To enforce more cooperation, colonies may exchange solutions. One method of exchange, called update by region, divides A upd in equal parts among the colonies in such a way that each colony roughly corresponds to one region of the objective space. Both settings, update by origin and update by region, were originally proposed by Iredi et al. <ref type="bibr" target="#b6">[7]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. MOACO Framework</head><p>Table <ref type="table" target="#tab_2">I</ref> summarizes the algorithmic components defined above and their domains. Some settings are only significant for certain values of other settings. For example, an aggregation method is only necessary if there are multiple pheromone or heuristic matrices. We propose Algorithm 2 as a way to integrate these components into a flexible MOACO framework for bi-objective optimization. It follows the basic outline of the ACO metaheuristic. First, the algorithm initializes the pheromone information (function InitializePheromoneInformation, line 2) and the set of weights of each colony (function MultiColonyWeights, line 3), whereas heuristic information is initialized only once, since it is shared by the different colonies. The archive of all nondominated solutions ever found (best-so-far archive, A bf ) and the iteration counter are initialized in lines 6 and 7, respectively. At each iteration, each colony constructs N a solutions according to its own pheromone information, which may be possibly aggregated by a weight λ from its own set of weights (lines <ref type="bibr" target="#b12">[13]</ref><ref type="bibr" target="#b13">[14]</ref><ref type="bibr" target="#b14">[15]</ref>. Depending on the setting of NextWeight, λ may be the same weight or a different one for each ant in the colony. In singleobjective ACO algorithms, solutions are often improved by means of local search. Therefore, we have included an optional WeightedLocalSearch procedure (line 16) that improves a solution by applying local search to a weighted sum aggregation of the objective functions, using the same weight as it was used for constructing the solution. The new solution is added to the archive of the current iteration shared by all colonies A iter (line 17). Once all ants from all colonies have finished constructing solutions, the best-so-far archive A bf is updated with the nondominated solutions found in the current iteration A iter (in function RemoveDominated, line 20). The update of the pheromones consists of two phases. First, MultiColonyUpdate distributes the archive of solutions for update (A upd ) among the colonies. Second, procedure PheromoneUpdate (line 23) decides how the solutions assigned to each colony update the pheromone information of the colony. The MOACO algorithm continues until a certain number of iterations or a time limit is reached. Fig. <ref type="figure" target="#fig_1">1</ref> graphically illustrates the relationships between various components of the MOACO framework.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. Design of MOACO Algorithms</head><p>Our previous work <ref type="bibr" target="#b13">[14]</ref> has examined the design of several MOACO algorithms from the literature. This paper has informed the design of the MOACO framework described </p><formula xml:id="formula_3">τ := Aggregation(λ, {τ 1 c , τ 2 c }) if multiple [τ] τ c if single [τ]</formula><p>14:</p><formula xml:id="formula_4">η := Aggregation(λ, {η 1 , η 2 }) if multiple [η] η if single [η]</formula><p>15:</p><p>s := ConstructSolution(τ, η) end for 20:</p><formula xml:id="formula_5">A bf := RemoveDominated(A bf ∪ A iter ) 21:</formula><p>for each colony c ∈ {1, . . . , N col } do 22:</p><formula xml:id="formula_6">A upd c := MultiColonyUpdate(A upd ) 23: PheromoneUpdate(A upd c , N upd ) 24:</formula><p>end for 25:</p><p>iter := iter + 1 26: end while 27: Output: A bf in the previous section. In this section, we explain how certain configurations of the framework replicate the design of existing MOACO algorithms. The aim here is not to faithfully reproduce the original algorithms, but to identify which particular configuration of algorithmic components in the framework corresponds to the algorithmic design choices made in each case. In particular, we do not pay attention here to the underlying ACO algorithm, pheromone initialization or update amounts, heuristic information, or problem-dependent speedups. We are aware that the present review does not include all MOACO algorithms in the literature. We do not attempt to adapt algorithms not specifically designed for Pareto optimization, such as MACS-VRPTW <ref type="bibr" target="#b26">[27]</ref>, or algorithms that diverge from the basic structure of the ACO metaheuristic, such as Population-based ACO <ref type="bibr" target="#b27">[28]</ref>, <ref type="bibr" target="#b28">[29]</ref>.</p><p>Table <ref type="table" target="#tab_3">II</ref> summarizes the configuration of the MOACO framework that instantiates the MOACO algorithms reviewed in this section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. MOAQ</head><p>Although multiple objective ant-Q (MOAQ) <ref type="bibr" target="#b29">[30]</ref> was originally designed for problems with a given preference order of the objectives (lexicographical optimization), García-Martínez et al. <ref type="bibr" target="#b3">[4]</ref> generalized MOAQ to bi-objective problems in terms of Pareto optimality. Their proposal uses a single pheromone  </p><formula xml:id="formula_7">Algorithm N col [τ] [η] Aggregation N weights PheromoneUpdate N upd MOAQ [4], [30] 1 1 2 - 2 ( = {0, 1}) Nondominated solutions ∞ BicriterionAnt [7] Any 2 2 Weighted product N a Nondominated solutions ∞ MACS [6] 1 1 2 Weighted product N a Nondominated solutions ∞ COMPETants [26] 1 2 2 Weighted sum 3 ( = {0, 0.5, 1}) Best-of-objective Any P-ACO [5] 1 2 1, 2 Weighted sum N a Best-of-objective 2 mACO-1 [9] 1 2 2 Random (τ) Weighted sum (η) 3 ( = {0, 0.5, 1}) Best-of-objective-per-weight 1 mACO-2 [9] 1 2 2 Weighted sum 3 ( = {0, 0.5, 1}) Best-of-objective-per-weight 1 mACO-3 [9] 1 1 1 - - Nondominated solutions ∞ mACO-4 [9] 1 2 1 Random (τ) 1( = {0.5})</formula><p>Best-of-objective 1 matrix and multiple heuristic matrices, one for each objective. For the pheromone update, they use all nondominated solutions. García-Martínez et al. <ref type="bibr" target="#b3">[4]</ref> divided the ants into two groups, and each group only uses the heuristic information corresponding to one objective. The equivalent in our framework is to use the weights = {0, 1} for aggregating the two heuristic matrices, such that half of the ants use each weight. Such a set of weights effectively means that no actual aggregation takes place, but instead half of the ants use one heuristic matrix and the other half use the other one.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. BicriterionAnt</head><p>Iredi et al. <ref type="bibr" target="#b6">[7]</ref> proposed a MOACO algorithm, henceforth called BicriterionAnt, with multiple pheromone and heuristic matrices, aggregated by weighted product. Each ant k uses a different weight λ k for aggregating the pheromone matrices; thus, there are as many weights as ants (N weights = N a ). The authors of BicriterionAnt suggest updating the pheromone matrices using the nondominated solutions found in the current iteration. Moreover, they update both pheromone matrices with the same amount. Such an update does not result in identical pheromone matrices because, in the problem tackled by them, the pheromone matrices represent different solution components as explained in Section III. When applying BicriterionAnt to the bTSP, García-Martínez et al. <ref type="bibr" target="#b3">[4]</ref> used the objective function value of each objective to update the corresponding matrix τ k = 1/f k (s a ). We do the same in our framework for the combination of multiple pheromone matrices and nondominated pheromone update.</p><p>In addition to the above algorithm, Iredi et al. <ref type="bibr" target="#b6">[7]</ref> proposed the use of multiple colonies, and defined a colony as a group of ants that construct solutions according to their own pheromone information. In this sense, a multicolony BicriterionAnt algorithm is similar to a multistart approach with some particularities. First, different colonies specialize in different regions of the Pareto frontier by using different sets of weights to aggregate pheromone information. Second, colonies cooperate to detect dominated solutions by keeping solutions in a common archive. Third, colonies may also cooperate by exchanging solutions. As explained in Section III-C, this matches the multicolony approach adopted in our MOACO framework.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Multiple Ant Colony System</head><p>Multiple ant colony system (MACS) <ref type="bibr" target="#b5">[6]</ref> uses one heuristic matrix for each objective and a single pheromone matrix. The heuristic matrices are aggregated by weighted product, and each ant uses a different weight. In addition, the pheromone information is updated with nondominated solutions. MACS can be seen as a variant of MOAQ, as defined by García-Martínez et al. <ref type="bibr" target="#b3">[4]</ref>, that uses more than two weights to aggregate the heuristic information. On the other hand, the only difference between MACS and single-colony Bicriterio-nAnt is the number of pheromone matrices. As a result, it is straightforward to define a multicolony MACS, as we do in our MOACO framework. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. COMPETants</head><p>COMPETants <ref type="bibr" target="#b25">[26]</ref> is presented as a multicolony approach, with one colony for each objective. Each colony has one pheromone and heuristic matrix. Each colony constructs solutions independently, except for a number of ants (called "spies"), which aggregate the two pheromone matrices by weighted sum (with λ = 0.5) using either the first or the second heuristic matrix, thus creating two solutions. Finally, a number of ants from each colony are used to update the pheromone matrix of each colony.</p><p>We can formulate COMPETants in the MOACO framework by using two pheromone and heuristic matrices, which are aggregated by weighted sum and three weights = {0, 0.5, 1}. Thus, COMPETants is a single-colony approach in our framework, and it is straightforward to define variants of this formulation with an arbitrary number of colonies. For the sake of simplicity, in our MOACO framework, the total number of ants is equally divided by the number of weights, and the number of ants per weight does not change during the run, as in the original proposal; nevertheless, this feature could be added to the framework as an additional component. Moreover, our previous work <ref type="bibr" target="#b13">[14]</ref> showed that, at least in the bi-objective TSP, never aggregating the heuristic information, as in the original COMPETants, leads to poor quality in the middle of the Pareto front. Hence, we do not handle specially the heuristic information for ants using λ = 0.5, but the heuristic matrices are aggregated in the same way as pheromone matrices. Finally, each pheromone matrix is updated with the N upd best solutions for the corresponding objective, which is the best-of-objective setting for PheromoneUpdate in the MOACO framework.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E. Pareto Ant Colony Optimization</head><p>Pareto ant colony optimization (P-ACO) <ref type="bibr" target="#b4">[5]</ref> uses multiple pheromone matrices, one for each objective, aggregated by means of a weighted sum. Like in BicriterionAnt and MACS, a different weight is associated with each ant. Moreover, pheromone matrices are updated with the best and secondbest solution for each objective, which is basically the same update method used by COMPETants, and in our framework it corresponds to the best-of-objective setting for Pheromone-Update and N upd = 2. In the problem being solved in the original paper <ref type="bibr" target="#b4">[5]</ref>, there was no clear definition of heuristic information for each objective, and, hence, the authors used a single heuristic matrix. However, in later publications <ref type="bibr" target="#b30">[31]</ref>, P-ACO uses multiple heuristic matrices, one for each objective, which are aggregated in the same way as the pheromone matrices. In our earlier work <ref type="bibr" target="#b13">[14]</ref>, we show that there are important differences between using one or two heuristic matrices in P-ACO for the bi-objective TSP. In particular, we observe that a single heuristic matrix leads to a very narrow Pareto front and, hence, our MOACO framework uses multiple heuristic matrices when instantiating P-ACO. Nonetheless, our MOACO framework can replicate both variants.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F. mACO Variant 1 (mACO-1)</head><p>Alaya et al. <ref type="bibr" target="#b8">[9]</ref> proposed four alternatives for the design of a MOACO algorithm. The first variant, mACO-1, is described as using multiple colonies: one colony per objective, and an extra colony that builds solutions by aggregating the pheromone matrices of the other two colonies following a random aggregation. Each colony uses the heuristic information of its corresponding objective, whereas the extra colony aggregates the heuristic matrices. In our framework, this proposal is formulated as a single colony with multiple pheromone and heuristic matrices aggregated using three weights = {0, 0.5, 1}. In the original mACO-1, the pheromone information of each colony is updated with the best solution generated by the colony for the corresponding objective of the same colony. Moreover, the algorithm keeps a best solution generated by the extra colony for each objective, and uses them to update the corresponding pheromone matrix of the other two colonies. Since each colony in the original corresponds to a different weight λ in our formulation, this update method corresponds in our framework to best-of-objective-per-weight with N upd = 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>G. mACO Variant 2 (mACO-2)</head><p>The second variant (mACO-2) by Alaya et al. <ref type="bibr" target="#b8">[9]</ref> only differs from mACO-1 in the pheromone aggregation. In mACO-2, pheromone matrices are aggregated by summing the pheromone matrices of each objective. When the underlying ACO algorithm is scale invariant <ref type="bibr" target="#b31">[32]</ref>, like AS, MMAS, and ACS, this is equivalent to a weight λ = 0.5. Our previous work on the bi-objective TSP suggests that there is not a significant difference in quality between mACO-1 and mACO-2 <ref type="bibr" target="#b13">[14]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>H. mACO Variant 3 (mACO-3)</head><p>The third variant proposed by Alaya et al. <ref type="bibr" target="#b8">[9]</ref> uses a single pheromone matrix, which is updated by using all nondominated solutions (either from the iteration-best archive or the best-so-far archive). Alaya et al. <ref type="bibr" target="#b8">[9]</ref> emphasized that every pheromone value associated with a solution component is updated at most once, despite how many solutions contain it. This is in contrast with other algorithms such as MOAQ, MACS, and BicriterionAnt, that use such a nondominated pheromone update. However, we did not find any advantage in this special requirement; therefore, our framework does not include it for the sake of simplicity. The heuristic information is also a single matrix. In problems where there is heuristic information available for each objective, these are aggregated prior to the run into a single heuristic matrix.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. mACO Variant 4 (mACO-4)</head><p>In the last variant proposed by Alaya et al. <ref type="bibr" target="#b8">[9]</ref>, there is one pheromone matrix per objective, and these are always aggregated in the same random manner as for mACO-1, which in practice corresponds to a random aggregation with a single weight λ = 0.5. However, there is a single heuristic matrix, as in mACO-3. Finally, each pheromone matrix is updated with the best solution for each objective, which is the definition of the best-of-objective pheromone update used in our framework.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>J. New Design Alternatives</head><p>From the review in this section, we can say that, despite the number of different MOACO algorithms proposed in the literature, there is a much larger number of unexplored combinations of their algorithmic components. In particular, multicolony variants in the sense of Iredi et al. <ref type="bibr" target="#b6">[7]</ref> can be defined for all the algorithms reviewed in this section. The random aggregation introduced by Alaya et al. <ref type="bibr" target="#b8">[9]</ref> has only been tested with λ = 0.5 so far. Moreover, all the algorithms reviewed above use all weights available in each iteration (allweights-per-iteration). In our earlier work for the bi-objective QAP <ref type="bibr" target="#b7">[8]</ref>, we proposed that all ants use the same weight in one iteration, and the next weight in the sequence in the next iteration (one-weight-per-iteration). Therefore, we can easily construct new variants of most algorithms in Table <ref type="table" target="#tab_3">II</ref>. Such novel variants can be considered new MOACO algorithms. However, we expect that many of them would not lead to any significant breakthrough. On the other hand, the particular problem being solved may influence the choice of the best design. In any case, it would be a major effort to test them one by one in order to find the best design. Instead, we propose to automatically find the best design for a particular problem by automatic (offline) configuration of the MOACO framework.</p><p>There are several automatic methods for offline configuration of single-objective optimization algorithms. In an earlier work, we have extended iterated F-Race (I/F-Race) <ref type="bibr" target="#b32">[33]</ref> to the multiobjective case by using unary quality measures <ref type="bibr" target="#b14">[15]</ref>. In the next section, we apply this approach to the framework described in this paper and carry out a detailed analysis of the results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. Automatic Configuration of the</head><p>MOACO Framework Instead of the classical "horse-race" between fully instantiated MOACO algorithms that would entail a great deal of human effort, we exploit automated algorithm configuration tools to obtain very high-performing MOACO variants. The goal of automated (offline) configuration is to find the best parameter settings of an algorithm to solve unseen instances of a problem, given a set of training instances representative of the same problem. We are inspired by the work of KhudaBukhsh et al. <ref type="bibr" target="#b15">[16]</ref>, who combined ideas from many different algorithms for SAT into a highly configurable SAT solver, and then used automatic configuration tools to find the best configuration for specific classes of SAT instances. Instead of configuring a problem-specific solver for particular instance classes, we aim to configure a problem-independent metaheuristic for a specific problem. In other words, our goal is to find a good instantiation of a metaheuristic from a large space of potential designs. Moreover, we extend this idea for the first time to the multiobjective context. We show in this section that the automatic configuration of our flexible MOACO framework allows us to find better MOACO algorithms for the bTSP than those available in the literature. We also study different configuration strategies, and examine the results of several independent automatic configuration runs.</p><p>The automatic configuration method used here is I/F-Race <ref type="bibr" target="#b32">[33]</ref>, which is a state-of-the-art automatic configuration method able to deal with continuous, categorical, and conditional parameters. We use the implementation of I/F-Race provided by the irace package <ref type="bibr" target="#b17">[18]</ref>. I/F-Race alternates between generating new candidate configurations and performing races to discard the worst-performing ones. Within a race, candidate configurations are run on one instance at a time. I/F-Race uses the Friedman test followed by a post-test analysis to discard configurations whenever there is sufficient statistical evidence that they perform worse than the rest. When only a small number of configurations remain in the race, the race stops. A new race starts with the best configurations previously found and with new candidate configurations generated from the best configurations using a simple probabilistic model. The automatic configuration process stops after reaching a given maximum budget (number of runs or time limit).</p><p>The current version of I/F-Race was designed for singleobjective optimization problems, and, hence, it requires an evaluation criterion that assigns a single value to each run of a configuration. We apply I/F-Race to the multiobjective context by means of unary quality measures, which assign a single quality value to a nondominated set. In particular, we test two unary measures as the evaluation criterion of I/F-Race, namely, the hypervolume <ref type="foot" target="#foot_0">1</ref> and the (additive) epsilon measure <ref type="bibr" target="#b34">[35]</ref>. The hypervolume is the volume of the objective </p><formula xml:id="formula_8">q 0 0 α 1 β 2</formula><p>space weakly dominated by a nondominated set and bounded by a reference point that is strictly dominated by all Paretooptimal objective vectors. The larger the hypervolume, the better is the corresponding nondominated set. The additive epsilon measure provides the minimum value that must be subtracted from all objectives of a nondominated set so that it weakly dominates a reference set. This reference set is usually the nondominated set of all known solutions. A smaller epsilon measure value is preferable.</p><p>As training instances, we generated 36 bTSP random uniform Euclidean instances for each of n = {100, 200, 300} nodes (108 instances in total). We use a different set of 12 (test) instances when comparing algorithms. These test instances are taken from Luis Paquete's webpage at http://eden.dei.uc.pt/∼paquete/tsp. 2 Each experiment, that is, each run of the MOACO framework on each instance, is stopped after 300 • (n/100) 2 CPU-seconds.</p><p>As the underlying ACO algorithm, we use MMAS as defined for the TSP <ref type="bibr" target="#b10">[11]</ref>. In particular, we use the default settings described in Table <ref type="table" target="#tab_4">III</ref>, we set τ = 1 for the amount of pheromone deposited by an ant, and we do not use candidate lists for the solution construction. Following previous work <ref type="bibr" target="#b35">[36]</ref>, we also incorporate the pseudo-random action choice rule of ACS <ref type="bibr" target="#b11">[12]</ref>, which allows for a greedier solution construction. Parameter q 0 controls the greediness of the pseudo-random action choice rule. A value of q 0 = 0 disables it and reverts back to the original MMAS.</p><p>The MOACO framework is implemented in C, and the underlying ACO algorithm is derived from ACOTSP <ref type="bibr" target="#b36">[37]</ref>. The code is compiled with gcc, version 4.4. All experiments reported in the following are carried out on a single core of Intel Xeon E5410 CPUs, running at 2.33 GHz with 6 MB of cache size under Cluster Rocks Linux version 4.2.1/CentOS 4. The implementation is sequential and experiments run on a single core.</p><p>We divide the configuration effort in three stages. 1) First, we study whether it is possible to automatically find a novel MOACO design. Hence, we configure only the multiobjective components of the MOACO framework, and we compare the results with the algorithms described in the literature. 2) Second, we assess how much improvement may be achieved by configuring the parameter settings of the underlying ACO algorithm. We do so by automatically 2 We use instances euclidAB100, euclidAB300, euclidAB500, euclidCD100, euclidCD300, euclidCD500, euclidEF100, eu-clidEF300, kroAB100, kroAB200, kroAD100, and kroBC100. configuring the ACO algorithm settings of one of the configurations found in the previous stage. 3) Finally, we ask whether this two-stage configuration approach is better than configuring all components and parameters at once using a configuration effort equivalent to the two previous stages.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Configuration of Multiobjective Components</head><p>In the first experiment, our goal is to find a new, hopefully better design of a MOACO algorithm for the bTSP. We search for this design in an automatic fashion by configuring the multiobjective components of the MOACO framework, while keeping fixed the underlying ACO algorithm parameter settings. The fixed ACO algorithm settings are given in Table <ref type="table" target="#tab_4">III</ref> and the configuration domain of the multiobjective components is described in Table <ref type="table" target="#tab_5">IV</ref>. The configuration budget is set to 1000 runs of the MOACO framework. We perform five independent repetitions of the configuration process using the hypervolume as the evaluation criterion, and another five repetitions using the unary epsilon measure.</p><p>The particular configurations found are given in Tables V and VI for the hypervolume and the epsilon measure, respectively. All ten configurations found use multiple heuristic matrices, a large number of colonies, update by region and aggregation by weighted product. Most configurations use multiple pheromone matrices updated by the best-of-objective (BO), and one-weight-per-iteration (1wpi).</p><p>We apply these ten configurations to the test instances, and perform 15 independent runs of each configuration with different random seeds. For comparison, we also evaluate the MOACO algorithms from the literature described in Section IV. We evaluate the quality of the nondominated sets found in these test runs by means of both the hypervolume and the epsilon measure. The full analysis is available as supplementary material <ref type="bibr" target="#b37">[38]</ref>. The results lead to the same conclusions independently of the quality measure used in the analysis. Moreover, there were no significant differences, according to the sign test, between configurations found when using the hypervolume as the evaluation criterion in I/F-Race and those found when using the epsilon measure. Hence, we discuss here only the results with respect to the hypervolume measure. Fig. <ref type="figure" target="#fig_0">2</ref> displays, for each instance, one boxplot per configuration (y-axis) summarizing the hypervolume value (x-axis) obtained by the 15 independent runs. The boxplots are often reduced to a single point because the variance is extremely small across runs. The results obtained by the MOACO algorithms from the literature are consistent with previous works <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b13">[14]</ref>, with the multicolony variant of BicriterionAnt being the best. The improvement of the configurations obtained automatically, MOACO <ref type="bibr" target="#b0">(1,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b2">3,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b4">5)</ref>, over the MOACO algorithms from the literature is significantly large and consistent. In other words, our method is able to find a new design that surpasses the current state-of-the-art in the MOACO literature. Not surprisingly, this new design is similar to the multicolony variant of BicriterionAnt. Yet, it includes significant differences, such as the use of best-ofobjective update, a small value of N upd , more than one ant per weight, and 1wpi.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Configuration of the Underlying ACO Algorithm</head><p>In the next experiment, we arbitrarily choose one of the configurations found when configuring the multiobjective components of the MOACO framework, 3 and we carry out an automatic configuration of the settings of the underlying ACO algorithm. The domains of the ACO algorithm settings are described in Table <ref type="table" target="#tab_7">VII</ref>. Instead of configuring directly 3 Specifically, run 5 of Table <ref type="table" target="#tab_6">V</ref>. </p><formula xml:id="formula_9">= 0 α [0, 5] β [0, 5]</formula><p>the number of ants per colony N a , we configure a surrogate parameter a f that defines the number of ants in dependence of the instance size n, that is, N a = 6 • a f • n/100 . We multiply this factor by six in order to be able to define N weights as either N a /3 or N a /2 in later experiments. We perform five independent repetitions of the configuration process using the hypervolume as the evaluation criterion, and each repetition is stopped after 1000 runs of the MOACO framework. For comparison, we also configure in this way the ACO algorithm settings of the multicolony version of BicriterionAnt, which was found to be the best MOACO algorithm from the literature in the previous section. The resulting parameter settings are again given as supplementary material <ref type="bibr" target="#b37">[38]</ref>.</p><p>One may ask whether it would not be better to configure both the multiobjective components and the ACO parameter settings of the MOACO framework at once, instead of consecutively as done above. To answer this question, we carry out the automatic configuration of all parameters of the MOACO framework at once, with the domains described in Tables IV and VII, and with a budget of 2000 experiments, that is, equivalent to the combined effort spent in the previous two-stage automatic configuration process. The resulting configurations are given as supplementary material <ref type="bibr" target="#b37">[38]</ref>. The results presented below show that there is a significant difference in favor of automatically configuring all parameters at once.</p><p>For the comparison of the configurations found in the various automatic configuration procedures, we perform 15 independent runs of each configuration on the test instances. We evaluate the results using the hypervolume measure, and the corresponding boxplots are shown in Fig. <ref type="figure" target="#fig_3">3</ref>. 4  The plots show that automatically configuring the ACO algorithm settings of BicriterionAnt greatly improves its performance, and for instances with 500 cities, it surpasses the quality of the MOACO configuration with default ACO 4 Similar figures that include results with respect to the epsilon measure are available as supplementary material <ref type="bibr" target="#b37">[38]</ref>. algorithm settings. Nonetheless, by automatically configuring the settings of the ACO algorithm underlying the MOACO framework, the improvement in hypervolume is even more remarkable, clearly outperforming the best configurations of BicriterionAnt. The plot does not show a clear difference between automatically configuring the MOACO framework using the two-stage approach or by configuring all parameters at once. However, configurations obtained by a two-stage approach obtain a lower hypervolume, i.e., they are worse, than those fully configured in 80% of the runs. The sign-test confirms that this difference is statistically significant.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. MOACO Framework + Local</head><p>Search (MOACO+LS) The results presented above conclusively show that automatic configuration leads to better designs of MOACO algorithms than those presented in the literature. Although a large amount of work on MOACO algorithms do not consider the usage of local search <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b8">[9]</ref>, it is known that, on the bTSP, MOACO algorithms with local search by far outperform those without local search <ref type="bibr" target="#b12">[13]</ref>. Therefore, we repeat the automatic configuration hybridizing the MOACO framework and local search.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Experimental Setup</head><p>The local search used here is an iterative improvement algorithm based on the 2-exchange neighborhood (2-opt). Local search is applied to each solution constructed by an ant. The bTSP is converted to a single-objective TSP by means of a weighted sum aggregation of the two distance matrices. If an ant uses a weight vector to construct a solution, the subsequent local search will use the same weight vector. Otherwise, if ants do not use weights for solution construction, a weight is still assigned to each ant following the settings described in Section III but they are only used by the local search. The local search also exploits standard speedup techniques for the TSP, e.g., an ordered list of candidate edges of size 20 is computed for each weight vector. The ants use a different candidate list of size 20 for construction, which is obtained by sorting edges according to dominance ranking <ref type="bibr" target="#b38">[39]</ref>.</p><p>The remaining parameters of the MOACO framework are equal to the previous settings without local search (Tables III, IV, and VII) except that: 1) the default value of ρ is 0.2; 2) the number of ants does not depend on the instance size and it is now calculated as N a = 6 • a f ; and 3) the time limit of each run is now 4 • (n/100) 2 .</p><p>As training instances, we generated 10 bTSP random uniform Euclidean instances for each of n = {500, 600, 700, </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Automatic Configuration of MOACO+ls</head><p>We carry out four separate automatic configuration setups of the MOACO+ls framework for the bTSP.</p><p>1) We configure the multiobjective components of the MOACO framework and use default settings for the underlying ACO algorithm. 2) We configure the settings of the underlying ACO algorithm and use one of the MOACO designs found in the previous step. 3) We configure all settings of the MOACO framework at once using two times the budget of experiments as for the previous two steps. The aim of this setup is to investigate whether a two-stage configuration approach is more or less effective than configuring all parameters at once. 4) We configure the ACO algorithm settings of BicriterionAnt+ls for comparison with the other results. We perform five repetitions of each automatic configuration setup, and the budget of each repetition is set to 1000 experiments (2000 for configuring all settings at once). The configuration tool uses the hypervolume measure as the evaluation criterion. For the sake of conciseness, the particular configurations found are reported in the supplementary pages <ref type="bibr" target="#b37">[38]</ref>.</p><p>It is enough to say here that the configurations show a larger variability of settings, explained by the fact that the local search reduces the effect of other parameters.</p><p>The configurations found automatically are evaluated on the test instances by performing 15 independent runs of each configuration, and computing the hypervolume measure of the resulting nondominated sets. Fig. <ref type="figure" target="#fig_4">4</ref> summarizes with boxplots the hypervolume values of each configuration on each instance.</p><p>The results follow the conclusions outlined in the previous section. First, the performance of BicriterionAnt is greatly improved by configuring its ACO algorithm settings. Second, despite this improvement, the automatically configured BicriterionAnt does not outperform an automatically-found design of the MOACO framework with default ACO algorithm settings. Moreover, automatically configuring the ACO algorithm settings of such a good design leads to further improved quality, clearly outperforming the best results of BicriterionAnt. Finally, although the boxplots do not visually show clear differences between the two-stage configuration process versus fully configuring the MOACO+ls framework at once, a sign-test indicates that there is a significantly larger probability, about 0.84, of obtaining a larger hypervolume with a configuration obtained by the latter method. This is consistent with the conclusions reached when automatically configuring the MOACO framework without local search.</p><p>These results clearly indicate that we have found new designs of MOACO algorithms that outperform the previous state of the art in the MOACO literature for the bTSP. More importantly, we have found these designs in a semi-automatic fashion, where most of the effort has been spent on the definition of the alternative design choices, leaving the task of finding the correct design to automatic and, hence, unbiased tools. The fact that some design choices never appear in some configurations gives a clear indication that they are not contributing to the performance of the algorithm. On the other hand, the variability of designs indicates that there are several alternative designs that produce similar quality of results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VII. Conclusion</head><p>Instead of proposing a new MOACO algorithm that is slightly different from those found in the literature, we proposed a novel approach to automatically design MOACO algorithms for multiobjective optimization problems. We synthesized the existing knowledge from the MOACO algorithms found in the literature into a flexible, configurable framework, and we explored the vast space of potential algorithmic designs in an automatic fashion by using offline configuration tools.</p><p>In this paper, we showed that such an approach has both scientific and practical advantages. From a scientific standpoint, the process of synthesis involved in constructing the framework has led to the identification of many more commonalities in existing MOACO algorithms than previously thought. In some cases, some algorithms were found to be specializations of other algorithms, despite the fact that both were independently proposed in the literature. In addition, the integration of design choices from diverse algorithms within the same framework leads to a large number of potential new designs, and each of them can be considered a new MOACO algorithm by itself.</p><p>From a practical point of view, testing all possible designs on different problems would be a major effort. The use of automatic configuration tools greatly simplifies this task by identifying which design choices produce the best results for a particular problem. Our experimental results have shown that such an automatically configured design outperforms the MOACO algorithms found in the literature, even after the settings of the latter have been properly configured (which is almost never the case in the MOACO literature). In this sense, we conclude that we designed a new state-of-the-art MOACO algorithm for the bTSP.</p><p>There are several research questions that we left open in this paper. First, further analysis of the best configurations obtained should shed some light on the causes behind the good performance of some design choices. Second, there are open questions about the best way to automatically configure multiobjective optimization algorithms. Our experiments have not found any significant difference between using the hypervolume or the epsilon measure as the measure of the quality of configurations; further research is needed to confirm whether this generalizes to other problems or algorithms. Third, we found that there is a small advantage in configuring all settings at once rather than configuring first the "design" of a MOACO algorithm and then its ACO settings. This may be due to interactions between the different components. More research is needed to confirm whether this result generalizes to other configuration scenarios.</p><p>In the future, we will apply the same technique to other bi-objective problems already tackled by MOACO algorithms. We make available our implementation of the MOACO framework for the bTSP, <ref type="foot" target="#foot_1">5</ref> and we welcome extensions of the proposed framework, either by applying it to new problems or by extending its components to include recent advances in MOACO algorithms. We expect that, properly configured, the MOACO framework will outperform any other MOACO algorithm, or at worst, match their results. The current MOACO framework, as most MOACO algorithms in the literature, is limited to bi-objective problems. More work is needed to apply ACO algorithms to problems with three and more objectives. However, the main ideas behind automatic design of multiobjective algorithms presented here can be extended to other metaheuristics, such as multiobjective evolutionary algorithms, where various design choices exist without a clear configuration of choices regarded as the best.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Algorithm 2</head><label>2</label><figDesc>MOACO framework 1: for each colony c ∈ {1, . . . , N col } do 2: InitializePheromoneInformation() 3: c := MultiColonyWeights() 4: end for 5: InitializeHeuristicInformation() 6: A bf := ∅ 7: iter := 0 8: while not stopping criteria met do 9: A iter := ∅ 10: for each colony c ∈ {1, . . . , N col } do 11: for each ant k ∈ {1, . . . , N a } do 12: λ := NextWeight( c , k, iter) 13:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Diagram showing the relationships between various components of the MOACO framework. Rounded rectangles represent data objects, and ellipses represent procedures. (a) High-level overview of the main algorithm. (b) Algorithm components influencing the distribution of the weights among colonies. (c) Detailed view of the components involved in the solution construction within a single colony.</figDesc><graphic coords="7,54.22,53.57,240.05,307.87" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Boxplot of the hypervolume (larger is better) of 15 repetitions of each configuration of the MOACO framework on the test instances. The configurations from the literature are MOAQ, BicriterionAnt with 1 and 3 colonies, COMPETants, PACO, MACS, and the four variants of mACO (Section IV). MOACO (1, 2, 3, 4, 5) denote configurations found by five independent automatic configuration runs.</figDesc><graphic coords="11,137.72,54.01,335.95,432.43" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Boxplot of the hypervolume (larger is better) of 15 repetitions of each configuration of the MOACO framework on the test instances. BicriterionAnt (3 col) denotes BicriterionAnt with 3 colonies and default ACO algorithm settings; BicriterionAnt-aco (1, 2, 3, 4, 5) denote the same configuration but with automatically configured ACO settings (five independent configuration runs); MOACO (5) denotes the configuration obtained when configuring the multiobjective components with default ACO settings; MOACO-aco (1, 2, 3, 4, 5) denote the same configuration but with automatically configured ACO settings (five independent configuration runs); and MOACO-full (1, 2, 3, 4, 5) denote five configurations obtained by automatically configuring all parameter settings.</figDesc><graphic coords="12,140.01,53.72,335.95,432.72" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Boxplot of the hypervolume (larger is better) of 15 repetitions of each configuration of the MOACO+ls framework on the test instances. BicriterionAnt (3 col) denotes BicriterionAnt with 3 colonies and default ACO algorithm settings; BicriterionAnt-aco (1, 2, 3, 4, 5) denote the same configuration but with automatically configured ACO settings (five independent configuration runs); MOACO (1, 2, 3, 4, 5) denote five configurations obtained by automatically configuring the multiobjective components with default ACO settings; MOACO-aco (1, 2, 3, 4, 5) denote the configuration MOACO (5) but with automatically configured ACO settings (five independent configuration runs); and MOACO-full (1, 2, 3, 4, 5) denote five configurations obtained by automatically configuring all parameter settings. 800, 1000} nodes (60 instances in total). The comparison and evaluation of the configurations obtained use a different set of 15 test instances, 3 instances of each size n.</figDesc><graphic coords="13,125.72,54.28,360.00,434.16" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>TABLE I</head><label>I</label><figDesc>Algorithmic Components of the Proposed MOACO Framework</figDesc><table><row><cell>Component</cell><cell>Domain</cell><cell>Description</cell></row><row><cell>[τ]</cell><cell>{single, multiple}</cell><cell>Definition of pheromone matrices</cell></row><row><cell>[η]</cell><cell>{single, multiple}</cell><cell>Definition of heuristic matrices</cell></row><row><cell></cell><cell>weighted sum,</cell><cell></cell></row><row><cell>Aggregation</cell><cell>weighted product,</cell><cell>How weights are used to aggregate different matrices</cell></row><row><cell></cell><cell>random</cell><cell></cell></row><row><cell>N weights</cell><cell>N +</cell><cell>Number of weights (per colony)</cell></row><row><cell>NextWeight</cell><cell>one weight per iteration (1wpi), all weights per iteration (awpi)</cell><cell>How weights are used at each iteration</cell></row><row><cell></cell><cell>nondominated solutions (ND),</cell><cell></cell></row><row><cell>PheromoneUpdate</cell><cell>best-of-objective (BO),</cell><cell>Which solutions are selected for updating the pheromone</cell></row><row><cell></cell><cell>best-of-objective-per-weight (BOW)</cell><cell>matrices</cell></row><row><cell>N upd</cell><cell>N +</cell><cell>Number of solutions that update each [τ] matrix</cell></row><row><cell>N col</cell><cell>N +</cell><cell>Number of colonies</cell></row><row><cell>MultiColonyWeights</cell><cell>{ disjoint, overlapping }</cell><cell>How weights are partitioned among colonies</cell></row><row><cell>MultiColonyUpdate</cell><cell>{ origin, region }</cell><cell>How solutions are assigned to colonies for update</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>TABLE II</head><label>II</label><figDesc>Taxonomy of MOACO Algorithms as Instantiations of the Proposed Framework (N a Is the Number of Ants)</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>TABLE III</head><label>III</label><figDesc></figDesc><table><row><cell cols="2">Default Parameter Settings of the Underlying ACO</cell></row><row><cell></cell><cell>Algorithm (MMAS)</cell></row><row><cell>Parameter</cell><cell>Value</cell></row><row><cell>N a</cell><cell>24 • n/100</cell></row><row><cell>ρ</cell><cell>0.02 (n &lt; 300), 0.05 (n ≥ 300)</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>TABLE IV</head><label>IV</label><figDesc>Domain of Algorithmic Components of the Proposed MOACOFramework Used for the Automatic Configuration</figDesc><table><row><cell>Component</cell><cell>Domain</cell><cell>Constraint</cell></row><row><cell>[τ]</cell><cell>{single, multiple}</cell><cell></cell></row><row><cell>[η]</cell><cell>{single, multiple}</cell><cell></cell></row><row><cell></cell><cell>weighted sum,</cell><cell></cell></row><row><cell>Aggregation</cell><cell>weighted product,</cell><cell>Only if multiple τ or η</cell></row><row><cell></cell><cell>random</cell><cell></cell></row><row><cell>N weights</cell><cell>{2, 3, N a /3, N a /2, N a }</cell><cell>(Per colony)</cell></row><row><cell>NextWeight</cell><cell cols="2">one weight per iteration, all weights per iteration</cell></row><row><cell></cell><cell>ND,</cell><cell></cell></row><row><cell>PheromoneUpdate</cell><cell>BO, BOW  *</cell><cell>*  only with N col = 1</cell></row><row><cell>N upd</cell><cell>{1, 2, 5, 10}</cell><cell></cell></row><row><cell>N col</cell><cell>{1, 2, 3, 5, 10}</cell><cell></cell></row><row><cell cols="2">MultiColonyWeights {disjoint, overlapping}</cell><cell>Only if N col &gt; 1</cell></row><row><cell>MultiColonyUpdate</cell><cell>{origin, region}</cell><cell>Only if N col &gt; 1</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>TABLE V</head><label>V</label><figDesc>Configurations Obtained by Five Independent Tuner Runs, When Configuring the MultiobjectiveComponents of the Proposed MOACO Framework According to the Hypervolume</figDesc><table><row><cell>Component</cell><cell>Run 1</cell><cell>Run 2</cell><cell>Run 3</cell><cell>Run 4</cell><cell>Run 5</cell></row><row><cell>[τ]</cell><cell>Single</cell><cell>Multiple</cell><cell>Multiple</cell><cell>Multiple</cell><cell>Multiple</cell></row><row><cell>[η]</cell><cell>Multiple</cell><cell>Multiple</cell><cell>Multiple</cell><cell>Multiple</cell><cell>Multiple</cell></row><row><cell>Aggregation</cell><cell cols="5">w. product w. product w. product w. product w. product</cell></row><row><cell>N weights</cell><cell>N a /3</cell><cell>3</cell><cell>N a /2</cell><cell>N a /3</cell><cell>2</cell></row><row><cell>NextWeight</cell><cell>1wpi</cell><cell>1wpi</cell><cell>1wpi</cell><cell>1wpi</cell><cell>1wpi</cell></row><row><cell>PheromoneUpdate</cell><cell>ND</cell><cell>BO</cell><cell>BO</cell><cell>BO</cell><cell>BO</cell></row><row><cell>N upd</cell><cell>1</cell><cell>2</cell><cell>2</cell><cell>2</cell><cell>1</cell></row><row><cell>N col</cell><cell>1 0</cell><cell>5</cell><cell>1 0</cell><cell>1 0</cell><cell>1 0</cell></row><row><cell>MultiColonyWeights</cell><cell>Disjoint</cell><cell>Overlap</cell><cell>Disjoint</cell><cell>Overlap</cell><cell>Overlap</cell></row><row><cell>MultiColonyUpdate</cell><cell>Region</cell><cell>Region</cell><cell>Region</cell><cell>Region</cell><cell>Region</cell></row><row><cell></cell><cell></cell><cell>TABLE VI</cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="6">Configurations Obtained by Five Independent Tuner Runs, When Configuring the Multiobjective</cell></row><row><cell cols="6">Components of the Proposed MOACO Framework According to the Epsilon Measure</cell></row><row><cell>Component</cell><cell>Run 1</cell><cell>Run 2</cell><cell>Run 3</cell><cell>Run 4</cell><cell>Run 5</cell></row><row><cell>[τ]</cell><cell>Multiple</cell><cell>Single</cell><cell>Multiple</cell><cell>Multiple</cell><cell>Multiple</cell></row><row><cell>[η]</cell><cell>Multiple</cell><cell>Multiple</cell><cell>Multiple</cell><cell>Multiple</cell><cell>Multiple</cell></row><row><cell>Aggregation</cell><cell cols="5">w. product w. product w. product w. product w. product</cell></row><row><cell>N weights</cell><cell>2</cell><cell>N a /3</cell><cell>N a /2</cell><cell>N a</cell><cell>N a</cell></row><row><cell>NextWeight</cell><cell>awpi</cell><cell>1wpi</cell><cell>1wpi</cell><cell>1wpi</cell><cell>1wpi</cell></row><row><cell>PheromoneUpdate</cell><cell>BO</cell><cell>ND</cell><cell>BO</cell><cell>BO</cell><cell>BO</cell></row><row><cell>N upd</cell><cell>1</cell><cell>1</cell><cell>2</cell><cell>2</cell><cell>2</cell></row><row><cell>N col</cell><cell>10</cell><cell>10</cell><cell>5</cell><cell>10</cell><cell>10</cell></row><row><cell>MultiColonyWeights</cell><cell>Overlap</cell><cell>Overlap</cell><cell>Overlap</cell><cell>Overlap</cell><cell>Overlap</cell></row><row><cell>MultiColonyUpdate</cell><cell>Region</cell><cell>Region</cell><cell>Region</cell><cell>Region</cell><cell>Region</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>TABLE VII</head><label>VII</label><figDesc></figDesc><table><row><cell cols="2">Domain of the Parameter Settings of the Underlying ACO</cell></row><row><cell cols="2">Algorithm (MMAS) Used for Automatic Configuration</cell></row><row><cell>Component</cell><cell>Domain</cell></row><row><cell>a f</cell><cell>{1, 2, . . . , 25} where N a = 6 • a f • (n/100)</cell></row><row><cell>ρ</cell><cell>[0.01, 0.99]</cell></row><row><cell>q 0</cell><cell>[0.25, 0.99] or q 0</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>The hypervolume is calculated using the algorithm proposed by Fonseca et al.<ref type="bibr" target="#b33">[34]</ref>.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_1"><p>Source code is available at http://iridia.ulb.ac.be/∼manuel/moaco.</p></note>
		</body>
		<back>

			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This work was supported by the European Research Council through the ERC Advanced Grant E-SWARM, under Contract 246939, and by the Meta-X Project funded by the Scientific Research Directorate of the French Community of Belgium. The work of T. Stützle was supported by the Belgian F.R.S.-FNRS, with which he is a Research Associate. This work was also supported by the FRFC Project "Méthodes de recherche hybrides pour la résolution de problèmes complexes." This paper was recommended by Associate Editor T. Hendtlass.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Ant Colony Optimization</title>
		<author>
			<persName><forename type="first">M</forename><surname>Dorigo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
			<publisher>MIT Press</publisher>
			<pubPlace>Cambridge, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A concise overview of applications of ant colony optimization</title>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>López-Ibáñez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dorigo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Wiley Encyclopedia of Operations Research and Management Science</title>
		<editor>
			<persName><forename type="first">J</forename><forename type="middle">J</forename><surname>Cochran</surname></persName>
		</editor>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Wiley</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="896" to="911" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Multiple objective ant colony optimization</title>
		<author>
			<persName><forename type="first">D</forename><surname>Angus</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Woodward</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Swarm Intell</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="69" to="85" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A taxonomy and an empirical analysis of multiple objective ant colony optimization algorithms for the bi-criteria TSP</title>
		<author>
			<persName><forename type="first">C</forename><surname>García-Martínez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Cordón</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Herrera</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Eur. J. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">180</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="116" to="148" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Pareto ant colony optimization: A metaheuristic approach to multiobjective portfolio selection</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">F</forename><surname>Doerner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">J</forename><surname>Gutjahr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">F</forename><surname>Hartl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Strauss</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Stummer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Ann. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">131</biblScope>
			<biblScope unit="issue">1-4</biblScope>
			<biblScope unit="page" from="79" to="99" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A multiobjective ant colony system for vehicle routing problem with time windows</title>
		<author>
			<persName><forename type="first">B</forename><surname>Barán</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Schaerer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 21st IASTED Int. Conf. Appl. Informatics</title>
		<meeting>21st IASTED Int. Conf. Appl. Informatics</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="97" to="102" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Bi-criterion optimization with multicolony ant algorithms</title>
		<author>
			<persName><forename type="first">S</forename><surname>Iredi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Merkle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Middendorf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Evol. Multi-Criterion Optimization</title>
		<meeting>Evol. Multi-Criterion Optimization</meeting>
		<imprint>
			<date type="published" when="1993">1993. 2001</date>
			<biblScope unit="page" from="359" to="372" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">On the design of ACO for the biobjective quadratic assignment problem</title>
		<author>
			<persName><forename type="first">M</forename><surname>López-Ibáñez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Paquete</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 4th Int. Workshop Ant Colony Optimization Swarm Intell</title>
		<meeting>4th Int. Workshop Ant Colony Optimization Swarm Intell</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="volume">3172</biblScope>
			<biblScope unit="page" from="214" to="225" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Ant colony optimization for multiobjective optimization problems</title>
		<author>
			<persName><forename type="first">I</forename><surname>Alaya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Solnon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Ghédira</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 19th IEEE ICTAI</title>
		<meeting>19th IEEE ICTAI</meeting>
		<imprint>
			<date type="published" when="2007-10">Oct. 2007</date>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="450" to="457" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Ant system: Optimization by a colony of cooperating agents</title>
		<author>
			<persName><forename type="first">M</forename><surname>Dorigo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Maniezzo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Colorni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Syst. Man Cybern. B</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="29" to="41" />
			<date type="published" when="1996-02">Feb. 1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">MAX-MIN ant system</title>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">H</forename><surname>Hoos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Future Generation Comput. Syst</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="889" to="914" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Ant colony system: A cooperative learning approach to the traveling salesman problem</title>
		<author>
			<persName><forename type="first">M</forename><surname>Dorigo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">M</forename><surname>Gambardella</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Evol. Comput</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="53" to="66" />
			<date type="published" when="1997-04">Apr. 1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">An analysis of algorithmic components for multiobjective ant colony optimization: A case study on the biobjective TSP</title>
		<author>
			<persName><forename type="first">M</forename><surname>López-Ibáñez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Artif. Evol.: 9th Int. Conf. EA, LNCS 5975</title>
		<meeting>Artif. Evol.: 9th Int. Conf. EA, LNCS 5975</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="134" to="145" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">The impact of design choices of multiobjective ant colony optimization algorithms on performance: An experimental study on the biobjective TSP</title>
		<author>
			<persName><forename type="first">M</forename><surname>López-Ibáñez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. GECCO</title>
		<meeting>GECCO</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="71" to="78" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Automatic configuration of multiobjective ACO algorithms</title>
		<author>
			<persName><forename type="first">M</forename><surname>López-Ibáñez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 7th Int. Conf. ANTS: Swarm Intell</title>
		<meeting>7th Int. Conf. ANTS: Swarm Intell</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="volume">6234</biblScope>
			<biblScope unit="page" from="95" to="106" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">SATenstein: Automatically building local search SAT solvers from components</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">R</forename><surname>Khudabukhsh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">H</forename><surname>Hoos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Leyton-Brown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 21st IJCAI</title>
		<meeting>21st IJCAI</meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="517" to="524" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Improvement strategies for the F-race algorithm: Sampling design and iterative refinement</title>
		<author>
			<persName><forename type="first">P</forename><surname>Balaprakash</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Birattari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Hybrid Metaheuristics</title>
		<title level="s">LNCS</title>
		<meeting>Hybrid Metaheuristics</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="volume">4771</biblScope>
			<biblScope unit="page" from="108" to="122" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">The irace package: Iterated race for automatic algorithm configuration</title>
		<author>
			<persName><forename type="first">M</forename><surname>López-Ibáñez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Dubois-Lacoste</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Birattari</surname></persName>
		</author>
		<idno>TR/IRIDIA/2011-004</idno>
		<ptr target="http://iridia.ulb.ac.be/IridiaTrSeries/IridiaTr2011-004.pdf" />
	</analytic>
	<monogr>
		<title level="j">IRIDIA, Univ. Libre Bruxelles</title>
		<imprint>
			<date type="published" when="2011">2011</date>
			<pubPlace>Brussels, Belgium</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">Tech. Rep.</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Parameter tuning boosts performance of variation operators in multiobjective optimization</title>
		<author>
			<persName><forename type="first">S</forename><surname>Wessing</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Beume</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Rudolph</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Naujoks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 11th PPSN</title>
		<meeting>11th PPSN</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="volume">6238</biblScope>
			<biblScope unit="page" from="728" to="737" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><surname>Birattari</surname></persName>
		</author>
		<title level="m">Tuning Metaheuristics: A Machine Learning Perspective (Studies in Computational Intelligence</title>
		<meeting><address><addrLine>Berlin/Heidelberg, Germany</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="volume">197</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Stochastic Local Search-Foundations and Applications</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">H</forename><surname>Hoos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005">2005</date>
			<publisher>Morgan Kaufmann</publisher>
			<pubPlace>San Francisco, CA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Approximative solution methods for combinatorial multicriteria optimization</title>
		<author>
			<persName><forename type="first">M</forename><surname>Ehrgott</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Gandibleux</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Top</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="88" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Design and analysis of stochastic local search for the multiobjective traveling salesman problem</title>
		<author>
			<persName><forename type="first">L</forename><surname>Paquete</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="2619" to="2631" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Two-phase Pareto local search for the biobjective traveling salesman problem</title>
		<author>
			<persName><forename type="first">T</forename><surname>Lust</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Teghem</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Heuristics</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="475" to="510" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">SPEA2: Improving the strength Pareto evolutionary algorithm for multiobjective optimization</title>
		<author>
			<persName><forename type="first">E</forename><surname>Zitzler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Laumanns</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Thiele</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Evolutionary Methods for Design</title>
		<editor>
			<persName><forename type="first">K</forename><surname>Control</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">D</forename><surname>Giannakoglou</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><surname>Tsahalis</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">K</forename><surname>Periaux</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">T</forename><surname>Papaliliou</surname></persName>
		</editor>
		<editor>
			<persName><surname>Fogarty</surname></persName>
		</editor>
		<meeting><address><addrLine>Barcelona, Spain</addrLine></address></meeting>
		<imprint>
			<publisher>CIMNE</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="95" to="100" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Are CompetAnts more competent for problem solving? The case of a multiple objective transportation problem</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">F</forename><surname>Doerner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">F</forename><surname>Hartl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Reimann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Central Eur. J. Oper. Res. Econ</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="115" to="141" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">MACS-VRPTW: A multiple ant colony system for vehicle routing problems with time windows</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">M</forename><surname>Gambardella</surname></persName>
		</author>
		<author>
			<persName><forename type="first">É</forename><forename type="middle">D</forename><surname>Taillard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Agazzi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">New Ideas in Optimization</title>
		<editor>
			<persName><forename type="first">D</forename><surname>Corne</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">M</forename><surname>Dorigo</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">F</forename><surname>Glover</surname></persName>
		</editor>
		<meeting><address><addrLine>London, U.K.</addrLine></address></meeting>
		<imprint>
			<publisher>McGraw-Hill</publisher>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="63" to="76" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Solving multiobjective permutation problems with population based ACO</title>
		<author>
			<persName><forename type="first">M</forename><surname>Guntsch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Middendorf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. EMO, LNCS 2632</title>
		<meeting>EMO, LNCS 2632</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="464" to="478" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Population-based ant colony optimization for multiobjective function optimization</title>
		<author>
			<persName><forename type="first">D</forename><surname>Angus</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Prog. Artif. Life</title>
		<meeting>Prog. Artif. Life</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="volume">4828</biblScope>
			<biblScope unit="page" from="232" to="244" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">MOAQ: An Ant-Q algorithm for multiple objective optimization problems</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">E</forename><surname>Mariano</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Morales</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. GECCO</title>
		<meeting>GECCO</meeting>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="894" to="901" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Metaheuristics for the bi-objective orienteering problem</title>
		<author>
			<persName><forename type="first">M</forename><surname>Schilde</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">F</forename><surname>Doerner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">F</forename><surname>Hartl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Kiechle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Swarm Intell</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="179" to="201" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">On the invariance of ant colony optimization</title>
		<author>
			<persName><forename type="first">M</forename><surname>Birattari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Pellegrini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dorigo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Evol. Comput</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="732" to="742" />
			<date type="published" when="2007-12">Dec. 2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">F-race and iterated F-race: An overview</title>
		<author>
			<persName><forename type="first">M</forename><surname>Birattari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Balaprakash</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Experimental Methods for the Analysis of Optimization Algorithms</title>
		<editor>
			<persName><forename type="first">T</forename><surname>Bartz-Beielstein</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">M</forename><surname>Chiarandini</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">L</forename><surname>Paquete</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">M</forename><surname>Preuss</surname></persName>
		</editor>
		<meeting><address><addrLine>Berlin, Germany</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="311" to="336" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">An improved dimension-sweep algorithm for the hypervolume indicator</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">M</forename><surname>Fonseca</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Paquete</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>López-Ibáñez</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. CEC</title>
		<meeting>CEC</meeting>
		<imprint>
			<date type="published" when="2006-07">Jul. 2006</date>
			<biblScope unit="page" from="1157" to="1163" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Performance assessment of multiobjective optimizers: An analysis and review</title>
		<author>
			<persName><forename type="first">E</forename><surname>Zitzler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Thiele</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Laumanns</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">M</forename><surname>Fonseca</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Grunert Da Fonseca</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Evol. Comput</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="117" to="132" />
			<date type="published" when="2003-04">Apr. 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">MAX-MIN ant system and local search for combinatorial optimization problems</title>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">H</forename><surname>Hoos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Meta-Heuristics: Advances and Trends in Local Search Paradigms for Optimization</title>
		<title level="s">The Netherlands</title>
		<editor>
			<persName><forename type="first">S</forename><surname>Voss</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">I</forename><surname>Martello</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">C</forename><surname>Osman</surname></persName>
		</editor>
		<editor>
			<persName><surname>Roucairol</surname></persName>
		</editor>
		<meeting><address><addrLine>Dordrecht</addrLine></address></meeting>
		<imprint>
			<publisher>Kluwer</publisher>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="137" to="154" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title level="m" type="main">ACOTSP: A Software Package of Various Ant Colony Optimization Algorithms Applied to the Symmetric Traveling Salesman Problem</title>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
		<ptr target="http://www.aco-metaheuristic.org/aco-code/" />
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">The Automatic Design of Multiobjective Ant Colony Optimization Algorithms: Supplementary Material</title>
		<author>
			<persName><forename type="first">M</forename><surname>López-Ibáñez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
		<ptr target="http://iridia.ulb.ac.be/supp/IridiaSupp2011-007/Iridia-2011-007.pdf" />
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">His current research interests include the engineering, experimental analysis and automatic configuration of stochastic optimization algorithms for single and multiobjective optimization problems</title>
		<author>
			<persName><forename type="first">T</forename><surname>Lust</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Jaszkiewicz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Thomas St ützle received the Diplom, M.S., degree in business engineering from Universität Karlsruhe</title>
		<meeting><address><addrLine>Granada, Spain; Brussels, Belgium; Karlsruhe, Germany; Darmstadt, Germany; Brussels; San Francisco, CA; Cambridge, MA</addrLine></address></meeting>
		<imprint>
			<publisher>MIT Press</publisher>
			<date type="published" when="1998">2010. 2009. 1998 and 2004</date>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="page" from="521" to="533" />
		</imprint>
		<respStmt>
			<orgName>D. degree from Edinburgh Napier University, Edinburgh, U.K. ; Institut de Recherches Interdisciplinaires et de Développements en Intelligence Atificielle, Université libre de Bruxelles ; Department of Computer Science, Technische Universität Darmstadt ; Université libre de Bruxelles</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">R.S.-FNRS, Institut de Recherches Interdisciplinaires et de Développements en Intelligence Atificielle</note>
	<note>He has published extensively in the wider area of metaheuristics (more than 150 peer-reviewed articles in journals. His current research interests range from stochastic local search (SLS) algorithms, large-scale experimental studies, automated design of algorithms, to SLS algorithms engineering</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
