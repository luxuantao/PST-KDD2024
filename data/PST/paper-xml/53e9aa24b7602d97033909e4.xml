<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Robust Task Scheduling on Heterogeneous Computing Systems using Segmented MaxR-MinCT</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">P</forename><surname>Chitra</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">Thiagarajar College of Engineering</orgName>
								<address>
									<postCode>625 015</postCode>
									<settlement>Madurai, Tamilnadu</settlement>
									<country key="IN">India</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><surname>Prakash</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">Thiagarajar College of Engineering</orgName>
								<address>
									<postCode>625 015</postCode>
									<settlement>Madurai, Tamilnadu</settlement>
									<country key="IN">India</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Robust Task Scheduling on Heterogeneous Computing Systems using Segmented MaxR-MinCT</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">FAF0E9BCC3B8DDD87DA218417E39DEB7</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T14:06+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Distributed computing</term>
					<term>Dynamic mapping</term>
					<term>Heterogeneous computing</term>
					<term>Robust</term>
					<term>Resource allocation</term>
					<term>Scheduling</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Task Scheduling on Multiprocessor is NPcomplete. This work solves the Task Scheduling on Heterogeneous Computing Systems using Segmented MaxR-MinCT Heuristic with Robust metric. A schedule is said to be robust if it is able to absorb some degree of uncertainty in tasks execution time while maintaining the stable solution. Robustness can be defined as the degree to which a system can function correctly in the presence of parameter values different from those assumed.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>The multiprocessor scheduling problem is to allocate the tasks of a parallel program to processors in a way that minimizes its completion time. Heterogeneous parallel and distributed computing is defined as the processors in the network that have different capabilities to optimize certain system performance features. Heterogeneous computing systems may work where some estimated parameters may degrade the performance of the systems. Many Researches is under progress to map the tasks into machines and scheduling of tasks that maximizes the performance feature against perturbations in system parameters.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. PREVIOUS HUERISTICS</head><p>In this section, we review a set of heuristic algorithms which schedule meta-tasks to heterogeneous computing systems. A meta-task is defined as a collection of independent tasks with no data dependences. Tasks are mapped dynamically; each machine executes a single task at a time. In this work it is assumed that number of tasks and its execution time is not known in priori.</p><p>A large number of heuristic algorithms have been designed to schedule tasks to machines on heterogeneous computing systems. Ashish M. Mehtha <ref type="bibr" target="#b0">[1]</ref> proposed MaxR-MinCT for Maximizing Robustness of Task Scheduling ,but the drawback of MaxR-MinCT is that it doesn't talk about Load balancing while dynamically schedule. In Min-min, the minimum completion time for each task is computed respect to all machines. The task with the overall minimum completion time is selected and assigned to the corresponding machine. The newly Mapped task is removed, and the process repeats until all tasks are mapped <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b2">3]</ref>. But this heuristic addresses only about the scheduling but not the robustness as well as Load Balance.Min-You Wu and Wei Shu <ref type="bibr" target="#b2">[3]</ref>, proposed Segmented min-min which balances the load well and demonstrates the good performance in static schedule. But this heuristic is not suited for the Robust task scheduling in on-line fashion.</p><p>We propose the new heuristic, named Segmented MaxR-MinCT(Maximum Robustness-Minimum Completion Time). The work presented in this paper is motivated by MaxR-MinCT heuristic as well as Seg. Min-Min heuristic of <ref type="bibr" target="#b0">[1]</ref> and <ref type="bibr" target="#b2">[3]</ref> respectively. Minmin schedules the "best case" tasks first and generates relatively good schedules. The drawback of Min-Min is that it assigns the small task first. Thus, the smaller tasks would execute first and then a few larger tasks execute while several machines sit idle, resulting in poor machine utilization. We propose a simple method to enforce large tasks to be scheduled first. Tasks are partitioned into segments according to their execution times. The segment with larger tasks is scheduled first with the MaxR-MinCT algorithm being applied within the segment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. PROBLEM STATEMENT</head><p>In this paper, T independent tasks (i.e., there is no inter task communication) arrive at a Scheduler dynamically, where the arrival times of the individual tasks are not known in advance. Arriving tasks are each mapped to one machine in the set of M machines that comprise the heterogeneous computing system. Each machine is assumed to execute a single task at a time (i.e., no multitasking). In this environment, the robustness of a resource allocation must be determined at every mapping event-recall that a mapping event occurs when a new task arrives to the system. Let T(t) be the set of tasks either currently executing or pending execution on any machine at time t, i.e., T(t) does not include tasks that have already completed execution. Let F j (t) be the predicted finishing time of machine j for a given resource allocation µ based on the given ETC values. Let MQj(t) denote the subset of T(t) previously mapped to machine j's queue and let scet j (t) denote the starting time of the currently executing task on machine j. Mathematically, given some machine j (1) Let β(t) denote the maximum of the finishing times F j (t) for all machines at time t-i.e., the predicted make span at time t. Mathematically, <ref type="bibr" target="#b1">(2)</ref> The robustness metric for this work has been derived using the procedure defined in <ref type="bibr" target="#b2">[3]</ref>. In our current study, given uncertainties in the ETC values, a resource allocation is considered robust if, at a mapping event, the actual makespan is no more than τ seconds greater than the predicted makespan. Thus, given a resource allocation µ, the robustness radius r µ (Fj(t)) of machine j can be quantitatively defined as the maximum collective error in the estimated task computation times that can occur where the actual makespan will be within τ time units of the predicted makespan. Mathematically, building on a result in , <ref type="bibr" target="#b2">(3)</ref> The robustness metric ρ µ (t) for a given mapping µ is simply the minimum of the robustness radii over all machines <ref type="bibr" target="#b2">[3]</ref>. Mathematically, (4) With the robustness metric defined in this way, ρ µ (t) corresponds to the collective deviation from assumed circumstances (relevant ETC values) that the resource allocation can tolerate and still ensure that system performance will be acceptable (the actual makespan is within τ of the predicted).</p><p>Let Te be the set of all mapping event times. The robustness value of the mapping is defined as the smallest robustness metric that occurs at any mapping event time in Te. The primary objective of heuristics in this research is to maximize the robustness value, i.e., <ref type="bibr" target="#b5">(5)</ref> In addition to maximizing robustness, heuristics in this research must complete all T incoming tasks within an overall makespan constraint (α). Therefore, the goal of heuristics in this research is to dynamically map incoming tasks to machines such that the robustness value is maximized while completing all tasks within an overall makespan constraint (based on ETC values).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. THE SEGMENTED MAX-MIN ALGORITHM</head><p>Following assumptions are considered as given in <ref type="bibr" target="#b0">[1]</ref>. Five pseudo-batch mode heuristics were studied for this research. All of the heuristics used a common procedure to identify a set of feasible machines, where a machine is considered feasible if it can execute the task without violating the makespan constraint that is, for a task under consideration, a machine is considered feasible if that machine can satisfy the makespan constraint when the task is assigned to it. To avoid idle machines in the system caused by waiting for a heuristic to complete a mapping event, a task that is next in line to begin execution on any machine will not be considered for mapping at a mapping event. While it is still possible that a machine may become idle, it is highly unlikely for the assumptions in this research (the average execution time of a task is 120 seconds while the average execution time of a mapping event is less than 0.6 seconds)</p><p>MaxR-MinCT builds on the concept of the Max-Min heuristic defined in <ref type="bibr">[14]</ref>. For each mappable task, MaxR-MinCT identifies the set of feasible machines. The procedure at each mapping event can be summarized as follows:</p><p>i.</p><p>A task list is generated that includes all mappable tasks. ii.</p><p>For each task in the task list, find the set of feasible machines. If the set is empty for any task, exit with error ("constraint violation"). iii.</p><p>For each mappable task (ignoring other mappable tasks), find the feasible machine that minimizes completion time. iv.</p><p>From the above task/machine pairs select the pair that maximizes the robustness radius. v.</p><p>Remove the task from the task list and map it onto the chosen machine. vi.</p><p>Update the machine available time. vii.</p><p>Repeat ii-vi until task list is empty. Let the provided constant τ be the upper bound on robustness. To prove that robustness can be no higher than τ is to show that at least one machine will have at least one task assigned to it during the course of the simulation. When the first task is assigned to some machine in the system the robustness radius of that machine becomes τ . In equation 3, β(t) -Fj(t) goes to zero for the makespan machine. Because the machine with the first and only task assigned to it is now the makespan defining machine, its robustness radius is now τ . The robustness radius of this machine defines the robustness metric for the system because it is the smallest of the robustness radii at this mapping event. Because the robustness value is defined as the smallest robustness metric over all mapping events, that value can be no greater than τ .</p><p>Every task has a ETC (expected time to compute) on a specific machine. If there are n tasks and m machines, we can obtain a n*m ETC matrix. ETC(i; j) is the estimated execution time for task i on machine j. The Segmented MaxR-MinCT algorithm sorts the tasks according to ETCs. The tasks can be sorted into an ordered list by the average ETC, the minimum ETC, or the maximum ETC. Then, the task list is partitioned into segments with the equal size. The segment of larger tasks is scheduled first and the segment of smaller tasks last. For each segment, Min-min is applied to assign tasks to machines. The algorithm is described as follows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Segmented MaxR-MinCT</head><p>1. Compute the sorting key for each task: SUB-POLICY 1-Smm-avg: Compute the average value of each row in ETC matrix SUB-POLICY 2 -Smm-min: Compute the minimum value of each row in ETC matrixj ): SUB-POLICY 3 -Smm-max: Compute the maximum value of each row in ETC matrix 2. Sort the tasks into a task list in decreasing order of their keys. 3. Partition the tasks evenly into segments. 4. Schedule each segment in order by applying MaxR-MinCT.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. SIMULATION SETUP</head><p>The simulated environment consists of T = 1024 independent tasks and M = 15 machines. This number of tasks and machines was chosen to present a significant mapping challenge for each heuristic and to prevent an exhaustive search for an optimal solution (however, the presented techniques can be applied to environments with different number of tasks and machines). As stated earlier, each task arrives dynamically and the arrival times are not known a priori. All of the ETC matrices generated were inconsistent (i.e., machine A being faster than machine B for task 1 does not imply that machine A is faster than machine B for task 2) <ref type="bibr" target="#b6">[6]</ref>. All ETC matrices were generated using the gamma distribution method presented in <ref type="bibr" target="#b3">[4]</ref>. The arrival time of each incoming task was generated according to a Poisson distribution. The mean task inter-arrival rate was eight seconds.</p><p>In the gamma distribution method of <ref type="bibr" target="#b3">[4]</ref>, a mean task execution time and coefficient of variation (COV) are used to generate ETC matrices. Fig. <ref type="figure" target="#fig_0">1</ref> demontrates the comparion of this Segmented MaxR-minCT heuristic with other heuristics. It shows that MaxR-MinCT heuristic with segmentation provides performance similar to the min-min heuristic as well as provides more robustness to the scheduler.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. VI. CONCLUSION</head><p>Four different pseudo-batch mode heuristics were designed to address a dynamic resource allocation problem. A process of fine tuning was also adapted to the problem to maximize the robustness of a mapping in the proposed environment. Each heuristic was analyzed for its ability to maximize robustness given a hard constraint on overall makespan. Of the proposed heuristics, the Segmented MaxR-MinCT heuristic demonstrated good potential in the simulation environment and should be considered further. In future, a real time application in which jobs shall have dependency with each other will be considered for implementation using Segmented MaxR-MinCT heuristics. And also it will be implemented in parallel programming using MPI to illustrate the performance of the parallel heuristics. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. Comparison Chart</figDesc><graphic coords="3,306.18,76.98,245.16,131.28" type="bitmap" /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>© 2009 ACADEMY PUBLISHER</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Dynamic Resource Management Heuristics for Minimizing Makespan while maintaining an Acceptable Level of Robustness in an Uncertain Environment</title>
		<author>
			<persName><forename type="first">Ashish</forename><forename type="middle">M</forename><surname>Mehta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jay</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">J</forename><surname>Siegel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Anthony</forename><forename type="middle">A</forename><surname>Maciejewski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Arun</forename><surname>Jayaseelan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bin</forename><surname>Ye</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">12 th International Conference on Parallel and Distributed Systems</title>
		<imprint>
			<date type="published" when="2006-01">January 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Segmented Min-Min: A Static Mapping Algorithm for Meta-tasks on Heterogeneous Computing Systems</title>
		<author>
			<persName><forename type="first">Min-You</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wei</forename><surname>Shu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hong</forename><surname>Zhang</surname></persName>
		</author>
		<idno>0-7695-0556-2/00 2000 IEEE</idno>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Dynamic Resource Allocation Heuristics for Maximizing Robustness with an Overall makespan Constraint in an Uncertain Environment</title>
		<author>
			<persName><forename type="first">Ashish</forename><forename type="middle">M</forename><surname>Mehta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jay</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">J</forename><surname>Siegel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Anthony</forename><forename type="middle">A</forename><surname>Maciejewski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Arun</forename><surname>Jayaseelan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bin</forename><surname>Ye</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Shoukat</forename><surname>Ali</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Howard</forename><surname>Jay Siegel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Muthucumaru</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Represent Task and machine Hetrogeneities for Heterogeneous Computing Systems</title>
		<author>
			<persName><forename type="first">Debra</forename><surname>Maheswaran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sahra</forename><surname>Hensgen</surname></persName>
		</author>
		<author>
			<persName><surname>Ali</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Special 50 th Anniversary Issue</title>
		<imprint>
			<date type="published" when="2000-11">Nov. 2000</date>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="195" to="207" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Robust task scheduling in non-deterministic heterogeneous computing systems</title>
		<author>
			<persName><forename type="first">Zhiao</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Emmanuel</forename><surname>Jeannot</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jack</forename><forename type="middle">J</forename><surname>Dongarra</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">A Modular Genetic Algorithm for Scheduling Task Graphs</title>
		<author>
			<persName><forename type="first">Michael</forename><surname>Rinehart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Vida</forename><surname>Kianzad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shuvra</forename><forename type="middle">S</forename><surname>Bhattacharyya</surname></persName>
		</author>
		<idno>UMIACS-TR-2003-66</idno>
		<imprint>
			<date type="published" when="2003-06">June 2003</date>
		</imprint>
		<respStmt>
			<orgName>Institute for Advanced Compuer Studies, University of Maryland at College Park</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Efficient Compile-Time Task scheduling for Heterogeneous Distributed Computing Systems</title>
		<author>
			<persName><forename type="first">Mohammad</forename><forename type="middle">I</forename><surname>Daoud</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nawwaf</forename><surname>Kharma</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 12th International Conference on Parallel and Distributed Systems (ICPADS&apos;06)</title>
		<meeting>the 12th International Conference on Parallel and Distributed Systems (ICPADS&apos;06)</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A Task Scheduling Algorithm of Single Processor Parallel Test System</title>
		<author>
			<persName><forename type="first">Jiajing</forename><surname>Zhuo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chen</forename><surname>Meng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Minghu</forename><surname>Zou</surname></persName>
		</author>
		<idno>0-7695-2909-7/07</idno>
	</analytic>
	<monogr>
		<title level="m">Eighth ACIS International Conference on Software Engineering, Artificial Intelligence, Networking, and Parallel/Distributed Computing</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Minimizing the Application Execution Time Through Scheduling of Subtasks and Communication Traffic in a Heterogeneous Computing System</title>
		<author>
			<persName><forename type="first">Min</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Howard</forename><forename type="middle">Jay</forename><surname>Siegel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><forename type="middle">K</forename><surname>Antonio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yan</forename><forename type="middle">Alexander</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions On Parallel And Distributed systems</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">8</biblScope>
			<date type="published" when="1997-08">August 1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Minimizing the Makespan for unrelated Parallel Systems</title>
		<author>
			<persName><forename type="first">Yunsong</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Lim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Brian</forename><surname>Rodrigues</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Liang</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal on Artificial Intelligence Tools</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="399" to="415" />
			<date type="published" when="2007">2007</date>
			<publisher>World Scientific Publishing Company</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
