<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Solving NP-Complete Problems With Networks of Evolutionary Processors</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Juan</forename><surname>Castellanos</surname></persName>
							<email>jcastellanos@fi.upm.es</email>
						</author>
						<author>
							<persName><forename type="first">Carlos</forename><surname>Martín-Vide</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Victor</forename><surname>Mitrana</surname></persName>
							<email>mitrana@funinf.math.unibuc.ro</email>
							<affiliation key="aff4">
								<orgName type="department">Research supported by the Dirección General de Enseñanza Superior e Investigación Ci-entifica</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">José</forename><forename type="middle">M</forename><surname>Sempere</surname></persName>
							<email>jsempere@dsic.upv.es</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Department of Artificial Intelligence</orgName>
								<orgName type="institution">Polytechnical University of Madrid</orgName>
								<address>
									<addrLine>28660 Boadilla del Monte</addrLine>
									<settlement>Madrid</settlement>
									<country key="ES">Spain</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="laboratory">Research Group in Mathematical Linguistics Rovira i Virgili University Pça. Imperial Tàrraco 1</orgName>
								<address>
									<postCode>43005</postCode>
									<settlement>Tarragona</settlement>
									<country key="ES">Spain</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">Faculty of Mathematics</orgName>
								<orgName type="institution">University of Bucharest</orgName>
								<address>
									<addrLine>Str. Academiei 14</addrLine>
									<postCode>70109</postCode>
									<settlement>Bucharest</settlement>
									<country key="RO">Romania</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<orgName type="department">Department of Information Systems and Computation</orgName>
								<orgName type="institution">Polytechnical University of Valencia</orgName>
								<address>
									<postCode>46071</postCode>
									<settlement>Valencia</settlement>
									<country key="ES">Spain</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Solving NP-Complete Problems With Networks of Evolutionary Processors</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">17E0FE9CEEA4C5EC166A4A9B8903C723</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T06:06+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We propose a computational device based on evolutionary rules and communication within a network, similar to that introduced in [4], called network of evolutionary processors. An NP-complete problem is solved by networks of evolutionary processors of linear size in linear time. Some furher directions of research are finally discussed.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>A basic architecture for parallel and distributed symbolic processing, related to the Connection Machine <ref type="bibr" target="#b7">[8]</ref> as well as the Logic Flow paradigm <ref type="bibr" target="#b4">[5]</ref>, consists of several processors, each of them being placed in a node of a virtual complete graph, which are able to handle data associated with the respective node. Each node processor acts on the local data in accordance with some predefined rules, and, then local data becomes a mobile agent which can navigate in the network following a given protocol. Only such data can be communicated which can pass a filtering process. This filtering process may require to satisfy some conditions imposed by the sending processor, by the receiving processor or by both of them. All the nodes send simultaneously their data and the receiving nodes handle also simultaneously all the arriving messages, according to some strategies, see, e.g., <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b7">8]</ref>.</p><p>Starting from the premise that data can be given in the form of strings, <ref type="bibr" target="#b3">[4]</ref> introduces a concept called network of parallel language processors in the aim of investigating this concept in terms of formal grammars and languages. Networks of language processors are closely related to grammar systems, more specifically to parallel communicating grammar systems <ref type="bibr" target="#b2">[3]</ref>. The main idea is that one can place a language generating device (grammar, Lindenmayer system, etc.) in any node of an underlying graph which rewrite the strings existing in the node, then the strings are communicated to the other nodes. Strings can be successfully communicated if they pass some output and input filter.</p><p>In the present paper, we modify this concept in the following way inspired from cell biology. Each processor placed in a node is a very simple processor, an evolutionary processor. By an evolutionary processor we mean a processor which is able to perform very simple ooperations, namely point mutations in a DNA sequence (insertion, deletion or substitution of a pair of nucleotides). More generally, each node may be viewed as a cell having a genetic information encoded in DNA sequences which may evolve by local evolutionary events, that is point mutations. Each node is specialized just for one of these evolutionary operations. Furthermore, the data in each node is organized in the form of multisets of strings, each copy being processed in parallel such that all the possible evolutions events that can take place do actually take place.</p><p>These networks may be used as language (macroset) generating devices or as computational ones. Here, we consider them as computational mechanisms and show how an NP-complete problem can be solved in linear time.</p><p>It is worth mentioning here the similarity of this model to that of a P system, a new computing model inspired by the hierarchical and modularized cell structure recently proposed in <ref type="bibr" target="#b9">[10]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Preliminaries</head><p>We start by summarizing the notions used throughout the paper. An alphabet is a finite and nonempty set of symbols. Any sequence of symbols from an alphabet V is called string (word) over V . The set of all strings over V is denoted by V * and the empty string is denoted by ε. The length of a string x is denoted by |x|.</p><p>A multiset over a set X is a mappingg M : X -→ N ∪ {∞}. The number M (x) expresses the number of copies of x ∈ X in the multiset M . When M (x) = ∞, then x appears arbitrarily many times in M . The set supp(M ) is the support of M , i.e., supp(M ) = {x ∈ X | M (x) &gt; 0}. For two multisets M 1 and M 2 over X we define their union by (M 1 ∪ M 2 )(x) = M 1 (x) + M 2 (x). For other operations on multisets the reader may consult <ref type="bibr" target="#b0">[1]</ref>.</p><p>A network of evolutionary processors (NEP for short) of size n is a construct</p><formula xml:id="formula_0">Γ = (V, N 1 , N 2 , . . . , N n ),</formula><p>where:</p><formula xml:id="formula_1">• V is an alphabet, • for each 1 ≤ i ≤ n, N i = (M i , A i , P I i , F I i , P O i , F O i )</formula><p>is the i-th evolutionary node processor of the network. The parameters of every processor are: * M i is a finite set of evolution rules of one of the following forms only a → b, a, b ∈ V (substitution rules), a → ε, a ∈ V (deletion rules), ε → a, a ∈ V (insertion rules), More clearly, the set of evolution rules of any processor contains either substitution or deletion or insertion rules. * A i is a finite set of strings over V . The set A i is the set of initial strings in the i-th node. Actually, in what follows, we consider that each string appearing in a node of the net at any step has an arbitrarily large number of copies in that node, so that we shall identify multisets by their supports. * P I i and F I i are subsets of V representing the input filter. This filter, as well as the output filter, is defined by random context conditions, P I i forms the permitting context condition and F I i forms the forbidding context condition. A string w ∈ V * can pass the input filter of the node processor i, if w contains each element of P I i but no element of F I i . Note that any of the random context conditions may be empty, in this case the corresponding context check is omitted. We write ρ i (w) = true, if w can pass the input filter of the node processor i and ρ i (w) = f alse, otherwise. * P O i and F O i are subsets of V representing the output filter. Analogously, a string can pass the output filter of a node processor if it satisfies the random context conditions associated with that node. Similarly, we write τ i (w) = true, if w can pass the input filter of the node processor i and τ i (w) = f alse, otherwise.</p><p>By a configuration (state) of an NLP as above we mean an n-tuple C = (L 1 , L 2 , . . . , L n ), with L i ⊆ V * for all 1 ≤ i ≤ n. A configuration represents the sets of strings (remember that each string appears in an arbitrarily large number of copies) which are present in any node at a given moment; clearly the initial configuration of the network is C 0 = (A 1 , A 2 , . . . , A n ). A configuration can change either by an evolutionary step or by a communicating step. When changing by a evolutionary step, each component L i of the configuration is changed in accordance with the evolutionary rules associated with the node i. Formally, we say that the configuration C 1 = (L 1 , L 2 , . . . , L n ) directly changes for the configuration C 2 = (L 1 , L 2 , . . . , L n ) by a evolutionary step, written as</p><formula xml:id="formula_2">C 1 =⇒ C 2 if L i</formula><p>is the set of strings obtained by applying the rules of R i to the strings in L i as follows:</p><p>• If the same substitiution rule may replace different occurrences of the same symbol within a string, all these occurrences must be replaced within different copies of that string. The result is the multiset in which every string that can be obtained appears in an arbitrarily large number of copies.</p><p>• Unlike their common use, deletion and insertion rules are applied only to the end of the string. Thus, a deletion rule a → ε can be applied only to a string which ends by a, say wa, leading to the string w, and an insertion rule ε → a applied to a string x consists of adding the symbol a to the end of x, obtaining xa.</p><p>• If more than one rule, no matter its type, applies to a string, all of them must be used for different copies of that string.</p><p>More precisely, since an arbitrarily large number of copies of each string is available in every node, after a evolutionary step in each node one gets an arbitrarily large number of copies of any string which can be obtained by using any rule in the set of evolution rules associated with that node. By definition, if L i is empty for some 1 ≤ i ≤ n, then L i is empty as well.</p><p>When changing by a communication step, each node processor sends all copies of the strings it has which are able to pass its output filter to all the other node processors and receives all copies of the strings sent by any node processor providing that they can pass its input filter. Formally, we say that the configuration C 1 = (L 1 , L 2 , . . . , L n ) directly changes for the configuration C 2 = (L 1 , L 2 , . . . , L n ) by a communication step, written as</p><formula xml:id="formula_3">C 1 C 2 if for every 1 ≤ i ≤ n, L i = L i \ {w ∈ L i | τ i (w) = true} ∪ n j=1,j =i {x ∈ L j | τ j (x) = true and ρ i (x) = true}.</formula><p>Let Γ = (V, N 1 , N 2 , . . . , N n ) be an NEP. By a computation in Γ we mean a sequence of configurations C 0 , C 1 , C 2 , . . ., where C 0 is the initial configuration, C 2i =⇒ C 2i+1 and C 2i+1 C 2i+2 for all i ≥ 0.</p><p>If the sequence is finite, we have a finite computation. The result of any finite computation is collected in a designated node called the output (master) node of the network. If one considers the output node of the network as being the node k, and if C 0 , C 1 , . . . , C t is a computation, then the set of strings existing in the node k at the last step -the k-th component of C t -is the result of this computation. The time complexity of the above computation is the number of steps, that is t.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Solving NP-Complete Problems</head><p>In this section we attack one problem known to be NP-complete, namely the Bounded Post Correspondence Problem (BPCP) <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b6">7]</ref> which is a variant of a much celebrated computer science problem, the Post Correspondence Problem (PCP) known to be unsolvable <ref type="bibr" target="#b6">[7]</ref> in the unbounded case, and construct a NEP for solving it. Furthermore, the proposed NEP computes all solutions.</p><p>An instance of the PCP consists of an alphabet V and two lists of strings over</p><formula xml:id="formula_4">V u = (u 1 , u 2 , . . . , u n ) and v = (v 1 , v 2 , . . . , v n ).</formula><p>The problem asks whether or not a sequence i 1 , i 2 , . . . , i k of positive integers exists, each between 1 and n, such that</p><formula xml:id="formula_5">u i1 u i2 . . . u i k = v i1 v i2 . . . v i k .</formula><p>The problem is undecidable when no upper bound is given for k and NPcomplete when k is bounded by a constant K ≤ n. A DNA-based solution to the bounded PCP is proposed in <ref type="bibr" target="#b8">[9]</ref>.</p><p>Theorem 1 The bounded PCP can be solved by an NEP in size and time linearly bounded by the product of K and the length of the longest string of the two Post lists.</p><p>Proof. Let u = (u 1 , u 2 , . . . , u n ) and v = (v 1 , v 2 , . . . , v n ) be two Post lists over the alphabet V = {a 1 , a 2 , . . . , a m } and K ≥ n. Let</p><formula xml:id="formula_6">s = K • max ({|u j | | 1 ≤ j ≤ n} ∪ {|u j | | 1 ≤ j ≤ n}).</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Consider a new alphabet</head><formula xml:id="formula_7">U = m i=1 {a (1) i , a (2) i , . . . , a (s) i } = {b 1 , b 2 , . . . , b sm }.</formula><p>For each x = i 1 i 2 . . . i j ∈ {1, 2, . . . , n} ≤K (the set of all sequences of length at most K formed by integers between 1 and n), we define the string</p><formula xml:id="formula_8">u (x) = u i1 u i2 . . . u ij = a t1 a t2 . . . a t p(x) .</formula><p>We now define a one-to-one mapping α : V * -→ U * such that for each sequence x as above α(u (x) ) does not contain two occurrences of the same symbol from U . We may take α(u (x) ) = a</p><p>(1) t1 a</p><p>(2) t2 . . . a (p(x))</p><formula xml:id="formula_9">t p(x) .</formula><p>The same construction applies to the strings in the second Post list v. We define</p><formula xml:id="formula_10">F = {α(u (x) α(v (x) ) | x ∈ {1, 2, . . . , n} ≤K } = {z 1 , z 2 , . . . , z l }</formula><p>and assume that z j = b j,1 b j,2 . . . b j,rj , 1 ≤ j ≤ l, where |z j | = r j . By the construction of F , no letter from U appears within any string in F for more than two times. Furthermore, if each letter of z = α(u (x) )α(v (x) ) appears twice within z, then x represents a solution of the given instance.</p><p>We are now ready to define the NEP which computes all the solutions of the given instance. It is a NEP of size 2sm + 1</p><formula xml:id="formula_11">Γ = (U ∪ Ū ∪ Û ∪ Ũ ∪{X}∪{X (c) d | 1 ≤ c ≤ n, 2 ≤ d ≤ |z| c }, N 1 , N 2 , . . . N 2sm+1 ), where Ū = { b | b ∈ U }</formula><p>(the other sets, namely Û and Ũ , which form the NEP alphabet are defined similarly)</p><formula xml:id="formula_12">M f = {ε → b f }, A f = ∅, F I f = {X (c) d | 2 ≤ d ≤ |z| c , 1 ≤ c ≤ l such that b f = b c,d } ∪ Ū ∪ Û ∪ Ũ , P I f = F O f = P O f = ∅, for all 1 ≤ f ≤ sm, M sm+1 = {X → X (c) 2 | 1 ≤ c ≤ l} ∪ {X |z|c → b c,1 ∪ {b d → bd | 1 ≤ d ≤ sm} ∪{X (c) d → X (c) d+1 | 1 ≤ c ≤ l, 2 ≤ d ≤ |z| c -1}, A sm+1 = {X}, F I sm+1 = P I sm+1 = F O sm+1 = P O sm+1 = ∅,</formula><p>and</p><formula xml:id="formula_13">M sm+d+1 = {b d → bd , bd → bd }, A sm+d+1 = ∅, F I sm+d+1 = ( Ū \ { bd }) ∪ {X (c) g | 2 ≤ g ≤ |z| c , 1 ≤ c ≤ l}, P I sm+d+1 = F O sm+d+1 = ∅, P O sm+d+1 = { bd , bd }, for all 1 ≤ d ≤ sm.</formula><p>Here are some informal considerations about the computing mode of this NEP. It is easy to note that in the first stage of a computation only the processors 1, 2, . . . , sm+1 are active. Since the input filter of the others contains all symbols of the form X (c) g , they remain inactive until one strings from F is produced in the node sm + 1.</p><p>First let us explain how an arbitrary string z j = b j,1 b j,2 . . . b j,rj from F can be obtained in the node sm + 1. One starts by applying the rules X → X (j) 2 , 1 ≤ j ≤ l, in the node sm + 1. The strings X (j) 2 , 1 ≤ j ≤ l, obtained in the node sm + 1 as an effect of a evolutionary step are sent to all the other processors, but for each of these strings there is only one processor which can receive it. For instance the string X (c) 2 is accepted only by the node processor f , 1 ≤ f ≤ sm, with b f = b c,2 . In the next evolutionary step, the symbol b j,2 is added to the right hand end of the string X (j) 2 for all 1 ≤ j ≤ l. Now, a communication step is to be done. All the strings X (j) 2 b j,2 can pass the output filters of the nodes processors where they were obtained but the node processor sm + 1 is the only one which can receive them. Here the lower subscripts of the symbol X are increased by one and the process from above is resumed in the aim of adjoining a new letter. This process does not apply to a string X (j) r b j,2 . . . b j,r anymore, if and only if r = |z j |, when X (j) r is replaced by b j,1 resulting in the string z j . By these considerations, we infer that all the strings from F are produced in the node sm + 1 in 2s steps.</p><p>Another stage of the computation checks the number of occurrences of any letter within any string obtained in the node sm + 1, as soon the string contains only letters in U . This is done as follows. By the aforementioned way of applying the substitution rules, each occurrence of any letter is replaced by its barred version in the node sm + 1. Let us consider a string produced by such an evolutionary step. Such a string has only one occurrence of a symbol bd , for some 1 ≤ d ≤ sm, the other symbols being from U ∪ Û ∪ Ũ . It can pass the input filter of the processor sm + d + 1 only, where it remains for three steps (two evolutionary steps and one comunication one) or forever. The string can leave the node sm + d + 1, only if it has an ooccurrence of the symbol b d . By replacing this occurrence with bd and bd with bd , the string can pass the output filter of the node processor sm + d + 1 and goes to the node sm + 1. In this way, one checked whether or not the original string had have two occurrences of the letter b d . After 6s steps the computation stops and the node sm + 1 has only strings which were produced from those strings in F having two occurrences of any letter. As we have seen, these strings encode all the solutions of the given instance of BPCP. 2</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Concluding Remarks</head><p>We have proposed a computational model whose underlying architecture is a complete graph having evolutionary processors placed in its nodes. Being a bio-inspired system, a natural question arises: How far is this model from the biological reality and engineering possibilities? More precisely, is it possible exchange biological material between nodes? Can the input/output filter conditions of the node processors be biologically implemented? What about a technological implementation? We hope that at least some answers to these questions are affirmative.</p><p>We have presented a linear algorithm based on this model which provide all solutions of an NP-complete problem.</p><p>Further, one can go to different directions of research. In our variant, the underlying graph is the complete graph. In the theory of networks some other types of graphs are common, e.g., rings, grids, star, etc. It appears of interest to study the networks of evolutionary processors where the underlying graphs have these special forms.</p><p>A natural question concerns the computational power of this model. Is it computationally complete? However, our belief is that those variants of the model which are "specialized" in solving a few classes of problems have better chances to get implemented, at least in the near future.</p></div>		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A parallel machine for multiset transformation and its programming style</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">P</forename><surname>Banâtre</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Coutant</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">Le</forename><surname>Metayer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Future Generation Computer Systems</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="133" to="144" />
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">On the computational complexity of scheme equivalence</title>
		<author>
			<persName><forename type="first">R</forename><surname>Constable</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Hunt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sahni</surname></persName>
		</author>
		<idno>No. 74-201</idno>
		<imprint>
			<date type="published" when="1974">1974</date>
			<pubPlace>Ithaca, NY</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Dept. of Computer Science, Cornell University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Paun -Grammar Systems</title>
		<author>
			<persName><forename type="first">E</forename><surname>Csuhaj -Varju</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Dassow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kelemen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gh</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1993">1993</date>
			<publisher>Gordon and Breach</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Networks of parallel language processors</title>
		<author>
			<persName><forename type="first">E</forename><surname>Csuhaj-Varjú</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">New Trends in Formal Languages</title>
		<editor>
			<persName><surname>Gh</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><surname>Pȃun</surname></persName>
		</editor>
		<editor>
			<persName><surname>Salomaa</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer Verlag</publisher>
			<date type="published" when="1997">1997</date>
			<biblScope unit="page" from="299" to="318" />
		</imprint>
	</monogr>
	<note>LNCS 1218</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Towards a new architecture for symbolic processing</title>
		<author>
			<persName><forename type="first">L</forename><surname>Errico</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Jesshope</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Artificial Intelligence and Information-Control Systems of Robots &apos;94</title>
		<editor>
			<persName><forename type="first">I</forename><surname>Plander</surname></persName>
		</editor>
		<meeting><address><addrLine>Singapore</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994">1994</date>
			<biblScope unit="page" from="31" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Massively parallel architectures for AI: NETL, THISTLE and Boltzmann machines</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">E</forename><surname>Fahlman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">J</forename><surname>Seijnowski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. AAAI National Conf. on AI</title>
		<meeting>AAAI National Conf. on AI<address><addrLine>William Kaufman, Los Altos</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1983">1983</date>
			<biblScope unit="page" from="109" to="113" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Computers and Intractability. A Guide to the Theory of NP-completeness</title>
		<author>
			<persName><forename type="first">M</forename><surname>Garey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Johnson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1979">1979</date>
			<pubPlace>Freeman, San Francisco, CA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">The Connection Machine</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">D</forename><surname>Hillis</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1985">1985</date>
			<publisher>MIT Press</publisher>
			<pubPlace>Cambridge</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Using DNA to solve the Bounded Correspondence Problem</title>
		<author>
			<persName><forename type="first">L</forename><surname>Kari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Gloor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Yu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theoret. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">231</biblScope>
			<biblScope unit="page" from="193" to="203" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Computing with membranes</title>
		<author>
			<persName><surname>Gh</surname></persName>
		</author>
		<author>
			<persName><surname>Pȃun</surname></persName>
		</author>
		<idno>No. 208</idno>
		<ptr target="http://www.tucs.fi" />
	</analytic>
	<monogr>
		<title level="j">J. Comput. Syst. Sci</title>
		<imprint>
			<biblScope unit="page">61</biblScope>
			<date type="published" when="1998">2000. November 1998</date>
		</imprint>
	</monogr>
	<note type="report_type">see also TUCS Research Report</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
