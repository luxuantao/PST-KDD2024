<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Deriving Use Cases from Organizational Modeling</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Victor</forename><forename type="middle">F A</forename><surname>Santander</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Centro de Informática Cx. Postal</orgName>
								<orgName type="institution">Universidade Federal de Pernambuco</orgName>
								<address>
									<postCode>7851, 50732-970</postCode>
									<settlement>Recife-PE</settlement>
									<region>CEP</region>
									<country key="BR">BRAZIL</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Jaelson</forename><forename type="middle">F B</forename><surname>Castro</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Centro de Informática Cx. Postal</orgName>
								<orgName type="institution">Universidade Federal de Pernambuco</orgName>
								<address>
									<postCode>7851, 50732-970</postCode>
									<settlement>Recife-PE</settlement>
									<region>CEP</region>
									<country key="BR">BRAZIL</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Deriving Use Cases from Organizational Modeling</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">75FEEF9ADDA11B45FEACD3380584F827</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T15:03+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Use Cases Diagrams in the Unified Language Modeling (UML) have been used for capturing system functional requirements. However, the system development occurs in a context where organizational processes are well established. Therefore, we need to capture organizational requirements to define how the system fulfils the organization goals, why it is necessary, what are the possible alternatives, etc. Unfortunately, UML is ill equipped for modeling organizational requirements. We need other techniques, such as i*, to represent these aspects. Nevertheless, organizational requirements must be related to functional requirements represented as Use Cases. In this paper we present some guidelines to assist requirement engineers in the development of Use Cases from the i* organizational models.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>System development occurs in a context where organizational processes are well established. However, as discovered in empirical studies, the primary reason for software system failure is the lack of proper understanding of the organization by the software developers. Unfortunately, the dominant object oriented modeling technique, UML, is ill equipped for organizational requirement modeling. We need others techniques, such as i* <ref type="bibr" target="#b15">[15]</ref> to represent these aspects. We argue that i* framework, is well suited to represent organizational requirements that occur during the earlyphase requirements capture, since it provides adequate representation of alternatives, and offers primitive modeling concepts such as softgoal and goal. These early activities would enable an understanding of how and why the requirements came about.</p><p>Nevertheless, organizational requirements must be related to functional requirements represented with techniques such as Use Cases. However, Use Case development demands great experience of the requirement engineers. The heuristics presented in the literature to develop Use Cases are not sufficient to allow a systematic development. Indeed, they do not consider relevant organizational aspects such as goals and softgoal.</p><p>In this work, we propose some guidelines to support the integration of i* and Use Case modeling. We describe some heuristics to assist requirement engineers to develop Use Cases based on the organizational i* models. This paper is organized as follows. Section 2 introduces the concepts used by i* framework to represent organizational requirements and early requirements. In Section 3, we review Use Case modeling. In Section 4, we present the benefits of our approach as well as describe the guidelines to integrate i* organizational models and Use Cases diagrams. In Section 5, we introduce a brief case study to show the viability of our proposal. Section 6 discusses related works and concludes the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">The i* Modeling Framework</head><p>When developing systems, we usually need to have a broad understanding of the organizational environment and goals. The i* framework <ref type="bibr" target="#b15">[15]</ref> provides understanding of the reasons ("Why") that underlie system requirements. I* offers two models to represent organizational requirements: the Strategic Dependency (SD) Model and the Rationale Dependency (SR) Model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.">The Strategic Dependency Model -SD</head><p>This model focuses on the intentional relationships among organizational actors. It consists of a set of nodes and links connecting them, where nodes represent actors and each link represents the dependency between actors. The depending actor is called Depender and the actor who is depended upon is called Dependee. The i* framework defines four types of dependencies among actors: goal, resource, task and softgoal. Figure <ref type="figure">1</ref> shows an Strategic Dependency (SD) Model of the meeting scheduling setting with a computer-based meeting scheduler <ref type="bibr" target="#b15">[15]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 1. Strategic Dependency Model for the Meeting</head><p>Scheduling Problem.</p><p>The meeting initiator depends on participant to attend the meeting. The meeting initiator delegates much of the work of meeting scheduling to the meeting scheduler. The meeting scheduler determines what are the acceptable dates, given the availability information (task dependency EnterAvailDates(m)). The meeting initiator does not care how the scheduler does this, as longer as the acceptable dates are found. This is reflected in the goal dependency MeetingBeScheduled from the initiator to the scheduler. On the other hand, to arrive at an agreeable date, participants depend on the meeting scheduler for date proposals (resource dependency ProposedDate(m)). Once proposed, the scheduler depends on participants to indicate whether they agree with the date (resource dependency Agreement(m,p)). For important participants, the meeting initiator depends critically on their attendance, and thus also on their assurance that they will attend (softgoal dependency Assured(AttendsMeeting(ip.m))). The meeting scheduler depends on the meeting initiator to provide a date range (task dependency EnterDateRange(m)) for the scheduling.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.">The Strategic Rationale Model -SR</head><p>The Strategic Rationale (SR) model allows modeling of the reasons associated with each actor and their dependencies. Two news links are added to previous notation:</p><p>• Means-ends: This link indicates a relationship between an end -which can be a goal to be achieved, a task to be accomplished, a resource to be produced, or a softgoal to be satisficed -and a means for attaining it. • Task-decomposition: A task is modeled in terms of its decomposition into its sub-components. These components can be goals, tasks, resources, and/or sofgoals.</p><p>In Figure <ref type="figure" target="#fig_0">2</ref>, we present an example of the Strategic Rationale (SR) model. We use the SR notation to detail the Meeting Scheduler actor. Due to space limitation, we do not detail the Meeting Initiator and Meeting Participant actors (see the complete model in <ref type="bibr" target="#b15">[15]</ref>). The Meeting Scheduler actor represents a software system that partially performs the meeting scheduling, while the Meeting Initiator and Meeting Participant, are responsible for providing or receiving information to the system. The Meeting Scheduler actor possesses a Schedule Meeting task which is decomposed into three sub-components using the task-decomposition relationship: FindAgreeableSlot, ObtainAgreemet and ObtainAvailDates. These sub-components represent the work that will be accomplished by the meeting scheduler system. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Use Cases in UML</head><p>Scenario-based techniques have been used by the software engineering community to understand, model and validate users requirements <ref type="bibr" target="#b9">[9]</ref> [10] <ref type="bibr">[13] [14]</ref>. Among these techniques, Use Cases have received a special attention in the object oriented development community. Use Cases in UML <ref type="bibr" target="#b3">[3]</ref> are used to describe the use of a system by actors. An actor is any external element that interacts with the system. A Use Case is a description of a set of sequences of actions, including variants, that a system performs that yields an observable result value to an actor. It is desirable to separate main (primary scenario) versus alternative (secondary scenario) flows because a Use Case describes a set of sequences, not just a single sequence, and it would be impossible to express all the details of an interesting Use Case in just one sequence.</p><p>In order to cope with increasing complexity of Use Cases description, UML caters for three structuring mechanism: inclusion, extension and generalization. For further information see <ref type="bibr" target="#b3">[3]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Deriving Use Cases from Organizational Modeling.</head><p>In this section we argue how our approach can improve the Use Case development. In section 4.1 we outline the main benefits accomplished by approach and in section 4.2 we describe it in detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">Benefits of i* and Use Case Integration</head><p>i* provides an early understanding of the organizational relationships in a business domain. As we continue the development process, we need to focus on the functional and non-functional requirements of the system-to-be. As a first step in the late requirements phase we can adopt Use Cases to describe functional requirements of the system. We argue that the Use Case development from organizational modeling using i* allows requirement engineers to establish a relationship between the functional requirements of the intended system and the organizational goals previously defined in the organization modeling. Besides, through a goaloriented analysis of the organizational models, we can derive and map goals, intentions and motivations of organizational actors to main goals of Use Cases. We assume, that for each Use Case we have associated a main goal, which represents what the user aims to reach as a result of the execution of the Use Case. In our proposal, the Use Case scenario description is based on organizational models, which are well known and understood by all stakeholders. Note that our approach can be used for any type of system.</p><p>We can mention other important benefits obtained using our approach, such as: <ref type="bibr" target="#b16">[16]</ref> have considered goals in a number of different areas of Requirements Engineering.</p><formula xml:id="formula_0">• Many researchers [1] [6] [8] [14]</formula><p>Goal-oriented approaches to requirements acquisition may be contrasted with techniques that treat requirements as consisting only of processes and data, such as traditional systems analysis or "objects", such as the object-oriented methods, but which do not explicitly capture why and how relationships in terms of goals.</p><p>• The relationships between systems and their environments can also be expressed in terms of goalbased relationships. This is partly motivated by today's more dynamic business and organizational environments, where systems are increasingly used to fundamentally change businesses process <ref type="bibr" target="#b16">[16]</ref>. Deriving Use Cases from i* relationships allows traceability and evaluation of the impact of these changes into the functional requirements of the intended system; • Some of the Use Case pitfalls and drawbacks described in <ref type="bibr" target="#b11">[11]</ref>, can be partially solved using our approach. For instance, Use Cases are written from the actor's (not the system's) point of view. We derive Use Cases from actors dependencies defined explicitly in i*. Another positive aspect is the ability to define the essential Use Cases for the intended system. This avoids defining too many Use Cases and allows managing the appropriate granularity of Use Cases. Finally, the integration between requirements engineers and customers during the organizational model development also allows customers (actors) to better understand the Use Cases originated from these models; • To elicit and specify system requirements observing the actor's goal in relation to the system-to-be, is a way of clarifying requirements <ref type="bibr" target="#b16">[16]</ref>. From i* we can derive these goals, associate them with system actors and then refine and clarify the requirements into Use Cases.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">Proposed Approach</head><p>To guide the mapping and integration process of i* organizational models and Use Cases, we have defined some guidelines which must be applied according to the steps represented in Figure <ref type="figure" target="#fig_1">3</ref>. In this figure, steps 1, 2 and 3 represent the discovery of system actors and its associated Use Cases diagrams and descriptions. The input for the integration process are the Strategic Dependency (SD) and Strategic Rationale (SR) models developed through i* framework. In steps 1 and 2, the input is the Strategic Dependence (SD) Model. The description of scenarios for Use Cases (step 3) is derived from elements represented in the Strategic Rationale (SR) Model. The results of the integration processes are Use Case diagrams for the intended system and scenario textual descriptions for each Use Case.</p><p>In the sequel we suggest heuristics for the Use Cases development from organizational modeling with i*. Guideline 2: the actor considered in i* should be external to the intended software system. For example, the Meeting Participant actor is external to the system because it will interact with the intended meeting scheduler system. Guideline 3: if the actor is external to the system, it should be guaranteed that the i* actor is a candidate actor in the Use Case diagram. For this purpose, the following analysis is necessary: Guideline 3.1: the actor dependencies in i* must be relevant from the point of view of the intended system; For instance, the Meeting Participant actor in i* can be mapped to Use Case actor, considering that dependencies associated with it, characterizes it as important in an interaction context with the meeting scheduler system. Guideline 4: actors in i*, related through the IS-A mechanism in the organizational models and mapped individually for actors in Use Cases (applying guidelines 1, 2 and 3), will be related in the Use Case diagrams through the &lt;&lt;generalization&gt;&gt; relationship. For instance, the IS-A relationship between Meeting Participant and Important Participant in Figure <ref type="figure">1</ref>, can be mapped to generalization relationship between these actors in the Use Case diagram. 2º Step: Discovering Use Cases for the Actors. Guideline 5: for each discovered actor of the system (step 1), we should observe all its dependencies (dependum) in which the actor is a dependee, looking for Use Cases for the actor; Initially, we recommend to create a table containing the discovered actors and the information about the dependencies for the actor from the point of view of a dependee. Moreover, you can include which guideline(s) to be used to analyze each dependency (dependum) (see table <ref type="table">1</ref>). For instance, some Use Cases can be associated with the Meeting Participant actor observing their dependencies presented in i*:</p><p>Guideline 5.1: goal dependencies -goals in i* can be mapped to Use Case goals; For instance, in Figure <ref type="figure">1</ref> Table <ref type="table">1</ref>. Gathered information from SD Models to aid requirement engineers to derive Use Cases.</p><p>Guideline 5.2: task dependencies -if an actor depends on another actor for the accomplishment of a task, it should be investigated if this task needs to be decomposed into other sub-tasks. For example, for the task dependency EnterDateRange(m) associated with the Meeting Initiator actor (see Figure <ref type="figure">1</ref>), we can consider that the task of supplying a date range for the meeting scheduling can include several aspects (later mapped to Use Case steps) such as to associate range dates with specific meetings, to establish priorities for specific meetings, etc. Thus, from the task EnterDateRange(m) we can generate the Use Case called EnterDateRange for the Meeting Initiator actor. Guideline 5.3: resources dependencies -if an actor depends on another actor for obtaining a resource(s), why is it required? If there is a more abstract goal, it will be the candidate goal of the Use Case for the actor.</p><p>For instance, for the resource dependency Agreement(m,p) associated with the Meeting Participant actor (see Figure <ref type="figure">1</ref>), we conclude that the main goal of obtaining of Agreement(m,p) resource is a scheduled date agreement from each participant. We could consider that in this agreement process, each participant could agree with the proposed meeting date with certain schedule restrictions or duration time. Still, the agreement could involve an analysis of other possible dates. In other words, to obtain the scheduled date agreement, several interaction steps between meeting scheduler and meeting participant could be defined in one Use Case called Agreement for the Meeting Participant actor. Guideline 5.4: sofgoal dependencies -typically, the sofgoal dependency in i* is a non-functional requirement for the intended system. Hence, a softgoal does not represent a Use Case of the system but a nonfunctional requirement associated with a Use Case of the system. For instance, the softgoal Assured(AttendsMeeting(ip,m)) between Meeting Initiator and Important Participant actors can be mapped into a non functional requirement associated with the Use Case AttendsMeeting. This non-functional requirement indicates that it is necessary to assure that the Important Participant attends to the meeting. Guideline 6: analyze special situations, where an actor discovered (following the step 1), possess dependencies in relation to an actor in i* that represents an intended software system or part of it. These dependencies usually generate Use Cases. It is important to notice that in this situation the derived Use Case is associated with the depender actor in the relationship. This occurs due to the fact that the dependee is a software system and the depender (Use Case actor) must interact with the system to achieve the goal associated with the generated Use Case.</p><p>For instance, the goal dependency MeetingBeScheduled between Meeting Initiator and Meeting Scheduler system in the Figure <ref type="figure">1</ref>, points out for the definition of the Use Case MeetingBeScheduled for the Meeting Initiator actor, which represents the use of the system by the actor, describing the details of the meeting scheduling process. Guideline 7: classify each Use Case according to the type associated to its goal (business, summary, user goal or subfunction). This is based on a classification scheme proposed by Cockburn <ref type="bibr">[7]</ref>. A business goal represents a high level intention, related to business processes, that the organization or user possesses in the context of the organizational environment. An example could be the goal "organizing a meeting in the possible shortest time". A summary goal represents an alternative for the satisfaction of a business goal, as in the case of the goal, "meeting scheduling by software system". An user goal results in the direct discovery of a relevant functionality and value for the organization actor using a software system. An example could be the goal, "the meeting participant wishes to attend the meeting". Finally, subfunction-level goals are those required to carry out user goals. An example could be the goal, "enter date range for meeting scheduling" by the Meeting Initiator. To aid requirement engineers to identify new Use Case and better understand the discovered Use Cases, we recommended to generate a table containing the actor name, the Use Case goal and the goal classification (see table <ref type="table" target="#tab_0">2</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Actor Use Case Goal Goal Classification Meeting Participant</head><p>AttendsMeeting User Goal that can lead to the description of the Use Cases scenario for the actor. It is important to remember that SR models represent the internal reasons associated with the actor goals. Therefore, we must consider internal elements which are used by the actor to achieve goals and sofgoals, to perform tasks or obtain resources. The actor has the responsibility to satisfy these elements and the decomposition in SR shows how the actor will be performing this. Typically, the dependencies associated with the actor are satisfied internally through two types of relationships used in SR: means-ends and taskdecomposition. These relationships must be observed to derive scenario steps for the Use Cases. For instance, consider the Strategic Rationale (SR) Model in Figure <ref type="figure" target="#fig_0">2</ref>.</p><p>From the Meeting Scheduler actor point of view, we know that the Schedule Meeting task is decomposed into ObtainAvailDates, FindAgreeableSlot and ObtainAgreement. Since the software system objective is to accomplish meeting scheduling, we could consider that these tasks are the necessary high-level steps to accomplish a meeting schedule (Use Case MeetingBeScheduled defined for the Meeting Initiator actor). Thus, this Use Case could contain the steps (the primary scenario description) regarding the need to obtain from each Meeting Participant, the available dates for a meeting (ObtainAvailDates); the need to define the best meeting dates that could be scheduled (FindAgreeableSlot); and to obtain the participants agreement for a proposed meeting date (ObtainAgreement).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Case Study</head><p>In this section, we follow the steps proposed in Figure <ref type="figure" target="#fig_1">3</ref> and apply the appropriate guidelines to the example described in the previous section (Figure <ref type="figure">1</ref> and<ref type="figure" target="#fig_0">2</ref>). Recall that Figure <ref type="figure">1</ref> shows a Strategic Dependency (SD) model for meeting scheduling while Figure <ref type="figure" target="#fig_0">2</ref> represents the Strategic Rationale (SR) model. Hence, these organizational models are used to discover and describe Use Cases in UML for the Meeting Scheduler system. We begin deriving the Use Case actors from the SD model. We then find the Use Cases for the actors observing the actors dependencies in SD model. Next, the primary scenario for one derived Use Case is described from the SR model. Last but not least, a version of the Use Case diagram in UML for the Meeting Scheduler system is generated.</p><p>• From Figure <ref type="figure">1</ref>, we can find candidates actors for the Use Case development. According to the guidelines in the 1 st step of the proposal, we conclude that one of the analyzed actors does not follow guideline 2. The Meeting Scheduler actor is a system, i.e. the software to be developed. Therefore, this i* actor cannot be considered as a Use Case actor. The other i* actors are considered appropriate because their strategic dependencies refer to relevant aspects for the meeting scheduler system (guideline 3) development. So, the list of candidates Use Cases actors includes: Meeting Initiator, Meeting Participant and Important Participant. We also note that Important Participant is a type (relationship IS-A) of participant. According to guideline 4 (1 st step), we consider this actor a specialization of Meeting Participant actor. The next step is to discover and relate Use Cases for each actor according to the guidelines presented in the 2º</p><p>Step (Discovering Use Cases for the Actors).</p><p>• Initially, following the guideline 5 and observing the SD model presented in Figure <ref type="figure">1</ref> we can generate the table <ref type="table">3</ref>. In table <ref type="table">3</ref>, we verify the goal AttendsMeeting(p,m), which represents the need of the meeting participant actor to attend the meeting. This goal originates the Use Case AttendsMeeting. Several steps are necessary to achieve this goal. Typically, this is a user goal (guideline 7). The fulfillment of the Use Case goal brings a relevant result for Meeting Participant actor, allowing it to attend to the meeting. Usually, the description of the primary scenario (to be accomplished later) for this Use Case, will present other user goals that can originate new Use Cases for the system. The next dependency associated with the Meeting Participant actor is the task dependency EnterAvailDates(m). According to guideline 5.2, we can consider the need of several interaction steps among the participants (Meeting Participant actor) and the meeting scheduler system to enter available dates. Some steps could include participants to supply a list of exclusion dates and preferred dates in a particular format, to validate these dates by the system, etc. Thus, the task EnterAvailDates(m) generate the Use Case EnterAvailDates for the Meeting Participant Actor.</p><p>Continuing our analysis, we can observe associated with the Meeting Participant (Dependee) actor the resource dependency Agreement(m,p). Following guideline 5.3, we conclude that the main goal of obtaining of Agreement(m,p) resource is an scheduled date agreement from each participant. We could consider that in this agreement process, each participant could agree with the proposed meeting date with certain schedule restrictions or duration time.</p><p>Still, the agreement could involve an analysis of other possible dates. In other words, the schedule of dates requires several interaction steps between the system and the Meeting Participant actor, which defines the Agreement Use Case of the Meeting Participant actor.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>• To discovery of Use Cases candidates for the Meeting</head><p>Initiator actor follows the same guidelines ( <ref type="formula" target="#formula_1">2º</ref>Step).</p><p>We have one dependency associated with the Meeting Initiator actor (see table <ref type="table">3</ref>): the task EnterDateRange(m). Using guideline 5.2 for this task dependency we observe that to supply a date range for the meeting scheduling can include several aspects (sub-tasks) such as to associate range dates with specific meetings, to establish priorities for specific meetings, etc. Thus, from the EnterDateRange(m) task we generate the EnterDateRange Use Case for the Meeting Initiator actor. Having considered all dependencies for the Meeting Initiator as Dependee, we should now consider special situations (guideline 6). Observing Figure <ref type="figure">1</ref>, we visualize the goal dependency MeetingBeScheduled between Meeting Initiator and Meeting Scheduler (software to be developed), which requires some sort of interaction. Therefore, we can define the MeetingBeScheduled Use Case that represents the use of the system by the Meeting Initiator actor. In this Use Case, we describe the details of the meeting schedule process. Note that in this special situation the depender (meeting initiator) is the Use Case actor.</p><p>• Finally, following the guideline 7 we can to classify each discovered Use Case goal, as showed in the table <ref type="table">4</ref>.</p><p>Thereby, after we have used the proposed guidelines (  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Conclusions and Related Works</head><p>In this paper we argued that the Use Cases development can be improved by using the i* organizational models. We presented some heuristics and a case study to show the viability and benefits of our approach.</p><p>Some related works include the requirements-driven development proposal presented in the Tropos framework <ref type="bibr" target="#b4">[4]</ref> and the integration of i* and pUML diagrams <ref type="bibr" target="#b5">[5]</ref>. These works argue that organizational models are fundamental for the development of quality software, which can satisfy the real needs of users and organizations. Several groups have also discussed the challenges and associated risks building quality system during goal and scenario analysis. For instance, the ScenIC method <ref type="bibr" target="#b12">[12]</ref> uses goal refinement and scenario analysis as its primary methodological strategies. This method includes systematic strategies to identify actors, goals, tasks, and obstacles into evolving systems. In Anton et al. <ref type="bibr" target="#b2">[2]</ref>, the GBRAM method <ref type="bibr" target="#b1">[1]</ref> is used to derive goals from a use-case based requirements specification. In the CREWS project <ref type="bibr" target="#b13">[13]</ref> [14], the CREWS-L`Ecritoire approach <ref type="bibr" target="#b14">[14]</ref> aims at discovering/eliciting requirements through a bi-directional coupling of goals and scenarios allowing movement from goals to scenarios and viceversa. However, these approaches do not consider organizational models for deriving goals and scenarios for intended systems.</p><p>Further research is still required to describe more systematic guidelines, that can aid requirement engineers to relate non-functional requirements <ref type="bibr" target="#b6">[6]</ref> (softgoals in i*) with functional requirements of the system, described through Use Cases in UML. Work is underway to incorporate goal-oriented modeling approaches <ref type="bibr" target="#b1">[1]</ref> [8] <ref type="bibr" target="#b12">[12]</ref> [14] into our proposal aiming at discovering other Use Cases from the exploration of already discovered goals. We also expect to develop more real case studies as well as to provide some tool support for the proposed mapping.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. Strategic Rationale (SR) Model to the Meeting Scheduler System.</figDesc><graphic coords="2,304.08,331.44,252.48,205.20" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. Steps of the integration process between i* and Use Cases in UML 1ºStep: Discovering System Actors. Guideline 1: every actor in i* should be considered as a possible Use Case actor; For example, the Meeting Participant i* actor in Figure1is a possible UML actor. Guideline 2: the actor considered in i* should be external to the intended software system. For example, the Meeting Participant actor is external to the system because it will interact with the intended meeting scheduler system. Guideline 3: if the actor is external to the system, it should be guaranteed that the i* actor is a candidate actor in the Use Case diagram. For this purpose, the following analysis is necessary: Guideline 3.1: the actor dependencies in i* must be relevant from the point of view of the intended system; For instance, the Meeting Participant actor in i* can be mapped to Use Case actor, considering that dependencies associated with it, characterizes it as important in an interaction context with the meeting scheduler system. Guideline 4: actors in i*, related through the IS-A mechanism in the organizational models and mapped individually for actors in Use Cases (applying guidelines 1, 2 and 3), will be related in the Use Case diagrams through the &lt;&lt;generalization&gt;&gt; relationship. For instance, the IS-A relationship between Meeting Participant and Important Participant in Figure1, can be mapped to generalization relationship between these actors in the Use Case diagram. 2º Step: Discovering Use Cases for the Actors. Guideline 5: for each discovered actor of the system (step 1), we should observe all its dependencies (dependum) in which the actor is a dependee, looking for Use Cases for the actor; Initially, we recommend to create a table containing the discovered actors and the information about the dependencies for the actor from the point of view of a dependee. Moreover, you can include which</figDesc><graphic coords="4,60.36,72.00,246.24,171.12" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>, the goal dependencyAttendsMeeting(p,m)  between Meeting Initiator (Depender) and Meeting Participant (Dependee) can be mapped to the AttendsMeeting Use Case, which will contain the several steps accomplished by Meeting Participant to attends to the meeting.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Table 3 .</head><label>3</label><figDesc>Gathered information from SD Models to derive Use Cases for the Meeting Scheduler System. • Thus, for the Meeting Participant actor, observing this actor as Dependee, we can indicate some Use Cases originated from the actor dependency relationships (guideline 5). Initially, we should consider the goal dependency (guideline 5.1) of the actor as Dependee.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>Step), we have discovered EnterDateRange and MeetingBeScheduled Use Cases for the Meeting Initiator actor as well as AttendsMeeting, EnterAvailDates and Agreement Use Cases for the Meeting Participant actor. Therefore, we can begin the description of the primary and secondary scenarios and the Use Cases relationships (3º Step). At this point, the Strategic Rationale (SR) model is used as source of information for the scenario description and the Use Cases relationships.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4. Use Case Diagram for the Meeting Scheduler system. The descriptions of the discovered Use Cases could still be modified or complemented, as new relationships are elicited.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 2 . Use Case goal classification. 3º Step: Discovering and Describing Use Case Scenario. Guideline</head><label>2</label><figDesc></figDesc><table /><note><p>8: analyze each actor and its relationships in the Strategic Rationale (SR) model, to extract information</p></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>Proceedings of the IEEE Joint International Conference on Requirements Engineering (RE'02) 1090-705X/02 $17.00 © 2002 IEEE</p></note>
		</body>
		<back>

			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>* Partially Supported by CNPq Grant No. 147192/1999-4. On-leave from Universidade Estadual do Oeste do Paraná.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>For example, the MeetingBeScheduled Use Case discovered for the Meeting Initiator actor represents the use of the system by Meeting Initiator to accomplish the meeting scheduling. This Use Case should contain all the necessary steps to schedule a meeting that begins when the Meeting Initiator supplies information to the system such as the date range to schedule a meeting. Based on the supplied dates range by Meeting Initiator, the system must find available dates for all the participants for the meeting as well as elaborate a consensus dates list within which a date will be chosen to be proposed and agreed. This process must result in a consensus-scheduled date for the meeting and later in the confirmation of this date for all the participants. Thus, for the Use Case MeetingBeScheduled, we could have the primary scenario with the following steps: Use Case: MeetingBeScheduled Actor: Meeting Initiator Use Case Goal: Schedule a Meeting (summary goal, see guideline 7) Primary Scenario: 1. The Use Case begins with the Meeting Initiator actor supplying the system with a date range for the meeting; (the EnterDateRange Use Case is included &lt;&lt;include&gt;&gt; in this step). 2. The system should request from participants (Meeting Participant) an available date list for the meeting based on the proposed date range by the Meeting Initiator; (the EnterAvailDates Use Case is included &lt;&lt;include&gt;&gt; in this step). 3. The system should find a consensus date list, filtering information observing the available dates sent by the participants and the proposed date range sent by Meeting Initiator; 4. Based on the consensus list, the system proposes a date for the meeting to be scheduled; 5. The Meeting Initiator expects that the system requests the agreement for a scheduled meeting date. (The Agreement Use Case is included &lt;&lt; include &gt;&gt; in this step).</p><p>The information for the description of this Use Case has as main source the Strategic Rationale (SR) Model presented in the Figure <ref type="figure">2</ref>. Following the guideline 8, we must observe which elements are involved in the SR model to achieve the MeetingBeScheduled goal by Meeting Scheduler actor. This actor has the responsibility to achieve MeetingBeScheduled which originated the MeetingBeScheduled Use Case (according to guideline 6). Thus, observing the internal strategic reasons associated with Meeting Scheduler we can conclude that the base information for the step 1 in this Use Case, is extracted from the EnterDateRange task dependency, establishing the need that Meeting Initiator supplies date range for the meeting to be scheduled. Previously, in the Use Case discovery for the system, we considered that the process of establishing a date range included several steps (sub-tasks) such as to associate range dates with specific meetings, to establish priorities for specific meetings, etc. These steps should be described in the EnterDateRange Use Case. For this reason, this Use Case is included &lt;&lt;include&gt;&gt; in step 1.</p><p>Steps 2 and 3 are extracted from the decompositions of the task Schedule Meeting (associated with Meeting Scheduler in the Figure <ref type="figure">2</ref>). Step 2 derives from the observation of the ObtainAvailDates task and its associated EnterAvailDates task dependency. The EnterAvailDates Use Case is included &lt;&lt;include&gt;&gt; because it represents the necessary steps for the entry of the available dates list by participants. Step 3 originates from FindAgreeableSlot goal and the MergeAvailDates task. This step represents the internal actions of the system to define a list of the consensus dates for the meeting scheduling. Step 4, is extracted from observation of the ProposedDate resource dependency in connection with the task Schedule Meeting (Figure <ref type="figure">2</ref>). It is assumed, given the defined information in the models of the Figure <ref type="figure">1</ref> and<ref type="figure">2</ref>, that the proposed date should be defined by the system, using some previously established and defined criterion by the Meeting Initiator, taking as base for example, priorities of organization meetings.</p><p>Step 5, derives from the system need to obtain the agreement for the chosen date for the meeting scheduling. This information arises from the observation of the task ObtainAgreement and its associated resource dependency Agreement (Figure <ref type="figure">2</ref>). Previously, in the Use Case discovery for the system, we assumed that in order for a participant to agree with the proposed date, it was necessary the accomplishment of some interaction steps between the participant and the Meeting Scheduler. These steps should be described in the Agreement Use Case. For this reason, this Use Case is included &lt;include&gt; in the step 5. We can describe the others Use Cases in a similar way.</p><p>After we have applied the proposed guidelines to this case study, we can define, as described in the Figure <ref type="figure">4</ref>, a version of the Use Cases diagram in UML for the Meeting Scheduler system.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName><surname>References</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Goal identification and refinement in the specification of software-based information systems</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">I</forename><surname>Anton</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997-06">June 1997</date>
			<pubPlace>Atlanta, GA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Georgia Institute of Technology</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Phd Thesis</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Deriving Goals from a Use Case Based Requirements Specification</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">I</forename><surname>Anton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Carter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Dagnino</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">H</forename><surname>Dempster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">F</forename><surname>Siege</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Requirements Engineering Journal</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="63" to="73" />
			<date type="published" when="2001-05">May 2001</date>
			<publisher>Springer-Verlag</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<author>
			<persName><forename type="first">G</forename><surname>Booch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Jacobson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rumbaugh</surname></persName>
		</author>
		<title level="m">The Unified Modeling Language User Guide</title>
		<imprint>
			<publisher>Addison-Wesley</publisher>
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A Requirements-Driven Development Methodology</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">F</forename><surname>Castro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Kolp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Mylopoulos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13 th Conference on Advanced Information Systems Engineering</title>
		<title level="s">Lecture Notes in Computer Science LNCS 2068</title>
		<editor>
			<persName><surname>Caise'01</surname></persName>
		</editor>
		<meeting>the 13 th Conference on Advanced Information Systems Engineering<address><addrLine>Heildelberg, Germany</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="108" to="123" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Integrating Organizational Requirements and Object Oriented Modeling</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">F</forename><surname>Castro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Alencar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Cysneiros</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Mylopoulos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Fifth IEEE International Symposium on Requirements Engineering -RE&apos;01</title>
		<meeting>the Fifth IEEE International Symposium on Requirements Engineering -RE&apos;01<address><addrLine>Toronto</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001">August 27-31. 2001</date>
			<biblScope unit="page" from="146" to="153" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">L</forename><surname>Chung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">A</forename><surname>Nixon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Mylopoulos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Non-Functional Requirements in Software Engineering (Monograph)</title>
		<imprint>
			<biblScope unit="page">2000</biblScope>
			<publisher>Kluwer Academic Publishers</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Writing Effective Use Cases, Humans and Technology</title>
		<author>
			<persName><forename type="first">A</forename><surname>Cockburn</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Goal-Directed Requirements Acquisition</title>
		<author>
			<persName><forename type="first">A</forename><surname>Dardene</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Lamsweerde</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Fikas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science of Computer Programming</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="3" to="50" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Object Oriented Software Engineering: A Use Case Driven Approach</title>
		<author>
			<persName><forename type="first">I</forename><surname>Jacobson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995">1995</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Enhancing a requirements baseline with scenarios</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C S P</forename><surname>Leite</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Rossi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Balaguer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Maiorana</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Third IEEE International Symposium on Requirements Engineering -RE&apos;97</title>
		<meeting>the Third IEEE International Symposium on Requirements Engineering -RE&apos;97</meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1997-01">January 1997</date>
			<biblScope unit="page" from="44" to="53" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Use Case Pitfalls: top 10 problems from Real projects using Use Cases</title>
		<author>
			<persName><forename type="first">S</forename><surname>Lilly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings, technology of object oriented languages and systems</title>
		<meeting>technology of object oriented languages and systems</meeting>
		<imprint>
			<date type="published" when="1999-08-05">1-5 August, 1999</date>
			<biblScope unit="volume">183</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">ScenIC: A Strategy for Inquiry-Driven Requirements Determination</title>
		<author>
			<persName><forename type="first">C</forename><surname>Potts</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Fourth IEEE International Symposium on Requirements Engineering -RE&apos;99</title>
		<meeting>the Fourth IEEE International Symposium on Requirements Engineering -RE&apos;99<address><addrLine>Ireland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999">June 7-11, 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Method Enhancement With Scenario Based Techniques</title>
		<author>
			<persName><forename type="first">J</forename><surname>Ralyté</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Rolland</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Plihon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CAISE 99, 11th Conference on Advanced Information Systems Engineering</title>
		<meeting>CAISE 99, 11th Conference on Advanced Information Systems Engineering<address><addrLine>Heidelberg, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999">June 14-18, 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Guiding Goal Modeling Using Scenarios</title>
		<author>
			<persName><forename type="first">C</forename><surname>Rolland</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Souveyet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">B</forename><surname>Achour</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">12</biblScope>
			<date type="published" when="1998-12">December 1998</date>
		</imprint>
	</monogr>
	<note>Special Issue on Scenario Management</note>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Modelling Strategic Relationships for Process Reengineering</title>
		<author>
			<persName><forename type="first">E</forename><surname>Yu</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995">1995</date>
		</imprint>
		<respStmt>
			<orgName>University of Toronto</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Phd Thesis</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Why Goal-Oriented Requirements Engineering</title>
		<author>
			<persName><forename type="first">E</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Mylopoulos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Fourth International Workshop Requirements Engineering: Foundations of Software Quality REFSQ&apos;98</title>
		<meeting>Fourth International Workshop Requirements Engineering: Foundations of Software Quality REFSQ&apos;98<address><addrLine>Pisa</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1998-06">June 1998</date>
			<biblScope unit="page" from="15" to="22" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
