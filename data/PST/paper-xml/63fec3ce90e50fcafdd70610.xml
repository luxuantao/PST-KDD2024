<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Towards Human-Bot Collaborative Software Architecting with ChatGPT</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2023-02-26">26 Feb 2023</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Aakash</forename><surname>Ahmad</surname></persName>
							<email>a.ahmad13@lancaster.ac.uk</email>
							<affiliation key="aff0">
								<orgName type="department">School of Computing and Communications</orgName>
								<orgName type="institution">Lancaster University Leipzig</orgName>
								<address>
									<settlement>Leipzig</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Muhammad</forename><surname>Waseem</surname></persName>
							<email>mwaseem@jyu.fi</email>
							<affiliation key="aff1">
								<orgName type="department">Faculty of Information Technology</orgName>
								<orgName type="institution">University of Jyv?skyl?</orgName>
								<address>
									<settlement>Jyv?skyl?</settlement>
									<country key="FI">Finland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Peng</forename><surname>Liang</surname></persName>
							<email>liangp@whu.edu.cn</email>
							<affiliation key="aff2">
								<orgName type="department">School of Computer Science</orgName>
								<orgName type="institution">Wuhan University</orgName>
								<address>
									<settlement>Wuhan</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
							<affiliation key="aff3">
								<orgName type="department">School of Business</orgName>
								<orgName type="institution">University of Southern Queensland</orgName>
								<address>
									<region>Queensland</region>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><roleName>Mst</roleName><forename type="first">Shamima</forename><surname>Aktar</surname></persName>
							<email>shamima@whu.edu.cn</email>
							<affiliation key="aff2">
								<orgName type="department">School of Computer Science</orgName>
								<orgName type="institution">Wuhan University</orgName>
								<address>
									<settlement>Wuhan</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Tommi</forename><surname>Mikkonen</surname></persName>
							<email>tommi.j.mikkonen@jyu.fi</email>
							<affiliation key="aff1">
								<orgName type="department">Faculty of Information Technology</orgName>
								<orgName type="institution">University of Jyv?skyl?</orgName>
								<address>
									<settlement>Jyv?skyl?</settlement>
									<country key="FI">Finland</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Towards Human-Bot Collaborative Software Architecting with ChatGPT</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2023-02-26">26 Feb 2023</date>
						</imprint>
					</monogr>
					<idno type="arXiv">arXiv:2302.14600v1[cs.SE]</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-01-03T09:32+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Software Architecture</term>
					<term>ChatGPT</term>
					<term>Large Language Models</term>
					<term>DevBots</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Architecting software-intensive systems can be a complex process. It deals with the daunting tasks of unifying stakeholders' perspectives, designers' intellect, tool-based automation, pattern-driven reuse, and so on, to sketch a blueprint that guides software implementation and evaluation. Despite its benefits, architecture-centric software engineering (ACSE) inherits a multitude of challenges. ACSE challenges could stem from a lack of standardized processes, socio-technical limitations, and scarcity of human expertise etc. that can impede the development of existing and emergent classes of software (e.g., IoTs, blockchain, quantum systems). Software Development Bots (DevBots) trained on large language models can help synergise architects' knowledge with artificially intelligent decision support to enable rapid architecting in a human-bot collaborative ACSE. An emerging solution to enable this collaboration is ChatGPT, a disruptive technology not primarily introduced for software engineering, but is capable of articulating and refining architectural artifacts based on natural language processing. We detail a case study that involves collaboration between a novice software architect and ChatGPT for architectural analysis, synthesis, and evaluation of a services-driven software application. Preliminary results indicate that ChatGPT can mimic an architect's role to support and often lead ACSE, however; it requires human oversight and decision support for collaborative architecting. Future research focuses on harnessing empirical evidence about architects' productivity and exploring socio-technical aspects of architecting with ChatGPT to tackle emerging and futuristic challenges of ACSE.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Architecture of software-intensive systems enables architects to specify structural composition, express behavioural constraints, and rationalise design decisions -hiding implementation complexities with architectural componentsto sketch a blue-print for software implementation <ref type="bibr" target="#b0">[1]</ref>. Architecture-centric Software Engineering (ACSE) aims to exploit architectural knowledge (e.g., tactics and patterns), architectural languages, tools, and architects' decisions (human intellect) etc. to create a model that drives the implementation, validation, and maintenance phases of software systems <ref type="bibr" target="#b1">[2]</ref>. In recent years, ACSE has been applied to investigate the role of architecture in engineering complex and emergent classes of software (blockchains, quantum systems etc.) <ref type="bibr" target="#b2">[3]</ref> and it has been proven as useful to systematise software development in an industrial context <ref type="bibr" target="#b1">[2]</ref>. Despite its potential, ACSE entails a multitude of challenges including but not limited to mapping stakeholders' perspectives to architectural requirements, managing architectural drift, erosion, and technical debts, or lack of automation and architects' expertise in developing complex and emergent classes of software <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b2">[3]</ref>. In such context, software engineers may enter a phase referred to as the 'lonesome architect' who requires non-intrusive support rooted in processes and tools to address the challenges of ACSE by reusing knowledge and exploiting decision support in the process <ref type="bibr" target="#b3">[4]</ref>.</p><p>Context and motivation: The process to architect software applications and services (a.k.a., 'architecting process') unifies a number of architecting activities that support an incremental, process-centric, and systematic approach to apply ACSE in software development endeavours <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b2">[3]</ref>. Empiricism remains fundamental to deriving and/or utilising architecting processes that can support activities, such as analysis, synthesis, and evaluation etc. of software architetures <ref type="bibr" target="#b3">[4]</ref>. To enrich the architecting process and empower the role of architects, research and development has focused on incorporating patterns and styles (knowledge), recommender systems (intelligence), and distributed architecting (collaboration) in ACSE process. The role of artificial intelligence (AI) in software engineering (SE) is an active area of research that aims to synergise solutions of AI and practices of SE to instill intelligence in the processes and tools for software development <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b5">[6]</ref>. From an ACSE perspective, research on AI generally aims to develop decision support systems or development bots that can assist architects with recommendations about design decisions, selection of patterns and styles, or predict points of architectural failure and degradation <ref type="bibr" target="#b6">[7]</ref>, <ref type="bibr" target="#b7">[8]</ref>. Currently, there is no research that proposes innovative solutions that can enrich the architecting process with AI to enable collaborative architecting. Collaborative architecting can synergise architects' knowledge as human intellect and bot's capability as an intelligent agent who can lead the architecting process based on human conversation and supervision. Such collaboration can allow architects to delegate their architecting tasks to the bot, supervise the bot via dialog in natural language(s) to achieve automation, and relieve architects from undertaking tedious tasks in ACSE.</p><p>Objective of the study: Chat Generative Pre-trained Transformer (ChatGPT) has emerged as a disruptive technology, representing an unprecedented example of a bot, that can engage with humans in context-preserved conversations to produce well-articulated responses to complex queries <ref type="bibr" target="#b8">[9]</ref>, <ref type="bibr" target="#b9">[10]</ref>. ChatGPT is not specifically developed to address software engineering challenges, however; it is well capable of generating versatile textual specifications including architectural require-ments, UML scripts, source code libraries, and test cases <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b11">[12]</ref>. Recently published research has started to explore the role of ChatGPT in engineering education, software testing, and source code generation <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b11">[12]</ref>. Considering ACSE that can benefit from intelligent and automated architecting, driven by architects' conversational dialogs and feedback, there is no research to investigate the role that ChatGPT can play as a DevBot in architecting process. To this end, our study focused on a preliminary investigation to understand if ChatGPT can process an architecture story (scenario(s)) conversed to it by an architect and undertake architecting activities to analyse, synthesise, and evaluate software architecture in a human-bot collaborative architecting.</p><p>Contributions: We followed a process-centric approach [2] and adopted scenario-based method <ref type="bibr" target="#b12">[13]</ref> for ChatGPTenabled architectural analysis, synthesis, and evaluation of a microservices-driven software. Preliminary results demonstrate ChatGPT's capabilities that include but are not limited to processing an architecture story (conversed to it by an architect) for articulating architectural requirements, specifying models, recommending and applying architectural tactics and patterns, and developing scenarios for architecture evaluation. Primary contributions of this study are to:</p><p>? Investigate the potential for human-bot collaborative architecting, synergizing ChatGPT's outputs and architects' decisions, to automate ACSE with a preliminary case study.</p><p>? Identify the potential and perils of ChatGPT assisted ACSE to pinpoint issues concerning ethics, governance, and socio-technical constraints of collaborative architecting.</p><p>? Establish foundations for empirically-grounded evidence about ChatGPT's capabilities and architects' productivity in collaborative architecting (ongoing and future work). The results of this study can help academic researchers to formulate new hypotheses about the role of ChatGPT in ACSE and investigate human-bot collaborative architecting of emergent and futuristic software. Practitioners can follow the presented guidelines to experiment with delegating their tedious tasks of ACSE to ChatGPT.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. RESEARCH CONTEXT AND METHOD</head><p>We next contextualize some core concepts (Section II-A, Figure <ref type="figure" target="#fig_0">1</ref>) and discuss the research method (Section II-B, Figure <ref type="figure">2</ref>). Terms and concepts introduced here will be used throughout the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Human-Bot Collaborative Architecting</head><p>Software Architecture as described in the ISO/IEC/IEEE 42010:2011 standard, aims to abstract complexities rooted in source code-based implementations with architectural components and connectors that represent a blueprint of software applications, services, and systems to be developed <ref type="bibr" target="#b0">[1]</ref>. Architecture-centric approaches have proven to be useful in academic solutions as well as in industrial projects by lending architectural knowledge, such as patterns, styles, languages, and frameworks, to design and develop software effectively and efficiently <ref type="bibr" target="#b3">[4]</ref>. To enable software designers and architects with a systematic and incremental design of software architectures, there is a need for architecting process -also referred to as the process for architecting software <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b2">[3]</ref>. Architecting process can have a number of finegrained architecting activities that support a separation of  architectural concerns in ACSE. For example, the architecting process reported in <ref type="bibr" target="#b1">[2]</ref> and illustrated in Figure <ref type="figure" target="#fig_0">1</ref> is derived from five industrial projects and incorporates three architecting activities namely architectural analysis, architectural synthesis, and architectural evaluation. For instance, the architectural evaluation activity in the process focuses on scenarios to evaluate the designed architecture <ref type="bibr" target="#b12">[13]</ref>. In the architecting process, an architect can extract and document the requirements that express the required functionality and desired quality of the software, referred to as Architecturally Significant Requirements (ASRs). ASRs need to be mapped to source code implementations via an architectural model that can be visualized or textually specified using architectural languages, such as the Unified Modeling Language (UML) or Architectural Description Languages (ADLs) <ref type="bibr" target="#b13">[14]</ref>. Architecture models that reflect the ASRs need to be evaluated using an architecture evaluation method, such as Software Architecture Analysis Method (SAAM) or Architecture Tradeoff Analysis Method (ATAM) <ref type="bibr" target="#b12">[13]</ref>.</p><p>Software Development Bots (DevBots) represent conversational agents or recommender systems, driven by AI, to assist software engineers by offering certain degree of automation and/or inducing intelligence in software engineering process <ref type="bibr" target="#b6">[7]</ref>. From the software architecting perspective, the role of AI in general and DevBots to be specific is limited to bots answering questions or providing recommendations about archi-tectural erosion and maintenance <ref type="bibr" target="#b7">[8]</ref>. There is no research that investigates or any solution that demonstrates an architecting process by incorporating DevBots to enable human-bot collaborative architecting of software systems. Such a collaboration can enrich the architecting process that goes beyond questions &amp; answers and recommendations, and synergizes architects' intellect (human rationale) and bot's intelligence (automated architecting process) in ACSE. Collaborative architecting can empower novice designers or architects, who lack experience or professional expertise to specify their requirements in natural language and DevBots can translate them into ASRs, architectural models, and evaluation scenarios. As illustrated in Figure <ref type="figure" target="#fig_0">1</ref>, the emergence of ChatGPT as a conversational bot, based on large language models (LLM), can dialog with the architect to lead the creation of architectural artifacts with human supervision.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Research Method</head><p>We now present the overall methodology for the research, comprising of three main phases, as illustrated in Figure <ref type="figure">2</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fig. 2. Overview of the Research Method</head><p>Phase 1 -Developing the Architecture Story: Software architecture story refers to a textual narration of the envisaged solution, i.e., software to be developed by expressing the core functionality, desired quality (i.e., ASRs) and any constraints in a natural language. The story is developed based on analyzing software domain that represents an operational context of the system or collection of scenarios operationalised via a software solution. The architect can analyze the domain and identify scenarios to write an architecture story that acts as a for the architecting process. The architecture story is fed to ChatGPT via a prompt as a pre-process to collaborative architecting.</p><p>Phase 2 -Enabling Collaborative Architecting is based on three activities adopted from <ref type="bibr" target="#b1">[2]</ref>, detailed below.</p><p>? Architectural analysis is driven by architecture story fed to ChatGPT for articulating the ASRs via (i) automatically generated and recommended requirements (by Chat-GPT), or (ii) manual specification of the requirements (by the architect), or (iii) a continuous dialog between ChatGPT and the architect to refine (add/remove/update) the requirements. ? Architectural synthesis consolidates the ASRs to create an architecture model or representation that can act as a point of reference, visualizing the structural (de-)composition and runtime scenarios for the software. We preferred UML for architectural synthesis due to a number of factors, such as available documentation, ease of use, diversity of diagrams, tool support, and wide-scale adoption as a language to represent software systems <ref type="bibr" target="#b13">[14]</ref>.</p><p>During synthesis we also incorporated reuse knowledge and best practices in the form of tactics and patterns to refine the architecture. ? Architectural evaluation evaluates the synthesized architecture against ASRs based on scenarios from the architectural story. Architectural evaluation is conducted incrementally for full or partial validation of the architecture or its parts based on use cases or scenarios from ASRs. We used the Software Architecture Analysis Method (SAAM) to supervise ChatGPT for evaluating the architecture <ref type="bibr" target="#b12">[13]</ref>. Phase 3 -Conducting the Empirical Validations complements the initial two phases with empirical validations of collaborative architecting as an extension of this study, outlining future work. The existing scope aims to explore and present the role of ChatGPT in human-bot collaborative software architecting (in Section III). Future work on empirically grounded guidelines to understand a multitude of sociotechnical issues associated with ChatGPT-driven collaborative architecting is discussed later (in Section V).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. CASE STUDY ON COLLABORATIVE ARCHITECTING</head><p>This section details the process of collaborative architecting demonstrated with a case study for scenario-based exemplification and illustrations (see Figure <ref type="figure" target="#fig_3">3</ref>). The case study detailed in <ref type="bibr" target="#b14">[15]</ref> aims to develop a software application named CampusBike that can be used via a browser or as an app, allowing campus visitors to 'register', 'view available bikes', 'reserve a bike', 'make payments', and 'view usage reports' etc. for eco-friendly mobility in and around the campus. The architect has a working knowledge of software design (UML, patterns etc.) and implementation (programming and scripting languages) and is considered a motivated novice engineer with the responsibility to design and develop CampusBike software.</p><p>Snippet of Architecture Story " . . . as a step towards maintaining a 'Green Campus' -minimising the carbon footprint, congestion, and noise created by vehicles, University's administration has decided to introduce a bike service where campus visitors can avail of a pay-per-use bicycle facility on an hourly or daily basis for enhanced mobility in and around the campus. Potential bikers can register and view available bikes in their proximity (let us say within 500 meters) and reserve them for a specific time after payment. To facilitate this service, the administration needs a software application called 'CampusBike' that is available on Web and mobile devices for potential bikers . . . " Scenario Example: View available bikes (using location proximity), reserve a bike for a specific time (pay-and-reserve).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Formulating the Architecture Story</head><p>Architecture story refers to a textual narration of the envisaged solution, i.e., software to be developed by expressing the core functionality and any constraints narrated in a natural language. As per the methodological details in Figure <ref type="figure">2</ref>, the story is developed based on analysing software domain that represents an operational context of the system or collection of scenarios operationalized via a software solution. The architect can analyse the domain and identify any scenarios to write an architecture story, fed to ChatGPT, that sets the foundation for architectural analysis activity in the process. Detailed architecture story is available at <ref type="bibr" target="#b14">[15]</ref>, with its sample snippet and two scenarios highlighted below.   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Architectural Analysis</head><p>Once the architecture story is fed to ChatGPT, during architectural analysis, the focus is to specify ASRs as required functionality (e.g., view available bikes) and desired quality (e.g., response time ? N) along with any constraints (e.g., compliance with relevant data security policies) of Campus-Bike software. ChatGPT is capable of outlining the ASRs or any necessary constraints if queried by the architect. However, as per the case study, ChatGPT expressed the ASRs and constraints that were refined (add, remove, and modify any requirements) by the architect. For example, the 'Reserve Bike' requirement articulated by ChatGPT read as: '... system must allow user to view bikes available nearby and enable reservation of the bike instantly and securely'. The architect refined the requirements:</p><p>Architect's Refinements Functionality: View Bike -via location proximity Quality: Instantly -within 90 seconds, Securely -encrypt reservation token Constraint: apply data minimization on registration data (GDPR constraint)</p><p>After narrating the architecture story, Figure <ref type="figure" target="#fig_4">4</ref> shows architects' query and ChatGPT's response (human-bot collaboration) to specify the functionality, quality, and constraints, collectively referred to as the ASRs. ASRs are iteratively refined via a dialog between the two to produce a final list presented here <ref type="bibr" target="#b14">[15]</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Architectural Synthesis</head><p>The ASRs are synthesized into an architectural model that can be expressed with an architectural (modeling) language, like UML or other architectural languages <ref type="bibr" target="#b13">[14]</ref>. We used UML class and component diagrams to create the architecture model, specifically; component diagrams to represent the overall architecture, and class diagram for fine-grained representation of the architectural design. During synthesis, we refined the UML class diagram with the application of singleton pattern to 'UserLogin' class to restrict a single login session across the devices. We applied the caching tactic on 'ViewBikes' and data minimization constraint on 'User Location'. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Architectural Evaluation</head><p>Once synthesized (Figure <ref type="figure" target="#fig_4">4</ref>), the architecture needs to be evaluated to assess if it satisfies the ASRs and the constraints (Figure <ref type="figure">5</ref>). We have used the SAAM method <ref type="bibr" target="#b12">[13]</ref> to evaluate the synthesized architecture, as illustrated in Figure <ref type="figure">6</ref>. For example, the specifies the application of SAAM to evaluate the 'View Bike' component. ChatGPT presents the scenario for evaluating the 'View Bike' component individually and also scenarios where it interacts with other components. Based on the interaction of individual and interacting scenarios, an evaluation report is produced that shows the evaluation of the functionality, quality, and constraints of CampusBike architecture.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Apply the Software Architecture Evaluation Method (SAAM) to evaluate the ViewBike component of the CampusBike 1 Architect</head><p>To apply SAAM scenario to evaluate the "View Bikes" feature in the Campus Bike System, you can follow these steps:  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. AI in Software Engineering and Architecting</head><p>The research on synergizing AI and SE can be classified into two distinct dimensions namely AI for SE (artificial intelligence in software engineering) and SE for AI (software engineering for artificial intelligence) <ref type="bibr" target="#b4">[5]</ref>  <ref type="bibr" target="#b5">[6]</ref>. Considering the AI for SE perspective, Xie <ref type="bibr" target="#b4">[5]</ref> argued that SE research needs to go beyond traditional efforts of applying AI for toolbased automation and pattern selection with an exploration of methods that instil intelligence in software engineering processes and solutions. Specifically, SE solutions need to maintain the so-called 'intelligence equilibrium' -i.e., unifying and balancing machine intelligence and human intellect -in processes, patterns, and tools etc. for emergent classes of software, such as blockchain and quantum applications <ref type="bibr" target="#b15">[16]</ref>. <ref type="bibr">Barenkamp et al. [6]</ref> combined the findings of a systematic review interviews with software developers to investigate the role of AI techniques in SE processes. results of their study pinpoint three areas where SE needs intelligence to tackle (i) automation of tedious and complex SE activities such as code debugging, (ii) big data analytics to discover patterns, and (iii) evaluation of data in neural and softwaredefined networks. Considering the context of AI in software architecting, Herold et al. <ref type="bibr" target="#b7">[8]</ref> investigated existing research and proposed a conceptual framework for the application of machine learning to mitigate architecture degradation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. ChatGPT Assisted Software Engineering</head><p>From the SE perspective, ChatGPT is viewed as an unprecedented example of a chatbot that can produce wellarticulated responses to complex queries. However, it remains an unexplored territory in terms of its potential and perils in the context of software development processes <ref type="bibr" target="#b16">[17]</ref>, <ref type="bibr" target="#b17">[18]</ref>. Most recently, a number of proposals and experimental findings indicate that the research on ChatGPT focuses on supporting engineering education <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b9">[10]</ref>, software programming <ref type="bibr" target="#b17">[18]</ref>, <ref type="bibr" target="#b8">[9]</ref>, and testing <ref type="bibr" target="#b11">[12]</ref>. Avila-Chauvet et al. <ref type="bibr" target="#b8">[9]</ref> detailed how conversational dialogs of a programmer with ChatGPT enable a human-bot development of an online behavioral task using HTML, CSS, and JavaScript source code. They highlighted that although ChatGPT requires human oversight and intervention, it can write well-scripted programming solutions and reduces the time and effort of a developer during programming. A similar narrative in a blogpost <ref type="bibr" target="#b17">[18]</ref> advocated for an incremental process (human dialog with ChatGPT) to enable genetic programming -JavaScript code to solve the traveling salesman problem. In addition to developing the source code, a couple of studies have focused on testing and debugging with ChatGPT <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b11">[12]</ref>. Sobania et al. <ref type="bibr" target="#b11">[12]</ref> evaluated the performance of ChatGPT in automated bug fixing. In contrast to the status-quo on automated techniques for bug fixing <ref type="bibr" target="#b6">[7]</ref>, ChatGPT offers a dialogue with a software tester for an incremental identification and fixing of bugs.</p><p>Conclusive summary: Based on a review of the existing literature, there do not exist any research or development that explores the role of ChatGPT (LLM-driven AI) that can engage software engineers in conversational dialogs to lead and support ACSE. This study complements the most recent research efforts on software test automation and bug fixing with ChatGPT <ref type="bibr" target="#b11">[12]</ref> but focuses on architecture-centric development for software systems. In the broader context of AI for SE <ref type="bibr" target="#b4">[5]</ref>, this study argues for human-bot collaborative architecting that can enrich ACSE process with the architects' knowledge and supervision synergized with bot's capabilities to architect software-intensive systems and services.</p><p>V. DISCUSSION AND VALIDITY THREATS We discuss the socio-technical aspects of collaborative architecting (Section V-A) and highlight potential threats to validity (Section V-B).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Socio-Technical Issues of ChatGPT in ACSE</head><p>In addition to highlighting ChatGPT's potential, we also highlight some perils as shortcomings of collaborative architecting process that need to be discussed in the context of socio-technical aspects. By socio-technical aspects, we refer to a unified perspective on issues such as what can be 'social' concerns and what are the 'technical' limitations of collaborative architecting. Dedicated research is required to systematically investigate such issues, however, we only pinpoint several prominent ones, as below.</p><p>Response Variation: In the context of human-bot conversational dialogs, ChatGPT may produce varied responses for exact same queries. For example, we observed that a query such as '... what architectural style can be best suited to CampusBike system' may yield varied responses, such as microservices, layered, client-server etc. architecture can be best suited for the system. This and alike variation in recommendations or scripted artifacts (UML script, ASR specification etc.) can impact the consistency of architecting process and ultimately varied analysis, synthesis, and evaluation of the architecture. One of the solutions to minimize response variations is an iterative dialog with ChatGPT to refine its output and architects' oversight to ensure that the architectural artifacts being produced are consistent and coherent.</p><p>Ethics and Intellectual Property: Textual specifications, architecture specific scripts, and source codes etc. articulated by ChatGPT could give rise to ethical issues or in some cases copyright or intellectual property infringements. For example, ChatGPT generated script for a component (GETLOCATION) that senses user location in CampusBike system may lead to leakage of user location privacy and non-compliant software with regulatory guidelines (GDPR, CCPA etc.) that must be dealt with vigilance. In such cases, the role of architect is critical to ensure the generated architecture does not violate ethics or intellectual property rights (if any).</p><p>Biased Outputs: The biases in outputs of such conversational bots can be attributed to a number of possible aspects including but not limited to input, training data, and/or algorithmic bias. From an architectural perspective, recommendation bias about specific architectural modeling notation, tactic, pattern, or style etc. may be based on its widespread adoption or bias in training data rather than optimal use in a specific context. Moreover, architectural recommendations (specific style), design decisions (pattern selection), or validation scenarios (evaluation method) may suffer such bias to produce sub-optimal artifacts in ACSE.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Threats to the Validity</head><p>Validity threats represent limitations, constraints, or potential flaws in the study that can affect the generalization, replicability, and validity of results. Future work can focus on minimizing these threats to ensure methodological rigor and generalization of results.</p><p>Internal examines the extent to which any systematic error (bias) is present in the design, conduct, and analysis etc. of the study. To design and conduct this study, and considering the internal validity, we followed a systematic approach and utilized a well-known architecting process <ref type="bibr" target="#b1">[2]</ref> and architecture evaluation method <ref type="bibr" target="#b12">[13]</ref>. The case study based approach combined with incremental architecting (Figure <ref type="figure" target="#fig_3">3</ref>) helped us to analyze and refine the study, however, more work is required to understand if the study can be validated with a different architecting process or by adopting other evaluation methods.</p><p>External validity examines whether the findings of a study can be generalized to other contexts. We only experimented with a single case study of moderate complexity that can compromise study's generalization. Specifically, scenarios with the increased complexity of architecting process (cross-organisational development), class of software to be developed (mission-critical software), and human expertise (novice/experienced engineers) can affect the external validity of this research. Future work is planned, highlighted in the conclusions section, to validate the process of collaborative architecting by engaging architecting teams and analyzing their feedback to understand the extent to which the external validity can be minimized.</p><p>Conclusion validity determines the degree to which the conclusions reached by the study are credible or believable. In order to minimize this threat, we followed a three-step process (Figure <ref type="figure">2</ref>) to support a fine-grained process to architect the software and validate the results (future work). Moreover, a case study based approach was adopted to ensure scenariobased demonstration of the study results. However, some conclusions (e.g., architect's productivity, ChatGPT's efficacy) can only be validated with more experimentation involving multiple case studies, diverse teams, and real context scenarios of collaborative architecting.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. CONCLUSIONS AND FUTURE RESEARCH</head><p>ChatGPT has emerged as a disruptive technology, an unprecedented conversational bot, that mimics human conversations and generates well-articulated textual artifacts (recommendation, scripts, source codes etc.) -often referred to as a 'solution that seeks a problem'. Among a plethora of its use cases that range from content creation to digital assistance and acting as a virtual teacher etc., ChatGPT's role as a De-vBot and its capability to architect software-intensive systems remain unexplored. This research investigates the potential and perils of ChatGPT to assist and empower the role of an architect who leads the process of architecting, and collaborate with a human to enable ACSE. The research advocates that in the context of AI for SE, traditional efforts of applying AI for tool-based automation should focus on a broader perspective, i.e., enriching existing processes by instilling intelligence in them via efforts like human-bot collaborative architecting. The case study reflects a practical case of how a software can be architected with ChatGPT? and what factors need to be considered in collaborative architecting? Variance in responses and artifacts, types of ethical implications, level of human decision support/supervision, along with legal and socio-technical issues must be considered while integrating ChatGPT in SE or ACSE processes. The research needs empirical validations, grounded in evidence and experimentation, to objectively assess factors like enhancing engineers' productivity, SE process optimization, and assisting novice developers and designers to engineer complex and emergent classes of software effectively with ChatGPT.</p><p>Needs for future research: We plan to extend this study as a stream of research that explores human feedback and validation (i.e., architects' perspective) and integrating Chat-GPT in a process to develop software services for quantum computing systems. More specifically, quantum computing and quantum software engineering has emerged as a quantum computing genre of SE that faces a lack of human expertise to synergize the skills of engineering software and knowledge of quantum physics. We are currently working in engaging a number of software development teams with diverse demography attributes (e.g., geo-distribution, type of expertise, level of experience, class of software system) in controlled experiments to architect software systems using ChatGPT and document architects' responses. Specifically, with a case study that involves ChatGPT assisted architecting shall allow us to capture feedback of architects via interviews or documents to empirically investigate aspects like usefulness, rigor, acceptance, impact on human productivity, and potential perils of ChatGPT in ACSE.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Context: LLMs, DevBots, Process, and Architecture</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>system must allow user to view bikes available nearby and enable reservation of bike instantly and securely</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Overview of the Human-Bot Collaborative Architecting Process</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Formulating and Refining the Requirements</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 1 3 Fig. 5 .</head><label>5135</label><figDesc>Fig. 5. Modeling and Refining the Architecture Design shows the architect's instruction for ChatGPT's to create the script for UML class diagram. Additional dialog between the two enabled application of singleton pattern, caching tactic, and data minimisation constraint on class diagram, presented in [15].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>2 List Individual Scenarios and Interacting Scenarios for Evaluation 3 3 Fig. 6 .</head><label>2336</label><figDesc>Fig. 6. Evaluating the Architecture</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Software Requirements Source Code Register User (functionality) Secure Registration (quality) Aarchitecture Component Software Architecture Analyse Synthesise Evaluate Software Architect Architecting Porcess Large Language Model (LLM) Training Data Dialog Classification Translation Text Generation ... ... ... ...</head><label></label><figDesc></figDesc><table><row><cell>Software Development</cell><cell></cell></row><row><cell>Recommendations</cell><cell>Stories</cell></row><row><cell>ChatGPT</cell><cell></cell></row><row><cell>Cohere</cell><cell>LaMDA</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Data and Model Domain of Application for LLM-based Bots LLM-based Bots Operationalisation of LLMs Software architecture = blueprint for software</head><label></label><figDesc></figDesc><table><row><cell>Mapping requirements (functionality/quality) to</cell><cell></cell></row><row><cell>source code (implementations) etc. as</cell><cell></cell></row><row><cell>architectural elements (components).</cell><cell></cell></row><row><cell></cell><cell>Process for</cell></row><row><cell>Architecturally Significant Requirements</cell><cell>Architecture</cell></row><row><cell>Functionality, Quality, Constraints, etc.</cell><cell></cell></row><row><cell>Software Architecting Process = enabling</cell><cell></cell></row><row><cell>designers and developers to follow a structured</cell><cell></cell></row><row><cell>and systematic approach via a number of</cell><cell></cell></row><row><cell>architcting activities to enable ACSE.</cell><cell></cell></row><row><cell>-Analysis (reqirements, constraints, etc.),</cell><cell>LLM-based</cell></row><row><cell>-Synthesis (modeling, specification etc.),</cell><cell>Bots in ACSE</cell></row><row><cell>-Evaluation (validation, testing, etc.)</cell><cell></cell></row><row><cell>Domain of application = scenarios</cell><cell></cell></row><row><cell>such as recommender systems, story-</cell><cell></cell></row><row><cell>telling, and automating and enabling</cell><cell></cell></row><row><cell>software development.</cell><cell></cell></row><row><cell>Bots built on LLMs = agents that can</cell><cell></cell></row><row><cell>interact with humans to provide</cell><cell></cell></row><row><cell>intelligence and decision support to</cell><cell></cell></row><row><cell>human users.</cell><cell></cell></row><row><cell>Use cases of LLMs = Human-Bot</cell><cell></cell></row><row><cell>dialog, content classification,</cell><cell></cell></row><row><cell>translation, text generation with big</cell><cell></cell></row><row><cell>data analytics and processing. etc.</cell><cell></cell></row><row><cell>Large Language Models (LLMs)</cell><cell></cell></row><row><cell>= deep learning methods and algorithms</cell><cell></cell></row><row><cell>to recognise, summarise, and generate</cell><cell></cell></row><row><cell>content based on knowledge gained</cell><cell></cell></row><row><cell>from massive datasets</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>1 Overall Evaluation</head><label></label><figDesc></figDesc><table><row><cell>View Bike</cell><cell>View Bike</cell><cell></cell><cell></cell></row><row><cell>Evaluation</cell><cell>Component</cell><cell>Individual</cell><cell>Scenario</cell></row><row><cell></cell><cell></cell><cell>Scenario</cell><cell>Interaction</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>Functionality</cell><cell>Constraints</cell></row><row><cell cols="2">Classify and Prioritise</cell><cell></cell><cell></cell><cell>Quality</cell></row><row><cell cols="2">Evaluation Scenarios</cell><cell cols="2">Evaluation Report</cell></row><row><cell cols="2">Classified and Prioritised</cell><cell cols="2">Evaluation of Individual and</cell><cell>Evaluation Report for ASRs and</cell></row><row><cell cols="2">Evaluation Scaenarios</cell><cell cols="2">Interacting Scaerios</cell><cell>Constraints</cell></row></table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">The past, present, and future for software architecture</title>
		<author>
			<persName><forename type="first">P</forename><surname>Kruchten</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Obbink</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Stafford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="22" to="30" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A general model of software architecture design derived from five industrial approaches</title>
		<author>
			<persName><forename type="first">C</forename><surname>Hofmeister</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Kruchten</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Nord</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Obbink</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>America</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systems and Software</title>
		<imprint>
			<biblScope unit="volume">80</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="106" to="126" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Towards process centered architecting for quantum software systems</title>
		<author>
			<persName><forename type="first">A</forename><surname>Ahmad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>Khan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Waseem</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Fahmideh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Mikkonen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1st IEEE International Conference on Quantum Software (QSW)</title>
		<meeting>the 1st IEEE International Conference on Quantum Software (QSW)</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2022">2022</date>
			<biblScope unit="page" from="26" to="31" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The lonesome architect</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">F</forename><surname>Hoorn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Farenhorst</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Lago</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Van</surname></persName>
		</author>
		<author>
			<persName><surname>Vliet</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systems and Software</title>
		<imprint>
			<biblScope unit="volume">84</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="1424" to="1435" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Intelligent software engineering: Synergy between ai and software engineering</title>
		<author>
			<persName><forename type="first">T</forename><surname>Xie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th Innovations in Software Engineering Conference (ISEC)</title>
		<meeting>the 11th Innovations in Software Engineering Conference (ISEC)</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="1" to="1" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Applications of ai in classical software engineering</title>
		<author>
			<persName><forename type="first">M</forename><surname>Barenkamp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rebstadt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Thomas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">AI Perspectives</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page">1</biblScope>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">How to design a program repair bot? insights from the repairnator project</title>
		<author>
			<persName><forename type="first">S</forename><surname>Urli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Seinturier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Monperrus</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 40th International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP)</title>
		<meeting>the 40th International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP)</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="95" to="104" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Towards improving software architecture degradation mitigation by machine learning</title>
		<author>
			<persName><forename type="first">S</forename><surname>Herold</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Knieke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Schindler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Rausch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 12th International Conference on Adaptive and Self-Adaptive Systems and Applications (ADAPTIVE)</title>
		<meeting>the 12th International Conference on Adaptive and Self-Adaptive Systems and Applications (ADAPTIVE)</meeting>
		<imprint>
			<date type="published" when="2020">2020</date>
			<biblScope unit="page" from="36" to="39" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Chatgpt as a support tool for online behavioral task programming</title>
		<author>
			<persName><forename type="first">L</forename><surname>Avila-Chauvet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Mej?a</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">O</forename><surname>Acosta Quiroz</surname></persName>
		</author>
		<idno>SSRN:4329020</idno>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">SSRN preprint</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Engineering education in the era of chatgpt: Promise and pitfalls of generative ai for education</title>
		<author>
			<persName><forename type="first">J</forename><surname>Qadir</surname></persName>
		</author>
		<idno>techrxiv.21789434</idno>
		<imprint>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
	<note type="report_type">TechRxiv preprint</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<author>
			<persName><forename type="first">S</forename><surname>Jalil</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Rafi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">D</forename><surname>Latoza</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Moran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Lam</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2302.03287</idno>
		<title level="m">Chatgpt and software testing education: Promises &amp; perils</title>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">An analysis of the automatic bug fixing performance of chatgpt</title>
		<author>
			<persName><forename type="first">D</forename><surname>Sobania</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Briesch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Hanna</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Petke</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2301.08653</idno>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A survey on software architecture analysis methods</title>
		<author>
			<persName><forename type="first">L</forename><surname>Dobrica</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Niemela</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="638" to="653" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">What industry needs from architectural languages: A survey</title>
		<author>
			<persName><forename type="first">I</forename><surname>Malavolta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Lago</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Muccini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Pelliccione</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Tang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="869" to="891" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Replication package for the paper: Towards human-bot collaborative software architecting with chatgpt</title>
		<author>
			<persName><forename type="first">A</forename><surname>Ahmad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Waseem</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Fehmideh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">S</forename><surname>Aktar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Mikkonen</surname></persName>
		</author>
		<ptr target="https://github.com/shamimaaktar1/ChatGPT4SA" />
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Software architecture in a changing world</title>
		<author>
			<persName><forename type="first">E</forename><surname>Woods</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="94" to="97" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">A categorical archive of chatgpt failures</title>
		<author>
			<persName><forename type="first">A</forename><surname>Borji</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2302.03494</idno>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">The rise of chatgpt and the fall of the software developer -is this the beginning of the end?</title>
		<author>
			<persName><forename type="first">F</forename><surname>Doglio</surname></persName>
		</author>
		<ptr target="https://tinyurl.com/3mxrfmjh" />
		<imprint>
			<date type="published" when="2022-12">Dec 2022</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
