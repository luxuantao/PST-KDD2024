<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Scantegrity II: End-to-End Verifiability by Voters of Optical Scan Elections Through Confirmation Codes</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2009-11-18">November 18, 2009</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">David</forename><surname>Chaum</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Richard</forename><forename type="middle">T</forename><surname>Carback</surname></persName>
							<email>carback1@umbc.edu</email>
						</author>
						<author>
							<persName><forename type="first">Jeremy</forename><surname>Clark</surname></persName>
							<email>j5clark@cs.uwa-terloo.ca</email>
						</author>
						<author>
							<persName><forename type="first">Aleksander</forename><surname>Essex</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Stefan</forename><surname>Popoveniuc</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Ronald</forename><forename type="middle">L</forename><surname>Rivest</surname></persName>
							<email>rivest@mit.edu</email>
						</author>
						<author>
							<persName><forename type="first">Peter</forename><forename type="middle">Y A</forename><surname>Ryan</surname></persName>
							<email>peter.ryan@uni.lu</email>
						</author>
						<author>
							<persName><forename type="first">Emily</forename><surname>Shen</surname></persName>
							<email>eshen@csail.mit.edu</email>
						</author>
						<author>
							<persName><forename type="first">Alan</forename><forename type="middle">T</forename><surname>Sherman</surname></persName>
							<email>sherman@umbc.edu</email>
						</author>
						<author>
							<persName><forename type="first">Poorvi</forename><forename type="middle">L</forename><surname>Vora</surname></persName>
							<email>poorvi@gwu.edu</email>
						</author>
						<author>
							<persName><roleName>Dr</roleName><forename type="first">Bart</forename><forename type="middle">D</forename><surname>Preneel</surname></persName>
						</author>
						<author>
							<persName><surname>Chaum</surname></persName>
						</author>
						<author>
							<persName><forename type="first">R</forename><forename type="middle">Y A</forename><surname>Ryan</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Voting Systems Institute</orgName>
								<address>
									<postCode>90064</postCode>
									<settlement>Los Angeles</settlement>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Department of Com-puter Science and Electrical Engineering</orgName>
								<orgName type="institution">University of Maryland</orgName>
								<address>
									<postCode>21250</postCode>
									<settlement>Balti-more County, Baltimore</settlement>
									<region>MD</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">David R. Cheriton School of Computer Science</orgName>
								<orgName type="institution">Univer-sity of Waterloo</orgName>
								<address>
									<postCode>N2L 3G1</postCode>
									<settlement>Waterloo</settlement>
									<region>ON</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<orgName type="department">School of Information Technology and Engineering</orgName>
								<orgName type="institution">Uni-versity of Ottawa</orgName>
								<address>
									<postCode>K1N 6N5</postCode>
									<region>ON</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff4">
								<orgName type="institution">National Institute of Standards and Technology</orgName>
								<address>
									<postCode>20899</postCode>
									<settlement>Gaithersburg</settlement>
									<region>MD</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff5">
								<orgName type="department">Department of Electrical Engineering and Computer Science</orgName>
								<orgName type="institution">Massachusetts Institute of Technology</orgName>
								<address>
									<postCode>02139</postCode>
									<settlement>Cambridge</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff6">
								<orgName type="department">Faculte des Sciences</orgName>
								<orgName type="laboratory">de la Techologie et de la Com-munication</orgName>
								<orgName type="institution">University of Luxembourg</orgName>
								<address>
									<postCode>L-1359</postCode>
									<country key="LU">Luxembourg</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Scantegrity II: End-to-End Verifiability by Voters of Optical Scan Elections Through Confirmation Codes</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2009-11-18">November 18, 2009</date>
						</imprint>
					</monogr>
					<idno type="MD5">771669E17F0D57F07C857B42BAF26387</idno>
					<idno type="DOI">10.1109/TIFS.2009.2034919</idno>
					<note type="submission">received February 23, 2009; revised October 07, 2009.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T15:57+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Cryptography</term>
					<term>electronic voting</term>
					<term>end-to-end verifiability</term>
					<term>privacy</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Scantegrity II is an enhancement for existing paper ballot systems. It allows voters to verify election integrity-from their selections on the ballot all the way to the final tally-by noting codes and checking for them online. Voters mark Scantegrity II ballots just as with conventional optical scan, but using a special ballot marking pen. Marking a selection with this pen makes legible an otherwise invisible preprinted confirmation code. Confirmation codes are independent and random for each potential selection on each ballot. To verify that their individual votes are recorded correctly, voters can look up their ballot serial numbers online and verify that their confirmation codes are posted correctly. The confirmation codes do not allow voters to prove how they voted. However, the confirmation codes constitute convincing evidence of error or malfeasance in the event that incorrect codes are posted online. Correctness of the final tally with respect to the published codes is proven by election officials in a manner that can be verified by any interested party. Thus, compromise of either ballot chain of custody or the software systems cannot undetectably affect election integrity. Scantegrity II has been implemented and tested in small elections in which ballots were scanned either at the polling place or centrally. Preparations for its use in a public sector election have commenced.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>(DRE) voting machines began to replace paper ballots and lever systems in about 1980 <ref type="bibr" target="#b1">[2]</ref>. More recently, however, due to reliability failures and security vulnerabilities, the trend has been toward replacing DREs with paper ballot systems, including optical scan systems <ref type="bibr" target="#b29">[30]</ref>. Optical scan, however, is not without its own demonstrated and inherent integrity vulnerabilities (see, for example, <ref type="bibr" target="#b28">[29]</ref>). Undetected errors, unintentional or malicious, in the scanning or tallying software can cause undetected errors in the electronic tally. Improperly printed ballots enable a variety of attacks on integrity. Misplaced ballots or breaches in chain-of-custody render even expensive manual recounts ineffective. Further, the transparency offered by manual recounts is at best limited to those officials and observers in attendance. Scantegrity II is an enhancement for optical scan voting systems that addresses the above deficiencies, while also providing ballot secrecy guarantees under reasonable assumptions.</p><p>In Scantegrity II, voters mark ballots using a special ballot-marking pen, which makes legible preprinted confirmation codes corresponding to voter selections. The link between confirmation codes and voter selections is cryptographically protected, with the key(s) being shared by election officials. Voters may note down their confirmation codes onto a chit that is detachable from the ballot. After the election, all voted confirmation codes are posted online, where voters may check them. The final tally is computed in a verifiable manner from the posted confirmation codes.</p><p>The functionality of Scantegrity II is enabled by the use of several types of ink with special properties, in the following ways.</p><p>1) Confirmation codes and ballot ovals are printed with a special ink that darkens when it reacts with the ink in the ballot-marking pen; the confirmation code ink reacts more slowly than the ballot oval ink, and hence darkens several minutes after the oval does. Thus, the code is visible for several minutes after being marked, during which the voter may note it on the chit. On the other hand, the confirmation code may be assumed to be indistinguishable from its background in an unmarked oval. This allows the Scantegrity II system to provide a confirmation code to the voter only after the voter has made the corresponding ballot selection.</p><p>2) The Scantegrity II chit bears two serial numbers that are required of the voter in order to check the confirmation codes online. These serial numbers are also indistinguishable from the background until made legible through the use of a decoding pen. The ink in the decoding pens is different from the ink in the ballot-marking pens. Poll workers reveal the serial numbers using a decoding pen after the ballot is cast. This prevents voters from falsely claiming that a valid confirmation code, obtained from an uncast ballot, came from a cast ballot. When it is not possible to use the different inks required for chit serial numbers and decoder pens, it is possible to achieve a similar end, though with weaker integrity guarantees, by requiring that a record be kept, by polling officials and observers, of serial numbers of spoiled ballots. Scantegrity II has implemented procedures for printing with the inks to make it virtually impossible to read unexposed numbers and codes with the human eye. Further, it is reasonable to assume that voters do not have access to ballots outside the polling booth, and that they do not have access to specialized equipment inside the polling booth. The inks thus enable the Scantegrity II voting system to provide voters with confirmation codes that correspond exactly to their selections, and serial numbers that correspond exactly to valid cast ballots.</p><p>Scantegrity II, like several other systems (such as Prêt à Voter <ref type="bibr" target="#b10">[11]</ref>, Punchscan <ref type="bibr" target="#b14">[15]</ref>, <ref type="bibr" target="#b15">[16]</ref>, <ref type="bibr" target="#b25">[26]</ref>, Scratch &amp; Vote <ref type="bibr" target="#b0">[1]</ref>) provides a mechanism for end-to-end verifiability of election integrity: voters may verify that their selections are included unmodified in the collection of selections; additionally, anyone may verify that the tally is computed correctly from the collection of selections. Voters and authorized observers may "audit" ballots by requiring the voting system to expose all confirmation codes and corresponding selections on the audited ballots, and checking that these correspond to those printed on the ballots. Audited ballots may not be used for voting.</p><p>The verifiability property of Scantegrity II is independent of voting system software correctness and ballot chain-of-custody after ballots are cast. The proof of correctness made by those running an election is based only on 1) the inability of the voting system to change values once they have been committed to, and 2) the unpredictability of choices made by voters and election auditors-to verify confirmation codes online, to audit ballots, and to audit the data provided by the voting system regarding the processing of confirmation codes to obtain the tally. The ability of the system to expose false charges of election fraud is based on the ink properties described above.</p><p>Paper ballot systems possess inherent weaknesses with respect to the requirement of ballot secrecy <ref type="bibr" target="#b19">[20]</ref>. For example, a voter can be identified by a distinctive manner of making marks. The process of polling place scanning also introduces privacy vulnerabilities; for example, the timing of voters scanning ballots can be analyzed to improve an estimate of the voter's selections. Further, advances in forensic technology make it possible to examine fingerprints on ballots. Finally, the miniaturization of cameras poses challenges to the secrecy of voter selections in all types of voting systems, whether paper-based or not.</p><p>Scantegrity II is an overlay on paper ballot systems, and cannot remove the inherent ballot secrecy limitations of the underlying system. It does, however, attempt to limit any additional ballot secrecy vulnerabilities. For example, the linking of confirmation codes to votes requires the collusion of a set of election officials, or the breaking of the security of cryptographic techniques used. Further, the use of a slow-reacting ink and a modification to the voting procedure can ensure that information linking confirmation codes and ballot serial numbers to voter selections can be removed from ballots a few minutes after they are marked. As with regular optical scan, forensic attacks are possible-coercive adversaries could, for example, use specialized equipment to attempt to read the codes on the ballots. We assume these are too time-consuming and unwieldy to be very practical, for two reasons. First, we have instituted printing procedures to minimize the effectiveness of such ballot analyses; these are described in Section V. Second, simpler attacks, based on the fingerprinting of the underlying paper using commodity scanners <ref type="bibr" target="#b11">[12]</ref>, are possible against perforated paper-ballot-based end-to-end voting systems in general (including Scantegrity and Prêt à Voter).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Contributions</head><p>Scantegrity II and its predecessor Scantegrity <ref type="bibr" target="#b8">[9]</ref> have the following characteristics that distinguish them from other systems that provide end-to-end verifiability:</p><p>1) Compatibility with optical scan equipment: Scantegrity and Scantegrity II do not require the replacement of any optical scan polling place equipment. Both systems interface cleanly with the underlying optical scan system, requiring only a modified ballot and access to the results from the scanners. 2) Familiar ballot-marking procedure: The ballot-marking procedure is very similar to that for a conventional optical scan ballot. Opting into verification of election integrity is up to the individual voter. Two properties of Scantegrity II distinguish it from Scantegrity.</p><p>1) Scantegrity did not use invisible ink; all confirmation codes were visible on the ballot. This allowed voters to file spurious disputes concerning which codes appear on the website, and required a tedious dispute resolution process to resolve such issues. If voters cannot guess confirmation codes or chit serial numbers, a dispute regarding the correct recording of confirmation codes can be resolved in Scantegrity II without the cumbersome physical proof required by Scantegrity. 2) Scantegrity II makes commitments to multiple Scantegrity back-ends and uses a new audit procedure. a) While the Scantegrity audit procedure reveals some information about individual votes, the Scantegrity II audits reveal no additional information if the cryptographic techniques used are secure, and election officials do not collude to violate ballot secrecy. b) In Scantegrity, the probability that a cheating voting system is undetected decreases exponentially with the number of modified votes. In Scantegrity II, this probability is independent of the number of modified votes, but decreases exponentially with the number of back-ends audited. Scantegrity was described in <ref type="bibr" target="#b8">[9]</ref>. Scantegrity II was first described at EVT 2008 <ref type="bibr" target="#b7">[8]</ref>. The present paper provides a more detailed description; additionally, the use of chit serial numbers to improve dispute resolution, the use of multiple back-end instances, the new audit procedure, and a proposal for accessibility are original to this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Organization</head><p>In Section II, we provide a nontechnical sketch of the protocol as viewed by the voters, poll workers, and election administrators. A complete technical specification of the entire protocol is provided in Section III. Our security assumptions and an analysis of the integrity and privacy provided by Scantegrity II follows in Section IV. We also offer a discussion of the use of invisible ink in Section V and the accessibility of Scantegrity II to voters with disabilities in Section VI.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. SCANTEGRITY II PROCEDURES</head><p>Scantegrity II provides integrity guarantees through the use of a confirmation code provided to each voter for each ballot selection. All confirmation codes are posted on a website after the election, and all results are obtained through the processing of these codes. The Scantegrity II protocol defines the manner in which participants in the election-voters, election administrators, and observers-interact with the voting system in order to ensure that 1) confirmation codes are correctly present on the ballots, 2) marked confirmation codes are correctly present on the website, and 3) confirmation codes are correctly processed to obtain the final tally. The protocol is designed to enable the detection of election fraud if it has occurred, as well as to prevent false charges of election fraud. This section provides an (intentionally) informal description of the protocol; its purpose is to provide a description that is somewhat accessible to voters, poll workers, and election administrators, and to prepare the reader for the more formal description in the next section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Vote Casting Procedure</head><p>This section describes the vote-casting procedure, which is very similar to that of a regular optical scan ballot. The slight differences between the two are as follows. First, the unmarked ballot itself looks slightly different: it bears a detachable chit that can be used to note confirmation codes. Second, while marking the ballot, voters will notice the appearance of confirmation codes, which will also disappear after a few minutes. Third, voters or observers may audit ballots to determine whether printed confirmation codes correctly reflect voter selections; such ballots may not then be cast. While we have simplified the ballot audit procedure considerably, it does not have a corresponding equivalent in the regular optical scan protocol, and might appear complicated to voters and officials. Similarly, spoiled ballots are discarded using a procedure that is more complex than that used for optical scan. Fourth, voters interact with a polling official after the vote is successfully cast, in order to expose serial numbers on the receipt chit.</p><p>1) Scantegrity II Ballot: The Scantegrity II ballot consists of two parts: the main body and the chit (see Fig. <ref type="figure" target="#fig_0">1</ref>). Similar to an optical scan ballot, the main body of a Scantegrity II ballot contains, for each contest, a list of valid selections printed in a canonical order predetermined by polling place procedures (e.g., alphabetical, rotated across precincts, etc.). Next to each possible selection is a markable region, oval in shape.</p><p>Differing from an optical scan ballot, the background of each oval is printed with a reacting ink. The confirmation code corresponding to the selection for the particular ballot is printed inside the oval. The ink used to print the confirmation code is similar to that used for the oval background, but is slow-reacting. Both inks look the same when printed on the ballot paper; they may be assumed to be indistinguishable to the human eye before the oval is marked with the ballot-marking pen (see Section V for details on the validity of this assumption). Further, we assume that voters will not be able to take expensive spectral analysis equipment into the polling booth; such equipment might aid in the ability to distinguish between background and confirmation number. Thus, we assume that, before marking, the oval has a single color, and confirmation codes are indistinguishable from the background of the oval; that is, confirmation codes are invisible. Additionally, a Scantegrity II ballot contains a ballot serial number that is machine-readable but not easily read or memorized by a human (e.g., a two-dimensional barcode).</p><p>The chit is attached to the bottom of the ballot via a perforation, such that it can be easily detached. It has two halves, left and right; the halves can be detached from each other using a pair of scissors. On each half is a chit serial number: the left chit serial number and the right chit serial number. These chit serial numbers are distinct from each other and from the ballot serial number; we describe later how they are used to ensure that voters cannot make false claims regarding confirmation codes on uncast ballots. Both the left and right chit serial numbers are printed in invisible ink such that they are neither human nor machine readable before being decoded using a special decoder pen. Both the left and right chit serial numbers are assumed to appear after they are marked with the decoder pen.</p><p>2) Ballot Marking: Upon arrival, a voter is authorized to cast a ballot, and is handed the next one in the pile; it is enclosed in a privacy sleeve. At this time, she may choose to audit a ballot, which she may choose from the existing ballot pile. For details on the ballot audit procedure, see Section II-B1.</p><p>In order to vote for a particular selection, the voter fills in the corresponding oval using a ballot-marking pen. In accordance with the invisible ink printed on the ballot, the background of the oval will immediately turn dark, leaving a confirmation code visible in the foreground. The relative darkness of any marked ovals to unmarked ones will allow an optical scanner employing dark mark logic to register the oval as marked. The foreground of the oval will be human-readable and a voter interested in verifying that her vote is in the virtual collection of votes to be tallied may record the code on the chit portion of the ballot. Uninterested voters may disregard the codes.</p><p>The link between a confirmation code and the corresponding selection on a particular ballot is protected cryptographically. We omit the details underlying the generation and protection of the data until the next section. At this stage, however, we do note the following. The disclosure of a confirmation code does not reveal the selection, if the cryptographic techniques used are assumed secure, and election officials are assumed not to collude to determine the selection.</p><p>Although not apparent to the voter, the confirmation code is printed in a slow-reacting invisible ink that will also turn dark, but only after the passage of several minutes (e.g., five to seven minutes). At this time, the oval will be completely dark and the code will no longer be visible, leaving no human-readable unique information on the ballot.</p><p>As an option, the two-dimensional bar-coded serial number could also have slow reacting ink in its background such that if a voter marked it, it would turn solid black.</p><p>Section V describes how a masking ink and appropriate printing techniques may be used to reduce the ability to distinguish between the inks, even with the use of microscopes and spectral equipment. Indeed, it may be assumed that the slow and fast-reacting invisible inks are, for all practical purposes, indistinguishable a) before exposure and b) within seconds after both have been exposed, where is the response time of the slow-reacting ink. After a period long enough to include reaction times, a filled-in Scantegrity II ballot provides, for all practical purposes, an amount of information that is similar to that on an optical scan ballot, and can be used in a manual recount with a level of privacy very similar to that of optical scan.</p><p>3) Spoiling the Ballot: If the voter makes an error in marking a ballot or wishes to register a protest vote through spoiling the ballot, it is returned to the poll worker. Without seeing the contents of the ballot, the poll worker removes the ballot from the privacy sleeve and detaches the right side of the chit from the ballot. The main body and left chit are shredded in view of the voter. The right chit is retained by the poll worker and used to verify that the number of ballots issued is identical to the sum of the number of ballots tallied, print-audited, and spoiled. The number of spoiled ballots allowed per voter is typically limited by predetermined polling place procedures.</p><p>4) Casting the Ballot: When the voter has satisfactorily marked a ballot, it is returned to the poll worker. As previously, the poll worker detaches the chit from the ballot. Further, with the choices on the ballot still concealed, the poll worker places the main body of the ballot into the scanner, which records the ballot serial number and the marked choices. In the preferred version of the protocol, voters are not allowed to cast undervoted or overvoted ballots. If a voter does not wish to vote for a particular candidate, she must make a selection of "none of the above." If the scanner detects an undervote or overvote, the voter is returned her ballot, and will spoil it and re-enter the issuance procedure. Note that, in the U.S., the requirement that a voter be notified of undervotes or overvotes is not uncommon; in fact, the Help America Vote Act requires that voters be notified of overvotes if electronic equipment is used. However, requiring that undervoted or overvoted ballots not be cast is considerably stricter, and decreases the usability of the voting system. The alternative version of the protocol does not ban undervotes or overvotes in cast ballots. However, in this version, a secure chain of custody is required to ensure that unvoted races were not changed to voted ones, nor voted races overvoted. Research on requiring neither the restriction on undervoted and overvoted ballots, nor a secure chain of custody, is underway.</p><p>In order for the scanner to read the serial number, it must be encoded in a two-dimensional barcode as the scanner can only recognize marked or unmarked regions.</p><p>After a successful scan, the two serial numbers on the chit are developed by the poll worker. The voter may leave with the chit. It is expected that public interest groups will make available the possibility of creating a copy of chits to alleviate the need for concerned but time-constrained voters to personally participate in auditing the election.</p><p>5) Casting Without Automation: For polling places without adequate voting technology or in the event of a power failure, Scantegrity II may still proceed with the voter being issued the chit in the same manner. The main body of the ballot will, instead of being scanned, be placed into a sealed ballot box that has been certified as being empty prior to sealing. If scanning technology is unavailable at the polling place, the ballots may be transported to a central scanning location.</p><p>6) Accounting for Ballots: At the end of the day, poll workers and official observers make a note of the numbers of spoiled, voted and audited ballots, and ensure that their sum is equal to the number of used ballots. These numbers are made publicly available; this prevents ballot stuffing. Further, they note down the exposed chit serial numbers of voted, spoiled, and audited ballots, so these cannot be changed after the election.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Election Audit Procedures</head><p>A voter may participate in auditing the election in several ways. In addition to checking the confirmation numbers on her ballot, she may audit a printed ballot, and check the processing of confirmation codes. Election observers may also participate in the latter processing check.</p><p>1) Auditing a Printed Ballot: Voters wishing to audit a printed ballot may choose one from the ballot pile; we refer to the process of auditing the ballot as the print audit. They will each be issued a ballot main body and the left or right half of the chit, with the serial number activated using the decoder pen; which half is chosen may be determined by a flipped coin. The other half of the chit is removed and retained by the pollworker in a clear box on the poll worker table. At her leisure, the voter fully marks the ballot to reveal all the confirmation codes, which she may check using the procedure in the following section.</p><p>2) Checking Confirmation Numbers: At a prearranged time after the polls close, voters who recorded the confirmation codes associated with the candidates they voted for, or those who wish to check the confirmation codes on a print-audited ballot, may visit a website where they will be prompted for the serial number on the chit. In the case of voted ballots, the voter will have two serial numbers-left and right; either is suitable to identify the ballot uniquely. Upon entering a serial number, the website will report the confirmation codes in the positions it believes were marked for voted ballots, but will not report the candidates associated with these codes. For this reason, providing a copy of the confirmation codes in no way undermines the secrecy of the ballot. Voters are encouraged to share their confirmation codes, share photographs of their chits, or post screen-captures of the results. In the case of an audited ballot, entering the serial number will similarly report the confirmation codes that should appear on the ballot and, only in this case, also reveal the candidates associated with each code.</p><p>All confirmation codes and their associated candidates are committed to prior to the election to ensure the values or associations cannot be changed. Thus, the audited ballots provide probabilistic evidence that the confirmation codes were correctly printed on the ballots. The correct and full inclusion of confirmation codes from a voted ballot provides probabilistic evidence that the votes were properly scanned and not maliciously altered. Full details are provided in Section III, and the strength of this evidence is quantified in Section IV.</p><p>3) Checking the Processing of Confirmation Numbers: Due to the commitments to confirmation codes and candidates before the beginning of the election, it is known that candidates are mapped to confirmation codes and that this mapping cannot be changed. Further, through the print audits, voters are assured that this mapping has been faithfully transposed to the printed ballots they marked. By checking the inclusion of their confirmation codes, they are further assured that the marks they made for candidates have been faithfully transposed to confirmation codes consistent with those on the ballot. The final step is to check that the confirmation codes are properly mapped back to the correct candidates.</p><p>The protocol for achieving this check will be based on an open specification. Voters may either obtain software from a software provider they trust, or write their own software, to check the processing of the confirmation numbers. All required information for writing the software (such as the format of the data and what the data are) is provided by Scantegrity II to all interested parties. Those administering the election are encouraged to appoint an independent auditor to perform this check so as to provide at least one audit of the tally computation from confirmation codes. The details of this check are also provided in Section III.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Dispute Resolution Process</head><p>If any voters discover incorrect confirmation codes or ballots that are incorrectly designated as voted, print-audited, or spoiled, they may file disputes. In the case of a confirmation code being incorrect, they may provide the confirmation code they believe should be on the ballot. A voter's knowledge of a valid confirmation code on the ballot, that is not present on the website, suggests an error or malfeasance; the validity of the code can be established since the codes are committed to, and the likelihood of guessing a correct code can be made low through the use of longer codes (exact quantification to follow in Section IV). If a voted ballot is incorrectly designated, the voter can provide both chit serial numbers to prove that it was voted. Similarly, if a print-audited ballot is incorrectly designated, the voter or independent auditor can provide all the confirmation codes on the ballot to prove that it was print-audited. In the case when the voter knows all confirmation codes in an overvoted ballot, this ballot's designation cannot be changed to print-audited as the voter knows both serial numbers. In order to ensure that unvoted races are not voted, and that properly voted ballots are not changed to overvoted ones, a restriction of not allowing undervotes or overvotes on cast ballots is required.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. CRYPTOGRAPHIC PROOF OF TALLY</head><p>The following describes the method used for proving the correctness of an election outcome while simultaneously maintaining voter anonymity. It is based on the protocol introduced in <ref type="bibr" target="#b8">[9]</ref> and <ref type="bibr" target="#b7">[8]</ref>, adapted to the enhanced polling procedures described in Section II.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Ballot Definition</head><p>For simplicity, we consider a notation based on a single contest ballot. Generalization to ballots containing multiple races, as well as elections containing multiple ballot styles, should be viewed as multiple independent executions of the single contest case described herein. Let define a list of ballot selections (e.g., candidates, choices, etc).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Roles</head><p>We consider three categories of entities participating in the election with the acknowledgement that the entities are rolebased and thus an individual might possibly assume any or all roles.</p><p>Voters: Voters are those with the authority to cast a ballot in the election. We assume that voter authentication (external to this discussion) is undertaken prior to ballot issuing and that only authenticated voters are issued ballots. In this section, we will refer to a particular voter as .</p><p>Election Trustees: Let be the set of election trustees, . The trustees engage in the cryptographic protocol to setup and generate the correctness proofs of the election. would generally consist of public officials and, optionally, candidate representatives. The protocol is intended to proceed when a minimum number of trustees are present-not requiring the presence of all so as to mitigate the disruption caused by any individual trustee's absence at various stages of the protocol. Verifier: The set of verifiers consists of all agents verifying the correctness proofs herein. The intention is that the tally-correctness be "universally verifiable" as defined in <ref type="bibr" target="#b27">[28]</ref>-meaning that any voter, citizen, or observer can participate either directly, or through delegation, in the verification of the tally if they so choose. Other Entities: Poll workers are responsible for administering the voting process, instructing and assisting voters, as well as enforcing the registration, ballot issuing, marking, and casting procedures outlined in Section II.</p><p>Finally, we require the existence of a public bulletin board which implements an append-only public record. In practice, it might be implemented as a mirrored public website.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Functions</head><p>In this section, we outline the main functions used in the protocol. For a positive integer , we use to denote the set of integers . The functions consist of the following: 1) A parameter initialization function that, given a security parameter, provides an election-specific nonce and minimum key lengths. 2) A trustee threshold-key generation function that produces individual trustee keys for trustees and a master key that can be reconstructed from a minimum threshold number of trustee keys. This function takes as input the electionspecific nonce, the value of , and input bit strings from the trustees, the entropy of which provides the entropy of the keys generated. 3) A master-key reconstruction function that, given a set of or more trustee keys, reconstructs the master key. 4) A subkey generation function that is a cryptographic one-way function, accepts a master key and an identifier, and outputs another key. 5) A keyed permutation function that, given a key and the value , generates a pseudorandom permutation of integers in the range . 6) A cryptographic commitment function that is computationally hiding and computationally binding. 7) A ballot generation function that, given the candidate list, the confirmation code alphabet and length, the election master key, and the number of ballots required, generates the master list of ballots. Details of each of these functions follow.</p><p>Parameter Initialization: accepts a security parameter and outputs a set of functional parameters including a unique election-specific nonce selected in accordance with a public convention (not considered here), and a specification of cryptographic algorithms used to realize certain cryptographic one-way and trapdoor functions, as well as specifying their enforced minimum key lengths. For brevity, we will omit continual reference to by assuming all following functions accept it as input. Trustee Threshold-Key Generation:</p><p>accepts an arbitrary-length random bit string, denoted , from each trustee , as well as a threshold , specifying the number of trustees needed to reconstruct a unique election master key . It outputs a distinct key for each of the trustees, , as well as a master key . We do not consider the policy guidelines for selecting trustees or in this section.</p><p>is such that, if at least one is uniformly distributed across all possibilities, will be as well. is also dependent on the election nonce (so if the same value of were supplied in a different election, would be different). is only used as private input to other functions. Each output key is transmitted over an authenticated and physically untappable channel to the corresponding trustee . Election Master Key Reconstruction: accepts as input a set of keys and outputs the unique election master key if and only if . Otherwise it returns a symbol (denoted by ) indicating the function failed to reconstruct the key.</p><p>The assumption for the two preceding algorithms is briefly stated: given any unbounded adversary , the advantage of (over a random guess) in guessing , given any set containing fewer than keys from , is exactly zero. One suitable construction is due to Pedersen <ref type="bibr" target="#b24">[25]</ref>, and has been suggested for use in voting by Benaloh <ref type="bibr" target="#b2">[3]</ref>. A suitable notion of an untappable channel is the one due to Sako and Killian <ref type="bibr" target="#b27">[28]</ref>.</p><p>Sub-key Generation: is a cryptographic one-way function that accepts a master key and identifier and outputs another key , where defines what key is to be generated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Keyed Permutation:</head><p>accepts a key and list length , and outputs , where is a permutation selected pseudorandomly from the set of possible permutations of elements . The function depends on . We use the notation to denote the element-wise shuffle of a -element set for . Finally, we define a special-case null index, denoted , in which for all . Cryptographic Commitment: We consider a cryptographic commitment protocol as including the following pair of functions: accepts a key and an arbitrary length message to obtain a commitment .</p><p>accepts a commitment , key , and message , and outputs 1 if</p><p>. Otherwise it outputs 0. The cryptographic assumptions for these algorithms are briefly stated: given any probabilistic polynomial time-bounded producing messages and , and keys and , the probability that and is a negligible quantity in the security parameter . That is, cannot find two distinct messages that produce the same commitment. This is an informal definition of the computationally binding property of a commitment. Additionally, given any probabilistic polynomial time-bounded is a negligible quantity in the security parameter . That is, cannot distinguish between a commitment to and one to , if the commitments use the same key. This is an informal definition of the computationally hiding property of commitment functions.</p><p>Generate Ballots: accepts ballot selection/candidate list , confirmation-code alphabet (typically the set of alphanumeric characters), confirmation-code length , election master key , and the overall number of ballots to be generated . contains three lists. The first is a list of ballots,   <ref type="table">S</ref>.</p><p>sorted by serial number, each with selections, each selection associated with a confirmation code in . In addition to this list, also bears space for the voters' choices after ballots are filled, and a third list which bears the corresponding candidates. We deviate slightly from the notation introduced in <ref type="bibr" target="#b7">[8]</ref>. Let denote the canonical "master" list associating codes, candidates, and voter-made marks, which we define as the triple of -element lists . For all , 1) is a list of serial numbers and confirmation codes, including serial numbers for each ballot, and confirmation codes for each selection in a ballot. Let . 2)</p><p>will eventually represent the list of scanned voter-made marks indicating the absence or presence of a mark (i.e., vote) made for an associated selection. Let</p><p>, and let all be initialized to 0. 3) is a list consisting of repetitions of selection/candidate list . Let . For notational convenience throughout the rest of this paper, we will use the index to refer to a given ballot , and its associated voter-receipt , where . For any , let , , , if . Serial numbers shall be selected independently (without replacement) by a secure pseudorandom number generator seeded by the election master key . These numbers shall be selected from range defined by , such that correctly guessing an unknown or would occur with a small (but not cryptographically negligible) probability.</p><p>Finally, confirmation codes will be independently selected by a pseudorandom generator such that confirmation codes are not repeated across a given ballot , namely if , for distinct . See Fig. <ref type="figure" target="#fig_1">2</ref> for an example of a list of four ballots when there are two candidates on the ballot, and confirmation codes consist of three alphanumeric symbols.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Trusted Computation Platform</head><p>The protocol assumes the existence of a hardware device, referred to as the trusted computation platform, which the trustees use to evaluate the various functions described above. This device relies on the following assumptions related to the preservation of ballot secrecy:</p><p>• Private and authenticated input: the ability to receive input from authenticated trustees via a physically untappable channel; • Private evaluation: the ability to evaluate a function such that the intermediate values cannot be recovered by passive or active attack of the hardware or software components; and • Correctness: the ability to attest that the functions being evaluated are equivalent to available and predefined source code. Note that the correctness assumption enables the trustees to be certain that the required computations are being computed correctly, and hence increases the reliability of the computation from the perspective of the honest trustee. It does not affect the ability of the voter or the auditor to detect a cheating trustee.</p><p>With the failure of any of these trust assumptions, it may become possible for a malicious subset of trustees to recover information related to the association between voting intent and ballot serial number. For example, this can be accomplished by observing a sufficient number of trustee keys, observing intermediate state, or altering the functions to overtly or covertly leak this information.</p><p>None of these assumptions, including the correctness assumption, dictate the soundness of the tally. In the event that any or all of these assumptions are subverted (or any cryptographic assumption is found not to hold), the correctness of the final tally can still be ascertained through the independent verification mechanism described in this section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E. Protocol</head><p>Setup Phase: The trustees in set generate their threshold trustee keys and initialize the bulletin board using candidate list , security parameter , number of ballots to be generated , valid trustee threshold list , code alphabet , code length , and a heuristic security parameter , where is issued to by an external entity not considered herein. The audit described in this paper, which is different from that described in previous publications on Scantegrity or Scantegrity II, requires the commitment of the voting system to several consistent back-ends, each of which can be used to tally votes from the confirmation codes. is the number of back-ends constructed by the system. Let the notation denote the th element in the of the th instance of a shuffled list . Additionally, let the notation , , and denote list shuffled by the composition of permutations , , and , respectively. Using a trusted computing platform, the trustees perform the following computations:</p><p>1) Initialize security parameters: . 2) Initialize bulletin board: Post , and the specification of all functions to . swaps the last two elements in the list. Note that the confirmation numbers of Q can be made to match up with the correct candidates in S if the permutation is applied to Q . Note also that we use simple permutations such as these merely for the purposes of illustration.</p><p>For the system itself, we advocate that each permutation be chosen pseudorandomly from the set of all possible permutations, without restricting this set to the set of simple permutations such as cyclic permutations or swaps. (a) Table</p><formula xml:id="formula_0">Q ; (b) Table S .</formula><p>3) Generate trustee keys: Each trustee contributes entropy and is issued corresponding trustee key via an untappable channel with the trusted computing platform . 4) Generate election key: assuming the trusted platform is stateful during this phase, the election master key is generated by the previous step. (Note that key must not leave or be leaked from the trusted platform during computation, nor should the trusted platform be stateful between the setup, result declaration, and audit response phases. A minimum of keys from can regenerate all the information required for the result declaration and audit response phases.) 5) Generate ballots: the trusted platform , and transmits via a private channel to a trusted printing service which produces paper ballots with corresponding serial numbers and confirmation codes in invisible ink. Note that initially the recorded voter marks table is empty.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6) Shuffle</head><p>and cryptographically commit to the shuffles: The following mixnet-like construction shuffles the two lists and and posts commitments to the two shuffled lists and to the shuffles. The shuffles are constructed in a manner that will make the tally-verification audit simple to implement, as will be seen later. See Fig. <ref type="figure" target="#fig_2">3</ref> for an illustration on the example of Fig. <ref type="figure" target="#fig_1">2</ref>. Note that, in this example only, we use cyclic permutations and a swap merely in an attempt to illustrate the mixnet-like construction in as simple a manner as possible. We do not advocate the restriction of permutations to a set of a few permutations, but, as mentioned below, require that each permutation be chosen in a pseudorandom manner from the set of all possible permutations of the respective tables. a) Generate permutations: For each back-end, the trusted platform computes three permutations. That is, for , the trusted platform computes: i) ''</p><p>ii) '' iii)</p><p>'' b) Shuffle lists: For each back-end the trusted platform computes a single-shuffled instance of and a triple-shuffled instance of . (Note that the number of apostrophes denotes the number of shuffles the list has gone through.) That is, for and , the trusted platform computes: i) ii) c) Commitments: The trusted platform commits to each back-end-the shuffled confirmation code numbers, the corresponding candidate lists, and the permutation values-on an element-by-element basis. For each single-shuffled code list , triple-shuffled candidate list , and the corresponding elements of permutations , the trusted platform computes commitments as follows. For , , and i)</p><formula xml:id="formula_1">'' ii) '' iii) '' iv) '' v) '' vi) vii) viii)</formula><p>'' . d) The trusted platform publishes all , , and to . 7) The trusted platform's internal state is purged. The mixnet-like construction described in step 6 of the setup phase is similar to the initial version of Scantegrity II presented in <ref type="bibr" target="#b7">[8]</ref>, with a slight functional simplification. The mixnet-like processing in the initial version was equivalent to the application of two permutations, and , to and , respectively. The first permutation shuffled the order of the confirmation numbers, and the second one was such that positions corresponding to a single candidate appeared in a single block of consecutive positions in . The difference we propose in this paper is likely to be easier to implement.</p><p>Voting Phase: A voter , upon being successfully authenticated by poll workers, is given a ballot consisting of a serial number printed in an optical-scan readable "barcode" and selection/candidate list printed in normal ink. Serial numbers and the corresponding confirmation codes are printed in invisible ink.</p><p>To vote, marks the optical scan bubble beside the desired selection using the decoder pen, which reveals the confirmation code . Upon scanning ballot , the optical scanner shall produce an "electronic ballot image"</p><p>, where if and only if a darkened region (i.e., a mark) was detected inside the optical scan bubble beside the th selection . All other shall register . The specific electoral system in use would dictate how many marks (i.e., distinct 's) are permissible on a single ballot. can then choose to construct a vote receipt for each marked. Instead of voting on a particular ballot, can select it to be "print-audited" in accordance with the procedures specified in Section II. All confirmation codes are revealed, and one of is revealed. The print-audited ballot becomes . For example, if Ballot 0001 of Fig. <ref type="figure" target="#fig_1">2</ref> were not voted but were print-audited, and revealed, the print-audited ballot would be . (Note that print-audited ballots cannot be voted.)</p><p>Declaring Results: After the polling concludes, a valid subset of trustees (as defined by ) assemble to tally and declare the results. The trustees also make available data regrading the tally processing that will be audited in the audit phase. Given the set of all EBIs recorded during the election, the trustees proceed using the trusted platform as follows.</p><p>1) Regenerate election master key: Each trustee transmits their trustee key over an untappable channel to the trusted platform. The election master key is reconstructed by calling if at least trustees supply correct keys (where are keys provided by trustees). . c) The trusted platform publishes all to and purges its internal state. See Fig. <ref type="figure">4</ref> for an illustration using the example of Figs. <ref type="figure" target="#fig_3">2</ref> and<ref type="figure" target="#fig_2">3</ref>.</p><p>Note that, at this stage, the list is such that, if permuted by , the votes will be listed as obtained for the candidate list . Further, if list is permuted by , the confirmation codes will be listed in the order of the votes . Audit Challenge and Response: In order to ensure robust, correct behavior by the trustees and in turn, the correctness of the election outcome, two audits are carried out. We first de-Fig. <ref type="figure">4</ref>. The revealed confirmation numbers (entries in Q) and revealed table R , which is a shuffled version of R, using the permutation , where is an upward circular shift of one unit, and corresponds to an upward circular shift of two units. The tally will be "three votes for Alice and one vote for Bob." The permutations used are secret. Note that, if R is permuted by</p><p>, the votes will be listed wrt candidate list S of Fig. <ref type="figure" target="#fig_2">3</ref>. If list Q of the same figure is permuted by , the confirmation codes will be listed as corresponding to the choices of R above. Note also that we use simple permutations for the purposes of illustration. For the system itself, we advocate that each permutation be chosen pseudorandomly from the set of all possible permutations, without restricting this set to the set of simple permutations such as cyclic permutations or swaps. (a) Revealed values of Table <ref type="table">Q</ref></p><formula xml:id="formula_2">; (b) Table R .</formula><p>scribe the tally computation audit. For each back-end committed to by the trustee, a coin flip determines whether the trustees will demonstrate that the ballot marks of the corresponding public table correspond correctly to (a) the announced tally or (b) the public confirmation codes for voted ballots. This is done by opening the commitments to the permutation or to the permutation , respectively. Second, we describe the print audit. For values of , in the original ballot list , corresponding to print-audited ballots, permutation values and are opened . We now describe these audits in more detail.</p><p>1) Public challenge of trustees: some time after the trustees have completed declaring the results and posting the shuffled marks lists, each instance of is challenged to be partially revealed for the purposes of auditing. A fair public coin is tossed times providing a series of audit challenges , which are posted to . 2) For the tally computation audit. For and , the trusted platform performs the following actions: a) If , regenerate and publish the confirmation codes and the association between and . That is, regenerate and publish the following: i) the second permutation ; ii) the commitment subkeys of '' ; iii) the commitment subkeys to all elements of '' , where . b) If , regenerate and publish the permuted candidate list , as well as the association between and . That is, regenerate and publish the following: i) the third permutation ; ii) the commitment subkeys of '' ; iii) the commitment subkeys to all elements of '' .</p><p>3) For the ballot audit, compute all permutation elements and commitment keys not computed in tally audit and required for the purposes of demonstrating the entire path of the ballot through the mixnet-like construction. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F. Correctness Proofs</head><p>We summarize the proofs of correctness that verifying agents can perform and explicitly state conditions under which the proof completes successfully. Note that in general the best practice response to proofs that do not complete successfully (i.e., fail) is an open policy question, and not considered here. Specifically in case of voter receipts, however, a failed receipt check has a dispute resolution process described in Section Note that, for the print audit and tally check correctness proofs, will verify commitments. In particular, will confirm that all commitment keys that were challenged as a result of the challenge coin-tosses and the print-audit were responded to (i.e., published on ) during steps 2 and 3 in the previous section. For all commitment keys to message posted to during the audit, searches for the corresponding message and commitment value , and tests whether outputs 1 (valid for some such that and that each value of corresponds to exactly one value of ; c) ; d) . Tally Check: 1)</p><p>will check that the corresponding commitments were opened correctly.</p><p>2) will verify self-consistency: a) For all challenges and , locates permutations , code lists and recorded mark lists on . reconstructs the assertion of the voting system, that is marked or not marked as indicated by the mark value . This verification step successfully verifies self-consistency if all public voted confirmation numbers correspond exactly to . b) For all , locates , , and on . For all , reconstructs the assertion of recorded mark made for candidate , and computes the election outcome by tallying each of these assertions. He checks the declared tally against the computed tally. This verification step successfully verifies self-consistency if the two tallies are identical.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. SECURITY ANALYSIS</head><p>In Section III, we described verification proofs for receipt checks, the tally check, and print-audited ballots. In this section, we both quantify the effectiveness of the verification and consider the security of the Scantegrity II to additional attacks, most involving a procedural element not easily captured by a cryptographic description. Thus, the goal of this is to sketch the security heuristics underlying the design, and not to rigorously prove security properties in a formal cryptographic model.</p><p>We consider three categories of attacks. The first category is manipulation attacks, in which the goal of the attacker is to manipulate the final tally so that the election's outcome is more favorable to the attacker's preferred candidate(s). The second is identification attacks, where the goal of the attacker is to form a link between voting intent and ballot receipts. The final category is disruption attacks, in which the attacker wishes to prevent the completion or certification of the election. Since, in general, disruption attacks are applicable in any voting system, and difficult to prevent, we will only consider a special-case of disruption involving the prevention of certification of any tally in the event the attacker feels the results may be unfavorable.</p><p>In order to best frame this discussion we note that, as an enhancement to optical scan, Scantegrity II is inherently constrained by our design goal of noninterference with the underlying optical scan processes. For this reason, Scantegrity II is designed to be a strict improvement over optical scan systems with manual recounts. However, components which cannot be secured without intervening in the underlying processes of optical scan are not pursued.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Assumptions</head><p>The level of security of Scantegrity II depends on the nature of the attack. Critical components offer probabilistic security that is invariant to the adversary's computational power, while other components premise their security on one or more assumptions, both procedural and cryptographic in nature. The security setting of our analysis includes the following assumptions:</p><p>1) the existence of a trusted computing platform for use by election officials (contra identification attacks);</p><p>2) the set of collusive officials in the election authority does not satisfy the threshold requirement for recovery of the master key (identification and disruption); 3) chain-of-custody over the printed ballots prior to voting day (identification); 4) the inability of voters and others to read codes printed in invisible ink (manipulation, identification); 5) proper balancing of the pollbook (manipulation); 6) the intractability of obtaining information about a message given only its cryptographic commitment (identification);and 7) the intractability of opening a cryptographic commitment of a message differing from that message initially committed to (manipulation). In our view, most of these assumptions are reasonable and standard in the literature. The trusted platform is a scaled-down computing device, with no external memory, running software attested by the trustees that performs the cryptographic operations. To avoid collusion among trustees, they could be selected from competing political parties. Using a threshold scheme allows the election to proceed even if a group of trustees is unable, or refuses, to supply their key share. Prior to the election, printed ballots must be protected against an adversary revealing codes and reprinting substitute ballots. Assumption 4 is unique to our approach and we provide justification for it in Section V. "Balancing the pollbook" refers to the assumption that the sum of the number of voted, tallied,and spoiled ballots is equal to the number of cast ballots, which is not larger than the number of voters. Assumptions 6 and 7 are referred to as the hiding and binding properties of commitments respectively in the previous section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Manipulation Attacks 1) Printing: An adversary may misprint ballot</head><p>, so that the code associated with candidate in the master list is printed beside a different candidate (or all candidates) on the same ballot. If the adversary then modifies any associated with such a misprinted ballot such that and , the system will count the vote for and report as the confirmation code, which is consistent with what appears on the ballot.</p><p>The print audit mechanism, described in Section III, is designed to make such an attack detectable by revealing discrepancies between printed ballots and , using commitments under assumption 7. If the number of ballots chosen to be printaudited is</p><p>,where is the number of ballots in the election overall, the probability of detecting at least 1 of misprinted ballots is</p><p>(1)</p><p>2) Voting: One line of manipulation attack can exist in systems that are not diligent in spoiling ballots <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b20">[21]</ref>. If an attacker has a line of communication with the voter, the voter can be instructed to mark her ballot and wait for further instruction. The attacker then communicates to the voter to either spoil the ballot or cast it. If the spoiled ballot is not protected or destroyed, the attacker may consult it to see how the voter would have voted had the attacker instructed the voter to cast the ballot. The line of communication can be eliminated by using random material on the ballots to determine the instruction, in a way analogous to the approach of making interactive protocols noninteractive. Scantegrity II avoids this line of attack by having spoiled ballots shredded in front of the voter, without the poll worker seeing the contents of the ballot.</p><p>A second line of manipulation attack can exploit the presence of undervoted ballots. An attacker may add additional marks to a contest left empty by the voter during a recount or appropriately modify the digital records. <ref type="foot" target="#foot_0">1</ref> This attack is not introduced by Scantegrity II and exists is any optical scan voting system. One method of prevention is to require each voter to mark a "none of the above" selection when denoting an undervote. Similarly, an attacker might try to a correctly cast ballot from being tallied by overvoting it; this attack is prevented by not allowing any overvoted ballots to be cast.</p><p>3) Auditing: Consider a manipulation attack based on swapping voter-made marks in from one candidate to the attacker's preferred candidate. To prevent this attack, with probability 1/2, each back-end will be challenged to open the correspondence between the lists and , and any modified mark states for these instances will be incongruent with the voter receipts. The attacker may gamble, only modifying marks in roughly half of the back-end instances in the hope that exactly these will have challenge and thus that, instead, the correspondence between the lists and is instead revealed in the modified instances . The probability of doing so is . However, if a different subset is revealed, the tallies across the subsets will differ and the attack is detectable. Alternatively, the attacker might modify for all instances , which guarantees self-consistent tallies but also guarantees the attack is detectable by the receipt check protocol. At first glance this may seem to be an irrational strategy until one considers the possibility of only a small subset of voters actually checking their receipts. With instances, ballots actually cast, ballot receipts checked, and modifications to each , the probability of detection is . The adversary will choose the least detectable of the two strategies, thus,</p><p>By estimating and bounding as half of the smallest margin of victory for which we can certify an election, we can use this equation to determine a suitable for our implementation such that the first term exceeds the estimated value of the second. In most instances, is suitable. A second approach to manipulating the tally is to change the final state of the ballots. Ballots can have one of three states: voted, print-audited, or spoiled. Under assumption 5, we assume that modifications must preserve the number of ballots in each state. If a voted ballot is maliciously modified to be spoiled, a spoiled ballot must be converted into a voted ballot. To prevent these transitions, the voter retains positive evidence of ballots being in a voted state: knowledge of both serial numbers,</p><p>. Alternatively, for a print-audited ballot, the voter retains positive evidence a ballot was print-audited via knowledge of all the confirmation codes on the ballot, but only one of . Both pieces of information would be unknown to the voter if the ballot were in any other state when the voter left the polling place.</p><p>In the case of spoiled ballots, the voter does not retain anything. However, if a spoiled ballot is maliciously converted into a voted ballot, a voted ballot will need to be spoiled, and the corresponding voter can prove malfeasance through knowledge of both chit serial numbers.</p><p>The transition from a spoiled to print-audited state is important for different reasons. This transition does not change the tally directly; however, it is indirectly useful in facilitating the first manipulation attack presented in Section IV-B2. By misreporting a spoiled ballot as print-audited, the confirmation codes on the ballot would be released during the verification process allowing a coercer to see if the ballot matched the conditions of the contract for spoiling the ballot. Under assumption 5, this attack will be detectable as it requires a print-audited ballot to be made into a spoiled ballot. To prevent this attack, the trustees could first publish a list of ostensibly spoiled ballots prior to releasing the print audit confirmation codes. If an auditor discovers her print-audited ballot is in the wrong state, the discrepancy can be caught prior to releasing the codes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Identification Attacks 1) Initialization:</head><p>The earliest opportunity for identification occurs during the election initialization process. Successfully changing or introducing faults into the initialization protocol could generate a permutation of or subsequent lists that is known to the attacker. This is not possible if the protocol is run on a trusted computing platform and assumption 1 holds. Without direct interference with the protocol, the attacker may provide structured data instead of randomness in the protocol. However, under assumption 2 and the construction of the threshold key generation scheme, any amount less than the minimum threshold of shares leaks negligible information for the purposes of determining the key.</p><p>2) Printing: After the ballots are printed, a number of identification attacks may be conducted including the addition of revealing marks on the ballots or revealing the codes on the ballots, recording these codes, and reprinting the ballots with unrevealed ink. The prevention of these attacks is based on assumption 3.</p><p>3) Auditing: After the election has concluded, the data generated and published for voter-verification of the tally must meet the requisite ballot secrecy. Given no information other than the tally, a certain level of information can be obtained about which candidate a voter selected. The tally provides a probability distribution for the possible selections and may even exclude selections, based, for example, on a candidate receiving zero votes. This level of information is often legally required and thus acceptable. If the attacker is provided, in addition, with the information on each voter's receipt, further information is revealed: how many marks the voter made and the codes associated with these marks. Our assertion of ballot secrecy is that no additional information is leaked about the association between a mark and code on a receipt and any element in the set of selections in the tally.</p><p>Opening only one of the commitments to either a) the correspondence between confirmation codes and voter marks or b) the correspondence between voter marks and candidates reveals negligible information about permutations or , respectively. Hence, the association and is always hidden by one cryptographic permutation. The commitment to the permutation key, if binding, uniquely identifies the permutation, however, reversing the commitment is assumed intractable by assumption 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Disruption Attacks</head><p>In general, disruption attacks are easy to detect but difficult to prevent. Many of the manipulation attacks could be reconstructed as disruption attacks, and the same mechanisms would detect them. However, as stated, we limit our consideration to disruption for the purpose of preventing the certification of an undesired tally (or an expected undesired tally, if the information is based on exit polls for example).</p><p>1) Initialization: During the initialization phase, each trustee in the election authority supplies entropy to seed the random number generator used generate all the permutation keys and commitment secrets needed in the election. Instead of maintaining state, since the state information would need to remain private, when the tally and audit challenge/response phases are entered, the trustees re-enter their key shares to recreate all the necessary data. To prevent a malicious trustee from withholding their entropy or supplying the wrong entropy, we use a threshold key generation scheme (optionally with robustness to a finite number of errors). Under assumption 2, a suitable threshold will allow the reconstruction of the data despite malicious trustees.</p><p>2) Auditing: During the auditing phase, an attacker may file a spurious dispute about the results of a receipt-check. Since the election authority has committed to the confirmation codes that appeared on the ballot, it can rule out any claimed codes that did appear on the ballot. Thus, filing a spurious but plausible dispute reduces to randomly guessing another code on the ballot. The election authority can quantify the probability of this and create an appropriate statistical trigger that predicts actual receipt-check problems. Let be the number of candidates on a candidate list for a particular race and let be the cardinality of the set of unique confirmation codes. The probability of guessing a plausible code on a voted ballot is . If disputes are filed and are considered plausible, the expected value of , if disputes are fabricated, is . We set the trigger value such that the probability of obtaining at least plausible discrepancies if all filed disputes are random guesses is less than 1%. We can use the following bound on the right tail of the binomial distribution <ref type="bibr" target="#b12">[13]</ref>. For any , .</p><p>For example, for 5 candidates, 8000 possible codes, and 1000 disputes filed, assuming no scanning error, and . Using we get , so we can set . If at least 5 out of the 1000 disputes filed are plausible discrepancies, then an investigation should be instigated. To allow for up to some acceptable rate of scanning error, we can incorporate into the probability of guessing a correct code and compute the statistical trigger as above with the new value of .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. INVISIBLE INK DETAILS</head><p>In this section, we describe the main categories of threats that might take advantage of the properties of invisible ink, our assumptions about ink properties, and the procedures for printing the inks on the ballot. Greater detail is available in <ref type="bibr" target="#b4">[5]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Threats</head><p>Note that the only threats to Scantegrity II that take advantage of the limitations of the ink are those that are based on the following.</p><p>1) Distinguishing between confirmation codes and their backgrounds.</p><p>The ability to distinguish would allow: a) voters to falsely claim election fraud; and b) anyone with access to ballots to violate ballot secrecy by connecting confirmation codes to selections. 2) Distinguishing between chit serial numbers and backgrounds.</p><p>The ability to distinguish would allow a) voters to claim that an uncast ballot was cast; b) anyone with access to uncast ballots to connect chit serial numbers and confirmation codes with voter selections [in combination with (1)]. 3) Distinguishing between the two-dimensional barcode and background.</p><p>The ability to distinguish would allow anyone with access to marked ballots to connect two-dimensional bar-codes with voter selections</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Assumptions</head><p>The main security assumption about the inks is that the slowand fast-reacting inks used for printing confirmation codes and oval backgrounds, respectively, are not distinguishable before, and sufficiently after, they have been marked with the ballotmarking pen ("sufficiently after" is taken to mean that the time period is long enough to allow the slow-reacting ink to react). We make a similar assumption about the indistinguishability of the chit serial numbers and the two-dimensional barcode from their background.</p><p>Note also that the assumptions we make are about physical properties of chemicals, and the detectability of differences. Clearly, most chemicals (if not all) can be distinguished from one another through a sufficiently sophisticated test; our arguments are that, for all practical purposes, our assumption holds, and we describe here our efforts to make it more difficult to distinguish among the inks, particularly by the naked or microscopically aided human eye.</p><p>Finally, the ability to distinguish enables voters to make false charges of election fraud, and anyone to connect information about ballot choices with confirmation codes and serial numbers. If voters are assumed to not have access to ballots outside the polling booths, or to specialized equipment (including the decoding pen) inside the booth, the indistinguishability assumption is only required to hold with respect to the human eye in order to prevent false charges of election fraud.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Procedures Used for Printing With the Inks</head><p>In this section, we describe ways in which the indistinguishability assumptions may be defeated, and our efforts to preserve indistinguishability. Note that the inks proposed for printing on ballots can be used in regular ink-jet printers.</p><p>1) To Prevent the Soaking of Paper: Any type of ink used by inkjet printers soaks into the paper. Even if the ink used to print the codes would be completely invisible, the soaked paper would allow the codes to be easily read. To avoid this, we use two types of ink: a reacting ink used to print the background of the oval and a slow-reactive ink used to print the confirmation codes. Both inks have the same color (a light yellow) if printed on the same piece of paper. The reacting ink turns black immediately when it interacts with the ink of the marking pen, while the ink used for the codes undergoes the same reaction at a slower pace. Thus, the immediate result is a yellow confirmation code inside a black oval-the highest contrast color combination. After several minutes, the slow reacting ink will have reacted leaving the oval completely black.</p><p>2) To Avoid the Overlapping of Inks: We divide the oval in small square tiles called texels. Each texel is entirely printed with either reactive or slow-reactive ink, but never with a combination of them. A small constant-sized gap is left between any two adjacent texels, such that when two adjacent tiles are printed with different inks, the two inks never overlap even if they diffuse outward as they absorb into the paper. Without such a gap, a border of overlapping types of ink could emerge, under a microsocope, for example, making the border easier to detect. Additionally, we ensure that the position of the code in the oval is not fixed; the codes can be shifted left or right.</p><p>3) The Addition of Confusing Fluorescence: The use of special types of radiation can expose invisible inks. We apply a third type of ink that we call a masking ink. It is colorless but has high fluorescence. Masking ink is the last ink sprayed onto the paper. We add random amounts of masking ink to all texels of the oval. This is designed to mask the eventual difference in fluorescence between the reactive ink and slow reactive ink used for the codes, as well as a cover to prevent lifting particles from the paper with tape.</p><p>4) Ballot-Marking Pens: While this paragraph is not about security properties of the inks used, it is relevant to the discussion of Scantegrity II procedures with respect to inks, and is hence described here. The ballot-marking pens that we use to mark the ovals have a tip that is wider than the height of the oval. A voter can mark the entire oval using a single strike of the pen which is faster than penciling in the mark. Even if the voter pens in more than the oval, the result is a clean, perfectly filled oval. The use of invisible ink also deters stray dark marks that can confuse scanners, although the light yellow hue of the ink could still be visible. The portion of the chit reserved for the voter to record the confirmation codes can also have a solid layer of the same reacting ink, so that the voter may record the codes with the same pen.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. SCANTEGRITY II FOR VOTERS WITH DISABILITIES</head><p>In this section, we describe modifications to Scantegrity II to allow its use by those voters who have visual or motor disabilities, and hence cannot mark a Scantegrity II paper ballot. These modifications are inspired by those for Punchscan and Prêt à Voter described in <ref type="bibr" target="#b9">[10]</ref>. In our approach, the voter is presented with an audio ballot and interacts with the voting system using a microphone and headphones. The voting system prints the vote on a Scantegrity II ballot. The voter with visual disabilities also has access to a trusted interactive device that translates a visual signal into another type of signal, such as an audio signal; this device is used to check a marked ballot. Finally, all voters using the audio interface have access to a personal voice recorder used to record the confirmation number. Details of our approach follow.</p><p>Filling a Ballot: The voter is presented the choices for each race through the headphones, and communicates her choice to the voting system through the microphone. The voting system communicates the vote to a printer. The printer prints, on a Scantegrity II ballot, with the ink also used in the Scantegrity II pen, a blob on the corresponding oval, exposing the code as with ballots for other voters. Assistive devices that have been used in the past to help voters with visual or motor disabilities may also be modified for the purpose of filling a Scantegrity II ballot. Examples of such devices include Tactile Ballots which have been used in elections in Rhode Island <ref type="bibr" target="#b16">[17]</ref>, and the Voting-on-Paper Assistive Devices (Vote-PADs), <ref type="foot" target="#foot_1">2</ref> which consist of a plastic ballot-sleeve, tactile indicators, and an audio tape recording, customized for each election and ballot design.</p><p>Checking a Marked Ballot for Correctness: The voter who does not have visual disabilities, but has motor disabilities that make it difficult to mark ballots, may check the correctness of the filled ballot, and dictate the confirmation code into a personal (trusted) voice recorder.</p><p>The voter with visual disabilities will use a trusted interactive device-consisting of a trusted scanner with optical character recognition (OCR) and speakers-to check that the ballot is correctly marked. The voter may bring such a device with her to the booth, or may be provided one by a trusted third party, such as a public interest group. With the aid of this device, the voter may translate a marked Scantegrity II ballot into an audio signal, and determine if it has been correctly marked. Additionally, this device would read aloud the confirmation number, which could be taped into a personal (trusted) voice recorder.</p><p>Casting the Ballot: Once a ballot has been correctly marked, it may be processed like any other marked Scantegrity II ballot.</p><p>Print Audits: If ballots given to voters using this procedure to vote are drawn at random from the pile of ballots for all voters, print audits are applicable to a ballot marked as described above. Further, a voter with visual or motor disabilities can also perform a print audit by marking audit ballots as described above.</p><p>Security Properties: This approach does not provide the same security guarantees to voters with visual disabilities as those provided to other voters, who need not rely on a trusted device in the polling booth. A compromise of the trusted device can result in a compromise of the integrity of the vote, as well as in an opportunity for a coercive adversary. On the other hand, the only implemented voting systems that are usable by voters with visual disabilities-DREs, optical scan ballot systems with assistive devices, or Prime III <ref type="bibr" target="#b13">[14]</ref>-require that the voter either trusts the voting system itself, or the chain of custody on the ballot box or a paper/audio audit trail. These are stronger assumptions than the requirement that a personal device be trusted by a voter. Thus, the above modification of Scantegrity II, like those of Punchscan and Prêt à Voter described in <ref type="bibr" target="#b9">[10]</ref>, provides a much-needed accessible version of voter verifiability-where the voter may determine that her vote is among those tallied, and that the collection of votes is tallied correctly-without having to trust a device provided by election officials.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VII. RELATED WORK</head><p>The use of cryptography in voting originates in 1981 with Chaum <ref type="bibr" target="#b5">[6]</ref>. The ensuing decades saw the introduction of many electronic voting systems using cryptography to achieve both privacy and integrity. Only more recently have schemes emerged where voters use paper ballots and/or obtain paper receipts; for example, Prêt à Voter <ref type="bibr" target="#b10">[11]</ref>, Punchscan <ref type="bibr" target="#b14">[15]</ref>, <ref type="bibr" target="#b15">[16]</ref>, <ref type="bibr" target="#b25">[26]</ref>, Scratch &amp; Vote <ref type="bibr" target="#b0">[1]</ref>, ThreeBallot <ref type="bibr" target="#b26">[27]</ref>, Simple Verifiable Voting <ref type="bibr" target="#b2">[3]</ref>, Split-Ballot Voting <ref type="bibr" target="#b21">[22]</ref>, and the protocol of Neff <ref type="bibr" target="#b23">[24]</ref>. Public key techniques have dominated the cryptographic verification of tally computation; for example, the universally verifiable mixnet of Sako and Kilian <ref type="bibr" target="#b27">[28]</ref>, and the tally correctness proofs of Furukawa and Sako <ref type="bibr" target="#b17">[18]</ref>, and Neff <ref type="bibr" target="#b22">[23]</ref>.</p><p>A scheme by Chaum <ref type="bibr" target="#b6">[7]</ref> was the first to provide the voter with a receipt for the purposes of verifying the presence of her vote in the vote collection, without requiring her to have access to trusted computational power while casting her vote. The first use of a perforated ballot, where a voter can take a perforated part of the ballot out of the polling booth as a receipt, appears in Prêt à Voter. ThreeBallot <ref type="bibr" target="#b26">[27]</ref> also uses a perforated ballot. Scratch &amp; Vote was the first to provide a string to the voter that was obtained only after the voter performed an action on the ballot (scratching off a layer), it was also the first to use two-dimensional barcodes. The light use of cryptography is inspired by the verification protocols in previous systems including "Votegrity" <ref type="bibr" target="#b6">[7]</ref> and Punchscan, combined with the mixnet auditing technique of randomized partial checking <ref type="bibr" target="#b18">[19]</ref>. The approach towards providing accessibility draws from <ref type="bibr" target="#b9">[10]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VIII. CONCLUDING REMARKS</head><p>We have demonstrated a simple and effective way to dramatically increase the transparency of elections that use optical scan voting systems. It is our hope that its adoption will help prevent the manipulation of election outcomes, and that it may lead to renewed confidence and participation in democracy.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Scantegrity II ballot showing the main body (top) with one marked position and machine-readable serial number; left chit (bottom left) with a developed chit serial number and confirmation code written in; and right chit (bottom right) with an undeveloped chit serial number. This figure is meant to demonstrate the parts of the ballot and does not represent the actual final state of the portions after voting.</figDesc><graphic coords="3,312.90,66.54,227.00,162.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Tables Q, R, and S when there are two candidates, s = Alice and s = Bob. For example, a vote for Alice on Ballot 0000 would reveal the confirmation code 7LH; however, one for Bob would reveal WT9. Note that, for purposes of illustration, we show one way in which the R table may be populated based on votes cast during the election. The function</figDesc><graphic coords="7,53.64,72.04,219.00,104.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Tables Q and S for the example of Fig. 2. Q is Q permuted by , which is an upward circular shift of one unit, and S is S permuted by , where</figDesc><graphic coords="8,76.32,67.44,177.00,102.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>2 )</head><label>2</label><figDesc>Regenerate ballot list: Ballot list is reconstructed by rerunning step 5) of the setup phase. 3) Construct list of recorded marks: For each recorded during the election, populate by setting for and . Any unused, spoiled or print-audited ballot inherently constitutes an with all . 4) Post voted codes: During the dispute resolution period (described in Section II), all voted codes shall be published. For all post and corresponding commitment keys. 5) Post results: Using , tabulate the election results and post them to , 6) Post double-shuffled marks list for audit purposes: a) Regenerate permutations: For and the trusted platform recomputes permutations:</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>Although this issue was previously known to the authors, we acknowledge David Wagner for raising it in private correspondence.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>Accessible voting without computers. http://www.vote-pad.us/.</p></note>
		</body>
		<back>

			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>. The work of J. Clark and A. Essex was supported in part by the Natural Sciences and Engineering Research Council of Canada (NSERC). The work of S. Popoveniuc and P. L. Vora was supported by NSF-CNS-0831149.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>David Chaum received the M.S. degree and the Ph.D. degree in computer science from the University of California, Berkeley, in 1980 and 1983, respectively.</p><p>He founded DigiCash, Inc., where he was CEO from 1993 to 1998. Before that, he built and lead the Cryptography Group at Centrum voor Wiskunde en Informatica (Center for Mathematics and Computer Science), Amsterdam, The Netherlands, from 1985 to 1992. He has also held positions at University of California Santa Barbara and at New York University Graduate School of Business. He has published over 45 original technical articles and received over 17 U.S. patents. He is widely considered to have invented secure electronic voting, with a paper describing a technique for anonymous electronic voting in 1981, and several papers since. He is also generally associated with the invention of electronic money and anonymous credentials. He was the first to propose: mix networks, dining-cryptography networks, blind signatures, untraceable credentials, minimum disclosure, group and undeniable signatures. He has also made early and fundamental contributions to the area of multiparty computations.</p><p>Dr. Chaum is founder of the International Association for Cryptographic Research (IACR) and cofounder of Workshop on Trustworthy Elections (WOTE), a series of conferences and its sponsoring organization the International Association for Voting Systems Sciences (IAVOSS). He is a member of the Information Security Research Group, University of Ottawa. His research interests are in applied cryptography, engineering design, and voting technologies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Richard T. Carback was born in</head><p>Stefan Popoveniuc received the Ph.D. degree from The George Washington University, where he focused on computer security and privacy in general and on electronic voting in particular. His thesis provided a general framework that allows election officials to evaluate and take informed decisions when purchasing end-to-end voting systems.</p><p>He is a founding member of the PunchScan team; he has fully implemented a number of voting systems, PunchScan, Scantegrity, and Scantegrity II being just three of them. Currently, he is an election technology consultant in the Washington, D.C., area. Dr. Sherman is also a private consultant performing security analyses, an editor for Cryptologia, and a member of Phi Beta Kappa and Sigma Xi. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Ronald</head></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Scratch &amp; vote: Self-contained paper-based cryptographic voting</title>
		<author>
			<persName><forename type="first">B</forename><surname>Adida</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Rivest</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. the 5th ACM Workshop on Privacy in Electronic Society (WPES)</title>
		<meeting>the 5th ACM Workshop on Privacy in Electronic Society (WPES)</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="29" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Residual votes attributable to technology</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ansolabehere</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Stewart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Politics</title>
		<imprint>
			<biblScope unit="volume">67</biblScope>
			<biblScope unit="page" from="365" to="389" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Simple verifiable elections</title>
		<author>
			<persName><forename type="first">J</forename><surname>Benaloh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2006 USENIX/AC-CURATE Electronic Voting Technology Workshop (EVT)</title>
		<meeting>2006 USENIX/AC-CURATE Electronic Voting Technology Workshop (EVT)<address><addrLine>Vancouver, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Ballot casting assurance via voter-initiated poll station auditing</title>
		<author>
			<persName><forename type="first">J</forename><surname>Benaloh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2007 USENIX/ACCURATE Electronic Voting Technology Workshop (EVT)</title>
		<meeting>2007 USENIX/ACCURATE Electronic Voting Technology Workshop (EVT)<address><addrLine>Boston, MA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Printing Secure Automatic Receipts With Activating Ink Tech</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">T</forename><surname>Carback</surname></persName>
		</author>
		<ptr target="http://scantegrity.org/~carback1/ink/ink.pdf" />
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Untraceable electronic mail, return addresses, and digital pseudonyms</title>
		<author>
			<persName><forename type="first">D</forename><surname>Chaum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="84" to="90" />
			<date type="published" when="1981">1981</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Secret-ballot receipts: True voter-verifiable elections</title>
		<author>
			<persName><forename type="first">D</forename><surname>Chaum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Security Privacy</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="38" to="47" />
			<date type="published" when="2004-02">Jan./Feb. 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Scantegrity II: End-to-end verifiability for optical scan election systems using invisible ink confirmation codes</title>
		<author>
			<persName><forename type="first">D</forename><surname>Chaum</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Carback</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Essex</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Popoveniuc</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Rivest</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">Y A</forename><surname>Ryan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">T</forename><surname>Sherman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2008 USENIX/ACCURATE Electronic Voting Technology Workshop (EVT)</title>
		<meeting>2008 USENIX/ACCURATE Electronic Voting Technology Workshop (EVT)<address><addrLine>San Jose, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Scantegrity: End-to-end voter verifiable optical-scan voting</title>
		<author>
			<persName><forename type="first">D</forename><surname>Chaum</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Essex</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Carback</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Popoveniuc</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">T</forename><surname>Sherman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Vora</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Security Privacy</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="40" to="46" />
			<date type="published" when="2008-06">May/Jun. 2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Accessible voter verifiability</title>
		<author>
			<persName><forename type="first">D</forename><surname>Chaum</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Hosp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Popoveniuc</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">L</forename><surname>Vora</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Cryptologia</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="283" to="291" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">D</forename><surname>Chaum</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">Y</forename><surname>Ryan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">A</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName><surname>Practical</surname></persName>
		</author>
		<author>
			<persName><surname>Voter-Verifiable</surname></persName>
		</author>
		<idno>CS-TR-880</idno>
		<imprint>
			<date type="published" when="2004-12">Dec. 2004</date>
		</imprint>
		<respStmt>
			<orgName>Election Scheme University of Newcastle Upon Tyne</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Tech. Rep. Series</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Fingerprinting blank paper using commodity scanners</title>
		<author>
			<persName><forename type="first">W</forename><surname>Clarkson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Weyrich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Finkelstein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Heninger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Halderman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">W</forename><surname>Felten</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 30th IEEE Symp. Security and Privacy</title>
		<meeting>30th IEEE Symp. Security and Privacy</meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="301" to="314" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Introduction to Algorithms, 2nd Edition</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">H</forename><surname>Cormen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">E</forename><surname>Leiserson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Rivest</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Stein</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>McGraw-Hill Book Company</publisher>
			<pubPlace>Cambridge, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Prime III: A user centered voting system</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">V</forename><surname>Cross</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Ii</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Mcmillian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Nobles</surname></persName>
		</author>
		<author>
			<persName><surname>Gilbert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2007 Conf. Human Factors in Computing Systems (CHI)</title>
		<meeting>2007 Conf. Human Factors in Computing Systems (CHI)</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="2351" to="2356" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Punchscan in practice: An E2E election case study</title>
		<author>
			<persName><forename type="first">A</forename><surname>Essex</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">T</forename><surname>Carback</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Popoveniuc</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2007 IAVoSS Workshop on Trustworthy Elections (WOTE)</title>
		<meeting>2007 IAVoSS Workshop on Trustworthy Elections (WOTE)<address><addrLine>Ottawa, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Punchscan: Introduction and system definition of a high-integrity election system</title>
		<author>
			<persName><forename type="first">K</forename><surname>Fisher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Carback</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">T</forename><surname>Sherman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2006 IAVoSS Workshop on Trustworthy Elections (WOTE)</title>
		<meeting>2006 IAVoSS Workshop on Trustworthy Elections (WOTE)<address><addrLine>Cambridge, U.K.</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Alternative Voting Method for the Blind Tech</title>
		<author>
			<persName><forename type="first">M</forename><surname>Fresolone</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tactile</forename><surname>Ballots</surname></persName>
		</author>
		<ptr target="http://www.votersunite.org/info/tac-tileballots.asp" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">An efficient scheme for proving a shuffle</title>
		<author>
			<persName><forename type="first">J</forename><surname>Furukawa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Sako</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 21st Conf. Advances in Cryptology (CRYPTO)</title>
		<meeting>21st Conf. Advances in Cryptology (CRYPTO)</meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="volume">2139</biblScope>
			<biblScope unit="page" from="368" to="387" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Making mix nets robust for electronic voting by randomized partial checking</title>
		<author>
			<persName><forename type="first">M</forename><surname>Jakobsson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Juels</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Rivest</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 11th USENIX Security Symp</title>
		<meeting>11th USENIX Security Symp</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="339" to="353" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<author>
			<persName><forename type="first">D</forename><surname>Jones</surname></persName>
		</author>
		<ptr target="http://www.cs.uiowa.edu/~jones/voting/paper.html" />
		<title level="m">Voting on Paper Ballots</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Hacking paper: Some random attacks on paper-based E2E systems</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kelsey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Regenscheid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Moran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Chaum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Frontiers of Electronic Voting Dagstuhl</title>
		<meeting><address><addrLine>Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Split-ballot voting: Everlasting privacy with distributed trust</title>
		<author>
			<persName><forename type="first">T</forename><surname>Moran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Naor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 14th ACM Conf. Computer and Communications Security (CCS)</title>
		<meeting>14th ACM Conf. Computer and Communications Security (CCS)</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="246" to="255" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">A verifiable secret shuffle and its application to e-voting</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">A</forename><surname>Neff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 8th ACM Conf. Computer and Communications Security (CCS)</title>
		<meeting>8th ACM Conf. Computer and Communications Security (CCS)</meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="116" to="125" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Practical High Certainty Intent Verification for Encrypted Votes Tech</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">A</forename><surname>Neff</surname></persName>
		</author>
		<ptr target="www.vote-here.net/old/vhti/documentation/vsv-2.0.3638.pdf" />
	</analytic>
	<monogr>
		<title level="j">Rep</title>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">A threshold cryptosystem without a trusted party</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">P</forename><surname>Pedersen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1991 Workshop on the Theory and Application of Cryptographic Techniques (EUROCRYPT)</title>
		<meeting>1991 Workshop on the Theory and Application of Cryptographic Techniques (EUROCRYPT)</meeting>
		<imprint>
			<date type="published" when="1991">1991</date>
			<biblScope unit="volume">547</biblScope>
			<biblScope unit="page" from="522" to="526" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">An introduction to Punchscan</title>
		<author>
			<persName><forename type="first">S</forename><surname>Popoveniuc</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Hosp</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2006 IAVoSS Workshop on Trustworthy Elections (WOTE)</title>
		<meeting>2006 IAVoSS Workshop on Trustworthy Elections (WOTE)<address><addrLine>Cambridge, U.K.</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Three voting protocols: ThreeBallot, VAV, and Twin</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Rivest</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">D</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2007 USENIX/ACCURATE Electronic Voting Technology Workshop (EVT)</title>
		<meeting>2007 USENIX/ACCURATE Electronic Voting Technology Workshop (EVT)<address><addrLine>Boston, MA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Receipt-free mix-type voting scheme: A practical solution to the implementation of a voting booth</title>
		<author>
			<persName><forename type="first">K</forename><surname>Sako</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kilian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1991 Workshop on the Theory and Application of Cryptographic Techniques (EUROCRYPT)</title>
		<meeting>1991 Workshop on the Theory and Application of Cryptographic Techniques (EUROCRYPT)</meeting>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="volume">921</biblScope>
			<biblScope unit="page" from="393" to="403" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><surname>Saltman</surname></persName>
		</author>
		<title level="m">Accuracy, Integrity, and Security in Computerized Vote-Tallying Tech. Rep. NIST SP 500-158</title>
		<imprint>
			<date type="published" when="1988-08">Aug. 1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">R</forename><surname>Weiss</surname></persName>
		</author>
		<title level="m">As Primary Season Ramps Up, An E-Voting Snapshot Computerworld</title>
		<imprint>
			<date type="published" when="2008-08">Jan. 8, 2008</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
