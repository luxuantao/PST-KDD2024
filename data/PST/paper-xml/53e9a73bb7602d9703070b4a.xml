<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Computer-Generated Pen-and-Ink Illustration</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="1994-06-23">23 June 1994</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Georges</forename><surname>Winkenbach</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science &amp; Engineering</orgName>
								<orgName type="institution">University of Washington</orgName>
								<address>
									<postCode>98195</postCode>
									<settlement>Seattle</settlement>
									<region>WA</region>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">University of Washington</orgName>
								<address>
									<postCode>98195</postCode>
									<settlement>Seattle, Washington</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">David</forename><forename type="middle">H</forename><surname>Salesin</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science &amp; Engineering</orgName>
								<orgName type="institution">University of Washington</orgName>
								<address>
									<postCode>98195</postCode>
									<settlement>Seattle</settlement>
									<region>WA</region>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">University of Washington</orgName>
								<address>
									<postCode>98195</postCode>
									<settlement>Seattle, Washington</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Computer-Generated Pen-and-Ink Illustration</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="1994-06-23">23 June 1994</date>
						</imprint>
					</monogr>
					<idno type="MD5">6B6D33285F3928F6BA98EDA8435359E7</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T05:23+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>I.3.3 [Computer Graphics]: Picture/Image Generation; I.3.5 [Computer Graphics]: Three-Dimensional Graphics and Realism -Color</term>
					<term>Shading</term>
					<term>Shadowing</term>
					<term>and Texture architectural rendering</term>
					<term>comprehensible rendering</term>
					<term>non-photorealistic rendering</term>
					<term>prioritized stroke textures</term>
					<term>resolution-dependent rendering</term>
					<term>texture indication</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper describes the principles of traditional pen-and-ink illustration, and shows how a great number of them can be implemented as part of an automated rendering system. It introduces "stroke textures," which can be used for achieving both texture and tone with line drawing. Stroke textures also allow resolution-dependent rendering, in which the choice of strokes used in an illustration is appropriately tied to the resolution of the target medium. We demonstrate these techniques using complex architectural models, including Frank Lloyd Wright's "Robie House.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Most of the research in computer graphics rendering over the last twenty years has been devoted to the problem of creating images of physical scenes with ever-increasing complexity and realism. The success of this research has been a well-heralded achievement in graphics.</p><p>However, the computer's ability to display images of ever-increasing complexity gives rise to a new problem: communicating this complex information in a comprehensible and effective manner. In order to communicate truly complex information effectively, some form of visual abstraction is required. This type of abstraction has been studied most comprehensively in the fields of graphic design and traditional illustration.</p><p>In this paper, we therefore examine algorithms for the "non-photorealistic" rendering of complex forms. While photorealistic images certainly have their place, in many applications, such as architectural and industrial design, a stylized illustration is often more effective.</p><p>The advantages of illustration are numerous. Illustrations can convey information better by omitting extraneous detail, by focusing attention on relevant features, by clarifying and simplifying shapes, or by exposing parts that are hidden. In addition, illustrations often consume less storage than realistic images, and are more easily reproduced and transmitted. Illustrations also provide a more natural vehicle for conveying information at different levels of detail. Finally, in many applications, illustrations can add a sense of vitality difficult to capture with photorealism.</p><p>The benefits of illustrations over photographs are well-recognized in many practical contexts. For example, medical texts almost always employ hand-drawn illustrations in place of (or in addition to) photographs, since they allow tiny and hidden structures to be much better described. In addition, most assembly, maintenance, and repair manuals of mechanical hardware employ illustrations rather than photographs because of their clarity. For example, at Boeing, even when CAD databases of airplane parts exist, all high-quality manuals are still illustrated by hand in order to provide more effective diagrams than can be achieved with either photorealistic rendering or simple hidden line drawings <ref type="bibr" target="#b15">[16]</ref>.</p><p>To explore the use of abstraction as a means for conveying information effectively, it makes sense to begin with an area with well established conventions. For this reason, we are beginning our investigation using the domain of pen-and-ink illustrations of architectural forms, for which a great number of well-documented conventions already exist <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b19">20]</ref>. Restricting the domain to "pen and ink" also has the advantage that no exotic display technology is required to view the algorithms' output: conventional laser printers, even the inexpensive 300 dots-per-inch variety, give quite reasonable results.</p><p>In the rest of this paper, we describe a number of principles of traditional pen-and-ink illustration, and we show how a great number of them can be implemented as part of an automated rendering system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Related work</head><p>The area of "non-photorealistic rendering" has received relatively little attention in the computer graphics community. We survey most of the related work here.</p><p>Seligmann and Feiner have described methods for automatically constructing illustrations to achieve a particular communicative goal <ref type="bibr" target="#b22">[24]</ref>. Their system is primarily concerned with the high-level goal of composing the best model for communicating a particular intent, whereas the system we describe is more concerned with the low-level details of rendering the model once it is built. Thus, our system could serve as a "back-end" for theirs.</p><p>With respect to the rendering of architectural forms, Yessios described a prototype "computer drafting" system for common materials in architectural designs, including stones, wood, plant, and ground materials <ref type="bibr" target="#b24">[26]</ref>, which, like our work, attempts to provide a warmer, hand-drawn appearance as opposed to a mechanical one. Miyata also gave a nice algorithm for automatically generating stone wall patterns <ref type="bibr" target="#b18">[19]</ref>; these patterns would make a good starting point for some of the pen-and-ink techniques described in this paper.</p><p>With respect to line-drawing techniques, Appel et al. were the first to discuss how a line could be "haloed" automatically to give the appearance of one line passing behind another <ref type="bibr" target="#b1">[2]</ref>. Kamada and Kawai generalized this work by showing how different line attributes, such as dashed and dotted line, could be used to give a more informative treatment of hidden lines <ref type="bibr" target="#b11">[12]</ref>. Dooley and Cohen later introduced more line qualities, such as thickness, and discussed how the treatment of outline and surface shading could be customized by a user to create more effective illustrations <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b6">7]</ref>. In the commercial realm, the Premisys Corporation markets a product called "Squiggle" that adds waviness and irregularities to CAD output as a post-process, lending a hand-drawn appearance to the drawings <ref type="bibr">[21]</ref>. The Adobe Dimensions program allows PostScript stroke textures to be mapped onto surfaces in three dimensions <ref type="bibr" target="#b0">[1]</ref>.</p><p>The research described in this paper was most directly inspired by the work of Saito and Takahashi, who introduced the concept of a "Gbuffer" for creating comprehensible renderings of 3D scenes <ref type="bibr" target="#b20">[22]</ref>. Our work takes a somewhat different approach, in that it integrates aspects of 2D and 3D rendering, whereas their method essentially uses image processing techniques once the set of G-buffers are created. In addition, by introducing methods for texturing surfaces with strokes, the work in this paper extends the repertoire of the types of renderings that can be produced in a purely automated way.</p><p>In related works, our group is exploring several different aspects of the pen-and-ink illustration problem. This paper describes the overall vision of computer-generated illustration, surveys principles from traditional illustration, and shows how they can be incorporated into an automated system for rendering 3D models. A second paper discusses the issues of creating pen-and-ink illustrations interactively, with an emphasis on using 2D greyscale images as a starting point <ref type="bibr" target="#b21">[23]</ref>; in this interactive work, the responsibility of producing an effective illustration is primarily the artist's. A third paper examines the issues involved in representing, editing, and rendering the individual strokes that are the building blocks of any line illustration system <ref type="bibr" target="#b7">[8]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Overview</head><p>The rest of this paper is organized as follows. Section 2 surveys the principles of traditional pen-and-ink illustration. Section 3 discusses how these principles can be used to guide the design of an automated system for producing this type of imagery. Section 4 introduces "strokes" and "stroke textures," the building blocks of our system, and describes how they can be used to implement many of the traditional illustration principles. Section 5 discusses some of our results, and Section 6 lays out an agenda for future research in the area. Finally, the appendix gives details about the implementation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Principles of pen-and-ink illustration</head><p>While pen-and-ink drawing has a long history, dating back to the illuminated manuscripts of the Middle Ages, it is only relatively "recently" -that is, since the end of the 19th century -that penand-ink illustration has been developed as an art form in and of itself.</p><p>Pen-and-ink illustration is a limiting medium. The pen gives off no color or tone, so both color and shading must be suggested by combinations of individual strokes. Furthermore, when rendered manually, it is very difficult and time-consuming with pen and ink to cover a large area with tone, and it is practically impossible to lighten a tone once it is drawn. However, pen-and-ink illustrations have some particular qualities that make them especially attractive. First, they are ideal for out-Figure <ref type="figure">1</ref>: Two doors. The lines of wood grain are drawn with an even pressure, while the lines between the planks use varying pressure. For wood grain, we typically use the waviness function of the left door, while that of the right door has been exaggerated. lines: each individual pen-and-ink stroke can be made expressive by employing small irregularities in its path and pressure. Second, pen and ink provide a real economy of expression in representing tones and texture: the character of a few small strokes can clearly indicate the difference between textures like smooth glass and old knotted wood.</p><p>In addition to these concrete advantages, pen-and-ink drawings by their very nature possess some special qualities that are difficult to capture in other media. Their simplicity provides an appealing crispness and directness. Finally, pen-and-ink illustrations blend nicely with text, due to their linear quality and their use of the same ink on the same paper, making them ideal for printed publications.</p><p>In the rest of this section, we survey some of the fundamental principles of illustrating in pen and ink. These principles are distilled primarily from Guptill's classic text, Rendering in Pen and Ink <ref type="bibr" target="#b10">[11]</ref>, and also from Lohan's Pen&amp;Ink Techniques <ref type="bibr" target="#b16">[17]</ref> and several other sources <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b19">20]</ref>. While the field of pen-and-ink is too vast to allow a comprehensive treatment within the scope of this paper, the principles described here should be sufficient to motivate many of the design choices for a computer-graphics system. We organize our treatment into three parts: Strokes, Tone and texture, and Outline.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Strokes</head><p>In classical pen-and-ink illustration, a "stroke" is produced by placing the point, or "nib," of a pen in contact with the paper, and allowing the nib to trace out a path. The thickness of the stroke can be varied by varying the pressure on the nib. Some principles of stroke-drawing are summarized below:</p><p>• Too thin a stroke can give a washed-out appearance; too coarse can detract from the delicate details.</p><p>• It is frequently necessary to vary the pen position, with the nib sometimes turning as the stroke is drawn.</p><p>• Strokes must look natural, not mechanical. Even-weight line drawings appear lifeless; instead, the thickness of a line should vary along its length.</p><p>• Wavy lines are a good way to indicate that a drawing is schematic</p><p>and not yet completely resolved. The stroke textures used, from top to bottom, are: "cross-hatching," "stippling," "bricks," "shingles," and "grass." Notice how the outline style of the white areas is also particular to each texture.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Tones and texture</head><p>The terms "value" and "tone" are used interchangeably to refer to the amount of visible light reflected toward the observer from a point on a surface. In traditional pen-and-ink illustration, it is impossible to portray the value of each surface precisely; instead, combinations of strokes are used to create an overall impression of the desired tone.</p><p>The tone achieved by a combination of strokes is a function of the ratio of black ink to white paper over a given region of the illustration.</p><p>If the character of the strokes is varied, then the same strokes that are used to achieve a particular tone can also be used simultaneously to indicate the "texture" of the subject being rendered. This dual role of individual strokes to convey both tone and texture is part of the economy of pen-and-ink illustration.</p><p>Here are some of the principles of drawing tones and textures with pen-and-ink strokes:</p><p>• Tones should be created from lines of roughly equal weight and spacing.</p><p>• It is not necessary to depict each individual tone accurately; however, presenting the correct arrangement of tones among adjacent regions is essential.</p><p>• To disambiguate objects, it is sometimes important to "force tone" by enhancing contrast or inventing shadows.</p><p>• The character of strokes is important for conveying texture, as well as geometry and lighting. For example:</p><p>• Crisp, straight lines are good for "glass."</p><p>• Horizontal surfaces should be hatched with predominantly horizontal lines.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>• Absence of detail altogether indicates glare.</head><p>• A sketchy kind of line is good for "old" materials, while careful stippling is good for "new" materials.</p><p>• To lend economy to the illustration, it is important to utilize some form of "indication" for conveying the impression of a texture without drawing every single stroke. The method of indication should also be varied across the drawing to avoid monotony.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Outlines</head><p>Realistic scenes contain no real outlines; instead, forms are defined by variations in texture and tone. However, outline is nevertheless a very natural means for portraying objects -for example, most children's drawings utilize outline almost exclusively.</p><p>The medium of pen and ink is ideal for creating outlines with an incredible range of expressiveness. The pen allows for outlines that change thickness, sometimes disappearing altogether. In addition, the character of the outline stroke can be a very powerful indicator of texture.</p><p>Outline strokes are used not only for the contours of an object, but also for delineating the essentials of its interior. For example, in an illustration of a leaf, the veins are typically rendered in outline, in addition to the contour. Different styles of rendering use various combinations of outline and tone; all combinations are possible. Moreover, there exists an entire spectrum between outline and tone illustrations: as outline drawings become increasingly complex, they begin to take on more and more aspects of an illustration with tone.</p><p>Here are some of the important classical principles for drawing expressive outlines:</p><p>• The quality of the outline stroke is important for conveying texture. For example, crisp straight lines are good for hard objects, while a greater variety of line quality is better for soft objects.</p><p>• Thick outlines are used to suggest shadows, or to bring one object or part of an object forward in the scene. Thick line junctions are used to suggest darkness where objects overlap and to add "snappiness" to the illustration.</p><p>• Outlines should become "haloed" and fade away where one object passes behind another object.</p><p>• Outlines must be introduced where tones are omitted to convey shape.</p><p>• Using "indication" for drawing outlines is just as important as for drawing tones.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Computer-generated pen-and-ink illustration</head><p>Implementing these principles of pen-and-ink illustration as part of an automated system presents an interesting challenge. A reasonable starting point is to take the traditional "graphics rendering pipeline" for photorealistic imagery and see which parts, if any, need to be altered in order to support this style of non-photorealism.</p><p>We identified two fundamental differences:</p><p>1. The dual nature of strokes. In the traditional graphics pipeline, the renderings of texture and tone are completely independent.</p><p>A texture is typically defined as a set of images assigned to each surface, which affect the shading parameters. Tone is produced by dimming or brightening the rendered shades, while leaving the texture invariant. However, for pen-and-ink illustration, the very same strokes that produce tone must also be used to convey texture. Thus, tone and texture must become more tightly linked in a system for producing this type of imagery.</p><p>2. The need to combine 2D and 3D information. In the traditional graphics pipeline, the information used for rendering is entirely three-dimensional, with the final projection to two dimensions largely a matter of sampling the rendered shades. For pen-andink illustration, the 2D aspects of the particular projection used are every bit as essential as the 3D information for creating a proper rendering. The necessary 2D information takes a number of forms. First, the size of the projected areas must be used to compute the proper stroke density, in order to accommodate the dual nature of strokes described above. In addition, the 2D adjacencies of the projected geometry must also be used, since outlining depends on such issues as the type of junction between 2D boundaries (whether two adjacent regions in 2D are adjoining in 3D or passing one behind the other), and the level of contrast between tones of adjacent 2D regions.</p><p>Thus, our rendering system is a basic graphics pipeline with a few notable changes. The standard aspects of the pipeline include:</p><p>• The model. Any standard polygonal 3D model will do.</p><p>• The assignment of texture. Textures are assigned to 3D surfaces in the usual way. However, the textures are no longer described by images, but by "stroke textures," as discussed in the next section.</p><p>• The lighting model. Any standard illumination model can be employed to compute a "reference solution," which is then used as a target for tone production with strokes. We use the Phong model, which, although not physically-based, appears to be quite adequate for most non-photorealistic rendering.</p><p>• The visible surface algorithm. Any object-space or list-priority visible surface algorithm will do; we use BSP trees in our implementation.</p><p>• Shadow algorithm. The shadow algorithm must also use an object-space or list-priority method; we use Chin and Feiner's BSP tree shadow volumes <ref type="bibr" target="#b3">[4]</ref>.</p><p>Here are the notable differences from the standard pipeline:</p><p>• Maintaining a 2D spatial subdivision. The need to consider 2D adjacency information in rendering suggests the use of some form of spatial subdivision of the visible surfaces. We use a half-edge data structure for maintaining this planar map <ref type="bibr" target="#b17">[18]</ref>.</p><p>• The rendering of texture and tone. Polygons are no longer scan converted; instead, both texture and tone must be conveyed with some form of hatching. The stroke textures we define in the next section achieve this effect.</p><p>• Clipping. The strokes must be clipped to the regions they are texturing. Since so many strokes are drawn, the clipping must be extremely fast. In addition, in order to simulate a hand-drawn effect, the clipping should not be pixel-based -that is, it should not remove just those pixels of the stroke that are outside the clipping region -since this gives an unnatural, mechanical appearance. Instead, the clipping should be stroke-based, allowing a wavy stroke to sometimes stray slightly outside of the clipping region. To achieve this effect, we clip the straight-line paths of our strokes prior to adding in the function for waviness (see Section 4.1). For fast clipping, we use set operations on a 2D BSP tree representation of the planar map <ref type="bibr" target="#b23">[25]</ref>.</p><p>• Outlining. Outlines play a significant role in pen-and-ink illustration. Outlines come in two varieties. The "boundary outlines," which surround visible regions, must be drawn in a way that takes into account both the textures of the surrounded regions, and the adjacency information stored in the planar map. In addition, "interior outlines" are used within polygons to suggest shadow directions or give view-dependent accents to the stroke texture.</p><p>A brief description of the rendering process follows; more details about the rendering algorithm can be found in the appendix. To render a scene, the system begins by computing the visible surfaces and the shadow polygons. It then uses these polygons, projected to Normalized Device Coordinate (NDC) space, to build the 2D BSP tree and the planar map. Each visible surface is then rendered. The procedural texture attached to each surface is invoked to generate the strokes that convey the correct texture and tone for the surface.</p><p>All the strokes are clipped to the visible portions of the surface using set operations on the 2D BSP tree. Finally, the outline strokes are drawn by extracting from the planar map all of the outline edges necessary for the illustration, as described in Section 4.3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Strokes and stroke textures</head><p>In this section we discuss strokes and stroke textures, the essential building blocks of our system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Strokes</head><p>In our system, all strokes are generated by moving a nib along a basic straight path. Character is added to the stroke by perturbing the path with a waviness function and by varying the pressure on the nib with a pressure function. Figure <ref type="figure">1</ref> demonstrates some of the effects that can be achieved with different waviness and pressure functions. A more detailed explanation of our strokes can be found in Appendix A.3.1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Stroke textures</head><p>A stroke texture is a collection of strokes used to produce both texture and tone. We define a prioritized stroke texture as a set of strokes each with an associated priority. When rendering a prioritized stroke texture, all of the strokes of highest priority are drawn first; if the rendered tone is still too light, the next highest priority strokes are added, and so on, until the proper tone is achieved.</p><p>For our stroke textures, we assign different aspects of the texture different priority. For example, for a "brick" texture, the outlines of the individual brick elements have highest priority, the strokes for shading individual bricks have medium priority, and the hatching strokes that go over the entire surface have lowest priority. In the cross-hatching texture, vertical strokes have priority over horizontal strokes, which have priority over the various diagonal stroke directions. Figure <ref type="figure" target="#fig_0">2</ref> demonstrates several greyscales of tone produced using different procedural prioritized stroke textures, including "cross-hatching," "stipple," "brick," "shingle," and "grass." For each texture, the relative priorities of the strokes can be seen from the collection of strokes used to achieve a particular value of grey. More details about the procedural methods for our stroke textures are given in Appendices A.3.2 and A.3.3.</p><p>Although not explored in this paper, the idea of prioritized stroke textures is general enough to support many kinds of non-procedurally generated textures as well, such as textures drawn directly by an artist, or strokes produced through edge extraction from a greyscale image. These kinds of non-procedural stroke textures are explored in more detail by Salisbury et al. <ref type="bibr" target="#b21">[23]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.1">Resolution dependence</head><p>A common problem with the figures created by existing computer drawing programs is that they do not scale well when printed at different sizes or resolutions. Enlargement is typically performed either by pixel replication, which yields ugly aliasing artifacts, or by drawing the same strokes at higher resolution, which yields thinner strokes and an overall lighter illustration. Reduction is almost always performed by scan-converting the same curves at a lower resolution, often yielding a large black mass of overlapping strokes.</p><p>Printing speed is also a common problem with illustration reduction, since the same number of strokes needs to be transmitted to and rendered by the printer, even when a smaller number of strokes would have sufficed (and actually have been preferable from an aesthetic standpoint, as well).</p><p>The prioritized stroke textures described here do not suffer from these problems. Strokes are chosen to provide the proper texture and tone for a given illustration size and printer resolution, as demonstrated in Figure <ref type="figure" target="#fig_1">3</ref>. Note that for smaller images or coarser resolutions, fewer strokes are required, improving printing efficiency. Efficiency can be improved still further by rendering a simplified approximate version of each stroke, accurate to within one printer pixel <ref type="bibr" target="#b7">[8]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.2">Indication</head><p>As discussed in the principles of texture generation, it is important to suggest texture without drawing every last stroke. This principle of "indication" lends economy to an illustration. It also makes an illustration more powerful by engaging the imagination of the viewer rather than revealing everything.</p><p>Indication is one of the most notoriously difficult techniques for the pen-and-ink student to master. It requires putting just enough detail in just the right places, and also fading the detail out into the unornamented parts of the surface in a subtle and unobtrusive way.</p><p>Clearly, a purely automated method for artistically placing indication is a challenging research project.</p><p>We therefore decided to compromise and implement a semi-automated method, whereby the user specifies at a very high level where detail should appear in the drawing, and indication is used everywhere else. For easy specification of the areas of detail, we borrowed the idea of using "fields" generated by line segments from the morphing paper of Beier and Neely <ref type="bibr" target="#b2">[3]</ref>. The user interactively places "detail segments" on the image to indicate where detail should appear. Each segment is projected and attached to the texture of the 3D surface for which indication is being designed.</p><p>A field w(x, y) is generated by the detail segment ℓ at a point (x, y) in texture space according to</p><formula xml:id="formula_0">w(x, y) = (a + b * distance((x, y), ℓ)) -c</formula><p>where a, b, and c are non-negative constants that can be used to change the effect of the field. When several detail segments are present, we define the field at a point (x, y) to be that of the closest segment. So as not to create patterns that are too regular, the field w(x, y) is perturbed by a small random value. Textures such as "bricks" and "shingles" evaluate the strength of the field of indication at the center of each brick or shingle element. The set of strokes for that element is generated only if the indication field is above some preset threshold.</p><p>This approach seems to give reasonable results, as demonstrated in Figures <ref type="figure" target="#fig_4">6</ref> and<ref type="figure">9</ref>. Figure <ref type="figure" target="#fig_3">5</ref> shows the detail segments that were used to generate Figure <ref type="figure" target="#fig_4">6</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Outline</head><p>As described in Section 3, outlines come in two varieties: boundary and interior outlines. The boundary outlines surround the visible polygons of the image, and must be drawn in a way that takes into account both the textures of the surrounded regions, and the adjacency information stored in the planar map. The interior outlines are used within polygons to suggest shadow directions or to give view-dependent accents to the stroke texture.</p><p>In our implementation we have tried to address many of the principles for the effective use of these two types of outline, as described below.</p><p>Expressing texture with outline. Each stroke texture T has associated with it a boundary outline texture, which is used whenever the outline of a polygon textured with T is rendered. The boundary outline textures for some of our procedural textures are demonstrated in the white squares of Figure <ref type="figure" target="#fig_0">2</ref>. These boundary outline textures are also displayed with and without their accompanying stroke textures in the illustrations of Figure <ref type="figure" target="#fig_5">7</ref>.</p><p>Minimizing outline. Let E be an edge that is shared by two faces F and G of a planar subdivision. Our rendering algorithm draws E only if the tones of face F and G are not sufficiently different for the two faces to be easily disambiguated by their shading alone. In this sense, we minimize the use of boundary outline strokes. When a boundary outline stroke is drawn, it must be rendered according to the boundary outline texture for one of the two faces F or G. We choose the texture of the face of the planar subdivision that represents a polygon closer to the viewer. Figure <ref type="figure">8</ref> demonstrates how outline is omitted in the presence of sharp changes in tone, and added in the absence of tone changes.</p><p>Accented outlines for shadowing and relief. "Accenting," or thickening, outline edges is a technique for providing subtle but important cues about the three-dimensional aspects of an illustrated scene. In our implementation, the interior outlines of each brick in the "brick" stroke texture are drawn according to their relationship with the direction of the light source: brick edges that cast shadows are rendered with thickened edges, while illuminated brick edges are not drawn at all. Figure <ref type="figure" target="#fig_8">10</ref> demonstrates this effect.</p><p>Dependence of viewing direction. In addition to the light source direction, the viewing direction is another important parameter that should be taken into account when drawing outline strokes. For example, consider a roof of shingles. Viewed from above, all edges between individual shingles are clearly visible; viewed from more to the side, however, the shingles tend to blend together, and vertical edges begin to disappear, leaving the horizontal edges predominant. This effect is demonstrated in Figure <ref type="figure" target="#fig_2">4</ref>. To implement this effect, each stroke texture is outfitted with a very simplified "anisotropic bidirectional reflectance distribution function" (BRDF), to borrow a term from radiometry, which describes its outline features in terms of both the lighting and viewing directions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Results</head><p>Our computer-generated pen-and-ink illustration system was used to create all the figures in this paper. The system was developed on a Macintosh Quadra 700 using ThinkC.</p><p>The only input to the program is the scene geometry, including texture assignments for each surface, and some field lines for specifying the "indication."</p><p>We also used the system to generate an image of the top two floors of Frank Lloyd Wright's "Robie House," as shown in Figure <ref type="figure">9</ref>. The model consist of 1043 polygons. It took 30 minutes to compute and print the image. Of this time, 22 minutes were devoted to computing the planar map from the input geometry, and 8 minutes were required for actually rendering the image at 600 dots per inch.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Summary and future work</head><p>This paper does not propose any radically new algorithms or present any complex mathematics. However, we feel it nevertheless provides a number of contributions to the computer graphics community. These contributions include:</p><p>• Surveying established principles from traditional illustration that can be used for communicating visual information effectively.</p><p>• Showing that a large number of these principles can be incorporated as part of an automated rendering system, and that the information present for driving the ordinary graphics pipeline is in many respects also sufficient for achieving important nonphotorealistic effects.</p><p>• Introducing the concept of a "prioritized stroke texture," a general framework for creating textures from strokes, and providing a methodology for building procedural versions of these textures.</p><p>• Allowing a form of resolution-dependent rendering, in which the choice of strokes used in an illustration is appropriately tied to the resolution of the target medium.</p><p>However, the work described in this paper is just one early step in the exploration of automated non-photorealistic rendering algorithms.</p><p>There are many ways to extend this work, including:</p><p>• Improving the procedural stroke textures, and automating further our methods for creating them.</p><p>• Incorporating other illustration effects, such as exploded, cutaway, and peel-back views, for showing parts that are hidden.</p><p>• Adding more interactive controls to help in designing 3D illustrations. Also, experimenting with very high-level controls-for example, a control to add emphasis to parts of an illustration, which would work by automatically accentuating and suppressing detail over different parts of the image.</p><p>• Rendering other natural forms that appear in architectural drawings (and for which established conventions also exist), such as trees, grass, water, human figures, etc.</p><p>• Rendering other types of databases besides architectural models, such as databases of mechanical parts. Also, applying traditional illustration techniques and principles to databases that are not inherently visual in nature, such as flow simulations or higherdimensional datasets. (This variety of rendering could be thought of as a form of scientific visualization.)</p><p>• Creating animations. Because our system uses randomness profusely, issues in frame-to-frame coherence arise. For instance, large features that are random, such as the selection of bricks that are shaded, should not vary from frame to frame. However, more subtle features, such as the waviness of strokes used to give the hand-drawn appearance, should be allowed to waver <ref type="bibr" target="#b14">[15]</ref>.</p><p>• Exploring other forms of illustration besides pen-and-ink, including traditional forms like watercolor and air brushing, as well as new methods of conveying information visually that may not necessarily mimic traditional forms. The following sections describe the individual stages of the rendering process in more detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.2 Computing the visible surfaces</head><p>We use a 3D BSP tree to compute visibilities <ref type="bibr" target="#b8">[9]</ref>, and Chin and Feiner's shadow volumes <ref type="bibr" target="#b3">[4]</ref> to compute the shadow polygons. The result is a set of convex polygons that can easily be ordered in depth with respect to the view point. To build the 2D BSP tree, the visible polygons are examined in front-to-back order. Each polygon is first projected to NDC space, and then inserted into the 2D BSP tree. The insertion into the 2D BSP tree is equivalent to the set union operation described by Thibault and Naylor <ref type="bibr" target="#b23">[25]</ref>, except that "in" leaf nodes carry an additional pointer back to the 3D polygon from which they originate. As such, the 2D BSP tree forms a partition of NDC space, with each cell in the partition corresponding either to a unique frontmost polygon in the 3D scene, or to the background.</p><p>The planar map data structure is computed with the help of the 2D BSP tree. We begin by inserting a single rectangular region, representing the entire drawing surface in NDC space, into the tree. As each node of the tree is traversed, the original region is partitioned into smaller and smaller faces in each branch of the tree. Faces reaching an "out" leaf node are tagged as background faces. Faces reaching an "in" leaf node receive a pointer to the corresponding 3D polygon in M. The BSP tree node also receives a pointer to the planar map face. Because of numerical inaccuracies, it is possible that some leaf nodes in the BSP tree never receive a matching face in the planar map. During clipping, a segment that falls in a leaf node having no planar map pointer is simply discarded. Because such nodes correspond to extremely thin regions, no visible artifacts result.</p><p>Geometrically, the planar map and the BSP tree are redundant: they encode the same 2D partition. However, the two data structures are amenable to different tasks. The BSP tree is efficient for clipping strokes through set operations, but does not readily allow searching among neighboring polygons. By contrast, the planar map encodes polygon adjacencies, but does not lend itself as well to clipping.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.3 Rendering the textures A.3.1 Individual strokes</head><p>A stroke S consists of three parts:</p><p>• a path P (u) : [0, 1] → IR 2 , giving the overall "sweep" of the stroke, as a function of the parameter u.</p><p>• a nib N (p), defining the cross-sectional "footprint" of the stroke, as a function of the pressure p on the nib.</p><p>• a character function C(u) = (Cw(u), Cp(u)), describing the waviness of the curve Cw(u) (how the curve departs from its path) and the pressure Cp(u) on the nib.</p><p>The stroke S is defined as all pixels in the region A stroke S is rendered by scan-converting the path (after waviness is added) and stamping a copy of the nib, scaled by the pressure value, in place of drawing each pixel. Note that more efficient scanconversion methods undoubtedly exist. Indeed, the investigation of a good representation for individual strokes, including their overall sweep and character functions, is a sizable research topic in and of itself <ref type="bibr" target="#b7">[8]</ref>.</p><p>All strokes are drawn by a C++ object named InkPen. An InkPen is in turn composed of three objects: a Nib, a WavinessFunction, and a PressureFunction. Different pens can be created by assembling various combinations of these components. So far, we have only used circular nibs of variable radius, and a sine-wave waviness function with randomly perturbed amplitude and wavelength. Two kinds of pressure functions are used throughout the images in this paper: a simple "broken-line" function that lifts the pen off the paper with some randomness, and a random sine wave function that creates strokes of varying thickness. Although our implementation does not allow for all the generality of real pen and ink as described in Section 2.1, the limited set of functions we have implemented still allows for a fairly wide range of expressiveness.</p><p>An InkPen supports methods to: scale the nib size; query the amount of ink deposited between two points when using a particular nib size; and draw a stroke between two points to achieve a particular darkness, in which case the darkness of the stroke will be appropriately modulated by the PressureFunction of the pen. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Using strokes to indicate both texture and tone.The stroke textures used, from top to bottom, are: "cross-hatching," "stippling," "bricks," "shingles," and "grass." Notice how the outline style of the white areas is also particular to each texture.</figDesc><graphic coords="4,129.00,65.00,358.00,317.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Creating the same texture and tone at different scales. At the smallest scale, the brick outline strokes are sufficient to build the tone. As the scale increases, the prioritized stroke texture automatically introduces shading inside the bricks to maintain the tone. The same technique applies to generating illustrations at the same scale but for different printer resolutions.</figDesc><graphic coords="5,128.00,64.00,360.00,117.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: The effect of changing view direction on outline strokes of a shingle texture. Notice how the vertical edges begin to disappear as the texture is viewed from a more edge-on direction.</figDesc><graphic coords="6,333.00,65.00,215.00,101.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Detail segments. The user interactively attaches "detail segments" to the surfaces to indicate roughly where details should appear.</figDesc><graphic coords="7,323.00,65.00,198.00,125.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Indicating texture. The left house is drawn using "indication"; the right house is not.</figDesc><graphic coords="8,68.00,65.00,481.00,132.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Indicating texture through outline. Notice how different textures are delineated with different styles of boundary outlines. The upper and lower illustrations are the same, except that all but the boundary outline textures have been removed in the upper illustration to present the different styles more clearly.</figDesc><graphic coords="8,63.00,474.00,227.00,194.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 8 :Figure 9 :</head><label>89</label><figDesc>Figure 8: Outline minimization. Notice how the boundary edges on the vertical and horizontal dividers between the panes appear only where contrast with the adjacent surface is low. (These boundary outlines are also omitted when they face the light source.)</figDesc><graphic coords="9,76.00,66.00,200.00,221.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>S</head><label></label><figDesc>= (P (u) + Cw(u)) * N (Cp(u))where * denotes the convolution of two parameterized point sets A(u) and B(u) of the Cartesian plane IR 2 . This convolution is defined as<ref type="bibr" target="#b9">[10]</ref>:A(u) * B(u) = u∈[0,1] {a + b | a ∈ A(u) ∧ b ∈ B(u)}.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: Illuminated bricks. Notice how the thickened edges change to follow the shadow direction.</figDesc><graphic coords="11,63.00,65.00,492.00,77.00" type="bitmap" /></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We wish to thank Tony DeRose for many helpful ideas along the way. Thanks also to Dan Ambrosi who advised us on illustration techniques and who also suggested the "Robie House" as a model. We are also grateful to Taweewan Winkenbach who spent many hours building the model for the "Robie House". This work was supported by NSF Presidential and National Young Investigator awards (CCR-8957323 and CCR-9357790), by the University of Washington Graduate Research and Royalty Research Funds (75-1721 and 65-9731), and by industrial gifts from Adobe, Aldus, and Xerox.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Implementation Details</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.1 Overview</head><p>Three main global data structures are used by our system:</p><p>• The model M . The model is stored as a collection of polygons in three-space. For convenience, concave polygons and polygons with holes are decomposed into convex polygons.</p><p>• BspTree. The 2D BSP tree <ref type="bibr" target="#b23">[25]</ref> is a representation of the visible polygons projected to Normalized Device Coordinates (NDC) space. It is used for fast clipping of strokes.</p><p>• PlanarMap. The planar map <ref type="bibr" target="#b17">[18]</ref> is a partition of the NDC plane into vertices, edges, and faces, according to the NDC projections of the visible polygons. It is used to generate the outline strokes of the surfaces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.3.2 Building tone from strokes</head><p>The first step in building tone is to compute a reference shade v ∈ [0 = white, 1 = black]; we use a simple Phong model in our implementation. A procedural stroke texture is then used to produce a set of strokes that together achieve the target grey value v. As a simple example, to achieve a tone v over an area A using a nib of width w with non-overlapping strokes requires drawing strokes of total length vA/w.</p><p>To compute tone accurately, it is also important to take into account the overlap between strokes that cross each other. Assuming uncorrelated overlap between the strokes of each non-overlapping set seems to work well. For example, for bidirectional hatching, suppose that the strokes in each hatching direction deposit a quantity of ink x on the paper. Then the total ink in the cross-hatched area is given by the sum of the ink from the strokes in each direction 2x, minus the quantity of ink that is deposited in the same place twice, which, assuming uncorrelated strokes, can be approximated by x 2 . Thus, in order to achieve a value v, we use enough strokes in each direction to achieve a value x that satisfies the quadratic equation 2x -</p><p>The correct level for each set is therefore given by x = 1 -√ 1v. This expression is used, for example, by the "cross-hatching" texture to achieve the right tone when two different directions of hatching are crossed (Figure <ref type="figure">2</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.3.3 Stroke textures</head><p>To draw more complex textures, we use procedural prioritized stroke textures, as described in Section 4. In this section, we examine the "brick" texture in some detail. The description in this section can readily be extended to other types of stroke textures.</p><p>The "brick" texture builds tone out of three sets of strokes: the brick outlines; shading strokes within the bricks; and hatching strokes layered over the whole surface. Each set of strokes is associated with a different InkPen.</p><p>The rendering process for "brick" textures is summarized below: The brick outlines are generated from a simple layout that is computed on the fly in texture space and then projected into device space before drawing takes place.</p><p>The width of the nib used to draw the outline strokes is scaled according to the tone being rendered: darker tones use the default nib size; for lighter tones, the nib size is scaled down. The same nib size is used for all the bricks in order to achieve a consistent result over the entire surface. The darkness of each stroke is then adjusted so as to take the BRDF and shadow edge effects into account, as described in Section 4.3. The darkness of the strokes may be further reduced, for example, when the area of the bricks becomes smaller due to perspective forshortening.</p><p>Let To be the tone created by the outline strokes for a given brick B. We estimate To by taking the sum of the amount of ink deposited by each outline stroke and dividing it by the area covered by the brick on the paper, as discussed in Appendix A.3.2. If To is not dark enough to achieve the desired tone, then the interior of the brick is shaded. The darkness of each brick is limited by a constant Ts. Rather than shading every brick with the same tone T = TargetTone -To, we instead shade each brick with probability min{1, T /Ts}. If the brick is shaded, enough strokes are used to achieve a tone Ts, with some randomness added.</p><p>If the shaded bricks still do not achieve the target tone, that is, if To + Ts &lt; TargetTone, then additional hatching is used over the top of all the bricks. For these hatch lines, we use the method described in Appendix A.3.2 to take into account the overlap between strokes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.3.4 Clipping strokes</head><p>The strokes must be clipped to the visible regions they texture. The 2D BSP tree data structure is used for this purpose. The path of each stroke is "pushed" down the BSP tree until it reaches one or more leaf nodes. Only the portions of the path that reach nodes belonging to the region being textured are rendered. Other clipping conditions can also be used. For instance, hatching shadow areas is handled by generating strokes over the entire surface and clipping them to the regions in shadow.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.3.5 Constructing the outline strokes</head><p>The outlines of visible surfaces are extracted by traversing the set of edges stored in the planar map. As described in Section 4.3, these outline edges are rendered only when the tones on either side of the edge are very similar, and when the edges themselves are not directly illuminated by the light source. Testing the tones of adjacent faces is easily accomplished by searching in the planar map.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Adobe Systems Incorporated, Mountain View. Adobe Dimensions</title>
		<imprint>
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">The haloed line effect for hidden line elimination</title>
		<author>
			<persName><forename type="first">Arthur</forename><surname>Appel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">James</forename><surname>Rohlf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Arthur</forename><forename type="middle">J</forename><surname>Stein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIG-GRAPH &apos;79</title>
		<meeting>SIG-GRAPH &apos;79<address><addrLine>Chicago, Illinois</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1979-08-10">August 8-10, 1979. August 1979</date>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="151" to="157" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Feature-based image metamorphosis</title>
		<author>
			<persName><forename type="first">Thaddeus</forename><surname>Beier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shawn</forename><surname>Neely</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH &apos;92</title>
		<meeting>SIGGRAPH &apos;92<address><addrLine>Chicago, Illinois</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1992-07-31">July 26-31, 1992. July 1992</date>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="35" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Near real-time shadow generation using BSP trees</title>
		<author>
			<persName><forename type="first">Norman</forename><surname>Chin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Steven</forename><surname>Feiner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH &apos;89</title>
		<meeting>SIGGRAPH &apos;89<address><addrLine>Boston, Massachusetts</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1989-07">July 31 -August 4, 1989. July 1989</date>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="99" to="106" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Architectural Graphics</title>
		<author>
			<persName><forename type="first">Frank</forename><surname>Ching</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1975">1975</date>
			<publisher>Van Nostrand Reinhold Company</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Automatic illustration of 3D geometric models: Lines</title>
		<author>
			<persName><forename type="first">Debra</forename><surname>Dooley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><forename type="middle">F</forename><surname>Cohen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Graphics</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="77" to="82" />
			<date type="published" when="1990-03">March 1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Automatic illustration of 3D geometric models: Surfaces</title>
		<author>
			<persName><forename type="first">Debra</forename><surname>Dooley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><forename type="middle">F</forename><surname>Cohen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Visualization &apos;90</title>
		<meeting>Visualization &apos;90</meeting>
		<imprint>
			<date type="published" when="1990-10">October 1990</date>
			<biblScope unit="page" from="307" to="314" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Multiresolution curves</title>
		<author>
			<persName><forename type="first">Adam</forename><surname>Finkelstein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><forename type="middle">H</forename><surname>Salesin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics, Annual Conference Series</title>
		<meeting><address><addrLine>Orlando, Florida</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994">July 24-29, 1994. 1994</date>
		</imprint>
	</monogr>
	<note>Proceedings of SIGGRAPH 94</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">On visible surface generation by a priori tree structures</title>
		<author>
			<persName><forename type="first">H</forename><surname>Fuchs</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><forename type="middle">M</forename><surname>Kedem</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">F</forename><surname>Naylor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH &apos;80</title>
		<meeting>SIGGRAPH &apos;80<address><addrLine>Seattle, Washington</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1980-07-18">July 14-18, 1980. July 1980</date>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="page" from="124" to="133" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A kinetic framework for computational geometry</title>
		<author>
			<persName><forename type="first">Leonidas</forename><surname>Guibas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lyle</forename><surname>Ramshaw</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jorge</forename><surname>Stolfi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 24th IEEE Annual Symposium on Foundations of Computer Science</title>
		<meeting>the 24th IEEE Annual Symposium on Foundations of Computer Science</meeting>
		<imprint>
			<date type="published" when="1983">1983</date>
			<biblScope unit="page" from="100" to="111" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Rendering in Pen and Ink</title>
		<author>
			<persName><forename type="first">Arthur</forename><surname>Leighton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Guptill</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1976">1976</date>
			<publisher>Watson-Guptill Publications</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">An enhanced treatment of hidden lines</title>
		<author>
			<persName><forename type="first">Tomihisa</forename><surname>Kamada</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Saturo</forename><surname>Kawai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transaction on Graphics</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="308" to="323" />
			<date type="published" when="1987-10">October 1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Architectural Sketching and Rendering: Techniques for Designers and Artists</title>
		<author>
			<persName><forename type="first">Stephen</forename><surname>Klitment</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1984">1984</date>
			<publisher>Whitney Library of Design</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Architectural Drawing: Options for Design</title>
		<author>
			<persName><forename type="first">Paul</forename><surname>Laseau</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991">1991</date>
			<publisher>Design Press</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Personal communication</title>
		<author>
			<persName><forename type="first">John</forename><surname>Lasseter</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994-01">January 1994</date>
			<pubPlace>Pixar, Richmond, California</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Boeing Computer Services</title>
		<author>
			<persName><forename type="first">John</forename><surname>Lewis</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993-11">November 1993</date>
			<pubPlace>Seattle, Washington</pubPlace>
		</imprint>
	</monogr>
	<note>Personal communication</note>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Pen and Ink Techniques</title>
		<author>
			<persName><forename type="first">Frank</forename><surname>Lohan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1978">1978</date>
			<publisher>Contemporary Books, Inc</publisher>
			<pubPlace>Chicago</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">An Introduction to Solid Modeling</title>
		<author>
			<persName><forename type="first">Martti</forename><surname>Mäntylä</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988">20850. 1988</date>
			<publisher>Computer Science Press</publisher>
			<pubPlace>Rockville, Maryland</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A method of generating stone wall patterns</title>
		<author>
			<persName><forename type="first">Kazunori</forename><surname>Miyata</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH &apos;90</title>
		<meeting>SIGGRAPH &apos;90<address><addrLine>Dallas, Texas</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1990-08-10">August 6-10, 1990. August 1990</date>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="387" to="394" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Manual of Graphic Techniques 4</title>
		<author>
			<persName><forename type="first">Tom</forename><surname>Porter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sue</forename><surname>Goodman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1985">1985</date>
			<publisher>Charles Scribner&apos;s Sons</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Comprehensible rendering of 3D shapes</title>
		<author>
			<persName><forename type="first">Takafumi</forename><surname>Saito</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tokiichiro</forename><surname>Takahashi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH &apos;90 (Dallas</title>
		<meeting>SIGGRAPH &apos;90 (Dallas<address><addrLine>Texas</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1990-08-10">August 6-10, 1990. August 1990</date>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="197" to="206" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Interactive pen-and-ink illustration</title>
		<author>
			<persName><forename type="first">P</forename><surname>Michael</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sean</forename><forename type="middle">E</forename><surname>Salisbury</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ronen</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><forename type="middle">H</forename><surname>Barzel</surname></persName>
		</author>
		<author>
			<persName><surname>Salesin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Graphics, Annual Conference Series</title>
		<meeting><address><addrLine>Orlando, Florida</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994">July 24-29, 1994. 1994</date>
		</imprint>
	</monogr>
	<note>Proceedings of SIGGRAPH 94</note>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Automated generation of intent-based 3D illustration</title>
		<author>
			<persName><forename type="first">Dorée</forename><surname>Duncan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Seligmann</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Steven</forename><surname>Feiner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIG-GRAPH &apos;91</title>
		<meeting>SIG-GRAPH &apos;91<address><addrLine>Las Vegas, Nevada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1991-07">July 28 -August 2, 1991. July 1991</date>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="123" to="132" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Set operations on polyhedra using binary space partitioning trees</title>
		<author>
			<persName><forename type="first">William</forename><forename type="middle">C</forename><surname>Thibault</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bruce</forename><forename type="middle">F</forename><surname>Naylor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH &apos;87</title>
		<meeting>SIGGRAPH &apos;87<address><addrLine>Anaheim, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1987-07-31">July 27-31, 1987. July 1987</date>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="153" to="162" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Computer drafting of stones, wood, plant, and ground materials</title>
		<author>
			<persName><forename type="first">Chris</forename><forename type="middle">I</forename><surname>Yessios</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGGRAPH &apos;79</title>
		<meeting>SIGGRAPH &apos;79<address><addrLine>Chicago, Illinois</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1979">August 8-10, 1979. 1979</date>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="190" to="198" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
