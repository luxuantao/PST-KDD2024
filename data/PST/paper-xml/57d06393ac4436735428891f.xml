<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Survey on Software Fault Localization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">W</forename><forename type="middle">Eric</forename><surname>Wong</surname></persName>
							<email>ewong@utdallas.edu</email>
							<affiliation key="aff0">
								<orgName type="laboratory">State Key Laboratory of Software Engineering</orgName>
								<orgName type="institution">Wuhan University</orgName>
								<address>
									<country key="CN">China</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Texas at Dallas</orgName>
								<address>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Ruizhi</forename><surname>Gao</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Texas at Dallas</orgName>
								<address>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Yihao</forename><surname>Li</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Texas at Dallas</orgName>
								<address>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Rui</forename><surname>Abreu</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">Department of Informatics Engineering</orgName>
								<orgName type="institution">University of Porto</orgName>
								<address>
									<country key="PT">Portugal</country>
								</address>
							</affiliation>
							<affiliation key="aff3">
								<orgName type="department">Palo Alto Research Center (PARC)</orgName>
								<address>
									<settlement>Palo Alto</settlement>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Franz</forename><surname>Wotawa</surname></persName>
							<affiliation key="aff4">
								<orgName type="department">Institute for Software Technology</orgName>
								<orgName type="institution">Graz University of Technology</orgName>
								<address>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">W</forename><surname>Bond</surname></persName>
						</author>
						<author>
							<persName><surname>Gregory</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Bernhard</forename><surname>Peichl</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Alex</forename><surname>David Groce</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Emmanuel</forename><surname>Renieris</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Daniel</forename><surname>KÃ¶b</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Rafi</forename><surname>Vayani</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Ramana</forename><surname>Rao Kompella</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Ophelia</forename><forename type="middle">C</forename><surname>Chesley</surname></persName>
						</author>
						<author>
							<persName><forename type="first">James</forename><forename type="middle">Arthur</forename><surname>Jones</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Dennis</forename><surname>Jefferey</surname></persName>
						</author>
						<author>
							<affiliation key="aff5">
								<orgName type="department">17] Towards Automatic Debugging of Computer Programs Ph.D. Purdue</orgName>
								<orgName type="institution">Yale University Hiralal Agrawal</orgName>
								<address>
									<addrLine>University Hsin Pan [276]</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff6">
								<orgName type="institution">Purdue University</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff7">
								<orgName type="laboratory">Logic Programs for Consistency-based Diagnosis Ph.D. Carleton University Benjamin Robert Liblit [221] Cooperative Bug Isolation Ph.D</orgName>
								<orgName type="institution">The University of California</orgName>
								<address>
									<settlement>Berkeley</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff8">
								<orgName type="department">Automated Source-Level Debugging of Synthesizeable VHDL Designs Ph.D. Graz</orgName>
								<orgName type="institution">University of Technology Haifeng He</orgName>
								<address>
									<postCode>153]</postCode>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff9">
								<orgName type="institution">Master University of Arizona</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff10">
								<orgName type="department">Error Explanation and Fault Localization with Distance Metrics Ph.D</orgName>
								<orgName type="institution">Carnegie Mellon University</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff11">
								<orgName type="laboratory">Research Framework for Software-Fault Localization Tools Ph.D. Brown University</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff12">
								<orgName type="laboratory">Extended Modeling for Automatic Fault Localization in Object-Oriented Software Ph.D. Graz</orgName>
								<orgName type="institution">University of Technology</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff13">
								<orgName type="institution">The University of Hong</orgName>
								<address>
									<addrLine>Kong Xiangyu Zhang [412]</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff14">
								<orgName type="department">Fault Localization via Precise Dynamic Slicing Ph.D</orgName>
								<orgName type="institution">The University of Arizona</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff15">
								<orgName type="laboratory">Improving Automatic Software Fault Localization Master</orgName>
								<orgName type="institution">Delft University of Technology</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff16">
								<orgName type="department">Fault Localization in Backbone Networks Ph.D</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>San Diego</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff17">
								<orgName type="institution">Graz University of Technology</orgName>
								<address>
									<addrLine>Tao Wang [351] Post-Mortem Dynamic Analysis For Software Debugging Ph.D. Fudan University Sriraman Tallam [342]</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff18">
								<orgName type="institution">The University of Arizona</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff19">
								<orgName type="department">Detecting and Exposing Concurrency Bugs Ph.D. University of Illinois at Urbana-Champaign Naveed Riaz [306] Automated Source-Level Debugging of Synthesizable Verilog Designs Ph.D. Graz</orgName>
								<orgName type="laboratory">CRISP-A fault localization Tool for Java Programs Master Rutgers</orgName>
								<orgName type="institution">The State University of New</orgName>
								<address>
									<addrLine>Jersey Shan Lu [229] Understanding</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff20">
								<orgName type="institution">University of Technology</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff21">
								<orgName type="department" key="dep1">Semi-Automatic Fault Localization Ph.D. Georgia Institute of Technology Zhenyu Zhang [413] Software Debugging through Dynamic Analysis of Program Structures Ph.D</orgName>
								<orgName type="department" key="dep2">Fault Localization in Embedded Software Ph.D. Delft</orgName>
								<orgName type="institution">The University of Hong</orgName>
								<address>
									<addrLine>Kong Rui Abreu [5] Spectrum-based</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff22">
								<orgName type="institution">University of Technology</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff23">
								<orgName type="laboratory">Dynamic State Alteration Techniques for Automatically Locating Software Errors Ph.D. University of California Riverside Xinming Wang [354] Automatic Localization of Code Omission Faults Ph.D</orgName>
								<orgName type="institution">Hong Kong University of Science</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">A Survey on Software Fault Localization</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">C87BBD6B585DD08D75337823AE986E36</idno>
					<idno type="DOI">10.1109/TSE.2016.2521368</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T02:22+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Software fault localization</term>
					<term>program debugging</term>
					<term>software testing</term>
					<term>execution trace</term>
					<term>suspicious code</term>
					<term>survey</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Software fault localization, the act of identifying the locations of faults in a program, is widely recognized to be one of the most tedious, time consuming, and expensive -yet equally critical -activities in program debugging. Due to the increasing scale and complexity of software today, manually locating faults when failures occur is rapidly becoming infeasible, and consequently, there is a strong demand for techniques that can guide software developers to the locations of faults in a program with minimal human intervention. This demand in turn has fueled the proposal and development of a broad spectrum of fault localization techniques, each of which aims to streamline the fault localization process and make it more effective by attacking the problem in a unique way. In this article, we catalog and provide a comprehensive overview of such techniques and discuss key issues and concerns that are pertinent to software fault localization as a whole.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Software is fundamental to our lives today, and with its ever-increasing usage and adoption, its influence is practically ubiquitous. In fact, at present, software is not just employed in, but is critical to, many security and safety-critical systems in industries such as medicine, aeronautics, and nuclear energy. Not surprisingly, this trend has been accompanied by (if not made possible only because of) a drastic increase in the scale and complexity of software. Unfortunately, this has also resulted in more software bugs, which often lead to execution failures with huge losses <ref type="bibr" target="#b258">[260,</ref><ref type="bibr" target="#b273">275,</ref><ref type="bibr" target="#b362">365]</ref>. Furthermore, software faults in safety-critical systems have significant ramifications limited not only to financial loss, but also to loss of life, which is an alarming prospect <ref type="bibr" target="#b365">[368]</ref>. A 2006 report from the NIST (National Institute of Standards and Technology) <ref type="bibr">[304]</ref> indicated that software errors are estimated to cost the U.S. economy $59.5 billion annually (0.6 percent of the GDP); the cost has undoubtedly grown since then. Over half the cost of fixing or responding to these bugs is passed on to software users, while software developers and vendors absorb the rest.</p><p>Even when faults in software are discovered due to erroneous behavior or some other manifestation of the fault(s) 1 , finding and fixing them is an entirely different matter. Fault localization, which focuses on the former, i.e., identifying the locations of faults, has historically been a manual task that has been recognized to be time consuming and tedious as well as prohibitively expensive <ref type="bibr" target="#b344">[347]</ref>, given the size and complexity of large-scale software systems today. Furthermore, manual fault localization relies heavily on the software developer's experience, judgment, and intuition to identify and prioritize code that is likely to be faulty. These limitations have led to a surge of interest in developing techniques that can partially or fully automate the localization of faults in software while reducing human input. Though some techniques are similar and some very different (in terms of the type of data consumed, the program components focused on, comparative effectiveness and efficiency, etc.), they each try to attack the problem of fault localization from a unique perspective, and typically offer both advantages and disadvantages relative to one another. With many techniques already in existence and others continuously being proposed, as well as with advances being made both from a theoretical and practical perspective, it is important to catalog and overview current state-of-the-art techniques in fault localization in order to offer a comprehensive resource for those already in the area and those interested in making contributions to it.</p><p>In order to provide a complete survey covering most of the publications related to software fault localization since the late 1970s, we created a publication repository that includes 331 papers published from 1977 to November 2014. We also searched for Masters' and Ph.D. theses closely related to software fault localization, which are listed in Table <ref type="table">1</ref>. 4 software bloats, and security vulnerabilities are not included in the scope. Also, due to space limitations, we group techniques into appropriate categories for collective discussion with an emphasis on the most important features and leave other details of these techniques to their respectively published papers. This is especially the case for techniques targeting a specific application domain, such as fault localization for concurrency bugs and spreadsheets. For these, we provide a review that helps readers with general understanding.</p><p>The following terms appear repeatedly throughout this article, and thus for convenience, we provide definitions for them here per the taxonomy provided in <ref type="bibr" target="#b36">[37]</ref>:</p><p>â¢ A failure is when a service deviates from its correct behavior.</p><p>â¢ An error is a condition in a system that may lead to a failure.</p><p>â¢ A fault is the underlying cause of an error, also known as a bug.</p><p>The remainder of this article is organized in the following manner: we begin by describing traditional and intuitive fault localization techniques in Section 2, moving on to more advanced and complex techniques in Section 3. In Section 4, we list some of the popular subject programs that have been used in different case studies and discuss how these programs have evolved through the years. Different evaluation metrics to assess the effectiveness of fault localization techniques are described in Section 5, followed by a discussion of fault localization tools in Section 6. Finally, critical aspects and conclusions are presented in Section 7 and Section 8, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Traditional Fault Localization Techniques</head><p>This section describes traditional and intuitive fault localization techniques, including program logging, assertions, breakpoints, and profiling.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Program Logging</head><p>Statements (such as print) used to produce program logging are commonly inserted into the code in an ad-hoc fashion to monitor variable values and other program state information <ref type="bibr" target="#b104">[105]</ref>. When abnormal program behavior is detected, developers examine the program log in terms of saved log files or printed run-time information to diagnose the underlying cause of failure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Assertions</head><p>Assertions are constraints added to a program that have to be true during the correct operation of a program. Developers specify these assertions in the program code as conditional statements that terminate execution if they evaluate to false. Thus, they can be used to detect erroneous program behavior at runtime. More details of using assertions for program debugging can be found in <ref type="bibr" target="#b306">[309,</ref><ref type="bibr" target="#b307">310]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Breakpoints</head><p>Breakpoints are used to pause the program when execution reaches a specified point and allow the user to examine the current state. After a breakpoint is triggered, the user can modify the value of variables or continue the execution to observe the progression of a bug. Data breakpoints can be configured to trigger when the value changes for a specified expression, such as a combination of variable values. Conditional breakpoints pause execution only upon the satisfaction of a predicate specified by the user. Early studies (e.g. <ref type="bibr" target="#b79">[80,</ref><ref type="bibr" target="#b154">155]</ref>) use this approach to help developers locate bugs while a program is executed under the control of a symbolic debugger. The same approach is also adopted by more advanced debugging tools such as GNU GDB <ref type="bibr" target="#b120">[121]</ref> and Microsoft Visual Studio Debugger [255].</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Profiling</head><p>Profiling is the runtime analysis of metrics such as execution speed and memory usage, which is typically aimed at program optimization. However, it can also be leveraged for debugging activities, such as the following:</p><p>â¢ Detecting unexpected execution frequencies of different functions (e.g., <ref type="bibr" target="#b42">[43]</ref>);</p><p>â¢ Identifying memory leaks or code that performs unexpectedly poorly (e.g., <ref type="bibr" target="#b149">[150]</ref>);</p><p>â¢ Examining the side effects of lazy evaluation (e.g., <ref type="bibr" target="#b310">[313]</ref>).</p><p>Tools that use profiling for program debugging include GNU's gprof <ref type="bibr" target="#b119">[120]</ref> and the Eclipse plugin TPTP <ref type="bibr" target="#b107">[108]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Advanced Fault Localization Techniques</head><p>With the massive size and scale of software systems today, traditional fault localization techniques are not effective in isolating the root causes of failures. As a result, many advanced fault localization techniques have surfaced recently using the idea of causality <ref type="bibr" target="#b214">[215,</ref><ref type="bibr" target="#b286">288]</ref>, which is related to philosophical theories with an objective to characterize the relationship between events/causes (program bugs in our case) and a phenomenon/effect (execution failures in our case). There are different causality models <ref type="bibr" target="#b286">[288]</ref> such as counterfactual-based, probabilistic-or statistical-based, and causal calculus models. Among these, probabilistic causality models are the most widely used in fault localization to identify suspicious code that is responsible for execution failures.</p><p>In this survey, we classifiy fault localization techniques into eight categories, including slice-based, spectrum-based, statisticsbased, program state-based, machine learning-based, data mining-based, model-based techniques and miscellaneous techniques. Many studies that evaluate the effectiveness of specific fault localization techniques have been reported <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b24">25,</ref><ref type="bibr" target="#b30">31,</ref><ref type="bibr" target="#b35">36,</ref><ref type="bibr" target="#b48">49,</ref><ref type="bibr" target="#b52">53,</ref><ref type="bibr" target="#b90">91,</ref><ref type="bibr" target="#b92">93,</ref><ref type="bibr" target="#b93">94,</ref><ref type="bibr" target="#b101">102,</ref><ref type="bibr" target="#b123">124,</ref><ref type="bibr" target="#b177">178,</ref><ref type="bibr" target="#b184">185,</ref><ref type="bibr" target="#b190">191,</ref><ref type="bibr" target="#b206">207,</ref><ref type="bibr" target="#b208">209,</ref><ref type="bibr" target="#b252">253,</ref><ref type="bibr" target="#b264">266,</ref><ref type="bibr" target="#b265">267,</ref><ref type="bibr" target="#b294">296,</ref><ref type="bibr" target="#b297">299,</ref><ref type="bibr" target="#b332">335,</ref><ref type="bibr" target="#b363">366,</ref><ref type="bibr" target="#b387">390,</ref><ref type="bibr" target="#b388">391,</ref><ref type="bibr" target="#b390">393,</ref><ref type="bibr" target="#b417">420,</ref><ref type="bibr" target="#b403">406,</ref><ref type="bibr" target="#b407">410,</ref><ref type="bibr" target="#b421">424]</ref>. However, none of them offer a comprehensive discussion on all these techniques.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Slice-based Techniques</head><p>Program slicing is a technique to abstract a program into a reduced form by deleting irrelevant parts such that the resulting slice will still behave the same as the original program with respect to certain specifications. Hundreds of papers on this topic have been published <ref type="bibr" target="#b51">[52,</ref><ref type="bibr" target="#b341">344,</ref><ref type="bibr" target="#b391">394]</ref> since Weiser first proposed static slicing in 1979 <ref type="bibr" target="#b358">[361]</ref>.</p><p>One of the important applications of static slicing <ref type="bibr" target="#b357">[360]</ref> is to reduce the search domain while programmers locate bugs in their programs. This is based on the idea that if a test case fails due to an incorrect variable value at a statement, then the defect should be found in the static slice associated with that variable-statement pair, allowing us to confine our search to the slice rather than looking at the entire program. Lyle and Weiser extend the above approach by constructing a program dice (as the set difference of two groups of static slices) to further reduce the search domain for possible locations of a fault <ref type="bibr" target="#b234">[235]</ref>. Although static slicebased techniques have been experimentally evaluated and confirmed to be useful in fault localization <ref type="bibr" target="#b206">[207]</ref>, one problem is that handling pointer variables can make data-flow analysis inefficient because large sets of data facts that are introduced by dereferences of pointer variables need to be stored. Equivalence analysis, which identifies equivalence relationships among the various memory locations accessed by a procedure, is used to improve the efficiency of data-flow analyses in the presence of pointer variables <ref type="bibr" target="#b219">[220]</ref>. Two equivalent memory locations share identical sets of data facts in a procedure. As a result, data-flow analysis only needs to compute information for a representative memory location, and data-flow for other equivalent locations can be garnered from the representative location. Static slicing is also applied for fault localization in binary executables <ref type="bibr" target="#b191">[192]</ref>, and type-checkers <ref type="bibr" target="#b340">[343]</ref>.</p><p>A disadvantage of static slicing is that the slice for a given variable at a given statement contains all the executable statements that could possibly affect the value of this variable at the statement. As a result, it might generate a dice with certain statements that should not be included. This is because we cannot predict some run-time values via a static analysis. To exclude such extra statements from a dice (as well as a slice), we need to use dynamic slicing <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b201">202]</ref> instead of static slicing, as the former can identify the statements that do affect a particular value observed at a particular location, rather than possibly affecting such a value as with the latter. Studies such as <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b27">28,</ref><ref type="bibr" target="#b95">96,</ref><ref type="bibr" target="#b103">104,</ref><ref type="bibr" target="#b187">188,</ref><ref type="bibr" target="#b191">192,</ref><ref type="bibr" target="#b200">201,</ref><ref type="bibr" target="#b218">219,</ref><ref type="bibr" target="#b226">227,</ref><ref type="bibr" target="#b236">237,</ref><ref type="bibr" target="#b255">257,</ref><ref type="bibr" target="#b275">277,</ref><ref type="bibr" target="#b295">297,</ref><ref type="bibr" target="#b331">334,</ref><ref type="bibr" target="#b353">356,</ref><ref type="bibr" target="#b375">378,</ref><ref type="bibr" target="#b376">379,</ref><ref type="bibr" target="#b403">406,</ref><ref type="bibr" target="#b404">407,</ref><ref type="bibr" target="#b407">410]</ref>, which use the dynamic slicing concept in program debugging, have been reported. In <ref type="bibr" target="#b376">[379]</ref>, Wotawa combines dynamic slicing with model-based diagnosis to achieve more effective fault localization. Using a given test suite against a program, dynamic slices for erroneous variables discovered are collected. Hitting-sets are constructed, which contain at least one statement from each dynamic slice. The probability that a statement is faulty is calculated based on the number of hitting-sets that cover that statement. Zhang et al. <ref type="bibr" target="#b404">[407]</ref> propose the multiple-points dynamic slicing technique, which intersects slices of three techniques: Backward Dynamic Slice (BwS), Forward Dynamic Slice (FwS), and Bidirectional Dynamic Slice (BiS). The BwS captures any executed statements that affect the output value of a faulty variable, while the FwS is computed based on the minimal input difference between a failed and a successful test case, isolating the parts of the input that trigger a failure. The BiS flips the values of certain predicates in the execution of a failed test case so that the program generates a correct output. Qian et al. <ref type="bibr" target="#b295">[297]</ref> propose a scenario-oriented program slicing technique. A user-specified scenario is identified as the extra slicing parameter, and all program parts related to a special computation are located under the given execution scenario. There are three key steps to implementing the scenario-oriented slicing technique: scenario input, identification of scenario relevant codes, and, finally, gathering of scenario-oriented slices.</p><p>One limitation of dynamic slicing-based techniques is that they cannot capture execution omission errors, which may cause the execution of certain critical statements in a program to be omitted and thus result in failures <ref type="bibr" target="#b408">[411]</ref>. Gyimothy et al. <ref type="bibr" target="#b141">[142]</ref> propose the use of relevant slicing to locate faulty statements responsible for execution omission errors. Given a failed execution, the relevant slicing first constructs a dynamic dependence graph in the same way that classic dynamic slicing does. It then augments the dynamic dependence graph with potential dependence edges, and a relevant slice is computed by taking the transitive closure of the incorrect output on the augmented dynamic dependence graph. However, incorrect dependencies between program statements may be included to produce oversized relevant slices. To address this problem, Zhang et al. <ref type="bibr" target="#b408">[411]</ref> introduce the concept of implicit dependencies, in which dependencies can be obtained by predicate switching. A similar idea has been used by Weeratunge et al. <ref type="bibr" target="#b355">[358]</ref> to identify root causes of omission errors in concurrent programs, in which dual slicing, a combination of dynamic slicing and trace differencing, is used.</p><p>An alternative approach to static and dynamic slicing is the use of execution slicing based on data-flow tests to locate program bugs <ref type="bibr" target="#b20">[21]</ref> in which an execution slice with respect to a given test case contains the set of statements executed by this test. The reason for choosing execution slicing over static slicing is that a static slice focuses on finding statements that could possibly have an impact on the variables of interest for any inputs, versus statements that are executed by a specific input. This implies that a static slice does not make any use of the input values that reveal the fault and violates a very important concept in debugging that suggests programmers analyze the program behavior under the test case that fails and not under a generic test case. Collecting dynamic slices may consume excessive time and file space, even though different algorithms <ref type="bibr" target="#b50">[51,</ref><ref type="bibr" target="#b203">204,</ref><ref type="bibr" target="#b405">408,</ref><ref type="bibr" target="#b406">409]</ref> have been proposed to address these issues. Conversely, it is relatively easy to construct the execution slice for a given test case if we collect code coverage data from the execution of the test. Different execution slice-based debugging tools have been developed and used in practice such as ÏSuds at Telcordia (formerly Bellcore) <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b424">427]</ref> and eXVantage at Avaya <ref type="bibr" target="#b369">[372]</ref>. Agrawal et al. <ref type="bibr" target="#b20">[21]</ref> apply the execution slice to fault localization by examining the execution dice of one failed and one successful test to locate program bugs. Jones et al. <ref type="bibr" target="#b185">[186,</ref><ref type="bibr" target="#b186">187]</ref> and Wong et al. <ref type="bibr" target="#b372">[375]</ref> extend that study by using multiple successful and failed tests based on the following observations:</p><p>â¢ The more successful tests that execute a piece of code, the less likely it is for the code to contain a bug.</p><p>â¢ The more failed tests with respect to a given bug that execute a piece of code, the more likely that it contains this bug. We use the following example to demonstrate the differences among static, dynamic, and execution slicing. Use the code in column 2 of Table <ref type="table" target="#tab_0">2</ref> as the reference. Assume it has one bug at s 7 . The static slice for the output variable, product, contains all statements that could possibly affect the value of product, s 1 , s 2 , s 4 , s 5 , s 7 , s 8 , s 10 , and s 13 , as shown in the third column. The dynamic slicing for product only contains the statements that do affect the value of product with respect to a given test case, which includes s 1 , s 2 , s 5 , s 7 , and s 13 (as shown in the fourth column) when a = 2. The execution slice with respect to a given test case contains all statements executed by this test. Therefore, the execution slice for a test case, a = 2, consists of s 1 , s 2 , s 3 , s 4 , s 5 , s 6 , s 7 , s 12 , s 13 as shown in the fifth column of Table <ref type="table" target="#tab_0">2</ref>. </p><formula xml:id="formula_0">= 2 s1 input(a) input(a) input(a) input(a) s2 i = 1; i = 1; i = 1; i = 1; s3 sum = 0; sum = 0; s4 product = 1; product = 1; product = 1; s5 if (i &lt; a){ if (i &lt; a){ if (i &lt; a){ if (i &lt; a){ s6 sum = sum + i; sum = sum + i; s7 product = product Ã i; //bug product = product Ã 2i product = product Ã i; product = product Ã i; product = product Ã i; s8 }else{ }else{ s9 sum = sum -i; s10 product = product / i; product = product / i; s11 } s12 print (sum);</formula><p>print (sum); s13 print (product); print (product); print (product); print (product);</p><p>One problem with the aforementioned slice-based techniques is that the bug may not be in the dice. Even if a bug is in the dice, there may still be too much code that needs to be examined. To overcome this problem, an inter-block data dependency-based augmentation and a refining method is proposed in <ref type="bibr" target="#b370">[373]</ref>. The former includes additional code in the search domain for inspection based on its inter-block data dependency with the code which is currently being examined, whereas the latter excludes less suspicious code from the search domain using the execution slices of additional successful tests. Additionally, slices are problematic because they are always lengthy and hard to understand. In <ref type="bibr" target="#b204">[205]</ref>, the notion of using barriers is proposed to provide a filtering approach for smaller program slices and better comprehensibility. Authors of <ref type="bibr" target="#b327">[330]</ref> propose thin slicing in order to find only producer statements that help compute and copy a value to a particular variable. Statements that explain why producer statements affect the value of a particular variable are excluded from a thin slice.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Program Spectrum-based Techniques</head><p>Following the discussion in the beginning of Section 3, we would like to emphasize that many spectrum-based techniques are inspired by the probabilistic-and statistical-based causality models. With this understanding, we now explain the details of these techniques.</p><p>A program spectrum details the execution information of a program from certain perspectives, such as execution information for conditional branches or loop-free intra-procedural paths <ref type="bibr" target="#b148">[149]</ref>. It can be used to track program behavior <ref type="bibr" target="#b302">[305]</ref>. An early study by Collofello and Cousins <ref type="bibr" target="#b78">[79]</ref> suggests that such spectra can be used for software fault localization. When the execution fails, such information can be used to identify suspicious code that is responsible for the failure. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Techniques</head><p>Early studies <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b200">201,</ref><ref type="bibr" target="#b202">203,</ref><ref type="bibr" target="#b338">341]</ref> only use failed test cases for spectrum-based fault localization, though this approach has subsequently been deemed ineffective <ref type="bibr" target="#b20">[21,</ref><ref type="bibr" target="#b184">185,</ref><ref type="bibr" target="#b363">366]</ref>. Later studies achieve better results using both the successful and failed test cases and emphasizing the contrast between them. Set union and set intersection are proposed in <ref type="bibr" target="#b301">[303]</ref>. The set union focuses on the source code that is executed by the failed test but not by any of the successful tests. Such code is more suspicious than others. The set intersection excludes the code that is executed by all the successful tests but not by the failed test. Renieris and Reiss <ref type="bibr" target="#b301">[303]</ref> propose another ESHS-based technique, nearest neighbor, which contrasts a failed test with a successful test that is most similar to the failed one in terms of the distance between them. If a bug is in the difference set, it is located. For a bug that is not contained in the difference set, the process continues by first constructing a program dependence graph and then including and checking adjacent un-checked nodes in the graph step by step until all the nodes in the graph are examined. The idea of nearest neighbor is similar to Lewis' counterfactual reasoning <ref type="bibr" target="#b215">[216]</ref>, which claims that, for two events A and B, A causes B (in world w) if and only if, in all possible worlds that are maximally similar to w, A does not take place and B also does not happen. The theory of counterfactual reasoning is also found in other studies such as <ref type="bibr" target="#b136">[137,</ref><ref type="bibr" target="#b178">179,</ref><ref type="bibr" target="#b397">400]</ref>.</p><p>Intuitively, the closer the execution pattern of a statement is to the failure pattern of all test cases, the more likely the statement is to be faulty, and consequently the more suspicious the statement seems. By the same token, the farther the execution pattern of a statement is to the failure pattern, the less suspicious the statement appears to be. Similarity coefficient-based measures can be used to quantify this closeness, and the degree of closeness can be interpreted as the suspiciousness of the statements.</p><p>A popular ESHS-based similarity coefficient-based technique is Tarantula <ref type="bibr" target="#b185">[186]</ref>, which uses the coverage and execution results (success or failure) to compute the suspiciousness of each statement as (N CF /N F )/(N CF /N F +N CS /N S ). A study on the Siemens suite <ref type="bibr" target="#b184">[185]</ref> shows that Tarantula inspects less code before the first faulty statement is identified, making it a more effective fault localization technique when compared to others such as set union, set intersection, nearest neighbor and cause transition <ref type="bibr" target="#b76">[77]</ref>.</p><p>Based on the suspiciousness computed by Tarantula, studies like <ref type="bibr" target="#b185">[186,</ref><ref type="bibr" target="#b186">187]</ref> use different colors (from red to yellow to green) to provide a visual mapping of the participation of each program statement in the execution of a test suite. The more failed test cases that execute a statement, the brighter (redder) the color assigned to the statement will be. In <ref type="bibr" target="#b93">[94]</ref> For discussion purposes, let's use the code in Table <ref type="table" target="#tab_0">2</ref> again. Assume that we have two successful test cases (a = 0 and a = 1) and one failed test case (a = 2). The suspiciousness value of each statement can be computed, for example, using the Tarantula technique discussed above. The results are as shown in Table <ref type="table">3</ref>. Table <ref type="table">3</ref>. An example showing the suspiciousness value computed using the Tarantula technique Code with a bug at s7 a = 0</p><formula xml:id="formula_1">a = 1 a = 2 NCF NCS Suspiciousness Ranking s1 input(a) â¢ â¢ â¢ 1 2 0.5 3 s2 i = 1; â¢ â¢ â¢ 1 2 0.5 3 s3 sum = 0; â¢ â¢ â¢ 1 2 0.5 3 s4 product = 1; â¢ â¢ â¢ 1 2 0.5 3 s5 if (i &lt; a){ â¢ â¢ â¢ 1 2 0.5 3 s6 sum = sum + i; â¢ 1 0 1 1 s7 product = product Ã i; //bug product = product Ã 2i â¢ 1 0 1 1 s8 }else{ â¢ â¢ 0 2 0 10 s9 sum = sum -i; â¢ â¢ 0 2 0 10 s10 product = product / i; â¢ â¢ 0 2 0 10 s11 } â¢ â¢ 0 2 0 10 s12 print (sum); â¢ â¢ â¢ 1 2 0.5 3 s13 print (product); â¢ â¢ â¢ 1 2 0.5 3 Execution Results</formula><p>Successful Successful Failed</p><p>The third to fifth columns in Table <ref type="table">3</ref> represent the statement coverage of the three test cases. An entry with a "â¢" means the statement is covered by the corresponding test case, while an empty entry means the statement is not. The values of N CF and N CS for each statement are given in the sixth and seventh columns. Based on the definition of Tarantula, the suspiciousness value of each statement is computed and displayed in the eighth column. The ranking of each statement is given in the rightmost column.</p><p>As we can observe, the faulty statement s 7 has the highest ranking.</p><p>In recent years, other techniques have also been proposed that perform at the same level with, or even surpass, Tarantula in terms of their effectiveness at fault localization. The Ochiai similarity coefficient-based technique <ref type="bibr" target="#b10">[11]</ref> is generally considered more effective than Tarantula, and its formula is as follows:</p><formula xml:id="formula_2">( ) ( ) CF F CF CS N Suspiciousness Ochiai N N N = Ã +</formula><p>There are two major differences between Ochiai and the nearest neighbor model: 1) The nearest neighbor model utilizes a single failed test case, while Ochiai uses multiple failed test cases, and 2) The nearest neighbor model only selects the successful test case that most closely resembles the failed test case, while Ochiai includes all successful test cases. Ochiai2 <ref type="bibr" target="#b265">[267]</ref> is an extension of Ochiai, and its formula is as follows:</p><p>(</p><formula xml:id="formula_3">2) ( ) ( ) ( ) ( ) CF US CF CS US UF CF UF CP US N N Suspiciousness Ochiai N N N N N N N N Ã = + Ã + Ã + Ã +</formula><p>In <ref type="bibr" target="#b265">[267]</ref> ( )</p><formula xml:id="formula_4">Suspiciousness O = 1, if 0 , otherwise UF US N N - &gt;</formula><p>â© Table <ref type="table" target="#tab_4">4</ref> lists thirty-one similarity coefficient-based techniques, along with their algebraic forms, which have been used in different studies such as <ref type="bibr" target="#b74">[75,</ref><ref type="bibr" target="#b361">364,</ref><ref type="bibr" target="#b368">371]</ref>. A few additional techniques using similar approaches can be found in <ref type="bibr" target="#b229">[230]</ref>. Tools like Zoltar <ref type="bibr" target="#b169">[170]</ref> and DEPUTO <ref type="bibr" target="#b8">[9]</ref> are available to compute the suspiciousness with respect to selected techniques.</p><p>Empirical studies have also shown that techniques proposed in <ref type="bibr" target="#b363">[366,</ref><ref type="bibr" target="#b364">367,</ref><ref type="bibr" target="#b366">369,</ref><ref type="bibr" target="#b367">370,</ref><ref type="bibr" target="#b368">371]</ref> are, in general, more effective than Tarantula. Especially in the case of DStar <ref type="bibr" target="#b368">[371]</ref>, results from empirical evaluations against all 31 similarity coefficient-based techniques listed in Table <ref type="table" target="#tab_4">4</ref> -as well as Tarantula, Ochiai, Ochiai2, Crosstab <ref type="bibr" target="#b366">[369]</ref>, H3b and H3c <ref type="bibr" target="#b363">[366]</ref>, and RBF <ref type="bibr" target="#b364">[367]</ref> suggest that DStar outperforms all compared techniques in most cases.</p><p>Comparisons among different spectrum-based fault localization techniques are frequently discussed in recent studies <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b209">210,</ref><ref type="bibr" target="#b265">267,</ref><ref type="bibr" target="#b368">371]</ref>. However, there is no technique claiming that it can outperform all others under every scenario. In other words, an optimum spectrum-based technique does not exist, which is supported by Yoo et al.'s study <ref type="bibr" target="#b394">[397]</ref>.  </p><formula xml:id="formula_5">N N N N N N N N N N N N N N N N N N N N Ã - Ã + Ã + + + Ã + + Ã + Ã + Ã + 2 Dennis ( ) ( ) ( ) ( ) CF US CS UF CF CS CF UF N N N N n N N N N Ã - Ã Ã + Ã +<label>18</label></formula><formula xml:id="formula_6">CF US CS UF C U S F n N N N N N N N N Ã Ã - Ã Ã Ã Ã 21 Hamming CF US N N + 6 Gower CF US F C U S N N N N N N + Ã Ã Ã 22 Hamann CF US UF CS CF UF CS US N N N N N N N N + - - + + + 7 Michael 2 2 4 (( ) ( )) ( ) ( ) CF US CS UF CF US CS UF N N N N N N N N Ã Ã - Ã + + + 23 Sokal 2( )<label>2(</label></formula><p>)</p><formula xml:id="formula_7">CF US CF US UF CS N N N N N N + + + +<label>8 Pierce ( ) ( ) ( ) (2 (</label></formula><p>)) ( )  <ref type="bibr" target="#b292">[294]</ref>, also called likely invariants <ref type="bibr" target="#b314">[317]</ref>, are program properties that are observed to hold in some sets of successful executions but, unlike invariants, may not necessarily hold for all possible executions. The major obstacle in applying such techniques is how to automatically identify the necessary program properties required for the fault localization. To address this problem, existing PIHS-based techniques often take the invariant spectrum of successful executions as the program properties. In study <ref type="bibr" target="#b26">[27]</ref>, Alipour and Groce propose extended invariants by adding execution features such as the execution count of blocks to the invariants. They claim that extended invariants are helpful in fault localization.</p><formula xml:id="formula_8">CF UF UF CS CF UF UF US CS US N N N N N N N N N N Ã + Ã Ã + Ã Ã + Ã<label>24 Scott 2 4( ) ( ) (2 )(2 )</label></formula><formula xml:id="formula_9">CF US UF CS UF CS CF UF CS US UF CS N N N N N N N N N N N N Ã - Ã - - + + + + 9 Baroni-Urbani &amp; Buser ( ) ( ) CF US CF CF US CF CS UF N N N N N N N N Ã + Ã + + + 25 Rogot1 1 2 2 2 ( ) CF US CF UF CS US UF CS N N N N N N N N + + + + + 10 Tarwid ( ) ( ) ( ) ( ) CF F C CF F C n N N N n N N N Ã - Ã Ã + Ã</formula><p>â¢ Predicate Count Spectrum (PRCS)-based: PRCS records how predicates are executed and can be used to track program behaviors that are likely to be erroneous. These techniques are often labeled as statistical debugging techniques because the PRCS information is analyzed using statistical methods. Fault localization techniques in this category include Liblit05 <ref type="bibr" target="#b221">[222]</ref>, SOBER <ref type="bibr" target="#b222">[223]</ref> etc. See Section 3.3 for more details. Authors of <ref type="bibr" target="#b264">[266]</ref> suggest that using PRCS could achieve a better fault localization effectiveness than that using ESHS.</p><p>â¢ Method Calls Sequence Hit Spectrum (MCSHS)-based: Information regarding the sequences of method calls covered during program execution is collected. In one study, Dallmeier et al. <ref type="bibr" target="#b83">[84]</ref> collect execution data from Java programs and demonstrate fault localization through the identification and analysis of method call sequences. Both incoming method calls (how an object is used) and outgoing calls (how it is implemented) are considered. In another study, Liu et al. <ref type="bibr" target="#b224">[225]</ref> construct software behavior graphs from collected program execution data, including the calling and transition relationships between functions. They define a framework to mine closed frequent graphs based on behavior graphs and use them to train classifiers that help identify suspicious functions.</p><p>â¢ Time Spectrum-based: A time spectrum <ref type="bibr" target="#b393">[396]</ref> records the execution time of every method in successful or failed executions.</p><p>Observed behavior models are created using time spectra collected from successful executions. Deviations from these models in failed executions are identified and ranked as potential causes of failures.</p><p>Other program spectra such as those in Table 5 <ref type="bibr" target="#b148">[149]</ref> can also be applied to identify suspicious code in a program. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Issues and Concerns</head><p>A variety of issues and concerns about spectrum-based fault localization has also been identified and studied in depth. One problem is that most spectrum-based techniques do not calibrate the contribution of failed and successful tests. In <ref type="bibr" target="#b382">[385]</ref>, all statements are divided into suspicious and unsuspicious groups. The suspicious group contains statements that have been executed by at least one failed test case, while the unsuspicious group contains the remaining statements. Risk is only calculated for suspicious statements, and unsuspicious statements are simply assigned the lowest value. It is possible, however, that successful test cases may also contain bugs. In <ref type="bibr" target="#b363">[366]</ref>, Wong et al. focus on the question of how each additional failed or successful test case can aid in locating program bugs. They describe that with respect to a piece of code, the contribution of the first failed test case that executes it in computing its suspiciousness is larger than or equal to that of the second failed test case that executes it, which in turn is larger than or equal to that of the third failed test case that executes it, and so on. This principle is also applied to the contribution provided by successful test cases. In addition, the total contribution from all the successful test cases that execute a statement should be less than the total contribution from all the failed tests that execute it. Recognizing that fault localization often proceeds by comparing information associated with a failed test case to that with a successful test case, Wong et al. <ref type="bibr" target="#b370">[373]</ref> and Guo et al. <ref type="bibr" target="#b139">[140]</ref> attempt to answer the question of which successful test case should be selected for comparison, in the interests of more effective fault localization. Choosing the successful test case whose execution sequence is most similar to that of a failed test case, according to a control flow-based difference metric, can minimize the search domain of the fault.</p><p>For most spectrum-based techniques, if statements exhibit the same execution pattern, there is a high likelihood that the suspiciousness score assigned to these statements will be exactly the same. Statements with the same suspiciousness will result in ties in the ranking. To break these ties, the information related to statement execution frequency in addition to statement coverage can also be utilized <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b212">213]</ref>. In <ref type="bibr" target="#b390">[393]</ref>, Xu et al. evaluate different tie-breaking strategies, including statement orderbased strategy, confidence-based strategy, and data dependency-based strategy. Tie-breaking methods will be further discussed in Section 7.6. Another problem is that almost all spectrum-based techniques have assumed that a test oracle exists, which restricts their practical applicability. Thus, Xie et al. <ref type="bibr" target="#b384">[387]</ref> propose a fault localization technique based on the integration of metamorphic relations and slices, in which a program execution slice is replaced by a metamorphic slice; an individual test case is replaced by a metamorphic test group; and the success/failure result of a test case is replaced by the violation/non-violation result of a metamorphic test group. Authors of <ref type="bibr" target="#b70">[71]</ref> also use metamorphic relations with symbolic testing for program debugging.</p><p>However, all these techniques rely strongly on the metamorphic relations derived from program specifications. Proper identification of such relations can be not only difficult but also time consuming in practice.</p><p>Zhao et al. <ref type="bibr" target="#b418">[421,</ref><ref type="bibr" target="#b419">422]</ref> posit that using only individual coverage information may not reveal the execution paths. Therefore, they first use the program control-flow graph to analyze the program execution and then map the distribution of failed executions to different control flows. They use bug proneness to qualify how each block contributes to the failure and bug free confidence to quantify the likelihood of each block being bug-free by comparing the distributions of blocks on the same failed execution path.</p><p>Instrumentation overhead is another issue, which introduces a considerable cost in the fault localization process, especially in a resource-constrained environment. In order to mitigate this problem, Perez et al. <ref type="bibr" target="#b289">[291]</ref> propose coined dynamic code coverage by using coarser instrumentation to reduce such overhead. This technique starts by analyzing coverage traces for large components of the program (e.g., package or class) and then progressively increases the instrumentation granularity for possible faulty components until the statement level is reached.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">Statistics-based Techniques</head><p>A statistical debugging technique (Liblit05) that can isolate bugs in programs with instrumented predicates at particular points is presented in <ref type="bibr" target="#b221">[222]</ref>. For each predicate P, Liblit05 first computes the probability that P being true implies failure, Failure(P), and the probability that the execution of P implies failure, Context(P). Predicates that have Failure(P) -Context(P) â¤ 0 are discarded. The remaining predicates are prioritized based on their importance scores, which give an indication of the relationship between predicates and program bugs. Predicates with a higher score should be examined first. Chilimbi et al. <ref type="bibr" target="#b73">[74]</ref> propose that replacing predicates with path profiles may improve the effectiveness of Liblit05. Path profiles are collected during execution and are aggregated across the execution of multiple test cases through feedback reports. The importance score is calculated for each path and the top results are selected and presented as potential root causes.</p><p>In <ref type="bibr" target="#b222">[223]</ref>, <ref type="bibr">Liu et al.</ref> propose the SOBER technique to rank suspicious predicates. A predicate P can be evaluated as true more than once in the execution of one test case. Compute Ï(P) = ( ) , ( ) ( )</p><formula xml:id="formula_10">n t n t n f +</formula><p>the probability that P is evaluated as true in each execution of a test case, where n(t) is the number of times P is evaluated as true and n(f) is the number of times P is evaluated as false. If the distribution of Ï(P) in failed executions is significantly different from that in successful executions, then P is related to a fault. Hu et al. <ref type="bibr" target="#b167">[168]</ref> use a similar heuristic to rank all predicates. In addition, they apply non-parametric hypothesis testing to determine the degree of difference between the spectra of predicates for successful and failed test cases. This new enhancement has been empirically evaluated to be effective <ref type="bibr" target="#b413">[416,</ref><ref type="bibr" target="#b417">420]</ref>.</p><p>The study in <ref type="bibr" target="#b366">[369]</ref> presents a cross tabulation (a.k.a. Crosstab) analysis-based technique to compute the suspiciousness of statements. A crosstab is constructed for each statement with two vertical categories (covered/not covered) and two horizontal categories (successful execution/failed execution). A hypothesis test is used to provide a reference of dependency/independency between the execution results and the coverage of each statement. The exact suspiciousness of each statement depends on the degree of association between its coverage and the execution results.</p><p>The primary difference between Crosstab, SOBER, and Liblit05 is that Crosstab can be generally applied to rank suspicious program elements (i.e., statement, predicate, function/method, etc.), whereas the last two only rank suspicious predicates for fault localization. For Liblit05 and SOBER, the corresponding statements of the top k predicates are taken as the initial set to be examined for locating the bug. As suggested by Jones and Harrold in <ref type="bibr" target="#b184">[185]</ref>, Liblit05 provides no way to quantify the ranking for all statements. An ordering of the predicates is defined, but the approach does not detail how to order statements related to any bug that lies outside a predicate. For SOBER, if the bug is not in the initial set of statements, additional statements have to be included by performing a breadth-first search on the corresponding program dependence graph, which can potentially be time consuming. However, such a search is not required for Crosstab, as all the statements of the program are ranked based on their suspiciousness. Results reported in <ref type="bibr" target="#b366">[369]</ref> suggest that Crosstab is almost always more effective in locating bugs in the Siemens suite than Liblit05 and SOBER.</p><p>In program execution, short-circuit evaluation may occur frequently, which means, for a predicate with more than one condition, if the first condition suffices to determine the results of the predicate, the following conditions will not be evaluated (executed). Zhang et al. <ref type="bibr" target="#b411">[414,</ref><ref type="bibr" target="#b412">415]</ref> identify the short-circuit evaluations of an individual predicate and produce one set of evaluation sequences for each predicate. Using such information, their proposed Debugging through Evaluation Sequences (DES) approach is compared to existing predicated-based techniques such as SOBER and Liblit05. You et al. <ref type="bibr" target="#b395">[398]</ref> propose a statistical approach employing the behavior of two sequentially connected predicates in the execution. They construct a weighted execution graph for each execution of a test case with predicates as vertices and the transition of two sequential predicates as edges. For each edge, a suspiciousness value is calculated to quantify its fault-relevant likelihood. Authors of <ref type="bibr" target="#b37">[38]</ref>   <ref type="bibr" target="#b397">[400,</ref><ref type="bibr" target="#b398">401]</ref>, by contrasting program states between executions of a successful test and a failed test via their memory graphs which are described in <ref type="bibr" target="#b423">[426]</ref>. Variables are tested for suspiciousness by replacing their values from a successful test with their corresponding values from the same point in a failed test, and repeating the program execution. Unless the identical failure is observed, the variable is no longer considered suspicious. Note that the idea of simplifying failure-inducing inputs discussed in <ref type="bibr" target="#b397">[400,</ref><ref type="bibr" target="#b398">401]</ref> is orthogonal to other techniques, as it significantly reduces the original execution length. The delta tool <ref type="bibr" target="#b85">[86]</ref> has been widely used in industry for automated debugging. In <ref type="bibr" target="#b76">[77]</ref>, Cleve and Zeller extend delta debugging to the cause transition technique to identify the locations and times where the cause of a failure changes from one variable to another. An algorithm named cts is proposed to quickly locate cause transitions in a program execution. Similar studies <ref type="bibr" target="#b271">[273,</ref><ref type="bibr" target="#b272">274]</ref> based on combinatorial testing are reported, which separate input parameters into faultypossible and healthy-possible and identify minimal failure-inducing combinations of parameters.</p><p>However, the cause transition technique is a relatively high-cost approach; there may exist thousands of states in a program execution, and delta debugging at each matching point requires additional test executions to narrow down the causes. Another problem is that the identified locations may not be where the bugs reside. Gupta et al. <ref type="bibr" target="#b140">[141]</ref> introduce the concept of a failureinducing chop as an extension to the cause transition technique to overcome this issue. First, delta debugging is used to identify input and output variables that are causes of failure. Dynamic slices are then constructed for these variables. The code at the intersection of the forward slicing of the input variables and the backward slicing of the output variables is considered suspicious.</p><p>Sumner et al. further improve the robustness, precision, and efficiency of delta debugging by combining it with more precise execution alignment techniques <ref type="bibr" target="#b335">[338,</ref><ref type="bibr" target="#b336">339,</ref><ref type="bibr" target="#b386">389]</ref>. However, there are still three limitations to delta debugging: it fails to handle confounding of partial state replacement, it cannot locate execution omission errors, and it suffers from poor efficiency. To address these limitations, Sumner and Zhang <ref type="bibr" target="#b337">[340]</ref> propose a cause inference model, comparative causality, to provide a systematic technique explaining the difference between a failed execution and a successful execution.</p><p>Predicate switching <ref type="bibr" target="#b402">[405]</ref> Also, even if every failed execution executes a particular statement, this statement is not necessarily the root cause of the failure. Thus, they use edge profiles to represent program executions and assess the suspiciousness of the infected program states propagated through each edge. By associating basic blocks with edges, a suspiciousness ranking is generated to locate program bugs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5.">Machine Learning-based Techniques</head><p>Machine learning is the study of computer algorithms that improve through experience. Machine learning techniques are adaptive and robust and can produce models based on data, with limited human interaction. This has led to their employment in many disciplines such as bioinformatics, natural language processing, cryptography, computer vision, etc. In the context of fault localization, the problem at hand can be identified as trying to learn or deduce the location of a fault based on input data such as statement coverage and the execution result (success or failure) of each test case.</p><p>Wong et al. <ref type="bibr" target="#b371">[374]</ref> propose a fault localization technique based on a back-propagation (BP) neural network, one of the most popular neural network models in practice <ref type="bibr" target="#b111">[112]</ref>. A BP neural network has a simple structure, which makes it easy to implement using computer programs. Also, BP neural networks have the ability to approximate complicated nonlinear functions <ref type="bibr" target="#b153">[154]</ref>. The coverage data of each test case and the corresponding execution result are collected, and they are used together to train a BP neural network so that the network can learn the relationship between them. Then, the coverage of a suite of virtual test cases that each covers only one statement in the program is input to the trained BP network, and the outputs can be regarded as the likelihood of each statement containing the bug. Ascari et al. <ref type="bibr" target="#b35">[36]</ref> extend the BP-based technique <ref type="bibr" target="#b371">[374]</ref> to Object-Oriented programs. As BP neural networks are known to suffer from issues such as paralysis and local minima, Wong et al. <ref type="bibr" target="#b364">[367]</ref> propose another approach based on RBF (radial basis function) networks, which are less susceptible to these problems and have a faster learning rate <ref type="bibr" target="#b210">[211,</ref><ref type="bibr" target="#b354">357]</ref>. The RBF network is trained using an approach similar to the BP network. Once the training is completed, the output with respect to the coverage of each virtual test case is considered to be the suspiciousness of the corresponding statement. There are three novelties of this approach: 1) a method for representing test cases, coverage information, and execution results within a modified RBF neural network formalism, 2) an innovative algorithm to simultaneously estimate the number of hidden neurons and their receptive field centers, 3) a weighted bit-comparison based distance (instead of the Euclidean distance) to measure the distance between the coverage of two test cases.</p><p>In <ref type="bibr" target="#b56">[57]</ref> Briand et al. use the C4.5 decision tree algorithm to construct rules that classify test cases into various partitions such that failed test cases in the same partition most likely fail due to the same causative fault. The underlying premise is that distinct failure conditions for test cases can be identified depending on the inputs and outputs of the test case (category partitioning). Each path in the decision tree represents a rule modeling distinct failure conditions, possibly originating from different faults, and leads to a distinct failure probability prediction. The statement coverage of both the failed and successful test cases in each partition is used to rank the statements using a heuristic similar to Tarantula <ref type="bibr" target="#b184">[185]</ref> to form a ranking. These individual rankings are then consolidated to form a final statement ranking which can be examined to locate the faults.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6.">Data Mining-based Techniques</head><p>Along the lines of machine learning, data mining also seeks to produce a model using pertinent information extracted from data. Data mining can uncover hidden patterns in samples of data that may not be discovered by manual analysis alone, especially due to the sheer volume of information. Efficient data mining techniques transcend such problems and do so in reasonable amounts of time with high degrees of accuracy. The software fault localization problem can be abstracted to a data mining problem -for example, we wish to identify the pattern of statement execution that leads to a failure. In addition, although the complete execution trace of a program is a valuable resource for fault localization, the huge volume of data makes it unwieldy for usage in practice. Therefore, some studies have creatively applied data mining techniques to execution traces.</p><p>Nessa et al. <ref type="bibr" target="#b267">[269]</ref> generate statement subsequences of length N, referred to as N-grams, from the trace data. The failed execution traces are then examined to find the N-grams with a rate of occurrence that is higher than a certain threshold. A statistical analysis is conducted to determine the conditional probability that a certain N-gram appears in a given failed execution tracethis probability is known as the confidence for that N-gram. N-grams are sorted in descending order of confidence and the corresponding statements in the program are displayed based on their first appearance in the list. Case studies on the Siemens suite as well as the space and grep programs have shown that this technique is more effective at locating faults than Tarantula.</p><p>Cellier et al. <ref type="bibr" target="#b64">[65,</ref><ref type="bibr" target="#b65">66]</ref> discuss a combination of association rules and Formal Concept Analysis to assist in fault localization. The proposed technique tries to identify rules regarding the association between statement coverage and corresponding execution failures. The frequency of each rule is measured. A threshold is decided upon to indicate the minimum number of failed executions that should be covered by a selected rule. A large number of rules so generated are partially ranked using a rule lattice. The ranking is then examined to locate the fault.</p><p>In <ref type="bibr" target="#b400">[403]</ref>, the authors propose a technique taking advantage of the recent progress in multi-relational data mining for fault localization. More specifically, this technique is based on Markov logic, combining first-order logic and Markov random fields with weighted satisfiability testing for efficient inference and a voted perceptron algorithm for criminative learning. When applied to fault localization, Markov logic combines different information sources such as statement coverage, static program structure information, and prior bug knowledge into a solution to improve the effectiveness of fault localization. Their technique is empirically shown to be more effective than Tarantula on some programs of the Siemens suite.</p><p>Denmat et al. <ref type="bibr" target="#b98">[99]</ref> propose a technique that re-interprets Tarantula as a data-mining problem. In this technique, association rules that indicate the relationship between a single statement and a program failure are mined based on the coverage information and execution results of a test suite. The relevance values of these rules are evaluated based on two metrics, conf and lift, which are commonly used by classical data mining problems. Such values can be interpreted as the suspiciousness of a statement that may contain bugs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.7.">Model-based Techniques</head><p>With respect to each model-based technique, a critical concern is the model's expressive capability, which has a significant impact on the effectiveness of that technique.</p><p>While using model-based diagnosis <ref type="bibr" target="#b299">[301]</ref>, it is assumed that a correct model of each program being diagnosed is available. That is, these models can be served as the oracles of the corresponding programs. Differences between the behaviors of a model and the actual observed behaviors of the program are used to help find bugs in the program <ref type="bibr" target="#b248">[249,</ref><ref type="bibr" target="#b249">250]</ref>. On the other hand, for modelbased software fault localization <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b39">40,</ref><ref type="bibr" target="#b96">97,</ref><ref type="bibr" target="#b116">117,</ref><ref type="bibr" target="#b193">194,</ref><ref type="bibr" target="#b241">242,</ref><ref type="bibr" target="#b242">243,</ref><ref type="bibr" target="#b245">246,</ref><ref type="bibr" target="#b247">248,</ref><ref type="bibr" target="#b375">378,</ref><ref type="bibr" target="#b377">380,</ref><ref type="bibr" target="#b378">381,</ref><ref type="bibr" target="#b379">382]</ref>, models are generated directly from the actual programs, which may contain bugs. Differences between the observed program executions and the expected results (provided by programmers or testers) are used to identify model elements that are responsible for such observed misbehaviors. As demonstrated by the Java Diagnosis Experiments (JADE) in <ref type="bibr" target="#b240">[241,</ref><ref type="bibr" target="#b251">252]</ref>, model-based software fault localization can be viewed as an application of model-based diagnosis <ref type="bibr" target="#b13">[14]</ref>.</p><p>Dependency-based models are derived from dependencies between statements in a program, by means of either static or dynamic analysis. Mateis et al. <ref type="bibr" target="#b241">[242]</ref> present a functional dependency model for Java programs that can handle a subset of features for the Java language, such as classes, methods, conditionals, assignments, and while-loops. In their model, the structure of a program is described with dependency-based models, while logic-based languages, such as first order logic, are applied to model the behaviors of the target program. This dependency-based model is then extended to handle unstructured control flows in Java programs <ref type="bibr" target="#b243">[244,</ref><ref type="bibr" target="#b244">245]</ref>, such as exceptions, recursive method calls, return and jump statements. The notion of a dependence graph has also been extended to model behaviors of a program over a test suite. Baah et al. <ref type="bibr" target="#b39">[40]</ref> use a probabilistic program dependence graph to model the internal behaviors of a program, facilitating probabilistic analysis and reasoning about uncertain program behaviors, especially those that are likely associated with faults.</p><p>Wotawa et al. <ref type="bibr" target="#b377">[380]</ref> use first order logic to construct dependency-based models based on source code analysis of target programs to represent program structures and behaviors. Test cases with expected outputs are also transformed into observations in terms of first order logic. If the execution of a target program on a test case fails, conflicts between the test case and the models (which can be shown as equivalent to either static or dynamic slices <ref type="bibr" target="#b375">[378]</ref>) are used to identify suspicious statements responsible for the failure. For each statement, a default assumption is made to suggest whether the statement is correct or incorrect. These assumptions are to be revised during fault localization until the failure can be explained. The limitation is that their study only focuses on loop-free programs. To fix this problem, Mayer and Stumptner <ref type="bibr" target="#b245">[246]</ref> propose an abstraction-based model in which abstract interpretation <ref type="bibr" target="#b54">[55,</ref><ref type="bibr" target="#b77">78]</ref> is applied to handle loops, recursive procedures, and heap data structures. Additionally, abstract interpretation is used to improve the effectiveness of slice-based and other model-based fault localization techniques <ref type="bibr" target="#b246">[247]</ref>.</p><p>In addition to dependency-based and abstraction-based models, value-based models <ref type="bibr" target="#b195">[196,</ref><ref type="bibr" target="#b250">251]</ref> that represent data-flow information in programs are also applied to locate components that contain bugs. However, value-based models are more computationally intensive than dependency-based and are only practical for small programs <ref type="bibr" target="#b249">[250]</ref>.</p><p>We now discuss model checking-based fault localization techniques that rely on the use of model checkers to locate bugs <ref type="bibr" target="#b43">[44,</ref><ref type="bibr" target="#b66">67,</ref><ref type="bibr" target="#b132">133,</ref><ref type="bibr" target="#b133">134,</ref><ref type="bibr" target="#b135">136,</ref><ref type="bibr" target="#b136">137,</ref><ref type="bibr" target="#b137">138,</ref><ref type="bibr" target="#b199">200]</ref>. If a model does not satisfy the corresponding program specifications (implying that the model contains at least one bug), a model checker can be used to provide counter-examples showing how the specifications will be violated. A counter-example does not directly specify which parts of a model are associated with a given bug; however, it can be viewed as a failed test case to help identify the causality of the bug <ref type="bibr" target="#b134">[135]</ref>.</p><p>Ball et al. <ref type="bibr" target="#b43">[44]</ref> propose to use a model checker to explore all program paths except that of the counter-example. Successful execution paths (those that do not cause a failure) are recorded. An algorithm is used to identify the transitions that appear in the execution path of the counter-example but not in any successful execution paths. Program components related to these transitions are those that are likely to contain the causes of bugs. This technique suffers from two weaknesses. First, as suggested by Groce and Visser <ref type="bibr" target="#b135">[136]</ref>, generating all successful execution paths can be very expensive. Second, only one counter-example is used to locate bugs, even though the same bug may be triggered by multiple counter-examples. If this occurs, using only one example can introduce possible bias. To overcome these problems, Groce and Visser <ref type="bibr" target="#b135">[136]</ref> generate a small number of executions by exploring backwards from the original counter-example using a model checker. Additional executions so generated may or may not cause a failure. They then analyze the differences (in terms of transitions, invariants, and transformations) between failed and successful executions to identify possible locations of bugs.</p><p>Inspired by Lewis' counterfactual reasoning <ref type="bibr" target="#b215">[216]</ref>, Groce et al. <ref type="bibr" target="#b134">[135,</ref><ref type="bibr" target="#b136">137]</ref> represent program executions as sets of assignments to variables. They then define a distance metric to measure the distance between two program executions. Based on this metric, a model checker is used to generate one successful execution which is closest to the counter-example. The differences between the successful execution and the counter-example provide the possible explanations and locations of bugs. A tool, explain <ref type="bibr" target="#b137">[138]</ref>, is used to implement their technique. Techniques such as <ref type="bibr" target="#b43">[44,</ref><ref type="bibr" target="#b66">67,</ref><ref type="bibr" target="#b134">135,</ref><ref type="bibr" target="#b135">136,</ref><ref type="bibr" target="#b136">137,</ref><ref type="bibr" target="#b137">138]</ref> require at least one successful execution. Griesmayer et al. <ref type="bibr" target="#b132">[133,</ref><ref type="bibr" target="#b133">134]</ref> argue that a successful execution path can be very different from the path of the counter-example and cannot be easily identified using the above techniques. Instead of searching for successful execution paths with small changes from that of the original counterexample, they make minimal changes to the program so that the counter-example will not fail in the revised program. Assuming there is only one bug in one program component, Griesmayer et al. propose a technique with two steps: 1) revising the program specification in such a way that if any one component in the original program is changed, then the original specification cannot be satisfied, and 2) creating variants of the original program such that each variant has exactly one component replaced by a different component with an alternative behavior. For each variant, if a model checker can find a counter-example violating the revised specification, then the replaced component is potentially responsible for the failure. Since more than one component may be responsible for the failure, programmers have to manually inspect these components to identify the one containing the bug.</p><p>Experiments in <ref type="bibr" target="#b132">[133]</ref> use the model Checker CBMC, whereas extended studies using an additional model checker SATABS are reported in <ref type="bibr" target="#b133">[134]</ref>.</p><p>Based on a similar idea described in <ref type="bibr" target="#b132">[133,</ref><ref type="bibr" target="#b133">134]</ref>, KÓ§nighofer and Bloem <ref type="bibr" target="#b199">[200]</ref> use symbolic execution to locate bugs for imperative programs. An important point stated by Griesmayer <ref type="bibr" target="#b133">[134]</ref> is that the extensive use of a model checker makes their techniques less efficient (in terms of time) than those in <ref type="bibr" target="#b43">[44,</ref><ref type="bibr" target="#b66">67,</ref><ref type="bibr" target="#b135">136,</ref><ref type="bibr" target="#b136">137,</ref><ref type="bibr" target="#b137">138]</ref>; however, fault localization using model checkers can be used to refine results from less precise techniques.</p><p>Last but not least, the idea of modifying a program so that test cases that fail on the original program can be executed successfully on the modified program <ref type="bibr" target="#b132">[133,</ref><ref type="bibr" target="#b133">134,</ref><ref type="bibr" target="#b199">200]</ref> is also used in other studies for automatic bug fixing <ref type="bibr" target="#b94">[95,</ref><ref type="bibr" target="#b151">152,</ref><ref type="bibr" target="#b188">189,</ref><ref type="bibr" target="#b268">270]</ref>.</p><p>Additional model-based fault localization techniques also exist. They can be applied to functional programs <ref type="bibr" target="#b333">[336]</ref>, hardware description languages like VHDL <ref type="bibr" target="#b288">[290,</ref><ref type="bibr" target="#b373">376]</ref>, and spreadsheets <ref type="bibr" target="#b162">[163,</ref><ref type="bibr" target="#b168">169]</ref>. Studies such as <ref type="bibr" target="#b270">[272,</ref><ref type="bibr" target="#b374">377]</ref> make use of constraint solving, in which programs are automatically compiled into a set of constraints. In <ref type="bibr" target="#b96">[97]</ref>, DeMillo et al. propose a model for analyzing software failures and faults for debugging purposes. Failure modes and failure types are defined to identify the existence of program failures and to analyze the nature of program failures, respectively. Failure modes are used to answer the question "How do we know the execution of a program fails?" and failure types are used to answer the question "What is the failure?" When abnormal behavior is observed during program execution, the failure is classified by its corresponding failure mode. Referring to some pre-established relationships between failure modes and failure types, certain failure types can be identified as possible causes for the failure. Heuristics based on dynamic instrumentation (such as dynamic slice) and testing information are then used to reduce the search domain for locating the fault by predicting possible faulty statements. A significant drawback of using this model is that it is extremely difficult, if not impossible, to obtain an exhaustive list of failure modes because different programs can have very different abnormal behaviors and symptoms when they fail. As a result, we do not have a complete relationship between all possible failure modes and failure types, and we might not be able to identify possible failure types responsible for the failure being analyzed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.8.">Additional Techniques</head><p>In addition to those discussed above, there are other techniques for software fault localization. Many of them focus on specific program languages or testing scenarios. Listed below are a few examples.</p><p>Development of software systems, while enhancing functionality, will inevitably lead to the introduction of new bugs, which may not be detected immediately. Tracing the behavior changes to code changes can be highly time-consuming. Bohnet et al. <ref type="bibr" target="#b53">[54]</ref> propose a technique to identify recently introduced changes. Dynamic, static, and code change information is combined to reduce the large number of changes that may have impact on faulty executions of the system. In this way, root cause changes can be semi-automatically located.</p><p>In spite of using garbage collection, Java programs may still suffer from memory leaks due to unwanted references. Chen et al.</p><p>[69] develop an aspect-based tool, FindLeak, utilizing an aspect to gather memory consumption statistics and object references created during a program execution. Collected information is then analyzed to help detect memory leaks.</p><p>An implicit social network model is presented in <ref type="bibr" target="#b69">[70]</ref> to predict possible locations of faults using fault locations cited by similar historical bug reports retrieved from BRMS (bug report managing systems).</p><p>In <ref type="bibr" target="#b87">[88]</ref>, de Souza and Chaim propose a technique using integration coverage data to locate bugs. By ranking the most suspicious pairs of method invocations, roadmaps, which are sorted lists of methods to be investigated, are created.</p><p>Gong et al. <ref type="bibr" target="#b122">[123]</ref> propose an interactive fault localization technique, TALK, which incorporates programmers' feedback into spectrum-based fault localization techniques. Each time a programmer inspects a suspicious program element in the ranking generated by a fault localization technique, he or she can judge the correctness of the element and provide this information as feedback to re-order the ranking of elements that are not yet inspected. The authors demonstrate that using programmers' feedback can help increase the effectiveness of existing fault localization techniques.</p><p>To better understand a program's behavior, software developers must translate their questions into code-related queries, speculating about the causes of faults. Whyline <ref type="bibr" target="#b194">[195]</ref> is a debugging tool that avoids such speculation by enabling developers to select from a set of "why did" and "why didn't" questions derived from source code. Using a combination of static and dynamic slicing, and precise call graphs, the tool can find possible explanations of failures.</p><p>Authors of <ref type="bibr" target="#b71">[72]</ref> propose a software fault localization technique that mines bug signatures within a program. A bug signature is a set of program elements that are executed by most failed tests but not by successful tests in general. Bug signatures are ranked in descending order by a discriminative significance score indicating how likely it is to be related to the bug. This ranking is used to help identify the location of the bug.</p><p>Maruyama et al. <ref type="bibr" target="#b237">[238]</ref> indicate that the culprit of an overwritten variable is always the last write-access to the memory location where the bug first appeared. Removing such bugs begins with finding the last write, followed by moving the control point of execution back to the time when the last write was executed. Generally, the statement that makes the last write will be faulty.</p><p>Recently, some studies <ref type="bibr" target="#b84">[85,</ref><ref type="bibr" target="#b233">234,</ref><ref type="bibr" target="#b296">298,</ref><ref type="bibr" target="#b312">315,</ref><ref type="bibr" target="#b422">425]</ref> have applied information retrieval techniques to software fault localization. These studies use an initial bug report to rank the source code files in descending order based on their relevance to the bug report. The developers can then examine the ranking and identify the files that contain bugs. Unlike spectrum-based fault localization techniques, information retrieval-based techniques do not require program coverage information, but their generated ranking is based solely on source code files rather than on program elements with finer granularity such as statements, blocks, or predicates.</p><p>Algorithmic debugging (also called declarative debugging), first discussed in Shapiro's dissertation <ref type="bibr" target="#b322">[325]</ref> with more details in <ref type="bibr" target="#b325">[328,</ref><ref type="bibr" target="#b399">402]</ref>, decomposes a complex computation into a series of sub-computations to help locate program bugs. The outcome of each sub-computation is checked for its correctness with respect to given input values. Based on this, an algorithmic debugger is used to identify a portion of code that may contain bugs. One issue of applying this technique in practice is that testing oracles may not available for sub-computations.</p><p>Formula-based fault localization techniques <ref type="bibr" target="#b75">[76,</ref><ref type="bibr" target="#b108">109,</ref><ref type="bibr" target="#b179">180,</ref><ref type="bibr" target="#b180">181]</ref> rely on an encoding of failed execution traces into error trace formulae. By proving the unsatisfiability of an error trace formula using certain tools or algorithms, the programmer may capture the relevant statements causing the failure. Jose and Majumdar <ref type="bibr" target="#b179">[180,</ref><ref type="bibr" target="#b180">181]</ref> propose a technique, BugAssist, which uses a MAX-SAT solver to compute the maximal set of statements that may cause the failure from a failed execution trace. In <ref type="bibr" target="#b108">[109]</ref>, Ermis et al. introduce error invariants, which provide a semantic argument as to why certain statements of a failed execution trace are irrelevant to the root cause of the failure. By removing such statements, the bug can be located with less manual effort. A common weakness of these techniques <ref type="bibr" target="#b108">[109,</ref><ref type="bibr" target="#b179">180,</ref><ref type="bibr" target="#b180">181]</ref> is that they only report a set of statements that may be responsible for the failure without providing the exact input values that make the executions go to those statements. Christ et al. <ref type="bibr" target="#b75">[76]</ref> address this problem by reporting an extended study based on error invariants <ref type="bibr" target="#b108">[109]</ref> that encodes a failed execution trace into a flow-sensitive error trace formula. In addition to providing a set of statements that are relevant to the failure, they also specify how these statements can be executed using different input values. During program maintenance, source code may be modified to fix bugs or enhanced to support new functionalities. Regression testing is also conducted to prevent invalidation of previously tested functionality. If an execution fails, the programmer needs to find the failure-inducing changes. Crisp <ref type="bibr" target="#b300">[302]</ref> is a tool to build a compliant intermediate version of the program by adding a partial edit (i.e., a subset of recent changes) to the code before the maintenance is performed. This tool helps programmers focus on a specific portion of changes in the code during the debugging.</p><p>Concurrent programs are becoming more prevalent in applications that affect our everyday lives. However, due to their nondeterminism, it is very difficult to debug these programs. It is proposed that injecting random timing noise into many points within a program can assist in eliciting bugs. Once the bug is triggered, the objective is to identify a small set of points that indicate the source of the bug. In <ref type="bibr" target="#b395">[398]</ref>, the authors propose an algorithm that iteratively samples a lower dimensional projection of the program space and identifies candidate relevant points. Refer to Section 7.7 for more discussion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.9.">Distribution of Papers in Our Repository</head><p>Figure <ref type="figure" target="#fig_0">3</ref> shows the distribution of papers in our repository across all categories. Spectrum-based is the most dominant category with 35% of all the papers<ref type="foot" target="#foot_0">4</ref> followed by slice-based, which contains 20%, and model-based, which contains 19%. The number of papers in each of the statistics-based, program state-based, and others categories is between 7% and 9%. The data-mining category and machine learning-based have the fewest number of papers with only 1% and 2%. Below we present the distribution using a different classification: static and dynamic slice-based, execution slice and program spectrum-based, and other techniques (see Footnote 4 for the rationale). Figure <ref type="figure">4</ref> gives the number of papers published each year with respect to this new classification. The first (leftmost) bar gives the total number of papers from 1977 to 1995, the last (rightmost) only counts papers between January and November 2014, and those in between give the number in the corresponding year. Figure <ref type="figure">5</ref> displays the information from a cumulative point of view. Each data point gives the cumulative number of papers published up to the corresponding year. From these two figures, we make the following observations:</p><p>â¢  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Subject Programs</head><p>Table <ref type="table" target="#tab_11">6</ref> presents a list of popular subject programs used to study the effectiveness of different fault localization techniques. This table gives the name, the size (lines of code), a brief description of the functionality, the programming language, and the number of papers that use this program. We notice that the Siemens suite is the most frequently used. However, every program in the suite is very small-sized with less than 600 lines of code (not including blank lines). Another important point worth noting is that most of the bugs used in the experiments are mutation-based artificially injected bugs. Although mutation has been shown to be an effective approach to simulate realistic faults <ref type="bibr" target="#b28">[29,</ref><ref type="bibr" target="#b102">103,</ref><ref type="bibr" target="#b222">223,</ref><ref type="bibr" target="#b266">268]</ref>, some real-life bugs are very delicate and cannot be modeled by simple first-order mutants.</p><p>With the introduction of advanced techniques in software fault localization, more accurate cross comparisons of their effectiveness are in demand. Furthermore, the feasibility of a technique and the benefits of using it should be demonstrated in an industry-like environment, in contrast to an academic laboratory-oriented controlled environment. In response to these challenges, more and more studies use larger and complex programs in their experiments. Another trend is to use bugs actually introduced at the development phase such as those from Bugzilla for the gcc program and the bugs for Mozilla firefox.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Evaluation Metrics</head><p>Since a program bug may span multiple lines of code, which are not necessarily contiguous or in the same module, the examination of suspicious code stops as long as one faulty location is identified. This is because the focus is to help programmers find a good starting point to initiate the bug-fixing process rather than to provide the complete set of code that must be modified, deleted, or added with respect to each bug. With this in mind, the effectiveness of a software fault localization technique is defined as the percentage of code<ref type="foot" target="#foot_1">5</ref> that needs to be examined before the first faulty location for a given bug is identified.</p><p>The T-score <ref type="bibr" target="#b222">[223,</ref><ref type="bibr" target="#b301">303]</ref> estimates the percentage of code a programmer need not examine before the first faulty location is found.</p><p>A program dependence graph (PDG) is constructed, and the nodes are marked as faulty if they are reported by differencing the correct and the faulty versions of the program, and blamed if they are reported by the localizer. For a node n, the corresponding k-dependency sphere set (DS k ) is the set of nodes for which there is a directed path of length no more than k that joins n and them. For example, DS 0 contains the node n itself. DS 1 includes not only n but also all the nodes such that there is an edge from them to n, or from n to them. For a report R (i.e., a set of nodes the localizer indicates as possible locations of the bug), let DS * (R) be the smallest dependency sphere that includes a faulty node. The T-score of a given R is computed using the ratio of the number nodes in its smallest dependency sphere to the number of nodes in the entire PDG:</p><formula xml:id="formula_11">* | ( ) | 1 | | DS R T score PDG - = -</formula><p>The use of T-score requires that programmers are able to distinguish defects from non-defects at each location and can do so at the same cost for each location considered <ref type="bibr" target="#b76">[77]</ref>. Furthermore, it assumes that programmers can follow the control-and/or datadependency relations among statements while searching for faults.</p><p>The EXAM <ref type="bibr" target="#b187">[188,</ref><ref type="bibr" target="#b363">366,</ref><ref type="bibr" target="#b364">367,</ref><ref type="bibr" target="#b366">369,</ref><ref type="bibr" target="#b371">374]</ref> or Expense <ref type="bibr" target="#b184">[185]</ref> score is the percentage of statements in a program that has to be examined until the first faulty statement is reached:</p><p>EXAM score = Number of statements examined Total number of statements in the program Ã100%</p><p>In <ref type="bibr" target="#b184">[185]</ref>, the authors use the executable statements instead of the total number of statements. For techniques such as <ref type="bibr" target="#b223">[224]</ref> that generate a ranking of predicates (instead of statements) sorted in descending order of their fault relevance, the EXAM score can also be computed in terms of percentage of predicates that need to be examined. The P-score <ref type="bibr" target="#b417">[420]</ref> defined as follows uses the same approach:</p><formula xml:id="formula_12">1 100% based index of P in L P score number of predicates in L - - = Ã</formula><p>where L is a list of sorted predicates as described above, P is the most fault-relevant predicate to a fault, and the notation of 1based index means the first predicate of L is indexed by 1 (rather than 0). Studies in <ref type="bibr" target="#b363">[366,</ref><ref type="bibr" target="#b364">367,</ref><ref type="bibr" target="#b366">369,</ref><ref type="bibr" target="#b368">371,</ref><ref type="bibr" target="#b371">374]</ref> also provide figures that report the percentage of all the faulty versions of a given program in which faults can be located by the examination of an amount of code less than or equal to a given EXAM score. A similar idea is subsequently used by Gong et al. to define the Nscore <ref type="bibr" target="#b123">[124]</ref>:</p><formula xml:id="formula_13">det 100% ected statistic N N score N - = Ã</formula><p>When compared to T-score, EXAM is easier to understand, as it is directly proportional to the amount of code to be examined rather than to an indirect measurement in terms of the amount of code that does not need to be examined (as what T-score does). In summary, the lower the EXAM score (or Expense or P-score), the more effective the technique, whereas it is the opposite for the T-score (i.e., the lower the T-score, the less effective the technique).</p><p>The Wilcoxon signed-rank test (an alternative to the paired Student's t-test when a normal distribution of the population cannot be assumed) can also be used as a metric to present an evaluation from a statistical point of view <ref type="bibr" target="#b367">[370,</ref><ref type="bibr" target="#b368">371]</ref>. If we assume a technique Î± is more effective than another technique Î², we examine the one-tailed alternative hypothesis that Î² requires the examination of an equal or greater number of statements than Î±. The confidence with which the alternative hypothesis can be accepted helps us determine whether Î± is statistically more effective than Î². Another metric is the total (cumulative) number of statements that need to be examined to locate all bugs of a given scenario <ref type="bibr" target="#b363">[366,</ref><ref type="bibr" target="#b364">367,</ref><ref type="bibr" target="#b366">369,</ref><ref type="bibr" target="#b368">371]</ref>. This metric gives a global view in contrast to the Wilcoxon test, which focuses more on individual pairwise comparisons.</p><p>An effective fault localization technique should assign a unique suspiciousness value to each statement; in practice, however, the same suspiciousness may be assigned to different statements. If this happens, two different levels of effectiveness result: the best and the worst. The best effectiveness assumes that the faulty statement is the first to be examined among all the statements of the same suspiciousness. The worst effectiveness occurs if the faulty statement is the last to be examined. Reporting only the worst case (such as <ref type="bibr" target="#b27">[28,</ref><ref type="bibr" target="#b164">165]</ref>) or only the best case (such as the P-score in <ref type="bibr" target="#b417">[420]</ref>) may not give the complete picture because it is very unlikely that programmers will face the worst or the best case scenario in practice. In most cases, they will see something between the best and the worst. It is straightforward to compute the average effectiveness from the best and worst effectiveness. However, the converse is not true. Providing the average effectiveness offers no insights on where the best and worst effectiveness may lie, and, more seriously, can be ambiguous and misleading. For example, two techniques can have the same average effectiveness, but one has a smaller range between the best and the worse cases while the other has a much wider range. As a result, these two techniques should not be viewed as equally effective as suggested by their average effectiveness. Thus, a better approach is to report the effectiveness for both the best and the worst cases such as <ref type="bibr" target="#b363">[366,</ref><ref type="bibr" target="#b364">367,</ref><ref type="bibr" target="#b366">369,</ref><ref type="bibr" target="#b371">374]</ref> and perform the cross evaluation under each scenario.</p><p>All the evaluation metrics discussed above are based on an assumption of perfect bug detection, which is the same as having an ideal user <ref type="bibr" target="#b301">[303]</ref> to examine suspicious code to determine whether it contains bugs. That is, a bug in a statement will be detected if the statement is examined. However, a recent study <ref type="bibr" target="#b283">[285]</ref> indicates that such an assumption does not always hold in practice. If so, then the number of statements that need to be examined to find the bug may increase.</p><p>There are other factors that may affect the effectiveness of a software fault localization technique. Bo et al. <ref type="bibr" target="#b52">[53]</ref> present a metric, Relative Expense, to study the impact of test set size on the Expense score. More discussion regarding the impact of test cases on fault localization appears in Section 7.2. Monperrus <ref type="bibr" target="#b256">[258]</ref> suggests that effectiveness should be evaluated with respect to different classes of faults. It is possible that one technique is more effective than another for bugs that can be triggered consistently under some well-defined conditions (namely, Bohrbugs in <ref type="bibr" target="#b138">[139]</ref>), but less effective for bugs whose failures cannot be systematically reproduced (namely, Mandelbugs). Instrumentation overhead, interference within multiple bugs, and programming language also have an impact on effectiveness of fault localization <ref type="bibr" target="#b89">[90,</ref><ref type="bibr" target="#b330">333]</ref>.</p><p>Last but not least, it is important to realize that software fault localization techniques should not be evaluated only in terms of effectiveness as described above <ref type="bibr" target="#b283">[285]</ref>. Other factors such as computational overhead, time and space for data collection, amount of human effort, and tool support need also be considered. In addition, we also need to emphasize user-centered aims such as how programmers actually debug, how they reveal the cause-effect chains of failures, and how they decide upon solutions beyond a suspiciousness ranking of code. Unfortunately, none of the published studies has reported a comprehensive evaluation covering all these aspects.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Software Fault Localization Tools</head><p>One challenge for many empirical studies on software fault localization is that they require appropriate tool support for automatic or semi-automatic data collection and suspiciousness computation. Table <ref type="table" target="#tab_13">7</ref> gives a list of commonly used tools, including name, a brief description, availability, and which papers use the tool. Of the 63 tools, two are commercial, 16 are open source, 10 are openly accessible but the source code is not available, and the rest may be acquired by contacting their authors. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Critical Aspects</head><p>In this section, we explore some critical aspects of software fault localization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">Fault Localization with Multiple Bugs</head><p>The majority of published papers in software fault localization focus on programs with a single bug (i.e., each faulty program has exactly one bug). However, this is not the case for real-life software, which in general contains multiple bugs. Results of a study <ref type="bibr" target="#b142">[143]</ref> based on an analysis of fault and failure data from two large, real-world projects show that individual failures are often triggered by multiple bugs spread throughout the system. Another study <ref type="bibr" target="#b230">[231]</ref> also reports a similar finding. This observation raises doubts concerning the validity of some heuristics and assumptions based on the single-bug scenario. In response, studies have been conducted using programs with multiple bugs <ref type="bibr" target="#b86">[87,</ref><ref type="bibr" target="#b89">90,</ref><ref type="bibr" target="#b100">101,</ref><ref type="bibr" target="#b101">102,</ref><ref type="bibr" target="#b124">125,</ref><ref type="bibr" target="#b171">172,</ref><ref type="bibr" target="#b172">173,</ref><ref type="bibr" target="#b183">184,</ref><ref type="bibr" target="#b223">224,</ref><ref type="bibr" target="#b291">293,</ref><ref type="bibr" target="#b328">331,</ref><ref type="bibr" target="#b329">332,</ref><ref type="bibr" target="#b356">359,</ref><ref type="bibr" target="#b392">395,</ref><ref type="bibr" target="#b420">423]</ref>.</p><p>A popular assumption is that multiple bugs in the same program perform independently. Debroy and Wong <ref type="bibr" target="#b89">[90]</ref> examine possible interactions that may take place between different bugs, and they find that such interferences may manifest themselves to either trigger or mask some execution failures. Results based on their experiments indicate that destructive interference (when execution fails due to a bug but no longer fails when another bug is added to the same program) is more common than constructive interference (when execution fails in the presence of two bugs in the same program but does not in the presence of either bug alone) because failures are masked more often than triggered by additional bugs. It is also possible that a program with multiple bugs suffers from both destructive and constructive interferences. DiGiuseppe and Jones <ref type="bibr" target="#b101">[102]</ref> also report that multiple bugs have an adverse impact on the effectiveness of spectrum-based techniques.</p><p>One way to debug a multiple-bug program is to follow the one-bug-at-a-time approach. If a program experiences some failures while it is executed against test cases of a given test suite, this approach helps programmers find and fix a bug. Then, the modified program is tested again using all the test cases in the given test suite. If any of the executions fail, additional debugging is required to find and fix the next bug. This process continues until no failure is observed. At this point, even though the program may still contain other bugs, they cannot be detected by the current suite of test cases. This approach has been adopted in studies using the DStar technique <ref type="bibr" target="#b368">[371]</ref> and a reasoning fault localization technique based on a Bayesian reasoning framework <ref type="bibr" target="#b13">[14]</ref>. A potential weakness of most techniques based on Bayesian reasoning (e.g., <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b63">64,</ref><ref type="bibr" target="#b192">193]</ref>) is that they all assume program components fail independently; in other words, interferences between multiple bugs are ignored, which is not necessarily the case in practice.</p><p>In <ref type="bibr" target="#b183">[184]</ref>, Jones et al. suggest that multiple bugs in a program can be located in parallel. The first step is to group failed test cases into different fault-focusing clusters such that those in the same cluster are related to the same bug. Then, the Tarantula fault localization technique <ref type="bibr" target="#b184">[185]</ref>, failed tests in each cluster, and all the successful tests are used to identify the suspicious code for the corresponding bug.</p><p>There are different ways to cluster failed test cases. One approach is to use execution profiles. Podgurski et al. <ref type="bibr" target="#b291">[293]</ref> apply supervised and unsupervised pattern classifications as well as multivariate visualization to execution profiles of failed test cases in order to group them into fault-focusing clusters. Steimann and Frenkel <ref type="bibr" target="#b329">[332]</ref> use the Weil-Kettler algorithm, a technique widely used in integer linear programming, to cluster failed test cases.</p><p>However, clustering based on the similarity between execution profiles may not reflect an accurate causation relationship between certain faults and the corresponding failed executions. For example, two failed tests, even associated with the same bug, may have very different execution profiles. It is possible for clustering techniques based on execution profiles to separate these two failed tests into different clusters.</p><p>To overcome this problem, Liu and Han <ref type="bibr" target="#b172">[173,</ref><ref type="bibr" target="#b225">226]</ref> further investigate the due-to relationship between failed tests and underlying bugs. They apply SOBER <ref type="bibr" target="#b171">[172]</ref> to each failed test case and all the successful tests to generate a corresponding predicate ranking. The weighted Kendall tau distance is computed between these rankings. The distance between two rankings is small if they identify similar suspicious predicates. It also implies the rank-proximity (R-proximity) between them is high. Failed test cases with high R-proximity are clustered together, as they are likely to have the same due-to relationship.</p><p>Other variations include the use of more effective fault localization techniques (such as Crosstab <ref type="bibr" target="#b366">[369]</ref>, RBF <ref type="bibr" target="#b364">[367]</ref>, and DStar <ref type="bibr" target="#b368">[371]</ref>) instead of Tarantula or SOBER, or using only a subset (refer to Section 7.2), rather than all, of the successful tests. These variations are yet to be explored.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">Inputs, Outputs and Impact of Test Cases</head><p>In addition to failed and successful test cases, many (although not all) techniques discussed in Section 3 also need information about how the underlying program/model is executed with respect to each test case. Such details can be provided via different execution profiles (e.g., coverage in terms of statement, predicate, etc.).</p><p>The output of many spectrum-based (Section 3.2) fault localization techniques (such as Tarantula) is a suspiciousness ranking with statements ranked in descending order of their suspiciousness values (such as the rightmost column of Table <ref type="table">3</ref>). To locate a bug, programmers will examine statements at higher positions of a ranking before statements at lower positions because the former, with higher suspiciousness values, are more likely to contain bugs than the latter. On the other hand, many slice-based techniques (Section 3.1) only return a set of statements without specific ranking. Referring to The suite of test cases used in the program debugging is another important factor that may affect the effectiveness of a fault localization technique. Some fault localization techniques (e.g., <ref type="bibr" target="#b20">[21,</ref><ref type="bibr" target="#b76">77,</ref><ref type="bibr" target="#b132">133,</ref><ref type="bibr" target="#b133">134,</ref><ref type="bibr" target="#b139">140,</ref><ref type="bibr" target="#b301">303,</ref><ref type="bibr" target="#b397">400]</ref>) focus on locating program bugs using either a single failed test case or a single failed test case with a few successful test cases. Others (e.g., <ref type="bibr" target="#b184">[185,</ref><ref type="bibr" target="#b221">222,</ref><ref type="bibr" target="#b222">223,</ref><ref type="bibr" target="#b363">366,</ref><ref type="bibr" target="#b364">367,</ref><ref type="bibr" target="#b366">369,</ref><ref type="bibr" target="#b370">373,</ref><ref type="bibr" target="#b371">374,</ref><ref type="bibr" target="#b372">375]</ref>) use multiple failed and successful test cases. These latter techniques take advantage of more test cases than the former, so it is likely that the latter are more effective in locating program bugs. For example, Tarantula <ref type="bibr" target="#b184">[185]</ref> which uses multiple failed and multiple successful tests, has been shown to be more effective than nearest neighbor <ref type="bibr" target="#b301">[303]</ref>, a technique that only uses one failed and one successful test. However, it is important to note that by considering only one successful and one failed test, it may be possible to align the two test cases and arrive at a more detailed root-cause explanation of the failure <ref type="bibr" target="#b76">[77]</ref> when compared to the techniques that take into account multiple successful and failed test cases simultaneously.</p><p>Although techniques using multiple failed and multiple successful test cases may have better fault localization effectiveness, an underlying assumption is that a large set of such tests is available. This may also lead to the assumption of existence of an oracle that can be used to automatically determine whether an execution is successful or failed. Unfortunately, this may not be true in the real world, as a test oracle can be incomplete, out-of-date, or ambiguous. Studies such as <ref type="bibr" target="#b159">[160,</ref><ref type="bibr" target="#b160">161]</ref> have reported that for many systems and for much of testing as currently practiced in industry, testers do not have formal specifications, assertions, or automated oracles. As a result, they face the potentially daunting task of manually checking the system's behavior for all test cases executed. In response to this challenge, researchers have presented various solutions <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b146">147,</ref><ref type="bibr" target="#b147">148]</ref>. Nevertheless, how to generate an automated test oracle still remains an issue that needs to be further explored. Hence, we cannot take it for granted that there are multiple tests with all execution results (success or failure) known.</p><p>Using a test suite that does not achieve high coverage of the target program may have an adverse impact on the fault localization results. During test generation, different criteria (e.g., requirements-based boundary value analysis, or white-box-based statement or decision coverage) can be used as guidance. Diaz et al. <ref type="bibr" target="#b99">[100]</ref> use a meta-heuristic technique (a so-called Tabu Search approach) to automatically generate a test suite to obtain maximum branch coverage. In <ref type="bibr" target="#b32">[33,</ref><ref type="bibr" target="#b33">34,</ref><ref type="bibr" target="#b34">35]</ref>, Artzi et al. present a tool called Apollo to generate test cases automatically based on combined concrete and symbolic executions. Apollo first executes a program on an empty input and records a path constraint that reflects the program's executed control-flow predicates. New inputs are then generated by changing predicates in the path constraint and solving the resulting constraints. Executing the program on these inputs produces additional control-flow paths. Failures observed during executions are recorded. This process is repeated until a pre-defined threshold of statements coverage is reached, a sufficient number of faults are detected, or the time budget is exhausted. Authors of <ref type="bibr" target="#b175">[176]</ref> suggest that test suites satisfying branch coverage are better than those satisfying statement coverage in effectively supporting fault localization, whereas authors of <ref type="bibr" target="#b176">[177]</ref> claim that test suites satisfying MC/DC coverage are better than those satisfying branch coverage.</p><p>Furthermore, in <ref type="bibr" target="#b317">[320]</ref>, Santelices et al. study the fault localization effectiveness of Tarantula using three types of program coverage-statements, branches, and define-use pair. They conclude that Tarantula using define-use pair coverage is more effective and stable than that using branch coverage, which is more effective than that using statement coverage. Based on this, the authors further propose to use a combination of the three types of coverage to achieve better fault localization effectiveness.</p><p>Some researchers argue that it is not efficient to use all the test cases in a given test suite to locate program bugs. Instead, they use either test case reduction by selecting only a subset of test cases or test case prioritization by assigning different priorities to different cases to improve the efficiency of fault localization techniques <ref type="bibr" target="#b44">[45,</ref><ref type="bibr" target="#b47">48,</ref><ref type="bibr" target="#b52">53,</ref><ref type="bibr" target="#b61">62,</ref><ref type="bibr" target="#b62">63,</ref><ref type="bibr" target="#b121">122,</ref><ref type="bibr" target="#b125">126,</ref><ref type="bibr" target="#b126">127,</ref><ref type="bibr" target="#b127">128,</ref><ref type="bibr" target="#b145">146,</ref><ref type="bibr" target="#b174">175,</ref><ref type="bibr" target="#b175">176,</ref><ref type="bibr" target="#b345">348,</ref><ref type="bibr" target="#b359">362,</ref><ref type="bibr" target="#b396">399]</ref>. One approach of test prioritization is to give higher priority to failed test cases that execute fewer statements, as they provide more information and minimize the search domain <ref type="bibr" target="#b261">[263]</ref>. In <ref type="bibr" target="#b118">[119]</ref>, the authors propose an approach to generate balanced test suites in order to improve fault localization effectiveness by cloning failed test cases a suitable number of times to match the number of successful test cases. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3">Coincidental Correctness</head><p>The concept of coincidental correctness, introduced by Budd and Angluin in <ref type="bibr" target="#b58">[59]</ref>, discusses the circumstances under which a test case produces one or more errors in the program state but the output of the program is still correct. This phenomenon can occur for many reasons. For example, given a faulty statement in which a variable is assigned with an incorrect value, in one test execution, this value may affect the output of the program and result in a failure. However, in another test execution, the value of this variable is later overwritten. Thus, the output of the program is not affected and failure is not triggered. Studies discussing coincidental correctness have been reported in recent years <ref type="bibr" target="#b43">[44,</ref><ref type="bibr" target="#b45">46,</ref><ref type="bibr" target="#b158">159,</ref><ref type="bibr" target="#b217">218,</ref><ref type="bibr" target="#b238">239,</ref><ref type="bibr" target="#b253">254,</ref><ref type="bibr" target="#b352">355,</ref><ref type="bibr" target="#b416">419]</ref>.</p><p>Coincidental correctness can negatively impact the effectiveness of fault localization techniques. Ball et al. <ref type="bibr" target="#b43">[44]</ref> claim that this is the reason why their technique fails to locate bugs in 3 out of 15 single-bug programs. Wang et al. <ref type="bibr" target="#b352">[355]</ref> conclude that the effectiveness of Tarantula decreases when the frequency of coincidental correctness is high and increases when the frequency is low.</p><p>To overcome this problem, Masri and Assi <ref type="bibr" target="#b238">[239]</ref> propose a technique to clean test suites by removing test cases that may introduce possible coincidental correctness for better fault localization effectiveness. Their technique is further enhanced by using fuzzy test suites and clustering analysis <ref type="bibr" target="#b239">[240]</ref>. Bandyopadhyay and Ghosh <ref type="bibr" target="#b45">[46]</ref> suggest a different approach by first measuring the likelihood of coincidental correctness of a successful test case based on the average proximity of its execution profile with that of all failed test cases. Such likelihood is assigned as the weight of the corresponding successful test case and used for subsequent suspiciousness computation. Zhang et al. <ref type="bibr" target="#b416">[419]</ref> present FOnly, a technique that relies only on failed test cases to locate bugs statistically, even though fault localization commonly relies on both successful and failed tests. Authors of <ref type="bibr" target="#b415">[418]</ref> propose a fault localization technique, BlockRank, to calculate, contrast, and propagate the mean edge profiles between successful and failed executions to alleviate the impact of coincidental correctness.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.4">Faults Introduced by Missing Code</head><p>One claim that can generally be made against fault localization techniques discussed in this survey is that they are incapable of locating bugs resulting from missing code. For example, slice-based techniques will never be able to locate such bugs -since the faulty code is not even in the program. Therefore, this code will not appear in any of the slices. Based on this, one might conclude that most fault localization techniques are inappropriate for locating such bugs. Although this argument seems to be reasonable, it overlooks some important details. Admittedly, the missing code cannot be found in any of the slices. However, the omission of the code may trigger some adverse effects elsewhere in the program execution, such as the traversal of an incorrect branch in a decision statement. An abnormal program execution path (and, thus, the appearance of unexpected code in the corresponding slice) with respect to a given test case should hint to programmers that some omitted statements may be leading to control-flow anomalies. This implies that we are still able to identify suspicious code related to the omission error, such as the affected decision branch using slice-based techniques. A similar argument can also be made for other techniques, including but not limited to program spectrum-based (Section 3.2), statistics-based (Section 3.3), and program state-based techniques (Section 3.4). Thus, even though software fault localization techniques may not be able to pinpoint the exact locations of missing code, they can still provide a good starting point for the search.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.5">Combination of Multiple Fault Localization Techniques</head><p>The effectiveness of a fault localization technique is very much scenario dependent, affected by successful and failed test cases, program structures and semantics, nature of the bugs, etc. There is no single technique superior to all others in every scenario. Thus, it makes sense to combine multiple techniques and retain the good qualities of individual techniques while mitigating the drawbacks of each. In <ref type="bibr" target="#b90">[91,</ref><ref type="bibr" target="#b91">92]</ref> In <ref type="bibr" target="#b347">[350]</ref>, Wang et al. use two different search algorithms, simulated annealing and genetic algorithm, to find approximate optimal compositions from 22 existing spectrum-based fault localization techniques. However, a search-based approach lacks flexibility and efficiency. For flexibility, the search must be re-performed to update the optimal composition whenever a new fault localization technique is included. Also, an optimal composition for one program may not be the optimal for another program, which means the search process needs to be re-performed when the subject program changes. For efficiency, the potential large size of search space makes the search process very time consuming.</p><p>Spectrum-based and slice-based techniques are both widely used. Combinations between techniques from these two categories have been reported <ref type="bibr" target="#b27">[28,</ref><ref type="bibr" target="#b164">165,</ref><ref type="bibr" target="#b213">214,</ref><ref type="bibr" target="#b360">363]</ref>. For example, in <ref type="bibr" target="#b27">[28]</ref>, Alves et al. combine Tarantula and dynamic slicing to improve fault localization effectiveness. First, all the statements in a program are ranked based on their suspiciousness calculated by using the Tarantula technique. Then, a dynamic slice with respect to a failure-indicating variable at the failure point is generated.</p><p>Statements not in this slice will be removed from the ranking to further reduce the search domain. In <ref type="bibr" target="#b187">[188]</ref> Hofer and Wotawa <ref type="bibr" target="#b164">[165]</ref> emphasize that spectrum-based fault localization techniques (e.g., Ochiai <ref type="bibr" target="#b11">[12]</ref>) operated at a basic block level do not provide fine-grained results, whereas techniques based on slicing-hitting-set-computation (e.g., the HS-Slice algorithm <ref type="bibr" target="#b376">[379]</ref>) sometimes produce an undesirable ranking with statements (such as constructors), which are executed by many test cases, at the top. To eliminate these drawbacks, techniques of these two types should be combined.</p><p>Other combinations have also been explored. In <ref type="bibr" target="#b32">[33]</ref>, Artzi et al. combine Tarantula and a technique for output mapping to reduce the number of statements that need to be examined. A similar approach is repeated in which Tarantula is replaced by Ochiai and Jaccard <ref type="bibr" target="#b33">[34]</ref>. In <ref type="bibr" target="#b128">[129]</ref>, Gopinath et al. apply spectrum-based localization in synergy with specification-based analysis to more accurately locate bugs. The key idea is that unsatisfiability analysis of violated specifications, enabled by SAT technology, can be used to compute unsatisfiable cores, including statements that are likely to contain bugs. In <ref type="bibr" target="#b60">[61]</ref>, Burger and Zeller propose a technique, JINSI, which combines delta debugging and dynamic slicing for effective fault localization. JINSI takes a single failed execution and treats it as a series of object interactions (e.g., method calls and returns) that eventually produce the failure. The number of interactions will be reduced to the minimum number required to reproduce the failure, which will reduce the search space needed to locate the corresponding bug.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.6">Ties within Fault Localization Rankings</head><p>As discussed earlier (referring to Section 3.2), statements with the same suspiciousness are tied for the same position in a ranking. Results of a study by Xu et al. <ref type="bibr" target="#b390">[393]</ref>, using three fault localization techniques on four sets of programs, show that the symptom of assigning the same suspiciousness to multiple statements (i.e., the existence of ties in a produced ranking) appears everywhere and is not limited to any particular technique or program. Under such a scenario, the total number of statements that a programmer needs to examine in order to find the bugs may vary considerably. In response, two levels of effectiveness, the best and the worst, are computed (see Section 5: Evaluation Metrics). In practice, the more the ties, the bigger the difference between the best and the worst effectiveness. Ties also make the exact effectiveness of a fault localization technique more uncertain.</p><p>In voting scenarios when voters are unable to select between two or more alternatives, the candidates are ranked based on some key or natural ordering, such as an alphabetical ordering, to break ties. Similarly, when two statements are tied for the same ranking, the line numbers assigned to them in a text editor can serve as the key. Other techniques such as confidence-based strategy and data dependency-based strategy are also used to break ties <ref type="bibr" target="#b366">[369,</ref><ref type="bibr" target="#b363">366,</ref><ref type="bibr" target="#b383">386,</ref><ref type="bibr" target="#b390">393]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.7">Fault Localization for Concurrency Bugs</head><p>Concurrent programs suffer most from three kinds of access anomalies: data race <ref type="bibr" target="#b31">[32,</ref><ref type="bibr" target="#b318">321]</ref>, atomicity violation <ref type="bibr" target="#b109">[110,</ref><ref type="bibr" target="#b112">113,</ref><ref type="bibr" target="#b114">115]</ref>, and atomic-set serializability violations <ref type="bibr" target="#b23">[24,</ref><ref type="bibr" target="#b43">44]</ref>.</p><p>Among the approaches that have mushroomed in recent years, predictive analysis-based techniques haven drawn significant attention <ref type="bibr" target="#b110">[111,</ref><ref type="bibr" target="#b112">113,</ref><ref type="bibr" target="#b114">115,</ref><ref type="bibr" target="#b115">116,</ref><ref type="bibr" target="#b319">322,</ref><ref type="bibr" target="#b346">349]</ref>. Generally speaking, these techniques record a trace of program execution, statically generate other permutations of these events, and expose unexercised concurrency bugs. One potential problem of these techniques is that they may sometimes report a large number of false positives. For example, only 6 of 97 reported atomicity violations in a study using Atomizer (a dynamic atomicity checker) are real <ref type="bibr" target="#b115">[116]</ref>. On the contrary, a study in <ref type="bibr" target="#b326">[329]</ref> using a different tool, Penelope, for atomicity violations detection reports no false positive.</p><p>Tools such as Chord <ref type="bibr" target="#b260">[262]</ref> and RacerX <ref type="bibr" target="#b105">[106]</ref> can statically analyze a program to find concurrency bugs. However, since all paths need to be explored, it is impractical to apply these tools to large, complicated programs. A runtime analysis (such as <ref type="bibr" target="#b143">[144,</ref><ref type="bibr" target="#b318">321,</ref><ref type="bibr" target="#b389">392]</ref>), on the other hand, is less powerful than a static analysis but also produces fewer false alarms. The drawback is that only faults manifested in some specific executions can be detected.</p><p>Another approach for bug localization in concurrent programs is to use model checking <ref type="bibr" target="#b59">[60,</ref><ref type="bibr" target="#b189">190,</ref><ref type="bibr" target="#b259">261,</ref><ref type="bibr" target="#b321">324]</ref>. For instance, Shacham et al. <ref type="bibr" target="#b321">[324]</ref> use a model checker to construct the evidence for data race reported by the lockset algorithm. However, due to the possible exponential size of the search space, it is difficult to adopt this approach for large-sized programs without compromising its detection capability.</p><p>There are other techniques for detecting concurrency bugs. For example, Flanagan and Freund use a prototype tool JUMBLE to explore the non-determinism of relaxed memory models and to detect destructive races in the program <ref type="bibr" target="#b113">[114]</ref>. Park et al. apply a CTrigger testing framework <ref type="bibr" target="#b280">[282]</ref> to detect real atomicity violations by controlling the program execution to exercise lowprobability thread inter-leavings. Park also presents a study to debug non-deadlock concurrency bugs <ref type="bibr" target="#b281">[283]</ref>. Wang et al. <ref type="bibr" target="#b350">[353]</ref> propose a technique to locate buggy shared memory accesses that are responsible for triggering concurrency bugs. Authors of <ref type="bibr" target="#b342">[345]</ref> propose a tool, MEMSAT, to help in debugging memory models. Koca et al. <ref type="bibr" target="#b197">[198]</ref> locate faults in concurrency programs using an idea similar to spectrum-based fault localization techniques.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.8">Spreadsheet Fault Localization</head><p>Spreadsheet systems represent a landmark in the history of generic software products. It is estimated that 95% of all U.S. firms use spreadsheets for financial reporting <ref type="bibr" target="#b278">[280]</ref>, 90% of all analysts in the industry perform calculations in spreadsheets <ref type="bibr" target="#b278">[280]</ref> and 50% of all spreadsheets are the basis for decisions <ref type="bibr" target="#b155">[156]</ref>. Such wide usage, however, has not been accompanied by effective mechanisms for bug prevention and detection, as shown by studies such as <ref type="bibr" target="#b276">[278,</ref><ref type="bibr" target="#b279">281]</ref>. As a result, bugs in spreadsheets are to be blamed for a long list of real problems compiled and available at the European Spreadsheet Risk Interest Group's (EuSpRIG) web site (http://www.eusprig.org/). A recent study by Reinhart and Rogoff <ref type="bibr" target="#b298">[300]</ref> also gives a similar conclusion. In response to this, many studies regarding spreadsheet fault localization have been reported <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b2">3,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b55">56,</ref><ref type="bibr" target="#b156">157,</ref><ref type="bibr" target="#b157">158,</ref><ref type="bibr" target="#b161">162,</ref><ref type="bibr" target="#b163">164,</ref><ref type="bibr" target="#b168">169,</ref><ref type="bibr" target="#b308">311,</ref><ref type="bibr" target="#b311">314]</ref>.</p><p>A model-based spreadsheet fault localization technique is presented in <ref type="bibr" target="#b168">[169]</ref>, using an extended hitting-set algorithm and userspecified or historical test cases and assertions to identify possible error causes. Hofer et al. <ref type="bibr" target="#b163">[164]</ref>, apply a constraint-based representation of spreadsheets and a general constraint solver to locate bugs in spreadsheets. Another constraint-based approach for debugging faulty spreadsheets (CONBUG) is presented by Abreu et al. <ref type="bibr" target="#b14">[15]</ref>, taking a spreadsheet and one test case as input to compute a set of faulty candidates. Abraham and Erwig <ref type="bibr" target="#b1">[2]</ref> describe a tool, GoalDebug, for debugging spreadsheets, using a constraint-based approach similar to that in <ref type="bibr" target="#b163">[164]</ref>. Whenever the computed output of a cell is incorrect, users can provide an expected value, which is employed to produce a list of possible changes to the corresponding formulae that, when applied, will generate the user-specified output. This involves mutating the spreadsheet based on a set of pre-defined change (repair) rules and ascertaining whether user expectations are met. A similar approach also appears in other studies such as <ref type="bibr" target="#b94">[95]</ref> and <ref type="bibr" target="#b151">[152]</ref>. Authors of <ref type="bibr" target="#b94">[95]</ref> propose a strategy for automatically fixing bugs in both Java and C programs by combining mutation testing and software fault localization. An approach of using path-based weakest preconditions is discussed in <ref type="bibr" target="#b151">[152]</ref> to generate program modifications for bug fixing.</p><p>Abraham and Erwig also present a system, UCheck, which infers header information in spreadsheets, performs a unit analysis, and notifies users when bugs are detected <ref type="bibr" target="#b2">[3]</ref>. Hermans et al. <ref type="bibr" target="#b156">[157]</ref> suggest a way to locate spreadsheet smells (possible weak points in the spreadsheet design) and display them to users in data-flow diagrams. An approach to detect and visualize data clones (caused by copying the value computed by a formula in one cell as plain text to a different cell) in spreadsheets is reported in <ref type="bibr" target="#b157">[158]</ref>.</p><p>Other techniques aimed at reducing the occurrence of errors in spreadsheets include code inspection <ref type="bibr" target="#b277">[279]</ref>, refactoring <ref type="bibr" target="#b41">[42]</ref>, and adoption of better spreadsheet design practices <ref type="bibr" target="#b81">[82,</ref><ref type="bibr" target="#b82">83]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.9">Theoretical Studies</head><p>Instead of being evaluated empirically, the effectiveness of software fault localization techniques can also be analyzed from theoretical perspectives.</p><p>Briand et al. <ref type="bibr" target="#b56">[57]</ref> report that the formula used to compute the suspiciousness of a given statement by Tarantula can be reexpressed so that the suspiciousness only depends on the ratio of the number of failed tests (N CF ) to the number of successful tests (N CS ) that execute the statement. Lee et al. <ref type="bibr" target="#b181">[182,</ref><ref type="bibr" target="#b211">212]</ref> prove that Tarantula always produces a ranking identical to that of a technique where the suspiciousness function is formulated as</p><formula xml:id="formula_14">CF CF CS N N N +</formula><p>. A study by Naish et al. <ref type="bibr" target="#b265">[267]</ref> examines over 30 formulae and divides them into groups such that those in the same group are equivalent for ranking. Independently, Debroy and Wong <ref type="bibr" target="#b92">[93]</ref> also report a similar study showing that some similarity coefficient-based fault localization techniques are equivalent to one another.</p><p>Xie et al. <ref type="bibr" target="#b381">[384]</ref> perform a theoretical study on the effectiveness of some spectrum-based fault localization techniques. Based on the risk values (which is the same as suspiciousness discussed in this survey), program statements are assigned to one of the three sets, R B S , R F S , and R A S , based on whether their risk values are higher than, the same as, or lower than the value of the statement containing the bug. The authors make three assumptions: i) a faulty program has exactly one fault; ii) for any given single-fault program, there is exactly one faulty statement; and iii) this faulty statement must be executed by all failed tests. They also assume that the underlying test suite must have 100% statement coverage. Unfortunately, many of these assumptions are oversimplified and do not hold for real-life programs. With respect to some selected techniques (many of which are similarity coefficient-based), they examine the subset relation between R </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>S S â</head><p>then R 1 is better (more effective) than R 2 such that the number of statements examined by R 1 is less than that examined by R 2 to find the first faulty statement. One problem of this proof as reported in <ref type="bibr" target="#b368">[371]</ref> is that it does not consider statements in R F S . As a result, for some special cases, even though the proof indicates that one technique is more effective than another, the former has to examine more statements than or the same number of statements as the latter -contradicting the result of the proof. Another weakness is that some advanced and more effective techniques (e.g., <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b222">223,</ref><ref type="bibr" target="#b364">367,</ref><ref type="bibr" target="#b368">371]</ref>) are excluded, even though they use exactly the same input data as those included in <ref type="bibr" target="#b381">[384]</ref>. Authors of <ref type="bibr" target="#b209">[210]</ref> also question the validity of <ref type="bibr" target="#b381">[384]</ref>. They compare the effectiveness of the five best fault localization techniques based on the theoretical study in <ref type="bibr" target="#b381">[384]</ref> with the effectiveness of Tarantula and Ochiai, and they find that the latter are significantly more effective than the former. This directly contradicts the conclusion of <ref type="bibr" target="#b381">[384]</ref>. Xie et al. <ref type="bibr" target="#b385">[388]</ref> also apply their theoretical analysis framework to 30 genetic programming-evolved formulae and show that some of them can be used for fault localization. However, they make the same over-simplified assumptions as those in <ref type="bibr" target="#b381">[384]</ref>.</p><p>There are other theoretical studies for single-bug programs. For example, Lee et al. <ref type="bibr" target="#b263">[265]</ref> identify a class of strictly rational fault localization techniques in which the suspicious value of a statement strictly increases if this statement is executed by more failed test cases and strictly decreases if this statement is executed by more successful test cases. The authors claim that strictly rational techniques do not necessarily outperform those that are not. Therefore, limited attention should be given to these strictly rational techniques. In <ref type="bibr" target="#b262">[264]</ref>, Lee et al. further identify a class of optimal fault localization techniques for locating deterministic bugs (similar to Bohrbugs defined in <ref type="bibr" target="#b138">[139]</ref>) that will always cause test cases to fail whenever they are executed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">Conclusion</head><p>As today's software has become larger and more complex than ever before, software fault localization accordingly requires a greater investment of time and resources. Consequently, locating program bugs is no longer an easily-automated mechanical process. In practice, locations based on intelligent guesses of experienced programmers with expert knowledge of the software being debugged should be examined first. However, if this fails, an appropriate fallback would be to use a systematic technique (such as those discussed in this survey) based on solid reasoning and supported by case studies, rather than to use an unsubstantiated ad hoc approach. This is why techniques that can help programmers effectively locate bugs are highly in demand, which also stimulates the proposal of many fault localization techniques from a widespread perspective. It is imperative that software engineers involved with developing reliable and dependable systems have a good understanding of existing techniques, as well as an awareness of emerging trends and developments in the area. To facilitate this, we conduct a detailed survey and present the results so that software engineers at all program debugging experience levels can quickly gain necessary background knowledge and the ability to apply cost-effective software fault localization techniques tailored to their specific environments.</p><p>In this survey, a publication repository has been created, including <ref type="bibr" target="#b328">331</ref>  Our analysis shows that the numbers of published papers in each category differ from each other and that the research interest shifts from one category to another as time moves on. For example, static and dynamic slice-based techniques were popular between 2004 and 2007, whereas execution slice and program spectrum-based techniques have dominated since 2008.</p><p>Different metrics to evaluate the effectiveness of software fault localization techniques (in terms of how much code needs to be examined before the first faulty location is identified) are reviewed, including T-score, EXAM score/Expense, P-score, N-score, and Wilcoxon signed-rank test. Subject programs and debugging tools used in various empirical evaluations are summarized. Results of different empirical studies using these metrics, programs, and tools suggest that no one category is completely superior to another. In fact, techniques in each category have their own advantages and disadvantages.</p><p>Additionally, effectiveness of these techniques can also be analyzed from theoretical perspectives. However, such analyses very often make over-simplified and non-realistic assumptions that do not hold for real-life programs. Hence, their conclusions in general are only applicable within limited scopes. This implies that a theoretical analysis alone is not enough. It is advisable to apply both empirical evaluations and theoretical analyses to provide a more complete assessment.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. Distribution of papers in our repository</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Static and dynamic slice-based techniques were popular between 2002 and 2007. However, the number of papers each year in this category has decreased since then. â¢ The number of papers on execution slice and program spectrum-based techniques has increased dramatically since 2008, indicating that more studies are focused on these techniques rather than static or dynamic slice-based techniques in the recent years.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 .Figure 5 .</head><label>45</label><figDesc>Figure 4. Number of papers published each year with respect to three different categories</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>S</head><label></label><figDesc>generated by the corresponding ranking formulae and conclude that for two techniques, R 1 and R 2</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>papers and 54 Ph.D. and Masters' theses on software fault localization from 1977 to November 2014. These techniques are classified into eight categories: slice-based, spectrum-based, statistics-based, program state-based, machine learning-based, data mining-based, model-based, and miscellaneous. The figures and tables presented in the previous sections strongly indicate that software fault localization has become an important research topic on the front burner and suggest the trend of ongoing research directions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 2</head><label>2</label><figDesc></figDesc><table /><note><p><p>. An example showing the differences among static, dynamic, and execution slicing Code with a bug at s7</p>Static slice for product Dynamic slice for product with respect to a test case a = 2 Execution slice for product with respect to a test case a</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>Code coverage, or Executable Statement Hit Spectrum (ESHS), indicates which parts of the program under testing have been covered during an execution. With this information, it is possible to identify which components were involved in a failure, narrowing the search for the faulty component that made the execution fail.</figDesc><table><row><cell>A. Notation</cell><cell></cell></row><row><cell>P</cell><cell>a program</cell></row><row><cell>N CF</cell><cell>number of failed test cases that cover a statement</cell></row><row><cell>N UF</cell><cell>number of failed test cases that do not cover a statement</cell></row><row><cell>N CS</cell><cell>number of successful test cases that cover a statement</cell></row><row><cell>N US</cell><cell>number of successful test cases that do not cover a statement</cell></row><row><cell>N C</cell><cell>total number of test cases that cover a statement</cell></row><row><cell>N U</cell><cell>total number of test cases that do not cover a statement</cell></row><row><cell>N S</cell><cell>total number of successful test cases</cell></row><row><cell>N F t i</cell><cell>total number of failed test cases the i th test case</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>, Debroy et al. further revise the Tarantula technique. Statements executed by the same number of failed test cases are grouped together, and then groups are ranked in descending order by the number of failed test cases. Using Tarantula, statements are ranked by suspiciousness within each group.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head></head><label></label><figDesc>, Naish et al. propose two techniques, O and O P (defined as follows). The technique O is designed for programs with a single bug, while O P is better applied to programs with multiple bugs. Data from their experiments suggest that O and O P are more effective than Tarantula, Ochiai, and Ochiai2 for single-bug programs. On the other hand, Le et al.<ref type="bibr" target="#b209">[210]</ref> present a different view by showing that Ochiai can be more effective than O and O P for programs with single bugs.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 4 .</head><label>4</label><figDesc>Similarity coefficient-based techniques</figDesc><table><row><cell cols="2">Coefficient</cell><cell cols="4">Algebraic Form</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>Coefficient</cell><cell cols="5">Algebraic Form</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>1</cell><cell>Braun-Banquet</cell><cell>( max N</cell><cell>CF</cell><cell>+</cell><cell>, CF CS N N N</cell><cell>CF</cell><cell>+</cell><cell>N</cell><cell>UF</cell><cell>)</cell><cell>17 Harmonic Mean</cell><cell>(</cell><cell>CF</cell><cell>US</cell><cell>(</cell><cell>UF CF</cell><cell>)(( ) ( CF CS CS</cell><cell>US</cell><cell>CS</cell><cell>) ( ) ( US UF</cell><cell>CF</cell><cell>UF</cell><cell>) ( ) ( CF UF CS</cell><cell>) ( ) US UF</cell><cell>CS</cell><cell>US</cell><cell>))</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Table 5 .</head><label>5</label><figDesc>Additional program spectra relevant to fault localization</figDesc><table><row><cell></cell><cell>Name</cell><cell>Description</cell></row><row><cell>BHS</cell><cell>Branch Hit Spectrum</cell><cell>conditional branches that are executed</cell></row><row><cell>CPS</cell><cell>Complete Path Spectrum</cell><cell>complete path that is executed</cell></row><row><cell>PHS</cell><cell>Path Hit Spectrum</cell><cell>intra-procedural, loop-free path that is executed</cell></row><row><cell>PCS</cell><cell>Path Count Spectrum</cell><cell>number of times each intra-procedural, loop-free path is executed</cell></row><row><cell>DHS</cell><cell>Data-dependence Hit Spectrum</cell><cell>definition-use pairs that are executed</cell></row><row><cell>DCS</cell><cell>Data-dependence Count Spectrum</cell><cell>number of times each definition-use pair is executed</cell></row><row><cell>OPS</cell><cell>Output Spectrum</cell><cell>output that is produced</cell></row><row><cell>ETS</cell><cell>Execution Trace Spectrum</cell><cell>execution trace that is produced</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8"><head></head><label></label><figDesc>apply causal-inference techniques to the problem of fault localization. A linear model is built on program control-flow graphs to estimate the causal effect of covering a given statement on the occurrence of failures. This model is able to reduce confounding bias and thereby help generate better fault localization rankings. In<ref type="bibr" target="#b38">[39]</ref>, they further enhance the linear model toward better fault localization effectiveness by including information on data-flow dependence. In<ref type="bibr" target="#b254">[256]</ref>, Modi et al. explore the usage of execution phase information such as cache miss rates, CPU and Memory usages in statistical program debugging. They suggest coupling execution phases with predicates results in higher bug localization accuracy as opposed to when phase information is not used.3.4. Program State-based TechniquesA program state consists of variables and their values at a particular point during program execution, which can be a good indicator for locating program bugs. One way to use program states in software fault localization is by relative debugging<ref type="bibr" target="#b3">[4]</ref>, in which faults in the development version can be located via a runtime comparison of the internal states to a "reference" version of the program. Another approach is to modify the values of some variables to determine which one causes erroneous program execution.Zeller  et al. propose a technique, delta debugging</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9"><head></head><label></label><figDesc>, proposed by Zhang et al., is another program state-based fault localization technique where program states are changed to forcefully alter the executed branches in a failed execution. A predicate which, if switched, can make the program execute successfully is labeled as a critical predicate. The technique starts by finding the first erroneous value in variables. Different searching strategies, such as Last Executed First Switched (LEFS) ordering and Prioritization-based (PRIOR) ordering, can help determine the next candidates for critical predicates. Wang and Roychoudhury<ref type="bibr" target="#b349">[352]</ref> present a similar technique that analyzes the execution path of a failed test and alters the outcome of branches in that path to produce a successful execution. The branch statements with outcomes that have been changed are recorded as bugs. A deficiency of predicate switching is that the alternation of program states is never guided by program dependence analysis, even though faults are intrinsically propagated through the chain of program dependences. The study in<ref type="bibr" target="#b216">[217]</ref> extends the predicate switching technique and reduces the search space of program states by selecting a subset of trace points in a failed execution based on dependence analysis.</figDesc><table><row><cell>Jeffrey et al. [172] present a value profile-based technique for fault localization to assist developers in software debugging. The</cell></row><row><cell>approach involves computing Interesting Value Mapping Pairs (IVMPs) that show how values used in particular program</cell></row></table><note><p><p><p>statements can be altered so that failed test cases will produce the correct output instead. Alternate sets of values are selected from profiling information taken from the executions of all test cases in an available test suite. Different alternate value sets are used to perform value replacements in each statement instance for every failed test case. Using these IVMPs, each statement can then be ranked according to the number of failed executions in which at least one IVMP is identified for that statement. In</p><ref type="bibr" target="#b414">[417]</ref></p>, Zhang et al. claim that a bug within a statement may propagate a series of infected program states before it manifests the failure.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_10"><head></head><label></label><figDesc>Chaki et al. further extend the technique of Groce et al. by combining it with predicate abstraction [67].</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_11"><head>Table 6 .</head><label>6</label><figDesc>Summary of popular subject programs used in the fault localization studies Name</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_12"><head>Size (Lines of code) Brief Description Language Number of papers</head><label></label><figDesc></figDesc><table><row><cell>Siemens: tcas Siemens: schedule Siemens: print_tokens Siemens: replace Siemens: print_tokens2 Siemens: schedule2 Siemens: tot_info grep space gzip sed flex NanoXML Unix: Cal Unix: Col Unix: Tr Unix: Spline Unix: Uniq Unix: Chckeq make Ant XML-sec Unix: Look tar DC Unix: Crypt Unix: Sort gcc apache schoolmate faqforge webchess jtopas timeclock phpsysinfo TCC Xerces Mozilla firefox C Unix: Comm 173 Altitude separation C 412 Priority scheduler C 565 Lexical analyzer C 563 Pattern recognition C 510 Lexical analyzer C 307 Priority scheduler C 406 Information measure C 12,653 Command-line utility for searching plain-text data sets C 9,126 ADL Interpreter C 6,573 Data compression C 12,062 GNU batch stream editor C 13,892 Lexical analyzer generator C 7,646 XML parser Java 202 Print a calendar for a specified year or month C 308 Filter reverse line C 137 Translate characters C 338 Interpolate smooth curves based on given data C 143 Report or remove adjacent duplicate lines C 102 Report missing or unbalanced delimiters and .EQ/.EN pairs C 20,014 Manage building of executable and other products from code C 75,333 Java applications builder Java 21,613 library for XML encryption C 170 Find words in the system dictionary or lines in a sorted list 167 Select or reject lines common to two sorted files C 25,854 Tool to create file archives C 2,700 reverse-polish desk calculator Java 134 Encrypt and decrypt a file using a user supplied password C 913 Sort and merge files C 222,196 GNU C compiler C 85,661 Http server for hosting web applications C 4,263 A PHP/MySQL solution for administering schools PHP 734 A tool for creating and managing documents PHP 2,226 An online chess game JS and PHP 5,400 Text parser Java 13,879 A web-based clock system C 7,745 Displays system information, e.g., uptime, CPU, memory, etc. C 1,900 A small and fast compiler for the C programming language C 52,528 XML parser C++ 3,4M Web browser C and C++ tidy 31,132 A text editor for editing web content C++</cell><cell>9 6 6 5 5 5 5 5 4 4 4 4 3 3 3 3 3 3</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_13"><head>Table 7 .</head><label>7</label><figDesc>Summary of tools used in the fault localization studies</figDesc><table><row><cell>Name</cell><cell>Brief Description</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_14"><head>Table 2</head><label>2</label><figDesc>, the static slice for the variable product is a set of eight statements, including s 1 , s 2 , s 4 , s 5 , s 7 , s 8 , s 10 , and s 13 . However, it does not tell programmers which statements are more likely to contain bugs and should therefore be examined first for possible bug locations.Techniques discussed in Section 3.3 (statistics-based), 3.5 (machine learning-based) and 3.6 (data mining-based) are likely6 to generate outputs in terms of suspiciousness rankings similar to those generated by the spectrum-based techniques, whereas program state-based (Section 3.4) and model-based (Section 3.7) techniques are more likely to output a set of program/model components that will possibly contain bugs but do not explicitly specify the ranking of each component. Although both types of outputs provide suspicious components (statements, predicates, etc.) to help locate bugs, the former further prioritizes these components based on their suspiciousness values, but the latter does not.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_15"><head></head><label></label><figDesc>RÃ¶Î²ler et al. [307]  propose a technique, BUGEX, which applies dynamic symbolic execution to generate test cases with a minimal difference from the execution path of a single failed test case. Based on the generated test cases, the branches that are executed by more failed test cases but fewer successful test cases are more likely to cause the failure. The study in<ref type="bibr" target="#b178">[179]</ref> applies a similar test case generation approach, but the generated test cases are instead used with a spectrumbased fault localization technique to rank basic blocks in descending order according to their suspiciousness values.Baudry et al.<ref type="bibr" target="#b49">[50]</ref> use a bacteriological approach (which is an adaptation of genetic algorithms) to bridge the gap between testing and diagnosis (fault localization) based on a test-for-diagnosis criterion. Test cases are generated to satisfy this criterion so that diagnosis algorithms can be used more efficiently. Their objective is to achieve a better diagnosis (a more efficient fault localization) using a minimal number of test cases. Studies such as<ref type="bibr" target="#b126">[127,</ref><ref type="bibr" target="#b252">253]</ref> focus on a cross evaluation of the impact of different test reduction and prioritization techniques on the efficiency of software fault localization.Test execution sequence also has an impact on program debugging. For example, it is possible that a program execution fails not because of the current test but because of a previous test that does not set up an appropriate execution environment for the current test. If a failure cannot be observed unless a group of test cases are executed in a specific sequence, then these test cases should be bundled together as one single failed test.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_16"><head></head><label></label><figDesc>,Debroy et al.  propose a way to do so by combining the rankings of statements generated by multiple techniques. The advantage of this approach (i.e., combining the rankings) over a design-based integration approach (in which the actual techniques would somehow be incorporated to form a new technique) is that it is more cost-effective to realize and is always extensible. Based on a similar idea, Lucia et al.<ref type="bibr" target="#b231">[232]</ref> use two normalization methods to combine results of different fault localization techniques.In<ref type="bibr" target="#b8">[9]</ref>, Abreu et al. address the inherent limitations of spectrum-based fault localization techniques, stating that component semantics of the program are not considered. They propose a way to enhance the diagnostic quality of a spectrum-based fault localization technique by combining it with a model-based debugging approach using the abstraction interpretation generated by a framework called DEPUTO. More precisely, a model-based approach is used to refine the ranking via filtering to exclude those components that do not explain the observed failures when the program's semantics are considered.</figDesc><table /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_0"><p>Papers that only use execution slice-based techniques (e.g.,<ref type="bibr" target="#b20">[21,</ref><ref type="bibr" target="#b370">373]</ref>) are included in the spectrum-based category because a statement-based execution slice is the same as ESHS (Refer to Section 3.2). The slice-based category contains papers only using static slicing and/or dynamic slicing.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_1"><p>Code can be represented in terms of statements, predicates, functions, etc.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_2"><p>Since there are many techniques in each category, it is possible that a particular technique may behave differently from others in the same category in terms of which types of output are generated.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We emphasize that effectiveness is not the only attribute of a software fault localization technique that should be considered. Other factors, including overhead for computing the suspiciousness of each program component, time and space for data collection, human effort, and tool support, should be included as well. We also discuss aspects that are critical to software fault localization, such as fault localization on programs with multiple bugs, concurrent programs, and spreadsheets, as well as impacts of test cases, coincidental correctness, and faults introduced by missing code.</p><p>To conclude, our objective is to use this survey to provide the software engineering community with a better understanding of state-of-the-art research in software fault localization, and identify potential drawbacks and deficiencies of existing techniques so that additional studies can be conducted to improve their practicality and robustness.</p></div>
			</div>


			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>David Hovemeyer <ref type="bibr" target="#b165">[166]</ref> Simple and Effective Static Analysis to Find Bugs Ph.D. University of Maryland Peifeng Hu <ref type="bibr" target="#b166">[167]</ref> Automated Fault Localization: A Statistical Predicate Analysis Approach Ph.D.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Header and Unit Inference for Spreadsheets Through Spatial Analyses</title>
		<author>
			<persName><forename type="first">R</forename><surname>Abraham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Erwig</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Symposium on Visual Languages and Human Centric Computing</title>
		<meeting>IEEE Symposium on Visual Languages and Human Centric Computing<address><addrLine>Roma, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-09">Sept 2004</date>
			<biblScope unit="page" from="165" to="172" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Goaldebug: A Spreadsheet Debugger for End Users</title>
		<author>
			<persName><forename type="first">R</forename><surname>Abraham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Erwig</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Conference on Software Engineering</title>
		<meeting>IEEE International Conference on Software Engineering<address><addrLine>Minneaplis, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-05">May 2007</date>
			<biblScope unit="page" from="251" to="260" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Ucheck: A Spreadsheet Type Checker for End Users</title>
		<author>
			<persName><forename type="first">R</forename><surname>Abraham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Erwig</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Visual Languages and Computing</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="71" to="95" />
			<date type="published" when="2007-02">February 2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Relative Debugging and its Application to the Development of Large Numerical Models</title>
		<author>
			<persName><forename type="first">D</forename><surname>Abramson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Michalakes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sosic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th International Conference for High Performance Computing, Networking, Storage, and Analysis</title>
		<meeting>the 8th International Conference for High Performance Computing, Networking, Storage, and Analysis<address><addrLine>San Diego, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1995-12">December 1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Spectrum-based Fault Localization in Embedded Software</title>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
		<respStmt>
			<orgName>University of Minho geboren te FËao</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A Low-cost Approximate Minimal Hitting Set Algorithm and Its Application to Model-based Diagnosis</title>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J C</forename><surname>Van Gemund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eight Symposium on Abstraction, Reformulation, and Approximation</title>
		<meeting>the Eight Symposium on Abstraction, Reformulation, and Approximation<address><addrLine>Lake Arrowhead, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-07">July 2009</date>
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Exploiting Count Spectra For Bayesian Fault Localization</title>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>GonzÃ¡lez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J</forename><surname>Gemund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6 th International Conference on Predictive Models in Software Engineering</title>
		<meeting>the 6 th International Conference on Predictive Models in Software Engineering<address><addrLine>Timisoara, Romania</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-09">Sep 2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Automatic Software Fault Localization Using Generic Program Invariants</title>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>GonzÃ¡lez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Zoeteweij</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J</forename><surname>Van Gemund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM Symposium on Applied Computing</title>
		<meeting>ACM Symposium on Applied Computing<address><addrLine>Ceara, Brazil</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-03">March 2008</date>
			<biblScope unit="page" from="712" to="717" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Refining Spectrum-based Fault Localization Rankings</title>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Mayer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stumptner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J</forename><surname>Van Gemund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM Symposium on Applied Computing</title>
		<meeting>ACM Symposium on Applied Computing<address><addrLine>Honolulu, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-03">March 2009</date>
			<biblScope unit="page" from="409" to="414" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A Practical Evaluation of Spectrum-based Fault Localization</title>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Zoeteweij</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Golsteijn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J</forename><surname>Van Gemund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of System and Software</title>
		<imprint>
			<biblScope unit="volume">82</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="1780" to="1792" />
			<date type="published" when="2009-11">November 2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">An Evaluation of Similarity Coefficients for Software Fault Localization</title>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Zoeteweij</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J</forename><surname>Van Gemund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Pacific Rim International Symposium on Dependable Computing</title>
		<meeting>Pacific Rim International Symposium on Dependable Computing<address><addrLine>Riverside, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006-12">December 2006</date>
			<biblScope unit="page" from="39" to="46" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">On the Accuracy of Spectrum-based Fault Localization</title>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Zoeteweij</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J</forename><surname>Van Gemund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Testing: Academic and Industrial Conference Practice and Research Techniques -MUTATION</title>
		<meeting>Testing: Academic and Industrial Conference Practice and Research Techniques -MUTATION<address><addrLine>Windsor, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-09">September 2007</date>
			<biblScope unit="page" from="89" to="98" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Localizing Software Faults Simultaneously</title>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Zoeteweij</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J</forename><surname>Gemund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Ninth International Conference on Quality Software</title>
		<meeting>the Ninth International Conference on Quality Software<address><addrLine>Jeju, Korea</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-08">August 2009</date>
			<biblScope unit="page" from="367" to="376" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Spectrum-Based Multiple Fault Localization</title>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Zoeteweij</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J</forename><surname>Van Gemund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 24 th IEEE/ACM International Conference on Automated Software Engineering</title>
		<meeting>the 24 th IEEE/ACM International Conference on Automated Software Engineering<address><addrLine>Auckland, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-11">November 2009</date>
			<biblScope unit="page" from="88" to="99" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Using Constraints to Diagnose Faulty Spreadsheets</title>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Hofer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Perez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software Quality Journal</title>
		<imprint>
			<date type="published" when="2014-05">May 2014</date>
		</imprint>
	</monogr>
	<note>published online</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Evolving Readable String Test Inputs Using a Natural Language Model to Reduce Human Oracle Cost</title>
		<author>
			<persName><forename type="first">S</forename><surname>Afshan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Mcminn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stevenson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Sixth International Conference on Software Testing, Verification and Validation</title>
		<meeting>IEEE Sixth International Conference on Software Testing, Verification and Validation<address><addrLine>Luxembourg</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-03">March 2013</date>
			<biblScope unit="page" from="352" to="361" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Towards Automatic Debugging of Computer Program</title>
		<author>
			<persName><forename type="first">H</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1991">1991</date>
		</imprint>
		<respStmt>
			<orgName>Purdue University</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Debugging with Dynamic Slicing and Backtracking</title>
		<author>
			<persName><forename type="first">H</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Demillo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">H</forename><surname>Spafford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software-Practice &amp; Experience</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="589" to="616" />
			<date type="published" when="1993-06">June 1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">An Execution Backtracking Approach to Program Debugging</title>
		<author>
			<persName><forename type="first">H</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Demillo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">H</forename><surname>Spafford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="21" to="26" />
			<date type="published" when="1991-05">May 1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Dynamic Program Slicing</title>
		<author>
			<persName><forename type="first">H</forename></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Horgan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation</title>
		<meeting>the ACM SIGPLAN Conference on Programming Language Design and Implementation<address><addrLine>White Plains, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1990-06">June 1990</date>
			<biblScope unit="page" from="246" to="256" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Fault Localization using Execution Slices and Dataflow Tests</title>
		<author>
			<persName><forename type="first">H</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Horgan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>London</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Sixth International Symposium on Software Reliability Engineering</title>
		<meeting>Sixth International Symposium on Software Reliability Engineering<address><addrLine>Toulouse, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1995-10">October 1995</date>
			<biblScope unit="page" from="143" to="151" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Mining System Tests to Aid Software Maintenance</title>
		<author>
			<persName><forename type="first">H</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Horgan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">J</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>London</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ghosh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Wilde</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="64" to="73" />
			<date type="published" when="1998-07">July 1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">A Type System for Statically Detecting Spreadsheet Errors</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Ahmad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Antoniu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Goldwater</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Krishnamurthi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Symposium on Automated Software Engineering</title>
		<meeting>IEEE International Symposium on Automated Software Engineering<address><addrLine>Montreal, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-10">October 2003</date>
			<biblScope unit="page" from="174" to="183" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">The Efficiency of Critical Slicing in Fault Localization</title>
		<author>
			<persName><forename type="first">Z</forename><forename type="middle">A</forename><surname>Al-Khanjari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">R</forename><surname>Woodward</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">A</forename><surname>Ramadhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">S</forename><surname>Kutti</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Software Quality Control</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="129" to="153" />
			<date type="published" when="2005-06">June 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Evaluating the Accuracy of Fault Localization Techniques</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ali</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">H</forename><surname>Andrews</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Dhandapani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Symposium on Automated Software Engineering</title>
		<meeting>IEEE International Symposium on Automated Software Engineering<address><addrLine>Auckland, New Zealand</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="76" to="87" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Localizing State-Dependent Faults Using Associated Sequence Mining</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ali</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
		<respStmt>
			<orgName>The University of Western Ontario</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Extended Program Invariants: Applications in Testing and Fault Localization</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>Alipour</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Groce</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Ninth International Workshop on Dynamic Analysis</title>
		<meeting>the Ninth International Workshop on Dynamic Analysis<address><addrLine>Minneapolis, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-07">July 2012</date>
			<biblScope unit="page" from="7" to="11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Fault-Localization Using Dynamic Slicing and Change Impact Analysis</title>
		<author>
			<persName><forename type="first">E</forename><surname>Alves</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Gligoric</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Jagannath</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Amorim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Symposium on Automated Software Engineering</title>
		<meeting>IEEE International Symposium on Automated Software Engineering<address><addrLine>Lawrence, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-11">November 2011</date>
			<biblScope unit="page" from="520" to="523" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Is Mutation an Appropriate Tool for Testing Experiments</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">H</forename><surname>Andrews</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">C</forename><surname>Briand</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Labiche</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 27th International Conference on Software Engineering</title>
		<meeting>the 27th International Conference on Software Engineering<address><addrLine>St. Louis, Missouri, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-05">May, 2005</date>
			<biblScope unit="page" from="402" to="411" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Signpost: Matching Program Behavior against Known Faults</title>
		<author>
			<persName><forename type="first">M</forename><surname>Andrews</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="84" to="89" />
			<date type="published" when="2003-12">December 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">A Systematic and Comprehensive Investigation of Methods to Build and Evaluate Fault Prediction Models</title>
		<author>
			<persName><forename type="first">E</forename><surname>Arisholm</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">C</forename><surname>Briand</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">B</forename><surname>Johannessen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of System and Software</title>
		<imprint>
			<biblScope unit="volume">83</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="2" to="17" />
			<date type="published" when="2010-01">January 2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">High-level Data Races</title>
		<author>
			<persName><forename type="first">C</forename><surname>Artho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Havelund</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Biere</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal on Software Testing</title>
		<imprint>
			<date type="published" when="2003">2003</date>
			<publisher>Verification and Reliability</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Practical Fault Localization for Dynamic Web Applications</title>
		<author>
			<persName><forename type="first">S</forename><surname>Artzi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Dolby</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Tip</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Pistoia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Conference on Software Engineering</title>
		<meeting>IEEE International Conference on Software Engineering<address><addrLine>Cape Town, South Africa</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-05">May 2010</date>
			<biblScope unit="page" from="265" to="274" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Finding Bugs in Web Applications Using Dynamic Test Generation and Explicit-State Model Checking</title>
		<author>
			<persName><forename type="first">S</forename><surname>Artzi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kiezun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Dolby</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Tip</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Dig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Paradkar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D</forename><surname>Ernst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="474" to="494" />
			<date type="published" when="2010-02">February 2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Directed Test Generation for Effective Fault Localization</title>
		<author>
			<persName><forename type="first">S</forename><surname>Artzi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Dolby</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Tip</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Pistoia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Symposium on Software Testing and Analysis</title>
		<meeting>IEEE International Symposium on Software Testing and Analysis<address><addrLine>Trento, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-07">July 2010</date>
			<biblScope unit="page" from="49" to="60" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Exploring Machine Learning Techniques for Fault Localization</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">C</forename><surname>Ascari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">Y</forename><surname>Araki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">R T</forename><surname>Pozo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">R</forename><surname>Vergilio</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 10th Latin American Test Workshop</title>
		<meeting>10th Latin American Test Workshop<address><addrLine>Buzios, Brazil</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-03">March 2009</date>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Basic Concepts and Taxonomy of Dependable and Secure Computing</title>
		<author>
			<persName><forename type="first">A</forename><surname>Avizienis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Laprie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Randell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">E</forename><surname>Landwehr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Dependable and Secure Computing</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="11" to="33" />
			<date type="published" when="2004-03">March 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Causal Inference for Statistical Fault Localization</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">K</forename><surname>Baah</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Podgurski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Harrold</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Software Testing and Analysis</title>
		<meeting>International Symposium on Software Testing and Analysis<address><addrLine>Trento, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-07">July 2010</date>
			<biblScope unit="page" from="73" to="83" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Mitigating the Confounding Effects of Program Dependences for Effective Fault Localization</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">K</forename><surname>Baah</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Podgurski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Harrold</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of European Software Engineering Conference and ACM SIGSOFT Symposium on the Foundations of Software Engineering</title>
		<meeting>European Software Engineering Conference and ACM SIGSOFT Symposium on the Foundations of Software Engineering<address><addrLine>Szeged, Hungary</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-09">September 2011</date>
			<biblScope unit="page" from="146" to="156" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">The Probabilistic Program Dependence Graph and Its Application to Fault Diagnosis</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">K</forename><surname>Baah</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Podgurski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Harrold</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="528" to="545" />
			<date type="published" when="2010-07">July 2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title level="m" type="main">Statistical Causal Analysis for Fault Localization</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">K</forename><surname>Baah</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
		<respStmt>
			<orgName>Georgia Institute of Technology</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Refactoring Meets Spreadsheet Formulas</title>
		<author>
			<persName><forename type="first">S</forename><surname>Badame</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Dig</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Maintenance</title>
		<meeting>International Conference on Software Maintenance<address><addrLine>Trento, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-09">Sept 2012</date>
			<biblScope unit="page" from="399" to="409" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Optimally Profiling and Tracing Programs</title>
		<author>
			<persName><forename type="first">T</forename><surname>Ball</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Larus</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Programming Languages and Systems</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<date type="published" when="1994-07">July 1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">From Symptom to Cause: Localizing Errors in Counterexample Traces</title>
		<author>
			<persName><forename type="first">T</forename><surname>Ball</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Naik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">K</forename><surname>Rajamani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages</title>
		<meeting>ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages<address><addrLine>Venice, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-01">January 2003</date>
			<biblScope unit="page" from="97" to="105" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Improving Spectrum-based Fault Localization using Proximity-based Weighting of Test Cases</title>
		<author>
			<persName><forename type="first">A</forename><surname>Bandyopadhyay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Symposium on Automated Software Engineering</title>
		<meeting>IEEE International Symposium on Automated Software Engineering<address><addrLine>Lawrence, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-11">November 2011</date>
			<biblScope unit="page" from="660" to="664" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Mitigating the Effect of Coincidental Correctness in Spectrum Based Fault Localization</title>
		<author>
			<persName><forename type="first">A</forename><surname>Bandyopadhyay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Testing, Verification, and Validation</title>
		<meeting>International Conference on Software Testing, Verification, and Validation<address><addrLine>Montreal, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-04">April 2012</date>
			<biblScope unit="page" from="479" to="482" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
		<title level="m" type="main">Mitigating the Effect of Coincidental Correctness in Spectrum Based Fault Localization</title>
		<author>
			<persName><forename type="first">A</forename><surname>Bandyopadhyay</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
		<respStmt>
			<orgName>Colorado State University</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Proximity Based Weighting of Test Cases to Improve Spectrum Based Fault Localization</title>
		<author>
			<persName><forename type="first">A</forename><surname>Bandyopadhyay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ghosh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Symposium on Automated Software Engineering</title>
		<meeting>IEEE International Symposium on Automated Software Engineering<address><addrLine>Lawrence, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-11">November 2011</date>
			<biblScope unit="page" from="420" to="423" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">On the Effectiveness of the Tarantula Fault Localization Technique for Different Fault Classes</title>
		<author>
			<persName><forename type="first">A</forename><surname>Bandyopadhyay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ghosh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Symposium on High-Assurance Systems Engineering</title>
		<meeting>IEEE International Symposium on High-Assurance Systems Engineering<address><addrLine>Boca Raton, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-11">November 2011</date>
			<biblScope unit="page" from="317" to="324" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Improving Test Suites for Efficient Fault Localization</title>
		<author>
			<persName><forename type="first">B</forename><surname>Baudry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Fleurey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Le Traon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Conference on Software Engineering</title>
		<meeting>IEEE International Conference on Software Engineering<address><addrLine>Shanghai, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006-05">May 2006</date>
			<biblScope unit="page" from="82" to="91" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Dynamic Slicing Method for Maintenance of Large C Programs</title>
		<author>
			<persName><forename type="first">A</forename><surname>Beszedes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Gergely</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Szabo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Csirik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Gyimothy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of European Conference on Software Maintenance and Reengineering</title>
		<meeting>European Conference on Software Maintenance and Reengineering<address><addrLine>Lisbon, Portugal</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-03">March 2001</date>
			<biblScope unit="page" from="105" to="113" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">A Survey of Empirical Results on Program Slicing</title>
		<author>
			<persName><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Harman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Advances in Computers</title>
		<imprint>
			<biblScope unit="volume">62</biblScope>
			<biblScope unit="page" from="105" to="178" />
			<date type="published" when="2004-01">January 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">How Well Do Test Case Prioritization Techniques Support Statistical Fault Localization</title>
		<author>
			<persName><forename type="first">J</forename><surname>Bo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">H</forename><surname>Tse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">Y</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Annual IEEE Computer Software and Application Conference</title>
		<meeting>Annual IEEE Computer Software and Application Conference<address><addrLine>Seattle, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-07">July 2009</date>
			<biblScope unit="page" from="99" to="106" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Projecting Code Changes Onto Execution Traces to Support Localization of Recently Introduced Bugs</title>
		<author>
			<persName><forename type="first">J</forename><surname>Bohnet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Voigt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>DÃ¶llner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM Symposium on Applied Computing</title>
		<meeting>ACM Symposium on Applied Computing<address><addrLine>Hawaii, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-03">March 2009</date>
			<biblScope unit="page" from="438" to="442" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<analytic>
		<title level="a" type="main">Abstract Debugging of Higher-order Imperative Languages</title>
		<author>
			<persName><forename type="first">F</forename><surname>Bourdoncle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGPLAN Conference on Programming Language Design and Implementation</title>
		<meeting>ACM SIGPLAN Conference on Programming Language Design and Implementation<address><addrLine>Albuquerque, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1993-06">June 1993</date>
			<biblScope unit="page" from="46" to="55" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">Complexity Metrics for Spreadsheet Models</title>
		<author>
			<persName><forename type="first">A</forename><surname>Bregar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">EuSpRIG</title>
		<imprint>
			<biblScope unit="volume">3895</biblScope>
			<biblScope unit="page" from="85" to="93" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">Using Machine Learning to Support Debugging with Tarantula</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">C</forename><surname>Briand</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Labiche</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Symposium on Software Reliability</title>
		<meeting>IEEE International Symposium on Software Reliability<address><addrLine>Trolhattan, Sweden</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-11">November 2007</date>
			<biblScope unit="page" from="137" to="146" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">Finding Latent Code Errors via Machine Learning over Program Executions</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Brun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D</forename><surname>Ernst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Conference on Software Engineering</title>
		<meeting>IEEE International Conference on Software Engineering<address><addrLine>Edinburgh, UK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-05">May 2004</date>
			<biblScope unit="page" from="480" to="490" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">Two Notions of Correctness and Their Relation to Testing</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">A</forename><surname>Budd</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Angluin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Acta Infomatica</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="31" to="45" />
			<date type="published" when="1982">1982</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<analytic>
		<title level="a" type="main">Checkfence: Checking Consistency of Concurrent Data Types on Relaxed Memory Models</title>
		<author>
			<persName><forename type="first">S</forename><surname>Burckhardt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Alur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M K</forename><surname>Martin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGPLAN Conference on Programming Language Design and Implementation</title>
		<meeting>ACM SIGPLAN Conference on Programming Language Design and Implementation<address><addrLine>San Diego, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-06">June 2007</date>
			<biblScope unit="page" from="12" to="21" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<analytic>
		<title level="a" type="main">Minimizing Reproduction of Software Failures</title>
		<author>
			<persName><forename type="first">M</forename><surname>Burger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zeller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Software Testing and Analysis</title>
		<meeting>International Symposium on Software Testing and Analysis<address><addrLine>Toronto, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-07">July 2011</date>
			<biblScope unit="page" from="221" to="231" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title level="a" type="main">Partition Testing with Dynamic Partitioning</title>
		<author>
			<persName><forename type="first">K</forename><surname>Cai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Jing</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Bai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Annual International Computer Software and Applications Conference</title>
		<meeting>Annual International Computer Software and Applications Conference<address><addrLine>Scotland, UK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-07">July 2005</date>
			<biblScope unit="page" from="113" to="116" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<analytic>
		<title level="a" type="main">Entropy-based Test Generation for Improved Fault Localization</title>
		<author>
			<persName><forename type="first">J</forename><surname>Campos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Fraser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Amorim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 28 th International Conference on Automated Software Engineering</title>
		<meeting>28 th International Conference on Automated Software Engineering<address><addrLine>Silicon Valley, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-11">November 2013</date>
			<biblScope unit="page" from="257" to="267" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<analytic>
		<title level="a" type="main">A Kernel Density Estimate-based Approach to Component Goodness Modeling</title>
		<author>
			<persName><forename type="first">N</forename><surname>Cardoso</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Twenty Seventh AAAI Conference on Artificial Intelligence</title>
		<meeting>Twenty Seventh AAAI Conference on Artificial Intelligence<address><addrLine>Washington D.C., USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-07">July 2013</date>
			<biblScope unit="page" from="152" to="158" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<analytic>
		<title level="a" type="main">Formal Concept Analysis Enhances Fault Localization in Software</title>
		<author>
			<persName><forename type="first">P</forename><surname>Cellier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ducasse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ferre</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Ridoux</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Formal Concept Analysis</title>
		<meeting>International Conference on Formal Concept Analysis<address><addrLine>Montreal, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-02">February 2008</date>
			<biblScope unit="page" from="273" to="288" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b65">
	<analytic>
		<title level="a" type="main">Multiple Fault Localization with Data Mining</title>
		<author>
			<persName><forename type="first">P</forename><surname>Cellier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ducasse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ferre</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Ridoux</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering and Knowledge Engineering</title>
		<meeting>International Conference on Software Engineering and Knowledge Engineering<address><addrLine>Miami, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-07">July 2011</date>
			<biblScope unit="page" from="238" to="243" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b66">
	<analytic>
		<title level="a" type="main">Explaining Abstract Counterexamples</title>
		<author>
			<persName><forename type="first">S</forename><surname>Chaki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Groce</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Strichman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Foundations of Software Engineering</title>
		<meeting>International Symposium on Foundations of Software Engineering<address><addrLine>Newport Beach, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-10">October 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<monogr>
		<title level="m" type="main">Automated Fault Localization for Service-Oriented Software Systems</title>
		<author>
			<persName><forename type="first">C</forename><surname>Chen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
		<respStmt>
			<orgName>Delft University of Technology</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b68">
	<analytic>
		<title level="a" type="main">Aspect-Based Instrumentation for Locating Memory Leaks in Java Programs</title>
		<author>
			<persName><forename type="first">K</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Annual International Computer Software and Applications Conference</title>
		<meeting>Annual International Computer Software and Applications Conference<address><addrLine>Beijing, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-07">July 2007</date>
			<biblScope unit="page" from="23" to="28" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<analytic>
		<title level="a" type="main">Implicit Social Network Model for Predicting and Tracking the Location of Faults</title>
		<author>
			<persName><forename type="first">I</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Jaygarl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Annual International Computer Software and Applications Conference</title>
		<meeting>Annual International Computer Software and Applications Conference<address><addrLine>Turku, Finland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-08">August 2008</date>
			<biblScope unit="page" from="136" to="143" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b70">
	<analytic>
		<title level="a" type="main">Semi-proving: An Integrated Method for Program Proving, Testing, and Debugging</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">H</forename><surname>Tse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><forename type="middle">Q</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="109" to="125" />
			<date type="published" when="2011-01">January 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b71">
	<analytic>
		<title level="a" type="main">Identifying Bug Signatures Using Discriminative Graph Mining</title>
		<author>
			<persName><forename type="first">H</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Lo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Yan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Software Testing and Analysis</title>
		<meeting>International Symposium on Software Testing and Analysis<address><addrLine>Chicago, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-07">July 2009</date>
			<biblScope unit="page" from="141" to="152" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b72">
	<monogr>
		<title level="m" type="main">CRISP-A Fault Localization Tool for Java Programs</title>
		<author>
			<persName><forename type="first">O</forename><forename type="middle">C</forename><surname>Chesley</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
		<respStmt>
			<orgName>The State University of New Jersey</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Master Thesis</note>
</biblStruct>

<biblStruct xml:id="b73">
	<analytic>
		<title level="a" type="main">HOLMES: Effective statistical debugging via efficient path profiling</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">M</forename><surname>Chilimbi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Liblit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Mehra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">V</forename><surname>Nori</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Vaswani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Conference on Software Engineering</title>
		<meeting>IEEE International Conference on Software Engineering<address><addrLine>Vancouver, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-05">May 2009</date>
			<biblScope unit="page" from="34" to="44" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b74">
	<analytic>
		<title level="a" type="main">A Survey of Binary Similarity and Distance Measures</title>
		<author>
			<persName><forename type="first">S</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Cha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">C</forename><surname>Tappert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systemics, Cybernetics and Informatics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="43" to="48" />
			<date type="published" when="2010-01">January 2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b75">
	<analytic>
		<title level="a" type="main">Flow-Sensitive Fault Localization</title>
		<author>
			<persName><forename type="first">J</forename><surname>Christ</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Ermis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Schaf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Wies</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Verification, Model Checking, and Abstract Interpretation</title>
		<meeting>International Conference on Verification, Model Checking, and Abstract Interpretation<address><addrLine>Rome, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-01">January 2013</date>
			<biblScope unit="page" from="189" to="208" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b76">
	<analytic>
		<title level="a" type="main">Locating Causes of Program Failures</title>
		<author>
			<persName><forename type="first">H</forename><surname>Cleve</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zeller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Conference on Software Engineering</title>
		<meeting>IEEE International Conference on Software Engineering<address><addrLine>Louis, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-05">May 2005</date>
			<biblScope unit="page" from="342" to="351" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b77">
	<analytic>
		<title level="a" type="main">Abstract Interpretation: A Unified Lattice Model for Static Analysis of Programs by Construction or Approximation of Fixpoints</title>
		<author>
			<persName><forename type="first">P</forename><surname>Cousot</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Cousot</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Symposium on Principles of Programming Languages</title>
		<meeting>IEEE International Symposium on Principles of Programming Languages<address><addrLine>Los Angeles, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1977-01">January 1977</date>
			<biblScope unit="page" from="238" to="252" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b78">
	<analytic>
		<title level="a" type="main">Towards Automatic Software Fault Localization through Decision-to-Decision Path Analysis</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">S</forename><surname>Collofello</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Cousins</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of National Computer Conference</title>
		<meeting>National Computer Conference</meeting>
		<imprint>
			<date type="published" when="1987-06">June 1987</date>
			<biblScope unit="page" from="539" to="544" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b79">
	<analytic>
		<title level="a" type="main">DOC: A Practical Approach to Source-Level Debugging of Globally Optimized Code</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Coutant</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Meloy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ruscetta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGPLAN Conference on Program Language Design and Implementation</title>
		<meeting>the ACM SIGPLAN Conference on Program Language Design and Implementation<address><addrLine>Atlanta, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1988-07">July 1988</date>
			<biblScope unit="page" from="125" to="134" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b80">
	<analytic>
		<title level="a" type="main">Check &apos;n&apos; Crash: Combining Static Checking and Testing</title>
		<author>
			<persName><forename type="first">C</forename><surname>Csallner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Smaragdakis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Conference on Software Engineering</title>
		<meeting>IEEE International Conference on Software Engineering<address><addrLine>Louis, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-05">May 2005</date>
			<biblScope unit="page" from="422" to="431" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b81">
	<analytic>
		<title level="a" type="main">Automatically inferring classsheet models from spreadsheets</title>
		<author>
			<persName><forename type="first">J</forename><surname>Cunha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Erwig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Saraiva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Symposium on Visual Language and Human-Centric Computing</title>
		<meeting>IEEE Symposium on Visual Language and Human-Centric Computing<address><addrLine>Leganes-Madrid, Spain</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-09">September 2010</date>
			<biblScope unit="page" from="93" to="100" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b82">
	<analytic>
		<title level="a" type="main">MDSheet: A Framework for Model-driven Spreadsheet Engineering</title>
		<author>
			<persName><forename type="first">J</forename><surname>Cunha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">P</forename><surname>Fernandes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Mendes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Saraiva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Conference on Software Engineering</title>
		<meeting>IEEE International Conference on Software Engineering<address><addrLine>Zurich, Switzerland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-06">June 2012</date>
			<biblScope unit="page" from="1412" to="1415" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b83">
	<analytic>
		<title level="a" type="main">Lightweight Defect Localization for Java</title>
		<author>
			<persName><forename type="first">V</forename><surname>Dallmeier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Lindig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zeller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of European Conference on Object-Oriented Programming</title>
		<meeting>European Conference on Object-Oriented Programming<address><addrLine>Glasgow, UK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-07">July 2005</date>
			<biblScope unit="page" from="528" to="550" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b84">
	<analytic>
		<title level="a" type="main">Extraction of Bug Localization Benchmarks from History</title>
		<author>
			<persName><forename type="first">V</forename><surname>Dallmeier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Zimmermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Automated Software Engineering</title>
		<meeting>International Conference on Automated Software Engineering<address><addrLine>Atlanta, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-11">November 2007</date>
			<biblScope unit="page" from="433" to="436" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b85">
	<analytic>
		<title/>
		<ptr target="http://delta.tigris.org/" />
	</analytic>
	<monogr>
		<title level="j">Delta tool</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b86">
	<analytic>
		<title level="a" type="main">A Linear Programming Approach for Automated Localization of Multiple Faults</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">C</forename><surname>Dean</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">B</forename><surname>Pressly</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">A</forename><surname>Malloy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>Whitley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Automated Software Engineering</title>
		<meeting>International Conference on Automated Software Engineering<address><addrLine>Auckland, New Zealand</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-11">November 2009</date>
			<biblScope unit="page" from="640" to="644" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b87">
	<analytic>
		<title level="a" type="main">Adding Context to Fault Localization with Integration Coverage</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">A</forename><surname>De Souza</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">L</forename><surname>Chaim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Automated Software Engineering</title>
		<meeting>International Conference on Automated Software Engineering<address><addrLine>Silicon Valley, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-11">November 2013</date>
			<biblScope unit="page" from="628" to="633" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b88">
	<monogr>
		<title level="m" type="main">Towards the Automation of Program Debugging</title>
		<author>
			<persName><forename type="first">V</forename><surname>Debroy</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
	<note>Ph. D. Dissertation, The University of Texas at Dallas</note>
</biblStruct>

<biblStruct xml:id="b89">
	<analytic>
		<title level="a" type="main">Insights on Fault Interference for Programs with Multiple Bugs</title>
		<author>
			<persName><forename type="first">V</forename><surname>Debroy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Software Reliability Engineering</title>
		<meeting>International Symposium on Software Reliability Engineering<address><addrLine>Karnataka, India</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-11">November 2009</date>
			<biblScope unit="page" from="165" to="174" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b90">
	<analytic>
		<title level="a" type="main">A Consensus-based Strategy to Improve the Quality of Fault Localization</title>
		<author>
			<persName><forename type="first">V</forename><surname>Debroy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software: Practice and Experience</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="989" to="1011" />
			<date type="published" when="2013-08">August 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b91">
	<analytic>
		<title level="a" type="main">On the Consensus-based Application of Fault Localization Techniques</title>
		<author>
			<persName><forename type="first">V</forename><surname>Debroy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Annual Computer Software and Applications Conference Workshops</title>
		<meeting>IEEE Annual Computer Software and Applications Conference Workshops<address><addrLine>Munich, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-07">July 2011</date>
			<biblScope unit="page" from="506" to="511" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b92">
	<analytic>
		<title level="a" type="main">On the Equivalence of Certain Fault Localization Techniques</title>
		<author>
			<persName><forename type="first">V</forename><surname>Debroy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM Symposium on Applied Computing</title>
		<meeting>the ACM Symposium on Applied Computing<address><addrLine>TaiChung, Taiwan</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-03">March 2011</date>
			<biblScope unit="page" from="1457" to="1463" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b93">
	<analytic>
		<title level="a" type="main">A Grouping-Based Strategy to Improve the Effectiveness of Fault Localization Techniques</title>
		<author>
			<persName><forename type="first">V</forename><surname>Debroy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Choi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Quality Software</title>
		<meeting>International Conference on Quality Software<address><addrLine>Zhangjiajie, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-07">July 2010</date>
			<biblScope unit="page" from="13" to="22" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b94">
	<analytic>
		<title level="a" type="main">Combining Mutation and Fault Localization for Automated Program Debugging</title>
		<author>
			<persName><forename type="first">V</forename><surname>Debroy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systems and Software</title>
		<imprint>
			<biblScope unit="volume">90</biblScope>
			<biblScope unit="page" from="45" to="60" />
			<date type="published" when="2014-04">April 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b95">
	<analytic>
		<title level="a" type="main">Critical Slicing for Software Fault Localization</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Demillo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">H</forename><surname>Spafford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Software Testing and Analysis</title>
		<meeting>International Symposium on Software Testing and Analysis<address><addrLine>San Diego, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1996-01">January 1996</date>
			<biblScope unit="page" from="121" to="134" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b96">
	<analytic>
		<title level="a" type="main">Failure and Fault Analysis for Software Debugging</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Demillo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">H</forename><surname>Spafford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Annual Computer Software and Applications Conference</title>
		<meeting>IEEE Annual Computer Software and Applications Conference</meeting>
		<imprint>
			<date type="published" when="1977">1977</date>
			<biblScope unit="page" from="515" to="521" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b97">
	<monogr>
		<title level="m" type="main">Enhancing Automated Fault Discovery and Analysis</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Demott</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
		<respStmt>
			<orgName>Michigan State University</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b98">
	<analytic>
		<title level="a" type="main">Data Mining and Cross-checking of execution traces</title>
		<author>
			<persName><forename type="first">T</forename><surname>Denmat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>DucassÃ©</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Ridoux</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Automated Software Engineering</title>
		<meeting>International Conference on Automated Software Engineering<address><addrLine>Long Beach, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-11">November 2005</date>
			<biblScope unit="page" from="396" to="399" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b99">
	<analytic>
		<title level="a" type="main">Automated Software Testing Using a Meta-heuristic Technique based on Tabu Search</title>
		<author>
			<persName><forename type="first">E</forename><surname>Diaz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Tuya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Blanco</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Conference on Automated Software Engineering</title>
		<meeting>Conference on Automated Software Engineering<address><addrLine>Montreal, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-10">October 2003</date>
			<biblScope unit="page" from="310" to="313" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b100">
	<analytic>
		<title level="a" type="main">Finding Failures by Cluster Analysis of Execution Profiles</title>
		<author>
			<persName><forename type="first">W</forename><surname>Dickinson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Leon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Fodgurski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>Toronto, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-05">May 2001</date>
			<biblScope unit="page" from="339" to="348" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b101">
	<analytic>
		<title level="a" type="main">On the Influence of Multiple Faults on Coverage-based Fault Localization</title>
		<author>
			<persName><forename type="first">N</forename><surname>Digiuseppe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Jones</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Software Testing and Analysis</title>
		<meeting>International Symposium on Software Testing and Analysis<address><addrLine>Toronto, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-07">July 2011</date>
			<biblScope unit="page" from="210" to="220" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b102">
	<analytic>
		<title level="a" type="main">On the Use of Mutation Faults in Empirical Assessments of Test Case Prioritization Techniques</title>
		<author>
			<persName><forename type="first">H</forename><surname>Do</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Rothermel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="733" to="752" />
			<date type="published" when="2006-09">September 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b103">
	<monogr>
		<title/>
		<author>
			<persName><surname>Drdebug</surname></persName>
		</author>
		<ptr target="www.drdebug.org" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b104">
	<analytic>
		<title level="a" type="main">Method, System, and Program for Logging Statements to Monitor Execution of a Program</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Edwards</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Patent US</title>
		<imprint>
			<biblScope unit="volume">6539501</biblScope>
			<date type="published" when="2003-03">March 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b105">
	<analytic>
		<title level="a" type="main">Racerx: Effective, Static Detection of Race Conditions and Deadlocks</title>
		<author>
			<persName><forename type="first">D</forename><surname>Engler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Ashcraft</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM Symposium on Operating Systems Principles</title>
		<meeting>ACM Symposium on Operating Systems Principles<address><addrLine>Bolton Landing, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-10">October 2003</date>
			<biblScope unit="page" from="237" to="252" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b106">
	<analytic>
		<title level="a" type="main">Dynamically Discovering Likely Program Invariants to Support Program Evolution</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D</forename><surname>Ernst</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Cockrell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">G</forename><surname>Griswold</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Notkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="99" to="123" />
			<date type="published" when="2001-02">February 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b107">
	<monogr>
		<ptr target="http://www.eclipse.org/tptp" />
		<title level="m">Eclipse Test &amp; Performance Tools Platform Project</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b108">
	<analytic>
		<title level="a" type="main">Error Invariants</title>
		<author>
			<persName><forename type="first">E</forename><surname>Ermis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Schaf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Wies</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Formal Methods</title>
		<meeting>International Symposium on Formal Methods<address><addrLine>Paris, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-08">August 2012</date>
			<biblScope unit="page" from="187" to="201" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b109">
	<analytic>
		<title level="a" type="main">Causal Atomicity</title>
		<author>
			<persName><forename type="first">A</forename><surname>Farzan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Madhusudan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference Computer Aided Verification</title>
		<meeting>International Conference Computer Aided Verification<address><addrLine>Seattle, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006-08">August 2006</date>
			<biblScope unit="page" from="315" to="328" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b110">
	<analytic>
		<title level="a" type="main">Meta-analysis for Atomicity Violations under Nested Locking</title>
		<author>
			<persName><forename type="first">A</forename><surname>Farzan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Madhusudan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Sorrentino</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference Computer Aided Verification</title>
		<meeting>International Conference Computer Aided Verification<address><addrLine>Grenoble, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-07">July 2009</date>
			<biblScope unit="page" from="248" to="262" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b111">
	<monogr>
		<title level="m" type="main">Fundamentals of Neural Networks: Architectures, Algorithms, and Applications</title>
		<author>
			<persName><forename type="first">L</forename><surname>Fausett</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994">1994</date>
			<publisher>Prentice Hall</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b112">
	<analytic>
		<title level="a" type="main">Atomizer: A Dynamic Atomicity Checker for Multithreaded Programs</title>
		<author>
			<persName><forename type="first">C</forename><surname>Flanagan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">N</forename><surname>Freund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages</title>
		<meeting>ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages<address><addrLine>Venice, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-01">January 2004</date>
			<biblScope unit="page" from="256" to="267" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b113">
	<analytic>
		<title level="a" type="main">Adversarial Memory for Detecting Destructive Races</title>
		<author>
			<persName><forename type="first">C</forename><surname>Flanagan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">N</forename><surname>Freund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGPLAN Conference on Programming Language Design and Implementation</title>
		<meeting>ACM SIGPLAN Conference on Programming Language Design and Implementation<address><addrLine>Toronto, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-06">June 2010</date>
			<biblScope unit="page" from="244" to="254" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b114">
	<analytic>
		<title level="a" type="main">Exploiting Purity for atomicity</title>
		<author>
			<persName><forename type="first">C</forename><surname>Flanagan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">N</forename><surname>Freund</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Qadeer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="275" to="291" />
			<date type="published" when="2005-05">May 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b115">
	<analytic>
		<title level="a" type="main">Velodrome: A Sound and Complete Dynamic Atomicity Checker for Multithreaded Programs</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">N</forename><surname>Flanagan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Freund</surname></persName>
		</author>
		<author>
			<persName><surname>Yi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGPLAN Conference on Programming Language Design and Implementation</title>
		<meeting>ACM SIGPLAN Conference on Programming Language Design and Implementation<address><addrLine>Tucson, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-06">June 2008</date>
			<biblScope unit="page" from="293" to="303" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b116">
	<analytic>
		<title level="a" type="main">Model-based Diagnosis of Hardware Designs</title>
		<author>
			<persName><forename type="first">G</forename><surname>Friedrich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stumptner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artificial Intelligence</title>
		<imprint>
			<biblScope unit="issue">1-2</biblScope>
			<biblScope unit="page" from="3" to="39" />
			<date type="published" when="1999-07">July 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b117">
	<monogr>
		<title level="m" type="main">Fault Localization Using Textual Similarities</title>
		<author>
			<persName><forename type="first">Z</forename><forename type="middle">P</forename><surname>Fry</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
		<respStmt>
			<orgName>University of Virginia</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Master Thesis</note>
</biblStruct>

<biblStruct xml:id="b118">
	<analytic>
		<title level="a" type="main">A Theoretical Study: The Impact of Cloning Failed Test Cases on the Effectiveness of Fault Localization</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Gong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zheng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Quality Software</title>
		<meeting>International Conference on Quality Software<address><addrLine>Nanjing, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-07">July 2013</date>
			<biblScope unit="page" from="288" to="291" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b119">
	<monogr>
		<ptr target="http://sourceware.org/binutils/docs/gprof/" />
		<title level="m">GNU gprof</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b120">
	<monogr>
		<title/>
		<author>
			<persName><surname>Gnu Gdb</surname></persName>
		</author>
		<ptr target="http://www.gnu.org/software/gdb/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b121">
	<analytic>
		<title level="a" type="main">Diversity Maximization Speedup for Fault</title>
		<author>
			<persName><forename type="first">L</forename><surname>Gong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Lo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Automated Software Engineering</title>
		<meeting>International Conference on Automated Software Engineering<address><addrLine>Essen, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-09">September 2012</date>
			<biblScope unit="page" from="30" to="39" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b122">
	<analytic>
		<title level="a" type="main">Interactive Fault Localization Leveraging Simple User Feedback</title>
		<author>
			<persName><forename type="first">L</forename><surname>Gong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Lo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Maintenance</title>
		<meeting>International Conference on Software Maintenance<address><addrLine>Trento, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-09">September 2012</date>
			<biblScope unit="page" from="67" to="76" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b123">
	<analytic>
		<title level="a" type="main">Effects of Class Imbalance in Test Suites: An Empirical Study of Spectrum-Based Fault Localization</title>
		<author>
			<persName><forename type="first">C</forename><surname>Gong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Hao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Annual Computer Software and Applications Conference Workshops</title>
		<meeting>IEEE Annual Computer Software and Applications Conference Workshops<address><addrLine>Izmir, Turkey</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-07">July 2012</date>
			<biblScope unit="page" from="470" to="475" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b124">
	<analytic>
		<title level="a" type="main">Factorising the Multiple Fault Localization Problem: Adapting Single-Fault Localizer to Multi-fault Programs</title>
		<author>
			<persName><forename type="first">C</forename><surname>Gong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Xue</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Asia-Pacific Software Engineering Conference</title>
		<meeting>Asia-Pacific Software Engineering Conference<address><addrLine>Hong Kong</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-12">December 2012</date>
			<biblScope unit="page" from="729" to="732" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b125">
	<analytic>
		<title level="a" type="main">Prioritizing Tests for Software Fault Localization</title>
		<author>
			<persName><forename type="first">A</forename><surname>Gonzalez-Sanchez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Piel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Gross</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J</forename><surname>Van Gemund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Quality Software</title>
		<meeting>International Conference on Quality Software<address><addrLine>Zhangjiajie, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-07">July 2010</date>
			<biblScope unit="page" from="42" to="51" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b126">
	<analytic>
		<title level="a" type="main">An Empirical Study on the Usage of Testability Information to Fault Localization in Software</title>
		<author>
			<persName><forename type="first">A</forename><surname>Gonzalez-Sanchez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Gross</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J C</forename><surname>Van Gemund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM Symposium on Applied Computing</title>
		<meeting>the ACM Symposium on Applied Computing<address><addrLine>TaiChung, Taiwan</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-03">March 2011</date>
			<biblScope unit="page" from="1398" to="1403" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b127">
	<analytic>
		<title level="a" type="main">Prioritizing Tests for Fault Localization through Ambiguity Group Reduction</title>
		<author>
			<persName><forename type="first">A</forename><surname>Gonzalez-Sanchez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Gross</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J C</forename><surname>Van Gemund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Automated Software Engineering</title>
		<meeting>International Conference on Automated Software Engineering<address><addrLine>Lawrence, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-11">November 2011</date>
			<biblScope unit="page" from="83" to="92" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b128">
	<analytic>
		<title level="a" type="main">Improving the Effectiveness of Spectra-Based Fault Localization Using Specifications</title>
		<author>
			<persName><forename type="first">D</forename><surname>Gopinath</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">N</forename><surname>Zaeem</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Khurshid</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Automated Software Engineering</title>
		<meeting>International Conference on Automated Software Engineering<address><addrLine>Essen, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-09">September 2012</date>
			<biblScope unit="page" from="40" to="49" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b129">
	<analytic>
		<title level="a" type="main">Using HTML5 Visualizations in Software Fault Localization</title>
		<author>
			<persName><forename type="first">C</forename><surname>Gouveia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Campos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of first IEEE Working Conference on Software Visualization</title>
		<meeting>first IEEE Working Conference on Software Visualization<address><addrLine>Eindhoven, Netherland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-09">September 2013</date>
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b130">
	<monogr>
		<title level="m" type="main">Logic Programs for Consistency-Based Diagnosis</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">B</forename><surname>Gregory</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994">1994</date>
		</imprint>
		<respStmt>
			<orgName>Carleton University</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b131">
	<monogr>
		<title level="m" type="main">Debugging Software: From Verification to Repair</title>
		<author>
			<persName><forename type="first">A</forename><surname>Griesmayer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
		<respStmt>
			<orgName>Graz University of Technology</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b132">
	<analytic>
		<title level="a" type="main">Automated Fault Localization for C Programs</title>
		<author>
			<persName><forename type="first">A</forename><surname>Griesmayer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Staber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Bloem</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Electronic Notes in Theoretical Computer Science</title>
		<imprint>
			<biblScope unit="volume">174</biblScope>
			<biblScope unit="page" from="95" to="111" />
			<date type="published" when="2007-05">May 2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b133">
	<analytic>
		<title level="a" type="main">Fault Localization using a Model Checker</title>
		<author>
			<persName><forename type="first">A</forename><surname>Griesmayer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Staber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Bloem</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Software Testing, Verification and Reliability</title>
		<imprint>
			<date type="published" when="2010-06">June 2010</date>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="149" to="173" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b134">
	<monogr>
		<title level="m" type="main">Error Explanation and Fault Localization with Distance Metrics</title>
		<author>
			<persName><forename type="first">A</forename><surname>Groce</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
		<respStmt>
			<orgName>Carnegie Mellon University</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b135">
	<analytic>
		<title level="a" type="main">What Went Wrong: Explaining Counterexamples</title>
		<author>
			<persName><forename type="first">A</forename><surname>Groce</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Visser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Model Checking Software</title>
		<meeting>International Conference on Model Checking Software<address><addrLine>Portland, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-05">May 2003</date>
			<biblScope unit="page" from="121" to="136" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b136">
	<analytic>
		<title level="a" type="main">Error Explanation with Distance Metrics</title>
		<author>
			<persName><forename type="first">A</forename><surname>Groce</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Chaki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Kroening</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Strichman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal on Software Tools for Technology Transfer</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="229" to="247" />
			<date type="published" when="2006-06">June 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b137">
	<analytic>
		<title level="a" type="main">Understanding Counterexample with Explain</title>
		<author>
			<persName><forename type="first">A</forename><surname>Groce</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Kroening</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Lerda</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Aided Verification</title>
		<imprint>
			<date type="published" when="2004-07">July 2004</date>
			<biblScope unit="volume">3114</biblScope>
			<biblScope unit="page" from="453" to="456" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b138">
	<analytic>
		<title level="a" type="main">A Classification of Software Faults</title>
		<author>
			<persName><forename type="first">M</forename><surname>Grottke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">S</forename><surname>Trivedi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Sixteenth International Symposium on Software Reliability Engineering</title>
		<meeting>Sixteenth International Symposium on Software Reliability Engineering<address><addrLine>Chicago, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-11">November 2005</date>
			<biblScope unit="page" from="419" to="420" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b139">
	<analytic>
		<title level="a" type="main">Accurately Choosing Execution Runs for Software Fault Localization</title>
		<author>
			<persName><forename type="first">L</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Roychoudhury</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Compiler Construction</title>
		<meeting>International Conference on Compiler Construction<address><addrLine>Vienna, Austria</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006-03">March 2006</date>
			<biblScope unit="page" from="80" to="95" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b140">
	<analytic>
		<title level="a" type="main">Locating Faulty Code Using Failure-Inducing Chops</title>
		<author>
			<persName><forename type="first">N</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Automated Software Engineering</title>
		<meeting>International Conference on Automated Software Engineering<address><addrLine>Long Beach, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-11">November 2005</date>
			<biblScope unit="page" from="263" to="272" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b141">
	<analytic>
		<title level="a" type="main">An Efficient Relevant Slicing Method for Debugging</title>
		<author>
			<persName><forename type="first">T</forename><surname>Gyimothy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Beszedes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Forgacs</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of European Software Engineering Conference, held jointly with the ACM SIGSOFT Symposium on the Foundation of Software Engineering</title>
		<meeting>European Software Engineering Conference, held jointly with the ACM SIGSOFT Symposium on the Foundation of Software Engineering<address><addrLine>Toulouse, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-09">September 1999</date>
			<biblScope unit="page" from="303" to="321" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b142">
	<analytic>
		<title level="a" type="main">Common Trends in Software Fault and Failure Data</title>
		<author>
			<persName><forename type="first">M</forename><surname>Hamill</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Goseva-Popstojanova</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="484" to="496" />
			<date type="published" when="2009-01">January 2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b143">
	<analytic>
		<title level="a" type="main">Dynamic Detection of Atomic-set-serializability Violations</title>
		<author>
			<persName><forename type="first">C</forename><surname>Hammer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Dolby</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Vaziri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Tip</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>Leipzig, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-05">May 2008</date>
			<biblScope unit="page" from="231" to="240" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b144">
	<analytic>
		<title level="a" type="main">VIDA: Visual Interactive Debugging</title>
		<author>
			<persName><forename type="first">D</forename><surname>Hao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Mei</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>Vancouver, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-05">May 2009</date>
			<biblScope unit="page" from="583" to="586" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b145">
	<analytic>
		<title level="a" type="main">Eliminating Harmful Redundancy for Testing-Based Fault Localization Using Test Suite Reduction: An Experimental Study</title>
		<author>
			<persName><forename type="first">D</forename><surname>Hao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Mei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Sun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Maintenance</title>
		<meeting>International Conference on Software Maintenance<address><addrLine>Budapest, Hungary</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-09">September 2005</date>
			<biblScope unit="page" from="683" to="686" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b146">
	<analytic>
		<title level="a" type="main">Optimizing for the Number of Tests Generated in Search Based Test Data Generation with an Application to the Oracle Cost Problem</title>
		<author>
			<persName><forename type="first">M</forename><surname>Harman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">G</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Lakhotia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Mcminn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Yoo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Testing, Verification, and Validation Workshops</title>
		<meeting>International Conference on Software Testing, Verification, and Validation Workshops<address><addrLine>Paris, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-04">April 2010</date>
			<biblScope unit="page" from="182" to="191" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b147">
	<analytic>
		<title level="a" type="main">Reducing Qualitative Human Oracle Costs Associated with Automatically Generated Test Data</title>
		<author>
			<persName><forename type="first">P</forename><surname>Mcminn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stevenson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Harman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Workshop on Software Test Output Validation</title>
		<meeting>International Workshop on Software Test Output Validation<address><addrLine>Trento, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-07">July 2010</date>
			<biblScope unit="page" from="1" to="4" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b148">
	<analytic>
		<title level="a" type="main">An Empirical Investigation of the Relationship between Spectra Differences and Regression Faults</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Harrold</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Rothermel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Sayre</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Yi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Software Testing, Verification and Reliability</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="171" to="194" />
			<date type="published" when="2000-09">September 2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b149">
	<analytic>
		<title level="a" type="main">Low-overhead Memory Leak Detection using Adaptive Statistical Profiling</title>
		<author>
			<persName><forename type="first">M</forename><surname>Hauswirth</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">M</forename><surname>Cillmbi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Architectural Support for Programming Languages and Operating Systems</title>
		<meeting>International Conference on Architectural Support for Programming Languages and Operating Systems<address><addrLine>Boston, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-10">October 2004</date>
			<biblScope unit="page" from="156" to="164" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b150">
	<monogr>
		<title level="m" type="main">A Fault-Based Model of Fault Localization Techniques</title>
		<author>
			<persName><forename type="first">M</forename><surname>Hays</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
		<respStmt>
			<orgName>University of Kentucky</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b151">
	<analytic>
		<title level="a" type="main">Automated Debugging using Path-based Weakest Preconditions</title>
		<author>
			<persName><forename type="first">H</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Fundamental Approaches to Software Engineering</title>
		<meeting>Fundamental Approaches to Software Engineering<address><addrLine>Barcelona, Spain</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-03">March 2004</date>
			<biblScope unit="page" from="267" to="280" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b152">
	<monogr>
		<title level="m" type="main">Automated Debugging using Path-based Weakest Preconditions</title>
		<author>
			<persName><forename type="first">H</forename><surname>He</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
		<respStmt>
			<orgName>University of Arizona</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Master Thesis</note>
</biblStruct>

<biblStruct xml:id="b153">
	<analytic>
		<title level="a" type="main">Theory of the Back-propagation Neural Network</title>
		<author>
			<persName><forename type="first">R</forename><surname>Hecht-Nielsen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Joint Conference on Neural Networks</title>
		<meeting>International Joint Conference on Neural Networks<address><addrLine>Washington D.C., USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1989-06">Jun 1989</date>
			<biblScope unit="page" from="593" to="605" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b154">
	<analytic>
		<title level="a" type="main">Symbolic Debugging of Optimized Code</title>
		<author>
			<persName><forename type="first">J</forename><surname>Hennessy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Programming Language and Systems</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="323" to="344" />
			<date type="published" when="1982-07">July 1982</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b155">
	<analytic>
		<title level="a" type="main">Supporting Professional Spreadsheet Users by Generating Leveled Dataflow Diagrams</title>
		<author>
			<persName><forename type="first">F</forename><surname>Hermans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Pinzger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Van Deursen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>Waikiki, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-05">May 2011</date>
			<biblScope unit="page" from="451" to="460" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b156">
	<analytic>
		<title level="a" type="main">Detecting and Visualizing Inter-worksheet Smells in Spreadsheets</title>
		<author>
			<persName><forename type="first">F</forename><surname>Hermans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Pinzger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Van Deursen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>Zurich, Switzerland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-06">June 2012</date>
			<biblScope unit="page" from="441" to="451" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b157">
	<analytic>
		<title level="a" type="main">Data Clone Detection and Visualization in Spreadsheets</title>
		<author>
			<persName><forename type="first">F</forename><surname>Hermans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Sedee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Pinzger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Van Deursen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>San Francisco, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-05">May 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b158">
	<analytic>
		<title level="a" type="main">Avoiding Coincidental Correctness in Boundary Value Analysis</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">M</forename><surname>Hierons</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Software Engineering and Methodology</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="227" to="241" />
			<date type="published" when="2006-07">July 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b159">
	<analytic>
		<title level="a" type="main">Oracles for Distributed Testing</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">M</forename><surname>Hierons</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="629" to="641" />
			<date type="published" when="2012-05">May 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b160">
	<analytic>
		<title level="a" type="main">Verdict Functions in Testing with a Fault Domain or Test Hypotheses</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">M</forename><surname>Hierons</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Software Engineering and Methodology</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">14</biblScope>
			<date type="published" when="2009-07">July 2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b161">
	<analytic>
		<title level="a" type="main">Metrics-based Spreadsheet Visualization: Support for Focused Maintenance</title>
		<author>
			<persName><forename type="first">K</forename><surname>Hodnigg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">T</forename><surname>Mittermeir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of EuSpRIG Conference &quot;in Pursuit of Spreadsheet Excellence</title>
		<meeting>EuSpRIG Conference &quot;in Pursuit of Spreadsheet Excellence</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="79" to="94" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b162">
	<analytic>
		<title level="a" type="main">From Fault Localization of Programs written in 3 rd level Language to Spreadsheets</title>
		<author>
			<persName><forename type="first">B</forename><surname>Hofer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PhD Dissertation</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
		<respStmt>
			<orgName>Graz University of Technology</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b163">
	<analytic>
		<title level="a" type="main">On the Empirical Evaluation of Fault Localization Techniques for Spreadsheets</title>
		<author>
			<persName><forename type="first">B</forename><surname>Hofer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Riboira</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Getzner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Fundamental Approaches to Software Engineering</title>
		<imprint>
			<biblScope unit="volume">7793</biblScope>
			<biblScope unit="page" from="68" to="82" />
			<date type="published" when="2013-03">March 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b164">
	<analytic>
		<title level="a" type="main">Spectrum Enhanced Dynamic Slicing for better Fault Localization</title>
		<author>
			<persName><forename type="first">B</forename><surname>Hofer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of European Conference on Artificial Intelligence</title>
		<meeting>European Conference on Artificial Intelligence<address><addrLine>Montpellier, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-08">August 2012</date>
			<biblScope unit="page" from="420" to="425" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b165">
	<monogr>
		<author>
			<persName><forename type="first">D</forename><surname>Hovemeyer</surname></persName>
		</author>
		<title level="m">Simple and Effective Static Analysis to Find Bugs</title>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
		<respStmt>
			<orgName>University of Maryland</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b166">
	<monogr>
		<title level="m" type="main">Automated Fault Localization: A Statistical Predicate Analysis Approach</title>
		<author>
			<persName><forename type="first">P</forename><surname>Hu</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
		<respStmt>
			<orgName>University of Hong Kong</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation, the</note>
</biblStruct>

<biblStruct xml:id="b167">
	<analytic>
		<title level="a" type="main">Fault Localization with Non-parametric Program Behavior Model</title>
		<author>
			<persName><forename type="first">P</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">K</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">H</forename><surname>Tse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Quality Software</title>
		<meeting>International Conference on Quality Software<address><addrLine>Oxford, UK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-08">August 2008</date>
			<biblScope unit="page" from="385" to="395" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b168">
	<analytic>
		<title level="a" type="main">Toward Model-based Debugging of Spreadsheet Programs</title>
		<author>
			<persName><forename type="first">D</forename><surname>Jannach</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Engler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Joint Conference on Knowledge-Based Software Engineering</title>
		<meeting>Joint Conference on Knowledge-Based Software Engineering<address><addrLine>Kaunas, Lithuania</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-08">August 2010</date>
			<biblScope unit="page" from="252" to="264" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b169">
	<analytic>
		<title level="a" type="main">Zoltar: A Spectrum-based Fault Localization Tool</title>
		<author>
			<persName><forename type="first">T</forename><surname>Janssen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J C</forename><surname>Van Germund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ESEC/FSE Workshop on Software Integration and Evaluation</title>
		<meeting>ESEC/FSE Workshop on Software Integration and Evaluation<address><addrLine>Amsterdam, Netherlands</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-08">August 2009</date>
			<biblScope unit="page" from="23" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b170">
	<monogr>
		<title level="m" type="main">Dynamic State Alteration Techniques for Automatically Locating Software Errors</title>
		<author>
			<persName><forename type="first">D</forename><surname>Jeffrey</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
		<respStmt>
			<orgName>University of California Riverside</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b171">
	<analytic>
		<title level="a" type="main">Fault Localization Using Value Replacement</title>
		<author>
			<persName><forename type="first">D</forename><surname>Jeffrey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Software Testing and Analysis</title>
		<meeting>International Symposium on Software Testing and Analysis<address><addrLine>Seattle, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-07">July 2008</date>
			<biblScope unit="page" from="167" to="178" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b172">
	<analytic>
		<title level="a" type="main">Effective and Efficient Localization of Multiple Faults using Value Replacement</title>
		<author>
			<persName><forename type="first">D</forename><surname>Jeffrey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Maintenance</title>
		<meeting>International Conference on Software Maintenance<address><addrLine>Edmonton, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-09">September 2009</date>
			<biblScope unit="page" from="221" to="230" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b173">
	<analytic>
		<title level="a" type="main">BugFix: A Learning-based Tool to Assist Developers in Fixing Bugs</title>
		<author>
			<persName><forename type="first">D</forename><surname>Jeffrey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Program Comprehension</title>
		<meeting>International Conference on Program Comprehension<address><addrLine>Vancouver, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-05">May 2009</date>
			<biblScope unit="page" from="70" to="79" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b174">
	<analytic>
		<title level="a" type="main">On the Integration of Test Adequacy, Test Case Prioritization, and Statistical Fault Localization</title>
		<author>
			<persName><forename type="first">B</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">K</forename><surname>Chan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Quality Software</title>
		<meeting>International Conference on Quality Software<address><addrLine>Zhangjiajie, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-07">July 2010</date>
			<biblScope unit="page" from="377" to="384" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b175">
	<analytic>
		<title level="a" type="main">On Practical Adequate Test Suites for Integrated Test Case Prioritization and Fault Localization</title>
		<author>
			<persName><forename type="first">B</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">K</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">H</forename><surname>Tse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Quality Software</title>
		<meeting>International Conference on Quality Software<address><addrLine>Madrid, Spain</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-07">July 2011</date>
			<biblScope unit="page" from="21" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b176">
	<analytic>
		<title level="a" type="main">On the Adoption of MC/DC and Control-flow adequacy for a Tight Integration of Program Testing and Statistical Fault Localization</title>
		<author>
			<persName><forename type="first">B</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Zhai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">K</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">H</forename><surname>Tse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information and Software Technology</title>
		<imprint>
			<biblScope unit="volume">55</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="897" to="917" />
			<date type="published" when="2013-05">May 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b177">
	<analytic>
		<title level="a" type="main">How well does test case prioritization integrate with statistical fault localization?</title>
		<author>
			<persName><forename type="first">B</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">K</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">H</forename><surname>Tse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">Y</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Information and Software Technology</title>
		<imprint>
			<biblScope unit="volume">54</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="739" to="758" />
			<date type="published" when="2012-07">July 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b178">
	<analytic>
		<title level="a" type="main">F3: Fault Localization for Field Failures</title>
		<author>
			<persName><forename type="first">W</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Orso</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Software Testing and Analysis</title>
		<meeting>International Symposium on Software Testing and Analysis<address><addrLine>Lugano, Switzerland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-07">July 2013</date>
			<biblScope unit="page" from="213" to="223" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b179">
	<analytic>
		<title level="a" type="main">Bug-Assist: Assisting Fault Localization in ANSI-C Programs</title>
		<author>
			<persName><forename type="first">M</forename><surname>Jose</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Majumdar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Computer Aided Verification</title>
		<meeting>International Conference on Computer Aided Verification<address><addrLine>Snowbird, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-07">July 2011</date>
			<biblScope unit="page" from="504" to="509" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b180">
	<analytic>
		<title level="a" type="main">Cause Clue Clauses: Error Localization using Maximum Satisfiability</title>
		<author>
			<persName><forename type="first">M</forename><surname>Jose</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Majumdar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGPLAN Conference on Programming Language Design and Implementation</title>
		<meeting>ACM SIGPLAN Conference on Programming Language Design and Implementation<address><addrLine>Portland, Oregon</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-06">June 2011</date>
			<biblScope unit="page" from="437" to="446" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b181">
	<monogr>
		<title level="m" type="main">Spectral Debugging</title>
		<author>
			<persName><forename type="first">H</forename><surname>Lee</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
		<respStmt>
			<orgName>The University of Melbourne</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b182">
	<monogr>
		<title level="m" type="main">Semi-Automatic Fault Localization</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Jones</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
		<respStmt>
			<orgName>Georgia Institute of Technology</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b183">
	<analytic>
		<title level="a" type="main">Debugging in Parallel</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Jones</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Bowring</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Harrold</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM/SIGSOFT International Symposium on Software Testing and Analysis</title>
		<meeting>ACM/SIGSOFT International Symposium on Software Testing and Analysis<address><addrLine>London, UK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-07">July 2007</date>
			<biblScope unit="page" from="16" to="26" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b184">
	<analytic>
		<title level="a" type="main">Empirical Evaluation of the Tarantula Automatic Fault-Localization Technique</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Jones</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Harrold</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference Automated Software Engineering</title>
		<meeting>International Conference Automated Software Engineering<address><addrLine>Long Beach, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-11">November 2005</date>
			<biblScope unit="page" from="273" to="282" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b185">
	<analytic>
		<title level="a" type="main">Visualization for Fault Localization</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Jones</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Harrold</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Stasko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Workshop on Software Visualization, 23 rd International Conference on Software Engineering</title>
		<meeting>the Workshop on Software Visualization, 23 rd International Conference on Software Engineering<address><addrLine>Ontario, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-05">May 2001</date>
			<biblScope unit="page" from="71" to="75" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b186">
	<analytic>
		<title level="a" type="main">Visualization of Test Information to Assist Fault Localization</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Jones</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Harrold</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Stasko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>Orlando, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-05">May 2002</date>
			<biblScope unit="page" from="467" to="477" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b187">
	<analytic>
		<title level="a" type="main">HSFal: Effective Fault Localization using Hybrid Spectrum of Full Slices and Execution Slices</title>
		<author>
			<persName><forename type="first">X</forename><surname>Ju</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Cao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systems and Software</title>
		<imprint>
			<biblScope unit="volume">90</biblScope>
			<biblScope unit="page" from="3" to="17" />
			<date type="published" when="2014-04">April 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b188">
	<analytic>
		<title level="a" type="main">MintHint: Automated Synthesis of Repair Hints</title>
		<author>
			<persName><forename type="first">S</forename><surname>Kaleeswaran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Tulsian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kanade</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Orso</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>Hyderabad, India</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014-05">May 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b189">
	<analytic>
		<title level="a" type="main">Finding Concurrency-related Bugs Using Random Isolation</title>
		<author>
			<persName><forename type="first">N</forename><surname>Kidd</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Reps</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Dolby</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Vaziri</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Verification, Model Checking, and Abstract Interpretation</title>
		<meeting>International Conference on Verification, Model Checking, and Abstract Interpretation<address><addrLine>Savannah, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-01">January 2009</date>
			<biblScope unit="page" from="198" to="213" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b190">
	<analytic>
		<title level="a" type="main">Empirical Evaluation of Existing Algorithms of Spectrum based Fault Localization</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Information Networking</title>
		<meeting>International Conference on Information Networking</meeting>
		<imprint>
			<date type="published" when="2014-02">February 2014</date>
			<biblScope unit="page" from="346" to="351" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b191">
	<analytic>
		<title level="a" type="main">Using Dynamic Information in the Interprocedural Static Slicing of Binary Executables</title>
		<author>
			<persName><forename type="first">Ã</forename><surname>Kiss</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>JÃ¡sz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>GyimÃ³thy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software Quality Control</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="227" to="245" />
			<date type="published" when="2005-09">September 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b192">
	<analytic>
		<title level="a" type="main">Diagnosing Multiple Persistent and Intermittent Faults</title>
		<author>
			<persName><forename type="first">J</forename><surname>De Kleer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Joint Conference on Artificial Intelligence</title>
		<meeting>International Joint Conference on Artificial Intelligence<address><addrLine>Pasadena, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-07">July 2009</date>
			<biblScope unit="page" from="733" to="738" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b193">
	<analytic>
		<title level="a" type="main">Diagnosing Multiple Faults</title>
		<author>
			<persName><forename type="first">J</forename><surname>De Kleer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">C</forename><surname>Williams</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="97" to="130" />
			<date type="published" when="1987-04">April 1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b194">
	<analytic>
		<title level="a" type="main">Debugging reinvented: Asking and Answering Why and Why not Questions about Program Behavior</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J</forename><surname>Ko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">A</forename><surname>Myers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>Leipzig, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-05">May 2008</date>
			<biblScope unit="page" from="301" to="310" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b195">
	<analytic>
		<title level="a" type="main">Introducing Alias Information into Model-based Debugging</title>
		<author>
			<persName><forename type="first">D</forename><surname>Kob</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of European Conference on Artificial Intelligence</title>
		<meeting>European Conference on Artificial Intelligence<address><addrLine>Valencia Spain</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-08">August 2004</date>
			<biblScope unit="page" from="833" to="837" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b196">
	<monogr>
		<title level="m" type="main">Extended Modeling for Automated Fault Localization in Object-Oriented Software</title>
		<author>
			<persName><forename type="first">D</forename><surname>Kob</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
		<respStmt>
			<orgName>Graz University of Technology</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b197">
	<analytic>
		<title level="a" type="main">Spectrum-based Fault Localization for Diagnosing Concurrency Faults</title>
		<author>
			<persName><forename type="first">F</forename><surname>Koca</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Sozer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Testing Software and Systems</title>
		<meeting>International Conference on Testing Software and Systems<address><addrLine>Istanbul, Turkey</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-11">November 2013</date>
			<biblScope unit="page" from="239" to="254" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b198">
	<monogr>
		<title level="m" type="main">Fault Localization in Backbone Networks</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">R</forename><surname>Kompella</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
		<respStmt>
			<orgName>University of California</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b199">
	<analytic>
		<title level="a" type="main">Automated Error Localization and Correction for Imperative Programs</title>
		<author>
			<persName><forename type="first">R</forename><surname>KÓ§nighofer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Bloem</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Formal Methods in Computer-Aided Design</title>
		<meeting>International Conference on Formal Methods in Computer-Aided Design<address><addrLine>Austin, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-10">October 2011</date>
			<biblScope unit="page" from="91" to="100" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b200">
	<analytic>
		<title level="a" type="main">PELAS -Program Error-Locating Assistant System</title>
		<author>
			<persName><forename type="first">B</forename><surname>Korel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="1253" to="1260" />
			<date type="published" when="1988-09">September 1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b201">
	<analytic>
		<title level="a" type="main">Dynamic Program Slicing</title>
		<author>
			<persName><forename type="first">B</forename><surname>Korel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Laski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information Processing Letters</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="155" to="163" />
			<date type="published" when="1988-10">October 1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b202">
	<analytic>
		<title level="a" type="main">STAD: A System for Testing and Debugging: User Perspective</title>
		<author>
			<persName><forename type="first">B</forename><surname>Korel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Laski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Second Workshop on Software Testing, Verification, and Analysis</title>
		<meeting>the Second Workshop on Software Testing, Verification, and Analysis</meeting>
		<imprint>
			<date type="published" when="1988-07">July 1988</date>
			<biblScope unit="page" from="13" to="20" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b203">
	<analytic>
		<title level="a" type="main">Forward Computation of Dynamic Program Slices</title>
		<author>
			<persName><forename type="first">B</forename><surname>Korel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Yalamanchili</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Software Testing and Analysis</title>
		<meeting>International Symposium on Software Testing and Analysis<address><addrLine>Seattle, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994-08">August 1994</date>
			<biblScope unit="page" from="66" to="79" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b204">
	<analytic>
		<title level="a" type="main">Slicing, Chopping, and Path Conditions with Barriers</title>
		<author>
			<persName><forename type="first">J</forename><surname>Krinke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software Quality Control</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="339" to="360" />
			<date type="published" when="2004-12">December 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b205">
	<monogr>
		<title level="m" type="main">Data-driven Methods for Fault Localization in Process Technology</title>
		<author>
			<persName><forename type="first">C</forename><surname>Kuhnert</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
		<respStmt>
			<orgName>Karlsruhe Institute of Technology</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph. D. dissertation</note>
</biblStruct>

<biblStruct xml:id="b206">
	<analytic>
		<title level="a" type="main">Experimental Evaluation of Program Slicing for Fault Localization</title>
		<author>
			<persName><forename type="first">S</forename><surname>Kusumoto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Nishimatsu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Nishie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Inoue</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Empirical Software Engineering</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="49" to="76" />
			<date type="published" when="2002-03">March 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b207">
	<analytic>
		<title level="a" type="main">CPTEST: A Framework for the Automatic Fault Detection, Localization and Correction of Constraint Programs</title>
		<author>
			<persName><forename type="first">N</forename><surname>Lazaar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Forth International Conference on Software Testing, Verification, and Validation</title>
		<meeting>Forth International Conference on Software Testing, Verification, and Validation<address><addrLine>Berlin, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-03">March 2011</date>
			<biblScope unit="page" from="320" to="321" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b208">
	<analytic>
		<title level="a" type="main">Will Fault Localization Work for These Failures? An Automated Approach to Predict Effectiveness of Fault Localization Tools</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">B</forename><surname>Le</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Lo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 29th IEEE International Conference on Software Maintenance</title>
		<meeting>29th IEEE International Conference on Software Maintenance<address><addrLine>Eindhoven, Netherland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-09">September 2013</date>
			<biblScope unit="page" from="310" to="319" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b209">
	<analytic>
		<title level="a" type="main">Theory and Practice, Do They Match? A Case with Spectrum-based Fault Localization</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">B</forename><surname>Le</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Thung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Lo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Conference on Software Maintenance</title>
		<meeting>IEEE International Conference on Software Maintenance<address><addrLine>Eindhoven, Netherland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-09">September 2013</date>
			<biblScope unit="page" from="380" to="383" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b210">
	<analytic>
		<title level="a" type="main">Robust Radial Basis Function Neural Networks</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">C</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">C</forename><surname>Chung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Tsai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">I</forename><surname>Chang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Systems, Man, and Cybernetics: Part B Cybernetics</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="674" to="685" />
			<date type="published" when="1999-12">December 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b211">
	<analytic>
		<title level="a" type="main">Study of the Relationship of Bug Consistency with respect to Performance of Spectra Metrics</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Naish</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Ramamohanarao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Computer Science and Information Technology</title>
		<meeting>International Conference on Computer Science and Information Technology</meeting>
		<imprint>
			<date type="published" when="2009-08">August 2009</date>
			<biblScope unit="page" from="501" to="508" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b212">
	<analytic>
		<title level="a" type="main">Effective Software Bug Localization Using Spectral Frequency Weighting Function</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Naish</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Ramamohanarao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Annual IEEE International Computer Software and Applications Conference</title>
		<meeting>Annual IEEE International Computer Software and Applications Conference<address><addrLine>Seoul, Korea</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-07">July 2010</date>
			<biblScope unit="page" from="218" to="227" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b213">
	<analytic>
		<title level="a" type="main">Effective Statistical Fault Localization Using Program Slices</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Lei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Dai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Annual IEEE International Computer Software and Applications Conference</title>
		<meeting>Annual IEEE International Computer Software and Applications Conference<address><addrLine>Izmir, Turkey</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-07">July 2012</date>
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b214">
	<analytic>
		<title level="a" type="main">Causation</title>
		<author>
			<persName><forename type="first">D</forename><surname>Lewis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Philosophy</title>
		<imprint>
			<biblScope unit="volume">70</biblScope>
			<biblScope unit="page" from="556" to="567" />
			<date type="published" when="1973-10">October 1973</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b215">
	<monogr>
		<title level="m" type="main">Counterfactuals</title>
		<author>
			<persName><forename type="first">D</forename><surname>Lewis</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1973">1973</date>
			<publisher>Harvard University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b216">
	<analytic>
		<title level="a" type="main">Effective Fault Localization based on Minimum Debugging Frontier Set</title>
		<author>
			<persName><forename type="first">F</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Huo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zhong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Code Generation and Optimization</title>
		<meeting>International Symposium on Code Generation and Optimization<address><addrLine>Shenzhen, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-02">February 2013</date>
			<biblScope unit="page" from="23" to="27" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b217">
	<analytic>
		<title level="a" type="main">Using Cluster Analysis to Identify Coincidental Correctness in Fault Localization</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Computational and Information Sciences</title>
		<meeting>International Conference on Computational and Information Sciences<address><addrLine>Nanchong, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-05">May 2012</date>
			<biblScope unit="page" from="357" to="360" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b218">
	<analytic>
		<title level="a" type="main">A New Fault Localizing Method for the Program Debugging Process</title>
		<author>
			<persName><forename type="first">L</forename><surname>Lian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kusumoto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Kikuno</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Matsumofo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Torii</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information and Software Technology</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="271" to="284" />
			<date type="published" when="1997-04">April 1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b219">
	<analytic>
		<title level="a" type="main">Equivalence analysis and its application in improving the efficiency of program slicing</title>
		<author>
			<persName><forename type="first">D</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Harrold</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Software Engineer Methodology</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="347" to="383" />
			<date type="published" when="2002-07">July 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b220">
	<monogr>
		<title level="m" type="main">Cooperative Bug Isolation</title>
		<author>
			<persName><forename type="first">B</forename><surname>Liblit</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
		<respStmt>
			<orgName>University of California, Berkeley</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b221">
	<analytic>
		<title level="a" type="main">Scalable Statistical Bug Isolation</title>
		<author>
			<persName><forename type="first">B</forename><surname>Liblit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Naik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">X</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Aiken</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">I</forename><surname>Jordan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGPLAN Conference on Programming Language Design and Implementations</title>
		<meeting>ACM SIGPLAN Conference on Programming Language Design and Implementations<address><addrLine>Chicago, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-07">July 2005</date>
			<biblScope unit="page" from="15" to="26" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b222">
	<analytic>
		<title level="a" type="main">Statistical Debugging: A Hypothesis Testing-based Approach</title>
		<author>
			<persName><forename type="first">C</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Fei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Yan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">P</forename><surname>Midkiff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="831" to="848" />
			<date type="published" when="2006-10">October 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b223">
	<analytic>
		<title level="a" type="main">Failure Proximity: A Fault Localization-based Approach</title>
		<author>
			<persName><forename type="first">C</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Han</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGSOFT International Symposium on Foundations of Software Engineering</title>
		<meeting>ACM SIGSOFT International Symposium on Foundations of Software Engineering<address><addrLine>Portland, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006-11">November 2006</date>
			<biblScope unit="page" from="286" to="295" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b224">
	<analytic>
		<title level="a" type="main">Mining Behavior Graphs for &quot;Backtrace&quot; of Noncrashing Bugs</title>
		<author>
			<persName><forename type="first">C</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Yan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Yu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIAM International Conference on Data Mining</title>
		<meeting>the SIAM International Conference on Data Mining<address><addrLine>Philadelphia, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014-04">April 2014</date>
			<biblScope unit="page" from="286" to="297" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b225">
	<analytic>
		<title level="a" type="main">A Systematic Study of Failure Proximity</title>
		<author>
			<persName><forename type="first">C</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Han</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="826" to="843" />
			<date type="published" when="2008-12">December 2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b226">
	<analytic>
		<title level="a" type="main">Indexing Noncrashing Failures: A Dynamic Program Slicing-Based Approach</title>
		<author>
			<persName><forename type="first">C</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">K</forename><surname>Bhargava</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Maintenance</title>
		<meeting>International Conference on Software Maintenance<address><addrLine>Paris, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-10">October 2007</date>
			<biblScope unit="page" from="455" to="464" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b227">
	<monogr>
		<title level="m" type="main">Automated Analysis of Energy Efficiency and Performance for Mobile Application</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Liu</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
		<respStmt>
			<orgName>University of Science and Technology</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation, the Hong Kong</note>
</biblStruct>

<biblStruct xml:id="b228">
	<monogr>
		<title level="m" type="main">Understanding, Detecting, and Exposing Concurrency Bugs</title>
		<author>
			<persName><forename type="first">S</forename><surname>Lu</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
		<respStmt>
			<orgName>University of Illinois at Urbana-Champaign</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b229">
	<analytic>
		<title level="a" type="main">Extended Comprehensive Study of Association Measures for Fault Localization</title>
		<author>
			<persName><forename type="first">D</forename><surname>Lucia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Lo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aditya</forename><surname>Thung</surname></persName>
		</author>
		<author>
			<persName><surname>Budi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Software: Evaluation and Process</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="172" to="219" />
			<date type="published" when="2014-02">February 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b230">
	<analytic>
		<title level="a" type="main">Are Faults Localizable?</title>
		<author>
			<persName><forename type="first">F</forename><surname>Lucia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Thung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Lo</surname></persName>
		</author>
		<author>
			<persName><surname>Jiang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Working Conference on Mining Software Repositories</title>
		<meeting>IEEE Working Conference on Mining Software Repositories<address><addrLine>Zurich, Switzerland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-06">June 2012</date>
			<biblScope unit="page" from="74" to="77" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b231">
	<analytic>
		<title level="a" type="main">Fusing Fault Localizers</title>
		<author>
			<persName><forename type="first">D</forename><surname>Lucia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Lo</surname></persName>
		</author>
		<author>
			<persName><surname>Xia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Conference on Automated Software Engineering</title>
		<meeting>IEEE International Conference on Automated Software Engineering<address><addrLine>Vasteras, Sweden</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014-09">September 2014</date>
			<biblScope unit="page" from="127" to="138" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b232">
	<monogr>
		<title level="m" type="main">Ranking-Based Approaches for Localizing Faults</title>
		<author>
			<persName><forename type="first">Lucia</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
		<respStmt>
			<orgName>Singapore Management University</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b233">
	<analytic>
		<title level="a" type="main">Source Code Retrieval for Bug Localization using Latent Dirichlet Allocation</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">K</forename><surname>Lukins</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">A</forename><surname>Kraft</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">H</forename><surname>Etzkorn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Working Conference on Reverse Engineering</title>
		<meeting>Working Conference on Reverse Engineering<address><addrLine>Antwerp, Belgium</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-10">October 2008</date>
			<biblScope unit="page" from="155" to="164" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b234">
	<analytic>
		<title level="a" type="main">Automatic Program Bug Location by Program Slicing</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Lyle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Weiser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Conference on Computer and Applications</title>
		<meeting>the International Conference on Computer and Applications</meeting>
		<imprint>
			<date type="published" when="1987">1987</date>
			<biblScope unit="page" from="877" to="883" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b235">
	<analytic>
		<title level="a" type="main">MZoltar: Automatic Debugging of Android Applications</title>
		<author>
			<persName><forename type="first">P</forename><surname>Machado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Campos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Workshop on Software Development Lifecycle for Mobile</title>
		<meeting>International Workshop on Software Development Lifecycle for Mobile<address><addrLine>Saint Petersburg, Russia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-08">August 2013</date>
			<biblScope unit="page" from="9" to="16" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b236">
	<analytic>
		<title level="a" type="main">Slice-based statistical fault localization</title>
		<author>
			<persName><forename type="first">X</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Lei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Dai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Qi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systems and Software</title>
		<imprint>
			<biblScope unit="volume">89</biblScope>
			<biblScope unit="page" from="51" to="62" />
			<date type="published" when="2014-03">March 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b237">
	<analytic>
		<title level="a" type="main">Debugging with Reverse Watchpoint</title>
		<author>
			<persName><forename type="first">K</forename><surname>Maruyama</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Terada</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Quality Software</title>
		<meeting>International Conference on Quality Software<address><addrLine>Dallas, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-11">November 2003</date>
			<biblScope unit="page" from="116" to="116" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b238">
	<analytic>
		<title level="a" type="main">Cleansing Test Suites from Coincidental Correctness to Enhance Fault-Localization</title>
		<author>
			<persName><forename type="first">W</forename><surname>Masri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Assi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Testing, Verification, and Validation</title>
		<meeting>International Conference on Software Testing, Verification, and Validation<address><addrLine>Paris, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-04">April 2010</date>
			<biblScope unit="page" from="369" to="399" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b239">
	<analytic>
		<title level="a" type="main">Prevalence of Coincidental Correctness and Mitigation of its Impact on Fault Localization</title>
		<author>
			<persName><forename type="first">W</forename><surname>Masri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Assi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Software Engineering and Methodology</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2014-02">February 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b240">
	<analytic>
		<title level="a" type="main">JADE -AI Support for Debugging Java Programs</title>
		<author>
			<persName><forename type="first">C</forename><surname>Mateis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stumptner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wieland</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Conference on Tools with Artificial Intelligence</title>
		<meeting>IEEE International Conference on Tools with Artificial Intelligence<address><addrLine>Washington, D.C., USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-11">November 2002</date>
			<biblScope unit="page" from="62" to="69" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b241">
	<analytic>
		<title level="a" type="main">Modeling Java Programs for Diagnosis</title>
		<author>
			<persName><forename type="first">C</forename><surname>Mateis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stumptner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of European Conference on Artificial Intelligence</title>
		<meeting>European Conference on Artificial Intelligence<address><addrLine>Berlin, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="171" to="175" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b242">
	<analytic>
		<title level="a" type="main">Prioritizing Model-based Debugging Diagnostic Reports</title>
		<author>
			<persName><forename type="first">W</forename><surname>Mayer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stumptner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J C</forename><surname>Van Gemund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Workshop on Principles of Diagnosis</title>
		<meeting>International Workshop on Principles of Diagnosis<address><addrLine>Blue Mountains, Australia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-09">September 2008</date>
			<biblScope unit="page" from="127" to="134" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b243">
	<analytic>
		<title level="a" type="main">Modeling Programs with Unstructured Control Flow for Debugging</title>
		<author>
			<persName><forename type="first">W</forename><surname>Mayer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stumptner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Conference of the Canadian Society for Computational Studies of Intelligence</title>
		<meeting>Conference of the Canadian Society for Computational Studies of Intelligence<address><addrLine>Calgary, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-05">May 2002</date>
			<biblScope unit="page" from="107" to="118" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b244">
	<analytic>
		<title level="a" type="main">Debugging Program Exceptions</title>
		<author>
			<persName><forename type="first">W</forename><surname>Mayer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stumptner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Workshop on Principles of Diagnosis</title>
		<meeting>International Workshop on Principles of Diagnosis</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="119" to="124" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b245">
	<analytic>
		<title level="a" type="main">Approximate Modeling for Debugging of Program Loops</title>
		<author>
			<persName><forename type="first">W</forename><surname>Mayer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stumptner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Workshop on Principles of Diagnosis</title>
		<meeting>International Workshop on Principles of Diagnosis<address><addrLine>Carcassonne, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-06">June 2004</date>
			<biblScope unit="page" from="87" to="92" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b246">
	<analytic>
		<title level="a" type="main">Abstract Interpretation of Programs for Model-based Debugging</title>
		<author>
			<persName><forename type="first">W</forename><surname>Mayer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stumptner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Joint Conference on Artificial Intelligence</title>
		<meeting>International Joint Conference on Artificial Intelligence<address><addrLine>Hyderabad, India</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-01">January 2007</date>
			<biblScope unit="page" from="471" to="476" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b247">
	<analytic>
		<title level="a" type="main">Model-based Debugging using Multiple Abstract Models</title>
		<author>
			<persName><forename type="first">W</forename><surname>Mayer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stumptner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Workshop on Automated Debugging</title>
		<meeting>International Workshop on Automated Debugging<address><addrLine>Monterey, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-09">September 2003</date>
			<biblScope unit="page" from="55" to="70" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b248">
	<analytic>
		<title level="a" type="main">Model-Based Debugging: State of the Art and Future Challenges</title>
		<author>
			<persName><forename type="first">W</forename><surname>Mayer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stumptner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Electronic Notes in Theoretical Computer Science</title>
		<imprint>
			<biblScope unit="volume">174</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="61" to="82" />
			<date type="published" when="2007-05">May 2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b249">
	<analytic>
		<title level="a" type="main">Evaluating Models for Model-Based Debugging</title>
		<author>
			<persName><forename type="first">W</forename><surname>Mayer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stumptner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM International Conference on Automated Software Engineering</title>
		<meeting>ACM International Conference on Automated Software Engineering<address><addrLine>L&apos;Aquila, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-09">September 2008</date>
			<biblScope unit="page" from="128" to="137" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b250">
	<analytic>
		<title level="a" type="main">Can AI help to Improve Debugging Substantially? Debugging Experiences with Value-based Models</title>
		<author>
			<persName><forename type="first">W</forename><surname>Mayer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stumptner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wieland</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of European Conference on Artificial Intelligence</title>
		<meeting>European Conference on Artificial Intelligence<address><addrLine>Lyon, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-07">July 2002</date>
			<biblScope unit="page" from="417" to="421" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b251">
	<analytic>
		<title level="a" type="main">Towards an Integrated Debugging Environment</title>
		<author>
			<persName><forename type="first">W</forename><surname>Mayer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stumptner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wieland</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of European Conference on Artificial Intelligence</title>
		<meeting>European Conference on Artificial Intelligence<address><addrLine>Lyon, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-07">July 2002</date>
			<biblScope unit="page" from="422" to="426" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b252">
	<analytic>
		<title level="a" type="main">Fault Detection Probability Analysis for Coverage-Based Test Suite Reduction</title>
		<author>
			<persName><forename type="first">S</forename><surname>Mcmaster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Memon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Maintenance</title>
		<meeting>International Conference on Software Maintenance<address><addrLine>Paris, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-10">October 2007</date>
			<biblScope unit="page" from="335" to="344" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b253">
	<analytic>
		<title level="a" type="main">Identifying Coincidental Correctness for Fault Localization Clustering Test Cases</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Miao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhou</surname></persName>
		</author>
		<ptr target="https://msdn.microsoft.com/en-us/library/sc65sadd.aspx" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering and Knowledge Engineering</title>
		<meeting>International Conference on Software Engineering and Knowledge Engineering<address><addrLine>San Francisco, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Microsoft Visual Studio Debugger</publisher>
			<date>July 2012 255</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b254">
	<analytic>
		<title level="a" type="main">Exploring Program Phases for Statistical Bug Localization</title>
		<author>
			<persName><forename type="first">V</forename><surname>Modi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Roy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">K</forename><surname>Aggarwal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering</title>
		<meeting>ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering<address><addrLine>Seattle, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-06">June 2013</date>
			<biblScope unit="page" from="33" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b255">
	<analytic>
		<title level="a" type="main">An edge marking technique for dynamic slicing of object-oriented programs</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">P</forename><surname>Mohapatra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Mall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Kumar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Computer Software and Applications Conference</title>
		<meeting>International Computer Software and Applications Conference<address><addrLine>Hong Kong</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-09">September 2004</date>
			<biblScope unit="page" from="60" to="65" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b256">
	<analytic>
		<title level="a" type="main">Automated Patch Generation Learned From Human-written Patches&apos; Essay on the Problem Statement and the Evaluation of Automatic Software Repair</title>
		<author>
			<persName><forename type="first">M</forename><surname>Monperrus</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Conference on Software Engineering</title>
		<meeting>the International Conference on Software Engineering<address><addrLine>Hyderabad, India</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014-06">June 2014</date>
			<biblScope unit="page" from="234" to="242" />
		</imprint>
	</monogr>
	<note>A Critical Review of</note>
</biblStruct>

<biblStruct xml:id="b257">
	<monogr>
		<title level="m" type="main">Effective Software Fault Localization using Dynamic Program Behaviors</title>
		<author>
			<persName><forename type="first">S</forename><surname>Moon</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
		<respStmt>
			<orgName>Korea Advanced Institute of Science and Technology</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Master Thesis</note>
</biblStruct>

<biblStruct xml:id="b258">
	<analytic>
		<title level="a" type="main">The Detection of Fault-prone Programs</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Munson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">M</forename><surname>Khoshgoftaar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="423" to="433" />
			<date type="published" when="1992-05">May 1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b259">
	<analytic>
		<title level="a" type="main">Finding and Reproducing Heisenbugs in Concurrent Programs</title>
		<author>
			<persName><forename type="first">M</forename><surname>Musuvathi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Qadeer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Ball</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Basler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">A</forename><surname>Nainar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Neamtiu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of USENIX Symposium on Operating Systems Design and Implementation</title>
		<meeting>USENIX Symposium on Operating Systems Design and Implementation<address><addrLine>San Diego, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-12">December 2008</date>
			<biblScope unit="page" from="267" to="280" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b260">
	<analytic>
		<title level="a" type="main">Effective Static Race Detection for Java</title>
		<author>
			<persName><forename type="first">M</forename><surname>Naik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Aiken</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Whaley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGPLAN Conference on Programming Language Design and Implementation</title>
		<meeting>ACM SIGPLAN Conference on Programming Language Design and Implementation<address><addrLine>Ottawa, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006-06">June 2006</date>
			<biblScope unit="page" from="308" to="319" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b261">
	<analytic>
		<title level="a" type="main">Spectral Debugging with Weights and Incremental Ranking</title>
		<author>
			<persName><forename type="first">L</forename><surname>Naish</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Ramamohanarao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Asia-Pacific Software Engineering Conference</title>
		<meeting>Asia-Pacific Software Engineering Conference<address><addrLine>Batu Ferringhi, Malaysia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-12">December 2009</date>
			<biblScope unit="page" from="168" to="175" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b262">
	<analytic>
		<title level="a" type="main">Duals in Spectral Fault Localization</title>
		<author>
			<persName><forename type="first">L</forename><surname>Naish</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">J</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Australian Software Engineering Conference</title>
		<meeting>Australian Software Engineering Conference<address><addrLine>Melbourne, Australia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-06">June 2013</date>
			<biblScope unit="page" from="51" to="59" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b263">
	<analytic>
		<title level="a" type="main">Spectral Debugging: How much better can we do</title>
		<author>
			<persName><forename type="first">L</forename><surname>Naish</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Ramamohanarao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Australian Software Engineering Conference</title>
		<meeting>Australian Software Engineering Conference<address><addrLine>Melbourne, Australia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-06">June 2012</date>
			<biblScope unit="page" from="96" to="106" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b264">
	<analytic>
		<title level="a" type="main">Statements versus predicate in spectral bug localization</title>
		<author>
			<persName><forename type="first">L</forename><surname>Naish</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Ramamohanarao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Asia-Pacific Software Engineering Conference</title>
		<meeting>Asia-Pacific Software Engineering Conference<address><addrLine>Sydney, Australia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-11">November 2010</date>
			<biblScope unit="page" from="375" to="384" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b265">
	<analytic>
		<title level="a" type="main">A Model for Spectra-based Software Diagnosis</title>
		<author>
			<persName><forename type="first">L</forename><surname>Naish</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Ramamohanarao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the ACM Transactions on Software Engineering and Methodology</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2011-08">August 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b266">
	<analytic>
		<title level="a" type="main">Using Mutation Analysis for Assessing and Comparing Testing Coverage Criteria</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">S</forename><surname>Namin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">H</forename><surname>Andrews</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Labiche</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="608" to="624" />
			<date type="published" when="2006-08">August 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b267">
	<analytic>
		<title level="a" type="main">Fault Localization Using N-gram Analysis</title>
		<author>
			<persName><forename type="first">S</forename><surname>Nessa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Abedin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">Eric</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Khan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Qi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Wireless Algorithms, Systems, and Applications</title>
		<meeting>International Conference on Wireless Algorithms, Systems, and Applications</meeting>
		<imprint>
			<date type="published" when="2009-08">August 2009</date>
			<biblScope unit="page" from="548" to="559" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b268">
	<analytic>
		<title level="a" type="main">SemFix: Program Repair via Semantic Analysis</title>
		<author>
			<persName><forename type="first">H</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Qi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Roychoudhury</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Chandra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>San Francisco, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-05">May 2013</date>
			<biblScope unit="page" from="772" to="781" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b269">
	<monogr>
		<title level="m" type="main">On the Use of Constraints in Automated Program Debugging -From Foundations to Empirical Results</title>
		<author>
			<persName><forename type="first">M</forename><surname>Nica</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
		<respStmt>
			<orgName>Graz University of Technology</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b270">
	<analytic>
		<title level="a" type="main">On the Use of Mutations and Testing for Debugging</title>
		<author>
			<persName><forename type="first">M</forename><surname>Nica</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Nica</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software, Practice and Experience</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="1121" to="1142" />
			<date type="published" when="2013-09">September 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b271">
	<analytic>
		<title level="a" type="main">The Minimal Failure-causing Schema of Combinatorial Testing</title>
		<author>
			<persName><forename type="first">C</forename><surname>Nie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Leung</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Software Engineering and Methodology</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="2011-09">September 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b272">
	<analytic>
		<title level="a" type="main">Identifying Failure-Inducing Combinations Using Tuple Relationship</title>
		<author>
			<persName><forename type="first">X</forename><surname>Niu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Nie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Lei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">T</forename><surname>Chan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Testing, Verification, and Validation Workshops</title>
		<meeting>International Conference on Software Testing, Verification, and Validation Workshops<address><addrLine>Luxembourg</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-03">March 2013</date>
			<biblScope unit="page" from="271" to="280" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b273">
	<analytic>
		<title level="a" type="main">Empirical Analysis of Software Fault Content and Fault Proneness using Bayesian Methods</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">J</forename><surname>Pai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">B</forename><surname>Dugan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="675" to="686" />
			<date type="published" when="2007-10">October 2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b274">
	<monogr>
		<title level="m" type="main">Software Debugging with Dynamic Instrumentation and Test-based Knowledge</title>
		<author>
			<persName><forename type="first">H</forename><surname>Pan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993">1993</date>
		</imprint>
		<respStmt>
			<orgName>Purdue University</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b275">
	<monogr>
		<title level="m" type="main">Heuristics for Automatic Localization of Software Faults</title>
		<author>
			<persName><forename type="first">H</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Spafford</surname></persName>
		</author>
		<idno>SERC-TR-116-P</idno>
		<imprint>
			<date type="published" when="1992">1992</date>
		</imprint>
		<respStmt>
			<orgName>Purdue University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b276">
	<analytic>
		<title level="a" type="main">Facing the Problem of Spreadsheet Errors</title>
		<author>
			<persName><forename type="first">R</forename><surname>Panko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Decision Line</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="8" to="10" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b277">
	<analytic>
		<title level="a" type="main">Applying Code Inspection to Spreadsheet Testing</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">R</forename><surname>Panko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Management Information Systems</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="159" to="176" />
			<date type="published" when="1999-09">September 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b278">
	<monogr>
		<title level="m" type="main">Sarbanes-oxley: What about all the spreadsheets?</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">R</forename><surname>Panko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Ordway</surname></persName>
		</author>
		<idno>CoRR, abs/0804.0797</idno>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b279">
	<analytic>
		<title level="a" type="main">Spreadsheet Errors: What We Know. What We Think We Can Do</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">R</forename><surname>Panko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">EuSpRIG</title>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b280">
	<analytic>
		<title level="a" type="main">Ctrigger: Exposing Atomicity Violation Bugs From Their Hiding Places</title>
		<author>
			<persName><forename type="first">S</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Architectural Support for Programming Language</title>
		<meeting>International Conference on Architectural Support for Programming Language<address><addrLine>Washington D.C.</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-03">March 2009</date>
			<biblScope unit="page" from="25" to="36" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b281">
	<analytic>
		<title level="a" type="main">Debugging Non-deadlock Concurrency Bugs</title>
		<author>
			<persName><forename type="first">S</forename><surname>Park</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2013 International Symposium on Software Testing and Analysis</title>
		<meeting>the 2013 International Symposium on Software Testing and Analysis<address><addrLine>Lugano, Switzerland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-07">July 2013</date>
			<biblScope unit="page" from="358" to="361" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b282">
	<monogr>
		<title level="m" type="main">Effective Fault Localization Techniques for Concurrent Software</title>
		<author>
			<persName><forename type="first">S</forename><surname>Park</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
		<respStmt>
			<orgName>Georgia Institute of Technology</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b283">
	<analytic>
		<title level="a" type="main">Are Automated Debugging Techniques Actually Helping Programmers</title>
		<author>
			<persName><forename type="first">C</forename><surname>Parnin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Orso</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Software Testing and Analysis</title>
		<meeting>International Symposium on Software Testing and Analysis<address><addrLine>Toronto, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-07">July 2011</date>
			<biblScope unit="page" from="199" to="209" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b284">
	<monogr>
		<title level="m" type="main">Automatic Diagnosis of Software Functional Faults by Means of Inferred Behavioral Models</title>
		<author>
			<persName><forename type="first">F</forename><surname>Pastore</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
		<respStmt>
			<orgName>UniversitÃ  degli Studi di Milano Bicocca</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b285">
	<analytic>
		<title level="a" type="main">RADAR: a Tool for Debugging Regression Problems in C/C++ Software</title>
		<author>
			<persName><forename type="first">F</forename><surname>Pastore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Mariani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Goffi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>San Francisco, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-05">May 2013</date>
			<biblScope unit="page" from="1335" to="1338" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b286">
	<monogr>
		<title level="m" type="main">Causality: Models, Reasoning, and Inference</title>
		<author>
			<persName><forename type="first">J</forename><surname>Pearl</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>Cambridge University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b287">
	<monogr>
		<title level="m" type="main">Automated Source-Level Debugging of Synthesizable VHDL Designs</title>
		<author>
			<persName><forename type="first">B</forename><surname>Peischl</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
		<respStmt>
			<orgName>Graz University of Technology</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b288">
	<analytic>
		<title level="a" type="main">Automated Source-Level Error Localization in Hardware Designs</title>
		<author>
			<persName><forename type="first">B</forename><surname>Peischl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Design &amp; Test of Computers</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="8" to="19" />
			<date type="published" when="2006-01">January 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b289">
	<analytic>
		<title level="a" type="main">A Dynamic Code Coverage Approach to Maximize Fault Localization Efficiency</title>
		<author>
			<persName><forename type="first">A</forename><surname>Perez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Riboira</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systems and Software</title>
		<imprint>
			<biblScope unit="volume">90</biblScope>
			<biblScope unit="page" from="18" to="28" />
			<date type="published" when="2014-04">April 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b290">
	<monogr>
		<title level="m" type="main">Dynamic Code Coverage with Progressive Detail Levels</title>
		<author>
			<persName><forename type="first">A</forename><surname>Perez</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
		<respStmt>
			<orgName>University of Porto</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b291">
	<analytic>
		<title level="a" type="main">Automated Support for Classifying Software Failure Reports</title>
		<author>
			<persName><forename type="first">A</forename><surname>Podgurski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Leon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Francis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Masri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Minch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>Portland, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-05">May 2003</date>
			<biblScope unit="page" from="465" to="475" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b292">
	<analytic>
		<title level="a" type="main">Automated Fault Localization Using Potential Invariants</title>
		<author>
			<persName><forename type="first">B</forename><surname>Pytlik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Renieris</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Krishnamurthi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">P</forename><surname>Reiss</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Workshop on Automated Debugging</title>
		<meeting>International Workshop on Automated Debugging<address><addrLine>Monterey, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-09">September 2003</date>
			<biblScope unit="page" from="273" to="276" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b293">
	<monogr>
		<title level="m" type="main">Semantic Analyses to Detect and Localize Software Regression Errors</title>
		<author>
			<persName><forename type="first">D</forename><surname>Qi</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
		<respStmt>
			<orgName>Tsinghua University</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b294">
	<analytic>
		<title level="a" type="main">Using Automated Program Repair for Evaluating the Effectiveness of Fault Localization Techniques</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Qi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Lei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2013 International Symposium on Software Testing and Analysis</title>
		<meeting>the 2013 International Symposium on Software Testing and Analysis<address><addrLine>Lugano, Switzerland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-07">July 2013</date>
			<biblScope unit="page" from="191" to="201" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b295">
	<analytic>
		<title level="a" type="main">Scenario oriented program slicing</title>
		<author>
			<persName><forename type="first">J</forename><surname>Qian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM Symposium on Applied Computing</title>
		<meeting>ACM Symposium on Applied Computing<address><addrLine>Fortaleza, Brazil</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-03">March 2008</date>
			<biblScope unit="page" from="748" to="752" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b296">
	<analytic>
		<title level="a" type="main">Retrieval from Software Libraries for Bug Localization: a Comparative Study of Generic and Composite Text Models</title>
		<author>
			<persName><forename type="first">S</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Working Conference on Mining Software Repositories</title>
		<meeting>Working Conference on Mining Software Repositories<address><addrLine>Hawaii, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-05">May 2011</date>
			<biblScope unit="page" from="43" to="52" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b297">
	<analytic>
		<title level="a" type="main">Impacts of Test Suite&apos;s Class Imbalance on Spectrum-based Fault Localization Techniques</title>
		<author>
			<persName><forename type="first">P</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Cai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 13 th International Conference on Quality Software</title>
		<meeting>13 th International Conference on Quality Software<address><addrLine>Nanjing, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-07">July 2013</date>
			<biblScope unit="page" from="260" to="267" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b298">
	<analytic>
		<title level="a" type="main">Growth in a Time of Debt</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">M</forename><surname>Reinhart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">S</forename><surname>Rogoff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">American Economic Review</title>
		<imprint>
			<biblScope unit="volume">100</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="573" to="578" />
			<date type="published" when="2010-01">January 2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b299">
	<analytic>
		<title level="a" type="main">A Theory of Diagnosis from First Principles</title>
		<author>
			<persName><forename type="first">R</forename><surname>Reiter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="57" to="95" />
			<date type="published" when="1987-04">April 1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b300">
	<monogr>
		<title level="m" type="main">A Research Framework for Software-Fault Localization Tools</title>
		<author>
			<persName><forename type="first">E</forename><surname>Renieris</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
		<respStmt>
			<orgName>Brown University</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b301">
	<analytic>
		<title level="a" type="main">Fault Localization with Nearest Neighbor Queries</title>
		<author>
			<persName><forename type="first">M</forename><surname>Renieris</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">P</forename><surname>Reiss</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Automated Software Engineering</title>
		<meeting>International Conference on Automated Software Engineering<address><addrLine>Montreal, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-10">October 2003</date>
			<biblScope unit="page" from="30" to="39" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b302">
	<analytic>
		<title level="a" type="main">The Use of Program Profiling for Software Maintenance with Applications to the Year 2000 Problem</title>
		<author>
			<persName><forename type="first">T</forename><surname>Reps</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Ball</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Das</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Larus</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGSOFT Symposium on Foundations of Software Engineering</title>
		<meeting>ACM SIGSOFT Symposium on Foundations of Software Engineering<address><addrLine>Zurich</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1997-09">September 1997</date>
			<biblScope unit="page" from="432" to="449" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b303">
	<monogr>
		<title level="m" type="main">Automated Source-Level Debugging of Synthesizable Verilog Designs</title>
		<author>
			<persName><forename type="first">N</forename><surname>Riaz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b304">
	<analytic>
		<title level="a" type="main">Isolating Failure Causes Through Test Case Generation</title>
		<author>
			<persName><forename type="first">J</forename><surname>RÃ¶Î²ler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Fraser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zeller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Orso</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Software Testing and Analysis</title>
		<meeting>International Symposium on Software Testing and Analysis<address><addrLine>Minneapolis, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-07">July 2012</date>
			<biblScope unit="page" from="309" to="319" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b305">
	<monogr>
		<title level="m" type="main">Workload-sensitive Timing Behavior Analysis for Fault Localization in Software Systems</title>
		<author>
			<persName><forename type="first">M</forename><surname>Rohr</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
		<respStmt>
			<orgName>Kiel University</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b306">
	<analytic>
		<title level="a" type="main">A Practical Approach to Programming with Assertions</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Rosenblum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="1995-01">January 1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b307">
	<analytic>
		<title level="a" type="main">Towards a Method of Programming with Assertions</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Rosenblum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>Melbourne, Australia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1992">1992</date>
			<biblScope unit="page" from="92" to="104" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b308">
	<analytic>
		<title level="a" type="main">What You See Is What You Test: A Methodology for Testing Form-based Visual Programs</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">J</forename><surname>Rothermel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Duparis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Burnett</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1998 International Conference on Software Engineering</title>
		<meeting>the 1998 International Conference on Software Engineering<address><addrLine>Kyoto, Japan</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1998-04">April 1998</date>
			<biblScope unit="page" from="198" to="207" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b309">
	<monogr>
		<title level="m" type="main">A Mixed Approach to Spectrum-based Fault Localization Using Information Theoretic Foundations</title>
		<author>
			<persName><forename type="first">S</forename><surname>Roychowdhry</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
		<respStmt>
			<orgName>University of Texas at Austin</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b310">
	<analytic>
		<title level="a" type="main">Heap Profiling of Lazy Functional Programs</title>
		<author>
			<persName><forename type="first">C</forename><surname>Runciman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wakeling</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Functional Programming</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">02</biblScope>
			<biblScope unit="page" from="217" to="245" />
			<date type="published" when="1993-04">April 1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b311">
	<analytic>
		<title level="a" type="main">End-user Software Visualizations for Fault Localization</title>
		<author>
			<persName><forename type="first">J</forename><surname>Ruthruff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Creswick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Burnett</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Cook</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Prabhakararao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Fisher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">I</forename></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Main</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM Symposium on Software Visualization</title>
		<meeting>ACM Symposium on Software Visualization<address><addrLine>San Diego, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-06">June 2003</date>
			<biblScope unit="page" from="123" to="132" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b312">
	<analytic>
		<title level="a" type="main">Improving Bug Localization using Structured Information Retrieval</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">K</forename><surname>Saha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lease</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kunshid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">E</forename><surname>Perry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Automated Software Engineering</title>
		<meeting>International Conference on Automated Software Engineering<address><addrLine>Silicon Valley, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-11">November 2013</date>
			<biblScope unit="page" from="345" to="355" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b313">
	<monogr>
		<title level="m" type="main">A Novel Invariants-based Approach for Automated Software Fault Localization</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">K</forename><surname>Sahoo</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
		<respStmt>
			<orgName>University of Illinois at Urbana-Champaign</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b314">
	<analytic>
		<title level="a" type="main">Using likely invariants for automated software fault localization</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">K</forename><surname>Sahoo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Criswell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Geigle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Adve</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Architectural Support for Programming Languages and Operating Systems</title>
		<meeting>International Conference on Architectural Support for Programming Languages and Operating Systems<address><addrLine>Houston, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-03">March 2013</date>
			<biblScope unit="page" from="139" to="152" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b315">
	<monogr>
		<title level="m" type="main">Cost Optimizations in Runtime Testing and Diagnosis</title>
		<author>
			<persName><forename type="first">A</forename><surname>Sanchez</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
		<respStmt>
			<orgName>Delft University of Technology</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b316">
	<monogr>
		<title level="m" type="main">Change-effects Analysis for Effective Testing and Validation of Evolving Software</title>
		<author>
			<persName><forename type="first">R</forename><surname>Santelices</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
		<respStmt>
			<orgName>Georgia Institute of Technology</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b317">
	<analytic>
		<title level="a" type="main">Lightweight Fault-localization using Multiple Coverage Types</title>
		<author>
			<persName><forename type="first">R</forename><surname>Santelices</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Jones</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Harrold</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering</meeting>
		<imprint>
			<date type="published" when="2009-05">May 2009</date>
			<biblScope unit="page" from="56" to="66" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b318">
	<analytic>
		<title level="a" type="main">Eraser: A Dynamic Data Race Detector for Multi-threaded Programs</title>
		<author>
			<persName><forename type="first">S</forename><surname>Savage</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Burrows</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Nelson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Sobalvarro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Anderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="391" to="411" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b319">
	<analytic>
		<title level="a" type="main">Runtime Safety Analysis of Multithreaded Programs</title>
		<author>
			<persName><forename type="first">K</forename><surname>Sen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Rosu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Agha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGSOFT Symposium on Foundations of Software Engineering</title>
		<meeting>ACM SIGSOFT Symposium on Foundations of Software Engineering<address><addrLine>Helsinki, Finland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-09">September 2003</date>
			<biblScope unit="page" from="337" to="346" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b320">
	<analytic>
		<title level="a" type="main">WhoseFault: Automatic Developer-to-Fault Assignment through Fault Localization</title>
		<author>
			<persName><forename type="first">F</forename><surname>Servant</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Jones</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>Zurich, Switzerland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-06">June 2012</date>
			<biblScope unit="page" from="36" to="46" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b321">
	<analytic>
		<title level="a" type="main">Scaling Model Checking of Dataraces using Dynamic Information</title>
		<author>
			<persName><forename type="first">O</forename><surname>Shacham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sagiv</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Schuster</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming</title>
		<meeting>ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming<address><addrLine>Chicago, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-06">June 2005</date>
			<biblScope unit="page" from="107" to="118" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b322">
	<monogr>
		<title level="m" type="main">Algorithmic Program Debugging</title>
		<author>
			<persName><forename type="first">E</forename><surname>Shapiro</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1982">1982</date>
		</imprint>
		<respStmt>
			<orgName>Yale University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. dissertation</note>
</biblStruct>

<biblStruct xml:id="b323">
	<analytic>
		<title level="a" type="main">JavaPDG: A New Platform for Program Dependence Analysis</title>
		<author>
			<persName><forename type="first">G</forename><surname>Shu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">A D</forename><surname>Henderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Podgurski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Testing, Verification and Validation</title>
		<meeting>International Conference on Software Testing, Verification and Validation<address><addrLine>Luxembourg</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-03">March 2013</date>
			<biblScope unit="page" from="408" to="415" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b324">
	<monogr>
		<title level="m" type="main">Statistical Estimation of Software Reliability and Failure-causing Effect</title>
		<author>
			<persName><forename type="first">G</forename><surname>Shu</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
		<respStmt>
			<orgName>Case Western Reserve University</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b325">
	<analytic>
		<title level="a" type="main">A survey on Algorithmic Debugging Strategies</title>
		<author>
			<persName><forename type="first">J</forename><surname>Silva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Advances in Engineering Software</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">11</biblScope>
			<date type="published" when="2011-11">November 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b326">
	<analytic>
		<title level="a" type="main">Penelope: Weaving Threads to Expose Atomicity Violations</title>
		<author>
			<persName><forename type="first">F</forename><surname>Sorrentino</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Farzan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Parthasarathy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGSOFT Symposium on Foundations of Software Engineering</title>
		<meeting>ACM SIGSOFT Symposium on Foundations of Software Engineering<address><addrLine>Santa Fe, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-11">November 2010</date>
			<biblScope unit="page" from="37" to="46" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b327">
	<analytic>
		<title level="a" type="main">Thin Slicing</title>
		<author>
			<persName><forename type="first">M</forename><surname>Stridharan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">J</forename><surname>Fink</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Bodik</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGPLAN Conference on Programming Language Design and Implementation</title>
		<meeting>SIGPLAN Conference on Programming Language Design and Implementation<address><addrLine>San Diego, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-06">June 2007</date>
			<biblScope unit="page" from="112" to="122" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b328">
	<analytic>
		<title level="a" type="main">A Simple Coverage-Based Locator for Multiple Faults</title>
		<author>
			<persName><forename type="first">F</forename><surname>Steimann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Bertschler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Testing, Verification and Validation</title>
		<meeting>International Conference on Software Testing, Verification and Validation<address><addrLine>Denver, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-04">April 2009</date>
			<biblScope unit="page" from="366" to="375" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b329">
	<analytic>
		<title level="a" type="main">Improving Coverage-Based Localization of Multiple Faults Using Algorithms from Integer Linear Programming</title>
		<author>
			<persName><forename type="first">F</forename><surname>Steimann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Frenkel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Software Reliability Engineering</title>
		<meeting>International Symposium on Software Reliability Engineering<address><addrLine>Dallas, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-11">November 2012</date>
			<biblScope unit="page" from="121" to="130" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b330">
	<analytic>
		<title level="a" type="main">Threats to the Validity and Value of Empirical Assessments of the Accuracy of Coveragebased Fault Locators</title>
		<author>
			<persName><forename type="first">F</forename><surname>Steimann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Frenkel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Abreu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Software Testing and Analysis</title>
		<meeting>International Symposium on Software Testing and Analysis<address><addrLine>Lugano, Switzerland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-07">July 2013</date>
			<biblScope unit="page" from="314" to="324" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b331">
	<analytic>
		<title level="a" type="main">Automated Bug Isolation via Program Chipping</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">D</forename><surname>Sterling</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Olsson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Automated and Analysis-Driven Debugging</title>
		<meeting>International Symposium on Automated and Analysis-Driven Debugging<address><addrLine>Monterey, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-09">September 2005</date>
			<biblScope unit="page" from="23" to="32" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b332">
	<analytic>
		<title level="a" type="main">A Survey of Intelligent Debugging</title>
		<author>
			<persName><forename type="first">M</forename><surname>Stumptner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">AI Communications</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="35" to="51" />
			<date type="published" when="1998-01">January 1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b333">
	<analytic>
		<title level="a" type="main">Debugging Functional Program</title>
		<author>
			<persName><forename type="first">M</forename><surname>Stumptner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Joint Conference on Artificial Intelligence</title>
		<meeting>International Joint Conference on Artificial Intelligence<address><addrLine>Stockholm, Sweden</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-08">August 1999</date>
			<biblScope unit="page" from="440" to="445" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b334">
	<monogr>
		<title level="m" type="main">Automated Failure Explanation Through Execution Comparison</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">N</forename><surname>Sumner</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
		<respStmt>
			<orgName>Purdue University</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b335">
	<analytic>
		<title level="a" type="main">Memory Indexing: Canonicalizing Addresses across Executions</title>
		<author>
			<persName><forename type="first">W</forename><surname>Sumner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Foundations of Software Engineering</title>
		<meeting>International Symposium on Foundations of Software Engineering<address><addrLine>Santa Fe, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-11">November 2010</date>
			<biblScope unit="page" from="217" to="226" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b336">
	<analytic>
		<title level="a" type="main">Algorithms for Automatically Computing the Causal Paths of Failures</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">N</forename><surname>Sumner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Fundamental Approaches to Software Engineering</title>
		<meeting>International Conference on Fundamental Approaches to Software Engineering<address><addrLine>York, UK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-03">March 2009</date>
			<biblScope unit="page" from="335" to="369" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b337">
	<analytic>
		<title level="a" type="main">Comparative Causality: Explaining the Differences between Executions</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">N</forename><surname>Sumner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>San Francisco, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-05">May 2013</date>
			<biblScope unit="page" from="272" to="281" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b338">
	<analytic>
		<title level="a" type="main">An Approach to Software Fault Localization and Revalidation based on Incremental Data Flow Analysis</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">B</forename><surname>Taha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Thebaut</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">S</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference Computer Software and Applications</title>
		<meeting>International Conference Computer Software and Applications</meeting>
		<imprint>
			<date type="published" when="1989">1989</date>
			<biblScope unit="page" from="527" to="534" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b339">
	<monogr>
		<title level="m" type="main">Fault Location and Avoidance in Long-Running Multithreaded Applications</title>
		<author>
			<persName><forename type="first">S</forename><surname>Tallam</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
		<respStmt>
			<orgName>University of Arizona</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b340">
	<analytic>
		<title level="a" type="main">A Slicing-based Approach for Locating Type Errors</title>
		<author>
			<persName><forename type="first">F</forename><surname>Tip</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">B</forename><surname>Dinesh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Software Engineering Methodology</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="5" to="55" />
			<date type="published" when="2001-01">January 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b341">
	<analytic>
		<title level="a" type="main">A Survey of Program Slicing Techniques</title>
		<author>
			<persName><forename type="first">F</forename><surname>Tip</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Programming Language</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="121" to="189" />
			<date type="published" when="1995-03">March 1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b342">
	<analytic>
		<title level="a" type="main">MemSAT: Checking Axiomatic Specifications of Memory Models</title>
		<author>
			<persName><forename type="first">E</forename><surname>Torlak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Vaziri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Dolby</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGPLAN Conference on Programming Language Design and Implementation</title>
		<meeting>ACM SIGPLAN Conference on Programming Language Design and Implementation<address><addrLine>Toronto, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-06">June 2010</date>
			<biblScope unit="page" from="341" to="350" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b343">
	<monogr>
		<title level="m" type="main">Improving Automatic Software Fault Localization</title>
		<author>
			<persName><forename type="first">R</forename><surname>Vayani</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
		<respStmt>
			<orgName>Delft University of Technology</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Master Thesis</note>
</biblStruct>

<biblStruct xml:id="b344">
	<analytic>
		<title level="a" type="main">Expertise in Debugging Computer Programs: A Process Analysis</title>
		<author>
			<persName><forename type="first">I</forename><surname>Vessy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Man-Machine Studies</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="459" to="494" />
			<date type="published" when="1985">March1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b345">
	<analytic>
		<title level="a" type="main">Test Suite Reduction for Fault Detection and Localization: A Combined Approach</title>
		<author>
			<persName><forename type="first">L</forename><surname>Vidacs</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bezedes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Tengeri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Siket</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Gyimothy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Conference on Software Maintenance, Reengineering and Reverse Engineering</title>
		<meeting>IEEE Conference on Software Maintenance, Reengineering and Reverse Engineering<address><addrLine>Antwerp, Belgium</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014-02">February 2014</date>
			<biblScope unit="page" from="204" to="213" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b346">
	<analytic>
		<title level="a" type="main">Accurate and efficient runtime detection of atomicity errors in concurrent programs</title>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">D</forename><surname>Stoller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming</title>
		<meeting>ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming</meeting>
		<imprint>
			<date type="published" when="2006-03">March 2006</date>
			<biblScope unit="page" from="137" to="146" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b347">
	<analytic>
		<title level="a" type="main">Search-based Fault Localization</title>
		<author>
			<persName><forename type="first">S</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>David</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lucia</forename></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Lau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 2011 IEEE/ACM International Conference on Automated Software Engineering</title>
		<meeting>2011 IEEE/ACM International Conference on Automated Software Engineering<address><addrLine>Lawrence, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-11">November 2011</date>
			<biblScope unit="page" from="556" to="559" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b348">
	<monogr>
		<title level="m" type="main">Post-Mortem Dynamic Analysis for Software Debugging</title>
		<author>
			<persName><forename type="first">T</forename><surname>Wang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
		<respStmt>
			<orgName>Fudan University</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b349">
	<analytic>
		<title level="a" type="main">Automated Path Generation for Software Fault Localization</title>
		<author>
			<persName><forename type="first">T</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Roychoudhury</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Automated Software Engineering</title>
		<meeting>International Conference on Automated Software Engineering<address><addrLine>Long Beach, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-11">November 2005</date>
			<biblScope unit="page" from="347" to="351" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b350">
	<analytic>
		<title level="a" type="main">Concurrency Bug Localization using Shared Memory Access Pairs</title>
		<author>
			<persName><forename type="first">W</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Yew</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Feng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 19 th ACM SIGPLAN symposium on Principles and Practices of Parallel Programming</title>
		<meeting>the 19 th ACM SIGPLAN symposium on Principles and Practices of Parallel Programming<address><addrLine>Orlando, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014-02">February 2014</date>
			<biblScope unit="page" from="375" to="376" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b351">
	<monogr>
		<title level="m" type="main">Automatic Localization of Code Omission Faults</title>
		<author>
			<persName><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
		<respStmt>
			<orgName>University of Science and Technology</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation, the Hong Kong</note>
</biblStruct>

<biblStruct xml:id="b352">
	<analytic>
		<title level="a" type="main">Taming Coincidental Correctness: Refine Code Coverage with Context Pattern to Improve Fault Localization</title>
		<author>
			<persName><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">C</forename><surname>Cheung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">K</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering</meeting>
		<imprint>
			<date type="published" when="2009-05">May 2009</date>
			<biblScope unit="page" from="45" to="55" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b353">
	<analytic>
		<title level="a" type="main">DrDebug: Deterministic Replay based Cyclic Debugging with Dynamic Slicing</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Patil</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Pereira</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Lueck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Neamtiu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE International Symposium on Code Generation and Optimization</title>
		<meeting><address><addrLine>Orlando, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014-02">February 2014</date>
			<biblScope unit="page" from="98" to="108" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b354">
	<monogr>
		<title level="m" type="main">Advanced Methods in Neural Computing</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">D</forename><surname>Wasserman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993">1993</date>
			<publisher>Van Nostrand Reinhold</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b355">
	<analytic>
		<title level="a" type="main">Analyzing Concurrency Bugs using Dual Slicing</title>
		<author>
			<persName><forename type="first">D</forename><surname>Weeratunge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">N</forename><surname>Sumner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Jagannathan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Software Testing and Analysis</title>
		<meeting>International Symposium on Software Testing and Analysis<address><addrLine>Trento, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-07">July 2010</date>
			<biblScope unit="page" from="253" to="264" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b356">
	<analytic>
		<title level="a" type="main">Multiple-Bug Oriented Fault Localization: A Parameter-Based Combination Approach</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Han</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Seventh International Conference on Software Security and Reliability Companion</title>
		<meeting>Seventh International Conference on Software Security and Reliability Companion<address><addrLine>Washington. D. C., USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-06">June 2013</date>
			<biblScope unit="page" from="125" to="130" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b357">
	<analytic>
		<title level="a" type="main">Program slicing</title>
		<author>
			<persName><forename type="first">M</forename><surname>Weiser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="352" to="357" />
			<date type="published" when="1984">1984</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b358">
	<monogr>
		<title level="m" type="main">Program slicing: formal, psychological, and practical investigations of an automatic program abstraction method</title>
		<author>
			<persName><forename type="first">M</forename><surname>Weiser</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1979">1979</date>
			<pubPlace>Ann Arbor, USA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>University of Michigan</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b359">
	<analytic>
		<title level="a" type="main">Using Spectrum-Based Fault Localization for Test Case Grouping</title>
		<author>
			<persName><forename type="first">M</forename><surname>Weiglhofer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Fraser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Automated Software Engineering</title>
		<meeting>International Conference on Automated Software Engineering<address><addrLine>Auckland, New Zealand</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-11">November 2009</date>
			<biblScope unit="page" from="630" to="634" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b360">
	<analytic>
		<title level="a" type="main">Software Fault Localization Based on Program Slicing Spectrum</title>
		<author>
			<persName><forename type="first">W</forename><surname>Wen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>Zurich, Switzerland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-06">June 2012</date>
			<biblScope unit="page" from="1511" to="1514" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b361">
	<analytic>
		<title level="a" type="main">Similarity-based Approaches to Virtual Screening</title>
		<author>
			<persName><forename type="first">P</forename><surname>Willett</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Biochemical Society Transactions</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="603" to="606" />
			<date type="published" when="2003-06">June 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b362">
	<analytic>
		<title level="a" type="main">A Quantitative Analysis into the Economics of Correcting Software Bugs</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">S</forename><surname>Wright</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">A</forename><surname>Zia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Conference on Computational Intelligence in Security for Information Systems</title>
		<meeting>the International Conference on Computational Intelligence in Security for Information Systems<address><addrLine>Torremolinos, Spain</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-06">June 2011</date>
			<biblScope unit="page" from="198" to="205" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b363">
	<analytic>
		<title level="a" type="main">A Family of Code Coverage-based Heuristics for Effective Fault Localization</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Debroy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Choi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systems and Software</title>
		<imprint>
			<biblScope unit="volume">83</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="188" to="208" />
			<date type="published" when="2010-02">February 2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b364">
	<analytic>
		<title level="a" type="main">Effective Software Fault Localization Using an RBF Neural Network</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Debroy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Golden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Thuraisingham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Reliability</title>
		<imprint>
			<biblScope unit="volume">61</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="149" to="169" />
			<date type="published" when="2012-03">March 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b365">
	<monogr>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Debroy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Surampudi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Siok</surname></persName>
		</author>
		<title level="m">Recent Catastrophic Accidents: Investigating How Software Was Responsible</title>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="14" to="22" />
		</imprint>
	</monogr>
	<note>SSIRI 2010</note>
</biblStruct>

<biblStruct xml:id="b366">
	<analytic>
		<title level="a" type="main">Towards Better Fault Localization: A Crosstab-Based Statistical Approach</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Debroy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Systems, Man and Cybernetics, Part C: Applications and Reviews</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="378" to="396" />
			<date type="published" when="2012-05">May 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b367">
	<analytic>
		<title level="a" type="main">Software Fault Localization Using DStar (D*)</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Debroy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Sixth International Conference on Software Security and Reliability</title>
		<meeting>Sixth International Conference on Software Security and Reliability<address><addrLine>Washington D.C., USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-06">June 2012</date>
			<biblScope unit="page" from="21" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b368">
	<analytic>
		<title level="a" type="main">The DStar Method for Effective Software Fault Localization</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Debroy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Reliability</title>
		<imprint>
			<biblScope unit="volume">63</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="290" to="308" />
			<date type="published" when="2014-03">March 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b369">
	<analytic>
		<title level="a" type="main">An Integrated Solution for Testing and Analyzing Java Applications in an Industrial Setting</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">J</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Asia-Pacific Software Engineering Conference</title>
		<meeting>Asia-Pacific Software Engineering Conference<address><addrLine>Taipei, Taiwan</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-12">December 2005</date>
			<biblScope unit="page" from="576" to="583" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b370">
	<analytic>
		<title level="a" type="main">Effective Program Debugging based on Execution Slices and Inter-Block Data Dependency</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Qi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systems and Software</title>
		<imprint>
			<biblScope unit="volume">79</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="891" to="903" />
			<date type="published" when="2006-07">July 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b371">
	<analytic>
		<title level="a" type="main">BP Neural Network-based Effective Fault Localization</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Qi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Software Engineering and Knowledge Engineering</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="573" to="597" />
			<date type="published" when="2009-06">June 2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b372">
	<analytic>
		<title level="a" type="main">Smart Debugging Software Architectural Design in SDL</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Sugeta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Qi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Maldonado</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systems and Software</title>
		<imprint>
			<biblScope unit="volume">76</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="15" to="28" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b373">
	<analytic>
		<title level="a" type="main">Debugging Hardware Designs Using a Value-based Model</title>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Applied Intelligence</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="71" to="92" />
			<date type="published" when="2002-01">January 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b374">
	<analytic>
		<title level="a" type="main">Automated Debugging based on a Constraint Model of the Program and a Test Case</title>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Nica</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Moraru</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Logic and Algebraic Programming</title>
		<imprint>
			<biblScope unit="volume">81</biblScope>
			<biblScope unit="page" from="390" to="407" />
			<date type="published" when="2012-05">May 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b375">
	<analytic>
		<title level="a" type="main">On the relationship between model-based debugging and program slicing</title>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">135</biblScope>
			<biblScope unit="issue">1-2</biblScope>
			<biblScope unit="page" from="125" to="143" />
			<date type="published" when="2002-02">February 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b376">
	<analytic>
		<title level="a" type="main">Fault Localization Based on Dynamic Slicing and Hitting-Set Computation</title>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Quality Software</title>
		<meeting>International Conference on Quality Software<address><addrLine>Zhangjiajie, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-07">July 2010</date>
			<biblScope unit="page" from="161" to="170" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b377">
	<analytic>
		<title level="a" type="main">Model-based Debugging or How to Diagnose Programs Automatically</title>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stumptner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Mayer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Industrial and Engineering, Applications of Artificial Intelligence and Expert Systems</title>
		<meeting>International Conference on Industrial and Engineering, Applications of Artificial Intelligence and Expert Systems<address><addrLine>Cairns, Australia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-06">June 2002</date>
			<biblScope unit="page" from="746" to="757" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b378">
	<analytic>
		<title level="a" type="main">On the Complexity of Program Debugging using Constraints for Modeling the Program&apos;s Syntax and Semantics</title>
		<author>
			<persName><forename type="first">F</forename><surname>Wotawa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Weber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Nica</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ceballos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Conference of the Spanish Association for Artificial Intelligence</title>
		<meeting>Conference of the Spanish Association for Artificial Intelligence<address><addrLine>Seville, Spain</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-11">November 2009</date>
			<biblScope unit="page" from="22" to="31" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b379">
	<analytic>
		<title level="a" type="main">A Statistical Model to Locate Faults at Input Levels</title>
		<author>
			<persName><forename type="first">J</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Jia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Jin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Automated Software Engineering</title>
		<meeting>International Conference on Automated Software Engineering<address><addrLine>Linz, Austria</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-09">September 2004</date>
			<biblScope unit="page" from="274" to="277" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b380">
	<monogr>
		<title level="m" type="main">On the Analysis of Spectrum-based Fault Localization</title>
		<author>
			<persName><forename type="first">X</forename><surname>Xie</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
		<respStmt>
			<orgName>Swinburne University of Technology</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b381">
	<analytic>
		<title level="a" type="main">A Theoretical Analysis of the Risk Evaluation Formulas for Spectrum-Based Fault Localization</title>
		<author>
			<persName><forename type="first">X</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F-C</forename><surname>Kuo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">W</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Software Engineering and Methodology</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<date type="published" when="2013-10">October 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b382">
	<analytic>
		<title level="a" type="main">Isolating Suspiciousness from Spectrum-Based Fault Localization Techniques</title>
		<author>
			<persName><forename type="first">X</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Quality Software</title>
		<meeting>International Conference on Quality Software<address><addrLine>Zhangjiajie, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-07">July 2010</date>
			<biblScope unit="page" from="385" to="392" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b383">
	<analytic>
		<title level="a" type="main">Spectrum-Based Fault Localization: Testing Oracles Are No Longer Mandatory</title>
		<author>
			<persName><forename type="first">X</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Quality Software</title>
		<meeting>International Conference on Quality Software<address><addrLine>Xi&apos;an, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-08">August 2012</date>
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b384">
	<analytic>
		<title level="a" type="main">Metamorphic Slice: An Application in Spectrum-Based Fault Localization</title>
		<author>
			<persName><forename type="first">X</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information and Software Technology</title>
		<imprint>
			<biblScope unit="volume">55</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="866" to="879" />
			<date type="published" when="2013-05">May 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b385">
	<analytic>
		<title level="a" type="main">Provably Optimal and Human-Competitive Results in SBSE for Spectrum based Fault Localization</title>
		<author>
			<persName><forename type="first">X</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Kuo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Yoo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Harrman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Search Based Software Engineering</title>
		<meeting>International Symposium on Search Based Software Engineering<address><addrLine>Saint Petersburg, Russia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-08">August 2013</date>
			<biblScope unit="page" from="224" to="238" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b386">
	<analytic>
		<title level="a" type="main">Efficient Program Execution Indexing</title>
		<author>
			<persName><forename type="first">B</forename><surname>Xin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">N</forename><surname>Sumner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Conference on Programming Language Design and Implementation</title>
		<meeting>Conference on Programming Language Design and Implementation<address><addrLine>Tucson, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-06">June 2008</date>
			<biblScope unit="page" from="238" to="248" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b387">
	<analytic>
		<title level="a" type="main">A Dynamic Fault Localization Technique with Noise Reduction for Java Programs</title>
		<author>
			<persName><forename type="first">J</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">K</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">H</forename><surname>Tse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Conference on Quality Software</title>
		<meeting>the International Conference on Quality Software<address><addrLine>Madrid, Spain</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-07">July 2011</date>
			<biblScope unit="page" from="11" to="20" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b388">
	<analytic>
		<title level="a" type="main">A General Noise-reduction Framework for Fault Localization of Java Program</title>
		<author>
			<persName><forename type="first">J</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">K</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">H</forename><surname>Tse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">T</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Hu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information and Software Technology</title>
		<imprint>
			<biblScope unit="volume">55</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="880" to="896" />
			<date type="published" when="2013-05">May 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b389">
	<analytic>
		<title level="a" type="main">A Serializability Violation Detector for Shared-memory Server Programs</title>
		<author>
			<persName><forename type="first">M</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Bodik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D</forename><surname>Hill</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGPLAN Conference on Programming Language Design and Implementation</title>
		<meeting>ACM SIGPLAN Conference on Programming Language Design and Implementation<address><addrLine>Chicago, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-06">June 2005</date>
			<biblScope unit="page" from="1" to="14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b390">
	<analytic>
		<title level="a" type="main">Ties Within Fault Localization Rankings: Exposing and Addressing the Problem</title>
		<author>
			<persName><forename type="first">X</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Debroy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Guo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Software Engineering and Knowledge Engineering</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="803" to="827" />
			<date type="published" when="2011-09">September 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b391">
	<analytic>
		<title level="a" type="main">A Brief Survey of Program Slicing</title>
		<author>
			<persName><forename type="first">B</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Qian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGSOFT Software Engineering Notes</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="1" to="36" />
			<date type="published" when="2005-03">March 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b392">
	<analytic>
		<title level="a" type="main">How Significant is the Effect of Fault Interactions on Coverage-Based Fault Localizations</title>
		<author>
			<persName><forename type="first">X</forename><surname>Xue</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">S</forename><surname>Namin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 2013 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement</title>
		<meeting>2013 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement<address><addrLine>Baltimore, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-10">October 2013</date>
			<biblScope unit="page" from="113" to="122" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b393">
	<analytic>
		<title level="a" type="main">Time will tell: fault localization using time spectra</title>
		<author>
			<persName><forename type="first">C</forename><surname>Yilmaz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Paradkar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Williams</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>Leipzig, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-05">May 2008</date>
			<biblScope unit="page" from="81" to="90" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b394">
	<monogr>
		<title level="m" type="main">No Pot of Gold at the End of Program Spectrum Rainbow: Greatest Risk Evaluation Formula Does Not Exist</title>
		<author>
			<persName><forename type="first">S</forename><surname>Yoo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Kuo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Harman</surname></persName>
		</author>
		<idno>RN/14/14</idno>
		<imprint>
			<date type="published" when="2014-11">November 2014</date>
		</imprint>
		<respStmt>
			<orgName>University College London</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b395">
	<analytic>
		<title level="a" type="main">Statistical Fault Localization Using Execution Sequence</title>
		<author>
			<persName><forename type="first">Z</forename><surname>You</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Qin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zheng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Machine Learning and Cybernetics</title>
		<meeting>International Conference on Machine Learning and Cybernetics<address><addrLine>Xi&apos;an, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-07">July 2012</date>
			<biblScope unit="page" from="899" to="905" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b396">
	<analytic>
		<title level="a" type="main">An Empirical Study of the Effects of Test-Suite Reduction on Fault Localization</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Jones</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Harrold</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>Leipzig, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-05">May 2008</date>
			<biblScope unit="page" from="201" to="210" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b397">
	<analytic>
		<title level="a" type="main">Isolating Cause-Effect Chains from Computer Programs</title>
		<author>
			<persName><forename type="first">A</forename><surname>Zeller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGSOFT Symposium on Foundations of Software Engineering</title>
		<meeting>ACM SIGSOFT Symposium on Foundations of Software Engineering<address><addrLine>Charleston, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-11">November, 2002</date>
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b398">
	<analytic>
		<title level="a" type="main">Simplifying and Isolating Failure-inducing Input</title>
		<author>
			<persName><forename type="first">A</forename><surname>Zeller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Hildebrandt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="183" to="200" />
			<date type="published" when="2002-02">February 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b399">
	<monogr>
		<title level="m" type="main">Why Programs Fail -a Guide to Systematic Debugging</title>
		<author>
			<persName><forename type="first">A</forename><surname>Zeller</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006">2006</date>
			<publisher>Elsevier</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b400">
	<analytic>
		<title level="a" type="main">Software Bug Localization with Markov Logic</title>
		<author>
			<persName><forename type="first">S</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Companion Proceedings of the 36 th International Conference on Software Engineering</title>
		<meeting><address><addrLine>Hyderabad, India</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014-06">June 2014</date>
			<biblScope unit="page" from="424" to="427" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b401">
	<monogr>
		<title level="m" type="main">Secure and Efficient Network Fault Localization</title>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
		<respStmt>
			<orgName>Carnegie Mellon University</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b402">
	<analytic>
		<title level="a" type="main">Locating Faults through Automated Predicate Switching</title>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>Shanghai, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006-05">May 2006</date>
			<biblScope unit="page" from="272" to="281" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b403">
	<analytic>
		<title level="a" type="main">A Study of Effectiveness of Dynamic Slicing in Locating Real Faults</title>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Empirical Software Engineering</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="143" to="160" />
			<date type="published" when="2007-04">April 2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b404">
	<analytic>
		<title level="a" type="main">Locating Faulty Code by Multiple Points Slicing</title>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Software Practice and Experience</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="935" to="961" />
			<date type="published" when="2007-07">July 2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b405">
	<analytic>
		<title level="a" type="main">Precise Dynamic Slicing Algorithms</title>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>Portland, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-05">May 2003</date>
			<biblScope unit="page" from="319" to="329" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b406">
	<analytic>
		<title level="a" type="main">Efficient Forward Computation of Dynamic Slices Using Reduced Ordered Binary Decision Diagrams</title>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>Edinburgh, UK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-05">May 2004</date>
			<biblScope unit="page" from="502" to="511" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b407">
	<analytic>
		<title level="a" type="main">Experimental Evaluation of Using Dynamic Slices for Fault Location</title>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Workshop on Automated Debugging</title>
		<meeting>International Workshop on Automated Debugging<address><addrLine>Monterey, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-09">September 2005</date>
			<biblScope unit="page" from="33" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b408">
	<analytic>
		<title level="a" type="main">Towards Locating Execution Omission Errors</title>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Tallam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGPLAN Conference on Programming Language Design and Implementation</title>
		<meeting>ACM SIGPLAN Conference on Programming Language Design and Implementation<address><addrLine>San Diego</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-06">June 2007</date>
			<biblScope unit="page" from="415" to="424" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b409">
	<monogr>
		<title level="m" type="main">Fault Localization via Precise Dynamic Slicing</title>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
		<respStmt>
			<orgName>University of Arizona</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b410">
	<monogr>
		<title level="m" type="main">Software Debugging through Dynamic Analysis of Program Structures</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
		<respStmt>
			<orgName>The University of Hong Kong</orgName>
		</respStmt>
	</monogr>
	<note>Ph. D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b411">
	<analytic>
		<title level="a" type="main">Debugging through Evaluation Sequences: A Controlled Experimental Study</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">K</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">H</forename><surname>Tse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Computer Software and Applications Conference</title>
		<meeting>International Computer Software and Applications Conference<address><addrLine>Turku, Finland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-07">July 2008</date>
			<biblScope unit="page" from="128" to="135" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b412">
	<analytic>
		<title level="a" type="main">Fault Localization through Evaluation Sequences</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">K</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">H</forename><surname>Tse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of System and Software</title>
		<imprint>
			<biblScope unit="volume">83</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="174" to="187" />
			<date type="published" when="2010-02">February 2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b413">
	<analytic>
		<title level="a" type="main">Non-parametric Statistical Fault Localization</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">K</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">H</forename><surname>Tse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">T</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Hu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systems and Software</title>
		<imprint>
			<biblScope unit="volume">84</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="885" to="905" />
			<date type="published" when="2011-06">June 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b414">
	<analytic>
		<title level="a" type="main">Capturing Propagation of Infected Program States</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">K</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">H</forename><surname>Tse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7 th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT International Symposium on Foundation of Software Engineering</title>
		<meeting>the 7 th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT International Symposium on Foundation of Software Engineering<address><addrLine>New York, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-08">August 2009</date>
			<biblScope unit="page" from="43" to="52" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b415">
	<analytic>
		<title level="a" type="main">Precise Propagation of Fault-failure Correlations in Program Flow Graphs</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">K</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">H</forename><surname>Tse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 35 th Annual International Computer Software and Applications Conference</title>
		<meeting>the 35 th Annual International Computer Software and Applications Conference<address><addrLine>Munich Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-07">July 2011</date>
			<biblScope unit="page" from="58" to="67" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b416">
	<analytic>
		<title level="a" type="main">Fault Localization Based Only on Failed Runs</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">K</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">H</forename><surname>Tse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="64" to="71" />
			<date type="published" when="2012-05">May 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b417">
	<analytic>
		<title level="a" type="main">Is Non-parametric Hypothesis Testing Model Robust for Statistical Fault Localization?</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">K</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">H</forename><surname>Tse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information and Software Technology</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="1573" to="1585" />
			<date type="published" when="2009-11">November 2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b418">
	<analytic>
		<title level="a" type="main">Execution-Aware Fault Localization Based on the Control Flow Analysis</title>
		<author>
			<persName><forename type="first">L</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Xiong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Gao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Information Computing and Applications</title>
		<meeting>International Conference on Information Computing and Applications<address><addrLine>Tangshan, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-10">October 2010</date>
			<biblScope unit="page" from="158" to="165" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b419">
	<analytic>
		<title level="a" type="main">Context-Aware Fault Localization via Control Flow Analysis</title>
		<author>
			<persName><forename type="first">L</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Yin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Software</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="1977" to="1984" />
			<date type="published" when="2011-10">October 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b420">
	<analytic>
		<title level="a" type="main">Statistical Debugging: Simultaneous Isolation of Multiple Bugs</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">X</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">I</forename><surname>Jordan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Liblit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Naik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Aiken</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Machine Learning</title>
		<meeting>International Conference on Machine Learning<address><addrLine>Pittsburgh, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006-06">June 2006</date>
			<biblScope unit="page" from="26" to="29" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b421">
	<analytic>
		<title level="a" type="main">On the Value of Static Analysis for Fault Detection in Software</title>
		<author>
			<persName><forename type="first">J</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Nagappan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Snipes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">P</forename><surname>Hudepohl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>Vouk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="240" to="253" />
			<date type="published" when="2006-05">May 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b422">
	<analytic>
		<title level="a" type="main">Where Should the Bugs be Fixed? -More Accurate Information Retrieval-based Bug Localization based on Bug Reports</title>
		<author>
			<persName><forename type="first">J</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Lo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Software Engineering</title>
		<meeting>International Conference on Software Engineering<address><addrLine>Zurich, Switzerland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-06">June 2012</date>
			<biblScope unit="page" from="14" to="24" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b423">
	<analytic>
		<title level="a" type="main">Visualizing Memory Graphs</title>
		<author>
			<persName><forename type="first">T</forename><surname>Zimmermann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zeller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">the International Seminar on Software Visualization</title>
		<imprint>
			<date type="published" when="2002-04">April 2002</date>
			<biblScope unit="page" from="191" to="204" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b424">
	<monogr>
		<title level="m">ÏSuds User&apos;s Manual, Telcordia Technologies (formerly Bellcore)</title>
		<meeting><address><addrLine>New Jersey, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
