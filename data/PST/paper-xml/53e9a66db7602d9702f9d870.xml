<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Decentralized Control of Connectivity for Multi-Agent Systems</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Maria</forename><forename type="middle">Carmela</forename><surname>De Gennaro</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Ali</forename><surname>Jadbabaie</surname></persName>
						</author>
						<title level="a" type="main">Decentralized Control of Connectivity for Multi-Agent Systems</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">1B82FCB0FFB5C5904CFCECD3BDE69507</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T07:13+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>In this paper we propose a decentralized algorithm to increase the connectivity of a multi-agent system. The connectivity property of the multi-agent system is quantified through the second smallest eigenvalue of the state dependent Laplacian of the proximity graph of agents. An exponential decay model is used to characterize the connection between agents. A supergradient algorithm is then used in conjunction with a recently developed decentralized algorithm for eigenvector computation to maximize the second smallest eigenvalue of the Laplacian of the proximity graph. A potential based control law is utilized to achieve the distances dictated by the supergradient algorithm. The algorithm is completely decentralized, where each agent receives information only from its neighbors, and uses this information to update its control law at each step of the iteration. Simulations demonstrate the effectiveness of the algorithm.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Cooperative control of multi-agent systems is a very active research area of control theory. In the past few years problems such as flocking, consensus, coverage and pattern formation have been studied. The study is generally focused on the development of distributed control laws in order to reach a global objective <ref type="bibr" target="#b0">[1]</ref>- <ref type="bibr" target="#b6">[7]</ref>.</p><p>One interesting problem recently analyzed regards the connectivity maintenance of the distance-dependent graph of the network. In such a graph, known also as R-disk graph <ref type="bibr" target="#b6">[7]</ref>, there is an edge between two nodes if their Euclidean distance is less than or equal to a pre specified number R. The difficulty in connectivity maintenance stems from the fact that connectivity is an inherently global property and a complicated function of the motion of the nodes. Other attempts to model changes in topology, such as <ref type="bibr" target="#b0">[1]</ref>, ignore the dependence of switching on motion. Several attempts have been made in the wireless networking literature to follow local rules that guarantee connectivity. One example is the "sector rule" which guarantees connectivity of the R-disk graph on the plane if each agent has at least one neighbor in every sector of 120 degrees <ref type="bibr" target="#b7">[8]</ref>. Another interesting solution to the connectivity problem is given by the circumcenter algorithm, which increases gradually the degree of each agent and constraints the motion of the agents to avoid the lost of previously present connections <ref type="bibr" target="#b6">[7]</ref>. Many authors in the control theory literature have also made progress on this problem <ref type="bibr" target="#b8">[9]</ref>- <ref type="bibr" target="#b11">[12]</ref>.</p><p>Dr. Maria Carmela De Gennaro is with the Università del Sannio, Dipartimento di Ingegneria, piazza Roma 21, Benevento, Italy. Email:degennaro@unisannio.it Dr. Ali Jadbabaie is with the Department of Electrical and Systems Engineering, University of Pennsylvania, Philadelphia, PA 19104, USA. Email: jadbabai@seas.upenn.edu In this paper, our goal is to maximize the second smallest eigenvalue of the Laplacian matrix (called algebraic connectivity) of the state dependent proximity graph of agents, similarly to <ref type="bibr" target="#b10">[11]</ref>, but with a decentralized approach.</p><p>The starting point of our work is the observation that the algebraic connectivity is a concave function of the Laplacian matrix. Thus we can easily find a supergradient for it. Motivated by results in <ref type="bibr" target="#b12">[13]</ref>, we demonstrate in this paper that a supergradient direction for the algebraic connectivity is function of the corresponding eigenvector, the Fiedler vector. This eigenvector is computed in a decentralized way by using the algorithm in <ref type="bibr" target="#b13">[14]</ref>. In this way we blend the results of <ref type="bibr" target="#b12">[13]</ref> and <ref type="bibr" target="#b13">[14]</ref> to realize a decentralized supergradient algorithm which allows each agent to maximize the algebraic connectivity by working only with one row of the Laplacian matrix.</p><p>However, contrary to <ref type="bibr" target="#b12">[13]</ref>, the supergradient cannot modify directly the entries of the Laplacian matrix, because in our framework the Laplacian is a state dependent matrix. This means that each iteration of the supergradient algorithm only provides agents with set-points, that have to be used to generate the actual control. The control law used is a simple potential-based flow <ref type="bibr" target="#b14">[15]</ref>.</p><p>The paper is organized as follows. In Section II, we show the framework of our problem. In Section III, we describe the optimization problem and the proposed algorithm, with convergence properties. In Section IV, we present the control law for the agents, with convergence properties. In Section V, we explain some simulation results. The paper concludes with a summary of the proposed work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. PROBLEM FORMULATION</head><p>We consider a multi-agent system composed by N agents, that move on the plane. The state of the agents is defined by the vector z</p><formula xml:id="formula_0">= (z 1 , z 2 , ...z N ) ∈ R 2N . The dynamic of each agent i is: żi = u i , (<label>1</label></formula><formula xml:id="formula_1">)</formula><p>where u i ∈ R 2 is the control action of agent i.</p><p>The link among each pair of agents is assumed to be dependent on their distance: if the distance is at most equal to a fixed connection radius R, then the agents are said to be connected, otherwise they are not connected. Moreover the strength of the connection decreases smoothly with distance (see <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b15">[16]</ref>). If the distance between two agents is less than a threshold ρ, the agents are "strongly" connected. Otherwise the connection is exponentially weakened as the distance increases, until the distance R, where they practically lose the connection. The strength dependence on the distance is due to physical reasons: in a multi-robot system each robot is equipped with sensors whose resolution is decaying exponentially with the distance to the object to observe.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Graph representation</head><p>The multi-agent system can be represented by a graph <ref type="bibr" target="#b16">[17]</ref> G = (V, E) where V is the set of nodes (agents) and E is the set of edges (connections). An edge is a pair (i, j) of distinct nodes of V, which are the representation of agents whose mutual distance is at most equal to the connection radius R. When the connection is specified as above, the node i is said to be connected to all the nodes that are in the circular neighborhood of i, which is a subset of V defined as:</p><formula xml:id="formula_2">C i {j ∈ V, j = i : r ij = z i -z j ≤ R}.</formula><p>(</p><formula xml:id="formula_3">)<label>2</label></formula><p>We assume that R has the same value for all the agents, thus the graph G is undirected. The graph G is state dependent, in the sense that it evolves in time with its connectivity governed by the dynamics of the agents.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Laplacian matrix</head><p>The graph can be also represented using the Laplacian matrix:</p><formula xml:id="formula_4">L(z) = ∆(z) -A(z),<label>(3)</label></formula><p>where A(z) is the adjacency matrix, whose entries A ij are positive if j ∈ C i , and zero otherwise:</p><formula xml:id="formula_5">A ij = ⎧ ⎪ ⎨ ⎪ ⎩ 1 r ij &lt; ρ; e -5( r ij -ρ) (R-ρ) ρ ≤ r ij ≤ R; 0 r ij &gt; R; (<label>4</label></formula><formula xml:id="formula_6">)</formula><p>and ∆(z) is a diagonal matrix, with elements ∆ i = j=1...N A ij along the diagonal.</p><p>The entry A ij represents the strength of the connection among agents (i, j), which decays exponentially with the distance 1 . Figure <ref type="figure">1</ref> shows the shape of A ij . Fig. <ref type="figure">1</ref>. Adjacency matrix element Aij as a function of the distance between agents i and j. At the distance rij = R, the agents lose the connection. Function Aij is not continuous in the point R, but the value that it assumes at R can be considered a good approximation of zero.</p><p>The eigenvalues of the Laplacian matrix capture some interesting properties of the underlying graph, thus it is 1 The coefficient 5 in the expression of A ij is due to the convergence property of the exponential function: when</p><formula xml:id="formula_7">r ij = R, A ij = e -5 ≈ 0.</formula><p>interesting to take a look on their values. Since L(z) is positive semi-definite and symmetric, its eigenvalues are all nonnegative. By ordering the eigenvalues in a increasing way, we have:</p><formula xml:id="formula_8">0 = λ 1 ≤ λ 2 ≤ ... ≤ λ N .</formula><p>The eigenvector corresponding to the first eigenvalue is always 1. The second eigenvalue λ 2 is called algebraic connectivity <ref type="bibr" target="#b16">[17]</ref> of the system, and it is an indicator of how much the graph is connected. The value of λ 2 is zero if the graph is not connected, and it increases when the connectivity of the graph increases. The maximum value of λ 2 is equal to N , and it is reached when the entries (i, j) of the adjacency matrix are all equal to 1, that is the graph is completely connected (all the possible edges are present in it) and the distances among agents in the original system are all at most ρ.</p><p>The relation between λ 2 and the graph connectivity can be used to find a control action that preserves the connectivity in time. Generally speaking, λ 2 is function of the state of the entire system, thus we can write it as λ 2 (L(z)). What we want to show is how to increase the value of λ 2 with a decentralized control action, in which each agent knows only information about its neighbors, while it doesn't know the current value of λ 2 because it is function of the entire Laplacian matrix.</p><p>The optimization problem to solve is:</p><formula xml:id="formula_9">max z λ 2 (L(z)).</formula><p>It can be decomposed in two subproblems, which consider the dependance on the external and the internal unknowns, L and z. Firstly, the dependance on the Laplacian matrix is represented in the external optimization problem:</p><formula xml:id="formula_10">max L λ 2 (L),<label>(5)</label></formula><p>where the Laplacian L has to satisfy the constraints defined in (3)-( <ref type="formula" target="#formula_5">4</ref>). This optimization is realized in open loop, because the dependance on the state of the agents z is not included. The solution found is called L * . In Section III we will show the iterative algorithm of the decentralized supergradient that solve this problem.</p><p>The closed loop optimization is realized when each agent uses L * as a reference for its controller, and moves according to the control action. At the equilibrium, the Laplacian L(z) is updated with the current value of the state. This updated Laplacian matrix is assumed to be the starting point for the new iteration of the supergradient. In Section IV we will describe the control action applied by each agent, with the convergence properties of the supergradient.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. MAXIMIZATION OF λ 2 (L)</head><p>First, we note that λ 2 (L) is a concave function of L in the space 1 ⊥ , in fact it is the infimum of a set of linear functions in L:</p><formula xml:id="formula_11">λ 2 (L)v T v ≤ v T Lv, ∀v ∈ 1 ⊥ ⇒ λ 2 (L) = inf v∈1 ⊥ { v T Lv v T v }. (<label>6</label></formula><formula xml:id="formula_12">)</formula><p>45th IEEE CDC, San Diego, USA, Dec. <ref type="bibr" target="#b12">[13]</ref><ref type="bibr" target="#b13">[14]</ref><ref type="bibr" target="#b14">[15]</ref><ref type="bibr">2006</ref> ThB18.4</p><p>The optimization of λ 2 has been performed by the SDP <ref type="bibr" target="#b10">[11]</ref>, but this method is not decentralized. Since we want to solve the problem in a decentralized framework, we have to choose a different optimization algorithm. One that is suitable for decentralization is the supergradient algorithm <ref type="bibr" target="#b12">[13]</ref>. Now, we recall the notion of supergradient for a concave function. Definition: Let f : R N → R be a concave function. The vector g is a supergradient of f in the point x if for all y = x the following inequality holds:</p><formula xml:id="formula_13">f (y) ≤ f (x) + g T (y -x)</formula><p>To maximize the function f , the updating rule of the supergradient at the step k is:</p><formula xml:id="formula_14">x (k+1) = x (k) + α (k) g (k) ,</formula><p>where α (k) &gt; 0 is the step-size to choose.</p><p>Using the notion of supergradient, it is simple to find a supergradient matrix for λ 2 (L). We start from the following inequality:</p><formula xml:id="formula_15">λ 2 ( L)v T 2 v 2 ≤ v T 2 ( L)v 2 , (<label>7</label></formula><formula xml:id="formula_16">)</formula><p>where L = L, and v 2 ∈ 1 ⊥ is the unit eigenvector of L corresponding to λ 2 (L). The right side of the previous equation can be rewritten as:</p><formula xml:id="formula_17">v T 2 ( L)v 2 = v T 2 Lv 2 + v T 2 ( L -L)v 2 = v T 2 λ 2 (L)v 2 + v T 2 ( L -L)v 2 = λ 2 (L)+ &lt; v 2 v T 2 , ( L -L) &gt;<label>(8)</label></formula><p>Composing ( <ref type="formula" target="#formula_15">7</ref>) and ( <ref type="formula" target="#formula_17">8</ref>) we obtain that:</p><formula xml:id="formula_18">λ 2 ( L) ≤ λ 2 (L)+ &lt; v 2 v T 2 , ( L -L) &gt;, (<label>9</label></formula><formula xml:id="formula_19">)</formula><p>which shows that the matrix G = v 2 v T 2 is a supergradient for λ 2 (L). The updating rule for the L matrix is:</p><formula xml:id="formula_20">L * (k+1) = L * (k) + α (k) G (k) . (<label>10</label></formula><formula xml:id="formula_21">)</formula><p>From <ref type="bibr" target="#b17">[18]</ref>- <ref type="bibr" target="#b19">[20]</ref> it is known that if the step-size α (k) is the coefficient of a not summable but square summable series, the supergradient method converges to the optimal value. The decentralized computation of the supergradient matrix G is discussed in <ref type="bibr" target="#b12">[13]</ref>, <ref type="bibr" target="#b18">[19]</ref>; here we apply the procedure to find the supergradient of the Laplacian matrix.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Decentralized supergradient algorithm</head><p>Let's define a vector p = (p ij ) of elements of the matrix L, for all the possible connections of agents (i, j):</p><formula xml:id="formula_22">p ij = L ij , i = 1, ..., N, j &gt; i (11)</formula><p>The dimension of p is N (N -1)/2, that is the maximum number of links in the graph.</p><p>Then we define a matrix E ij for each pair (i, j):</p><formula xml:id="formula_23">E ij ij = E ij ji = 1, E ij ii = E ij jj = -1, (<label>12</label></formula><formula xml:id="formula_24">)</formula><p>with 0 in all the other entries; thus we can now write:</p><formula xml:id="formula_25">L = i=1,...,N,j&gt;i E ij p ij . (<label>13</label></formula><formula xml:id="formula_26">)</formula><p>The statement of the optimization problem (5) becomes:</p><formula xml:id="formula_27">max p λ 2 ( i=1,...,N,j&gt;i E ij p ij ) s.t. -1 ≤ p ij ≤ 0 ∀(i, j)<label>(14)</label></formula><p>where the feasibility constraints derive from (3)-( <ref type="formula" target="#formula_5">4</ref>). The function λ 2 (p) is concave in p:</p><formula xml:id="formula_28">λ 2 (p) ≤ λ 2 (p) + i=1,...,N,j&gt;i &lt; v 2 v T 2 , E ij (p ij -p ij ) &gt; = λ 2 (p) + i=1,...,N,j&gt;i (v T 2 E ij v 2 )(p ij -p ij ). (<label>15</label></formula><formula xml:id="formula_29">)</formula><p>From the last equality we can observe that the supergradient vector for p is:</p><formula xml:id="formula_30">g = (v T 2 E 12 v 2 , ..., v T 2 E ij v 2 , ..., v T 2 E N-1,N v 2 );<label>(16</label></formula><p>) and for each component of p ij the relative supergradient is:</p><formula xml:id="formula_31">g ij = v T 2 E ij v 2 = -(v 2i -v 2j ) 2 . (<label>17</label></formula><formula xml:id="formula_32">)</formula><p>The updating rule for each element of the vector p is:</p><formula xml:id="formula_33">p * (k+1) ij = p * (k) ij + α (k) g (k) ij (<label>18</label></formula><formula xml:id="formula_34">)</formula><p>where α (k) and g</p><formula xml:id="formula_35">(k)</formula><p>ij are respectively the coefficient of the supergradient method and the supergradient at the step k.</p><p>Then the updated components p * (k+1) ij</p><p>have to be projected on the feasible set defined in <ref type="bibr" target="#b13">(14)</ref>. Since</p><formula xml:id="formula_36">α (k) g (k) ij ≤ 0 al- ways, the update ensures that p * (k+1) ij ≤ p * (k) ij .</formula><p>The projection on the feasible set requires only to satisfy the condition p * (k+1) ij ≥ -1, which can be done by solving a least square problem, whose solution is:</p><formula xml:id="formula_37">p * (k+1) ij = max(-1, p * (k+1) ij ).<label>(19)</label></formula><p>Equation <ref type="bibr" target="#b18">(19)</ref> gives the update values of L * (k+1) ij</p><p>. The values of L * (k+1) ii are computed for all i = 1, ..., N by:</p><formula xml:id="formula_38">L * (k+1) ii = - N j=1,j =i L * (k+1) ij . (<label>20</label></formula><formula xml:id="formula_39">)</formula><p>The decentralized supergradient updates each entry L * (k+1) ij separately, by knowing the components v</p><formula xml:id="formula_40">(k) 2i and v (k) 2j</formula><p>of the second eigenvector v 2 of the Laplacian. This means that each agent, in order to apply the supergradient, needs to know the components of the eigenvector v 2 from its neighbors. Once this information is obtained, each agent uses the supergradient method to update the corresponding row of the Laplacian matrix. The step k of the supergradient algorithm applied by agent i is the following:</p><formula xml:id="formula_41">• compute v (k) 2i ;</formula><p>• receive from the neighbors the updated values of v  <ref type="formula" target="#formula_31">17</ref>) for all j ∈ C i ;</p><p>• update the entries L * (k+1) ij using ( <ref type="formula" target="#formula_33">18</ref>) for all j ∈ C i ;</p><p>• project the updated L * (k+1) ij on the feasible set using (19); 45th IEEE CDC, San Diego, USA, Dec. <ref type="bibr" target="#b12">[13]</ref><ref type="bibr" target="#b13">[14]</ref><ref type="bibr" target="#b14">[15]</ref><ref type="bibr">2006</ref> ThB18.4</p><p>• compute L * (k+1) ii using (20); At the step k = 0, agent i receives information about the positions of the neighbors, and compute the row L (0) i with (3)-(4).</p><p>Next section describes the algorithm for the decentralized computation of the eigenvectors of the L matrix as given in <ref type="bibr" target="#b13">[14]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Decentralized Computation of the eigenvectors of L</head><p>The decentralized computation of the eigenvectors of L follows the Decentralized Orthogonal Iteration Algorithm (DOI) <ref type="bibr" target="#b13">[14]</ref>. Let w i be the row vector associated with agent i:</p><formula xml:id="formula_42">w i = [v 1i , v 2i , ..., v Ni ],<label>(21)</label></formula><p>whose entries are the i-th component of all the eigenvectors of L. Let W be the matrix:</p><formula xml:id="formula_43">W = ⎡ ⎢ ⎢ ⎢ ⎢ ⎣ w 1 w 2 ... ... w N ⎤ ⎥ ⎥ ⎥ ⎥ ⎦ = ⎡ ⎢ ⎢ ⎢ ⎢ ⎣ v 11 v 21 ... v N 1 v 12 v 22 ... v N 2 ... ... ... ... ... ... ... ... v 1N v 2N ... v NN ⎤ ⎥ ⎥ ⎥ ⎥ ⎦ , (<label>22</label></formula><formula xml:id="formula_44">)</formula><p>whose columns are the eigenvectors of L.</p><p>Assume that agent i receives the row w j from each agent j connected with it. Agent i updates w i by following the DOI algorithm: (s) , where e (s+1) i is the update of the row w i at the step s + 1 of the algorithm, L (k) i is the i-th row of the Laplacian matrix; since each element L (k) ij is nonzero only for connected agents, the product L (k) i W (s) requires only the rows of the matrix W related with the agents connected with i;</p><formula xml:id="formula_45">• initialize w (0) i with a random vector; • e (s+1) i = L (k) i W</formula><formula xml:id="formula_46">• compute ē(s+1) 2</formula><p>, that is the average value of the second eigenvector of L;</p><p>• project the second eigenvector in the space 1 ⊥ : e</p><formula xml:id="formula_47">(s+1) 2i = e (s+1) 2i - ē(s+1) 2 ; • w (s+1) i =orthonormalization(e (s+1) i );</formula><p>• repeat the loop until convergence of the vector w i . Two steps of the DOI require attention: the computation of the average ē(s+1)</p><p>2 and the orthonormalization. Each of them is carried out by a nested iteration. The two steps are analyzed in the following. Note that in the computation of the eigenvectors, L has index k, that is the index of the supergradient algorithm, while s is the index of the nested iteration necessary to compute the eigenvectors.</p><p>1) Computation of the average ē(s+1)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2</head><p>: it is necessary to project the second eigenvector of the Laplacian in the space 1 ⊥ . Agent i uses an heuristic averaging algorithm to compute the average ē(s+1)</p><formula xml:id="formula_48">2 : • initialize ē(0) i = e (s+1) 2i ; • ē(r+1) i = N j=1 M (k) ij ē(r) j ;</formula><p>• repeat the loop until convergence of each ēi to the average ē(s+1)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2</head><p>;</p><p>The matrix M is weighted, and its entries are given by:</p><formula xml:id="formula_49">M ij = 1 max(ni,nj ) j ∈ C i ; 0 otherwise; M ii = 1 -j∈Ci M ij (23)</formula><p>where n i and n j are respectively the valencies of agents i and j, that is the number of agents connected respectively with agents i and j. The convergence of the method to the real average among all agents is studied in <ref type="bibr" target="#b20">[21]</ref>.</p><p>2) Decentralized Orthonormalization: it derives from the centralized orthonormalization. In the centralized approach, the orthonormalization is typically performed by the factorization of the matrix W in the form: E = WH, where the rows of the matrix E are the not orthonormal eigenvectors e i (the same that are computed by the DOI from each agent), and H is a upper triangular matrix to find. To find H, we define the matrix S = E T E, and compute the product:</p><formula xml:id="formula_50">E T E = H T W T WH = H T H.</formula><p>The last equality is valid because W is orthonormal. From that equality the matrix S can be found by the Cholesky factorization:</p><formula xml:id="formula_51">S = H T H ⇒ H = chol(S).</formula><p>In the decentralized case agent i does not know the entire S matrix. But we can observe that S can be written as:</p><formula xml:id="formula_52">S = E T E = N i=1 e T i e i = N i=1 S i . (<label>24</label></formula><formula xml:id="formula_53">)</formula><p>Since agent i computes e i , it knows the matrix S i and it receives the matrices S j from its neighbors. Thus, by using once again the heuristic averaging algorithm, an average of the S matrix is computed, and the real value of S is simply obtained by multiplying the average for the number N of the agents in the graph. The proposed algorithm is:</p><formula xml:id="formula_54">• initialize S (0) i = e T i e i ; • S (r+1) i = N j=1 M (k) ij S (r) j ; • repeat the loop until convergence; • compute S = S i N .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. CONTROL ACTION FOR EACH AGENT</head><p>The computation of the supergradient and the update of the optimum Laplacian L * (k) at the k-th step is an open loop computation. Since the agents move on the plane and their motion causes the variation of the state dependent Laplacian L(z), there is at each step of the supergradient algorithm an error between the current Laplacian L(z) and the optimum value L * (k) . This error can be minimized by applying to each agent a decentralized control action that drives the group toward a configuration corresponding to the optimal Laplacian L * (k) .</p><p>The optimization problem can be formulated for the agent i as:</p><formula xml:id="formula_55">min zi L i (z) -L * (k) i 2 2 , (<label>25</label></formula><formula xml:id="formula_56">)</formula><p>45th IEEE CDC, San Diego, USA, Dec. <ref type="bibr">13-15, 2006 ThB18.4</ref> where L i (z) is the row i of the Laplacian matrix, as function of the state of the agents, and L * (k) i is the row of the optimal Laplacian found by agent i at the step k of the supergradient. The minimization problem is solved by using potential functions.</p><p>From each L * (k) ij , by using (3) and by reversing (4), we obtain the desired distance δ (k) ij between connected agents i, j: δ</p><formula xml:id="formula_57">(k) ij = A -1 ij (L * (k) ij ).<label>(26)</label></formula><p>For each pair of connected agents (i, j) a quadratic potential function V ij ( r ij ) is defined as:</p><formula xml:id="formula_58">V ij = ( r ij -δ (k) ij ) 2 r ij ≤ R; (R -δ (k) ij ) 2 r ij &gt; R. (<label>27</label></formula><formula xml:id="formula_59">)</formula><p>The potential function V ij ( r ij ) is positive definite, it is zero when the distance r ij is equal to the desired value δ (k) ij , and it becomes constant when the distance r ij is greater than the connection radius R.</p><p>The control action for agent i is defined by solving the optimization problem, equivalent to (25):</p><formula xml:id="formula_60">min zi j∈Ci V ij , (<label>28</label></formula><formula xml:id="formula_61">)</formula><p>from which the control action on agent i is defined as the sum of the negative gradients of the potentials V ij for all j ∈ C i :</p><formula xml:id="formula_62">u i = - j∈Ci ∇ zi V ij . (<label>29</label></formula><formula xml:id="formula_63">)</formula><p>Each agent i moves according to the control action (29), until an equilibrium for the group is reached. At the equilibrium, agent i stops and sends the information about its current position z i (t) to the neighbors, and receives their current positions. With this information, agent i updates the row i of the Laplacian matrix L(z). This updated row will be used from agent i at the step k + 1 of the supergradient. The potential based control applied by the agents does not ensure the minimization of (25), because it presents local minima if the graph of connections of the group is not a tree. Thus, an analysis of the convergence of the supergradient algorithm is necessary to show that the error on the Laplacian matrix does not affect the convergence to the optimum λ 2 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Convergence of the supergradient algorithm</head><p>As we did in Section III-A, we call p * (k+1) the vector of components of the updated Laplacian L * (k+1) at the step k + 1 of the supergradient. The application of the potential control to the agents move them to the a new configuration on the plane corresponding to a different vector, called p(k+1) . The difference between the two vectors is an error vector:</p><formula xml:id="formula_64">p(k+1) = p * (k+1) + ε (k+1) . (<label>30</label></formula><formula xml:id="formula_65">)</formula><p>If we call the error at the step k + 1 of the supergradient, between the vector p * (k+1) and the final optimal vector p * , corresponding to the maximum value of λ 2 :</p><formula xml:id="formula_66">e (k+1) = p * (k+1) -p * , (<label>31</label></formula><formula xml:id="formula_67">)</formula><p>then the error between the real vector p(k+1) and the optimal vector is:</p><formula xml:id="formula_68">p(k+1) -p * = p * (k+1) +ε (k+1) -p * = e (k+1) +ε (k+1) (32)</formula><p>The error can be limited in norm (see <ref type="bibr" target="#b18">[19]</ref> for a similar proof):</p><formula xml:id="formula_69">p(k+1) -p * 2 2 = e (k+1) + ε (k+1) 2 2 = e (k+1) 2 2</formula><p>+ ε (k+1) 2 2 + 2e (k+1)T ε (k+1) ; (33) The last term of the previous relation can be rewritten as:</p><formula xml:id="formula_70">2e (k+1)T ε (k+1) = ε (k+1) 2 2 + e (k+1) 2 2 -ε (k+1) -e (k+1) 2 2 ≤ ε (k+1) 2</formula><p>2 + e (k+1) 2 2 ; (34) By substituting (34) in (33), using <ref type="bibr" target="#b17">(18)</ref> and the definition of supergradient, the error becomes:</p><formula xml:id="formula_71">p(k+1) -p * 2 2 ≤ 2 ε (k+1) 2 2 + 2 e (k+1) 2 2 ≤ 2 ε (k+1) 2 2 + 2[ p(k) -p * 2 2 + α (k) 2 g (k) 2 2 + 2α (k) (λ 2 (p (k) ) -λ * 2 )];<label>(35)</label></formula><p>From the last expression, since p(k+1) -p * 2 2 ≥ 0, the error between the current value of λ 2 and the optimal λ * 2 can be bounded:</p><formula xml:id="formula_72">2α (k) (λ * 2 -λ 2 (p (k) )) ≤ ε (k+1) 2 + p(k) -p * 2 + α (k) 2 g (k) 2 2 . (<label>36</label></formula><formula xml:id="formula_73">)</formula><p>By considering the first k steps of the supergradient, a bound on the error between the optimal value λ 2 best reached with the supergradient, and the final optimal value λ * 2 can be found:</p><formula xml:id="formula_74">λ * 2 -λ 2 best ≤ k i=1 ε (i+1) 2 2 2 k i=1 α (i) + k i=1 α (i) 2 g (k) 2 2 2 k i=1 α (i) + p (1) -p * 2 2 . (<label>37</label></formula><formula xml:id="formula_75">)</formula><p>If the series of the error norms ε (k) 2 2 is not divergent, or diverges with a rate less than the series of α (k) , and the norm of the supergradient matrix is bounded at each step k, g (k) 2 2 ≤ G, then, by choosing the series of α (k) as square summable, the error is bounded and the supergradient converges.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. SIMULATION RESULTS</head><p>In this section some simulations will be shown to test the effectiveness of the proposed algorithm. The multi-agent system is composed by 6 agents on the plane. The connection radius is R = 30. The maximum theoretical value of λ 2 (L) is equal to N , and it is reached if each agent reaches a distance at most equal to ρ with all the others. The chosen step-size for the supergradient algorithm is α (k) = 1/(k + 1), thus ensuring the convergence of the algorithm.</p><p>In the first simulation the minimum distance is ρ = 2. Figure <ref type="figure" target="#fig_2">2</ref> shows respectively, from left to right, and from up to down, the value of λ 2 , the initial configuration, an 45th IEEE CDC, San Diego, USA, Dec. <ref type="bibr" target="#b12">[13]</ref><ref type="bibr" target="#b13">[14]</ref><ref type="bibr" target="#b14">[15]</ref><ref type="bibr">2006</ref> ThB18.4  In the second simulation we have ρ = 0, thus the maximum λ 2 is obtained when agents reach the same point in the plane (rendezvous). Since the control action for the agents does not include the collision avoidance, it is possible for the agents to reach the rendezvous, as shown in Figure <ref type="figure" target="#fig_3">3</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. CONCLUSIONS</head><p>In this paper we proposed an iterative decentralized algorithm for the connectivity control of a multi-agent system. The algorithm maximizes the second smallest eigenvalue of the Laplacian matrix by a supergradient method, in conjunction with a potential based control that drives the agents toward a formation defined at each step of the supergradient. The convergence of the supergradient is shown analytically and by simulations.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>2i to them; • update the entries g (k) ij using (</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>2 ≈ 4 .</head><label>24</label><figDesc>intermediate configuration, and the final configuration of the agents on the plane. The circles are the agents, the lines are the connections among agents. The graph of connections in the intermediate configuration is completely connected, and it corresponds to the iteration 60 of the supergradient, where λ The final configuration, corresponding to λ 2 = 5, has one agent, at the center of the formation, at distances equal to ρ with all others, and all the other distances greater than ρ.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. From left to right, from up to down: value of λ2 during the iterations, initial, intermediate and final configuration of the agents on the plane. Agents are represented by 'o' and links by lines.</figDesc><graphic coords="6,62.77,179.38,227.25,174.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. From left to right, from up to down: value of λ2 during the iterations, initial and intermediate configuration of the agents on the plane, motion of the agents on the plane.</figDesc><graphic coords="6,61.65,502.83,229.50,171.00" type="bitmap" /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>1-4244-0171-2/06/$20.00 ©2006 IEEE.</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Coordination of groups of mobile autonomous agents using nearest neighbor rules</title>
		<author>
			<persName><forename type="first">A</forename><surname>Jadbabaie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">S</forename><surname>Morse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Automatic Control</title>
		<imprint>
			<biblScope unit="volume">48</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="988" to="1001" />
			<date type="published" when="2003-06">June 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Cooperative control of mobile sensing networks: Adaptive gradient climbing in a distributed environment</title>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">L P</forename><surname>Ogren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Fiorelli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transaction on Automatic Control</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="1292" to="1302" />
			<date type="published" when="2004-08">August 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Coverage control for mobile sensing networks</title>
		<author>
			<persName><forename type="first">J</forename><surname>Cortes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Martinez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Karatas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Bullo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Robotics and Automation</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="243" to="255" />
			<date type="published" when="2004-02">February 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Flocking in multiagent dynamic systems: Algorithms and theory</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">O</forename><surname>Saber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Automatic Control</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2006-03">Mar 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Equilibria and steering laws for planar formations</title>
		<author>
			<persName><forename type="first">E</forename><surname>Justh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Krishnaprasad</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Systems and Control letters</title>
		<imprint>
			<biblScope unit="volume">52</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="25" to="38" />
			<date type="published" when="2004-05">May 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Emergent behavior in flocks</title>
		<author>
			<persName><forename type="first">F</forename><surname>Cucker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Smale</surname></persName>
		</author>
		<ptr target="http://math.berkeley.edu/smale/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Robust rendezvous for mobile autonomous agents via proximity graphs in arbitrary dimensions</title>
		<author>
			<persName><forename type="first">J</forename><surname>Cortes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Martinez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Bullo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Automatic Control</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="1289" to="1298" />
			<date type="published" when="2006-08">August 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Distributed topology control for wireless multihop ad-hoc networks</title>
		<author>
			<persName><forename type="first">R</forename><surname>Wattenhofer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Bahl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y.-M</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">INFOCOM</title>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="1388" to="1397" />
		</imprint>
	</monogr>
	<note>Available: citeseer.ist.psu.edu/wattenhofer01distributed.html</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Connectivity graphs as models of local interactions</title>
		<author>
			<persName><forename type="first">A</forename><surname>Muhammad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Egerstedt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 43th IEEE Conference on Decision and Control</title>
		<meeting>the 43th IEEE Conference on Decision and Control<address><addrLine>Atlantis, Paradise Island, Bahamas</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-12">December 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Robust connectivity of networked vehicles</title>
		<author>
			<persName><forename type="first">D</forename><surname>Spanos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">M</forename><surname>Murray</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 43th IEEE Conference on Decision and Control</title>
		<meeting>the 43th IEEE Conference on Decision and Control<address><addrLine>Atlantis, Paradise Island, Bahamas</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-12">December 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">On maximizing the second smallest eigenvalue of a state-dependent graph laplacian</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mesbahi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Automatic Control</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="116" to="120" />
			<date type="published" when="2006-01">January 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Controlling connectivity of dynamic graphs</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M</forename><surname>Zavlanos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">J</forename><surname>Pappas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 44th IEEE Conference on Decision and Control</title>
		<meeting>the 44th IEEE Conference on Decision and Control<address><addrLine>Seville, Spain</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-12">December 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Gossip algorithms: Design, analysis and applications</title>
		<author>
			<persName><forename type="first">S</forename><surname>Boyd</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ghosh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Prabhakar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Shah</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Infocom 2005</title>
		<meeting>IEEE Infocom 2005<address><addrLine>Miami</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-03">March 2005</date>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="1653" to="1664" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A decentralized algorithm for spectral analysis</title>
		<author>
			<persName><forename type="first">D</forename><surname>Kempe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Mcsherry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of STOC 2004</title>
		<meeting>STOC 2004<address><addrLine>Chicago, Illinois, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-06">June 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Exact robot navigation using artificial potential functions</title>
		<author>
			<persName><forename type="first">E</forename><surname>Rimon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">E</forename><surname>Koditschek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Robotics and Automation</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="501" to="518" />
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Flocking in fixed and switching networks</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">G</forename><surname>Tanner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Jadbabaie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">J</forename><surname>Pappas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transaction</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Algebraic Graph Theory</title>
		<author>
			<persName><forename type="first">C</forename><surname>Godsil</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Royle</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001">2001</date>
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<author>
			<persName><forename type="first">S</forename><surname>Boyd</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Vandenberghe</surname></persName>
		</author>
		<title level="m">Convex Optimization</title>
		<imprint>
			<publisher>Cambridge University Press</publisher>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Subgradient methods</title>
		<author>
			<persName><forename type="first">S</forename><surname>Boyd</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Xiao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Mutapcic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Lecture Notes</title>
		<imprint>
			<date type="published" when="2003-10">October 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<author>
			<persName><forename type="first">D</forename><surname>Bertsekas</surname></persName>
		</author>
		<title level="m">Nonlinear Programing. Atehna Scientific</title>
		<imprint>
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Fast linear iterations for distributed averaging</title>
		<author>
			<persName><forename type="first">L</forename><surname>Xiao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Boyd</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 42nd IEEE Conference on Decision and Control</title>
		<meeting>the 42nd IEEE Conference on Decision and Control<address><addrLine>Maui, Hawaii, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-12">December 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">San</forename><surname>Ieee Cdc</surname></persName>
		</author>
		<author>
			<persName><surname>Diego</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dec</forename><surname>Usa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ThB</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="13" to="15" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
