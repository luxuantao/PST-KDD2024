<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Cool Features and Tough Decisions: A Comparison of Variability Modeling Approaches</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Krzysztof</forename><surname>Czarnecki</surname></persName>
							<email>czarnecki@acm.org</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Waterloo</orgName>
								<address>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Paul</forename><surname>Grünbacher</surname></persName>
							<email>paul.gruenbacher@jku.at</email>
							<affiliation key="aff1">
								<orgName type="institution">Johannes Kepler University Linz</orgName>
								<address>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Rick</forename><surname>Rabiser</surname></persName>
							<email>rabiser@ase.jku.at</email>
							<affiliation key="aff2">
								<orgName type="department">CD Lab for Autom. Softw. Eng</orgName>
								<orgName type="institution">JKU Linz</orgName>
								<address>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Klaus</forename><surname>Schmid</surname></persName>
							<email>schmid@sse.uni-hildesheim.de</email>
							<affiliation key="aff3">
								<orgName type="institution">University of Hildesheim</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Andrzej</forename><forename type="middle">W</forename><surname>Ąsowski</surname></persName>
							<email>wasowski@itu.dk</email>
							<affiliation key="aff4">
								<orgName type="institution">IT University of Copenhagen</orgName>
								<address>
									<country key="DK">Denmark</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Cool Features and Tough Decisions: A Comparison of Variability Modeling Approaches</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">C2771AAA6E94B9C486D6837DD8B6AF81</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T04:14+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>variability modeling</term>
					<term>feature modeling</term>
					<term>decision modeling</term>
					<term>product lines</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Variability modeling is essential for defining and managing the commonalities and variabilities in software product lines. Numerous variability modeling approaches exist today to support domain and application engineering activities. Most are based on feature modeling (FM) or decision modeling (DM), but so far no systematic comparison exists between these two classes of approaches. Over the last two decades many new features have been added to both FM and DM and it is tough to decide which approach to use for what purpose. This paper clarifies the relation between FM and DM. We aim to systematize the research field of variability modeling and to explore potential synergies. We compare multiple aspects of FM and DM ranging from historical origins and rationale, through syntactic and semantic richness, to tool support, identifying commonalities and differences. We hope that this effort will improve the understanding of the range of approaches to variability modeling by discussing the possible variations. This will provide insights to users considering adopting variability modeling in practice and to designers of new languages, such as the new OMG Common Variability Language.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION AND MOTIVATION</head><p>Variability modeling is used to understand and define commonalities and variabilities in software product lines and to support product derivation. It also helps to bring modeling concepts into otherwise mostly code-driven projects. For example, in some real-world projects, such as the Linux kernel and the embedded operating system eCos, variability modeling is the only form of modeling that is used <ref type="bibr" target="#b13">[13]</ref>. Among the existing approaches to variability modeling, feature modeling (FM) and decision modeling (DM) have gained most importance. Most existing FM approaches are more or less directly derived from the work on Feature-Oriented Domain Analysis (FODA) by Kang et al. <ref type="bibr" target="#b42">[42]</ref>. Several papers compare FM approaches from different viewpoints <ref type="bibr" target="#b19">[19,</ref><ref type="bibr" target="#b61">61,</ref><ref type="bibr" target="#b12">12]</ref>. DM exists nearly as long as FM, and, similarly, most (if not all) existing DM approaches <ref type="bibr" target="#b60">[60]</ref> have been influenced by the Synthesis method <ref type="bibr" target="#b64">[64]</ref>. Among other variability modeling approaches, one should mention Orthogonal Variability Management (OVM) <ref type="bibr" target="#b51">[51]</ref>. In this paper, however, we focus solely on comparing DM and FM, as the currently most popular classes of methods, leaving a broader survey to future work.</p><p>Despite their significant role in product line research and practical applications, a systematic comparison of FM and DM approaches is still lacking. Existing general surveys of variability modeling techniques <ref type="bibr" target="#b17">[17,</ref><ref type="bibr" target="#b63">63]</ref> do not discuss the differences and commonalities of FM and DM. Over the last two decades, the original FM and DM proposals have been extended with many new features. Without a thorough understanding of the differences, deciding between FM and DM approaches is difficult. As we will see, however, the capabilities of modern FM and DM approaches have significantly converged.</p><p>Fig. <ref type="figure">1</ref> depicts an example of a feature model using a slightly adapted FODA notation <ref type="bibr" target="#b23">[23]</ref> (a) and an example of a decision model in two different notations (b and c) for a fictitious mobile phone product line. Fig. <ref type="figure">1(b</ref>) is based on the style of Mansell and Sellier <ref type="bibr" target="#b46">[46]</ref> and Schmid and John <ref type="bibr" target="#b59">[59]</ref>; Fig. <ref type="figure">1(c</ref>) shows the original Synthesis notation <ref type="bibr" target="#b64">[64]</ref>. We will refer to this example throughout the paper to clarify differences and commonalities of FM and DM.</p><p>Our aim is to clarify the relation between the two major classes of variability modeling approaches and increase clarity in the research field, in which, as we show later, a number of seemingly contradictory statements on DM and FM exist. We also aim to explore potential synergies.</p><p>The paper is based on our experiences as experts in the respective areas of DM and FM and on our knowledge of the literature in these fields. The results are based on 3 face-to-face meetings and 11 phone conferences with a typical duration of 1,5 hours in which we first agreed on the dimensions and then discussed the relation between DM and FM in detail for each dimension. We did not make the attempt to involve additional experts in this work. We also did not follow a systematic method to analyze the literature (such as a systematic literature review). Obviously, this process represents a threat to validity. However, the group of five authors carefully discussed all cases of disagreement and the authors achieved consensus on all reported results.</p><p>Our work is of interest to researchers and practitioners deciding on approaches and tools to variability modeling as well as to tool builders who want to improve the variability modeling capabilities of their tools. We also regard this comparison as an important step towards standardization of variability modeling <ref type="bibr" target="#b1">[1]</ref>.</p><p>Sect. 2 describes the background and history of FM and DM. Sect. 3 discusses the commonalities and differences of FM and DM in detail using ten dimensions defined based on comparison frameworks previously used by the authors within the areas of FM <ref type="bibr" target="#b13">[13]</ref> and DM <ref type="bibr" target="#b60">[60]</ref>. Sect. 4 discusses how variability modeling approaches used in real-world projects such as Kconfig and CDL <ref type="bibr" target="#b13">[13]</ref> have applied concepts from both FM and DM in practice and what can be learned from these languages regarding potential synergies and standardization efforts, such as the OMG Common Variability Language (CVL) <ref type="bibr" target="#b1">[1]</ref>. We summarize main findings and suggest future work in Sect. 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">BACKGROUND AND HISTORICAL PER-SPECTIVE</head><p>Feature Modeling.</p><p>FM was originally proposed as part of the FODA method <ref type="bibr" target="#b42">[42]</ref>. In FODA, a domain is defined as a set of current and future systems sharing common capabilities. Domain analysis aims at discovering and representing commonalities and variabilities among them. In FODA, feature models capture features-the end-user's (and customer's) understanding of the general capabilities of systems in the domain-and the relationships among them. Fig. <ref type="figure">1</ref>(a) depicts a feature model for the mobile phone example as a feature tree with mandatory and optional features and a cross-tree dependency (requires).</p><p>Historically, FODA builds on, among others, Neighbors's work on Draco <ref type="bibr" target="#b50">[50]</ref>, and Batory's domain analysis of DBMS and the Genesis tool <ref type="bibr" target="#b10">[10]</ref>. Feature-orientation can be traced back to the ROSE tool <ref type="bibr" target="#b45">[45,</ref><ref type="bibr" target="#b14">14]</ref>, which supported 'feature-based selection' of components, and the KAPTUR system <ref type="bibr" target="#b49">[49]</ref>, which used 'distinctive features' to distinguish systems within a domain.</p><p>FODA has spurred a multitude of works on extending the original notation and on modeling and implementing systems using feature models. Notable extensions include group cardinalities <ref type="bibr" target="#b55">[55]</ref>, feature cardinalities <ref type="bibr" target="#b25">[25]</ref>, and feature inheritance <ref type="bibr" target="#b5">[5]</ref>. Existing surveys cover some of these notations <ref type="bibr" target="#b61">[61]</ref> and applications <ref type="bibr" target="#b39">[39]</ref>. FM is also an integral part of feature-oriented software development (FOSD), a paradigm focused on treating features as modular, firstclass entities throughout the entire development cycle, including requirements, design, implementation, and test <ref type="bibr" target="#b2">[2]</ref>. Thus, the meaning of the term feature has been broadened dramatically over time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Decision Modeling.</head><p>The earliest documented approach to DM is found in the Synthesis method <ref type="bibr" target="#b64">[64]</ref>. The method, developed by the Software Productivity Consortium for industrial use, provided an early reuse process model. Most-if not all-DM approaches can ultimately trace their heritage back to Synthesis, which defines a decision model as a set of decisions that are adequate to distinguish among the members of an application engineering product family and to guide adaptation of application engineering work products <ref type="bibr" target="#b64">[64]</ref>. This early definition emphasizes product derivation-as opposed to describing the domain, which is the main purpose of FM in FODA. Fig. <ref type="figure">1</ref>(c) de-picts a Synthesis decision model for the mobile phone example, in a textual representation.</p><p>Most DM approaches were either inspired by industrial applications or developed in close collaboration with industry. Several of them are discussed in a recent comparative analysis <ref type="bibr" target="#b60">[60]</ref>. In VManage <ref type="bibr" target="#b31">[31,</ref><ref type="bibr" target="#b46">46]</ref> and the approach by Weiss and Lai <ref type="bibr" target="#b69">[69]</ref>, a decision model is a document defining the decisions that must be made to specify a member of a domain <ref type="bibr" target="#b46">[46]</ref>. The tool-supported DO-PLER approach <ref type="bibr" target="#b28">[28]</ref> has been developed to guide the derivation of customer-specific products. The work of Schmid and John <ref type="bibr" target="#b59">[59]</ref> provides a common modeling foundation that can be mapped to a wide range of notations. Fig. <ref type="figure">1</ref>(b) depicts a decision model for the mobile phone example in a tabular representation that combines elements from several previous works <ref type="bibr" target="#b46">[46,</ref><ref type="bibr" target="#b59">59,</ref><ref type="bibr" target="#b28">28]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">COMPARISON</head><p>We compare FM and DM along ten dimensions, extracted from two earlier frameworks for discussing FM and DM approaches <ref type="bibr" target="#b13">[13,</ref><ref type="bibr" target="#b60">60]</ref>. These dimensions are the following applications, unit of variability (feature vs. decision), orthogonality, data types, hierarchy, dependencies and constraints, mapping to artifacts, binding time and mode, modularity, and tool aspects.</p><p>The first of the two frameworks underlying our dimensions <ref type="bibr" target="#b13">[13]</ref> was used to study Kconfig and Component Description Language (CDL), which are two real-world variability languages, and compare them with FM. Its dimensions included feature kinds, feature representation, hierarchy, constraints, code mappings, binding modes, and modularization.</p><p>The second framework <ref type="bibr" target="#b60">[60]</ref> was used to compare different decision modeling approaches. Its dimensions were decision data type, constraints and dependencies, artifact types and relations, product derivation support (including binding time), aggregation of decisions and tool support.</p><p>We integrated and generalized the two frameworks to adequately address the needs of both DM and FM, arriving at the ten dimensions used in this paper. The integration was straightforward as the frameworks overlap significantly, giving us eight of the ten dimensions. We then extended this set with two additional dimensions: applications and orthogonality. We added applications since one of our goals was to clarify the applicability of FM and DM. We added orthogonality of variability modeling since several authors mentioned this aspect when discussing FM and DM (e.g., <ref type="bibr" target="#b51">[51,</ref><ref type="bibr" target="#b33">33]</ref>).</p><p>The remainder of this section compares DM and FM according to these ten dimensions. The three left-most columns of Table <ref type="table" target="#tab_0">1</ref> summarize this comparison; the remaining columns will be discussed in Sect. 4).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Applications</head><p>We will first focus on the purposes to which the approaches are most commonly used. The emphasis is slightly different for the two approaches.</p><p>DM focuses on variability modeling and derivation support; FM focuses on commonality and variability modeling, but it also provides derivation support. Fig. <ref type="figure">1</ref> shows that FM and DM both represent variabilities, but only FM also presents the commonalities: GSM Protocol GSM 1800 and playback are part of the feature model but are intentionally not represented in the decision models, as no decision needs to be made for these common features.</p><p>The key applications of DM include planning and managing variabilities in SPLs and derivation support, i.e., supporting application engineers in configuring and creating products based on software product lines <ref type="bibr" target="#b69">[69,</ref><ref type="bibr" target="#b46">46,</ref><ref type="bibr" target="#b59">59,</ref><ref type="bibr" target="#b28">28]</ref>. The application scope has also broadened over time and includes efforts to integrate DM with goal (b) Decision model in a tabular notation <ref type="bibr" target="#b59">[59,</ref><ref type="bibr" target="#b28">28]</ref> GSM_Protocol_1900: one of (GSM_1900, NO_GSM_1900) {indicates whether support for making and receiving calls using GSM 1900 is available} Audio: list of (WAV, MP3)</p><p>{indicates the types of supported audio formats} Camera: composed of Presence: one of (Camera, NO_Camera) {indicates whether camera support is available} Resolution: one of (2.1MP, 3.1MP, 5MP) {resolution of the camera} MP3_Recording: one of (MP3, NO_MP3) {indicates whether MP3 recording is available}</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Constraints</head><p>Resolution is available only if Presence has the value Camera MP3_Recording requires that also MP3 Audio is supported (c) Decision model in the textual notation of Synthesis <ref type="bibr" target="#b64">[64]</ref> Figure <ref type="figure">1</ref>: A feature model and two decision models for a fictitious mobile phone product line; same variability, while commonalities are only shown in the feature model. modeling in service-oriented systems <ref type="bibr" target="#b34">[34]</ref>, to use DM with modeldriven architectures <ref type="bibr" target="#b31">[31]</ref>, to use DM for code generation <ref type="bibr" target="#b70">[70]</ref>, and to support personalization of ERP software by end-users <ref type="bibr" target="#b53">[53]</ref>. FM has targeted a broader set of roles in the development life cycle, starting with the original application in FODA-domain analysis and scoping, but also including design and representation of product line architectures and evolution-helping to see what features are available, which new features should be added and where, and which existing features might need to be retired.</p><p>FM has also been used like DM-as a central variability model and a basis for derivation (e.g., <ref type="bibr" target="#b38">[38,</ref><ref type="bibr" target="#b48">48,</ref><ref type="bibr" target="#b47">47]</ref>). Interestingly, Gears and Pure::Variants, which are industrial SPL tools supporting FM, have been used predominantly for variability modeling and derivation support. <ref type="foot" target="#foot_0">1</ref> However, FM is also used as a general concept modeling technique, e.g., in comparative surveys <ref type="bibr" target="#b24">[24]</ref>. Thus, in contrast to DM, derivation support is not the essential application of FM.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Unit of variability</head><p>This dimension looks at the key concepts that are used to model variability in both types of approaches.</p><p>The units of variability are decisions for DM and features for FM. Decisions are differences among systems; they can be anything that an application engineer needs to decide during derivation. For example, the engineer needs to decide whether a particular phone will support the GSM 1900 protocol (cf. Fig. <ref type="figure">1</ref></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>(b) and (c)).</head><p>The term "feature" is highly overloaded among different FM approaches <ref type="bibr" target="#b19">[19]</ref> and also in the wider context of software engineering. FODA defines a feature as "a prominent or distinctive user-visible aspect, quality or characteristic of a software system or systems." <ref type="bibr" target="#b42">[42]</ref> Some authors define features as requirementslevel entities, e.g., "a cohesive set of individual requirements" <ref type="bibr" target="#b16">[16]</ref> or "a set of related requirements, domain properties, and specifications" <ref type="bibr" target="#b19">[19]</ref>. FOSD considers a feature as "an increment in product functionality" <ref type="bibr" target="#b11">[11]</ref>, and focuses on representing features explicitly throughout the development life cycle, including requirements, design, implementation, and tests. Thus, FM has represented a wide range of system and environment properties as featuresfunctional or non-functional, and pertaining to different life cycle activities. This usage is consistent with the definition of a feature as a "characteristic of a concept (e.g., system, component, etc.) that is relevant to some stakeholder of the concept" <ref type="bibr" target="#b23">[23]</ref>.</p><p>Clearly, anything that FM captures as variable features can be captured by DM as decisions and vice versa. Essentially, a decision in DM reifies the need to decide some variable feature (property) of a system, its environment or both. The essential difference between FM and DM is that common features, e.g., GSM 1800 in Fig. <ref type="figure">1(a)</ref>, are outside the scope of DM and thus missing in Fig. <ref type="figure">1(b)</ref> and<ref type="figure">(c</ref>).</p><p>Finally, it should be emphasized that features in FM or decisions in DM are typically abstractions over other artifacts, such as requirements, designs, and implementations (rather than, say, directly representing requirements <ref type="bibr" target="#b15">[15]</ref>). Consequently, features and decisions need to be mapped to artifacts, which we discuss later in Section 3.7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Orthogonality</head><p>Orthogonality of variability modeling is the degree to which variability is modeled as a separate concern. An orthogonal variability model is devoted primarily to capturing variability-it offers, as Pohl et al. put it, "a cross-sectional view of the variability across all software-development artifacts" <ref type="bibr" target="#b51">[51]</ref>. Orthogonality is lost when variability is defined as an integral part of development artifacts; for instance, by directly defining variability within code.</p><p>Gomaa <ref type="bibr" target="#b32">[32]</ref> models variability directly within UML models of requirements and design. He uses class diagrams syntax to represent feature models and gives them special semantics to capture variant derivation. He also realizes variability in requirements and design models by exploiting existing syntactic mechanisms of UML, such as conditions on transitions and stereotypes.</p><p>Orthogonal variability modeling has been the essence of DM and is the predominant application of FM today. Decisions focus purely on variability-representing what needs to be decided on. Feature models are used today typically as orthogonal representations of commonality and variability or just variability. For example, Groher and Völter use feature models, represented in Pure::Variants, for orthogonal variability modeling <ref type="bibr" target="#b33">[33]</ref>.</p><p>The orthogonality of FM is sometimes questioned in the literature. For example, Pohl et al. state that "software development models (e.g., feature models) are already complex, and they get overloaded by adding variability information." <ref type="bibr" target="#b51">[51]</ref> This statement relates to features as user-visible system capabilities-the original meaning of features in FODA. Lists of such capabilities, which are often packages of requirements, may be useful artifacts on their own, even if no variability is involved. Thus, adding variability to such artifacts could be classified as non-orthogonal variability modeling; however, as argued above, feature models are used today mainly as orthogonal representations of commonality and variability (or just variability) over other artifacts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Data types</head><p>A decision or feature model denotes a set of structures representing configurations and thus can be viewed as a collection of type definitions. These types determine the available primitive values and composite structures that can be selected or constructed during configuration.</p><p>Both DM and FM cover a comparable range of data types. Individual approaches cover different subsets of this range, however, and Boolean and composite types are represented differently across the two classes of approaches. In FM, the Boolean type is implicit in optional features-e.g., GSM 1900 in Fig. <ref type="figure">1(a)</ref>; in DM, the type is either explicit (cf. Fig. <ref type="figure">1(b)</ref>) or encoded as an enumeration (cf. Fig. <ref type="figure">1(c)</ref>). Many FM and DM notations support additional primitive types, including string, integers, and reals. Synthesis <ref type="bibr" target="#b64">[64]</ref> includes even date and time, e.g., to model a license expiry date. All DM notations offer enumerations as primitive data types and some offer records or sets or both. FM supports these composite types by relying on hierarchy, group constraints, and-if supportedfeature cardinalities. Enumerations are often represented as xorgroups in FM (cf. resolution in Fig. <ref type="figure">1(a)</ref>), but some languages, e.g., TVL <ref type="bibr" target="#b18">[18]</ref>, have an explicit enumeration type. Finally, some DM and FM approaches support multiple instantiation of a decision or feature. In cardinality-based FM, features having cardinal-ity with an upper bound higher than one can be instantiated multiple times <ref type="bibr" target="#b25">[25]</ref>. The DM approach V-Manage <ref type="bibr" target="#b31">[31]</ref> provides this functionality as well. Some FM notations, e.g., Clafer <ref type="bibr">[7]</ref>, support reference types-their values are references to instances of other features.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Hierarchy</head><p>All FM notations support a tree-like organization of features as an essential concept. This organization allows decomposing higher-level features into more detailed ones as shown in Fig. <ref type="figure">1(a)</ref>. Hierarchy is explicit both in feature models and in configuration views, e.g., as graphical trees or indented text. Semantically, feature hierarchy imposes configuration constraints, where selecting a feature implies selecting its parent. Hierarchies in feature models are typically not very deep on average, but some models can have deeper parts. For example, the median hierarchy depth in the models collected in the SPLOT repository (http://www.splot-research. org/) is 3; maximum hierarchy depth is 10.</p><p>In DM, hierarchy is a secondary concept, as DM models are thought of primarily as flat lists or tables of decisions, with dependencies. However, already Synthesis <ref type="bibr" target="#b64">[64]</ref> supported groups of decisions (cf. Fig. <ref type="figure">1(c</ref>): 'Camera: composed of'), a concept that directly corresponds to hierarchy in feature models. Hierarchies of decisions are mainly used to guide the configuration process. In contrast to FM, there is no standard hierarchy mechanism or hierarchy semantics across DM approaches. Some notations, e.g., <ref type="bibr" target="#b6">[6]</ref>, support nesting of records, which induces a hierarchy similar to that of FM. In DOPLER <ref type="bibr" target="#b28">[28]</ref>, hierarchy is induced in the configuration view by visibility conditions of decisions. The visibility of a decision implies the visibility of its parents, which is not a configuration constraint. Visibility thus helps to structure the configuration process but has no impact on the definition of legal configurations. In the approach by Schmid and John <ref type="bibr" target="#b59">[59]</ref>, a hierarchy is induced by relevancy conditions-only values of relevant decisions become part of a configuration description. Hierarchies in real-world decision models <ref type="bibr" target="#b28">[28]</ref> are typically quite flat, i.e., the maximum depth in the DOPLER models occurring in a multiple case study in the domains of industrial automation systems and business software <ref type="bibr" target="#b28">[28]</ref> is 3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6">Dependencies and constraints</head><p>Both FM and DM allow expressing dependencies that exist in the domain or its implementation or both. Most important are configuration constraints, which restrict the legal configurations of features or decisions. FODA has a very simple constraint language, which allows saying that a feature requires or excludes another feature (cf. Fig. <ref type="figure">1(a)</ref>). Even though FODA included examples of numeric features, most formalizations of constraints has focused on supporting arbitrary Boolean restrictions <ref type="bibr" target="#b9">[9,</ref><ref type="bibr" target="#b37">37]</ref>. Synthesis <ref type="bibr" target="#b64">[64]</ref> anticipated richer constraints, e.g., over numeric domains, but did not offer a precisely defined constraint language (cf. Fig. <ref type="figure">1(c)</ref>). Subsequent DM methods, including KobrA <ref type="bibr" target="#b6">[6]</ref>, Schmid and John <ref type="bibr" target="#b59">[59]</ref>, and DO-PLER <ref type="bibr" target="#b28">[28]</ref>, define their constraint languages much more precisely. Each of these languages surpasses the previous in expressiveness. For example, Schmid and John admit logic formulae with arithmetic operations and set operations, and DOPLER allows escaping to pure Java code to formulate specific conditions (cf. Fig. <ref type="figure">1(b)</ref>). Modern FM languages, e.g., TVL <ref type="bibr" target="#b18">[18]</ref>, Clafer <ref type="bibr">[7]</ref>, and those in Gears and pure:variants, allow a range of constraints comparable to that of modern DM languages. Constraint support for references and multiple instantiation of features, which requires some form of predicate logic or relational algebra, is rare, but present in some, e.g., in Clafer.</p><p>Beyond configuration constraints, DM languages, such as DO-PLER, allow formulating visibility conditions on decisions. These conditions control which decision prompts are visible to the application engineer during derivation (cf. Fig. <ref type="figure">1(b)</ref>). Also, virtually all DM and some FM languages support specifying default values as either constants or computed defaults.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.7">Mapping to artifacts</head><p>When modeling variability, features or decisions are just abstractions of the variabilities realized in other development artifacts. Understanding how features or decisions map to these artifacts is an important aspect of both DM and FM. Since derivation support is an essential application of decision modeling, mapping to artifacts is an essential aspect of DM. Some uses of FM, such as domain modeling, do not necessarily assume derivation; thus, artifact mapping is optional in FM.</p><p>In practice, a wide range of mapping techniques are used in both DM and FM. They typically relate decisions or features (high-level variability abstractions) to variation points (locations in artifacts where variability occurs). Schmid and John <ref type="bibr" target="#b59">[59]</ref> provide a set of artifact-notation-independent primitives for expressing variability in artifacts, such as optionality, alternative, set selection, and value reference. Some approaches associate artifacts with inclusion conditions (e.g., <ref type="bibr" target="#b36">[36,</ref><ref type="bibr" target="#b21">21,</ref><ref type="bibr" target="#b28">28]</ref>), and some associate features or decisions with the artifacts to be included (e.g., <ref type="bibr" target="#b6">[6]</ref>). A more expressible mechanism is fragment substitution <ref type="bibr" target="#b35">[35]</ref>, which allows relatively rich artifact transformations. Some DM and FM approaches define a separate artifact model, which exposes artifact abstractions to the decision or feature model (e.g., DOPLER and pure::variants). Finally, FOSD <ref type="bibr" target="#b2">[2]</ref> research has looked into different approaches of representing variability in artifacts, including conditions as annotations on model or program elements <ref type="bibr" target="#b21">[21,</ref><ref type="bibr" target="#b36">36,</ref><ref type="bibr" target="#b44">44]</ref> and compositional approaches (e.g., <ref type="bibr" target="#b8">[8,</ref><ref type="bibr" target="#b4">4]</ref>).</p><p>The mapping between features and varaibility realization can also be implicit. For example, the PLUS method of Gomaa <ref type="bibr" target="#b32">[32]</ref> assumes a variant of the annotative approach, where the mapping of features to variation points is achieved by using feature names directly in UML models representing the system-such references are resolved by derivation tools just as if they were annotations. The approach uses the existing UML syntactic means to express variability, such as state diagram transitions depending on feature selection, rather than on model variables.</p><p>Finally, the variable artifacts can be organized to reflect and modularize their variability. For example, ADORA <ref type="bibr" target="#b65">[65]</ref> organizes requirements models into hierarchical aspect containers that reflect the model variability-instead of using separate feature models with explicit mappings. Features are modeled as aspects that package and modularize variable model elements; they are composed by weaving. The approach uses view generation to generate abstract FM-like views and decision models for variability binding and configuration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.8">Binding time and mode</head><p>Mapping variability to artifacts may not be enough to define how products are built. In particular, variability models may need to include further realization information, such as described by a product plan <ref type="bibr" target="#b43">[43]</ref>. An example of such information is the binding time, i.e., when a certain variability is bound, and the binding mode, i.e., whether the binding is static (fixed) or dynamic (modifiable) <ref type="bibr" target="#b23">[23]</ref>. Examples of binding time are compile time, link time, deployment time, etc. So far support for such information is rare in both FM and DM, probably because it is highly application-and technology-dependent. Early FM and DM approaches mention the possibility to specify binding information <ref type="bibr" target="#b42">[42,</ref><ref type="bibr" target="#b59">59]</ref>, but lack realization details. Work on concrete realization exists, though. Examples include parameterized binding mode via templates and inheritance <ref type="bibr">[23, p. 234]</ref>, binding time variability via aspect-oriented techniques <ref type="bibr" target="#b58">[58,</ref><ref type="bibr" target="#b57">57]</ref>, time-line variability with constraints on transitions between configurations <ref type="bibr" target="#b30">[30]</ref>, and any-time variability in architectural description languages <ref type="bibr" target="#b67">[67]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.9">Modularity</head><p>Modularity mechanisms are needed as it would be inconvenient to define and maintain variability in a single model due to the large scale and complexity of many systems. Modularity is also fundamental in multi product lines, an emerging area addressing variability management for large-scale systems that comprise several self-contained but still interdependent product lines. For instance, Bühne et al. <ref type="bibr" target="#b15">[15]</ref> describe several issues of feature modeling in multi product lines using examples from the automotive industry.</p><p>Feature hierarchy and decision grouping provide basic structuring; however, dedicated modularization mechanisms for FM and DM also exist. For example, DOPLER allows dividing decision models into a number of interrelated model fragments <ref type="bibr" target="#b29">[29]</ref>. In FM several authors have proposed approaches to define a set of interrelated feature models, such as multi-level feature models <ref type="bibr" target="#b54">[54,</ref><ref type="bibr" target="#b26">26]</ref>. Schirmeier and Spinczyk <ref type="bibr" target="#b56">[56]</ref> discuss top-down, bottom-up, and hybrid forms of composing feature models in multi-layered product lines. An upcoming survey gives a detailed account of modularization techniques in FM <ref type="bibr" target="#b40">[40]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.10">Tool aspects</head><p>Important aspects of FM and DM tooling include editing, exploration, and analysis of models and configurations. A detailed account of specific tools is out of scope; however, we make some general observations.</p><p>As expected, UIs for model and configuration editing in FM usually emphasize hierarchy, but a similar range of representations, including lists, tables, trees, and graphs, have been used in both FM and DM tools. For example, decision models are often represented as a list of questions to be answered (cf. description attribute in Fig. <ref type="figure">1(b)</ref>), but may also show hierarchy <ref type="bibr" target="#b31">[31]</ref>. Feature models are typically shown as trees, but specific views may show feature lists or tables, e.g., summarizing feature-to-artifact mappings, or graphs, e.g., showing cross-tree dependencies.</p><p>Due to their derivation focus, DM tools pay special attention to decision filtering and workflows during configuration. DOPLER <ref type="bibr" target="#b28">[28]</ref> supports filtering using visibility conditions; Schmid and John <ref type="bibr" target="#b59">[59]</ref> accomplish this task using relevancy conditions. DOPLER also allows grouping decisions to configuration tasks, which can be assigned to users involved in product derivation <ref type="bibr" target="#b52">[52]</ref>. FM approaches have not addressed visibility conditions yet; however, extensive work exists on staged and workflow-based feature configuration <ref type="bibr" target="#b26">[26,</ref><ref type="bibr" target="#b38">38,</ref><ref type="bibr" target="#b48">48]</ref>.</p><p>Many researchers have worked on reasoning support for model and configuration analysis in FM. This body of work includes 1) finding and diagnosing inconsistencies in feature models and artifact mappings (e.g., <ref type="bibr" target="#b41">[41]</ref>), 2) verification of product line assets in presence of variability (e.g., <ref type="bibr" target="#b20">[20,</ref><ref type="bibr" target="#b3">3,</ref><ref type="bibr" target="#b27">27]</ref>) and 3) automated guidance during configuration. An extensive survey of 1) and 3) is available <ref type="bibr" target="#b12">[12]</ref>. Many of these results likely carry over to DM. In fact, DOPLER provides configuration guidance, such as decision propagation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">VARIABILITY MODELING IN PRACTICE</head><p>Over the last two decades variability modeling has been embraced in practice. Commercial tools like Pure::Variants and Gears exist with their respective specification languages. Independently, software engineers have designed their own modeling languages. For instance, the Linux kernel project uses the home-grown variability specification language Kconfig <ref type="bibr" target="#b71">[71,</ref><ref type="bibr" target="#b62">62]</ref>, which has been created independently of FM and DM research. Similarly, the eCos operating system uses its Component Description Language (CDL) <ref type="bibr" target="#b68">[68]</ref>. Linux and eCos are open source projects, but similar languages appear in commercial systems, for instance OSEK <ref type="bibr" target="#b22">[22]</ref>. All these languages can be placed into the category of FM and DM languages. Here we show how the main properties of DM and FM are reflected in practice, by comparison with (primarily) Kconfig and CDL. Simultaneously we relate to the current proposal of the Common Variability Language (CVL) standard <ref type="bibr" target="#b1">[1]</ref>. The three rightmost columns in Table <ref type="table" target="#tab_0">1</ref> summarize these three languages with respect to the same dimensions already discussed for DM and FM.</p><p>Applications and orthogonality. All mentioned languages (Kconfig, CDL, pure::variants, Gears, and CVL) target orthogonal variability modeling. These are all quite technical, heavy-caliber, tools that are meant to support end-to-end modeling and derivation, all the way to compilation and deployment. As such they are not indispensable at early design activities-other uses of FM, such as domain modeling, may be adequately supported with lightweight tools such as mind-map editors or spreadsheets.</p><p>Interestingly, CVL avoids the FM terminology, while retaining FODA-like concrete syntax of FM. We shall see below that nomenclature for variability specifications (VSpecs) in CVL resembles DM more than FM, while a VSpec tree looks like a feature model. Thus CVL avoids the confusion caused by the ambiguous meaning of the term feature. Whether a dedicated support for modeling features as high level, user-visible capabilities should be part of CVL is debated <ref type="bibr">[1, p. 80]</ref>. Design alternatives for such support include dedicated native notation, applying variability orthogonally to (such) feature models, or complete lack of (dedicated) support.</p><p>Units of variability and data types. In practice, often rather simple and relatively small Boolean models are applied to requirements artefacts. 2 In contrast, models used at the implementation level can become very large, and involve very complex constraints. For instance, the Linux kernel Kconfig model and the eCos CDL model comprise thousands of features or decisions about different implementation and architecture aspects, including complex constraints, some relating 20 or more features or decisions <ref type="bibr" target="#b13">[13]</ref>. They often include other types of variability than Boolean. For example, in the operating systems domain, integers are used to express sizes of resource pools such as threads, open files, or memory. Low level models occasionally also require the ability to instantiate features in multiple copies (see for example <ref type="bibr" target="#b22">[22]</ref> about OSEK).</p><p>Since CVL is domain independent, it supports a broad range of types, including multiple instantiation, and a constraint language for expressing dependencies over these types. CVL distinguishes three types of variability specifications (VSpecs), essentially linked to their types: choice (Boolean), variable (other primitive types) and classifier (multiple instantiations). This terminology avoids the term feature. In CVL VSpecs are organized in trees (VSpec trees), which are shown using FODA-like concrete syntax <ref type="bibr" target="#b1">[1]</ref>.</p><p>Hierarchy. Hierarchy is uniformly present in all mentioned languages. Kconfig's hierarchy, although visibility-induced like in 2 Personal communication with BigLever Inc., the vendor of Gears. DOPLER, is still used much in FM spirit <ref type="bibr" target="#b13">[13]</ref>. CDL hierarchy is used very much like in FM-it enforces parent-child implications and serves to organize the model.</p><p>Following its use of FODA syntax, CVL adopts hierarchy in the style of FM: it is used to decompose and organize the model and it also enforces parent-child constraints.</p><p>Mapping variability to artifacts. Kconfig and CDL have been designed as parts of build systems for their host projects. Thus they both support mapping of variability to artifacts. They follow the annotative approach, exposing names of features or decisions to the C preprocessor controling presence code fragments. Besides that, the mapping model is hidden in the build system (Kbuild) or represented in the variability model itself (CDL).</p><p>Mapping to artifacts is a core objective of CVL, which aims at external (orthogonal) definition of variability for any models described in MOF-based languages. CVL has a three-tier architecture: variability specifications (1) are mapped to artifacts (3) using a mapping model, called variability realization <ref type="bibr" target="#b2">(2)</ref>. Variability realization allows a number of variation point types: presence of objects, change of constant values in the models, object substitution and fragment substitution in style of <ref type="bibr" target="#b35">[35]</ref>. Importantly, CVL stores the mappings outside the artifacts. Thus the main artifacts, the so called base models, remain unchanged by introduction of variability, and can be processed by the native tools supporting the languages in which the artifacts are expressed.</p><p>The binding time and mode are highly dependent on the application domains and technology applied. CDL, which supports an operating system for small embedded devices, only has static, compiletime binding. Interestingly, Kconfig provides native support for binding mode, by means of so called tri-state features or decisions. It allows to decide at compile time whether a given functionality should be linked statically or whether it should stay dynamically loadable. Thus, Kconfig implements support for binding mode from the model and the configuration UI through to realization in the build process (unlike other variability modeling languages that treat binding as a simple parameter in the high level model).</p><p>Since CVL is domain independent, it follows both FM and DM and does not standardize this aspect.</p><p>Modularity is essential to any models of realistic size. Kconfig allows distributing a monolithic model over multiple files-a form of primitive untyped modules. CDL provides packaging and import constructs, with an interesting ability to inject new model fragments into an existing hierarchy (reparenting). This enables model extensions that plug into an existing model decomposition hierarchy.</p><p>The initial CVL proposal allows both for simple aggregation (packaging) and encapsulation of configurable units (CU). CUs wrap variability realization together with variability specification. CVL also supports configuration interfaces (simply VSpec trees), which specify variability allowed for an encapsulated CU. The intended uses of CUs include supplying configurable reusable thirdparty components, staged configuration and multi-level product lines.</p><p>Tool aspects. CDL and Kconfig are both textual languages, with no specific editor support, besides usual text editors. They both have tools supporting product derivation, providing user guidance. In particular, CDL's configurator can propose fixes for constraint violations. Gears and pure::variants have tool support for model editing (for multiple representations) and configuration. Other tools, such as analyzers, are rare in the industry, but quite widespread in research <ref type="bibr" target="#b12">[12]</ref>. This gap is probably caused by lack of proper technology transfer. Recent successful attempts to introduce model analysis tools to practitioners indicate that these tools are indeed useful <ref type="bibr" target="#b66">[66]</ref>.</p><p>Three aspects of tool integration stand out in CVL's design. First, the language-independent approach to adding variabilit y allows processing models produced by CVL using regular modeling tools (although to exploit the variability information, plugins for modeling tools will be needed). Second, CVL will need tools supporting 1) configuration of the VSpec tree and 2) materialization (resolution of variation points in the base models based on configuration). Finally, CUs will allow encapsulation of variability realized by some other, non-CVL tools, and interfacing it to CVL infrastructure using variability interfaces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">CONCLUSIONS AND FUTURE WORK</head><p>We have provided a detailed structured comparison of feature and decision modeling, including a discussion of our findings in the light of other related practical variability modeling approaches like Kconfig, CDL, and CVL.</p><p>Based on our analysis, the main difference between FM and DM is that FM supports both commonality and variability modeling, whereas DM focuses exclusively on variability modeling. In practice, this difference is limited by two factors: 1) FM is often used, just like DM, to capture variabilities that need to be resolved during product derivation; 2) commonality modeling has limited impact on variability languages and tools-as the constructs used to model variability can also be used to model commonality. The latter point is reflected by the fact that mandatory features can be used to model both common features, such as GSM 1800 in Fig. <ref type="figure">1</ref>(a), and groupings of variable features, such as GSM Protocols; however, many DM approaches also provide grouping nodes, like the mandatory feature GSM Protocols. Thus, the main difference is largely one of methodology: if FM is used to model both commonalities and variabilities, common features such as GSM 1800 are also captured.</p><p>The remaining differences are either minor or largely historical. The initial use of FM in FODA was to capture user-visible system capabilities; DM did not have such a restriction. Today, FM is mostly used, just like DM, as an orthogonal variability modeling technique, where features, like decisions, abstract over variabilities pertaining to different types of properties (functional and non-functional), levels of abstraction (environment, system, subsystem) and lifecycle stages (requirements, design, implementation, and test). Other differences are minor: 1) hierarchy is essential and has uniform semantics (child-presence-to-parent-presence implications) in FM and is secondary and has varied semantics (childpresence-to-parent-presence or child-visibility-to-parent-visibility implications) in DM; 2) mapping to artifacts is essential in DM and, depending on the use case, optional in FM. On the other hand, both FM and DM have a similar range of data types, constructs for expressing constraints, and modularization mechanisms and they both lack standardized support for binding time and mode.</p><p>Thus, our analysis uncovers a significant convergence between FM and DM. This conclusion is also supported by the fact that practical variability modeling approaches, such as Kconfig and CDL, combine concepts from FM and DM. For example, both Kconfig and CDL support hierarchy (FM), group constraints (FM), and visibility conditions (DM). Consequently, the specific capabilities of a variability modeling approach, such as the data types offered, the expressiveness of the constraint language, support for modularity, and the available tool support, are much more important factors when selecting an approach than its classification as DM or FM.</p><p>We hope that our study can fruitfully influence the CVL standardization process, by improving clarity of the design space and terminology of variability modeling. Our analysis of the initial CVL proposal reveals no glaring omissions or misguided decisions in its design, while it does single out clear advantages that CVL has, due to influence of research on its design (esp. constructs for encapsulations and interfacing, or the non-invasive, languageindependent approach).</p><p>Possible extensions of this work include conducting an expert survey on FM and DM with a wide set of respondents. Another work would be to compare FM and DM by comparing the formal semantics of the existing FM and DM languages. Since only selected dimensions of our comparison can be effectively formalized, such an approach would be restricted to these dimensions. It would also be interesting to expand the analysis with a systematic artifact study of models developed within FM and DM communities, including a qualitative and statistical comparison.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Commonalities and differences between FM and DM in diverse dimensions. The rightmost columns, Kconfig, CDL and CVL initial are discussed in Sect. 4.</figDesc><table><row><cell>dimension</cell><cell>decision modeling</cell><cell>feature modeling</cell><cell>Kconfig</cell><cell>CDL</cell><cell>CVL initial</cell></row><row><cell>applications</cell><cell>variability modeling; derivation</cell><cell>diverse applications: concept</cell><cell>modeling variability in</cell><cell>modeling variability in</cell><cell>variability modeling;</cell></row><row><cell></cell><cell>support</cell><cell>modeling (e.g., domain</cell><cell>the kernel; derivation</cell><cell>eCos; derivation support</cell><cell>derivation support</cell></row><row><cell></cell><cell></cell><cell>modeling), variability and</cell><cell>support</cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>commonality modeling; derivation</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>support</cell><cell></cell><cell></cell><cell></cell></row><row><cell>unit of variability</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>decisions to be made in derivation features are properties of concepts, e.g., systems</head><label></label><figDesc></figDesc><table><row><cell></cell><cell></cell><cell></cell><cell>drivers, subsystems,</cell><cell>drivers, subsystems,</cell><cell>VSpecs: essentially</cell></row><row><cell></cell><cell></cell><cell></cell><cell>kernel options, build</cell><cell>kernel options, build</cell><cell>decisions in derivation;</cell></row><row><cell></cell><cell></cell><cell></cell><cell>option</cell><cell>option</cell><cell>pre-made decisions</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>(mandatory features)</cell></row><row><cell>orthogonality</cell><cell>orthogonal</cell><cell>mostly used in orthogonal fashion</cell><cell>orthogonal (added</cell><cell>orthogonal (added</cell><cell>orthogonal (but</cell></row><row><cell></cell><cell></cell><cell></cell><cell>configuration UI</cell><cell>architectural concepts,</cell><cell>admitting</cell></row><row><cell></cell><cell></cell><cell></cell><cell>concepts, e.g., menus)</cell><cell>e.g., packages,</cell><cell>non-orthogonal uses is</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>components)</cell><cell>discussed)</cell></row><row><cell>data types</cell><cell>comprehensive set of basic types;</cell><cell>comprehensive set of basic types;</cell><cell>Boolean, tristate,</cell><cell>none, bool, data</cell><cell>choices; parameters with</cell></row><row><cell></cell><cell>composite: sets, records, arrays</cell><cell>references;</cell><cell>numbers and strings;</cell><cell>(dynamically typed</cell><cell>comprehensive set of</cell></row><row><cell></cell><cell></cell><cell>composite: via hierarchy, group</cell><cell>choices</cell><cell>values incl. int, string,</cell><cell>basic types; classifiers</cell></row><row><cell></cell><cell></cell><cell>and feature cardinalities</cell><cell></cell><cell>real), booldata</cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell>characteristics of</cell><cell>like in FM (essential</cell><cell>essential concept; vspec</cell></row><row><cell></cell><cell></cell><cell></cell><cell>FM&amp;DM: essential</cell><cell>organization means;</cell><cell>tree, like in FM</cell></row><row><cell></cell><cell></cell><cell></cell><cell>organization means</cell><cell>decomposition</cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell>(FM), visibility induced,</cell><cell>hierarchy)</cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell>driven by UI concepts</cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell>(DM)</cell><cell></cell><cell></cell></row><row><cell>dependencies and</cell><cell>no standard constraint language</cell><cell>no standard constraint language but</cell><cell>propositional</cell><cell>propositional Boolean</cell><cell>propositional and</cell></row><row><cell>constraints</cell><cell>but similar range of approaches</cell><cell>similar range of approaches</cell><cell>three-valued logics with</cell><cell>logics with expressions</cell><cell>predicate logic with</cell></row><row><cell></cell><cell>(Boolean, numeric, sets)</cell><cell>(Boolean, numeric, sets, quantifiers)</cell><cell>comparisons</cell><cell>on data</cell><cell>expressions on data</cell></row><row><cell cols="2">mapping to artifacts essential concept; no standard</cell><cell>optional concept; no standard</cell><cell>mapping to C</cell><cell>explicit mapping in the</cell><cell>essential concept;</cell></row><row><cell></cell><cell>mechanism</cell><cell>mechanism</cell><cell>preprocessor via a</cell><cell>variability model;</cell><cell>mapping model,</cell></row><row><cell></cell><cell></cell><cell></cell><cell>custom build system (no</cell><cell>variability symbols</cell><cell>base-model independent</cell></row><row><cell></cell><cell></cell><cell></cell><cell>explicit mapping model)</cell><cell>available to C</cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>preprocessor</cell><cell></cell></row><row><cell>binding time and</cell><cell>not standardized, occasionally</cell><cell>not standardized, occasionally</cell><cell>static or dynamic binding</cell><cell>static binding</cell><cell>not included in CVL</cell></row><row><cell>mode</cell><cell>supported</cell><cell>supported</cell><cell>decided at compile time</cell><cell></cell><cell>(dependent on</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>application)</cell></row><row><cell>modularity</cell><cell>no standard mechanism;</cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table><note><p>hierarchy secondary concept; diverse approaches, e.g., visibility or relevance hierarchy (no decomposition) essential concept; single approach: tree hierarchy modeling, parent-child configuration constraints and decomposition</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>decision groups play partly this role no standard mechanism; feature hierarchy plays partly this role</head><label></label><figDesc></figDesc><table><row><cell></cell><cell cols="6">(a) Feature model in a tree notation-slightly adapted from FODA [42]</cell></row><row><cell>decision name</cell><cell>description</cell><cell></cell><cell>type</cell><cell>Range</cell><cell></cell><cell>cardinality/constraint visible/relevant if</cell></row><row><cell>GSM_Proto-</cell><cell>Support GSM 1900 protocol?</cell><cell></cell><cell cols="2">Boolean true | false</cell><cell></cell></row><row><cell>col_1900</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Audio_Formats</cell><cell>Which audio formats shall be</cell><cell></cell><cell>Enum</cell><cell>WAV | MP3</cell><cell></cell><cell>1:2</cell></row><row><cell></cell><cell>supported?</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Camera</cell><cell>Support for taking photos?</cell><cell></cell><cell cols="2">Boolean true | false</cell><cell></cell></row><row><cell>Camera_Resolu-</cell><cell>Required camera resolution?</cell><cell></cell><cell>Enum</cell><cell cols="2">2.1MP | 3.1MP | 5MP</cell><cell>1:1</cell><cell>Camera == true</cell></row><row><cell>tion</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>MP3_Recording</cell><cell cols="2">Support for recording MP3 audio?</cell><cell cols="2">Boolean true | false</cell><cell></cell><cell>ifSelected Audio_For-</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>mats.MP3 = true</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>model is split into files;</cell><cell>loadable packages,</cell><cell>explicit support</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>no modularization</cell><cell>reparenting</cell><cell>(packages, configurable</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>beyond hierarchy in the</cell><cell>units)</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>language</cell></row><row><cell>tool aspects</cell><cell>representation of models as lists,</cell><cell cols="3">representation of models as lists,</cell><cell>modeling in textual</cell><cell>modeling in textual</cell><cell>user interfaces are the</cell></row><row><cell></cell><cell>tables, trees, and graphs;</cell><cell cols="3">tables, trees, and graphs;</cell><cell>syntax; configuration UI:</cell><cell>syntax; configuration UI:</cell><cell>domain of vendors; basic</cell></row><row><cell></cell><cell>configuration UI: an (ordered)</cell><cell cols="3">configuration UI: usually a tree</cell><cell>a tree with controlled</cell><cell>a tree with controlled</cell><cell>concrete syntax for</cell></row><row><cell></cell><cell>list of questions</cell><cell>(unordered)</cell><cell></cell><cell></cell><cell>visibility</cell><cell>visibility</cell><cell>VSpecs close to FM</cell></row><row><cell></cell><cell>diverse solutions for configuration</cell><cell cols="3">diverse solutions for supporting</cell><cell>no support for</cell><cell>no support for</cell></row><row><cell></cell><cell>workflows (essential)</cell><cell cols="2">configuration workflows</cell><cell></cell><cell>configuration workflows;</cell><cell>configuration workflows</cell></row><row><cell></cell><cell></cell><cell cols="2">(secondary concept)</cell><cell></cell><cell>reconfiguration scripts</cell><cell>beyond visibility</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>conditions</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>According to personal communication with the CEOs of the respective tool vendors.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">ACKNOWLEDGEMENTS</head><p>This work has been partially supported by the Christian Doppler Forschungsgesellschaft, Siemens VAI Metals Technologies, and Siemens Corporate Technology. This work has been partially supported by the INDENICA project, funded by the European Commission grant 257483, area Internet of Services, Software &amp; Virtualisation (ICT-2009.1.2) in the 7th framework programme.</p><p>Czarnecki and W ąsowski thank the other members of the CVL design team for insightful discussions on variability modeling.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName><surname>References</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Common variability language (CVL)</title>
	</analytic>
	<monogr>
		<title level="m">OMG Initial Submission. Available on request</title>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">An Overview of Feature-Oriented Software Development</title>
		<author>
			<persName><forename type="first">S</forename><surname>Apel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kästner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Object Technology</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="49" to="84" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Type safety for feature-oriented product lines</title>
		<author>
			<persName><forename type="first">S</forename><surname>Apel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kästner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Größlinger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Lengauer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Automated Software Engineering</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="251" to="300" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">FEATUREHOUSE: Language-independent, automated software composition</title>
		<author>
			<persName><forename type="first">S</forename><surname>Apel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kästner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Lengauer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 31st International Conference on Software Engineering</title>
		<meeting>of the 31st International Conference on Software Engineering</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="221" to="231" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A Unified Conceptual Foundation for Feature Modelling</title>
		<author>
			<persName><forename type="first">T</forename><surname>Asikainen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Mannisto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Soininen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 10th International Software Product Line Conference</title>
		<meeting>of the 10th International Software Product Line Conference</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="31" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Component-Based Product Line Engineering with UML</title>
		<author>
			<persName><forename type="first">C</forename><surname>Atkinson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Bayer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Bunse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Kamsties</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Laitenberger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Laqua</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Muthig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Paech</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Wüst</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Zettel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Feature and meta-models in Clafer: Mixed, specialized, and coupled</title>
		<author>
			<persName><forename type="first">K</forename></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Czarnecki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">W</forename><surname>Ąsowski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 3rd International Conference on Software Language Engineering</title>
		<meeting>of the 3rd International Conference on Software Language Engineering</meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="102" to="122" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Feature-Oriented Programming and the AHEAD Tool Suite</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Batory</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 26th International Conference on Software Engineering</title>
		<meeting>of the 26th International Conference on Software Engineering</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="702" to="703" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Feature Models, Grammars, and Propositional Formulas</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Batory</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 9th International Software Product Line Conference</title>
		<meeting>of the 9th International Software Product Line Conference</meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="7" to="20" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">GENESIS: An Extensible Database Management System</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Batory</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Barnett</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">F</forename><surname>Garza</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">P</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Tsukuda</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">C</forename><surname>Twichell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">E</forename><surname>Wise</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE TSE</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="1711" to="1730" />
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Automated analysis of feature models: challenges ahead</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Batory</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Benavides</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">R</forename><surname>Cortés</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="45" to="47" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Automated analysis of feature models 20 years later: A literature review</title>
		<author>
			<persName><forename type="first">D</forename><surname>Benavides</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Segura</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">R</forename><surname>Cortés</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information Systems</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="615" to="636" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Variability Modeling in the Real: A Perspective from the Operating Systems Domain</title>
		<author>
			<persName><forename type="first">T</forename><surname>Berger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>She</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Lotufo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Wasowski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Czarnecki</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 25th IEEE/ACM Conference on Automated Software Engineering</title>
		<meeting>of the 25th IEEE/ACM Conference on Automated Software Engineering</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="73" to="82" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Design Recovery for Maintenance and Reuse</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">J</forename><surname>Biggerstaff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="36" to="49" />
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Why is it not Sufficient to Model Requirements Variability with Feature Models?</title>
		<author>
			<persName><forename type="first">S</forename><surname>Bühne</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Lauenroth</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Pohl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Workshop on Automotive Requirements Engineering</title>
		<meeting>of the Workshop on Automotive Requirements Engineering<address><addrLine>Nagoya, Japan</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="5" to="12" />
		</imprint>
		<respStmt>
			<orgName>Nanzan University</orgName>
		</respStmt>
	</monogr>
	<note>AURE04</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">An Approach to Constructing Feature Models Based on Requirements Clustering</title>
		<author>
			<persName><forename type="first">K</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Mei</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 13th IEEE International Conference on Requirements Engineering</title>
		<meeting>of the 13th IEEE International Conference on Requirements Engineering</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="31" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A systematic review of evaluation of variability management approaches in software product lines</title>
		<author>
			<persName><forename type="first">L</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Babar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information and Software Technology</title>
		<imprint>
			<biblScope unit="volume">53</biblScope>
			<biblScope unit="page" from="344" to="362" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A Text-based Approach to Feature Modelling: Syntax and Semantics of TVL</title>
		<author>
			<persName><forename type="first">A</forename><surname>Classen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Boucher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Heymans</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science of Computer Programming</title>
		<imprint>
			<biblScope unit="volume">76</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="1130" to="1143" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">What&apos;s in a Feature: A Requirements Engineering Perspective</title>
		<author>
			<persName><forename type="first">A</forename><surname>Classen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Heymans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P.-Y</forename><surname>Schobbens</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 11th International Conference on Fundamental Approaches to Software Engineering</title>
		<meeting>of the 11th International Conference on Fundamental Approaches to Software Engineering</meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008">200. 2008</date>
			<biblScope unit="volume">4961</biblScope>
			<biblScope unit="page" from="16" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Model checking lots of systems: efficient verification of temporal properties in software product lines</title>
		<author>
			<persName><forename type="first">A</forename><surname>Classen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Heymans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P.-Y</forename><surname>Schobbens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Legay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J.-F</forename><surname>Raskin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 32nd ACM/IEEE International Conference on Software Engineering</title>
		<meeting>of the 32nd ACM/IEEE International Conference on Software Engineering</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="335" to="344" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Mapping Features to Models: A Template Approach Based on Superimposed Variants</title>
		<author>
			<persName><forename type="first">K</forename><surname>Czarnecki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Antkiewicz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 4th International Conference on Generative Programming and Component Engineering</title>
		<meeting>of the 4th International Conference on Generative Programming and Component Engineering</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="422" to="437" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Generative Programming for Embedded Software: An Industrial Experience Report</title>
		<author>
			<persName><forename type="first">K</forename><surname>Czarnecki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Bednasch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Unger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><forename type="middle">W</forename><surname>Eisenecker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM SIGPLAN/SIGSOFT Conference on Generative Programming and Component Engineering</title>
		<meeting>of the ACM SIGPLAN/SIGSOFT Conference on Generative Programming and Component Engineering</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="156" to="172" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Generative Programming: Methods, Techniques, and Applications</title>
		<author>
			<persName><forename type="first">K</forename><surname>Czarnecki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><forename type="middle">W</forename><surname>Eisenecker</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Feature-based survey of model transformation approaches</title>
		<author>
			<persName><forename type="first">K</forename><surname>Czarnecki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Helsen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM Systems Journal</title>
		<imprint>
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="621" to="646" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Formalizing cardinality-based feature models and their specialization</title>
		<author>
			<persName><forename type="first">K</forename><surname>Czarnecki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Helsen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Eisenecker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software Process: Improvement and Practice</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="7" to="29" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Staged configuration through specialization and multilevel configuration of feature models</title>
		<author>
			<persName><forename type="first">K</forename><surname>Czarnecki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Helsen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Eisenecker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software Process: Improvement and Practice</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="143" to="169" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Verifying feature-based model templates against well-formedness OCL constraints</title>
		<author>
			<persName><forename type="first">K</forename><surname>Czarnecki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Pietroszek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 5th International Conference on Generative Programming and Component Engineering</title>
		<meeting>of the 5th International Conference on Generative Programming and Component Engineering</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="211" to="220" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">The DOPLER Meta-Tool for Decision-Oriented Variability Modeling: A Multiple Case Study</title>
		<author>
			<persName><forename type="first">D</forename><surname>Dhungana</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Grünbacher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Rabiser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Automated Software Engineering</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="77" to="114" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Structuring the Modeling Space and Supporting Evolution in Software Product Line Engineering</title>
		<author>
			<persName><forename type="first">D</forename><surname>Dhungana</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Grünbacher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Rabiser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Neumayer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systems and Software</title>
		<imprint>
			<biblScope unit="volume">83</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="1108" to="1122" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Capturing timeline variability with transparent configuration environments</title>
		<author>
			<persName><forename type="first">E</forename><surname>Dolstra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Florijn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>De Jonge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Visser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Workshop on Software Variability Management. ICSE Workshop</title>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m">MASTER: Model-driven Architecture inSTrumentation, Enhancement and Refinement</title>
		<imprint>
			<publisher>European Software Institute Spain and IKV++ Technologies AG Germany</publisher>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Designing Software Product Lines with UML</title>
		<author>
			<persName><forename type="first">H</forename><surname>Gomaa</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005">2005</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Aspect-Oriented Model-Driven Software Product Line Engineering</title>
		<author>
			<persName><forename type="first">I</forename><surname>Groher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Völter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Transactions on Aspect-Oriented Software Development</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="111" to="152" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Goal and Variability Modeling for Service-oriented System: Integrating i* with Decision Models</title>
		<author>
			<persName><forename type="first">P</forename><surname>Grünbacher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Dhungana</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Seyff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Quintus</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Clotet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Franch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Lopez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Marco</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Workshop on Software and Services Variability Management</title>
		<meeting>of the Workshop on Software and Services Variability Management</meeting>
		<imprint>
			<publisher>Helsinki Unversity of Technology</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="99" to="104" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Adding Standardized Variability to Domain Specific Languages</title>
		<author>
			<persName><forename type="first">O</forename><surname>Haugen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Moller-Pedersen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Oldevik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Olsen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Svendsen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 12th International Software Product Line Conference</title>
		<meeting>of the 12th International Software Product Line Conference<address><addrLine>Limerick, Ireland</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="139" to="148" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">FeatureMapper: mapping features to models</title>
		<author>
			<persName><forename type="first">F</forename><surname>Heidenreich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kopcsek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Wende</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 30th International Conference on Software Engineering, ICSE Companion</title>
		<meeting>of the 30th International Conference on Software Engineering, ICSE Companion</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="943" to="944" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Evaluating formal properties of feature diagram languages</title>
		<author>
			<persName><forename type="first">P</forename><surname>Heymans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P.-Y</forename><surname>Schobbens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J.-C</forename><surname>Trigaux</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Bontemps</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Matulevicius</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Classen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IET Software</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="281" to="302" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Formal modelling of feature configuration workflows</title>
		<author>
			<persName><forename type="first">A</forename><surname>Hubaux</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Classen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Heymans</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 13th International Software Product Line Conference</title>
		<meeting>of the 13th International Software Product Line Conference</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="221" to="230" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">A Preliminary Review on the Application of Feature Diagrams in Practice</title>
		<author>
			<persName><forename type="first">A</forename><surname>Hubaux</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Classen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mendonça</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Heymans</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 4th International Workshop on Variability Modelling of Software-Intensive Systems</title>
		<meeting>of the 4th International Workshop on Variability Modelling of Software-Intensive Systems</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="53" to="59" />
		</imprint>
		<respStmt>
			<orgName>University Duisburg-Essen</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title level="m" type="main">Separation of concerns in feature diagram languages: A systematic survey</title>
		<author>
			<persName><forename type="first">A</forename><surname>Hubaux</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">T</forename><surname>Tun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Heymans</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
	<note>Under review</note>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Formal Approach to Integrating Feature and Architecture Models</title>
		<author>
			<persName><forename type="first">M</forename><surname>Janota</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Botterweck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 11th International Conference on Fundamental Approaches to Software Engineering</title>
		<meeting>of the 11th International Conference on Fundamental Approaches to Software Engineering</meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="31" to="45" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">Feature-oriented domain analysis (FODA) feasibility study</title>
		<author>
			<persName><forename type="first">K</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hess</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Nowak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Peterson</surname></persName>
		</author>
		<idno>CMU/SEI-90TR-21</idno>
		<imprint>
			<date type="published" when="1990">1990</date>
		</imprint>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Feature-Oriented Product Line Engineering</title>
		<author>
			<persName><forename type="first">K</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Donohoe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="58" to="65" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">CIDE: Decomposing Legacy Applications into Features</title>
		<author>
			<persName><forename type="first">C</forename><surname>Kästner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 11th International Software Product Line Conference</title>
		<meeting>of the 11th International Software Product Line Conference</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="149" to="150" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Wide-Spectrum Support for Software Reusability</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D</forename><surname>Lubars</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Workshop on Software Reusability and Maintainability</title>
		<meeting>of the Workshop on Software Reusability and Maintainability</meeting>
		<imprint>
			<date type="published" when="1987">1987</date>
		</imprint>
		<respStmt>
			<orgName>National Institute of Software Quality and Productivity</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Decision Model and Flexible Component Definition Based on XML Technology</title>
		<author>
			<persName><forename type="first">J</forename><surname>Mansell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Sellier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 5th International Workshop on Software Product Family Engineering</title>
		<meeting>of the 5th International Workshop on Software Product Family Engineering</meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="466" to="472" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Semantically Configurable Consistency Analysis for Class and Object Diagrams</title>
		<author>
			<persName><forename type="first">S</forename><surname>Maoz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">O</forename><surname>Ringert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Rumpe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 14th International Conference on Model Driven Engineering Languages and Systems</title>
		<meeting>of the 14th International Conference on Model Driven Engineering Languages and Systems</meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="153" to="167" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Decision-making coordination and efficient reasoning techniques for feature-based configuration</title>
		<author>
			<persName><forename type="first">M</forename><surname>Mendonca</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Cowan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science of Computer Programming</title>
		<imprint>
			<biblScope unit="volume">75</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="311" to="332" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<monogr>
		<title level="m" type="main">The KAPTUR Environment: An Operations Concept</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Moore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">C</forename><surname>Bailin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989">1989</date>
		</imprint>
		<respStmt>
			<orgName>CTA Incorporated</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">The Draco approach to constructing software from reusable components</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Neighbors</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE TSE</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="564" to="574" />
			<date type="published" when="1984">1984</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<monogr>
		<author>
			<persName><forename type="first">K</forename><surname>Pohl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Böckle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Van Der Linden</surname></persName>
		</author>
		<title level="m">Software Product Line Engineering: Foundations, Principles, and Techniques</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">Supporting Product Derivation by Adapting and Augmenting Variability Models</title>
		<author>
			<persName><forename type="first">R</forename><surname>Rabiser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Grünbacher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Dhungana</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 11th International Software Product Line Conference</title>
		<meeting>of the 11th International Software Product Line Conference</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="141" to="150" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Three-level Customization of Software Products Using a Product Line Approach</title>
		<author>
			<persName><forename type="first">R</forename><surname>Rabiser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Wolfinger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Grünbacher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 42nd Annual Hawaii International Conference on System Sciences</title>
		<meeting>of the 42nd Annual Hawaii International Conference on System Sciences</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<analytic>
		<title level="a" type="main">Managing Highly Complex Product Families with Multi-Level Feature Trees</title>
		<author>
			<persName><forename type="first">M.-O</forename><surname>Reiser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Weber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 14th IEEE International Conference on Requirements Engineering</title>
		<meeting>of the 14th IEEE International Conference on Requirements Engineering<address><addrLine>Minneapolis, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="149" to="158" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">Extending Feature Diagrams with UML Multiplicities</title>
		<author>
			<persName><forename type="first">M</forename><surname>Riebisch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Böllert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Streitferdt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Philippow</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 6th World Conference on Integrated Design &amp; Process Technology</title>
		<meeting>of the 6th World Conference on Integrated Design &amp; ess Technology</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">Challenges in Software Product Line Composition</title>
		<author>
			<persName><forename type="first">H</forename><surname>Schirmeier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Spinczyk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 42nd Annual Hawaii International Conference on System Sciences</title>
		<meeting>of the 42nd Annual Hawaii International Conference on System Sciences</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">From Static to Dynamic Software Product Lines</title>
		<author>
			<persName><forename type="first">K</forename><surname>Schmid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Eichelberger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Workshop on Dynamic Software Product Lines (DSPL) at SPLC 2008</title>
		<meeting>of the Workshop on Dynamic Software Product Lines (DSPL) at SPLC 2008</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="33" to="38" />
		</imprint>
	</monogr>
	<note type="report_type">Lero Tech Report</note>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">Model-Based Implementation of Meta-Variability Constructs: A Case Study using Aspects</title>
		<author>
			<persName><forename type="first">K</forename><surname>Schmid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Eichelberger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Second International Workshop on Variability Modelling of Software-Intensive Systems, number 22 in ICB-Research Report</title>
		<meeting>of the Second International Workshop on Variability Modelling of Software-Intensive Systems, number 22 in ICB-Research Report</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="63" to="71" />
		</imprint>
		<respStmt>
			<orgName>University Duisburg-Essen</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<analytic>
		<title level="a" type="main">A Customizable Approach to Full-Life Cycle Variability Management</title>
		<author>
			<persName><forename type="first">K</forename><surname>Schmid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>John</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science of Computer Programming</title>
		<imprint>
			<biblScope unit="volume">53</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="259" to="284" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<analytic>
		<title level="a" type="main">A Comparison of Decision Modeling Approaches in Product Lines</title>
		<author>
			<persName><forename type="first">K</forename><surname>Schmid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Rabiser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Grünbacher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Fifth International Workshop on Variability Modelling of Software-Intensive Systems</title>
		<meeting>of the Fifth International Workshop on Variability Modelling of Software-Intensive Systems</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="119" to="126" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title level="a" type="main">Feature Diagrams: A Survey and a Formal Semantics</title>
		<author>
			<persName><forename type="first">P.-Y</forename><surname>Schobbens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Heymans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J.-C</forename><surname>Trigaux</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Bontemps</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 14th IEEE International Conference on Requirements Engineering</title>
		<meeting>of the 14th IEEE International Conference on Requirements Engineering<address><addrLine>Minneapolis, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="139" to="148" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><surname>Sincero</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Schröder-Preikschat</surname></persName>
		</author>
		<title level="m">Proc. of the 1st Workshop on Analyses of Software Product Lines (ASPL&apos;08) at SPLC 2008</title>
		<meeting>of the 1st Workshop on Analyses of Software Product Lines (ASPL&apos;08) at SPLC 2008<address><addrLine>Limerick, Ireland</addrLine></address></meeting>
		<imprint>
			<publisher>Lero</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="257" to="260" />
		</imprint>
	</monogr>
	<note>The Linux Kernel Configurator as a Feature Modeling Tool</note>
</biblStruct>

<biblStruct xml:id="b63">
	<analytic>
		<title level="a" type="main">Classifying variability modeling techniques</title>
		<author>
			<persName><forename type="first">M</forename><surname>Sinnema</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Deelstra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information and Software Technology</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="717" to="739" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<monogr>
		<idno>02.00.03</idno>
		<title level="m">Reuse-Driven Software Processes Guidebook, Version</title>
		<imprint>
			<publisher>Software Productivity Consortium Services Corporation</publisher>
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b65">
	<analytic>
		<title level="a" type="main">Supporting Stepwise, Incremental Product Derivation in Product Line Requirements Engineering</title>
		<author>
			<persName><forename type="first">R</forename><surname>Stoiber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Glinz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 4th International Workshop on Variability Modelling of Software-Intensive Systems, ICB-Research Report</title>
		<meeting>of the 4th International Workshop on Variability Modelling of Software-Intensive Systems, ICB-Research Report</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="77" to="84" />
		</imprint>
		<respStmt>
			<orgName>University Duisburg-Essen</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b66">
	<analytic>
		<title level="a" type="main">Feature consistency in compile-time-configurable system software: facing the Linux 10000 feature problem</title>
		<author>
			<persName><forename type="first">R</forename><surname>Tartler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Lohmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Sincero</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Schröder-Preikschat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EuroSys&apos;11</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="47" to="60" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<analytic>
		<title level="a" type="main">Design-Time Product Line Architectures for Any-Time Variability</title>
		<author>
			<persName><forename type="first">A</forename><surname>Van Der Hoek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science of Computer Programming</title>
		<imprint>
			<biblScope unit="volume">53</biblScope>
			<biblScope unit="issue">30</biblScope>
			<biblScope unit="page" from="285" to="304" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b68">
	<monogr>
		<title level="m" type="main">The eCos Component Writer&apos;s Guide. Seen Mar. 2010 at ecos</title>
		<author>
			<persName><forename type="first">B</forename><surname>Veer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Dallaway</surname></persName>
		</author>
		<ptr target=".sourceware.org/ecos/docs-latest/cdl-guide/cdl-guide.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<analytic>
		<title level="a" type="main">Software Product-Line Eng</title>
		<author>
			<persName><forename type="first">D</forename><surname>Weiss</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Lai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">A Family-Based Software Development Process</title>
		<imprint>
			<publisher>Addison-Wesley</publisher>
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b70">
	<analytic>
		<title level="a" type="main">Decision-Model-Based Code Generation for SPLE</title>
		<author>
			<persName><forename type="first">D</forename><surname>Weiss</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Slye</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Sun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 12th International Software Product Line Conference</title>
		<meeting>of the 12th International Software Product Line Conference</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="129" to="138" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b71">
	<monogr>
		<title level="m" type="main">Zippel and contributors. kconfig-language.txt. seen in the kernel tree at kernel.org</title>
		<author>
			<persName><forename type="first">R</forename></persName>
		</author>
		<idno>2011-05/01</idno>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
