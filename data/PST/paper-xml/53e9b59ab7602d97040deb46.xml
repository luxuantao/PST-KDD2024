<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main"></title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2022-12-25T12:45+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Indexed Forwarding Pipeline Actions Forwarding Index Prediction Accuracy</p><p>•99.5%+ accuracy (better than branch prediction), why? First Things First: Baseline Performance </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>•</head><label></label><figDesc>best designer on the store queue • Longer access latency than D$  nasty scheduler, replays… • Put your best designer on the scheduler • Proposed: reduce associative search • Reduce bandwidth • Bloom-filtered SQ [Sethumadhavan+' 03] • Reduce number of stores searched • Pipelined/chained SQ [Park+' 03] • Hierarchical/filtered SQ [Srinivasan+' 04, Ghandi+' 05, Torres+' 05] • Decomposed SQ [Roth' 05; Baugh+' 04] Replace associative search with indexed access == • Keep address match  allow false positives  boost accuracy SQ index predictor • Predict one SQ index per load • Predictor (e.g., Store Sets) is not on load critical path addr (RAM) • Replace address CAM + age logic with address RAM access requires verification • In-order load re-execution prior to commit [Cain+'04] • Store Vulnerability Window (SVW) re-execution filter [Roth'05] + On average 3% of loads re-execute  almost free + Works unmodified for speculative indexed SQ (address check)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>•••</head><label></label><figDesc>wait for load address, SSN fwd to execute • Unify: SSN fwd used for both forwarding and scheduling Maps load PC to small set of likely-to-forward store PCs • (Load) PC-indexed, set-associative, entry={tag, (2) store PCs} Store Alias Table (SAT) • Maps store PC to its most recent store instance (SSN) • (Store) PC-indexed, direct-mapped, entry={SSN} MAX • SSN fwd : largest SSN (youngest in-flight store) Not a " predictor" , analogous to RAT (register alias table) • Forwarding Store Predictor (FSP) • Train on every load at commit • Address-indexed tables track PCs, SSNs of last committed stores if (SSN fwd == committed_store_SSN[load.addr]way superscalar, 19 stage pipe, 512-entry ROB • Benchmarks: SPEC2000, Mediabench (only show 9 benchmarks) •What we care about • Forwarding prediction accuracy • Performance vs. associative SQ •Important Parameters • 64KB D$: 3 cycles • 64-entry SQ: associative  3 &amp; 5 cycles, indexed  3 cycles • CACTI 3.2: 90nm, 1.1V, 3GHz • FSP: 4K-entry, 2-way • Bigger than Store Sets: all dependences, not just violations • Probably OK: PC-indexed, in-order front-end, only 8KB [ 20 ]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>associative SQ and perfect scheduling  + (slightly modified) Store Sets scheduling • Store sets is basically a " perfect"scheduler  + 5 cycle associative SQ (forwarding triggers replays) • Latency/replays cause extra 1-10% slowdown to low forwarding prediction accuracy • Convert flush (really bad) to scheduling delay (less bad) • Delay load until uncertain stores commit, get value from cache •Decode/rename: predict … + delay store (SSN delay ) •Issue: wait for … + SSN delay to</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>SSN commit : youngest committed store • SSN dispatch : youngest dispatched store (SSN commit + SQ.NUM) • From SSN to store queue index? • If st.SSN &gt; SSN commit</head><label></label><figDesc></figDesc><table><row><cell>• Required for SVW and more convenient than store queue indices</cell></row><row><cell>+ Can name committed stores</cell></row><row><cell>+ Fewer wrap-around issues</cell></row><row><cell>• Monotonically increasing</cell></row><row><cell>•</cell></row></table><note>, st.INDEX = (st.SSN % SQ.SIZE)[ 9 ]    </note></figure>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Delay Index Predictor</head><p>• Example: not-most-recent forwarding (for J=5)</p><p>Indexed Forwarding (with Delay) Performance The End</p><p>•Thank you!</p></div>			</div>
			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
