<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Process diagnostics using trace alignment: Opportunities, issues, and challenges</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2011-09-07">7 September 2011</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">R</forename><forename type="middle">P</forename><surname>Jagadeesh</surname></persName>
						</author>
						<author role="corresp">
							<persName><forename type="first">Chandra</forename><surname>Bose</surname></persName>
							<email>jcbose@gmail.com</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Mathematics and Computer Science</orgName>
								<orgName type="institution">University of Technology</orgName>
								<address>
									<settlement>Eindhoven</settlement>
									<country key="NL">The Netherlands</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="institution">Philips Healthcare</orgName>
								<address>
									<addrLine>Veenpluis 5-6</addrLine>
									<settlement>Best</settlement>
									<country key="NL">The Netherlands</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Wil</forename><forename type="middle">M P</forename><surname>Van Der Aalst</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Mathematics and Computer Science</orgName>
								<orgName type="institution">University of Technology</orgName>
								<address>
									<settlement>Eindhoven</settlement>
									<country key="NL">The Netherlands</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">Department of Mathematics and Computer Science</orgName>
								<orgName type="institution">University of Technology</orgName>
								<address>
									<settlement>Eindhoven</settlement>
									<country key="NL">The Netherlands</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Process diagnostics using trace alignment: Opportunities, issues, and challenges</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2011-09-07">7 September 2011</date>
						</imprint>
					</monogr>
					<idno type="MD5">98C930BA958978172993661CF3F218EA</idno>
					<idno type="DOI">10.1016/j.is.2011.08.003</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T17:05+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>Diagnostics Conformance Alignment Execution patterns Process mining</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Business processes leave trails in a variety of data sources (e.g., audit trails, databases, and transaction logs). Hence, every process instance can be described by a trace, i.e., a sequence of events. Process mining techniques are able to extract knowledge from such traces and provide a welcome extension to the repertoire of business process analysis techniques. Recently, process mining techniques have been adopted in various commercial BPM systems (e.g., BPM9one, Futura Reflect, ARIS PPM, Fujitsu Interstage, Businesscape, Iontas PDF, and QPR PA). Unfortunately, traditional process discovery algorithms have problems dealing with less structured processes. The resulting models are difficult to comprehend or even misleading. Therefore, we propose a new approach based on trace alignment. The goal is to align traces in such a way that event logs can be explored easily. Trace alignment can be used to explore the process in the early stages of analysis and to answer specific questions in later stages of analysis. Hence, it complements existing process mining techniques focusing on discovery and conformance checking. The proposed techniques have been implemented as plugins in the ProM framework. We report the results of trace alignment on one synthetic and two real-life event logs, and show that trace alignment has significant promise in process diagnostic efforts.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Today's information systems are recording an abundance of event logs. Events may be scattered over various data sources, e.g., the database of a hospital containing information about patients, the audit trails of a BPM (business process management) system, the transaction log of an airline's web service, and the job lists of a printer. By ordering events belonging to each process instance, we obtain a collection of traces also referred to as an event log. Process mining techniques can extract non-trivial knowledge and interesting insights from these event logs and exploit these for further analysis <ref type="bibr" target="#b0">[1]</ref>. For example, it is possible to discover a process model from an event log. Process mining is not limited to control-flow and may also be used to discover other perspectives, e.g., the social network of the people working on the process or decision trees explaining the decision points in the process. Process mining is not limited to discovery and also includes conformance checking (identifying points where process instances deviate from expected and/or normative behavior) and model enhancement (e.g., enriching models based on event logs).</p><p>The lion's share of process mining research has been devoted to control-flow discovery. In this paper, we focus on complementary techniques to diagnose processes that are based on the alignment of traces. This work is inspired by practical experiences using classical control-flow discovery techniques. We (our research group) have applied process mining in over 100 organizations and our experiences show that processes tend to be less structured than expected. Moreover, event logs tend to be far from complete, i.e., just a fraction of the possible behavior indeed occurs. Therefore, it may be too ambitious to construct a process model that also says something about unseen cases, i.e., future process instances that will leave traces that were not seen before. If processes are less structured and event logs are incomplete, then it is better to carefully inspect the event log by grouping and aligning the traces found in the event log. First, we group similar traces in clusters <ref type="bibr" target="#b1">[2]</ref>. Second, we visualize these clusters by aligning the traces. By aligning traces we can see the common and frequent behavior, and distinguish this from the exceptional behavior.</p><p>Our approach is inspired by biological sequence alignment <ref type="bibr" target="#b2">[3]</ref>. Sequence alignment is an essential tool in bioinformatics that assists in unraveling the secondary and tertiary structures of proteins and molecules, their evolution and functions, and in inferring the taxonomic, phylogenetic or cladistic relationships between organisms, diagnoses of genetic diseases, etc. <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b4">5]</ref>. Process mining also deals with sequences, i.e., traces of events stored in event logs. Multiple sequence alignment has been a subject of extensive research in computational biology for over three decades. There are still many open problems, e.g., dealing with ever increasing size and complexity of the data sets, misalignments and alignment errors <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b6">7]</ref>, obtaining accurate alignments of non-coding and non-transcribed sequences <ref type="bibr" target="#b7">[8]</ref>, integrating disparate sources of knowledge when performing alignments (knowledge-based multiple sequence alignment) <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b9">10]</ref>, etc. Moreover, there are various new challenges when adopting biological sequence alignment to trace alignment in the context of business processes, e.g., traces in an event log in process mining need not be from a coherent set of cases and can be of different lengths, scoring matrices of substitution and insertion/deletion of activities need to be defined/derived, the size of the alphabet (number of activities) can be large of the order of a few tens or hundreds, etc. The topic of trace alignment has not been explored before. We will show that it can be used to answer a variety of questions and that it is a welcome addition to the repertoire of process mining techniques.</p><p>To illustrate the importance of trace alignment, consider the dotted chart <ref type="bibr" target="#b10">[11]</ref> in Fig. <ref type="figure">1</ref>. Every line corresponds to a process instance and every dot corresponds to an event. The color of the event indicates the activity that was executed. The horizontal dimension describes time. Note that the dots are not aligned. Hence, it is difficult to see common patterns among different cases. Events are positioned based on their timestamps rather than the activity that was executed and similarities to events in other instances. Fig. <ref type="figure" target="#fig_1">2</ref> shows the effect of trace alignment. Both dimensions are used in a similar fashion as before, i.e., every row corresponds to a process instance and time increases from left to right. However, now the horizonal position is based on logical time rather than real timestamps. When two rows have the same activity name in the same column, then the corresponding two events are very similar and are therefore aligned. Note that the same activity can appear in multiple columns. By reading a row from left to right, we can see the sequence of activities (i.e., the trace) that was executed for a process instance. Process instances having the same trace can be grouped into one row to simplify the diagram. Clearly, Fig. <ref type="figure" target="#fig_1">2</ref> is much more informative than Fig. <ref type="figure">1</ref> if one is interested in commonalities and differences among traces.</p><p>The challenge is to find an alignment that is as simple and informative as possible. For example, the number of columns and gaps should be minimized while having as much consensus as possible per column. Obtaining such high quality alignments turns out to be a challenging problem.</p><p>The remainder of this paper is organized as follows. In Section 2, we introduce the basic notations used in the paper and list the questions we would like to answer. Section 3 introduces the concept of trace alignment and discusses the techniques for finding alignments. In Section 4, we propose a framework for finding alignments over a set of traces. In Section 5, we present techniques for Fig. <ref type="figure">1</ref>. Dotted chart showing all events in one glance. Consider a dot at position (x,y) having a color c. This dot refers to an event for the process instance corresponding to y (i.e., a horizonal line) that occurred at time x (i.e., time increases from left to right). The color describes a property of the event; in this case the activity that was executed. (For interpretation of the references to color in this figure legend, the reader is referred to the web version of this article.) refining alignments to improve alignment quality. In Section 6, we present our implementation using the process mining framework ProM.<ref type="foot" target="#foot_1">1</ref> Section 7 discusses three case studies that demonstrate the applicability of our approach and the ability to answer a variety of questions. We discuss the computational complexity aspects of the proposed approach and present some quantitative results in Section 8. In Section 9, we provide an outlook on some of the opportunities and problems related to trace alignment. We discuss related work in Section 10. Finally, Section 11 concludes the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Event logs, questions, and answers</head><p>Before explaining our approach to align traces, we introduce some basic concepts and present six diagnostic questions we would like to answer using our new analysis approach.</p><p>Process mining is impossible without proper event logs. In some applications it may be challenging to extract such logs from a variety of data sources, e.g., databases, flat files, message logs, transaction logs, ERP systems, and document management systems. In other applications, this is straightforward, e.g., when using a BPM system.</p><p>The starting point for process mining is the concept of an event. An event refers to a process instance, sometimes referred to as a case. Each process instance is described by a sequence of events. An event e may have different properties, e.g., a timestamp (e occurred on February 15th 2011 at 11:29:31 UTC), resource information (e was executed by Maria), activity (e corresponds to a credit check), transaction type (e is a start event, i.e., the start of the credit check by Maria), and various data elements (e is done for customer 991133 who would like to borrow 5000 euro). All of these properties are optional. The only requirement is that events are ordered (i.e., no explicit timestamp is needed) and that each event belongs to a particular class. For analysis, we need a function that maps any event e into its class e. In this paper, we assume that each event is classified based on its activity. Hence, for our earlier example e ¼ credit check.</p><p>Consider a process instance for which n events have been recorded: e 1 ,e 2 , . . . ,e n . This process instance has a trace e 1 ,e 2 , . . . ,e n associated to it. If we use activity names as a classifier, the trace corresponds to a sequence of activities. However, if we would classify events based on resource information, a trace could correspond to a sequence of person names. In the remainder, we will assume that a trace is a sequence of activities. However, we could also align traces based on the people that worked on them, etc.</p><p>Using the above assumption, we can define an event log as a multi-set of traces. Definition 1. Let S denote the set of activities. S þ is the set of all non-empty finite sequences of activities from S. Any T 2 S þ is a possible trace. An event log L is a multi-set of traces.</p><p>For example, S ¼ fa,b,cg and L ¼ fabc,abc,abc, aabbcc,aabbcc,acg. Event log L describes the traces of six process instances. Note that three instances have the same trace abc and two instances have trace aabbcc. Because different process instances can have the same trace, a log is multi-set of traces rather than a set.</p><p>We introduce some standard operations for traces. Given an event log, we would like to answer a variety of diagnostic questions:</p><p>1. What is the most common (likely) process behavior that is executed? Given an event log (i.e., multi-set of traces), it would be interesting to know which process  Analyzing logs at the granularity of an individual event might not always be result yielding as one often loses the context information during such analysis. An analyst would be interested in knowing whether there are any interesting execution (behavioral) patterns in the log. The absence or presence of such patterns may indicate the cause of an anomaly (e.g., fraudulent insurance claim) or a security violation or a malfunction. 4. What are the contexts in which an activity or a set of activities is executed in the event log? Dependencies exist between activities in a process and activity executions are expected to happen within certain contexts. There can be short-range and long-range dependencies between activities. Long-range dependencies are difficult to discover. An analyst would be interested in understanding the contexts of execution of activities and/or activity sequences. 5. What are the process instances that share/capture a desired behavior either exactly or approximately? Often in diagnostics, an analyst would be interested in finding process instances that share/comply to a particular desired behavior; the desired behavior can be expressed as a manifestation of some pattern of activity sequences or some complex form (combination) of these patterns. Though temporal logic approaches can assist in addressing this problem to a certain extent by discovering process instances that capture the desired behavior exactly, one might also be interested in discovering process instances that share the desired behavior approximately. 6. Are there particular patterns (e.g., milestones, concurrent activities, etc.) in the process? Workflow patterns <ref type="bibr" target="#b11">[12]</ref> refer to recurring forms/structures addressing business requirements. For example, milestones indicate specific execution points in the process model and provide a mechanism for supporting the conditional execution of a task or sub-process. An analyst would be interested in discovering the presence of, and in analyzing milestone patterns in the process event log. Similarly, discovery of process models with concurrency is one of the challenging problems in process mining. The presence of concurrent activities creates different permutations of activities in the event log that adds to the complexity of discovery algorithms. Detection of the presence of concurrent activities might also help in pre-processing the logs.</p><p>In the remainder we will show that trace alignment significantly contributes to answering these questions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Trace alignment</head><p>In this section, we formally define what trace alignment is and discuss techniques for finding optimal alignments. Definition 3. Trace alignment over a set of traces T ¼ fT 1 ,T 2 , . . . ,T n g is defined as a mapping of the set of traces in T to another set of traces T ¼ fT 1 ,T 2 , . . . ,T n g where each T i 2 ðS [ fÀgÞ þ for 1 ri rn and there is an</p><formula xml:id="formula_0">m 2 N such that 9T 1 9 ¼ 9T 2 9 ¼ Á Á Á ¼ 9T n 9 ¼ m,</formula><p>T i is equal to T i after removing all gap symbols ' À ', there is no k 2 f1, . . . ,mg such that 8 1 r i r n , T i ðkÞ ¼ À. m in the definition above is the length of the alignment. An alignment over a set of traces can be represented by a rectangular matrix A ¼ fa ij g ð1 ri rn,1r j r mÞ over S 0 ¼ S [ fÀg where 'À' denotes a gap. The third condition in the definition above implies that no column in A contains only gaps (À). It is imperative to note that there can be many possible alignments for a given set of traces and that the length of the alignment, m, satisfies the relation l max r m rl sum where l max is the maximum length of the traces in T and l sum is the sum of lengths of all the traces in T.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Pairwise trace alignment</head><p>Before we get into the details of aligning a set of traces, let us first consider a special case of trace alignment, where the number of traces to align is 2. Aligning a pair of traces is referred to as pair-wise trace alignment. Let us consider the example of aligning the two traces T 1 ¼abcac and T 2 ¼acacad. Fig. <ref type="figure" target="#fig_5">3</ref> depicts three of the many variants of aligning the two traces.</p><p>Alignment between a pair of traces, T 1 and T 2 can be considered as a transformation of the trace T 1 to T 2 or vice versa through a set of editing operations applied to one of the traces iteratively. The traces are said to be aligned after the transformation, and can be represented as a rectangular matrix as mentioned earlier. Assuming that T 1 is transformed into T 2 , the following edit operations are defined for any column j in the alignment: It is important to note that insertion and deletion operations are complementary in that an insertion in one trace can be considered as a deletion in another trace. Henceforth, we refer to insertion and deletion operations as indel operation. indels should be sensitive to the context in which the operations are performed <ref type="bibr" target="#b1">[2]</ref>. For example, in a repair process, it is ok to have an activity Analyze Defect after Register but not after Start Repair (the defect should first be analyzed before performing the repair). Bose and van der Aalst <ref type="bibr" target="#b1">[2]</ref> have considered two notions of context for indels viz., indelRightGi-venLeft and indelLeftGivenRight which indicates the insertion of an activity to the immediate right of another activity or to the immediate left of another activity respectively. One can consider both the left and right contexts as well as larger subsequences of activities rather than an individual activity in defining contexts. However, this increases the computational complexity of finding alignments. We consider indelRightGivenLeft as the notion of indels for trace alignment.</p><p>In order to avoid edit operations that do not make sense in a certain context, a score or cost function needs to be defined for the substitution or indel operations. The that the left activity is a for all a,b 2 S. I ðÀ,aÞ ¼ I ða,ÀÞ ¼ I ðÀ,ÀÞ ¼ 0 for all a 2 S. Let T 1 and T 2 be the aligned traces of T 1 and T 2 and let m be the length of the alignment. It could be the case that the first activity in T 1 or T 2 had to be inserted/deleted. The left activity for this case does not exist; so, we define T 1 ð0Þ ¼ T 2 ð0Þ ¼ À. Given S and I , the score of a pair-wise alignment can be defined as the sum of the scores of the edit operations across all columns in the alignment. In other words: all a,b 2 S, the alignments enumerated in Fig. <ref type="figure" target="#fig_5">3</ref> have the scores 7, À 2 and 9 respectively. The maximum score is 9 and the best alignment corresponds to Fig. <ref type="figure" target="#fig_5">3(c</ref>).</p><formula xml:id="formula_1">ScoreðT 1 ,T 2 Þ ¼ X m j ¼</formula><p>It is imperative to note that the best scoring alignment is sensitive to the substitution and indel score functions. Furthermore, there can be more than one alignment with the maximum score. Substitution of uncorrelated/constrasting activities or insertion/deletion of activities not conforming to a context should be penalized heavily. Similarly, 'like' events should be allowed to be replaced/ inserted at a minimal cost <ref type="bibr" target="#b1">[2]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">How to compute alignments</head><p>Fig. <ref type="figure" target="#fig_5">3</ref> depicts just three of the many variants of aligning the two traces T 1 and T 2 . In fact, the number of possible alignments for two traces of length l is</p><formula xml:id="formula_2">% ð1 þ ffiffiffi 2 p Þ 2l þ 1 l À1=2 [3]</formula><p>, e.g., for two traces of length 100, the number of possible alignments is approximately 10 77 . Therefore, it is infeasible to enumerate all possible alignments (even for moderate values of l), find their scores, and identify the best alignment.</p><p>Needleman and Wunsch <ref type="bibr" target="#b12">[13]</ref> have proposed a dynamic programming algorithm for finding the optimal alignment between two (amino acid) sequences. The basic idea is to build up an optimal alignment using previous solutions for optimal alignments of smaller subsequences. Let T 1 and T 2 be two traces. A matrix F indexed by i and j, is constructed where the value Fði,jÞ is the score of the best alignment between the prefix T i 1 of T 1 and the prefix T j 2 of T 2 . Fði,jÞ is constructed recursively by initializing Fð0,0Þ ¼ 0 and then proceeding to fill the matrix from top left to bottom right. It is possible to calculate Fði,jÞ if FðiÀ1,jÀ1Þ, FðiÀ1,jÞ and Fði,jÀ1Þ are known. There are three possible ways that the best score Fði,jÞ of an alignment up to T i 1 and T j 2 could be obtained: T 1 ðiÞ could be aligned to T 2 ðjÞ, in which case Fði,jÞ ¼ FðiÀ1,jÀ1Þþ SðT 1 ðiÞ,T 2 ðjÞÞ; or T 1 ðiÞ is aligned to a gap, in which case Fði,jÞ ¼ FðiÀ1,jÞþI ðT 1 ðiÀ1Þ,T 1 ðiÞÞ; or T 2 ðjÞ is aligned to a gap, in which case Fði,jÞ ¼ Fði,jÀ1ÞþI ðT 2 ðjÀ1Þ,T 2 ðjÞÞ. The best score up to (i,j) will be the largest of these three </p><p>The values along the top row (when i¼0) and left column (when j ¼0) need to be handled as follows. The values Fði,0Þ represent alignments of a prefix of T 1 to all gaps in T 2 . So, we can define Fð1,0Þ ¼ 0 and for i 4 1,Fði,0Þ ¼ FðiÀ1,0ÞþI ðT 1 ðiÀ1Þ,T 1 ðiÞÞ. Similarly, we can define Fð0,jÞ. The value in the bottom right cell of the matrix, Fð9T 1 9,9T 2 9Þ, is the best score for an alignment of T 1 and T 2 . To find the alignment itself, we must find the path of choices from (1) that led to this best score, i.e., we move from the current cell (i,j) to one of the cells ðiÀ1,jÀ1Þ,ðiÀ1,jÞ or ði,jÀ1Þ from which the value Fði,jÞ was derived. While doing so, we add a pair of symbols onto the front of the alignment: T 1 ðiÞ and T 2 ðjÞ if the step was to ðiÀ1,jÀ1Þ, T 1 ðiÞ and the gap symbol ' À' if the step was to ðiÀ1,jÞ, or 'À' and T 2 ðjÞ if the step was to ði,jÀ1Þ. At the end we will reach the start of the matrix, i ¼ j ¼ 0. The above procedure, called traceback, will retrieve only one of the alignments that gives the best score; there can be cases where multiple options of (1) are equal. In these cases, an arbitrary choice is made. The set of all possible alignments for the best score can be enumerated by using graph traversal techniques.</p><p>Let us consider the two traces T 1 ¼abcac and T 2 ¼acacad and the unit score function. Fig. <ref type="figure">4</ref>(a) depicts the F matrix for these two traces using the unit score function. Consider the cell at row 4 and column 4, Fð3,3Þ; the value for this cell corresponds to the maximum of the score at Fð2,2Þ þ sub(c, a) or Fð2,3Þ þ del(b, c) or Fð3,2Þ þ ins(c, a). Since in the unit score function, the score of substitution of unlike activities and the score for indels is À 1, we get Fð3,3Þ ¼ maxfÀ1,À2,0g ¼ 0. The best score of the alignment is Fð5,6Þ ¼ 1. Fig. <ref type="figure">4</ref>(b) depicts the traceback procedure pertaining to the best alignment. We start with the bottom right cell at ð5,6Þ and identify the cells that led to the best score recursively until we reach the top left cell at (0,0).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">Multiple trace alignment</head><p>Having discussed the alignment of two traces, let us move on to the alignment of a set of traces. One of the most popular scoring mechanisms for multiple sequence alignment of genomic sequences is the sum-of-pairs (SP) method <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b14">15]</ref>. We adopt the sum-of-pairs method for trace alignment as well. Let T h and T k be two distinct rows extracted from a multiple trace alignment A (over a set of set of n traces), and let ScoreðT h ,T k Þ be the alignment score calculated in the same way as ordinary pairwise alignment of T h and T k , then the SP score of a multiple trace alignment A is defined as</p><formula xml:id="formula_4">Score SP ðAÞ ¼ X 1 r h o k r n ScoreðT h ,T k Þ</formula><p>It is possible to generalize the pairwise dynamic programming alignment approach to the alignment of n traces. However, it is impractical for more than a few traces.</p><p>Assuming that the traces are all of roughly the same length l, the space complexity of the multidimensional dynamic programming algorithm is Oðl n Þ and the time complexity is Oð2 n l n Þ <ref type="bibr" target="#b15">[16]</ref>. Multiple sequence alignment that maximizes the SP score was shown to be NPcomplete <ref type="bibr" target="#b16">[17]</ref>. Since the computation of optimal multiple sequence alignment is prohibitively expensive, various heuristic algorithms have been proposed in the literature <ref type="bibr" target="#b17">[18]</ref>. We adopted the most popular heuristic approach <ref type="bibr" target="#b18">[19]</ref>, viz., the progressive alignment approach <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b20">21]</ref> for trace alignment. The basic idea of progressive alignment is to iteratively construct a succession of pairwise alignments. Alignment is allowed between a pair of traces, a trace and an alignment and between alignments. The selection of traces for alignment at each iteration is based on their similarity. Traces that are most similar to each other are aligned first. Once similar traces have been aligned, align the resulting clusters of traces against each other. A guide tree is built to assist this process. We use the agglomerative hierarchical clustering algorithm (AHC) <ref type="bibr" target="#b21">[22]</ref> with minimum variance <ref type="bibr" target="#b22">[23]</ref> as the join criteria for generating this tree. The choice of AHC is due to the fact that it Fig. <ref type="figure">4</ref>. The F-matrix and the traceback computing an alignment between two traces using the unit score function.</p><p>produces the tree naturally as a dendrogram while the tree has to be constructed subsequently if other clustering algorithms such as k-means is used.</p><p>It is important to note that the hierarchy formed using AHC is strongly influenced by the features used to characterize the traces and the distance or similarity metrics used. What constitutes a relevant feature is largely dependent on the domain and the context of analysis <ref type="bibr" target="#b23">[24]</ref>. Context-aware and process-centric features defined by common execution patterns are shown to outperform the bag-of-activities and k-gram features <ref type="bibr" target="#b24">[25]</ref>. We use the maximal repeat feature set <ref type="bibr" target="#b24">[25]</ref>, the Euclidean distance metric and the F-score similarity measure <ref type="bibr" target="#b25">[26]</ref> in our experiments.</p><p>Fig. <ref type="figure">5</ref> illustrates an example of the progressive alignment strategy. In this example, we consider five traces. A guide tree is generated using AHC. Based on the guide tree, the traces T 2 and T 3 would first be aligned using pairwise trace alignment. Next traces T 4 and T 5 would be aligned using pairwise trace alignment. Subsequently, trace T 1 is aligned with the alignment obtained from T 2 and T 3 . Finally the two alignments obtained from the set of traces fT 1 ,T 2 ,T 3 g and fT 4 ,T 5 g are aligned.</p><p>While aligning an alignment A, with another alignment B, (1) is modified as</p><formula xml:id="formula_5">Fði,jÞ ¼ max FðiÀ1,jÀ1ÞþSðC i A ,C j B Þ FðiÀ1,jÞþI ðC iÀ1 A ,C i A Þ Fði,jÀ1ÞþI ðC jÀ1 B ,C j B Þ 8 &gt; &gt; &lt; &gt; &gt; :<label>ð2Þ</label></formula><p>where SðC i A ,C j B Þ denotes the score of substituting column i of alignment A with column j of alignment B and is defined as</p><formula xml:id="formula_6">SðC i A ,C j B Þ ¼ X a,b2S n i A ðaÞ Á n j B ðbÞ Á Sða,bÞ ð 3Þ</formula><p>where n i X ðaÞ denotes the frequency (count) of activity a in column i of alignment X . I ðC iÀ1</p><p>A ,C i A Þ denotes the score of inserting column i in alignment A given that its left column is iÀ1 and is defined as</p><formula xml:id="formula_7">I ðC iÀ1 A ,C i A Þ ¼ X a,b2S f i A ða,bÞ Á I ða,bÞ ð<label>4Þ</label></formula><p>where f i A ða,bÞ is the frequency of activity b in column i of alignment A given that its neighboring activity is a in column iÀ1. The procedure for finding the 'best' alignment is similar to that of pairwise alignment.</p><p>Note that the guide tree enables the visualization of alignments for different subsets of the traces. The alignment at the root of the tree corresponds to the alignment of all the traces in the event log whereas an alignment at any internal node of the guide tree depicts the alignment corresponding to the traces constituting the leaves of the sub-tree at the node. It is often the case that event logs contain traces capturing different execution behavior of a process and clustering assists in grouping together a coherent set of traces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Framework for trace alignment</head><p>We propose the framework depicted in Fig. <ref type="figure">6</ref> for trace alignment. The framework identifies the following parts:</p><p>Preprocess: Preprocessing involves steps such as removal of outliers, removal of loop-constructs, abstraction of Fig. <ref type="figure">5</ref>. An example of progressive alignment approach for multiple trace alignment.</p><p>activities and transformation of log, etc. The detection and removal of outliers (explained later in this section) is critical for obtaining interesting alignments.</p><p>Compute scoring matrices: As discussed in Section 3, alignments are sensitive to the substitution and indel score functions, S and I respectively. We use the approach presented in <ref type="bibr" target="#b1">[2]</ref> for deriving the substitution and indel scores from the event log.</p><p>Build guide tree: A guide tree assists in progressive alignment of multiple traces as illustrated in Fig. <ref type="figure">5</ref>. We use the agglomerative hierarchical clustering (AHC) approach for building the guide tree. However, other approaches such as neighbor joining <ref type="bibr" target="#b26">[27]</ref> can be used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Generate progressive alignment:</head><p>The progressive alignment approach is used to compute the multiple trace alignment. The guide tree generated in the above step directs the growth of progressive alignment as a series of pairwise alignments.</p><p>Estimate alignment quality: Progressive alignment being a heuristic approach, the alignment that is obtained need not be optimal. Furthermore, any error in alignment done in early stages of progressive alignment cannot be undone (cf. advanced alignment techniques in Section 9). Hence it is essential to estimate the quality of an alignment. In this work, we adopt a metric based on the information score as a means for assessing the quality of an alignment. The information score of a column in an alignment is defined as 1ÀE=E max , where E is the entropy of activities in the column 2 and E max is the maximum entropy which is equal to log 2 ð9S9 þ1Þ.</p><p>Prune and refine: Construction of multiple trace alignment is a very complex problem, and most heuristic algorithms usually fail to generate an optimal alignment. Disturbances in an alignment can creep in from many sources thereby making the final alignment far from optimal. Disturbances here refer to the misplacement of gaps in an alignment. Efficient techniques for pruning and refining alignments need to be supported. We will discuss more about this in the next section.</p><p>Interactive visualization: Apart from just pictorially depicting the alignment, it is desirable to have additional interactive features for the analysts to explore into the patterns and the alignments uncovered. Features such as editing an alignment, sorting and/or filtering alignment columns based on activities of interest would all lead to gaining further insights into the execution of processes.</p><p>Though the definition of what constitutes an outlier is left open, in the current exploration, we have adopted one simple definition of outliers based on the length of the traces. It could be the case that in an event log there are certain process instances whose lengths deviate a lot from the average trace length in the log, e.g., one of the real life event logs that we analyzed has an average trace length of 47 activities (across 223 traces) while there are five traces with lengths above 250. Since an alignment is at least as long as the maximum trace length, such outlier traces in the log can lead to an alignment with too many gap symbols. Hence the removal of such traces is important. Note that the definition of outliers can change based on the perspective of analysis. If we are interested in finding common execution patterns or the backbone sequence of a process, the above definition of outliers may work fine. However, if we are interested in finding non-conforming traces or deviations in anomalous traces from normal traces, then the above definition might not always be appropriate. Recent efforts in detecting and dealing with outliers in process mining have been reported in <ref type="bibr" target="#b27">[28,</ref><ref type="bibr" target="#b28">29]</ref>. The efficacy of these techniques in the context of trace alignment needs to be explored.</p><p>The presence of loop constructs and the multiple invocations of a process fragment (sub-process) can all lead to variations in the lengths of the traces. Loop constructs and multiple invocations of process fragments manifest as tandem arrays and maximal repeats in the event logs respectively and can be detected efficiently in linear time <ref type="bibr" target="#b29">[30]</ref>. One can identify such patterns and define abstractions over them and transform the log to a higherlevel <ref type="bibr" target="#b29">[30]</ref>. Trace alignment can then be applied on the transformed log.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Refining alignments to improve alignment quality</head><p>Variation in the lengths of the traces, the choice of scoring functions used, the method and parameter choices used in the generation of guide tree, strategies used in resolving conflicts during traceback can all lead to disturbances or misalignments. Furthermore, misalignments in earlier stages of progressive alignment percolate to later stages. It is conjectured that detecting such misalignments and refining them might improve the quality of the final alignment. Misalignments are more pronounced in cases where there are recurring patterns of common execution behavior such as the manifestation of loops and multiple invocations of a functionality. Fig. <ref type="figure">6</ref>. Framework for multiple trace alignment. 2 The entropy of a column is defined as E ¼ P a2S[fÀg Àpa log 2 ðpaÞ where p a is the probability of occurrence of a in the column. ) in T 1 where as one would have preferred it to be aligned with P 1 1 . Fig. <ref type="figure" target="#fig_8">7(c</ref>) depicts an even more undesirable situation where the lone instance of P in T 2 is aligned to the first instance of P in T 1 and the lone instance of P in T 3 gets aligned to the second instance of P in T 1 . What is worse is that though P manifests in both T 2 and T 3 , they do not get aligned due to their alignment conflict with T 1 . In this example, a desirable alignment would be the one where the first instance of P in all the three traces are aligned together.</p><p>In the above examples, we have considered the scenario where the pattern P manifests exactly as is (alike) in all the traces. However, the presence of concurrent activities and/ or optional activities in a process might disturb the manifestation of P in a trace. In other words, there could be instances where the concurrent/optional activities are interspersed in the manifestation of P. For example, in the trace T ¼ jgclfebdklebdklebdi, the concurrent activity f is interspersed in the manifestation of the first instance of the pattern lebd. Fig. <ref type="figure" target="#fig_9">8</ref> depicts two scenarios of misalignments in the presence of concurrent/optional activities. In Fig. <ref type="figure" target="#fig_9">8(a)</ref>, there exists a sequence of optional activities interleaved in P 1  2 . It could be the case that the alignment of T 1 and T 2 results in the prefix of P 1 2 before the optional activities to be aligned with the prefix of P 1 1 . The optional activities and the suffix of P 1 2 following the optional activities are aligned with gaps as indicated in Fig. <ref type="figure" target="#fig_9">8</ref>(a) resulting in an undesirable alignment. Instead, an ideal alignment would be the one that is depicted under 'preferred alignment' in this case. Fig. <ref type="figure" target="#fig_9">8</ref>(b) illustrates the existence of a sequence of concurrent activities interspersed in P 1 2 . A possible misalignment and the preferred alignment are also depicted in Fig. <ref type="figure" target="#fig_9">8(b)</ref>. For simplicity reasons, we illustrate the misalignment scenarios with both the traces having a single instance of P in Fig. <ref type="figure" target="#fig_9">8</ref>. However, one can imagine scenarios where multiple instances of P are manifested with uneven numbers across traces, and with some instances having an interleaved manifestation of optional/concurrent activities. In such cases, the misalignment scenarios depicted in both Figs. Misalignment score. Let T ¼ fT 1 ,T 2 , . . . ,T n g be a set of traces and T ¼ fT 1 ,T 2 , . . . ,T n g be the corresponding set of aligned traces of T. Given a pattern P, let cðP,T i Þ denote the frequency of occurrence (considering both the exact and interspersed manifestation) of a pattern P in its corresponding original trace T i 2 T. For any two aligned traces T i and T j 2 T, let T u ¼ arg min T 2fT i ,T j g cðP,T Þ and</p><formula xml:id="formula_8">T v ¼ arg max T 2fT i ,T j g cðP,T Þ.</formula><p>In other words, among T i and T j , T u represents the one that has the lesser number of instances of the pattern P while T v represents the one with a higher number of instances of P.</p><p>Let PAðP,k,T u ,T v Þ denote the set of all instance numbers of pattern P in T v to which some activity in the kth instance of P in T u is aligned to. If the kth instance of P in T u is not aligned to any instance of P in T v , i.e., it is aligned to only gaps, then PAðP,k,T u ,T v Þ ¼ fg. The misalignment score matrix M ¼ fms ij g ð1 ri,j r nÞ of a pattern P over the set of aligned traces T is defined as</p><formula xml:id="formula_9">ms ij ¼ ms ji ¼ X cðP,Tu Þ k ¼ 1 X r2PAðP,k,Tu ,Tv Þ 9rÀk9 þ dðkÞ</formula><p>where dðkÞ ¼ 1 if any activity in the kth instance of pattern P in T u is aligned to a gap or any other activity not in P in T v and 0 otherwise. T u and T v correspond to that aligned trace with the lesser and higher number of instances of P respectively among T i and T j as defined above. The 9rÀk9 signifies the distance of misalignment. ms ij indicates the degree of misalignment pertaining to all instances of pattern P in T u .  Let us look at the misalignment score metric with an example. Consider the two aligned traces and the pattern P ¼ lebd. Activity f is a concurrent activity in the process and is interspersed in P in T 1 . cðP,T 1 Þ ¼ 2 and cðP,T 2 Þ ¼ 3, i.e., there are two instances of P in T 1 and three instances of P in T 2 . T u ¼ T 1 and T v ¼ T 2 . PAðP,1,T u ,T v Þ ¼ f2g and PAðP,2,T u ,T v Þ ¼ f3g, i.e., the first instance of P in T u is partially aligned to the second instance of P in T v and the second instance of P in T u is completely aligned to the third instance of P in T v . dð1Þ ¼ 1 since the activity l in the first instance of P in T u is aligned to a gap while dð2Þ ¼ 0. ms 12 ¼ 92À19þ dð1Þþ93À29þ dð2Þ ¼ 3.</p><p>As another example, let us consider the pattern P ¼ lebd and the two aligned traces cðP,T 3 Þ ¼ 4 and cðP,T 4 Þ ¼ 3, i.e., there are four instances of P in T 3 and three instances of P in T 4 . T u ¼ T 4 and</p><formula xml:id="formula_10">T v ¼ T 3 . PAðP,1,T u ,T v Þ ¼ f1,2g, PAðP,2,T u ,T v Þ ¼ f3g and PAðP,3,T u , T v Þ ¼ f4g, i.e.</formula><p>, the first instance of P in T u is partially aligned to both the first and second instances of P in T v while the second and third instances of P in T u are completely aligned to the third and fourth instances of P in T v respectively. dð1Þ ¼ dð2Þ ¼ dð3Þ ¼ 0. ms <ref type="bibr" target="#b33">34</ref> </p><formula xml:id="formula_11">¼ 91À19 þ9 2À19 þ dð1Þþ93À29þdð2Þþ94À39þdð3Þ ¼ 3.</formula><p>Once the misalignment score matrix is computed for a given alignment, the cumulative misalignment score is then defined to be the sum of the elements in the upper/lower triangle of the matrix (since the matrix is symmetric). An objective of a refinement technique would then be to minimize the cumulative misalignment score. In the following subsections, we propose a few techniques of refining alignments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.">Global vs. semi-global trace alignment</head><p>The alignment procedure described in Section 3 is also called as global trace alignment. Depending on the scoring functions, global trace alignment can sometimes penalize gaps at the beginning and/or end of the traces in the alignment. In order to allow gaps to be inserted at the beginning/end of any trace in an alignment, a variant of the global trace alignment called the semi-global trace alignment can be considered. Here the best score of the alignment is defined to be the one that is the maximum in the last row or last column of the F matrix defined in Section 3. Traceback procedure starts from that cell and proceeds until it stops at the first position it reaches in the top row or left column. Gaps can then be inserted in the appropriate trace in the positions subsequent to the maximum value cell in the last row/column and prior to the position it reached in the top row or left column. Fig. <ref type="figure" target="#fig_10">9</ref> depicts the difference between global trace alignment and semi-global trace alignment of two traces aligned using the same scoring functions. It is easy to see that the alignment obtained using semi-global alignment is preferable to the one obtained using global-alignment.</p><p>In this example, the two traces have a common execution pattern P ¼ ahbd. T 1 has one instance of ahbd while T 2 has two instances. Global trace alignment leads to the scenario depicted in Fig. <ref type="figure" target="#fig_6">7</ref>(a) where the lone instance of ahbd in T 1 is split up and the two splits are aligned to different instances of ahbd in T 2 . This problem is mitigated with the semi-global trace alignment as depicted in Fig. <ref type="figure" target="#fig_10">9(b)</ref>. The misalignment score for the pattern P is ms 12 ¼ 1 for the resulting alignment using the global trace alignment while it is 0 for the one obtained using semi-global trace alignment. We recommend to consider semi-global trace alignment (at any iteration of progressive alignment) in scenarios where the traces to be aligned differ vastly in their lengths (for example, due to the manifestation of loop constructs).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.">Block shift refinement</head><p>Consider the set of traces L ¼jgcflebdklebdklebdi, jgcflebdklebdi, jgclfebdklebdklebdi, jgclfebdklebdklebdklebdi, jgclfebdklebdi, jgclebfdklebdklebdi, jgclebdfklebdklebdi, jgclebdklfebdklebdi}. Fig. <ref type="figure" target="#fig_11">10</ref>(a) depicts the alignment of these eight traces. It could be seen that there exists a common execution pattern lebd in L and that there are different instances of lebd among the traces. A concurrent activity f has an interleaved manifestation among the traces. The misalignment scenarios depicted in Figs. 7 and 8 can be observed in Fig. <ref type="figure" target="#fig_11">10(a)</ref>. For example, the first instance of lebd in trace T 5 is split up and aligned with the first and third instances of lebd in T 4 . The first instance of lebd in trace T 2 is aligned with the second instance of lebd in T 1 . Fig. <ref type="figure" target="#fig_12">11</ref>(a) depicts the misalignment score matrix of the alignment in Fig. <ref type="figure" target="#fig_11">10(a)</ref>. The cumulative misalignment score is 53.</p><p>It can be seen that the alignment can be improved by a mere adjustment/shifting of gap blocks. For example, the activity f and the first instance of lebd in T 2 can be shifted to the left so that f gets aligned to f of T 1 and lebd gets aligned to the first instance of lebd in T 1 . Algorithm 1 presents the refinement of an alignment by shifting non-gap activities to the left. The basic idea is to consider each trace of the alignment from left to right shifting an activity at a column preceded by a block of gaps to the left most possible column in that trace where that activity manifests in any other trace of the alignment. Fig. <ref type="figure" target="#fig_11">10(b</ref>) depicts the intermediary alignment after Step 13 of Algorithm 1. The shifting of activities has resulted in an alignment where there exists a column with only the gap symbol. Such columns can be removed. Fig. <ref type="figure" target="#fig_11">10(c</ref>) depicts the refined alignment after block shifts. Fig. <ref type="figure" target="#fig_12">11(b</ref>) depicts the misalignment score matrix of the block shifted refined alignment. It can be noticed that the alignment of Fig. <ref type="figure" target="#fig_11">10(c</ref>) is better than that of Fig. <ref type="figure" target="#fig_11">10</ref>(a) (one can see that the common execution pattern lebd is much well conserved after refinement). Accordingly, the cumulative misalignment score of the refined alignment is 46 which is less than that of the original alignment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 1 (Block shift refinement).</head><p>Require: An alignment, A 1: Let m be the length of the alignment 2: Let S j denote the set of activities in column j of A.</p><p>3: for all aligned traces T i in A do 4:</p><p>for j ¼1 to m do 5:</p><p>if there exists a block of gaps of length p ðp Z 1Þ starting at j in T i then 6:</p><p>if there exists a k, such that j r ko j þ p and Aði,j þ pÞ 2 S k then 7: swap Aði,kÞ and Aði,j þ pÞ. set j ¼k. 8:</p><formula xml:id="formula_12">else 9: set j ¼ j þ pÀ1. 10: end if 11:</formula><p>end if</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>12:</head><p>end for 13: end for 14: Remove any column from A that contains only the gap symbol</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.">Concurrency pruning and realignment</head><p>Concurrent activities manifest in mutually exclusive traces across different columns in an alignment. 3 The basis for this arises out of the fact that concurrent activities can have different contexts of execution. In the alignment of Fig. <ref type="figure" target="#fig_11">10(a)</ref>, activity f is concurrent as it manifests in columns 5, 14, and 18 and there exists no trace that has f in more than one column. Concurrent activities are one of the primary sources for misalignments. One can improve the quality of an alignment by identifying the presence of concurrent activities and handling them in a special way. Algorithm 2 presents a procedure for pruning concurrent activities and refining an alignment. 4 This algorithm only deals with the specific case of manifestation of concurrent  3 This holds true only in scenarios where the concurrent activity is not involved in a loop construct. For cases where concurrent activities are involved in a loop, one can consider a subset of consecutive columns in an alignment demarcating an instance of the loop and then consider the manifestation of activities in that subset. 4 Pruning here refers to deleting the manifestation of the concurrent activity in the aligned traces.</p><formula xml:id="formula_13">jgc-f----leb--dkl-ebdklebdi jgc----------f--l-ebdklebdi jgclf-----eb--dkl-ebdklebdi jgclfebdkleb--dkl-ebdklebdi jgcl---------f----ebdklebdi jgcl------eb-fdkl-ebdklebdi jgcl------ebdf-kl-ebdklebdi jgcl------eb--dklfebdklebdi jgc-f----lebd--kl-ebdklebdi jgc-f----lebd--kl-ebd-----i jgclfebdklebd--kl-ebd-----i jgclfebdklebd--kl-ebdklebdi jgclfebdklebd-------------i jgcl-eb------fdkl-ebdklebdi jgcl-ebd-----f-kl-ebdklebdi jgcl-ebdkl---f----ebdklebdi jgc-f----lebd--klebdklebdi jgc-f----lebd--klebd-----i jgclfebdklebd--klebd-----i jgclfebdklebd--klebdklebdi jgclfebdklebd------------i jgcl-eb------fdklebdklebdi jgcl-ebd-----f-klebdklebdi jgcl-ebdkl---f---ebdklebdi</formula><p>activities in an alignment as defined in Step 2 of Algorithm 2. Dealing with the other scenario where a concurrent activity is aligned with another (potentially concurrent) activity is relatively complex and is beyond the scope of this paper. Fig. <ref type="figure" target="#fig_2">12</ref> depicts the manifestation of a concurrent activity a in three different alignments. In Fig. <ref type="figure" target="#fig_2">12</ref>(a), the concurrent activity a is aligned to either itself or a gap in all the columns of the alignment where it manifests whereas in Fig. <ref type="figure" target="#fig_2">12</ref>(b) it is aligned to another activity c in the first column and in Fig. <ref type="figure" target="#fig_2">12</ref>(c) it is aligned to another concurrent activity b. Algorithm 2 is applicable to concurrent activities manifested as in scenario Fig. <ref type="figure" target="#fig_2">12</ref>(a) and dealing with scenarios Fig. <ref type="figure" target="#fig_2">12</ref>(b) and (c) is beyond the scope of this paper.</p><p>Algorithm 2 (Concurrency pruning and realignment).</p><p>Require An alignment A 1: Let C be the set of all concurrent activities in A.</p><p>2: Let C I D C be the set of all concurrent activities that is aligned to either only itself or a gap in the alignment.</p><p>3: for all a 2 C I do 4: Let A 0 be the alignment obtained from A after removing the columns in which a manifests 5:</p><p>Perform block shift refinement on A 0 . Let A 00 be the refined alignment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6:</head><p>Insert the concurrent activity a as columns at appropriate positions in the refined alignment. Let A 000 be the new alignment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>7:</head><p>Set A ¼ A 000 .</p><p>8: end for Fig. <ref type="figure" target="#fig_13">13</ref>(a) depicts the alignment obtained from Fig. <ref type="figure" target="#fig_11">10</ref>(a) after removing the columns where the concurrent activity f manifests (Step 4, Algorithm 2). Fig. <ref type="figure" target="#fig_13">13(b</ref>) depicts the alignment obtained after block shift refinement on the alignment of Fig. <ref type="figure" target="#fig_13">13</ref>(a) (Step 5, Algorithm 2). As it can be seen, this alignment is the ideal alignment of the traces without activity f. The next step corresponds to the reintroduction of the concurrent activity f into the alignment.</p><p>Let f : N Â N-N be a function defined over the set of trace indices, i 2 N, and alignment column indices, j 2 N, that gives the activity index k 2 N corresponding to the trace T i at alignment j provided Aði,jÞ 2 S (if Aði,jÞ ¼ À, then f ði,jÞ ¼ À1). For example, for the alignment in Fig. <ref type="figure" target="#fig_11">10</ref>(a) f ð1,5Þ ¼ 4, because the activity in column 5 of the aligned trace T 1 is f and f is the fourth activity in T 1 . Similarly, f ð2,17Þ ¼ 5 and f ð3,19Þ ¼ 11. In the concurrency pruned and block shift refined alignment (A 00 in Step 5, Algorithm 2), we insert a column at index j in the alignment with the concurrent activity in all the traces i (and gaps for others) if and only if the activity at T i ðf ði,jÞÞ corresponds to the concurrent activity. The resulting alignment after the reintroduction of the concurrent activity f in all the possible traces in the alignment of Fig. <ref type="figure" target="#fig_13">13(b</ref>) is as shown in Fig. <ref type="figure" target="#fig_13">13(c</ref>). In this refined alignment, the kth instance of lebd (if it exists) among the traces are aligned with each other. The misalignment score matrix for this refined alignment is a matrix of zero's (the cumulative misalignment score is zero) which is an improvement from that of the original (53) and the blockshifted refined alignment (46). In this log, the patterns are disturbed only by the presence of the concurrent activity f and an appropriate handling of the concurrent activity during refinement led to the conservation of the patterns in the alignment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Realization of the approach</head><p>The techniques and framework presented in Sections 3, 4 and 5 have been implemented as plugins in ProM 6.0. Fig. <ref type="figure" target="#fig_14">14</ref> depicts the framework along with the plugins that realize each step in the framework. Some trivial preprocessing techniques such as the filtering of traces based on their length are available as filter plugins in ProM. The construction of guide tree is enabled by the 'guide tree miner' plugin that implements the approaches presented in <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b24">25]</ref>. The rest of the steps are handled by the 'trace alignment with guide tree' plugin. Fig. <ref type="figure" target="#fig_15">15</ref> depicts the screenshot of invoking the guide tree miner plugin. This plugin requires an event log as input. This plugin supports the features defined in <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b24">25]</ref> Fig. <ref type="figure" target="#fig_2">12</ref>. Scenarios of manifestation of concurrent activities in an alignment. and implements the agglomerative hierarchical clustering algorithm for the generation of guide tree. Apart from the guide tree, this plugin generates as output, k event logs (for a chosen number of clusters k), each containing the partitioned traces pertaining to that cluster (specifying the number of clusters k is optional and is handy in cases where the analyst has apriori knowledge about the diversity in the process/event log). Fig. <ref type="figure" target="#fig_18">16</ref> depicts the guide tree generated by this plugin on an event log.</p><p>Fig. <ref type="figure" target="#fig_16">17</ref> depicts the invocation of the 'trace alignment with guide tree' plugin. This plugin takes as input a guide tree generated by the guide tree miner plugin. The user can configure the options for generating the substitution/ indel scores and refining alignments as illustrated in Fig. <ref type="figure" target="#fig_17">18</ref>. Fig. <ref type="figure" target="#fig_19">19</ref> depicts the visualization of the computed alignments. The alignment visualizer provides rich interactive functionality for the user to explore and gain insights into the process execution. For example, as illustrated in Fig. <ref type="figure" target="#fig_19">19</ref>, the 'view' menu has options for enabling the sorting or filtering of activities in a column of an alignment and other options pertaining to how an alignment is rendered. The analysis menu provides options for refining alignments as well as for uncovering the potential concurrent activities in the process. Concurrent activities, if any, are then notified in a separate panel. Furthermore, if an analyst wishes to manually refine an alignment, there exists a functionality to do so by editing a trace in an alignment as illustrated in Fig. <ref type="figure" target="#fig_19">19</ref>. For a more detailed explanation of the functionality and usage of the plugins, the reader is referred to the respective plugin's user manual available at the ProM repository.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Case studies and discussion</head><p>We present the results of applying trace alignment on three event logs (one synthetic and two real-life) in the subsequent sections. The synthetic log captures the process of telephone repairs. The goal of using a synthetic log is to show the capabilities of trace alignment on a process for which complete information is known. We also show the applicability of trace alignment and discuss the insights gained on two real-life logs, one from a rental agency and the other from a municipality.     Repair. This is a synthetic log for which complete information about this process is known. Fig. <ref type="figure" target="#fig_20">20</ref> depicts the process model discovered using the Alpha mining algorithm <ref type="bibr" target="#b0">[1]</ref>. The log consists of cases where the repair can be classified as a simple or complex one. For our discussion here, we further distinguish two types of cases based on the difficulty level of repair viz., cases where the telephone repair was easy and cases where it was difficult (in both simple and complex types). Difficult cases required multiple tries of the repair diagnosis for failing the quality assessment test after a repair. The goal of this example is to show the diagnostics for a known process.</p><p>As mentioned earlier, the guide tree inherently captures the notion of clustering. We have split the event log into four clusters (using the maximal repeat feature set <ref type="bibr" target="#b24">[25]</ref> and the F-score <ref type="bibr" target="#b25">[26]</ref> as a measure of similarity. Using this feature set and similarity metric, we were able to obtain the four clusters mentioned above) and Fig. <ref type="figure" target="#fig_21">21</ref> depicts the trace alignment for one of the four clusters. Fig. <ref type="figure" target="#fig_21">21</ref>(a) depicts the original alignment whereas Fig. <ref type="figure" target="#fig_21">21(b</ref>) depicts the alignment obtained after the refinement using the concurrent activity pruning and realignment technique (activity f is concurrent in this example). This cluster corresponds to traces where the difficulty level was easy and a complex repair procedure was done to fix the problem. The length of the alignment is 14 for this cluster. The left panel depicts the process instance identifier (as in the log) and identifiers with a gray background indicate traces that have identical duplicates. The number within parenthesis indicate the number of duplicates. For example there are seven traces identical to process instance 1018 (corresponding to the trace jgcflebd in the event  log) while there are no identical traces for the process instance 1127. <ref type="foot" target="#foot_2">5</ref> The top panel depicts a sorting component where the traces involved in the alignment can be sorted based on the activities in a column and the number in the column indicates the priority of sorting. For example in Fig. <ref type="figure" target="#fig_21">21(a)</ref>, the traces are sorted based on activity f (which indicates the inform user activity) with traces having f in column 4 having first priority and then with those having f in column 7 and finally with those having f in column 11. The bottom panel depicts the information score metric for each column as well as a consensus sequence for the alignment. The consensus sequence captures the major activity in each column and can be considered as the back-bone sequence for the process. The consensus sequence for this example corresponds to jgclebd with an optional execution of activity i at the end. Columns with an information score of 1.0 indicate well conserved patterns. For example in this alignment, columns 1-3 depicting the encoded activity sequence jgc (corresponding to activities Register-complete, Analyze (Defect)-start and Analyze (Defect)-complete) is well conserved and appears in all the traces as the beginning subsequence.</p><p>It is obvious to see that the encoded activity f corresponding to Inform User-complete is a concurrent activity. Concurrent activity manifests in mutually exclusive traces across different columns in the alignment. The encoded activities l, e, b, d and i correspond to Repair Complex-start, Repair Complex-complete, Test Repair-start, Test Repair-complete and Archive Repair-complete respectively. Annotating the traces with additional information such as performance metrics, customer feedback, etc. over the alignment might give further insights. For example, let us assume that the customer was not happy for the cases 1 and 1009, it is obvious to see that these traces differ from the rest in that the activity f appears quite late in these traces. It could be inferred that these customers were not timely informed about the status of their complaint and thus were not satisfied.</p><p>Trace alignment provides a complete perspective of activity executions in a log including that of long range dependencies (any dependencies between activities are reflected as common execution patterns in the traces where they manifest). Furthermore, with rich interactive visualization (such as the options of filtering columns containing an activity), trace alignment enables a flexible inspection of the log. In this fashion, trace alignment can assist in uncovering extremely interesting insights and act as probes when analyzing process execution behavior. Fig. <ref type="figure" target="#fig_22">22</ref> summarizes how trace alignment can assist in answering some of the diagnostic questions raised in Section 2.</p><p>The rest of the three clusters for this event log corresponded to the following difficulty level and repair type categories: easy and simple, difficult and complex, and difficult and simple/complex where the last cluster pertained to cases where a simple repair procedure was first tried and finally a complex repair procedure was done to fix the problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2.">Rental agency log</head><p>We have applied trace alignment on a real life log of a rental agency where the cases corresponded to the cancellation of a current rental agreement and subsequent registration of a new rental agreement. This log was provided by a large Dutch agency that rents houses and apartments (the organization has approximately 1000 employees and handles 80,000 houses). There are 74 event classes, one event type (transaction type, complete), 210 process instances and 6100 events in this log. As we can see, this is a reasonably complex log in terms of the size of the alphabet and the number of cases. This process is less structured and is not well understood (Fig. <ref type="figure" target="#fig_26">A1(a)</ref> depicts the heuristic net and Fig. <ref type="figure" target="#fig_26">A1(b</ref>) depicts the dotted chart mined using the log. It is not easy to unravel the mined results and provide answers to some of the questions raised in this paper). We now show how trace alignment can assist in uncovering interesting insights from this log. The traces are first encoded into activity sequences where each activity is encoded as a two character sequence. Fig. <ref type="figure" target="#fig_24">23</ref> depicts the alignment for one of the four clusters of this log (the clusters are formed using the AHC technique with minimum variance as the join criteria and maximal repeats <ref type="bibr" target="#b24">[25]</ref> as the feature set and Euclidean distance as the distance measure). Since the whole alignment is not legible, <ref type="foot" target="#foot_3">6</ref> we highlight the interesting patterns/ activities (that we refer to for our further discussion) at the top and the bottom of the figure. The length of the alignment is 71. At the outset, we can see certain common execution patterns in the form of well conserved regions (columns) in the alignment. For example, the activity sequence b0e0a5 (at columns 5-7) corresponding to the activities, planning of first inspection, preparation of lease termination form, and is first inspection performed? respectively is common across all the traces. Deviations, exceptional behavior and rare event executions are captured in regions that are sparsely filled, i.e., regions with lot of gap symbols (À). We will present the results of analysis of some of these deviations. It could be seen that only one of the traces (sixth trace in the alignment) has the activity subsequence a9e9a5 in columns 8-10. Activity a5 in column 7 corresponds to the check, is first inspection performed? and the activity subsequence a9e9a5 corresponds to the scenario where the result of the check was negative due to the fact that the tenant was not at home. a9 corresponds to the activity of sending a letter to the tenant and e9 corresponds to the activity of rescheduling the first inspection.</p><p>The activity sequence f0f5 corresponding to the checks is final inspection done? (f0), and are there new/repaired defects? (f5) is well conserved across all but one of the traces. We see an exceptional activity sequence e6c1 corresponding to the offering of a flat in one of the traces (first trace) before the activity sequence f0f5. It is strange that a flat was offered before the final inspection was done as in all the other traces where the flat was offered, it happened subsequent to the final inspection. Upon further inspection, we observed that though the flat was offered, the actual registration/check of the candidate corresponding to activity b7 happened subsequent to the final inspection. Furthermore, in all the cases where the flat was offered and the candidate registered, the activity sequence d6c1b7 was well conserved except for the first trace. Trace alignment helps us to uncover such anomalies and deviations. Similarly, we notice that in only one of traces (fifth trace) there was a need for second inspection (activity c4 corresponds to the planning of second inspection and h3 corresponds to the check, is second inspection done?).</p><p>The activity e7 corresponds to the determination of a candidate tenant and the activities g6 and d4 correspond  to registration of lease, and getting the payment and signing of contract respectively. It could also be observed from the alignment that there is an exceptional behavior in one of the cases where we see a manifestation of the activity subsequence g6d4b1e7g6d4 subsequent to activity e7 (the activity e7 appears twice in this trace). This indicates the fact that for this case, there was a need for determining the candidate tenant twice. The determination of the second candidate tenant followed the activity b1 which corresponds to the termination of provisional lease (the provisional lease was terminated due to nonpayment by the tenant).</p><p>Furthermore, the activities h2b2 corresponding to the drafting of final note and archiving of lease termination is concurrent in this process (as is evident from the fact that they manifest in different columns across mutually exclusive rows in the alignment). Fig. <ref type="figure" target="#fig_23">24</ref> summarizes how trace alignment can assist in answering some of the diagnostic questions. The alignments pertaining to the other clusters also exhibited similar behavior.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3.">Municipality log</head><p>We have applied trace alignment on another real life log pertaining to one of the Dutch municipalities where the cases correspond to the processing of building permit requests. This process is less structured and is not well understood. There are 45 event classes, one event type, 2075 process instances, 11,582 events and 71 originators in this event log. As we can see, this is a complex log in terms of the size of the alphabet and the number of cases (Fig. <ref type="figure" target="#fig_27">A2</ref>(a) depicts the heuristic net and Fig. <ref type="figure" target="#fig_27">A2(b</ref>) depicts the dotted chart mined using the log. The answers to questions raised in this paper is not explicit using the mined results.). The event log is first encoded into traces where each activity is encoded with a unique character. Though there are 2075 process instances in the event log, when encoded as traces, there are only 451 unique traces.</p><p>Fig. <ref type="figure" target="#fig_25">25</ref> depicts the alignment for one of the six clusters of this log (the clusters are formed using the AHC technique with minimum variance as the join criteria and maximal repeats <ref type="bibr" target="#b24">[25]</ref> as the feature set and Euclidean distance as the distance measure). This cluster has 51 traces. We can see certain common execution patterns such as yfj, St and DCR among the traces. All the cases start with y corresponding to the activity Case Start. Each case is then processed by three different departments viz., L (fire department), h (environment department) and c (CCT) to verify for the admissibility of the building permit. It is to be noted that these three activities are concurrent as they manifest across different columns in mutually exclusive rows.</p><p>Deviations, exceptional behavior and rare event executions are captured in regions that are sparsely filled, i.e., regions with lots of gap symbol 'À ' or in regions that are well conserved with a few rare gaps. We can notice that in one of the traces, the activity L is missing indicating that the case was not handled by the fire department which is a violation of the normal behavior. In another trace (sixth trace from the top), we notice that the case was referred to these departments multiple times (three times). Once the responses from the three departments are obtained, the contents are verified (activity S) and a decision is prepared (activity t). We see an exception to this behavior in one of the traces where the decision is prepared without the verification (activity t manifests without S). Furthermore, in some cases, an optional legal decision is also taken (activity p).</p><p>Activity B corresponds to the decision that no construction is permitted for one year whereas activity d corresponds to the rejection of the request. We see an exceptional behavior in one of the cases that has been rejected-activity K which corresponds to taxes occurs after the rejection d whereas in all the other cases where it had been rejected either K is not present or if present, K always occurs before d. In this fashion, trace alignment can assist in uncovering extremely interesting insights.</p><p>The diagnostic question, what are the process instances that share/capture a desired behavior either exactly or approximately?, can be answered using trace alignment by formulating the desired behavior as an activity sequence and applying trace alignment of this sequence with the traces in the log. Traces that share the desired behavior have a lot of their activities aligned with that of the activities in the desired behavior sequence.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">Computational complexity</head><p>The major computation steps in the proposed approach pertains to the computation of guide tree and the progressive alignment of traces. As discussed earlier, we use the agglomerative hierarchical clustering algorithm to build the guide tree, which can be informally described as comprising the following steps:</p><p>Step 1. Determine all inter-object dissimilarities, i.e., determine the distance between every pair of traces.</p><p>Step 2. Form cluster from two closest traces or clusters.</p><p>Step 3. Redefine dissimilarities between new cluster and other traces or clusters (all other inter-object dissimilarities remain unchanged).</p><p>Step 4. Return to Step 2 until all traces are in one cluster.</p><p>The hierarchy involves the construction of nÀ1 clusters, and so nÀ1 iterations (Steps 2-4). Step 1 above requires Oðn 2 Þ calculations, i.e., nðnÀ1Þ=2 inter-trace dissimilarities, where n is the number of traces. The distance between the traces can be computed either by defining some features and transforming each trace into a vector space defined by the features or by using syntactic edit distance approaches. We use the vector-space approach to compute the distances because edit distance approaches are time consuming in that it takes quadratic time (with respect to the length of the traces) to compute the distance between a pair of traces. In the vector-space approach, the number of variables (features) obviously affects the calculation time required, but they are usually considered constant for any set of data. A naive attempt at Step 2 will make the algorithm Oðn 3 Þ complex as the minimum of an n 2 matrix must be found in each of the nÀ1 iterations. However, this can be reduced to Oðn 2 Þ by maintaining a pointer to the minimum value in each row of the matrix. Step 3 can be carried out in OðnÞ time using the Lance-Williams combinatorial formula <ref type="bibr" target="#b31">[32,</ref><ref type="bibr" target="#b32">33]</ref>. In summary, the guide tree can be constructed in Oðn 2 Þ time. In all our case studies, we have used the maximal repeats <ref type="bibr" target="#b24">[25]</ref> as the feature set. The choice of this feature set is primarily because they are context-aware and process-centric and is shown to perform better when compared to other approaches <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b24">25]</ref>. We split the overall time to build the guide tree into the time to (a) extract the features, (b) compute the inter-trace distance using the features (Step 1) and (c) form the hierarchy, i.e., grouping objects (Steps 2-4). Table <ref type="table" target="#tab_2">1</ref> depicts the computational time (on an i3 Core CPU M350 @ 2.27 GHz with 4GB RAM running a 64-bit Windows 7 OS) required to compute the guide tree for the three case studies. As can be seen, the feature extraction and the computation of inter-trace dissimilarities are the major time consuming portions and the grouping of objects is just a fraction of these. One can slightly reduce the inter-trace dissimilarity computation time by filtering some features that are insignificant (based on frequency, etc.).</p><p>The time and space complexity of a single iteration of progressive alignment is Oðl 2 þnlÞ <ref type="bibr" target="#b25">[26]</ref> where l is the average length of the traces/profiles considered for alignment and n is the number of traces involved in the alignment. There exists nÀ1 iterations in the progressive alignment thus making the alignment time to be polynomial. However, it is to be noted that during the initial iterations, the value of n is much smaller than the total number of traces. Furthermore, unless the traces to align are heterogeneous, the length of the aligned traces tends to be closer to the average trace length of the input traces. Table <ref type="table" target="#tab_2">1</ref> depicts the computational time required to align the traces for the three case studies. It can be seen that the overall alignment can be performed in manageable times even for large datasets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.">Outlook</head><p>Finding good quality alignments is notoriously complex. In this section, we highlight some of the extensions that can be done to further improve the results of trace alignment. We also mention some of the challenges related to trace alignment and directions for future research.</p><p>Multi-phase approach: In order to deal with complex event logs (logs with a large number of activities/event classes, etc.), one can try to find alignments in a multiphase approach. The basic idea is to first simplify the log by defining abstractions over the activities and then transforming the log with these abstractions. Sub-logs are created for each abstract activity during this transformation. Trace alignment is then applied on the most abstract log with a provision to zoom into an abstract activity. Upon zooming into an abstract activity, an alignment obtained on the traces defined in the sub-log of the abstract activity is shown. The definition of abstractions and simplification of logs can be enabled by incorporating semantics in the log specification <ref type="bibr" target="#b30">[31,</ref><ref type="bibr" target="#b33">34]</ref> or through (semi-)automated means as in <ref type="bibr" target="#b29">[30,</ref><ref type="bibr" target="#b34">35]</ref>.</p><p>Outlier/noise detection: Noisy data pose a risk of misleading the alignment procedure and thereby resulting in low quality alignments. There is a need for techniques to identify difficult or even un-alignable sets of traces. For certain perspectives of analysis such as finding common execution patterns, backbone/critical elements of a process, such traces can be safely ignored. However, for certain other perspectives such as finding deviations/ non-conforming traces, it is a tricky proposition to filter outliers as non-conforming traces could be treated as outliers. Techniques developed within the context of process mining such as <ref type="bibr" target="#b27">[28,</ref><ref type="bibr" target="#b28">29]</ref> for noise/outlier detection and filtering and identifying coherency in event logs need to be explored. In addition one can take leverage of the techniques in data mining and machine learning community and adapt them (if need be) by providing a process tinge to them.</p><p>Refinement strategies to improve the quality of an alignment: In this paper, we have presented three different refinement techniques to deal with misplaced gaps. However, robust quality metrics along with realignment strategies to effectively deal with the variations that might arise due to the manifestation of different process model constructs are highly desirable. Defining and identifying problematic regions in an alignment is a prerequisite to any refinement technique. Automated means of identifying such problematic regions is non-trivial and is in itself an interesting area of research.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Advanced alignment techniques:</head><p>The progressive alignment approach adopted in this paper is susceptible to converging at local optima. This is due to the fact that when aligning an individual trace with an alignment, the trace is not aligned directly and optimally with every internal trace within the alignment but with the whole alignment taken as an atomic entity. Gaps in the resulting alignment are inserted into the sequence, or as a column into the sub-alignment as a whole, but are not optimally distributed throughout the resultant alignment. As discussed in Section 5, the splitting up of common patterns of execution is an effect of such local optima. Recent advances in multiple sequence alignment such as the one that takes into consideration some user defined constraints <ref type="bibr" target="#b35">[36]</ref> while performing an alignment need to be explored. One can specify the conservation of common execution patterns in the final alignment as a constraint. Such common execution patterns can be discovered automatically <ref type="bibr" target="#b29">[30]</ref>.</p><p>Other techniques such as the partial-order alignment <ref type="bibr" target="#b36">[37]</ref> and the hybrid approach combining the progressive and partial-order alignments <ref type="bibr" target="#b37">[38]</ref> have been shown to produce better alignments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10.">Related work</head><p>Trace alignment is a log visualization technique that assists in uncovering interesting insights in process executions. Dotted chart analysis <ref type="bibr" target="#b10">[11]</ref> is one of the most commonly used log visualization technique. Dotted chart analysis, analogous to Gantt charts, presents a 'helicopter view' of the event log and assists in analyzing process performance by depicting process events in a graphical way and primarily focuses on the time dimension of events. The dotted chart analysis computes some metrics for performance such as the minimum, maximum and average interval between events. A business analyst needs to manually investigate the dotted chart to identify any potential performance issues. For logs with medium to large number of activities (of the order of a few tens to hundreds), the manual inspection and comprehension of the dotted chart becomes cumbersome and often infeasible to identify interesting patterns. Trace alignment alleviates this problem, by finding those patterns automatically and presenting them to the user. In the parlance of dotted chart analysis, trace alignment considers the logical relative time perspective of the event log. Furthermore, it would be simple and a natural extension to project the performance metrics proposed in <ref type="bibr" target="#b10">[11]</ref> onto the aligned traces.</p><p>Stream scope visualization <ref type="bibr" target="#b38">[39]</ref> is a trace visualization technique that is based on the event class correlations. Using stream scope visualization, patterns of co-occurring events can be easily recognized by their vicinity. However, stream scope visualization is restricted in that it visualizes each trace separately and does not provide a holistic view of the event log. In contrast, trace alignment enables the visualization of multiple traces at a time and is able to uncover common execution patterns within and across traces.</p><p>One of the applications of trace alignment is in uncovering deviations between anomalous and normative traces. Conformance checking aims at detecting inconsistencies/deviations between a process model (that captures the expected behavior) and its corresponding execution log <ref type="bibr" target="#b39">[40]</ref>. Conformance checking has inherent limitations in its applicability especially for diagnostic purposes. Firstly, it assumes the existence of a process model. However, in reality, process models are either not present or if present are incorrect or outdated (their quality typically leaves much to be desired). One can argue that process models can be discovered from the event logs and conformance checking be applied on the discovered models. However, this approach is not suitable for the analysis of highly complex and/or flexible processes, the class of models which most of the real-life logs fall into and where the discovered models are 'spaghetti-like'. Even in cases where the process models are available, it is difficult to look inside of the processes to identify and locate problems especially with models that are large. Trace alignment is complementary to this approach in that it highlights the deviations by analyzing the raw event traces (avoiding the need for process models).</p><p>Another application of trace alignment is in uncovering common patterns of execution. Bose and van der Aalst <ref type="bibr" target="#b29">[30]</ref> have proposed the use of tandem arrays and maximal repeats to capture recurring patterns within and across the traces. Though these patterns can be discovered in linear time, they suffer from two limitations: (i) the number of uncovered patterns can be enormous (e.g., there are 77, 983 and 384 maximal repeat alphabets <ref type="bibr" target="#b24">[25]</ref> and 146, 1262 and 732 maximal repeats <ref type="bibr" target="#b29">[30,</ref><ref type="bibr" target="#b24">25]</ref> in the repair example, rental agency and municipality event logs respectively.); however, using metrics such as the ones proposed in <ref type="bibr" target="#b34">[35]</ref> one can filter insignificant patterns and (ii) the patterns uncovered are atomic and the dependencies/correlations between patterns need to be discovered separately; in other words, the contexts of their manifestation is lost and needs to be established separately.</p><p>In contrast, trace alignment provides a holistic view of the traces thereby enabling the discovery of both the common execution patterns and their contexts and (longrange) dependencies. Common patterns of interaction between activities can also be captured using sequence diagrams <ref type="bibr" target="#b40">[41]</ref>. However, this approach too suffers from the limitations mentioned above.</p><p>Trace alignment is largely inspired from multiple sequence alignment (MSA) <ref type="bibr" target="#b4">[5]</ref>. However, there are challenges in adapting these techniques for trace alignment. Alignment of biological sequences typically happen over homologous sequences and with less variation in length <ref type="bibr" target="#b17">[18]</ref>. However, traces in an event log in process mining need not be from a coherent set of cases and can be of different lengths. Variation in lengths can occur due to variation in execution paths of the instances and due to manifestation of process model constructs such as choice/loop constructs. In biological sequence alignment, there are standard scoring matrices for substitution that are derived based on physio-chemical properties of the amino acids. Insertion/deletion operations are primarily considered either with a constant gap-score (or penalty) or as an affine function. In contrast, indel operation in trace alignment is context sensitive (insertion/deletion of an activity given its left activity, indelRightGivenLeft). Scoring matrices for trace alignment need to be derived automatically from the event log or provided by the domain experts. Furthermore, biological sequences deal with an alphabet size of either 4 (for four nucleic acids) or 20 (for amino acids). However, the number of distinct activities (event classes) in a typical process mining log can be of the order of a few hundreds. This adds to the complexity of deriving good scoring matrices and aligning traces. We took inspiration from MSA techniques <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b41">42]</ref> and adapted them for trace alignment.</p><p>The quality of the final alignment over a set of traces largely depends on the order in which the progressive alignment is performed. We have used the agglomerative hierarchical clustering to group traces so that homogenous traces are aligned in the early iterations of the progressive alignment. Context-aware approaches to trace clustering are shown to form more coherent clusters <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b24">25,</ref><ref type="bibr" target="#b23">24]</ref>. However, the choice of the feature set largely depends on the domain and the context of analysis <ref type="bibr" target="#b23">[24]</ref>. Similarly, the resulting clusters also depend on the choice of the distance/similarity metric, e.g., if the input data have elliptical distributions, then the Mahalanobis distance <ref type="bibr" target="#b42">[43]</ref> is preferred over Euclidean distance. The influence of a distance/similarity metric on the formed clusters and thereby on trace alignment is an interesting topic that needs further research and is beyond the scope of this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11.">Conclusions</head><p>In this paper, we proposed a novel approach of aligning traces and showed that this approach uncovers interesting patterns and assists in getting better insights on process execution. We have listed some of the interesting questions in process diagnostics and showed how trace alignment can help in diagnostic efforts. This paper extends the work presented in <ref type="bibr" target="#b43">[44]</ref>. In this extended paper, we discussed the various scenarios of misalignment and their impact on the resulting alignment. A metric that measures the degree of misalignment and three refinement techniques to cope with misalignments have been proposed. The approach has been implemented in ProM and evaluated using three case studies. This is just a first step in this direction. Due to the computational complexity of multiple trace alignment, automatic generation of high-quality alignments is still challenging and there is much to be done to fully exploit the potential of this approach. In our future work we will focus on the detection of outliers in an event log and study their influence on alignment (quality). We will also work on realignment strategies to improve the quality of alignments.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>Contents lists available at SciVerse ScienceDirect journal homepage: www.elsevier.com/locate/infosys Information Systems 0306-4379/$ -see front matter &amp; 2011 Elsevier Ltd. All rights reserved. doi:10.1016/j.is.2011.08.003</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Definition 2 .</head><label>2</label><figDesc>Let T ¼ Tð1ÞTð2ÞTð3Þ . . . TðmÞ 2 S þ be a trace: 9T9 ¼ m denotes the length of the trace T; T(k) denotes the kth element of trace T; T k denotes the k length prefix of T, i.e., T k ¼ Tð1ÞT ð2Þ . . . TðkÞ; and the set of all m-length sequences over the alphabet S is denoted by S m .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Traces aligned using the approach presented in this paper. Each row refers to a process instance. Columns describe positions in traces. Trace alignment aims at minimizing the number of gaps and maximizing the consensus.</figDesc><graphic coords="3,90.01,56.57,360.00,133.78" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>the activity pair ða,bÞ, a,b 2 S, denotes the substitution of activity a in T 1 with activity b of T 2 , the activity pair ða,ÀÞ denotes the deletion of activity a in T 1 , and the activity pair ðÀ,bÞ denotes the insertion of activity b in T 1 .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>substitution score is a function S : S Â S-R where Sða,bÞ denotes the score for substitution of activity a with activity b for all a,b 2 S. The indelRightGivenLeftscore is a function I : S [ fÀg Â S [ fÀg-R where I ða,bÞ denotes the score for inserting or deleting activity b given</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 3 .</head><label>3</label><figDesc>Fig.3. An example of pairwise trace alignments.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 7</head><label>7</label><figDesc>Fig.7depicts three scenarios of misalignment. Let P be a sequence of activities. P i k indicates the kth instance of the manifestation of P in trace T i . In Fig.7, there are two instances of P in trace T 1 and one instance of P in traces T 2 and T 3 . It could be the case that the lone instance of P in trace T 2 is split up and aligned to the two instances of P in T 1 as depicted in Fig.7(a). Fig.7(b) depicts the scenario where the lone instance of P in T 2 is aligned to the second instance of P (P 2 1 ) in T 1 where as one would have preferred it to be aligned with P 1 1 . Fig.7(c) depicts an even more undesirable situation where the lone instance of P in T 2 is aligned to the first instance of P in T 1 and the lone instance of P in T 3 gets aligned to the second instance of P in T 1 . What is worse is that though P manifests in both T 2 and T 3 , they do not get aligned due to their alignment conflict with T 1 . In this example, a desirable alignment would be the one where the first instance of P in all the three traces are aligned together.In the above examples, we have considered the scenario where the pattern P manifests exactly as is (alike) in all the traces. However, the presence of concurrent activities and/ or optional activities in a process might disturb the manifestation of P in a trace. In other words, there could be instances where the concurrent/optional activities are interspersed in the manifestation of P. For example, in the trace T ¼ jgclfebdklebdklebdi, the concurrent activity f is interspersed in the manifestation of the first instance of the pattern lebd. Fig.8depicts two scenarios of misalignments in the presence of concurrent/optional activities. In Fig.8(a), there exists a sequence of optional activities interleaved in P1  2 . It could be the case that the alignment of T 1 and T 2 results in the prefix of P 1 2 before the optional activities to be aligned with the prefix of P 1 1 . The optional activities and the suffix of P 1 2 following the optional activities are aligned with gaps as indicated in Fig.8(a) resulting in an undesirable alignment. Instead, an ideal alignment would be the one that is depicted under 'preferred alignment' in this case. Fig.8(b) illustrates the existence of a sequence of concurrent activities interspersed in P 1 2 . A possible misalignment and the preferred alignment are also depicted in Fig.8(b). For simplicity reasons, we illustrate the misalignment scenarios with both the traces having a single instance of P in Fig.8. However, one can imagine scenarios where multiple instances of P are manifested with uneven numbers across traces, and with some instances having an interleaved manifestation of optional/concurrent activities. In such cases, the misalignment scenarios depicted in both Figs. 7 and 8 are (together) possible.The information score metric defined earlier is not rich enough to capture such misalignments. Robust metrics to</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>7 and 8 are (together) possible.The information score metric defined earlier is not rich enough to capture such misalignments. Robust metrics to assess the quality of (mis-)alignment are needed. The definition of such quality metrics largely remains an open research topic in this area. We define a pattern based misalignment metric, viz., misalignment score in this paper.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Scenarios of misalignment in the presence of recurring patterns of execution.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Scenarios of misalignment in the presence of concurrent/optional activities interspersed with recurring patterns of execution.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 9 .</head><label>9</label><figDesc>Fig. 9. An example of global trace alignment (a) and semi-global trace alignment (b).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 10 .</head><label>10</label><figDesc>Fig. 10. An example of block shift refinement. (a) Original alignment. (b) Block shifted alignment with a gap column. (c) Block shifted alignment after the removal of gap column in (b).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Fig. 11 .</head><label>11</label><figDesc>Fig. 11. The misalignment score matrices (only the lower triangle is depicted). (a) Original alignment. (b) Block shifted refined alignment.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Fig. 13 .</head><label>13</label><figDesc>Fig. 13. An example of concurrent activity pruning and realignment. (a) Alignment obtained from Fig. 10(a) after removing the columns where concurrent activity 'f' manifests. (b) Alignment obtained after block shift refinement of (a). (c) Alignment obtained after inserting the concurrent activity in (b).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Fig. 14 .</head><label>14</label><figDesc>Fig. 14. ProM plugins realizing the framework for trace alignment.</figDesc><graphic coords="13,120.00,56.57,300.24,223.78" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Fig. 15 .</head><label>15</label><figDesc>Fig. 15. Invocation of the 'guide tree miner' plugin in ProM 6.0. The plugin requires an event log as input.</figDesc><graphic coords="13,120.01,318.09,300.24,110.59" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Fig. 17 .</head><label>17</label><figDesc>Fig. 17. Invocation of the 'trace alignment with guide tree' plugin in ProM 6.0. The plugin requires a guide tree as input.</figDesc><graphic coords="14,123.98,272.72,300.24,99.79" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Fig. 18 .</head><label>18</label><figDesc>Fig. 18. A couple of configuration steps of the trace alignment with guide tree plugin. (a) Scoring matrices configuration step. (b) Refine alignments configuration step.</figDesc><graphic coords="14,123.98,406.23,300.24,261.65" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head>Fig. 16 .</head><label>16</label><figDesc>Fig.<ref type="bibr" target="#b15">16</ref>. Visualization of the mined guide tree. The plugin has been configured to split the log into four clusters (the number of clusters was chosen to be four based on a priori knowledge on the process. This guide tree is for the telephone repair event log mentioned in Section 7). The pink nodes depict the root of the sub-tree corresponding to the four clusters. The tree can be expanded (up to two levels deep) by clicking a non-leaf node. Blue nodes indicate nodes that are expanded. (For interpretation of the references to color in this figure legend, the reader is referred to the web version of this article.)</figDesc><graphic coords="14,123.98,56.57,300.24,162.14" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_19"><head>Fig. 19 .</head><label>19</label><figDesc>Fig. 19. Trace alignment visualization with interactive features.</figDesc><graphic coords="15,119.96,120.74,300.30,163.93" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_20"><head>Fig. 20 .</head><label>20</label><figDesc>Fig. 20. Process model discovered using the Alpha miner in ProM 5.2 for the telephone repair log.</figDesc><graphic coords="15,38.72,325.04,462.62,83.59" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_21"><head>Fig. 21 .</head><label>21</label><figDesc>Fig. 21. Trace alignment of traces in telephone repair event log for one of the clusters. (a) Original alignment. (b) Concurrency pruned and refined alignment.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_22"><head>Fig. 22 .</head><label>22</label><figDesc>Fig. 22. Aligned traces for one of the clusters of the telephone repair log with annotations indicating how trace alignment can assist in answering some of the diagnostic questions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_23"><head>Fig. 24 .</head><label>24</label><figDesc>Fig. 24. Aligned traces for one of the clusters of the rental agency log with annotations indicating how trace alignment can assist in answering some of the diagnostic questions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_24"><head>Fig. 23 .</head><label>23</label><figDesc>Fig. 23. Trace alignment of the traces in one of the clusters of the rental agency log.</figDesc><graphic coords="18,105.74,77.42,334.90,150.73" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_25"><head>Fig. 25 .</head><label>25</label><figDesc>Fig. 25. Trace alignment of the traces in one of the clusters of the municipality log.</figDesc><graphic coords="19,284.48,56.54,216.07,306.19" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_26"><head>Fig. A1 .</head><label>A1</label><figDesc>Fig. A1. Heuristic net and dotted chart mined using the rental agency event log. (a) Heuristic net. (b) Dotted chart mined using the logical relative time perspective.</figDesc><graphic coords="22,111.36,116.02,325.44,551.95" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_27"><head>Fig. A2 .</head><label>A2</label><figDesc>Fig. A2. Heuristic net and dotted chart mined using the municipality event log. (a) Heuristic net. (b) Dotted chart mined using the logical relative time perspective.</figDesc><graphic coords="23,102.04,123.65,336.24,544.32" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>Are there any common patterns of execution in the traces?</figDesc><table><row><cell>components are essential/critical for this process. Such</cell></row><row><cell>essential components/functions form the backbone of</cell></row><row><cell>the process and should be conserved. Process re-</cell></row><row><cell>design/improvement efforts should focus on improv-</cell></row><row><cell>ing such critical components.</cell></row><row><cell>2. Where do process instances deviate and what do they</cell></row><row><cell>have in common? In practice, there is often a significant</cell></row><row><cell>gap between what is prescribed or supposed to hap-</cell></row><row><cell>pen, and what actually happens. There is a need to</cell></row><row><cell>augment process diagnostics with techniques that can</cell></row><row><cell>assist in finding deviations by analyzing raw traces in</cell></row><row><cell>the event logs. There are many domains/applications</cell></row><row><cell>where this requirement is felt, e.g., fault diagnosis,</cell></row><row><cell>anomaly detection, diagnosis of fraudulent insurance</cell></row><row><cell>claims, etc. Given an event log containing a mix of</cell></row><row><cell>traces where the system process functioned normally</cell></row><row><cell>and where it malfunctioned, analyzing these traces to</cell></row><row><cell>find deviations in malfunctioned/anomalous traces</cell></row><row><cell>from normal traces would give cues in understanding</cell></row><row><cell>the cause of malfunction/anomaly.</cell></row><row><cell>3.</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 1</head><label>1</label><figDesc>Computational time required to build the guide tree and align the traces. The notation used for time is t 7 d where t is the mean time over five different runs and d is the 95% confidence interval.</figDesc><table><row><cell>Log</cell><cell>No. unique</cell><cell>No.</cell><cell>Guide tree using AHC</cell><cell></cell><cell></cell><cell>Progressive</cell></row><row><cell></cell><cell>traces</cell><cell>features</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell>Feature extraction</cell><cell>Inter-object</cell><cell>Grouping</cell><cell>Alignment (ms)</cell></row><row><cell></cell><cell></cell><cell></cell><cell>(ms)</cell><cell>distance (ms)</cell><cell>objects (ms)</cell><cell></cell></row><row><cell>Repair example</cell><cell>77</cell><cell>167</cell><cell>1158 7 308</cell><cell>707 9</cell><cell>3 1 7 14</cell><cell>352 7 35</cell></row><row><cell>Rental agency</cell><cell>210</cell><cell>1415</cell><cell>1542 7 450</cell><cell>252 7 21</cell><cell>78 7 0</cell><cell>3865 7 243</cell></row><row><cell>Municipality</cell><cell>451</cell><cell>1234</cell><cell>1209 7 155</cell><cell>1018 7 43</cell><cell>284 7 17</cell><cell>5297 7 400</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>R.P.J.C. Bose, W.M.P. van der Aalst / Information Systems 37 (2012) 117-141</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_1"><p>ProM is an extensible framework that provides a comprehensive set of tools/plugins for the discovery and analysis of process models from event logs. See http://www.processmining.org for more information and to download ProM.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_2"><p>The number of identical traces is used when computing the scores during the alignment; substitution/indels are accounted for k times if there are k identical traces.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_3"><p>The actual alignment can be inspected at www.win.tue.nl/~jcbose/</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgments R.P.J.C. Bose and W.M.P. van der Aalst are grateful to Philips Healthcare for funding the research in process mining. Appendix A See Figs. A1 and A2.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Workflow mining: discovering process models from event logs</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M P</forename><surname>Van Der Aalst</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J M M</forename><surname>Weijters</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Maruster</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Knowledge and Data Engineering</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="1128" to="1142" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Context aware trace clustering: towards improving process mining results</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">P J C</forename><surname>Bose</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M P</forename><surname>Van Der Aalst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIAM International Conference on Data Mining</title>
		<meeting>the SIAM International Conference on Data Mining</meeting>
		<imprint>
			<publisher>SDM</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="401" to="412" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">S</forename><surname>Waterman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Introduction to Computational Biology: Maps, Sequences and Genomes</title>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>CRC</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A survey of multiple sequence comparison methods</title>
		<author>
			<persName><forename type="first">S</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">K C</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Chiu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bulletin of Mathematical Biology</title>
		<imprint>
			<biblScope unit="volume">54</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="563" to="598" />
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Multiple sequence alignment: algorithms and applications</title>
		<author>
			<persName><forename type="first">O</forename><surname>Gotoh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Advanced Biophysics</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="page" from="159" to="206" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A comprehensive benchmark study of multiple sequence alignment methods: current challenges and future perspectives</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Thompson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Linard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Lecompte</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Poch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PLoS ONE</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page">18093</biblScope>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Issues in bioinformatics benchmarking: the case study of multiple sequence alignment</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">R</forename><surname>Aniba</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Poch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Thompson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nucleic Acids Research</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">21</biblScope>
			<biblScope unit="page" from="7353" to="7363" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Upcoming challenges for multiple sequence alignment methods in the high-throughput era</title>
		<author>
			<persName><forename type="first">C</forename><surname>Kemena</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Notredame</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">19</biblScope>
			<biblScope unit="page" from="2455" to="2465" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">New challenges and strategies for multiple sequence alignment in the proteomics era</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Thompson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Poch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The Proteomics Protocols Handbook</title>
		<editor>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Walker</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="475" to="492" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Structural and evolutionary considerations for multiple sequence alignment of RNA, and the challenges for algorithms that ignore them</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">M</forename><surname>Kjer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Roshan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">G</forename><surname>Gillepie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Sequence Alignment: Methods, Models, Concepts and Strategies</title>
		<editor>
			<persName><forename type="first">M</forename><forename type="middle">S</forename><surname>Rosenberg</surname></persName>
		</editor>
		<imprint>
			<publisher>University of California Press</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="105" to="150" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Supporting process mining by showing events at a glance</title>
		<author>
			<persName><forename type="first">M</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M P</forename><surname>Van Der Aalst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 17th Annual Workshop on Information Technologies and Systems (WITS)</title>
		<meeting>the 17th Annual Workshop on Information Technologies and Systems (WITS)</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="139" to="145" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Workflow patterns, Distributed and Parallel Databases</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M P</forename><surname>Van Der Aalst</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">H M</forename><surname>Ter Hofstede</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Kiepuszewski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">P</forename><surname>Barros</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="page" from="5" to="51" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A general method applicable to the search for similarities in the amino acid sequences of two proteins</title>
		<author>
			<persName><forename type="first">S</forename><surname>Needleman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Wunsch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Molecular Biology</title>
		<imprint>
			<biblScope unit="volume">48</biblScope>
			<biblScope unit="page" from="443" to="453" />
			<date type="published" when="1970">1970</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">The multiple sequence alignment problem in biology</title>
		<author>
			<persName><forename type="first">H</forename><surname>Carillo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Lipman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal of Applied Mathematics</title>
		<imprint>
			<biblScope unit="volume">48</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="1073" to="1082" />
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Multiple sequence alignment</title>
		<author>
			<persName><forename type="first">D</forename><surname>Bacon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Anderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Molecular Biology</title>
		<imprint>
			<biblScope unit="volume">191</biblScope>
			<biblScope unit="page" from="153" to="161" />
			<date type="published" when="1986">1986</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><surname>Durbin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Eddy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Krogh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Mitchison</surname></persName>
		</author>
		<title level="m">Biological Sequence Analysis: Probabilistic Models of Proteins and Nucleic Acids</title>
		<imprint>
			<publisher>Cambridge University Press</publisher>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">On the complexity of multiple sequence alignment</title>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Jiang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computational Biology</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="337" to="348" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Recent progress in multiple sequence alignment: a survey</title>
		<author>
			<persName><forename type="first">C</forename><surname>Notredame</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Pharmacogenomics</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="131" to="144" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Multiple sequence alignment</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Edgar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Batzoglou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Current Opinion in Structural Biology</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="368" to="373" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Progressive sequence alignment as a prerequisite to correct phylogenetic trees</title>
		<author>
			<persName><forename type="first">D</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Doolittle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Molecular Evolution</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="351" to="360" />
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Progressive alignment of amino acid sequences and construction of phylogenetic trees from them</title>
		<author>
			<persName><forename type="first">D</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Doolittle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Methods in Enzymology</title>
		<imprint>
			<biblScope unit="volume">266</biblScope>
			<biblScope unit="page" from="368" to="382" />
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Algorithms for Clustering Data</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">K</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Dubes</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988">1988</date>
			<publisher>Prentice-Hall, Inc</publisher>
			<pubPlace>Upper Saddle River, NJ, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Hierarchical grouping to optimize an objective function</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">H</forename><surname>Ward</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the American Statistical Association</title>
		<imprint>
			<biblScope unit="volume">58</biblScope>
			<biblScope unit="page" from="236" to="244" />
			<date type="published" when="1963">1963</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Discovering expressive process models by clustering log traces</title>
		<author>
			<persName><forename type="first">G</forename><surname>Greco</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Guzzo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Pontieri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Sacca</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Knowledge and Data Engineering</title>
		<imprint>
			<biblScope unit="page" from="1010" to="1027" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Trace clustering based on conserved patterns: towards achieving better process models</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">P J C</forename><surname>Bose</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M P</forename><surname>Van Der Aalst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of BPM Workshops</title>
		<title level="s">Lecture Notes in Business Information Processing</title>
		<meeting>BPM Workshops</meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="page" from="170" to="181" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">MUSCLE: a multiple sequence alignment with reduced time and space complexity</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Edgar</surname></persName>
		</author>
		<idno type="DOI">10.1186/1471-2105-5-113</idno>
	</analytic>
	<monogr>
		<title level="j">BMC Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page">113</biblScope>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Rapid neighbor-joining</title>
		<author>
			<persName><forename type="first">M</forename><surname>Simonsen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Mailund</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">N S</forename><surname>Pedersen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithms in Bioinformatics</title>
		<imprint>
			<biblScope unit="page" from="113" to="122" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Outlier detection techniques for process mining applications</title>
		<author>
			<persName><forename type="first">L</forename><surname>Ghionna</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Greco</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Guzzo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Pontieri</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 17th International Symposium on Methodologies for Intelligent Systems (ISMIS)</title>
		<meeting>the 17th International Symposium on Methodologies for Intelligent Systems (ISMIS)</meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="150" to="159" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Mining usage scenarios in business processes: outlier-aware discovery and run-time prediction</title>
		<author>
			<persName><forename type="first">F</forename><surname>Folino</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Greco</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Guzzo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Pontieri</surname></persName>
		</author>
		<idno type="DOI">10.1016/j.datak.2011.07.002</idno>
	</analytic>
	<monogr>
		<title level="j">Data and Knowledge Engineering, in press</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Abstractions in process mining: a taxonomy of patterns</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">P J C</forename><surname>Bose</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M P</forename><surname>Van Der Aalst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Conference on Business Process Management (BPM)</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting>the International Conference on Business Process Management (BPM)</meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="volume">5701</biblScope>
			<biblScope unit="page" from="159" to="175" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">K A</forename><surname>De Medeiros</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M P</forename><surname>Van Der Aalst</surname></persName>
		</author>
		<title level="m">Process mining towards semantics</title>
		<meeting>ess mining towards semantics</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="35" to="80" />
		</imprint>
	</monogr>
	<note>Advances in Web Semantics-I</note>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">A survey of recent advances in hierarchical clustering algorithms</title>
		<author>
			<persName><forename type="first">F</forename><surname>Murtagh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Computer Journal</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="354" to="359" />
			<date type="published" when="1983">1983</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">A general theory of classificatory sorting strategies</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">N</forename><surname>Lance</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">T</forename><surname>Williams</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Computer Journal</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="373" to="380" />
			<date type="published" when="1967">1967</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Semantic process mining tools: core building blocks</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">K A</forename><surname>De Medeiros</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M P</forename><surname>Van Der Aalst</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Pedrinaci</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">16th European Conference on Information Systems</title>
		<imprint>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="1953" to="1964" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Mining context-dependent and interactive business process maps using execution patterns</title>
		<author>
			<persName><forename type="first">J</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">P J C</forename><surname>Bose</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M P</forename><surname>Van Der Aalst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">BPM 2010 Workshops</title>
		<title level="s">Lecture Notes in Business Information Processing</title>
		<editor>
			<persName><forename type="first">M</forename><surname>Zur Muehlen</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><surname>Su</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="volume">66</biblScope>
			<biblScope unit="page" from="109" to="121" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Multiple sequence alignment with user-defined anchor points</title>
		<author>
			<persName><forename type="first">B</forename><surname>Morgenstern</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">J</forename><surname>Prohaska</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Öhler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">F</forename><surname>Stadler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithms for Molecular Biology</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1" to="12" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Multiple sequence alignment using partial order graphs</title>
		<author>
			<persName><forename type="first">C</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Grasso</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Sharlow</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="452" to="464" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Combining partial order alignment and progressive multiple sequence alignment increases alignment speed and scalability to very large alignment problems</title>
		<author>
			<persName><forename type="first">C</forename><surname>Grasso</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="1546" to="1556" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">W</forename><surname>Ünther</surname></persName>
		</author>
		<title level="m">Process Mining in Flexible Environments</title>
		<meeting>ess Mining in Flexible Environments</meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
		<respStmt>
			<orgName>Eindhoven University of Technology</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. Thesis</note>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Conformance checking of processes based on monitoring real behavior</title>
		<author>
			<persName><forename type="first">A</forename><surname>Rozinat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M P</forename><surname>Van Der Aalst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information Systems</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="64" to="95" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">T G</forename><surname>Hornix</surname></persName>
		</author>
		<title level="m">Performance Analysis of Business Processes Through Process Mining</title>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
		<respStmt>
			<orgName>Eindhoven University of Technology</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Master&apos;s Thesis</note>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">PFAAT version 2.0: a tool for editing, annotating, and analyzing multiple sequence alignments</title>
		<author>
			<persName><forename type="first">C</forename><surname>Daniel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Paul</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Vidhya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Marco</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Eun-Jong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Yaoyu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shyamal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Brian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Shobha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Enoch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BMC Bioinformatics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page">381</biblScope>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">On the generalized distance in statistics</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">C</forename><surname>Mahalanobis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Sciences of India</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="49" to="55" />
			<date type="published" when="1936">1936</date>
		</imprint>
	</monogr>
	<note>Proceedings of the National Institute of</note>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Trace alignment in process mining: opportunities for process diagnostics</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">P J C</forename><surname>Bose</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">M P</forename><surname>Van Der Aalst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Conference on Business Process Management (BPM)</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting>the International Conference on Business Process Management (BPM)</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="volume">6336</biblScope>
			<biblScope unit="page" from="227" to="242" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
