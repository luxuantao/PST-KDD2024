<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Some collision detection protocols have been proposed for radio networks. Unfortunately these protocols do not guarantee that a station can sense all collisions [13, 14]. Thus, media with no collision detection are usually considered</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Danilo</forename><surname>Bruschi</surname></persName>
							<email>dbruschi@dsi.unimi.i</email>
							<affiliation key="aff0">
								<orgName type="department">Dipartimento di Science dell&apos; Informazione</orgName>
								<orgName type="institution">Universita`degli Studi di Milano</orgName>
								<address>
									<addrLine>Via Comelico 39</addrLine>
									<postCode>I-20135</postCode>
									<settlement>Milano</settlement>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
							<affiliation key="aff0">
								<orgName type="department">Dipartimento di Science dell&apos; Informazione</orgName>
								<orgName type="institution">Universita`degli Studi di Milano</orgName>
								<address>
									<addrLine>Via Comelico 39</addrLine>
									<postCode>I-20135</postCode>
									<settlement>Milano</settlement>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><roleName>Massimiliano</roleName><forename type="first">Del</forename><surname>Pinto</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Dipartimento di Science dell&apos; Informazione</orgName>
								<orgName type="institution">Universita`degli Studi di Milano</orgName>
								<address>
									<addrLine>Via Comelico 39</addrLine>
									<postCode>I-20135</postCode>
									<settlement>Milano</settlement>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Some collision detection protocols have been proposed for radio networks. Unfortunately these protocols do not guarantee that a station can sense all collisions [13, 14]. Thus, media with no collision detection are usually considered</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">931297225D86CF489DFB6A99E198006B</idno>
					<note type="submission">Received: August 1994 / Accepted: August 1996</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T17:09+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>Mobile computing -Broadcast -Distributed algorithms</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>In this paper, we prove a lower bound on the number of rounds required by a deterministic distributed protocol for broadcasting a message in radio networks whose processors do not know the identities of their neighbors. Such an assumption captures the main characteristic of mobile and wireless environments [3], i.e., the instability of the network topology. For any distributed broadcast protocol , for any n and for any D6n/2, we exhibit a network G with n nodes and diameter D such that the number of rounds needed by for broadcasting a message in G is (D log n). The result still holds even if the processors in the network use a different program and know n and D. We also consider the version of the broadcast problem in which an arbitrary number of processors issue at the same time an identical message that has to be delivered to the other processors. In such a case we prove that, even assuming that the processors know the network topology, (n) rounds are required for solving the problem on a complete network (D"1) with n processors.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Packet radio networks (radio networks in the following) are among the most popular kind of multiple access networks, i.e., networks in which multiple processors share the same transmission channel (for a survey see <ref type="bibr" target="#b11">[12]</ref>). Their basic advantage is represented by mobility, that is, processors in a radio network may be mobile. Due to this characteristic, radio networks have recently received an increasing interest. In fact techniques and algorithms developed for radio networks can be easily adapted to many applications of the ever growing field of mobile and wireless computing.</p><p>Various models of radio networks can be found in the literature, each depending on different parameters such as for example: (1) whether a Time-division or a Frequencydivision scheme is adopted, (2) whether every two processors are within hearing range of each other (single-hop radio network) or not (multi-hop radio network), (3) whether a collision detection mechanism is provided.</p><p>In this paper we consider the most studied model of radio networks consisting of multi-hop, time-slotted radio networks without collision detection mechanism. More precisely, throughout the paper by radio network we intend a set of geographically dispersed processors which may be stationary or mobile. Processors communicate in synchronous time-slots or rounds; in each round a processor can either transmit or keep silent. The communication medium is characterized by the following properties: selective transmission is impossible whenever a node transmits, all of its neighbors (nodes within hearing range) receive the transmission; collision of received messages may occur if more than one neighbor transmit during the same time-slot, preventing correct message reception.</p><p>We are interested in the broadcast problem in radio networks. Broadcast is the task initiated by a single processor, called source, whose goal is to send a single message m to all the processors in the network. The broadcast problem in radio networks has been considered by many authors, in particular both randomized and deterministic solutions have been proposed. Their complexity is estimated as the number of rounds required by the protocol for delivering the message m ''generated'' by the source node to all the network nodes. Common parameters used for expressing such a complexity measure are: n, the number of processors in the network and D, the diameter of the network.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Previous results</head><p>A lower bound of (D) on any broadcast protocol easily follows from the fact that a message has to traverse the entire network. In <ref type="bibr" target="#b0">[1]</ref> Alon et al. improved such a bound by proving that any broadcast protocol (either In mobile environments, the diameter of the network is usually unknown to the processors and only a bound on the size of the network is available. However, since we are proving a lower bound, our assumptions strengthen the result deterministic or randomized) requires (D#log n) rounds of transmission. They show a diameter-2 network where any broadcast protocol requires (log n) rounds to terminate. As also noted by the authors, such a result is significant for small diameter networks but it is unsatisfactory for networks with a diameter (n).</p><p>The first randomized distributed broadcast protocol was given in <ref type="bibr" target="#b1">[2]</ref> and works in expected O(D log n#log n) rounds. For networks with diameter D"O(log n) this protocol matches the above mentioned lower bound by Alon et al. In 1993 Kushilevitz et al. <ref type="bibr" target="#b8">[9]</ref> proved a (D log(n/D)) lower bound on the expected number of rounds required by any randomized broadcast protocol. Thus, for D6n\C, where '0 is any constant, such a bound is tight.</p><p>In this paper we consider deterministic broadcast protocols which will be called simply broadcast protocols henceforth. Deterministic protocols are important as they allow to define an a priori known bound on the maximum delay of message transmission. Such a characteristic makes deterministic broadcast protocols primary elements in the realization of time-dependent applications.</p><p>Among deterministic protocols, we can distinguish between centralized and distributed ones. Centralized protocols take a network G"1Â», E2 and a source node as input and produce a schedule for broadcasting the message from the source to the rest of the network. On the other hand, in the distributed case, it is usually assumed that the topology of the network is not known in advance.</p><p>In <ref type="bibr" target="#b5">[6]</ref> a centralized broadcast protocol is exhibited which works in O(D log n) rounds. By the result proved in <ref type="bibr" target="#b0">[1]</ref>, such a protocol is optimal for networks with constant diameter. For networks with a bigger diameter a recent protocol by Gaber et al. can be applied. In <ref type="bibr" target="#b7">[8]</ref> Gaber et al. exhibit a broadcast protocol which works in O(D#log n). Thus, for networks with D" (log n), such a protocol represents an optimal solution to the centralized deterministic broadcast problem.</p><p>The main drawback of centralized protocols is the fact that they require an a priori knowledge of the topology of the network. Clearly, this is too stringent a requirement when mobile environments are considered. Distributed protocols are more suitable in such situations.</p><p>Deterministic distributed broadcast protocols have been previously considered by Chlamtac et al. and by Bar-Yehuda et al. in <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b1">2]</ref>. Here we are interested in a result contained in <ref type="bibr" target="#b1">[2]</ref>, where it is shown that there exists a family of diameter-2 networks in which any deterministic distributed broadcast protocol requires (n) rounds of transmissions, given that the processors in the network know n and the identities of their neighbors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Results of the paper</head><p>In the first part of the paper we consider deterministic distributed broadcast protocols for networks whose processors do not have knowledge of their neighbors (i.e., processors in the network do not know the identities of their neighbors). Such an assumption is motivated by the fact that networks whose processors do not have knowledge of their neighbors model most of the situations occurring in mobile environments or in high speed networks with frequent reconfigurations <ref type="bibr" target="#b2">[3]</ref>.</p><p>For any distributed protocol , for any n and for any D6n/2, we exhibit a network G such that the number of rounds needed by for broadcasting a message in G is (D log n). The result holds even if each processor in the network uses a different program and knows n and D. The lower bound we obtain is particularly significant for networks with D" (n). In such a case distributed broadcast is evidently more difficult than centralized broadcast, for which a O(D) solution has been given by Gaber et al. Moreover, for smaller values of D (particularly, D"O(n\C)) the results of <ref type="bibr" target="#b8">[9]</ref> say that the (D log n) bound holds also for randomized protocols.</p><p>In the second part of the paper we also consider a slightly different version of the broadcast problem in which an arbitrary number of processors may concurrently issue an identical message which has to be delivered to the other processors (this problem gives rise to the weak unison problem <ref type="bibr" target="#b10">[11]</ref> and the wakeup problem <ref type="bibr" target="#b6">[7]</ref>). We prove that, when deterministic solutions are considered, this version of broadcast is more difficult than the version we have considered so far. We show that any deterministic distributed protocol needs (n) rounds for solving the ''multisource'' broadcast problem on a complete graph (D"1) with n nodes, even under the optimistic hypothesis that the processors in the network know the network topology. On the contrary, the ''single'' source version of the problem can be solved on the same graph in O(1) rounds. For the sake of completeness, we also recall that when we consider randomized solutions the above mentioned protocol by <ref type="bibr" target="#b1">[2]</ref> applies to both versions of the problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Preliminaries</head><p>A multi-hop radio network G can be defined as an undirected graph G"1Â», E2 where Â»"+p , 2 , p L , is the set of radio stations, including a distinguished one, s3Â», called the source or initiator, and E is the set of links connecting pairs of radio stations. Thus, we will refer to G as a graph in the obvious way and we will interchangeably refer to radio stations as nodes or processors and links as edges. An edge between nodes v and u implies that v can send messages to u and vice versa. Also, v is u's neighbor and u is v's neighbor. W.l.o.g. we assume that the processors in G have identifiers denoted 1 through n.</p><p>Radio stations communicate by exchanging messages. Let M be the set of messages, let ^,M be a value that indicates ''no message'' and let M"M6+^,. Communications take place in synchronous time-slots. A time-slot (or round) consists of either the sending of a message by some processors to each of their neighbors, or, in case of successful transmission, the receiving of this message. The identity of the sender of each message, as well as the round in which the message is sent are assumed to be part of the message. At any given round i, the message history of node j is denoted by hH G and consists of the set of messages j has sent and received so far. In each time-slot, including timeslot 0, each radio station p is characterized by a local state that indicates whether p acts as a transmitter (Â¹ ) or as a receiver (R). Let "+Â¹, R, be the set of states. A processor's view at round i consists of its processor name, local state, message history and round number. In case of the source s, the view also includes a message m. Let Â»iew N be the set of all possible views over all rounds for processor p.</p><p>Each radio station p executes a local protocol</p><formula xml:id="formula_0">N "( N , N</formula><p>), where N : Â»iew N P is the state transition function, which specifies the state each processor enters at the end of round k, k70, as a deterministic function of the processor's view at round k. N : Â»iew N PM is the message function, which is applied only when p enters the transmitter state at round k, and specifies what messages the processor should send at round k#1. In particular, we assume that each processor p, different from the source, will transmit some message different from ^only if it has received a message in some previous time-slot. A processor receives the message m in a specific time-slot j if and only if it is in the receiver state at that time-slot and exactly one of its neighbors transmits m at time-slot j. In such a case, we also say that the j-th time-slot is successful.</p><p>A distributed protocol for a radio network G" 1Â», E2, "Â»""n, is a collection of n local protocols, i.e., "+ N , p3Â»,, where N is the local protocol executed by processor p. We study distributed broadcast protocols; in these protocols at the initial time-slot the source node is the only node in the transmitter state and it transmits message m to all its neighbors. The ultimate goal of a broadcast protocol is to propagate m to all the processors in the network as fast as possible. In order to achieve such a goal, a broadcast protocol determines the broadcast schedule Â¸ , which specifies the set of processors which are in the transmitter state for each time-slot i.</p><p>Intuitively, these are the potential transmitters of the message m. More formally, Â¸ "+Â¹ 2 Â¹ J , where Â¹ "+s, and Â¹ G&gt; "+p: N "Â¹ at the end of round i,, 06i6l!1. The broadcast is completed at time-slot l, if all the processors have received m at one of time-slots 0, 1, 2 , l.</p><p>By definition, distributed broadcast protocols are not topology dependent, i.e., they must run on an arbitrary network. Thus, our strategy for proving a lower bound on such protocols is that of exhibiting a particular class of networks for which the lower bound holds. More precisely, a broadcast protocol for a class of networks C is a deterministic broadcast protocol that for every G(Â», E)3C and any assignment : +p , 2 , p L ,P+1, 2 , n, to the nodes of G completes the broadcast at time-slot t, for some integer t, when executed on the graph G with the ID assignment . In the following, (x) will denote the identity associated by to a generic processor x.</p><p>The class of radio networks C we will use for our lower bound argument is so defined. Given n and D6n/2 a generic member of C is indicated as CL " " (1Â», E2 and is defined as follows. CL " is a layered network of D#1 layers. The first layer (layer 0) contains node s, which is the initiator of the broadcast. Each of the next D!1 layers (layers 1, 2, 2 , D!1) consists of h"W n/D X nodes, h72. Layer D contains all the remaining nodes. Node s is connected to all the nodes of layer 1. All the nodes of layer i, 26i6D, are connected to two nodes 1p G\ , q G\ 2 of layer i!1. Only two nodes 1p G , q G 2 of layer i, 16i6 D!1, are connected to all the nodes of layer i#1. There are no edges among all the nodes of the layer i, 16i6D.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">The (D log n) lower bound</head><p>In this section we show that given an arbitrary broadcast protocol , two integer values n and D6n/2, it is always possible to find a network CL " where needs (D log n) rounds for delivering the message m from s to all the nodes in CL " . This implies that no deterministic broadcast protocol exists which solves the broadcast problem in less than O(D log n) rounds.</p><p>By the topological properties of the networks in C and by the fact that a processor can transmit a message only after receiving m, it can be immediately verified that the broadcast progresses in a layer by layer fashion. Thus, the total amount of rounds required for broadcasting a message on CL " from the source s is given by the sum of the number of rounds required for forwarding a message from layer i to layer i#1, 16i(D.</p><p>Thus, the first step in proving the (D log n) lower bound will be that of proving a lower bound on the number of rounds needed for executing the elementary step. The proof of this result is preceded by a technical lemma in which we prove that, given a set S-+1, 2 , n, of cardinality N72 and an arbitrary schedule Â¹" +Â¹ , 2 , Â¹ R , of length t6log(N/2), where Â¹ G -S, 16i6t, it is always possible to find a pair of elements +x, y,-S, which is never successfully hit by Â¹, i.e., such that either both x and y or none of them belong to Â¹ H , 16j6t.</p><p>Lemma 3.1. Given a set S-+1, 2 , n, of cardinality N72 and an arbitrary scheduling Let S be set S after the initialization and let S H , 16j6t be the set computed after the j-th iteration of the procedure findpair. We will now prove that the set S R , i.e. the final set computed by the procedure findpair, contains at least a pair of values, and each pair of values contained in S R is never hit by Â¹ H , 16j6t"log(N/2), that is (1) "S R "72;</p><formula xml:id="formula_1">Â¹"+Â¹ , 2 , Â¹ R ,, t6log(N/2), Â¹ G -S,</formula><p>(2) â+x, y,-S R , 16j6t, "Â¹ H 5+x, y,"91.</p><p>(1) We prove by induction that ( ) âj "S H "7 N 2H</p><p>When j"0 trivially holds. Suppose property ( ) is satisfied for j: we will prove that ( ) is true also for j#1. In fact, the set S H is partitioned during step ( j#1) into two sets, namely S H 5Â¹ H&gt; and S H 5Â¹ H&gt; . Let S H&gt; be the set of greatest cardinality. Thus, "S H&gt; "7 "S H " 2 .</p><p>Therefore, by the induction hypothesis:</p><formula xml:id="formula_2">"S H&gt; "7 "S " 2H&gt; " N 2H&gt; .</formula><p>Thus, after t6log(N/2) steps</p><formula xml:id="formula_3">"S R "7 N 2 , "2.</formula><p>(2) It can be easily verified that S R -S R\ -2 -S H -2 -S . Thus, for all +x, y,-S R , +x, y,-S H for all j6t. Let us assume that there exists an l such that at the end of the procedure findpair "Â¹ 5+x, y,""1. The following two cases must be considered:</p><p>during the l-th iteration of the procedure findpair S J "S J\ 5Â¹ M J . In this case, our assumption becomes true only if during a subsequent iteration j'l of the procedure findpair the element +x, y,5Â¹ J is added to S H ; in such a case, however, we would have S H -/ S J , thus we get a contradiction.</p><p>during the l-th iteration of the procedure findpair S J "S J\ 5Â¹ J ; however since both x and y belong to S, the element +x, y,!Â¹ J has to be added to S H during some iteration j'l of the procedure findpair. Thus, S H -/ S J which is again a contradiction. á®</p><p>We will now use the previous lemma for proving a lower bound on the number of rounds required by any distributed deterministic broadcast protocol for forwarding a message between two consecutive layers in a network G(Â», E)3C.</p><p>We prove the lower bound by assuming that when a processor at layer i receives m, together with m it receives also the whole history of the network and the identities of all the processors at layers j, j(i. This information may not be available to the processors at layer i: in fact, such processors only know the list of the previous successful transmitters and the successful rounds (in real situations only this information can be piggybacked to the message m). However, the availability of additional information makes the lower bound stronger. Corollary 3.1. Given an arbitrary broadcast protocol , two integers n and D6n/2, there exists a network CL " , which satisfies the following property. Â¸et i, 16i(D, be the last layer of processors in CL " that have successfully received the message m, and let S G\ be the set containing the identities of all processors in CL " belonging to layers j, j(i. Â¹hen, it is always possible to determine an assignment for 1p G , q G 2, such that (p G ), (q G )3++1, 2 , n,!S G\ , and r' log((n!(i!1)h)/2) rounds will be required by to forward m from layer i to layer i#1, where h"W n/D X.</p><p>Proof. First of all note that when both p G and q G receive message m they do not know each other's identity, i.e., (p G ) and (q G ), since we have assumed that the processors in the network do not have neighbors knowledge. In the opposite case, such identities could have been sent to p G and q G by their predecessors, piggybacked on m. Furthermore, the assumption that a processor keeps silent until it has received a message guarantees that, p G do not send its own identity to q G and vice versa before the arrival of the message.</p><p>Thus, in order to forward m from layer i to layer i#1, the protocol has to generate a schedule Â¸ "+Â¹ , 2 , Â¹ R ,, such that for some value of h, 16h6t, either (p</p><formula xml:id="formula_4">G )3Â¹ F or (q G )3Â¹ F but not both, i.e. such that "+(p G ), (q G ),5Â¹ F ""1. Because of the topologi- cal structure of CL " , if both (p G</formula><p>) and (q G ) transmit in the same time-slot, a collision occurs and processors at layer i#1 will not receive m.</p><p>Since ignores both (p G ) and (q G ), will guess them from a set of possible candidates known to it, which we assume to be S"+1, 2 , n,!S G\ . Note that the content of S G\ may not be available to (see the statement just before this corollary). Such an assumption strengthens our result.</p><p>By definition of CL " , "S""(n!(i!1)h), thus by Lemma 3.1, regardless of the scheduling Â¹ of length t6log((n!(i!1)h)/2) we consider, it is always possible to find a pair of values contained in S which cannot be successfully hit by Â¹. This implies that there exists a network CL " with a labeling for 1p G , q G 2, which forces to execute a schedule of length greater than log((n!(i!1)h/2) before successfully hitting either (p G ) or (q G ), thus forwarding m from layer i to the next layer. Our construction can be applied to an arbitrary schedule of length t6log((n!(i!1)h/2)), and it is solely based on the assumption that such a schedule has been obtained ignoring the identities of the processors p G and q G . Thus, the schedule Â¸ can be determined by using any kind of information which can be contained in View N but the one just mentioned, without affecting the proof. á® Our next step will be that of extending Corollary 3.1 from two consecutive layers of a network CL " to the entire network CL " . Thus for any protocol we will exhibit a network that forces to execute t' "\ G log((n!(i!1)h)/2)" (D log n) rounds of transmission for broadcasting a message m in CL " .</p><p>Theorem 3.1. Given an arbitrary deterministic distributed broadcast protocol , two integers n and D6n/2, there always exists a network CL " where needs (D log n) rounds of transmission for broadcasting a message.</p><p>Proof. We will show now that given it is always possible to find a labeling : +p , 2 , p L ,P+1, 2 , n, for CL " such that (D log n) rounds of transmission are required for the successful termination of the broadcast. The schedule is computed by the following procedure. PROCEDURE findlabeling; begin SQ+1, 2 , n,;</p><formula xml:id="formula_5">for i : "1 to D!1 do assign a pair of values 1 (p G ), (q G )23S to 1p G , q G 2, which forces</formula><p>to execute a schedule of length greater than log((n!(i!1)h)/2) for forwarding m from layer</p><formula xml:id="formula_6">i to layer i#1 of CL " ; SQS!+ (p G ), (q G</formula><p>),; assign h!2 values from S to the remaining processors belonging to the i-th layer of CL " ; remove from S the values used in the previous step; endfor; end.</p><p>What is left to prove is that the labeling computed by the procedure findlabeling exists, it is consistent and, when it is applied to the network CL " it forces to execute (D log n) rounds of transmission, before terminating successfully.</p><p>Corollary 3.1 guarantees that the pair 1 (p G ), (q G )2 exists for all values of i, 16i6D!1. The assignments determined at each step of the procedure findlabeling are consistent because identifiers already ''used'' once, will never be considered in successive iterations. Such identifiers are permanently removed from the set S, which however always satisfies the cardinality requirements of Corollary 3.1.</p><p>By Corollary 3.1, at the end of the i-th iteration of the procedure findlabeling identifiers are found for the pair of processors 1p G , q G 2, which can never be hit by an arbitrary schedule of length t, t6log((n!(i!1)h)/2). Furthermore, such assignments are reciprocally consistent. Once the procedure findpair has terminated, we have a labeling , which forces the protocol to execute a total number of rounds t for broadcasting a message, when it is applied to the network CL " . The total number of rounds t is defined by the following expression:</p><formula xml:id="formula_7">t' "\ G log (n!(i!1)n/D) 2 " "\ G log nD!(i!1)n D ! "\ G log 2 " "\ H (log(n(D!j)))! "\ H log D!D#1 " "\ H log(D!j)# "\ H log n! "\ H log D!D#1 "log D!#(D!1) log n!(D!1) log D!D#1.</formula><p>Let now k be a suitable constant by using Stirling's approximation for factorial numbers for estimating log D!, we obtain:</p><formula xml:id="formula_8">t'D log D! D!1 ln 2 #k(log(D!1))#(D!1) log n !(D!1) log D!D#1 7(D!1) log n#k(log(D!1))!3D" (D log n). á® 4 A comparison of different kinds of broadcast</formula><p>The term broadcast is usually used to mean the general task of distributing messages to all the processors in a network. Different versions of broadcast have been proposed so far. We can distinguish among the following cases:</p><p>a) a single message m has to be delivered (this is the version of broadcast we have considered so far), b) an arbitrary number of copies of the same message m, issued at the same time has to be delivered (slight modifications of this problem give rise to the weak unison problem <ref type="bibr" target="#b10">[11]</ref> and the wakeup problem <ref type="bibr" target="#b6">[7]</ref>), c) an arbitrary number of messages, m , 2 , m I , issued at the same time has to be delivered <ref type="bibr" target="#b9">[10]</ref>.</p><p>In this section we show that in radio networks where processors know the network topology problem (b) is more difficult than problem (a). In fact, we prove that in such systems any distributed protocol solving problem (b) requires at least a linear number of rounds in a complete graph with n nodes. On the other hand, problem (a) can be solved in a single round in a complete graph with n processors.</p><p>Firstly, we briefly recall some definitions. Given a radio network G"1Â», E2, w.l.o.g. we assume that the processors in G have identifiers denoted 1 through n. We say that a processor p3+1, 2 , n, is an initiator if it possesses message m at the initial time-slot. Â¼e also assume that all the processors in G know G's topology and may use such a knowledge in order to get faster protocols. Thus a processor's view at round i consists of: processor name, local state, message history, round number and some representation of graph G. If the processor is an initiator the view also includes a message m. Thus both the transition function N and the message function N of processor p may depend on the network topology.</p><p>For a fixed radio network G"1Â», E2, a broadcast protocol which solves problem (b) is a distributed protocol which for any subset S-Â» of initiators finds a broadcast schedule Â¸ , such that Â¸ "+Â¹ 2 Â¹ J , where Â¹ -S and Â¹ G&gt; "+p : N "Â¹ at the end of round i,, 06 i6l!1. The broadcast is completed at time-slot l, if all the processors in G have received m at one of time-slots 0, 1, 2 , l. On the other hand, for a given network G"1Â», E2, a protocol solving problem (a) is a deterministic distributed protocol which for any initiator p3Â» finds a broadcast schedule such that, within time-slot t, for some integer t, all the processors in G have received m. It can be easily verified that when G is a complete graph with n nodes, problem (a) can be solved by the protocol which generates the one turn schedule Â¹" ++1, 2 , n,,. Let S be set S after the initialization and S H , 16j6n!2 be the set computed by the procedure no-hitting after the j-th iteration of the main loop. In particular, we assume "S L\ . It can be easily seen that S L\ -S L\ -2 -S H -2 S . It remains to prove that the set computed at the end of the procedure no-hitting satisfies the following properties.</p><p>(i) " "'1: during such a procedure we remove at most one element for any component of Â¹ from set S, thus atmost n!2 elements are removed from S by the end of the procedure. (ii) For all values of j, 16j6n!2, " 5Â¹ H "91. Assume that there exists an l, 16l6n!2, such that " 5Â¹ J ""1. The following two cases must be considered:</p><p>1. during the l-th iteration of the main loop of the procedure no-hitting it is verified that S J 5Â¹ J is a singleton x, then x is removed by S J . Thus, our assumption is verified only if during a subsequent iteration j'l of the procedure no-hitting the element x is added to S H , but in such a case we would have S H -/ S J , with j'l, which is a contradiction.</p><p>2. during the l-th iteration of the procedure no-hitting "S J 5Â¹ J "91; we distinguish two further cases: a) "S J 5Â¹ J "", b) "S J 5Â¹ J "'1. Case (a) is similar to the just considered case <ref type="bibr" target="#b0">(1)</ref>. When case (b) holds, the index l is added to set I, and our assumption is verified if, during subsequent iterations of the procedure no-hitting, elements belonging to Â¹ J are continuously removed until "S H 5Â¹ J ""1 for a certain value j, l(j6n!2. Such a situation, however, would be recognized by the instructions in the inner loop of the procedure no-hitting and the element belonging to S J 5Â¹ J would be removed from S. At this point the considerations made for the case (1) hold.</p><p>Thus, for an arbitrary broadcast schedule Â¹ of length n!2 we have found a set of initiators , " "72, which cannot be successfully hit by Â¹; this means that an arbitrary protocol solving version (b) of the broadcast problem needs (n) rounds of transmission for terminating successfully. á®</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Concluding remarks</head><p>We have shown an (D log n) lower bound on the number of time-slots required by a distributed deterministic protocol for broadcasting a message in radio networks of diameter D with n processors, which do not know the identities of their neighbors. However, our lower bound does not hold if processors awake spontaneously (i.e., some processor transmits before receiving a message) or some collision detection mechanism is provided.</p><p>We also proved a (n) lower bound on the number of rounds required by a distributed protocol for broadcasting an arbitrary number of copies of the same message m, issued at the same instant, in a network with n processors and diameter D"1. In this case we assumed that the processors know the network topology.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>Theorem 4.1. Any distributed protocol which solves problem (b) on a fixed radio network G where the processors know the network topology, needs (n) rounds of transmission.</figDesc><table><row><cell cols="3">"1Â», E2 be an n-clique. We will show that Proof. Let G L for any schedule Â¸ "+Â¹ , 2 , Â¹ , there always exists L\ a subset of initiators -+1, 2 , n,, such that Â¸ never</cell></row><row><cell cols="3">successfully hits the processors in . That is, for all i,</cell></row><row><cell cols="3">16i6n!2, 5Â¹ G no correct transmissions of m can occur in n!2 rounds, is not a singleton. This implies that</cell></row><row><cell cols="3">and no protocols exist which terminate in less than (n!2)</cell></row><row><cell cols="3">rounds on version (b) of the broadcast problem. The set</cell></row><row><cell cols="3">can be computed by the following procedure.</cell></row><row><cell cols="3">PROCEDURE no-hitting</cell></row><row><cell>input Â¹ begin</cell><cell>, 2 , Â¹ L\</cell><cell>;</cell></row><row><cell cols="2">SQ+1, 2 , n,;</cell><cell></cell></row><row><cell>IQ;</cell><cell></cell><cell></cell></row><row><cell cols="3">for j : "1 to n!2 do</cell></row><row><cell cols="3">if S5Â¹ H then begin is a singleton +x,</cell></row><row><cell cols="2">SQS!+x,;</cell><cell></cell></row><row><cell cols="2">for all i3I do</cell><cell></cell></row><row><cell cols="3">if S5Â¹ G then begin is a singleton +y,</cell></row><row><cell cols="3">SQS!+y,;</cell></row><row><cell cols="2">IQI!+i,;</cell><cell></cell></row><row><cell>end</cell><cell></cell><cell></cell></row><row><cell>end</cell><cell></cell><cell></cell></row><row><cell cols="2">else IQI6+ j,;</cell><cell></cell></row><row><cell>endfor</cell><cell></cell><cell></cell></row><row><cell cols="2">output: S;</cell><cell></cell></row><row><cell>end.</cell><cell></cell><cell></cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgements. The authors wish to thank E. Rosti for her valuable suggestions. They are grateful to the anonymous referees, whose suggestions contributed to improve both the presentation and the scientific content of the paper.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Danilo Bruschi received the B.Sc. degree in computer science from the Universita`degli Studi di Milano in 1985, and the Ph.D. degree in computer science in 1989. He spent a postdoctoral year at the University of Wisconsin, Madison in the computer science department. In 1991 he joined the department of computer science at Universita`di Milano where he is currently an associated professor. His current research interests include: distributed algorithms, fault tolerance and mobile computing. Damilo Bruschi is a member of the Association for Computing Machinery.</p><p>Massimiliano Del Pinto received the B.Sc. degree in computer science from the Universita`degli Studi di Milano in 1994. He is currently involved in a research program at the computer science department of the Universita`di Milano on collision free algorithms for mobile environments.</p><p>.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A lower bound for radio broadcast</title>
		<author>
			<persName><forename type="first">N</forename><surname>Alon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bar-Noy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Linial</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Peleg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J Comput Syst Sci</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="290" to="298" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">On the time complexity of broadcast in multi-hop radio networks: an exponential gap between determinism and randomization</title>
		<author>
			<persName><forename type="first">R</forename><surname>Bar-Yehuda</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Goldreich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Itai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J Comput Syst Sci</title>
		<imprint>
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="104" to="126" />
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Evaluation of the random token protocol for high-speed and radio networks</title>
		<author>
			<persName><forename type="first">I</forename><surname>Chlamtac</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ganz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE J Select Areas Commun</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">6</biblScope>
			<date type="published" when="1987-07">July 1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Tree based broadcasting in multi-hop radio networks</title>
		<author>
			<persName><forename type="first">I</forename><surname>Chlamtac</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kutten</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans Comput</title>
		<imprint>
			<date type="published" when="1987-10">October 1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Distributed wave broadcasting in mobile multi-hop radio networks</title>
		<author>
			<persName><forename type="first">I</forename><surname>Chlamtac</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Weinstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc of 7th Int Conf Distrib Comput Syst</title>
		<meeting>of 7th Int Conf Distrib Comput Syst</meeting>
		<imprint>
			<date type="published" when="1987-09">September 1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">The wave expansion approach to broadcasting in multihop radio networks</title>
		<author>
			<persName><forename type="first">I</forename><surname>Chlamtac</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Weinstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans Commun</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="426" to="433" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The wakeup problem</title>
		<author>
			<persName><forename type="first">M</forename><surname>Fisher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Moran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Rudich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Taubenfeld</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc of STOC</title>
		<meeting>of STOC</meeting>
		<imprint>
			<biblScope unit="volume">90</biblScope>
			<biblScope unit="page" from="106" to="116" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Broadcast in radio networks</title>
		<author>
			<persName><forename type="first">I</forename><surname>Gaben</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Mansour</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc of SODA 95</title>
		<meeting>of SODA 95</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">An (D log(N/D)) lower bound for broadcast in radio networks</title>
		<author>
			<persName><forename type="first">E</forename><surname>Kushilevitz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Mansour</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc of PODC 93</title>
		<meeting>of PODC 93</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Fault-tolerant broadcasts and related problems</title>
		<author>
			<persName><forename type="first">V</forename><surname>Hadzilacos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Toueg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Distributed Systems</title>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Addison-Wesley</publisher>
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Time-message trade-offs for the weak unison problem</title>
		<author>
			<persName><forename type="first">A</forename><surname>Israeli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Kranakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Krizanc</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Santoro</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc of CIAC</title>
		<meeting>of CIAC<address><addrLine>Berlin Heidelberg New York</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<biblScope unit="volume">778</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Performance evaluation of multiple-access networks: introduction and issue overview</title>
		<author>
			<persName><forename type="first">Vok</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE J Select Areas Commun</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">6</biblScope>
			<date type="published" when="1987-07">July 1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Collision detection and multitone tree search for multiple-access protocols on radio channels</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">F</forename><surname>Lo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">T</forename><surname>Mouftah</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE J Select Areas Commun</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">6</biblScope>
			<date type="published" when="1987-07">July 1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Collision detection in radio channels</title>
		<author>
			<persName><forename type="first">R</forename><surname>Rom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Local area and multiple access networks</title>
		<imprint>
			<publisher>Computer Science Press</publisher>
			<date type="published" when="1986">1986</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
