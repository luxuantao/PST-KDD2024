<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Sampling-based Label Propagation for Balanced Graph Partitioning</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Adnan</forename><forename type="middle">El</forename><surname>Moussawi</surname></persName>
							<email>adnan.el-moussawi@lisn.fr</email>
							<affiliation key="aff0">
								<orgName type="laboratory">Laboratoire Interdisciplinaire des Sciences du Num?rique Orsay</orgName>
								<orgName type="institution" key="instit1">Universit? Paris-Saclay</orgName>
								<orgName type="institution" key="instit2">CNRS</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
							<affiliation key="aff3">
								<orgName type="laboratory">Sampling-based Label Propagation for Balanced Graph Partitioning. In</orgName>
								<address>
									<postCode>2022</postCode>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Ricardo</forename><surname>Rojas Ruiz</surname></persName>
							<email>ricardo.rojas@student-cs.fr</email>
							<affiliation key="aff1">
								<orgName type="laboratory">Laboratoire Interdisciplinaire des Sciences du Num?rique Orsay</orgName>
								<orgName type="institution" key="instit1">Universit? Paris-Saclay</orgName>
								<orgName type="institution" key="instit2">CNRS</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Nac?ra</forename><forename type="middle">Bennacer</forename><surname>Seghouani</surname></persName>
							<email>nacera.seghouani@lisn.fr</email>
							<affiliation key="aff2">
								<orgName type="laboratory">Laboratoire Interdisciplinaire des Sciences du Num?rique Orsay</orgName>
								<orgName type="institution" key="instit1">Universit? Paris-Saclay</orgName>
								<orgName type="institution" key="instit2">CNRS</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Ricardo</forename><forename type="middle">Rojas</forename><surname>Ruiz</surname></persName>
							<affiliation key="aff3">
								<orgName type="laboratory">Sampling-based Label Propagation for Balanced Graph Partitioning. In</orgName>
								<address>
									<postCode>2022</postCode>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Nac?ra</forename><surname>Bennacer</surname></persName>
							<affiliation key="aff3">
								<orgName type="laboratory">Sampling-based Label Propagation for Balanced Graph Partitioning. In</orgName>
								<address>
									<postCode>2022</postCode>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Sampling-based Label Propagation for Balanced Graph Partitioning</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1145/3489525.3511698</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-01-03T08:26+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Graph Partitioning</term>
					<term>vertex balance</term>
					<term>edge balance</term>
					<term>graph sampling</term>
					<term>parallel graph Computing</term>
					<term>label propagation</term>
					<term>Giraph</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>In this experience paper, we present new sampling-based algorithms for balanced graph partitioning based on the Label Propagation (LP) approach. The purpose is to define new heuristics to extend the multi-objective and scalable Balanced GRAph Partitioning algorithm B-GRAP proposed in <ref type="bibr" target="#b8">[9]</ref>. The main challenge is related to how to build a graph sample that ensures stability and improves the convergence and the partitioning quality which depend strongly on the structure of the graph. We defined two sampling-based heuristics named RD-B-GRAP and HD-B-GRAP in order to study the behavior of the propagation according to different quality measures related to the vertex and the edge balance, to the edge cut, and also to the propagation time. The results obtained on different graphs showed that the sampling-based algorithms improve the propagation time without affecting the balance between partitions. Moreover, The edge cut is slightly improved on some graphs.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>distributed systems achieve great improvements especially when clusters or machines work independently. However, inter-node communication in distributed graphs demands great execution time when the distribution of nodes and edges is not balanced <ref type="bibr" target="#b4">[5]</ref>. In this context, the aim of graph partitioning is to identify an optimal partition approach which can balance the workload of the graph and minimize the edge-cuts thereby reducing the communication between machines. Different kind of algorithms for graph partitioning are proposed in the literature such as spectral, multilevel, stream, machine learning-based and label propagation partitioning approaches <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr" target="#b21">22]</ref>.</p><p>In this paper we focused on the label propagation approach as an extension of B-GRAP a multi-objective and scalable Balanced GRAph Partitioning (B-GRAP) algorithm, which distributes vertices B-GRAP VB or edges B-GRAP EB in a balanced way <ref type="bibr" target="#b8">[9]</ref>. The main challenge is related to the seed nodes selection and to neighboring nodes that propagate labels that the stability, the convergence and the partitioning quality depend strongly on the structure of the graph. Sampling graph seems to be a promising way to select nodes based on their connections and degree to improve the performance of the partitioning and to reduce the computation time. We defined new sampling-based heuristics named RD-B-GRAP (Random Degree) and HD-B-GRAP (High Degree) in order to study the behavior of the propagation according to different quality measures related to the vertex and the edge balance, to the edge cut and also to the propagation time.</p><p>We used Giraph<ref type="foot" target="#foot_0">1</ref> programming model for Hadoop and ran the algorithms on different kind of large graphs of different structures with sizes going up to 42M vertices and 1.5B edges, by varying the number of partitions, the sampling parameters, and using several measures related to the partitioning balance quality and to the computation time. The results showed that the sampling-based algorithms reduce the label propagation time on all the graphs, with a gain going from 6% to 40% comparing to B-GRAP. Furthermore, the vertex and the edge balance of partitioning remained unchanged and stable on almost of graph data sets, while scaling the number of partitions. Moreover, The edge cut was slightly improved on some of the graphs and unchanged on the others.</p><p>In the following we give a review on the partitioning and the sampling approaches. In Section 3, we give some useful notations and preliminaries. Then, Section 4 details our sampling based label propagation algorithms. Section 5, presents the implementation environment and the experiment settings, followed by <ref type="bibr">Section 6</ref> which details our experiments and results. Finally, we conclude in Section 7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>During the last decade, research communities working on graph datasets have given a lot of interest to the definition of new strategies for large graph parallel computing and analytics in a distributed environment. This context opened up new challenges to define efficient graph partitioning algorithms <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b19">20]</ref>. One of the main challenges consists in defining methods that allow to balance the workload among the nodes of a distributed computing environment and to reduce, at the same time, the communication load over the network. In this section we discuss works about graph partitioning approaches, then we present briefly graph sampling purposes and applications.</p><p>Graph Partitioning. A common strategy in large graph partitioning is to use multilevel approaches <ref type="bibr" target="#b5">[6]</ref>. Their main idea is to generate a first partition on the basis of a reduced view of the graph in which a vertex represents many vertices of the original graph. For example a triangle of three vertices can be reduced to one. The algorithms then expands the graph taking into account the whole initial graph, such as METIS <ref type="bibr" target="#b14">[15]</ref> algorithm. Another known algorithm is Scotch <ref type="bibr" target="#b7">[8]</ref> which deals with the graph changes, in contrary to METIS. Streaming approaches <ref type="bibr" target="#b23">[24]</ref> process the graph iteratively. These methods are faster than multilevel algorithms but they build partitioning with lower quality, in term of cuts and it's generally difficult to parallelize streaming algorithms. Other works have used the label propagation approach (LP) <ref type="bibr" target="#b20">[21]</ref> to partition large graphs. LP was mainly used for community detection in social networks <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b12">13]</ref>. Making use of LP for the graph partitioning problem was motivated by the lightweight mechanism that uses the network structure to guide its progress. LP partitioning methods generate less intermediary results than multilevel approaches, which need to store many intermediate results such as the coarser graph, and run with a lower complexity. Furthermore, LP method is semantic-aware, given the existence of local closely connected substructures, a label tends to propagate within such structures. In <ref type="bibr" target="#b18">[19]</ref> the authors defined a distributed partitioning algorithm called Spinner that considers only edge balance. Spinner is based on LP approach and runs on the top of Giraph API.Compared to the previous work, Spinner supports parallelism and can adapt an existing partitioning to consider graph updates by adding or removing vertices and edges and changing the number of partitions. The algorithm divides ? vertices across ? partitions, while trying to keep similar the number of edges in each partition. In the same context other approaches have been proposed to take advantage from distributed computation and Map-Reduce programming paradigms. In <ref type="bibr" target="#b1">[2]</ref> the authors embedded the nodes onto a line, and then processed them in a distributed manner guided by a linear embedding order. Their focus was on balanced-partitioning and on minimizing the total cut size. Recently, <ref type="bibr" target="#b8">[9]</ref> proposed a multi-objective LP based partitioning algorithm B-GRAP. Comparing to previous methods, B-GRAP takes into account either edge-balance or vertex balance constraint. The authors showed experimentally that B-GRAP outperforms existing LP based partitioning approaches.</p><p>Graph sampling. A graph sample is a subset of vertices and/ or edges from original graph. The biggest advantage of sampling methods is their execution efficiency so that the graph transformation procedure won't take longer time than straightforward computation on original graph. It has a wide spectrum of applications, e.g. exploring, visualizing, scaling up analysis, etc. Commonly used techniques are vertex or edge sampling, traversal based sampling, substructure sampling to find patterns such as triangles and triads and streaming sampling <ref type="bibr" target="#b9">[10]</ref><ref type="bibr" target="#b10">[11]</ref><ref type="bibr" target="#b11">[12]</ref>. Sampling graph has evolved during the last decade to more advanced graph exploration approaches such as Forest Fire and Frontier sampling and Random Walk algorithm variants.</p><p>In our work, we aim to investigate the sampling approaches for graph partitioning problem. Combining the sampling with the graph partitioning could help to improve the performance of the partitioning and to reduce the computation time. More particularly, in the case of LP based approaches, a sample of the graph can be used to initiate the label propagation process, instead of using the whole graph <ref type="bibr" target="#b18">[19]</ref> or based on an heuristic <ref type="bibr" target="#b8">[9]</ref>. In fact, a subgraph sample which takes into account the graph structure and selects relevant nodes allows to propagate efficiently and rapidly the labels through the whole graph. Furthermore, comparing to multilevel partitioning approaches that use a coarsened graph as an an entry for the partitioning, the sampling requires less computation time and resources, as it uses few intermediate results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">BACKGROUND AND PRELIMINARIES 3.1 Problem Formulation and Notations</head><p>The label propagation algorithm was defined in the context of community detection in social networks <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b12">13]</ref>. This approach re-used in graph partitioning research context thanks to its lightweight and intuitive mechanism. Given a number of partitions of the graph, the naive LP algorithm simply works as follows: (i) At first, each vertex is assigned to a partition randomly; (ii) Then, the label of each vertex is propagated and updated iteratively to its neighborhood, where each vertex takes the most frequent label among its neighborhood as its own label. The process ends when labels no longer change. In the following we describe formally the LP algorithm.</p><p>Given a number of partitions ?, a directed graph ? = ?? , ?, ??, where ? is a set of vertices and ? a set of weighted edges with ? : ? ? R + . Let ? = {? } ? ?=1 be a set of partition labels defined by a labeling function ? : ? ? ? such that ? (?) = ? means that ? belongs to the partition with label ?. The na?ve LP algorithm proceeds as follows. Initially, a unique label ? ? is assigned to each vertex ?. Then, the label of each ? ? ? is propagated and updated iteratively to its neighborhood ? (?) = {? ? ? |(?, ?) ? (?, ?) ? ?} and is updated until a given convergence criteria is reached. The label updating is done by taking into account the most frequent label among ? (?) labels. More formally, let F LP (?, ?) be the frequency of a label ? in the neighborhood of ?, defined by:</p><formula xml:id="formula_0">F LP (?, ?) = ?? ? ?? (?) ? (?, ?)? ? (?), ?<label>(1)</label></formula><p>where ? (?) gives the current label of ? and ? is the Kronecker delta function, which is equal 1 if ? (?) = ?, and 0 otherwise. The label of vertex ? is replaced by the label that maximizes the frequency function:</p><formula xml:id="formula_1">? ? = argmax ? F LP (?, ?).</formula><p>If many maximal labels exist and do not include the current label of ?, one of them is randomly chosen. LP algorithm stops if ? ?? ? ?? F LP (?, ?) converges according to a given threshold ?. We note that na?ve LP algorithm does not take into account the directions of edges. To consider directed graphs, virtual edges are added <ref type="bibr" target="#b8">[9]</ref>, such that: ?(?, ?) ? ?, ? (?, ?) = 2 and if (?, ?) ? ?, (?, ?) is added with ? (?, ?) = 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">B-GRAP</head><p>B-GRAP <ref type="bibr" target="#b8">[9]</ref> aims to define a ?-balanced and LP-based partitioning algorithm that decreases the total cuts while considering the vertex balance or the edge balance constraints in directed graphs.</p><p>B-GRAP objective functions. The basic LP approach updates the labels without caring about balance, consequently the trivial optimal solution of Eq. ( <ref type="formula" target="#formula_0">1</ref>) is assigning all vertices to a single label. To deal with this, the authors of B-GRAP have considired the balance constraint in the update function by adding a penalty term, which whenever the assignment of a vertex to a partition violates the balance constraint. The new update function is defined as follow.</p><formula xml:id="formula_2">F = F LP + ?P<label>(2)</label></formula><p>P represents penalty terms and ? is a weight parameter. Two update functions P VB and P EB were defined to respectively deal with vertex and edge balance constraints:</p><formula xml:id="formula_3">P VB (?) = 1 ? - ???? (? , ?) |? |<label>(3)</label></formula><p>This function measures the divergence between the perfect balance ratio and the ratio of vertices with label ?.</p><formula xml:id="formula_4">P EB (?) = 1 ? - ???? (?, ?) |?|<label>(4)</label></formula><p>P EB discourages a vertex to move to a partition with ? label, when the ratio of edges in the partition ? is closer or larger than the balance factor. Note that comparing to vertex balance, edge balance minimizing the edge cuts implicitly by maximizing the edge locality in each partition.</p><p>The algorithm 1 describes the main procedures of B-GRAP: initialisation and label propagation. To initialize B-GRAP, the authors considered only hub vertices having a high outgoing degree ? + (.). Their intuition is that the higher ? + (?), the more ? (?) will be propagated and considered as frequent label. They defined their algorithm 1 as following: Given a directed graph ? = ?? , ?, ??, ? ??? denotes the minimum out degree threshold to consider that a vertex ? as a hub vertex. The algorithm proceeds as follows. First, the set of labels ? is initialized according to the input number of partitions ? value (Line 1). Then, each ? ? ? , such ? + (?) &gt; ? ??? is randomly assigned a label ? ? and those labels are propagated to neighbors (Line 2). Then, the label of these neighbors are updated and propagated iteratively using an update function (Lines 3-7). The vertices are then checked and those not reached by the update/propagation step are initialized randomly, to ensure that all vertices are assigned a label (Lines 8-9). The algorithm repeats the update/propagate step (Line 10-12) until convergence (Line 13).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 1 B-GRAP</head><p>Input: ? = ?? , ?, ? ?, ?, ?, ? ??? Output: a partitioned graph ? = ?? , ?, ?, ? ? </p><formula xml:id="formula_5">1: ? = {? } ? ? =1 2: for {? ? {? ? ? , ? + (?) &gt; ? ??? } } do 3: ? (?) = ?????? (?)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">SAMPLING-BASED LABEL PROPAGATION ALGORITHMS 4.1 Main procedures</head><p>One of the biggest problems in label propagation based partitioning algorithms is to deal with graphs of different structures. The initialization step affects both the partitioning quality and the execution time. Our purpose is to study how we can introduce a graph sampling in initialization step in order to deal with these issues. <ref type="bibr" target="#b24">[25]</ref> proposed a graph Rank Degree sampling method using a edge selection rule based on a node ranking. In order to define our initialization heuristics, we identify two main steps: (i) seed vertices selection to retrieve the initial ? vertices; (ii) sampling to take ? vertices from the neighbors of selected seeds in order to initiate the LP process. In the second step, only ? vertices are selected from the neighbors of a seed at each iteration, this allows to reduce the impact of seeds with a high degree (hub vertices) on the sampling. In fact, without ? parameter, most of the sampled vertices will be selected from the neighborhood of the hub seeds. The Figure <ref type="figure" target="#fig_0">1</ref> shows an overview on the sampling-based HD-B-GRAP and RD-B-GRAP heuristics and summarizes the two steps comparing to B-GRAP.</p><p>The algorithm 2 describes the main procedures of sampling based heuristics for seed selection (Line 1), neighbor sampling (Line 2, ???????????????? () function) and label updates and propagation according to B-GRAP (Line 3). The function ???????????????? () is detailed in Algorithm 3. It is an iterative function that will continue to execute itself until the stopping condition is met. In our case, the stopping condition is when the sample size has been reached and all partition sets have been initialized or in formal terms |? ? | ? ? and |? ? | ? 1, ?? ? ?, where ? ? is the sampled vertices from the graph and ? ? is the ?-th partition.</p><p>In the case that a partition set is empty, the algorithm will attempt to initialize it and to balance all partition sets at the same time. Thus, it will move a vertex from one partition with excess nodes (i.e. |? ? | &gt; |? ? |/?) to the uninitialized partition (Lines <ref type="bibr" target="#b10">[11]</ref><ref type="bibr" target="#b11">[12]</ref><ref type="bibr" target="#b12">[13]</ref><ref type="bibr" target="#b13">[14]</ref>. This procedure will iterate until both stopping conditions are true. In the seed selection sub-step, a seed will be selected as a random uniform sample of the nodes. These seeds will later propagate in the sampling propagation sub-step as follows: i) each vertex in the seed will request the degree to all of its neighbors; ii) the same vertex, in the following superstep, will receive the answering messages from un-sampled neighbors and will only store those from the ? highest degree neighbors; finally, iii) the vertex will notify the ? highest degree neighbors that they have been sampled and will be seed for the next iteration. The sampling propagation sub-step will execute until the sample size is reached. Finally, the algorithm moves to the label propagation step and returns the partitioning when it converges. In the real execution, each of the sampled vertices would be assigned a label and aggregated into the counter of the label. Before the algorithm finishes, it would have to verify that all partition sets have a minimum of 1 vertex inside. If it is not the case, it will relabel vertices from overpopulated sets. Now we will go on to see how the HD-B-GRAP differs from this algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">HD-B-GRAP algorithm</head><p>RD-B-GRAP and HD-B-GRAP are actually quite similar, the difference lies in the seed initialization sub-step, as we could see in Figure <ref type="figure" target="#fig_0">1</ref>. We note that this sampling technique will result in a sample with a higher bias to high degree vertices, which could lead to a reduced Label Propagation execution time.</p><p>A complete execution of the HD-B-GRAP is as follows (Algorithms 2 and 3). First we select the highest degree ? vertices. In the seed selection sub-step, we first generate the degree distribution of the entire graph and then select the vertices with the highest degree. These seeds will later propagate in the sampling propagation substep as follows: i) each vertex in the seed will request the degree to all of its neighbors; ii) the same vertex, in the following superstep, will receive the answering messages from un-sampled neighbors and will only store those from the ? highest degree neighbors; finally, iii) the vertex will notify the ? highest degree neighbors that they have been sampled and will be seed for the next iteration. The sampling propagation sub-step will execute until the sample size is reached. Finally, the algorithm moves to the label propagation step and returns the partitioning when it converges.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">EXPERIMENT SETTINGS</head><p>We achieved different experiments on different graph data sets in order to study the impact of the sampling on the LP partitioning. We specifically evaluated the edge-cut quality, the balance quality and the LP computation time of HD-B-GRAP and RD-B-GRAP comparing to B-GRAP. All the experiments are done on a single-node Hadoop cluster. The machine has 80 compute cores and 1.5Tera RAM, but 64 cores and 786GB RAM are used by Hadoop.</p><p>Data sets description In our experiments, we use ten graph data sets of different degree distributions and different sizes. LastFM (LF), Wikitalk (W), Pockec (P), Flixster (F), LiveJournal (LJ), Orkut (O) and Twitter (T) are social online networks graphs. BerkeleyStanf (B) is the berkely.edu and stanford.edu web graph. DelaunaySC (D) and Graph500 (G) are synthetic graphs. Notice that only (G) is an undirected graph. The table <ref type="table">Table</ref>  <ref type="table" target="#tab_1">1</ref> summarises for each graph data set the edge and vertex numbers, the percentages of vertices with at most one degree value and at least 100 degree value and also the number of vertices with the maximum degree value.</p><p>We evaluate our algorithm over all the graphs presented in Table 1, by varying the number of partitions ? ? {2 ? } 6 ?=1 . We execute 10 runs of each algorithm for each graph and each value of ? to ensure the significance of the results. For all experiments, we compute the average variation of the following measures with respect to the number of partitions ? and over the runs:</p><p>The maximum normalized unbalance of vertices (MNU VB ) and of edges (MNU EB ): this metric is used to measure the unbalance and represents the percentage-wise difference of only the largest partition from a perfectly balanced partition.</p><formula xml:id="formula_6">MNU VB = max(|? ? |) |? |/? , MNU EB = max(|? ? |) |?|/? , with ? ? ?.</formula><p>The edge-cuts ratio (EC): the ratio of edges connecting each two vertices in two different partitions w.r.t the total number of edges.</p><p>The computation time (Time) required to complete the label propagation processing. We note that to compute EC and MNU only the original input edges of the graph are considered. For all experiments, we set ? = 10 -3 as a threshold stop value and we set ? and the out degree 2 . The penalty term weight parameter ? in the update function F is set to 1. This gives an equal importance to the penalty term P and to F LP according to the update functions defined in Section 3.2. For HD-B-GRAP and RD-B-GRAP, we set ? = 0.2, ? = 0.1 ? ? and ? = 2. We note that the choice of these values is studied using several graphs and configurations, for more details see Section 6.3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">RESULTS ANALYSIS</head><p>In the following, we firstly present the results of running the sampling based partitioning algorithms HD-B-GRAP and RD-B-GRAP comparing to B-GRAP using vertex and edge objective functions, and also to the state art results. Then we the study about ?, ? and ? parameters robustness.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Vertex-balance evaluation</head><p>In this experiments we compare the results obtained with HD-B-GRAP, RD-B-GRAP and B-GRAP using the vertex balance constraints. We study the impact of each sampling approach on the vertex balance quality, on the edge-cut quality and on the LP computation time.</p><p>Figure <ref type="figure" target="#fig_2">2</ref> shows that the sampling in the most of the graphs doesn't impact the balance quality and MNU VB is similar between all the algorithms, expect for Wikitalk and BerkeleyStanf and ? ? 32: the quality of RD-B-GRAP decreases slightly on Wikitalk and poorly on BerkeleyStanf, HD-B-GRAP performs poorly on both graphs. The results are slightly better than B-GRAP on LastFM and Flixster graphs with an improvement rate equals ? 1%.</p><p>The quality of the edge-cut remains stable with very good values. We can notice a high improvement of EC for HD-B-GRAP on WikiTalk, that counteracts the MNU VB distortion, and a slight improvement on some other graphs. The total average improvement percent on each graph and for all values of ? is summarized as follow: (i) HD-B-GRAP: 25% on WikiTalk, 4 ? 5% on BerkeleyStanf and Flixster, 0 ? 1.5% on other graphs, (ii) RD-B-GRAP: 4 ? 5.5% on WikiTalk, BerkeleyStanf and on Flixster, 0 ? 1.3% on other graphs.</p><p>Regarding the LP computation time, both sampling based initialization outperform the original B-GRAP. The improvement varies between 6.3% and 40.7% for HD-B-GRAP and between 6.9% and 38.6% for RD-B-GRAP. In the case of a large graph, such as Twitter, the total average improvement of LP computation time is 12.7% (? 390 seconds) for HD-B-GRAP and 11.9% (? 370 seconds). The average improvements percent for our sampling based algorithms comparing to B-GRAP for each graphs and w.r.t. to MNU VB , EC and LP time are given in Table <ref type="table">2</ref>. . In this table we emphasis the 2 The choice of this value was studied in <ref type="bibr" target="#b8">[9]</ref> values higher than 5% and we mark in red color the worst values (? -5%).</p><p>Table <ref type="table">2</ref>: The percent of quality (EC, MNU VB ) and performance (LP time) improvements of HD-B-GRAP and RD-B-GRAP w.r.t. B-GRAP and using the vertex balance. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Edge-balance evaluation</head><p>The results on balance quality and edge quality are similar to the vertex balance case, similarly for the LP computation time, which was improved over all graph data sets. In particular, the results show a high improvement on the two largest graphs Graph500 and Twitter with a percent of gain equals respectively to 40.3% and to 18.7%.</p><p>Comparison with the state of the art methods In the following, we compare the results obtained with our proposed solutions on Twitter graph to the results reported in <ref type="bibr" target="#b18">[19]</ref>. Note that the authors has evaluated only the edge balance quality, as they deal only with this constraint. They used the ratio of local edges ? to evaluate the partitioning quality, which equals to the number of edges connecting two vertices belonging to the same partition divided by the total number of edges. This metric is inversely proportional to the ratio of edge-cuts. The computation time wasn't considered in this experiment, as the algorithms was executed in different environments.</p><p>The table <ref type="table" target="#tab_3">3</ref> summarizes the results obtained on Twitter graph with the following algorithms: B-GRAP, HD-B-GRAP, RD-B-GRAP, Spinner <ref type="bibr" target="#b18">[19]</ref>, Fennel <ref type="bibr" target="#b23">[24]</ref> and Metis <ref type="bibr" target="#b14">[15]</ref>. B-GRAP performs generally better HD-B-GRAP and HD-B-GRAP w.r.t. to the local edge quality, and has similar balance quality w.r.t. to the MNU EB . We assume that the deterioration of the cut quality is due to the presence of many interconnected communities in the Twitter graph, that are difficult to separate, which makes it hard to obtain a good sampling. In particular, the seed selection method of HD-B-GRAP, based on highest degrees, can lead to the selection of some interconnected hub vertices which share a common neighbors. Comparing to other algorithms, B-GRAP has a slightly better locality quality than Spinner <ref type="bibr" target="#b18">[19]</ref>, which is based on the LP approach. Fennel performs similarly to B-GRAP with respect to ?, except on ? = 2 the quality is the best, it performs poorly with respect to MNU EB comparing to all other algorithms. Metis <ref type="bibr" target="#b14">[15]</ref> remains the best approach w.r.t. to quality of the partitioning and the balance. However, we remind that Metis has a high computation cost.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Parameters robustness</head><p>In order to study the robustness of our sampling based partitioning algorithms HD-B-GRAP and RD-B-GRAP to the sampling parameters, we defined two different main tests. Firstly, we studied the impact of the sizes of the sample and of the seeds. Secondly, we studied the impact of ?, the neighboring nodes set size. Next we explain our intuition for each experiment and we analyze the results.</p><p>To achieve these experiments, we used Twitter graph and we fixed the number of partitions ? to 4. For the first experiment, the sample size ? ? 10%, 15%, 20%, 25% ? |? |, with ? = ?/10 and ? fixed to 5. Finally, for each value of ?, we made 10 runs of each algorithm and we compute MNU VB , EC, the sampling computation time and the LP computation time. In the second experiment, ? ? {5, 25, 50, 100} and we fix the values of ? and ? respectively to 15% and 1.5% of the vertices number, then we proceed similarly to compute the evaluation measures. The results that we have obtained for MNU VB were similar for the different configurations. Therefore, they are not relevant to study the robustness.</p><p>Impact of the sizes of seeds and sample: Our initial hypothesis in regard to this parameter is that as ? value increases, the algorithm should take more time to execute the sampling and less time to execute the label propagation. Conversely, as ? increases its value, we expect that the time required for the sampling will be reduced, while the expected behavior on the label propagation is that it will take less time to converge. The overall effect of changing both ? and ? (since we defined ? to be 10% of ?), should lead to a reduced time because ? grows in terms of ?. In terms of the quality of partitioning, we needed to show how it will be affect.</p><p>From the results shown in Figure <ref type="figure">3</ref>, we can see that our hypothesis is validated. It shows some slight variations in the edge-cut EC, but the standard deviations of EC overlap, thus we cannot conclude that there is an improvement in this regard. Conversely, we can see that there is a clear improvement in execution time, both in terms of the sampling and the label propagation steps. This execution time decreasing can be obtained since ? = 15% and ? = 1.5%.</p><p>Impact of the neighboring nodes set size: Regarding this parameter, our initial hypothesis in terms of time is that this might be able to speed up the sampling and that in has no inference in the label propagation. However, it doesn't require to have a high value in order to speed it up since the expected growth will be capped at a maximum of |? | * ? vertices sampled per superstep, leading to exponential growth over iterations. We must keep in mind, nevertheless, that the size of the seed varies through iterations and in some cases it might contract in comparison to a previous superstep. Note that for this test, we set ? = 15% and ? = 1.5%, since they were the best configuration obtained in the previous experiment.</p><p>From the results shown in Figure <ref type="figure">4</ref>, we can confirm that the algorithms are not sensitive to the value of ?. Since all metrics overlap the standard deviation, we cannot say that the results are better nor worse. Thus, we can say that a value of 5 for ? is as good as having a value of 100.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">CONCLUSIONS AND PERSPECTIVES</head><p>In this paper, we defined and studied HD-B-GRAP and RD-B-GRAP algorithms that combine graph sampling and label propagation for graph balanced partitioning, i.e. vertex or edge balance constraint.</p><p>To conclude, our algorithms have in general better edge-cut quality than the original B-GRAP algorithm and this gain comes at a trade off for balance. This unbalance is not really noteworthy in medium to large data sets, but on small data sets it is significant. We also see that our algorithms tend to be slower since the sampling stage has been introduced, however, once the sampling is achieved, there are significant improvements on the label propagation stage. In few cases, this gain was enough to counteract the time added for the sampling. In vertex-balance case, regarding the LP convergence, both algorithms have reduced computation time over all the graphs by 6% to 40%. The conclusions in edge-balance case, on either balance quality or edge quality are similar. We notice a high improvement on the two largest graphs Graph500 and Twitter with a percent of gain equals respectively to 40.3% and to 18.7%. The comparison with some exiting edge-balanced partitioned methods on Twitter graph have showed a slight deterioration in EC, especially for HD-B-GRAP. For this graph, we think that presence of many interconnected communities impacts the quality of the sampling. In terms of parameter robustness, changing the sample size ? and, consequently the seeds size ? could lead to a reduced execution time in both sampling and label propagation stages. In the case of the Twitter graph, the improvement can be achieved when ? = 15% and ? = 1.5%. For the seed neighboring nodes set size parameter ?, it was difficult to conclude for Twitter data set.</p><p>There are many perspectives that we can explore. First of all, we would like to study if an optimal configuration for the hyperparameters exists and or if it depends on the graph topology. In the same way, we have been able to prove that graph sampling can improve the performance of label propagation algorithms, it would be interesting to extend this work to other existing approaches of graph partitioning on which the initialization is performed at random, such as multilevel algorithms. Finally, since label propagation is originally a community detection algorithm, we could explore sampling based algorithms to try to tackle this open problem.  </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Sampling-based B-GRAP algorithms 4.2 RD-B-GRAP algorithmRD-B-GRAP algorithm obtains a neighbor according to its rank in descending order (omitting previously sampled vertices) and selects ? neighbors to be seeds in the next iteration. A complete execution of the RD-B-GRAP is as follows (Algorithms 2 and 3).In the seed selection sub-step, a seed will be selected as a random uniform sample of the nodes. These seeds will later propagate in the sampling propagation sub-step as follows: i) each vertex in the seed will request the degree to all of its neighbors; ii) the same vertex, in the following superstep, will receive the answering messages from un-sampled neighbors and will only store those from the ? highest degree neighbors; finally, iii) the vertex will notify the ? highest degree neighbors that they have been sampled and will be seed for the next iteration. The sampling propagation sub-step will execute until the sample size is reached. Finally, the algorithm moves to the label propagation step and returns the partitioning when it converges.</figDesc><graphic url="image-1.png" coords="4,58.13,83.68,231.58,79.15" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Algorithm 3 2 :</head><label>32</label><figDesc>RD-B-GRAP and HD-B-GRAP initializeSample() Input: ?, ?????, ?, ?, ? Output: Sampled vertex sets with labels ? ? 1: ? ? {? } ? ? =1 ? ? ? ? 3: {? ? ? ? } ? ? =1 4: while |? ? | ? ? and |? ? | ? 1, ?? ? ? do 5: ? ? ?, candidate set, ? ? ?, sampled in superstep set 6: for ? ? ????? do 7: find unvisited neighbors ? (?) degrees, rank them in descending order 8: ? ? ?? first ? vertices from ranked ? (?) 9: for ? ? ? do 10: generate random number ? 11: if ? ? ?-|? ? | |? | then 12: initialize ? (?) randomly from ? 13: ? ? (? ) ? ? ? (? ) ? {? } ? ? ? ? ? ? ? 19: ????? ? ? 20: end while 21: return ?? ? , {? (?) } ??? ? ?</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Variation of the average scores of MNU VB , EC and Time for the partitioning obtained with B-GRAP, HD-B-GRAP and RD-B-GRAP, w.r.t. ? and with the vertex balance constraint.</figDesc><graphic url="image-2.png" coords="6,91.63,83.68,428.75,579.81" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :Figure 4 :</head><label>34</label><figDesc>Figure 3: Robustness of HD-B-GRAP and RD-B-GRAP to the sample size: Average scores of MNU VB , EC and execution time obtained on Twitter graph, with ? = 4, and while varying parameters ? and ?</figDesc><graphic url="image-3.png" coords="8,53.80,200.25,161.42,99.94" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>and propagate to ? (?) 4: end for 5: while ? F LP (?, ?) ? ? do 6: ? (?) randomly from ? and propagate to ? (?) return ? = ?? , ?, ?, {? (?) } ??? ? Algorithm 2 Sampling-based heuristics Input: ? = ?? , ?, ? ?, ?, ?, ?, ?, ? Output: a partitioned graph ? = ?? , ?, ?, ? ? 1: Compute ? Seeds 2: Compute Sample and propagate (see Algorithm 3) 3: Update and propagate as in Algorithm (1) Lines 5-15 4: return ? = ?? , ?, ?, {? (?) } ??? ?</figDesc><table><row><cell></cell><cell>for (? ? ? , ? ? ?) do</cell></row><row><cell>7:</cell><cell>get the set of frequent labels w.r.t an update function</cell></row><row><cell>8:</cell><cell>end for</cell></row><row><cell>9:</cell><cell>Update and propagate ? (?) to ? (?)</cell></row><row><cell>10:</cell><cell>for ? ? ? , ? (?) = ???? do</cell></row><row><cell>11:</cell><cell></cell></row><row><cell>12:</cell><cell>end for</cell></row><row><cell cols="2">13: end while</cell></row><row><cell>14:</cell><cell></cell></row></table><note><p>initialize</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 :</head><label>1</label><figDesc>Data sets description</figDesc><table><row><cell>Graph</cell><cell cols="9">LastFM WikiTalk BerkeleyStanf Flixster DelaunaySC LiveJournal Orkut Graph500 Twitter</cell></row><row><cell>Directed</cell><cell>yes</cell><cell>yes</cell><cell>yes</cell><cell>yes</cell><cell>yes</cell><cell>yes</cell><cell>yes</cell><cell>no</cell><cell>yes</cell></row><row><cell cols="3">|? | |? | 2.4M average d+ = 1.2 |? |</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 3 :</head><label>3</label><figDesc>Comparison of the state of the art algorithms for Twitter graph while scaling the of desired partitions and using the edge balance constraint. The table reports the ratio of local edges ? and the MNU EB .</figDesc><table><row><cell></cell><cell></cell><cell>? = 2</cell><cell></cell><cell>? = 4</cell><cell></cell><cell>? = 8</cell><cell>? = 16</cell><cell>? = 32</cell></row><row><cell>Approach</cell><cell>?</cell><cell cols="2">MNU EB ?</cell><cell cols="2">MNU EB ?</cell><cell cols="2">MNU EB ?</cell><cell>MNU EB ?</cell><cell>MNU EB</cell></row><row><cell cols="3">HD-B-GRAP 0.84 1.02</cell><cell cols="2">0.66 1.03</cell><cell cols="2">0.52 1.05</cell><cell>0.30 1.10</cell><cell>0.29 1.07</cell></row><row><cell cols="3">RD-B-GRAP 0.80 1.02</cell><cell cols="2">0.69 1.04</cell><cell cols="2">0.46 1.05</cell><cell>0.32 1.06</cell><cell>0.34 1.14</cell></row><row><cell>B-GRAP</cell><cell cols="2">0.85 1.01</cell><cell cols="2">0.70 1.04</cell><cell cols="2">0.52 1.05</cell><cell>0.42 1.06</cell><cell>0.33 1.07</cell></row><row><cell cols="3">Spinner [19] 0.85 1.05</cell><cell cols="2">0.69 1.02</cell><cell cols="2">0.51 1.05</cell><cell>0.39 1.04</cell><cell>0.31 1.04</cell></row><row><cell>Fennel [24]</cell><cell cols="2">0.93 1.10</cell><cell cols="2">0.71 1.10</cell><cell cols="2">0.52 1.10</cell><cell>0.41 1.10</cell><cell>0.33 1.10</cell></row><row><cell>Metis [15]</cell><cell cols="2">0.88 1.02</cell><cell cols="2">0.76 1.03</cell><cell cols="2">0.64 1.03</cell><cell>0.46 1.03</cell><cell>0.37 1.03</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>https://giraph.apache.org/</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Multi-dimensional balanced graph partitioning via projected gradient descent</title>
		<author>
			<persName><forename type="first">D</forename><surname>Avdiukhin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Pupyrev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Yaroslavtsev</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the VLDB Endowment</title>
		<meeting>the VLDB Endowment</meeting>
		<imprint>
			<date type="published" when="2019">2019</date>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="906" to="919" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Distributed balanced partitioning via linear embedding</title>
		<author>
			<persName><forename type="first">K</forename><surname>Aydin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Bateni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Mirrokni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithms</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Group formation in large social networks</title>
		<author>
			<persName><forename type="first">L</forename><surname>Backstrom</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Huttenlocher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kleinberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Lan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the SIGKDD Inter. Conf. on Knowledge discovery and data mining</title>
		<meeting>of the SIGKDD Inter. Conf. on Knowledge discovery and data mining</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Graph Partitioning and Graph Clustering</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Bader</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Meyerhenke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Sanders</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
			<publisher>American Mathematical Society</publisher>
			<biblScope unit="volume">588</biblScope>
			<pubPlace>Providence, RI</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Graph partitioning for scalable distributed graph computations</title>
		<author>
			<persName><forename type="first">A</forename><surname>Bulu?</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Madduri</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Graph Partitioning and Graph Clustering, 10th DIMACS Implementation Challenge Workshop</title>
		<imprint>
			<publisher>American Mathematical Soc</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="volume">588</biblScope>
			<biblScope unit="page" from="83" to="102" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Recent Advances in Graph Partitioning</title>
		<author>
			<persName><forename type="first">A</forename><surname>Bulu?</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Meyerhenke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Safro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Sanders</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Schulz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016">2016</date>
			<publisher>Springer</publisher>
			<biblScope unit="page" from="117" to="158" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Metrics for community analysis: A survey</title>
		<author>
			<persName><forename type="first">T</forename><surname>Chakraborty</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Dalmia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Mukherjee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Ganguly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Comput. Surv</title>
		<imprint>
			<biblScope unit="volume">50</biblScope>
			<biblScope unit="page" from="1" to="37" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Pt-scotch: A tool for efficient parallel graph ordering</title>
		<author>
			<persName><forename type="first">C</forename><surname>Chevalier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Pellegrini</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Parallel Computing</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="page" from="318" to="331" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A graph partitioning algorithm for edge or vertex balance</title>
		<author>
			<persName><forename type="first">A</forename><surname>El Moussawi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Bennacer Seghouani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Bugiotti</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Database and Expert Systems Applications (Dexa) (2020)</title>
		<imprint>
			<biblScope unit="volume">12391</biblScope>
			<biblScope unit="page" from="23" to="37" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Social network analysis, estimation and sampling in</title>
		<author>
			<persName><forename type="first">O</forename><surname>Frank</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Encyclopedia of Complexity and Systems Science</title>
		<editor>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Meyers</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="8213" to="8231" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Network sampling</title>
		<author>
			<persName><forename type="first">O</forename><surname>Frank</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Inter. Encyclopedia of Statistical Science</title>
		<editor>
			<persName><forename type="first">M</forename><surname>Lovric</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="941" to="942" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Random multigraphs and aggregated triads with fixed degrees</title>
		<author>
			<persName><forename type="first">O</forename><surname>Frank</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Shafie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Netw. Sci</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="232" to="250" />
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Finding overlapping communities in networks by label propagation</title>
		<author>
			<persName><forename type="first">S</forename><surname>Gregory</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">New Journal of Physics</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page">103018</biblScope>
			<date type="published" when="2010-10">oct 2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Scalable graph processing frameworks: A taxonomy and open challenges</title>
		<author>
			<persName><forename type="first">S</forename><surname>Heidari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Simmhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Calheiros</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Buyya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="page" from="1" to="53" />
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Multilevel graph partitioning schemes</title>
		<author>
			<persName><forename type="first">G</forename><surname>Karypis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Kumar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 24th Inter. Conf. on Parallel Processing (ICPP) (1995)</title>
		<meeting>of the 24th Inter. Conf. on Parallel essing (ICPP) (1995)</meeting>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="113" to="122" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">What is Twitter, a social network or a news media?</title>
		<author>
			<persName><forename type="first">H</forename><surname>Kwak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Moon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 19th Inter. Conf. on World wide web (WWW)</title>
		<meeting>of the 19th Inter. Conf. on World wide web (WWW)</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="591" to="600" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Signed networks in social media</title>
		<author>
			<persName><forename type="first">J</forename><surname>Leskovec</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Huttenlocher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kleinberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 28th Inter. Conf. on Human factors in computing systems</title>
		<meeting>of the 28th Inter. Conf. on Human factors in computing systems</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page">1361</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Community structure in large networks: Natural cluster sizes and the absence of large welldefined clusters</title>
		<author>
			<persName><forename type="first">J</forename><surname>Leskovec</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">J</forename><surname>Lang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Dasgupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">W</forename><surname>Mahoney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Internet Mathematics</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="29" to="123" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Spinner: Scalable graph partitioning in the cloud</title>
		<author>
			<persName><forename type="first">C</forename><surname>Martella</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Logothetis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Loukas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Siganos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. -Int. Conf. Data Engineering</title>
		<meeting>-Int. Conf. Data Engineering</meeting>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Parallel graph partitioning for complex networks</title>
		<author>
			<persName><forename type="first">H</forename><surname>Meyerhenke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Sanders</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Schulz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Parallel and Distributed Systems</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="2625" to="2638" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Near linear time algorithm to detect community structures in large-scale networks</title>
		<author>
			<persName><forename type="first">U</forename><forename type="middle">N</forename><surname>Raghavan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Albert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kumara</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Physical review. E, Statistical, nonlinear, and soft matter physics</title>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page">36106</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Computational comparison of major proposed methods for graph partitioning problem</title>
		<author>
			<persName><forename type="first">H</forename><surname>Rais</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Abed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Watada</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Advanced Computational Intelligence and Intelligent Informatics</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">01</biblScope>
			<biblScope unit="page" from="5" to="17" />
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">The network data repository with interactive graph analytics and visualization</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Rossi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">K</forename><surname>Ahmed</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 29 AAAI</title>
		<meeting>of the 29 AAAI</meeting>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">FENNEL: Streaming graph partitioning for massive scale graphs</title>
		<author>
			<persName><forename type="first">C</forename><surname>Tsourakakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Gkantsidis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Radunovic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Vojnovic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 7th ACM Inter. Conf. on Web search and data mining</title>
		<meeting>of the 7th ACM Inter. Conf. on Web search and data mining</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="333" to="342" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Rank degree: An efficient algorithm for graph sampling</title>
		<author>
			<persName><forename type="first">E</forename><surname>Voudigari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Salamanos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Papageorgiou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">J</forename><surname>Yannakoudakis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Inter. Conf. on Advances in Social Networks Analysis and Mining</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="120" to="129" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Users joining multiple sites: Distributions and patterns</title>
		<author>
			<persName><forename type="first">R</forename><surname>Zafarani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">8th Inter. AAAI Conf. on Weblogs and Social Media</title>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
