<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Fast Genetic Algorithm Path Planner for Fixed-Wing Military UAV Using GPU</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Vincent</forename><surname>Roberge</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Mohammed</forename><surname>Tarbouchi</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Gilles</forename><surname>Labont√©</surname></persName>
						</author>
						<title level="a" type="main">Fast Genetic Algorithm Path Planner for Fixed-Wing Military UAV Using GPU</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">B222BAE4658E35BFC97BD4F86F32897F</idno>
					<idno type="DOI">10.1109/TAES.2018.2807558</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T04:14+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>genetic algorithm</term>
					<term>graphics processing units</term>
					<term>path planning</term>
					<term>parallel computing</term>
					<term>UAV</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Military unmanned aerial vehicles (UAVs) are employed in highly dynamic environments and must often adjust their trajectories based on the evolving situation. To operate autonomously and safely, a UAV must be equipped with a path planning module capable of quickly recalculating a feasible and quasi-optimal path in flight while in the event a new obstacle or threat has been detected or simply, if the destination point is changed during the mission. To allow for a fast path planning, this paper proposes a parallel implementation of the genetic algorithm on graphics processing unit (GPU). The trajectories are built as series of line segments connected by circular arcs resulting in smooth paths suitable for fixed-wing UAVs. The fitness function we defined takes into account the dynamic constraints of the UAVs and aims to minimize fuel consumption and average flying altitude in order to improve range and avoid detection by enemy radars. This fitness function is also implemented on the GPU and different parallelization strategies were developed and tested for each step of the fitness evaluation. By exploiting the massively parallel architecture of GPUs, the execution time of the proposed path planner was reduced by a factor of 290x compared to a sequential execution on CPU. The path planning module developed was tested using 18 scenarios on six realistic 3D terrains with multiple no-fly zones. We found that the proposed GPU-based path planner was able to find quasi-optimal solutions in a timely fashion allowing in-flight planning.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>INTRODUCTION</head><p>The use of Unmanned Aerial Vehicles (UAVs) in military operations has increased significantly over the last decades. This has been made possible by technological advancements in the fields of small form sensors and miniature computing platforms. In military operations, fixed wing UAV are often used for intelligence gathering, surveillance, reconnaissance, delivery of supplies or even armed attacks <ref type="bibr" target="#b0">[1]</ref>. UAVs offer many advantages over manned aircraft: they are typically cheaper; they can be very small in size and harder to be detected by the enemy; they can complete repetitive tasks with precision; they can fly longer missions without being limited by aircrew fatigue; and, being remotely controlled, they can operate in dangerous situations where the life of the 0018-9251 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.</p><p>This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TAES.2018.2807558, IEEE Transactions on Aerospace and Electronic Systems 2 aircrew would be put at risk. Yet, although being unmanned, UAVs do not remove the need for a pilot; the vehicle still needs to be remotely controlled. In an effort to develop autonomous UAVs, many scientific papers have been published in the last decades on UAV path planning. The problem of UAV path planning as considered in this paper consists of calculating the optimal trajectory that connects a starting point to an ending point. The trajectory must respect the dynamic constraints of the fixed-wing UAV, must be free of obstacles and usually minimizes some objective function such as the time required to fly the path. In this work, the objectives considered are minimizing the fuel consumption and minimizing the average altitude. Earlier works in the field mostly used simplified models of the UAV, simplified representations of the environment and relied on deterministic algorithms to calculate the optimal path, usually defined in terms of length. Over the years, the problem definition has evolved to include the dynamic constraints of the UAV, more realistic 3D terrains and multi-objective optimization functions to better define the characteristics of the optimal path depending on the scenario considered. A shift towards nondeterministic methods such a metaheuristics was observed in order to cope with the increased complexity of the path planning problem <ref type="bibr" target="#b1">[2]</ref>. Metaheuristics form a family of optimization algorithms that rely on the improvement of candidate solutions over a large number of iterations to ultimately converge towards a quasi-optimal solution. Based on the complexity of the fitness function used, the computational effort can be significant and the convergence time can be too long for in-flight path planning. This is a significant limitation as military UAVs in operational theater have to fly constantly changing trajectories based on the particular environment and conditions prevailing at the time of their mission.</p><p>To address this limitation, this paper presents a parallel UAV path planning module using GPUs. The proposed solution uses a genetic algorithm (GA) to compute feasible trajectories in complex and realistic 3D environments. A common geometric approach is used for constructing the trajectories. The method consists in firstly building a stick trajectory, which is a continuous sequence of rectilinear segments, and then smoothing out the connections between these segments so that the velocity of a fixed-wing UAV moving on this trajectory would be continuous. The points of connections of the rectilinear segments are referred to as waypoints; they are however virtual waypoints in the sense that it is not actually required that the final solution passes through these particular points. In looking for superior solutions, the GA will actually move these points around in 3D space and then evaluate the resulting trajectories. The trajectories build consider the performance characteristics of the air vehicle and are optimized to minimize the fuel consumption and the average flying altitude in order to improve the range of the UAV and avoid detection by enemy radars. These two optimization objectives and the multiple constraints involved are defined in the form of a fitness function that is maximized by the GA. Given the complexity of this function, its parallelization on the GPU is a significant challenge. We developed different parallelization strategies that we compared experimentally to find the ones that benefit the most from the unique architecture of the GPU. The proposed planner is tested in a numerical simulation on a desktop computer using 18 scenarios on six realistic 3D terrains.</p><p>0018-9251 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.</p><p>This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TAES.2018.2807558, IEEE Transactions on Aerospace and Electronic Systems</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3</head><p>The aim of the simulation is to assess the order of magnitude of the reduction factor of the calculation time achieved by the parallel implementation on GPU and determine if this reduction is sufficient to allow for in-flight path planning. This would contribute to the future development of autonomous UAVs capable of calculating new trajectories during the mission without external intervention.</p><p>The main contribution of this paper is the parallelization of a GA-based path planning algorithm on GPU. This is a significant challenge as the fitness function used to evaluate the quality of the candidate trajectories is quite complex due to the number of constraints considered. Compared to previous solutions on CPUs, the proposed parallel algorithm provides a 290-fold performance improvement which is undeniable and a true advantage for in-flight planning. The second contribution of this paper is the multiobjective fitness function proposed to model the feasibility constraints and the optimization objectives of the problem. The minimization of the flying altitude and the minimization of the fuel consumption are integrated into a single optimization function using utopia points we have defined. Moreover, compared to previous works, the proposed algorithm uses a rigorous method to calculate fuel consumption with superior accuracy <ref type="bibr" target="#b2">[3]</ref>. This is possible only because the 3D trajectories are built using line segments and circular arcs.</p><p>The remaining of this paper is organized as follows. Section II provides a review of key publications in the field of UAV path planning and parallel metaheuristics on GPU in order to better highlight the contribution of this paper. Section III provides a brief description of the GPU architecture. Section IV describes the algorithm proposed to solve the problem of UAV path planning.</p><p>Section V explains how the proposed algorithm was parallelized and implemented on the GPU in order to reduce its execution time and allow in-flight planning. Section VI presents the results of the numerical simulation used to test the proposed parallel algorithm.</p><p>Finally, section VII concludes with a summary of the main contribution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. PREVIOUS WORKS</head><p>In <ref type="bibr" target="#b1">[2]</ref>, Masehian and Sedighizadeh survey about 1400 papers on vehicles motion planning and divide the possible approaches into two distinct families: classic methods and heuristics. The two authors explain that classic approaches, such as the A* algorithm or the potential field method, often suffer from high time complexity and can remain trapped in local optima which limits their use in real applications. Because of that, they note that recent research in the field has moved toward heuristics such as artificial neural networks, fuzzy logic and metaheuristics, the last one being the most common approach <ref type="bibr" target="#b1">[2]</ref>. Metaheuristics are generic optimization methods that rely on the improvement of candidate solutions over several iterations to obtain quasi-optimal solutions. They can be adapted to a multitude of optimization problems and are well fitted to cope with the high complexity of the UAV path planning Recent examples of metaheuristics used for UAV path planning are the simulated annealing method <ref type="bibr" target="#b3">[4]</ref>, the GA <ref type="bibr" target="#b4">[5]</ref>, the differential evolution algorithm (DE) <ref type="bibr" target="#b5">[6]</ref>, the PSO <ref type="bibr" target="#b6">[7]</ref>, the central force optimization <ref type="bibr" target="#b7">[8]</ref>, the ant colony optimization (ACO) <ref type="bibr" target="#b8">[9]</ref>,</p><p>the bee colony algorithm (BC) <ref type="bibr" target="#b9">[10]</ref>, the predator-prey algorithm <ref type="bibr" target="#b10">[11]</ref>, the grey wolf algorithm <ref type="bibr" target="#b11">[12]</ref>, the imperialism competitive algorithm <ref type="bibr" target="#b12">[13]</ref> and many others. Each one of these approaches provides a unique strategy to modify and improve the candidate solutions and their efficiency often depends on the problem to consider. In an effort to identify the metaheuristic that is best suitable for UAV path planning, we have published in an earlier paper <ref type="bibr" target="#b13">[14]</ref> a comprehensive comparison of the GA and the PSO, two of the most commonly used metaheuristics for UAV path planning, using 40 different scenarios and have shown with statistical significance that the GA was superior to the PSO in most cases, which motivate us to use the GA in this work.</p><p>As explained in the introduction, although metaheuristics are well suited for UAV path planning, they require significant computing power which usually results in an execution time that is too long for in-flight planning. In an effort to reduce the computation time, we have previously published in <ref type="bibr" target="#b13">[14]</ref> and <ref type="bibr" target="#b14">[15]</ref> parallel implementations of the GA and the PSO for UAV path planning using multicore CPUs. Despite the quasi-linear speedup observed, the measured execution time was still too long for inflight replanning. In <ref type="bibr" target="#b15">[16]</ref>, Allaire et al. implemented parts of a GA-based path planner on an FPGA and provided good insights on the true advantage of a full implementation on FPGA. Their efforts were continued in <ref type="bibr" target="#b16">[17]</ref> by Kok et al. who implemented the complete algorithm on FPGA. Using a population of 40 candidate solutions, the authors were able to calculate trajectories with up to five waypoints in fewer than 100 ms. Although their implementation was limited to minimizing the distance traveled and did not account for the minimum turning radius of the UAV, it is a significant achievement as it allows for in-flight planning. More recently, with the increased popularity of GPUs, parallel implementations of UAV path planners have also been proposed for GPUs. In <ref type="bibr" target="#b17">[18]</ref>,</p><p>Hossain et al. published a GA-based planner on GPU capable of calculating a quasi-optimal cycle to visit a set of given points of interest. They measured a speedup of 4.8x compared to a sequential implementation on CPU. Similarly, Cekmez et al. <ref type="bibr" target="#b8">[9]</ref> published a parallel ACO on GPU for the same problem and achieved a speedup of 13x. In <ref type="bibr" target="#b18">[19]</ref>, the same authors developed another implementation on GPU, now using a GA and expanded their solution to multiple UAVs. The research works presented in <ref type="bibr" target="#b8">[9]</ref>, <ref type="bibr" target="#b17">[18]</ref> and <ref type="bibr" target="#b18">[19]</ref> are complementary to ours as they propose GPU-based solutions to UAV mission planning. Yet, the problem considered is different and consists of finding the optimal sequence for visiting a set of points of interest. In the literature, this is often referred to as the travelling salesman problem (TSP) <ref type="bibr" target="#b19">[20]</ref>. In this paper, we solve a different problem which entails calculating the quasioptimal trajectory connecting a starting to an ending point. It is complimentary to the TSP as it addresses how the points of interest can be connected to each other by a flyable trajectory. Outside of the path planning problem, there exist several examples of successful parallel implementations of metaheuristics using GPU such as the GA in <ref type="bibr" target="#b20">[21]</ref>, the PSO in <ref type="bibr" target="#b21">[22]</ref> and <ref type="bibr" target="#b22">[23]</ref>, the BC in <ref type="bibr" target="#b23">[24]</ref>, the ACO in <ref type="bibr" target="#b24">[25]</ref> and the firefly optimization in <ref type="bibr" target="#b25">[26]</ref>.</p><p>In a previous paper <ref type="bibr" target="#b26">[27]</ref>, we published a software framework, called gpuMF, which facilitates the development of parallel metaheuristics on GPU. We showed that gpuMF is capable of providing speedups of two orders of magnitude in the test problems used. These results motivated us to reuse gpuMF for the development of the parallel UAV path planner we are proposing in this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. GPU ARCHITECTURE</head><p>The high-level architecture common to NVIDIA GPUs is shown in Fig. <ref type="figure">1</ref>. NVIDIA GPUs are highly parallel processors designed with a very large number of cores, also referred to as streaming processors (SPs). SPs are divided into multiprocessor groups (MPs). All SPs within an MP share a set of registers and a low-latency scratchpad memory called the shared memory. The GPU is also equipped with a large off-chip random access memory (RAM) referred to as the global memory. kernels and using the global memory to save the data in between kernels. Applications designed for GPUs must exploit a very large level of parallelism to benefit from the massively parallel architecture of the processor. To port a software program to the GPU, each sequential operation must be analyzed and replaced with a parallel primitive that execute the same work, but in fewer steps.</p><p>The three common parallel primitives that are extensively used in the proposed path planner are presented in section V. For more information on GPU architecture and programming, we refer to reference <ref type="bibr" target="#b27">[28]</ref>. </p><formula xml:id="formula_0">Host Device Grid 1 Block (0,0) Block (1,0) Kernel 1 Block (1,1) Block (0,2) Block (1,2) Block (0,1) Kernel 2 Grid 2 Block (0,0) Block (0,1) Execution Thread (0,0) Thread (0,1) Thread (0,2) Thread (1,0) Thread (1<label>,1) Thread (1,2) Thread (2,0) Thread (2,1) Thread (2,2) Block (0,2) Thread (0,3) Thread (1,3) Thread (2,3)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. PROPOSED OPTIMIZATION STRATEGY</head><p>In this section, we present the details of the optimization algorithm developed. We cover the environment representation, the solution encoding, the solution decoding, the fitness function and the GA. This section is based on preliminary works we published earlier in <ref type="bibr" target="#b28">[29]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Environment representation and solution encoding</head><p>An example of a trajectory calculated by the proposed path planning module is shown in Fig. <ref type="figure" target="#fig_1">3</ref>. In our implementation, the 3D terrain is represented using an elevation map, i.e. a 2D matrix with a dimension of 500x500 where each element represents the elevation of the terrain at that location. This representation was proven to be very efficient when paired with metaheuristics <ref type="bibr" target="#b13">[14]</ref>.</p><p>Moreover, it allows us to use the digital elevation maps freely available in the GeoBase <ref type="bibr" target="#b29">[30]</ref> repository.</p><p>In addition to the 3D terrain, our representation allows the definition of danger zones (i.e. no-fly zones) of cylindrical shape with an infinite height. Complex zones can be created by juxtaposing several cylinders. Each danger zone is encoded using three elements, the and coordinates of the center and the diameter of the cylinder, which are stored sequentially in a single vector </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>7</head><p>, , , , , , ‚Ä¶ , , , . Although the danger zones are inputted as a series of cylindrical shapes, they are processed at runtime and represented using a 2D matrix of the exact same size as the terrain elevation matrix but using values of ones to identify danger zones and zeros to identify free zones. Lastly, candidate solutions are encoded as a series of , and coordinates also stored sequentially in a single vector , , , , , , ‚Ä¶ , , , . These waypoints define the line segments that form the path. In our implementation, the number of waypoints is set to 10 to ensure the UAV can fly smoothly in mountainous environment. This number is slightly higher than what was used in similar works <ref type="bibr" target="#b13">[14]</ref>, <ref type="bibr" target="#b15">[16]</ref>, <ref type="bibr" target="#b16">[17]</ref> increasing the dimensionality of the search space. Thankfully, the increased complexity is easily counterbalanced by the parallel implementation on GPU. In situations where the UAV is required to travel over a very long distance, 10 waypoints may not be sufficient. This could be addressed by developing a 2-level path planner where a set of via points is calculated at the higher level and the path that connects these via points is calculated at the lower level. In this work, we focus only on the low-level path planner.</p><p>At this point, the path calculated is not smoothed and contains discontinuities at every waypoint. These discontinuities are removed when the candidate solutions are decoded by adding circular arcs to smooth the connections as it is visible in Fig. <ref type="figure" target="#fig_1">3</ref>. The proposed solution encoding ensures that all solution vectors have the same length when being processed by the metaheuristic, but can have different lengths once smoothed prior to the evaluation of the fitness function.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Path smoothing</head><p>Two main approaches have been used in the literature: one uses splines and the other one circular arcs. The spline approach is described in, among others, <ref type="bibr" target="#b30">[31]</ref>, <ref type="bibr" target="#b31">[32]</ref> and <ref type="bibr" target="#b32">[33]</ref>. The disadvantage of this method is that the final trajectories may deviate considerably from the initial stick trajectory and a precise calculation of the fuel consumption is not possible anymore using formulas in <ref type="bibr" target="#b2">[3]</ref>. The method of connection with circular arcs generalizes, to three dimensions, the work of Dubins <ref type="bibr" target="#b33">[34]</ref> according to which trajectories can be built up from rectilinear and circular segments. This technique has been explained in, among others, <ref type="bibr" target="#b34">[35]</ref>, <ref type="bibr" target="#b35">[36]</ref> and <ref type="bibr" target="#b36">[37]</ref>. Dubins path will use a series of two or three circular arcs for the vehicle to go from one position to another considering the initial and final orientation of the vehicle. In the proposed algorithm, this is unnecessary as the UAV does not require to fly directly above the waypoints forming the path. Thus, a single circular arc is used to make the connection between the rectilinear segments. The approach is described in <ref type="bibr" target="#b37">[38]</ref> and <ref type="bibr" target="#b38">[39]</ref>, but repeated here in a more direct and simpler fashion for the sake of completeness. Based on the diagram in Fig. <ref type="figure">4</ref>, the procedure to connect segment and using a circular arc is as follows. In the procedure below, all letters in bold represents 3D points or vectors.</p><p>1. Compute the two unit vectors and in the direction of segments and respectively.</p><p>2. Compute the angle between the two unit vectors using ‚Ä¢ where "‚Ä¢" is the dot product.</p><p>3. Compute the center of the circle tangent to both segments using * * where is the radius of the circle (i.e. the turning radius of the UAV).</p><p>4. Compute the number of waypoints required to draw the circular arc using 3, * ‚ÅÑ</p><p>where the constant is a user setting specifying the number of points used to draw a half-circle, 3 is the minimum number of waypoints forming the arc and the brackets denote the ceiling operator. Using this approach, the circular arc is defined at step 5 as a series of waypoints. The number of waypoints depends on the angle between the two segments, the radius of turn of the UAV and the constant . In our implementation, is given by the UAV model and is chosen so that the arc is smoothly defined and that the distance between the points is smaller than the resolution of the terrain elevation map. This is important at the next step to detect any collision between the circular arc and the terrain.</p><p>0018-9251 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Fitness function</head><p>The fitness function is used to evaluate the quality of the candidate functions and to allow the metaheuristic to steer the search towards higher quality solutions. In our implementation, the fitness function is composed of a penalty term and a cost term.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1) Penalty term</head><p>The penalty term is used to penalize candidate solutions that violate the feasibility constraints. These constraints include: 1)</p><p>no collision with the terrain; 2) no flying through danger zones; 3) no ascent of descent angles steeper than a given angle; and 4) no discontinuity in the trajectory. The penalty term is calculated as follows: *</p><p>where is the distance traveled by the trajectory under the ground, is the distance traveled through danger zones, is the distance travelled at an excessive climbing or descent angle, is the ratio of impossible circular arcs over the total number of arcs and is the total length of the trajectory. Because the terms , and are in meters, the penalty given to impossible circular arcs had to be normalized to have the same units. This is why we calculate this penalty by multiplying the ratio by the length of the trajectory. In this context, an impossible arc happens when the two segments being connected are too short to allow the insertion of a circular arc. It can happen when the angle between the two segments is acute. In equation <ref type="bibr" target="#b0">(1)</ref>, to calculate we verify each segment of the smoothed path and check at regular intervals along the segment as illustrated in Fig. <ref type="figure" target="#fig_4">5</ref> to see if the segment lies below the terrain. The calculation of is done similarly by checking at regular intervals along the segment and verifying if the segment penetrates a danger zone using the 2D matrix representation discussed earlier in section IV-A.  </p><p>where is the average altitude of the trajectory, is the quantity (measured by weight) of fuel required to fly the trajectory and and are weight coefficients that can be adjusted to favor one objective over the other. In this work both weights are equally set to 0.5. Two comments need to be made about equation <ref type="bibr" target="#b1">(2)</ref>. Firstly, calculating the fuel required is not trivial. Most publications on the topic provide means to approximate grossly the fuel required, but very few guarantee good precision. In <ref type="bibr" target="#b2">[3]</ref>,</p><p>Labont√© shows that the quantity of fuel required by a propeller-driven airplane to fly a line segment trajectory at a constant speed can be expressed by a differential equation for which the solution can be approximated with excellent precision using the Runge-Kutta method of order four. Because the trajectories built by the proposed path planner are primarily composed of line segments, this method can be applied here to calculate . Secondly, the altitude term and the fuel term in equation ( <ref type="formula" target="#formula_2">2</ref>) are normalized before they can be coupled to form a single objective function. To normalize the two terms, we implement the approach published in <ref type="bibr" target="#b39">[40]</ref> which uses utopia points as reference points for each objective. We define the utopia altitude as the average altitude of the imaginary line segment connecting the starting point directly to the end point. Similarly, we define the utopia fuel as the fuel required to fly that imaginary segment. These two utopia points do not necessarily exist, but they offer good reference points to normalize the two objective terms. </p><p>3) Combined fitness function</p><p>Once the penalty term and the cost term have been calculated, they can be combined as follows to calculate the fitness of candidate solution :</p><formula xml:id="formula_4">0 1 1 , 0 1 1 1 , 0<label>(3)</label></formula><p>This equation has been defined so that infeasible candidate solutions (i.e. trajectories that violate one or more feasibility constraints)</p><p>always have a fitness in the range 0, 1 whereas feasible solutions have a fitness in the range 1, 2 . Now that the fitness function has been defined, the metaheuristic has a way to evaluate the quality of the candidate solutions. In the next sub-sections, we explain the strategy used by the GA to steer the search towards high quality solutions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Genetic Algorithm</head><p>The GA is a population-based metaheuristic inspired by the Darwinian evolution of species. Published by Holland in 1975 <ref type="bibr" target="#b40">[41]</ref>,</p><p>the algorithm relies on different selection, crossover and mutation operators to improve candidate solutions to a given problem.</p><p>Whereas species have evolved to adapt to their environment, the candidate solutions in the GA are modified to minimize a cost function specific to the problem. The pseudo-code for the GA is given in Algorithm 1. the crossover. The crossover operation at line 5 requires two parent solutions and generates two child solutions. In our algorithm, four different crossover operations are implemented in order to diversify the search: the single-point crossover, the two-point crossover, the universal crossover and the blend crossover. The crossover used in a given iteration is chosen randomly between the four. The mutation operator at line 6 is applied with a 5% probability and modifies the children solutions by inverting a subsection of the trajectory. Finally, the parent solutions are replaced by the children solutions at line 7 using elitism where the n best solutions of the parents' generation replace the worst solutions of the children's generation. For more information on the different operators used in the work or the GA in general, we refer the reader to <ref type="bibr" target="#b41">[42]</ref>. As for all metaheuristics, the GA is sensitive to the initial condition (i.e. the quality of the initial candidate solutions randomly generated). In the proposed algorithm, this is mitigated in two ways.</p><p>Firstly, we use a very large number of candidate solutions. This reduces the chance that none of them are initially good. Secondly, we organize the solution in separate populations each evolving in isolation. In the event that one population underperforms, the others will ensure the overall effectiveness of the algorithm. This mitigation improves the reliability of the proposed algorithm without increasing the computation time, thanks to the parallel implementation on GPU.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. PARALLEL IMPLEMENTATION</head><p>In this section, we review three common parallel primitives for GPUs and explain how these primitives are used in the development of the UAV path planner module proposed in this paper. This section is based on preliminary works we published earlier in <ref type="bibr" target="#b28">[29]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Parallel primitives 1) Parallel Map Function</head><p>The parallel map is the most basic parallel primitive. It processes a series of inputs and produces a series of outputs as shown in Fig. <ref type="figure" target="#fig_5">6</ref> where the square of each input is calculated in parallel.  </p><p>2) Parallel Reduction</p><p>The parallel reduction is another fundamental primitive. It processes a series of inputs and produces a single output as shown in Fig. <ref type="figure" target="#fig_6">7</ref> where the sum of the input elements is calculated. For an input of elements, the parallel reduction executes in only steps compared to steps for a sequential implementation using a loop. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3) Parallel Scan</head><p>The parallel scan processes a series of inputs and produces a series of outputs where element from the output vector is the reduction of elements 0 to from the input vector. A parallel scan using the Kooge-Stone graph <ref type="bibr" target="#b42">[43]</ref> is shown in Fig. <ref type="figure" target="#fig_7">8</ref> to compute the prefix sum of the input vector. For a series of elements, the Kooge-Stone parallel scan completes in steps compared to steps for a sequential loop. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Parallelization of the metaheuristic</head><p>The UAV path planning module proposed in this paper is designed to offer a clear division between the optimization engine and the problem considered. This modularity allows us to use a software framework called gpuMF which we have previously published in <ref type="bibr" target="#b43">[44]</ref> to implement the GA on the GPU. Compared to other frameworks such as <ref type="bibr" target="#b44">[45]</ref> which offloads only parts of the calculations to the GPU, gpuMF has the advantage of parallelizing the entire metaheuristic on the GPU resulting in much higher performance gain. To give an idea of the inner workings of gpuMF, we show in Fig. <ref type="figure">9</ref> the flow chart for the parallel GA. The data is initialized and destroyed on the GPU minimizing memory transfers over the PCIe bus. The solution initialization, the universal and the blend crossover and the population replacement are performed using one CUDA thread per dimension of every solution. the crossover and the inversion mutation are done using one thread per solution. The fitness evaluation is a complex parallel operation which includes the path smoothing, the verification of the feasibility constraints and the evaluation of the objective functions. Its parallelization is described in detail in the next subsection. After the fitness values of the candidate solutions are computed, the solutions are sorted using a parallel bitonic sorting network <ref type="bibr" target="#b45">[46]</ref> in order to support the elitism replacement strategy.</p><p>Finally, once the maximum number of iterations has been reached, the best solution is copied to the CPU before the program terminates.</p><p>Fig. <ref type="figure">9</ref>. Flowchart of the parallel GA on GPU implemented using gpuMF</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Parallelization of the fitness function</head><p>As explained in section IV, evaluating the fitness of a candidate solution requires smoothing the trajectory using circular arcs, verifying that the segments composing the path do not intersect with the 3D terrain or any danger zones, verifying that none of the segment exceeds the maximum ascent or descent angle, calculating the fuel required by the UAV to fly the path and computing the average altitude of the path. We discuss in this section the parallelization strategy used for each of these operations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1) Parallel path smoothing</head><p>Let's consider the trajectory shown in Fig. <ref type="figure">10</ref>. It is built using of six waypoints. P 0 and P 5 are respectively the starting and the ending point. To be flyable by a fixed-wing UAV, the waypoints P 1 , P 2 , P 3 and P 4 need to be replaced by circular arcs following the procedure discussed earlier in section IV-B. For this, we propose two parallel approaches.  One approach to parallelizing the path smoothing on the GPU is to calculate all of the circular arcs in parallel using one CUDA thread per arc. However, because of the different angles, the number of points defining each arc varies from one arc to another. As an example, if we use 7 at step 4 of the procedure given in section IV-B, the number of points required to draw the arcs at waypoints P 1 , P 2 , P 3 and P 4 in Fig. <ref type="figure">10</ref> will be 3, 6, 6 and 3 respectively. Because the multiple threads will be writing to the same output vector which will contain the waypoints of the smoothed path, they each need to know the index of their first element. As shown in Fig. <ref type="figure" target="#fig_9">11</ref>, this can be done using an exclusive sum scan on the vector containing the number of points per arcs. The result of the exclusive scan (step 2 in Fig. <ref type="figure" target="#fig_9">11</ref>) is the destination index of the first element for each thread. In Fig. <ref type="figure" target="#fig_9">11</ref>, because threads 0 and 5 process the starting point P 0 and ending point P 5 (shown in Fig. <ref type="figure">10</ref>), they do not need to build a circular arc and will output a single value by simply copying P 0 and P 5 to the output vector. The first approach is not optimal as each thread will calculate a different number of points which will lead to a work imbalance between the multiple threads. In the second approach we solve this problem by using one thread per point of each circular arc. This approach is more complicated to implement, but will allow a much higher level of parallelism resulting in faster execution. As illustrated in Fig. <ref type="figure" target="#fig_11">12</ref>, the second approach also uses an exclusive sum scan to calculate the output index for each arc. Based on this index, two vectors are created. The flag vector (step 3) is initialized with ones for the elements identified by the result of the scan and zeros for all other elements. The value vector (step 3) is initialized with ones for all elements. A segmented exclusive sum scan is then performed on the flag and value vectors to obtain the arcs ID and the points ID at step 4. This operation is similar to the exclusive scan, but resets the value vector to zero every time a one is encountered in the flag vector. Once the segmented scan is completed, each point can be calculated independently based on its arc ID and point ID using the procedure given earlier in section IV-B. In this procedure, the arc ID allows us to identify the points P1, P and P2 at step 1 (of the algorithm at section IV-B)</p><p>while the point ID gives us the i at step 5 (also of the algorithm at section IV-B). This parallelization approach leads to a much higher level of parallelism than the previous one and eliminates the problem of work imbalance between the threads. To make the calculation, a block of CUDA threads is launched using a fixed number of threads and multiple passes are used when necessary to compute all of the points. The speedup achieved with both approaches will be discussed in the numerical simulation section. </p><formula xml:id="formula_6">1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1</formula><p>Value 1 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Flag</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2) Terrain collision and danger zones penetration</head><p>Once the path has been smoothed, it is defined by a very large number of waypoints. Verifying that the smoothed path does not travel under the terrain or inside a danger zone can be done on the GPU similarly to the two parallelization approaches we just discussed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>a) Approach 1: one thread per segment</head><p>In the first approach, each thread processes one segment. The number of points to be verified will vary from one segment to another based on the length of the segment. Once each thread has calculated the distance traveled underground or inside a danger zone, the values are added using a parallel reduction to get the overall values for the entire path. As with the path smoothing, this first approach is simple to implement, but suffer from work imbalance between threads. In the second approach, we calculate the number of points to be verified for each segment based on the segment length. We then use the same strategy shown in Fig. <ref type="figure" target="#fig_11">12</ref> to compute two index vectors. In this case, the first vector is the segment ID while the second is the point ID. Every point of every segment is then verified in parallel using one thread per point leading to a very high level of parallelism. The distances travelled underground or inside a danger zone are then summed using a parallel reduction to get the overall values for the entire path. As for the path smoothing, the speedup achieved with both approaches will be discussed in the numerical simulation section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3) Parallel verification of the ascent and descent rate</head><p>Verifying that each segment does not exceed the maximum ascent or descent rate, as defined by the flying envelope of the UAV, is fairly simple to parallelize on the GPU. We simply use one thread per segment and sum up the length of the segment exceeding the limits using a parallel reduction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4) Parallel calculation of fuel consumption</head><p>On the other hand, calculating the fuel consumption is not as simple. As discussed in section IV-C, the fuel required depends on the weight of the UAV which decreases as fuel is combusted. This means that the fuel for each segment cannot be calculated in parallel as the weight of the UAV at the beginning of the segment is not known (except for the first segment).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>a) Approach 1: one thread per path</head><p>In the first approach, we use one thread per smoothed path and sequentially compute the fuel required for each segment in order to get the fuel required for the entire path. This approach allows for an accurate calculation of the fuel, but does not exploit a very high level of parallelism.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>b) Approach 2: one thread per segment</head><p>In the second approach, to exploit a higher level of parallelism, we use one thread per segment of each path, but run multiple passes to correct the weight of the UAV at the beginning of each segment. In the first pass, we use the full weight of the UAV for every segment. Based on the quantity of fuel required for each segment, we run an exclusive sum scan to compute the weight of the UAV at the beginning of each segment. Based on an test using 2048 random trajectories generated for the terrain shown in Fig. <ref type="figure" target="#fig_1">3</ref>, we have observed that only three passes are required to get a precision of 3.6E-8 Newton on the weight of fuel required. This level of precision is more than enough for this application. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5) Parallel calculation of average altitude</head><p>The average altitude of a path can be calculated in parallel using one thread per segment of each path. Each thread computes the length of the segment and the product of its length and its average altitude. These values are then summed using a parallel reduction to obtain the length and the product length-altitude for the entire path. A single thread per path is then used to divide the lengthaltitude by the length to get the average altitude for the entire path.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6) Parallel calculation of the fitness function</head><p>Finally, once all the sub-products have been calculated, the fitness function can be evaluated using equation <ref type="bibr" target="#b2">(3)</ref>. Our implementation uses one thread per candidate solution. Once the fitness values of all candidate solutions are evaluated, the metaheuristic continues to the next iteration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. NUMERICAL SIMULATION</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Setup</head><p>The proposed UAV path planning module was programmed in C++ using CUDA SDK 8.0. The software was developed in Visual Studio 2015 and compiled with full optimization to ensure both the sequential version on CPU and the parallel version on GPU execute with maximum speed. The software was run on a Dell Precision T7600 workstation equipped with 16 GB or DDR3</p><p>RAM, an Intel Xeon E5-2650 CPU and a NVIDIA Titan X GPU. The E5-2650 is an 8-core CPU operating at 2.8 GHz and has 20 MB of L3 cache. The specification for the GPU was given earlier in section III.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Comparison of the parallelization strategies</head><p>In the first test, we evaluate the speedup provided by different parallelization strategies we have discussed in the previous section for the parallelization of the fitness function. To do so, we generate random trajectories for the map shown in Fig. <ref type="figure" target="#fig_1">3</ref> and evaluate their fitness while measuring the execution time for each of the sub-function called by the fitness function. The trajectories are built using 10 waypoints randomly distributed in the 3D environment. The test is done for the batch evaluation of 2048 candidate trajectories and is repeated 100 times. The average runtimes measured for the sequential execution on CPU and the parallel execution on GPU are listed in Table <ref type="table" target="#tab_15">I</ref>. Based on the results obtained, in the case of the path smoothing sub-function, it is the second parallelization approach that leads to the best performance due to the higher level of parallelism exploited. In the case of the check for possible collisions with the terrain or possible penetrations of danger zones, it is also the second approach that is the most advantageous for the same reason. This is also true for the computation of the fuel consumption. Based on these results, we configured our UAV path planning module to use the second parallelization approach for these three functions to ensure maximum speedup. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Trajectories calculated</head><p>In the second test, we evaluate the quality of the solutions computed by the proposed path planning module using 18 scenarios on six different terrains shown in Fig. <ref type="figure" target="#fig_1">3</ref> and 13 to 17. For a given map, a scenario includes a starting point, and ending point and one to five danger zones. In this work, three scenarios were developed for each terrain. Three of the six terrains were previously used in Ref <ref type="bibr" target="#b13">[14]</ref> while the other three are unique to this work. The first two terrains are fictions whereas the remaining four represent different Canadian landscapes from Mt Albert in Quebec all the way to the Vancouver coast line in British Columbia. The data for the real terrain was taken from the GeoBase repository <ref type="bibr" target="#b29">[30]</ref>. The characteristics of the UAV used by the path planner module are listed in Table <ref type="table" target="#tab_17">II</ref>. The characteristics were taken from <ref type="bibr" target="#b2">[3]</ref> and describe a small fixed wing UAV similar to the Silver Fox UAV developed by Ratheon <ref type="bibr" target="#b46">[47]</ref>. To run the test, we configured the GA to execute over 2000 iterations using 2048 candidate solutions divided into 64 independent populations of 32 candidate solutions each. At every iteration, the elitism rate allows the three best parent solutions to replace the three worse children solutions. A migration process is executed every 20 iterations and consists of exchanging the four best solutions between two neighboring populations following a bidirectional ring topology. This topology </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>20</head><p>helps reduce premature convergence and improves the exploration of the search space <ref type="bibr" target="#b47">[48]</ref>. The trajectories calculated are shown in in Fig. <ref type="figure" target="#fig_1">3</ref> and 13 to 17. To show the consistency of the proposed algorithm, we ran 200 trials for each scenario and recorded the fitness. The average fitness and standard deviation are shown in Table <ref type="table" target="#tab_19">III</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Speedup of the GPU implementation</head><p>In the last test, we measure the overall speedup provided by the parallel implementation on GPU. The configuration of the path planning module is the same as in the previous test, i.e. the number of solutions, the number of populations and the number of iterations are kept identical. The program is run 200 times for all 18 scenarios and the average runtimes and standard deviation for the sequential execution on CPU and the parallel execution on GPU are shown in Table <ref type="table" target="#tab_19">III</ref>. Overall, the average runtime for all 18 scenarios for the sequential version is 187 s while only 0.647 s for the parallel version. The time for the parallel program includes all overhead caused by memory transfers between the CPU and the GPU. This represents an average speedup of 290x. In a military operation where new threats or obstacles could be detected by the UAV while in flight, being able to compute a complete new trajectory when avoiding an obstacle or otherwise changing course endows the UAV with a considerable advantage. Indeed, a simple reflex change of direction may take the UAV in a dead-end from which it would have difficulty exiting, or which would make its trajectory very costly. Based on the average runtime of 0.647 s for our parallel implementation and given a cruising speed of 23 m/s for the UAV used in the numerical simulation, the distance travelled between the time a new obstacle would be detected and the time a new trajectory would be calculated is just 14.8 meters. In other words, as long as the UAV was able to detect obstacles at that distance, it would be able to avoid them by recalculating a complete new trajectory. This is obviously not possible using a sequential implementation on CPU which takes in average 290 times longer to execute.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>22</head><p>the path planning module. To speedup the calculation and allow for in-flight planning, the proposed software was implemented on GPU using simple parallel primitives that exploit a very high level of data-level parallelism. Due to the complexity of the problem, parallelizing the fitness function is challenging, but different parallelization strategies were explored and compared experimentally in order to identify the ones that were best suited for the GPU architecture. Our parallel implementation allowed for efficient execution on GPU resulting in a speedup of 290x compared to a sequential execution on CPU. Our numerical simulations were done using 18 scenarios on six different terrains and showed that the proposed GA-based planner produces quasi-optimal solutions in a timely fashion allowing in-flight replanning. In our future works, we intent to integrate the proposed path planning module to a UAV system and test it experimentally. We also intend to investigate the use of GPUs for multi-UAV path planning.  </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. CUDA execution model</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. 3D visualization of the computed path (fictitious map, 25 km 2 , altitude ranging from 0 to 250 m above mean sea level (AMSL))</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>9 Fig. 4 .</head><label>94</label><figDesc>Fig. 4. Circular arc connecting the line segment and</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Verification of collision with the terrain</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. Parallel map</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Parallel reduction</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Parallel inclusive scan</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>15 Fig. 10 .</head><label>1510</label><figDesc>Fig. 10. Smoothing of a 6-waypoint trajectory</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 11 .</head><label>11</label><figDesc>Fig. 11. Calculation of the output index for each arc</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 12 .</head><label>12</label><figDesc>Fig. 12. Calculation of the arc and point IDs for each thread</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Fig. 13 . 23 Fig. 15 .Fig. 16 .Fig. 1 .Fig. 2 .Fig. 3 .Fig. 4 .Fig. 5 .Fig. 6 .Fig. 8 .Fig. 9 .Fig. 10 .Fig. 11 .Fig. 12 .Fig. 13 .Fig. 14 .Fig. 15 .Fig. 16 .Fig. 17 .</head><label>13231516123456891011121314151617</label><figDesc>Fig. 13. 3D visualization of the computed path (fictitious map, 25 km 2 , altitude ranging from 0 to 250 m AMSL)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TAES.2018.2807558, IEEE Transactions on Aerospace and Electronic Systems 5</figDesc><table /><note><p>0018-9251 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TAES.2018.2807558, IEEE Transactions on Aerospace and Electronic Systems 6 the multiple MPs. Threads within the same thread block can be synchronized and can share data through the low latency shared memory. Synchronization and collaboration across different thread blocks is possible but require splitting the program into multiple</figDesc><table><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>To give an example</cell></row><row><cell cols="9">of the specifications, the NVIDIA Titan X GPU, which is used for the numerical simulation in section VI of this paper, has 3584</cell></row><row><cell cols="9">SPs operating at 1531 MHz, 28 MPs, 64 thousand registers per MP, 96 KB of shared memory per MP and 12 GB of DDR5 RAM</cell></row><row><cell cols="9">with an effective frequency of 10 GHz and a bandwidth of 480 GB/s. These specifications result is a computing capability of</cell></row><row><cell cols="9">11 TFlops given that enough parallelism is exploited by the software.</cell></row><row><cell>MP 1</cell><cell></cell><cell>MP 2</cell><cell></cell><cell>MP 3</cell><cell></cell><cell></cell><cell>MP n</cell></row><row><cell cols="2">Registers</cell><cell cols="2">Registers</cell><cell cols="2">Registers</cell><cell></cell><cell cols="2">Registers</cell></row><row><cell>Core</cell><cell>Core</cell><cell>Core</cell><cell>Core</cell><cell>Core</cell><cell>Core</cell><cell></cell><cell>Core</cell><cell>Core</cell></row><row><cell cols="2">Core Core Core Core</cell><cell cols="2">Core Core Core Core</cell><cell cols="2">Core Core Core Core</cell><cell>...</cell><cell cols="2">Core Core Core Core</cell></row><row><cell cols="2">Core Core</cell><cell cols="2">Core Core</cell><cell cols="2">Core Core</cell><cell></cell><cell cols="2">Core Core</cell></row><row><cell cols="2">Shared mem</cell><cell cols="2">Shared mem</cell><cell cols="2">Shared mem</cell><cell></cell><cell cols="2">Shared mem</cell></row><row><cell></cell><cell></cell><cell></cell><cell cols="3">Global memory</cell><cell></cell><cell></cell></row><row><cell cols="7">Fig. 1. Typical architecture of graphics processing units</cell><cell></cell></row><row><cell cols="9">NVIDIA GPUs are programmed in CUDA‚Ñ¢, a proprietary extension to the C and C++ languages which provides the necessary</cell></row><row><cell cols="9">constructs to interface with the GPU and define parallel functions. The CUDA execution model is shown in Fig. 2. The execution</cell></row><row><cell cols="9">flow of the program is controlled by the CPU (or host) and heavy calculations are offloaded to the GPU (or device) using parallel</cell></row><row><cell cols="9">functions called kernels. To execute a kernel, the GPU launches a grid of threads organized into thread blocks which are mapped to</cell></row></table><note><p>0018-9251 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head></head><label></label><figDesc>This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TAES.2018.2807558, IEEE Transactions on Aerospace and Electronic Systems</figDesc><table /><note><p>0018-9251 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head></head><label></label><figDesc>At line 1, the candidate solutions or trajectories are randomly initialized over the entire search space delimited by the terrain boundaries, the minimum and the maximum flying altitude. The termination criterion at line 2 is based on a fixed number of iterations that were determined experimentally in order to give a good solution within a reasonable computation time. Every iteration This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TAES.2018.2807558, IEEE Transactions on Aerospace and Electronic Systems 12</figDesc><table><row><cell cols="2">Algorithm 1. Pseudo code of the Genetic Algorithm</cell></row><row><cell>1:</cell><cell>generate population of candidate solutions</cell></row><row><cell>2:</cell><cell>while termination criterion is false</cell></row><row><cell>3:</cell><cell>compute fitness of candidate solutions</cell></row><row><cell>4:</cell><cell>select parent solutions</cell></row><row><cell>5:</cell><cell>generate children solutions by crossover</cell></row><row><cell>6:</cell><cell>mutate children solutions</cell></row><row><cell>7:</cell><cell>replace parent solutions</cell></row><row><cell>8:</cell><cell>return best solution</cell></row></table><note><p>of the GA starts at line 3 with the evaluation of the candidate solution using the fitness function we defined earlier. The selection operator at line 4 is implemented using the tournament approach where the best parent solution from a pool of three is selected for 0018-9251 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8"><head></head><label></label><figDesc>This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TAES.2018.2807558, IEEE Transactions on Aerospace and Electronic Systems</figDesc><table /><note><p>0018-9251 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9"><head></head><label></label><figDesc>This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TAES.2018.2807558, IEEE Transactions on Aerospace and Electronic Systems 14</figDesc><table /><note><p>The selection, 0018-9251 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_11"><head></head><label></label><figDesc>This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TAES.2018.2807558, IEEE Transactions on Aerospace and Electronic Systems 16</figDesc><table /><note><p>0018-9251 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_12"><head></head><label></label><figDesc>This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TAES.2018.2807558, IEEE Transactions on Aerospace and Electronic Systems</figDesc><table><row><cell>b) Approach 2: one thread per point of each segment</cell></row><row><cell>17</cell></row></table><note><p>0018-9251 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_13"><head></head><label></label><figDesc>This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TAES.2018.2807558, IEEE Transactions on Aerospace and Electronic Systems</figDesc><table /><note><p>0018-9251 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_14"><head></head><label></label><figDesc>This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TAES.2018.2807558, IEEE Transactions on Aerospace and Electronic Systems 19</figDesc><table /><note><p>0018-9251 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_15"><head>TABLE I .</head><label>I</label><figDesc>RUNTIME AND SPEEDUP FOR THE DIFFERENT SUB-FUNCTIONS USED FOR THE CALCULATION OF THE FITNESS FUNCTION (AVG OF 100 TRIALS)</figDesc><table><row><cell>Sub-function</cell><cell>Runtime (ms)</cell><cell></cell><cell>Speedup</cell></row><row><cell></cell><cell>CPU</cell><cell>GPU</cell><cell></cell></row><row><cell>Smooth path -approach 1</cell><cell>12.6</cell><cell>0.122</cell><cell>103 x</cell></row><row><cell>Smooth path -approach 2*</cell><cell>-</cell><cell>0.061</cell><cell>206 x</cell></row><row><cell>Check terrain/danger zones -approach 1</cell><cell>128.0</cell><cell>0.465</cell><cell>275 x</cell></row><row><cell>Check terrain/danger zones -approach 2*</cell><cell>-</cell><cell>0.303</cell><cell>422 x</cell></row><row><cell>Compute average altitude*</cell><cell>6.7</cell><cell>0.011</cell><cell>610 x</cell></row><row><cell>Compute fuel consumption -strategy 1</cell><cell>111.4</cell><cell>0.197</cell><cell>565 x</cell></row><row><cell>Compute fuel consumption -strategy 2*</cell><cell>-</cell><cell>0.169</cell><cell>659 x</cell></row><row><cell>Compute fitness*</cell><cell>0.02</cell><cell>0.005</cell><cell>4.0 x</cell></row><row><cell>TOTAL</cell><cell>258.7</cell><cell>0.549</cell><cell>471 x</cell></row></table><note><p>* used in the calculation of the total runtime</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_16"><head></head><label></label><figDesc>This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TAES.2018.2807558, IEEE Transactions on Aerospace and Electronic Systems</figDesc><table /><note><p>0018-9251 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_17"><head>TABLE II</head><label>II</label><figDesc></figDesc><table><row><cell></cell><cell></cell><cell cols="2">. CHARACTERISTICS OF THE SILVER FOX-LIKE UAV [3]</cell></row><row><cell>Weight empty (N)</cell><cell>113</cell><cell cols="2">Drag coefficient at zero lift 0.0251</cell></row><row><cell>Weight of fuel (N)</cell><cell>19</cell><cell>Power of the engine (W)</cell><cell>1850</cell></row><row><cell>Wingspan (m)</cell><cell>2.4</cell><cell cols="2">Specific fuel consumption 7.45E-7</cell></row><row><cell>Wing area (m 2 )</cell><cell>0.768</cell><cell>Propeller efficiency</cell><cell>0.8</cell></row><row><cell>Global lift coefficient</cell><cell>1.26</cell><cell>Cruising speed (m/s)</cell><cell>23.056</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_18"><head></head><label></label><figDesc>This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TAES.2018.2807558, IEEE Transactions on Aerospace and Electronic Systems 21</figDesc><table /><note><p>0018-9251 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_19"><head>TABLE III .</head><label>III</label><figDesc>FITNESS, RUNTIME AND SPEEDUP OF THE PROPOSED ALGORITHM FOR EACH OF THE 18 SCENARIOS (AVERAGE OF 200 TRIALS) The trajectories are built as series of line segments connected by circular arcs and are optimized to minimize fuel consumption and average altitude in order to increase the range and the furtiveness of the UAV in the context of This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TAES.2018.2807558, IEEE Transactions on Aerospace and Electronic Systems</figDesc><table><row><cell></cell><cell></cell><cell>Fitness</cell><cell></cell><cell></cell><cell></cell><cell>Runtime (sec)</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Terrain</cell><cell>Scenario</cell><cell>Avg</cell><cell>Std</cell><cell>Avg</cell><cell>CPU</cell><cell>Std</cell><cell>Avg</cell><cell>GPU</cell><cell>Std</cell><cell>Speedup</cell></row><row><cell>1</cell><cell>1</cell><cell>1.493</cell><cell>0.007</cell><cell></cell><cell>218.2</cell><cell>8.4</cell><cell></cell><cell>0.651</cell><cell>0.015</cell><cell>335 x</cell></row><row><cell></cell><cell>2</cell><cell>1.448</cell><cell>0.010</cell><cell></cell><cell>210.7</cell><cell>12.2</cell><cell></cell><cell>0.687</cell><cell>0.025</cell><cell>307 x</cell></row><row><cell></cell><cell>3</cell><cell>1.353</cell><cell>0.014</cell><cell></cell><cell>223.4</cell><cell>12.0</cell><cell></cell><cell>0.712</cell><cell>0.018</cell><cell>314 x</cell></row><row><cell>2</cell><cell>4</cell><cell>1.477</cell><cell>0.001</cell><cell></cell><cell>168.8</cell><cell>6.1</cell><cell></cell><cell>0.583</cell><cell>0.013</cell><cell>290 x</cell></row><row><cell></cell><cell>5</cell><cell>1.468</cell><cell>0.007</cell><cell></cell><cell>184.5</cell><cell>7.3</cell><cell></cell><cell>0.651</cell><cell>0.012</cell><cell>284 x</cell></row><row><cell></cell><cell>6</cell><cell>1.447</cell><cell>0.027</cell><cell></cell><cell>189.9</cell><cell>8.8</cell><cell></cell><cell>0.663</cell><cell>0.017</cell><cell>286 x</cell></row><row><cell>3</cell><cell>7</cell><cell>1.472</cell><cell>0.024</cell><cell></cell><cell>198.5</cell><cell>21.1</cell><cell></cell><cell>0.641</cell><cell>0.025</cell><cell>309 x</cell></row><row><cell></cell><cell>8</cell><cell>1.326</cell><cell>0.033</cell><cell></cell><cell>260.6</cell><cell>10.1</cell><cell></cell><cell>0.777</cell><cell>0.017</cell><cell>335 x</cell></row><row><cell></cell><cell>9</cell><cell>1.334</cell><cell>0.026</cell><cell></cell><cell>258.9</cell><cell>44.8</cell><cell></cell><cell>0.780</cell><cell>0.043</cell><cell>332 x</cell></row><row><cell>4</cell><cell>10</cell><cell>1.431</cell><cell>0.002</cell><cell></cell><cell>153.5</cell><cell>5.5</cell><cell></cell><cell>0.572</cell><cell>0.011</cell><cell>268 x</cell></row><row><cell></cell><cell>11</cell><cell>1.427</cell><cell>0.005</cell><cell></cell><cell>166.6</cell><cell>12.2</cell><cell></cell><cell>0.597</cell><cell>0.030</cell><cell>279 x</cell></row><row><cell></cell><cell>12</cell><cell>1.423</cell><cell>0.011</cell><cell></cell><cell>178.2</cell><cell>19.6</cell><cell></cell><cell>0.666</cell><cell>0.032</cell><cell>268 x</cell></row><row><cell>5</cell><cell>13</cell><cell>1.459</cell><cell>0.007</cell><cell></cell><cell>146.1</cell><cell>4.4</cell><cell></cell><cell>0.564</cell><cell>0.013</cell><cell>259x</cell></row><row><cell></cell><cell>14</cell><cell>1.466</cell><cell>0.007</cell><cell></cell><cell>155.6</cell><cell>4.0</cell><cell></cell><cell>0.586</cell><cell>0.022</cell><cell>266 x</cell></row><row><cell></cell><cell>15</cell><cell>1.461</cell><cell>0.016</cell><cell></cell><cell>161.0</cell><cell>3.5</cell><cell></cell><cell>0.641</cell><cell>0.017</cell><cell>251 x</cell></row><row><cell>6</cell><cell>16</cell><cell>1.423</cell><cell>0.012</cell><cell></cell><cell>163.1</cell><cell>3.1</cell><cell></cell><cell>0.598</cell><cell>0.020</cell><cell>273 x</cell></row><row><cell></cell><cell>17</cell><cell>1.413</cell><cell>0.006</cell><cell></cell><cell>165.3</cell><cell>7.3</cell><cell></cell><cell>0.629</cell><cell>0.015</cell><cell>263 x</cell></row><row><cell></cell><cell>18</cell><cell>1.411</cell><cell>0.016</cell><cell></cell><cell>172.8</cell><cell>3.6</cell><cell></cell><cell>0.656</cell><cell>0.013</cell><cell>264 x</cell></row><row><cell></cell><cell>Avg</cell><cell>1.430</cell><cell>0.013</cell><cell></cell><cell>187.5</cell><cell>10.8</cell><cell></cell><cell>0.647</cell><cell>0.020</cell><cell>290 x</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="2">VII. CONCLUSION</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="11">This paper presented a path planning module for fixed wing military UAVs capable of calculating quasi-optimal trajectories in</cell></row><row><cell cols="4">complex realistic 3D environment.</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table><note><p>military operations. The proposed software uses a genetic algorithm and a mix of four different crossover operators adapted to the path planning problem. This diversity allows for a better exploration of the search space and increases the overall performance of 0018-9251 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_20"><head>TABLE CAPTIONS TABLE I .</head><label>CAPTIONSI</label><figDesc>This article has been for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TAES.2018.2807558, IEEE Transactions on Aerospace and Electronic Systems 29 RUNTIME AND SPEEDUP FOR THE DIFFERENT SUB-FUNCTIONS USED FOR THE CALCULATION OF THE FITNESS FUNCTION (AVG OF 100 TRIALS)</figDesc><table><row><cell>TABLE II.</cell><cell>CHARACTERISTICS OF THE SILVER FOX-LIKE UAV [3]</cell></row><row><cell>TABLE III.</cell><cell>FITNESS, RUNTIME AND SPEEDUP OF THE PROPOSED ALGORITHM FOR EACH OF THE 18</cell></row><row><cell cols="2">SCENARIOS (AVERAGE OF 200 TRIALS)</cell></row></table><note><p>0018-9251 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.</p></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS</head><p>We gratefully acknowledge the support of the Directorate of Technical Airworthiness and Engineering Support (DTAES) who funded this research and NVIDIA Corporation who donated the NVIDIA TITAN X card used for this research.</p></div>
			</div>


			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>0018-9251 (c) 2018 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.</p><p>This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/TAES.2018.2807558, IEEE Transactions on Aerospace and Electronic Systems</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Strategic Significance of Drone Operations for Warfare</title>
		<author>
			<persName><forename type="first">J</forename><surname>Miller</surname></persName>
		</author>
		<ptr target="http://www.e-ir.info/2013/08/19/strategic-significance-of-drone-operations-for-warfare/" />
		<imprint>
			<date type="published" when="2018-01">Jan-2018</date>
		</imprint>
	</monogr>
	<note>E-International Relations</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Classic and Heuristic Approaches in Robot Motion Planning -A Chronological Review</title>
		<author>
			<persName><forename type="first">E</forename><surname>Masehian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Sedighizadeh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">World Acad. Sci. Eng. Technol</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">5</biblScope>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Simple formulas for the fuel of climbing propeller driven airplanes</title>
		<author>
			<persName><forename type="first">G</forename><surname>Labont√©</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Adv. Aircr. Spacecr. Sci</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="367" to="389" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A Modified Simulated Annealing Algorithm for SUAVs Path Planning</title>
		<author>
			<persName><forename type="first">M</forename><surname>Colnariƒç</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">P</forename><surname>Behnck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Doering</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">E</forename><surname>Pereira</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Rettberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2nd IFAC Conference on Embedded Systems, Computer Intelligence and Telematics</title>
		<meeting><address><addrLine>Maribor, Slovenia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2015">2015</date>
			<biblScope unit="volume">48</biblScope>
			<biblScope unit="page" from="63" to="68" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Path Planning for UAVs for Maximum Information Collection</title>
		<author>
			<persName><forename type="first">H</forename><surname>Ergezer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Leblebicioglu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Aerosp. Electron. Syst</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="502" to="520" />
			<date type="published" when="2013-01">Jan. 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">An improved constrained differential evolution algorithm for unmanned aerial vehicle global route planning</title>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Duan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Appl. Soft Comput</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="270" to="284" />
			<date type="published" when="2015-01">Jan. 2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Phase Angle-Encoded and Quantum-Behaved Particle Swarm Optimization Applied to Three-Dimensional Route Planning for UAV</title>
		<author>
			<persName><forename type="first">Yangguang</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mingyue</forename><surname>Ding</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chengping</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Syst. Man Cybern. Part Syst. Hum. IEEE Trans. On</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="511" to="526" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Modified central force optimization (MCFO) algorithm for 3D UAV path planning</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Mei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Su</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Neurocomputing</title>
		<imprint>
			<biblScope unit="volume">171</biblScope>
			<biblScope unit="page" from="878" to="888" />
			<date type="published" when="2016-01">Jan. 2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A UAV path planning with parallel ACO algorithm on CUDA platform</title>
		<author>
			<persName><forename type="first">U</forename><surname>Cekmez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ozsiginan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><forename type="middle">K</forename><surname>Sahingoz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2014 International Conference on Unmanned Aircraft Systems (ICUAS)</title>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="347" to="354" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Chaotic artificial bee colony approach to Uninhabited Combat Air Vehicle (UCAV) path planning</title>
		<author>
			<persName><forename type="first">C</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Duan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Aerosp. Sci. Technol</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="535" to="541" />
			<date type="published" when="2010-12">Dec. 2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Chaotic predator-prey biogeography-based optimization approach for UCAV path planning</title>
		<author>
			<persName><forename type="first">W</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Duan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Aerosp. Sci. Technol</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="153" to="161" />
			<date type="published" when="2014-01">Jan. 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Grey wolf optimizer for unmanned combat aerial vehicle path planning</title>
		<author>
			<persName><forename type="first">S</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Pan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Adv. Eng. Softw</title>
		<imprint>
			<biblScope unit="volume">99</biblScope>
			<biblScope unit="page" from="121" to="136" />
			<date type="published" when="2016-09">Sep. 2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Imperialist competitive algorithm optimized artificial neural networks for UCAV global path planning</title>
		<author>
			<persName><forename type="first">H</forename><surname>Duan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Huang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Adv. Neural Netw. Res. Appl. Bio-Inspired Comput. Tech. Appl. Pap. 9th Int. Symp. Neural Netw</title>
		<imprint>
			<biblScope unit="volume">125</biblScope>
			<biblScope unit="page" from="166" to="171" />
			<date type="published" when="2012-07">July 2012. Feb. 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Comparison of Parallel Genetic Algorithm and Particle Swarm Optimization for Real-Time UAV Path Planning</title>
		<author>
			<persName><forename type="first">V</forename><surname>Roberge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Tarbouchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Labonte</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Ind. Inform. IEEE Trans. On</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="132" to="141" />
			<date type="published" when="2013-02">Feb. 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Parallel Hybrid Metaheuristic on Shared Memory System for Real-Time UAV Path Planning</title>
		<author>
			<persName><forename type="first">V</forename><surname>Roberge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Tarbouchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Allaire</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Comput. Intell. Appl</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="1450008" to="1450009" />
			<date type="published" when="2014-06-25">Jun. 2014. 25</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">FPGA Implementation of Genetic Algorithm for UAV Real-Time Path Planning</title>
		<author>
			<persName><forename type="first">F</forename><surname>Allaire</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Tarbouchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Labont√©</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Fusina</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Intell. Robot. Syst</title>
		<imprint>
			<biblScope unit="volume">54</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="495" to="510" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">FPGA Implementation of an Evolutionary Algorithm for Autonomous Unmanned Aerial Vehicle On-Board Path Planning</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kok</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">F</forename><surname>Gonzalez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Kelson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Evol. Comput</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="272" to="281" />
			<date type="published" when="2013-04">Apr. 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">GPU Enhanced Path Finding for an Unmanned Aerial Vehicle</title>
		<author>
			<persName><forename type="first">R</forename><surname>Hossain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Magierowski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">G</forename><surname>Messier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Parallel Distributed Processing Symposium Workshops (IPDPSW)</title>
		<imprint>
			<date type="published" when="2014">2014. 2014</date>
			<biblScope unit="page" from="1285" to="1293" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Multi-UAV Path Planning with Parallel Genetic Algorithms on CUDA Architecture</title>
		<author>
			<persName><forename type="first">U</forename><surname>Cekmez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ozsiginan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><forename type="middle">K</forename><surname>Sahingoz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2016 on Genetic and Evolutionary Computation Conference Companion</title>
		<meeting>the 2016 on Genetic and Evolutionary Computation Conference Companion<address><addrLine>Denver, Colorado, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="1079" to="1086" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Discretization-Based and Look-Ahead Algorithms for the Dubins Traveling Salesperson Problem</title>
		<author>
			<persName><forename type="first">I</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Epstein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Isaiah</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kuzi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Shima</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Autom. Sci. Eng</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="383" to="390" />
			<date type="published" when="2017-01">Jan. 2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Strategies to Accelerate Harmonic Minimization in Multilevel Inverters Using a Parallel Genetic Algorithm on Graphical Processing Unit</title>
		<author>
			<persName><forename type="first">V</forename><surname>Roberge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Tarbouchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Okou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Power Electron. IEEE Trans. On</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="5087" to="5090" />
			<date type="published" when="2014-10">Oct. 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Comparison of Parallel Particle Swarm Optimizers for Graphical Processing Units and Multicore Processors</title>
		<author>
			<persName><forename type="first">V</forename><surname>Roberge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Tarbouchi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Comput. Intell. Appl</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">01</biblScope>
			<biblScope unit="page">1350006</biblScope>
			<date type="published" when="2013-03">Mar. 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Optimal power flow based on parallel metaheuristics for graphics processing units</title>
		<author>
			<persName><forename type="first">V</forename><surname>Roberge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Tarbouchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Okou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Electr. Power Syst. Res</title>
		<imprint>
			<biblScope unit="volume">140</biblScope>
			<biblScope unit="page" from="344" to="353" />
			<date type="published" when="2016-11">Nov. 2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">A parallel Bees Algorithm implementation on GPU</title>
		<author>
			<persName><forename type="first">G.-H</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S.-K</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y.-S</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S.-M</forename><surname>Yuan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Real-Time Embed. Softw. Multi-Core Platf</title>
		<imprint>
			<biblScope unit="volume">60</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="271" to="279" />
			<date type="published" when="2014-03">Mar. 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Parallel Ant Colony Optimization on Graphics Processing Units</title>
		<author>
			<persName><forename type="first">A</forename><surname>Del√©vacq</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Delisle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Gravel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Krajecki</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Metaheuristics GPUs</title>
		<imprint>
			<biblScope unit="volume">73</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="52" to="61" />
			<date type="published" when="2013-01">Jan. 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Investigations of a GPU-based levy-firefly algorithm for constrained optimization of radiation therapy treatment planning</title>
		<author>
			<persName><forename type="first">G</forename><surname>Kalantzis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Shang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Lei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Leventouri</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Swarm Evol. Comput</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="191" to="201" />
			<date type="published" when="2016-02">Feb. 2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">gpuMF: A Framework for Parallel Hybrid Metaheuristics on GPU with application to Harmonics Minimization in Multilevel Inverters</title>
		<author>
			<persName><forename type="first">V</forename><surname>Roberge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Tarbouchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Okou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Smart Energy Grid Engineering</title>
		<meeting><address><addrLine>Oshawa, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Programming Massively Parallel Processors: A Hands-on Approach</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">B</forename><surname>Kirk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">W</forename><surname>Hwu</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016">2016</date>
			<publisher>Morgan Kaufmann</publisher>
		</imprint>
	</monogr>
	<note>3rd Edition, 3rd edition</note>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Fast path planning for unmanned aerial vehicle using embedded GPU System</title>
		<author>
			<persName><forename type="first">V</forename><surname>Roberge</surname></persName>
			<affiliation>
				<orgName type="collaboration">SSD</orgName>
			</affiliation>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Tarbouchi</surname></persName>
			<affiliation>
				<orgName type="collaboration">SSD</orgName>
			</affiliation>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 14th International Multi-Conference on Systems, Signals Devices</title>
		<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="145" to="150" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">GeoBase Data Collections</title>
		<ptr target="http://www.geobase.ca/" />
		<imprint>
			<date type="published" when="2016-09">Sep-2016</date>
			<biblScope unit="page">1</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Evolutionary algorithm based offline/online path planner for UAV navigation</title>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">K</forename><surname>Nikolos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">P</forename><surname>Valavanis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">C</forename><surname>Tsourveloudis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">N</forename><surname>Kostaras</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Syst. Man Cybern. Part B Cybern</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="898" to="912" />
			<date type="published" when="2003-12">Dec. 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">An Analytical Continuous-Curvature Path-Smoothing Algorithm</title>
		<author>
			<persName><forename type="first">K</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sukkarieh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Robot</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="561" to="568" />
			<date type="published" when="2010-06">Jun. 2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Design of the fruit fly optimization algorithm based path planner for UAV in 3D environments</title>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Jia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Jian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 IEEE International Conference on Mechatronics and Automation (ICMA)</title>
		<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="381" to="386" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">On curves of minimal length with a constraint on average curvature and with prescribed initial and terminal positions and tangents</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">E</forename><surname>Dubins</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Am. J. Math</title>
		<imprint>
			<biblScope unit="volume">79</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="497" to="516" />
			<date type="published" when="1957-07">Jul. 1957</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Path Generation and Tracking in 3-D for UAVs</title>
		<author>
			<persName><forename type="first">G</forename><surname>Ambrosino</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ariola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Ciniglio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Corraro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">D</forename><surname>Lellis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Pironti</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Control Syst. Technol</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="980" to="988" />
			<date type="published" when="2009-07">Jul. 2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Optimal geometrical path in 3D with curvature constraint</title>
		<author>
			<persName><forename type="first">S</forename><surname>Hota</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Ghose</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2010 IEEE/RSJ International Conference on Intelligent Robots and Systems</title>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="113" to="118" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Path planning using 3D Dubins Curve for Unmanned Aerial Vehicles</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Saripalli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2014 International Conference on Unmanned Aircraft Systems (ICUAS)</title>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="296" to="304" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Real-time dynamic trajectory smoothing for unmanned air vehicles</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">P</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">W</forename><surname>Beard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">W</forename><surname>Mclain</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Control Syst. Technol</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="471" to="477" />
			<date type="published" when="2005-05">May 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">Sur la construction de trajectoires dynamiquement r√©alisables pour les avions √† partir de suites de segments de droites</title>
		<author>
			<persName><forename type="first">G</forename><surname>Labont√©</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009-11">Nov. 2009</date>
			<publisher>Coll√®ge militaire royal du Canada</publisher>
			<pubPlace>Kingston, Ontario, Canada</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Discussions on Normalization and Other Topics in Multi-Objective Optimization</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Ding</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ields-MITACS Industrial Problem Solving Workshop</title>
		<meeting><address><addrLine>Toronto</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title level="m" type="main">Adaptation in Natural and Artificial Systems</title>
		<author>
			<persName><forename type="first">J</forename><surname>Holland</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1975">1975</date>
			<publisher>University of Michigan Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<author>
			<persName><forename type="first">E.-G</forename><surname>Talbi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Metaheuristics: From Design to Implementation</title>
		<title level="s">Wiley Series on Parallel and Distributed Computing</title>
		<meeting><address><addrLine>New Jersey</addrLine></address></meeting>
		<imprint>
			<publisher>Wiley</publisher>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">A Scalable Work-Efficient and Depth-Optimal Parallel Scan for the GPGPU Environment</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">W</forename><surname>Ha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">D</forename><surname>Han</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Parallel Distrib. Syst</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="2324" to="2333" />
			<date type="published" when="2013-12">Dec. 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">gpuMF: A Framework for Parallel Hybrid Metaheuristics on GPU with application to the Minimization of Harmonics in Multilevel Inverters</title>
		<author>
			<persName><forename type="first">V</forename><surname>Roberge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Tarbouchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Okou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int J Process Syst. Eng</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">1-3</biblScope>
			<biblScope unit="page" from="20" to="41" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
		<title level="m" type="main">ParadisEO-MO-GPU: a framework for parallel GPU-based local search metaheuristics</title>
		<author>
			<persName><forename type="first">N</forename><surname>Melab</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">V</forename><surname>Luong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Boufaras</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E.-G</forename><surname>Talbi</surname></persName>
		</author>
		<imprint>
			<biblScope unit="page" from="1189" to="1196" />
			<pubPlace>Netherlands</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">High performance comparison-based sorting algorithm on many-core GPUs</title>
		<author>
			<persName><forename type="first">X</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Fan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Ienne</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2010 IEEE International Symposium on Parallel Distributed Processing (IPDPS)</title>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
		<title level="m" type="main">Raytheon: Silver Fox -UAS</title>
		<ptr target="http://www.raytheon.com/capabilities/products/silverfox/" />
		<imprint>
			<date type="published" when="2016-09">Sep-2016</date>
			<biblScope unit="page">7</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">The Generalized Island Model</title>
		<author>
			<persName><forename type="first">D</forename><surname>Izzo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ruci≈Ñski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Biscani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Parallel Architectures and Bioinspired Algorithms</title>
		<editor>
			<persName><forename type="first">F</forename><surname>Fern√°ndez De Vega</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><forename type="middle">I</forename><surname>Hidalgo P√©rez</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><surname>Lanchares</surname></persName>
		</editor>
		<meeting><address><addrLine>Berlin, Heidelberg; Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="151" to="169" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">he joined the Department of Electrical and Computer Engineering at RMC where he is currently Assistant Professor</title>
		<author>
			<persName><surname>Dr</surname></persName>
			<affiliation>
				<orgName type="collaboration">RMC</orgName>
			</affiliation>
		</author>
	</analytic>
	<monogr>
		<title level="m">His current research interests include parallel computing, optimization, robotics and real-time applications</title>
		<meeting><address><addrLine>Kingston, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005">2005. 2011 and 2016. July 2011</date>
		</imprint>
	</monogr>
	<note>Vincent Roberge received his B.Eng., MASc and PhD in Computer Engineering from the Royal Military College</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
