<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Software Developers&apos; Perceptions of Productivity</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">André</forename><forename type="middle">N</forename><surname>Meyer</surname></persName>
							<email>andre.meyer@uzh.ch</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Zurich Zurich</orgName>
								<address>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Thomas</forename><surname>Fritz</surname></persName>
							<email>fritz@ifi.uzh.ch</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Zurich Zurich</orgName>
								<address>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Gail</forename><forename type="middle">C</forename><surname>Murphy</surname></persName>
							<email>murphy@cs.ubc.ca</email>
							<affiliation key="aff1">
								<orgName type="institution">University of British Columbia Vancouver</orgName>
								<address>
									<region>BC</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Thomas</forename><surname>Zimmermann</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">Microsoft Research Redmond</orgName>
								<address>
									<region>WA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Software Developers&apos; Perceptions of Productivity</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">B9B99F2E594717F8B5C3466EBCE48F56</idno>
					<idno type="DOI">10.1145/2635868.2635892</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T14:14+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>H.4 [Information Systems Applications]: Miscellaneous; D.2.8 [Software Engineering]: Metrics-complexity measures</term>
					<term>performance measures Retrospection</term>
					<term>productivity</term>
					<term>goal setting</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The better the software development community becomes at creating software, the more software the world seems to demand. Although there is a large body of research about measuring and investigating productivity from an organizational point of view, there is a paucity of research about how software developers, those at the front-line of software construction, think about, assess and try to improve their productivity. To investigate software developers' perceptions of software development productivity, we conducted two studies: a survey with 379 professional software developers to help elicit themes and an observational study with 11 professional software developers to investigate emergent themes in more detail. In both studies, we found that developers perceive their days as productive when they complete many or big tasks without significant interruptions or context switches. Yet, the observational data we collected shows our participants performed significant task and activity switching while still feeling productive. We analyze such apparent contradictions in our findings and use the analysis to propose ways to better support software developers in a retrospection and improvement of their productivity through the development of new tools and the sharing of best practices.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>There is a common refrain that repeats itself in similar forms every few years: the inability for enough software to be produced to satisfy the needs of the world. In 1968, attendees at the first NATO software engineering conference coined the term software crisis <ref type="bibr" target="#b33">[34]</ref>. In 1972, Dijkstra wrote about "programming [becoming a] gigantic problem" <ref type="bibr">[16, p. 861]</ref>. In 1987, Boehm wrote about the growing demand for software <ref type="bibr" target="#b5">[6]</ref>. In 1996, Gibbs wrote about the chronic software crisis <ref type="bibr" target="#b18">[19]</ref>. And in 2011, Andreessen wrote about software eating the world, expressing that the need for software keeps outstripping the ability to produce the software <ref type="bibr" target="#b1">[2]</ref>.</p><p>There are a couple of ways of addressing the gap between software demand and supply. We could try to reduce the demand, namely the world's appetite for software. This approach seems unlikely to succeed. Or, we could try to increase the supply, namely our ability to produce software. In this paper, we consider one way to address supply: how we might improve the productivity of software developers.</p><p>A substantial amount of research into the meaning of software productivity has been undertaken over the past four decades (Section 2). Much of this research introduces particular definitions of productivity, such as computing productivity based on the number of source lines of code per hour <ref type="bibr" target="#b14">[15]</ref>. Another body of research considers organizational issues associated with productivity, such as the effect of the workplace on programmer performance <ref type="bibr" target="#b13">[14]</ref>. There is also research focused at specific tools and approaches for improving productivity. For example, the Personal Software Process (PSP) aims to help software developers improve their skills and quality of work by tracking a number of measures, including schedule data <ref type="bibr" target="#b21">[22]</ref>. Surprisingly, there has been no work that we have been able to find that considers when software developers perceive themselves to be productive and when they perceive themselves as unproductive. This information can help inform how productivity is defined, measured, assessed and supported by tools and best practices.</p><p>In this paper, we gather data about software developers' perceptions of productive and unproductive work through two studies: a survey (Section 3) and an observational study (Section 4). The survey we conducted had 379 responses from individuals with an average of 9.2 (±7.3) years professional software development experience. Our analysis of the survey responses found, amongst other results, that developers think about productive days in terms of ones in which many or big tasks are completed without significant context switching or interruption.</p><p>The observational study we conducted involved observing 11 professional software developers from three companies at work for four hours each. As the developers worked, we collected detailed logs of the tasks worked on and the programs used to perform work, gathering a total of 2650 log entries. We defined a task as a piece of work with a specific goal, such as fixing a bug, and an activity as an action undertaken by the developer during his work, such as navigating code or reading an email.</p><p>We also performed semi-structured follow-up interviews of the participants in this study. From this data, we found that significant context switching between tasks and activities can occur with developers still perceiving themselves as productive. The number of task switches we observed, 13.3 (±8.5) per hour on average, is similar to other reports in the literature <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b28">29]</ref>. The number of activity switches is larger than reported in previous studies at 47 (±19.8) times per hour on average. From this study, we gained insights into the complexities involved with helping developers assess their own productivity.</p><p>We conclude the paper with a discussion of ways in which we might help developers retrospect upon their productivity and share best practices (Section 5).</p><p>This paper makes three contributions:</p><p>• it presents results from a survey of 379 professional software developers, describing their perceptions of when their work is productive and what measurements of productivity they might find useful,</p><p>• it presents the results of an observational study of 11 professional software developers, showing that productive work can occur in the presence of some kinds of fast context switches, and</p><p>• it synthesizes the results of these two studies to suggest ways in which we might better support developers in reflecting upon their productivity and sharing best practices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">RELATED WORK</head><p>Definitions of productivity share characteristics of typically being about efficiency, inputs and outputs. As one example, the Oxford Dictionary defines productivity as "effectiveness of productive effort, especially in industry, as measured in terms of the rate of output per unit of input" <ref type="bibr">[37]</ref>. Often, the unit of input is time-based. Most research in software engineering defines productivity along similar lines; here are some examples:</p><p>• number of modification requests and added lines of code per year <ref type="bibr" target="#b31">[32]</ref>,</p><p>• number of tasks per month <ref type="bibr" target="#b39">[41]</ref>,</p><p>• number of function points per month <ref type="bibr" target="#b24">[25]</ref>,</p><p>• number of source lines of code per hour <ref type="bibr" target="#b14">[15]</ref>,</p><p>• number of lines of code per person month of coding effort <ref type="bibr" target="#b4">[5]</ref>,</p><p>• amount of work completed per reported hour of effort for each technology <ref type="bibr" target="#b27">[28]</ref>,</p><p>• ratio of produced logical code lines and spent effort <ref type="bibr" target="#b20">[21]</ref>,</p><p>• average number of logical source statements output per month over the product development cycle <ref type="bibr" target="#b29">[30]</ref>,</p><p>• total equivalent lines of code per person-month <ref type="bibr" target="#b34">[35]</ref>,</p><p>• resolution time defined as the time, in days, it took to resolve a particular modification request <ref type="bibr" target="#b8">[9]</ref>, and</p><p>• number of editing events to number of selection and navigation events needed to find where to edit code <ref type="bibr" target="#b26">[27]</ref>.</p><p>In this paper, we do not attempt to define productivity for developers but instead we investigate how developers themselves think about productive versus non-productive work.</p><p>In contrast, the majority of the work we could find about software development productivity focused on the organizational, not the personal, level. DeMarco and Lister found evidence that characteristics of the workplace and organization have significant influence on the performance of programmers <ref type="bibr" target="#b13">[14]</ref>. Boehm looked at large-scale possibilities for improving outputs, such as hiring well and using better languages and tools <ref type="bibr" target="#b5">[6]</ref>. Blackburn et al. correlated lines of code per person month to aspects such as program size and team size from survey data collected from Western Europe, Japan and US, finding that time-to-market correlated with higher productivity, while larger teams tend to have lower productivity <ref type="bibr" target="#b4">[5]</ref>. Through a systematic literature review, Wagner and Ruhe distilled a list of the main factors influencing productivity, separating them into technical (e.g., product complexity) and soft (e.g., manager capability) factors <ref type="bibr" target="#b38">[40]</ref>.</p><p>There are a lot fewer studies on productivity at the level of an individual developer where the focus is on the study of productivity, not on the effect of introducing a new tool or process to improve productivity. One of the few recent studies is by Kamma and Jalote who recorded and analyzed the screens of highly productive developers (as identified by managers) to identify characteristics of what makes developers productive when performing model-based testing activities. They found differences in the behaviors of the highly productive developers that could be captured as best practices, such as that high productivity programmers moved all required information to a common place and avoided referring to multiple documents when writing test cases <ref type="bibr" target="#b25">[26]</ref>. The studies we report on in this paper help describe more general work practices that developers themselves see as productive.</p><p>To try to improve the productivity of software developers, many approaches have been suggested (e.g., Extreme Programming <ref type="bibr" target="#b2">[3]</ref>). A few approaches have been aimed more specifically at improving productivity. The most notable of these is the Personal Software Process (PSP), which aims to help individuals improve their skills and quality of work by collecting (often manually) a set of basic PSP measures such as time, size, quality (defects), and schedule data <ref type="bibr" target="#b22">[23,</ref><ref type="bibr" target="#b21">22]</ref>. Johnson et al. <ref type="bibr" target="#b23">[24]</ref> observed a "PSP adoption problem," which they attributed to the high overhead of PSP-style metrics collection and analysis, and the requirement that PSP users switch between product development and process recording. To eliminate overhead and context switching, they introduced Hackystat which fully automates both data collection and analysis. Our work is orthogonal to PSP and Hackystat in that we explore what it means to developers to be productive and how they perceive productivity. This information can inform the design of new tools focused on aspects of productivity that developers care about the most.</p><p>In the last twenty years, an increasing number of studies were conducted about how developers work. Perry and colleagues' paper that collected time diaries from developers and performed direct observation of developers at work to see where they spent their time was one of the first <ref type="bibr" target="#b35">[36]</ref>. They found that work was typically performed in two hour chunks, progress on a particular development task could end up being blocked for various reasons, over half of the developers' time was spent in interactive activities other than coding and there were seven unique personal contacts per day on average. The data we present in this paper on the observational study we performed also found situations in which developers were blocked (also similar to Ko et. al. <ref type="bibr" target="#b28">[29]</ref>), but we saw much less time being spent on any one task. Other observational based studies have focused on specific areas of development, such as novice programming <ref type="bibr" target="#b3">[4]</ref>, program comprehension <ref type="bibr" target="#b36">[38]</ref>, software dependencies <ref type="bibr" target="#b12">[13]</ref>, information needs <ref type="bibr" target="#b28">[29]</ref>, and change tasks <ref type="bibr" target="#b37">[39]</ref>. The work we report on in this paper is unique in considering the condition under which developers perceive they are productive.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">STUDY 1: SURVEY</head><p>To gain a broad sense of what productivity means to software developers and how developers assess their productivity, we conducted a survey.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Participants and Method</head><p>The online survey had 28 questions: 8 on the participants' background and experience, 7 on perceptions of productivity, 7 on goal setting and monitoring, 3 on techniques for improving and monitoring productivity, and 3 on the raffle participation and dissemination of results. 16 of the 28 questions had a closed set of answers from which a participant selected, while 12 of the questions were open-ended. Table <ref type="table" target="#tab_0">1</ref> shows an example of a closed and an open-ended question. None of the questions were obligatory and a participant was allowed to drop out at any time. Depending on a participant's answers, some questions were filtered and not presented to avoid asking unnecessary questions. Interested readers can download the complete survey from our web site <ref type="bibr">[1]</ref>.</p><p>We announced the online survey on Twitter and in several big online developer forums, including two big Germanspeaking IT news portals. 1 We also advertised within Microsoft, sending a personalized email to 1500 Microsoft employees and directing them to a special internal posting of the survey. To incentivize participants, we held a raffle for the online participants to win two 200 US$ Amazon gift certificates and one for the Microsoft participants to win two 50 US$ Amazon gift certificates. We ended up with 379 valid responses: 185 from the general advertisements and 194 from Microsoft. Of the 185 participants that completed the survey from the general advertisement, the majority of the participants was from Germany (32%) and Switzerland (16%). Of all 379 participants, more than 93.4% of the participants listed their job as software developer; the remaining 6.6% reported having experience in software development. The average professional software development experience per participant was 9.2 (±7.3) years.</p><p>1 heise.de/developer and pocketpc.ch, verified 03/15/14 </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Results</head><p>We begin by describing when and in what conditions participants perceived their software development activities as productive. We then describe how participants think they could assess or measure their productivity. Since the responses to the open-ended questions largely overlap and there are only minor differences between the ratings by participants from within Microsoft and from the general advertisement, we present the results aggregated over all participants.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Productive Day.</head><p>We asked each participant to complete the sentence "I have a productive workday when . . . " in up to three different ways. Table <ref type="table" target="#tab_1">2</ref> summarizes the top five reasons mentioned by participants for having a productive workday. Most participants responded that their workday is productive when they complete tasks, achieve their planned goals or make progress on their goals (stated by 192, 53.2%). The second most mentioned reason for having a productive workday is getting into a "flow" without many "context-switches" and with no or few interruptions and distractions (182, 50.4%). Different kinds of distractions were described, ranging from interruptions from co-workers asking questions, phone calls, infrastructure issues, such as waiting for a build to complete, to disrupting background-noise in the office. The remaining three reasons of the top five all had substantially lower support: having no meetings (79, 21.9%), having clear goals (72, 19.9%) and planning of a workday (62, 17.2%).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Productive and Unproductive Activities.</head><p>Other questions in the survey focused on developers' perceptions of productivity on a finer-grained level. For example, we asked participants in two open-ended questions about the activities they consider particularly productive or unproductive in a workday.</p><p>The top five productive and unproductive activities mentioned by participants are summarized in Table <ref type="table" target="#tab_2">3</ref>. Unsurprisingly, the activities mentioned most frequently as particularly productive were coding related, including coding, testing, bug fixing and code reviews (236 participants, 71.5%). Despite this strong support for coding activities as productive, some participants (47, 14.2%) did mention certain aspects of coding as unproductive; these participants mostly differentiated between productive coding activities, such as implementing a feature, and unproductive ones, mainly debugging and testing.</p><p>Many other activities had mixed responses as to whether they were productive or unproductive. Most participants (191, 57.9%) think meetings are unproductive and a waste of time. However, 57 (17.3%) participants considered formal and informal meetings as productive, particularly when the meetings include decision making, have a clear focus and goals, improve relationships between developers, help others and when all meeting attendees are well-prepared. The main reasons stated for unproductive meetings were missing goals, lacking a preparation, too many participants attending the meeting, or going over time.</p><p>Participants were also mixed on their views of email. 62 (18.8%) participants considered time spent on email as unproductive, while a few (10, 3%) stated reading and writing emails as a productive activity. The amount of emails appears to be a reason contributing to this activity being seen as unproductive:</p><p>Tracking and responding to tons of emails <ref type="bibr">[and]</ref> email communications going back and forth for days together with no closure. (MS23) Other activities mentioned as being productive included planning (25, 7.6%), writing documentation and (administrative) reports (22, 6.7%), modeling or designing an architecture (18, 6.7%), or learning new things (11, 3.3%).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Assessing Productivity.</head><p>When asked to rate their productivity on the previous workday and workweek on a Likert-scale from 1 (very unsatisfied) to 5 (very satisfied), most participants were satisfied with their work (see Figure <ref type="figure" target="#fig_0">1</ref>, median of 4, mean of 3.42, ±0.94). Only a few participants mentioned being very satisfied (7.7%) or very unsatisfied (2.1%). The participants reported assessing their productivity in a variety of ways. Most (242, 78.1%) assessed their productivity on their  Measuring Productivity.</p><p>We also asked participants about which measures might be helpful to them to assess their productivity. In particular, we asked participants to rate 23 possible measures on a five point Likert-scale, with 1 -they strongly disagree that the metric would help them to assess their personal productivity and 5 -they strongly agree. The 23 measures were identified by the authors in an iterative process taking into account related work and responses from our pilot survey participants. The results are presented in Figure <ref type="figure" target="#fig_2">2</ref>.</p><p>The metric with the highest rating is "The number of work items (tasks, bugs) I closed." with a mean of 3.88 (±1. <ref type="bibr" target="#b21">22</ref>). This supports our findings presented above that participants assess their productivity often based on their tasks or work items completed. Overall, the means of all metrics lie between 2 and 4 with an overall mean of 3.14 (±0.35). 16 metrics were rated 3 or higher while only 7 metrics have values slightly below 3, showing that while the number of work items closed might be considered helpful by a wide range of participants, there is no single metric that is considerably better than others to assess a developer's productivity, similar to what Card states in <ref type="bibr">[8]</ref>. Furthermore, participants usually rated several metrics as helpful, and differed in which metrics they considered more helpful, suggesting that measuring one's productivity is an individual task that varies across developers. When further asked in an openended question on what one would want to measure to meet ones goals and improve ones productivity, 221 (89.1%) of the participants who answered the question mentioned one or multiple measurements. The measures varied a lot across participants. The top five mentioned pieces of information participants wanted to measure are presented in Table <ref type="table" target="#tab_3">4</ref>. 67 (27.0%) participants are interested in better knowing how they spend their time on their computer, in meetings, or taking breaks, as well as in comparing their time spent coding with time spent in meetings, time spent on personal tasks and total work time. Developers were also interested in the value of their work. 41 (16.5%) participants mentioned that performing useful, necessary, and interesting work and having the feeling of being necessary to the team or product is very important. 27 (10.9%) participants explicitly stated that they would not want to be measured, as they either think measuring decreases their productivity, have privacy concerns or think it is not possible to accurately measure productivity.</p><formula xml:id="formula_0">0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100%</formula><p>The number of code elements (e.g. packages or classes) that I changed.</p><p>The number of code elements that I changed for the first Ɵme.</p><p>The number of lines of code that I changed per day.</p><p>The number of emails I wrote.</p><p>The number of commits I made.</p><p>The number of API methods I learned each day.</p><p>The Ɵme that I spent browsing the web for personal maƩers during work.</p><p>The Ɵme it took me on average to respond to email.</p><p>The number of test cases I wrote that subsequently failed.</p><p>The Ɵme that I spent in each code project or package.</p><p>The Ɵme it takes me on average to sign off on code reviews.</p><p>The number of meeƟngs I aƩended.</p><p>The Ɵme that I spent browsing the web for work related informaƟon.</p><p>The number of test cases I wrote.</p><p>The number of code reviews I've signed off.</p><p>The Ɵme I spent in meeƟngs.</p><p>The number of work items I created.</p><p>The number of work items I created that were fixed.</p><p>The number of code reviews I've contributed to.</p><p>The Ɵme that I spent wriƟng code.</p><p>The Ɵme I spend reviewing code.</p><p>The Ɵme I have spent on each work item.</p><p>The number of work items (tasks, bugs) I closed.</p><p>Knowing the following would help me assess my personal producƟvity.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Threats to Validity</head><p>Since the survey participants might not be representative of the general population of software developers, the generalizability of our survey results might be limited. To mitigate this risk, we advertised our survey through various channels to a large audience. Having gathered data from software developers from various countries, and with different levels of open-source and closed source experience, we believe that our sample is fairly representative of software developers and that it provides an interesting perspective. Participants could freely decide whether to participate in the study or not (self-selection). They were informed about the survey's topics, an estimated duration for the participation and offered a raffle to incent their participation. This could have biased the selection of participants as only participants who could spare enough time or were interested in the incentive might have participated. We tried to mitigate this risk by advertising through various channels and offering a very generic incentive.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">STUDY 2: OBSERVATION</head><p>The survey results raise many questions. For instance, is there a common meaning between developers for what constitutes a task or a context switch? Are all interruptions necessary? How, when and what kind of email must developers process? To investigate some of the survey results in more depth, we conducted an observational study of software developers at work including follow-up interviews. To focus the observational study, we extracted three themes from the survey results:</p><p>1. the role of tasks in how developers work and how developers view productivity, 2. different views on the effect on productivity of various kinds of activities, and 3. the role of uninterrupted work to be in "the flow".</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Participants and Method</head><p>This observational study involved 11 professional software developers who were recruited from three international software development companies of varying size (Table <ref type="table" target="#tab_4">5</ref>). We used personal contacts and a recruiting email to solicit participation. Of the 11 participants, two were female and nine were male, and all resided either in the US or Canada. Participants had an average of 5.4 years (±3.4, ranging from 0.5 to 8 years) of professional software development experience and an average of 13.3 years (±8.3, ranging from 1.5 to 29 years) of total development experience. The primary work area of all participants was development and the roles varied between individual contributor and lead.</p><p>The study had two parts. In the first part, we observed each participant for a total of four hours on a single workday: two hours before and two hours after lunch. In four cases, we had to adapt the two sessions to accommodate for the participant's availability, still ensuring to have at least one hour in the morning or afternoon and all four hours on the same day. Before the first session, the observer, one of the authors of this paper, introduced himself to the participant as well as any colleagues working nearby, asking for all to ignore him as much as possible. He then provided a short introduction to the study and placed himself behind the participant to prevent distractions while still being able to read the screen contents of the participant, before asking the participant to continue his workday. The observer noted in an observation log each time the participant switched a program on his computer, was interrupted by others or interrupted him or herself, or switched a task while being in the same program. Each entry in the observation log consists of a time stamp, a reason for the switch, the program that the participant switched to and the task that the participant was working on. We defined a task as a piece of work with a specific goal or intention, such as fixing a bug or reviewing code changes for a specific work item. We inferred tasks from the active programs on the screen and the information considered in those programs, such as a work item consulted before beginning to code. Ten minutes into the first session, the observer briefly interrupted the participant to validate the tasks the participant was working on to ensure the quality of the collected transcripts. The preparation and process of the observation was inspired by Mintzberg's protocol of a structured observation session <ref type="bibr" target="#b30">[31]</ref>.</p><p>All observations were conducted by the same observer. For the first session of the first participant, we cross-checked the observations by having a second observer also record observations. Almost all events were noted by both observers. Of the total of 202 entries for the first session, less than 10 log entries (4.9%) were not contained in both observer's logs, while all others matched, suggesting a high accuracy of the primary observer's logs. Due to confidentiality reasons, we are not able to share the observation logs.</p><p>In the second part of the study, following the observations, we interviewed each participant using a semi-structured approach by using a set of prepared questions as general guidance. As part of this interview, the observer briefly discussed the tasks a participant worked on during the two observation sessions to verify the accuracy of the observation notes. The bulk of the interview focused on gaining further insights into the observations and to investigate themes arising from the survey results. In particular, the questions focused on participants' perception and reflection of productivity, context switches, work items, code check-ins, meetings and emails and whether and how information on these might help to assess a developer's productivity. Interviews took between 34 and 51 minutes per participant, and were conducted in person. Interested readers can download the interview guidance notes from our website <ref type="bibr">[1]</ref>.</p><p>From the observation sessions, we collected transcripts of a total of 44 hours of work with a total of 2650 observation events over all 11 developers. During the data analysis, we further determined the number of tasks a developer worked on and categorized each program into one of the activity categories listed in Table <ref type="table" target="#tab_5">6</ref>, which we inferred from the survey results and the observations using an open coding technique. The logged time stamps were then used to calculate the duration spent on interruptions, activities and tasks, amongst others. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Results</head><p>Figure <ref type="figure" target="#fig_3">3</ref> illustrates the work of each participant over the first observation session. Each participant is represented by a row. Each row is divided into segments, with each segment representing a particular task: when tasks are revisited the same grey-scale is used to represent the task. Figure <ref type="figure" target="#fig_3">3</ref> also shows the activities undertaken by each participant. The occurrence of the start of an activity is indicated with a particular colored shape. The lines emanating from the activity indicate the duration of an activity. For two participants, three hours of work are represented as these participants required the observation sessions to be split into one three hour session and one one hour session. Full graphs of both sessions are available here <ref type="bibr">[1]</ref>. Our analysis of the data in this section considers all of the data collected over the four hours for each participant.</p><p>Theme 1: Tasks.</p><p>During the observation sessions, participants worked on between 2 and 10 tasks (mean of 4.8, ±2.3) each, such as fixing a bug, reviewing code, helping co-workers with a problem, or reading and writing emails. Each participant switched frequently between tasks with a mean task switch rate of 13.3 (±8.5) times per hour. The average time spent on each task was 6.2 (±3.3) minutes. When asked about whether the workday observed was productive or not, 8 of the 11 participants (73%) stated that they were fairly or very productive during the observation sessions. The number of tasks worked on in the time observed (2 to 10) is similar in magnitude to the number of working spheres <ref type="bibr" target="#b12">(13)</ref>, a concept similar to our use of task, observed by Gonzales and Marks in a study that included a small number of software developers <ref type="bibr" target="#b19">[20]</ref>. The rate of task switching is similar to that reported in both <ref type="bibr" target="#b19">[20]</ref> and <ref type="bibr" target="#b28">[29]</ref>.</p><p>The participants mentioned several reasons during the interview for why task switches occurred, including the need to help co-workers make progress (T3, from company T), to unblock them (S3 and S4, from company S), and to interrupt themselves (all but two participants), similar to <ref type="bibr" target="#b28">[29]</ref> and <ref type="bibr" target="#b11">[12]</ref>. The participants also mentioned that task switches occurred when they were blocked themselves or waiting, such as waiting for a build to finish. In these cases, the participants mentioned that switching to email, code reviews, or other small tasks can help increase their productivity. Five of 11 participants (45%) also stated that making progress on either many tasks or a difficult one (S1, S2, T2, R2, R4) makes them perceive the day as productive. More experimentation is needed to further narrow down what "many" tasks means.</p><p>The results of this study also raise questions about the relationships between tasks and trackable work items. From the survey results, the highest rated measure for assessing productivity (Figure <ref type="figure" target="#fig_2">2</ref>) was the number of work items closed. From our observations, we found that the participants worked on many more tasks than trackable work items. When the participants were asked during the interview how many work items they worked on during that day, answers ranged from one to 13 and all participants stated that the size of the work items varies. There could be days where you've been working on one massive bug or issue or identified other sub-issues into it that need to be resolved, but there could be other days where you just got 20 bugs, but they are all little things. (R4) The varying size of work items likely introduces problems for using the measure of the number of work items closed as a sole means of productivity assessment, at least for shorter time periods, such as a day. Participants did mention the use of the number of closed work items as one that is used to reflect on a team's productivity, such as in meetings associated with the end of an agile sprint.</p><p>Theme 2: Activities.</p><p>During the sessions, participants switched activities 47.0 (±19.8) times per hour, spending on average 1.6 (±0.8) minutes on an activity before switching. Table <ref type="table" target="#tab_5">6</ref> shows the percentage of time across the observation periods that developers spent in each activity. Unsurprisingly, given our selection of participants, the largest amount of time was spent on coding (32.3%), with testing the application also taking an average of 11.7% of the observed time for each participant.</p><p>Based on an n-gram analysis of the activities recorded, we found that developers most frequently switched back and forth between coding and testing. Following coding the next activity was testing in 28.5% of the cases; a similar result holds for switches from testing to coding. Coding was also often superseded by an informal meeting (14.9%) either because someone asked a question or the participant asked someone else a question. After an informal meeting, developers either went to coding (26.1%), testing (14.8%) or right into planning (18.3%). Finally, emails were mostly checked while coding (18.8%) or testing (19.4%) and developers generally returned to testing (20.7%), coding (17.2%) or planning (19.5%) after the email check.</p><p>Interestingly, the second highest activity in terms of amount of time spent (Table <ref type="table" target="#tab_5">6</ref>) was informal meetings (13.1%), ranging from instant messages to a colleague interrupting and asking a question. During the interviews, participants described having between one and ten informal meetings per day, taking anywhere from one minute to two hours. The participants in this study agreed that unplanned, informal meetings are usually productive as they are generally short and efficient, and often succeed in helping to unblock a team member.</p><p>Unlike the survey respondents, participants in the observational study found all meetings generally productive, whether informal or formal. Participants in this study described having five to ten planned meetings in the past workweek, taking anywhere from 15 to 60 minutes each and uniformly stated that having more than two meetings a day decreases their productivity. Participants did describe formal meetings as more productive when only a few people are involved, there is a concrete outcome and the participant feels useful in the meeting.</p><p>Most survey respondents described email activities as unproductive (62, 18.8%) compared to productive (10, 3.0%). When interviewed, participants in the observational study did not consider emails as unproductive, given the small fraction of time that email took up in their day. Table <ref type="table" target="#tab_5">6</ref> shows that the participants spent on average just under 5% of their time handling email during our observation. This amount of time is similar to the time spent in formal meetings and in taking breaks of various forms.</p><p>Each participant used on average 14.8 (±3.9) different programs during the observation. Several developers used multiple different programs to achieve a similar activity. For instance, a few participants used two different development environments to develop software or two different email clients to handle email.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theme 3: Work Flow.</head><p>We were surprised by the number of task and activity switches performed by the developers we observed. In particular, because the survey respondents as well as observed developers had expressed concern that context switches lead to a loss of productivity while 8 of the 11 (72.7%) developers observed making so many switches in the four hours, felt that their sessions were productive. To understand the relationships between task switches, activity switches and context switches, we asked the participants in the observational study to define a context switch. The participants predominantly described a context switch as a change in thinking, as in: When I have to stop thinking about one thing and start thinking about something else. (T1) Participants did go on to discuss the range of context switches from small ones, such as getting distracted due to background noise or switching between programs when working on the same task (R2, R3), to switching between a main task and small other tasks such as code reviews or writing an email (R4) to switching between two cognitively different tasks (R1). Although all participants agreed that context switches generally reduced productivity, the cost or harm is dependent upon the duration of the switch, the reason for the switch and the focus on the current task. The longer the switch the more expensive:</p><p>[To] stop and work on a different task is a more costly context switch than writing a quick email. (S1) Similarly, the more a developer is focused on a task, the more expensive the switch:</p><formula xml:id="formula_1">Time [minutes] Subject 0 30 60 90 120 150 180 T3 T2 T1 S4 S3 S2 S1 R4 R3 R2 R1 • • • • • • • • • • •• • • • • • • • • • • • • • • • • • • • • • •</formula><p>51 activity switches 10 task switches, 3 distinct tasks</p><formula xml:id="formula_2">• • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • •• • • • • • • • • • • • ••</formula><p>• 166 activity switches 36 task switches, 3 distinct tasks</p><formula xml:id="formula_3">• • • • • • • • • • • •• • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • •• • • • • • •</formula><p>• 230 activity switches 79 task switches, 4 distinct tasks</p><formula xml:id="formula_4">•• •• • • • • • • • • • • • • • • • • • • • • • • •• • • • • • • • • • • • • • • • • • • •• • • •</formula><p>85 activity switches 13 task switches, 4 distinct tasks</p><formula xml:id="formula_5">• • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • •</formula><p>59 activity switches 20 task switches, 5 distinct tasks</p><formula xml:id="formula_6">• • • • • • • • • • • • •• • • • • • • • • • • • • • • • • • •</formula><p>88 activity switches 17 task switches, 5 distinct tasks</p><formula xml:id="formula_7">• • • •• • • • • • • • •• • • • • • •• • • • • • • •• • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • •• • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • •</formula><p>148 activity switches 27 task switches, 4 distinct tasks</p><formula xml:id="formula_8">• • • • • • • • • • • • • • • • • • • • • • • • • • •• • • • • • • • • • • • • • • • •</formula><p>108 activity switches 16 task switches, 5 distinct tasks</p><formula xml:id="formula_9">• • • • • • • • • • • • • • • • • • • • • • • • • • •</formula><p>• 66 activity switches 25 task switches 4 distinct tasks</p><formula xml:id="formula_10">• • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • • 102 activity switches 61 task switches 6 distinct tasks • • • • • • • • • • • • •• • • • • • • • • • • • • • • • • • • ••• • • • • • • • ••• • • • • • • • • • • • • • • •</formula><p>96 activity switches 28 task switches, 4 distinct tasks  Depends on where I was, if it was a critical section, it is really hard to get back to focus on that task, even if it only was for like 30 seconds. (R3) And also, switching away from a creative task for which more focus is required is more expensive than switching from a routine task (S2). Finally, a self-inflicted context switch, such as going for a coffee break or writing a quick, task-unrelated email, is less expensive than externally imposed switches, such as interruptions by co-workers or an unplanned task (S2, T2). The distinctions in the kinds of context switches help explain why the participants felt their work sessions were productive despite high numbers of task and activity switches. In particular, we observed the participants often switching to simple tasks, such as reviewing code for 30 seconds or answering an email, without apparent significant impact to a primary task, such as fixing a bug. Developers also adapt to waiting times, such as waiting for builds to complete, by performing low cost switches to tasks on which they could make progress. These short fast task switches are even faster than those reported by Gonzales and Marks in a study of business analysts, software developers and managers; they reported fast task switches as spending approximately two and a half minutes at a time on email <ref type="bibr" target="#b19">[20]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Threats to Validity</head><p>The small number of participants in our observation and interview study, the use of personal contacts for inviting participants and the short sessions capturing a total of 44 hours of work might limit the generalizability of the results of this study. We tried to address this threat by selecting participants from three different international software companies. Furthermore, the strength of our mixed method approach allowed us to triangulate findings obtained through the survey study with the results from the observations and follow up interviews. Additionally, participants were observed in their normal real-world work and not during an experimental exercise.</p><p>Another limitation might be the study setting of observing participants for 4 hours in one day. Participants could have had a particularly productive or unproductive day, or other factors could have influenced them. Furthermore, by sitting behind the participant and observing him or her, the observer might have been a source of distraction, influenced the work style or prevented interruptions by co-workers. We tried to mitigate this risk by splitting up the session into two, two-hour sessions, sitting as far away from the participant as possible and telling co-workers beforehand about the study and that they should continue and interrupt as usual.</p><p>The collection and categorization of data poses another threat to validity, since it is not straightforward to identify task switches or not miss any switches. To mitigate these risks, all observations were done by the same researcher and task switches were confirmed with participants. A crossvalidation was also done for the first session, showing significant agreement between the two observers.</p><p>Finally, the interviews and qualitative analysis was performed by one author using grounded theory techniques, such as open, axial and selective coding. To avoid observer bias, several parts of the survey, interview and observation were analyzed and open coded by at least one more author.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">DISCUSSION</head><p>Our findings contribute new knowledge about how developers perceive their own productivity and how it relates to their software development work. Despite the general interest of our participants in assessing and improving their productivity, there is little tool support to help them and few best practices recorded. Opportunities exist to better support developers in managing and improving their work to achieve higher productivity levels.</p><p>Tools for Retrospective Analysis.</p><p>Self-monitoring can provide valuable insights into one's own behavior and reflection about self-monitored information can be used to change one's behavior (e.g., <ref type="bibr" target="#b32">[33]</ref>, <ref type="bibr" target="#b16">[17]</ref>). In particular, activity tracking devices have been shown to be successful in promoting individuals to adopt a more active lifestyle (e.g., <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b17">18]</ref>). There has been growing interest in this area with devices such as the Fitbit<ref type="foot" target="#foot_0">2</ref> , which tracks such information as the number of steps per day and the number of stairs walked per day, and the Nike+ Fuelband<ref type="foot" target="#foot_1">3</ref> which aggregates such individual measures into a proprietary notion of fuel. Given that participants in our two studies did assert interest in measuring their productivity, what might similar individual or aggregate measures be that are useful for tracking and reporting to software developers?</p><p>Although developers in our survey suggested many possible individual measures (Figure <ref type="figure" target="#fig_2">2</ref>), further investigation of the top ranked item in our observational study indicated the difficulty of using one simple metric, in this case, number of work items closed. Taken together, the results of the two studies suggest that there might not be a single and/or simple measure for a developer's productivity. For example, while summarizing the time developers spent on certain activities during the day might provide some insight, as for example done by Codealike<ref type="foot" target="#foot_2">4</ref> , to be more meaningful it has to be combined with measures that also provide a certain, possibly personal, assessment of the productivity of the time spent, such as the progress made towards certain tasks, the value of the task for the customers, or how focused the developer was during the time. Based on a combination of such measures, some of which might be qualitative rankings by a developer, one might be able to abstract these to an overall productivity level for a day, not unlike the Nike fuel idea. Seeing fluctuations in an abstracted measure may provide sufficient support for a developer to retrospect on how work was performed, particularly if detailed information could be provided, such as the visualization of task and program switches in Figure <ref type="figure" target="#fig_3">3</ref>, to support the retrospection.</p><p>We believe the benefit of enabling and driving retrospection may be the key rather than trying to define measures that can be compared across individuals or across organizations. By driving productivity for the individual in a personalized way, we can also help assuage privacy concerns mentioned by the participants in our studies with who might be able to see productivity information and to whom it might be compared, such as co-workers. We plan to investigate aggregate approaches to visualizing and reporting productivity that are driven by the individual and assess how the provi-sion of such information enables retrospection and hopefully drives up productivity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Reducing Context Switches.</head><p>Participants in our study mentioned that being focused and "in the flow" without context switches increases their productivity. We can see benefits in visualizing context switches to developers and using rates or measures based on context switches as part of an aggregate measure of productivity in a given time period. However, this raises the question of how one can automatically identify context switches in a developer's work given that the switch is based not only on the program used, not only on the task defined, but on the semantics of the work the developer is performing. For instance, a developer might be switching to respond to a personal email after writing an email to a colleague about a problem in the code, thus staying in the same program but still switching context. Participants in our observational study clearly stated that quick context switches to perform such a task, as reading email while waiting for a build, did not impact productivity but switches that require a change in thinking are most costly and do impact productivity. Investigation is needed to determine whether it is possible to correlate program switches to help enable the determination of the cost of a context switch, for instance, a switch from a program that enables builds to be launched to email may be considered a low cost context switch. Investigation is also needed to determine if analysis of the information in programs used adjacently can help in assessing the cost of a context switch. Perhaps the combination of the correlation of program usage with the correlation of information in adjacently used programs can help assess whether it is more likely that the switch is between semantically different tasks rather than just a program switch and thus more likely to have a high cost. This information could be helpful in the development of aggregate and individual productivity measures and could be helpful to support developers in reflecting upon their work habits.</p><p>Even without knowledge of the exact cost of a specific context switch and without being able to retrospectively analyze one's productivity in terms of context switch behavior, there are multiple strategies that can help to avoid or prevent context switches. The ones mentioned by our study participants ranged from closing the email client and shutting off notifications, to listening to music, closing the office door, scheduling a meeting with oneself, coming in early to work, or working from home. One team even used an explicit indicator for avoiding work disruptions by others at certain times: [..] all devs in our team also have a physical light on top of our monitors that reflects our lync status, so people walking by can see not to disturb. This has been really useful in reducing random interruptions. (MS5) There is a trade-off though between an individual developer's productivity gain by avoiding interruptions from coworkers and a team's productivity loss. With a better assessment of the impact a context switch would have on a developer's productivity, one could devise approaches to optimize the productivity gain.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Setting Goals.</head><p>The setting of goals is another technique that can be used to motivate and enforce a behavior change. For example, goal-setting has been shown to be successful in motivating people to be more active, in particular in combination with self-monitoring (e.g. <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b6">7]</ref>). When it comes to software development, many of our participants stated they set goals for themselves on a daily or weekly basis. Although the developers did not necessarily believe that goal-setting helped them increase their productivity, they stated that the goals provide an overview of their tasks, allow them to prioritize work and to better react in cases of unplanned tasks, which were mentioned to be a major detriment to being and feeling productive. Goals are often written down in a simple todo list and allow developers to measure their progress and productivity, creating a certain happiness and satisfaction when the goals are met. However, as with a more general retrospection of a developer's productivity, monitoring goals either requires manual work by the developer or measures that can be tracked automatically, and describe the progress towards fulfilling a goal.</p><p>As with monitoring, several participants fear the negative effect goal monitoring can have and stated that the additional time needed for monitoring could better be used for actual work. From talking to developers, it seems however that the overhead of setting goals, is negligible and well worth it since it helps to better structure the next workday and thus make them more focused. This approach is a best practice that could be shared amongst developers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">CONCLUSION</head><p>To investigate how developers perceive and assess their own productivity, we conducted two studies, a survey with 379 professional software developers and an in-person observation study with 11 professional developers in three different companies. The survey results show that while most participants considered coding highly productive, there are several activities, such as meetings and handling emails, that are more difficult for developers to assess with respect to productivity. The results also show that while progress made on work items is considered as one of the better measures to assess productivity, there is no simple and single best measure to use. Developers also like to organize their work to get in "the flow" so as to have few interruptions and context switches. Interestingly, the observation data we collected paints a different picture, showing that developers experience a high number of switches in their work, switching tasks every 6.2 minutes and activities every 1.6 minutes. The reason why developers still feel productive is the varying cost associated with these varying forms of context switches.</p><p>Based on this data, we propose a number of ways to improve a developer's productivity through tool support and the sharing of best practices. For instance, tool support to recognize context switches and visualize the switches to a developer may help a developer in retrospecting on their own productivity. There are also interesting avenues to explore in terms of helping developers define aggregate personal productivity measurements for tracking and retrospection. With more support for retrospection on productivity, developers may be able to better share best practices, such as goal setting best practices discussed by participants in our observational study.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Developers' Productivity Satisfaction.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Metrics for Assessing Productivity.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Developers' Activity and Task Switches in the First Observation Session (for a figure of all sessions, please visit www.ifi.uzh.ch/seal/people/meyer/developers-productivity). © Meyer, Fritz, Murphy, Zimmermann.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Sample Survey Questions.</figDesc><table><row><cell>Q10 Are you satisfied with your productivity last week?</cell></row><row><cell>(very unsatisfied, unsatisfied, undecided, satisfied,</cell></row><row><cell>very satisfied)</cell></row><row><cell>Q11 How did you assess if you were productive last week?</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 :</head><label>2</label><figDesc>Top 5  Reasons for a Productive Workday.</figDesc><table><row><cell cols="2">(#, %: Number and Percentage of Participants)</cell><cell></cell></row><row><cell>I have a productive workday when I . . .</cell><cell>#</cell><cell>%</cell></row><row><cell>complete tasks or goals</cell><cell cols="2">192 53.2</cell></row><row><cell>have no/few interruptions and distractions</cell><cell cols="2">182 50.4</cell></row><row><cell>have no meetings</cell><cell cols="2">79 21.9</cell></row><row><cell>have clear goals and/or requirements are set</cell><cell cols="2">72 19.9</cell></row><row><cell>plan my workday</cell><cell cols="2">62 17.2</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 3 :</head><label>3</label><figDesc>Top 5 Productive and Unproductive Activities. (#, %: Number and Percentage of Participants)</figDesc><table><row><cell></cell><cell>#</cell><cell>%</cell></row><row><cell>Productive activities</cell><cell></cell><cell></cell></row><row><cell>coding (implementing new features, testing,</cell><cell cols="2">236 71.5</cell></row><row><cell>bug fixing, code reviews)</cell><cell></cell><cell></cell></row><row><cell>meetings</cell><cell cols="2">57 17.3</cell></row><row><cell>planning</cell><cell>25</cell><cell>7.6</cell></row><row><cell>reading/writing documentation and reports</cell><cell>22</cell><cell>6.7</cell></row><row><cell>designing or modeling an architecture (i.e. so-</cell><cell>18</cell><cell>5.5</cell></row><row><cell>lution for a programming problem)</cell><cell></cell><cell></cell></row><row><cell>Unproductive activities</cell><cell></cell><cell></cell></row><row><cell>meetings</cell><cell cols="2">191 57.9</cell></row><row><cell>reading/writing emails</cell><cell cols="2">62 18.8</cell></row><row><cell>unplanned work (e.g., solving problems, fight-</cell><cell cols="2">58 17.6</cell></row><row><cell>ing fires, unplanned tasks)</cell><cell></cell><cell></cell></row><row><cell>coding (testing, debugging, maintenance)</cell><cell cols="2">47 14.2</cell></row><row><cell>reading/writing documentation and reports</cell><cell>25</cell><cell>7.6</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 4 :</head><label>4</label><figDesc>What Participants Want to Measure.</figDesc><table><row><cell cols="2">(#, %: Number and Percentage of Participants)</cell></row><row><cell></cell><cell>#</cell><cell>%</cell></row><row><cell>Activities (how much time was spent where)</cell><cell cols="2">67 27.0</cell></row><row><cell>Achievements (actual work done, progress)</cell><cell cols="2">44 17.7</cell></row><row><cell>Value (usefulness of completed work, success</cell><cell cols="2">41 16.5</cell></row><row><cell>of feature, value to customer)</cell><cell></cell></row><row><cell>Time per task ratio</cell><cell cols="2">39 15.7</cell></row><row><cell>Number of context switches and distractions</cell><cell cols="2">36 14.5</cell></row><row><cell cols="3">progress in the past workday or workweek, largely through</cell></row><row><cell cols="3">tasks and work items completed. Several participants (86,</cell></row><row><cell cols="3">27.8%) mentioned other measures, such as lines of code,</cell></row><row><cell cols="3">number of commits, number of bugs found or fixed, num-</cell></row><row><cell cols="3">ber of test cases written and code reviews completed and</cell></row><row><cell cols="3">number of emails sent. Others (43, 13.9%) stated that they</cell></row><row><cell>use their feelings to assess their productivity.</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 5 :</head><label>5</label><figDesc>Observational Study Participants (Dev: De-</figDesc><table><row><cell cols="5">velopm., PM: Project Management, IC: Individ. Con-</cell></row><row><cell>tributor).</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>ID</cell><cell>Primary Work Area</cell><cell>Role</cell><cell cols="2">Dev Experience Prof. Overall</cell></row><row><cell cols="2">Company R</cell><cell></cell><cell></cell><cell></cell></row><row><cell>R1</cell><cell>Dev</cell><cell>IC</cell><cell>8.0</cell><cell>14.0</cell></row><row><cell>R2</cell><cell>Dev</cell><cell>Lead</cell><cell>7.5</cell><cell>8.5</cell></row><row><cell>R3</cell><cell>Dev</cell><cell>Lead</cell><cell>5.0</cell><cell>11.0</cell></row><row><cell>R4</cell><cell>Dev</cell><cell>IC</cell><cell>8.0</cell><cell>13.0</cell></row><row><cell cols="2">Company S</cell><cell></cell><cell></cell><cell></cell></row><row><cell>S1</cell><cell>Dev</cell><cell>IC/Lead</cell><cell>7.5</cell><cell>14.5</cell></row><row><cell>S2</cell><cell>PM/Dev</cell><cell>IC/Lead</cell><cell>4.0</cell><cell>22.0</cell></row><row><cell>S3</cell><cell>Dev</cell><cell>IC</cell><cell>0.5</cell><cell>1.5</cell></row><row><cell>S4</cell><cell>Dev</cell><cell>IC</cell><cell>12.0</cell><cell>29.0</cell></row><row><cell cols="2">Company T</cell><cell></cell><cell></cell><cell></cell></row><row><cell>T1</cell><cell>Dev</cell><cell>IC</cell><cell>2.0</cell><cell>22.0</cell></row><row><cell>T2</cell><cell>Dev</cell><cell>IC</cell><cell>2.0</cell><cell>5.0</cell></row><row><cell>T3</cell><cell>Dev</cell><cell>IC</cell><cell>3.0</cell><cell>6.0</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 6 :</head><label>6</label><figDesc>Activity Categories for Observations.</figDesc><table><row><cell>Category</cell><cell></cell><cell></cell><cell cols="3">% of time over all Observ.</cell></row><row><cell>Development</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Code</cell><cell cols="3">reading/editing/navigating code</cell><cell></cell><cell>32.3%</cell></row><row><cell>Debug</cell><cell>debugging</cell><cell></cell><cell></cell><cell></cell><cell>3.9%</cell></row><row><cell>VC</cell><cell cols="3">reading/accepting/submitting</cell><cell></cell><cell>2.4%</cell></row><row><cell></cell><cell>changes</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>TestApp</cell><cell cols="3">testing application outside IDE</cell><cell></cell><cell>11.7%</cell></row><row><cell>Review</cell><cell cols="3">performing code reviews</cell><cell></cell><cell>2.3%</cell></row><row><cell>DevOther</cell><cell cols="3">other related to development</cell><cell></cell><cell>4.1%</cell></row><row><cell>Email</cell><cell cols="2">reading/writing emails</cell><cell></cell><cell></cell><cell>4.9%</cell></row><row><cell>Planning</cell><cell cols="4">editing work items/tasks/todos; cre-</cell><cell>7.9%</cell></row><row><cell></cell><cell cols="3">ating/changing calendar entries</cell><cell></cell><cell></cell></row><row><cell cols="5">ReadWriteDoc reading/editing documents and other</cell><cell>2.7%</cell></row><row><cell></cell><cell cols="2">artifacts, e.g. pictures</cell><cell></cell><cell></cell><cell></cell></row><row><cell>MeetPlanned</cell><cell cols="2">scheduled meeting/call</cell><cell></cell><cell></cell><cell>4.9%</cell></row><row><cell>MeetInformal</cell><cell cols="4">ad-hoc, informal communication; e.g.</cell><cell>13.1%</cell></row><row><cell></cell><cell cols="4">unscheduled phone call / IM, or col-</cell><cell></cell></row><row><cell></cell><cell cols="2">league asks a question</cell><cell></cell><cell></cell><cell></cell></row><row><cell>BrowsingRel</cell><cell>Internet</cell><cell>browsing</cell><cell>related</cell><cell>to</cell><cell>4.0%</cell></row><row><cell></cell><cell cols="2">code/work/task</cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="4">BrowsingUnrel Internet browsing work unrelated</cell><cell></cell><cell>0.4%</cell></row><row><cell>Other</cell><cell cols="4">Anything else, such as break or</cell><cell>5.4%</cell></row><row><cell></cell><cell cols="2">changing music</cell><cell></cell><cell></cell><cell></cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_0"><p>fitbit.com, verified 03/15/14</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_1"><p>www.nike.com, verified 03/15/14</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_2"><p>codealike.com, verified 03/15/14</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">ACKNOWLEDGMENTS</head><p>The authors would like to thank the participants in the survey and observational study. The authors would also like to thank Chris Bird for his help and the anonymous reviewers for their helpful feedback. This work was funded in part by NSERC.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName><surname>References</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Why software is eating the world</title>
		<author>
			<persName><forename type="first">M</forename><surname>Andreessen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Wall Street Journal</title>
		<imprint>
			<date type="published" when="2011-08-20">August 20, 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Extreme programming explained: embrace change</title>
		<author>
			<persName><forename type="first">K</forename><surname>Beck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Andres</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Novice software developers, all over again</title>
		<author>
			<persName><forename type="first">A</forename><surname>Begel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Simon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Fourth International Workshop on Computing Education Research, ICER &apos;08</title>
		<meeting>the Fourth International Workshop on Computing Education Research, ICER &apos;08</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="3" to="14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Improving speed and productivity of software development: a global survey of software developers</title>
		<author>
			<persName><forename type="first">J</forename><surname>Blackburn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Scudder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Van Wassenhove</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="875" to="885" />
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Improving software productivity</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">W</forename><surname>Boehm</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1987">1987</date>
			<publisher>IEEE</publisher>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="43" to="57" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Using pedometers to increase physical activity and improve health: A systematic review</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">M</forename><surname>Bravata</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Smith-Spangler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Sundaram</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">L</forename><surname>Gienger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Lewis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">D</forename><surname>Stave</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Olkin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Sirard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Jama</title>
		<imprint>
			<biblScope unit="volume">298</biblScope>
			<biblScope unit="issue">19</biblScope>
			<biblScope unit="page" from="2296" to="2304" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">The Challenge of Productivity Measurements</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">N</forename><surname>Card</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Pacific Northwest Software Quality Conference</title>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Socio-technical congruence: A framework for assessing the impact of technical and work dependencies on software development productivity</title>
		<author>
			<persName><forename type="first">M</forename><surname>Cataldo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Herbsleb</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">M</forename><surname>Carley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Second ACM-IEEE International Symposium on Empirical Software Engineering and Measurement, ESEM &apos;08</title>
		<meeting>the Second ACM-IEEE International Symposium on Empirical Software Engineering and Measurement, ESEM &apos;08</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="2" to="11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Goal-setting considerations for persuasive technologies that encourage physical activity</title>
		<author>
			<persName><forename type="first">S</forename><surname>Consolvo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Klasnja</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">W</forename><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Landay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th international Conference on Persuasive Technology</title>
		<meeting>the 4th international Conference on Persuasive Technology</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Activity sensing in the wild: a field trial of ubifit garden</title>
		<author>
			<persName><forename type="first">S</forename><surname>Consolvo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">W</forename><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Toscos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Froehlich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Harrison</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Klasnja</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Lamarca</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Legrand</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Libby</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGCHI Conference on Human Factors in Computing Systems</title>
		<meeting>the SIGCHI Conference on Human Factors in Computing Systems</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="1797" to="1806" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Why do i keep interrupting myself?: Environment, habit and self-interruption</title>
		<author>
			<persName><forename type="first">L</forename><surname>Dabbish</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Mark</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">M</forename><surname>González</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, CHI &apos;11</title>
		<meeting>the SIGCHI Conference on Human Factors in Computing Systems, CHI &apos;11</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="3127" to="3130" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">An empirical study of software developers&apos; management of dependencies and changes</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">R B</forename><surname>De Souza</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">F</forename><surname>Redmiles</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 30th International Conference on Software Engineering, ICSE &apos;08</title>
		<meeting>the 30th International Conference on Software Engineering, ICSE &apos;08</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="241" to="250" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Programmer performance and the effects of the workplace</title>
		<author>
			<persName><forename type="first">T</forename><surname>Demarco</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Lister</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th International Conference on Software Engineering, ICSE &apos;85</title>
		<meeting>the 8th International Conference on Software Engineering, ICSE &apos;85</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1985">1985</date>
			<biblScope unit="page" from="268" to="272" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Analytical and empirical evaluation of software reuse metrics</title>
		<author>
			<persName><forename type="first">P</forename><surname>Devanbu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Karstu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Melo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Thomas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 18th International Conference on Software Engineering, ICSE &apos;96</title>
		<meeting>the 18th International Conference on Software Engineering, ICSE &apos;96</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1996">1996</date>
			<biblScope unit="page" from="189" to="199" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">The humble programmer</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">W</forename><surname>Dijkstra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="859" to="866" />
			<date type="published" when="1972">1972</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Persuasive technology: Using computers to change what we think and do</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">J</forename><surname>Fogg</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002. 2002</date>
			<publisher>Ubiquity</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Persuasive technology in the real world: A study of long-term use of activity sensing devices for fitness</title>
		<author>
			<persName><forename type="first">T</forename><surname>Fritz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">M</forename><surname>Huan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">C</forename><surname>Murphy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Zimmermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGCHI Conference on Human Factors in Computing Systems</title>
		<meeting>the SIGCHI Conference on Human Factors in Computing Systems</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
	<note>to appear</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Software&apos;s chronic crisis</title>
		<author>
			<persName><forename type="first">W</forename><surname>Gibbs</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Scientific American</title>
		<imprint>
			<biblScope unit="volume">271</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="86" to="94" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">constant, constant, multi-tasking craziness&quot;: Managing multiple working spheres</title>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">M</forename><surname>González</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Mark</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, CHI &apos;04</title>
		<meeting>the SIGCHI Conference on Human Factors in Computing Systems, CHI &apos;04</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="113" to="120" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">A multiple case study on the impact of pair programming on product quality</title>
		<author>
			<persName><forename type="first">H</forename><surname>Hulkko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Abrahamsson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 27th International Conference on Software Engineering, ICSE &apos;05</title>
		<meeting>the 27th International Conference on Software Engineering, ICSE &apos;05</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="495" to="504" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Introduction to the Personal Software Process</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">S</forename><surname>Humphrey</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996">1996</date>
			<publisher>Addison-Wesley Professional</publisher>
		</imprint>
	</monogr>
	<note>first edition</note>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Using a defined and measured personal software process</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">S</forename><surname>Humphrey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="77" to="88" />
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Beyond the personal software process: Metrics collection and analysis for the differently disciplined</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">M</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Kou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Agustin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Moore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Miglani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Zhen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">E J</forename><surname>Doane</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 25th International Conference on Software Engineering, ICSE &apos;03</title>
		<meeting>the 25th International Conference on Software Engineering, ICSE &apos;03</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="641" to="646" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Software metrics: good, bad and missing</title>
		<author>
			<persName><forename type="first">C</forename><surname>Jones</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="98" to="100" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Effect of task processes on programmer productivity in model-based testing</title>
		<author>
			<persName><forename type="first">D</forename><surname>Kamma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Jalote</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th India Software Engineering Conference, ISEC &apos;13</title>
		<meeting>the 6th India Software Engineering Conference, ISEC &apos;13</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="23" to="28" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Using task context to improve programmer productivity</title>
		<author>
			<persName><forename type="first">M</forename><surname>Kersten</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">C</forename><surname>Murphy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th ACM SIGSOFT International Symposium on Foundations of Software Engineering, SIGSOFT &apos;06/FSE-14</title>
		<meeting>the 14th ACM SIGSOFT International Symposium on Foundations of Software Engineering, SIGSOFT &apos;06/FSE-14</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="1" to="11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A software engineering experiment in software component generation</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">B</forename><surname>Kieburtz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Mckinney</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Bell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hook</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kotov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lewis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">P</forename><surname>Oliva</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Sheard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Walton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 18th International Conference on Software Engineering, ICSE &apos;96</title>
		<meeting>the 18th International Conference on Software Engineering, ICSE &apos;96</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1996">1996</date>
			<biblScope unit="page" from="542" to="552" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Information needs in collocated software development teams</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J</forename><surname>Ko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Deline</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Venolia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 29th International Conference on Software Engineering, ICSE &apos;07</title>
		<meeting>the 29th International Conference on Software Engineering, ICSE &apos;07</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="344" to="353" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Integrating measurement with improvement: An action-oriented approach: Experience report</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Lane</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Zubrow</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 19th International Conference on Software Engineering, ICSE &apos;97</title>
		<meeting>the 19th International Conference on Software Engineering, ICSE &apos;97</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1997">1997</date>
			<biblScope unit="page" from="380" to="389" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">The nature of managerial work. Theory of management policy series</title>
		<author>
			<persName><forename type="first">H</forename><surname>Mintzberg</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1980">1980</date>
			<publisher>Prentice-Hall</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Two case studies of open source software development: Apache and mozilla</title>
		<author>
			<persName><forename type="first">A</forename><surname>Mockus</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">T</forename><surname>Fielding</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Herbsleb</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Software Engineering and Methodology</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="309" to="346" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Mindfulness, reflection, and persuasion in personal informatics</title>
		<author>
			<persName><forename type="first">S</forename><surname>Munson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGCHI Conference on Human Factors in Computing Systems</title>
		<meeting>the SIGCHI Conference on Human Factors in Computing Systems</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Software engineering: Report of a conference sponsored by the nato science committee</title>
		<author>
			<persName><forename type="first">P</forename><surname>Naur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Randell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Scientific Affairs Division</title>
		<imprint>
			<publisher>NATO</publisher>
			<date type="published" when="1969">1969</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">An analysis of trends in productivity and cost drivers over years</title>
		<author>
			<persName><forename type="first">V</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Boehm</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7th International Conference on Predictive Models in Software Engineering, Promise &apos;11</title>
		<meeting>the 7th International Conference on Predictive Models in Software Engineering, Promise &apos;11</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="1" to="3" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">People, organizations, and process improvement. Software</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">E</forename><surname>Perry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">A</forename><surname>Staudenmayer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">G</forename><surname>Votta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="36" to="45" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">How do professional developers comprehend software?</title>
		<author>
			<persName><forename type="first">T</forename><surname>Roehm</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Tiarks</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Koschke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Maalej</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2012 International Conference on Software Engineering, ICSE 2012</title>
		<meeting>the 2012 International Conference on Software Engineering, ICSE 2012</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="255" to="265" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Questions programmers ask during software evolution tasks</title>
		<author>
			<persName><forename type="first">J</forename><surname>Sillito</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">C</forename><surname>Murphy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">De</forename><surname>Volder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th ACM SIGSOFT International Symposium on Foundations of Software Engineering, SIGSOFT &apos;06/FSE-14</title>
		<meeting>the 14th ACM SIGSOFT International Symposium on Foundations of Software Engineering, SIGSOFT &apos;06/FSE-14</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="23" to="34" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">A systematic review of productivity factors in software development</title>
		<author>
			<persName><forename type="first">S</forename><surname>Wagner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ruhe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Siemens</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Developer fluency: Achieving true mastery in software projects</title>
		<author>
			<persName><forename type="first">M</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Mockus</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE &apos;10</title>
		<meeting>the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE &apos;10</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="137" to="146" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
