<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Scalable Influence Estimation in Continuous-Time Diffusion Networks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Nan</forename><surname>Du</surname></persName>
							<email>dunan@gatech.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Georgia Institute of Technology * MPI for Intelligent Systems †</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Le</forename><surname>Song</surname></persName>
							<email>lsong@cc.gatech.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Georgia Institute of Technology * MPI for Intelligent Systems †</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Manuel</forename><surname>Gomez-Rodriguez</surname></persName>
							<email>manuelgr@tue.mpg.de</email>
							<affiliation key="aff0">
								<orgName type="department">Georgia Institute of Technology * MPI for Intelligent Systems †</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Hongyuan</forename><surname>Zha</surname></persName>
							<email>zha@cc.gatech.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Georgia Institute of Technology * MPI for Intelligent Systems †</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Scalable Influence Estimation in Continuous-Time Diffusion Networks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">2B307907A132DF85FC49752A25C3927C</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T04:26+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>If a piece of information is released from a media site, can we predict whether it may spread to one million web pages, in a month ? This influence estimation problem is very challenging since both the time-sensitive nature of the task and the requirement of scalability need to be addressed simultaneously. In this paper, we propose a randomized algorithm for influence estimation in continuous-time diffusion networks. Our algorithm can estimate the influence of every node in a network with |V| nodes and |E| edges to an accuracy of using n = O(1/ 2 ) randomizations and up to logarithmic factors O(n|E|+n|V|) computations. When used as a subroutine in a greedy influence maximization approach, our proposed algorithm is guaranteed to find a set of C nodes with the influence of at least (1 -1/e) OPT -2C , where OPT is the optimal value. Experiments on both synthetic and real-world data show that the proposed algorithm can easily scale up to networks of millions of nodes while significantly improves over previous state-of-the-arts in terms of the accuracy of the estimated influence and the quality of the selected nodes in maximizing the influence.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Motivated by applications in viral marketing <ref type="bibr" target="#b0">[1]</ref>, researchers have been studying the influence maximization problem: find a set of nodes whose initial adoptions of certain idea or product can trigger, in a time window, the largest expected number of follow-ups. For this purpose, it is essential to accurately and efficiently estimate the number of follow-ups of an arbitrary set of source nodes within the given time window. This is a challenging problem for that we need first accurately model the timing information in cascade data and then design a scalable algorithm to deal with large real-world networks. Most previous work in the literature tackled the influence estimation and maximization problems for infinite time window <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b2">3,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b5">6]</ref>. However, in most cases, influence must be estimated or maximized up to a given time, i.e., a finite time window must be considered <ref type="bibr" target="#b6">[7]</ref>. For example, a marketer would like to have her advertisement viewed by a million people in one month, rather than in one hundred years. Such time-sensitive requirement renders those algorithms which only consider static information, such as network topologies, inappropriate in this context.</p><p>A sequence of recent work has argued that modeling cascade data and information diffusion using continuous-time diffusion networks can provide significantly more accurate models than discretetime models <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b14">15]</ref>. There is a twofold rationale behind this modeling choice. First, since follow-ups occur asynchronously, continuous variables seem more appropriate to represent them. Artificially discretizing the time axis into bins introduces additional tuning parameters, like the bin size, which are not easy to choose optimally. Second, discrete time models can only describe transmission times which obey an exponential density, and hence can be too restricted to capture the rich temporal dynamics in the data. Extensive experimental comparisons on both synthetic and real world data showed that continuous-time models yield significant improvement in settings such as recovering hidden diffusion network structures from cascade data <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b9">10]</ref> and predicting the timings of future events <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b13">14]</ref>.</p><p>However, estimating and maximizing influence based on continuous-time diffusion models also entail many challenges. First, the influence estimation problem in this setting is a difficult graphical model inference problem, i.e., computing the marginal density of continuous variables in loopy graphical models. The exact answer can be computed only for very special cases. For example, Gomez-Rodriguez et al. <ref type="bibr" target="#b6">[7]</ref> have shown that the problem can be solved exactly when the transmission functions are exponential densities, by using continuous time Markov processes theory. However, the computational complexity of such approach, in general, scales exponentially with the size and density of the network. Moreover, extending the approach to deal with arbitrary transmission functions would require additional nontrivial approximations which would increase even more the computational complexity. Second, it is unclear how to scale up influence estimation and maximization algorithms based on continuous-time diffusion models to millions of nodes. Especially in the maximization case, even a naive sampling algorithm for approximate inference is not scalable: n sampling rounds need to be carried out for each node to estimate the influence, which results in an overall O(n|V||E|) algorithm. Thus, our goal is to design a scalable algorithm which can perform influence estimation and maximization in this regime of networks with millions of nodes.</p><p>In particular, we propose CONTINEST (Continous-Time Influence Estimation), a scalable randomized algorithm for influence estimation in a continuous-time diffusion network with heterogeneous edge transmission functions. The key idea of the algorithm is to view the problem from the perspective of graphical model inference, and reduces the problem to a neighborhood estimation problem in graphs. Our algorithm can estimate the influence of every node in a network with |V| nodes and |E| edges to an accuracy of using n = O(1/ 2 ) randomizations and up to logarithmic factors O(n|E| + n|V|) computations. When used as a subroutine in a greedy influence maximization algorithm, our proposed algorithm is guaranteed to find a set of nodes with an influence of at least (1 -1/e) OPT -2C , where OPT is the optimal value. Finally, we validate CONTINEST on both influence estimation and maximization problems over large synthetic and real world datasets. In terms of influence estimation, CONTINEST is much closer to the true influence and much faster than other state-of-the-art methods. With respect to the influence maximization, CONTINEST allows us to find a set of sources with greater influence than other state-of-the-art methods.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Continuous-Time Diffusion Networks</head><p>First, we revisit the continuous-time generative model for cascade data in social networks introduced in <ref type="bibr" target="#b9">[10]</ref>. The model associates each edge j → i with a transmission function, f ji (τ ji ), a density over time, in contrast to previous discrete-time models which associate each edge with a fixed infection probability <ref type="bibr" target="#b0">[1]</ref>. Moreover, it also differs from discrete-time models in the sense that events in a cascade are not generated iteratively in rounds, but event timings are sampled directly from the transmission function in the continuous-time model.</p><p>Continuous-Time Independent Cascade Model. Given a directed contact network, G = (V, E), we use a continuous-time independent cascade model for modeling a diffusion process <ref type="bibr" target="#b9">[10]</ref>. The process begins with a set of infected source nodes, A, initially adopting certain contagion (idea, meme or product) at time zero. The contagion is transmitted from the sources along their out-going edges to their direct neighbors. Each transmission through an edge entails a random spreading time, τ , drawn from a density over time, f ji (τ ). We assume transmission times are independent and possibly distributed differently across edges. Then, the infected neighbors transmit the contagion to their respective neighbors, and the process continues. We assume that an infected node remains infected for the entire diffusion process. Thus, if a node i is infected by multiple neighbors, only the neighbor that first infects node i will be the true parent. As a result, although the contact network can be an arbitrary directed network, each cascade (a vector of event timing information from the spread of a contagion) induces a Directed Acyclic Graph (DAG).</p><p>Heterogeneous Transmission Functions. Formally, the transmission function f ji (t i |t j ) for directed edge j → i is the conditional density of node i getting infected at time t i given that node j was infected at time t j . We assume it is shift invariant: f ji (t i |t j ) = f ji (τ ji ), where τ ji := t i -t j , and nonnegative: f ji (τ ji ) = 0 if τ ji &lt; 0. Both parametric transmission functions, such as the exponential and Rayleigh function <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b15">16]</ref>, and nonparametric function <ref type="bibr" target="#b7">[8]</ref> can be used and estimated from cascade data (see Appendix A for more details).</p><p>Shortest-Path property. The independent cascade model has a useful property we will use later: given a sample of transmission times of all edges, the time t i taken to infect a node i is the length of the shortest path in G from the sources to node i, where the edge weights correspond to the associated transmission times.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Graphical Model Perspectives for Continuous-Time Diffusion Networks</head><p>The continuous-time independent cascade model is essentially a directed graphical model for a set of dependent random variables, the infection times t i of the nodes, where the conditional independence structure is supported on the contact network G (see Appendix B for more details). More formally, the joint density of {t i } i∈V can be expressed as</p><formula xml:id="formula_0">p ({t i } i∈V ) = i∈V p (t i |{t j } j∈πi ) ,<label>(1)</label></formula><p>where π i denotes the set of parents of node i in a cascade-induced DAG, and p(t i |{t j } j∈πi ) is the conditional density of infection t i at node i given the infection times of its parents.</p><p>Instead of directly modeling the infection times t i , we can focus on the set of mutually independent random transmission times τ ji = t i -t j . Interestingly, by switching from a node-centric view to an edge-centric view, we obtain a fully factorized joint density of the set of transmission times</p><formula xml:id="formula_1">p {τ ji } (j,i)∈E = (j,i)∈E f ji (τ ji ),<label>(2)</label></formula><p>Based on the Shortest-Path property of the independent cascade model, each variable t i can be viewed as a transformation from the collection of variables {τ ji } (j,i)∈E .</p><p>More specifically, let Q i be the collection of directed paths in G from the source nodes to node i, where each path q ∈ Q i contains a sequence of directed edges (j, l). Assuming all source nodes are infected at zero time, then we obtain variable t i via</p><formula xml:id="formula_2">t i = g i {τ ji } (j,i)∈E := min q∈Qi (j,l)∈q τ jl ,<label>(3)</label></formula><p>where the transformation g i (•) is the value of the shortest-path minimization. As a special case, we can now compute the probability of node i infected before T using a set of independent variables:</p><formula xml:id="formula_3">Pr {t i ≤ T } = Pr g i {τ ji } (j,i)∈E ≤ T .<label>(4)</label></formula><p>The significance of the relation is that it allows us to transform a problem involving a sequence of dependent variables {t i } i∈V to one with independent variables {τ ji } (j,i)∈E . Furthermore, the two perspectives are connected via the shortest path algorithm in weighted directed graph, a standard well-studied operation in graph analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Influence Estimation Problem in Continuous-Time Diffusion Networks</head><p>Intuitively, given a time window, the wider the spread of infection, the more influential the set of sources. We adopt the definition of influence as the average number of infected nodes given a set of source nodes and a time window, as in previous work <ref type="bibr" target="#b6">[7]</ref>. More formally, consider a set of C source nodes A ⊆ V which gets infected at time zero, then, given a time window T , a node i is infected in the time window if t i ≤ T . The expected number of infected nodes (or the influence) given the set of transmission functions {f ji } (j,i)∈E can be computed as</p><formula xml:id="formula_4">σ(A, T ) = E i∈V I {t i ≤ T } = i∈V E [I {t i ≤ T }] = i∈V Pr {t i ≤ T } ,<label>(5)</label></formula><p>where I {•} is the indicator function and the expectation is taken over the the set of dependent variables {t i } i∈V .</p><p>Essentially, the influence estimation problem in Eq. ( <ref type="formula" target="#formula_4">5</ref>) is an inference problem for graphical models, where the probability of event t i ≤ T given sources in A can be obtained by summing out the possible configuration of other variables {t j } j =i . That is</p><formula xml:id="formula_5">Pr{t i ≤ T } = ∞ 0 • • • T ti=0 • • • ∞ 0 j∈V p t j |{t l } l∈πj j∈V dt j ,<label>(6)</label></formula><p>which is, in general, a very challenging problem. First, the corresponding directed graphical models can contain nodes with high in-degree and high out-degree. For example, in Twitter, a user can follow dozens of other users, and another user can have hundreds of "followees". The tree-width corresponding to this directed graphical model can be very high, and we need to perform integration for functions involving many continuous variables. Second, the integral in general can not be eval-uated analytically for heterogeneous transmission functions, which means that we need to resort to numerical integration by discretizing the domain [0, ∞). If we use N level of discretization for each variable, we would need to enumerate O(N |πi| ) entries, exponential in the number of parents.</p><p>Only in very special cases, can one derive the closed-form equation for computing Pr{t i ≤ T } <ref type="bibr" target="#b6">[7]</ref>. However, without further heuristic approximation, the computational complexity of the algorithm is exponential in the size and density of the network. The intrinsic complexity of the problem entails the utilization of approximation algorithms, such as mean field algorithms or message passing algorithms.We will design an efficient randomized (or sampling) algorithm in the next section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Efficient Influence Estimation in Continuous-Time Diffusion Networks</head><p>Our first key observation is that we can transform the influence estimation problem in Eq. ( <ref type="formula" target="#formula_4">5</ref>) into a problem with independent variables. Using relation in Eq. ( <ref type="formula" target="#formula_3">4</ref>), we have</p><formula xml:id="formula_6">σ(A, T ) = i∈V Pr g i {τ ji } (j,i)∈E ≤ T = E i∈V I g i {τ ji } (j,i)∈E ≤ T ,<label>(7)</label></formula><p>where the expectation is with respect to the set of independent variables {τ ji } (j,i)∈E . This equivalent formulation suggests a naive sampling (NS) algorithm for approximating σ(A, T ): draw n samples of {τ ji } (j,i)∈E , run a shortest path algorithm for each sample, and finally average the results (see Appendix C for more details). However, this naive sampling approach has a computational complexity of O(nC|V||E| + nC|V| 2 log |V|) due to the repeated calling of the shortest path algorithm. This is quadratic to the network size, and hence not scalable to millions of nodes.</p><p>Our second key observation is that for each sample {τ ji } (j,i)∈E , we are only interested in the neighborhood size of the source nodes, i.e., the summation i∈V I {•} in Eq. ( <ref type="formula" target="#formula_6">7</ref>), rather than in the individual shortest paths. Fortunately, the neighborhood size estimation problem has been studied in the theoretical computer science literature. Here, we adapt a very efficient randomized algorithm by Cohen <ref type="bibr" target="#b16">[17]</ref> to our influence estimation problem. This randomized algorithm has a computational complexity of O(|E| log |V| + |V| log 2 |V|) and it estimates the neighborhood sizes for all possible single source node locations. Since it needs to run once for each sample of {τ ji } (j,i)∈E , we obtain an overall influence estimation algorithm with O(n|E| log |V| + n|V| log 2 |V|) computation, nearly linear in network size. Next we will revisit Cohen's algorithm for neighborhood estimation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Randomized Algorithm for Single-Source Neighborhood Size Estimation</head><p>Given a fixed set of edge transmission times {τ ji } (j,i)∈E and a source node s, infected at time 0, the neighborhood N (s, T ) of a source node s given a time window T is the set of nodes within distance T from s, i.e.,</p><formula xml:id="formula_7">N (s, T ) = i g i {τ ji } (j,i)∈E ≤ T, i ∈ V .<label>(8)</label></formula><p>Instead of estimating N (s, T ) directly, the algorithm will assign an exponentially distributed random label r i to each network node i. Then, it makes use of the fact that the minimum of a set of exponential random variables {r i } i∈N (s,T ) will also be a exponential random variable, but with its parameter equals to the number of variables. That is if each r i ∼ exp(-r i ), then the smallest label within distance T from source s, r * := min i∈N (s,T ) r i , will distribute as r * ∼ exp {-|N (s, T )|r * }. Suppose we randomize over the labeling m times, and obtain m such least labels, {r u * } m u=1 . Then the neighborhood size can be estimated as</p><formula xml:id="formula_8">|N (s, T )| ≈ m -1 m u=1 r u * . (<label>9</label></formula><formula xml:id="formula_9">)</formula><p>which is shown to be an unbiased estimator of |N (s, T )| <ref type="bibr" target="#b16">[17]</ref>. This is an interesting relation since it allows us to transform the counting problem in <ref type="bibr" target="#b7">(8)</ref> to a problem of finding the minimum random label r * . The key question is whether we can compute the least label r * efficiently, given random labels {r i } i∈V and any source node s.</p><p>Cohen <ref type="bibr" target="#b16">[17]</ref> designed a modified Dijkstra's algorithm (Algorithm 1) to construct a data structure r * (s), called least label list, for each node s to support such query. Essentially, the algorithm starts with the node i with the smallest label r i , and then it traverses in breadth-first search fashion along the reverse direction of the graph edges to find all reachable nodes. For each reachable node s, the distance d * between i and s, and r i are added to the end of r * (s). Then the algorithm moves to the node i with the second smallest label r i , and similarly find all reachable nodes. For each reachable node s, the algorithm will compare the current distance d * between i and s with the last recorded distance in r * (s). If the current distance is smaller, then the current d * and r i are added to the end of r * (s). Then the algorithm move to the node with the third smallest label and so on. The algorithm is summarized in Algorithm 1 in Appendix D.</p><p>Algorithm 1 returns a list r * (s) per node s ∈ V, which contains information about distance to the smallest reachable labels from s. In particular, each list contains pairs of distance and random labels, (d, r), and these pairs are ordered as</p><formula xml:id="formula_10">∞ &gt; d (1) &gt; d (2) &gt; . . . &gt; d (|r * (s)|) = 0 (10) r (1) &lt; r (2) &lt; . . . &lt; r (|r * (s)|) ,<label>(11)</label></formula><p>where {•} (l) denotes the l-th element in the list. (see Appendix D for an example). If we want to query the smallest reachable random label r * for a given source s and a time T , we only need to perform a binary search on the list for node s: Then the expected time for querying r * is O(log log |V|) using binary search. Since we need to generate m set of random labels and run Algorithm 1 m times, the overall computational complexity for estimating the single-source neighborhood size for all s ∈ V is O(m|E| log |V| + m|V| log 2 |V| + m|V| log log |V|). For large scale network, and when m min{|V|, |E|}, this randomized algorithm can be much more efficient than approaches based on directly calculating the shortest paths.</p><formula xml:id="formula_11">r * = r (l) , where d (l-1) &gt; T ≥ d (l) .<label>(12)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Constructing Estimation for Multiple-Source Neighborhood Size</head><p>When we have a set of sources, A, its neighborhood is the union of the neighborhoods of its constituent sources</p><formula xml:id="formula_12">N (A, T ) = i∈A N (i, T ).<label>(13)</label></formula><p>This is true because each source independently infects its downstream nodes. Furthermore, to calculate the least label list r * corresponding to N (A, T ), we can simply reuse the least label list r * (i) of each individual source i ∈ A. More formally, r * = min i∈A min j∈N (i,T ) r j ,</p><p>where the inner minimization can be carried out by querying r * (i). Similarly, after we obtain m samples of r * , we can estimate |N (A, T )| using Eq. ( <ref type="formula" target="#formula_8">9</ref>). Importantly, very little additional work is needed when we want to calculate r * for a set of sources A, and we can reuse work done for a single source. This is very different from a naive sampling approach where the sampling process needs to be done completely anew if we increase the source set. In contrast, using the randomized algorithm, only an additional constant-time minimization over |A| numbers is needed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Overall Algorithm</head><p>So far, we have achieved efficient neighborhood size estimation of |N (A, T )| with respect to a given set of transmission times {τ ji } (j,i)∈E . Next, we will estimate the influence by averaging over multiple sets of samples for {τ ji } (j,i)∈E . More specifically, the relation from ( <ref type="formula" target="#formula_6">7</ref>)</p><formula xml:id="formula_14">σ(A, T ) = E {τji} (j,i)∈E [|N (A, T )|] = E {τji} E {r 1 ,...,r m }|{τji} m -1 m u=1 r u * , (<label>15</label></formula><formula xml:id="formula_15">)</formula><p>suggests the following overall algorithm Continuous-Time Influence Estimation (CONTINEST):</p><p>1. Sample n sets of random transmission times {τ l ij } (j,i)∈E ∼ (j,i)∈E f ji (τ ji ) 2. Given a set of {τ l ij } (j,i)∈E , sample m sets of random labels</p><formula xml:id="formula_16">{r u i } i∈V ∼ i∈V exp(-r i ) 3. Estimate σ(A, T ) by sample averages σ(A, T ) ≈ 1 n n l=1 (m -1)/ m u l =1 r u l *</formula><p>Importantly, the number of random labels, m, does not need to be very large. Since the estimator for |N (A, T )| is unbiased <ref type="bibr" target="#b16">[17]</ref>, essentially the outer-loop of averaging over n samples of random transmission times further reduces the variance of the estimator in a rate of O(1/n). In practice, we can use a very small m (e.g., 5 or 10) and still achieve good results, which is also confirmed by our later experiments. Compared to <ref type="bibr" target="#b1">[2]</ref>, the novel application of Cohen's algorithm arises for estimating influence for multiple sources, which drastically reduces the computation by cleverly using the least-label list from single source. Moreover, we have the following theoretical guarantee (see Appendix E for proof) Theorem 1 Draw the following number of samples for the set of random transmission times</p><formula xml:id="formula_17">n CΛ 2 log 2|V| δ (<label>16</label></formula><formula xml:id="formula_18">)</formula><p>where The theorem indicates that the minimum number of samples, n, needed to achieve certain accuracy is related to the actual size of the influence σ(A, T ), and the variance of the neighborhood size |N (A, T )| over the random draw of samples. The number of random labels, m, drawn in the inner loop of the algorithm will monotonically decrease the dependency of n on σ(A, T ). It suffices to draw a small number of random labels, as long as the value of σ(A, T ) 2 /(m -2) matches that of V ar(|N (A, T )|). Another implication is that influence at larger time window T is harder to estimate, since σ(A, T ) will generally be larger and hence require more random labels.</p><formula xml:id="formula_19">Λ := max A:|A|≤C 2σ(A, T ) 2 /(m -2) + 2V ar(|N (A, T )|)(m<label>-</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Influence Maximization</head><p>Once we know how to estimate the influence σ(A, T ) for any A ⊆ V and time window T efficiently, we can use them in finding the optimal set of C source nodes A * ⊆ V such that the expected number of infected nodes in G is maximized at T . That is, we seek to solve,</p><formula xml:id="formula_20">A * = argmax |A| C σ(A, T ),<label>(17)</label></formula><p>where set A is the variable. The above optimization problem is NP-hard in general. By construction, σ(A, T ) is a non-negative, monotonic nondecreasing function in the set of source nodes, and it can be shown that σ(A, T ) satisfies a diminishing returns property called submodularity <ref type="bibr" target="#b6">[7]</ref>.</p><p>A well-known approximation algorithm to maximize monotonic submodular functions is the greedy algorithm. It adds nodes to the source node set A sequentially. In step k, it adds the node i which maximizes the marginal gain σ(A k-1 ∪ {i}; T ) -σ(A k-1 ; T ). The greedy algorithm finds a source node set which achieves at least a constant fraction (1 -1/e) of the optimal <ref type="bibr" target="#b17">[18]</ref>. Moreover, lazy evaluation <ref type="bibr" target="#b4">[5]</ref> can be employed to reduce the required number of marginal gains per iteration. By using our influence estimation algorithm in each iteration of the greedy algorithm, we gain the following additional benefits:</p><p>First, at each iteration k, we do not need to rerun the full influence estimation algorithm (section 5.2). We just need to store the least label list r * (i) for each node i ∈ V computed for a single source, which requires expected storage size of O(|V| log |V|) overall.</p><p>Second, our influence estimation algorithm can be easily parallelized. Its two nested sampling loops can be parallelized in a straightforward way since the variables are independent of each other. However, in practice, we use a small number of random labels, and m n. Thus we only need to parallelize the sampling for the set of random transmission times {τ ji }. The storage of the least element lists can also be distributed. However, by using our randomized algorithm for influence estimation, we also introduce a sampling error to the greedy algorithm due to the approximation of the influence σ(A, T ). Fortunately, the greedy algorithm is tolerant to such sampling noise, and a well-known result provides a guarantee for this case (following an argument in <ref type="bibr" target="#b18">[19,</ref><ref type="bibr">Th. 7</ref>.9]):</p><p>Theorem 2 Suppose the influence σ(A, T ) for all A with |A| ≤ C are estimated uniformly with error and confidence 1 -δ, the greedy algorithm returns a set of sources A such that σ( A, T ) ≥ (1 -1/e)OP T -2C with probability at least 1 -δ. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Experiments</head><p>We evaluate the accuracy of the estimated influence given by CONTINEST and investigate the performance of influence maximization on synthetic and real networks. We show that our approach significantly outperforms the state-of-the-art methods in terms of both speed and solution quality.</p><p>Synthetic network generation. We generate three types of Kronecker networks <ref type="bibr" target="#b19">[20]</ref>: (i) coreperiphery networks (parameter matrix: [0.9 0.5; 0.5 0.3]), which mimic the information diffusion traces in real world networks <ref type="bibr" target="#b20">[21]</ref>, (ii) random networks ([0.5 0.5; 0.5 0.5]), typically used in physics and graph theory <ref type="bibr" target="#b21">[22]</ref> and (iii) hierarchical networks ([0.9 0.1; 0.1 0.9]) <ref type="bibr" target="#b9">[10]</ref>.</p><p>Next, we assign a pairwise transmission function for every directed edge in each type of network and set its parameters at random. In our experiments, we use the Weibull distribution <ref type="bibr" target="#b15">[16]</ref>,</p><formula xml:id="formula_21">f (t; α, β) = β α t α</formula><p>β-1 e -(t/α) β , t 0, where α &gt; 0 is a scale parameter and β &gt; 0 is a shape parameter. The Weibull distribution (Wbl) has often been used to model lifetime events in survival analysis, providing more flexibility than an exponential distribution <ref type="bibr" target="#b15">[16]</ref>. We choose α and β from 0 to 10 uniformly at random for each edge in order to have heterogeneous temporal dynamics. Finally, for each type of Kronecker network, we generate 10 sample networks, each of which has different α and β chosen for every edge.</p><p>Accuracy of the estimated influence. To the best of our knowledge, there is no analytical solution to the influence estimation given Weibull transmission function. Therefore, we compare CON-TINEST with Naive Sampling (NS) approach (see Appendix C) by considering the highest degree node in a network as the source, and draw 1,000,000 samples for NS to obtain near ground truth. Figures <ref type="figure" target="#fig_1">1(a</ref>) compares CONTINEST with the ground truth provided by NS at different time window T , from 0.1 to 10 in corre-periphery networks. For CONTINEST, we generate up to 10,000 random samples (or set of random waiting times), and 5 random labels in the inner loop. In all three networks, estimation provided by CONTINEST fits accurately the ground truth, and the relative error decreases quickly as we increase the number of samples and labels (Figures <ref type="figure" target="#fig_1">1(b</ref>) and 1(c)). For 10,000 random samples with 5 random labels, the relative error is smaller than 0.01. (see Appendix F for additional results on the random and hierarchal networks) Scalability. We compare CONTINEST to the state-of-the-art method INFLUMAX <ref type="bibr" target="#b6">[7]</ref> and the Naive Sampling (NS) method in terms of runtime for the continuous-time influence estimation and maximization. For CONTINEST, we draw 10,000 samples in the outer loop, each having 5 random labels in the inner loop. For NS, we also draw 10,000 samples. The first two experiments are carried out in a single 2.4GHz processor. First, we compare the performance of increasingly selecting sources (from 1 to 10) on small core-periphery networks (Figure <ref type="figure" target="#fig_2">2(a)</ref>). When the number of selected sources is 1, different algorithms essentially spend time estimating the influence for each node. CONTINEST outperforms other methods by order of magnitude and for the number of sources larger than 1, it can efficiently reuse computations for estimating influence for individual nodes. Dashed lines mean that a method did not finish in 24 hours, and the estimated run time is plotted. Next, we compare the run time for selecting 10 sources on core-periphery networks of 128 nodes with increasing densities (or the number of edges) (Figure <ref type="figure" target="#fig_2">2(a)</ref>). Again, INFLUMAX and NS are order of magnitude slower due to their respective exponential and quadratic computational complexity in network density. In contrast, the run time of CONTINEST only increases slightly with the increasing density since its computational complexity is linear in the number of edges (see Appendix F for additional results on the random and hierarchal networks). Finally, we evaluate the speed on large core-periphery networks, ranging from 100 to 1,000,000 nodes with density 1.5 in Figure <ref type="figure" target="#fig_2">2(c</ref>). We report the parallel run time  only for CONTINEST and NS (both are implemented by MPI running on 192 cores of 2.4Ghz) since INFLUMAX is not scalable. In contrast to NS, the performance of CONTINEST increases linearly with the network size and can easily scale up to one million nodes.</p><p>Real-world data. We first quantify how well each method can estimate the true influence in a real-world dataset. Then, we evaluate the solution quality of the selected sources for influence maximization. We use the MemeTracker dataset <ref type="bibr" target="#b22">[23]</ref> which has 10,967 hyperlink cascades among 600 media sites. We repeatedly split all cascades into a 80% training set and a 20% test set at random for five times. On each training set, we learn the continuous-time model using NETRATE <ref type="bibr" target="#b9">[10]</ref> with exponential transmission functions. For discrete-time model, we learn the infection probabilities using <ref type="bibr" target="#b23">[24]</ref> for IC, SP1M and PMIA. Similarly, for LT, we follow the methodology by <ref type="bibr" target="#b0">[1]</ref>. Let C(u) be the set of all cascades where u was the source node. Based on C(u), the total number of distinct nodes infected before T quantifies the real influence of node u up to time T . In Figure <ref type="figure" target="#fig_3">3</ref>(a), we report the Mean Absolute Error (MAE) between the real and the estimated influence. Clearly, CON-TINEST performs the best statistically. Because the length of real cascades empirically conforms to a power-law distribution where most cascades are very short (2-4 nodes), the gap of the estimation error is relatively not large. However, we emphasize that such accuracy improvement is critical for maximizing long-term influence. The estimation error for individuals will accumulate along the spreading paths. Hence, any consistent improvement in influence estimation can lead to significant improvement to the overall influence estimation and maximization task, which is further confirmed by Figures <ref type="figure" target="#fig_3">3(b</ref>) and 3(c) where we evaluate the influence of the selected nodes in the same spirit as influence estimation: the true influence is calculated as the total number of distinct nodes infected before T based on C(u) of the selected nodes. The selected sources given by CONTINEST achieve the best performance as we vary the number of selected sources and the observation time window.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusions</head><p>We propose a randomized influence estimation algorithm in continuous-time diffusion networks, which can scale up to networks of millions of nodes while significantly improves over previous stateof-the-arts in terms of the accuracy of the estimated influence and the quality of the selected nodes in maximizing the influence. In future work, it will be interesting to apply the current algorithm to other tasks like influence minimization and manipulation, and design scalable algorithms for continuous-time models other than the independent cascade model.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>1)/(m -2) + 2a /3 and |N (A, T )| ≤ a, and for each set of random transmission times, draw m set of random labels. Then | σ(A, T ) -σ(A, T )| uniformly for all A with |A| C, with probability at least 1 -δ.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Figure1: For core-periphery networks with 1,024 nodes and 2,048 edges, (a) estimated influence for increasing time window T , and (b) fixing T = 10, relative error for increasing number of samples with 5 random labels, and (c) for increasing number of random labels with 10,000 random samples.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure2: For core-periphery networks with T = 10, runtime for (a) selecting increasing number of sources in networks of 128 nodes and 320 edges; for (b)selecting 10 sources in networks of 128 nodes with increasing density; and for (c) selecting 10 sources with increasing network size from 100 to 1,000,000 fixing 1.5 density.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: In MemeTracker dataset, (a) comparison of the accuracy of the estimated influence in terms of mean absolute error, (b) comparison of the influence of the selected nodes by fixing the observation window T = 5 and varying the number sources, and (c) comparison of the influence of the selected nodes by by fixing the number of sources to 50 and varying the time window.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>Finally, to estimate |N (s, T )|, we generate m i.i.d. collections of random labels, run Algorithm 1 on each collection, and obtain m values {r u The computational complexity of Algorithm 1 is O(|E| log |V| + |V| log 2 |V|), with expected size of each r * (s) being O(log |V|).</figDesc><table /><note><p>* } m u=1 , which we use on Eq. (9) to estimate |N (i, T )|.</p></note></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgement: Our work is supported by NSF/NIH BIGDATA 1R01GM108341-01, NSF IIS1116886, NSF IIS1218749, NSFC 61129001, a DARPA Xdata grant and Raytheon Faculty Fellowship of Gatech.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Maximizing the spread of influence through a social network</title>
		<author>
			<persName><forename type="first">David</forename><surname>Kempe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jon</forename><surname>Kleinberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Éva</forename><surname>Tardos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">KDD</title>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="137" to="146" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Efficient influence maximization in social networks</title>
		<author>
			<persName><forename type="first">Wei</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yajun</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Siyu</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">KDD</title>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="199" to="208" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Scalable influence maximization in social networks under the linear threshold model</title>
		<author>
			<persName><forename type="first">Wei</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yifei</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Li</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICDM</title>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="88" to="97" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A data-based approach to social influence maximization</title>
		<author>
			<persName><forename type="first">Amit</forename><surname>Goyal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Francesco</forename><surname>Bonchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">S</forename><surname>Laks</surname></persName>
		</author>
		<author>
			<persName><surname>Lakshmanan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. VLDB Endow</title>
		<meeting>VLDB Endow</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="volume">5</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Cost-effective outbreak detection in networks</title>
		<author>
			<persName><forename type="first">Jure</forename><surname>Leskovec</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andreas</forename><surname>Krause</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Carlos</forename><surname>Guestrin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christos</forename><surname>Faloutsos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jeanne</forename><forename type="middle">M</forename><surname>Vanbriesen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Natalie</forename><forename type="middle">S</forename><surname>Glance</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">KDD</title>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="420" to="429" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Mining knowledge-sharing sites for viral marketing</title>
		<author>
			<persName><forename type="first">Matthew</forename><surname>Richardson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pedro</forename><surname>Domingos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">KDD</title>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="61" to="70" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Influence maximization in continuous time diffusion networks</title>
		<author>
			<persName><forename type="first">Manuel</forename><surname>Gomez-Rodriguez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bernhard</forename><surname>Schölkopf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICML &apos;12</title>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Learning networks of heterogeneous influence</title>
		<author>
			<persName><forename type="first">Nan</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Le</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alexander</forename><forename type="middle">J</forename><surname>Smola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ming</forename><surname>Yuan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIPS</title>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Uncover topic-sensitive information diffusion networks</title>
		<author>
			<persName><forename type="first">Nan</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Le</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hyenkyun</forename><surname>Woo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hongyuan</forename><surname>Zha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">AISTATS</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Uncovering the temporal dynamics of diffusion networks</title>
		<author>
			<persName><forename type="first">Manuel</forename><surname>Gomez-Rodriguez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Balduzzi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bernhard</forename><surname>Schölkopf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICML</title>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="561" to="568" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Structure and Dynamics of Information Pathways in On-line Media</title>
		<author>
			<persName><forename type="first">Manuel</forename><surname>Gomez-Rodriguez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jure</forename><surname>Leskovec</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bernhard</forename><surname>Schölkopf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">WSDM</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Learning social infectivity in sparse low-rank networks using multi-dimensional hawkes processes</title>
		<author>
			<persName><forename type="first">Ke</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Le</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hongyuan</forename><surname>Zha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In Artificial Intelligence and Statistics (AISTATS)</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Learning triggering kernels for multi-dimensional hawkes processes</title>
		<author>
			<persName><forename type="first">Ke</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hongyuan</forename><surname>Zha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Le</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Machine Learning(ICML)</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Modeling information propagation with survival theory</title>
		<author>
			<persName><forename type="first">Manuel</forename><surname>Gomez-Rodriguez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jure</forename><surname>Leskovec</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bernhard</forename><surname>Schölkopf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICML</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Mixture of mutually exciting processes for viral diffusion</title>
		<author>
			<persName><forename type="first">Shuanghong</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hongyuan</forename><surname>Zha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Machine Learning(ICML)</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Statistical Models and Methods for Lifetime Data</title>
		<author>
			<persName><forename type="first">Jerald</forename><forename type="middle">F</forename><surname>Lawless</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
			<publisher>Wiley-Interscience</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Size-estimation framework with applications to transitive closure and reachability</title>
		<author>
			<persName><forename type="first">Edith</forename><surname>Cohen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computer and System Sciences</title>
		<imprint>
			<biblScope unit="volume">55</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="441" to="453" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">An analysis of approximations for maximizing submodular set functions</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">A</forename><surname>Gl Nemhauser</surname></persName>
		</author>
		<author>
			<persName><surname>Wolsey</surname></persName>
		</author>
		<author>
			<persName><surname>Fisher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematical Programming</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="1978">1978</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Andreas</forename><surname>Krause</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
		<respStmt>
			<orgName>CMU</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. Thesis</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Kronecker graphs: An approach to modeling networks</title>
		<author>
			<persName><forename type="first">Jure</forename><surname>Leskovec</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Deepayan</forename><surname>Chakrabarti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jon</forename><forename type="middle">M</forename><surname>Kleinberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christos</forename><surname>Faloutsos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zoubin</forename><surname>Ghahramani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">JMLR</title>
		<imprint>
			<biblScope unit="page">11</biblScope>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Inferring networks of diffusion and influence</title>
		<author>
			<persName><forename type="first">Manuel</forename><surname>Gomez-Rodriguez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jure</forename><surname>Leskovec</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andreas</forename><surname>Krause</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">KDD</title>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<author>
			<persName><forename type="first">David</forename><surname>Easley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jon</forename><surname>Kleinberg</surname></persName>
		</author>
		<title level="m">Networks, Crowds, and Markets: Reasoning About a Highly Connected World</title>
		<imprint>
			<publisher>Cambridge University Press</publisher>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Meme-tracking and the dynamics of the news cycle</title>
		<author>
			<persName><forename type="first">Jure</forename><surname>Leskovec</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lars</forename><surname>Backstrom</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jon</forename><forename type="middle">M</forename><surname>Kleinberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">KDD</title>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Learning the graph of epidemic cascades</title>
		<author>
			<persName><forename type="first">Praneeth</forename><surname>Netrapalli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sujay</forename><surname>Sanghavi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIG-METRICS/PERFORMANCE</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="211" to="222" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Scalable influence maximization for prevalent viral marketing in large-scale social networks</title>
		<author>
			<persName><forename type="first">Wei</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chi</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yajun</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">KDD &apos;10</title>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="1029" to="1038" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
