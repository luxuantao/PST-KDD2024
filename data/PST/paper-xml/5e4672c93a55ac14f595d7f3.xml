<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Improving Deep Learning For Airbnb Search</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2020-02-10">10 Feb 2020</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<title level="a" type="main">Improving Deep Learning For Airbnb Search</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2020-02-10">10 Feb 2020</date>
						</imprint>
					</monogr>
					<idno type="arXiv">arXiv:2002.05515v1[cs.LG]</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-01-03T08:39+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Search ranking</term>
					<term>Deep learning</term>
					<term>e-commerce</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>e application of deep learning to search ranking was one of the most impactful product improvements at Airbnb. But what comes next a er you launch a deep learning model? In this paper we describe the journey beyond, discussing what we refer to as the ABCs of improving search: A for architecture, B for bias and C for cold start. For architecture, we describe a new ranking neural network, focusing on the process that evolved our existing DNN beyond a fully connected two layer network. On handling positional bias in ranking, we describe a novel approach that led to one of the most signi cant improvements in tackling inventory that the DNN historically found challenging. To solve cold start, we describe our perspective on the problem and changes we made to improve the treatment of new listings on the platform. We hope ranking teams transitioning to deep learning will nd this a practical case study of how to iterate on DNNs.</p><p>CCS Concepts: ?Retrieval models and ranking ? Learning to rank;</p><p>?Machine learning approaches ? Neural networks; ?Electronic commerce ? Online shopping;</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Airbnb is a two sided marketplace, bringing together hosts who own places to rent, with prospective guests from across the globe.</p><p>e search ranking problem at Airbnb is to rank the places to stay, referred to as listings, in response to a query from the guest which typically consists of a location, number of guests and checkin/checkout dates. Transitioning to deep learning was a major milestone in the evolution of search ranking at Airbnb. Our account of the journey in <ref type="bibr" target="#b5">[6]</ref> brought us in conversation with many industry practitioners, allowing us to exchange insights and critiques. One question that frequently followed such conversations: what next? We try to answer that in this paper.</p><p>e launch of deep learning for ranking was cause of much celebration, not only because of the gains in bookings it generated, but because of the change it brought to our roadmap ahead. e initial perception was that having Airbnb ranking on deep learning gave us access to this vast treasure trove of machine learning ideas, which only seemed to be growing each day. We could simply pick the best ideas from literature surveys, launch them one a er another, and live happily ever a er. But this proved to be the peak of optimism.</p><p>e familiar pa ern of descent into the valley of despair followed soon, where techniques with impressive success elsewhere proved quite neutral on our own application.</p><p>is lead to a complete revision of our strategy on how to iterate on deep learning beyond the rst launch. In this paper we capture the major enhancements that followed the launch of the DNN described in <ref type="bibr" target="#b5">[6]</ref>. In addition to delving into the core machine learning techniques themselves, we focus on the process and the reasoning that lead to the breakthroughs. With the bigger picture in view now, we value the lessons learnt on how to iterate on DNNs more than any individual technique. We hope those focused on applying deep learning in industry se ings will nd our experiences valuable. We open the discussion by taking a look at our e orts to improve the DNN architecture.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">OPTIMIZING THE ARCHITECTURE</head><p>What is deep learning all about? Well, adding more layers. At least that was our na?ve interpretation a er reviewing the series of advances that ushered in the current deep learning era. But as we sought to replicate the bene ts of scaling data and adding layers as summarized in <ref type="bibr" target="#b13">[14]</ref>, we met nothing but neutral test results. Trying to decipher why increasing layers was not showing any gains led us to borrow more ideas from the literature, like applying residual learning <ref type="bibr" target="#b6">[7]</ref> and batch normalization <ref type="bibr" target="#b7">[8]</ref>. Still, NDCG refused to budge in o ine tests. Our takeaway from the exercise was that increasing layers was an e ective technique for convolutional neural networks, but not necessarily for all DNNs. For fully connected networks like ours, two hidden layers were su cient and model capacity was not our problem.</p><p>If deeper nets were not the right architecture for us, we hypothesized, more specialized architectures might be. So we tried architectures that could tackle interaction between query and listings more explicitly, like deep and wide <ref type="bibr" target="#b2">[3]</ref>, where query-listing feature crosses were added to the wide part.</p><p>is was followed by variants of a ention based networks from <ref type="bibr" target="#b15">[16]</ref>.</p><p>e intention there was to make the hidden layer derived from query features focus its a ention on certain parts of the hidden layer derived from listing features. e short summary of those e orts is that they too failed to move the needle.</p><p>In trying to import successful deep learning architectures to product application, what o en gets lost in translation is that the success of an architecture is intricately tied to its application context. e reported performance gains of an architecture comes from addressing certain shortcomings of the baseline it is compared to. With the general lack of explainability of deep learning, it becomes di cult to infer exactly what shortcoming the new architecture is addressing and how. Determining whether those exact shortcomings are also plaguing the product at home, therefore, becomes a guesswork.</p><p>To improve our chances of success, we abandoned the {download paper ? implement ? A/B test} loop. Instead we decided to drive the process based on a very simple principle: users lead, model follows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Users lead, model follows</head><p>e idea here is to rst quantify a user problem. Model tweaks come a erwards, and in response to the user problem.</p><p>Along those lines, we started with the observation that the series of successful ranking model launches described in <ref type="bibr" target="#b5">[6]</ref> were not only associated with an increase in bookings, but also a reduction in the average listing price of search results. is indicated the model iterations were moving closer to the price preference of guests, which was lower than what the previous models had estimated. We suspected that even a er the successive price reductions, there was likely a gap between the model's choice of prices and what guests preferred. To quantify this gap we looked at the distribution of the di erence between the median price of search results seen by a guest and the price of the listing that the guest booked. e di erence is computed a er taking lo of the prices, as price follows a log-normal distribution. Figure <ref type="figure" target="#fig_0">1</ref> plots how the di erence is distributed.</p><p>Our expectation was that the booked price would be symmetrically distributed around the median price of search results, and resemble a normal distribution centered at zero. Instead it was heavy on the negative side, indicating a skewed guest preference towards lower prices. is gave us a concrete user problem to investigate: whether lower priced listings that were closer to guests' preferred prices needed to be ranked higher.</p><p>Given two ordinary listings with everything else equivalent, our intuitive understanding was that guests would prefer the more economical listing. Did our ranking model truly understand this cheaper is be er principle? We were not completely sure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Enforcing Cheaper Is Be er</head><p>e reason we lacked clarity on how the model was interpreting the listing price was because it was a DNN. Familiar tools like inspecting the corresponding weights in logistic regression models or plo ing partial dependence graphs for GBDT models were not as e ective in the DNN context any longer.</p><p>To make price more interpretable we applied the following changes:</p><p>? Removed price as an input feature to the DNN. We represent this modi ed DNN as DN N ? (u, q, l no pr ice ). Here ? are the DNN parameters, u user features, q query features and l no pr ice listing features with the exception of price. ? Represent the nal output of the model as</p><formula xml:id="formula_0">DN N ? (u, q, l no pr ice ) -tanh(w * P + b)<label>(1)</label></formula><p>with w and b as additional parameters learnt using back propagation, and</p><formula xml:id="formula_1">P = lo ( 1 + price 1 + price median ) Fig. 2</formula><p>. X-axis is normalized price feature. Y-axis is the value of the t anh term in Equation <ref type="formula" target="#formula_0">1</ref>.</p><p>Here price is the raw price feature and price median is a constant computed from the median of the logged listing prices. e -tanh() term allowed us to enforce cheaper is be er by monotonically decreasing the output score with respect to increasing price. e readily interpretable w and b parameters allowed us to plot out the precise e ect of price. For the learned values of the parameters, w = 0.33 and b = -0.9, the plot is shown in Figure <ref type="figure">2</ref> over the typical range of P encountered during ranking.</p><p>When tested online as an A/B experiment against the two hidden layer DNN from <ref type="bibr" target="#b5">[6]</ref>, average price of search results dropped by -5.7%, in con rmation with o ine analysis. But the interpretability of price came at a heavy cost as bookings dropped by -1.5%. Our hypothesis was that price interacted heavily with other features. Isolating price away from the model resulted in under ing. is hypothesis was supported by the fact that both training and test NDCG had declined.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Generalized Monotonicity</head><p>To retain the cheaper is be er intuition in the model, but allow price to interact with rest of the features, we started investigating DNN architectures that were monotonic with respect to some of its inputs. La ice networks described in <ref type="bibr" target="#b18">[19]</ref> presented an elegant solution to the problem. But pivoting our entire system to la ice networks presented a big challenge and we sought a mechanism that was less disruptive. So we constructed the architecture shown in Figure <ref type="figure" target="#fig_1">3</ref> that doesn't depend on any specialized computational nodes other than those natively present in Tensor ow TM . We discuss the step by step construction of the architecture, ensuring all paths from the input price node to the nal output are monotonic with respect to price:</p><p>? We feed -P as input to the DNN which is monotonically decreasing w.r.t price. ? At the input layer, instead of multiplying -P by the weight, we multiply by the square of the weight. Since -w 2 * P +b is monotonically decreasing for any real values of w and b, the inputs to the rst hidden layer are always monotonically decreasing w.r.t price. ? For the hidden layers we use the tanh activation which preserves the monotonic property. ? Given f 0 (x) and f 1 (x), two monotonically decreasing functions of x, w 0 2 * f 0 (x) +w 1 2 * f 1 (x) +b is also monotonically decreasing w.r.t x where w 0 and w 1 can be arbitrary real def get loss op ( positive logits , negative logits ) :</p><p>""" Create the loss op to be minimized. """ logit di s = positive logitsnegative logits xentropy = tf . nn. sigmoid cross entropy with logits ( labels =tf . ones like ( logit di s ) , logits = logit di s ) loss = tf . reduce mean(xentropy) return loss # Booked listings as positives , not booked as negatives loss = get loss op ( booked logits , not booked logits ) Table <ref type="table">1</ref>. TensorFlow TM code for pairwise booking loss.</p><p>weights. We use this property in the second hidden layer and the output layer where all the weights are squared.</p><p>ese are represented as the bold solid lines for the second hidden layer and output layer in Figure <ref type="figure" target="#fig_1">3</ref>.</p><p>? A subnet which neither has price as input nor any of the monotonicity constraints is added to allow unconstrained interaction between the rest of the features.</p><p>In spite of being more exible than the architecture described in section 2.2, when tested online the results were very similar, resulting in a booking drop of -1.6%. Like its predecessor, the architecture enforced the model output was monotonically decreasing w.r.t price under all circumstances. e failure of this architecture suggested that monotonicity with regard to price was too strict a constraint.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">So Monotonicity</head><p>While the architecture described in section 2.3 revealed how versatile DNNs could be in supporting model constraints, it also taught us another trait of DNNs: that they behaved just like another star engineer on the team. Given a problem and le to their own devices, they usually came up with a reasonable solution. But force them to go some direction, and disaster will quickly follow. So in our next iteration, we decided to manage the DNN by se ing context, not control. Instead of enforcing that the model output be monotonic with respect to price, we added a so hint that cheaper was be er. Ordinarily, each training example consisted of a pair of listings, one booked and the other not booked. Applying the DNN to the features of the two listings generated the corresponding logits, and the loss was de ned as shown in Table <ref type="table">1</ref>.</p><p>To add the price hint, we introduce a second label for each training example, indicating which listing in the pair has a lower price and which one the higher. e loss is then modi ed as shown in Table <ref type="table">2</ref>.</p><p># Booked listings as positives , not booked as negatives booking loss = get loss op ( booked logits , not booked logits ) # Lower priced listings as positives , higher priced listing as negatives price loss = get loss op ( lower price logits , higher price logits ) # Total loss a linear combination with a hyperparameter loss = alpha * booking loss + (1alpha) * price loss Table <ref type="table">2</ref>. TensorFlow TM code with price loss added.</p><p>e alpha hyperparameter gives a way to control whether we want the results to be sorted by relevance or price.</p><p>To test the idea, we adjusted the alpha hyperparameter to the minimum value such that in o ine tests we got the same NDCG as the baseline model. is allowed us to push the cheaper is be er intuition as far as possible without hurting relevance, at least when measured o ine. In the online A/B test, we observed a reduction of -3.3% in average price of search results. But also a drop of -0.67% in bookings. e o ine analysis su ered from the limitation that it only evaluated re-ranking the top results available in logs. During the online test, applying the newly trained model to the entire inventory revealed the true cost of adding the price loss as part of the training objective.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">Pu ing Some ICE</head><p>e trail of disaster from the price lowering experiments le us in a paradoxical state: the listing prices in search results seemed higher than what guests preferred, but pushing prices down made guests unhappy. To understand where the new models were falling short, it was necessary to compare how the baseline model was utilizing the price feature, but that was shrouded in the lack of interpretability of the fully connected DNN. As mentioned previously, concepts like partial dependence plots were not useful since they relied on the assumption that a given feature's in uence on the model was independent of other features. is was simply not true in the case of DNNs. A empts to plot partial dependence for price produced gently sloping straight lines, suggesting the DNN had some mild linear dependence on price, which was in contradiction with everything else we knew.</p><p>To make progress, we scaled down the problem of DNN interpretability. Instead of trying to make general statements about how price in uenced the DNN, we focused on interpreting one search result at a time. Borrowing the idea of individual conditional expectation (ICE) plots from <ref type="bibr" target="#b4">[5]</ref>, we took listings from a single search result, swept across the price range while keeping all other features invariant, and constructed plots of the model score. An example plot is shown in Figure <ref type="figure" target="#fig_2">4</ref>. e plots suggested that the fully connected two layer DNN from <ref type="bibr" target="#b5">[6]</ref> already understood cheaper was be er. Repeating the ICE analysis on a collection of randomly selected searches from the logs further strengthened this conclusion. By trying to force price down further, the failed architectures were compromising on quality.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6">Two Tower Architecture</head><p>Going back to Figure <ref type="figure" target="#fig_0">1</ref>, guests were clearly sending a message through that plot. But the architectures intent on trading relevance  for price were interpreting the message incorrectly. A reinterpretation of Figure <ref type="figure" target="#fig_0">1</ref> was in order. And the reinterpretation had to align with price, as well as relevance.</p><p>Such an alternate explanation for Figure <ref type="figure" target="#fig_0">1</ref> surfaced when we took the di erence between the median price of search results for a guest and the price at which they booked, and computed averages grouped by cities. As expected, there was variance across the cities. But the di erences were much larger for tail cities, compared to head cities. e tail cities were o en located in developing markets as well. Figure <ref type="figure" target="#fig_3">5</ref> shows the average di erence between the median price of search results and the booked price for some selected cities.</p><p>is gave rise to the hypothesis that the DNN behind Figure <ref type="figure" target="#fig_0">1</ref> was su ering from the tyranny of the majority, focusing on pricequality tradeo s that were tuned for the most popular locations that dominated bookings. Generalizing those tradeo s to the tail queries was not working as well and the model was failing to adapt to local conditions.</p><p>e hypothesis played well with another observation about the features feeding the DNN. Given the DNN was trained using a pairwise loss, features that di ered across the two listings forming the pair seemed to have most of the in uence.</p><p>ery features, that were common across the pair, seemed to have li le in uence and dropping them impacted the NDCG minimally.</p><p>e new thinking was that the model had ample understanding of cheaper is be er, what it was missing was the notion of the right price for a trip. Grasping this notion involved paying closer a ention to query features like the location, instead of discriminating purely based o listing features. is inspired the next revision of the architecture which consisted of two towers, similar to <ref type="bibr" target="#b9">[10]</ref>.</p><p>e rst tower, fed by the query and user features, generated a 100-d vector which conceptually represented the ideal listing for the query-user combination.</p><p>e second tower constructed a 100-d vector from the listing features. e euclidean distance between the two vectors was used as a measure of how far the given listing was from the ideal listing for the query-user.</p><p>Training examples consisted of pairs of listings: one booked, the other not booked. Loss was de ned by how close the not booked listing was to the ideal, compared to the booked listing. Training of the two towers therefore brought the booked listing in the pair closer to the ideal, while pushing the not booked listing away. is is similar to the triplet loss introduced in <ref type="bibr" target="#b11">[12]</ref>. e main di erence here is that instead of training on triples, we only have pairs of listings, and the missing anchor listing in the triple is learnt automatically by the query-user tower. e pairwise training of the query and listing towers is depicted in Figure <ref type="figure" target="#fig_5">6</ref>. Table <ref type="table">3</ref> shows the abstracted Tensor ow TM code for the architecture. e actual implementation is slightly di erent to optimize for training speed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.7">Test Results</head><p>When tested online in an A/B experiment against the fully connected two layer DNN from <ref type="bibr" target="#b5">[6]</ref>, the two tower architecture recorded a bookings gain of +0.6%. e gain was driven by increased ease of search, as the NDCG computed online improved by +0.7%. Although the two tower architecture was not directly aiming to lower prices, we observed a drop of -2.3% in average price of search results as a side e ect of the increased relevance. e increase in bookings more than o set the e ect of the price drop on revenue, resulting in an overall increase of +0.75%. In addition to improving the quality of the results, the two tower architecture allowed us to optimize the latency of scoring the DNN online as well. For the fully connected architecture, evaluating the rst hidden layer contributed the largest component of scoring latency. e computation complexity of evaluating the rst hidden layer can be expressed as O(H * (Q + L)) where Q is the number of query and user features independent of the listing, L the number of listing dependent features, and H the number of hidden units for the rst layer. For evaluating a search result set with N listings, the total complexity can be expressed as O(N * H * (Q + L)).</p><p>Of the two towers in the new architecture, the query tower was independent of listings.</p><p>is allowed scoring that tower exactly once for the entire search result set, and only evaluating the listing dependent tower for each listing. e computational complexity of the rst hidden layer reduced to O(N * H l * L + H q * Q), where H l and H q are the number of hidden units in the listing and query towers. When tested online this resulted in a -33% reduction in the 99th percentile scoring latency.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.8">Architecture Retrospective</head><p>Even as we celebrated the success, the doubt that invariably followed the launch of a DNN iteration crept up. Was the architecture working as intended, or did the DNN stumble onto something else unintended? e impenetrable nature of DNNs had made answering such doubts extremely hard in the past. But given that the intuition for the two tower architecture was developed in response to a user problem, we could use those intuitions now to get a be er understanding of how the DNN was functioning.</p><p>Revisiting the ICE plots for price, we saw a marked change. Instead of the plots always sloping downwards with price underlining a cheaper is be er interpretation, we saw that the scores peak around certain prices, as shown in Figure <ref type="figure" target="#fig_6">7</ref>. is was closer to the right price for the trip interpretation.</p><p>A question raised frequently in this context was whether low quality listings could get up-ranked by the new model simply by targeting a price. Careful inspection of the ICE curve revealed that the score peaks around certain prices were happening only for high quality listings, which were usually ranked near the top to begin with. For most average listings, the plot still maintained a monotonically decreasing curve with respect to price. e notion of the right price and the ideal listing centered around the vector generated by the query tower, so a natural follow up was to investigate exactly what those vectors looked like. For analysis, we ran the two tower DNN on a random sample of searches and collected the output vector of the query tower. Since the 100-d vectors were not human interpretable, we applied t-SNE <ref type="bibr" target="#b16">[17]</ref> to reduce them to 2-d vectors, which are shown in Figure <ref type="figure" target="#fig_7">8</ref>. eries corresponding to some of the cities in Figure <ref type="figure" target="#fig_3">5</ref> are marked on the plot.</p><p>It was reassuring to see large clusters forming around similar values of parameters such as guest count and trip length. Within the large clusters, cities that felt intuitively similar were placed comparatively closer to each other.</p><p>It's worth highlighting that the clusters are not simply price clusters. e price of the booked listing corresponding to the query is represented by the color of the dots, and we see the clusters have colors of all range. While Moscow is typically cheaper than Paris, a booking price in Moscow can easily exceed a booking price in Paris depending on the number of guests, duration of stay, proximity to tourist a ractions, weekend vs weekday, and a host of other factors. Price is inextricably linked with all the other dimensions and to grasp the right price for a trip implies a good grasp on all the other factors simultaneously. None of the analysis we did can be used as hard evidence that the two tower architecture had indeed developed this grasp. But the combination of the ICE plots against price, t-SNE visualization of the query tower output, and additional analysis of price movements across cities gave us su cient con dence that the mechanism was working as intended.</p><p>Laying the series of architectural manipulations to rest, next we move on to addressing a ranking challenge that not only a ected guests, but also the other half of the Airbnb community, the hosts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">IMPROVING COLD START</head><p>In machine learning applications for the travel space, a large fraction of users at any point are new or are using the product a er a long gap of time. For all practical purposes users are in a state of continuous cold start as noted in <ref type="bibr" target="#b1">[2]</ref>. Handling user level cold start is part of the core ranking formulation itself. So when referring to the cold start problem, we focus our a ention on the item level cold start (i.e, how to handle new listings in ranking). As in the case of re ning the DNN architecture in Section 2.1, the starting point of our quest was not a literature survey, but the observation of a user problem. Using NDCG to quantify the position of the booked listings in search results has been the most reliable gauge of model performance for us. erefore a natural place to investigate user problems was to look for segments of listings where NDCG was lower compared to the overall NDCG. Breaking out the NDCG for booked listings that were new to the platform and comparing them to established listings, we observed a gap of -6%. For context, we have observed statistically signi cant di erences in online bookings from models that di ered in NDCG by as li le as 0.7%. is indicated that the model was making guests work signi cantly harder to discover the new listings worth booking. To understand this be er, we removed all the input features from the DNN that were generated based on historical interactions with guests, such as the number of past bookings for a listing. Removal of these engagement features resulted in a drop of -4.5% in NDCG. Clearly, the DNN was relying heavily on engagement features. In the absence of these ne grained di erentiations from guests for new listings, the DNN was forced to make broad judgements based on the remaining features, ing close to the average performance of new listings.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Approaching Cold Start As Explore-Exploit</head><p>One possible framing of the cold start problem is to consider it a tradeo between explore and exploit. Ranking strategies could exclusively optimize for bookings in the short term by exploiting knowledge of the current inventory, and be ing only on those listings that have a proven track record. But for long term success of the marketplace, it needs to pay some cost to explore the new inventory. is tradeo can be implemented as an explicit ranking boost for new listings, which allocates higher ranks to new listings than what is determined by the DNN. is allows new listings to collect feedback from guests at a small cost to bookings. e general method has been popular in e-commerce ranking applications, for example in <ref type="bibr" target="#b14">[15]</ref>. e boost can be further re ned, capping it by impression counts, or introducing temporal decays. Our rst iteration was to test such a boost. rough A/B testing online, we tuned the new listing ranking boost to be bookings neutral compared to no boosting, while allocating +8.5% additional rst page impressions to new listings.</p><p>But operating under the explore-exploit paradigm created severe challenges:</p><p>? e new listing ranking boost was pulled in di erent directions by two opposing forces: 1) a degradation of user experience in the short term due to reduced relevance of the search results (an e ect we could measure accurately) vs 2) an improvement in user experience in the long term due to incremental inventory (an e ect we found rather di cult to quantify). e lack of a clear and objective de nition of the optimal amount of boost lead to vigorous internal debates, with no resolution that satis ed every team interested.</p><p>? Even a er arbitrarily xing an overall budget for the cost of exploration, it became clear that proper use of the budget was dependent on the supply and demand in a particular location. Tolerance for exploration is high when there is high demand, but not as much when demand in a location is scarce. And the need to explore and expand the inventory is high in locations where good supply is constrained. When plenty of high quality listings are lying vacant, there is li le incentive to incur the cost of exploration. Supply and demand in turn are governed by location, seasonality and guest capacity among other parameters. So to optimally use the global exploration budget, thousands of localizing parameters were needed, a task impossible to handle manually.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Estimating Future User Engagement</head><p>To make the system more manageable, we took a step back and started by asking: what makes a new listing di erent? e answer, of course, is the absence of user generated engagement features like number of bookings, clicks, reviews etc. Other properties like price, location, amenities are known just like the rest of the listings. In theory, if we had an oracle to predict the engagement features for a new listing with 100% accuracy, it could solve the cold start problem optimally. So instead of treating cold start as an explore-exploit tradeo , we reframed it as a problem of estimating the engagement values for a new listing. Reframing the problem unlocked something signi cant: it allowed us to de ne an objective ideal for the problem and iteratively work towards it. To solve cold start, we introduced a new component feeding the DNN which predicted the user engagement features for a new listing, both at training and scoring time.</p><p>To measure the accuracy of the estimator, we applied the following steps:</p><p>? Sample O(100M) search results from the logs. For each of the search results, randomly sample a listing from the top 100 positions. ese represent a sample of listings that have received ample a ention from guests, so have their engagement features su ciently converged. ? Let R r eal denote the rank of the sampled listings obtained from the logs. We denote the rank as real to indicate that the engagement features for the listings are result of real guest interactions. From the rank, we compute real discounted rank as DR r eal = lo (2.0)/lo (2.0 + R r eal ). ? Next, for each of the sampled listings, we remove all the engagement features and replace them by the engagement features predicted by the estimator under test. We score the listing with the predicted engagement features, nd its new rank in the corresponding logged search result, then compute the discounted rank from it. We denote this by DR pr edict ed . ? For each sampled listing, we compute the error in engagement estimation as (DR r eal -DR pr edict ed ) 2 ? To get the overall error, we average the error in engagement estimation across all the sampled listings.</p><p>e ideal engagement estimator would generate 0 error. To decide between two estimators, one can pick the estimator with lower error.</p><p>For validation we compared two estimation approaches. e baseline was the system used in production which assigned default values for missing features, including engagement features for new listings. e default values were constants cra ed by manual analysis of the corresponding features. e comparison was against an estimator which predicted the engagement features by averaging the engagement features of listings geographically nearby to the new listing. To increase accuracy, it only considered neighboring listings that matched the guest capacity of the new listing, and computed the averages over a sliding time window to account for seasonality. For example, to estimate the number of bookings for a new listing with a two person guest capacity, it took the average number of bookings for all listings within a small radius of the new listing with a capacity of two.</p><p>is is conceptually similar to the Naive Bayes recommender from <ref type="bibr" target="#b10">[11]</ref> which used a generative method to estimate the missing information.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Test Results</head><p>In o ine analysis, the engagement estimator described above reduced engagement estimation error by -42% when compared to using default values.</p><p>In online A/B experiment, we observed an improvement of +14% in bookings of newly created listings, along with a +14% increase in share of impressions of rst page results. Apart from its impact on new listings, overall bookings increased by +0.38%, indicating an overall improvement in the user experience.</p><p>From examining challenges with the data feeding the DNN, we transition to problems surrounding how the DNN interpreted the data presented, and the issue of positional bias.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">ELIMINATING POSITIONAL BIAS</head><p>e starting point for our investigation into positional bias was something quite unrelated. Similar to the observation around lower NDCG for new listings, another segment that showed lower than expected performance was boutique hotels and traditional bed and breakfasts, a segment that was growing rapidly as part of the inventory. One hypothesis coming out of the observation was that inventory historically under-represented in the training data were not ranked optimally due to positional bias. But unlike the link between new listings performance and cold start, there was no strong reason to believe positional bias was the sole culprit in this case; there were multiple other hypothesis. While we found focusing on user problems a much be er approach than simply importing ideas from literature surveys, this by itself was not a panacea. Establishing a causal link between a user problem and a shortcoming in the model was far from straightforward. In the current scenario, we were shooting in the dark. But while at it, we decided to go a er the biggest gaps in modeling that explained the observations. And a literature survey was crucial in identifying where major gaps might be lurking in our model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Related Work</head><p>Given a user u who issues a query q, the probability of the user booking a listing l from the search results can be decomposed into two factors:</p><p>? e probability the listing was relevant to the user. is probability can be represented as P(rele ant = 1|l, u, q) to make explicit the dependencies on the listing, user and query.</p><p>? e probability that the user examined the listing given it was at position k in the search result. is may depend on the user (e.g. users on mobile may have higher bias for the top results) or on the query (e.g. users with short lead days may pay even less a ention to the bo om results). We represent this probability as P(examined = 1|k, u, q), independent of the listing l. e in uence of the listing on the booking event is completely accounted for by P(rele ant = 1|l, u, q)</p><p>Using the simplifying assumptions of the position based model described in <ref type="bibr" target="#b3">[4]</ref>, we represent the probability of the user booking a listing simply as a product of the two decomposed probabilities.</p><p>P bookin = P(rele ant = 1|l, u, q) * P(examined = 1|k, u, q) (2)</p><p>By directly training a model to predict bookings, the model learns to predict P bookin which is dependent on P(examined = 1|k, u, q). at in turn depends on the position k, a decision taken by the previous ranking model. e current model becomes dependent on previous models as a result.</p><p>Ideally we would like the model to focus exclusively on P(rele ant = 1|l, u, q) and rank listings by relevance alone. To achieve that, <ref type="bibr" target="#b8">[9]</ref> describes a method with two key concepts:</p><p>? A propensity model to predict P(examined = 1|k, u, q). ? Weighing each training example by the inverse of the predicted propensity.</p><p>While constructing the propensity model typically involves perturbing the search results to collect examples of counterfactuals, <ref type="bibr" target="#b0">[1]</ref> describes methods to construct the propensity model without additional interventions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Position As Control Variable</head><p>Our solution has two key highlights. Firstly, it is non-intrusive and does not need any randomization of the search results. We rely on some unique properties of search results at Airbnb which make listings appear at di erent positions, even when their corresponding scores while ranking are more or less invariant:</p><p>? Listings represent physical entities that can be booked only once for a given date range. As listings get booked and disappear from search, it shi s the positions of the remaining listings.</p><p>? Each listing has its own unique calendar availability, so di erent listings get to appear at di erent positions for similar queries across date ranges.</p><p>e second highlight of our solution is that we do not build an explicit propensity model. Instead, we introduce position as a feature in the DNN, regularized by dropout. During scoring we set the position feature to 0. e rest of the section describes the intuition behind why this works.</p><p>We take the DNN described in Section 2.6 as the foundation, with query, user and listing features as inputs. Using the notation q (query features), u (user features), l (listing features), ? (DNN parameters), we express the output of the DNN as dnn ? (q, u, l) = rel ? (q, u, l) * pbias ? (q, u, l)</p><p>mirroring the assumption made by the position based model in <ref type="bibr" target="#b3">[4]</ref>.</p><p>Here rel ? (q, u, l) estimates P(rele ance = 1|l, u, q) which we refer to as the relevance prediction. And pbias ? (q, u, l) estimates P(examination = 1|k, u, q) which we call the positional bias prediction.</p><p>It becomes immediately apparent that pbias ? (q, u, l) is missing the position of the listing k as input since the quantity it is trying to estimate is dependent on k. So our rst step is to add k as an input feature to the DNN. Since both the relevance prediction and the positional bias prediction are fed by the DNN inputs, adding k to the inputs transforms our representation of the DNN to dnn ? (q, u, l, k) = rel ? (q, u, l, k) * pbias ? (q, u, l, k)</p><p>Given that P(examined = 1|k, u, q) is independent of l, any dependence of the positional bias prediction on l can be treated as an error. We assume that with su cient amount of training data, the learnt parameters ? are able to minimize that error and the positional bias prediction becomes independent of l for all practical purposes. We capture this assumption as</p><formula xml:id="formula_4">dnn ? (q, u, l, k) = rel ? (q, u, l, k) * pbias ? (q, u, k)<label>(5)</label></formula><p>dropping l from pbias ? (q, u, l, k). While scoring, we set the position feature k to 0. Within a given search, q and u are invariant across the listings scored by the DNN. We use Q and U to represent the query and user features for a particular search. e position bias prediction therefore becomes pbias ? (Q, U , 0), which is an invariant for all the listings in a particular search result. Naming the invariant ?, equation (5) at scoring time can be rewri en as</p><formula xml:id="formula_5">dnn ? (Q, U , l, 0) = rel ? (Q, U , l, 0) * ?<label>(6)</label></formula><p>is makes the comparison of two listing scores independent of positional bias and dependent only on listing relevance. In essence, we added position as a control variable <ref type="bibr" target="#b17">[18]</ref> in the ranking model. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Position Dropout</head><p>Under the position based model assumption, adding position as a control variable e ectively eliminates the position bias prediction from listing rankings, but it introduces a new problem. e relevance prediction is now dependent on position as a feature. is runs the risk of the DNN relying on the position feature during training to predict relevance, but not able to utilize that learning while scoring where the position feature is always set to 0. Comparing the NDCG of the DNN with position as feature to the baseline without the position feature, we see a drop of around -1.3%. So a straightforward introduction of the position as a control variable seem to hurt the relevance prediction.</p><p>To reduce the dependence of the relevance prediction on the position feature, we regularize it down using dropout <ref type="bibr" target="#b12">[13]</ref>. During training, we probabilistically set the position for a listing to 0, controlled by the dropout rate.</p><p>e dropout rate presents a tradeo between noise-free access to the position feature to infer positional bias accurately vs making the position feature noisy to regularize it away from relevance prediction. We try to nd a balance for the tradeo through the following steps:</p><p>? Sweep through the range of dropout rates and compute two avors of NDCG on a test set. First one by se ing the position to 0 during test. is measures the relevance prediction and denoted N DCG r el . e second one by keeping the position feature which measures the combined relevance and position bias prediction, denoted N DCG r el +pbias .</p><p>? Subtract N DCG r el +pbias -N DCG r el to get a measure of the positional bias prediction. e intuition here is that by comparing the quality of ranking with and without the position input, we get an estimate of the contribution of position towards ranking. Plot it against N DCG r el to obtain the curve in Figure <ref type="figure" target="#fig_8">9</ref>.</p><p>? To balance between the relevance prediction and positional bias prediction, pick a point on the curve where the positional bias prediction is su ciently advanced on the x-axis, without incurring too much of a drop in relevance prediction on the y-axis.</p><p>rough this exercise we ended up selecting a dropout rate of 0.15.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Test Results</head><p>We tested the idea by an online A/B test, where the control was the DNN from Section 2.6 with no notion of positional bias. e treatment was the same DNN, but trained with position as a feature regularized by a dropout rate of 0.15. In the online test we observed a gain of +0.7% in bookings. Alongside the bookings gain, a li of +1.8% in revenue was a pleasant surprise. e revenue side e ect illustrated how positional bias had built up over multiple iterations of the model. For the ranking model, it's relatively easy to learn the e ect of price as it comes as a very clean feature and the data strongly suggests a preference for lower prices. e balancing forces of quality, location, etc. are much harder to learn. As a result, initial simplistic models heavily relied on lower prices. Over multiple model iterations we improved our understanding of quality and location, but by then the bias towards cheaper prices was already ingrained in the training data.</p><p>is stickiness made successive models overestimate the preference for lower prices. Eliminating positional bias allowed the model to get closer to the true preference of guests, and strike a more optimal balance between price, quality and location. e revenue li observed was a direct fallout of that. Finally, to close the loop on where we started, we observed a +1.1% increase in bookings for boutique hotels.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">CONCLUSION</head><p>Deep learning continues to ourish in search ranking at Airbnb. We feel genuine gratitude towards the community for providing the deep learning ecosystem, for the open exchange of ideas, and for the opportunity to join the conversation by sharing our own experiences. But the highlight of our journey is the realization that to push the boundaries of our DNNs, the inspiration was not going to come from some external source. For that we had to follow the lead of our users.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. X-axis shows how the price of the booked listing o sets from the median price of search results for a guest. Y-axis is the number of users corresponding to a price o set.</figDesc><graphic url="image-1.png" coords="2,82.93,77.71,180.00,129.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. DNN architecture partially monotonic w.r.t price. Bold solid lines indicate weights that are squared, dashed lines indicate ordinary weights.</figDesc><graphic url="image-3.png" coords="3,93.73,77.71,158.40,107.99" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. ICE plot of listing scores (y-axis) vs listing prices (x-axis). Each curve represents a listing in the search result.</figDesc><graphic url="image-4.png" coords="4,93.73,77.71,158.40,107.99" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Average di erence between the median price of search results for a guest and the price of the booked listing, split by cities</figDesc><graphic url="image-5.png" coords="4,82.93,226.38,179.99,115.20" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>import tensor ow as tf def get tower ( features , w0, b0, w1, b1) : ''' Two fully connected hidden layers producing a 100-d vector ''' h1 = tf . nn.tanh( tf . matmul(features , w0) + b0) h2 = tf . nn.tanh( tf . matmul(h1, w1) + b1) return h2 def get distance to ideal (query vec, listing vec ) : ''' Euclidean distance of the listing hidden layer to the query hidden layer . In practice minimizing sum of squared di is equivalent to minimizing the Euclidean distance . ''' sqdi = tf . math. squared di erence (query vec, listing vec ) logits = tf . math.reduce sum( sqdi , axis =1) return logits def pairwise loss ( query features , booked listing features , not booked listing features ) : qvec = get tower ( query features , query w0, query b0, query w1, query b1) booked vec = get tower ( booked listing features , listing w0 , listing b0 , listing w1 , listing b1 ) not booked vec = get tower ( listing features , listing w0 , listing b0 , listing w1 , listing b1 ) booked distance = get distance to ideal (qvec, booked vec) not booked distance = get distance to ideal ( qvec, not booked vec) distance di = not booked distancebooked distance # Push the not booked away and the booked closer to # the ideal by increasing relative distance in between. xentropy = tf . nn. sigmoid cross entropy with logits ( labels =tf . ones like ( logit di s ) , logits = logit di s ) loss = tf . reduce mean(xentropy) return lossTable 3. Abstracted TensorFlow TM code for the two tower architecture.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. Pairwise loss computation for training the two tower architecture.</figDesc><graphic url="image-6.png" coords="5,57.73,77.71,230.39,136.80" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. ICE curves for price revisited for the two tower architecture.</figDesc><graphic url="image-7.png" coords="5,359.87,77.71,158.40,108.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. t-SNE plot for output of query tower mapped to 2-d. Each dot represents a query. Some of the queries are labeled in the cit / uest -count /t r ip-l en t h format. Color of the dots indicate price of the listing booked for the query, cheaper towards green, expensive towards blue.</figDesc><graphic url="image-8.png" coords="6,82.93,77.71,180.00,165.59" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 9 .</head><label>9</label><figDesc>Fig.9. Y-axis is NDCG with position set to 0. X-axis is di erence between the NDCG with position set to 0 and position kept as is.</figDesc><graphic url="image-9.png" coords="8,356.28,77.71,165.59,122.40" type="bitmap" /></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Estimating Position Bias Without Intrusive Interventions</title>
		<author>
			<persName><forename type="first">Aman</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ivan</forename><surname>Zaitsev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xuanhui</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Cheng</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Marc</forename><surname>Najork</surname></persName>
		</author>
		<author>
			<persName><surname>Joachims</surname></persName>
		</author>
		<idno type="DOI">10.1145/3289600.3291017</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twel h ACM International Conference on Web Search and Data Mining (WSDM &apos;19)</title>
		<meeting>the Twel h ACM International Conference on Web Search and Data Mining (WSDM &apos;19)<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="474" to="482" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">150 Successful Machine Learning Models: 6 Lessons Learned at Booking.Com</title>
		<author>
			<persName><forename type="first">Lucas</forename><surname>Bernardi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pablo</forename><surname>Mavridis</surname></persName>
		</author>
		<author>
			<persName><surname>Estevez</surname></persName>
		</author>
		<idno type="DOI">10.1145/3292500.3330744</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery &amp; Data Mining (KDD &apos;19)</title>
		<meeting>the 25th ACM SIGKDD International Conference on Knowledge Discovery &amp; Data Mining (KDD &apos;19)<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="1743" to="1751" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Wide &amp; Deep Learning for Recommender Systems</title>
		<author>
			<persName><forename type="first">Heng-Tze</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Levent</forename><surname>Koc</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jeremiah</forename><surname>Harmsen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tal</forename><surname>Shaked</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tushar</forename><surname>Chandra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hrishi</forename><surname>Aradhye</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Glen</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Greg</forename><surname>Corrado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wei</forename><surname>Chai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mustafa</forename><surname>Ispir</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rohan</forename><surname>Anil</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zakaria</forename><surname>Haque</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lichan</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Vihan</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiaobing</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hemal</forename><surname>Shah</surname></persName>
		</author>
		<idno type="DOI">10.1145/2988450.2988454</idno>
		<ptr target="ps://doi.org/10.1145/2988450.2988454" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1st Workshop on Deep Learning for Recommender Systems</title>
		<meeting>the 1st Workshop on Deep Learning for Recommender Systems<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016">2016. 2016</date>
			<biblScope unit="page" from="7" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Click Models for Web Search</title>
		<author>
			<persName><forename type="first">Aleksandr</forename><surname>Chuklin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ilya</forename><surname>Markov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Maarten</forename><surname>De Rijke</surname></persName>
		</author>
		<idno type="DOI">10.2200/S00654ED1V01Y201507ICR043</idno>
	</analytic>
	<monogr>
		<title level="j">Synthesis Lectures on Information Concepts, Retrieval, and Services</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="1" to="115" />
			<date type="published" when="2015">2015. 2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Peeking Inside the Black Box: Visualizing Statistical Learning With Plots of Individual Conditional Expectation</title>
		<author>
			<persName><forename type="first">Alex</forename><surname>Goldstein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Adam</forename><surname>Kapelner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Justin</forename><surname>Bleich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Emil</forename><surname>Pitkin</surname></persName>
		</author>
		<idno type="DOI">10.1080/10618600.2014.907095</idno>
	</analytic>
	<monogr>
		<title level="j">Journal of Computational and Graphical Statistics</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="44" to="65" />
			<date type="published" when="2015">2015. 2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Applying Deep Learning to Airbnb Search</title>
		<author>
			<persName><forename type="first">Malay</forename><surname>Haldar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mustafa</forename><surname>Abdool</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Prashant</forename><surname>Ramanathan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tao</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shulin</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Huizhong</forename><surname>Duan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Qing</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nick</forename><surname>Barrow-Williams</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bradley</forename><forename type="middle">C</forename><surname>Turnbull</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Brendan</forename><forename type="middle">M</forename><surname>Collins</surname></persName>
		</author>
		<author>
			<persName><surname>Legrand</surname></persName>
		</author>
		<idno type="DOI">10.1145/3292500.3330658</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery &amp; Data Mining (KDD &apos;19)</title>
		<meeting>the 25th ACM SIGKDD International Conference on Knowledge Discovery &amp; Data Mining (KDD &apos;19)<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="1927" to="1935" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Deep Residual Learning for Image Recognition</title>
		<author>
			<persName><forename type="first">Kaiming</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiangyu</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shaoqing</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jian</forename><surname>Sun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Conference on Computer Vision and Pa ern Recognition (CVPR)</title>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shi</title>
		<author>
			<persName><forename type="first">Sergey</forename><surname>Io</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christian</forename><surname>Szegedy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 32nd International Conference on Machine Learning (Proceedings of Machine Learning Research</title>
		<editor>
			<persName><forename type="first">Francis</forename><surname>Bach</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">David</forename><surname>Blei</surname></persName>
		</editor>
		<meeting>the 32nd International Conference on Machine Learning ( Machine Learning Research<address><addrLine>Lille, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2015">2015</date>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="page" from="448" to="456" />
		</imprint>
	</monogr>
	<note>h p://proceedings.mlr.press/v37/io e15.html</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Unbiased Learning-to-Rank with Biased Feedback</title>
		<author>
			<persName><forename type="first">Adith</forename><surname>Joachims</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tobias</forename><surname>Swaminathan</surname></persName>
		</author>
		<author>
			<persName><surname>Schnabel</surname></persName>
		</author>
		<idno type="DOI">10.1145/3018661.3018699</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Tenth ACM International Conference on Web Search and Data Mining (WSDM &apos;17)</title>
		<meeting>the Tenth ACM International Conference on Web Search and Data Mining (WSDM &apos;17)<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="781" to="789" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<author>
			<persName><forename type="first">Walid</forename><surname>Krichene</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nicolas</forename><surname>Mayoraz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Li</forename><surname>Ste En Rendle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xinyang</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lichan</forename><surname>Yi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ed</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><surname>Chi</surname></persName>
		</author>
		<author>
			<persName><surname>Anderson</surname></persName>
		</author>
		<idno>arXiv:stat.ML/1807.07187</idno>
		<title level="m">E cient Training on Very Large Corpora via Gramian Estimation</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Methods and Metrics for Cold-start Recommendations</title>
		<author>
			<persName><forename type="first">Andrew</forename><forename type="middle">I</forename><surname>Schein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alexandrin</forename><surname>Popescul</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lyle</forename><forename type="middle">H</forename><surname>Ungar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><forename type="middle">M</forename><surname>Pennock</surname></persName>
		</author>
		<idno type="DOI">10.1145/564376.564421</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 25th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval (SIGIR &apos;02)</title>
		<meeting>the 25th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval (SIGIR &apos;02)<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="253" to="260" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">FaceNet: A Uni ed Embedding for Face Recognition and Clustering</title>
		<author>
			<persName><forename type="first">Florian</forename><surname>Schro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dmitry</forename><surname>Kalenichenko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">James</forename><surname>Philbin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Conference on Computer Vision and Pa ern Recognition (CVPR)</title>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Dropout: A Simple Way to Prevent Neural Networks from Over ing</title>
		<author>
			<persName><forename type="first">Nitish</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Geo</forename><surname>Rey Hinton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alex</forename><surname>Krizhevsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ruslan</forename><surname>Salakhutdinov</surname></persName>
		</author>
		<ptr target="//jmlr.org/papers/v15/srivastava14a.html" />
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="1929" to="1958" />
			<date type="published" when="2014">2014. 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Revisiting Unreasonable E ectiveness of Data in Deep Learning Era</title>
		<author>
			<persName><forename type="first">Chen</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Abhinav</forename><surname>Shrivastava</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Saurabh</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Abhinav</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE International Conference on Computer Vision (ICCV)</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<author>
			<persName><forename type="first">Sumit</forename><surname>Taank</surname></persName>
		</author>
		<title level="m">Tri Minh Cao, and Abhishek Ga ani. U.S. Patent 9563705B2</title>
		<imprint>
			<date type="published" when="2018-04">April 2018</date>
		</imprint>
	</monogr>
	<note>Re-ranking results in a search</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A ention is All you Need</title>
		<author>
			<persName><forename type="first">Ashish</forename><surname>Vaswani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Noam</forename><surname>Shazeer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Niki</forename><surname>Parmar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jakob</forename><surname>Uszkoreit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Llion</forename><surname>Jones</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aidan</forename><forename type="middle">N</forename><surname>Gomez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L Ukasz</forename><surname>Kaiser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Illia</forename><surname>Polosukhin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">;</forename><forename type="middle">I</forename><surname>Guyon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><forename type="middle">V</forename><surname>Luxburg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Wallach</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Fergus</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename></persName>
		</author>
		<ptr target="cc/paper/7181-aention-is-all-you-need.pdf" />
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<editor>
			<persName><forename type="first">R</forename><surname>Vishwanathan</surname></persName>
		</editor>
		<editor>
			<persName><surname>Garne</surname></persName>
		</editor>
		<imprint>
			<publisher>Curran Associates, Inc</publisher>
			<date type="published" when="2017">2017</date>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="5998" to="6008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">How to Use t-SNE E ectively</title>
		<author>
			<persName><forename type="first">Martin</forename><surname>Wa Enberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Fernanda</forename><surname>Vigas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ian</forename><surname>Johnson</surname></persName>
		</author>
		<idno type="DOI">10.23915/distill.00002</idno>
	</analytic>
	<monogr>
		<title level="j">Distill</title>
		<imprint>
			<date type="published" when="2016">2016. 2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title/>
		<author>
			<persName><surname>Wikipedia</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Deep La ice Networks and Partial Monotonic Functions</title>
		<author>
			<persName><forename type="first">Seungil</forename><surname>You</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Ding</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kevin</forename><surname>Canini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jan</forename><surname>Pfeifer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Maya</forename><surname>Gupta</surname></persName>
		</author>
		<ptr target="cc/paper/6891-deep-laice-networks-and-partial-monotonic-functions.pdf" />
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<editor>
			<persName><forename type="first">I</forename><surname>Guyon</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">U</forename><forename type="middle">V</forename><surname>Luxburg</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">S</forename><surname>Bengio</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">H</forename><surname>Wallach</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">R</forename><surname>Fergus</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">S</forename><surname>Vishwanathan</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">R</forename><surname>Garne</surname></persName>
		</editor>
		<imprint>
			<publisher>Curran Associates, Inc</publisher>
			<date type="published" when="2017">2017</date>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="2981" to="2989" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
