<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A discrete version of particle swarm optimization for flowshop scheduling problems</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2005-12-05">5 December 2005</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Ching-Jong</forename><surname>Liao</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Industrial Management</orgName>
								<orgName type="institution">National Taiwan University of Science and Technology</orgName>
								<address>
									<settlement>Taipei</settlement>
									<country key="TW">Taiwan</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Department of Business Administration</orgName>
								<orgName type="institution">National Taiwan University of Science and Technology</orgName>
								<address>
									<settlement>Taipei</settlement>
									<country key="TW">Taiwan</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Chao-Tang</forename><surname>Tseng</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Department of Business Administration</orgName>
								<orgName type="institution">National Taiwan University of Science and Technology</orgName>
								<address>
									<settlement>Taipei</settlement>
									<country key="TW">Taiwan</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A discrete version of particle swarm optimization for flowshop scheduling problems</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2005-12-05">5 December 2005</date>
						</imprint>
					</monogr>
					<idno type="MD5">D8354E16812D77D802851A8EF94A2A9A</idno>
					<idno type="DOI">10.1016/j.cor.2005.11.017</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T13:44+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Scheduling</term>
					<term>Particle swarm optimization</term>
					<term>Metaheuristic</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Particle swarm optimization (PSO) is a novel metaheuristic inspired by the flocking behavior of birds. The applications of PSO to scheduling problems are extremely few. In this paper, we present a PSO algorithm, extended from discrete PSO, for flowshop scheduling. In the proposed algorithm, the particle and the velocity are redefined, and an efficient approach is developed to move a particle to the new sequence. To verify the proposed PSO algorithm, comparisons with a continuous PSO algorithm and two genetic algorithms are made. Computational results show that the proposed PSO algorithm is very competitive. Furthermore, we incorporate a local search scheme into the proposed algorithm, called PSO-LS. Computational results show that the local search can be really guided by PSO in our approach. Also, PSO-LS performs well in flowshop scheduling with total flow time criterion, but it requires more computation times.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Particle swarm optimization (PSO), originally designed by Kennedy and Eberhart <ref type="bibr" target="#b0">[1]</ref> in 1995, is an emerging population-based optimization method. Since 2002, PSO has been growing rapidly with over 100 published papers every year. All the related research has totaled over 300 papers until 2004 <ref type="bibr" target="#b1">[2]</ref>. PSO has been applied successfully to continuous nonlinear functions <ref type="bibr" target="#b0">[1]</ref>, neural networks <ref type="bibr" target="#b2">[3]</ref>, nonlinear constrained optimization problems <ref type="bibr" target="#b3">[4]</ref>, etc. Most of the applications have been concentrated on solving continuous optimization problems, but the studies of PSO on discrete optimization problems are relatively few. In this paper, we will develop a PSO algorithm for the flowshop scheduling problem, a class of important discrete optimization problems.</p><p>In the PSO literature, the research on scheduling is extremely few. Tasgetiren et al. <ref type="bibr" target="#b4">[5]</ref> first developed a PSO algorithm for the single machine total weighted tardiness problem. They used the smallest position value (SPV) rule, a non-decreasing order mechanism, to convert a position vector to a job permutation. Also, a well-known local search method, called variable neighborhood search (VNS), was applied to improve the solution. With the same approach, Tasgetiren et al. <ref type="bibr" target="#b5">[6]</ref> solved two permutation flowshop problems with the criteria of makespan minimization and maximum lateness minimization, respectively. Both their algorithms with and without VNS were experimented on the benchmark problems given by Demirkol et al. <ref type="bibr" target="#b6">[7]</ref> and both showed their advantages over the respective genetic algorithms (GAs) proposed by themselves.</p><p>It is noted that the above scheduling research on PSO is an extension from the continuous version of PSO (i.e., the original PSO). To solve discrete optimization problems, Kennedy and Eberhart <ref type="bibr" target="#b7">[8]</ref> also developed a discrete version of PSO, which however has seldom been utilized. Adopting a different approach from Tasgetiren et al. <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b5">6]</ref>, this paper attempts to develop an algorithm for the flowshop scheduling problem based on discrete PSO. The proposed PSO algorithm has several features including the construction of a particle sequence and a new neighborhood structure of particles, among others.</p><p>To evaluate the performance of the discrete PSO algorithm for flowshop scheduling, we will conduct a series of experiments in this paper. First, we will compare our discrete PSO algorithm with the continuous PSO algorithm of Tasgetiren et al. <ref type="bibr" target="#b5">[6]</ref>. The two algorithms will be used to solve the makespan minimization problem in a flowshop, studied by Tasgetiren et al. <ref type="bibr" target="#b5">[6]</ref>. Second, we will make a comparison between PSO and GA, another population-based metaheuristic. A recent GA algorithm of Etiler et al. <ref type="bibr" target="#b8">[9]</ref> is chosen and the comparative study is made based on the wellknown benchmark problems given by Taillard <ref type="bibr" target="#b9">[10]</ref>. Third, as Pinedo <ref type="bibr" target="#b10">[11]</ref> indicates, population-based algorithms are well suited for multi-objective scheduling problems because they are already designed to carry a population of solutions from one generation to next generation. Hence, we will select a GA algorithm, developed by Sridhar and Rajendran <ref type="bibr" target="#b11">[12]</ref>, for a triple-objective flowshop scheduling problem for comparison. Finally, to improve our PSO algorithm we will attempt to incorporate a local search scheme into the algorithm. The best upper bounds on total flow time reported by Rajendran and Ziegler <ref type="bibr" target="#b12">[13]</ref> are utilized for the relative performance evaluation.</p><p>The structure of this paper is organized as follows: in Section 2, we introduce the background of PSO. The structure of the proposed PSO algorithm is presented in Section 3. A series of comparative experiments are conducted in Section 4 to evaluate the performance of the proposed algorithm. Finally, conclusions are given in Section 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Introduction to PSO</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.">Background of PSO</head><p>PSO is inspired by observing the bird flocking or fish school <ref type="bibr" target="#b0">[1]</ref>. Scientists found that the synchrony of flocking behavior was through maintaining optimal distances between individual members and their neighbors. Thus, velocity plays the important role of adjusting each other for the optimal distance. Furthermore, scientists simulated the scenario in which birds search for food and observed their social behavior. They perceived that in order to find food the individual members determined their velocities by two factors, their own best previous experience and the best experience of all other members <ref type="bibr" target="#b0">[1]</ref>. This is similar to the human behavior in making decision where people consider their own best past experience and the best experience of how the other people around them have performed <ref type="bibr" target="#b13">[14]</ref>.</p><p>According to the above concept, Kennedy and Eberhart <ref type="bibr" target="#b0">[1]</ref> developed the so-called PSO for optimization of continuous nonlinear functions in 1995. They discussed the application of PSO to the training of artificial neural network weights, and also demonstrated the good performance of PSO on a benchmark function for GAs. In their paper, birds are called particles, each representing a potential solution. To find the optimal solution, each particle adjusts its flying according to its own flying experience and its companions' flying experience. Shi and Eberhart <ref type="bibr" target="#b14">[15]</ref> named the former the cognition part and the latter the social part.</p><p>For the social part, Eberhart and Kennedy <ref type="bibr" target="#b15">[16]</ref> developed the so-called gbest and lbest models for the neighborhood structure of particles. In the gbest model, the companions' flying experience is obtained in the population, i.e., the original PSO version. In the lbest model, the companions' flying experience is obtained in the local neighborhood.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.">Discrete PSO</head><p>In the above discussion, PSO is restricted in real number space. However, many optimization problems are set in a space featuring discrete or qualitative distinctions between variables. To meet the need, Kennedy and Eberhart <ref type="bibr" target="#b7">[8]</ref> developed a discrete version of PSO. Discrete PSO essentially differs from the original (or continuous) PSO in two characteristics. First, the particle is composed of the binary variable. Second, the velocity must be transformed into the change of probability, which is the chance of the binary variable taking the value one. As in continuous PSO, each particle adjusts its velocity according to the cognition part and the social part. Mathematically, we have</p><formula xml:id="formula_0">v t id = v t-1 id + c 1 r 1 (p t id -x t id ) + c 2 r 2 (p t gd -x t id ),<label>(1)</label></formula><p>where c 1 is the cognition learning factor, c 2 is the social learning factor, and r 1 and r 2 are random numbers uniformly distributed in [0, 1]. Eq. ( <ref type="formula" target="#formula_0">1</ref>) specifies that the velocity of a particle at iteration t is determined by the previous velocity of the particle, the cognition part, and the social part. The values c k r k (k = 1, 2) determine the weights of the two parts, where their sum is usually limited to 4 <ref type="bibr" target="#b13">[14]</ref>. By Eq. (1), each particle moves according to its new velocity. Recall that particles are represented by binary variables. For the velocity value of each bit in a particle, Kennedy and Eberhart <ref type="bibr" target="#b7">[8]</ref> claim that higher value is more likely to choose 1, while lower value favors the 0 choice. Furthermore, they constrain the velocity value to the interval [0, 1] by using the following sigmoid function:</p><formula xml:id="formula_1">s(v t id ) = 1 1 + exp(-v t id ) ,<label>(2)</label></formula><p>where s(v t id ) denotes the probability of bit x t id taking 1. To avoid s(v t id ) approaching 0 or 1, a constant V max is used to limit the range of v t id . In practice, V max is often set at 4, i.e., v t id ∈ [-V max , +V max ] [14]. Kennedy et al. <ref type="bibr" target="#b13">[14]</ref> give the pseudo-code of discrete PSO as follows (for maximization problem): </p><formula xml:id="formula_2">Loop For i = 1 to N p If G(X t i ) &gt; G(P t i ) then // G(</formula><formula xml:id="formula_3">j For d = 1 to D v t id = v t-1 id + c 1 r 1 (p t id -x t id ) + c 2 r 2 (p t gd -x t id ) v t id ∈ [-V max , +V max ] If random number &lt; s(v t id ) then x t+1 id = 1; else x t+1 id = 0 Next d Next i Until criterion</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Proposed PSO algorithm</head><p>In this section, we extend the discrete PSO of Kennedy and Eberhart <ref type="bibr" target="#b7">[8]</ref> to solve the flowshop scheduling problem. Clearly, the discrete particle needs to be redesigned to represent a sequence of n jobs, and the velocity has to be redefined. To move a particle to a new sequence, an efficient approach also needs to be developed. Details are given in what follows. Position (k)</p><formula xml:id="formula_4">1 2 3 4 1 1 0 0 2 -1 -1 0 1 0 3 0 0 0 0 4 0 0 0 0 Job ( j)</formula><p>Fig. <ref type="figure">2</ref>. The resulting values of v t ijk = p t gjkx t ijk .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Definition of discrete particle</head><p>As other metaheuristics in dealing with flowshop scheduling problems, it puzzles researchers to appropriately represent a sequence of n jobs by the variable. Our proposed PSO algorithm designs a "job-to-position" representation for the discrete particle. We define particle i at iteration t as X t i = (x t i11 , x t i12 , . . . , x t inn ), x ijk ∈ {0, 1}, where x t ijk equals 1 if job j of particle i is placed in the kth position of the sequence and 0 otherwise. For example, suppose the sequence of X t i is (2314). By this definition, we have x t i21 = x t i32 = x t i13 = x t i44 = 1 and all other x t ijk = 0 (see Fig. <ref type="figure" target="#fig_0">1</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Velocity trail</head><p>We define the velocity of particle i at iteration t as</p><formula xml:id="formula_5">V t i = (v t i11 , v t i12 , . . . , v t inn ), v t ijk ∈ R,</formula><p>where v t ijk is the velocity value for job j of particle i placed in the kth position at iteration t. The velocity V t i , called velocity trail, is inspired by the frequency-based memory <ref type="bibr" target="#b16">[17]</ref>. The frequency-based memory records the number of times that a job visits a particular position, and it is often used in combinatorial optimization, e.g., the long-term memory of tabu search, to provide useful information that facilitates choosing preferred moves. Here, we make use of the similar concept to design the velocity trail. Higher value of v t ijk in the trail indicates that job j is more likely to be placed in the kth position, while lower value favors moving job j out of the kth position.</p><p>The particle's new velocity trail is updated by the following equation:</p><formula xml:id="formula_6">v t ijk = wv t-1 ijk + c 1 r 1 (p t ijk -x t ijk ) + c 2 r 2 (p t gjk -x t ijk ).<label>(3)</label></formula><p>Here, P t i = (p t i11 , p t i12 , . . . , p t inn ), p t ijk ∈ {0, 1} denotes the best solution that particle i has obtained until iteration t, P t g = (p t g11 , p t g12 , . . . , p t gnn ), p t gjk ∈ {0, 1} denotes the best solution obtained from particles in the population at iteration t (see Section 3.4 for details of this social part variant), and w is the inertia weight proposed by Shi and Eberhart <ref type="bibr" target="#b14">[15]</ref>. A constant V max is used to limit the range of v t ijk , i.e., v t ijk ∈ [-V max , +V max ]. We now explain the meaning of velocity trail. For simplicity, suppose there exists only the social part in Eq. ( <ref type="formula" target="#formula_6">3</ref>) and c 2 = r 2 = 1. The sequence of X t i is assumed to be (2314) and the sequence of P t g be (1324). It is clear that v t ijk = p t gjkx t ijk = 1, 0, -1 (see Fig. <ref type="figure">2</ref>). Value 1 intensifies the arrangement of job j in the kth position, whereas -1 diversifies such an arrangement. In the calculation, we can simply add p t gjk = 1 to the corresponding v t ijk , subtract x t ijk = 1 from v t ijk , and leave others unchanged. If</p><formula xml:id="formula_7">v t ijk is smaller than -V max , then set v t ijk = -V max ; if v t ijk is greater than + V max , then set v t ijk = +V max .</formula><p>The above example and Eq. ( <ref type="formula" target="#formula_6">3</ref>) demonstrate that the velocity trail is gradually accumulated by the individual's own experience and individual's companions' experience. This social behavior of sharing useful information among individuals in searching for the optimal solution is the merit of PSO over more classical metaheuristics.</p><p>As in discrete PSO, the velocity trail values need to be converted from real numbers to the changes of probabilities by the following sigmoid function:</p><formula xml:id="formula_8">s(v t ijk ) = 1 1 + exp(-v t ijk ) ,<label>(4)</label></formula><p>where s(v t ijk ) represents the probability of x t ijk taking the value 1. For example, s(v t i12 ) = 0.2 in Fig. <ref type="figure">3</ref> represents that there is a 20% chance that job 1 of particle i will be placed in the 2nd position.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">Construction of a particle sequence</head><p>In the proposed algorithm, each particle constructs its new sequence based on its changes of probabilities from the velocity trail. In the conventional approach, a particle i starts with a null sequence and places an unscheduled job j in position k (k = 1, 2, . . . , n) according to the following probability:</p><formula xml:id="formula_9">q t i (j, k) = s(v t ijk ) j ∈U s(v t ijk ) , (<label>5</label></formula><formula xml:id="formula_10">)</formula><p>where U is the set of all unscheduled jobs. The jobs are appended successively to the partial sequence until a complete sequence is constructed.</p><p>To reduce the computational effort, we replace U by a smaller set of unscheduled jobs in our algorithm. In a study on ant-colony optimization for flowshop scheduling, Rajendran and Ziegler <ref type="bibr" target="#b12">[13]</ref> let the smaller set consist of only the first five unscheduled jobs as present in the best sequence obtained so far. The basic idea of this approach is to take the information of the best sequence into consideration and reduce the computational effort. We employ the similar concept but change the restricted number of jobs from 5 to f, a parameter determined by experiments. Based on the experiments in our flowshop scheduling problem, the use of the smaller set not only reduces the computation time, but also improves the solution quality. The new probability is as follows:</p><formula xml:id="formula_11">q t i (j, k) = s(v t ijk ) j ∈F s(v t ijk ) , (<label>6</label></formula><formula xml:id="formula_12">)</formula><p>where F is the set among the first f unscheduled jobs as present in the best sequence (B) obtained so far. When there are less than f jobs unscheduled, all of these jobs are included. For example, suppose B = (2314), f = 2, and s(v t ijk ) is as given in Fig. <ref type="figure">3</ref>. We start with the null sequence and consider only the first two (f = 2) unscheduled jobs (i.e., jobs 2 and 3) to be placed in the first position. By Eq. ( <ref type="formula" target="#formula_11">6</ref>), q t i (2, 1) = 0.99/(0.99 + 0.53) = 0.6513, q t i (3, 1) = 0.53/(0.99 + 0.53) = 0.3487. Suppose job 3 is selected based on this probability. Then the unscheduled jobs to be considered in the second position will be jobs 2 and 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.">Variant of gbest model</head><p>For the neighborhood structure of particles in the social part, we introduce the gbest model but modify the approach of searching for P t g in our algorithm. In the original PSO approach, P t g is obtained from P t i (i = 1, 2, . . . , N p ). Based on our computational experiments in flowshop scheduling, we find that the approach that obtains P t g from the current particles X t i (i = 1, 2, . . . , N p ) performs better. Although our approach spends more computation time on converging, it increases the probability of leaving a local optimum.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5.">Proposed PSO algorithm</head><p>The pseudo-code of the proposed PSO algorithm can be stated as follows: </p><formula xml:id="formula_13">Initialize parameters: N p , c 1 , c 2 , w, V max , f, V i = 0 Generate initial particles X 1 i , i = 1, . . . , N p Set P 1 i = X 1 i , B = X 1 1 //B is</formula><formula xml:id="formula_14">i = 1 to N p v t ijk = wv t-1 ijk + c 1 r 1 (p t ijk -x t ijk ) + c 2 r 2 (p t gjk -x t ijk ) v t ijk ∈ [-V max , +V max ] Next i // construct a new feasible solution For i = 1 to N p O i is a null sequence for particle i For k = 1 to n position // changes of probabilities For j =indices of F // If #F &lt; f then all unscheduled jobs are considered s(v t ijk ) = 1 1+exp(-v t ijk ) S 1 S 2 S 1</formula><p>′ Fig. <ref type="figure">4</ref>. The search approach for PSO-LS.</p><p>Next j // construction For j = indices of F</p><formula xml:id="formula_15">q t i (j, k) = s(v t ijk ) j ∈F s(v t ijk )</formula><p>If random number q t i (j, k) then job j is placed in the kth position in O i ; go to Next_Position;</p><formula xml:id="formula_16">Next j Next_Position Next k X t+1 i = O i Next i Until maximum number of iterations</formula><p>In the algorithm we generate N p sequences (particles) at each iteration, and hence a total of (N p × maximum number of iterations) sequences are enumerated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6.">Local search scheme</head><p>In this section, we attempt to incorporate a local search scheme into the proposed PSO algorithm (called PSO-LS) to improve its performance. The basic idea is as follows. Given the current solution S 1 , the mechanism of PSO leads the solution to an intermediate solution S 1 (see Fig. <ref type="figure">4</ref>). Then a local search is applied to S 1 to reach a solution S 2 . Therefore, we propose a reasonable procedure for PSO-LS as follows. At the beginning of the algorithm, a local search is first employed in each particle. In the loop of the PSO procedure, the local search is carried out once for every fixed number (say 50) of iterations.</p><p>The local search scheme adopted in our algorithm is a combination of IT (interchange) and IS (insertion) <ref type="bibr" target="#b17">[18]</ref>. IT considers exchanges of jobs placed at the ith and j th positions while IS inserts the job from the ith position into the j th position. IT is implemented, with the first-improvement strategy, first until no better sequence can be found. After that, IS is applied to complete the local search.</p><p>Experimentally, we find that the computation time for the local search grows fast on large-sized instances. To reduce the computational burden, we therefore restrict the positions of both forward and backward interchanges and insertions to a maximum of 12 in our algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Computational results</head><p>Four sets of computational experiments were conducted to test the performance of the proposed PSO algorithm. The first set compares our algorithm with the continuous PSO algorithm of Tasgetiren et al. <ref type="bibr" target="#b5">[6]</ref>. The second and third sets draw a comparison with GA, another population-based metaheuristic, for flowshop scheduling with single and multiple objectives, respectively. The fourth set examines the performance of the algorithm with the incorporation of local search technique. All the algorithms were coded in Visual C++ and run on a Pentium IV 3.2 GHz PC.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">Comparison with continuous PSO</head><p>Tasgetiren et al. <ref type="bibr" target="#b5">[6]</ref> developed a continuous PSO algorithm for the makespan minimization problem in a flowshop. We will compare our PSO algorithm with their algorithm. The comparative experiments were conducted on the benchmark instances for flowshop scheduling with makespan given by Demirkol et al. <ref type="bibr" target="#b6">[7]</ref> in accordance with Tasgetiren et al. <ref type="bibr" target="#b5">[6]</ref>. For a fair comparison, the local search was not employed in both algorithms. In the benchmark instances, eight combinations with number of machines m = 15, 20 and number of jobs n = 20, 30, 40, 50 were randomly generated. The processing times were drawn from a uniform distribution between 1 to 200. For each combination, the instances were ranked in decreasing order of the percentage gap between upper and lower bounds and the first five instances were chosen. The best upper bounds for these instances were found by five dispatching rules and three shifting bottleneck methods, and they can be downloaded from http://www.ecn.purdue.edu/labs/uzsoy/.</p><p>In the preliminary experiment, the following ranges of parameter values from the PSO literature were tested <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b13">[14]</ref><ref type="bibr" target="#b14">[15]</ref><ref type="bibr" target="#b15">[16]</ref>:</p><formula xml:id="formula_17">N p = [5, 60], c k = [1, 4], w = (0.8, 1.2), V max = [3, 20], f = [0.2 × n, 0.8 × n].</formula><p>Based on the experimental results, the proposed PSO algorithm performs best under the following settings:</p><formula xml:id="formula_18">N p = 20, c 1 = c 2 = 1.5, w = 1, V max = 10, f = 0.4 × n.</formula><p>The maximum number of iterations MaxIter = 50 × n is used as the stopping criterion.</p><p>We solve the 40 benchmark instances by using each of the two PSO algorithms, where each instance is tested for 10 trials. The initial population is created randomly. The number of iterations and the parameters for the algorithm of Tasgetiren et al. are taken directly from their paper. We use the percentage relative increase (PRI) in makespan as the performance measure, i.e.,</p><formula xml:id="formula_19">PRI = (A -U) U × 100,</formula><p>where U represents the best upper bound, A represents the makespan value generated by the respective algorithm. For each instance, the average ( PRI ), standard deviation ( PRI ), and minimum (min PRI ) of PRI are computed. The results are given in Table <ref type="table" target="#tab_4">1</ref>, which gives the mean PRI (Avg), mean PRI (Std), and mean min PRI (Min), along with the number of iterations (iter.) and average computation time (t). It can be observed that the proposed PSO algorithm outperforms the algorithm of Tasgetiren et al. for all the combinations. For the mean PRI (Avg), there is an average difference of 1.46. With the increase in the number of jobs, the difference is slightly raised. The proposed PSO algorithm is also superior in terms of Std and Min. However, it is observed in Table <ref type="table" target="#tab_4">1</ref> that our algorithm requires more computation time. To be fair, we allow the number of iterations or the population size for the algorithm of Tasgetiren et al. to increase so as to achieve the same computation time as ours. The new results are given in Table <ref type="table" target="#tab_5">2</ref>, which shows that the proposed PSO algorithm is still superior but the difference is reduced.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">Comparison with GA for single-objective flowshop</head><p>We now present the comparative analysis between the proposed PSO algorithm and GA for flowshop scheduling with makespan criterion. A recent implementation of GA developed by Etiler et al. <ref type="bibr" target="#b8">[9]</ref> is selected for comparison. The same initial solutions generated by CDS <ref type="bibr" target="#b18">[19]</ref>, Dannenbring method <ref type="bibr" target="#b19">[20]</ref>, and an exchange operator as GA <ref type="bibr" target="#b8">[9]</ref> are used in the proposed PSO algorithm. The experiments were conducted on the benchmark problems, given by Taillard <ref type="bibr" target="#b9">[10]</ref>, with m = 5, 10, 20 and n = 20, 50, 100. There were 10 instances for each problem size and 90 problem instances in all. The problem instances and their best upper bounds can be downloaded from http://ina.eivd.ch/collaborateurs/etd/.</p><p>A preliminary experiment of the PSO algorithm showed that the values of parameters the same as in Section 4.1 were also suitable here. The 90 benchmark instances were solved by both PSO and GA, where the number of iterations in GA was increased so as to achieve relatively the same computation time as for PSO. Because Etiler et al. <ref type="bibr" target="#b8">[9]</ref> found that the population size more than 60 could not obtain better results than the size of 60, increasing the population size was not considered. Each problem instance was tested for 10 trials. The results are summarized in Table <ref type="table">3</ref>, which gives the mean PRI (Avg) yielded by PSO, GA, and NEH <ref type="bibr" target="#b20">[21]</ref>. We note that NEH is a constructive heuristic and it can generate the solution in a very short time. It is observed from the table that the proposed PSO algorithm performs best for most problems, while GA is the best for two large-sized problems (100 × 10 and 100 × 20).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.">Comparison with GA for multi-objective flowshop</head><p>To evaluate the proposed PSO algorithm for multi-objective flowshop scheduling, an experiment was conducted to make a comparison with the GA algorithm of Sridhar and Rajendran <ref type="bibr" target="#b11">[12]</ref>, which is developed for the flowshop problem with triple objectives-makespan, total flow time, and total machine idle time. Their GA employs the NEH <ref type="bibr" target="#b20">[21]</ref> and RC <ref type="bibr" target="#b21">[22]</ref> heuristics as the initial solutions and uses the DELTA operator to determine whether the parents should be replaced by the children. Also, the adjacent pairwise interchange (API) is applied to the final schedule. A single solution with equal weights for the three objectives is finally produced.</p><p>To have a fair comparison, our PSO algorithm is modified as follows:</p><p>1. Generating the initial solutions: Use the NEH and RC heuristics to generate two sequences, and then apply the swap method to each sequence to produce the required number of initial solutions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Finding the previous best solution of particles:</head><p>The DELTA operator is used to find the previous best solution of particles. Denote by S 1 i the sequence of P t-1 i and S 2 i the sequence of X t i . By evaluating S 1 i and S 2 i for the three objectives, we can obtain the values of makespan (MS 1  i and MS 2 i ), total flow times (FT 1 i and FT 2 i ), and total idle times (IT 1  i and IT 2 i ). To compare S 1 i and S 2 i , DELTA is defined as follows:</p><formula xml:id="formula_20">e 1 = w 1 MS 1 i -min(MS 1 i ; MS 2 i ) min(MS 1 i ; MS 2 i ) + w 2 FT 1 i -min(FT 1 i ; FT 2 i ) min(FT 1 i ; FT 2 i ) + w 3 IT 1 i -min(IT 1 i ; IT 2 i ) min(IT 1 i ; IT 2 i ) ,<label>(7)</label></formula><formula xml:id="formula_21">e 2 = w 1 MS 2 i -min(MS 1 i ; MS 2 i ) min(MS 1 i ; MS 2 i ) + w 2 FT 2 i -min(FT 1 i ; FT 2 i ) min(FT 1 i ; FT 2 i ) + w 3 IT 2 i -min(IT 1 i ; IT 2 i ) min(IT 1 i ; IT 2 i ) ,<label>(8)</label></formula><formula xml:id="formula_22">DELTA = e 1 -e 2 ,<label>(9)</label></formula><p>where w 1 = w 2 = w 3 = 1/3. If DELTA is positive, then S 2 i is better and we update P t i = X t i . Otherwise, S 1 i is better and we let P t i = P t-1 i .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.</head><p>Finding the best solution from the particles in the population: We take two particles at a time as input to DELTA to obtain the best solution P t g from the population (X t i , i = 1, 2, . . . , N p ). 4. Applying the API scheme to the final schedule: Generate (n -1) sequences by API and the best one is chosen as the final sequence.</p><p>On the other hand, Framinan et al. <ref type="bibr" target="#b22">[23]</ref> proposed two algorithms, based on NEH, to generate a set of efficient solutions. According to their computational results, their algorithms performed better than the GA algorithm of Sridhar and Rajendran <ref type="bibr" target="#b11">[12]</ref> for flowshop scheduling with two objectives-makespan and total flow time.</p><p>To establish a comparison with algorithms of Framinan et al. <ref type="bibr" target="#b22">[23]</ref>, we include a modified version of their algorithms by assigning to the three objectives suitable weights, i.e., 1/3 × C max × n/2 + 1/3 × C + 1/3 × I × n/10, in order to obtain a single solution. The weights are determined in accordance with Framinan et al. <ref type="bibr" target="#b22">[23]</ref> to balance the effect of magnitude. We note that their two algorithms result in the same solution when the weights of objectives are constant as here.</p><p>In the experiment, we designed a total of nine combinations with n = 10, 30, 50 and m = 10, 20, 30. For each combination, 30 test instances were generated with processing times drawn from a uniform distribution between 1 and 99 <ref type="bibr" target="#b11">[12]</ref>. A preliminary experiment of PSO showed that the values of parameters the same as in Section 4.1 were also appropriate here. To make a fair comparison, we increase the number of iterations in GA so as to achieve relatively the same computation time as ours. Also, we note that the algorithm of Framinan et al. <ref type="bibr" target="#b22">[23]</ref> is a constructive heuristic which can generate the solution in a very short time.</p><p>The same as in Sridhar and Rajendran <ref type="bibr" target="#b11">[12]</ref>, the relative percentage increase (RPI) is used as the performance measure. Let M i , F i , and I i represent the values of makespan, total flow time, and machine idle time associated with The comparison of the proposed PSO algorithm with GA is summarized in Table <ref type="table" target="#tab_6">4</ref>, which gives the mean value of RPI (MRPI) for the three objectives. We also report the MRPIs yielded by the algorithm of Framinan et al. <ref type="bibr" target="#b22">[23]</ref>. DESC denotes the use of NEH heuristic as the initial solution in their algorithm, while ASC indicates their own heuristic for minimizing flow time as the initial solution. It can be observed that the proposed PSO algorithm performs best in general. Although ASC is the best in terms of total flow time because of its emphasis on this criterion, it performs rather poor on the other two criteria.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.">Performance of PSO with local search</head><p>We now attempt to incorporate a local search scheme into the proposed PSO algorithm (called PSO-LS) and observe its performance for flowshop scheduling with total flow time criterion. We will compare its solutions with the best upper bounds on total flow time reported by Rajendran and Ziegler <ref type="bibr" target="#b12">[13]</ref>, which developed two ant-colony algorithms, called M-MMAS and PACO. The comparative experiments will be carried out on the benchmark problems of Taillard <ref type="bibr" target="#b9">[10]</ref>.</p><p>In the experiment of PSO-LS, each instance was tested only one trial to be consistent with that of Rajendran and Ziegler <ref type="bibr" target="#b12">[13]</ref>. The NEH-ASC heuristic developed by Framinan et al. <ref type="bibr" target="#b22">[23]</ref> was used to generate an initial solution, after which the insertion method was applied to create other members in the initial population. A preliminary experiment showed that the values of parameters the same as in Section 4.1 were not appropriate because of the incorporation of local search technique. A further experiment determined the following suitable values of parameters: N p = 10, c 1 = c 2 = 2, w = 1, V max = 10, f = 0.25 × n, MaxIter = 10 × n, and the local search scheme being applied to all particles once for every n iterations. It is noted that because of the inclusion of local search, both N p and MaxIter are decreased while the learning factors c k are increased. In order to allow each particle to arrive at an intermediate solution, the local search should be implemented occasionally. Based on our experiments, good results can be obtained by carrying out the local search for every n iterations.</p><p>The computational results are summarized in Table <ref type="table" target="#tab_7">5</ref>, which gives the mean value of RPI in total flow time yielded by BEST(LR) <ref type="bibr" target="#b23">[24]</ref>, M-MMAS, PACO, LS, PSO-LS, respectively. It is observed that both M-MMAS and PACO outperform other algorithms for most problems. Although our PSO-LS performs well for some problems, the results are obtained by taking more iterations and more computation times. We note that both M-MMAS and PACO are the latest versions of ant-colony algorithms, which have been applied to the scheduling problems for about ten years. Nevertheless, PSO has just been employed in solving scheduling problems for one or two years, and thus it still has potential to be developed as a good solution approach for the scheduling problem. In addition, LS in Table <ref type="table" target="#tab_7">5</ref> denotes the implementation of our local search without using any other solution methods. To have a fair comparison between LS and PSO-LS, LS was run to attain the same computation time as PSO-LS. It is observed that PSO-LS is superior to LS in all the problems, which indicates that the particles are truly led to good intermediate solutions by PSO.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Conclusions and future studies</head><p>The main aim of this research is to develop a PSO algorithm for flowshop scheduling. The proposed algorithm is extended from the discrete version of PSO, where the particle and velocity are redefined. Applying an efficient approach to the construction of sequence, the particle is moved to the new sequence. We have also designed a new neighborhood structure in the social part to further improve the algorithm.</p><p>To verify the performance of the proposed PSO algorithm, a series of experiments have been conducted in this paper. First, we have demonstrated by experiments that the extended discrete PSO algorithm performs better than the extended continuous PSO algorithm of Tasgetiren et al. <ref type="bibr" target="#b5">[6]</ref>. In the second and third experiments, the proposed algorithm has been further compared with GA in solving the flowshop scheduling problem with single and multiple objectives, respectively. The experimental results have shown the superiority of the proposed algorithm over GA by allowing GA to have the same computation time. Finally, we have incorporated a local search scheme into the proposed algorithm (called PSO-LS). The computational results have shown that the local search can be really guided by PSO in our approach. We have also found that the two ant-colony algorithms-M-MMAS and PACO-outperform PSO-LS in general. Although PSO-LS has performed better for some problems, the results are obtained by taking more computation times. It should be noted that both M-MMAS and PACO are the latest versions of ant-colony algorithms, which have been applied to the scheduling problem for about 10 years. Nevertheless, PSO has just been employed in solving scheduling problems, and thus it still has potential to be developed as a good solution approach for the scheduling problem.</p><p>It can be seen from our PSO algorithm that the velocity trail is gradually accumulated by the individual's own experience and individual's companions' experience. This social behavior of sharing useful information among individuals in order to find the optimal solution is the merit of PSO over more classical metaheuristics. The simplicity is also another advantage of PSO-the main search procedure can be described in one straightforward formula (i.e., velocity updating equation) <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b15">16]</ref>.</p><p>PSO has been applied successfully to many continuous optimization problems, but its applications to discrete optimization problems are few. In this paper, we have demonstrated that the discrete version of PSO can be applied to the flowshop scheduling problem, a class of discrete optimization problems, and the extended algorithm is very competitive. Future research may be conducted to further investigate the applications of discrete PSO to other scheduling problems.</p><p>It is also worthwhile to design other versions of PSO to continue pursuing the best performance of PSO in solving flowshop scheduling problems.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>PositionFig. 1 .</head><label>1</label><figDesc>Fig. 1. Definition of particle X t i for sequence (2314).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>The following notation is needed in discrete PSO. Denote by N p the number of particles in the population. Let</figDesc><table><row><cell>X t i =(x t i1 , x t i2 , . . . , x t iD ), x t id ∈ {0, 1}, be particle i with D bits at iteration t, where X t i being treated as a potential solution has a rate of change called velocity. Denote the velocity as V t i =(v t i1, v t i2 , . . . , v t iD ), v t id ∈ R. Let P t i =(p t i1 , p t i2 , . . . , p t iD ) be the best solution that particle i has obtained until iteration t, and P t g = (p t g1 , p t g2 , . . . , p t gD ) be the best solution</cell></row><row><cell>obtained from P t i in the population (gbest) or local neighborhood (lbest) at iteration t.</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 1</head><label>1</label><figDesc>Comparison with the algorithm of Tasgetiren et al.</figDesc><table><row><cell>n × m</cell><cell cols="2">Algorithm of Tasgetiren et al.</cell><cell></cell><cell></cell><cell></cell><cell>Proposed PSO</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>N p × iter.</cell><cell>Avg</cell><cell>Std</cell><cell>Min</cell><cell>t</cell><cell>N p × iter.</cell><cell>Avg</cell><cell>Std</cell><cell>Min</cell><cell>t</cell></row><row><cell>20×15</cell><cell>40×1000</cell><cell>-6.04</cell><cell>1.11</cell><cell>-7.68</cell><cell>0.50</cell><cell>20×1000</cell><cell>-6.76</cell><cell>0.57</cell><cell>-7.64</cell><cell>1.01</cell></row><row><cell>20×20</cell><cell></cell><cell>-4.34</cell><cell>1.20</cell><cell>-6.15</cell><cell>0.61</cell><cell></cell><cell>-5.65</cell><cell>0.47</cell><cell>-6.27</cell><cell>1.12</cell></row><row><cell>30×15</cell><cell>60×1000</cell><cell>-6.73</cell><cell>1.27</cell><cell>-8.58</cell><cell>1.28</cell><cell>20×1500</cell><cell>-8.56</cell><cell>0.67</cell><cell>-9.61</cell><cell>3.02</cell></row><row><cell>30×20</cell><cell></cell><cell>-5.41</cell><cell>0.96</cell><cell>-6.71</cell><cell>1.55</cell><cell></cell><cell>-6.34</cell><cell>0.61</cell><cell>-7.33</cell><cell>3.25</cell></row><row><cell>40×15</cell><cell>80×1000</cell><cell>-7.22</cell><cell>1.12</cell><cell>-8.67</cell><cell>2.53</cell><cell>20×2000</cell><cell>-8.94</cell><cell>0.63</cell><cell>-10.02</cell><cell>6.76</cell></row><row><cell>40×20</cell><cell></cell><cell>-5.15</cell><cell>0.85</cell><cell>-6.56</cell><cell>2.99</cell><cell></cell><cell>-6.63</cell><cell>0.66</cell><cell>-7.52</cell><cell>7.57</cell></row><row><cell>50×15</cell><cell>100×1000</cell><cell>-6.15</cell><cell>0.97</cell><cell>-7.56</cell><cell>4.34</cell><cell>20×2500</cell><cell>-7.85</cell><cell>0.53</cell><cell>-8.64</cell><cell>12.66</cell></row><row><cell>50×20</cell><cell></cell><cell>-6.75</cell><cell>0.96</cell><cell>-8.19</cell><cell>5.11</cell><cell></cell><cell>-8.74</cell><cell>0.52</cell><cell>-9.62</cell><cell>13.06</cell></row><row><cell>Average</cell><cell></cell><cell>-5.97</cell><cell>1.06</cell><cell>-7.51</cell><cell>2.36</cell><cell></cell><cell>-7.43</cell><cell>0.58</cell><cell>-8.33</cell><cell>6.06</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>Table 2</head><label>2</label><figDesc>Comparison with the algorithm of Tasgetiren et al. for the same computation time</figDesc><table><row><cell>n × m</cell><cell cols="2">Increase no. of iterations</cell><cell></cell><cell></cell><cell></cell><cell cols="2">Increase population size</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>N p × iter.</cell><cell>Avg</cell><cell>Std</cell><cell>Min</cell><cell>t</cell><cell>N p × iter.</cell><cell>Avg</cell><cell>Std</cell><cell>Min</cell><cell>t</cell></row><row><cell>20×15</cell><cell>40×2500</cell><cell>-6.54</cell><cell>0.84</cell><cell>-7.68</cell><cell>1.24</cell><cell>100×1000</cell><cell>-6.47</cell><cell>1.09</cell><cell>-7.93</cell><cell>1.25</cell></row><row><cell>20×20</cell><cell></cell><cell>-4.93</cell><cell>0.89</cell><cell>-6.20</cell><cell>1.53</cell><cell></cell><cell>-4.92</cell><cell>1.20</cell><cell>-6.30</cell><cell>1.54</cell></row><row><cell>30×15</cell><cell>60×2500</cell><cell>-7.22</cell><cell>1.05</cell><cell>-8.75</cell><cell>3.16</cell><cell>150×1000</cell><cell>-7.37</cell><cell>1.19</cell><cell>-9.05</cell><cell>3.29</cell></row><row><cell>30×20</cell><cell></cell><cell>-5.67</cell><cell>1.01</cell><cell>-7.44</cell><cell>3.84</cell><cell></cell><cell>-5.79</cell><cell>0.98</cell><cell>-7.56</cell><cell>3.96</cell></row><row><cell>40×15</cell><cell>80×2500</cell><cell>-7.80</cell><cell>1.02</cell><cell>-9.31</cell><cell>6.29</cell><cell>200×1000</cell><cell>-8.06</cell><cell>0.99</cell><cell>-9.74</cell><cell>6.41</cell></row><row><cell>40×20</cell><cell></cell><cell>-5.60</cell><cell>1.13</cell><cell>-7.39</cell><cell>7.45</cell><cell></cell><cell>-5.61</cell><cell>0.88</cell><cell>-6.87</cell><cell>7.58</cell></row><row><cell>50×15</cell><cell>100×2500</cell><cell>-6.47</cell><cell>0.84</cell><cell>-7.70</cell><cell>10.84</cell><cell>250×1000</cell><cell>-6.71</cell><cell>0.87</cell><cell>-7.92</cell><cell>11.07</cell></row><row><cell>50×20</cell><cell></cell><cell>-7.23</cell><cell>1.10</cell><cell>-8.81</cell><cell>12.74</cell><cell></cell><cell>-7.18</cell><cell>0.94</cell><cell>-8.43</cell><cell>12.90</cell></row><row><cell>Average</cell><cell></cell><cell>-6.40</cell><cell>1.00</cell><cell>-7.86</cell><cell>5.89</cell><cell></cell><cell>-6.44</cell><cell>1.03</cell><cell>-7.86</cell><cell>6.00</cell></row><row><cell>Table 3</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="5">Comparison with GA of Etiler et al. for single-objective flowshop</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>n × m</cell><cell></cell><cell>NEH</cell><cell></cell><cell></cell><cell>GA</cell><cell></cell><cell>PSO</cell><cell></cell><cell>t</cell><cell></cell></row><row><cell>20×5</cell><cell></cell><cell>3.30</cell><cell></cell><cell></cell><cell>1.52</cell><cell></cell><cell>1.25</cell><cell></cell><cell></cell><cell>0.99</cell></row><row><cell>20×10</cell><cell></cell><cell>4.60</cell><cell></cell><cell></cell><cell>2.81</cell><cell></cell><cell>2.17</cell><cell></cell><cell></cell><cell>1.17</cell></row><row><cell>20×20</cell><cell></cell><cell>3.81</cell><cell></cell><cell></cell><cell>2.55</cell><cell></cell><cell>2.09</cell><cell></cell><cell></cell><cell>1.24</cell></row><row><cell>50×5</cell><cell></cell><cell>0.73</cell><cell></cell><cell></cell><cell>0.63</cell><cell></cell><cell>0.47</cell><cell></cell><cell></cell><cell>13.71</cell></row><row><cell>50×10</cell><cell></cell><cell>5.07</cell><cell></cell><cell></cell><cell>3.62</cell><cell></cell><cell>3.60</cell><cell></cell><cell></cell><cell>14.42</cell></row><row><cell>50×20</cell><cell></cell><cell>6.64</cell><cell></cell><cell></cell><cell>5.36</cell><cell></cell><cell>4.84</cell><cell></cell><cell></cell><cell>16.66</cell></row><row><cell>100×5</cell><cell></cell><cell>0.53</cell><cell></cell><cell></cell><cell>0.45</cell><cell></cell><cell>0.35</cell><cell></cell><cell></cell><cell>95.65</cell></row><row><cell>100×10</cell><cell></cell><cell>2.22</cell><cell></cell><cell></cell><cell>1.56</cell><cell></cell><cell>1.78</cell><cell></cell><cell cols="2">122.42</cell></row><row><cell>100×20</cell><cell></cell><cell>5.34</cell><cell></cell><cell></cell><cell>4.90</cell><cell></cell><cell>5.13</cell><cell></cell><cell cols="2">139.28</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>Table 4</head><label>4</label><figDesc>Comparison with different algorithms for multi-objective flowshop</figDesc><table><row><cell>n × m</cell><cell>PSO</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>GA</cell><cell></cell><cell></cell><cell>DESC</cell><cell></cell><cell>ASC</cell></row><row><cell></cell><cell cols="2">Makespan Total</cell><cell></cell><cell></cell><cell>Mach.</cell><cell>t</cell><cell cols="2">Makespan Total</cell><cell>Mach.</cell><cell cols="2">Makespan Total</cell><cell>Mach.</cell><cell>Makespan Total</cell><cell>Mach.</cell></row><row><cell></cell><cell></cell><cell>flow</cell><cell></cell><cell></cell><cell>idle</cell><cell></cell><cell></cell><cell>flow</cell><cell>idle</cell><cell></cell><cell>flow</cell><cell>idle</cell><cell>flow</cell><cell>idle</cell></row><row><cell></cell><cell></cell><cell>time</cell><cell></cell><cell></cell><cell>time</cell><cell></cell><cell></cell><cell>time</cell><cell>time</cell><cell></cell><cell>time</cell><cell>time</cell><cell>time</cell><cell>time</cell></row><row><cell cols="2">10×10 0</cell><cell>2.16</cell><cell></cell><cell></cell><cell>0</cell><cell></cell><cell>0.21 0.02</cell><cell>1.43</cell><cell cols="2">0.59 0.55</cell><cell>1.49</cell><cell>3.27</cell><cell>5.78</cell><cell>0</cell><cell>11.92</cell></row><row><cell cols="2">10×20 0</cell><cell>1.21</cell><cell></cell><cell></cell><cell>0.07</cell><cell></cell><cell>0.26 0.37</cell><cell>0.27</cell><cell>0</cell><cell>1.06</cell><cell>1.23</cell><cell>0.04</cell><cell>4.47</cell><cell>0</cell><cell>4.04</cell></row><row><cell cols="2">10×30 0</cell><cell>0</cell><cell></cell><cell></cell><cell>0</cell><cell></cell><cell>0.33 0.02</cell><cell>0.01</cell><cell cols="2">0.21 1.71</cell><cell>0.83</cell><cell>0.46</cell><cell>4.16</cell><cell>0.70</cell><cell>1.85</cell></row><row><cell cols="2">30×10 0</cell><cell>2.50</cell><cell></cell><cell></cell><cell>0</cell><cell></cell><cell>3.24 1.50</cell><cell>4.97</cell><cell cols="2">9.28 0.51</cell><cell>2.00</cell><cell>9.62</cell><cell>7.74</cell><cell>0</cell><cell>23.56</cell></row><row><cell cols="2">30×20 0</cell><cell>0.94</cell><cell></cell><cell></cell><cell>0</cell><cell></cell><cell>3.55 1.23</cell><cell>1.64</cell><cell cols="2">4.17 0.88</cell><cell>0.86</cell><cell>2.00</cell><cell>7.08</cell><cell>0</cell><cell>8.86</cell></row><row><cell cols="2">30×30 0</cell><cell>0</cell><cell></cell><cell></cell><cell>0.02</cell><cell></cell><cell>3.91 1.07</cell><cell>1.44</cell><cell cols="2">2.05 0.62</cell><cell>0.37</cell><cell>0</cell><cell>6.91</cell><cell>0.89</cell><cell>5.71</cell></row><row><cell cols="2">50×10 0</cell><cell>3.12</cell><cell></cell><cell></cell><cell>0</cell><cell cols="2">12.79 1.15</cell><cell>5.91</cell><cell cols="2">12.39 0.18</cell><cell>2.56</cell><cell>9.54</cell><cell>6.97</cell><cell>0</cell><cell>32.59</cell></row><row><cell cols="2">50×20 0</cell><cell>1.72</cell><cell></cell><cell></cell><cell>0</cell><cell cols="2">13.93 0.79</cell><cell>2.91</cell><cell cols="2">8.91 0.79</cell><cell>1.18</cell><cell>3.43</cell><cell>6.40</cell><cell>0</cell><cell>10.76</cell></row><row><cell cols="2">50×30 0</cell><cell>0.63</cell><cell></cell><cell></cell><cell>0</cell><cell cols="2">15.17 0.96</cell><cell>1.62</cell><cell cols="2">5.97 1.03</cell><cell>0.57</cell><cell>1.51</cell><cell>6.33</cell><cell>0</cell><cell>6.27</cell></row><row><cell cols="11">algorithm i. The RPI of each criterion for algorithm i can be computed as</cell><cell></cell></row><row><cell></cell><cell cols="4">M i -min(M j , ∀j) min(M j , ∀j)</cell><cell>× 100,</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell cols="3">F i -min(F j , ∀j) min(F j , ∀j)</cell><cell cols="2">× 100,</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell cols="2">I i -min(I j , ∀j) min(I j , ∀j)</cell><cell cols="3">× 100.</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Table 5</head><label>5</label><figDesc>Relative performance of different algorithms for flowshop scheduling with total flow time</figDesc><table><row><cell>n × m</cell><cell>BEST (LR)</cell><cell>M-MMAS</cell><cell>PACO</cell><cell>LS</cell><cell>PSO-LS</cell><cell>t</cell></row><row><cell>20×5</cell><cell>1.34</cell><cell>0.18</cell><cell>0.43</cell><cell>0.09</cell><cell>0.04</cell><cell>0.46</cell></row><row><cell>20×10</cell><cell>1.42</cell><cell>0.04</cell><cell>0.31</cell><cell>0.29</cell><cell>0.08</cell><cell>0.93</cell></row><row><cell>20×20</cell><cell>1.20</cell><cell>0.10</cell><cell>0.17</cell><cell>0.17</cell><cell>0.04</cell><cell>1.78</cell></row><row><cell>50×5</cell><cell>0.92</cell><cell>0.50</cell><cell>0.31</cell><cell>0.55</cell><cell>0.05</cell><cell>17.35</cell></row><row><cell>50×10</cell><cell>1.58</cell><cell>0.59</cell><cell>0.33</cell><cell>1.84</cell><cell>0.20</cell><cell>31.81</cell></row><row><cell>50×20</cell><cell>1.65</cell><cell>0.34</cell><cell>0.04</cell><cell>2.01</cell><cell>0.44</cell><cell>59.01</cell></row><row><cell>100×5</cell><cell>0.39</cell><cell>0.35</cell><cell>0.46</cell><cell>1.65</cell><cell>0.00</cell><cell>210.14</cell></row><row><cell>100×10</cell><cell>0.76</cell><cell>0.35</cell><cell>0.07</cell><cell>2.40</cell><cell>0.48</cell><cell>376.30</cell></row><row><cell>100×20</cell><cell>1.55</cell><cell>0.30</cell><cell>0.07</cell><cell>2.97</cell><cell>0.99</cell><cell>615.39</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>This work is partially supported by the National Science Council, Taiwan, Republic of China, under Grant no. NSC 94-2213-E-011-034.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Particle swarm optimization</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Eberhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE international conference on neural networks</title>
		<meeting>IEEE international conference on neural networks</meeting>
		<imprint>
			<publisher>Piscataway</publisher>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="1942" to="1948" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Recent advances in particle swarm</title>
		<author>
			<persName><forename type="first">X</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Eberhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proceedings of the IEEE congress on evolutionary computation</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="90" to="97" />
			<date type="published" when="2004">2004</date>
			<pubPlace>Oregon: Portland</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Cooperative learning in neural network using particle swarm optimizers</title>
		<author>
			<persName><forename type="first">F</forename><surname>Van Den Bergh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">P</forename><surname>Engelbrecht</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">South African Computer Journal</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="84" to="90" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Swarming of intelligent particles for solving the nonlinear constrained optimization problem</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">I</forename><surname>El-Galland</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">E</forename><surname>El-Hawary</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>Sallam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Engineering Intelligent Systems for Electrical Engineering and Communications</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="155" to="163" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Particle swarm optimization algorithm for single machine total weighted tardiness problem</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Tasgetiren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sevkli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">C</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Gencyilmaz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE congress on evolutionary computation</title>
		<meeting>the IEEE congress on evolutionary computation<address><addrLine>Oregon</addrLine></address></meeting>
		<imprint>
			<publisher>Portland</publisher>
			<date type="published" when="2004">2004</date>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="1412" to="1419" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Particle swarm optimization algorithm for makespan and maximum lateness minimization in permutation flowshop sequencing problem</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Tasgetiren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">C</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sevkli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Gencyilmaz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the fourth international symposium on intelligent manufacturing systems</title>
		<meeting>the fourth international symposium on intelligent manufacturing systems<address><addrLine>Turkey</addrLine></address></meeting>
		<imprint>
			<publisher>Sakarya</publisher>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="431" to="441" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Benchmarks for shop scheduling problems</title>
		<author>
			<persName><forename type="first">E</forename><surname>Demirkol</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Mehta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Uzsoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">European Journal of Operational Research</title>
		<imprint>
			<biblScope unit="volume">109</biblScope>
			<biblScope unit="page" from="137" to="141" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A discrete binary version of the particle swarm algorithm</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Eberhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the world multiconference on systemics, cybernetics and informatics</title>
		<meeting>the world multiconference on systemics, cybernetics and informatics</meeting>
		<imprint>
			<publisher>Piscatawary</publisher>
			<date type="published" when="1997">1997</date>
			<biblScope unit="page" from="4104" to="4109" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A genetic algorithm for flow shop scheduling problems</title>
		<author>
			<persName><forename type="first">O</forename><surname>Etiler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Toklu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Atak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Wilson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the Operational Research Society</title>
		<imprint>
			<biblScope unit="volume">55</biblScope>
			<biblScope unit="page" from="830" to="835" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Benchmarks for basic scheduling problems</title>
		<author>
			<persName><forename type="first">E</forename><surname>Taillard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">European Journal of Operational Research</title>
		<imprint>
			<biblScope unit="volume">64</biblScope>
			<biblScope unit="page" from="278" to="285" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Scheduling: theory, algorithm, and system. 2nd ed</title>
		<author>
			<persName><forename type="first">M</forename><surname>Pinedo</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
			<publisher>Prentice-Hall</publisher>
			<pubPlace>Englewood Cliffs, NJ</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Scheduling in flowshop and cellular manufacturing systems with multiple objectives-a genetic algorithmic approach</title>
		<author>
			<persName><forename type="first">J</forename><surname>Sridhar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Rajendran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Production Planning and Control</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="374" to="382" />
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Ant-colony algorithms for permutation flowshop scheduling to minimize makespan/total flowtime of jobs</title>
		<author>
			<persName><forename type="first">C</forename><surname>Rajendran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Ziegler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">European Journal of Operational Research</title>
		<imprint>
			<biblScope unit="volume">155</biblScope>
			<biblScope unit="page" from="426" to="438" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Swarm intelligence</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Eberhart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Shi</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001">2001</date>
			<publisher>Morgan Kaufmann</publisher>
			<pubPlace>San Francisco, CA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">A modified particle swarm optimizer</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Eberhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE congress on evolutionary computation</title>
		<meeting>the IEEE congress on evolutionary computation</meeting>
		<imprint>
			<publisher>Piscataway</publisher>
			<date type="published" when="1998">1998</date>
			<biblScope unit="page" from="69" to="173" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A new optimizer using particle swarm theory</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Eberhart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the sixth international symposium on micromachine and human science</title>
		<meeting>the sixth international symposium on micromachine and human science<address><addrLine>Japan: Nagoya</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="39" to="43" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Emerging optimization techniques in production planning and control</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">C</forename><surname>Onwubolu</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
			<publisher>Imperial College Press</publisher>
			<pubPlace>London</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Ant colony optimization for the total weighted tardiness problem</title>
		<author>
			<persName><forename type="first">Den</forename><surname>Besten</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stützle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Dorigo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceeding PPSN VI, sixth international conference parallel problem solving from nature</title>
		<meeting>eeding PPSN VI, sixth international conference parallel problem solving from nature<address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="611" to="620" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A heuristic algorithm for the n job, m machine sequencing problem</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">G</forename><surname>Campbell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Dudek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">L</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Management Science</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="630" to="637" />
			<date type="published" when="1970">1970</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">An evaluation of flow shop sequencing heuristics</title>
		<author>
			<persName><forename type="first">D</forename><surname>Dannenbring</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Management Science</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="1174" to="1182" />
			<date type="published" when="1977">1977</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">A heuristic algorithm for the m-machine, n-job flowshop sequencing problem</title>
		<author>
			<persName><forename type="first">M</forename><surname>Nawaz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">E</forename><surname>Enscore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Ham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">OMEGA</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="91" to="95" />
			<date type="published" when="1983">1983</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">An efficient heuristic approach to the scheduling of jobs in a flowshop</title>
		<author>
			<persName><forename type="first">C</forename><surname>Rajendran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Chaudhuri</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">European Journal of Operational Research</title>
		<imprint>
			<biblScope unit="volume">61</biblScope>
			<biblScope unit="page" from="318" to="325" />
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Efficient heuristics for flowshop sequencing with the objectives of makespan and flowtime minimisation</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Framinan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Leisten</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ruiz-Usano</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">European Journal of Operational Research</title>
		<imprint>
			<biblScope unit="volume">141</biblScope>
			<biblScope unit="page" from="559" to="569" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Constructive and composite heuristic solutions to the P C i scheduling problem</title>
		<author>
			<persName><forename type="first">J</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">R</forename><surname>Reeves</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">European Journal of Operational Research</title>
		<imprint>
			<biblScope unit="volume">132</biblScope>
			<biblScope unit="page" from="439" to="452" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
