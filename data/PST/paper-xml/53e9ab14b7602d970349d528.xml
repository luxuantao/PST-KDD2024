<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A UML profile for multidimensional modeling in data warehouses</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2005-12-27">27 December 2005</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Sergio</forename><surname>Luja ´n-Mora</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Software and Computing Systems</orgName>
								<orgName type="institution">University of Alicante</orgName>
								<address>
									<postCode>E-03080</postCode>
									<settlement>Alicante</settlement>
									<country key="ES">Spain</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Juan</forename><surname>Trujillo</surname></persName>
							<email>jtrujillo@dlsi.ua.es</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Software and Computing Systems</orgName>
								<orgName type="institution">University of Alicante</orgName>
								<address>
									<postCode>E-03080</postCode>
									<settlement>Alicante</settlement>
									<country key="ES">Spain</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Il-Yeol</forename><surname>Song</surname></persName>
							<email>songiy@drexel.edu</email>
							<affiliation key="aff1">
								<orgName type="department">College of Information Science and Technology</orgName>
								<orgName type="institution">Drexel University</orgName>
								<address>
									<addrLine>3141 Chestnut Street</addrLine>
									<postCode>101-4</postCode>
									<settlement>Philadelphia</settlement>
									<region>PA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A UML profile for multidimensional modeling in data warehouses</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2005-12-27">27 December 2005</date>
						</imprint>
					</monogr>
					<idno type="MD5">32AA19BD22F5732245660D8ECCB315AF</idno>
					<idno type="DOI">10.1016/j.datak.2005.11.004</idno>
					<note type="submission">Received 2 June 2004; accepted 18 November 2005</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T12:34+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>UML</term>
					<term>Multidimensional modeling</term>
					<term>Data warehouses</term>
					<term>UML extension</term>
					<term>UML profile</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The multidimensional (MD) modeling, which is the foundation of data warehouses (DWs), MD databases, and On-Line Analytical Processing (OLAP) applications, is based on several properties different from those in traditional database modeling. In the past few years, there have been some proposals, providing their own formal and graphical notations, for representing the main MD properties at the conceptual level. However, unfortunately none of them has been accepted as a standard for conceptual MD modeling.</p><p>In this paper, we present an extension of the Unified Modeling Language (UML) using a UML profile. This profile is defined by a set of stereotypes, constraints and tagged values to elegantly represent main MD properties at the conceptual level. We make use of the Object Constraint Language (OCL) to specify the constraints attached to the defined stereotypes, thereby avoiding an arbitrary use of these stereotypes. We have based our proposal in UML for two main reasons: (i) UML is a well known standard modeling language known by most database designers, thereby designers can avoid learning a new notation, and (ii) UML can be easily extended so that it can be tailored for a specific domain with concrete peculiarities such as the multidimensional modeling for data warehouses. Moreover, our proposal is Model Driven Architecture (MDA) compliant and we use the Query View Transformation (QVT) approach for an automatic generation of the implementation in a target platform. Throughout the paper, we will describe how to easily accomplish the MD modeling of DWs at the conceptual level. Finally, we show how to use our extension in Rational Rose for MD modeling.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Data warehouses (DW), Multidimensional (MD) databases, and On-Line Analytical Processing (OLAP) applications provide companies with many years of historical information for decision making process. It is 0169-023X/$ -see front matter Ó 2005 Elsevier B.V. All rights reserved. doi:10.1016/j.datak.2005.11.004 widely accepted that these systems are based on multidimensional (MD) modeling. MD modeling structures information into facts and dimensions. A fact contains interesting measures of a business process (sales, deliveries, etc.), whereas a dimension (product, customer, time, etc.) represents the context for analyzing a fact. The benefit of using this MD modeling is twofold. On one hand, the MD model is close to the way of thinking of data analyzers and, therefore, helps users understand data better. On the other hand, the MD model supports performance improvement as its simple structure allows us to predict end users' intentions. <ref type="foot" target="#foot_0">1</ref>Some approaches have been proposed lately (presented in Section 3) to accomplish the conceptual design of these systems. Unfortunately, none of them has been accepted as a standard for DW conceptual modeling. These proposals try to represent main MD properties at the conceptual level with special emphasis on MD data structures (i.e. facts and dimensions). However, from our point of view, none of them considers all the main properties of MD systems at the conceptual level. Furthermore, these approaches provide their own graphical notations, which forces designers to learn a new specific model together with its corresponding MD modeling notation.</p><p>On the other hand, the Unified Modeling Language (UML) <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b25">28]</ref> has been widely accepted as the standard Object-Oriented (OO) modeling language for modeling various aspects of software systems. Therefore, any approach using the UML will minimize the effort of developers in learning new notations or methodologies for every subsystem to be modeled. Another outstanding feature of the UML is that it is an extensible language in the sense that it provides mechanisms (stereotypes, tagged values, and constraints) to introduce new elements for specific domains if necessary, such as web applications, database applications, business modeling, software development processes, etc. <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b24">26]</ref>. A collection of enhancements that extend an existing diagram type to support a new purpose is called a profile. On the other hand, UML is highly scalable as a new tailored UML profile can further be enriched by adding new properties to adapt it to new situations. Furthermore, the UML follows the OO paradigm, which has been proved to be semantically richer than other paradigms for MD modeling <ref type="bibr" target="#b2">[3]</ref>.</p><p>Following these considerations, we have previously proposed in <ref type="bibr" target="#b34">[37]</ref> an OO conceptual MD modeling approach, based on the UML, for a powerful conceptual modeling of MD systems. This proposal considers major relevant MD properties at the conceptual level in an elegant and easy way. Furthermore, in <ref type="bibr" target="#b23">[25]</ref> we applied the grouping mechanism called package provided by the UML. In this way, when modeling complex and large DW systems, we are not restricted to use flat UML class diagrams. Moreover, in <ref type="bibr" target="#b22">[24]</ref> we presented a UML profile for MD modeling based on our previously proposed approaches.</p><p>In this paper, we present a UML profile for a coherent and unified conceptual MD modeling that joins our previous approaches presented in separate works. This profile expresses for each measure its MD context in terms of relevant dimensions and their hierarchies and allows us to easily and elegantly consider main MD properties at the conceptual level, such as the many-to-many relationships between facts and dimensions, degenerate dimensions and facts, multiple and alternative path classification hierarchies, and non-strict and complete hierarchies. Our extension uses the Object Constraint Language (OCL) <ref type="bibr" target="#b25">[28,</ref><ref type="bibr" target="#b36">39]</ref> for expressing well-formedness rules of the new defined elements, thereby avoiding an arbitrary use of this extension. Moreover, we program this extension in a well known model-driven development tool such as Rational Rose <ref type="bibr" target="#b29">[32]</ref> to show its applicability.</p><p>Furthermore, in this paper we have enriched our previous works with new properties to obtain an improved proposal. The major important new issues considered in this profile are as follows:</p><p>• Roles and cycles: we explicitly specify roles on the associations to define classification hierarchies along dimensions to help us to avoid the existence of cycles. We set the constraint DAG attached to a dimension to make sure that no cycles were defined.</p><p>• Dimensions: we have re-defined the concept of dimension to make it more understandable and readable by end users. In previous versions, the notion of dimension was defined as a dimension class in which attributes conforming the less classification hierarchy level had to be defined in it. However, we consider it is more intuitive to have a class just to define the dimension to which a fact is related, and then, the required classification hierarchy levels are defined from the dimension. • Different roles of one dimension: we can use the same dimension in different roles related to one fact by connecting it through different associations to the same fact. By using different roles, we make the specification of different roles more technical and formal, thereby facilitating further design phases such as an automatic generation of the corresponding implementation or the definition of different views of cubes for different users. • Association classes and degenerate facts: we can specify degenerate facts in many-to-many relationships by using association classes provided by the UML. In previous versions, we could specify these many-to-many relationships by means of the cardinality between classes. However, we could not explicitly define attributes for these relationships, which is frequently occurring for many many-to-many relationships. Therefore, the formalization of this fact provides a significant advantage compared to the previous version. • Navigability: we can explicitly define the navigability of an association in a classification hierarchy to define a roll-up or drill-down (roll-up is the presentation of data at a higher level of detail, whereas drill-down is the presentation of data at a lower level of detail) path by default when there exists different paths.</p><p>• Implementation: we intend to automatically generate the corresponding implementation of a MD model. To accomplish this goal, we use the Query View Transformation (QVT) approach for expressing model transformations. However, with QVT we are able to specify complex one-to-many transformations from a conceptual model into several logical models by composing simpler transformations using composition functions.</p><p>In summary, with the old and new properties, we intend to achieve a proposal with the following properties:</p><p>• Accurate: a profile that allows us to represent all major important features of MD modeling at the conceptual level.</p><p>• No redundancy: we allow to import a previously defined element in our model whenever possible so that we avoid having different definitions and properties for the same concept throughout a model. • Consistent: the new elements we define in our profile (tagged values, constraints and stereotypes) are mutually exclusive and complete. With this we mean that the union of our new element covers the entire domain space of the multidimensional modeling for data warehouses. • Simple: as simple as possible. We limit our graphical notation to a minimal subset of UML elements that allows us to correctly describe main MD properties at the conceptual level. • Understandable: we attempt to make a proposal understandable for the intended audience (both DW designers and end users). When we build complex and huge DW systems, it is highly important to have a modeling approach that can successfully communicate with different actors who take part in the DW design. We provide this feature by using the UML grouping mechanism called package, thereby allowing us to define three different levels of abstraction and to avoid the use of flat diagrams when modeling large DW systems. In case that the DW is not too complex, the designer can merge the three levels into only one, and therefore, use the classical flat diagram approach.</p><p>The remainder of this paper is structured as follows: Section 2 introduces the main properties and aspects that a conceptual approach for MD modeling should take into consideration. Section 7 summarizes the most relevant conceptual approaches proposed so far by the research community and provides a comparison framework between them. Section 3 summarizes the different UML Extensibility Mechanisms that we can use to adapt the UML to a particular domain, context or model. Section 4 describes how we make use of the UML to consider all major properties of MD modeling at the conceptual level. Appendix A formally defines the new UML extension (profile) we propose for MD modeling. Section 5 describes the transformation of MD models based on Query/View/Transformation (QVT) approach. Section 6 shows how to use our profile for MD modeling in Rational Rose. Finally, Section 8 presents the main conclusions and introduces our immediate future works.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Multidimensional modeling</head><p>In MD modeling, information is structured into facts and dimensions. <ref type="foot" target="#foot_1">2</ref> A fact is an item of interest for an enterprise, and is described through a set of attributes called measures or fact attributes (atomic or derived), which are contained in cells or points in the data cube. This set of measures is based on a set of dimensions that determine the granularity adopted for representing facts. On the other hand, dimensions provide the context in which facts are to be analyzed. Moreover, dimensions are also characterized by attributes, which are usually called dimension attributes.</p><p>Let us introduce a DW modeling example inspired by a case study presented by Giovinazzo in <ref type="bibr" target="#b12">[13]</ref>, which will be used throughout the rest of the paper. This example relates to a company that comprises different dealerships that sell automobiles (cars and vans) across several states. The DW contains three data marts, <ref type="foot" target="#foot_2">3</ref> such as automobile sales, part sales and service works (they are separated because they are going to be used by different end users). However, these data marts share some common dimensions <ref type="foot" target="#foot_3">4</ref> such as dealership or time, although they also have their own particular dimensions, such as salesperson or service:</p><p>• Automobile sales (AS): considers the sales of automobiles.</p><p>• Part sales (PS): represents the sales of parts of automobiles such as spare wheels or light bulbs.</p><p>• Service works (SW): considers the services realized by dealerships such as change of lubricating oil or brake oil.</p><p>Every one of these models has corresponding fact which contains the specific measures to be analyzed. Furthermore, they consider the following dimensions to analyze measures: dealership, time, customer, salesperson and auto for the AS; dealership, time, service, mechanic and parts for the PS; and dealership, time, service, mechanic and parts for the SW. On the left hand side of Fig. <ref type="figure" target="#fig_0">1</ref>, we can observe a data cube typically used for representing a MD model. In this particular case, we have defined a cube for the AS for analyzing measures along the auto, customer and time dimensions.</p><p>We note that many-to-one relationships exist between the fact and every particular dimension, and thus facts are usually considered to have many-to-many relationships between any of two dimensions. In the previous AS, an autosales fact is related to only one auto that is sold by one dealership and purchased by just one customer at one time.</p><p>Nevertheless, there are some cases in which many-to-many relationships may exist between the fact and some particular dimensions. For example, the autosales fact of AS is considered to have a particular manyto-many relationship to the salesperson dimension, as more than one salesperson may have participated in selling one auto (although every auto is still purchased by only one customer in just one dealership store and at one time).</p><p>When having a many-to-many relationship with a particular dimension as previously-described, we usually need to describe specific attributes to provide further features for every instance combination in this particular relationship. In doing so, the measures provided are usually called degenerated facts <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b12">13</ref>]. In the previous example, we may be interested in recording the specific commission that a salesperson obtains for every particular auto sales he/she participates.</p><p>There are some cases in which we do not consider a dimension explicitly because we believe that most of its properties are already represented throughout other elements (facts and dimensions) in our MD model. However, we still believe that we need some attribute or property in the fact to uniquely identify fact instances. When this occurs, we usually call these dimensions as degenerated dimensions <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b12">13]</ref>. Therefore, a degenerate dimension is one whose identifier exists only in a fact, but which is not materialized as an actual dimension. This provides other fact features in addition to the measures for analysis. In our example, instead of considering the autosales, we could had represented the bill of an autosales and consider the bill and bill line numbers as other bill features (while not having a bill dimension materialized).</p><p>With reference to measures, the concept of additivity or summaribility <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b17">18,</ref><ref type="bibr" target="#b34">37,</ref><ref type="bibr" target="#b35">38]</ref> on measures along dimensions is crucial for MD data modeling. A measure is additive along a dimension if the SUM operator can be used to aggregate attribute values along all hierarchies defined on that dimension. The aggregation of some fact attributes (roll-up in OLAP terminology), however, might not be semantically meaningful along all dimensions. For example, all measures that record a static level, such as inventory levels, financial account balances or temperatures, are not inherently additive along the time dimension. In our particular warehouse example, the measure quantity from that records the quantity of a specific auto in a sale at a given time is not additive along the salesperson dimension. However, other aggregation operators (e.g. MAX, MIN and AVG) could still be used along the same salesperson dimension. Moreover, quantity can be additive along the auto dimension. Thus, a measure such as quantity is called semiadditive since it is additive along one dimension, but non-additive along another dimension.</p><p>Regarding dimensions, the classification hierarchies defined on certain dimension attributes are crucial because the subsequent data analysis will be addressed by these classification hierarchies. A dimension attribute may also be aggregated (related) to more than one hierarchy, and therefore, multiple classification hierarchies and alternative path hierarchies are also relevant. For this reason, a common way of representing and considering dimensions with their classification hierarchies is by means of Directed Acyclic Graphs (DAG).</p><p>On the right hand side of Fig. <ref type="figure" target="#fig_0">1</ref>, we can observe different classification hierarchies defined on the auto, customer and time dimensions from the AS. 5 On the auto dimension, we have considered a multiple classification hierarchy to be able to aggregate data values along two different hierarchy paths: (i) auto, model, manufacturer and (ii) auto, type. There may exist other attributes that are not used for aggregating purposes and provide features for other dimension attributes (e.g. auto description). On the customer dimension, we have defined an alternative path classification hierarchy with two different paths that converge into the same hierarchy level: (i) customer, city, state and (ii) customer, region and state. Finally, we have also defined another multiple classification hierarchy with the following paths on the time dimension: (i) time, month, semester, year and (ii) time and season.</p><p>Nevertheless, classification hierarchies are not so simple in most cases. The concepts of strictness and completeness are important, not only for conceptual purposes, but also for further design steps of MD modeling <ref type="bibr" target="#b35">[38]</ref>. ''Strictness'' means that an object of a lower level of a hierarchy belongs to only one of a higher level, e.g. 5 These classification hierarchies are different from those specifically presented by Giovinnazo in <ref type="bibr" target="#b12">[13]</ref> as ours will allow us to consider more peculiarities. a city is related to only one state. ''Completeness'' means that all members belong to one higher-class object and that object consists of those members only. For example, suppose we say that the classification hierarchy between the state and city levels is ''complete''. In this case, a state is formed by all the cities recorded and all the cities that form the state are recorded.</p><p>OLAP scenarios sometimes become very large as the number of dimensions increases significantly, and therefore, this fact may lead to extremely sparse dimensions and data cubes. In this way, there are attributes that are normally valid for all elements within a dimension while others are only valid for a subset of elements (also known as the categorization of dimensions <ref type="bibr" target="#b18">[20,</ref><ref type="bibr" target="#b35">38]</ref>). For example, attributes number of passengers and number of airbags would only be valid for cars and will be ''null'' for trucks. Thus, a proper MD data model should be able to consider attributes only when necessary, depending on the categorization of dimensions.</p><p>Furthermore, let us suppose that apart from a high number of dimensions (e.g. 20) with their corresponding hierarchies, we have a considerable number of facts (e.g. 8) sharing dimensions and classification hierarchies. This would lead us to a very complex design, thereby increasing the difficulty in reading the modeled system. Therefore, a MD conceptual model should also provide techniques to avoid flat diagrams, allowing us to group dimensions and facts under some criteria to simplify the final model.</p><p>Once the structure of the MD model has been defined, end users usually identify a set of initial user requirements as a starting point for the subsequent data analysis phase. From these initial requirements, users can apply a set of operations (usually called OLAP operations <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b17">18]</ref>) to the MD view of data for further data analysis. These OLAP operations are usually as follows: roll-up (increasing the level of aggregation) and drilldown (decreasing the level of aggregation) along one or more classification hierarchies, slice-dice (selection and projection) and pivoting (re-orienting the MD view of data which also allows us to exchange dimensions for facts; i.e., symmetric treatment of facts and dimensions).</p><p>Let us now conclude this section by providing a brief reference to the star schema proposed by Kimball <ref type="bibr" target="#b17">[18]</ref> as this star schema (and its variants fact constellations and snowflake) is widely known and used for implementing a data warehouse in relational systems. Basically, the star schema represents each dimension as a dimension table and each fact as a fact table with a many-to-many relationship with all the dimensions. Fig. <ref type="figure">2</ref> shows an example of a star schema. In this particular schema, the fact is the name of the middle box, Auto sales fact table. Measures are the non-foreign keys in the Auto sales fact table. Dimensions (Time, Customer, Auto and Dealership) are each of the boxes connected to the fact table in a one-to-many relationship. Each dimension contains relevant attributes for analyzing the context of measures. As the star schema is at the logical level, its main purpose is not to represent main multidimensional properties such as classification hierarchies and their different types as above-mentioned or the additivity of measures. Fig. <ref type="figure">2</ref>. An example of the star schema suggested by Kimball <ref type="bibr" target="#b17">[18]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">UML extensibility mechanism</head><p>The OMG proposes two mechanisms to extend UML <ref type="bibr" target="#b25">[28]</ref>: (i) the ''heavyweight extension mechanism'' and (ii) the ''lightweight extension mechanism''. A heavyweight extension mechanism allows us to adapt the UML semantics by extending the standard UML metamodel. In contrast, a lightweight extension mechanism allows us to adapt the UML semantics without changing the UML metamodel. This latter extension mechanism is supported by the UML Extensibility Mechanism package, which is the subpackage from the UML metamodel that specifies how particular UML model elements are customized and extended with new semantics by using stereotypes, tagged values, and constraints. A coherent set of such extensions, defined for specific purposes, constitutes a UML profile. For example, <ref type="bibr" target="#b25">[28]</ref> includes a standard profile for modeling software development processes and another one for business modeling.</p><p>A UML extension defined using a profile must be strictly additive to the standard UML semantics. This means that such extension must not conflict with or contradict the standard semantics. Therefore, there are restrictions on how a profile can extend the UML metamodel <ref type="bibr" target="#b25">[28]</ref>.</p><p>A stereotype is a model element that defines additional values (based on tagged values), additional constraints, and optionally a new graphical representation (an icon). A stereotype allows us to attach a new semantic meaning to a model element. A stereotype is either represented as a string between a pair of guillemets ( ) or rendered as a new icon. In Fig. <ref type="figure" target="#fig_1">3</ref>, we show the different possible representations of a stereotype: (i) icon, in which the stereotype is represented with the new defined icon, (ii) decoration, where the icon is placed in the upper right hand side of the corresponding usual UML icon, (iii) label, in which the stereotype name is shown between a pair of guillemets ( ), and (iv) none, where the new stereotype is represented by the normal UML element for the corresponding stereotype type and no external evidence of the stereotype is shown.</p><p>A tagged value <ref type="foot" target="#foot_5">6</ref> specifies a new kind of property that may be attached to a model element. A tagged value is rendered as a string enclosed by a pair of braces ({ }) and placed below the name of another element. A tagged value has the form name = value where name is the name of the tagged value and value is an arbitrary string that denotes its value.</p><p>A constraint can be attached to any model element to refine its semantics. As it is stated in <ref type="bibr" target="#b36">[39]</ref>, ''A constraint is a restriction on one or more values of (part of) an object-oriented model or system''. In the UML, a constraint is rendered as a string between a pair of braces ({ }) and placed near the associated model element. A constraint on a stereotype is interpreted as a constraint on all types to which the stereotype is applied. A constraint can be defined by means of an informal explanation in Natural Language and/or by means of OCL <ref type="bibr" target="#b25">[28,</ref><ref type="bibr" target="#b36">39]</ref> expressions. The OCL is a declarative language that allows software developers to write constraints over object models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Object-oriented multidimensional modeling</head><p>Throughout this section, we will use a running example to illustrate the basics and the applicability of our OO MD approach. We use the same example presented in Section 2 and inspired by a case study from <ref type="bibr" target="#b12">[13]</ref>. As our proposal addresses the DW design at a conceptual level, some implementation issues such as primary and foreign keys or data types are not our first priority. Therefore, the goal of our proposal is the representation of the main structural aspects of MD modeling at the conceptual level.</p><p>In our approach, the main structural properties of MD models are specified by means of a UML class diagram in which the information is clearly separated into facts and dimensions. The main features considered are the many-to-many relationships between facts and dimensions, degenerate facts and dimensions, multiple and alternative path classification hierarchies, and non-strict and complete hierarchies. Our approach proposes the use of UML packages in order to group classes together into higher level units creating different levels of abstraction, and therefore, simplifying the final model. In this way, when modeling complex and large DW systems, the designer is not restricted to use flat UML class diagrams.</p><p>Our proposal is formally defined as a UML extension by means of a UML profile. Although we provide the complete formal definition of our extension in the next section, we introduce the main stereotypes and some tagged values in this section (highlighted in the text using a SMALL CAPS font). In a diagram, UML allows us to represent a stereotype in four different ways. In Fig. <ref type="figure" target="#fig_1">3</ref>, we show four possible representations of a class with the FACT stereotype (one of the stereotypes we propose): icon (the stereotype icon is displayed), decoration (the stereotype decoration is displayed inside the element), label (the stereotype name is displayed and appears inside guillemets), and none (the stereotype is not indicated).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">Different levels of detail</head><p>Based on our experience in real-world cases, we have developed a set of design guidelines for using UML packages<ref type="foot" target="#foot_6">7</ref> in MD modeling. In UML, a package defines a namespace, so that two distinct elements contained in two distinct packages may have the same name. We summarize all the design guidelines in Table <ref type="table" target="#tab_0">1</ref>.</p><p>Guideline 0a is the foundation of the rest of the guidelines and summarizes our overall approach. This guideline closely resembles how data analyzers understand MD modeling. We have divided the design process into three levels. In Fig. <ref type="figure">4</ref>, we show a summary of our proposal by showing the main issues we define in each level and in Table <ref type="table" target="#tab_0">1</ref> we indicate in which level each guideline is applied. The icons we use in levels one or two for packages are the none representation. The different levels show how one package can be further exploded by defining their corresponding elements into the next level as we describe as follows:</p><p>Level 1: Model definition. A package represents a star schema <ref type="foot" target="#foot_7">8</ref> of a conceptual MD model. A dependency between two packages at this level indicates that the star schemas share at least one dimension, allowing us to consider conformed dimensions. Level 2: Star schema definition. A package represents a fact or a dimension of a star schema. A dependency between two dimension packages at this level indicates that the packages share at least one level of a dimension hierarchy. Level 3: Dimension/fact definition. A package is exploded into a set of classes that represent the hierarchy levels defined in a dimension package, or the whole star schema in the case of the fact package.</p><p>The MD model is designed in a top-down fashion by further decomposing a package. We have limited our proposal to three levels because ''deep hierarchies tend to be difficult to understand, since each level carries its own meanings'' <ref type="bibr" target="#b7">[8]</ref>.</p><p>Guidelines 2b and 2c make sure that cross-package dependencies result only in acyclic graphs <ref type="foot" target="#foot_8">9</ref> in order to keep things simple. Circular dependencies may be reduced by</p><p>• Splitting one of the questionable packages into two smaller packages.</p><p>• Introducing a third intermediate package (try to factor the common elements out into a third package).</p><p>• Merging the questionable packages.</p><p>For example, in Fig. <ref type="figure" target="#fig_4">5</ref>(a) the two STARPACKAGEs (stereotyped packages represented by means of icons) form a cycle that has been broken in Fig. <ref type="figure" target="#fig_4">5(b</ref>) by the introduction of a third STARPACKAGE that contains the shared dimensions; this new package, that we call utility package, does not contain a FACTPACKAGE, just the definition of the common elements to both packages. In Fig. <ref type="figure" target="#fig_4">5(c</ref>) we show an alternative solution: the two STARPACKAGEs have been merged into a single one called StarPackage1-2, eliminating the shared elements, and therefore, avoiding repeating already-defined elements.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.1.">Applying package design guidelines</head><p>Fig. <ref type="figure" target="#fig_3">6</ref> shows the first level of a MD model: on the left hand side, the packages are displayed with the common UML presentation and the corresponding stereotype icon is placed in the upper right corner of the package symbol; on the right hand side, the entire package symbol has been ''collapsed'' into the corresponding Level Guideline 0a At the end of the design process, the MD model will be divided into three levels: model definition, star schema definition, and dimension/fact definition 0b</p><p>Before starting the modeling, define facts and dimensions and remark the shared dimensions and dimensions that share some hierarchy levels stereotype icon. Through the rest of the paper, we have adopted the second form of representing the stereotypes, because we consider it more expressive and symbolic, as well as it is also more understandable for the end users.</p><p>In the example shown in Fig. <ref type="figure" target="#fig_3">6</ref>, the first level is formed by three STARPACKAGEs that represent the different data marts that form the DW (G.1). A dashed arrow from one package to another one denotes a dependency between packages, i.e., the packages have some dimensions in common (G.2a). The direction of the dependency indicates that the common dimensions shared by the two packages were first defined in the package pointed to by the arrow (to start with, we have to choose a STARPACKAGE to define the dimensions, and then, the other STARPACKAGEs can use them with no need to define them again). If the common dimensions had been first defined in another package, the direction of the arrow would have been different. In any case, it is highly recommended to group together the definition of the common dimensions in order to reduce the number of dependencies (G.2b) and also to avoid circular dependencies (G.2c).</p><p>At any level of our proposal, the DW designer can use UML notes to add more information, remark some characteristic, clarify some ambiguous situation, or describe some concept in end users' terms. For example, in Fig. <ref type="figure" target="#fig_3">6</ref>, we have used a UML note to remark the content of a package.</p><p>A package that represents a star schema is shown as a simple icon with names. The content of a package can be dynamically accessed by ''zooming-in'' to a detailed view. For example, Fig. <ref type="figure" target="#fig_5">7</ref> shows the content of the package StarPackage1 (level 2). The package FactPackage1 is represented in the middle of Fig. <ref type="figure" target="#fig_5">7</ref>, while the different dimension packages are placed around the fact package (G.3). As seen in Fig. <ref type="figure" target="#fig_5">7</ref>, a dependency is  drawn from the FACTPACKAGE to each one of the DIMENSIONPACKAGEs, because the FACTPACKAGE comprises the whole definition of the star schema, and therefore, uses the definitions of dimensions related to the fact (G.4a). At level 2, it is possible to create a dependency from a FACTPACKAGE to a DIMENSIONPACKAGE or between DIMENSIONPACKAGEs, but we do not allow a dependency from a DIMENSIONPACKAGE to a FACTPACK-AGE, since it is not semantically correct in our proposal (G.4b).</p><p>Fig. <ref type="figure" target="#fig_6">8</ref> shows the content of the package StarPackage3 (level 2). The package FactPackage3 is placed in the middle of Fig. <ref type="figure" target="#fig_6">8</ref> and the dimension packages are placed around the fact package in a star fashion. The package DimensionPackage1.1 has been previously defined in the StarPackage1 (Fig. <ref type="figure" target="#fig_5">7</ref>), and DimensionPackage2.1 has been previously defined in the StarPackage2 (not shown in this paper), so all of them are imported in this package (G.5). Our approach does not forbid to define another dimension with or without the same name or properties in different STARPACKAGEs. However, we highly recommend not to do it as we believe that this situation can lead us to a confusing or misleading diagram. Therefore, the name of the STARPACKAGEs where they have been previously defined appears below the package name (from StarPackage1 and from StarPackage2 respectively). In our proposal, it is possible to import packages defined in different STARPACKAGEs. On the other  hand, DimensionPackage3.1 has been defined in the current package, therefore, it does not show a package name.</p><p>At level 2, a dependency between DIMENSIONPACKAGEs indicates that they share some hierarchy levels (G.6). For example, in Fig. <ref type="figure" target="#fig_6">8</ref>, a dependency between DimensionPackage3.1 and DimensionPackage1.1 is represented because there is a shared hierarchy.</p><p>The benefit of the UML importing mechanism is twofold. On one hand, the DW designer only needs to define the different MD elements once, and therefore, they can be used anywhere in the model. On the other hand, as the MD elements are defined only once, any possibility of duplication and ambiguity is removed.</p><p>The content of the DIMENSIONPACKAGE and FACTPACKAGE is represented at level 3. The diagrams at this level are only comprised of classes and associations among them. For example, Fig. <ref type="figure" target="#fig_22">23</ref> shows the content of the package Customer dimension (level 3), that contains the definition of the DIMENSION class (Customer) and the different hierarchy levels (Customer personal data, City, Region, and State) that are represented by BASE classes (G.7). The hierarchy of a dimension defines how the different OLAP operations (roll-up, drill-down, etc.) can be applied <ref type="bibr" target="#b17">[18]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.2.">Advantages of multi-fact schemas</head><p>Our approach allows DW designers to define a MD model that comprises multiple facts (multiple STARPACKAGEs) linked between them by shared dimensions. This feature, commonly known as fact constellation, provides the structure to allow the end user to traverse the schema to perform an analysis known as drillacross. Moreover, keeping common dimensions will facilitate the future implementation of the MD model, e.g., in the case of a DW, the loading and refreshment processes will be simpler.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">Facts and dimensions</head><p>Facts and dimensions are represented by FACT and DIMENSION classes, respectively. Then, FACT classes are specified as composed classes by means of aggregation relationships of n DIMENSION classes, represented by a hollow diamond attached to the end of the relationship next to the FACT class. The flexibility of the aggregation in the UML allows us to represent many-to-many relationships between FACTs and particular DIMENSIONs by indicating the 1..* cardinality at the end of the aggregation near the DIMENSION.</p><p>In our example shown in Fig. <ref type="figure" target="#fig_7">9</ref>, we can see how the FACT class Fact1 has a many-to-one relationship with Dimension1.1, Dimension1.2 and Dimension1.3, but a many-to-many relationship with Dimension1.4. This level may become very complex because the dimensions may be very complex and of a considerable size due to a high number of dimension levels. However, the DW designer only has to import them from the corresponding DIMENSIONPACKAGEs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.">Dimensions and classification hierarchy levels</head><p>DIMENSION classes are composed of classification hierarchy levels; every classification hierarchy level is specified by a class called BASE class. An association (represented by a stereotype called ROLLS-UPTO) between BASE classes specifies the relationship between two levels of a classification hierarchy. The only prerequisite is that these classes must define a Directed Acyclic Graph (DAG) rooted in the DIMENSION class. The DAG structure can represent both alternative path and multiple classification hierarchies. Following Husemann's definitions <ref type="bibr" target="#b14">[15]</ref>, a DIMENSION contains a unique first hierarchy (or dimension) level called terminal dimension level. A roll-up path (or aggregation path in <ref type="bibr" target="#b14">[15]</ref>) is a subsequence of dimension levels, which starts in a terminal dimension level (lower detail level) and ends in an implicit dimension level (not graphically represented) that represents all the dimension levels.</p><p>We use roles to represent the way the two classes see each other in a ROLLS-UPTO association: role R represents the direction in which the hierarchy rolls-up, whereas role D represents the direction in which the hierarchy drills-down. Moreover, we use roles to detect and avoid cycles in a classification hierarchy, and therefore, help us to achieve the DAG condition. For example, on the left hand side of Fig. <ref type="figure" target="#fig_8">10</ref>, a classification hierarchy composed of three BASE classes is represented. On the right hand side of Fig. <ref type="figure" target="#fig_8">10</ref>, a graph that symbolizes the classification hierarchy is shown and the direction of the arrows is based on the roles of the ROLLS-UPTO associations: from role D to role R (in the direction of rolling-up). As we can see in this figure, this classification hierarchy does not contain any cycle. However, the classification hierarchy shown in Fig. <ref type="figure" target="#fig_9">11</ref> presents a cycle (BASE classes B2, B3, and B4), and therefore, this classification hierarchy is absolutely incorrect in our model.</p><p>In UML, an arrow may be attached to the end of an association to indicate that navigation is supported toward the class attached to the arrow. In our proposal, the navigation is always supported toward both ends of an association (it is always possible to roll-up or drill-down on both directions), but the DW designer can use the UML navigability to deliberately represent a default roll-up or drill-down path when a BASE class participates in multiple classification hierarchies. <ref type="foot" target="#foot_9">10</ref> However, only one default roll-up and one default drill-down path can start from a BASE class. For example, in Fig. <ref type="figure" target="#fig_11">12</ref>(a) we have represented a classification hierarchy that is incorrect because two default roll-up paths start from B1 (B1 rolls-up to B2 and B1 rolls-up to B3), and two default drill-down paths start from B4 (B4 drills-down to B2 and B4 drills-down to B3). The default roll-up and drill-down paths that are in conflict have been remarked with a dashed circle. This same classification hierarchy is correctly represented in Fig. <ref type="figure" target="#fig_11">12(b)</ref>; note that it would have also been possible to define other default paths, such as Bl rolls-up to B3 and B4 drills-down to B3.</p><p>The multiplicity 1 and 1..* defined in the role R of a classification hierarchy level addresses the concepts of strictness and non-strictness, respectively. Strictness means that an object at a hierarchy's lower level belongs to only one higher-level object (e.g., as one month can be related to more than one season, the relationship  between them is non-strict). In a DW, it is very important to identify and define non-strict hierarchies, because if they are not correctly treated, some problems such as double-counting can appear when aggregations are calculated in further design steps.</p><p>Moreover, defining an association as COMPLETENESS addresses the completeness of a classification hierarchy. By completeness we mean that all members belong to one higher-class object and that object consists of those members only; for example, all the recorded seasons form a year, and all the seasons that form the year have been recorded. Our approach assumes all classification hierarchies are non-complete by default.</p><p>In a DW, time is the dominant dimension. Many forms of analysis involve either trends or inter-period comparisons. Inmon <ref type="bibr" target="#b15">[16]</ref> defines ''A data warehouse is a subject-oriented, integrated, time-variant, nonvolatile collection of data in support of management's decisions'', and Kimball <ref type="bibr" target="#b17">[18]</ref> says that ''The time dimension is the one dimension virtually guaranteed to be present in every data warehouse, because virtually every data warehouse is a time series''. Due to this important fact, in our proposal a DIMENSION class includes a boolean tagged value called ISTIME that indicates whether it is a time dimension or not. 11   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.">Categorization of dimensions</head><p>The categorization of dimensions, used to model additional features for a class's subtypes, is represented by means of generalization-specialization relationships in our approach. However, only the parent of a categorization can belong to both a classification and generalization-specialization hierarchy at the same time. Moreover, multiple inheritance is not allowed in our approach. In UML, generalization is shown as a solid-line from the subclass to the superclass, with a small hollow triangle at the end of the line near the superclass. In our approach, the categorization of dimensions does not require any additional UML extension.</p><p>For example, Fig. <ref type="figure" target="#fig_7">9</ref> shows an example of categorization for the Dimension1.1. This categorization presents two levels:   11 This will allow us an automatically generation of particular time structures in a target commercial OLAP tool.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5.">Attributes</head><p>Only FACT, BASE, and DEGENERATEFACT (see Section 4.7) classes can have attributes. DIMENSION classes do not contain attributes, because they represent the concept of dimension and they are used as ''anchorage points'': the information about a dimension is represented in the corresponding hierarchy levels (BASE classes).</p><p>FACT classes consist of two kinds of attributes: FACTATTRIBUTEs, which represent measures (the transactions or values being analyzed), and DEGENERATEDIMENSIONs (see Section 4.6).</p><p>On the other hand, BASE classes consist of three kinds of attributes: OIDs, DESCRIPTORs, and/or DIMEN-SIONATTRIBUTEs. Every BASE class can have one OID attribute (an identifying attribute) and must have one DESCRIPTOR attribute. <ref type="foot" target="#foot_10">12</ref> These attributes are necessary for an automatic exportation process into commercial OLAP tools, as these tools store this information in their metadata (if the OID attribute is not provided, then it will be automatically created in the exportation process). A DIMENSIONATTRIBUTE provides descriptive information about dimension instances. A DIMENSIONATTRIBUTE can be optional: it does not need to be specified for each element of the corresponding level and therefore may contain null values. As a DIMENSIONATTRIBUTE can be used to delimit the resulting set of a query, it is important to know if an attribute is optional (considered in our approach as tagged values, see Appendix A.3.4), because then the results may be incomplete <ref type="bibr" target="#b14">[15]</ref>. FACTATTRIBUTE, DESCRIPTOR, and DIMENSIONATTRIBUTE can also be derived attributes. This situation is indicated by placing / before the corresponding name, and the derivation rule is defined as a tagged value called DERIVATIONRULE of the corresponding stereotype.</p><p>For example, Fig. <ref type="figure" target="#fig_7">9</ref> shows FACT and BASE classes with different types of attributes. The attributes are decorated with an icon that indicates the stereotype that applies to. In the FACT class, attributes are defined as FACTATTRIBUTE (FA) and DEGENERATEDIMENSION (DD). On the other hand, in BASE classes attributes are defined as OID, DESCRIPTOR (D), and DIMENSIONATTRIBUTE (DA).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6.">Degenerate dimensions</head><p>Our approach also allows the DW designer to define degenerate dimensions in the FACT class, by using the stereotype DEGENERATEDIMENSION for an attribute. A degenerate dimension is a DIMENSION that is stored as an attribute of the FACT class, but we do not explicitly represent it as a dimension in our diagram. Degenerated dimensions are useful when attempting to associate the facts in the DW with the original data sources <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b17">18]</ref>.</p><p>In Fig. <ref type="figure" target="#fig_7">9</ref>, Attribute3 is a DEGENERATEDIMENSION of Fact1. A DEGENERATEDIMENSION is represented by an icon with the letters DD.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.7.">Degenerate facts</head><p>In <ref type="bibr" target="#b12">[13]</ref>, the degenerate fact concept is defined as a measure recorded in the intersection table of a manyto-many relationship between the fact table and a dimension table. In our approach, we represent a DEGENERATEFACT as a UML association class attached to a many-to-many aggregation relationship between a FACT class and a DIMENSION class. <ref type="foot" target="#foot_11">13</ref> This DEGENERATEFACT class can contain FACTATTRIBUTEs and DEGENERATEDIMENSIONs.</p><p>For example, in Fig. <ref type="figure" target="#fig_7">9</ref>, we show DegenerateFact1 attached to the aggregation relationship between Fact1 and Dimension1.1. Although DegenerateFact1 resembles an independent element, it is actually part of the aggregation relationship.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.8.">Additivity</head><p>We consider all measures as additive by default, i.e. the SUM operator can be applied to aggregate their measure values along all dimensions. Non-additivity and semi-additivity are considered by defining con-straints on measures between brackets and placing them somewhere around the fact class. These constraints are represented in a property tag of the UML notation for clarity reasons, although they have formal underlying formulae and contain the allowed operators, if any, along the dimension that the measure is not additive. However, in large MD models, the readability can be reduced due to a great amount of additivity rules shown in a diagram. In these cases, we use summarizability appendices, as described in <ref type="bibr" target="#b14">[15]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.9.">Merged levels 2 and 3</head><p>In some occasions, the DW designer needs to have a general overview of all facts, dimensions, and dependencies that a DW comprises. In our approach, this can be achieved if all the star schema definitions (level 2) are merged into one diagram. In a CASE tool that supports our proposal, this diagram can be automatically built; the DW designer should be allowed to make changes in this aggregated view and the changes should be propagated through related levels 2 and 3.</p><p>The same can be done at level 3, but the resulting diagram can be extraordinary complex in a big real DW with tens of dimensions and hundreds of hierarchy levels.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.10.">Metamodel</head><p>In this section, we present the metamodel of our OO conceptual MD approach using a UML class diagram. In order to simplify this diagram, we have divided this diagram into tree packages, as it is shown in Fig. <ref type="figure" target="#fig_12">13</ref>.</p><p>In Fig. <ref type="figure" target="#fig_2">14</ref> we show the content of the package Level1. This package specifies the modeling elements that can be applied in the level 1 of our approach. In this level, only the STARPACKAGE model element is allowed. We use the navigability of an association to denote the direction of a dependency or an importation. For example, a STARPACKAGE may import DIMENSIONPACKAGEs from another STARPACKAGE. We also show the modeling elements that a STARPACKAGE can contain: FACTPACKAGE and DIMENSIONPACKAGE.</p><p>In Fig. <ref type="figure" target="#fig_13">15</ref> we show the content of the package Level2. In this level, the modeling elements that can be used are FACTPACKAGE and DIMENSIONPACKAGE. A FACTPACKAGE may contain only one FACT and various DEGEN-ERATEFACTS, whereas a DIMENSIONPACKAGE may contain only one DIMENSION and various BASEs. Finally, in Fig. <ref type="figure" target="#fig_3">16</ref> we show the content of the package Level3. This diagram represents the main MD properties of our modeling approach. In this way, dimensions and facts are represented using the classes DIMENSION and FACT, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Implementation of multidimensional models</head><p>Model Driven Architecture (MDA) <ref type="bibr" target="#b26">[29]</ref> is an Object Management Group (OMG) standard that addresses the complete life cycle of designing, deploying, integrating, and managing applications. MDA separates the specification of system functionality from the specification of the implementation of that functionality on a specific technology platform, i.e. a Platform Independent Model (PIM) can be transformed into multiple Platform Specific Models (PSM) in order to execute on a concrete platform (see left hand side of Fig. <ref type="figure" target="#fig_14">17</ref>).</p><p>Meta-Object Facility (MOF) 2.0 QVT (Query, View, Transformation) is an under-developing standard for expressing model transformations, which can define transformation rules between two MOF-compliant models. In response to the Request for Proposal (RFP) of QVT, different transformation approaches have been proposed <ref type="bibr" target="#b8">[9]</ref>. One of the most remarkable approaches is QVT-Partners <ref type="bibr" target="#b28">[31]</ref>.</p><p>QVT-Partners proposes a possibly extended version of OCL 2.0 as the query language and provides a standard language called Model Transformation Language (MTL) 14 for relations and mappings. In QVT-Part-Fig. <ref type="figure" target="#fig_3">16</ref>. Metamodel: level 3. 14 The syntax of this language resembles C, C++ and Java language family. ners, complex transformations can be built by composing simpler transformations using composition functions. Moreover, QVT-Partners suggests a sequence of steps that lead to an executable transformation that can be executed by means of a model transformation engine (e.g. Inria MTL Engine <ref type="bibr" target="#b16">[17]</ref>).</p><p>Model transformation is the process of converting one model to another model. In <ref type="bibr" target="#b11">[12]</ref>, model transformations are categorized along vertical (a source model is transformed into a target model at a different level of abstraction) and horizontal (a source model is transformed into a target model that is at the same level of abstraction) dimensions.</p><p>We have aligned our MD proposal with the MDA approach; thus, as presented through the paper, we accomplish the conceptual modeling of a DW without considering any aspect of the implementation in a concrete target platform, thereby providing a PIM. We have developed an algorithm that, from the MD models accomplished by using our UML profile, generates the corresponding implementation in different platforms (relational and object-relational) through a vertical transformation, thereby allowing different PSM. In this section, we present the transformation process from an MD model to a relational one; on the right hand side of Fig. <ref type="figure" target="#fig_14">17</ref>, we show a high-level view of a transformation process from an MD model to the relational model, in which we generate the specific platform structures according to the modeling elements.</p><p>For example, the next code represents the QVT implementation of the mapping for the FACT class into a table. The body of a mapping contains an object expression that creates an object (method new) and produces the output. In the body of a mapping, OCL is used to select and filter the model elements. conditions (conditions that must be true before the use case), the flow of events (the steps in the use case, captured as prose or pseudocode), and postconditions (conditions that must be true at the end of the use case). In the example shown in Fig. <ref type="figure" target="#fig_15">18</ref>, the use case is about sales managers making a query about the quarterly sales of the products in the computer category.</p><p>On the other hand, in Fig. <ref type="figure" target="#fig_16">19</ref> we describe the second use case. The preconditions state the conditions that must be true before the sales managers can perform the analysis: cities with more than 100,000 inhabitants and autos belonging to the car type.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.">Levels 1 and 2: package design</head><p>The DW of our running example consists of three data marts: automobile sales, part sales, and service works. Fig. <ref type="figure" target="#fig_18">20</ref> shows the first level of the model. The first level is formed by three STARPACKAGEs that represent the different data marts that form the DW (G.1: Draw a package for each star schema, i.e., for every fact considered). We have grouped the definition of the common dimensions in Auto-sales schema in order to avoid some design problems (G.2b: Group together the definition of the  shared dimensions in order to minimize the number of dependencies and G.2c: Avoid cycles in the dependency structure). Moreover, in order to clarify the model, we have used three UML notes to remark the content of each package in Fig. <ref type="figure" target="#fig_18">20</ref>.</p><p>Regarding level 2, Fig. <ref type="figure" target="#fig_19">21</ref> shows the content of the package Auto-sales schema (level 2). The FACTPACKAGE Auto-sales fact is represented in the middle of Fig. <ref type="figure" target="#fig_19">21</ref>, while the DIMENSIONPACKAGEs are placed around the FACTPACKAGE (G.3: Draw a package for the fact and a package for each dimension of the star schema). As seen in Fig. <ref type="figure" target="#fig_19">21</ref>, a dependency is drawn from the FACTPACKAGE to each one of the DIMENSIONPACKAGES, because the FACTPACKAGE comprises the whole definition of the star schema, and therefore, uses the definitions of dimensions related to the fact (G.4a: Draw a dependency form the fact package to each one of the dimension packages).</p><p>Fig. <ref type="figure" target="#fig_20">22</ref> shows the content of the package Services schema (level 2). As in the Auto-sales schema, the FACTPACKAGE is placed in the middle of Fig. <ref type="figure" target="#fig_20">22</ref>    dimension) have been previously defined in the Auto-sales schema (Fig. <ref type="figure" target="#fig_19">21</ref>), and Parts dimension has been previously defined in the Parts schema (not shown in this paper), so all of them are imported in this package (G.5: Do not define a dimension twice; if a dimension has been previously defined, import it). When dimensions are imported, the name of the STARPACKAGEs where they have been previously defined appears below the package name (from Auto-sales schema and from Parts schema respectively). On the other hand, since Mechanic dimension and Service dimension have been defined in the current package, they do not show a package name.</p><p>Moreover, at level 2, the dependencies between DIMENSIONPACKAGES represent shared hierarchy levels. For example, a dependency between Mechanic dimension and Customer dimension is represented because there is a shared hierarchy <ref type="foot" target="#foot_12">15</ref> between these two DIMENSIONPACKAGES (G.6: Draw a dependency between dimension packages in order to indicate that the dimensions share hierarchy levels). The shared hierarchy levels (City, Region, and State) can be observer in Figs. <ref type="bibr" target="#b21">23</ref> and 24.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3.">Level 3: dimension classes</head><p>The content of the DIMENSIONPACKAGE and FACTPACKAGE is represented at level 3. The diagrams at this level are only comprised of classes and associations among them. Fig. <ref type="figure" target="#fig_22">23</ref> shows the content of the package Customer dimension (level 3), that contains the definition of the DIMENSION class (Customer) and the different hierarchy levels (Customer personal data, City, Region, and State) that are represented by BASE classes (G.7: In a dimension package, draw a class for the dimension class and a class for every classification hierarchy level). FullName attribute of Customer personal data is derived, because it is obtained by joining Name and Surname attributes (the derivation rule is not shown in order to avoid a cluttered diagram).</p><p>As previously commented, Mechanic dimension and Customer dimension share some hierarchy levels, and therefore, there is a dependency between them (see Fig. <ref type="figure" target="#fig_20">22</ref>). Fig. <ref type="figure" target="#fig_21">24</ref> shows the content of Mechanic dimension: this dimension contains six hierarchy levels, but three of them (City, Region and State) have been imported from another dimension.   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.4.">Level 3: fact class</head><p>Regarding FACTPACKAGE, Fig. <ref type="figure" target="#fig_24">26</ref> shows the content of the package Auto-sales fact (level 3). In this package, the whole star schema is displayed: the FACT class is defined with the corresponding measures: Commission, Quantity, Price, and Total. Total is derived measure (the derivation rules are not shown in order to avoid a cluttered diagram). Moreover, ContractN performs much the same function as a dimension but it is stored in the FACT class, therefore, ContractN is a DEGENERATEDIMENSION of Auto-sales that represents the identification number of the sale contract.</p><p>The FACT class Auto-sales has a many-to-one relationship with Auto, Dealership, Time, and Customer dimensions, but a many-to-many relationship with the Salesperson dimension. Moreover, the DIMENSION classes with their corresponding hierarchy levels are imported (G.8: In a fact package, draw a class for the fact class and import the dimension classes with their corresponding hierarchy levels). This level may become very complex because the dimensions may be very complex and of a considerable size due to a high number of dimension levels. However, the DW designer only has to import them from the corresponding DIMENSIONPACKAGE. In Fig. <ref type="figure" target="#fig_24">26</ref>, we have hidden a part of the attributes and methods of some BASE classes for the sake of simplicity.</p><p>On the other hand, in Fig. <ref type="figure" target="#fig_24">26</ref>, SP commision is a DEGENERATEFACT attached to the aggregation relationship between Auto-sales fact and Salesperson dimension. This DEGENERATEFACT is the commission percentage that a salesperson received for a particular sale. The relationship between Auto-sales and Salesperson is many-tomany because different salespersons can take part in the same sale (they share the total commission), and a salesperson can also take part in different sales.</p><p>Regarding the additivity of the measures of the FACT class, in Fig. <ref type="figure" target="#fig_24">26</ref>, the additivity rule {Quantity Is Not SUM Along Salesperson} states that the attribute Quantity in the Auto-sales class cannot be aggregated along the Salesperson dimension by using the SUM operator. However, the AVG, MIN and MAX aggregation operators can still be applied to aggregate this attribute along the Salesperson dimension.</p><p>Finally, in Fig. <ref type="figure" target="#fig_25">27</ref> we show the merged level 2 of our running example with the three FACTPACKAGES and the different DIMENSIONPACKAGES; for each one of them, the legend (from . . .) indicates in which STARPACKAGE it has been defined. Moreover, the dependencies show where each DIMENSIONPACKAGE is used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.5.">CASE tool support</head><p>All the MD models presented in this case study have been designed by using Rational Rose 2003. Instead of creating our own CASE (Computer-Aided Software Engineering) tool, we have chosen to extend a well known CASE tool available in the market, such as Rational Rose. In this way, we believe that our contribution can reach a greater number of people.</p><p>Rational Rose is one of the most well known visual modeling tools. Rational Rose is extensible by means of add-ins, which allows to package customizations and automation of several Rational Rose features through the Rose Extensibility Interface (REI) <ref type="bibr" target="#b29">[32]</ref> into one component. An add-in is a collection of some combination of the following: main menu items, shortcut menu items, custom specifications, properties (UML tagged values), data types, UML stereotypes, online help, context-sensitive help, and event handling.</p><p>We have developed an add-in, which allows us to use our MD modeling approach in Rational Rose. Therefore, we can use this tool to easily accomplish MD conceptual models. Our add-in customizes the following elements:</p><p>• Stereotypes: We have defined the stereotypes by means of a stereotype configuration file.</p><p>• Properties: We have defined the tagged values by means of a property configuration file.</p><p>• Menu item: We have added the new menu item MD Validate in the menu Tools by means of a menu configuration file. This menu item runs a Rose script that validates a MD model: our script checks all the constraints that our UML profile defines.</p><p>In Fig. <ref type="figure" target="#fig_26">28</ref>, we can see a screenshot from Rational Rose that shows the definition of the dimension Mechanic (see Fig. <ref type="figure" target="#fig_21">24</ref>) from the running example used in Section 4. Some comments have been added to the screenshot in order to remark some important elements: the hierarchy structure of our proposal (Level 1, Level 2, and Level 3), the new buttons added to Rational Rose, the stereotyped attributes, and the different ways of displaying a stereotype (Icon, Decoration, and Label). In this screenshot, the content of Mechanic dimension from Services schema is shown; this dimension shares some hierarchy levels (City, Region, and State) with Customer dimension, the place where the shared hierarchy levels have been defined firstly (see Fig. <ref type="figure" target="#fig_22">23</ref>), and because of this, they are imported into this dimension. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.6.">Implementation in oracle</head><p>Creating a database basically consists of the following steps: (i) creating the database's datafiles, <ref type="foot" target="#foot_13">16</ref> its control files <ref type="foot" target="#foot_14">17</ref> and its redo log files, <ref type="foot" target="#foot_15">18</ref> (ii) creating the system tablespaces and (iii) creating the data dictionary (tables, views, etc.). The steps (i) and (ii) are normally accomplished by the database administrator together with other issues such as defining the group of users or implementing permission issues. Therefore, we consider out of the scope of this paper to provide further detail on these steps. Instead, we will briefly mention the step (iii), i.e. how the data warehouse repository has been created.</p><p>Regarding data warehouses, many issues are considered in real world projects such as the modeling of data sources, specifying the Extraction-Transformation-Loading (ETL) processes, defining and maintaining the metadata, the multidimensional modeling of the data warehouse repository or the modeling of the different OLAP tools to query the data warehouse. As this paper is focused on the multidimensional modeling of the DW repository (and mainly at the conceptual level), we will only focus on the definition of the relational tables that will correspond to the multidimensional model (accomplished with our UML proposal) and the use of a commercial OLAP tool to query the implemented multidimensional model. For more details on how to implement other data warehouse parts, we refer the reader to <ref type="bibr" target="#b20">[22,</ref><ref type="bibr" target="#b19">21,</ref><ref type="bibr" target="#b21">23,</ref><ref type="bibr" target="#b33">36]</ref>.</p><p>Let us remind here that the CASE tool presented in the previous section generates an SQL script that contains the required SQL sentences to create the database tables and relations needed to specify the data warehouse repository according to the defined conceptual schema. In concrete, we have implemented this case study in Oracle 9i. In Fig. <ref type="figure" target="#fig_27">29</ref>, we can see a screenshot from SQL worksheet. With this tool we open the SQL script file generated by our CASE tool and we execute it in order to create the required tables and relations that will host the data warehouse data.</p><p>However, this is not enough if we wish to query a DW by using a commercial OLAP tool. To accomplish this, we need to upload and specify the multidimensional model of our data warehouse in the corresponding commercial OLAP tool we wish to use. In this case study, we have used Oracle Discoverer to query the data warehouse <ref type="bibr" target="#b27">[30]</ref>. Discoverer provides two different tools: Discoverer Administrator and Discoverer Desktop. With the former, the data warehouse designer uploads, updates and maintains the multidimensional model of the implemented data warehouse. With this tool, we are also able to define the authorized users to query the data warehouse and the different parts of the MD model that can be accessed by the different group of users. In Fig. <ref type="figure" target="#fig_28">30</ref>, we can see a screenshot from the Discoverer Administrator tool with the MD model of the case study. We can easily see the fact Auto-sales and the dimensions Salesperson, Customer, Time and their corresponding attributes. Due to space constraints, we do not provide further detail about the dimensions and all their attributes. Once this MD model has been define with the Discoverer Administrator, an end user can query the data warehouse by using the Discoverer Desktop tool.</p><p>Finally, in Fig. <ref type="figure" target="#fig_29">31</ref>, we show a screenshot of a cube that provides data according to the requirement and use case I presented in Section 6.1. As easily seen, data is classified into two different classification hierarchy levels: cities where customers (Customer dimension) who bought cars live are placed in the horizontal header and the months (Time dimension) in which they were sold are placed in the vertical header. In the central cells of the cube, we can observe the figures for the measure car sales of the fact Auto-Sales.   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Related work</head><p>Lately, several MD data models have been proposed. Some of them fall into the logical level (such as the well known star-schema by Kimball <ref type="bibr" target="#b17">[18]</ref>). Others may be considered as formal models as they provide a formalism to consider main MD properties. A review of the most relevant logical and formal models can be found in <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b0">1]</ref>.</p><p>In this section, we will make brief reference to the most relevant models that we consider ''pure'' conceptual MD models. These models provide a high level of abstraction for the main MD modeling properties presented in Section 2 and are totally independent from implementation issues. One outstanding feature provided by these models is that they provide a set of graphical notations (such as the classical and well known EER model) that facilitates their use and reading. These are as follows: The Dimensional-Fact (DF) Model by Golfarelli et al. <ref type="bibr" target="#b13">[14]</ref>, The Multidimensional/ER (M/ER) Model by Sapia et al. <ref type="bibr" target="#b31">[34,</ref><ref type="bibr" target="#b30">33]</ref>, The starER Model by Tryfona et al. <ref type="bibr" target="#b35">[38]</ref>, the model proposed by Hu ¨seman et al. <ref type="bibr" target="#b14">[15]</ref>, The Yet Another Multidimensional Model (YAM 2 ) by Abello ´et al. <ref type="bibr" target="#b1">[2]</ref>, and The Object Oriented Multidimensional Model (OOMD) by Trujillo et al. <ref type="bibr" target="#b34">[37]</ref>.</p><p>In Table <ref type="table" target="#tab_1">2</ref>, we provide the coverage degree of each above-mentioned conceptual model regarding the main MD properties described in the previous section. To start with, to the best of our knowledge, only YAM 2 provides a grouping mechanism to avoid flat diagrams and simplify the conceptual design when a system becomes complex due to a high number of dimensions and facts sharing dimensions and their corresponding hierarchies. In particular, this model structures the MD modeling into different levels of complexity considering facts and dimensions at the first level, then classification hierarchies, and finally, the whole model. However, from our point of view, even though these different levels try to make the MD modeling easier, YAM 2 is a complex model not only for end users, but also for DW designers; mainly due to the high number of relations and classes that are needed in the design. Regarding facts, only YAM 2 explicitly manages the term of multistar, which means that we are able to represent more than one fact in the same MD model (i.e. a star schema with more than one fact). Only the starER model, YAM 2 , and OOMD consider many-to-many relationships between facts and particular dimensions by indicating the exact cardinality (multiplicity) between them. However, none of these models explicitly represents the term degenerate facts. We understand by degenerate facts the measures recorded in a ''intersection table'' of many-to-many relationships <ref type="bibr" target="#b12">[13]</ref>. Only YAM 2 and OOMD consider derived measures together with their derivation rules as part of the conceptual schema. The DF and the M/ER models represent derived measures with the provided query patterns, but not as part of the conceptual schema itself. The DF, the starER, YAM 2 , and OOMD models consider the additivity of measures by explicitly representing the set of aggregation operators that can be applied on non-additive measures.</p><p>With reference to dimensions, only YAM 2 is able to have only one definition of a dimension and share it by different facts in multistar schemas, thereby avoiding defining the same dimension more than once and allowing the use of conformed dimensions. Moreover, only YAM 2 is able to define more than one role for a dimension regarding the same fact by connecting them through different associations. Only the OOMD model allows us to share only few classification hierarchy levels from dimensions, whereas the rest of the approaches force us to share the whole classification hierarchy path including all levels. All of the models consider multiple and alternative path classification hierarchies by means of Directed Acyclic Graphs (DAG) defined on certain dimension attributes. However, only the starER, YAM 2 , and OOMD models consider non-strict classification hierarchies by specifying the exact cardinality between classification hierarchy levels; moreover, only the starER and OOMD models consider adequate to represent complete classification hierarchies. As both the M/ER and the starER models are extensions of the Entity Relationship (ER) model, they easily consider the categorization of dimensions by means of Is-a relationships. The YAM 2 and OOMD models represent the categorization of dimensions by means of generalization relationships of the OO paradigm.</p><p>With reference to the dynamic level of MD modeling, the starER model is the only one that does not provide an explicit mechanism to represent initial user requirements. On the other hand, only the M/ER, YAM 2 , and OOMD models provide a set of basic OLAP operations to be applied from these initial user requirements. Instead, only the M/ER and OOMD models consider the behavior of the system by modeling the evolution of initial user requirements with state diagrams.</p><p>Finally, we note that all the models provide a graphical notation that facilitates the conceptual modeling task to the designer. On the other hand, only the M/ER and OOMD models provide a framework for an automatic generation of the database schema into a target commercial OLAP tool (particularly into Informix Metacube and Cognos Powerplay).</p><p>From Table <ref type="table" target="#tab_1">2</ref>, one may conclude that none of the current conceptual modeling approaches considers all MD properties at both the structural and dynamic levels. From our point of view, the YAM 2 and OOMD models are the richest approaches as they consider most of the major MD properties, mainly because they are based on the OO paradigm. Therefore, we claim that a standard conceptual model is needed to consider all MD modeling properties at both the structural and dynamic levels. We argue that an OO approach with the UML is the right way of linking structural and dynamic level properties in an elegant way at the conceptual level.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">Conclusions and future work</head><p>In this paper, we have presented an extension of the UML as a profile that allows us to accomplish the conceptual modeling of data warehouses by representing the major relevant MD properties at the conceptual level. We have invested some effort on ensuring that all the concepts have a well defined semantic basis. Therefore, this extension contains the needed stereotypes, tagged values and constraints for a complete and powerful MD modeling. In order to make our proposal as simple as possible, we have defined a minimal set, but powerful enough, of new UML elements that enable us to represent main MD modeling at the conceptual level. Moreover, we have used the OCL to specify the constraints attached to these new defined elements, thereby avoiding an arbitrary use of them. On the other hand, a frequent criticism highlighted at diagrammatic notations is their scalability; in our approach, thanks to the use of packages, we can elegantly represent huge and complex models at different levels of complexity. Therefore our UML extension allows us to avoid complex conceptual schemas and obtain understandable and easy to read conceptual schemas. On the other hand, packages also allow us to import elements defined in one package into another one, thereby avoiding redundancy as no different definitions for the same concept are permitted.</p><p>We have based our approach in UML for reasons: (i) UML is a widely accepted object-oriented modeling language, which saves developers from learning a new model and its corresponding notations for specific MD modeling and (ii) UML can be easily extended so that it can be tailored for a specific domain with concrete peculiarities such as the multidimensional modeling for data warehouses.</p><p>Finally, we have defined concrete model transformations by following the standard Query/View/Transformations (QVT) that allow us to automatically generate the corresponding implementation into target platforms. We have also programmed this extension in a well known visual modeling tool, Rational Rose, from implementations can automatically be obtained. Finally, in order to show the applicability of our approach, we have applied our approach to a case study and implemented in Oracle.</p><p>We are currently working on defining a method (based on the Unified Process) for MD modeling based on the extension presented in this paper. This method will explicitly consider all underlying design guidelines that are hidden under every defined new MD element. Furthermore, in this UML extension we are also considering new stereotypes regarding object-oriented and object-relational databases for an automatic generation of the database schema into these kinds of databases. Other topics that we are also considering are (i) proposing a group of metrics as a means to describe good MD models based on more objective criteria and (ii) extending the current profile for considering the conceptual modeling of secure data warehouses. As a further future work, we will consider the specification of dynamic aspects of the multidimensional modeling such as the modeling of end user requirements for the current profile version.</p><p>we do not need to invest effort on defining a new language, and there is tool support for OCL, both from the academic and open source movement <ref type="bibr">[19,</ref><ref type="bibr" target="#b32">35]</ref> and the software industry <ref type="bibr" target="#b9">[10,</ref><ref type="bibr">27]</ref>. In order to increase the readability of the constraint definitions, we use the conventions stated in the UML specification:</p><p>• self, which can be omitted as a reference to the element defining the context of the invariant, has been kept for clarity. For example, we write: self.feature instead of only feature.</p><p>• In expressions where a collection is iterated, an iterator is used for clarity, even when formally unnecessary.</p><p>However, the type of the iterator is usually omitted. For example, we write: self.contents -&gt; forAll(me j not me.ocllsKindOf(Package)) instead of self.contents -&gt; forAll(not me.ocllsKindOf(Package)). • The collect operation is left implicit where possible. For example, we write: self.connection.participant instead of self.connection -&gt; collect(participant).</p><p>We have defined 14 stereotypes: three specialize in the Package model element, <ref type="foot" target="#foot_17">19</ref> three specialize in the Class model element, one specializes in the AssociationClass model element, five specialize in the Attribute model element, and two specialize in the Association model element. In Fig. <ref type="figure" target="#fig_31">32</ref>, we have represented a portion of the UML metamodel <ref type="foot" target="#foot_18">20</ref> to show where our stereotypes fit. We have only represented the specialization hierarchies, as the most important fact about a stereotype is the base class that the stereotype specializes. In this figure, new stereotypes are colored in grey, whereas classes from the UML metamodel remain white. Some issues of our MD approach, such as the derivation rule or the initial value of an attribute, are not defined in our stereotypes because these concepts have already been defined in the UML metamodel. We provide a list of these concepts in Table <ref type="table" target="#tab_3">6</ref>.</p><p>In the following, we present our extension following the extension definition schema shown in Table <ref type="table">3</ref>.  This UML extension defines a set of stereotypes, tagged values, and constraints that enable us to design MD models. The stereotypes are applied to certain components that are particular to MD modeling, allowing us to represent them in the same model and on the same diagrams that describe the rest of the system. The MD models are divided into three levels: model definition (level 1), star schema definition (level 2), and dimension/ fact definition (level 3). <ref type="foot" target="#foot_19">21</ref>The major elements to MD modeling are the Fact class and the Dimension class. A Fact class consists of FactAttributes and DegenerateDimensions. The hierarchy levels of a Dimension are represented by means of  The correct use of this extension is assured by the definition of 51 constraints specified both in natural language and in OCL expressions (to avoid redundancy) in the definitions of the different stereotypes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.2. Prerequisite extensions</head><p>No other extension to the language is required for the definition of this extension.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.3. Stereotypes</head><p>The stereotypes are presented depending on the base class that specializes: Package, Class, Association-Class, Attribute, and Association.  • Constraints:</p><p>-All attributes of a Fact must be DegenerateDimension or FactAttribute: self.feature -&gt; select(fe j fe.ocllsKindOf(Attribute)) -&gt; forAll(f j f.ocllsTypeOf(DegenerateDimension) or f.ocllsTypeOf( FactAttribute)) -All associations of a Fact must be aggregations <ref type="foot" target="#foot_23">25</ref> (neither none nor composite):</p><p>self.association-&gt; forAll(as j as.aggregation = # aggregate) -A Fact can only be associated with Dimension classes: <ref type="foot" target="#foot_24">26</ref>self.allOppositeAssociationEnds-&gt; forAll(ae j ae.participant.ocllsTypeOf(Dimension)) • Tagged values: None -All attributes of a Base must be OID, Descriptor, or DimensionAttribute: self.feature-&gt; select(fe j fe.ocllsKindOf(Attribute)) -&gt; forAll(f j f.ocllsTypeOf(OID) or f.ocllsTypeOf(Descriptor) or f.ocllsTypeOf(DimensionAttribute)) -A Base must have a Descriptor attribute (and only one):</p><p>self.feature -&gt; select(fe j fe.ocllsKindOf(Attribute)) -&gt; select(f j f.ocllsTypeOf(Descriptor)) -&gt; size = 1 -A Base may have an OID attribute:</p><p>self.feature -&gt; select(fe j ocllsKindOf(Attribute)) -&gt; select(f j f.ocllsTypeOf(OID)) -&gt; size &lt;= 1 -A Base can only be associated with Dimension or Base classes: self.allOppositeAssociationEnds -&gt; forAll(ae j ae.participant.ocllsTypeOf(Dimension) or ae.participant. ocllsTypeOf(Base)) -A Base cannot be associated with itself (in order to avoid cycles):</p><p>self.allOppositeAssociationEnds-&gt; forAll(ae j ae.participant &lt;&gt; self) -A Base class may only inherit from another Base class:</p><p>self.generalization -&gt; size &gt; 0 implies self.generalization.parent -&gt; forAll(me j me.ocllsTypeOf(Base)) -A Base class may only be parent of another Base class:</p><p>self.specialization -&gt; size &gt; 0 implies self.specialization.child -&gt; forAll(me j me.ocllsTypeOf(Base)) -A Base can only be child in one generalization (no multiple inheritance):</p><p>self.generalization -&gt; size &lt;= 1 -A Base cannot simultaneously be a child in a generalization/specialization hierarchy and belong to an association hierarchy: -All attributes of a DegenerateFact class must be DegenerateDimension or FactAttribute: self.feature -&gt; select(fe j fe.ocllsKindOf(Attribute)) -&gt; forAll(f j f.ocllsTypeOf(DegenerateDimension) or f.ocllsTypeOf( FactAttribute)) -A DegenerateFact association can only be connected to two elements: <ref type="foot" target="#foot_26">28</ref>self.connection -&gt; size = 2 -One of the ends of a DegenerateFact has to be a Fact and the other end has to be a Dimension:  -The ends of a Rolls-upTo association can only be Base classes: self.connection. participant -&gt; forAll(pa j pa.ocllsTypeOf(Base)) -A Rolls-upTo association can only be connected to two elements: 30  self.connection -&gt; size = 2 -In a Rolls-upTo association, one of the ends contains the role r and the other end contains the role d: 31  self.associationEnd -&gt; exists(ae j ae.name = 'r') and self.associationEnd -&gt; exists(ae j ae.name = 'd') • Tagged values: None self.associationEnd -&gt; exists(ae j ae.name = 'r') and self.associationEnd -&gt; exists(ae j ae.name = 'd') • Tagged values: None 30 In the UML, an association can have more that two association ends. 31 The role is the name of the AssociationEnd. 32 A complete association means that all members belong to one higher-class object and the object consists of those members only. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. A data cube and classification hierarchies defined on dimensions.</figDesc><graphic coords="5,70.87,67.32,397.08,130.18" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Different representations for a stereotyped class.</figDesc><graphic coords="7,164.41,67.32,209.88,57.17" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>1 1Fig. 4 .</head><label>14</label><figDesc>Fig. 4. The three levels of a MD model explosion using packages.</figDesc><graphic coords="9,127.56,354.33,283.68,112.32" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. Level 1: different representations.</figDesc><graphic coords="10,103.55,254.83,340.56,168.05" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Model definition with and without cycles.</figDesc><graphic coords="10,163.08,67.32,218.88,134.64" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Level 2: content of StarPackage1.</figDesc><graphic coords="11,161.57,67.32,218.52,166.46" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Level 2: content of StarPackage3.</figDesc><graphic coords="11,161.57,479.14,218.52,189.36" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 9 .</head><label>9</label><figDesc>Fig. 9. Level 3: content of FactPackage1.</figDesc><graphic coords="13,99.21,67.32,341.28,393.26" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 10 .</head><label>10</label><figDesc>Fig. 10. Classification hierarchy without cycles.</figDesc><graphic coords="14,165.91,67.32,218.52,282.81" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 11 .</head><label>11</label><figDesc>Fig. 11. Classification hierarchy with one cycle.</figDesc><graphic coords="14,165.91,394.30,218.52,183.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head></head><label></label><figDesc>(a) Base1.1.2 and Base1.1.3 to Base1.1.1, and (b) Base1.1.4 and Base1.1.5 to Basel.1.2. The different levels of a categorization are represented by BASE classes that are shown with the corresponding icon (B).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 12 .</head><label>12</label><figDesc>Fig. 12. Classification hierarchy with wrong and right navigability.</figDesc><graphic coords="15,99.21,67.32,340.92,229.10" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Fig. 13 .</head><label>13</label><figDesc>Fig. 13. Metamodel.</figDesc><graphic coords="17,161.57,535.43,218.52,133.06" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Fig. 15 .</head><label>15</label><figDesc>Fig. 15. Metamodel: level 2.</figDesc><graphic coords="18,103.55,67.32,340.20,151.34" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Fig. 17 .</head><label>17</label><figDesc>Fig. 17. Transformation of a multidimensional model.</figDesc><graphic coords="19,127.56,67.32,283.68,143.57" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Fig. 18 .</head><label>18</label><figDesc>Fig. 18. UML use case template.</figDesc><graphic coords="21,161.57,67.32,218.25,163.66" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Fig. 19 .</head><label>19</label><figDesc>Fig. 19. Example of use case.</figDesc><graphic coords="21,184.25,274.62,169.74,195.62" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head></head><label></label><figDesc>and the DIMENSIONPACKAGE are placed around the FACTPACK-AGE in a star fashion. The three DIMENSIONPACKAGE (Customer dimension, Dealership dimension, and Time</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head>Fig. 20 .</head><label>20</label><figDesc>Fig. 20. Level 1: different star schemas of the running example.</figDesc><graphic coords="22,165.91,67.32,218.52,222.48" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_19"><head>Fig. 21 .</head><label>21</label><figDesc>Fig. 21. Level 2: Auto-sales schema.</figDesc><graphic coords="22,165.91,510.38,218.52,158.11" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_20"><head>Fig. 22 .</head><label>22</label><figDesc>Fig. 22. Level 2: Services schema.</figDesc><graphic coords="23,161.57,67.32,218.52,193.68" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_21"><head>Fig. 24 .</head><label>24</label><figDesc>Fig. 24. Level 3: Mechanic dimension.</figDesc><graphic coords="24,103.55,356.37,340.20,312.19" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_22"><head>Fig. 23 .</head><label>23</label><figDesc>Fig. 23. Level 3: Customer dimension.</figDesc><graphic coords="24,103.55,67.32,340.20,216.86" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_23"><head>Fig. 25 .</head><label>25</label><figDesc>Fig. 25. Level 3: Auto dimension.</figDesc><graphic coords="25,161.57,67.32,218.52,259.63" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_24"><head>Fig. 26 .</head><label>26</label><figDesc>Fig. 26. Level 3: Auto-sales fact.</figDesc><graphic coords="26,69.53,67.32,408.24,462.81" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_25"><head>Fig. 27 .</head><label>27</label><figDesc>Fig. 27. Merged level 2: Representation of all the fact and dimension packages together.</figDesc><graphic coords="27,99.21,67.32,340.20,271.44" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_26"><head>Fig. 28 .</head><label>28</label><figDesc>Fig. 28. A screenshot from Rational Rose.</figDesc><graphic coords="28,61.03,67.32,425.88,320.11" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_27"><head>Fig. 29 .</head><label>29</label><figDesc>Fig. 29. A screenshot from SQL worksheet to define the relational tables of the DW repository.</figDesc><graphic coords="29,99.21,413.46,340.20,255.02" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_28"><head>Fig. 30 .</head><label>30</label><figDesc>Fig. 30. A screenshot from Discoverer Administrator showing the MD model of our case study.</figDesc><graphic coords="30,103.55,67.32,340.20,255.17" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_29"><head>Fig. 31 .</head><label>31</label><figDesc>Fig. 31. A screenshot from Discoverer Desktop showing a cube to provide data for the use case 1.</figDesc><graphic coords="30,103.55,413.32,340.20,255.17" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_30"><head>•</head><label></label><figDesc>Name: The name of the tagged value • Type: The name of the type of the values that can be associated with the tagged value • Multiplicity: The maximum number of values that may be associated with the value • Description: An informal description with possible explanatory comments A.1. Description</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_31"><head>Fig. 32 .</head><label>32</label><figDesc>Fig. 32. Extension of the UML with stereotypes.</figDesc><graphic coords="35,82.20,67.32,374.40,241.92" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_32"><head>A. 3 . 1 .Fig. 34 .</head><label>3134</label><figDesc>Fig. 34. Stereotype icons of Class and AssociationClass.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_33"><head>Fig. 33 .</head><label>33</label><figDesc>Fig. 33. Stereotype icons of Package.</figDesc><graphic coords="37,161.57,67.32,217.44,59.76" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_34"><head>•</head><label></label><figDesc>Name: Dimension • Base class: Class • Description: Classes of this stereotype represent dimensions in a MD model • Icon: Fig. 34(b) • Constraints:-A Dimension cannot have neither attributes nor methods: self.feature-&gt; size = 0 -All associations of a Dimension with a Fact must be aggregations at the end of the Fact (the opposite end):self.association.association -&gt; forAll(as j as.associationEnd.participant.ocllsTypeOf(Fact) implies as.associ-ationEnd. aggregation = #aggregate) -All associations of a Dimension with a Fact must not be aggregations at the end of the Dimension (the current end): self.association.association -&gt; forAll(as j as.associationEnd.participant.ocllsTypeOf(Fact) implies as.aggregation &lt;&gt;# aggregate) -A Dimension can only be associated with Fact or Base classes: self.allOppositeAssociationEnds -&gt; forAll(ae j ae.participant.ocllsTypeOf(Fact) or ae.participant.oclls-TypeOf(Base)) -A Dimension can only be associated with one Base class: self.allOppositeAssociationEnds -&gt; select(ae j ae.participant.ocllsTypeOf(Base)) -&gt; size &lt;= 1 • Tagged values: -isTime: * Type: UML::Datatypes::Boolean * Multiplicity: 1 * Description: Indicates whether the dimension represents a time dimension or not 27 • Name: Base • Base class: Class • Description: Classes of this stereotype represent dimension hierarchy levels in a MD model • Icon: Fig. 34(c) • Constraints:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_35"><head></head><label></label><figDesc>(self.generalization-&gt; size = 1) implies (self.association-&gt; size = 0) • Tagged values: None A.3.3. Stereotypes of associationclass One stereotype has been defined from the AssociationClass model element: DegenerateFact. • Name: DegenerateFact • Base class: AssociationClass • Description: Classes of this stereotype represent degenerate facts in a MD model • Icon: Fig. 34(d) • Constraints:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_36"><head></head><label></label><figDesc>self.connection.participant -&gt; exist(me j me.ocllsTypeOf(Fact)) and self.connection.participant -&gt; exist(me j me.ocllsTypeOf( Dimension)) • Tagged values: None A.3.4. Stereotypes of attribute Five stereotypes have been defined from the Attribute model element: DegenerateDimension, FactAttribute, OID, Descriptor, and DimensionAttribute. • Name: DegenerateDimension • Base class: Attribute • Description: Attributes of this stereotype represent degenerate dimensions in a MD model • Icon: Fig. 35(a) • Constraints: -A DegenerateDimension cannot be derived: not self.derived -A DegenerateDimension can only belong to a Fact or a DegenerateFact: self.owner.ocllsTypeOf(Fact) or self.owner.ocllsTypeOf(DegenerateFact) • Tagged values: None • Name: FactAttribute • Base class: Attribute • Description: Attributes of this stereotype represent attributes of Fact or DegenerateFact classes in a MD model • Icon: Fig. 35(b) • Constraints: -A FactAttribute can only belong to a Fact or a DegenerateFact: self.owner.ocllsTypeOf(Fact) or self.owner.ocllsTypeOf(DegenerateFact) -If a FactAttribute is derived, then it needs a derivation rule (an OCL expression): self.derived implies self.derivationRule.ocllsTypeOf(OclExpression) • Tagged values: -derivationRule: * Type: UML::Datatypes::String * Multiplicity: 1 * Description: If the attribute is derived, this tagged value represents the derivation rule • Name: OID • Base class: Attribute • Description: Attributes of this stereotype represent OID attributes of Base classes in a MD model 29 • Icon: Fig. 35(c) Constraints: -An OID can only belong to a Base: self.owner.ocllsTypeOf(Base) -An OID cannot be derived: not self.derived • Tagged values: None • Name: Descriptor • Base class: Attribute • Description: Attributes of this stereotype represent descriptor attributes of Base classes in a MD model • Icon: Fig. 35(d) • Constraints: -A Descriptor can only belong to a Base: self.owner.ocllsTypeOf(Base) -If a Descriptor is derived, then it needs a derivation rule (an OCL expression): self.derived implies self.derivationRule.ocllsTypeOf(OclExpression) • Tagged values:-derivationRule: * Type: UML::Datatypes::String * Multiplicity: 1 * Description: If the attribute is derived, this value represents the derivation rule29 See Section 3 or<ref type="bibr" target="#b34">[37]</ref> for further information on OID and Descriptor attributes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_37"><head>Fig. 35 .</head><label>35</label><figDesc>Fig. 35. Stereotype icons of Attribute.</figDesc><graphic coords="40,165.91,67.32,218.34,53.71" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_38"><head>•</head><label></label><figDesc>Name: Completeness • Base class: Association • Description: Associations of this stereotype represent complete associations 32 between Base classes • Icon: None • Constraints: -The ends of a Completeness association can only be Base classes: self.connection. participant -&gt; forAll(pa j pa.ocllsTypeOf(Base)) -A Completeness association can only be connected to two elements: self.connection -&gt; size = 2 -In a Completeness association, one of the ends contains the role r and the other end contains the role d:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1</head><label>1</label><figDesc>Multidimensional modeling guidelines for using packagesNo.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2</head><label>2</label><figDesc></figDesc><table><row><cell>Comparison of conceptual multidimensional models</cell><cell></cell><cell></cell><cell></cell></row><row><cell>Multidimensional modeling properties</cell><cell>Model</cell><cell></cell><cell></cell></row><row><cell></cell><cell>DF</cell><cell>M/ER</cell><cell>starER</cell><cell>Hu ¨sem.</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 4</head><label>4</label><figDesc>Stereotype definition schema• Name: The name of the stereotype • Base class (also called Model class): The UML metamodel element that serves as the base for the stereotype • Description: An informal description with possible explanatory comments • Icon: It is possible to define a distinctive visual cue (an icon) • Constraints: A list of constraints defined by mean of OCL expressions associated with the stereotype,with an informal explanation of the expression • Tagged values: A list of all tagged values that are associated with the stereotype</figDesc><table><row><cell>Table 5</cell></row><row><cell>Tagged value definition schema</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 6</head><label>6</label><figDesc>Concepts inherited from the UML metamodel Base class consists of OIDs, Descriptors, and DimensionAttributes. Finally, Rolls-upTo and Completeness association are also defined.</figDesc><table><row><cell>Concept</cell><cell>Comes from</cell><cell>Description</cell><cell>Used by</cell></row><row><cell>Name</cell><cell>ModelElement</cell><cell>It is an identifier for the ModelElement</cell><cell>Base, Completeness, Descriptor,</cell></row><row><cell></cell><cell></cell><cell></cell><cell>Dimension, DimensionAttribute,</cell></row><row><cell></cell><cell></cell><cell></cell><cell>Fact, FactAttribute, OID</cell></row><row><cell cols="2">Documentation Element</cell><cell>It is a comment, description or explanation</cell><cell>Base, Completeness, Descriptor,</cell></row><row><cell></cell><cell></cell><cell>of the Element to which it is attached</cell><cell>Dimension, DimensionAttribute,</cell></row><row><cell></cell><cell></cell><cell></cell><cell>Fact, FactAttribute, OID</cell></row><row><cell>Type</cell><cell cols="2">StructuralFeature Designates the classifier whose instances are</cell><cell>Descriptor, DimensionAttribute,</cell></row><row><cell></cell><cell></cell><cell>values of the feature</cell><cell>FactAttribute, OID</cell></row><row><cell>InitialValue</cell><cell>Attribute</cell><cell>An expression specifying the value of the</cell><cell>Descriptor, DimensionAttribute,</cell></row><row><cell></cell><cell></cell><cell>Attribute upon initialization</cell><cell>FactAttribute, OID</cell></row><row><cell>Derived</cell><cell>ModelElement</cell><cell>A true value indicates that the ModelElement</cell><cell>Descriptor, DimensionAttribute,</cell></row><row><cell></cell><cell></cell><cell>can be completely derived from other model</cell><cell>FactAttribute</cell></row><row><cell></cell><cell></cell><cell>elements and is therefore logically redundant</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>•</head><label></label><figDesc>PIM: Platform Independent Model • PSM: Platform Specific Models • QVT: Query, View, Transformation • RDBMS: Relational Database Management System • REI: Rose Extensibility Interface • RFP: Request for Proposal • UML: Unified Modeling Language • YAM2: Yet Another Multidimensional Model • Acronyms of some stereotypes defined in our UML profile</figDesc><table><row><cell>-D: Descriptor attribute</cell></row><row><cell>-DA: Dimension Attribute</cell></row><row><cell>-DD: Degenerate Dimension</cell></row><row><cell>-F: Fact Attribute</cell></row><row><cell>-DC: Dimension Class</cell></row><row><cell>-FC: Fact Class</cell></row><row><cell>-BC: Base Class</cell></row><row><cell>-DF: Degenerated Fact</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>We distinguish between DW developers (technical users, users who design and build the DW) and DW end users (users who are only interested in the business content or users who query the DW).</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>We avoid the terms fact table or dimension table during conceptual modeling, as a table suggests logical storage in a relational database management system (RDBMS).</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_2"><p>A data mart is a type of data warehouse primarily designed for addressing a specific function or department's needs: whereas a data warehouse combines databases across an entire enterprise, a data mart is usually smaller and focus on a particular subject or department. According to<ref type="bibr" target="#b12">[13]</ref>, there are two kinds of data marts: ''dependent data marts receive their data from the enterprise data warehouse; independent data marts receive data directly from the operational environment''.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_3"><p>Common dimensions used in different data marts are usually called conformed dimensions<ref type="bibr" target="#b17">[18]</ref>.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_4"><p>S. Luja ´n-Mora et al. / Data &amp; Knowledge Engineering 59 (2006) 725-769</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_5"><p>There exists a confusion between tag definition and tagged value: a tag definition specifies the tagged values that can be attached to a kind of model element, whereas a tagged value is the actual value of a tag definition in a particular model.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="7" xml:id="foot_6"><p>Package diagrams are a subset of class diagrams, but developers sometimes treat them as a separate technique.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="8" xml:id="foot_7"><p>Although we use the concept star schema, it does not imply any relational implementation of the DW. We prefer to use a well known concept instead of inventing a new term.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="9" xml:id="foot_8"><p>Fowler states: ''As a rule of thumb, it is a good idea to remove cycles in the dependency structure''<ref type="bibr" target="#b10">[11]</ref>.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="10" xml:id="foot_9"><p>Please, note that the navigability is an optional feature of our approach and it is not mandatory to always specify a roll-up or drilldown default path. Moreover, it is not necessary to draw the navigability when there is only one roll-up or drill-down path.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="12" xml:id="foot_10"><p>A descriptor attribute will be used as the default label in the data analysis in OLAP tools.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="13" xml:id="foot_11"><p>Actually, an association class is an association that also has class properties (or a class that has association properties). Even though it is drawn as an association or a class, it is really just a single model element containing attributes.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="15" xml:id="foot_12"><p>We have decided to share a hierarchy for both dimensions to obtain a clearer design, although the designer may have decided not to do it if such sharing is not totally feasible.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="16" xml:id="foot_13"><p>Files where the database server will host the data in the database structures, such as tables, materialized views, etc.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="17" xml:id="foot_14"><p>The control files of a database store the status of the physical structure of the database. It contains (but is not limited to) the following types of information: database name and creation date, tablespace and datafile records, etc.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="18" xml:id="foot_15"><p>The redo log files record all changes made in datafiles. If something happens to one of the datafiles of a database, a backed up datafile can be restored and the redo, that was written since, which brings the datafile to the state it had before it became unavailable (crash recovery).</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_16"><p>S. Luja ´n-Mora et al. / Data &amp; Knowledge Engineering 59 (2006) 725-769</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="19" xml:id="foot_17"><p>We have based our MD extension on the most semantically similar constructs in the UML metamodel.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="20" xml:id="foot_18"><p>All the metaclasses come from the Core Package, a subpackage of the Foundation Package.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="21" xml:id="foot_19"><p>Although we use the concept star schema, it does not imply any relational implementation of the DW. We prefer to use a well known concept instead of inventing a new term.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="22" xml:id="foot_20"><p>Some operations used in our extension are not from the OCL standard. For example, contents is an additional operation defined in the UML specification<ref type="bibr" target="#b25">[28]</ref>: ''The operation contents results in a Set containing the ModelElements owned by or imported by the Package''.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="23" xml:id="foot_21"><p>It is not mandatory that every StarPackage has a FactPackage, because it is possible to have utility packages with only DIMENSIONPACKAGES for defining conformed dimensions to be imported by other packages.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="24" xml:id="foot_22"><p>allSuppliers is an additional operation defined in the UML specification<ref type="bibr" target="#b25">[28]</ref>: ''The operation allSuppliers results in a Set containing all the ModelElements that are suppliers of this ModelElement, including the suppliers of these ModelElements. This is the transitive closure''.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="25" xml:id="foot_23"><p>The part may be contained in other aggregates.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="26" xml:id="foot_24"><p>allOppositeAssociationEnds is an additional operation defined in the UML specification<ref type="bibr" target="#b25">[28]</ref>: ''The operation allOppositeAssociation-Ends results in a set of all AssociationEnds, including the inherited ones, that are opposite to the Classifier''.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="27" xml:id="foot_25"><p> 27  The ''Time dimension'' is treated differently from the others in OLAP tools.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="28" xml:id="foot_26"><p>In UML, an association can be connected to two or more elements. S. Luja ´n-Mora et al. / Data &amp; Knowledge Engineering 59 (2006) 725-769</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="33" xml:id="foot_27"><p>allContents is an additional operation defined in the UML specification<ref type="bibr" target="#b25">[28]</ref>: ''The operation allContents results in a Set containing all ModelElements contained by the Namespace''.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgement</head><p>This work has been partially supported by the METASIGN project (TIN2004-00779) from the Spanish Ministry of Education and Science, by the DADASMECA project (GV05/220) from the Regional Government of Valencia, and by the MESSENGER (PCC-03-003-1) and DADS (PBC-05-012-2) projects from the Regional Science and Technology Ministry of Castilla-La Mancha (Spain).</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">A case study</head><p>Throughout this section, we will use a running example to illustrate the use of our OO MD approach. We use the same example presented in Section 2 and inspired by a case study from <ref type="bibr" target="#b12">[13]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.">Requirements</head><p>During this step, what the end users expect to do with the data warehouse is captured: the end users should specify the most interesting measures and aggregations, the analysis dimensions, the queries used to generate periodical reports, the update frequency of the data, etc. We model the requirements with use cases. The UML provides the use case diagram for visual modeling of use cases. Nevertheless, there is no UML standard for a use case specification. However, we follow the common template defined in <ref type="bibr" target="#b3">[4]</ref>, which specifies for every use case a name, a unique identifier, the actor involved in the use case, the system state before the use can begin (preconditions), the actual steps of the use case (flow of events), and the system state when the use case is over (postconditions).</p><p>In this section, we model a couple of requirements for our case study. From interviews to the end users, we have detected two requirements related to sales managers, so the resulting schema will be able to achieve these requirements:</p><p>• A sales manager needs to analyze the sales rates per month regarding the city where the customer lives.</p><p>• A sales manager needs to know the different car models with higher sales rates in cities with more than 100,000 inhabitants.</p><p>For example, in Fig. <ref type="figure">18</ref>, we show the template we apply to describe a use case. Each use case has a name, a unique identifier, a list of actors involved in the use case, and a specification. In this section, we present an extension to the UML in the form of a profile. Unfortunately, it does not exist a standard way for defining a UML profile.</p><p>According to <ref type="bibr" target="#b7">[8]</ref>, ''An extension to the UML begins with a brief description and then lists and describes all of the stereotypes, tagged values, and constraints of the extension. In addition to these elements, an extension contains a set of well-formedness rules. These rules are used to determine whether a model is semantically consistent with itself''. Therefore, based on this quote and our personal experience, we define our UML extension for MD modeling following the schema shown in Table <ref type="table">3</ref>.</p><p>For the definition of the stereotypes and tagged values, we follow the structure of the examples included in the UML specification <ref type="bibr" target="#b25">[28]</ref>. In Tables <ref type="table">4</ref> and<ref type="table">5</ref> we show the schemas followed in our definition of the stereotypes and the tagged values, respectively.</p><p>For the definition of well-formedness rules and constraints we use the OCL <ref type="bibr" target="#b25">[28]</ref>. In this way, we avoid an arbitrary use of the profile. Moreover, using OCL has several benefits: it is a well known constraint language,  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.4. Well-formedness rules</head><p>There are only two rules for the Namespace element:</p><p>• All the classes in a MD model must be Fact, Dimension, or Base: 33  self.allContents -&gt; forAll(ocllsKindOf(Class) implies (ocllsTypeOf(Fact) or ocllsTypeOf(Dimension) or ocllsTypeOf(Base))) • All the packages in a MD model must be StarPackage, FactPackage, or DimensionPackage:</p><p>self.allContents -&gt; forAll(ocllsKindOf(Package) implies (ocllsTypeOf(StarPackage) or ocllsTypeOf(FactPackage) or ocllsTypeOf(Dimension Package)))</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.5. Comments</head><p>Next, we summarize the UML elements we have just used or defined to consider the main relevant MD properties:</p><p>• Facts and dimensions: they are represented by means of Fact and Dimension stereotypes.</p><p>• Many-to-many relationships: thanks to the flexibility of the shared-aggregation relationships, we can consider many-to-many relationships between facts and particular dimensions by means of the 1.. * cardinality on the dimension class role. In these cases, a DegenerateFact can be defined to add more information. </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A framework for the classification and description of multidimensional data models</title>
		<author>
			<persName><forename type="first">A</forename><surname>Abello</surname></persName>
		</author>
		<author>
			<persName><forename type="first">´</forename></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Samos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Saltor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 12th International Conference on Database and Expert Systems Applications (DEXA&apos;01)</title>
		<meeting>the 12th International Conference on Database and Expert Systems Applications (DEXA&apos;01)<address><addrLine>Munich, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-09">September 2001</date>
			<biblScope unit="page" from="668" to="677" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">YAM2 (Yet Another Multidimensional Model): an extension of UML</title>
		<author>
			<persName><forename type="first">A</forename><surname>Abello</surname></persName>
		</author>
		<author>
			<persName><forename type="first">´</forename></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Samos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Saltor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Database Engineering &amp; Applications Symposium (IDEAS 2002)</title>
		<meeting><address><addrLine>Edmonton, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-07">July 2002</date>
			<biblScope unit="page" from="172" to="181" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Benefits of an object-oriented multidimensional data model</title>
		<author>
			<persName><forename type="first">A</forename><surname>Abello</surname></persName>
		</author>
		<author>
			<persName><forename type="first">´</forename></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Samos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Saltor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Symposium on Objects and Databases in 14th European Conference on Object-Oriented Programming (ECOOP&apos;00)</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting>the Symposium on Objects and Databases in 14th European Conference on Object-Oriented Programming (ECOOP&apos;00)<address><addrLine>Sophia Antipolis and Cannes, France</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2000-06">June 2000. 2000</date>
			<biblScope unit="volume">144</biblScope>
			<biblScope unit="page" from="141" to="152" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">UML and the Unified Process. Practical Object-Oriented Analysis &amp; Design</title>
		<author>
			<persName><forename type="first">J</forename><surname>Arlow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Neustadt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Object Technology Series</title>
		<imprint>
			<date type="published" when="2002">2002</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Finding your way through multidimensional data models</title>
		<author>
			<persName><forename type="first">M</forename><surname>Blaschka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Sapia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Ho ¨fling</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Dinter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th International Conference on Database and Expert Systems Applications (DEXA &apos;98)</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting>the 9th International Conference on Database and Expert Systems Applications (DEXA &apos;98)<address><addrLine>Vienna, Austria</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1998-08">August 1998. 1998</date>
			<biblScope unit="volume">1460</biblScope>
			<biblScope unit="page" from="198" to="203" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">The Unified Modeling Language: User Guide</title>
		<author>
			<persName><forename type="first">G</forename><surname>Booch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rumbaugh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Jacobson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Object Technology Series</title>
		<imprint>
			<date type="published" when="1999">1999</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">An overview of data warehousing and OLAP technology</title>
		<author>
			<persName><forename type="first">S</forename><surname>Chaudhuri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Dayal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Sigmod Record</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="65" to="74" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Building Web Applications with UML</title>
		<author>
			<persName><forename type="first">J</forename><surname>Conallen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Object Technology Series</title>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Classification of model transformation approaches</title>
		<author>
			<persName><forename type="first">K</forename><surname>Czarnecki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Helsen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the OOPSLA &apos;03 Workshop on Generative Techniques in the Context of Model-Driven Architecture</title>
		<meeting>the OOPSLA &apos;03 Workshop on Generative Techniques in the Context of Model-Driven Architecture<address><addrLine>Anaheim, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-10">October 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName><surname>Empowertec</surname></persName>
		</author>
		<author>
			<persName><surname>Oclarity</surname></persName>
		</author>
		<ptr target="&lt;http://www.empowertec.de/products/rational-rose-ocl.htm&gt;" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Applying the Standard Object Modeling Language</title>
		<author>
			<persName><forename type="first">M</forename><surname>Fowler</surname></persName>
		</author>
		<author>
			<persName><surname>Distilled</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Object Technology Series</title>
		<imprint>
			<date type="published" when="1998">1998</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Multi-view software evolution: a UML-based framework for evolving object-oriented software</title>
		<author>
			<persName><forename type="first">R</forename><surname>France</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Bieman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Conference on Software Maintenance (ICSM 2001)</title>
		<meeting>the International Conference on Software Maintenance (ICSM 2001)<address><addrLine>Florence, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-11">November 2001</date>
			<biblScope unit="page" from="386" to="397" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Object-Oriented Data Warehouse Design</title>
		<author>
			<persName><forename type="first">W</forename><surname>Giovinazzo</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>Prentice-Hall</publisher>
			<pubPlace>New Jersey, USA</pubPlace>
		</imprint>
	</monogr>
	<note>Building a Star Schema</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">The dimensional fact model: a conceptual model for data warehouses</title>
		<author>
			<persName><forename type="first">M</forename><surname>Golfarelli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Maio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Rizzi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Cooperative Information Systems (IJCIS)</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">2-3</biblScope>
			<biblScope unit="page" from="215" to="247" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Conceptual data warehouse design</title>
		<author>
			<persName><forename type="first">B</forename><surname>Husemann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lechtenborger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Vossen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2nd International Workshop on Design and Management of Data Warehouses (DMDW&apos;00)</title>
		<meeting>the 2nd International Workshop on Design and Management of Data Warehouses (DMDW&apos;00)<address><addrLine>Stockholm, Sweden</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000-06">June 2000</date>
			<biblScope unit="page" from="3" to="9" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Building the Data Warehouse</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">H</forename><surname>Inmon</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992">1992. 2002</date>
			<publisher>John Wiley &amp; Sons</publisher>
		</imprint>
	</monogr>
	<note>Last edition: 3rd edition</note>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Model transformation at Inria</title>
		<ptr target="&lt;http://modelware.inria.fr/&gt;2004" />
		<imprint/>
		<respStmt>
			<orgName>Institut National de Recherche en Informatique et en Automatique (INRIA)</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><surname>Kimball</surname></persName>
		</author>
		<title level="m">The Data Warehouse Toolkit</title>
		<imprint>
			<publisher>John Wiley &amp; Sons</publisher>
			<date type="published" when="1996">1996. 2002</date>
		</imprint>
	</monogr>
	<note>Last edition: 2nd edition</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Modelling large scale OLAP scenarios</title>
		<author>
			<persName><forename type="first">W</forename><surname>Lehner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th International Conference On Extending Database Technology (EDBT&apos;98)</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting>the 6th International Conference On Extending Database Technology (EDBT&apos;98)<address><addrLine>Valencia, Spain</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1998-03">March 1998. 1998</date>
			<biblScope unit="volume">1377</biblScope>
			<biblScope unit="page" from="153" to="167" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">A data warehouse engineering process</title>
		<author>
			<persName><forename type="first">S</forename><surname>Luja ´n-Mora</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Trujillo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Third International Conference (ADVIS&apos;04)</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2004">2004</date>
			<biblScope unit="volume">3261</biblScope>
			<biblScope unit="page" from="14" to="23" />
		</imprint>
	</monogr>
	<note>Advances in Information Systems</note>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Physical modeling of data warehouses using UML</title>
		<author>
			<persName><forename type="first">S</forename><surname>Luja ´n-Mora</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Trujillo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM 7th International Workshop on Data warehousing and OLAP (DOLAP&apos;04)</title>
		<meeting>the ACM 7th International Workshop on Data warehousing and OLAP (DOLAP&apos;04)<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="48" to="57" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Physical Modeling of Data Warehouses Using UML Component and Deployment Diagrams</title>
		<author>
			<persName><forename type="first">S</forename><surname>Luja ´n-Mora</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Trujillo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Database Management</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
	<note>in press</note>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Extending UML for multidimensional modeling</title>
		<author>
			<persName><forename type="first">S</forename><surname>Luja ´n-Mora</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Trujillo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 5th International Conference on the Unified Modeling Language (UML &apos;02)</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting>the 5th International Conference on the Unified Modeling Language (UML &apos;02)<address><addrLine>Dresden, Germany</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2002-09">September 2002. 2002</date>
			<biblScope unit="volume">2460</biblScope>
			<biblScope unit="page" from="290" to="304" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<author>
			<persName><forename type="first">S</forename><surname>Luja ´n-Mora</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Trujillo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 21st International Conference on Conceptual Modeling (ER&apos;02)</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting>the 21st International Conference on Conceptual Modeling (ER&apos;02)<address><addrLine>Tampere, Finland</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2002-10">October 2002. 2002</date>
			<biblScope unit="volume">2503</biblScope>
			<biblScope unit="page" from="199" to="213" />
		</imprint>
	</monogr>
	<note>Multidimensional Modeling with UML Package Diagrams</note>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">UML for Database Design</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">J</forename><surname>Naiburg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Maksimchuk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Object Technology Series</title>
		<imprint>
			<date type="published" when="2001">2001</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Unified Modeling Language Specification</title>
		<ptr target="&lt;http://www.omg.org/cgi-bin/doc7formal/03-03-01" />
		<imprint>
			<date type="published" when="2003-03">March 2003</date>
		</imprint>
		<respStmt>
			<orgName>Object Management Group</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Model Driven Architecture (MDA)</title>
		<ptr target="&lt;http://www.omg.org/mda/&gt;2004" />
		<imprint/>
		<respStmt>
			<orgName>Object Management Group (OMG)</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Oracle Business Intelligence Discoverer</title>
		<author>
			<persName><surname>Oracle</surname></persName>
		</author>
		<ptr target="&lt;http://www.oracle.com/technology/products/-discoverer/index.html&gt;" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Revised submission for MOF 2.0 Query/Views/Transformations RFP</title>
		<author>
			<persName><surname>Qvt-Partners</surname></persName>
		</author>
		<ptr target="&lt;http://qvtp.org/downloads/1.1/qvtpartners1.1.pdf&gt;" />
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Using the Rose Extensibility Interface</title>
		<imprint>
			<date type="published" when="2001">2001</date>
			<publisher>Rational Software Corporation</publisher>
		</imprint>
		<respStmt>
			<orgName>Rational Software Corporation</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">On modeling and predicting query behavior in OLAP systems</title>
		<author>
			<persName><forename type="first">C</forename><surname>Sapia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Workshop on Design and Management of Data Warehouses (DMDW&apos;99)</title>
		<meeting>the International Workshop on Design and Management of Data Warehouses (DMDW&apos;99)<address><addrLine>Heidelberg, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-06">June 1999</date>
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Extending the E/R model for the multidimensional paradigm</title>
		<author>
			<persName><forename type="first">C</forename><surname>Sapia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Blaschka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Ho ¨fling</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Dinter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1st International Workshop on Data Warehouse and Data Mining (DWDM&apos;98)</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting>the 1st International Workshop on Data Warehouse and Data Mining (DWDM&apos;98)<address><addrLine>Singapore</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1998-11">November 1998. 1998</date>
			<biblScope unit="volume">1552</biblScope>
			<biblScope unit="page" from="105" to="116" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title/>
		<author>
			<persName><forename type="middle">Org</forename><surname>Tigris</surname></persName>
		</author>
		<author>
			<persName><surname>Argouml</surname></persName>
		</author>
		<ptr target="&lt;http://argouml.tigris.org/features.html&gt;" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">A UML based approach for modeling ETL processes in data warehouses</title>
		<author>
			<persName><forename type="first">J</forename><surname>Trujillo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Luja ´n-Mora</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 22nd International Conference on Conceptual Modeling (ER&apos;03)</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting>the 22nd International Conference on Conceptual Modeling (ER&apos;03)<address><addrLine>Chicago, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2003-10">October 2003. 2003</date>
			<biblScope unit="volume">2813</biblScope>
			<biblScope unit="page" from="307" to="320" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Designing data warehouses with OO conceptual models</title>
		<author>
			<persName><forename type="first">J</forename><surname>Trujillo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Palomar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Go ´mez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">Y</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="66" to="75" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
	<note>Special issue on Data Warehouses</note>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<author>
			<persName><forename type="first">N</forename><surname>Tryfona</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Busborg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">G</forename><surname>Christiansen</surname></persName>
		</author>
		<title level="m">Proceedings of the ACM 2nd International Workshop on Data warehousing and OLAP (DOLAP&apos;99)</title>
		<meeting>the ACM 2nd International Workshop on Data warehousing and OLAP (DOLAP&apos;99)<address><addrLine>Kansas City, Missouri, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-11">November 1999</date>
			<biblScope unit="page" from="3" to="8" />
		</imprint>
	</monogr>
	<note>starER: conceptual model for data warehouse design</note>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">He received a BS in 1997, a Master in Computer Science in 1998, and a Ph.D. in Computer Science from the University of Alicante (Spain) in 2005. His research spans the fields of Multidimensional Databases, Data Warehouses, OLAP techniques, Database Conceptual Modeling and Object Oriented Design, UML, Web engineering and Web programming. He is author of several papers in national journals and international conferences</title>
		<author>
			<persName><forename type="first">J</forename><surname>Warmer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kleppe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Precise Modeling with UML</title>
		<title level="s">Object Technology Series</title>
		<imprint>
			<publisher>Addison-Wesley</publisher>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
	<note>Sergio Luja ´n-Mora is a lecturer at the Computer Science School at the University of Alicante, Spain. such as ER, UML, CAiSE, and DOLAP. Contact him at sergio.lujan@ua.es</note>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">His research interests include database modeling, conceptual design of data warehouses, multidimensional databases, data warehouse quality and security, OLAP, and object oriented analysis and design with UML. He has published over 40 papers in national and international conferences and journals such as ER, UML, CAiSE, ADBIS, WAIM, DAWAK, JDMS, IEEE Computer and DSS journal</title>
		<author>
			<persName><forename type="first">Juan</forename><surname>Trujillo</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
		<respStmt>
			<orgName>Computer Science School at the University of Alicante, Spain. Trujillo received a Ph.D. in Computer Science from the University of Alicante (Spain</orgName>
		</respStmt>
	</monogr>
	<note>He is a Program Committee member of several workshops and conferences such as ER, BP-UML, JISBD, DOLAP, and SCI. He served as a program co-chair for DAWAK 2005 and 2006 and as a program chair for BP-UML. 05 and DOLAP&apos;05. Contact him at jtrujillo@dlsi.ua.es</note>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">His research focuses on practical application of modeling and design theory to realworld problems. His current research areas include database modeling and design, design and performance optimization of data warehouses and OLAP, database systems for Web-based systems, bioinformatics, and object-oriented analysis and design with UML. He has published more than 120 refereed technical articles in various journals and international conferences</title>
		<author>
			<persName><surname>Ksea</surname></persName>
		</author>
		<author>
			<persName><surname>Kocsea</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">He has won twelve research awards from the annual Drexel Sigma Xi Scientific Research Competitions or annual Drexel Research Days. Dr. Song has won three teaching awards from Drexel University: Exemplary Teaching Award in 1992, Teaching Excellence Award in 2000, and the Lindback Distinguished Teaching Award in</title>
		<meeting><address><addrLine>Philadelphia, Pennsylvania</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="1988">1988. 2004. 2001</date>
		</imprint>
		<respStmt>
			<orgName>College of Information Science and Technology at Drexel University</orgName>
		</respStmt>
	</monogr>
	<note>He served as a program co-chair of CIKM &apos;99, DOLAP &apos;98, DOLAP &apos;99, ER &apos;03, and DGOV &apos;04. He is a co-editor-in-chief of the Journal of System and Management Sciences. He is also an associate editor for the Journal of Database Management and International Journal of E-Business Research. He is a member of ACM</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
