<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Evolutionary Discrete Firefly Algorithm for Travelling Salesman Problem</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Kusuma</forename><surname>Gilang</surname></persName>
							<email>gilang.kusuma@live.com</email>
							<affiliation key="aff0">
								<orgName type="department">The faculty of Informatics</orgName>
								<orgName type="institution">Telkom Institute of Technology</orgName>
								<address>
									<addrLine>Jl. Telekomunikasi No. 1 Terusan Buah Batu</addrLine>
									<postCode>40257</postCode>
									<settlement>Bandung</settlement>
									<region>West Java</region>
									<country key="ID">Indonesia</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Suyanto</forename><surname>Jati</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">The faculty of Informatics</orgName>
								<orgName type="institution">Telkom Institute of Technology</orgName>
								<address>
									<addrLine>Jl. Telekomunikasi No. 1 Terusan Buah Batu</addrLine>
									<postCode>40257</postCode>
									<settlement>Bandung</settlement>
									<region>West Java</region>
									<country key="ID">Indonesia</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Evolutionary Discrete Firefly Algorithm for Travelling Salesman Problem</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">CBEA79E440478A48C0ECA4A5552F5F19</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T11:34+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>evolutionary firefly algorithm</term>
					<term>travelling salesman problem</term>
					<term>discrete distance</term>
					<term>movement scheme</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper addresses how to apply firefly algorithm (FA) for travelling salesman problem (TSP). Two schemes are studied, i.e. discrete distance between two fireflies and the movement scheme. Computer simulation shows that the simple form of FA without combination with other methods performs very well to solve some TSP instances, but it can be trapped into local optimum solutions for some other instances.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Traveling Salesman Problem (TSP) is one of the most intensively studied problems all round the world. TSP is although looking very simple problem but it is an important problem of the classical optimization problems that are difficult to solve conventionally. Basically in this problem a salesman needs to visit each city one time and returns back to the city from the start point of travelling. Exact completion on this issue will involve algorithms that require seeking the possibility of all the existing solutions so this problem is also belonging to the class of "NP-Complete" problems. As a result, execution time complexity of this algorithm will be exponential to the size of the input given. cities with deviation of 0% compare to the known optimum solution. It also solved a TSP of 13,509 cities with deviation only 0.74 %.</p><p>Firefly algorithm (FA) is one of the nature-inspired metaheuristic algorithms developed by Xin-She Yang <ref type="bibr" target="#b7">[7]</ref>, originally designed to solve continues optimization problem <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b8">[8]</ref>. However, FA can be discretized to solve a permutation problem, such as flow shop scheduling problems <ref type="bibr" target="#b5">[5]</ref>. In this research, evolutionary discrete FA (EDFA) is proposed to solve TSP. Two schemes are studied, i.e. discrete distance between two fireflies and the movement scheme. This study is focused on the simple form of FA without combination with any other method. Some TSP instances studied here are the small ones with up to 666 cities. However, some ideas to improve the FA also slightly discussed at the end of this paper, but no deep analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Evolutionary Discrete Firefly Algorithm</head><p>Nature-inspired methodologies are among the most powerful algorithms for optimization problems. FA is a novel nature-inspired algorithm inspired by social behavior of fireflies. Firefly is one of the most special, captivating and fascinating creature in the nature. There are about two thousand firefly species, and most fireflies produce short and rhythmic flashes. The rate and the rhythmic flash, and the amount of time form part of the signal system which brings both sexes together. Therefore, the main part of a firefly's flash is to act as a signal system to attract other fireflies. By idealizing some of the flashing characteristics of fireflies, firefly-inspired algorithm was presented by Xin-She Yang <ref type="bibr" target="#b7">[7]</ref>. Firefly-inspired algorithm uses the following three idealized rules: 1) all fireflies are unisex which means that they are attracted to other fireflies regardless of their sex; 2) the degree of the attractiveness of a firefly is proportion to its brightness, thus for any two flashing fireflies, the less brighter one will move towards the brighter one and the more brightness means the less distance between two fireflies. If there is no brighter one than a particular firefly, it will move randomly; and 3) the brightness of a firefly is determined by the value of the objective function <ref type="bibr" target="#b7">[7]</ref>. For a maximization problem, the brightness can be proportional to the value of the objective function. Other forms of brightness can be defined in a similar way to the fitness function in genetic algorithms <ref type="bibr" target="#b8">[8]</ref>.</p><p>Based on <ref type="bibr" target="#b8">[8]</ref>, FA is very efficient in finding the global optima with high success rates. Simulation by Xin-She Yang shows that FA is superior to both PSO and GA in terms of both efficiency and success rate <ref type="bibr" target="#b8">[8]</ref>. Lukasik and Zak also study FA for continuous constrained optimization task. Their experiment demonstrates the efficiency of FA <ref type="bibr" target="#b1">[2]</ref>. These facts give inspiration to investigate how optimum FA in solving TSP. The challenges are how to design discrete distance between two fireflies and how they move for coordination.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">The Representation of Firefly</head><p>A solution representation for the TSP is a permutation representation as illustrated by Figure <ref type="figure" target="#fig_0">1</ref>. Here, a firefly represents one solution. It is just like a chromosome that represents an individual in genetic algorithm. In this representation, an element of array represents a city (node) and the index represents the order of a tour. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Distance</head><p>In continuous optimization problem, distance between two fireflies is simply calculated using Euclidian distance. For TSP, distance between any two fireflies i and firefly j can be defined as the number of different arc between them. In Figure <ref type="figure">2</ref>, three arcs 12-7, 6-15, and 5-11 in firefly i do not exist in firefly j. Hence, the number of different arcs between firefly i and firefly j is three. Then, the distance between two fireflies is calculated using formula</p><formula xml:id="formula_0">x 10,<label>(1)</label></formula><p>where r is the distance between any two fireflies, A is the total number of different arcs between two fireflies, and N is number of cities. The formula scales r in the interval [0, 10] as r will be used in attractiveness calculation.</p><p>Fig. <ref type="figure">2</ref>. The distance between two fireflies i and j is defined as the number of different arcs between them</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Attractiveness</head><p>In the original FA, the main form of attractiveness function can be any monotonic decreasing function ,</p><p>where is the distance between two fireflies, is the attractiveness at r = 0, and γ is a fixed light absorption coefficient. This scheme is completely adopted by EDFA.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Light Absorption</head><p>In essence, light absorption coefficient γ characterizes the variation of attractiveness value of firefly. Its value is very important in determining the speed of convergence and how the FA behaves. In theory, γ ∈ [0, ∞), but in practice γ is determined by the characteristics of the problem to be optimized.</p><p>In condition where γ → 0, the attractiveness will be constant and β = β 0 . In this case, the attractiveness of a firefly will not decrease when viewed by another. If γ → firefly i firefly j</p><p>∞, this means the value of attractiveness of a firefly is close to zero when viewed by another firefly. It is equivalent to cases where the fireflies fly in a very foggy region randomly. No other fireflies can be seen, and each firefly roams in a completely random way. Therefore, this corresponds to the completely random search method. The coefficient γ functions to determine how much light intensity changes to the attractiveness of a firefly. In this research, γ is in the interval [0.01, 0.15] so that the attractiveness of a firefly viewed by the others will follow the Figure <ref type="figure">3</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fig. 3. The correlation of distance and attractiveness</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">Movement</head><p>The movement of a firefly i attracted to another brighter (more attractive) firefly j is determined by</p><formula xml:id="formula_2">2, ,<label>(3)</label></formula><p>where is distance between firefly i and j. The length of movement of a firefly will be randomly selected from 2 to . When a firefly moves, existing solutions in the firefly is changed. Since the representation of firefly is a permutation representation, then we use Inversion Mutation to represent the movement. With inversion mutation, the path that has been formed can be maintained so the good path formed previously is not damaged.</p><p>Actually, firefly in EDFA has no direction to move. Hence, it moves using Evolution Strategies (ES) concept. Each firefly will move using inversion mutation for m times. First, index on the chromosome will be selected randomly, after it carried an inversion mutation. In other words, each firefly will have m new solutions. After n fireflies move and produce n x m new solutions, then n best fireflies will be selected as the new population.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6">EDFA Scheme</head><p>The scheme of EDFA is illustrated by the following pseudo code. First, each firefly generates an initial solution randomly. For each firefly, find the brightest or the most attractive firefly. If there is a brighter firefly, then the less bright firefly will move towards the brighter one and if there is no brighter one than a particular firefly, it will move randomly. When a firefly moves, existing solution produced by the firefly is changed. Each firefly move as much as m times. So, there will be (m x n) + 1 fireflies at the end of iteration since only the best firefly will be included in selection process for the next iteration. Then, n best fireflies will be chosen based on an objective function for the next iteration. This condition will continue until the maximum iteration is reached. </p><formula xml:id="formula_3">Input: Objective function f(x), x = (x1,… xd) T {cost</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Results and Discussions</head><p>In this study, EDFA is applied for 7 TSP instances downloaded from TSPLIB <ref type="bibr" target="#b6">[6]</ref>. Table <ref type="table" target="#tab_1">1</ref> lists the problem names, numbers of cities, and the lengths of the optimal tour. In <ref type="bibr" target="#b6">[6]</ref>, the types of TSP instances are Euclidian distances. A TSP instance provides some cities with their coordinates. The number in the name of an instance represents the number of provided cities. For example, ulysses16 provides 16 cities with their coordinates. The problem is what the best tour to visit the 16 cities, according to their Euclidian distances, with a condition where each city should be visited only once. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Firefly Population</head><p>Population size (n) critically determine the computation time. Here, EDFA is tested using various population sizes on problem gr202 to investigate its correlation with number of trials needed by EDFA to get the optimum solution. Figure <ref type="figure" target="#fig_2">4</ref> represents the correlation of the population size with the average trials to reach the optimum solution (with accuracy of 100%). Average trial decreases when the population size is increased from 5, 10 and 15. But, the average trial increases when the population size is 20 or more. Large population does not guarantee that firefly will reach best solution more quickly. According to Figure <ref type="figure" target="#fig_2">4</ref>, the best population size is 15. The number of population size determines the number of solutions in each generation. In finding the solution, a firefly with less bright light will follow another one with brighter light (better solution). But, in one generation there could be some fireflies having the same solutions so that the movement of a firefly does not generate better solution. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Effects of Light Absorption</head><p>Light absorption (γ) does not critically determine the computation time. Various values of light absorption were tested on problem gr202 to evaluate its correlation with number of trials needed by EDFA to get the optimum solution. Figure <ref type="figure" target="#fig_4">5</ref> illustrates the relationship between the population size and the average trials to get the optimum solution. Any light absorption, from 0.01 to 0.15, gives quite similar average trials. Thus, the light absorption does not significantly affect the average trials of EDFA. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Number of Moves</head><p>In EDFA, fireflies have no direction to move. Hence, fireflies move based on a way like in evolution strategies concept. As default, each firefly will make the process of inversion mutation for 8 times. Based on the previous result, the best average trials for problem gr202 can be reached when the population size is 15 and the number of moves is 8. Thus, the total number of moves for each generation is 120. Various numbers of moves, illustrated by Table <ref type="table" target="#tab_2">2</ref>, are tested on problem gr202 to evaluate its correlation with number of trials needed by EDFA to get the optimum solution. The simulation is run for 30 times for each number of moves to get the average trials.</p><p>The results show that, in the beginning, theïaverage trials decrease as the number of moves increase. But, when the number of move is 12 or above, the average trials increase. According to Table <ref type="table" target="#tab_2">2</ref> and Figure <ref type="figure">6</ref>, the best number of moves is 11 with population size is 11. This setting parameter means that on each generation there will be 11 fireflies and each fireflies move 11 times. The other number of moves, in the interval of 7 and 10, are considerable as the results are quite similar.  Fig. <ref type="figure">6</ref>. The correlation of the number of moves with the average trials needed by EDFA to reach the known optimum solution</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Performance of EDFA</head><p>EDFA is examined to solve 7 TSP instances to see its performance. In this research, EDFA uses population size of 15 fireflies and the number of light absorption is 0.03. Using those parameters, EDFA are examined using 7 TSP instances. Table <ref type="table" target="#tab_3">3</ref> shows the worst, best and average accuracy for the 7 instances. The accuracy is calculated by a formula in Equation (4). EDFA always get the best solution for ulysses16, ulysses22, gr202 and gr666 for every runs. However, EDFA is not optimal for three instances: tsp225, a280 and pcb442.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>100%</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Comparison of EDFA with Memetic Algorithm</head><p>Various studies show that Memetic algorithm can find 76% optimal solution for travelling salesman problem <ref type="bibr" target="#b0">[1]</ref>. Now the EDFA will be compared to Memetic algorithm for 7 TSP instances. EDFA, implemented using visual C# .Net, is run 30 times. The results are summarized in Table <ref type="table" target="#tab_4">4</ref>. The Opt/Runs means how many times the algorithm reach the known optimum solution from the total number of runs. For example, 19/30 represents the algorithm reach the known optimum solution for 19 times from 30 runs. In the table, EDFA performed slightly better for gr202 and significantly better for gr666 instance than Memetic algorithm. But, for three TSP instances, tsp225, a280 and pcb442, EDFA performed much worse, where it never reached the known optimum solution. Even, according to Table <ref type="table" target="#tab_3">3</ref>, it reached solutions with low accuracies, only 88%, from the known optimum solutions. This shows that EDFA can be trapped into local optimum solutions for some instances.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6">Some Ideas to Improve EDFA</head><p>In order to solve TSP, we can improve EDFA by giving direction to the fireflies. Direction can be formed by dividing the TSP instance problem into multiple sub partitions. Each sub partitions can be considered as the direction. We can divide the problem using various ways. The easiest way to divide is based on the coordinates, by X or Y axis. Figure <ref type="figure">7</ref> showed TSP instance divided into two sub partitions by Y axis. Another way is to use K-mean to divides the problem into multiple sub-partitions.</p><p>Then solves each sub par produce a complete tour.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fig. 7. TSP instan</head><p>In EDFA, the partition h attracted to another brighte steps should be taken for e in a vector. If there are tw movement for the first part firefly seems to have a dire be more than two. If a T distributed into 10 clusters Hence, a firefly can be seen with a long of step and a dir EDFA could be combine (LK). Greedy works simply necessary that each vertex Hamiltonian cycle by first p the tour until all the cities procedure until all cities be tour for initialization of fi generates an optimal solutio as follows. First, it removes the other cities in such a wa also be used to update each o rtition separately, and finally use the partial solution nce ulysses16 divide into two sub partitions by Y axis has a role in the movement of fireflies ïïWhen a firefly er (more attractive) firefly j, it calculates the long of ach partition. Here, a partition can be seen as a dimens wo partitions, then a firefly can, for example, do a lo tition and short movement for the second one. Hence, ection of movement. However, the number of partition TSP instance has thousands of cities and the cities s, then the instance is better to divide into 10 partitio n as an object that moves in 10 dimensional vector spa rection. ed with other methods such as Greedy and Lin Kernig y by growing Hamiltonian cycle in the graph in which i x should be visited only once. Greedy can create picking the shortest edge and then add this shortest edge s are included in the tour. Greedy can repeat this wh the part of the Hamiltonian cycle. Greedy can create be ireflies. LK is one of the best algorithms of TSP wh on for the TSP. LK is the most powerful heuristic. It wo s an edge from the current tour, and tries to add edges w ay that will create the new shortest tour. In EDFA, LK partial solution (partition). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Conclusion</head><p>The proposed method, EDFA, has been successfully implemented to solve TSP. The simulation results indicate that EDFA performs very well for some TSP instances compare to Memetic algorithm. But, it can be trapped into local optimum solutions for some instances since it does not have a direction to do a movement. For improvement, it could be combined with other techniques such as greedy search for the initialization of firefly population or Lin Kernighan algorithm to update each partial solution in a partition and to further improvement of the tour.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. The permutation representation of a solution</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Correlation of the population size and the average trials needed by EDFA to get the optimum solution</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Correlation of the light absorption and the average trials needed by EDFA to get the optimum solution</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>function} Initialize a population of fireflies xi (i = 1, 2, …, n) Define light absorption coefficient γ and number of moves m</figDesc><table><row><cell>Output:</cell><cell>{parameters}</cell></row><row><cell>xi min</cell><cell></cell></row><row><cell>begin</cell><cell></cell></row><row><cell>for i = 1 to n do</cell><cell></cell></row><row><cell>xi ⟵ Generate_Initial_Solution</cell><cell></cell></row><row><cell>endfor</cell><cell></cell></row><row><cell>repeat</cell><cell></cell></row><row><cell>for i = 1 to n do</cell><cell></cell></row><row><cell>xj ⟵ Find_Attractive_Firefly(xi)</cell><cell></cell></row><row><cell>if (xj ≠ null) then Move_Firefly(xi, xj) for m times</cell><cell>{move firefly i towards j}</cell></row><row><cell>else</cell><cell></cell></row><row><cell>Move_Random(xi) for m times</cell><cell>{firefly i move randomly}</cell></row><row><cell>endif</cell><cell></cell></row><row><cell>endfor</cell><cell></cell></row><row><cell>Select n brightest fireflies from (m x n) + 1</cell><cell></cell></row><row><cell>until stop condition true</cell><cell></cell></row><row><cell>end</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 .</head><label>1</label><figDesc>Summary of 7 TSPs taken from TSPLIB: problem names, number of cities (nodes) and the length of the optimal tour</figDesc><table><row><cell cols="2">Problem names Number of cities</cell><cell>Length of the optimal tour</cell></row><row><cell>ulysses16</cell><cell>16</cell><cell>6859</cell></row><row><cell>ulysses22</cell><cell>22</cell><cell>7013</cell></row><row><cell>gr202</cell><cell>202</cell><cell>40160</cell></row><row><cell>tsp225</cell><cell>225</cell><cell>3845</cell></row><row><cell>a280</cell><cell>280</cell><cell>2578</cell></row><row><cell>pcb442</cell><cell>442</cell><cell>50778</cell></row><row><cell>gr666</cell><cell>666</cell><cell>294358</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 2 .</head><label>2</label><figDesc>Results of EDFA applied to gr202 with total trials around 120 in one generation</figDesc><table><row><cell>Problem</cell><cell>Number of</cell><cell>Population</cell><cell>Total moves per</cell><cell>Average</cell></row><row><cell>name</cell><cell>moves</cell><cell>size</cell><cell>generation</cell><cell>trials</cell></row><row><cell></cell><cell>4</cell><cell>30</cell><cell>120</cell><cell>1,342,200</cell></row><row><cell></cell><cell>5</cell><cell>24</cell><cell>120</cell><cell>1,070,808</cell></row><row><cell></cell><cell>6</cell><cell>20</cell><cell>120</cell><cell>854,568</cell></row><row><cell></cell><cell>7</cell><cell>17</cell><cell>119</cell><cell>717,974</cell></row><row><cell></cell><cell>8</cell><cell>15</cell><cell>120</cell><cell>704,232</cell></row><row><cell>gr202</cell><cell>9 10</cell><cell>13 12</cell><cell>117 120</cell><cell>656,405 630,096</cell></row><row><cell></cell><cell>11</cell><cell>11</cell><cell>121</cell><cell>586,898</cell></row><row><cell></cell><cell>12</cell><cell>10</cell><cell>120</cell><cell>694,920</cell></row><row><cell></cell><cell>13</cell><cell>9</cell><cell>117</cell><cell>763,261</cell></row><row><cell></cell><cell>14</cell><cell>9</cell><cell>126</cell><cell>681,609</cell></row><row><cell></cell><cell>15</cell><cell>8</cell><cell>120</cell><cell>662,808</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 3 .</head><label>3</label><figDesc>Results of EDFA applied to 7 TSP instances, 30 runs for each instance</figDesc><table><row><cell>Problem</cell><cell>Best solution</cell><cell></cell><cell cols="2">Accuracy (%)</cell><cell>Average time</cell></row><row><cell>names</cell><cell>known</cell><cell>Worst</cell><cell>Best</cell><cell>Average</cell><cell>(second)</cell></row><row><cell cols="2">ulysses16 6859</cell><cell cols="3">100.000 100.204 100.119</cell><cell>0.416</cell></row><row><cell cols="2">ulysses22 7013</cell><cell cols="3">100.000 100.211 100.207</cell><cell>6.590</cell></row><row><cell>gr202</cell><cell>40160</cell><cell cols="3">100.000 100.653 100.474</cell><cell>51.167</cell></row><row><cell>tsp225</cell><cell>3845</cell><cell>87.758</cell><cell cols="2">89.065 88.332</cell><cell>412.274</cell></row><row><cell>a280</cell><cell>2578</cell><cell>87.995</cell><cell cols="2">89.668 88.297</cell><cell>691.886</cell></row><row><cell>pcb442</cell><cell>50778</cell><cell>87.556</cell><cell cols="2">89.457 88.505</cell><cell>3404.211</cell></row><row><cell>gr666</cell><cell>294358</cell><cell>100</cell><cell cols="2">100.356 100.033</cell><cell>393.025</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 4 .</head><label>4</label><figDesc>The comparison between EDFA with Memetic algorithm</figDesc><table><row><cell>Problem</cell><cell>EDFA</cell><cell>Memetic algorithm (k=5%)</cell></row><row><cell>names</cell><cell>Opt/Runs</cell><cell>Opt/ Runs</cell></row><row><cell>ulysses16</cell><cell>30/30</cell><cell>30/30</cell></row><row><cell>ulysses22</cell><cell>30/30</cell><cell>30/30</cell></row><row><cell>gr202</cell><cell>30/30</cell><cell>29/30</cell></row><row><cell>tsp225</cell><cell>00/30</cell><cell>02/30</cell></row><row><cell>a280</cell><cell>00/30</cell><cell>19/30</cell></row><row><cell>pcb442</cell><cell>00/30</cell><cell>30/30</cell></row><row><cell>gr666</cell><cell>30/30</cell><cell>03/30</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgments. We would like to thank to Dr Xin-She Yang in Cambridge University for the suggestions and comments on the initial manuscript and our colleagues in Telkom Institute of Technology (IT Telkom) for the advices and motivations.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A New Memetic Algorithm for the Asymmetric Traveling Salesman Problem</title>
		<author>
			<persName><forename type="first">B</forename><surname>Luciana</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">M</forename><surname>França</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Pablo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Heuristics</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="483" to="506" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Firefly algorithm for Continuous Constrained Optimisation Tasks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Lukasik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Żak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Systems Research Institute, Polish. Academy of Sciences</title>
		<imprint>
			<biblScope unit="page" from="1" to="10" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Discrete Fuzzy Particle Swarm Optimization for Solving Travelling Salesman Problem</title>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">S</forename><surname>Niasar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Shanbezade</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M</forename><surname>Perdam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedingsof International Conference on Information and Financial Engineering</title>
		<meeting>of International Conference on Information and Financial Engineering</meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="162" to="165" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Using Genetic Algorithms to Optimize ACS-TSP</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">L</forename><surname>Pilat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>White</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Ant Algorithms</title>
		<editor>
			<persName><forename type="first">M</forename><surname>Dorigo</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">G</forename><forename type="middle">A</forename><surname>Di Caro</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">M</forename><surname>Sampels</surname></persName>
		</editor>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="volume">2463</biblScope>
			<biblScope unit="page" from="12" to="14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title/>
		<author>
			<persName><surname>Springer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
			<pubPlace>Heidelberg</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A Discrete Meta-Heuristic With Local Search for Makespan Minimization in Permutation Flow Shop Scheduling Problems</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">K</forename><surname>Sayadi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Industrial Engineering Computation</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="10" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title/>
		<ptr target="http://www.iwr.uini-heidelberg.de/groups/comopt/software/TSPLIB95/" />
	</analytic>
	<monogr>
		<title level="j">TSPLIB</title>
		<imprint>
			<biblScope unit="volume">95</biblScope>
			<date type="published" when="2011">2011</date>
			<publisher>Ruprecht -Karls -Universitat Heildelberg</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Nature-inspired Metaheuristic Algorithm</title>
		<author>
			<persName><forename type="first">X</forename><forename type="middle">S</forename><surname>Yang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008">2008</date>
			<publisher>Luniver Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Firefly Algorithms for Multimodal Optimization</title>
		<author>
			<persName><forename type="first">X</forename><forename type="middle">S</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SAGA 2009</title>
		<editor>
			<persName><forename type="first">O</forename><surname>Watanabe</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">T</forename><surname>Zeugmann</surname></persName>
		</editor>
		<meeting><address><addrLine>Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="volume">5792</biblScope>
			<biblScope unit="page" from="169" to="178" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Engineering Optimization: An Introduction with Metaheuristic Applications</title>
		<author>
			<persName><forename type="first">X</forename><forename type="middle">S</forename><surname>Yang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010">2010</date>
			<publisher>Wiley</publisher>
			<pubPlace>Chichester</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">An Evolutionary Algorithm for Large Traveling Salesman Problems</title>
		<author>
			<persName><forename type="first">H</forename><surname>Tsai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Tsai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Systems, Man, and Cybernetics, Part B</title>
		<imprint>
			<biblScope unit="page" from="1718" to="1729" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">An Efficient Bee Colony Optimization Algorithm for Travelling Salesman Problem Using Frequency-Based Pruning</title>
		<author>
			<persName><forename type="first">L</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">S</forename><surname>Chong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 7th IEEE International Conference on Industrial Informatics</title>
		<meeting>7th IEEE International Conference on Industrial Informatics</meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="775" to="782" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
