<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Operators and Laws for Combining Preference Relations</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Mark</forename><surname>Ryan</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Pierre-Yves</forename><surname>Schobbens</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Mathematical Institute</orgName>
								<orgName type="institution" key="instit1">HAJNAL ANDR ÉKA</orgName>
								<orgName type="institution" key="instit2">Hungarian Academy of Science</orgName>
								<address>
									<addrLine>Budapest Pf. 127 H-1364</addrLine>
									<country key="HU">Hungary</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">School of Computer Science</orgName>
								<orgName type="institution">University of Birmingham</orgName>
								<address>
									<addrLine>Edgbaston</addrLine>
									<postCode>B15 2TT</postCode>
									<settlement>Birmingham</settlement>
									<country key="GB">UK</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">Institut d&apos;Informatique</orgName>
								<orgName type="institution">Facultés Universitaires de Namur</orgName>
								<address>
									<addrLine>Rue Grandgagnage 21</addrLine>
									<postCode>5000</postCode>
									<settlement>Namur</settlement>
									<country key="BE">Belgium</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Operators and Laws for Combining Preference Relations</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">57C0770EF4804ECF3178BB1EF79E3BE4</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T12:31+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Preference relations</term>
					<term>priority relations</term>
					<term>default reasoning</term>
					<term>lexicographic combination</term>
					<term>Arrows theorem</term>
					<term>social choice</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The paper is a theoretical study of a generalization of the lexicographic rule for combining ordering relations. We define the concept of priority operator: a priority operator maps a family of relations to a single relation which represents their lexicographic combination according to a certain priority on the family of relations. We present four kinds of results.</p><p>¯We show that the lexicographic rule is the only way of combining preference relations which satisfies natural conditions (similar to those proposed by Arrow).</p><p>¯We show in what circumstances the lexicographic rule propagates various conditions on preference relations, thus extending Grosof's results.</p><p>¯We give necessary and sufficient conditions on the priority relation to determine various relationships between combinations of preferences.</p><p>¯We give an algebraic treatment of this form of generalized prioritization. Two operators, called but and on the other hand, are sufficient to express any prioritization. We present a complete equational axiomatization of these two operators. These results can be applied in the theory of social choice (a branch of economics), in non-monotonic reasoning (a branch of artificial intelligence), and more generally wherever relations have to be combined.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The lexicographic combination of orderings constructs a single ordering from several individual ones. Traditionally, the individual orderings will order words according to their th letter using alphabetical ordering, and the combination will then be the usual ordering of dictionaries. This combination thus says that a letter on the left is more important than any letter on its right, thereby giving a priority between letter indices. If the first letter of the first word is strictly before the first letter of the second word, this first word will indeed appear first in the dictionary. In case of ties, the second ordering will be used, and so on.</p><p>the new car, although some of them are common, but ranked differently.</p><p>The preference of Claire is guided by the following criteria (in increasing order of importance):</p><p>¯the maximum speed (M); ¯the elegance of the design (D); ¯the ease with which it can be driven in town (E); ¯the price (P).</p><p>The criteria for Bob are ranked differently: ¯the ease with which the car can be driven in town (E); ¯the maximum speed (M); ¯the price (P). Some of these criteria are simple, and can be directly computed from the technical data of the car. Others can be decomposed, say: the ease with which the car can be driven in town (E) is an aggregation of: ¯the length of the car (L); ¯its weight (W); ¯its turning circle diameter (C); ¯the presence of automatic transmission (A).</p><p>Let us say the last one is the most important, the other ones are equally important, but are clearly expressed in incomparable units, so that, for instance, adding them makes no sense. The final choice should at least be Pareto-optimal: no other car will be better for both Claire and Bob than the one selected. Now, these criteria must be applicable to any specific market. In this paper, we do not work directly with numerical criteria like the ones above. We consider the market Å containing economic alternatives, in this case the various cars that are available; say Å Ø Ö Ñ Ò . The numerical criteria are converted into a preference ordering. For instance, if the actual characteristics of the cars are as in Table <ref type="table">1</ref>, we forget the numeric values to remember only TABLE <ref type="table">1</ref>. Car characteristics t h r m n length L 3.5 3.5 7.3 5.0 3.7 weight W 0.7 0.9 3.5 1.5 0.7 turning circle diameter C 3.2 3.4 6. <ref type="bibr" target="#b3">4</ref>  their ordering. For example, for the turning circle diameter (C), we remember only that Ø is equivalent to Ò (in the notation of the main part of this paper, Ø Ê Ò), while Ò is strictly preferred to (written Ò Ê ), and so on: in summary, ØÊ ÒÊ Ê ÑÊ Ö. In some cases, no meaningful comparison can be established, so that both incomparable alternatives should be kept in the final choice. For instance a shoe cannot be compared to a car, say. We write this × Ê .</p><p>In the example, all preferences are transitive, and this is usually considered as a condition for them to be rational. However, many empirical studies have shown that intransitive preferences are the norm rather than the exception for human decision makers. Therefore, this study does not assume transitivity, but intends to preserve it when it exists. That is to say, when the underlying preferences are transitive, so should be their combination. We shall use (T) to refer to preservation of transitivity. We assume several other properties of the combination. It should not advantage any alternative except from the selected criteria (B), and should respect the criteria when they are unanimous (U). Finally, alternatives that are not involved in a comparison should not influence the result (I): for instance, if Ñ is preferred to Ò, this should not depend on whether is present in the market Å or not, but only on the performance of Ñ Ò for the selected criteria.</p><p>If we accept these natural rationality postulates (IBUT), we demonstrate below that the problem can be expressed by priority graphs, or by algebraic expressions. For instance, the algebraic expressions for the example above are:</p><formula xml:id="formula_0">Ð Ö Å È Ó Å È Û Ö ´Ä Ï µ Ê ×ÙÐØ Bob Claire</formula><p>where expresses priority of the second term, while puts both sides on equal priority. In this example, our theory shows how to simplify the computations: it is useless to repeat the computation of for Bob, of Å for Claire, since anyway these criteria will be better taken into account by the other person. So Result Ǻ ´ µµ È gives the same result more efficiently. It is also clear from this expression that is to be chosen in the example, without even looking at criteria Ä Ï .</p><p>Our principal definition is that of priority operator. A priority operator specifies a way of putting together a family of relations to make a single relation. We call these relations preference relations: the idea is that they relate elements of Å (interpretations, economic alternatives, etc.) according to some preference criterion.</p><p>We present results of four kinds.</p><p>1. We show that priority operators are canonical: they are the only way of combining preference relations with different priorities which satisfies the very natural conditions above, inspired by Arrow <ref type="bibr">[1,</ref><ref type="bibr">2]</ref>. 2. Next, we define several natural properties of preference relations: transitivity, reflexivity, irreflexivity, and well-foundedness. We show in what circumstances these properties are propagated by priority operators. This generalizes a result by Grosof <ref type="bibr" target="#b13">[14]</ref>. 3. We give necessary and sufficient conditions on the priority relation to determine whether the result of a priority operator is always included in the result of another combination. This also extends a result of Grosof <ref type="bibr" target="#b13">[14]</ref>. We also give necessary and sufficient conditions for other relationships between the results of priority operators, such as equality and preferential entailment. 4. We give an algebraic treatment of generalized prioritization. We formally define two binary priority operators, called but and on the other hand, and show them to be sufficient to express any priority operator. We present a complete equational axiomatization of these two operators.</p><p>The structure of the paper is as follows. The next section presents basic definitions. Section 3 presents the results which show that the lexicographic rule is the only way of combining preference relations that satisfies the natural generalization of Arrow's conditions. Propagation of properties of preference relations by the rule is summarized in Section 4, Table <ref type="table" target="#tab_1">3</ref>. Section 5 develops proof rules for priority graphs, and 6 explores composition of priority operators. Section 7 summarizes our algebraic treatment of priority operators, and conclusions are drawn in Section 8.</p><p>There is a long appendix to this paper, which covers the mathematical details and proofs which have been omitted from the text in order not to interrupt the flow. The structure of the appendix mirrors that of the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Priority operators</head><p>Let Å be a set containing at least two elements. The elements of Å are the subject of the preferences: in the example above, it was the set of cars which were available on the market. From the point of view of our application to default reasoning, Å is the set of interpretation structures of the logic. Default rules or formulas express preferences on Å . The results presented in the paper work for any applications of prioritized preference, such as default reasoning, social choice or multi-criteria decision. Å is simply the set of objects which are ordered by preference, which in economics are called economic alternatives. (Of course there must be at least two of them, otherwise there is nothing to choose.) DEFINITION 2.1 A preference relation (sometimes just called a preference) is any binary relation on Å . Preference relations will be written</p><formula xml:id="formula_1">Ê, Ê ½ Ê ¾ or Ê ¼ Ê ¼¼ .</formula><p>For intuition, the reader will be helped by reading Ê as meaning 'better than, or indifferent' or 'as preferred as'. We do not assume that Ê is transitive and reflexive, since our mathematical results do not depend on these properties.</p><p>In the non-monotonic application, each default formula denotes a preference relation on Å which orders interpretations according to how nearly they satisfy the default information. As usual in the literature, interpretations 'lower' in the relation are those which are closer to satisfying the default. For Ñ Ò ¾ Å , the expression Ñ Ê Ò means that Ñ is as preferred as Ò.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DEFINITION 2.2</head><p>Given a preference relation Ê, we define the derived relations</p><formula xml:id="formula_2">Ñ Ê Ò iff not ÑÊÒ.</formula><p>'not better (nor indifferent)'</p><formula xml:id="formula_3">Ñ Ê Ò</formula><p>iff ÑÊÒ and not ÒÊÑ.</p><p>'strictly better'</p><formula xml:id="formula_4">Ñ Ê Ò iff ÑÊÒ and ÒÊÑ. 'indifferent' Ñ Ê Ò iff neither ÑÊÒ nor ÒÊÑ. 'incomparable'</formula><p>We also use to denote the full relation Å ¢ Å , and to denote the empty relation. Thus, and .</p><p>Now suppose we have a family of preference relations ´ÊÜ µ Ü¾Î , all on the same set Å .</p><p>This can come about because we have several defaults, each of them denoting a preference relation among interpretations of a non-monotonic logic, or because we have several deciders, each having its own preference among the economic alternatives. Also, the preferences can originate from different criteria that we wish to combine according to their importance. We want to combine these relations into a single relation on the same set Å . The next step is usually to pick the minimal (or preferred) interpretations (or alternatives) according to it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DEFINITION 2.3</head><p>A Î -ary operator is any map taking some preference relations ´ÊÜ µ Ü¾Î and returning a single preference relation. (Î may be infinite.)</p><p>Of particular interest are operators which combine preference relations according to some priority, which is a strict partial order on Î .</p><p>The lexicographic combination of ´ÊÜ µ Ü¾Î (Î ) according to priority on Î is the relation Ê given by</p><formula xml:id="formula_5">ÑÊÒ ´µ Ü ¾ Î ´ÑÊ Ü Ò Ý ¾ Î ´Ý Ü ÑÊ Ý Òµµ ´£µ</formula><p>This generalizes the familiar rule used for the alphabetic ordering of words in a dictionary, by allowing the priority (position of letter in word) to be an arbitrary partial order, and by allowing the preference relations (ordering of letters in alphabet) to be an arbitrary relation. Intuitively, the lexicographic rule says that Ñ is preferred to Ò overall if it is preferred at each index, except possibly those for which there is an index of greater priority at which Ñ is strictly preferred to Ò. To understand how this reduces to the familiar alphabetic ordering when is a finite total order (among positions in the word), observe that it says: in order that word Ñ comes before (or equal) word Ò, we must have that for any Ü, the Üth letter of Ñ precedes or equals the Üth letter of Ò, unless there was a smaller Ý such that the Ýth letter of Ñ strictly precedes the Ýth letter of Ò.</p><p>A number of definitions of the lexicographic ordering, which are all equivalent when used with a finite linear priority, can be found in the literature:</p><formula xml:id="formula_6">1. Ê iff Þ Ê Þ and Ü Þ Ê Ü [23, p.49]; 2. Ê iff Ü Ê Ü is not empty and Ê Þ , where Þ is the -minimum element of [12, p.1442]; 3. Ê iff Ü´ Ý Ü Ê Ý µ µ Ê Ü [14]'.</formula><p>When we generalize to a partially ordered priority: ¯Definition 1 may yield both Ê and Ê , and is thus not useful in this context. ¯Definition 2 needs to be generalized, since will not have a single minimum but a set of minimals. So we could require that Ê Þ for all these minimals. ¯Definition 3 is directly usable. Definition 3, and our generalization of Definition 2, are each equivalent to our definition in equation (£) under the assumption that is well-founded (see <ref type="bibr">Theorem 2.11)</ref>. This is an assumption we will make frequently in the paper; it is generally valid for applications.</p><p>The formulation ´£µ of the lexicographic combination is not as general as we would like, however, because it forbids us from replicating an argument Ê Ü several times in the prioriti- zation. We can generalize it by considering the following notion of priority graph.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DEFINITION 2.4</head><p>A priority graph is a tuple ´AE Úµ where AE is a set (of 'nodes'), is a strict partial order on AE (the 'priority relation') and Ú is a function from AE to a set of variables. AE may be infinite. This definition and the following one are the most fundamental in the paper; everything else depends on them. So, what is a priority graph? It is just an ordering of variables, but crucially it allows some variables to be represented several times in the ordering, simply by repeating the variable in the priority graph. (A priority graph essentially represents a policy for prioritizing certain things represented by the variables, and the ability to allow repetition of the variables greatly increases the expressive power of the representation. We will prove this later.)</p><p>A priority graph denotes an operator on preference relations. The operator it denotes combines its arguments according to the given priority, using the lexicographic rule.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DEFINITION 2.5</head><p>The Î -ary operator Ó denoted by the priority graph ´AE Ú µ is given by</p><formula xml:id="formula_7">Ñ Ó ´´Ê Ü µ Ü¾Î µ Ò ´µ ¾ AE ´ÑÊ Ú´ µ Ò ¾ AE ´ ÑÊ Ú´ µ Òµµ</formula><p>where Î Ú AE , the variables that occur in the graph.</p><p>This says that the variables in the priority graph are instantiated to be the argument preference relations. The operator returns the preference relation, which is their prioritized combination according to , using the lexicographic rule.</p><p>The difference between Definition 2.5 and equation ´£µ is that the elements of AE are ordered, rather than the elements of Î directly. The onus is on us to show that this added complication is really useful. It turns out to be useful because the ability to duplicate one of the arguments Ê Ü in the ordering increases the expressive power we are giving to priority operators. This is shown by Example 2.8 below.</p><p>Our notion of priority operator can now be seen to generalize the notion of circumscription policy <ref type="bibr" target="#b20">[20]</ref> in three ways.</p><p>¯it works for arbitrary preferential logics; ¯it allows the priority to be partial; ¯it allows repetition of the prioritized criteria in the ordering; and this increases the expressive power (Example 2.8 below).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>EXAMPLE 2.6</head><p>Consider the priority graph ½ Ǽ Ú µ given by AE ½ ¾ ¿ with ½ ¾ and ½ ¿ and Ú´½µ Ý, Ú´¾µ Ü and Ú´¿µ Ý. Priority graphs will normally be written using a graphical notation in which we leave out the names of elements of AE , showing the base of the partial order on the variables given by Ú (this is usually called the Hasse diagram of the priority). Recall that elements with the highest priority are, surprisingly perhaps, written at the bottom of our diagrams. The priority graph ½ is:</p><formula xml:id="formula_8">Ü b b b b b b b b Ý Ð Ð Ð Ð Ð Ð Ð Ý</formula><p>This denotes a binary operator since there are only two distinct variables in the graph. It takes two preference relations, say Ê and Ë, and returns a preference relation which represents the combination of Ê and Ë with the priority which represents Ê once and Ë twice. One of the representations of Ë has priority over the other and over Ê. Thus, if Ó ½ is the operator denoted by the graph, then Ó ½ ´Ê Ëµ is the following prioritized combination of Ê and Ë:</p><formula xml:id="formula_9">Ê c c c c c c c Ë Ë</formula><p>Applying the definition of the lexicographical rule (and simplifying), we obtain that Ó ½ ´Ê Ëµ ´Ê Ëµ Ë . We may also write Ó ½ Ü Ý ´Ü Ýµ Ý , although we will generally leave out s and details of variable binding, and write Ó ½ Ǘ Ýµ Ý .</p><p>There may be several graphical representations of the same operator. As a trivial example, any priority graph whose nodes are all labelled by the same variable Ü denotes the identity operator, which is the only unary priority operator. <ref type="bibr">DEFINITION 2.7</ref> Priority graphs ½ ¾ are said to be equivalent, written ½ ¾ , if they denote the same operator on preference relations.</p><p>The graph ½ in the preceding example is equivalent to the graph ¾ Ü Ý (which does not have any repetition of variables), in the sense that the two graphs denote the same operator Ó ½ Ǘ Ýµ Ý .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>EXAMPLE 2.8</head><p>The priority graph</p><formula xml:id="formula_10">¿ Ü Ü Ý Þ</formula><p>denotes the operator Ó ¿ Ü ´Ý Þ µ Ý Þ, and is not equivalent to any graph which does not repeat the variable Ü (this will be proved later, in Example 5.7). In particular, it is not equivalent to</p><formula xml:id="formula_11">Ü c c c c c c c c Ý Þ which denotes Ü ´Ý Þµ Ý Þ.</formula><p>To see that these expressions may be different, try</p><formula xml:id="formula_12">Å ½ ¾ , Ü , Ý Å ¢ Å , Þ ´½ ½µ ´½ ¾µ ´¾ ¾µ .</formula><p>Then the first expression yields , while the second one yields ´½ ¾µ . EXAMPLE 2.9 The graphs</p><formula xml:id="formula_13">Ü Ý Þ Þ and Ü c c c c c c c c Ý Þ</formula><p>denote the same operator, namely ´Ü Ý Þµ Þ .</p><p>The lexicographic rule applied to graphs is not the only way of defining operators on relations, but is an important one. DEFINITION 2.10 A priority operator is an operator which is denoted by some priority graph.</p><p>By convention, we extend the usual properties of posets to priority graphs and thence to operators in the obvious way: for instance, we say that a priority operator is well-founded iff there is a graph ´AE Ú µ denoting it such that ´AE µ is well-founded, (i.e. there is no infinite descending sequence ½ ¾ ¿ ¡ ¡ ¡ , Ò ¾ AE ). A Î -ary operator is finitary if Î is finite.</p><p>Notice that the identity of nodes (elements of AE ) in a priority graph is irrelevant. For this reason we can think of priority graphs as partially ordered multisets (pomsets <ref type="bibr" target="#b24">[24]</ref>) of variables.</p><p>The following theorem is useful in two respects. First, it should help the reader build up intuitions for the behaviour of the lexicographic rule coded into Definition 2.5. Secondly, it will be used for proving most results in all later sections, e.g. Theorems 3.2 and 4.1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>THEOREM 2.11</head><p>Suppose ´AE µ is well-founded, and let</p><formula xml:id="formula_14">Ê Ó´´Ê Ü µ Ü¾Î µ. Then 1. ÑÊÒ iff ¾ AE ´ Ñ Ê Ú´ µ Òµ implies ÑÊ Ú´ µ Ò. 2. ÑÊÒ iff ¾ AE ´ÑÊ Ú´ µ Ò or ´ Ñ Ê Ú´ µ Ò and ¼ Ñ Ê Ú´ ¼ µ Òµµ. 3. ÑÊ Ò iff ÑÊÒ and ¾ AE Ñ Ê Ú´ µ Ò. 4. ÑÊ Ò iff ¾ AE Ñ Ê Ú´ µ Ò.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Canonicity of the lexicographic rule</head><p>We have defined priority operators, which take as arguments some preference relations and combine them according to some priority, using the lexicographic rule. Arrow <ref type="bibr">[1,</ref><ref type="bibr">2]</ref> has studied operators taking sets of preference relations to preference relations, and proposed natural conditions that they should satisfy. Our aim in this section is to show that priority operators can be defined by a variant of Arrow's conditions, which is also very natural. Historically, we arrived at these conditions when looking for further preferential operators, mainly a counterpart for disjunction, only to discover that there are no further operators.</p><p>Let Ó be an operator taking ´ÊÜ µ Ü¾Î and returning Ê Ó´´Ê Ü µ Ü¾Î µ. To be natural, the operator Ó should: I. be independent of irrelevant alternatives: the resulting preference on elements in Å depends only on the argument preferences on these elements. That is,</p><formula xml:id="formula_15">Å ¼ Å Ó´´Ê Ü µ Ü¾Î µ Å ¼ Ó´´Ê Ü Å ¼ µ Ü¾Î µ</formula><p>This is condition 2 in <ref type="bibr">[1]</ref> and <ref type="bibr">[2]</ref>;</p><p>B. be based on preferences only: Ó is a function of the Ê Ü 's only, and may not take into account the identity of any element of Å . That is, if there is an isomorphism between Å and Å ¼ (i.e. a bijection such that Ü ¾ Î ¾ Å Ê Ü iff ´ µÊ ¼ Ü ´ µ) then the results are the same: Ê iff ´ µÊ ¼ ´ µ. This condition is called permutation invariance in algebraic logic. It was not used by Arrow, but by algebraists, order theorists, and economists <ref type="bibr">[12, p. 1448</ref>] and seems very natural; U. be unanimous with abstentions: for intuition, we use here analogies from the theory of social choice. Let us consider that each Ê Ü represents the preference-or-indifference relation of the person called Ü, member of a group Î of voters. To establish the preference of the group, each pair of alternatives will be presented in a vote, where the members can vote on whether is preferable to . For a given pair, each member Ü has four possible votes, corresponding to the cases of Definition 2.2: vote for ( Ê Ü ); vote for ( Ê Ü ); are considered incomparable ( Ê Ü ); or indifferent (also called equivalent) ( Ê Ü ).</p><p>In this last case, we say that Ü abstains in the vote of against . Incomparability, on the contrary, is a strong opinion here: it means that the two alternatives cannot compete, and this vote will override decided votes of the same priority. In the first two cases, we say that Ü is decided.</p><p>If all the Ê Ü s determine a certain vote between and (which could be Ê Ü , Ê Ü , Ê Ü , or Ê Ü ) apart from those which abstain ( Ê Ü ), then the condition of unanim- ity states that Ê also determines the same vote between and . That is, for all £ ¾</p><formula xml:id="formula_16">if Î ¼ Î such that Î ¼ and Ý ¾ Î ¼ Ê £ Ý , and Ü ¾ Î Î ¼ Ê Ü , then Ê £ .</formula><p>Respecting unanimity is the motivation for condition 4 of <ref type="bibr">[1]</ref>, but after motivating this condition, <ref type="bibr">[1]</ref> writes a much weaker mathematical condition; T. preserve transitivity: if all the argument preferences ´ÊÜ µ Ü¾Î are transitive, then the resulting preference Ê is also transitive. This condition is not stated in <ref type="bibr">[1]</ref> but is implicitly used; N. be non-dictatorial: it does not simply return a fixed one of its arguments without regard to the others. We formulate this technically as follows: if Î ½ then there is no Þ ¾ Î such that Ê Ê Þ for all possible values of the other Ê Ü s. This definition comes from <ref type="bibr">[2]</ref>.</p><p>In the case of total pre-orders, Arrow's well-known theorem shows that the property of non-dictatoriality is incompatible with the other conditions. In our case of arbitrary relations in which we have generalized his conditions, it is easy to show an opposite result. THEOREM 3.1 Every operator satisfying unanimity with abstentions is non-dictatorial. More generally, the result of such an operator cannot be independent of any of its arguments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PROOF. Assume</head><formula xml:id="formula_17">Ó is dictatorial in Þ; thus Î Ö Þ is not empty. Take some non-full relation Ë and define Ê Þ and Ê Ü Ë for all other Ü. By U, Ó´´Ê Ü µ Ü¾Î µ Ë Ê Þ .</formula><p>Thus non-dictatorial is not only compatible with IBUT, but implied by U. There are two explanations for this inversion, depending on the version ( <ref type="bibr">[1]</ref> or <ref type="bibr">[2]</ref>) to which we compare:</p><p>2. The definition of dictatoriality <ref type="bibr">[2]</ref> we use is natural but restrictive: some of our operators would be dictatorial under the wider definition of <ref type="bibr">[1]</ref>. Arrow (in both versions) uses a supplementary unstated condition: the preservation of totality. As shown in Theorem 4.1 below, this amounts to requiring a linear (total) priority. In this case, the relation with highest priority is a dictator in the sense of <ref type="bibr">[1]</ref>, but not of <ref type="bibr">[2]</ref>.</p><p>So, of course, there is no mathematical contradiction between Arrow's results and ours. But curiously, all informal explanations of <ref type="bibr">[1]</ref> could be retained to justify the conditions of our inverse result-just draw opposite extra-mathematical generalizations.</p><p>The main result of this section shows that only lexicographic combinations of preferences satisfy conditions IBUT (or equivalently IBUTN). We may state it as follows. THEOREM 3.2 A finitary operator satisfies conditions IBUT iff it is a priority operator.</p><p>The proof, found in Section A.3 in the Appendix, works by performing 'tests' on the operator in order to find a priority graph which denotes it.</p><p>It is not obvious that the conditions IBUT are all we should require; we could also think that a natural operator should:</p><p>1. preserve reflexivity: usually, one conventionally considers that preferences are reflexive.</p><p>This convention should be preserved by the operator;</p><p>2. preserve irreflexivity: if we take the opposite convention, it should also be preserved;</p><p>3. preserve antisymmetry: often preferences are taken to be antisymmetric; then the result should also be;</p><p>4. preserve well-foundedness: the goal of preferences is to find minima, and to ensure their existence we must forbid infinite regression. It is clearly important that this property is preserved;</p><p>5. allow majority extension or respond positively <ref type="bibr">[2]</ref>: Given a situation where the result is some vote (for instance, that and are indifferent), then any situation identical except that more individual preferences give that vote, should have the same resulting vote;</p><p>6. be justified: if the result is to prefer one of the interpretations, then at least one default (called the justification) must prefer this interpretation;</p><p>7. obey Pareto rule or be benevolent: if one criteria strictly prefers an alternative, and the other ones prefer it, it should be strictly preferred globally.</p><formula xml:id="formula_18">Ü Ê Ü Ý Ê Ý µ Ê .</formula><p>Fortunately, all these conditions can be derived from the four basic ones (at least for finitary operators). The preservation properties (1-4) are theorems of the next section. Properties <ref type="bibr" target="#b4">(5)</ref><ref type="bibr" target="#b5">(6)</ref> are proved in Lemmas A.11 and A.9, respectively, of Appendix A.3. The Pareto rule is a special case of U. There is, however, one condition (proposed by <ref type="bibr" target="#b9">[10]</ref>) that we cannot add, namely decidedness: that the global preference is decided (prefers one of the two interpretations to be compared) as soon as one of the individual preferences is decided. Intuitively, this condition seems rather strong: for instance, the operator cannot decide that two interpretations are incomparable, even if a vast majority of defaults share this opinion or if two equally important sets of defaults hold opposite opinions. If we add decidedness, no combination operator can be found, since we fall back on the conditions of the original Arrow theorem: the operator will preserve totality. Antisymmetric</p><formula xml:id="formula_19">Ñ Ò ¾ Å ´ÑÊÒ ÒÊÑ µ Ñ Òµ ÑÊ Ò iff ÑÊÒ and ÒÊÑ Transitive Ñ ½ Ñ ¾ Ñ ¿ ¾ Å ´Ñ½ ÊÑ ¾ Ñ ¾ ÊÑ ¿ µ Ñ ½ ÊÑ ¿ µ ÑÊ • Ò iff Ò ÑÊ Ò Ý Total Ñ Ò ¾ Å ´ÑÊÒ ÒÊÑµ Empty Ñ Ò ¾ Å Ñ ÊÒ (the empty relation) Full Ñ Ò ¾ Å ÑÊÒ (the full relation)</formula><p>Well-founded transitive, and there is no</p><formula xml:id="formula_20">Ê -sequence ¡ ¡ ¡ Ñ ¿ Ê Ñ ¾ Ê Ñ ½</formula><p>Zorn Ê transitive, and each chain (totally Ê-ordered subset) in Å has a lower bound.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Propagation of properties via priority operators</head><p>Grosof <ref type="bibr" target="#b13">[14]</ref> has shown that a lexicographic combination of transitive preferences is transitive, provided the set of nodes is well-founded. A more systematic treatment of such properties is summarized in Table <ref type="table" target="#tab_1">3</ref>, for the classical properties described in Table <ref type="table" target="#tab_0">2</ref>. For example, Grosof's result is represented as line 5 of Table <ref type="table" target="#tab_1">3</ref>. This says that for any priority operator Ó and non-empty family ´ÊÜ µ Ü¾Î of arguments, the resultant relation Ê Ó´´Ê Ü µ Ü¾Î µ is transitive if each of the argument relations Ê Ü is transitive, and also the priority on AE is well-founded.</p><p>Other conditions, such as reflexivity, irreflexivity and symmetry, propagate more simply, without extra conditions on the priority relation. In preferential logics, we are interested in finding the minimals of preference relations. A strong property guaranteeing the existence of minimals is well-foundedness. Assuming that the relation Ê is transitive, well-foundedness is equivalent to saying that Ê restricted to any non-empty subset Å ¼ of Å has minimals, i.e. Min Ê ´Å¼ µ . Table <ref type="table" target="#tab_1">3</ref> shows that well-foundedness is propagated by the lexicographic rule under simple assumptions. However, well-foundedness may be rather stronger than we actually need. This is because we do not require the existence of minimals in any non-empty set Å ¼ Å , but only in those sets which are denoted by a theory in the logic. This is the motivation behind the condition of stopperedness <ref type="bibr" target="#b21">[21]</ref> (aka smoothness <ref type="bibr" target="#b16">[16]</ref>) in the literature.</p><p>To study the propagation of stopperedness, let be the set of subsets of Å which are closed, i.e. which are the denotation of a theory. Take any Å ¼ ¾ . We say that Ê has the Zorn property (pronounced downwards-Zorn) with respect to Å ¼ if each Ê chain in Å ¼ has a lower bound in Å ¼ . That is the condition that is required in order to apply Zorn's lemma to find minimals in Å ¼ . Thus, to study the propagation of stopperedness it is sufficient to study the propagation of Zorn in each of the sets in . The propagation of Zorn in any set is described in Table <ref type="table" target="#tab_1">3</ref>. THEOREM 4.2 Well-foundedness and Zorn are related as follows. Let Ê be a transitive relation on Å . Ê is well-founded iff (for all AE Å Ê AE is Zorn). Line 10 of Table <ref type="table" target="#tab_1">3</ref> is considerably harder to prove than the others, and requires several lemmas. The proofs are in the Appendix, Section A.4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Proof rules for priority graphs</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Refinement and equivalence</head><p>Checking equivalence between priority graphs by applying the lexicographic rule to convert them into priority operators is a time-consuming and error-prone process. Fortunately, there are some syntactical rules which can help us. We consider only well-founded priority graphs with finitely many variables. As well as checking equivalence, we develop proof rules for checking refinement between priority operators. DEFINITION 5.1</p><p>We say that Ó ½ refines Ó ¾ and write Ó ½ Ú Ó ¾ if, for all argument tuples ´ÊÜ µ Ü¾Î , we have Ó ½ ´´Ê Ü µ Ü¾Î µ Ó ¾ ´´Ê Ü µ Ü¾Î µ as relations. This notion is lifted naturally to priority graphs:</p><formula xml:id="formula_21">½ Ú ¾ if ½ ¾ denote operators Ó ½ Ó ¾ and Ó ½ Ú Ó ¾ .</formula><p>If ´AE Úµ is a priority graph and ¾ AE , we write for the set ¾ AE and</p><formula xml:id="formula_22">Ú AE ¼ for Ú´ µ ¾ AE ¼ for any AE ¼ AE . Thus Ú Ú´ µ</formula><p>is the set of variables occurring below the node . THEOREM 5.2</p><formula xml:id="formula_23">½ Ú ¾ iff for each ¾ AE ¾ , there is a ¾ AE ½ : ¯Ú½ ´ µ Ú ¾ ´ µ; and ¯Ú½ ½ Ú ¾ ¾ . COROLLARY 5.3 (Cf. Grosof [14], Theorem 3) If AE ½ AE ¾ and Ú ½ Ú ¾ and ½ ¾ then ½ Ú ¾ . COROLLARY 5.4 If ½ Ú ¾ , then Ú ¾ AE ¾ Ú ½ AE ½ .</formula><p>The theorem is easily extended to a simple and effective test for equivalence between priority graphs (recall that two graphs are said to be equivalent if they denote the same operator):</p><formula xml:id="formula_24">COROLLARY 5.5 ½ ¾ iff ¯for each ¾ AE ½ , there is a ¾ AE ¾ such that Ú ½ ´ µ Ú ¾ ´ µ and Ú ¾ ¾ Ú ½ ½ , and ¯for each ¾ AE ¾ , there is an ¾ AE ½ such that Ú ½ ´ µ Ú ¾ ´ µ and Ú ½ ½ Ú ¾ ¾ .</formula><p>PROOF. Simply apply Theorem 5.2 to the refinements ½ Ú ¾ and ¾ Ú ½ . EXAMPLE 5.6 Some refinement and equivalence relationships between priority graphs, which are easily checkable using the rules expressed by these theorems:</p><formula xml:id="formula_25">Ü Þ Ý Ü Ý Ü Ý Ý Ü Ü Ý Þ Þ Ý Ü c c c c c c Ý Þ Ü Ý Þ c c c c c c Ü Ý Þ Þ Ü Ü Þ Þ Ý Ü Ý Þ Ü Ý Þ c c c c c c Ü Ý Þ EXAMPLE 5.7</formula><p>The priority graph</p><formula xml:id="formula_26">½ Ü Ü Ý Þ</formula><p>was presented in example 2.8, and it was stated that it could not be written with just one occurrence of the variable Ü. Corollary 5.5 can be used to prove this. Suppose ¾ has just a single occurrence of Ü, say at node ¾ AE ¾ , and ½ ¾ . Then by the first part of 5.5, Ú ¾ ¾ must be a subset of Ý and of Þ , hence (since Ý Þare distinct variables) it must be empty. By the second part, either</p><formula xml:id="formula_27">Ý Ú ¾ ¾ or Þ Ú ¾ ¾ , so Ú ¾ ¾ cannot be empty. Contradiction. COROLLARY 5.8 If ½ ¾ , then Ú ½ AE ½ Ú ¾ AE ¾ .</formula><p>We are interested in simplifying priority graphs without changing the operator they denote. To this end, we define the notion of a priority graph normal form; the normal form of a graph is the 'simplest' graph which is equivalent to it. (Here 'simplest' means with a minimal number of nodes, but surprisingly, with a maximal number of links.) DEFINITION 5.9 Let</p><formula xml:id="formula_28">´AE Ú µ. A node ¾ AE is critical if for all ¾ AE with Ú´ µ Ú´ µ, we have Ú Ú</formula><p>.</p><p>That is to say, a node is critical if the set of variables beneath it (Ú ) is minimal compared with other nodes labelled by the same variable. The importance of critical nodes can be seen in Definition 2.5: the need only range over critical nodes, because if is not critical then the existence of an appropriate beneath it is guaranteed by its existence for a critical node.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DEFINITION 5.10</head><p>The normal form of a priority graph</p><formula xml:id="formula_29">Ǽ Úµ is the graph ´AE¼ ¼ Ú ¼ µ where AE ¼ ´Ú´ µ Ú µ critical in ´Ú´ µ Ú µ ¼ ´Ú´ µ Ú µ ¸Ú Ú´ µ Ú Ú ¼ ´´Ú´ µ Ú µµ Ú´ µ</formula><p>(We will soon justify the term 'normal form' by giving rewrite rules for priority graphs.) THEOREM 5.11 1. Any priority graph is equivalent to its normal form. 2. Two priority graphs are equivalent iff their normal form is the same.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>COROLLARY 5.12</head><p>The normal form operator is idempotent.</p><p>We now give rewrite rules for transforming a finite graph into its normal form, up to renaming of the nodes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DEFINITION 5.13</head><p>The rewrite rules for priority graphs are ´ µ .</p><formula xml:id="formula_30">(</formula><p>(del) Delete a node if: ¯it is not critical or there is an equivalent node, and ¯deleting it does not change the down-sets of other nodes. Note that this last condition will eventually be obtained by application of (link), so that only one copy of each critical node will be kept.</p><p>More formally: del µ ¼ if: there are distinct ¾ AE with Ú Ú Ú´ µ and Ú´ µ Ú´ µ Ü for some Ü, and for all ¼ there exists ¼¼ ¼ with Ú´ ¼¼ µ Ü, and</p><formula xml:id="formula_31">AE ¼ AE</formula><p>, and ¼ AE ¼ (the restriction of to AE ¼ ), and Ú ¼ Ú AE ¼ .</p><p>EXAMPLE 5.14</p><formula xml:id="formula_32">Ü Ü Ý Þ Þ Ý link µ Ü c c c c c c c c Ü Ý Þ Þ Ý del µ Ü c c c c c c c c Ý Þ Þ Ý del µ Ü d d d d d d d Þ Þ Ý del µ Ü H H H H H H H H H H H H H Þ Ý THEOREM 5.15</formula><p>By applying rules (link) and (del) repeatedly in any order until none applies, any finite priority graph is brought into a form which is equal to its normal form, up to renaming of elements of AE . COROLLARY 5.16 Any priority graph in which each variable occurs at most once is in normal form.</p><p>Of course, there are priority graphs with several occurrences of a variable which are in normal form, such as the one corresponding to the term ´Ü Ýµ ´Ü Þµ (Example 5.7).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Preferential entailment and preferential equivalence</head><p>In the setting of preferential logics, the models of interest are the minimal models according to the preference (sometimes called preferred models).</p><formula xml:id="formula_33">Min´Êµ Ñ ¾ Å Ò ¾ Å Ò Ê Ñ</formula><p>Let us define the relation of preferential entailment between operators as inclusion of preferred models. DEFINITION 5.17 Ó ½ preferentially entails Ó ¾ , written Ó ½ Ó ¾ iff for any arguments ´ÊÜ µ Ü¾Î , we have Min´Ó ½ ´´Ê Ü µ Ü¾Î µµ Min´Ó ¾ ´´Ê Ü µ Ü¾Î µµ. As for refinement, this notion naturally extends to priority graphs.</p><p>Note that preferential entailment ( ) is distinct from refinement (Ú). Analogously to refinement, however, we can check preferential entailment by means of a simple syntactic characterization on graphs denoting the operators. THEOREM 5.18</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>½</head><p>¾ iff Ú ¾ AE ¾ Ú ½ AE ½ and for each node ¾ AE ½ either Ú AE ¾ Ú ½ ½ , or there is a</p><formula xml:id="formula_34">¾ AE ¾ such that Ú´ µ Ú´ µ and Ú Ú . COROLLARY 5.19 If ½ ¾ , then Ú ¾ AE ¾ Ú ½ AE ½ DEFINITION 5.20</formula><p>Ó ½ Ó ¾ are preferentially equivalent if Ó ½ Ó ¾ and Ó ¾ Ó ½ . Again, this extends naturally to graphs.</p><p>Although preferential entailment and refinement are distinct, it turns out rather surprisingly that preferential equivalence and equivalence are the same. PROPOSITION 5.21 Two priority graphs are preferentially equivalent iff they are equivalent. PROOF. µ. Suppose without loss of generality that the graphs are in normal form. It is impossible that Ú ½ ½ Ú AE ¾ ( Ú AE ½ by Corollary 5.19) because wouldn't be critical.</p><p>So we have the other case, which is just the characterization of inclusion (Theorem 5.2) in each direction, yielding equivalence.</p><p>´. Obvious.</p><p>So the computation of the normal form can also be used for preferential equivalence. When constants for given relations are introduced, this property may fail. The results of this section are directly operational, and yield algorithms for deciding equality, refinement, preferential entailment, preferential equivalence and computation of the normal form.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Composing priority graphs</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Composition vs graphical insertion</head><p>Since an operator Ó maps some preferences ´ÊÜ µ Ü¾Î to a preference Ó´´Ê Ü µ Ü¾Î µ, operators can be composed with each other to give further operators. Therefore, priority operators can be composed, but are their compositions also priority operators? In certain circumstances the answer is yes; indeed, we can compose priority operators simply by manipulations on the graphs that denote them. DEFINITION 6.1 Let Ǽ Úµ having variables Î Ú AE , and for each Ü ¾ Î let Ü ǼÜ Ü Ú Ü µ be a priority graph. The graphical insertion ¼</p><p>´ Ü µ Ü¾Î of the priority graphs Ü in the priority graph is ´AE¼ ¼</p><formula xml:id="formula_35">Ú ¼ µ where ¯AE ¼ ´ µ ¾ AE ¾ AE Ú´ µ , ¯´ ½ ½ µ ¼ ´ ¾ ¾ µ iff ´ ½ ¾ µ or ( ½ ¾ and ½ Ú´ µ ¾ ), ¯Ú´´ µµ Ú Ú´ µ ´ µ. EXAMPLE 6.2</formula><p>If , ½ , ¾ are respectively the priority graphs</p><formula xml:id="formula_36">Ü ½ g g g g g g g g Ü ¾ | | | | | | | | Ü ½ Ý Þ Ù Ú then ¼ ½ ¾ is the priority graph Ý Þ c c c c c c c Ù Ú o o o o o o o o o o o o o o Ý Þ</formula><p>For well-founded priority operators, graphical insertion is the syntactical counterpart of semantical composition of priority operators. THEOREM 6.3</p><p>Let be a well-founded graph denoting operator Ó with variables Î . <ref type="bibr">Let</ref> ´ Ü µ Ü¾Î be a family of well-founded graphs denoting operators ´ÓÜ µ Ü¾Î with variables ´ÎÜ µ Ü¾Î . Let ¼ be the graphical insertion of ´ Ü µ Ü¾Î in , and let Ó ¼ be the operator denoted by ¼ .</p><p>Then Ó ¼ is the composition of Ó with ´ÓÜ µ Ü¾Î , i.e.</p><p>Ó ¼ ´ÊÝ µ Ý¾ Ë ÎÜ Ü¾Î Ó ´ÓÜ ´´Ê Ý µ Ý¾ÎÜ µµ Ü¾Î COROLLARY 6.4 Well-founded priority operators are closed under composition.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">The binary priority operators</head><p>There are essentially only two binary priority operators; they are denoted by the graphs</p><formula xml:id="formula_37">Ü Ý and Ü Ý</formula><p>Strictly speaking, there is also a third one, which is like the first one but with Ü and Ý swapped around. All other binary priority graphs (i.e. graphs having possibly more than two nodes but precisely two variables) are equivalent to one of these three. Since the third one is essentially the same as the first, we focus just on the first two. The two binary priority operators are of great importance for the remainder of the paper. We will write them respectively as Ü Ý and Ü Ý, and call 'but' and 'on the other hand'. The reason for these names is the following. From the point of view of default reasoning, the 'but' operator combines two defaults by putting the second in a position of greater priority than the first. Thus, Ü Ý means 'apply the criteria Ü and Ý, and where they conflict we apply Ý'. This is like the natural language connective 'but'. The operator ' ' combines two defaults by putting them at incomparable priority. The expression 'on the other hand' does the same job in natural language.</p><p>Applying the lexicographic rule, we can see that PROPOSITION 6.5</p><p>1. Ü Ý Ǘ Ý µ Ý, which is also equal to ´Ü Ýµ Ý .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Ü Ý Ü Ý.</head><p>PROOF. Immediate from the definitions.</p><p>The importance of these two operators is that any finitary priority operator can be written in terms of these two, using graphical insertion, as we now explain.</p><p>The operators apply to other operators in the standard compositional way: Ó ½ Ó ¾ and Ó ½ Ó ¾ are defined by ´Ó½ Ó ¾ µ´´Ê Ü µ Ü¾Î µ Ó ½ ´´Ê Ü µ Ü¾Î µ Ó ¾ ´´Ê Ü µ Ü¾Î µ, and ´Ó½ Ó ¾ µ´´Ê Ü µ Ü¾Î µ Ó ½ ´´Ê Ü µ Ü¾Î µ Ó ¾ ´´Ê Ü µ Ü¾Î µ. According to Theorem 6.3, the operators and can equivalently be applied at the level of priority graphs, in which case they correspond respectively to the graphical operations of linear sum and disjoint union <ref type="bibr" target="#b5">[6]</ref>. THEOREM 6.6 Any finitary priority operator is denoted by a term built from and the variables that occur in the priority graph for the operator. EXAMPLE 6.7 The 12 priority graphs in Example 5.6 are respectively equivalent to the following terms:</p><formula xml:id="formula_38">Ü ´Þ Ý µ, Ü Ý, Ü Ý, Ý, ´Ü Ý Þµ ´Ü Þ Ýµ, Ü ´Ý Þµ, ´Ü Ýµ Þ, ´Ü Þµ ´Ý Þ µ, ´Ü Þ Ýµ ´Ü Þµ, ´Ü Þµ Ý, ´Ü Ýµ Þ, and Ü Ý Þ.</formula><p>Notice how the term can be obtained from the shape of the priority graph. When two equivalent priority graphs are given, we obtained the term using the second one. Extracting the term from the first graph in the first example, we obtain ´Ü Ý Þµ ´Ü Þ Ýµ, which can be shown to be equal to Ü ´Ý Þµ.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>EXAMPLE 6.8</head><p>We cannot graphically obtain a term from the 'N' shaped graph</p><formula xml:id="formula_39">Ü d d d d d d d d Þ Û Ý</formula><p>However, it is equivalent to</p><formula xml:id="formula_40">Ü ~~~~~~~~c c c c c c c Þ Û Ý Ý</formula><p>and so it denotes the operator ´Ü ´Û Ýµµ ´Þ Ý µ. COROLLARY 6.9 Any finitary operator satisfying conditions IBUT is equivalent to a term built from and the variables. PROOF. Follows from Theorems 3.1 and 6.6.</p><p>The notions of refinement, equivalence, preferential entailment and preferential equivalence of the last section all extend naturally to terms. EXAMPLE 6.10 ´Ü Ýµ Þ ´Ü Þµ ´Ý Þ µ; however, ´Ü Ýµ ´Ü Þµ Ú Ü ´Ý Þµ but not conversely. EXAMPLE 6.11</p><formula xml:id="formula_41">Ü Ý Ý Ü Ý Ü Ý Ü Ý Þ Ý Þ.</formula><p>We note in passing that, for any relation Ê (and where is the full relation Å ¢ Å and the empty relation):</p><formula xml:id="formula_42">Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Algebraic treatment</head><p>Now that we have terms for describing priority operators, we can study their algebraic properties. Consider a set of relations on Å which is closed under the binary operators and , defined as before by</p><formula xml:id="formula_43">Ü Ý ´Ü Ýµ Ý Ü Ý Ü Ý</formula><p>We call such an algebra a preferential algebra, or PA. Preferential algebras are a special case of algebras of binary relations, a survey on which can be found in Németi <ref type="bibr" target="#b22">[22]</ref> and Schein <ref type="bibr" target="#b29">[29]</ref>.</p><p>Terms in the language of PAs are made from variables and the binary operators . If Î is the set of variables occurring in a term , then denotes the Î -ary priority operator which evaluates the term after substituting its arguments in place of the variables. The following theorem rephrases Theorem 6.6 in algebraic terminology. THEOREM 7.1 For any finitary Î -ary priority operator Ó there is a term of the language of preferential algebras such that for any preferential algebra and relations ´ÊÜ µ Ü¾Î in we have that Ó´´Ê Ü µ Ü¾Î µ ´´Ê Ü µ Ü¾Î µ.</p><p>As usual with relational algebras, we may identify certain equalities which hold between terms, however their variables are substituted. For example, it was seen in Example 6.10 that</p><formula xml:id="formula_44">´Ü Ýµ Þ Ǘ Þµ ´Ý Þ µ.</formula><p>The following theorem gives a finite axiomatization of all the equations (equalities between terms) true in preferential algebras. THEOREM 7.2 An equation is true in all preferential algebras iff it is derivable from the following seven axioms:</p><formula xml:id="formula_45">1. Ü Ü Ü ( Idempotent) 2. Ü ´Ý Þµ Ǘ Ýµ Þ ( Associative) 3. Ü Ý Ý Ü ( Commutative) 4. ´Ü Üµ Ü ( Idempotent) 5. Ü ´Ý Þ µ Ǘ Ýµ Þ ( Associative) 6. ´Ü Ýµ Þ Ǘ Þµ ´Ý Þ µ ( Distributes over ) 7. ´Ü Ýµ Ü Ü Ý (Absorption)</formula><p>Some subsets of these axioms are interesting on their own:</p><p>¯Two terms yield the same priority graph by graphical insertion iff they can be proved equal by the axioms 2, 3, 5. ¯We can define the forest form of a term, as the term obtained by normalizing it using the axiom 6 from left to right. ¯The rules 1, 2, 3 form a complete axiomatization of the -reduct (a trivial class of algebras, isomorphic to sets with intersection). ¯In contrast, the rules 4, 5 do not axiomatize the -reduct: we have to add ´Ý ´´Ü Ýµ Þµµ ´Ü Ýµ Ý</p><p>(2)</p><formula xml:id="formula_46">´´Ü Ýµ Þµ Ý ´Ü Ýµ absorption ´Ü Ýµ Þ<label>(1) 6.</label></formula><p>Ü ´´Ü Ýµ Þµ Ü Ý ´´Ü Ýµ Þµ</p><p>(5)</p><formula xml:id="formula_47">´Ü Ýµ Þ (3) 7. Ý Þ ´Ý Þ µ Ý Þ Ý absorption Ý Þ</formula><p>idempotence These axioms are also complete for inclusion, since Ê ½ Ê ¾ iff ´Ê½ Ê ¾ µ Ê ¾ . It is also possible to construct a (uninteresting) proof system for inclusion without resorting to equality Preferential algebras have turned out to be an interesting case of relational algebras. We gave in theorem 7.2 a finite set of axioms from which all equations true of PAs may be proved. There are many other issues in relational algebra which can be discussed. For example, is PA axiomatizable in the following stronger sense: is there a finite set of equations which are true of all and only all algebras in PA? If so, PA is a variety. The answer is no; this is proved in the appendix. However, PA is a quasi-variety (also proved in the appendix), which means that it can be axiomatized (in this strong sense) by conditional equations.</p><p>The following theorem gives a derivation system for preferential entailments true in preferential algebras.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>THEOREM 7.4 A preferential entailment</head><p>holds in all preferential algebras iff it is derivable from the equality axioms 1-7, together with the following:</p><formula xml:id="formula_48">8. If Ü Ý then Þ Ü Ý (C1) 9. If Ý Ü Ü and Ü Ý Ý then Ü Ý (S1)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusion</head><p>The paper develops the theory of generalized prioritization begun by Grosof <ref type="bibr" target="#b13">[14]</ref>. It introduces priority operators, an analog of circumscription policies applicable in preferential logics. Furthermore:</p><p>¯It shows that priority operators are canonical with respect to a generalization of Arrow's conditions; ¯It gives criteria for deciding: refinement, equality and preferential entailment of priority operators; ¯It shows that the two binary operators can express any priority operator, and hence any operator satisfying generalized Arrow's conditions; ¯It gives a complete axiomatization of the operators and their relationships.</p><p>Topics for further study include investigating the supplementary laws that can be established for specific preferential logics, and for their combinations. We would also like to relax the requirement that operators be finitary, and study a logic for expressing infinitary operators.  2. (´) immediate. (µ) Similarly to part 1, find minimal with ÑÊ Ú´ µ Ò. </p><formula xml:id="formula_49">3. (µ) Suppose Ñ Ó ´´ÊÜµ Ü¾Î µ Ò. Then Ñ Ó ´´ÊÜµ Ü¾Î µ Ò is immediate. Also, Ñ Ó ´´ÊÜµ Ü¾Î µ Ò implies Ò Ó´´ÊÜµ Ü¾Î µ Ñ, so ÒÊ Ú´ µ Ñ. Since Ñ Ó ´´ÊÜ µ Ü¾Î µ Ò,</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.3 Canonicity of the lexicographic rule</head><p>Our aim in this section is to prove Theorem 3.2. This will involve inventing a new view of priority operators in terms of what we call votes. We do this in a sequence of lemmas. The first one shows that an operator that is independent, unanimous, and based on preferences (in short: IBU) is determined by its responses to all possible relations on a fixed two-point domain.</p><p>LEMMA A.1</p><p>Let Å ¾ Ñ Ò Å Ñ Ò, and Ó ½ Ó ¾ be two IBU operators. If for all families of relations ´ÊÜµÜ¾Î we have Ó ½ ´´ÊÜµ Ü¾Î µ Ñ Ò Ó ¾ ´´ÊÜµ Ü¾Î µ Ñ Ò then, for all ´ÊÜµÜ¾Î , Ó ½ ´´ÊÜµ Ü¾Î µ Ó ¾ ´´ÊÜµ Ü¾Î µ.</p><p>PROOF. Take any ¾ Å. We show Ó ½ ´´ÊÜµ Ü¾Î µ iff Ó ¾ ´´ÊÜµ Ü¾Î µ .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>¯If</head><p>, we have Ê Ü or Ê Ü for all Ü. Then by U, we have either Ó ½ ´´ÊÜµ Ü¾Î µ and Ó ¾ ´´ÊÜµ Ü¾Î µ , or Ó ½ ´´ÊÜµ Ü¾Î µ and Ó ¾ ´´ÊÜµ Ü¾Î µ , depending on whether Ê Ü for some Ü or not. In any case, Ó ½ Ó ¾ agree at . ¯If : define the family ´Ê¼ Ü µ Ü¾Î in terms of ´ÊÜµÜ¾Î as follows:</p><formula xml:id="formula_50">Ê ¼ Ü ÊÜ except at ´Ñ Òµ, where ÑÊ ¼ Ü Ò ¸ ÊÜ . Then Ó ½ ´´ÊÜµ Ü¾Î µ ° Ó ½ ´´ÊÜ µ Ü¾Î µ by I °Ñ Ó ½ ´´Ê ¼ Ü Ñ Ò µ Ü¾Î µ Ò by B °Ñ Ó ¾ ´´Ê ¼ Ü Ñ Ò µ Ü¾Î µ Ò by hypothesis ° Ó ¾ ´´ÊÜ µ Ü¾Î µ by B ° Ó ¾ ´´ÊÜµ Ü¾Î µ by I. DEFINITION A.2 A vote is an element of Î . DEFINITION A.3</formula><p>A vector of Î votes, one per variable of Î , is called an entry. Lemma A.1 tells us that a Î -ary IBU operator Ó determines a unique function Î Î Î , and conversely. The function takes as argument the vote each ÊÜ gives on the two-point domain Å ¾ (i.e. an entry), and returns as result the vote that Ó´´ÊÜµ Ü¾Î µ gives on Å ¾ . Such functions can be represented finitely by an operator table. For instance, the operator 'but' defined in Section 6.2 is described by Table <ref type="table">4</ref>:</p><formula xml:id="formula_51">TABLE 4. Table of 'but' ( ) Ê ½ Ê ¾ Ê</formula><p>Each column above the line is an entry, and the element in the same column below the line is the corresponding result. For an entry and vote Ú, Ú is the subset of variables that gives vote Ú. In particular, The winners Ö of an entry is the subset of Î that gives the same vote as the result Ö; the abstainers is the subset of Î that abstains, i.e., votes ; the rest is called the opposition, which is divided in two subgroups, since four votes are possible. A vote is decided if it is or .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DEFINITION A.4</head><p>The converse of a vote is defined by the table:</p><formula xml:id="formula_52">Ú Ú ½ LEMMA A.5</formula><p>If an IBU operator gives a result Ö for entry ´ µ ¾Î then it gives Ö ½ for entry ½ . PROOF. By B.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Note that any table with this property will give us an IB operator. COROLLARY A.6</head><p>There are ¾ Ò ¿£´¾ Ò ½µ ½ Ò-ary IBU operators.</p><p>PROOF. The possible tables are Ò . Symmetry (Lemma A.5) reduces this to ¾ Ò , which is thus the number of IB operators. The cases eliminated by unanimity, are given by choosing a non-empty unanimous subset (there are ¾ Ò ½), choosing its vote (three possibilities: either or ), setting the rest to . Plus one for the case where all votes are and the result is .</p><p>We will illustrate proofs of the next few lemmas in tabular form, which should be understood as a schematic excerpt from an operator table such as Table <ref type="table">4</ref>. The leftmost column indicates subsets of the variables Î . Each column will represent a possible combination of votes (an entry) and the result computed by the operator. New columns can be deduced from preceding columns, according to the following rules of inference, derived from the respective conditions on the operators. S. Symmetry: from an entry of the table with a given result, we deduce the converse entry with the converse result (Lemma A.5). In our tabular proofs, we will omit the entry on which it is applied when it operates on the previous column of the proof table. U. Unanimity: any unanimous column must have the result of the unanimous subset (unless it is empty). This rule operates on the current column. T. Transitivity: in Table <ref type="table">5</ref>, we compute the admissible compositions of votes for transitivity. The vertical dimension <ref type="bibr">TABLE</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Table of compatible compositions</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>AE Î Î Î</head><p>indicates the relation between Ü and Ý, the horizontal dimension the relation between Ý and Þ. The corresponding cell shows the implied relation between Ü and Þ. For instance, the first cell states that if ÜÊ Ý and ÝÊ Þ, then no restriction on ÜÊÞ can be deduced. The cell diagonally below states that if ÜÊ Ý and ÝÊ Þ, then ÜÊ Þ. If two columns are known, and we build a third entry which is compatible for transitivity with these two columns, then the result of this entry must also be compatible for transitivity with the results of the two known columns.</p><p>For otherwise we would have built a counterexample to preservation of transitivity, by using a domain Ü Ý Þ where preferences between ´Ü Ýµ are given by the first column, between ´Ý Þµ by the second, and between ´Ü Þµ by the third. For instance, if we compose two entries with results respectively, we see in the table that the result of the composition must be or for any entry which is compatible with the first two. If Ü is the only variable and the vote of ÊÜ was in the first entry and in the second entry, then any value of ÊÜ must yield or . During a proof we will usually try to constrain the result while letting the entry vary as widely as possible to get stronger results. By default, T uses the two previous columns of the proof table. These table excerpts will be schematic: usually, the designation on the left will not be single variables, but sets of variables, indicating that the line has to be replicated as many times as they are variables in the set (sometimes 0). Also, the content of the cell can be a set. We will sometimes omit the set braces, for compactness. In the result, the comma (e.g. in ) thus means 'or'. We convene that ½ is the name of the first entry (the second column), and is the name of the th entry (the • ½ th column). The justification will be indicated below each entry. It will be one of the basic rules (S,U,T) or the number of a lemma. Further examples are provided in the proofs below.</p><p>For the rest of this section, we will omit the reference to the (fixed) IBUT operator. For instance, whenever we speak of 'the result of an entry', it means the result of applying the currently considered IBUT operator.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>LEMMA A.7</head><p>The result of is iff all arguments are . PROOF. 'If': by U. 'Only if':</p><formula xml:id="formula_53">½ ¾ ¿ Ö Ý Ë Ì¢ Í¢</formula><p>Read this table as follows. Suppose we supply a certain entry, ½ , which of course is divided in votes. The result (by hypothesis) is . Construct the converse entry ¾ ½ ½ ; by Ë, the result is also . Now consider the argument votes ¿ of the 4th column. Since they are compatible for transitivity with ½ ¾ , the result Ö ¿ should also be compatible (justification: T). But that means it must be . Now consider the argument votes of the last column, ; by U, the result should be . The last two columns contradict, as indicated by ¢, unless the subsets of Î are all empty, so that U cannot be applied on .</p><p>Hence the only way of making the result is by having empty, i.e. all votes for .</p><p>The sequence of lemmas that follows proves that IBUT operators have many of the properties of priority operators. For example, the next lemma says that if a definite result is obtained from a given entry, then the same result will be obtained a fortiori if some abstainers join the winners, whatever the opposition does. LEMMA A.8 If an entry yields , then any entry with some arguments in replaced by any vote, and/or some in replaced by , will also yield . PROOF. Let be the names of the votes changing from to , and let Ú Ûbe any tuple of votes.</p><formula xml:id="formula_54">Ú Ú Û Ö Ö Ý Í Ì Ì´ ½ ¿ µ LEMMA A.9</formula><p>If the result of is , then some argument must be .</p><p>PROOF. Assume empty. Then:</p><formula xml:id="formula_55">Ö Ý ¢ Í¢</formula><p>The next lemma is very similar to Lemma A.8: It says that if an incomparability result is obtained from a given entry, then the same result will be obtained a fortiori if some abstainers or opposition join the winners. But here, the opposition could change the result by making a coalition. Î and thus cannot be extended.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DEFINITION A.12</head><p>We say an operator propagates a property of relations, if its result has the property as soon as one of its arguments relation has it.</p><p>An operator preserves a property of relations, if its result has the property when all its argument relations have it.</p><p>Clearly, propagation implies preservation unless Î is empty.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>COROLLARY A.13</head><p>Any IBU operator preserves reflexivity; propagates irreflexivity; preserves symmetry. Any IBUT operator propagates antisymmetry.</p><p>PROOF. By U and Lemma A.7.</p><p>(These facts are recalled in Theorem 4.1 for the narrower class of priority operators.) DEFINITION A. <ref type="bibr" target="#b13">14</ref> Let Ë Î such that Ë is disjoint from . Ë shows iff the entry where all arguments in Ë are , all arguments in are , all other ones are , yields either or . This result is called the show-result.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>LEMMA A.15</head><p>If Ë Ï Ï disjoint from , Ë shows , then Ï shows . PROOF. Suppose that Ï does not show , as indicated in ½ below. Let À Î Ö Ï Ö be the rest of the variables.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Ë Ï Ö Ë À Ö Ý</head><p>The second entry contradicts the hypothesis that Ë shows .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>LEMMA A.16 If</head><p>, disjoint from Ë, Ë shows , then Ë shows .</p><p>PROOF. Suppose that Ë does not show , as in ½ . Let À Î Ö Ö Ë be the rest of the variables.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Ö Ë À Ý</head><p>Again, ¾ contradicts the hypothesis that Ë shows . LEMMA A.17 If , Î Ö shows . PROOF. By U.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>LEMMA A.18</head><p>If is finite and disjoint from , shows iff for some Ü ¾ shows Ü .</p><p>PROOF. For the implication: We treat the case of Ü ½ Ü ¾ Ü ¿ for notational convenience, but the induction will work for any finite set. Let À Î Ö Ö . Assume (H1) shows and for all Ü ¾ , (H2.i) doesn't show Ü .</p><formula xml:id="formula_56">Ü ½ Ü ¾ Ü ¿ À Ý À¾ ½ À¾ ¾ Ì À¾ ¿ Ì¢ À½¢</formula><p>The other direction is just Lemma A.16.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>LEMMA A.19</head><p>If shows disjoint , then both show-results are .</p><p>PROOF. Since, a priori, there two possibilities for both show-results, we have to exclude three cases, but two are symmetric. Let À Î Ö Ö Ö be the rest.</p><p>1. Both show-results are .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>À Ý À½ À¾ Ì¢ Í¢</head><p>2. One show-result (say ) is , the other is .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>À Ý À½ À¾ Ì¢ Í¢</head><p>The lemmas above demonstrate that 'shows' is completely determined by the sentences of the form 'Ë shows Ü ' where Ë is minimal. We will now prove that these sentences can be encoded in a priority graph, and finally, that this graph can reconstruct the operator, which closes the cycle and proves the equivalence of all these representations (for Î finite).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DEFINITION A.20</head><p>The priority graph of an IBUT operator is defined by:</p><formula xml:id="formula_57">¯AE ´Ü Ëµ Ë is a minimal subset of Î showing Ü . ¯´Ü ½ Ë ½ µ ´Ü¾ Ë ¾ µ iff ´ Ü ½ Ë ½ µ Ë ¾ . ¯Ú´´Ü Ëµµ Ü.</formula><p>Note that the node ordering is irreflexive and transitive and thus acyclic. LEMMA A.21 Well-foundedness and Zorn are related as follows. Let Ê be a transitive relation on Å. Ê is well-founded iff (for all È Å Ê È is Zorn). PROOF. (µ.) Let È Å, and let be an Ê chain in È. Since Å and Ê is well-founded, has a minimal element, say . We now show that is a lower bound for . Let Ñ ¾ . We must show that ÊÑ. Since is a chain, either ÑÊ or ÊÑ. If ÑÊ then ÊÑ. But also, if ÑÊ , then ÊÑ, otherwise we would contradict 's minimality.</p><formula xml:id="formula_58">If ´Ü Ëµ ¾ AE, then for any Þ ¾ Ë, Ë Ö Þ shows Þ . PROOF. (H1) Ë shows Ü . Since Ë is a minimal showing set, (H2) Ë Ö Þ does not show Ü . Now assume (H3) Ë Ö Þ shows Þ is false: Ü Þ Ë Ö Þ Ê ×Ø À½¢ À¾</formula><p>(´.) Suppose not; let È be an infinite descending Ê sequence. As Ê is transitive, it is an Ê È -chain, but has no Ê È -lower bound, so Ê È is not Zorn. ¾ Ã ¾ AE Ñ Ò ¾ È ´ÒÊÑÊ and µ implies ÒÊ Ñ -that is, Ò ¾ È ÒÊ forms a Ê •Ã -chain.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.</head><p>¾ Ã Ñ ¾ È ÑÊ implies Ô ¾ È ´ÔÊ Ñ and ÔÊ Ñµ -that is, the same set also forms a Ê Ã -chain with no minimal element. 3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>¾ AE Ñ Ò</head><formula xml:id="formula_59">¾ È ÒÊÑÊ implies ´ÒÊ Ñ or ¾ Ã µ.</formula><p>PROOF. The idea of the proof is the following. First, we obtain a set AE ¼ AE which contains those which participate in frontiers all the way down the chain È. Then find an element of È below which all the frontiers are in AE ¼ . Ã is defined as the minimal elements of AE ¼ . Then it is possible to prove property 1. Property 2 follows because we have stipulated that È have no minimal element; that is, for each Ò ¾ È there is a Ò ¼ ¾ È with Ò ¼ Ê Ò. Property 3 follows because Ã is the set of minimal elements of AE ¼ .</p><p>Let AE ¼ ¾ AE Ñ ¾ È Ò Ô ¾ È ÔÊ ÒÊÑ and ¾ fr´Ò Ôµ . ¯If AE ¼ AE then let be an arbitrary element of È. ¯Otherwise, for each ¾ AE AE ¼ let Ñ ¾ È be such that Ò Ô ¾ È, if ÔÊ ÒÊÑ then ¾ fr´Ò Ôµ, and let Ñ Ò Ê Ñ ¾ AE AE ¼ . That each Ñ can be found follows from the definition of AE ¼ , and that their minimum can be found is guaranteed by the facts that È is a chain and AE is finite.</p><p>´: Suppose Ñ Ó ½ ´´ÊÜµ µ Ò. We show Ñ Ó ¾ ´´ÊÜµ Ü¾Î µ Ò. Suppose for some node in AE ¾ we have ÑÊ Ú ¾ ´ µ Ò. By the hypothesis, ¾ AE ½ ÑÊ Ú ½ ´ µ Ò, and since Ñ Ó ½ ´´ÊÜµ Ü¾Î µ Ò, there is a ½ s.t. ÑÊ Ú ½ ´ µ Ò. But Ú ½ ½ Ú ¾ ¾ , so there is a ¼ ¾ AE ¾ with Ú ¾ ´ ¼ µ Ú ½ ´ µ and therefore, ÑÊ Ú ¾ ´ ¼ µ Ò. Therefore, Ñ Ó ¾ ´´ÊÜµ Ü¾Î µ Ò.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Normal forms</head><p>In the main text, a canonical form of priority graphs was defined. An important property of this definition is that the variables below a critical node in a graph are the same as those below the corresponding node in the normal form. This lemma will be used in the proof of the theorem that follows.</p><p>LEMMA A.31</p><formula xml:id="formula_60">Let ¼ Ǽ ¼ ¼ Ú ¼ µ be the normal form of Ǽ Úµ. If ¾ AE is critical, then Ú Ú ¼ ¼ ´Ú´ µ Ú µ .</formula><p>PROOF. Suppose that Ü ¾ Ú . Then there's a node ¾ AE with and Ú´ µ Ü. need not be critical, but we know that there is a ¾ AE critical with Ú Ú , and Ú´ µ Ú´ µ. Therefore, Ú´ µ ¾ Ú and Ú Ú , so   Õ in 3b and ¼ Õ ¼ in 3d to satisfy 1c. So all that remains is to show that (2) implies (3).</p><formula xml:id="formula_61">Ü ¾ Ú´ µ Ú Ú´ µ Ú Ú ¼ ¼ ´Ú´ µ Ú µ . Conversely, if Ü ¾ Ú ¼ ¼ ´Ú´ µ Ú µ then</formula><formula xml:id="formula_62">¼ Ú . Now take ´Ú´ ¼ µ Ú ¼ µ ¾ AE ¼ . We must show (i) that Ú´ µ Ú ¼ ´Ú´ ¼ µ Ú ¼ µ, which is immediate, and (ii) that Ú ¼ ¼ ´Ú´ ¼ µ Ú ¼ µ Ú . For that, it is sufficient to show that Ú ¼ ¼ ´Ú´ ¼ µ Ú ¼ µ Ú ¼ ,</formula><formula xml:id="formula_63">¼ ¾ AE ´ ¼ ¼ Ê ¼ µ (1b) ¾ AE ¼ ¾ AE ´ Ê ¼ µ (1c) ´µ ¾ AE ¼ ¾ AE Ê ¼ (2a) ¼ ¾ AE ´ ¼ ¼ Ê ¼ µ (2b) ¾ AE ¼ ¾ AE ´ Ê ¼ (2c) ¾ AE ´ ¼ ¾ AE Ê ¼ µ ,<label>(2d) version (2</label></formula><p>Suppose we have Ô Ô ¼ which do not satisfy the disjuncts in 3a. We need to find an appropriate Õ. Setting Õ from 2c might work; if it does, we are home. If it doesn't, we have a troublesome Ô ¼ ¾ AEÕ for which not ÊÕÔ ¼ and there is no appropriate Õ ¼ . Use (2) again with Õ and ¼ Ô ¼ , to obtain a Õ and ¼ ¾ AE , which we will call Ö Õ , Ö ¼ ¾ AEÖ. Since Ö Õ , we have by 2d × ¼ ¾ AEÖ ÊÖ× ¼ ; and by transitivity we have Ö Ô , so Ö satisfies the conditions for Õ in 3b. Moreover, Ê ÖÖ ¼ (from 2c) guarantees 3d.</p><p>The extraction of terms from priority graphs was given by example in the main text. Here, we give formal definitions in order to prove Theorem 6.6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DEFINITION A.33</head><p>To eliminate such shapes as the N shape in Example 6.8, we define the forest form ¼</p><p>´ µ of as: <ref type="bibr">(c)</ref> .</p><p>¯Ü ¾ Ú´ µ. Then Ü Ü def. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Ü Ü</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.</head><p>´ ½ ¾ µ: we use associativity of to obtain ½ ´ ¾ µ, and first eliminate ½ inductively, then ¾ .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.</head><p>´ ½ ¾ µ: we use distributivity to obtain ´ ½ µ ´ ¾ µ, and process inductively each part.</p><p>THEOREM 7.2 An equation is true in all preferential algebras iff it is derivable from the following seven axioms:</p><p>1. Ü Ü Ü (a) is a variable. Since Ú AE, must also be Ü (by Theorem 5.2). Idempotence finishes the proof.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>(b)</head><p>½ ¾ . By Theorem 5.2 we know ½ ¾ Ú Ü iff ¾ Ú Ü, and by inductive hypothesis ¾ Ú Ü. We prove ½ ¾ Ú Ü as follows:</p><p>´ ½ ¾ µ Ü ´ ½ ¾ µ ¾ Ü Example 7.3(1)</p><p>´</p><formula xml:id="formula_64">½ ¾ µ ¾ since ¾ Ú Ü ½ ¾ Example 7.3(1)<label>(c)</label></formula><p>½ ¾ . By Theorem 5.2 we know ½ ¾ Ú Ü iff ½ Ú Ü or ¾ Ú Ü. Without loss of generality we suppose it is ½ , and by inductive hypothesis we have ½ Ú Ü. Now ½ ¾ Ü ´ ½ Üµ ¾ ½ ¾ , so ½ ¾ Ú Ü. 2. AE . By the semantics we know that Ú ´ µ is valid iff Ú and Ú , so by inductive hypothesis we prove Ú and Ú , which expand to and , from which we prove</p><p>´ µ using associativity, commutativity and idempotence. (c) A variable Ü. If Ü occurs in , we suppress it using Lemma A.37. The remaining case is to prove inequalities of form Ú Ü , where Ü is a variable not occurring in . By Theorem 5.2, an inequation of this form is valid iff Ú and in the graph of there is a node labelled by Ü such that Ú Ü Ú . We can assume without loss of generality that is in forest form, since we just have to apply distribution repeatedly to obtain this form.</p><p>Let denote the subterm below Ü in the forest form (</p><p>´ ´Ü µµ). By convention, we treat the case where is empty uniformly. i. We prove Ú Ü by induction on . Since it is in forest form, can be:</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>THEOREM 4. 1</head><label>1</label><figDesc>Table 3 holds; i.e. the properties are propagated by the lexicographic combination in the manner shown in the table.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>LEMMA A. 10</head><label>10</label><figDesc>If an entry yields , then the entry where some elements have been replaced by also yields . PROOF. Assume not: it cannot yield by Lemma A.7, so it yields (or symmetrically ) as shown in ¾ . Then Ö Ý ¢ ¢ LEMMA A.11 If some elements are replaced by the result (in other words, if the winners are extended), then the result remains the same. PROOF. If the result is: ¯ , the proof follows by Lemma A.10; ¯ : by Lemma A.8; ¯ : by Lemma A.7,</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>3 .</head><label>3</label><figDesc>AE By induction on . can be: (a) ½ ¾ : then we use distribution. (b) ½ ¾ : then we use associativity to obtain AE ½ ´¾ µ.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>TABLE 2 .</head><label>2</label><figDesc>Properties of a relation Ê and their closures</figDesc><table><row><cell>Property</cell><cell>Definition</cell><cell>'Closure(s)'</cell></row><row><cell>Reflexive</cell><cell>Ñ ¾ Å ÑÊÑ</cell><cell>ÑÊ Ò iff ÑÊÒ or Ñ Ò</cell></row><row><cell>Irreflexive</cell><cell>Ñ ¾ Å Ñ ÊÑ</cell><cell>ÑÊ Ò iff ÑÊÒ and Ñ Ò</cell></row><row><cell>Symmetric</cell><cell>Ñ Ò ¾ Å ´ÑÊÒ µ ÒÊÑµ</cell><cell>ÑÊ Ò iff ÑÊÒ or ÒÊÑ</cell></row><row><cell></cell><cell></cell><cell>ÑÊ Ò iff ÑÊÒ and ÒÊÑ</cell></row><row><cell></cell><cell></cell><cell>ÑÊ Ò iff ÑÊÒ and ÒÊÑ.</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>TABLE 3 .</head><label>3</label><figDesc>How the properties propagate through priority operatorsLet ´AE Úµ be a priority graph denoting the priority operator Ó. The result of Ó is. . .</figDesc><table><row><cell></cell><cell></cell><cell>if. . .</cell><cell>argument is, and also . . .</cell></row><row><cell>1.</cell><cell>reflexive</cell><cell>each</cell><cell></cell></row><row><cell>2.</cell><cell>irreflexive</cell><cell>some</cell><cell></cell></row><row><cell>3.</cell><cell>symmetric</cell><cell>each</cell><cell></cell></row><row><cell>4.</cell><cell>antisymmetric</cell><cell cols="2">some there is no infinite -chain below it.</cell></row><row><cell>5.</cell><cell>transitive</cell><cell>each</cell><cell>the priority is well-founded.</cell></row><row><cell>6.</cell><cell>total</cell><cell>each</cell><cell>the priority is total.</cell></row><row><cell>7.</cell><cell>empty</cell><cell cols="2">some its node is minimal in ´AE µ.</cell></row><row><cell>8.</cell><cell>full</cell><cell>each</cell><cell></cell></row><row><cell cols="4">Now suppose AE is finite, and each Ê Ú´ µ is transitive.</cell></row><row><cell>9. 10.</cell><cell>well-founded Zorn</cell><cell>each each</cell><cell>for each Ã AE the relation Ì</cell></row></table><note><p>¾Ã Ê Ú´ µ is Zorn.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>link) Link below if this does not change the down-set of .</figDesc><table><row><cell>More formally:</cell><cell>link µ ¼ if: there are ¾ AE with</cell><cell>, Ú</cell><cell>Ú´ µ Ú</cell><cell>Ú´ µ ,</cell></row></table><note><p>and ¼ is the transitive closure of</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head></head><label></label><figDesc>Ü Ý Ü Ý Ü (Example 7.3(3) below). This subclass is again rather trivial, since the free algebras are isomorphic to strings of variables without repetition.</figDesc><table><row><cell>EXAMPLE 7.3</cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="2">Some interesting derived equations.</cell><cell></cell><cell></cell></row><row><cell>1.</cell><cell cols="2">´Ü Ýµ Ý ´´Ü Ýµ Ýµ ´Ü Ýµ ´Ü Ýµ ´Ü Ýµ</cell><cell>absorption associative, idempotent</cell></row><row><cell></cell><cell></cell><cell>Ü Ý</cell><cell>idempotent</cell></row><row><cell>2.</cell><cell cols="2">Ü ´Ý Üµ ´Ü ´Ý Üµµ ´Ý Üµ ´´Ü ´Ý Üµµ Üµ Ý ´´Ý Üµ Üµ Ý</cell><cell>(1) associative, commutative absorption</cell></row><row><cell></cell><cell></cell><cell>Ü Ý</cell><cell>idempotent</cell></row><row><cell>3.</cell><cell>Ü Ý Ü</cell><cell>´Ü Ý Üµ ´Ý Ü µ ´Ü Ý Üµ ´Ý Ü Ý Üµ</cell><cell>(1) where Ý Ý Ü idempotent</cell></row><row><cell></cell><cell></cell><cell>Ý Ü Ý Ü</cell><cell>(1) where Ý Ü Ý Ü</cell></row><row><cell></cell><cell></cell><cell>Ý Ü</cell><cell>idempotent</cell></row><row><cell>4.</cell><cell cols="2">´Þ ´Ü Ýµµ Ý ´Þ ´Ü Ýµµ ´Ü Ýµ Ý ´Þ ´Ü Ýµµ ´Ü Ýµ ´Þ ´Ü Ýµµ</cell><cell>(1) where Ý Ü Ý associative, idempotent (1)</cell></row><row><cell>5.</cell><cell></cell><cell></cell><cell></cell></row></table><note><p><p>Ý ´´Ü Ýµ Þµ ´Ý ´´Ü Ýµ Þµµ ´Ü Ýµ</p><ref type="bibr" target="#b3">(4)</ref> </p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>2 .</head><label>2</label><figDesc>ÑÊÒ iff ¾ AE ´ÑÊ Ú´ µ Ò or ´ ÑÊ Ú´ µ Ò and ¼ Ñ Ê Ú´ ¼ µ Òµµ.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head></head><label></label><figDesc>We require to show that ÑÊ Ú´ µ Ò. Suppose not; then Ñ Ê Ú´ µ Ò, a contradiction. (´) Suppose is such that ÑÊ Ú´ µ Ò. We require to find such that ÑÊ Ú´ µ Ò. By hypothesis, ½ ÑÊ Ú´ ½ µ Ò or ÒÊ Ú´ ½ µ Ñ. If ÑÊ Ú´ ½ µ Ò, then ÒÊ Ú´ ½ µ Ñ so ÑÊ Ú´ ½ µ Ò, so we set ½ . Otherwise, again using the hypothesis, ¾ ½ ÑÊ Ú´ ¾ µ Ò or ÒÊ Ú´ ¾ µ Ñ. Again, we set ¾ or we find ¿ with the same property. This procedure must terminate, for otherwise we have an infinite descending sequence ½</figDesc><table><row><cell>¾</cell><cell>¡ ¡ ¡ ,</cell></row><row><cell>contradicting the well-foundedness of ´AE µ.</cell><cell></cell></row></table><note><p><p><p><p>3</p>. ÑÊ Ò iff ÑÊÒ and ¾ AE ÑÊ Ú´ µ Ò.</p>4</p>. ÑÊ Ò iff ¾ AE ÑÊ Ú´ µ Ò. PROOF. 1. (µ) Suppose is such that ÑÊ Ú´ µ Ò.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head></head><label></label><figDesc>either ÑÊ Ú´ µ Ò, in which case ÑÊ Ò as ÑÊ Ú´ µ Ò . Then ÒÊ Ú´ µ Ñ and ÒÊ Ú´ µ Ñ, so Ò Ó´´ÊÜµ Ü¾Î µ Ñ</figDesc><table><row><cell>required; or</cell><cell>ÑÊ Ú´ µ Ò, also proving the result.</cell></row><row><cell cols="2">(´) Let be minimal in the set</cell></row></table><note><p>4. Similar ideas.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head></head><label></label><figDesc>À¿ Ì¢ COROLLARY A.<ref type="bibr" target="#b22">22</ref> If Î is finite, then for any ´Ü Ëµ ¾ AE, Ë Þ ËÞ ´Þ ËÞµ ´Ü Ëµ . PROOF. Clearly Þ ´Þ ËÞµ ´Ü Ëµ Ë by the definition of the order. Conversely, take Þ ¾ Ë. By Lemma A.21, Ë Ö Þ shows Þ. Since Ë is finite, it is Zorn, and so there is a ËÞ Ë minimal such that ËÞ shows Þ, and ´Þ ËÞµ ´Ü Ëµ.Assume Î is finite. shows Ü iff Ü is minimal in Î Ö , i.e. ¾ AE ´Ú´ µ Ü ¼ Ú´ ¼ µ ¾ ¼ µ.PROOF. By contraposition, assume doesn't show Ü . Since Î Ö Ü shows Ü by Lemma A.17, there must be a minimal Å such that Å Å shows Ü . Since Å , we can pick some Þ ¾ Å Ö . We have ´Ü Åµ ¾ AE, and ´Þ ËÞµ ¾ AE for some ËÞ. By Corollary A.22, ´Þ ËÞµ ´Ü Åµ, contradicting the minimality of Ü in Î Ö . Conversely, if Ü is minimal, all nodes below Ǘ Ëµ are in . By Lemma A.22, they form Ë, so Ë shows Ü Ë Ü ¾ . By Lemma A.16, shows Ü . Ad absurdum, assume that the result isn't . It can't be either, by Lemma A.7. Say (H) it is . ( is solved symmetrically.) then by Lemma A.8, doesn't show Ü , contradicting Lemma Item 9 of Table 3 holds; i.e. if AE is finite, and each Ê Ú´ µ is transitive and well-founded, then Ó´´ÊÜµ Ü¾Î µ is well-founded. PROOF. Suppose not, i.e. suppose ¡ ¡ ¡ Ñ ¿ Ó´´ÊÜµ Ü¾Î µ Ñ ¾ Ó´´ÊÜµ Ü¾Î µ Ñ ½ is an Ó´´ÊÜµ Ü¾Î µsequence. Each Ñ Ò•½ Ó´´ÊÜµ Ü¾Î µ ÑÒ gives us an Ò (by Theorem 2.11(3)) such that Ñ Ò•½ Ê Ú´ Òµ ÑÒ. Let AE ½¾ AE Ò Ò is infinite . Since AE is finite, AE ½ . Let AE ¾ AE ½ be the -minimal points of AE ½ ; also AE ¾ . Let ¾ AE ¾ Ò ¼ be the last Ò where Ò ¾ AE ½ . We have Ò Ò ¼ Ñ Ò•½ Ê Ú´ µ ÑÒ and for infinitely many Ò, Ñ Ò•½ Ê Ú´ µ ÑÒ. Since Ê Ú´ µ is transitive, it is easy to pick a sequence showing that Ê Ú´ µ is not well-founded, contradicting the hypothesis.</figDesc><table><row><cell>LEMMA A.24</cell><cell></cell></row><row><cell>THEOREM 4.2</cell><cell></cell></row><row><cell>LEMMA A.23</cell><cell></cell></row><row><cell>THEOREM 3.2</cell><cell></cell></row><row><cell cols="2">A finitary operator satisfies conditions IBUT iff it is a priority operator.</cell></row><row><cell cols="2">PROOF. We show that the priority operator denoted by the priority graph defined for it in Definition A.20, is identical</cell></row><row><cell cols="2">to the given operator. By Lemma A.1, it is sufficient to show this for relations on a universe of two elements (i.e.</cell></row><row><cell cols="2">votes), that is, for any entry . The priority graph is well-founded, so that we can use Theorem 2.11. Look at the non-abstainers, Ü ¾ Î Ü and take its minimals for priority Å Min ´ µ Ü ¾ ¾ AE Ú´ µ Ü ¼ ¾ AE ¼ Ú ´ ¼ µ ¾ . We note that the priority result (the result given by the priority graph) is Ì Ú¾Å Ú, by Theorem 2.11, and that Å Ü shows Ü , by Lemma A.23. Consider the possible priority</cell></row><row><cell>results:</cell><cell></cell></row><row><cell>A.23. Tabularly:</cell><cell></cell></row><row><cell>Ü</cell><cell>Ö Ü</cell></row><row><cell>Ý</cell><cell>À</cell></row></table><note><p><p><p><p><p><p><p><p>¯The priority result is : iff all arguments are by Theorem 2.11.4; iff the IBUT result is by Lemma A.7.</p>¯The priority result is : iff Å and all arguments in Å are by Theorem 2.11</p>(3)</p>. shows Å by Lemma A.</p><ref type="bibr" target="#b16">16</ref></p>. By Lemma A.8, the IBUT result is also .</p>¯The priority result is : symmetrically. ¯The priority result is : iff one of the two following cases arises, by theorem 2.11:</p>-some argument Ü in Å is .</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8"><head></head><label></label><figDesc>Theorem A.30 requires several lemmas. Fix a finite graph ´AE Úµ denoting operator Ó. Let us write Ê instead of Ê Ú´ µ and Ê instead of Ó´´ÊÜµ Ü¾Î µ, in order to keep the notation lighter. DEFINITION A.<ref type="bibr" target="#b25">25</ref> Let Ñ Ò ¾ Å. The Ñ Ò-frontier, written fr´Ñ Òµ, is the set of -minimal elements of the set ¾ AE ÑÊ Ò .Note that if ¾ AE ÑÊ Ò then fr´Ñ Òµ . We write ÑÊ Ã Ò if ¾ Ã ÑÊ Ò. We also write • Ã for ¾ AE ¾ Ã</figDesc><table /><note><p><p><p><p><p><p><p>LEMMA A.</p><ref type="bibr" target="#b26">26</ref> </p>Suppose ÑÊÒ. Then ¾ fr´Ñ Òµ iff ÑÊ Ò and Ñ Ê Ò. PROOF. (If) Immediate. (Only if) Let ÑÊÒ and ¾ fr´Ñ Òµ. (1) We prove ÑÊ Ò; for if not, by definition, Ñ Ê Ò, i.e. ÑÊ Ò, contradicting ×'s minimality. (2) Since ¾ fr´Ñ Òµ, ÑÊ Ò. Thus ÑÊ Ò. Now suppose . Since is minimal in ¾ AE ÑÊ Ò , we have ÑÊ Ò. DEFINITION A.27 Let Ã AE.</p>. Now, and for the remainder of this subsection, suppose Ê is transitive for each ¾ AE and AE is finite.</p>LEMMA A.</p><ref type="bibr" target="#b28">28</ref> </p>Let È Å be a Ê-chain with no minimal element. Then there exists Ã AE and ¾ È such that 1.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9"><head>:</head><label></label><figDesc>there's a ¾ AE with Ú´ µ Ü and Ú Ú´ µ Ú , so Ü ¾ Ú . THEOREM 5.11 1. Any priority graph is equivalent to its normal form. 2. Two priority graphs are equivalent iff their normal form is the same.PROOF. 1. We apply Corollary 5.5. Suppose ¼ Ǽ ¼ ¼ Ú ¼ µ is the normal form of Ǽ Úµ, as given in Definition 5.10. If ´Ú´ µ Ú µ is a node in AE ¼ then we pick the critical node in AE. We must show (i) that Ú ¼ ´Ú´ µ Ú µ Ú´ µ, which is immediate, and (ii) that Ú Ú ¼ ¼ ´Ú´ µ Ú µ , which follows from the Lemma A.31. If is a node in AE, we must find a node in AE ¼ with the relevant properties. First, if is not critical in AE, then pick a critical node ¼ such that Ú´ µ Ú´ ¼ µ and Ú</figDesc><table /><note><p>Ú ¼ ¼ Ú :</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_10"><head></head><label></label><figDesc>their normal forms. By 1., the normal forms are equivalent, so by Corollary 5.5, we have two functions, say Ú´ ´ µµ) and decrease down-sets (Ú ´ µ Ú ). Let´ ´ µµ; Ú Ú . But Ú Ú is impossible, for then would not be critical. So Ú Ú . Thus Ú ´ µ Ú ; symmetrically Ú ´ µ Ú . Using the definition of normal form, we get ´ µ and ´ µ . Thus then, for all ¾ AE ¼ , Ú Ú ¼ ¼ .PROOF. 1. In the case of ,Ú ¼ ¼ Ú Ú Ú´ µ Ú Ú´ µ .In the case of other s, the only non-trivial case is where . But then, the fact that Ú Ú´ µ hasn't changed guarantees that Ú hasn't either. 2. The only non-trivial s are those above the deleted ; we must show that Ú´ µ ¾ Ú for those. But that is what is guaranteed by the condition that for all ¼ there exists ¼¼ ¼ with Ú´ ¼¼ µ Ü. THEOREM 5.15 By applying rules (link) and (del) repeatedly in any order until none applies, any finite priority graph is brought into a form which is equal to its normal form, up to renaming of elements of AE. Ó ¼ is the composition of Ó with ´ÓÜµÜ¾Î , i.e. Ó ¼ ´ÊÝ µ Ý¾ Ë ÎÜ Ü¾Î Ó ´ÓÜ´´ÊÝ µ Ý¾ÎÜ µµ Ü¾Î PROOF. First observe that if ½ Ò are well-founded, then so is ¼ . This enables us to use Theorem 2.11. Let us write Ǽ Úµ and Ü ǼÜ Ü Ú Üµ for eachÜ ¾ Î ½ Ò . Now, Ñ Ó ¼ ´´ÊÜµ Ü¾Î µ Ò ´µ ¾ AE ¼ ¾ AE Ú´ µ ÑÊÚ Ú´ µ ´ ¼ µ Ò ¼ ¾ AE Ú´ µ ´ ¼ Ú´ µ ¼ ÑÊ Ú Ú´ µ ´ ¼ µ Òµ ¾ AE ¼ ¾ AE Ú´ µ ´ ÑÊ Ú Ú´ µ ´ ¼ µ ÒµWe simplify notation for this proof, by writing AE and in place of AE Ú´ µ and Ú´ µ , and by writing Ê ¼ instead of ÑÊÚ Ú´ µ ´ ¼ µ Ò (Ñ Ò are fixed). We will consistently use unprimed variables for the 'outer' level indices, and primed variables for the 'inner' ones. ThusÑ Ó ¼ ´´ÊÜµ Ü¾Î µ Ò ´µ ¾ AE ¼ ¾ AE Ê ¼</figDesc><table><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>(1a)</cell></row><row><cell></cell><cell></cell><cell>AE ¼ ½</cell><cell>AE ¼ ¾ and</cell><cell>AE ¼ ¾</cell><cell>AE ¼ ½ , that respect labels</cell></row><row><cell></cell><cell>(Ú´ µ</cell><cell></cell><cell></cell></row><row><cell cols="2">¼ ½ ´from 1. ¼ ¾ .</cell><cell></cell><cell></cell></row><row><cell cols="2">LEMMA A.32</cell><cell></cell><cell></cell></row><row><cell>1. If</cell><cell>link µ ¼ by linking below some , then Ú , Ú Ú ¼ ¼ .</cell><cell>Ú ¼ ¼ Ú</cell><cell cols="2">Ú´ µ ; and, for all for all ¾ AE with</cell></row><row><cell>2. If</cell><cell></cell><cell></cell><cell></cell></row></table><note><p><p><p>which follows from the Lemma A.31.</p>2. µ Let</p>½ ¾ be two equivalent graphs, ¼ ½ ¼ ¾ del µ ¼ Then</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_11"><head></head><label></label><figDesc>) following from version (1) by Theorem 2.11(2). But now,Ñ Ó ´Ó½ ´´ÊÜµ Ü¾Î µ Ó Ò´´ÊÜµÜ¾Î µµ Ò ´µ Ô ¾ AE ´Ñ Ó Ú´Ôµ ´´ÊÜµ Ü¾Î µ Ò Õ ¾ AE ´Õ Ô Ñ ´ÓÚ´Õµ ´´ÊÜµ Ü¾Î µµ Òµµ ´µ Ô ¾ AE ´ Ô ¼ ¾ AEÔ ´ÊÔÔ ¼ Õ ¼ ¾ AEÔ ´Õ¼ Ô Ô ¼ Ê ÔÕ ¼ µµµcomes from the expansion of Ñ ´ÓÚ´ µ ´´ÊÜµ Ü¾Î µµ Ò using Theorem 2.11(3).</figDesc><table><row><cell></cell><cell>(3a)</cell></row><row><cell>Õ ¾ AE Õ Ô Ô ¼ ¾ AEÕ ÊÕÔ ¼</cell><cell>(3b)</cell></row><row><cell>Õ ¼ ¾ AEÕ ´Õ¼ Õ Ô ¼ Ê ÕÕ ¼ µ</cell><cell>(3c)</cell></row><row><cell>Õ ¼ ¾ AEÕ Ê ÕÕ ¼</cell><cell>(3d)</cell></row><row><cell>3b-d</cell><cell></cell></row></table><note><p><p><p>That (3) implies (</p>1</p>) is easy: if 1a and 1b are not satisfied, set</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_12"><head></head><label></label><figDesc>ind. hyp. Ü</figDesc><table><row><cell></cell><cell></cell><cell></cell><cell>example 7.3(3)</cell></row><row><cell></cell><cell></cell><cell></cell><cell>ind. hyp.</cell></row><row><cell></cell><cell></cell><cell></cell><cell>def. .</cell></row><row><cell>¯Ü ¾ Ú´ µ. Then</cell><cell>Ü</cell><cell>Ü</cell><cell>def.</cell></row><row><cell></cell><cell></cell><cell></cell><cell>ind. hyp.</cell></row><row><cell></cell><cell></cell><cell></cell><cell>def. .</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_13"><head></head><label></label><figDesc>PROOF. The soundness of the axioms is obvious. (For example, apply Corollary 5.5 to the graph forms of each side of the axioms.)Completeness: letÚ AE abbreviate AE(indeed, this use of Ú matches that in the semantics). We need only prove statements of the form Ú AE, since to prove AE we just prove Ú AE and AE Ú , which expands to AE AE. Suppose Ú AE semantically. We prove Ú AE by induction on AE. 1. AE is the variable Ü. We perform induction on .</figDesc><table><row><cell>2. Ü ´Ý Þµ Ǘ Ýµ Þ 3. Ü Ý Ý Ü 4. ´Ü Üµ Ü 5. Ü ´Ý Þµ Ǘ Ýµ Þ 6. ´Ü Ýµ Þ Ǘ Þµ ´Ý Þµ 7. ´Ü Ýµ Ü Ü Ý</cell><cell>( Idempotent) ( Associative) ( Commutative) ( Idempotent) ( Associative) ( Distributes over ) (Absorption)</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>J. Logic Computat., Vol. 12 No. 1, pp.13-53 2002   </p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_1"><p>Unanimity with abstentions is a powerful and natural condition, for pre-orders. The proof of[2]  relies strongly on linear orders, where abstentions are impossible.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Acknowledgements</head><p>Hajnal Andréka acknowledges support from the Hungarian National Foundation for Scientific Research (grant nos. OTKA T30314 and T23234). Mark Ryan and Pierre-Yves Schobbens acknowledge support from the European Union through Esprit WGs ModelAge, ASPIRE and Operators and Laws for Combining Preference Relations 35 FIREworks. Mark Ryan acknowledges the Nuffield Foundation, and British Telecom. Pierre-Yves Schobbens thanks the University of Birmingham for funding and invited professorship that allowed us to finalize this article.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Appendix A Mathematical details</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.1 Introduction</head><p>This Appendix covers many mathematical details (including proofs of theorems stated in the text). Its structure mirrors the structure of the main part of the paper. New definitions and lemmas are given new numbers, but theorems which are stated in the text and proved here retain their old numbers.  Suppose ´AE µ is well-founded, and let Ê Ó´´ÊÜµ Ü¾Î µ. Then 1. ÑÊÒ iff ¾ AE ´ ÑÊ Ú´ µ Òµ implies ÑÊ Ú´ µ Ò.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.2 Priority operators</head><p>-some argument Ü ¾ Å is , another Ý ¾ Å is . Then let in Lemma A. <ref type="bibr" target="#b19">19</ref>. By Lemma A.10, the IBUT result is . Tabularly:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.4 Propagation of properties via priority operators</head><p>We prove the theorems implied by Table <ref type="table">3</ref>.</p><p>THEOREM 4.1 Items 1-8 of Table <ref type="table">3</ref> hold; i.e. the properties reflexivity, irreflexivity, symmetry, antisymmetry, transitivity, totality, empty and full are propagated by the lexicographic combination in the manner shown in the table.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PROOF. Let</head><p>Ǽ Úµ be a priority graph denoting the operator Ó, and let Î Ú AE . 1. Suppose for each ¾ AE, Ê Ú´ µ is reflexive. We want to show that Ó´´ÊÜµ Ü¾Î µ is reflexive. Take any Ñ ¾ Å.</p><p>Since ¾ AE ÑÊ Ú´ µ Ñ, it follows by Definition 2.5 that Ñ Ó ´´ÊÜµ Ü¾Î µ Ñ. 2. Ñ Ó´´ÊÜµ Ü¾Î µ Ñ iff ¾ AE ÑÊ Ú´ µ Ñ by Definition 2.5, since ÑÊ Ú´ µ Ñ is always false. But ¾ AE ÑÊ Ú´ µ Ñ is false if there there is an irreflexive preference. 3. Ñ Ó´´ÊÜµ Ü¾Î µ Ò implies ÑÊ Ú´ µ Ò since each Ê Ú´ µ is symmetric. Therefore ÒÊ Ú´ µ Ñ, so Ò Ó ´´ÊÜµ Ü¾Î µ Ñ. 4. Let be such that Ê Ú´ µ is symmetric and there is no infinite -chain below it in the priority graph. Assume Ñ Ó ´´ÊÜµ Ü¾Î µ Ò and Ò Ó ´´ÊÜµ Ü¾Î µ Ñ and Ñ Ò. We will derive a contradiction. If ÑÊ Ú´ µ ÒÊ Ú´ µ Ñ then by symmetry of Ê Ú´ µ we have Ñ Ò, a contradiction. Suppose (without loss of generality) that ÑÊ Ú´ µ Ò.</p><p>Then there's some such that ÑÊ Ú´ µ Ò. Therefore, ÒÊ Ú´ µ Ñ, so there is some such that ÒÊ Ú´ µ Ñ. Therefore, ÑÊ Ú´ µ Ò, and by continuing in this way an infinite chain of nodes below is produced-a contradiction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Suppose</head><p>Otherwise, Ñ ¾ Ê Ú´ µ Ñ ¿ , so let ¼ be such that Ñ ¾ Ê Ú´ ¼ µ Ñ ¿ , and let ¼ be minimal with this property, that is, we have Ñ ¾ Ê Ú´ ¼¼ µ Ñ ¿ for ¼¼ ¼ ; here we make use of the fact that is well-founded.</p><p>, and</p><p>On the other hand, suppose Ñ ½ Ê Ú´ µ Ñ ¾ and let ¼ be minimal such that Ñ ½ Ê Ú´ ¼ µ Ñ ¾ (so again we have Ñ ½ Ê Ú´ ¼¼ µ Ñ ¾ for all ¼¼ ¼ ). Again, consider separately the two cases</p><p>ÒÊ Ú´ µ Ñ and ÒÊ Ú´ µ Ñ. But since these are total orders, this implies ÑÊ Ú´ µ Ò and ÑÊ Ú´ µ Ò. But is also total, so this proves that Ñ Ó ´´ÊÜµ Ü¾Î µ Ò. 7. Let be the minimal node such that Ê Ú´ µ is empty. Suppose Ñ Ó ´´ÊÜµ Ü¾Î µ Ò. Then either ÑÊ Ú´ µ Ò, or ¡ ¡ ¡ , both alternatives contradicting our hypothesis. 8. Let Ñ Ò ¾ Å. Since each Ê Ú´ µ is full, ÑÊ Ú´ µ Ò. Thus, by definition 2.5, Ñ Ó ´´ÊÜµ Ü¾Î µ Ò. 9,10. The last two cases are treated separately below due to their length.</p><p>¼ . Now we show, subject to a certain condition, that it is possible to find a lower bound for any Ê-chain. The condition says that lower bounds can be found for intersections (i.e. conjunctions) of the Ê relations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>LEMMA A.29</head><p>Suppose for every Ã AE, every Ê Ã -chain has a lower bound. Then every Ê-chain has a lower bound. PROOF. Let È be a Ê-chain. If È has a minimal element, then that serves as its lower bound. Suppose, then, that È has no minimal element. Let Ã AE and ¾ È be as defined in Lemma A. <ref type="bibr" target="#b28">28</ref> ; by (ii), Ê Ñ.</p><p>Hence we have:</p><p>Item 10 of Table <ref type="table">3</ref> holds; i.e. if AE is finite, and each Ê Ú´ µ is transitive and for each Ã AE the relation Ì ¾Ã Ê Ú´ µ is Zorn, then Ê is Zorn. Then Ó ½ ´´ÊÜµ Ü¾Î µ is just the relation Ê . That is because, graphically, it has a collection of s, s and Ês (the last two occurring at least once), but there is an Ê below each ; so we just use Definition 2.5. On the other hand, in the graph for Ó ¾ ´´ÊÜµ Ü¾Î µ we have an with only occurring below it, and by Definition 2.5 the result is . Therefore, Ó ¾ ´´ÊÜµ Ü¾Î µ , so the inclusion fails; contradiction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.5 Proof rules for priority graphs</head><p>First we show that (link) and (del) are sound. This can be done using Corollary 5.5. Suppose rewrites to ¼ by (link). Corollary 5.5 requires us to find a correspondent in AE ¼ for each node in AE, and vice versa. Lemma A.32 tells us that usually Ú ¼ ¼ Ú for all ¾ AE, and hence the correspondent of a node can be the node itself. The only exception occurs in the case that in the link of below , we had Ú´ µ Ú´ µ. In that case, Ú ¼ ¼ Ú Ú´ µ, and the correspondent of ¾ AE should be chosen to be ¾ AE ¼ . by (del). Again, we must show how to pick the correspondents for Corollary 5.5. For each node in AE other than the deleted node, pick the same node in AE ¼ . For the deleted node, pick the node in AE ¼ referred to as in the (del) rule. For each node in AE ¼ pick the same node in AE. Lemma A.32 ensures that these correspondents have the right properties.</p><p>To show that the order of application does not matter, we must also show that the term-rewriting system consisting of the set of Î -ary finite priority graphs with the rules (link) and (del) is terminating and confluent <ref type="bibr" target="#b7">[8]</ref>.</p><p>Terminating. Since the graphs are finite, and (link) adds one edge and (del) removes one node, the number of rewrites is bounded by Ò ¾ • Ò, where Ò AE .</p><p>Confluent. We show that a rule applies unless is a renaming of the normal form, so that we cannot terminate elsewhere. This implies confluence. Let be distinct from its normal form.</p><p>¯Either a node of is not critical: (for instance, the node Ý at mid-height in Example 5.14.1) then by Definition 5.9 of critical, there is a that either can be linked below (in Example 5.14. ¯Or, all nodes are critical and correspond to a single node of the normal form, but some links are different: In this case, the links of are a subset of those of the normal form. Then we can add a missing link. In all three cases, an application of link or del was possible.</p><p>A.5.1 Preferential entailment THEOREM 5.18 ½ ¾ iff Ú ¾ AE ¾ Ú ½ AE ½ and for each node ¾ AE ½ either Ú AE ¾ Ú ½ ½ , or there is a ¾ AE ¾ such that Ú´ µ Ú´ µ and Ú Ú .</p><p>PROOF. Let Ó ½ Ó ¾ be the operators denoted by ½ ¾ . µ. Choose some relation Ë such that Min Ë ´Å µ Å. (This is possible; as there are at least two elements in Å, we could take ÑËÒ iff Ñ Ò .) Suppose the RHS is false, i.e. either ¯Ú¾ AE ¾ Ö Ú ½ AE ½ . Choose Þ in this difference, and set ÊÞ Ë, ÊÜ for any other Ü; ¯there is ¾ AE ½ such that Ú ¾ AE ¾ Ú ½ ½ and for all ¾ AE ¾ such that Ú ½ ´ µ Ú ¾ ´ µ, there is a Ü ¾ Ú ¾ ¾ Ú ½ ½ . If there is such a , set Ê Ú ½ ´ µ ; for each set ÊÜ Ë; and ÊÜ for all other variables Ü. Else, pick Ý ¾ Ú ¾ AE ¾ Ö Ú ½ ½ , set ÊÝ Ë, set again Ê Ú ½ ´ µ , and set everything else to . In either case, by an argument similar to that in the proof of Theorem 5.2, we have Ó ½ ´´ÊÜµ Ü¾Î µ and Ó ¾ ´´ÊÜµ Ü¾Î µ Ë. But Min´Ó ½ ´´ÊÜµ Ü¾Î µµ Å Ó ¾ ´´ÊÜµ Ü¾Î µ, so the LHS is false.</p><p>´. Suppose RHS and Ò ¾ Min´Ó ½ ´´ÊÜµ Ü¾Î µµ. We show that Ò ¾ Min´Ó ¾ ´´ÊÜµ Ü¾Î µµ. Suppose not, i.e. there is an Ñ such that Ñ Ó ¾ ´´ÊÜµ Ü¾Î µ Ò, i.e. Ñ Ó ¾ ´´ÊÜµ Ü¾Î µ Ò and ¾ AE ¾ Ñ Ê Ú ¾ ´ µ Ò. We'll show Ñ Ó ½ ´´ÊÜµ Ü¾Î µ Ò, i.e. (a) Ñ Ó ½ ´´ÊÜµ Ü¾Î µ Ò and (b)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.6 Composing priority graphs</head><p>Let be a well-founded graph denoting operator Ó with variables Î . Let ´ ÜµÜ¾Î be a family of well-founded graphs denoting operators ´ÓÜµÜ¾Î with variables ´ÎÜµÜ¾Î . Let ¼ be the graphical insertion of ´ ÜµÜ¾Î in , and let Ó ¼ be the operator denoted by ¼ . ¯AE ¼ is the the set of maximal up-branches in . Formally:</p><p>¼ iff there is a non-empty sequence of nodes such that .</p><p>¯Ú¼ takes the label where the branch starts, i.e. if</p><p>´ ½ Òµ then Ú ¼ ´ µ Ú´ ½ µ.</p><p>Actually this definition simply removes any 'V' shape from the graph by replicating the node at the bottom of the 'V' that becomes 'II'. In particular, we replace any 'N' shape by a '£ I' shape. This is not always necessary, for instance in Example 5.6 the V-shaped example could be expressed directly as ´Ü Ýµ Þ.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PROPOSITION A.34</head><p>´ µ.</p><p>PROOF. All down-sets are preserved, so we can use Corollary 5.5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DEFINITION A.35</head><p>Termifying a finite priority graph to Ì´ µ is done as follows: ¯if is made of a single node labelled by Ü, set Ì´ µÜ; ¯if is made of disjoint components ½ Ò, then we set Ì´ µ Ì´ ½ µ Ì´ Òµ; ¯else, find a Å AE such that Ñ ¾ Å Ò¾ AE Ö Å we have Ò Ñ , as follows: Start by setting Å to the maximal nodes of AE; and while there is a node which is not below all elements of Å, add it to Å. This algorithm may stop with Å AE, in which case it signals failure; else, we set Ì´ µ Ì´Åµ Ì´AE Ö Åµ. We see that the algorithm succeeds exactly when is the graphical insertion of some term (equivalently, when no AE shape is included in ); this term is unique up to associativity of and , and commutativity of . (Ì ´ µ will have associated to the left, since we started from the top.) THEOREM 6.6 Any finitary priority operator is denoted by a term built from and the variables that occur in the priority graph for the operator.</p><p>PROOF. Take any finitary Î -ary operator Ó. Let be a graph denoting Ó. Let ¼ be the forest form of . It is easy to check that we can always termify a forest form: The last step succeeds immediately, and Å contains the single maximum element (the root of the tree). So Ó can be expressed by Ì´ ¼ µ. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.7 Algebraic treatment</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Ü Ü</head><p>In order to prove the soundness and completeness of the axioms of Theorem 7.2, we need a lemma.</p><p>LEMMA A.37</p><p>, if Ú´ µ Ú´ µ.</p><p>PROOF. (Note that this is obviously valid semantically, since all occurrences in the part of are non-critical.) We first induce on the structure of :</p><p>1. if is the variable Ü: we proceed by induction on the structure of the term .</p><p>(a) is a variable; since Ü ¾ Ú´ µ, is the variable Ü, so use idempotence of .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>(b)</head><p>´ µ: Then Ü ¾ Ú´ µ or Ü ¾ Ú´ µ. Without loss of generality, assume Ü ¾ Ú´ µ. Then Ü by the inductive hypothesis, and thus Ü Ü ´´Ü µ µ. But Ü ´´Ü Ýµ Þµ Ǘ Ýµ Þ is derivable (Example 7.3(6)), thus Ü ´´Ü µ µ Ǘ µ .</p><p>A. Ý ¾ : If Ý Ü and ¾ we are done.</p><p>Otherwise we rewrite to ´Ý ¾ µ ¾ using Example 7.3(1) backwards, and we proceed on this last ¾ which must have an occurrence of Ü since Ý Ü. Then Theorem 5.2 gives ¾ Ú Ü , which by inductive hypothesis gives ¾ Ú Ü , thus ´Ý ¾ µ ¾ Ú Ü using associativity of . B. ½ ¾ : We know Ü must occur in ½ or ¾ (or both); we proceed inductively on that part, say ¾ . Again ¾ Ú Ü implies Ú Ü using by Theorem 5.2, inductive hypothesis, and associativity of .</p><p>ii. <ref type="bibr">Let</ref> We apply the algorithm of the proof of Theorem 7.2 to construct a proof of Ü ´Ý Þµ Ǘ Ý Þµ ´Ü Þ Ýµ:</p><p>´Ü ´Ý Þµµ Ý Þ ´Þ Ýµ</p><p>´Ü ´Ý Þµµ ´Þ Ýµ</p><p>´Ü ´Ý Þµµ ´´Ü ´Ý Þµµ ´Þ Ýµµ axiom 7</p><p>´Ü ´Ý Þµµ ´Ý Þµ ´Ü Þ Ýµ</p><p>´Ü Ý Þµ ´Ü Þ Ýµ</p><p>This identity is the basis of the Tuscan form: given a term, rewrite it first using distributivity, and then this identity. By this process, any term is brought in a form where are outside and inside. We can use 3, 4, 1 and 7 to eliminate some duplicates, but this will not yield some unique normal form. For instance,</p><p>´Þ Ûµ ´Ü Þ Ý Ûµ; the last four are Tuscan forms, the last two are simplified.</p><p>The equations 1-7 given in Theorem 7.2 are not complete, however, with respect to conditional equations (implications between equations). THEOREM A.39 There is a conditional equation true in all preferential algebras which is not a consequence of 1-7; for example,</p><p>PROOF. The conditional equation is true in all PAs: expand using the equations in Proposition 6.5; now, we want to prove that ´Ü Ý Þµ ´Ý Þµ Þ Ǘ Ý Þµ ´Ý Üµ Ü implies ´Ü Þµ Þ Ǘ Þµ Ü . Suppose the premiss and that Ñ ´´Ü Þµ Þ µ Ò. Then either Ñ ´Ü Þµ Ò, so Ñ ´´Ü Þµ Ü µ Ò, and we are done; or Ñ Þ Ò and Ñ ´Ü Þµ Ò. Ñ Þ Ò implies Ñ ´Ü Ý Þµ ´Ý Þµ Þ Ò, since the last disjunct is true. Ñ ´Ü Þµ Ò means Ñ Ü Ò or Ñ Þ Ò . Since Þ Þ, the second half is impossible and we have Ñ Ü Ò . Using the premiss, Ñ ´Ü Ý Þµ ´Ý Üµ Ü Ò, so Ñ Ü Ò , a contradiction.</p><p>The conditional equation cannot be derived from the axioms 1-7: in axioms 1-7, and here in the antecedents, the same variables occur in the left-and right-hand side. By examining the rules for deriving equations (Definition A.36), we notice that no rule can eliminate a variable from the antecedent; thus the conclusion must contain Ý if the proof uses the antecedent. On the other hand, the proof must use the antecedent, since the consequent is not valid and thus not a consequence of axioms 1-7.</p><p>This means that the class È of all isomorphic copies of preferential algebras is not axiomatizable by equations, but we now show that È can be axiomatized by conditional equations. THEOREM A.40 È is a quasi-variety.</p><p>We use standard techniques <ref type="bibr" target="#b22">[22]</ref> of algebras of relations, namely, we prove that the class Ã of algebras isomorphic to a preferential algebra is closed under taking subalgebras, direct products, and ultraproducts.</p><p>¯Ã is closed under taking subalgebras, by definition.</p><p>¯Ã is closed under taking direct products: let Á be a set and for each ¾ Á let be a preferential algebra. That is, is a set of binary relations on some Í closed under intersection and lexicographic combination. We may assume that the Í s are pairwise disjoint. Let Í be the union of these Í s. For any tuple ¾ Á of elements of the product ( ¾ ), let ´ µ be the union of s, which is indeed a binary relation on Í. Let be the set of the all these ´ µs. Then is closed under: -intersection: ´Ë µ ´Ë µ Ë</p><p>´ µ, since the Í are disjoint. Now since each is closed, is;</p><p>´ µ, for if Ñ´Ë µ Ò, it means that Ñ Ò ¾ Í for some unique , and thus Ñ Ò.</p><p>The function is an isomorphism from the direct product of the algebras to the algebra : its inverse is just the tuple of projections on the Í s. ¯Ã is closed under taking ultraproducts: The operations of Ã are definable in Ê , the class of binary relation algebras (i.e. Ã is a generalized reduct of Ê ). It is known that Ê is closed under taking ultraproducts (claim 1.1 of <ref type="bibr" target="#b22">[22]</ref>). Hence Ã is closed under taking ultraproducts. The axioms presented in Theorem 7.2 are also complete for inclusion, since Ê ½ Ê ¾ iff ´Ê½ Ê ¾ µ Ê ¾ . It is also possible to construct a proof system for inclusion without resorting to equality: ´. We check the soundness of the two new rules.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C1. If MinÜ´Å µ</head><p>MinÝ´Å µ, then indeed Min Þ Ü ´Å µ MinÝ´Å µ, since the minimals of Þ Üare among the minimals of Ü. S1. Ü Ý Ý means that Ý Ú Ü. Ý Ü Ü means that ÑÜ Ò µ ÑÝ Ò. So if Ñ ¼ Ý Ñ, then also Ñ ¼ Ü Ñ, for all three other possibilities are excluded. So if Ñ is not minimal for Ý, it means that Ñ ¼ Ñ ¼ Ý Ñ, thus Ñ ¼ Ü Ñ, and Ñ is neither minimal for Ü.</p><p>µ We want to prove, say, . Let ½ ¾ be their graphs. We use Theorem 5.18. First let Á Ú Ú´AE ¾ µ . Á is upward-closed. If Á , let ¾ be a term representing . Otherwise we construct ¾ as follows:</p><p>For all ¾ Á, if then ¾ Á, so that by Theorem 5.18 Ú´ µ Ú´ µ for some ¾ AE ¾ ; therefore we have Ú Ú´AE ¾ µ Ú´ µ, for any ¾ Á, so that we link any node ¾ Á below each minimal ¾ Á using rule (link). Therefore, the graph is now of the form ½ ¾ where ½ contains all nodes of Á and ¾ the rest. We find terms ½ ¾ expressing ½ ¾ by Theorem 6.6. Since is equivalent to ½ ¾ by their construction, this is provable by completeness (Theorem 7.2).</p><p>¾ only contains nodes outside Á: by Theorem 5.18, Ú´ ¾ µ Ú´ µ. Also, by Theorem 5.2, Ú ¾ . By completeness, ¾ is provable. By Corollary 5.4, Ú´ ¾ µ Ú´ µ and thus Ú´ ¾ µ Ú´ µ. So in ¾ , all occurrences in are non-critical, implying that ¾ ¾ is valid, and thus provable by completeness. Thus, we can use rule S1 to prove ¾ , and then rule C1 to prove ½ ¾ .</p><p>Received 19 October 1998</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A difficulty in the concept of social welfare</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">J</forename><surname>Arrow</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Political Economy</title>
		<imprint>
			<biblScope unit="volume">58</biblScope>
			<biblScope unit="page" from="328" to="346" />
			<date type="published" when="1950">1950</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Social Choice and Multicriterion Decision-Making</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">J</forename><surname>Arrow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Raynaud</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986">1986</date>
			<publisher>MIT Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Lexicographic probabilities and choice under uncertainty. Econometrica</title>
		<author>
			<persName><forename type="first">L</forename><surname>Blume</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Brandenburger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Dekel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991">1991</date>
			<biblScope unit="volume">59</biblScope>
			<biblScope unit="page" from="61" to="79" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Bottom-up query evaluation with partially ordered defaults</title>
		<author>
			<persName><forename type="first">S</forename><surname>Brass</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Lipeck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 3rd International Conference on Deductive and Object-Oriented Databases</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting>the 3rd International Conference on Deductive and Object-Oriented Databases</meeting>
		<imprint>
			<publisher>Springer Verlag</publisher>
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Non-monotonic Reasoning: Logical Foundations of Commonsense. Cambridge Tracts in Computer Science</title>
		<author>
			<persName><forename type="first">G</forename><surname>Brewka</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991">1991</date>
			<publisher>Cambridge University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Introduction to Lattices and Order. Cambridge Mathematical Textbooks</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">A</forename><surname>Davey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">A</forename><surname>Priestley</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990">1990</date>
			<publisher>Cambridge University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Essai sur l&apos;application de l&apos;analyse la probabilité des décisions rendues la pluralité des voix</title>
		<author>
			<persName><forename type="first">M</forename><surname>De Condorcet</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1785">1785</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">B: Formal Models and Semantics</title>
		<author>
			<persName><forename type="first">N</forename><surname>Dershowitz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">P</forename><surname>Jouannaud</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Handbook of Theoretical Computer Science</title>
		<editor>
			<persName><forename type="first">J</forename><surname>Van Leeuwen</surname></persName>
		</editor>
		<imprint>
			<date type="published" when="1990">1990</date>
			<pubPlace>North-Holland, Amsterdam</pubPlace>
		</imprint>
	</monogr>
	<note>Rewrite systems</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Composition of Hierarchic Default Specifications</title>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">M</forename><surname>Dionísio</surname></persName>
		</author>
		<editor>U. Lipeck</editor>
		<imprint>
			<date type="published" when="1997">1997</date>
			<publisher>Germany</publisher>
		</imprint>
		<respStmt>
			<orgName>University of Hannover</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Impediments to universal preference-based default theories</title>
		<author>
			<persName><forename type="first">J</forename><surname>Doyle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">P</forename><surname>Wellman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="page" from="97" to="128" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A study of lexicographic expected utility</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">C</forename><surname>Fishburn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Management Science</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="672" to="678" />
			<date type="published" when="1971">1971</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Lexicographic orders, utilities, and decision rules: a survey</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">C</forename><surname>Fishburn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Management Science</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="1442" to="1471" />
			<date type="published" when="1974">1974</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Readings in Nonmonotonic Reasoning</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">L</forename><surname>Ginsberg</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1987">1987</date>
			<publisher>Morgan Kaufmann</publisher>
			<pubPlace>Los Altos, CA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Generalising prioritization</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">N</forename><surname>Grosof</surname></persName>
			<affiliation>
				<orgName type="collaboration">KR&apos;91</orgName>
			</affiliation>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Second International Conference on Principles of Knowledge Representation and Reasoning</title>
		<editor>
			<persName><forename type="first">J</forename><surname>Allen</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">R</forename><surname>Fikes</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">E</forename><surname>Sandewall</surname></persName>
		</editor>
		<meeting>the Second International Conference on Principles of Knowledge Representation and Reasoning</meeting>
		<imprint>
			<biblScope unit="page" from="289" to="300" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Morgan</forename><surname>Kaufmann</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Managing inconsistent specifications: Reasoning, analysis and action</title>
		<author>
			<persName><forename type="first">A</forename><surname>Hunter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Nuseibeh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Software Engineering and Methodology</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="335" to="367" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Non-monotonic reasoning, preferential models and cumulative logics</title>
		<author>
			<persName><forename type="first">S</forename><surname>Kraus</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Lehmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Magidor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="page" from="167" to="207" />
			<date type="published" when="1990">1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Lexicographic state-dependent subjective expected utility</title>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">H</forename><surname>Lavalle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">C</forename><surname>Fishburn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Risk and Uncertainty</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="251" to="269" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">State-independent subjective expected lexicographic utility</title>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">H</forename><surname>Lavalle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">C</forename><surname>Fishburn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Risk and Uncertainty</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="217" to="240" />
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Some results on circumscription</title>
		<author>
			<persName><forename type="first">V</forename><surname>Lifschitz</surname></persName>
		</author>
		<idno>1019</idno>
		<imprint>
			<date type="published" when="1984">1984</date>
		</imprint>
		<respStmt>
			<orgName>Stanford University, Dept of Computer Science</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Circumscription</title>
		<author>
			<persName><forename type="first">V</forename><surname>Lifschitz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Handbook of Logic in Artificial Intelligence</title>
		<editor>
			<persName><forename type="first">D</forename><surname>Gabbay</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">C</forename><surname>Hogger</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><surname>Robinson</surname></persName>
		</editor>
		<imprint>
			<publisher>Oxford University Press</publisher>
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">General patterns in non-monotonic reasoning</title>
		<author>
			<persName><forename type="first">D</forename><surname>Makinson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Handbook of Logic in Artificial Intelligence and Logic Programming</title>
		<editor>
			<persName><forename type="first">D</forename><surname>Gabbay</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">C</forename><surname>Hogger</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><surname>Robinson</surname></persName>
		</editor>
		<imprint>
			<publisher>Oxford University Press</publisher>
			<date type="published" when="1994">1994</date>
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">An extended and updated version with proofs will appear in Proceedings of Summer School on Algebraic Logic</title>
		<author>
			<persName><forename type="first">I</forename><surname>Németi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Studia Logica</title>
		<imprint>
			<biblScope unit="volume">50</biblScope>
			<biblScope unit="page" from="485" to="569" />
			<date type="published" when="1991">1991. 1994</date>
			<pubPlace>Budapest</pubPlace>
		</imprint>
	</monogr>
	<note>Algebraizations for quantifier logics: an introductory overview</note>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Lexicographic aggregation of semiorders</title>
		<author>
			<persName><forename type="first">M</forename><surname>Pirlot</surname></persName>
		</author>
		<author>
			<persName><surname>Ph</surname></persName>
		</author>
		<author>
			<persName><surname>Vincke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Multi-Criteria Decision Analysis</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="47" to="58" />
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">The pomset model of parallel processes : Unifying the temporal and the spatial</title>
		<author>
			<persName><forename type="first">V</forename><surname>Pratt</surname></persName>
		</author>
		<idno>STAN-CS-85-1049</idno>
		<imprint>
			<date type="published" when="1985-01">Jan 1985</date>
		</imprint>
		<respStmt>
			<orgName>Stanford University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Defaults and revision in structured theories</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D</forename><surname>Ryan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Sixth IEEE Symposium on Logic in Computer Science (LICS)</title>
		<meeting>the Sixth IEEE Symposium on Logic in Computer Science (LICS)</meeting>
		<imprint>
			<date type="published" when="1991">1991</date>
			<biblScope unit="page" from="362" to="373" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Defaults in specifications</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D</forename><surname>Ryan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Conf. on Requirements Engineering (RE&apos;93</title>
		<editor>
			<persName><forename type="first">A</forename><surname>Finkelstein</surname></persName>
		</editor>
		<meeting>the IEEE Conf. on Requirements Engineering (RE&apos;93</meeting>
		<imprint>
			<date type="published" when="1993">1993</date>
			<biblScope unit="page" from="142" to="149" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Towards specifying norms</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D</forename><surname>Ryan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals of Mathematics and Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="49" to="67" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Belief revision and ordered theory presentations</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D</forename><surname>Ryan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eighth Amsterdam Colloquium on Logic</title>
		<editor>
			<persName><forename type="first">A</forename><surname>Fuhrmann</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">H</forename><surname>Rott</surname></persName>
		</editor>
		<meeting>the Eighth Amsterdam Colloquium on Logic<address><addrLine>University of Amsterdam</addrLine></address></meeting>
		<imprint>
			<publisher>De Gruyter Publishers</publisher>
			<date type="published" when="1991">1994. 1991</date>
		</imprint>
	</monogr>
	<note>Logic, Action and Information</note>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Representation of subreducts of Tarski relation algebras</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">M</forename><surname>Schein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Algebraic Logic</title>
		<title level="s">Colloquia Mathematica Societatis János Bolyai</title>
		<editor>
			<persName><forename type="first">H</forename><surname>Andréka</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Monk</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">I</forename><surname>Németi</surname></persName>
		</editor>
		<meeting><address><addrLine>North-Holland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1991">1991</date>
			<biblScope unit="volume">54</biblScope>
			<biblScope unit="page" from="621" to="636" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Exceptions for algebraic specifications: on the meaning of &apos;but</title>
		<author>
			<persName><forename type="first">P.-Y</forename><surname>Schobbens</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science of Computer Programming</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="73" to="111" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Now we show that AE ¼ is non-empty. Let Ñ Ò ¾ È be such that ÒÊ ÑÊ . The fact that È has no minimal element guarantees that these can be found. Since ÒÊ Ñ, fr´Ñ Òµ , and since Ñ ÒÊ</title>
		<imprint/>
	</monogr>
	<note>we have fr´Ñ Òµ AE ¼</note>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Let ¾ Ã, ¾ AE and Ñ Ò ¾ È be such that and ÒÊÑÊ . If ¾ fr´Ñ Òµ then ÒÊ Ñ (Lemma A</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m">¾ fr´Ñ Òµ and ÒÊ Ñ then ¼ Ò Ê ¼ Ñ, contradicting the minimality of in Ã</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Since ¾ AE ¼ , we can pick Ò Ô ¾ È with ÔÊ ÒÊÑ and ¾ fr´Ò Ôµ. By part 1, ÔÊ ÒÊ Ñ; and since ¾ fr´Ò Ôµ we have ÔÊ Ò. By transitivity</title>
		<author>
			<persName><forename type="first">¾</forename><surname>Let</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ñ ¾ È With</forename><surname>Ñê</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">If ÒÊ Ñ then ¼ ¾ fr´Ñ Òµ AE ¼ ¼ (Theorem 2.11(2)), and since Ã consists of the minimal elements of AE ¼ (and, since AE is finite, is well-founded</title>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
