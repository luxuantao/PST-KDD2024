<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Fixing the train-test resolution discrepancy</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Hugo</forename><surname>Touvron</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Facebook AI Research</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Andrea</forename><surname>Vedaldi</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Facebook AI Research</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Matthijs</forename><surname>Douze</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Facebook AI Research</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Hervé</forename><surname>Jégou</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Facebook AI Research</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Fixing the train-test resolution discrepancy</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2022-12-25T13:31+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Data-augmentation is key to the training of neural networks for image classification. This paper first shows that existing augmentations induce a significant discrepancy between the size of the objects seen by the classifier at train and test time: in fact, a lower train resolution improves the classification at test time! We then propose a simple strategy to optimize the classifier performance, that employs different train and test resolutions. It relies on a computationally cheap fine-tuning of the network at the test resolution. This enables training strong classifiers using small training images, and therefore significantly reduce the training time. For instance, we obtain 77.1% top-1 accuracy on ImageNet with a ResNet-50 trained on 128⇥128 images, and 79.8% with one trained at 224⇥224. A ResNeXt-101 32x48d pre-trained with weak supervision on 940 million 224⇥224 images and further optimized with our technique for test resolution 320⇥320 achieves 86.4% top-1 accuracy (top-5: 98.0%). To the best of our knowledge this is the highest ImageNet single-crop accuracy to date.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Convolutional Neural Networks <ref type="bibr" target="#b17">[18]</ref> (CNNs) are used extensively in computer vision tasks such as image classification <ref type="bibr" target="#b16">[17]</ref>, object detection <ref type="bibr" target="#b26">[27]</ref>, inpainting <ref type="bibr" target="#b36">[37]</ref>, style transfer <ref type="bibr" target="#b8">[9]</ref> and even image compression <ref type="bibr" target="#b27">[28]</ref>. In order to obtain the best possible performance from these models, the training and testing data distributions should match. However, often data pre-processing procedures are different for training and testing. For instance, in image recognition the current best training practice is to extract a rectangle with random coordinates from the image, to artificially increase the amount of training data. This region, which we call the Region of Classification (RoC), is then resized to obtain an image, or crop, of a fixed size (in pixels) that is fed to the CNN. At test time, the RoC is instead set to a square covering the central part of the image, which results in the extraction of a center crop. This reflects the bias of photographers who tend center important visual content. Thus, while the crops extracted at training and test time have the same size, they arise from different RoCs, which skews the distribution of data seen by the CNN.</p><p>Over the years, training and testing pre-processing procedures have evolved to improve the performance of CNNs, but so far they have been optimized separately <ref type="bibr" target="#b6">[7]</ref>. In this paper, we first show that this separate optimization has led to a significant distribution shift between training and testing regimes with a detrimental effect on the test-time performance of models. We then show that this problem can be solved by jointly optimizing the choice of resolutions and scales at training and test time, while keeping the same RoC sampling. Our strategy only requires to fine-tune two layers in order to compensate for the shift in statistics caused by changing the crop size. This retains the advantages of existing pre-processing protocols for training and testing, including augmenting the training data, while compensating for the distribution shift.</p><p>Our approach is based on a rigorous analysis of the effect of pre-processing on the statistics of natural images, which shows that increasing the size of the crops used at test time compensates for randomly Figure <ref type="figure">1</ref>: Selection of the image regions fed to the network at training time and testing time, with typical data-augmentation. The red region of classification is resampled as a crop that is fed to the neural net. For objects that have as similar size in the input image, like the white horse, the standard augmentations typically make them larger at training time than at test time (second column). To counter this effect, we either reduce the train-time resolution, or increase the test-time resolution (third and fourth column). The horse then has the same size at train and test time, requiring less scale invariance for the neural net. Our approach only needs a computationally cheap fine-tuning.</p><p>sampling the RoCs at training time. This analysis also shows that we need to use lower resolution crops at training than at test time. This significantly impacts the processing time: halving the crop resolution leads to a threefold reduction in the network evaluation speed and reduces significantly the memory consumption for a typical CNN, which is especially important for training on GPUs. For instance, for a target test resolution of 224⇥224, training at resolution 160⇥160 provides better results than the standard practice of training at resolution 224⇥224, while being more efficient. In addition we can adapt a ResNet-50 train at resolution 224⇥224 for the test resolution 320⇥320 and thus obtain top-1 accuracy of 79.8% (single-crop) on ImageNet.</p><p>Alternatively, we leverage the improved efficiency to train high-accuracy models that operate at much higher resolution at test time while still training quickly. For instance, we achieve an top-1 accuracy of 86.4% (single-crop) on ImageNet with a ResNeXt-101 32x48d pre-trained in weaklysupervised fashion on 940 million public images. Finally, our method makes it possible to save GPU memory, which we exploit in the optimization: employing larger batch sizes leads to a better final performance <ref type="bibr" target="#b12">[13]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related work</head><p>Image classification is a core problem in computer vision, and used as a benchmark task by the community to measure progress on image understanding. Models pre-trained for image classification, usually on the ImageNet database <ref type="bibr" target="#b7">[8]</ref>, transfer to a variety of other applications <ref type="bibr" target="#b23">[24]</ref>. Furthermore, advances in image classification translate to improved results on many other tasks <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b14">15]</ref>.</p><p>Recent research in image classification has demonstrated improved performance by considering larger networks and higher resolution images <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b21">22]</ref>. For instance, the state of the art in the Im-ageNet ILSVRC 2012 benchmark is currently held by the ResNeXt-101 32x48d <ref type="bibr" target="#b21">[22]</ref> architecture with 829M parameters using 224⇥224 images for training. The state of the art for a model learned from scratch is currently held by the EfficientNet-b7 <ref type="bibr" target="#b33">[34]</ref> with 66M parameters using 600⇥600 images for training. In this paper, we focus on the ResNet-50 architecture <ref type="bibr" target="#b10">[11]</ref> due to its good accuracy/cost tradeoff (25.6M parameters) and its popularity. We also conduct some experiments using the PNASNet-5-Large <ref type="bibr" target="#b20">[21]</ref> architecture (86.1M parameters), which exhibits good performance on ImageNet with a reasonable training time, and with the ResNeXt-101 32x48d <ref type="bibr" target="#b21">[22]</ref> weakly supervised, which is best publicly available network on ImageNet.</p><p>Data augmentation is routinely employed at training time to improve model generalization and reduce overfitting. Typical transformations <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b31">32]</ref> include: random-size crop, horizontal flip and color jitter. In our paper, we adopt the standard set of augmentations commonly used in image classification. As a reference, we consider the default models in the PyTorch library. The accuracy is also improved by combining multiple data augmentations at test time, although this means that sev- eral forward passes are required to classify one image. For example, <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b31">32]</ref> used ten crops (one central, and one for each corner of the image and their mirrored versions). Another performanceboosting strategy is to classify an image by feeding it at multiple resolutions <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b29">30,</ref><ref type="bibr" target="#b31">32]</ref>, again averaging the predictions. More recently, multi-scale strategies such as the feature pyramid network <ref type="bibr" target="#b19">[20]</ref> have been proposed to directly integrate multiple resolutions in the network, both at train and test time, with significant gains in category-level detection.</p><p>Feature pooling. A recent approach <ref type="bibr" target="#b4">[5]</ref> employs p-pooling instead of average pooling to adapt the network to test resolutions significantly higher than the training resolution. The authors show that this improves the network's performance, in accordance with the conclusions drawn by Boureau et al. <ref type="bibr" target="#b5">[6]</ref>. Similar pooling techniques have been employed in image retrieval for a few years <ref type="bibr" target="#b25">[26,</ref><ref type="bibr" target="#b34">35]</ref>, where high-resolution images are required to achieve a competitive performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Region selection and scale statistics</head><p>Applying a Convolutional Neural Network (CNN) classifier to an image generally requires to preprocess the image. One of the key steps involves selecting a rectangular region in the input image, which we call Region of Classification (RoC). The RoC is then extracted and resized to a square crop of a size compatible with the CNN, e.g., AlexNet requires a 224 ⇥ 224 crop as input.</p><p>While this process is simple, in practice it has two subtle but significant effects on how the image data is presented to the CNN. First, the resizing operation changes the apparent size of the objects in the image (section 3.1). This is important because CNNs do not have a predictable response to a scale change (as opposed to translations). Second, the choice of different crop sizes (for architectures such as ResNet that admit non-fixed inputs) has an effect on the statistics of the network activations, especially after global pooling layers (section 3.2). This section analyses in detail these two effects.</p><p>In the discussion, we use the following conventions: The "input image" is the original training or testing image; the RoC is a rectangle in the input image; and the "crop" is the pixels of the RoC, rescaled with bilinear interpolation to a fixed resolution, then fed to the CNN.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Scale and apparent object size</head><p>If a CNN is to acquire a scale-invariant behavior for object recognition, it must learn it from data. However, resizing the input images in pre-processing changes the distribution of objects sizes. Since different pre-processing protocols are used at training and testing time<ref type="foot" target="#foot_1">1</ref> , the size distribution differs in the two cases. This is quantified next.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.1">Relation between apparent and actual object sizes</head><p>We consider the following imaging model: the camera projects the 3D world onto a 2D image, so the apparent size of the objects is inversely proportional to their distance from the camera. For simplicity, we model a 3D object as an upright square of height and width R ⇥ R at a distance Z from the camera, and fronto-parallel to it. Hence, its image is a r ⇥ r rectangle, where the apparent size r is given by r = fR/Z where f is the focal length of the camera. Thus we can express the apparent size as the product r = f • r 1 of the focal length f , which depends on the camera, and of the variable r 1 = R/Z, whose distribution p(r 1 ) is camera-independent. While the focal length is variable, the field of view angle ✓ FOV of most cameras is usually in the <ref type="bibr">[40 , 60 ]</ref> range. Hence, for an image of size H ⇥ W one can write f = k p HW where k 1 = 2 tan(✓ FOV /2) ⇡ 1 is approximately constant. With this definition for f , the apparent size r is expressed in pixels.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.2">Effect of image pre-processing on the apparent object size</head><p>Now, we consider the effect of rescaling images on the apparent size of objects. If an object has an extent of r ⇥ r pixels in the input image, and if s is the scaling factor between input image and the crop, then by the time the object is analysed by the CNN, it will have the new size of rs ⇥ rs pixels. The scaling factor s is determined by the pre-processing protocol, discussed next.</p><p>Train-time scale augmentation. As a prototypical augmentation protocol, we consider RandomResizedCrop in PyTorch, which is very similar to augmentations used by other toolkits such as Caffe and the original AlexNet. RandomResizedCrop takes as input an H ⇥ W image, selects a RoC at random, and resizes the latter to output a K train ⇥ K train crop. The RoC extent is obtained by first sampling a scale parameter such that 2 ⇠ U ([ 2 , 2 + ]) and an aspect ratio ↵ such that ln ↵ ⇠ U ([ln ↵ , ln ↵ + ]). Then, the size of the RoC in the input image is set to</p><formula xml:id="formula_0">H RoC ⇥ W RoC = p ↵HW ⇥ p HW/↵.</formula><p>The RoC is resized anisotropically with factors (K train /H RoC , K train /W RoC ) to generate the output image. Assuming for simplicity that the input image is square (i.e. H = W ) and that ↵ = 1, the scaling factor from input image to output crop is given by:</p><formula xml:id="formula_1">s = p K train K train p H RoC W RoC = 1 • K train p HW .<label>(1)</label></formula><p>By scaling the image in this manner, the apparent size of the object becomes</p><formula xml:id="formula_2">r train = s • r = sf • r 1 = kK train • r 1 .<label>(2)</label></formula><p>Since kK train is constant, differently from r, r train does not depend on the size H ⇥ W of the input image. Hence, pre-processing standardizes the apparent size, which otherwise would depend on the input image resolution. This is important as networks do not have built-in scale invariance.</p><p>Test-time scale augmentation. As noted above, test-time augmentation usually differs from traintime augmentation. The former usually amounts to: isotropically resizing the image so that the shorter dimension is K image test and then extracting a K test ⇥ K test crop (CenterCrop) from that. Under the assumption that the input image is square (H = W ), the scaling factor from input image to crop rewrites as s = K image test / p HW , so that</p><formula xml:id="formula_3">r test = s • r = kK image test • r 1 .<label>(3)</label></formula><p>This has a a similar size standardization effect as the train-time augmentation.</p><p>Lack of calibration. Comparing eqs. ( <ref type="formula" target="#formula_2">2</ref>) and ( <ref type="formula" target="#formula_3">3</ref>), we conclude that the same input image containing an object of size r 1 results in two different apparent sizes if training or testing pre-processing is used. These two sizes are related by:</p><formula xml:id="formula_4">r test r train = • K image test K train .<label>(4)</label></formula><p>In practice, for standard networks such as AlexNet K image test /K train ⇡ 1.15; however, the scaling factor is sampled (with the square law seen above) in a range [ , + ] = [0.28, 1]. Hence, at testing time the same object may appear as small as a third of what it appears at training time. For standard values of the pre-processing parameters, the expected value of this ratio w.r.t. is</p><formula xml:id="formula_5">E  r test r train = F • K image test K train ⇡ 0.80, F = 2 3 • 3 + 3 2 + 2 ,<label>(5)</label></formula><p>where F captures all the sampling parameters. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Scale and activation statistics</head><p>In addition to affecting the apparent size of objects, pre-processing also affects the activation statistics of the CNN, especially if its architecture allows changing the size of the input crop. We first look at the receptive field size of a CNN activation in the previous layer. This is the number of input spatial locations that affect that response. For the convolutional part of the CNN, comprising linear convolution, subsampling, ReLU, and similar layers, changing the input crop size is almost neutral because the receptive field is unaffected by the input size. However, for classification the network must be terminated by a pooling operator (usually average pooling) in order to produce a fixed-size vector. Changing the size of the input crop strongly affects the activation statistics of this layer.</p><p>Activation statistics. We measure the distribution of activation values after the average pooling in a ResNet-50 in fig. <ref type="figure" target="#fig_0">3</ref>. As it is applied on a ReLU output, all values are non-negative. At the default crop resolution of K test = K train = 224 pixels, the activation map is 7⇥7 with a depth of 2048. At K test = 64, the activation map is only 2⇥2: pooling only 0 values becomes more likely and activations are more sparse (the rate of 0's increases form 0.5% to 29.8%). The values are also more spread out: the fraction of values above 2 increases from 1.2% to 11.9%. Increasing the resolution reverts the effect: with K test = 448, the activation map is 14⇥14, the output is less sparse and less spread out.</p><p>This simple statistical observations shows that if the distribution of activations changes at test time, the values are not in the range that the final classifier layers (linear &amp; softmax) were trained for.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Larger test crops result in better accuracy</head><p>Despite the fact that increasing the crop size affects the activation statistics, it is generally beneficial for accuracy, since as discussed before it reduces the train-test object size mismatch. For instance, the accuracy of ResNet-50 on the ImageNet validation set as K test is changed (see section 5) are: Thus for K test = 288 the accuracy is 78.4%, which is greater than 77.0% obtained for the native crop size K test = K train = 224 used in training. In fig. <ref type="figure" target="#fig_2">5</ref>, we see this result is general: better accuracy is obtained with higher resolution crops at test time than at train time. In the next section, we explain and leverage this discrepancy by adjusting the network's weights.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Method</head><p>Based on the analysis of section 3, we propose two improvements to the standard setting. First, we show that the difference in apparent object sizes at training and testing time can be removed by increasing the crop size at test time, which explains the empirical observation of section 3.3. Second, we slightly adjust the network before the global average pooling layer in order to compensate for the change in activation statistics due to the increased size of the input crop. equalizes the effect of the training pre-processing that tends to zoom on the objects. However, increasing K image test with K test fixed means looking at a smaller part of the object. This is not ideal: the object to identify is often well framed by the photographer, so the crop may show only a detail of the object or miss it altogether. Hence, in addition to increasing K image test , we also increase the crop size K test to keep the ratio K image test /K test constant. However, this means that K test &gt; K train , which skews the activation statistics (section 3.2). The next section shows how to compensate for this skew.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Adjusting the statistics before spatial pooling</head><p>At this point, we have selected the "correct" test resolution for the crop but we have skewed activation statistics. Hereafter we explore two approaches to compensate for this skew.</p><p>Parametric adaptation. We fit the output of the average pooling layer (section 3.2) with a parametric Fréchet distribution at the original K train and final K test resolutions. Then, we define an equalization mapping from the new distribution back to the old one via a scalar transformation, and apply it as an activation function after the pooling layer (see Appendix A). This compensation provides a measurable but limited improvement on accuracy, probably because the model is too simple and does not differentiate the distributions of different components going through the pooling operator.</p><p>Adaptation via fine-tuning. Increasing the crop resolution at test time is effectively a domain shift. A simple way to compensate for this shift is to fine-tune the model. In our case, we finetune on the same training set, after switching from K train to K test . We restrict the fine-tuning to the very last layers of the network. We observed in the distribution analysis that the sparsity should be adapted. This requires at least to include the batch normalization that precedes the global pooling into the fine-tuning. In this way the batch statistics are adapted to the increased resolution. We also use the test-time augmentation scheme during fine-tuning to avoid incurring further domain shifts. Figure <ref type="figure">4</ref> shows the pooling operator's activation statistics before and after fine-tuning. After finetuning the activation statistics closely resemble the train-time statistics. This hints that adaptation is successful. Yet, as discussed above, this does not imply an improvement in accuracy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Experiments</head><p>Benchmark data. We experiment on the ImageNet-2012 benchmark <ref type="bibr" target="#b28">[29]</ref>, reporting validation performance as top-1 accuracy. It has been argued that this measure is sensitive to errors in the ImageNet labels <ref type="bibr" target="#b30">[31]</ref>. However, the top-5 metrics, which is more robust, tends to saturate with modern architectures, while the top-1 accuracy is more sensitive to improvements in the model.</p><p>To assess the significance of our results, we compute the standard deviation of the top-1 accuracy: we classify the validation images, split the set into 10 folds and measure the accuracy on 9 of them, leaving one out in turn. The standard deviation of accuracy over these folds is ⇠ 0.03% for all settings. Therefore, we report 1 significant digit in the accuracy percentages.</p><p>We also report results for other datasets involving transfer learning in section 5.3 when presenting transfer learning results. Architectures. We use standard state-of-the-art neural network architectures with no modifications, We consider in particular ResNet-50 <ref type="bibr" target="#b10">[11]</ref>. For larger experiments, we use PNASNet-5-Large <ref type="bibr" target="#b20">[21]</ref>, learned using neural architecture search as a succession of interconnected cells. It is accurate (82.9% Top-1) with relatively few parameters (86.1 M). We use also ResNeXt-101 32x48d <ref type="bibr" target="#b21">[22]</ref>, pre-trained in weakly-supervised fashion on 940 million public images with 1.5k hashtags matching with 1000 ImageNet1k synsets. It is accurate (85.4% Top-1) with lot of parameters (829 M).</p><p>Training protocol. We train ResNet-50 with SGD with a learning rate of 0.1 ⇥ B/256, where B is the batch size, as in <ref type="bibr" target="#b12">[13]</ref>. The learning rate is divided by 10 every 30 epochs. With a Repeated Augmentation of 3, an epoch processes 5005 ⇥ 512/B batches, or ⇠90% of the training images, see <ref type="bibr" target="#b4">[5]</ref>. In the initial training, we use B = 512, 120 epochs and the default PyTorch data augmentation: horizontal flip, random resized crop (as in section 3) and color jittering. To finetune, the initial learning rate is 0.008 same decay, B = 512, 60 epochs. For ResNeXt-101 32x48d we use the pretrained version from the PyTorch hub repository <ref type="bibr" target="#b1">[2]</ref>. We also use a ten times smaller learning rate and a batch size two times smaller. For PNASNet-5-Large we use the pretrained version from Cadene's GitHub repository <ref type="bibr" target="#b0">[1]</ref>. The difference with the ResNet-50 fine-tuning is that we modify the last three cells, in one epoch and with a learning rate of 0.0008. We ran our training experiments on machines with 8 Tesla V100 GPUs and 80 CPU cores.</p><p>Fine-tuning data-augmentation. We experimented three data-augmentation for fine-tuning: The first one (test DA) is resizing the image and then take the center crop, The second one (test DA2) is resizing the image, random horizontal shift of the center crop, horizontal flip and color jittering. The last one (train DA) is the train-time data-augmentation as described in the previous paragraph.</p><p>The test DA data-augmentation described in this paragraph is the simplest. We use it for a more direct comparison with the literature for all the results reported with ResNet-50 and PNASNet-5-Large, except in Table <ref type="table" target="#tab_3">2</ref> where we report results with test DA2, which provides a slightly better performance. For ResNeXt-101 32x48d all reported results are obtained with test DA2.</p><p>Section C provides a comparison of the performance of these train-time data augmentation.</p><p>The baseline experiment is to increase the resolution without adaptation. Repeated augmentations already improve the default PyTorch ResNet-50 from 76.2% top-1 accuracy to 77.0%. Figure <ref type="figure" target="#fig_2">5</ref>(left) shows that increasing the resolution at test time increases the accuracy of all our networks. E.g., the accuracy of a ResNet-50 trained at resolution 224 increases from 77.0 to 78.4 top-1 accuracy, an improvement of 1.4 percentage points. This concurs with prior findings in the literature <ref type="bibr" target="#b11">[12]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Results</head><p>Improvement of our approach on a ResNet-50.  we reduce the training resolution, K train = 128 and testing at K train = 224 yields 77.1% accuracy, which is above the baseline trained at full test resolution without fine-tuning.</p><p>Application to larger networks. The same adaptation method can be applied to any convolutional network. In Table <ref type="table" target="#tab_2">1</ref> we report the result on the PNASNet-5-Large and the IG-940M-1.5k ResNeXt-101 32x48d <ref type="bibr" target="#b21">[22]</ref>. For the PNASNet-5-Large, we found it beneficial to fine-tune more than just the batch-normalization and the classifier. Therefore, we also experiment with fine-tuning the three last cells. By increasing the resolution to K test = 480, the accuracy increases by 1 percentage point. By combining this with an ensemble of 10 crops at test time, we obtain 83.9% accuracy. With the ResNeXt-101 32x48d increasing the resolution to K test = 320, the accuracy increases by 1.0 percentage point. We thus reached 86.4% top-1 accuracy.</p><p>Speed-accuracy trade-off. We consider the trade-off between training time and accuracy (normalized as if it was run on 1 GPU). The full table with timings are in supplementary Section C. In the initial training stage, the forward pass is 3 to 6 times faster than the backward pass. However, during fine-tuning the ratio is inverted because the backward pass is applied only to the last layers.</p><p>In the low-resolution training regime (K train = 128), the additional fine-tuning required by our method increases the training time from 111.8 h to 124.1 h (+11%). This is to obtain an accuracy of 77.1%, which outperforms the network trained at the native resolution of 224 in 133.9 h. We produce a fine-tuned network with K test = 384 that obtains a higher accuracy than the network trained natively at that resolution, and the training is 2.3⇥ faster: 151.5 h instead of 348.5 h.  <ref type="bibr" target="#b28">[29]</ref>. This exceeds the previous state of the art <ref type="bibr" target="#b21">[22]</ref> by 1.0% absolute in Top-1 accuracy and 0.4% Top-5 accuracy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Transfer learning tasks</head><p>We have used our method in transfer learning tasks to validate its effectiveness on other dataset than ImageNet. We evaluated it on the following datasets: Stanford Cars <ref type="bibr" target="#b15">[16]</ref>, CUB-200-2011 <ref type="bibr" target="#b35">[36]</ref>, Oxford 102 Flowers <ref type="bibr" target="#b22">[23]</ref>, Oxford-IIIT Pets <ref type="bibr" target="#b24">[25]</ref> and Birdsnap <ref type="bibr" target="#b3">[4]</ref>. We used our method with two types of networks for transfer learning tasks: SENet-154 <ref type="bibr" target="#b2">[3]</ref> and InceptionResNet-V2 <ref type="bibr" target="#b32">[33]</ref>. For all these experiments, we proceed as follows.</p><p>(1) we initialize our network with the weights learned on ImageNet (using models from <ref type="bibr" target="#b0">[1]</ref>); (2) we train it entirely for several epochs at a certain resolution;</p><p>(3) we fine-tune with a higher resolution the last batch norm and the fully connected layer. Table <ref type="table" target="#tab_4">3</ref> reports the baseline performance and shows that our method systematically improves the performance, leading to the new state of the art for several benchmarks. We notice that our method is most effective on datasets of high-resolution images.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>We have studied extensively the effect of using different train and test scale augmentations on the statistics of natural images and of the network's pooling activations. We have shown that, by adjusting the crop resolution and via a simple and light-weight parameter adaptation, it is possible to increase the accuracy of standard classifiers significantly, everything being equal otherwise.</p><p>We have also shown that researchers waste resources when both training and testing strong networks at resolution 224 ⇥ 224; We introduce a method that can "fix" these networks post-facto and thus improve their performance. An open-source implementation of our method is available at https://github.com/facebookresearch/FixRes.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Cumulative density function of the vectors components on output of the spatial average pooling operator, for a standard ResNet-50 trained at resolution 224, and tested at different resolutions. The distribution is measured on the validation images of Imagenet.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>4. 1 Figure 4 :</head><label>14</label><figDesc>Figure 4: CDF of the activations on output of the average pooling layer, for a ResNet-50, when tested at different resolutions K test . Compare the state before and after fine-tuning the batch-norm.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Top-1 accuracy of the ResNet-50 according to the test time resolution. Left: without adaptation, right: after resolution adaptation. The numerical results are reported in Appendix C. A comparison of results without random resized crop is reported in Appendix D.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 (</head><label>5</label><figDesc>right) shows the results obtained after fine-tuning the last batch norm in addition to the classifier. With fine-tuning we get the best results (79%) with the classic ResNet-50 trained at K train = 224. Compared to when there is no fine-tuning, the K test at which the maximal accuracy is obtained increases from K test = 288 to 384. If instead</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 1 :</head><label>1</label><figDesc>Application to larger networks: Resulting top-1 accuracy.</figDesc><table><row><cell>Model</cell><cell>Train</cell><cell></cell><cell>Fine-tuning</cell><cell></cell><cell></cell><cell>Test resolution</cell></row><row><cell></cell><cell cols="4">resolution Class. BN 3 cells</cell><cell cols="2">331 384 395 416</cell><cell>448</cell><cell>480</cell></row><row><cell>PNASNet-5-Large PNASNet-5-Large PNASNet-5-Large</cell><cell>331 331 331</cell><cell>X X</cell><cell>X X</cell><cell>X</cell><cell cols="3">82.7 83.0 83.2 83.0 83.0 82.8 82.7 83.4 83.5 83.4 83.5 83.4 82.7 83.3 83.4 83.5 83.6 83.7</cell></row><row><cell></cell><cell></cell><cell cols="3">Class. BN 3 conv.</cell><cell>224</cell><cell>288</cell><cell>320</cell></row><row><cell>ResNeXt-101 32x48d</cell><cell>224</cell><cell>X</cell><cell>X</cell><cell></cell><cell>85.4</cell><cell>86.1</cell><cell>86.4</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 2 :</head><label>2</label><figDesc>State of the art on ImageNet with various architectures (single Crop evaluation).</figDesc><table><row><cell>Models</cell><cell cols="6">Extra Training Data Train Test # Parameters Top-1 (%) Top-5 (%)</cell></row><row><cell>ResNet-50 Pytorch</cell><cell></cell><cell></cell><cell>224 224</cell><cell>25.6M</cell><cell>76.1</cell><cell>92.9</cell></row><row><cell>ResNet-50 mix up [40]</cell><cell></cell><cell></cell><cell>224 224</cell><cell>25.6M</cell><cell>77.7</cell><cell>94.4</cell></row><row><cell>ResNet-50 CutMix [39]</cell><cell></cell><cell></cell><cell>224 224</cell><cell>25.6M</cell><cell>78.4</cell><cell>94.1</cell></row><row><cell>ResNet-50-D [13]</cell><cell></cell><cell></cell><cell>224 224</cell><cell>25.6M</cell><cell>79.3</cell><cell>94.6</cell></row><row><cell>MultiGrain R50-AA-500 [5] ResNet-50 Billion-scale [38]</cell><cell></cell><cell>X</cell><cell>224 500 224 224</cell><cell>25.6M 25.6M</cell><cell>79.4 81.2</cell><cell>94.8 96.0</cell></row><row><cell>Our ResNet-50</cell><cell></cell><cell></cell><cell>224 384</cell><cell>25.6M</cell><cell>79.1</cell><cell>94.6</cell></row><row><cell cols="2">Our ResNet-50 CutMix Our ResNet-50 Billion-scale@160 Our ResNet-50 Billion-scale@224</cell><cell>X X</cell><cell>224 320 160 224 224 320</cell><cell>25.6M 25.6M 25.6M</cell><cell>79.8 81.9 82.5</cell><cell>94.9 96.1 96.6</cell></row><row><cell cols="2">PNASNet-5 (N = 4, F = 216) [21]</cell><cell></cell><cell>331 331</cell><cell>86.1M</cell><cell>82.9</cell><cell>96.2</cell></row><row><cell cols="2">MultiGrain PNASNet @ 500px [5]</cell><cell></cell><cell>331 500</cell><cell>86.1M</cell><cell>83.6</cell><cell>96.7</cell></row><row><cell>AmoebaNet-B (6,512) [14]</cell><cell></cell><cell></cell><cell>480 480</cell><cell>577M</cell><cell>84.3</cell><cell>97.0</cell></row><row><cell>EfficientNet-B7 [34]</cell><cell></cell><cell></cell><cell>600 600</cell><cell>66M</cell><cell>84.4</cell><cell>97.1</cell></row><row><cell>Our PNASNet-5</cell><cell></cell><cell></cell><cell>331 480</cell><cell>86.1M</cell><cell>83.7</cell><cell>96.8</cell></row><row><cell>ResNeXt-101 32x8d [22] ResNeXt-101 32x16d [22] ResNeXt-101 32x32d [22] ResNeXt-101 32x48d [22]</cell><cell></cell><cell>X X X X</cell><cell>224 224 224 224 224 224 224 224</cell><cell>88M 193M 466M 829M</cell><cell>82.2 84.2 85.1 85.4</cell><cell>96.4 97.2 97.5 97.6</cell></row><row><cell>Our ResNeXt-101 32x48d</cell><cell></cell><cell>X</cell><cell>224 320</cell><cell>829M</cell><cell>86.4</cell><cell>98.0</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 3 :</head><label>3</label><figDesc>Transfer learning task with our method and comparison with the state of the art. We only compare ImageNet-based transfer learning results with a single center crop for the evaluation (if available, otherwise we report the best published result) without any change in architecture compared to the one used on ImageNet. We report the Top-1 accuracy (%). We study the contribution of the different choices to the performance, limited to K train = 128 and K train = 224. By simply fine-tuning the classifier (the fully connected layers of ResNet-50) with test-time augmentation, we reach 78.9% in Top-1 accuracy with the classic ResNet-50 initially trained at resolution 224. The batch-norm fine-tuning and improvement in data augmentation advances it to 79.0%. The higher the difference in resolution between training and testing, the more important is batch-norm fine-tuning to adapt to the data augmentation. The full results are in the supplementary Section C.5.2 Beyond the current state of the artTable2compares our results with competitive methods from the literature. Our ResNet-50 is slightly worse than ResNet50-D and MultiGrain, but these do not have exactly the same architecture. On the other hand our ResNet-50 CutMix, which has a classic ResNet-50 architecture, outperforms others ResNet-50 including the slightly modified versions. Our fine-tuned PNASNet-5 outperforms the MultiGrain version. To the best of our knowledge our ResNeXt-101 32x48d surpasses all other models available in the literature. It achieves 86.4% Top-1 accuracy and 98.0% Top-5 accuracy, i.e., it is the first model to exceed 86.0% in Top-1 accuracy and 98.0% in Top-5 accuracy on the ImageNet-2012 benchmark</figDesc><table><row><cell>Dataset</cell><cell>Models</cell><cell cols="2">Baseline +our method</cell><cell>State-of-the-art models</cell><cell></cell></row><row><cell>Stanford Cars [16]</cell><cell>SENet-154</cell><cell>94.0</cell><cell>94.4</cell><cell>EfficientNet-B7 [34]</cell><cell>94.7</cell></row><row><cell>CUB-200-2011 [36]</cell><cell>SENet-154</cell><cell>88.4</cell><cell>88.7</cell><cell>MPN-COV [19]</cell><cell>88.7</cell></row><row><cell cols="3">Oxford 102 Flowers [23] InceptionResNet-V2 95.0</cell><cell>95.7</cell><cell>EfficientNet-B7 [34]</cell><cell>98.8</cell></row><row><cell>Oxford-IIIT Pets [25]</cell><cell>SENet-154</cell><cell>94.6</cell><cell>94.8</cell><cell cols="2">AmoebaNet-B (6,512) [14] 95.9</cell></row><row><cell>Birdsnap [4]</cell><cell>SENet-154</cell><cell>83.4</cell><cell>84.3</cell><cell>EfficientNet-B7 [34]</cell><cell>84.3</cell></row><row><cell>Ablation study.</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="33" xml:id="foot_0">33rd Conference on Neural Information Processing Systems (NeurIPS 2019), Vancouver, Canada.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_1">At training time, the extraction and resizing of the RoC is used as an opportunity to augment the data by randomly altering the scale of the objects, in this manner the CNN is stimulated to be invariant to a wider range of object scales.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<ptr target="https://github.com/Cadene/pretrained-models.pytorch" />
		<title level="m">Pre-trained pytorch models</title>
				<imprint>
			<date type="published" when="2019-05-23">2019-05-23</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<ptr target="https://pytorch.org/hub/facebookresearch_WSL-Images_resnext/" />
		<title level="m">Pytorch hub models</title>
				<imprint>
			<biblScope unit="page" from="2019" to="2025" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Squeeze-and-excitation networks</title>
		<author>
			<persName><forename type="first">Jie</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andli</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gang</forename><surname>Sun</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1709.01507</idno>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Birdsnap: Large-scale fine-grained visual categorization of birds</title>
		<author>
			<persName><forename type="first">T</forename><surname>Berg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">W</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">L</forename><surname>Alexander</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">W</forename><surname>Jacobs</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">N</forename><surname>Belhumeur</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference on Computer Vision and Pattern Recognition</title>
				<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Multigrain: a unified image embedding for classes and instances</title>
		<author>
			<persName><forename type="first">Maxim</forename><surname>Berman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hervé</forename><surname>Jégou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrea</forename><surname>Vedaldi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Iasonas</forename><surname>Kokkinos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matthijs</forename><surname>Douze</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1902.05509</idno>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A theoretical analysis of feature pooling in visual recognition</title>
		<author>
			<persName><forename type="first">Y-Lan</forename><surname>Boureau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jean</forename><surname>Ponce</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yann</forename><surname>Lecun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Machine Learning</title>
				<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<author>
			<persName><forename type="first">Ekin</forename><surname>Dogus Cubuk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Barret</forename><surname>Zoph</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1805.09501</idno>
		<title level="m">Dandelion Vijay Vasudevan, and Quoc V. Le. Autoaugment: Learning augmentation policies from data</title>
				<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Imagenet: A largescale hierarchical image database</title>
		<author>
			<persName><forename type="first">Jia</forename><surname>Deng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wei</forename><surname>Dong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Richard</forename><surname>Socher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Li-Jia</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kai</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Li</forename><surname>Fei-Fei</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference on Computer Vision and Pattern Recognition</title>
				<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="248" to="255" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Image style transfer using convolutional neural networks</title>
		<author>
			<persName><forename type="first">Leon</forename><forename type="middle">A</forename><surname>Gatys</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alexander</forename><forename type="middle">S</forename><surname>Ecker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matthias</forename><surname>Bethge</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference on Computer Vision and Pattern Recognition</title>
				<imprint>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="2414" to="2423" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">End-to-end learning of deep visual representations for image retrieval</title>
		<author>
			<persName><forename type="first">Albert</forename><surname>Gordo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jon</forename><surname>Almazan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jerome</forename><surname>Revaud</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Diane</forename><surname>Larlus</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International journal of Computer Vision</title>
		<imprint>
			<biblScope unit="volume">124</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="237" to="254" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Deep residual learning for image recognition</title>
		<author>
			<persName><forename type="first">Kaiming</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiangyu</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shaoqing</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jian</forename><surname>Sun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference on Computer Vision and Pattern Recognition</title>
				<imprint>
			<date type="published" when="2016-06">June 2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<author>
			<persName><forename type="first">Kaiming</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiangyu</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shaoqing</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jian</forename><surname>Sun</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1603.05027</idno>
		<title level="m">Identity mappings in deep residual networks</title>
				<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Bag of tricks for image classification with convolutional neural networks</title>
		<author>
			<persName><forename type="first">Tong</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhi</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hang</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhongyue</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Junyuan</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mu</forename><surname>Li</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1812.01187</idno>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<author>
			<persName><forename type="first">Yanping</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yonglong</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dehao</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hyoukjoong</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jiquan</forename><surname>Ngiam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Quoc</forename><forename type="middle">V</forename><surname>Le</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhifeng</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><surname>Gpipe</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1811.06965</idno>
		<title level="m">Efficient training of giant neural networks using pipeline parallelism</title>
				<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<author>
			<persName><forename type="first">Simon</forename><surname>Kornblith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathon</forename><surname>Shlens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Quoc</forename><forename type="middle">V</forename><surname>Le</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1805.08974</idno>
		<title level="m">Do better imagenet models transfer better?</title>
				<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">3d object representations for finegrained categorization</title>
		<author>
			<persName><forename type="first">Jonathan</forename><surname>Krause</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Stark</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jia</forename><surname>Deng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Li</forename><surname>Fei-Fei</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">4th International IEEE Workshop on 3D Representation and Recognition</title>
				<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="3" to="13" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Imagenet classification with deep convolutional neural networks</title>
		<author>
			<persName><forename type="first">Alex</forename><surname>Krizhevsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Geoffrey</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
				<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Backpropagation applied to handwritten zip code recognition</title>
		<author>
			<persName><forename type="first">Yann</forename><surname>Lecun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bernhard</forename><surname>Boser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><forename type="middle">S</forename><surname>Denker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Donnie</forename><surname>Henderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Richard</forename><forename type="middle">E</forename><surname>Howard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wayne</forename><surname>Hubbard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lawrence</forename><forename type="middle">D</forename><surname>Jackel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Neural computation</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="541" to="551" />
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Is second-order information helpful for large-scale visual recognition?</title>
		<author>
			<persName><forename type="first">Peihua</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jiangtao</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Qilong</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wangmeng</forename><surname>Zuo</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1703.08050</idno>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Kaiming He, Bharath Hariharan, and Serge Belongie. Feature pyramid networks for object detection</title>
		<author>
			<persName><forename type="first">Tsung-Yi</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Piotr</forename><surname>Dollár</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ross</forename><surname>Girshick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition</title>
				<meeting>the IEEE Conference on Computer Vision and Pattern Recognition</meeting>
		<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="2117" to="2125" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Progressive neural architecture search</title>
		<author>
			<persName><forename type="first">Chenxi</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Barret</forename><surname>Zoph</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Maxim</forename><surname>Neumann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathon</forename><surname>Shlens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wei</forename><surname>Hua</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Li-Jia</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Li</forename><surname>Fei-Fei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alan</forename><surname>Yuille</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathan</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kevin</forename><surname>Murphy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Computer Vision</title>
				<imprint>
			<date type="published" when="2018-09">September 2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Exploring the limits of weakly supervised pretraining</title>
		<author>
			<persName><forename type="first">Dhruv</forename><surname>Mahajan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ross</forename><surname>Girshick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Vignesh</forename><surname>Ramanathan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kaiming</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Manohar</forename><surname>Paluri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yixuan</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ashwin</forename><surname>Bharambe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Laurens</forename><surname>Van Der Maaten</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">European Conference on Computer Vision</title>
				<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Automated flower classification over a large number of classes</title>
		<author>
			<persName><forename type="first">M-E</forename><surname>Nilsback</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zisserman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Indian Conference on Computer Vision, Graphics and Image Processing</title>
				<meeting>the Indian Conference on Computer Vision, Graphics and Image Processing</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Learning and transferring midlevel image representations using convolutional neural networks</title>
		<author>
			<persName><forename type="first">Maxime</forename><surname>Oquab</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Leon</forename><surname>Bottou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ivan</forename><surname>Laptev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Josef</forename><surname>Sivic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference on Computer Vision and Pattern Recognition</title>
				<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Cats and dogs</title>
		<author>
			<persName><forename type="first">O</forename><forename type="middle">M</forename><surname>Parkhi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Vedaldi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zisserman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">V</forename><surname>Jawahar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Conference on Computer Vision and Pattern Recognition</title>
				<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Fine-tuning cnn image retrieval with no human annotation</title>
		<author>
			<persName><forename type="first">Filip</forename><surname>Radenović</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Giorgos</forename><surname>Tolias</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ondrej</forename><surname>Chum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Pattern Analysis and Machine Intelligence</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Faster r-cnn: Towards real-time object detection with region proposal networks</title>
		<author>
			<persName><forename type="first">Kaiming</forename><surname>Shaoqing Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ross</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jian</forename><surname>Girshick</surname></persName>
		</author>
		<author>
			<persName><surname>Sun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
				<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Real-time adaptive image compression</title>
		<author>
			<persName><forename type="first">Oren</forename><surname>Rippel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lubomir</forename><surname>Bourdev</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Machine Learning</title>
				<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Imagenet large scale visual recognition challenge</title>
		<author>
			<persName><forename type="first">Olga</forename><surname>Russakovsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jia</forename><surname>Deng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hao</forename><surname>Su</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathan</forename><surname>Krause</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sanjeev</forename><surname>Satheesh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sean</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhiheng</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrej</forename><surname>Karpathy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aditya</forename><surname>Khosla</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Bernstein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alexander</forename><forename type="middle">C</forename><surname>Berg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Li</forename><surname>Fei-Fei</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International journal of Computer Vision</title>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Very deep convolutional networks for large-scale image recognition</title>
		<author>
			<persName><forename type="first">K</forename><surname>Simonyan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zisserman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Learning Representations</title>
				<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Convnets and imagenet beyond accuracy: Understanding mistakes and uncovering biases</title>
		<author>
			<persName><forename type="first">Pierre</forename><surname>Stock</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Moustapha</forename><surname>Cisse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">European Conference on Computer Vision</title>
				<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Going deeper with convolutions</title>
		<author>
			<persName><forename type="first">C</forename><surname>Szegedy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wei</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yangqing</forename><surname>Jia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Sermanet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Reed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Anguelov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Erhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Vanhoucke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Rabinovich</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference on Computer Vision and Pattern Recognition</title>
				<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Inception-v4, inception-resnet and the impact of residual connections on learning</title>
		<author>
			<persName><forename type="first">Christian</forename><surname>Szegedy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sergey</forename><surname>Ioffe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Vincent</forename><surname>Vanhoucke</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1602.07261</idno>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Rethinking model scaling for convolutional neural networks</title>
		<author>
			<persName><forename type="first">Mingxing</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Quoc</surname></persName>
		</author>
		<author>
			<persName><surname>Le</surname></persName>
		</author>
		<author>
			<persName><surname>Efficientnet</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1905.11946</idno>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Particular object retrieval with integral maxpooling of cnn activations</title>
		<author>
			<persName><forename type="first">Giorgos</forename><surname>Tolias</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ronan</forename><surname>Sicre</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hervé</forename><surname>Jégou</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1511.05879</idno>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<author>
			<persName><forename type="first">C</forename><surname>Wah</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Branson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Welinder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Perona</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Belongie</surname></persName>
		</author>
		<title level="m">The Caltech-UCSD Birds-200-2011 Dataset</title>
				<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Image denoising and inpainting with deep neural networks</title>
		<author>
			<persName><forename type="first">Junyuan</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Linli</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Enhong</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
				<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="341" to="349" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">Billion-scale semi-supervised learning for image classification</title>
		<author>
			<persName><forename type="first">Ismet</forename><surname>Zeki Yalniz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hervé</forename><surname>Jégou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kan</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Manohar</forename><surname>Paluri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dhruv</forename><surname>Kumar Mahajan</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1905.00546</idno>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<author>
			<persName><forename type="first">Sangdoo</forename><surname>Yun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dongyoon</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Seong</forename><surname>Joon Oh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sanghyuk</forename><surname>Chun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Junsuk</forename><surname>Choe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Youngjoon</forename><surname>Yoo</surname></persName>
		</author>
		<author>
			<persName><surname>Cutmix</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1905.04899</idno>
		<title level="m">Regularization strategy to train strong classifiers with localizable features</title>
				<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<author>
			<persName><forename type="first">Hongyi</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Moustapha</forename><surname>Cissé</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yann</forename><forename type="middle">N</forename><surname>Dauphin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Lopez-Paz</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1710.09412</idno>
		<title level="m">mixup: Beyond empirical risk minimization</title>
				<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
