<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Web Semantics: Science, Services and Agents on the World Wide Web</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2008-12-19">19 December 2008</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Matthias</forename><surname>Klusch</surname></persName>
							<email>klusch@dfki.de</email>
							<affiliation key="aff0">
								<orgName type="department">German Research Center for Artificial Intelligence</orgName>
								<address>
									<addrLine>Stuhlsatzenhausweg 3</addrLine>
									<settlement>Saarbruecken</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Benedikt</forename><surname>Fries</surname></persName>
							<email>benedikt.fries@morganstanley.com</email>
							<affiliation key="aff1">
								<orgName type="institution">Morgan Stanley Japan Securities Corporation</orgName>
								<address>
									<settlement>Tokyo</settlement>
									<country key="JP">Japan</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Katia</forename><surname>Sycara</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">Robotics Institute</orgName>
								<orgName type="institution">Carnegie Mellon University</orgName>
								<address>
									<settlement>Pittsburgh</settlement>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Web Semantics: Science, Services and Agents on the World Wide Web</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2008-12-19">19 December 2008</date>
						</imprint>
					</monogr>
					<idno type="MD5">2386E9B13474C9E1D7DFDA1CB142D771</idno>
					<idno type="DOI">10.1016/j.websem.2008.10.001</idno>
					<note type="submission">Received 4 September 2008 Accepted 3 October 2008</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T09:47+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>Semantic Web OWL-S Semantic service matching Information retrieval</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>In this paper, we describe the first hybrid Semantic Web service matchmaker for OWL-S services, called OWLS-MX. It complements crisp logic-based semantic matching of OWL-S services with token-based syntactic similarity measurements in case the former fails. The results of the experimental evaluation of OWLS-MX provide strong evidence for the claim that logic-based semantic matching of OWL-S services can be significantly improved by incorporating non-logic-based information retrieval techniques. An additional analysis of false positives and false negatives of the hybrid matching filters of OWLS-MX led to an even further improved matchmaker version called OWLS-MX2.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Semantic service discovery is the process of locating existing Web services based on the description of their functional and nonfunctional semantics. Discovery scenarios typically occur when one is trying to reuse an existing piece of functionality (represented as a Web service) in building new or enhanced business processes. Both service-oriented computing and the Semantic Web envision intelligent agents to proactively pursue this task on behalf of their users.</p><p>Central to the majority of contemporary approaches to Semantic Web service selection is that the functionality of Web services is logically defined in, for example, the standard first-order description logic-based ontology language OWL <ref type="bibr" target="#b5">[6]</ref> or a rule language like SWRL, or a logic programming language like F-Logic. In any case, intelligent agents can exploit standard means of logic reasoning to automatically understand the Web service semantics, in particular to determine the degree to which the service is semantically relevant to a given service request.</p><p>However, the representation of real-world semantics in logics only is known to be inadequate due to its limited expressiv-ity. In addition, automated reasoning on Web service semantics expressed in first-order logics turned out not to be sufficiently scalable to the Web in practice <ref type="bibr" target="#b3">[4]</ref>.</p><p>One pragmatic solution to this problem is hybrid semantic service selection, that is the combination of both logic-based and non-logic-based approximate reasoning on service semantics. Pioneering work in this direction include the first implemented hybrid semantic service matchmakers like LARKS <ref type="bibr" target="#b16">[17]</ref>, OWLS-MX, WSMO-MX <ref type="bibr" target="#b7">[8]</ref>, FC-MATCH <ref type="bibr" target="#b0">[1]</ref> and OWLS-iMatcher2 <ref type="bibr" target="#b8">[9]</ref>.</p><p>In this paper, we describe our hybrid Semantic Web service matchmaker for OWL-S services, called OWLS-MX, in detail. Key to OWLS-MX is that it tolerates logical subsumption-based signature matching failures up to a specified extent by complementary approximate matching based on text similarity measurement. Of course, we acknowledge that the adaptation to the latter eventually is on the user's end.</p><p>The remainder of this paper is structured as follows. We provide background information on semantic services in OWL-S and semantic service selection with focus on logic-based approaches in Sections 2 and 3, respectively. The following Section 4 presents our approach to hybrid semantic service profile selection with OWLS-MX including its hybrid matching filters, the generic matching algorithm together with variants and a simple application example. Details on the implementation of OWLS-MX are given in Section 5. The experimental results of measuring the service retrieval performance and scalability of OWLS-MX over a given test collection are presented in Section 6, followed by an experimental analysis of its false positives and false negatives in Section 7. These results led to an improved version of OWLS-MX reported in Section 8. We briefly present related work on hybrid semantic service matchmakers in Section 9, and conclude in Section 10.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Semantic services in OWL-S</head><p>Our semantic service matchmaker OWLS-MX focusses on semantic services that are described in OWL-S. In the following, we briefly introduce the essentials of OWL-S, and refer to, for example, <ref type="bibr" target="#b14">[15]</ref> for more details.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.">Overview</head><p>OWL-S is an upper ontology used to describe the semantics of services based on the W3C standard ontology OWL and is grounded in WSDL. It has its roots in the DAML Service Ontology (DAML-S) released in 2001, and became a W3C candidate recommendation in 2005. The OWL-S ontology consists of three main components: the service profile for advertising and discovering services; the process model, which gives a detailed description of a service's operation; and the grounding, which provides details on how to interoperate with a service, via messages.</p><p>In particular, the semantic service profile in OWL-S specifies the semantics of the service signature, that is the inputs required by the service and the outputs generated. Furthermore, since a service may require external conditions to be satisfied, and it has the effect of changing such conditions, the profile also describes the preconditions to be satisfied before, and the expected effects that result from the execution of the service. The majority of existing OWL-S service matchmakers focusses on semantic service profiles.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.">OWL-S service profile</head><p>The OWL-S profile ontology is used to describe what the service does, and is meant to be mainly used for the purpose of service discovery. An OWL-S service profile or signature encompasses its functional parameters, i.e. hasInput, hasOutput, precondition and effect (IOPEs), as well as non-functional parameters such as serviceName, serviceCategory, qualityRating, textDescription, and meta-data about the service provider such as name and location <ref type="foot" target="#foot_0">3</ref> .</p><p>Inputs and outputs relate to data channels, where data flows between processes. Preconditions specify facts of the world (state) that must be asserted in order for an agent to execute a service. Effects characterize facts that become asserted given a successful execution of the service in the physical world (state). Whereas, in OWL-S, the semantics of each service input and output parameter is defined in terms of a referenced OWL concept in a given ontology, typically in a decidable description logic OWL-DL or OWL-Lite, the preconditions and effects can be expressed in any appropriate firstorder logic (rule) language such as KIF (Knowledge Interchange Format) or SWRL (Semantic Web Rule Language). Besides, the profile class can be subclassed and specialized, thus supporting the creation of profile taxonomies which subsequently describe different classes of services.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.">OWL-S service process model</head><p>An OWL-S process model describes the composition (choreography and orchestration) of one or more subservices of a service, that is the controlled enactment of constituent processes with respective communication patterns, exposed IOPEs and parameter bindings of linked subservices. The semantics of OWL-S service process models have not been defined in the specification of OWL-S but various existing approaches to formalize the semantics of the standard Web service orchestration language BPEL (Business Process Execution Language) can be exploited for this purpose. Originally, the service process model was not intended for service discovery by the so-called OWL-S coalition, that is the group of researchers who developed OWL-S.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4.">OWL-S service grounding</head><p>The grounding of an OWL-S service description provides a binding between the logic-based semantic service profile, the process model, and the XML-based Web service interface to facilitate service execution. Such a grounding of OWL-S services can be, in principle, arbitrary but has been exemplified for a grounding in WSDL (Web Service Description Language) to concretely connect OWL-S to an existing Web service standard.</p><p>In particular, the logic-based description of the service signature is uniquely associated with that of the Web service, and an atomic semantic process model is mapped to a WSDL operation. WSDL 1.0 does not allow to express pre-conditions or effects of services, nor has any formal semantics.</p><p>Though OWL-S allows only static and deterministic aspects of the world to describe in the description logic variants of OWL used for semantic annotation, the majority of semantic services available in the public Web happens to be in OWL-S <ref type="bibr" target="#b10">[11]</ref>. Refactoring OWL-S to the standard for Semantic Web service description, SAWSDL (Semantically Annotated WSDL), is ongoing work in the Semantic Web services science community.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Semantic service selection</head><p>What is semantic service selection? Apart from finding available semantic services in the Web or central service directories, the quality of semantic service discovery depends on the process of semantic service selection: the pairwise semantic service matching of a set of semantic services with a given query and respective relevance-based ranking of the results returned to the user. Semantic service selection tools are also called semantic service matchmakers.</p><p>In the following, we classify existing Semantic Web service matchmakers, and focus on what most of them perform: logicbased semantic service profile matching. Related work on hybrid semantic service matchmakers are discussed in Section 9. For a more comprehensive survey, we refer to <ref type="bibr" target="#b9">[10]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Classification of SWS matchmakers</head><p>Current semantic service matchmaker can be classified according to (a) what kinds and parts of service semantics are considered for matching, and (b) how matching is actually performed in terms of logic-based or non-logic-based reasoning within or partly outside the service description framework, or a combination of both (cf. Fig. <ref type="figure" target="#fig_0">1</ref>).</p><p>The majority of them performs logic-based semantic service profile matching, and is restricted to OWL-S. Only a few are available for alternatives like WSML or the standard SAWSDL, and does also take process models and non-functional parameters into account. Though, process model-based matching was not intended by the designers of OWL-S or WSML, while neither SAWSDL nor monolithic service descriptions offer any process model element.</p><p>Logic-based semantic service matchmakers perform deductive reasoning on service semantics. In order to define these semantics, Non-logic-based semantic service matchmakers do not perform any logic-based reasoning to determine the degree of a semantic match between a given pair of service descriptions. Examples of non-logic-based semantic matching techniques are text similarity measurement, structured XML/RDF graph matching, and path-length-based similarity of concepts. In particular, service matchmakers that do not at least logically verify given semantic relations between ontological concepts used to describe service semantics classify as non-logic-based.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Logic-based semantic service profile matching</head><p>We distinguish between monolithic and structured logic-based semantic profile matching. In the first case, the functionality of a Web service is exclusively -and agnostic to any parameterized description structure like in OWL-S or WSML -represented by a single logical expression. Semantic comparison of such monolithic logic-based service (effect) descriptions as a whole simply reduces to standard first-order (description) logic reasoning, that is service and query (desired service) concept subsumption, respectively, satisfiability checking completely within the logic theory.</p><p>For example, the logical post-plug-in match of an advertised service concept S with a service query concept R is determined by the entailment of service concept subsumption of S by R over a given knowledge base kb extended by the axioms of S and R: kb ∪ S ∪ R S R. That is, the matchmaker checks if in each first-order interpretation (possible world) I of kb, the set S I of concrete provider services (service instances) is contained in the set R I of service instances acceptable to the requester: S I ⊆ R I . In other words, service S is more specific than the request R, hence considered semantically relevant. A logical subsumes match assures the requester that her acceptable service instances are also acceptable to the provider: kb ∪ S ∪ R R S <ref type="bibr" target="#b4">[5]</ref>. Prominent examples of monolithic logic-based matchmakers are RACER <ref type="bibr" target="#b12">[13]</ref> and MaMaS<ref type="foot" target="#foot_1">4</ref>  <ref type="bibr" target="#b13">[14]</ref>.</p><p>Alternatively, structured logic-based profile matching makes additional use of parameterized service descriptions provided by most semantic service description languages such as OWL-S, WSML and SAWSDL. In this case, logic-based semantic profile matching is a combination of logical reasoning within the logic theory of the formal ontology language used for annotation, and algorithmic processing outside the theory. For example, a logic-based plug-in service (IOPE) profile match requires to check that certain constraints hold on the type and quantification of computed (approximated) logical implications between preconditions and effect, and logical subsumption between input and output concepts (denoted as in:C, resp., out:C) of service and query<ref type="foot" target="#foot_2">5</ref> : Service S semantically IOPE-plugs into request R iff prec R ⇒ prec S ∧ post S ⇒ post R (specification plug-in match), and ∀in :</p><formula xml:id="formula_0">C ∈ Input S ∃in : C ∈ Input R : C C ∧∀out : C ∈ Output R ∃out : C ∈ Output S : C C (signature plug-in match)</formula><p>. Alternative for undecidable first-order logical entailment checking is the polynomial, correct but incomplete polynomial theta subsumption (a logical consequence relation) and instancebased query answer set inclusion (query containment).</p><p>In general, the complexity of computing logic-based semantic relations depends on the ontology language used for semantic annotation. For example, post-plug-in matching of service concepts in OWL-Full, that is SHOIQ + (including transitive non-primitive roles) has been shown to be undecidable, but decidable in NEX-PTIME for OWL-DL, WSML-DL and DL-safe SWRL.</p><p>Examples of logic-based OWL-S service matchmakers are OWLSM <ref type="bibr" target="#b6">[7]</ref> and OWLS-UDDI <ref type="bibr" target="#b15">[16]</ref> both focussing on service IO-matching. The matchmaker PCEM <ref type="bibr" target="#b1">[2]</ref> converts given OWL-S services and request to standard PDDL (Planning Domain Definition Language) actions and then computes logical implications between their preconditions and effects in PROLOG.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Hybrid semantic service profile matching</head><p>Hybrid semantic service selection performed by our matchmaker OWLS-MX exploits both logic-based reasoning and nonlogic-based information retrieval (IR) techniques for OWL-S service profile signature matching. That is, OWLS-MX focusses on service I/O-parameter matching and ignores logical service specification in terms of preconditions and effects.</p><p>Please note that the vast majority of accessible OWL-S services does not possess any such specification, nor any composite process model yet.</p><p>In the following, we define the hybrid semantic service filters of OWLS-MX, the generic OWLS-MX selection algorithm and its five variants according to five different text similarity metrics used by the matchmaker.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">Matching filters of OWLS-MX</head><p>OWLS-MX computes the degree of semantic matching for a given pair of service advertisement and request by successively applying five different filters exact, plug in, subsumes, subsumed-by and nearest-neighbor. The first three are logic based only whereas the last two are hybrid due to the required additional computation of syntactic similarity values. Let be • T the terminology (TBox) of the OWLS-MX matchmaker ontology specified in OWL-DL and CT T the concept subsumption hierarchy of T;</p><formula xml:id="formula_1">• LSC(C) the set of least specific concepts (direct children) C of C, i.e. C is immediate sub-concept of C in CT T ; • LGC(C) the set of least generic concepts (direct parents) C of C, i.e., C is immediate super-concept of C in CT T ; • in:C ∈ Input S (out:C ∈ Output S ) an input (output) concept C of service S defined in T; • SynSim(S,R) ∈ [0, 1]</formula><p>real-valued degree of syntactic similarity between service S and request R. This degree is computed as the averaged syntactic similarity of the serialized input, respectively, output concepts of S and R according to given similarity metric SynSim(S, R) :</p><formula xml:id="formula_2">SynSim(S, R) = (SynSim(S, R) in + SynSim(S, R) out )/2.</formula><p>A set of concepts is serialized by means of terminological unfolding of its concepts in T, and conjunctive concatenation of the results into one unstructured text document including only logical operators and primitive components of the basic vocabulary of T as terms. In case of vector-space-based text similarity measurement, these documents are represented as weighted keyword vectors based on a term weighting scheme; • ˛∈ [0, 1] syntactic similarity threshold; • (≡) terminological concept subsumption (equivalence) relation.</p><p>The semantic service matching degrees computed by OWLS-MX are as follows:</p><formula xml:id="formula_3">Exact match. Service S exactly matches request R ⇔ ∀ in:C ∈ Input S ∃ in:C' ∈ Input R : C ≡ C' ∧∀ out:D ∈ Output R ∃ out:D'</formula><p>∈ Output S : D ≡ D. The service I/O signature perfectly matches with the request with respect to logic-based equivalence of their formal semantics.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Plug-in match. Service S plugs into</head><formula xml:id="formula_4">request R ⇔∀ in:C ∈ Input S ∃ in:C' ∈ Input R : C' C ∧∀ out:D ∈ Output R ∃ out:D' ∈ Output S : D' ∈ LSC(D).</formula><p>All service input parameter concepts are matched by a more specific one in the request R. If the OWL input concept definitions can be mapped to equivalent WSDL input messages and service signature data types, this constraint guarantees at a minimum that S is executable with any input provided by the requestor. In addition, S is expected to return more specific output data whose logically defined semantics are exactly the same or very close to what has been requested. This kind of match is borrowed from the software engineering domain, where software components are considered to plug-in match with each other as defined above but not restricting the output concepts to be direct children of those of the query. In particular, the definition of plug-in signature match used for OWLS-MX follows the original notion of software specification plug-in match introduced in <ref type="bibr" target="#b20">[21]</ref>.</p><p>Subsumes match. Request Rsubsumesservice S ⇔∀ in:C</p><formula xml:id="formula_5">∈ Input S ∃ in:C' ∈ Input R : C' C ∧∀ out:D ∈ Output R ∃ out:D' ∈ Output S : D' D.</formula><p>This filter is weaker than the plug-in filter in the sense that the returned service output is more specific than requested by the user: it relaxes the constraint of immediate output concept subsumption to arbitrary output concept subsumption.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Subsumed-by match</head><formula xml:id="formula_6">. Request R is subsumed by service S ⇔ ∀ in:C ∈ Input S ∃ in:C' ∈ Input R : C' C ∧∀ out:D ∈ Output R ∃ out:D' ∈ Output S : D' ≡ D ∨ D' ∈ LGC(D)</formula><p>. This filter selects services whose output data is slightly more general than requested, hence, in this sense, subsumes the request. We focus on direct parent output concepts to avoid selecting services returning data which we think may be too general. Of course, it depends on the individual perspective taken by the user, the application domain, and the granularity of the underlying ontology at hand, whether a relaxation of this constraint is appropriate, or not.</p><p>Logical Fail. OWLS-MX returns a logic-based semantic matching failure degree, iff service S does not match with request R according to any of the above matching filters.</p><p>Hybrid subsumed-by match. Request R is subsumed by service S</p><formula xml:id="formula_7">⇔∀ in:C ∈ Input S ∃ in:C' ∈ Input R : C' C ∧∀ out:D ∈ Output R ∃ out:D' ∈ Output S : (D' ≡ D ∨ D' ∈ LGC(D)) ∧Sim IR (S, R) ≥ ˛.</formula><p>This hybrid filter complements logic-based subsumed-by matching with syntactic matching by means of a selected text similarity measurement.</p><p>Nearest-neighbor match. Service S is nearest neighbor of request R ⇔Sim IR (S, R) ≥ ˛. This matching degree is non-logic-based since it checks the degree of text similarity between the input and output concepts of service and request. It is being applied only in case all of the above logic-based and hybrid matching filters fail.</p><p>Fail. OWLS-MX returns a total semantic matching failure degree as a result, iff service S does not match with request R according to any of the above matching degrees.</p><p>These service matching degrees are sorted according to the order of their semantic relevance degrees as follows: Exact&lt; Plug-In&lt; Subsumes&lt; Subsumed-By&lt; Logical Fail&lt;Hybrid subsumed-By&lt; Nearest-neighbor&lt; Fail.</p><p>A service S that logically matches exactly with request R is assumed to be more semantically relevant to R than a plug-in matching one (Exact&lt; Plug-In). A subsumes match of S with R is considered semantically weaker than a plug-in match due to the relaxation of the service output concept matching condition (relaxation from direct child concept to any arbitrary subconcept in the matchmaker ontology). In other words, a plug-in matching service S is assumed to be semantically closer to R than a subsumesmatching service (Plug-In&lt; Subsumes).</p><p>Further, we assume that a semantic service output concept which is more general than requested relaxes the degree of semantic relevance of this service to a query compared to a more specific service output. In particular, the restriction to direct parent concepts in the ontology in the logic-based subsumed-by matching condition makes a service S with a logical subsumes matching degree with focus on more specific, that is direct child concepts in the ontology, semantically more relevant to a given request R than services with more general output concepts like the subsumed-bymatching services (Subsumes&lt; Subsumed-By).</p><p>From the perspective of logic-based only semantic matching, the complementary text similarity measurement by the nearestneighbour filter is considered weakest with respect to semantic relevance. This filter will only be performed in case all logicbased filters and the hybrid subsumed-by filter fail. Finally, only if none of the above sequentially checked matching degrees hold, the matchmaker returns a matching failure (Nearest-neighbor&lt; Fail).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">Generic OWLS-MX matching algorithm</head><p>The OWLS-MX matchmaker takes any OWL-S service as a query, and returns an ordered set of relevant services that match the query each of which is annotated with its individual degree of matching, and syntactic similarity value. The user can specify the desired degree, and syntactic similarity threshold. OWLS-MX then first classifies the service request I/O concepts into its local matchmaker ontology.</p><p>Matchmaker ontology. The matchmaker ontology emerges from a given initial ontology by classifying all service and request I/O concepts into this ontology each time a service advertisement or request is being received. We assume that service provider, requester and matchmaker share a basic minimal vocabulary of primitive components together with a set of mapping rules such as synonym relations in the thesaurus WordNet. Primitive components are terms out of which complex concepts are canonically defined in a description logic-based terminology.</p><p>Upon receipt of a service, the matchmaker focuses only on those parts of referenced service ontologies that are relevant to understand the semantics of the service. For this purpose, it terminologically unfolds each service input and output concept leading to logical concept expressions that include primitive components of a shared basic vocabulary. Each of these concept expressions is self-contained in the sense that the rest of the referenced service ontology is not necessary to understand the semantics of the unfolded concept.</p><p>Attached to each concept in the matchmaker ontology are auxiliary data about which registered services are using that concept as an input and/or output concept. The respective lists of service identifiers are used by the matchmaker to compute the set of relevant services that are matching with the given query.</p><p>Hybrid matching. Any failure of logical concept subsumption produced by the integrated description logic reasoner of OWLS-MX will be tolerated, if and only if the degree of syntactic similarity between the respective unfolded service and request concept expressions exceeds a given similarity threshold.</p><p>The pseudo-code of the generic OWLS-MX matching process is given below (cf. algorithms 1-3). Let inputs S = { inS,i |0≤i≤s}, inputs R ={ inR,j |0≤j≤n}, outputs S ={ outS,k |0≤k≤r}, outputs R ={ outR,t |0≤t≤m}, set of input and output concepts used in the profile I/O parameters hasInput and hasOutput of registered service S in the set Advertisements, and the service request R, respectively. Attached to each concept in the matchmaker ontology are auxiliary data that informs about which registered service is using this concept as an input and/or output concept. Algorithm 1. Match: find advertised services S that best match in a hybrid fashion with a given request R; returns set of (S, degreeOf-Match, SIM IR (R,S)) with maximum degree of match (dom) unequal FAIL (uses algs. 2 and 3 to compute dom), and syntactic similarity value exceeding a given threshold ˛.</p><p>Algorithm 2. Find services which input matches with that of the request; returns set of (S, dom) with minimum degree of match dom unequal FAIL.</p><p>In the following section, we present five variants of this generic OWLS-MX matchmaking scheme. Algorithm 3. Find services which output matches with that of the request; returns set of (S, dom) with minimum degree of match unequal FAIL. OWLS-M1 to OWLS-M4. The hybrid variants OWLS-M1, OWLS-M3, and OWLS-M4 also compute the syntactic text similarity value Sim IR (out S , out R ) by use of the loss-of-information measure, extended Jacquard similarity coefficient, the cosine similarity value, and the Jensen-Shannon information divergence based similarity value, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.">OWLS-MX variants</head><p>Based on the experimental results of measuring the performance of similarity metrics for text information retrieval provided by Cohen and his colleagues <ref type="bibr" target="#b2">[3]</ref>, we selected the top performing ones to build the OWLS-MX variants. These symmetric token-based string similarity measures are defined as follows.</p><p>• The cosine similarity metric Sim Cos (S, R)</p><formula xml:id="formula_8">= ( R • S)/( R 2 • S 2 )</formula><p>with standard TFIDF term weighting scheme, and the unfolded concept expressions of request R and service S are represented as n-dimensional weighted index term vectors R and S respectively.</p><formula xml:id="formula_9">R • S = n i=1 w i,R × w i,S , X 2 = n i w 2 i,X</formula><p>, and w i,X denotes the weight of the i-th index term in vector X.</p><p>• The extended Jaccard similarity metric</p><formula xml:id="formula_10">Sim EJ (S, R) = R • S/ R 2 2 + S 2</formula><p>2 -R • S with standard TFIDF term weighting scheme.</p><p>• The intensional loss of information based similarity metric</p><formula xml:id="formula_11">Sim LOI (S, R) = 1 -LOI IN (R, S) + LOI OUT (R, S)/2 with LOI x (R, S) = |PC R,x ∪ PC S,x | -|PC R,x ∩ PC S,x |/|PC R,x | + |PC S,x |, x ∈ {IN, OUT }, PC R,x</formula><p>and PC S,x set of primitive components in unfolded logical input/output concept expression of request R and service S.</p><formula xml:id="formula_12">• The Jensen-Shannon information divergence based similar- ity measure Sim JS (S, R) = log2 -JS(S, R) =1/2log2 n i=1 h(p i,R ) + h(p i,S ) -h(p i,R + p i,S</formula><p>) with probability term frequency weigthing scheme, e.g., p i,R denotes the probability of i th index term occurrence in request R, and h(x) = -xlogx.</p><p>The extended Jaccard metric is a standard for measuring the degree of overlap as the ratio of the number of shared terms (primitive components) of unfolded concepts of both service and request, and the number of terms possessed by either of them. In contrast to the TFIDF/cosine similarity metric, it does not favor documents with most common terms. The Jensen-Shannon measure is based on the information-theoretic, non-symmetrical Kullback-Leibler divergence measure. It measures the pairwise dissimilarity of conditional probability term distributions between service and request text rather than looking at the whole collection as it is the case for the TFIDF/cosine, or the extended Jaccard metric. The loss of (intensional) information in case some concept A is terminologically substituted by concept B, can be measured as the inverse ratio of the number of matching primitive components with those which remain unmatched in terminologically disjoint unfolded concept constraints. The symmetric LOI-based similarity value for a given pair of service and request is then computed analogously for all I/O-concept definitions involved.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.">Example</head><p>Let us illustrate the hybrid service matching with OWLS-MX by means of a simple example. Fig. <ref type="figure" target="#fig_2">2</ref> shows the concept subsumption hierarchy or taxonomy of the OWLS-MX matchmaker ontology, the service request R for physicians of some hospital h that provide treatment to patient p, and relevant service advertisements S 1 and S 2 .</p><p>Service S 1 is considered semantically relevant to request R, since it returns for any given person p and hospital h, the individual surgeon of h that operated on p. Likewise, service S 2 is relevant to R, since it returns those emergency physicians who provided emergency treatment to p before her transport to hospital h. Hence, both services S 1 and S 2 should be returned as matching results to the user.</p><p>However, the logic-based only variant OWLS-M0 determines S 1 as plug-in matching with R but fails to return S 2 , since the logic-based semantics of the output concept siblings "emergency physician" and "hospital physician" in the ontology are terminologically disjoint. Please note that this concept disjointness is not defined in any of the concepts but has been computed by the matchmaker in due course of its classifying these concepts into its matchmaker ontology. In this example, the set of terminological constraints of unfolded concepts c corresponds to the set of As a result, for example, OWLS-M1 would return S 1 as semantically plug-in matching service with syntactic similarity value of Sim LOI (R, S 1 ) = 0.87. In contrast to OWLS-M0, it also returns S 2 , since this service is nearest-neighbor matching with the request R: their implicit semantics exploited by the text similarity metric LOI (cf. ( <ref type="formula">3</ref>), ( <ref type="formula">4</ref>)) with Sim LOI (R, S 2 ) = ((1 -5 -4)/(5 + 4)) + ((1 -4 -2)/(3 + 3))2 = 0.78 ≥ ˛= 0.7 is sufficiently similar, that is, it exceeds a threshold given by the requester.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Implementation</head><p>We implemented the OWLS-MX matchmaker variants (current version 1.1c) in Java using the OWL-S API 1.1 beta with the tableaux OWL-DL reasoner Pellet developed at university of Maryland (cf. http://www.mindswap.org). As the OWL-S API is tightly coupled with the Jena Semantic Web Framework, developed by the HP Labs Semantic Web research group (cf. http://jena.sourceforge.net/), the latter is also used to modify the OWLS-MX matchmaker ontology. Fig. <ref type="figure" target="#fig_3">3</ref> shows a screenshot of the OWLS-MX version 1.1 graphical user interface.</p><p>After parsing service advertisements and requests, the respective input and output concepts are analyzed and, if necessary, added to the local matchmaker ontology together with auxiliary data on their unfolding. As a consequence, the matchmaker ontology is dynamically built and growing with the number of services and underlying ontologies loaded. In addition, the matchmaker ontology is extended with auxiliary information for each concept, for example whether it is used as an input or output concept of a service registered at the matchmaker. Service requests are treated similarly, except that they are not stored in the extended matchmaker ontology.</p><p>For each service request concept, the service identifiers attached to its immediate parent and child concepts of the enhanced matchmaker ontology are retrieved. The semantic degree of matching for each service is then determined by applying the semantic filters on this set of matching candidates. After this step, the syntactic similarity is computed by applying the selected IR similarity metric to the strings of unfolded concepts of the query and each registered service. Both the semantic degree of match and the syntactic similarity value determine the hybrid degree of matching of one service with the request. If this hybrid degree is better than or equal to the minimum degree specified by the user, then this service will be returned as potentially relevant.</p><p>OWLS-MX spends the largest amount of time with classifying the service I/O-concept related parts of OWL-DL ontologies used by newly registered services into the matchmaker ontology. That is, it classifies new service I/O concepts not yet known to the matchmaker into its current ontology (see Section 4.2, matchmaker ontology). For example, the processing of 582 services of the test collection OWLS-TC 2.1 takes about ten minutes (on an IBM ThinkPad T41p with 1.7GHz and 2GB RAM) presuming that there are no additional time-outs due to unavailability of service related OWL ontologies at remote sites. Once this preprocessing has been completed, the average query response time of OWLS-MX appears reasonable but probably not acceptable in practice (about 10 s per query to check over 582 services). There is definitely space for improving on that by means of applying appropriate caching and indexing techniques.</p><p>OWLS-MX v1.1c comes with an integrated evaluation tool for measuring its performance in terms of precision and recall over a given OWL-S service retrieval test collection. Alternatively, we developed the SME2 (Semantic MatchMaker Evaluation Environment) tool which provides more functionality for testing arbitrary Semantic Web service matchmakers for OWL-S, WSML and SAWSDL; the evaluation tool SME2 is available at projects.semwebcentral.org/projects/sme2/.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Evaluation of performance</head><p>In this section, we provide our experimental results of the retrieval performance of logic-based and hybrid OWLS-MX variants in terms of recall and precision.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.">Service retrieval test collection</head><p>For measuring the service I/O retrieval performance of each OWLS-MX variant, we used the OWL-S service retrieval test collection Owls-TC v2.2. This collection consists of more than 1000 services specified in OWL-S 1.1 in seven application domains, that are education, medical care, food, travel, communication, economy, and weaponry. The majority of these services were retrieved from public IBM UDDI registries, and semi-automatically transformed from WSDL to OWL-S. Owls-TC v2.2 provides a set of 28 test queries each of which is associated with a set of 10-20 services that a dozen people subjectively defined as relevant according to the standard TREC definition of binary relevance <ref type="bibr" target="#b18">[19]</ref>. The collection Owls-TC v2.2is available as open source at projects.semwebcentral.org/projects/owls-tc/. We are working on Owls-TC v2.2gwith graded relevance sets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.">Overall R/P performance</head><p>We adopted the evaluation strategy of macro-averaging the individual precision values over all requests q ∈ Q for recall levels <ref type="bibr" target="#b19">[20]</ref> of each OWLS-MX variant over the test collection OWLS-TC 2.1. The matchmaker returns a rank list of all services for evaluation, that is the answer set for evaluation purposes is the set S of registered services. For all queries q i ∈ Q, i ∈ {1..n} and recall levels j = j/ ∈ [0, 1], j = 1.. , we select the precision Prec i (r) value that is maximum (ceiling interpolation) for recall Rec i (r) ≥ j at some rank r = 1,...,|S|. Finally, we average these observed precision values to obtain the macro-averaged precision Prec( j ) (over all queries) at each recall level j .</p><p>In summary, the evaluation results showed that hybrid semantic matching can improve logic-based only service selection in terms of both precision and recall (cf. Fig. <ref type="figure" target="#fig_4">4</ref>). While OWLS-M0 reached precision of 0.67 and recall of 0.50 in average for its top-20 ranked services, the hybrid OWLS-M3 achieved that with a higher precision (0.74) and recall (0.557).</p><p>The reason of higher precision of the hybrid variants OWLS-M1 to OWLS-M4 is that they avoided most of logic-based false positives in case of logical subsumed-by matches in the given test collection by complementary syntactic similarity measurement. In addition, the hybrid semantic matchmakers avoided logic-based false negatives caused by wrongly returned matching degree of logical fail through complementary syntactic similarity measurements (nearest-neighbour match) which led to a better recall. All hybrid variants showed almost equal performance in average. In the following, we show the main cases of logic-based and hybrid false positives and false negatives lowering precision, respectively, recall of OWLS-MX.</p><p>The quantitative impact of the above mentioned false positive and false negative cases on the matchmaker performance, of course, depends on the used test collection. In this respect, our experimental evaluation results are preliminary as long as there is no (quasi-)standard collection for semantic service retrieval available, similar to TREC in the IR domain.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Anaylsis of false positives and negatives</head><p>In this section, we analyze the retrieval performance of OWLS-MX in terms of false positive and false negatives to reveal the benefits and pitfalls of its logic-based and hybrid semantic matching filters.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1.">Logic-based false positives</head><p>There are two main reasons for logic-based false positives of OWLS-MX: first, in the context of service matching, the known logical mismatch problem of knowledge representation is manifested by inappropriate logical definitions of input or output concepts used to define the semantics of I/O concepts of services in the logic-based matchmaker ontology. Second, the all-quantified logical matching constraints wrongly tolerates the missing of input or output concepts.These types of logic-based false positives of OWLS-M0 are illustrated by example in the following.</p><p>Granularity of matchmaker ontology. Any logic-based semantic service matchmaker risks to return false positives if the given logical concept definitions in its ontology are not capturing the real-world semantics of the concepts used to defined the service semantics. This kind of logical mismatch is a general problem of symbolic knowledge representation. In the context of semantic service matching, the decision whether some service is a false positive for a given query is subjective for each individual user. The same holds for the definition of relevance sets for each query in the test collection OWLS-TC2.2 we used to evaluate the retrieval performance of OWLS-MX.</p><p>For example, in Fig. <ref type="figure" target="#fig_5">5</ref>, the service at best logically plug-in matches with the query, since the (equally named) output concepts "price" are determined logically equivalent, and the query input concept "HybridRotaryEnginePoweredCar" is far more specific than the service input concept "Automobile". According to the developers of the test collection, the real-world semantic distance between both input concepts in the matchmaker ontology can be considered too large for being of any interest which renders the service irrelevant. The reason why all logic-based matching filters  of OWLS-M0 fail to reckognize this, hence return the service as relevant, is that they accept an unlimited input concept distance in the matchmaker ontology.</p><p>Similarly, in the second example (cf. Fig. <ref type="figure" target="#fig_6">6</ref>) the logical comparison of service and query output definitions result in a direct subsumption relation in the matchmaker ontology which could be (subjectively) considered wrong, hence produce a false positive. In this case even a restrictive least generic concept match of the logical subsumed-by filter of OWLS-M0 does not help to avoid this. However, in both cases the additional syntactic matching of the hybrid subsumed-by matching filter of OWLS-M1 to OWLS-M4 can potentially avoid logical subsumed-by matches that are classified as false positives. This holds under the IR assumption that the degree of syntactic similarity sufficiently corresponds with the degree of real-world semantic similarity.</p><p>All-quantified logical matching constraints. Many false positives of OWLS-M0 are caused by the restrictive all-quantified logical matching constraints. Since the hybrid variants inherit the decision of OWLS-M0 in case of a logical match, these become false positives of OWLS-M1 to OWLS-M4 too.</p><p>Query input without corresponding service input. The surjective mapping of service input concepts to query input concepts (∀in S ∃in R ) can lead to false positives: it tolerates the missing of service input concepts that correspond to those query input concepts that are important part of or even key for defining the intended query semantics. For example, in Fig. <ref type="figure" target="#fig_7">7</ref>, the input "SFNovel" of the query "SFNovelPrice" does not match with any input of the service "EntranceFee" but "Author" with "Person". As a result, OWLS-M0 determines a plug-in match, hence wrongly returns the service as relevant.</p><p>Even worse, the surjective concept mapping by OWLS-MX can lead to false logical exact matches in case of no input or output concepts provided. For example, in Fig. <ref type="figure" target="#fig_8">8</ref>, the query "BuyBook" and service "DatingService" are returned as semantically equivalent by OWLS-M0. The reason is that in this particular case there does not exist any query output concept which matches with the existing service output concept. Similarly, the same holds for the query "RoutingService" and the service "Map" without any input concept to match which makes the service-centred input matching constraints of all logical filters of OWLS-MX true by default.  concept to describe different real-world semantics of a query or a service. For example, the real-world semantics of service "Book-CopyCheck" and query "BookReview" in Fig. <ref type="figure" target="#fig_9">9</ref> are assumed to be not related at all, that is the service is not relevant to the query.</p><p>However, OWLS-M0 classifies the service as semantically equivalent with the query, hence produces a false positive. The same concept "Book" is used twice in the service input but with obviously different real-world semantics than in the query. In these cases, even syntactic similarity measurement would return a high relevance degree but at least not identity between service and query, since the term unfolded concept "Book" can be detected as a surplus term of the input string by means of fine-grained syntactic overlap measurement like the extended Jaccard coefficient.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2.">Avoiding logic-based false positives</head><p>The hybrid variants OWLS-M1 to OWLS-M4 can increase their precision compared to OWLS-M0 by avoiding its false logic-based subsumed-by matches through additional syntactic similarity measurement. In fact, the hybrid subsumed-by filter allows to detect the irrelevance of a service S that logically subsumes the query R with insufficient syntactic similarity value (SynSim(S,R) ≤ ˛).</p><p>Hybrid false positives. However, due to sequential execution of ordered logic-based and hybrid matching filters, the hybrid filters inherit the remaining logic-based false positives from OWLS-M0. That can be avoided by complementary syntactic matching for all logic-based filters (except the exact match) which led to the development of OWLS-MX2 (cf. Section 8).</p><p>Syntactic false positives only. On the other hand, the complementary syntactic matching can also cause hybrid false positives in case of sufficient syntactic similarity but non-matching real-world semantics between service and request which would be correctly determined by OWLS-M0 (logical matching failure). For example, logical connectives like "and", "or" in the logically unfolded concept expressions are ignored by syntactic matching, since they are eliminated as classical stop-words in the preprocessing step of unfolded service and query I/O concept expressions to weighted keyword vectors for text similarity measurements (SynSim(S,R) out ; SynSim(S,R) in ).</p><p>For example, in Fig. <ref type="figure" target="#fig_10">10</ref> we are asking for a service that is capable of either colouring or framing a given picture, and consider a service that is restricted to jointly perform both actions irrelevant. In this case, the logic-based OWLS-M0 correctly returns a logical matching failure while OWLS-M1 to OWLS-M4 ignore the subtle difference between the use of the terms "and" and "or" in the concept expressions, hence detect a syntactic exact match of both pairs of I/O strings and return the service as relevant with a hybrid nearest-neighbour matching degree (text similarity value of 1.0).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3.">Logic-based false negatives</head><p>Like for logic-based false positives, the reasons of logic-based false negatives are mainly due to the logical mismatch problem of the matchmaker ontology and the implication of the all-quantified matching constraints of OWLS-MX.</p><p>Ontology granularity: similar concept siblings with logical disjoint definitions. The problem of logical mismatches due to insufficient ontology modeling can also cause false negatives, that are services wrongly classified as irrelevant by OWLS-M0. One example of such logic-based only false negatives is the case of logically disjoint concept siblings with similar real-world semantics in a fine-grained ontology. Please note that these concepts are not explicitly defined disjoint in the ontology but determined to be disjoint by the matchmaker while matching the service with the query. For example, in Fig. <ref type="figure" target="#fig_11">11</ref>, the query output "Hopital-Physician" and service output "Emergency-Physician" are assumed to be semantically close such that the service is considered relevant to the query. However, the matchmaker classifies both conjunctive concept definitions differing in only one pair of their (equally weighted) logical constraints as logically disjoint, hence produces a false negative.</p><p>All-quantified logical matching constraints: more generic service input only. The all-quantified matching filters of OWLS-M0 require that the service input must be logically more generic than or equal to the query input. In case of a linear mapping of service and query I/O concepts to corresponding XMLS signature data types on the service grounding level, this guarantees that the WSDL service can be invoked with the information specified in the query by the user,    <ref type="figure" target="#fig_12">12</ref>, since no logical filter of OWLS-M0 evaluates to true in cases where the service input is more specific than requested.</p><p>All-quantified logical matching constraints: logical concept relations of same type. Finally, the matching filters of OWLS-M0 require each pair of service and query I/O concepts having the same type of logical subsumption relation. For example, in Fig. <ref type="figure" target="#fig_13">13</ref>, the logical subsumption relations between output concepts of query "CarPlus-Bike" and service "4WheeledCarPackage" are different. As a result, OWLS-M0 fails to detect the service as relevant.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.4.">Avoiding logic-based false negatives</head><p>Due to complementary syntactic matching in case of logical matching failure returned by OWLS-M0, the hybrid variants OWLS-M1 to OWLS-M4 can avoid the above cases of logic-based false negatives, thereby increasing their recall compared to OWLS-M0. This is achieved by detecting (hybrid) nearest-neighbour matches, if the degree of syntactic similarity between the considered pairs of concepts or service and query I/O-signature as a whole is sufficient.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">OWLS-MX2</head><p>The version OWLS-MX2 integrates syntactic similarity-based matching with logic-based subsumes and plug-in matching like the hybrid subsumed-by filter in OWLS-MX. That avoids some false-positives the hybrid OWLS-M1 to OWLS-M4 inherit from OWLS-M0. Our experiments over the OWLS-TC 2.2 that contains cases for all of the above mentioned false positives and false negatives showed that OWLS-MX2 did outperform OWLS-MX for this </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.">Related work</head><p>There are only a few other hybrid semantic service matchmakers available for OWL-S service profiles. We discuss each of them in very brief only (see also Fig. <ref type="figure" target="#fig_0">1</ref> in Section 3), and refer to <ref type="bibr" target="#b9">[10]</ref> for a coverage of SWS matchmaking in general.</p><p>Our OWLS-MX matchmaker is strongly inspired by the hybrid matchmaker LARKS <ref type="bibr" target="#b16">[17]</ref>. However, LARKS differs from OWLS-MX in several aspects: LARKS performs IOPE matching of service profiles written in a proprietary capability description language with a description logic different from OWL-DL. Besides, LARKS does not offer logical subsumes nor subsumed-by nor hybrid nearestneighbour matching, and has never been experimentally evaluated.</p><p>The logic-based variant OWLS-M0 of OWLS-MX is similar to the prominent OWLS-UDDI matchmaker <ref type="bibr" target="#b17">[18]</ref> but is different with respect to the following issues: OWLS-UDDI makes use of a different notion of plug-in matching and does not perform additional subsumed-by matching. Further, OWLS-M0 allows to use arbitrary rather than known service query concepts into its local matchmaker ontology, and is not integrated with the UDDI registry standard for Web service discovery. The hybrid semantic OWL-S service profile matchmaker iMatcher <ref type="bibr" target="#b8">[9]</ref> uses multiple edit-or token-based text similarity metrics (Bi-Gram, Levenshtein, Monge-Elkan and Jaro similarity measures) to determine the degree of semantic matching between a given pair of OWL-S service profiles. Like OWLS-MX, the iMatcher transforms each structured service profile description into a weighted keyword vector that includes not only the names but terms derived by means of logic-based unfolding of its service input and output concepts. In this sense, iMatcher classifies as a hybrid matchmaker. However, it does not perform logic-based matching which resulted in lower precision and recall compared to OWLS-MX. In its adaptive mode iMatcher2 learns (over a test collection like OWLS-TC2.2) which of its ten text similarity measures to select best for a given query. It has been experimentally shown that the combined logical deduction and regression-based learning of text similarities of iMatcher2 is superior to logic-based only matching; iMatcher2 did outperform OWLS-MX in terms of precision.</p><p>The hybrid semantic service matchmaker FC-MATCH <ref type="bibr" target="#b0">[1]</ref> performs a combined logic-based and text similarity-based matching of monolithic service and query concepts written in OWL-DL. In this approach, a service concept S is defined as logical conjunction of existential qualified role expressions where each role corresponds to a selected profile parameter: S = ∃hasCategory(C 1 ) ∃hasOperation(C 2 ) ∃hasInput(C 3 ) ∃hasOutput(C 4 ). Unlike monolithic logic-based service matching, FC-MATCH determines hybrid matching degrees by means of logic-based subsumption of their profile parameter concepts (C i ) together with computing the socalled Dice (name affinity) similarity coefficient between terms occurring in these concepts according to given terminological relationships of the thesaurus WordNet. However, to the best of our knowledge, FC-MATCH has not been experimentally evaluated yet. <ref type="bibr" target="#b11">[12]</ref> presents an approach to hybrid matching of monolithic logic-based semantic service descriptions in OWL-DL extended with pricing policies (modeled in DL-safe SWRL rules) according to given preferences by means of SPARQL queries to a given service repository.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Categories of existing SWS matchmakers.</figDesc><graphic coords="3,123.73,66.87,358.11,264.02" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>We implemented different variants of the generic OWLS-MX algorithm, called OWLS-M1 to OWLS-M4, each of which uses the same logic-based semantic filters but different IR similarity metric SIM IR (R, S) for content-based service I/O matching. The variant OWLS-M0 performs logic based only semantic service I/O matching. OWLS-M0. The logic-based semantic filters Exact, Plug-in, Subsumes and Subsumed-By are applied as defined in Section 3.1.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Example of hybrid service matching with OWLS-MX.</figDesc><graphic coords="7,61.76,67.30,482.04,360.58" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. OWLS-MX v1.1c screenshot: OWLS-MX configuration.</figDesc><graphic coords="8,52.94,67.65,480.24,298.22" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. R/P performance of logic-based OWLS-M0 vs. syntactic matching (Cosine/TFIDF, threshold 0.6) vs. hybrid matching with OWLS-M3.</figDesc><graphic coords="9,47.19,66.88,242.19,267.48" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Example: false positive due to tolerated unlimited logical parent-child relation between input concepts.</figDesc><graphic coords="9,353.25,67.36,168.12,173.52" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. Example: false positive due to logical mismatch of output concepts with direct parent-child relation.</figDesc><graphic coords="9,347.25,550.99,180.00,168.48" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Example: false positive due to all-quantified matching. Incomplete coverage of query input by service input is tolerated.</figDesc><graphic coords="10,98.45,67.12,120.24,77.76" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Example: false positives due to tolerated lack of service or query I/O.</figDesc><graphic coords="10,71.45,653.17,174.24,75.17" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 9 .</head><label>9</label><figDesc>Fig. 9. Example: false positive caused by using the same concept "book" for describing different service and query semantics.</figDesc><graphic coords="10,379.44,67.26,96.12,77.62" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 10 .</head><label>10</label><figDesc>Fig. 10. Example: hybrid false positives due to ignorance of logical connectives by complementary syntactic matching.</figDesc><graphic coords="11,66.26,67.33,204.12,123.55" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 11 .</head><label>11</label><figDesc>Fig. 11. Example: false negative caused by semantically similar but (not defined as) logically disjoint concept siblings in the matchmaker ontology.</figDesc><graphic coords="11,69.26,496.70,198.00,222.77" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Fig. 12 .</head><label>12</label><figDesc>Fig. 12. Example: false negative due to required genericity of service input.</figDesc><graphic coords="11,383.25,67.46,108.00,125.42" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Fig. 13 .</head><label>13</label><figDesc>Fig. 13. Example: false negative due to different concept subsumption relations not accepted by the all-quantified filter constraints of OWLS-MX</figDesc><graphic coords="11,374.25,226.18,126.00,154.80" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Fig. 14 .</head><label>14</label><figDesc>Fig. 14. R/P performance of hybrid OWLS-MX2, OWLS-M3, and IR metric cosine/TFIDF. reason, and performed slightly better than text IR by avoiding syntactic similarity-based only false positives. Fig. 14 Since the number of cases for false positives of text IR in the collection OWLS-TC 2.2 is still significantly less than those for logicbased false positives, the hybrid OWLS-M3 did not outperform syntactic matching only. In fact, we observed that in most domain ontologies fine-grained logical concept definitions other than pure subclass relations are rare in practice which still handicaps logicbased only semantic service matching in practice. However, the quantitative relation between logic-based and text IR only false positives and false negatives in the Semantic Web is unknown.</figDesc><graphic coords="12,40.01,66.88,236.88,265.10" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="5,348.76,324.27,177.03,418.97" type="bitmap" /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_0"><p>Please note that, in contrast to OWL-S 1.0, in OWL-S 1.1 the service IOPE parameters are defined in the process model with unique references to these definitions from the profile.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_1"><p>sisinflab.poliba.it/MAMAS-tng/.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_2"><p>Originally, a service S plugs into (plug-in matches with) another service R, if the effect of S is more specific than that of R, and vice versa for the preconditions of S and R<ref type="bibr" target="#b20">[21]</ref>. Unfortunately, this notion of plug-in match in software engineering has been adopted quite differently by most logic-based Semantic Web service matchmakers for both monolithic and structured service descriptions.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10.">Conclusions</head><p>The presented approach to hybrid Semantic Web service matching, called OWLS-MX, utilizes both logic based reasoning and non-logic based IR techniques for Semantic Web services in OWL-S. Experimental evaluation results provide strong evidence in favor of the proposition that the performance of logic-based matchmaking can be considerably improved by incorporating non-logic based information retrieval techniques into the matching algorithms.</p><p>The hybrid matchmaker OWLS-MX has been successfully used in two fielded mobile e-health systems for emergency medical assistance and repatriation planning, namely the Health-SCALLOPS system (http://www.dfki.de/scallops) and the CASCOM system (http://www.ist-cascom.org).</p></div>
			</div>


			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"> <ref type="bibr" target="#b0">1</ref> <p>Partial support provided by BMBF (German Ministry for Education and Research) grants MODEST 01-IWO-8001, SCALLOPS 01-IW-D02, European Commission grant CAS-COM IST-FP6-511632. <ref type="bibr" target="#b1">2</ref> Partial support provided by the DARPA DAML program under contract F30601-00-2-0592.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Semantic-enriched service discovery</title>
		<author>
			<persName><forename type="first">D</forename><surname>Bianchini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">D</forename><surname>Antonellis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Melchiori</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Salvi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE ICDE 2nd International Workshop on Challenges in Web Information Retrieval and Integration (WIRI06)</title>
		<meeting>IEEE ICDE 2nd International Workshop on Challenges in Web Information Retrieval and Integration (WIRI06)<address><addrLine>Atlanta, Georgia, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Service discovery</title>
		<author>
			<persName><forename type="first">L</forename><surname>Botelho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Fernandez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Klusch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Pereira</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Santos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Pais</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Vasirani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CASCOM -Intelligent Service Coordination in the Semantic Web</title>
		<editor>
			<persName><forename type="first">M</forename><surname>Schumacher</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">H</forename><surname>Helin</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
	<note>Chapter 10</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A comparison of string distance metrics for name-matching tasks</title>
		<author>
			<persName><forename type="first">W</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Ravikumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Fienberg</surname></persName>
		</author>
		<ptr target="http://dblp.uni-trier.de" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IJCAI-03Workshop on Information Integration on the Web</title>
		<meeting>the IJCAI-03Workshop on Information Integration on the Web</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
	<note>IIWeb-03</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Unifying reasoning and search to web scale</title>
		<author>
			<persName><forename type="first">D</forename><surname>Fensel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Van Harmelen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Internet Computing</title>
		<imprint>
			<date type="published" when="2007-04">March/April 2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Discovery -identifying relevant services</title>
		<author>
			<persName><forename type="first">S</forename><surname>Grimm</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Semantic Web Services. Concepts, Technologies, and Applications</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">From shiq and rdf to owl: The making of a web ontology language</title>
		<author>
			<persName><forename type="first">I</forename><surname>Horrocks</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Patel-Schneider</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Van Harmelen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Web Semantics</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">1-4</biblScope>
			<date type="published" when="2004-11">November 2004</date>
			<publisher>Elsevier</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Ranked matching for service descriptions using owl-s</title>
		<author>
			<persName><forename type="first">M</forename><surname>Jaeger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Rojec-Goldmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Liebetruth</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Mühl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Geihs</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14. GI/VDE Fachtagung Kommunikation in Verteilten Systemen KiVS</title>
		<meeting>the 14. GI/VDE Fachtagung Kommunikation in Verteilten Systemen KiVS<address><addrLine>Kaiserslautern</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Wsmo-mx: a logic programming based hybrid service matchmaker</title>
		<author>
			<persName><forename type="first">F</forename><surname>Kaufer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Klusch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th IEEE European Conference on Web Services (ECOWS 2006)</title>
		<meeting>the 4th IEEE European Conference on Web Services (ECOWS 2006)<address><addrLine>Zurich, Switzerland</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE CS Press</publisher>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">The creation and evaluation of isparql strategies for matchmaking</title>
		<author>
			<persName><forename type="first">C</forename><surname>Kiefer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bernstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of European Semantic Web Conference</title>
		<meeting>European Semantic Web Conference</meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Semantic web service coordination</title>
		<author>
			<persName><forename type="first">M</forename><surname>Klusch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CASCOM -Intelligent Service Coordination in the Semantic Web</title>
		<editor>
			<persName><forename type="first">M</forename><surname>Schumacher</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">H</forename><surname>Helin</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Deployed semantic services for the common user of the web: A reality check</title>
		<author>
			<persName><forename type="first">M</forename><surname>Klusch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Xing</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2nd IEEE International Conference on Semantic Computing (ICSC)</title>
		<meeting>the 2nd IEEE International Conference on Semantic Computing (ICSC)<address><addrLine>Santa Clara, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Automated selection of configurable web services</title>
		<author>
			<persName><forename type="first">S</forename><surname>Lamparter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ankolekar</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007-03">March 2007</date>
			<pubPlace>Karlsruhe, Germany</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Internationale Tagung Wirtschaftsinformatik. Universitaetsverlag Karlsruhe</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A software framework for matchmaking based on semantic web technology</title>
		<author>
			<persName><forename type="first">L</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Horrocks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twelfth International Conference on World Wide Web</title>
		<meeting>the Twelfth International Conference on World Wide Web</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A system for principled matchmaking in an electronic marketplace</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">D</forename><surname>Noia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Sciascio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Donini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mogiello</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 12th international conference on World Wide Web</title>
		<meeting>the 12th international conference on World Wide Web</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Semantic markup for web services; w3c member submission 22</title>
		<author>
			<persName><surname>Owl-S</surname></persName>
		</author>
		<ptr target="http://www.w3.org/Submission/2004/SUBM-OWL-S-20041122/" />
		<imprint>
			<date type="published" when="2004-11">november 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Semantic matching of web services capabilities</title>
		<author>
			<persName><forename type="first">M</forename><surname>Paolucci</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Kawamura</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Payne</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Sycara</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 1st International Semantic Web Conference (ISWC)</title>
		<meeting>1st International Semantic Web Conference (ISWC)</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Larks: Dynamic matchmaking among heterogeneous software agents in cyberspace</title>
		<author>
			<persName><forename type="first">K</forename><surname>Sycara</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Klusch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Widoff</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Lu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Jounral of Autonomous Agents and Multi-Agent Systems</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="2002">2002</date>
			<publisher>Kluwer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Automated discovery, interaction and composition of semantic web services</title>
		<author>
			<persName><forename type="first">K</forename><surname>Sycara</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Paolucci</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Anolekar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Srinivasan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Web Semantics</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">1-4</biblScope>
			<date type="published" when="2004-11">November 2004</date>
			<publisher>Elsevier</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Text retrieval conference</title>
		<author>
			<persName><surname>Trec</surname></persName>
		</author>
		<ptr target="http://trec.nist.gov/data/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">C</forename><surname>Van Rijsbergen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information Retrieval</title>
		<imprint>
			<date type="published" when="1979">1979</date>
			<pubPlace>Butterworth</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Zaremski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Wing</surname></persName>
		</author>
		<title level="m">Specification matching of software components, in: 3rd ACM SIGSOFT Symposium on the Foundations of Software Engineering</title>
		<imprint>
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
