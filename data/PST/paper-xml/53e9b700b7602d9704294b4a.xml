<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Ant Colony System: A Cooperative Learning Approach to the Traveling Salesman Problem</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Marco</forename><surname>Dorigo</surname></persName>
							<email>mdorigo@ulb.ac.be</email>
						</author>
						<author>
							<persName><forename type="first">Maria</forename><surname>Luca</surname></persName>
							<email>luca@idsia.ch</email>
						</author>
						<author>
							<persName><surname>Gambardella</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Université Libre de Bruxelles</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution" key="instit1">IRIDIA</orgName>
								<orgName type="institution" key="instit2">Université Libre de Bruxelles</orgName>
								<address>
									<addrLine>CP 194/6, Avenue Franklin Roosevelt 50</addrLine>
									<postCode>1050</postCode>
									<settlement>Bruxelles</settlement>
									<country key="BE">Belgium</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="institution">IDSIA</orgName>
								<address>
									<addrLine>Corso Elvezia 36</addrLine>
									<postCode>6900</postCode>
									<settlement>Lugano</settlement>
									<country key="CH">Switzerland</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Ant Colony System: A Cooperative Learning Approach to the Traveling Salesman Problem</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">B75FE7673137315A2C7BBAF64216C9B5</idno>
					<note type="submission">Accepted for publication in the IEEE Transactions on</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T05:57+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper introduces ant colony system (ACS), a distributed algorithm that is applied to the traveling salesman problem (TSP). In ACS, a set of cooperating agents called ants cooperate to find good solutions to TSPs. Ants cooperate using an indirect form of communication mediated by pheromone they deposit on the edges of the TSP graph while building solutions. We study ACS by running experiments to understand its operation. The results show that ACS outperforms other nature-inspired algorithms such as simulated annealing and evolutionary computation, and we conclude comparing ACS-3-opt, a version of ACS augmented with a local search procedure, to some of the best performing algorithms for symmetric and asymmetric TSPs.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. Introduction</head><p>The natural metaphor on which ant algorithms are based is that of ant colonies. Real ants are capable of finding the shortest path from a food source to their nest <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b21">[22]</ref> without using visual cues <ref type="bibr" target="#b23">[24]</ref> by exploiting pheromone information. While walking, ants deposit pheromone on the ground, and follow, in probability, pheromone previously deposited by other ants. A way ants exploit pheromone to find a shortest path between two points is shown in Fig. <ref type="figure">1</ref>. Consider Fig. <ref type="figure">1A</ref>: Ants arrive at a decision point in which they have to decide whether to turn left or right. Since they have no clue about which is the best choice, they choose randomly. It can be expected that, on average, half of the ants decide to turn left and the other half to turn right. This happens both to ants moving from left to right (those whose name begins with an L) and to those moving from right to left (name begins with a R). Figs. <ref type="figure">1B</ref> and<ref type="figure">1C</ref> show what happens in the immediately following instants, supposing all ants walk at approximately the same speed. The number of dashed lines is roughly proportional to the amount of pheromone that the ants have deposited on the ground. Since the lower path is shorter than the upper one, more ants will visit it on average, and therefore pheromone accumulates faster. After a short transitory period the difference in the amount of pheromone on the two path is sufficiently large so as to influence the decision of new ants coming into the system (this is shown by Fig. <ref type="figure">1D</ref>). From now on, new ants will prefer in probability to choose the lower path, since at the decision point they perceive a greater amount of pheromone on the lower path. This in turn increases, with a positive feedback effect, the number of ants choosing the lower, and shorter, path. Very soon all ants will be using the shorter path.</p><formula xml:id="formula_0">R 2 R 1 L1 L2 ? ? R 2 R 1 L1 L2 R 4 R 3 L3 L4 R 2 R 1 L1 R 4 L5 L6 R 6 R 5 L3 L4 L2 R 3 R 2 R 1 L1 R 4 R 3 L6 L7 R 7 R 6 L3 L4 L2 L5 R 5 A B C D</formula><p>Fig. <ref type="figure">1</ref>. How real ants find a shortest path. A) Ants arrive at a decision point. B) Some ants choose the upper path and some the lower path. The choice is random. C) Since ants move at approximately constant speed, the ants which choose the lower, shorter, path reach the opposite decision point faster than those which choose the upper, longer, path. D) Pheromone accumulates at a higher rate on the shorter path. The number of dashed lines is approximately proportional to the amount of pheromone deposited by ants.</p><p>The above behavior of real ants has inspired ant system, an algorithm in which a set of artificial ants cooperate to the solution of a problem by exchanging information via pheromone deposited on graph edges. Ant system has been applied to combinatorial optimization problems such as the traveling salesman problem (TSP) <ref type="bibr" target="#b6">[7]</ref>, <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b11">[12]</ref>, and the quadratic assignment problem <ref type="bibr" target="#b31">[32]</ref>.</p><p>Ant colony system (ACS), the algorithm presented in this article, builds on the previous ant system in the direction of improving efficiency when applied to symmetric and asymmetric TSPs. The main idea is that of having a set of agents, called ants, search in parallel for good solutions to the TSP, and cooperate through pheromone-mediated indirect and global communication. Informally, each ant constructs a TSP solution in an iterative way: it adds new cities to a partial solution by exploiting both information gained from past experience and a greedy heuristic. Memory takes the form of pheromone deposited by ants on TSP edges, while heuristic information is simply given by the edge's length.</p><p>The main novel idea introduced by ant algorithms, which will be discussed in the remainder of the paper, is the synergistic use of cooperation among many relatively simple agents which communicate by distributed memory implemented as pheromone deposited on edges of a graph.</p><p>The article is organized as follows. Section 2 puts ACS in context by describing ant system, the progenitor of ACS. Section 3 introduces ACS. Section 4 is dedicated to the study of some characteristics of ACS: We study how pheromone changes at run time, estimate the optimal number of ants to be used, observe the effects of pheromone-mediated cooperation, and evaluate the role that pheromone and the greedy heuristic have in ACS performance. Section 5 provides an overview of results on a set of standard test problems and comparisons of ACS with well-known general purpose algorithms like evolutionary computation and simulated annealing. In Section 6 we add local optimization to ACS, obtaining a new algorithm called ACS-3-opt. This algorithm is compared favorably with the winner of the First International Contest on Evolutionary Optimization <ref type="bibr" target="#b4">[5]</ref> on ATSP problems, while it yields a slightly worse performance on TSP problems. Section 7 is dedicated to the discussion of the main characteristics of ACS and indicates directions for further research.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. Background</head><p>Ant system <ref type="bibr" target="#b9">[10]</ref> is the progenitor of all our research efforts with ant algorithms, and was first applied to the traveling salesman problem (TSP), which is defined in Fig. <ref type="figure" target="#fig_0">2</ref>.</p><p>Ant system utilizes a graph representation which is the same as that defined in Fig. <ref type="figure" target="#fig_0">2</ref>, augmented as follows: in addition to the cost measure δ(r,s), each edge (r,s) has also a desirability measure τ(r,s), called pheromone, which is updated at run time by artificial ants (ants for short). When ant system is applied to symmetric instances of the TSP, τ(r,s)= τ(s,r), while when it is applied to asymmetric instances it is possible that τ(r,s)≠τ(s,r).</p><p>Informally, ant system works as follows. Each ant generates a complete tour by choosing the cities according to a probabilistic state transition rule: Ants prefer to move to cities which are connected by short edges with a high amount of pheromone. Once all ants have completed their tours a global pheromone updating rule (global updating rule, for short) is applied: A fraction of the pheromone evaporates on all edges (edges that are not refreshed become less desirable), and then each ant deposits an amount of pheromone on edges which belong to its tour in proportion to how short its tour was (in other words, edges which belong to many short tours are the edges which receive the greater amount of pheromone). The process is then iterated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>TSP</head><p>Let V = { a, ... , z} be a set of cities, A = {(r,s) : r,s ∈V} be the edge set, and δ(r,s)= δ(s,r) be a cost measure associated with edge (r,s) ∈ A. The TSP is the problem of finding a minimal cost closed tour that visits each city once. In the case cities r ∈ V are given by their coordinates ( x r , y r ) and δ(r,s) is the Euclidean distance between r and s, then we have an Euclidean TSP.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ATSP</head><p>If δ(r,s) ≠ δ(s,r) for at least some (r,s) then the TSP becomes an asymmetric TSP (ATSP). The state transition rule used by ant system, called a random-proportional rule, is given by Eq. ( <ref type="formula" target="#formula_10">1</ref>), which gives the probability with which ant k in city r chooses to move to the city s.</p><formula xml:id="formula_1">p r s r s r s r u r u s J r k u J r k k ( , ) = ( , )<label>( , ) ( , ) ( , ) if ( ) otherwise ( )</label></formula><formula xml:id="formula_2">τ η τ η β β [ ]⋅[ ] [ ]⋅[ ] ∈        ∈ ∑ 0 (1)</formula><p>where τ is the pheromone, η=1/δ is the inverse of the distance δ(r,s), J k (r) is the set of cities that remain to be visited by ant k positioned on city r (to make the solution feasible), and β is a parameter which determines the relative importance of pheromone versus distance (β&gt;0).</p><p>In Eq. ( <ref type="formula" target="#formula_10">1</ref>) we multiply the pheromone on edge (r,s) by the correspon ding heuristic value η(r,s). In this way we favor the choice of edges which are shorter and which have a greater amount of pheromone.</p><p>In ant system, the global updating rule is implemented as follows. Once all ants have built their tours, pheromone is updated on all edges according to</p><formula xml:id="formula_3">τ α τ τ r s r s r s k k m , ,<label>,</label></formula><formula xml:id="formula_4">( ) ← - ( ) ⋅ ( ) + ( ) = ∑ 1 1 ∆<label>(2)</label></formula><p>where</p><formula xml:id="formula_5">∆τ k k r s L r s , ( ) = ( ) ∈      1 if tour done by ant 0 otherwise , k ,</formula><p>0&lt; α&lt;1 is a pheromone decay parameter, L k is the length of the tour performed by ant k, and m is the number of ants. Pheromone updating is intended to allocate a greater amount of pheromone to shorter tours. In a sense, this is similar to a reinforcement learning scheme <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b25">[26]</ref> in which better solutions get a higher reinforcement (as happens, for example, in genetic algorithms under proportional selection). The pheromone updating formula was meant to simulate the change in the amount of pheromone due to both the addition of new pheromone deposited by ants on the visited edges, and to pheromone evaporation.</p><p>Pheromone placed on the edges plays the role of a distributed long term memory: This memory is not stored locally within the individual ants, but is distributed on the edges of the graph. This allows an indirect form of communication called stigmergy <ref type="bibr" target="#b22">[23]</ref>, <ref type="bibr" target="#b8">[9]</ref>. The interested reader will find a full description of ant system, of its biological motivations, and computational results in <ref type="bibr" target="#b11">[12]</ref>.</p><p>Although ant system was useful for discovering good or optimal solutions for small TSPs (up to 30 cities), the time required to find such results made it unfeasible for larger problems. We devised three main changes to improve its performance which led to the definition of ACS, presented in the next section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. ACS</head><p>ACS differs from the previous ant system because of three main aspects: (i) the state transition rule provides a direct way to balance between exploration of new edges and exploitation of a priori and accumulated knowledge about the problem, (ii) the global updating rule is applied only to edges which belong to the best ant tour, and (iii) while ants construct a solution a local pheromone updating rule (local updating rule, for short) is applied.</p><p>Informally, ACS works as follows: m ants are initially positioned on n cities chosen according to some initialization rule (e.g., randomly). Each ant builds a tour (i.e., a feasible solution to the TSP) by repeatedly applying a stochastic greedy rule (the state transition rule). While constructing its tour, an ant also modifies the amount of pheromone on the visited edges by applying the local updating rule. Once all ants have terminated their tour, the amount of pheromone on edges is modified again (by applying the global updating rule). As was the case in ant system, ants are guided, in building their tours, by both heuristic information (they prefer to choose short edges), and by pheromone information: An edge with a high amount of pheromone is a very desirable choice. The pheromone updating rules are designed so that they tend to give more pheromone to edges which should be visited by ants. The ACS algorithm is reported in Fig. <ref type="figure" target="#fig_1">3</ref>. In the following we discuss the state transition rule, the global updating rule, and the local updating rule.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. ACS state transition rule</head><p>In ACS the state transition rule is as follows: an ant positioned on node r chooses the city s to move to by applying the rule given by Eq. ( <ref type="formula" target="#formula_6">3</ref>)</p><formula xml:id="formula_6">s r u r u q q u J r k = if (exploitation) otherwise (biased exploration) arg max , , ∈ ( ) ( ) [ ] ⋅ ( ) [ ] { } ≤        τ η β 0 S (<label>3</label></formula><formula xml:id="formula_7">)</formula><p>where q is a random number uniformly distributed in [0 .. 1], q 0 is a parameter (0≤q 0 ≤1), and S is a random variable selected according to the probability distribution given in Eq. (1). The state transition rule resulting from Eqs. (3) and ( <ref type="formula" target="#formula_10">1</ref>) is called pseudo-randomproportional rule. This state transition rule, as with the previous random-proportional rule, favors transitions towards nodes connected by short edges and with a large amount of pheromone. The parameter q 0 determines the relative importance of exploitation versus exploration: Every time an ant in city r has to choose a city s to move to, it samples a random number 0≤q≤1. If q≤q 0 then the best edge (according to Eq. ( <ref type="formula" target="#formula_6">3</ref>)) is chosen (exploitation), otherwise an edge is chosen according to Eq. (1) (biased exploration).  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. ACS global updating rule</head><p>In ACS only the globally best ant (i.e., the ant which constructed the shortest tour from the beginning of the trial) is allowed to deposit pheromone. This choice, together with the use of the pseudo-random-proportional rule, is intended to make the search more directed: Ants search in a neighborhood of the best tour found up to the current iteration of the algorithm. Global updating is performed after all ants have completed their tours. The pheromone level is updated by applying the global updating rule of Eq. ( <ref type="formula" target="#formula_9">4</ref>)</p><formula xml:id="formula_8">τ α τ α τ r s r s r s , ,<label>,</label></formula><formula xml:id="formula_9">( ) ← - ( ) ⋅ ( ) + ⋅ ( ) 1 ∆<label>(4)</label></formula><p>where ∆τ r s</p><formula xml:id="formula_10">L r s gb , -<label>1</label></formula><formula xml:id="formula_11">( ) = ( ) ( ) ∈      if global -best -tour 0 otherwise , ,</formula><p>0&lt; α&lt;1 is the pheromone decay parameter, and L gb is the length of the globally best tour from the beginning of the trial. As was the case in ant system, global updating is intended to provide a greater amount of pheromone to shorter tours. Eq. ( <ref type="formula" target="#formula_9">4</ref>) dictates that only those edges belonging to the globally best tour will receive reinforcement. We also tested another type of global updating rule, called iteration-best, as opposed to the above called global-best, which instead used L ib (the length of the best tour in the current iteration of the trial), in Eq. (4). Also, with iteration-best the edges which receive reinforcement are those belonging to the best tour of the current iteration. Experiments have shown that the difference between the two schemes is minimal, with a slight preference for global-best, which is therefore used in the following experiments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. ACS local updating rule</head><p>While building a solution (i.e., a tour) of the TSP, ants visit edges and change their pheromone level by applying the local updating rule of Eq. ( <ref type="formula" target="#formula_13">5</ref>)</p><formula xml:id="formula_12">τ ρ τ ρ τ r s r s r s , ,<label>,</label></formula><formula xml:id="formula_13">( ) ← - ( )⋅ ( ) + ⋅ ( ) 1 ∆ (<label>5</label></formula><formula xml:id="formula_14">)</formula><p>where 0&lt;ρ&lt;1 is a parameter. We have experimented with three values for the term ∆τ(r,s). The first choice was loosely inspired by Q-learning <ref type="bibr" target="#b39">[40]</ref>, an algorithm developed to solve reinforcement learning problems <ref type="bibr" target="#b25">[26]</ref>. Such problems are faced by an agent that must learn the best action to perform in each possible state in which it finds itself, using as the sole learning information a scalar number which represents an evaluation of the state entered after it has performed the chosen action. Q-learning is an algorithm which allows an agent to learn such an optimal policy by the recursive application of a rule similar to that in Eq. ( <ref type="formula" target="#formula_13">5</ref>), in which the term ∆τ(r,s) is set to the discounted evaluation of the next state value. Since the problem our ants have to solve is similar to a reinforcement learning problem (ants have to learn which city to move to as a function of their current location), we set <ref type="bibr" target="#b18">[19]</ref> </p><formula xml:id="formula_15">∆τ γ τ r s s z z J s k , , ( ) = ⋅ ( ) ∈ ( ) max</formula><p>, which is exactly the same formula used in Q-learning (0≤γ≤1 is a parameter). The other two choices were: (i) we set ∆τ(r,s)= τ 0 , whereτ 0 is the initial pheromone level, (ii) we set ∆τ(r,s)=0. Finally, we also ran experiments in which local-updating was not applied (i.e., the local updating rule is not used, as was the case in ant system).</p><p>Results obtained running experiments (see Table <ref type="table" target="#tab_1">I</ref>) on a set of five randomly generated 50city TSPs <ref type="bibr" target="#b12">[13]</ref>, on the Oliver30 symmetric TSP <ref type="bibr" target="#b40">[41]</ref>, and the ry48p asymmetric TSP <ref type="bibr" target="#b34">[35]</ref> essentially suggest that local-updating is definitely useful, and that the local updating rule with ∆τ (r,s)=0 yields worse performance than local-updating with ∆ τ(r,s)= τ 0 or with</p><formula xml:id="formula_16">∆τ γ τ r s s z z J s k , , ( ) = ⋅ ( ) ∈ ( ) max . ACS with ∆τ γ τ r s s z z J s k , , ( ) = ⋅ ( ) ∈ ( )</formula><p>max , which we have called Ant-Q in <ref type="bibr" target="#b10">[11]</ref> and <ref type="bibr" target="#b18">[19]</ref>, and ACS with ∆τ (r,s)= τ 0 , called simply ACS hereafter, resulted to be the two best performing algorithms, with a similar performance level. Since the ACS local updating rule requires less computation than Ant-Q, we chose to focus attention on ACS, which will be used to run the experiments presented in the following of this paper.</p><p>As will be discussed in Section 4.1, the role of ACS local updating rule is to shuffle the tours, so that the early cities in one ant's tour may be explored later in other ants' tours. In other words, the effect of local-updating is to make the desirability of edges change dynamically: every time an ant uses an edge this becomes slightly less desirable (since it loses some of its pheromone). In this way ants will make a better use of pheromone information: without local-updating all ants would search in a narrow neighborhood of the best previous tour.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. ACS parameter settings</head><p>In all experiments of the following sections the numeric parameters, except when indicated differently, are set to the following values: β=2, q 0 =0.9, α=ρ=0.1, τ 0 =( n•L nn ) -1 , where L nn is the tour length produced by the nearest neighbor heuristic 1 <ref type="bibr" target="#b35">[36]</ref> and n is the number of cities. These values were obtained by a preliminary optimization phase, in which we found that the experimental optimal values of the parameters was largely independent of the problem, except for τ 0 for which, as we said, τ 0 =( n•L nn ) -1 . The number of ants used is m =10 (this choice is explained in Section 4.2). Regarding their initial positioning, ants are placed randomly, with at most one ant in each city.</p><p>1 To be true, any very rough approximation of the optimal tour length would suffice. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. A study of some characteristics of ACS A. Pheromone behavior and its relation to performance</head><p>To try to understand which mechanism ACS uses to direct the search we study how the pheromone-closeness product τ(r,s) [ ]⋅ η(r,s) [ ] β changes at run time. Fig. <ref type="figure">4</ref> shows how the pheromone-closeness product changes with the number of steps while ants are building a solution 2 (steps refer to the inner loop in Fig. <ref type="figure" target="#fig_1">3</ref>: the abscissa goes therefore from 1 to n, where n is the number of cities).</p><p>Let us consider three families of edges (see Fig. <ref type="figure">4</ref>): (i) those belonging to the last best tour (BE, Best Edges), (ii) those which do not belong to the last best tour, but which did in one of the two preceding iterations (TE, Testable Edges), (iii) the remaining edges, that is, those that have never belonged to a best tour or have not in the last two iterations (UE, Uninteresting Edges). The average pheromone-closeness product is then computed as the average of pheromone-closeness values of all the edges within a family. The graph clearly shows that ACS favors exploitation of edges in BE (BE edges are chosen with probability q 0 =0.9) and exploration of edges in TE (recall that, since Eqs. ( <ref type="formula" target="#formula_6">3</ref>) and (1), edges with higher pheromonecloseness product have a higher probability of being explored).</p><p>An interesting aspect is that while edges are visited by ants, the application of the local updating rule, Eq. ( <ref type="formula" target="#formula_13">5</ref>), makes their pheromone diminish, making them less and less attractive, and therefore favoring the exploration of edges not yet visited. Local updating has the effect of lowering the pheromone on visited edges so that these become less desirable and therefore will be chosen with a lower probability by the other ants in the remaining steps of an iteration of the algorithm. As a consequence, ants never converge to a common path. This fact, which was observed experimentally, is a desirable property given that if ants explore different paths then there is a higher probability that one of them will find an improving solution than there is in the case that they all converge to the same tour (which would make the use of m ants pointless).</p><p>Experimental observation has shown that edges in BE, when ACS achieves a good performance, will be approximately downgraded to TE after an iteration of the algorithm (i.e., one external loop in Fig. <ref type="figure" target="#fig_1">3</ref>; see also Fig. <ref type="figure">4</ref>), and that edges in TE will soon be downgraded to UE, unless they happen to belong to a new shortest tour.</p><p>In Figs. 5a and 5b we report two typical behaviors of pheromone level when the system has a good or a bad performance respectively. . a) Pheromone-closeness behavior when the system performance is good. Best solution found after 1,000 iterations: 426, α=ρ=0.1. b) Pheromone-closeness behavior when the system performance is bad. Best solution found after 1,000 iterations: 465, α=ρ=0.9.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. The optimal number of ants</head><p>Consider Fig. <ref type="figure">6</ref> 3 . Let ϕ 2 τ 0 be the average pheromone level on edges in BE just after they are updated by the global updating rule, and ϕ 1 τ 0 the average pheromone level on edges in BE just before they are updated by the global updating rule (ϕ 1 τ 0 is also approximately the average pheromone level on edges in TE at the beginning of the inner loop of the algorithm). Under the hypothesis that the optimal values of ϕ 1 and ϕ 2 are known, an estimate of the optimal number of ants can be computed as follows. The local updating rule is a first-order linear recurrence relation of the form T T</p><formula xml:id="formula_17">z z = -+ -1 0 1 ( ) ρ τ ρ , which has closed form given by T T z z z = - - - + 0 0 0 1 1 ( ) ( ) ρ ρ τ</formula><p>τ . Knowing that just before global updating T 0 = ϕ 2 τ 0 (this corresponds to the start point of the BE curve in Fig. <ref type="figure">6</ref>), and that after all ants have built their tour and just before global updating, T z = ϕ 1 τ 0 (this corresponds to the end point of the BE curve in Fig. <ref type="figure">6</ref>), we obtain ϕ ϕ</p><formula xml:id="formula_18">1 2 1 1 1 = - -- + ( ) ( ) ρ ρ z z</formula><p>. Considering the fact that edges in BE are chosen by each ant with a probability &gt;q 0 , then a good approximation to the number z of ants that locally update edges in BE is given by z=m•q 0 . Substituting in the above formula we obtain the following estimate of the optimal number of ants</p><formula xml:id="formula_19">m = log(ϕ 1 -1) -log(ϕ 2 -1)</formula><formula xml:id="formula_20">q 0 ⋅ log(1 -ρ)</formula><p>This formula essentially shows that the optimal number of ants is a function of ϕ 1 and ϕ 2 . Unfortunately, up to now, we have not been able to identify the form of the functions ϕ 1 (n) and ϕ 2 (n), which would tell how ϕ 1 and ϕ 2 change as a function of the problem dimension. Still, experimental observation shows that ACS works well when the ratio (ϕ 1 -1)/(ϕ 2 -1)≈0.4, which gives m =10. Steps Average pheromone level Fig. <ref type="figure">6</ref>. Change in average pheromone level during an algorithm iteration for edges in the BE family. The average pheromone level on edges in BE starts at ϕ 2 τ 0 and decreases each time an ant visits an edge in BE. After one algorithm iteration, each edge in BE has been visited on average m•q 0 times, and the final value of the pheromone level is ϕ 1 τ 0 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Cooperation among ants</head><p>This section presents the results of two simple experiments which show that ACS effectively exploits pheromone-mediated cooperation. Since artificial ants cooperate by exchanging information via pheromone, to have noncooperating ants it is enough to make ants blind to pheromone. In practice this is obtained by deactivating Eqs. ( <ref type="formula" target="#formula_9">4</ref>) and ( <ref type="formula" target="#formula_13">5</ref>), and setting the initial level of pheromone to τ 0 =1 on all edges. When comparing a colony of cooperating ants with a colony of noncooperating ants, to make the comparison fair, we use CPU time to compute performance indexes so as to discount for the higher complexity, due to pheromone updating, of the cooperative approach.</p><p>In the first experiment, the distribution of first finishing times, defined as the time elapsed until the first optimal solution is found, is used to compare the cooperative and the noncooperative approaches. The algorithm is run 10,000 times, and then we report on a graph the probability distribution (density of probability) of the CPU time needed to find the optimal value (e.g., if in 100 trials the optimum is found after exactly 220 iterations, then for the value 220 of the abscissa we will have P(220) = 100/10,000). Fig. <ref type="figure">7</ref> shows that cooperation greatly improves the probability of finding quickly an optimal solution.</p><p>In the second experiment (Fig. <ref type="figure">8</ref>) the best solution found is plotted as a function of time (ms) for cooperating and noncooperating ants. The number of ants is fixed for both cases: m=4. It is interesting to note that in the cooperative case, after 300 ms, ACS always found the optimal solution, while noncooperating ants where not able to find it after 800 ms. During the first 150 ms (i.e., before the two lines in Fig. <ref type="figure">8</ref> cross) noncooperating ants outperform cooperating ants. Good values of pheromone level are still being learned and therefore the overhead due to pheromone updating is not yet compensated by the advantages which pheromone can provide in terms of directing the search towards good solutions. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. The importance of the pheromone and the heuristic function</head><p>Experimental results have shown that the heuristic function η is fundamental in making the algorithm find good solutions in a reasonable time. In fact, when β=0 ACS performance worsens significantly (see the ACS no heuristic graph in Fig. <ref type="figure">9</ref>). Fig. <ref type="figure">9</ref> also shows the behavior of ACS in an experiment in which ants neither sense nor deposit pheromone (ACS no pheromone graph). The result is that not using pheromone also deteriorates performance. This is a further confirmation of the results on the role of cooperation presented in Section 4.3.</p><p>The reason ACS without the heuristic function performs better than ACS without pheromone is that in the first case, although not helped by heuristic information, ACS is still guided by reinforcement provided by the global updating rule in the form of pheromone, while in the second case ACS reduces to a stochastic multi-greedy algorithm. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Number of ants</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. ACS: Some computational results</head><p>We report on two sets of experiments. The first set compares ACS with other heuristics. The choice of the test problems was dictated by published results found in the literature. The second set tests ACS on some larger problems. Here the comparison is performed only with respect to the optimal or the best known result. The behavior of ACS is excellent in both cases.</p><p>Most of the test problems can be found in TSPLIB: http://www.iwr.uniheidelberg.de/iwr/comopt/soft/ TSPLIB95/TSPLIB.html. When they are not available in this library we explicitly cite the reference where they can be found.</p><p>Given that during an iteration of the algorithm each ant produces a tour, in the reported results the total number of tours generated is given by the number of iterations multiplied by the number of ants. The result of each trial is given by the best tour generated by the ants. Each experiment consists of at least 15 trials.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Comparison with other heuristics</head><p>To compare ACS with other heuristics we consider two sets of TSP problems. The first set comprises five randomly generated 50-city problems, while the second set is composed of three geometric problems <ref type="foot" target="#foot_0">4</ref> of between 50 and 100 cities. It is important to test ACS on both random and geometric instances of the TSP because these two classes of problems have structural differences that can make them difficult for a particular algorithm and at the same time easy for another one.</p><p>Table <ref type="table" target="#tab_3">II</ref> reports the results on the random instances. The heuristics with which we compare ACS are simulated annealing (SA), elastic net (EN), and self organizing map (SOM). Results on SA, EN, and SOM are from <ref type="bibr" target="#b12">[13]</ref>, <ref type="bibr" target="#b33">[34]</ref>. ACS was run for 2,500 iterations using 10 ants (this amounts to approximately the same number of tour searched by the heuristics with which we compare our results). ACS results are averaged over 25 trials. The best average tour length for each problem is in boldface: ACS almost always offers the best performance. Table <ref type="table" target="#tab_3">III</ref> reports the results on the geometric instances. The heuristics with which we compare ACS in this case are a genetic algorithm (GA), evolutionary programming (EP), and simulated annealing (SA). ACS is run for 1,250 iterations using 20 ants (this amounts to approximately the same number of tours searched by the heuristics with which we compare our results). ACS results are averaged over 15 trials. In this case comparison is performed on the best results, as opposed to average results as in previous Table II (this choice was dictated by the availability of published results). The difference between integer and real tour length is that in the first case distances between cities are measured by integer numbers, while in the second case by floating point approximations of real numbers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>TABLE III</head><p>Comparison of ACS with other heuristics on geometric instances of the symmetric TSP. We report the best integer tour length, the best real tour length (in parentheses) and the number of tours required to find the best integer tour length (in square brackets). N/A means "not available." In the last column the optimal length is available only for integer tour lengths. </p><formula xml:id="formula_21">N/A (N/A) [N/A] N/A (N/A) [N/A]</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>21,282 (N/A)</head><p>Results using EP are from <ref type="bibr" target="#b14">[15]</ref>, and those using GA are from <ref type="bibr" target="#b40">[41]</ref> for Eil50, and Eil75, and from <ref type="bibr" target="#b5">[6]</ref> for KroA100. Results using SA are from <ref type="bibr" target="#b28">[29]</ref>. Eil50, Eil75 are from <ref type="bibr" target="#b13">[14]</ref> and are included in TSPLIB with an additional city as Eil51.tsp and Eil76.tsp. KroA100 is also in TSPLIB. The best result for each problem is in boldface. Again, ACS offers the best performance in nearly every case. Only for the Eil50 problem does it find a slightly worse solution using real-valued distance as compared with EP, but ACS only visits 1,830 tours, while EP used 100,000 such evaluations (although it is possible that EP found its best solution earlier in the run, this is not specified in the paper <ref type="bibr" target="#b14">[15]</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. ACS on some bigger problems</head><p>When trying to solve big TSP problems it is common practice <ref type="bibr" target="#b27">[28]</ref>, <ref type="bibr" target="#b34">[35]</ref> to use a data structure known as candidate list. A candidate list is a list of preferred cities to be visited; it is a static data structure which contains, for a given city i, the cl closest cities, ordered by increasing distances; cl is a parameter that we set to cl =15 in our experiments. We implemented therefore a version of ACS <ref type="bibr" target="#b19">[20]</ref> which incorporates a candidate list: An ant in this extended version of ACS first chooses the city to move to among those belonging to the candidate list. Only if none of the cities in the candidate list can be visited then it considers the rest of the cities. ACS with candidate list (see Table <ref type="table" target="#tab_1">IV</ref>) was able to find good results for problems up to more than 1,500 cities. The time to generate a tour grows only slightly more than linearly with the number of cities (this is much better than the quadratic growth obtained without the candidate list): On a Sun Sparc-server (50 MHz) it took approximately 0.02 sec of CPU time to generate a tour for the d198 problem, 0.05 sec for the pcb442, 0.07 sec for the att532, 0.13 sec for the rat783, and 0.48 sec for the fl1577 (the reason for the more than linear increase in time is that the number of failures, that is, the number of times an ant has to choose the next city outside of the candidate list, increases with the problem dimension).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>TABLE IV</head><p>ACS performance for some bigger geometric problems (over 15 trials). We report the integer length of the shortest tour found, the number of tours required to find it, the average integer length, the standard deviation, the optimal solution (for fl1577 we give, in square brackets, the known lower and upper bounds, given that the optimal solution is not known), and the relative error of ACS. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. ACS plus local search</head><p>In Section 5 we have shown that ACS is competitive with other nature-inspired algorithms on some relatively simple problems. On the other hand, in the past years a lot of work has been done to define ad-hoc heuristics, see <ref type="bibr" target="#b24">[25]</ref> for an overview, to solve the TSP. In general, these ad-hoc heuristics greatly outperform, on the specific problem of the TSP, general purpose algorithms approaches like evolutionary computation and simulated annealing. Heuristic approaches to the TSP can be classified as tour constructive heuristics and tour improvement heuristics (these last also called local optimization heuristics). Tour constructive heuristics (see <ref type="bibr" target="#b3">[4]</ref> for an overview) usually start selecting a random city from the set of cities and then incrementally build a feasible TSP solution by adding new cities chosen according to some heuristic rule. For example, the nearest neighbor heuristic builds a tour by adding the closest node in term of distance from the last node inserted in the path. On the other hand, tour improvement heuristics start from a given tour and attempt to reduce its length by exchanging edges chosen according to some heuristic rule until a local optimum is found (i.e., until no further improvement is possible using the heuristic rule). The most used and well-known tour improvement heuristics are 2-opt and 3-opt <ref type="bibr" target="#b29">[30]</ref>, and Lin-Kernighan <ref type="bibr" target="#b30">[31]</ref> in which respectively two, three, and a variable number of edges are exchanged. It has been experimentally shown <ref type="bibr" target="#b34">[35]</ref> that, in general, tour improvement heuristics produce better quality results than tour constructive heuristics. A general approach is to use tour constructive heuristics to generate a solution and then to apply a tour improvement heuristic to locally optimize it. It has been shown recently <ref type="bibr" target="#b24">[25]</ref> that it is more effective to alternate an improvement heuristic with mutations of the last (or of the best) solution produced, rather than iteratively executing a tour improvement heuristic starting from solutions generated randomly or by a constructive heuristic. An example of successful application of the above alternate strategy is the work by Freisleben and Merz <ref type="bibr" target="#b16">[17]</ref>, <ref type="bibr" target="#b17">[18]</ref> in which a genetic algorithm is used to generate new solutions to be locally optimized by a tour improvement heuristic.</p><p>ACS is a tour construction heuristic which, like Freisleben and Merz's genetic algorithm, after each iteration produces a set of feasible solutions which are in some sense a mutation of the previous best solution. It is therefore a reasonable guess that adding a tour improvement heuristic to ACS could make it competitive with the best algorithms.</p><p>We have therefore added a tour improvement heuristic to ACS. In order to maintain ACS ability to solve both TSP and ATSP problems we have decided to base the local optimization heuristic on a restricted 3-opt procedure <ref type="bibr" target="#b24">[25]</ref>, <ref type="bibr" target="#b26">[27]</ref> that, while inserting/removing three edges on the path, considers only 3-opt moves that do not revert the order in which the cities are visited. The resulting algorithm, called ACS-3-opt, is shown in Fig. <ref type="figure">10</ref>. In this way the same procedure can be applied to symmetric and asymmetric TSPs, avoiding unpredictable tour length changes. In addition, when a candidate edge (r ,s) to be removed is selected, the restricted 3-opt procedure restricts the search for the other two edges to those nodes p belonging to edge (p,q) such as δ(r,q)&lt;δ(r,s).</p><p>The implementation of the restricted 3-opt procedure includes some typical tricks which accelerate its use for TSP/ATSP problems. First, search for the candidate nodes during the restricted 3-opt procedure is only made inside the candidate list <ref type="bibr" target="#b24">[25]</ref>. Second, the procedure uses a data structure called don't look bit <ref type="bibr" target="#b3">[4]</ref> in which each bit is associated to a node of the tour. At the beginning of the local optimization procedure all the bits are turned off and the bit associated to node r is turned on when a search for an improving move starting from r fails. The bit associated to node r is turned off again when a move involving r is performed. Third, only in the case of symmetric TSPs, while searching for 3-opt moves starting from a node r the procedure also considers possible 2-opt moves with r as first node: the move executed is the best one among those proposed by 3-opt and those proposed by 2-opt. Last, a traditional array data structure to represent candidate lists and tours is used (see <ref type="bibr" target="#b15">[16]</ref> for more sophisticated data structures). ACS-3-opt also uses candidate lists in its constructive part; if there is no feasible node in the candidate list it chooses the closest node out of the candidate list (this is different from what happens in ACS where, in case the candidate list contains no feasible nodes, then any of the remaining feasible cities can be chosen with a probability which is given by the normalized product of pheromone and closeness). This is a reasonable choice since most of the search performed by both ACS and the local optimization procedure is made using edges belonging to the candidate lists. It is therefore pointless to direct search by using pheromone levels which are updated only very rarely.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Experimental results</head><p>The experiments on ATSP problems presented in this section have been executed on a SUN Ultra1 SPARC Station (167Mhz), while experiments on TSP problems on a SGI Challenge L server with eight 200 MHz CPU's, using only a single processor due to the sequential implementation of ACS-3-opt. For each test problem have been executed 10 trials. ACS-3opt parameters were set to the following values (except if differently indicated): m=10, β=2, q 0 =0.98, α=ρ=0.1, τ 0 =( n•L nn ) -1 , cl =20.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A s y m m e t r i c T S P p r o b l e m s</head><p>The results obtained with ACS-3-opt on ATSP problems are quite impressive. Experiments were run on the set of ATSP problems proposed in the First International Contest on Evolutionary Optimization <ref type="bibr" target="#b4">[5]</ref>, but see also http://iridia.ulb.ac.be/langerman/ICEO.html). For all the problems ACS-3-opt reached the optimal best known solution in a few seconds (see Table <ref type="table">V</ref>) in all the ten trials, except in the case of ft70, a problem considered relatively hard, where the optimum was reached 8 out of 10 times.</p><p>In Table VI results obtained by ACS-3-opt are compared with those obtained by ATSP-GA <ref type="bibr" target="#b16">[17]</ref>, the winner of the ATSP competition. ATSP-GA is based on a genetic algorithm that starts its search from a set of individuals generated using a nearest neighbor heuristic. Individuals are strings of cities which represent feasible solutions. At each step two parents x and y are selected and their edges are recombined using a procedure called DPX-ATSP. DPX-ATSP first deletes all edges in x that are not contained in y and then reconnects the segments using a greedy heuristic based on a nearest neighbor choice. The new individuals are brought to the local optimum using a 3-opt procedure, and the new population is generated after the application of a mutation operation that randomly removes and reconnects some edges in the tour.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>TABLE V</head><p>Results obtained by ACS-3-opt on ATSP problems taken from the First International Contest on Evolutionary Optimization. We report the length of the best tour found by ACS-3-opt, the CPU time used to find it, the average length of the best tour found and the average CPU time used to find it, the optimal length and the relative error of the average result with respect to the optimal solution. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>TABLE VI</head><p>Comparison between ACS-3-opt and ATSP-GA on ATSP problems taken from the First International Contest on Evolutionary Optimization. We report the average length of the best tour found, the average CPU time used to find it, and the relative error with respect to the optimal solution for both approaches. The 3-opt procedure used by ATSP-GA is very similar to our restricted 3-opt, which makes the comparison between the two approaches straightforward. ACS-3-opt outperforms ATSP-GA in terms of both closeness to the optimal solution and of CPU time used. Moreover, ATSP-GA experiments have been performed using a DEC Alpha Station (266 MHz), a machine faster than our SUN Ultra1 SPARC Station. S y m m e t r i c T S P p r o b l e m s If we now turn to symmetric TSP problems, it turns out that STSP-GA (STSP-GA experiments have been performed using a 175 MHz DEC Alpha Station), the algorithm that won the First International Contest on Evolutionary Optimization in the symmetric TSP category, outperforms ACS-3-opt (see Tables <ref type="table" target="#tab_3">VII</ref> and<ref type="table" target="#tab_9">VIII</ref>). The results used for comparisons are those published in <ref type="bibr" target="#b17">[18]</ref>, which are slightly better than those published in <ref type="bibr" target="#b16">[17]</ref>.</p><p>Our results are, on the other hand, comparable to those obtained by other algorithms considered to be very good. For example, on the lin318 problem ACS-3-opt has approximately the same performance as the "large step Markov chain" algorithm <ref type="bibr" target="#b32">[33]</ref>. This algorithm is based on a simulated annealing mechanism that uses as improvement heuristic a restricted 3-opt heuristic very similar to ours (the only difference is that they do not consider 2-opt moves) and as mutation procedure a non-sequential-4-changes called double-bridge. (The double-bridge mutation has the property that it is the smallest change (4 edges) that can not be reverted in one step by 3-opt, LK and 2-opt.)</p><p>A fair comparison of our results with the results obtained with the currently best performing algorithms for symmetric TSPs <ref type="bibr" target="#b24">[25]</ref> is difficult since they use as local search a Lin-Kernighan heuristic based on a segment-tree data structure <ref type="bibr" target="#b15">[16]</ref> that is faster and gives better results than our restricted-3-opt procedure. It will be the subject of future work to add such a procedure to ACS.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>TABLE VII</head><p>Results obtained by ACS-3-opt on TSP problems taken from the First International Contest on Evolutionary Optimization. We report the length of the best tour found by ACS-3-opt, the CPU time used to find it, the average length of the best tour found and the average CPU time used to find it, the optimal length and the relative error of the average result with respect to the optimal solution.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VII. Discussion and conclusions</head><p>An intuitive explanation of how ACS works, which emerges from the experimental results presented in the preceding sections, is as follows. Once all the ants have generated a tour, the best ant deposits (at the end of iteration t) its pheromone, defining in this way a "preferred tour" for search in the following algorithm iteration t+1. In fact, during iteration t+1 ants will see edges belonging to the best tour as highly desirable and will choose them with high probability. Still, guided exploration (see Eqs. ( <ref type="formula" target="#formula_6">3</ref>) and ( <ref type="formula" target="#formula_10">1</ref>)) together with the fact that local updating "eats" pheromone away (i.e., it diminishes the amount of pheromone on visited edges, making them less desirable for future ants) allowing for the search of new, possibly better tours in the neighborhood <ref type="foot" target="#foot_1">5</ref> of the previous best tour. So ACS can be seen as a sort of guided parallel stochastic search in the neighborhood of the best tour.</p><p>Recently there has been growing interest in the application of ant colony algorithms to difficult combinatorial problems. A first example is the work of Schoonderwoerd, Holland, Bruten and Rothkrantz <ref type="bibr" target="#b36">[37]</ref> who apply an ant colony algorithm to the load balancing problem in telecommunications networks. Their algorithm takes inspiration from the same biological metaphor as ant system, although their implementation differs in many details due to the different characteristics of the problem. Another interesting ongoing research is that of Stützle and Hoos who are studying various extensions of ant system to improve its performance: in <ref type="bibr" target="#b37">[38]</ref> they impose an upper and lower bound on the value of pheromone on edges, in <ref type="bibr" target="#b38">[39]</ref> they add local search, much in the same spirit as we did in the previous Section 6.</p><p>Besides the two works above, among the "nature-inspired" heuristics, the closest to ACS seems to be Baluja and Caruana's Population Based Incremental Learning (PBIL) <ref type="bibr" target="#b0">[1]</ref>. PBIL, which takes inspiration from genetic algorithms, maintains a vector of real numbers, the generating vector, which plays a role similar to that of the population in GAs. Starting from this vector, a population of binary strings is randomly generated: Each string in the population will have the i-th bit set to 1 with a probability which is a function of the i-th value in the generating vector (in practice, values in the generating vector are normalized to the interval [0, 1] so that they can directly represent the probabilities). Once a population of solutions is created, the generated solutions are evaluated and this evaluation is used to increase (or decrease) the probabilities in the generating vector so that good (bad) solutions in the future generations will be produced with higher (lower) probability. When applied to TSP, PBIL uses the following encoding: a solution is a string of size nlog 2 n bits, where n is the number of cities; each city is assigned a string of length log 2 n which is interpreted as an integer. Cities are then ordered by increasing integer values; in case of ties the leftmost city in the string comes first in the tour. In ACS, the pheromone matrix plays a role similar to Baluja's generating vector, and pheromone updating has the same goal as updating the probabilities in the generating vector. Still, the two approaches are very different since in ACS the pheromone matrix changes while ants build their solutions, while in PBIL the probability vector is modified only after a population of solutions has been generated. Moreover, ACS uses heuristic to direct search, while PBIL does not.</p><p>There are a number of ways in which the ant colony approach can be improved and/or changed. A first possibility regards the number of ants which should contribute to the global updating rule. In ant system all the ants deposited their pheromone, while in ACS only the best one does: obviously there are intermediate possibilities. Baluja and Caruana <ref type="bibr" target="#b0">[1]</ref> have shown that the use of the two best individuals can help PBIL to obtain better results, since the probability of being trapped in a local minimum becomes smaller. Another change to ACS could be, again taking inspiration from <ref type="bibr" target="#b0">[1]</ref>, allowing ants which produce very bad tours to subtract pheromone.</p><p>A second possibility is to move from the current parallel local updating of pheromone to a sequential one. In ACS all ants apply the local updating rule in parallel, while they are building their tours. We could imagine a modified ACS in which ants build tours sequentially: the first ant starts, builds its tour and, as a side effect, changes the pheromone on visited edges. Then the second ant starts, and so on until the last of the m ants has built its tour. At this point the global updating rule is applied. This scheme will determine a different search regime, in which the preferred tour will tend to remain the same for all the ants (as opposed to the situation in ACS, in which local updating shuffles the tours). Nevertheless, search will be diversified since the first ants in the sequence will search in a narrower neighborhood of the preferred tour than later ones (in fact, pheromone on the preferred tour decreases as more ants eat it away, making the relative desirability of edges of the preferred tour decrease). The role of local updating in this case would be similar to that of the temperature in simulated annealing, with the main difference that here the temperature changes during each algorithm iteration.</p><p>Last, it would be interesting to add to ACS a more effective local optimizer than that used in Section 6. A possibility we will investigate in the near future is the use of the Lin-Kernighan heuristic.</p><p>Another interesting subject of ongoing research is to establish the class of problems that can be attacked by ACS. Our intuition is that ant colony algorithms can be applied to combinatorial optimization problems by defining an appropriate graph representation of the problem considered, and a heuristic that guides the construction of feasible solutions. Then, artificial ants much like those used in the TSP application presented in this paper can be used to search for good solutions of the problem under consideration. The above intuition is supported by encouraging, although preliminary, results obtained with ant system on the quadratic assignment problem <ref type="bibr" target="#b11">[12]</ref>, <ref type="bibr" target="#b31">[32]</ref>.</p><p>In conclusion, in this paper we have shown that ACS is an interesting novel approach to parallel stochastic optimization of the TSP. ACS has been shown to compare favorably with previous attempts to apply other heuristic algorithms like genetic algorithms, evolutionary programming, and simulated annealing. Nevertheless, competition on the TSP is very tough, and a combination of a constructive method which generates good starting solution with local search which takes these solutions to a local optimum seems to be the best strategy <ref type="bibr" target="#b24">[25]</ref>. We have shown that ACS is also a very good constructive heuristic to provide such starting solutions for local optimizers.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. The traveling salesman problem.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. The ACS algorithm.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 4. Families of edges classified according to different behavior with respect to the pheromone-closeness product. The average level of the pheromone-closeness product changes in each family during one iteration of the algorithm (i.e., during n steps).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>of the last best tour UE: uninteresting edges</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 7 .Fig. 8 .</head><label>78</label><figDesc>Fig.7. Cooperation changes the probability distribution of first finishing times: cooperating ants have a higher probability to find quickly an optimal solution. Test problem: CCAO<ref type="bibr" target="#b20">[21]</ref>. The number of ants was set to m=4.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Initialize</head><label></label><figDesc>Fig. 10. The ACS-3-opt algorithm.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Initialize Loop /* at this level each loop is called an iteration */ Each ant is positioned on a starting node Loop /* at this level each loop is called a step */</head><label></label><figDesc></figDesc><table><row><cell>Each ant applies a state transition rule to incrementally build a</cell></row><row><cell>solution</cell></row><row><cell>and a local pheromone updating rule</cell></row><row><cell>Until all ants have built a complete solution</cell></row><row><cell>A global pheromone updating rule is applied</cell></row><row><cell>Until End_condition</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>TABLE I A</head><label>I</label><figDesc>comparison of local updating rules. 50-city problems and Oliver30 were stopped after 2,500 iterations, while ry48p was halted after 10,000 iterations. Averages are over 25 trials. Results in bold are the best in the Table.</figDesc><table><row><cell></cell><cell></cell><cell>ACS</cell><cell></cell><cell>Ant-Q</cell><cell></cell><cell cols="2">ACS with ∆τ(r,s)=0</cell><cell cols="2">ACS without local-updating</cell></row><row><cell></cell><cell cols="2">average std</cell><cell cols="2">best average std</cell><cell>best</cell><cell>average std</cell><cell cols="2">best average std</cell><cell>best</cell></row><row><cell></cell><cell></cell><cell>dev</cell><cell></cell><cell>dev</cell><cell></cell><cell>dev</cell><cell></cell><cell>dev</cell></row><row><cell>City Set 1</cell><cell>5.88</cell><cell cols="2">0.05 5.84</cell><cell>5.88 0.05</cell><cell>5.84</cell><cell>5.97 0.09</cell><cell>5.85</cell><cell>5.96 0.09</cell><cell>5.84</cell></row><row><cell>City Set 2</cell><cell>6.05</cell><cell cols="2">0.03 5.99</cell><cell>6.07 0.07</cell><cell>5.99</cell><cell>6.13 0.08</cell><cell>6.05</cell><cell>6.15 0.09</cell><cell>6.05</cell></row><row><cell>City Set 3</cell><cell>5.58</cell><cell cols="2">0.01 5.57</cell><cell>5.59 0.05</cell><cell>5.57</cell><cell>5.72 0.12</cell><cell>5.57</cell><cell>5.68 0.14</cell><cell>5.57</cell></row><row><cell>City Set 4</cell><cell>5.74</cell><cell cols="2">0.03 5.70</cell><cell>5.75 0.04</cell><cell>5.70</cell><cell>5.83 0.12</cell><cell>5.70</cell><cell>5.79 0.05</cell><cell>5.71</cell></row><row><cell>City Set 5</cell><cell>6.18</cell><cell cols="2">0.01 6.17</cell><cell>6.18 0.01</cell><cell>6.17</cell><cell>6.29 0.11</cell><cell>6.17</cell><cell>6.27 0.09</cell><cell>6.17</cell></row><row><cell>Oliver30</cell><cell cols="3">424.74 2.83 423.74</cell><cell cols="6">424.70 2.00 423.74 427.52 5.21 423.74 427.31 3.63 423.91</cell></row><row><cell>ry48p</cell><cell cols="9">14,625 142 14,422 14,766 240 14,422 15,196 233 14,734 15,308 241 14,796</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>Fig.9. Comparison between ACS standard, ACS with no heuristic (i.e., we set β=0), and ACS in which ants neither sense nor deposit pheromone. Problem: Oliver30. Averaged over 30 trials, 10,000/m iterations per trial.</figDesc><table><row><cell></cell><cell>460</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>ACS standard</cell></row><row><cell>Average length of the best tour</cell><cell>430 435 440 445 455 450</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>ACS no heuristic ACS no pheromone</cell></row><row><cell></cell><cell>425</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>420</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>1</cell><cell>2</cell><cell>4</cell><cell>6</cell><cell>8</cell><cell>10 12 14 16 18 20 22 24 26 28 30</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>TABLE II Comparison</head><label>II</label><figDesc>of ACS with other heuristics on random instances of the symmetric TSP. Comparisons on average tour length obtained on five 50-city problems.</figDesc><table><row><cell>Problem name</cell><cell>ACS</cell><cell>SA</cell><cell>EN</cell><cell>SOM</cell></row><row><cell></cell><cell>(average)</cell><cell>(average)</cell><cell>(average)</cell><cell>(average)</cell></row><row><cell>City set 1</cell><cell>5.88</cell><cell>5.88</cell><cell>5.98</cell><cell>6.06</cell></row><row><cell>City set 2</cell><cell>6.05</cell><cell>6.01</cell><cell>6.03</cell><cell>6.25</cell></row><row><cell>City set 3</cell><cell>5.58</cell><cell>5.65</cell><cell>5.70</cell><cell>5.83</cell></row><row><cell>City set 4</cell><cell>5.74</cell><cell>5.81</cell><cell>5.86</cell><cell>5.87</cell></row><row><cell>City set 5</cell><cell>6.18</cell><cell>6.33</cell><cell>6.49</cell><cell>6.70</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9"><head>TABLE VIII Comparison</head><label>VIII</label><figDesc>between ACS-3-opt and STSP-GA on TSP problems taken from the First International Contest on Evolutionary Optimization. We report the average length of the best tour found, the average CPU time used to find it, and the relative error with respect to the optimal solution for both approaches.</figDesc><table><row><cell>Problem name</cell><cell>ACS-3-opt</cell><cell>ACS-3-opt</cell><cell>ACS-3-opt</cell><cell>STSP-GA</cell><cell>STSP-GA</cell><cell>STSP-GA</cell></row><row><cell></cell><cell>average</cell><cell>average</cell><cell>% error</cell><cell>average</cell><cell>average</cell><cell>% error</cell></row><row><cell></cell><cell>(length)</cell><cell>(sec)</cell><cell></cell><cell>(length)</cell><cell>(sec)</cell><cell></cell></row><row><cell>d198</cell><cell>15,781.7</cell><cell>238</cell><cell>0.01 %</cell><cell>15,780</cell><cell>253</cell><cell>0.00 %</cell></row><row><cell>(198-city problem)</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>lin318</cell><cell>42,029</cell><cell>537</cell><cell>0.00 %</cell><cell>42,029</cell><cell>2,054</cell><cell>0.00 %</cell></row><row><cell>(318-city problem)</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>att532</cell><cell>27,718.2</cell><cell>810</cell><cell>0.11 %</cell><cell>27,693.7</cell><cell>11,780</cell><cell>0.03 %</cell></row><row><cell>(532-city problem)</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>rat783</cell><cell>8,837.9</cell><cell>1,280</cell><cell>0.36 %</cell><cell>8,807.3</cell><cell>21,210</cell><cell>0.01 %</cell></row><row><cell>(783-city problem)</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_0"><p>Geometric problems are problems taken from the real world (for example, they are generated choosing real cities and real distances).</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_1"><p>The form of the neighborhood is given by the previous history of the system, that is, by pheromone accumulated on edges.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>Marco Dorigo is a Research Associate with the FNRS. Luca Gambardella is Research Director at IDSIA. This research has been funded by the Swiss National Science Fund, contract 21-45653.95 titled "Cooperation and learning for combinatorial optimization." We wish to thank Nick Bradshaw, Gianni Di Caro, David Fogel, and five anonymous referees for their precious comments on a previous version of this article.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Appendix A: The ACS algorithm </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Removing the genetics from the standard genetic algorithm</title>
		<author>
			<persName><forename type="first">S</forename><surname>Baluja</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Caruana</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Twelfth International Conference on Machine Learning</title>
		<editor>
			<persName><forename type="first">A</forename><surname>Prieditis</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">S</forename><surname>Russell</surname></persName>
		</editor>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="38" to="46" />
		</imprint>
	</monogr>
	<note>Proceedings of ML-95</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Associative search network: a reinforcement learning associative memory</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">G</forename><surname>Barto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">S</forename><surname>Sutton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">S</forename><surname>Brower</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Biological Cybernetics</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="page" from="201" to="211" />
			<date type="published" when="1981">1981</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Trails and U-turns in the selection of the shortest path by the ant Lasius Niger</title>
		<author>
			<persName><forename type="first">R</forename><surname>Beckers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">L</forename><surname>Deneubourg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Goss</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Theoretical Biology</title>
		<imprint>
			<biblScope unit="volume">159</biblScope>
			<biblScope unit="page" from="397" to="415" />
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Fast algorithms for geometric traveling salesman problem</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">L</forename><surname>Bentley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ORSA Journal on Computing</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="387" to="411" />
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Results of the first international contest on evolutionary optimisation (1st ICEO)</title>
		<author>
			<persName><forename type="first">H</forename><surname>Bersini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dorigo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Langerman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Seront</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">M</forename><surname>Gambardella</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Conference on Evolutionary Computation, IEEE-EC 96</title>
		<meeting>IEEE International Conference on Evolutionary Computation, IEEE-EC 96</meeting>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="1996">1996</date>
			<biblScope unit="page" from="611" to="615" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Hybridization of genetic algorithms</title>
		<author>
			<persName><forename type="first">H</forename><surname>Bersini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Oury</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dorigo</surname></persName>
		</author>
		<idno>IRIDIA/95-22</idno>
		<imprint>
			<date type="published" when="1995">1995</date>
			<pubPlace>Belgium</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Université Libre de Bruxelles</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Tech. Rep. No.</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Distributed optimization by ant colonies</title>
		<author>
			<persName><forename type="first">A</forename><surname>Colorni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dorigo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Maniezzo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ECAL91 -European Conference on Artificial Life</title>
		<editor>
			<persName><forename type="first">F</forename><surname>Varela</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">P</forename><surname>Bourgine</surname></persName>
		</editor>
		<meeting>ECAL91 -European Conference on Artificial Life<address><addrLine>Paris, France</addrLine></address></meeting>
		<imprint>
			<publisher>Elsevier Publishing</publisher>
			<date type="published" when="1991">1991</date>
			<biblScope unit="page" from="134" to="142" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">An investigation of some properties of an ant algorithm</title>
		<author>
			<persName><forename type="first">A</forename><surname>Colorni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dorigo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Maniezzo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Parallel Problem Solving from Nature Conference (PPSN 92)</title>
		<editor>
			<persName><forename type="first">R</forename><surname>Männer</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">B</forename><surname>Manderick</surname></persName>
		</editor>
		<meeting>the Parallel Problem Solving from Nature Conference (PPSN 92)</meeting>
		<imprint>
			<publisher>Elsevier Publishing</publisher>
			<date type="published" when="1992">1992</date>
			<biblScope unit="page" from="509" to="520" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Application de l&apos;ordre par fluctuations à la description de certaines étapes de la construction du nid chez les termites</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">L</forename><surname>Deneubourg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Insect Sociaux</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="117" to="130" />
			<date type="published" when="1977">1977</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><surname>Dorigo</surname></persName>
		</author>
		<title level="m">Optimization, learning and natural algorithms</title>
		<meeting><address><addrLine>Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1992">1992</date>
		</imprint>
		<respStmt>
			<orgName>Politecnico di Milano</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D.Thesis</note>
	<note>In Italian.</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A study of some properties of Ant-Q</title>
		<author>
			<persName><forename type="first">M</forename><surname>Dorigo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">M</forename><surname>Gambardella</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of PPSN IV-Fourth International Conference on Parallel Problem Solving From Nature</title>
		<editor>
			<persName><forename type="first">M</forename><surname>Voigt</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">W</forename><surname>Ebeling</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">I</forename><surname>Rechenberg</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">H.-S</forename><surname>Schwefel</surname></persName>
		</editor>
		<meeting>PPSN IV-Fourth International Conference on Parallel Problem Solving From Nature<address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1996">1996</date>
			<biblScope unit="page" from="656" to="665" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">The ant system: optimization by a colony of cooperating agents</title>
		<author>
			<persName><forename type="first">M</forename><surname>Dorigo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Maniezzo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Colorni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Systems, Man, and Cybernetics-Part B</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="29" to="41" />
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">An analogue approach to the travelling salesman problem using an elastic net method</title>
		<author>
			<persName><forename type="first">R</forename><surname>Durbin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Willshaw</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">326</biblScope>
			<biblScope unit="page" from="689" to="691" />
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Distribution management: mathematical modeling and practical analysis</title>
		<author>
			<persName><forename type="first">S</forename><surname>Eilon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">D T</forename><surname>Watson-Gandy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Christofides</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Operational Research Quarterly</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="37" to="53" />
			<date type="published" when="1969">1969</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Applying evolutionary programming to selected traveling salesman problems</title>
		<author>
			<persName><forename type="first">D</forename><surname>Fogel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Cybernetics and Systems: An International Journal</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="27" to="36" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Data structures for traveling salesmen</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">L</forename><surname>Fredman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">A</forename><surname>Mcgeoch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Ostheimer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Algorithms</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="432" to="479" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Genetic local search algorithm for solving symmetric and asymmetric traveling salesman problems</title>
		<author>
			<persName><forename type="first">B</forename><surname>Freisleben</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Merz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Conference on Evolutionary Computation, IEEE-EC 96</title>
		<meeting>IEEE International Conference on Evolutionary Computation, IEEE-EC 96</meeting>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="1996">1996</date>
			<biblScope unit="page" from="616" to="621" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">New genetic local search operators for the traveling salesman problem</title>
		<author>
			<persName><forename type="first">B</forename><surname>Freisleben</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Merz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of PPSN IV-Fourth International Conference on Parallel Problem Solving From Nature</title>
		<editor>
			<persName><forename type="first">M</forename><surname>Voigt</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">W</forename><surname>Ebeling</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">I</forename><surname>Rechenberg</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">H.-S</forename><surname>Schwefel</surname></persName>
		</editor>
		<meeting>PPSN IV-Fourth International Conference on Parallel Problem Solving From Nature<address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1996">1996</date>
			<biblScope unit="page" from="890" to="899" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Ant-Q: a reinforcement learning approach to the traveling salesman problem</title>
		<author>
			<persName><forename type="first">L</forename><surname>Gambardella</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dorigo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Twelfth International Conference on Machine Learning</title>
		<editor>
			<persName><forename type="first">A</forename><surname>Prieditis</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">S</forename><surname>Russell</surname></persName>
		</editor>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="252" to="260" />
		</imprint>
	</monogr>
	<note>Proceedings of ML-95</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Solving symmetric and asymmetric TSPs by ant colonies</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">M</forename><surname>Gambardella</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dorigo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE International Conference on Evolutionary Computation, IEEE-EC 96</title>
		<meeting>IEEE International Conference on Evolutionary Computation, IEEE-EC 96</meeting>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="1996">1996</date>
			<biblScope unit="page" from="622" to="627" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Empiric analysis of heuristics</title>
		<author>
			<persName><forename type="first">B</forename><surname>Golden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Stewart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The traveling salesman problem</title>
		<editor>
			<persName><forename type="first">E</forename><forename type="middle">L</forename><surname>Lawler</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><forename type="middle">K</forename><surname>Lenstra</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">A</forename><forename type="middle">H G</forename><surname>Rinnooy-Kan</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">D</forename><forename type="middle">B</forename><surname>Shmoys</surname></persName>
		</editor>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Wiley and Sons</publisher>
			<date type="published" when="1985">1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Self-organized shortcuts in the argentine ant</title>
		<author>
			<persName><forename type="first">S</forename><surname>Goss</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Aron</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">L</forename><surname>Deneubourg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Pasteels</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Naturwissenschaften</title>
		<imprint>
			<biblScope unit="volume">76</biblScope>
			<biblScope unit="page" from="579" to="581" />
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">La reconstruction du nid et les coordinations inter-individuelles chez Bellicositermes natalensis et Cubitermes sp. La théorie de la stigmergie: Essai d&apos;interprétation des termites constructeurs</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">P</forename><surname>Grassé</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Insect Sociaux</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="41" to="83" />
			<date type="published" when="1959">1959</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">The ants</title>
		<author>
			<persName><forename type="first">B</forename><surname>Hölldobler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">O</forename><surname>Wilson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990">1990</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>Berlin</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">The travelling salesman problem: a case study in local optimization</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">A</forename><surname>Mcgeoch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Local Search in Combinatorial Optimization</title>
		<editor>
			<persName><forename type="first">E</forename><forename type="middle">H L</forename><surname>Aarts</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><forename type="middle">K</forename><surname>Lenstra</surname></persName>
		</editor>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Wiley and Sons</publisher>
		</imprint>
	</monogr>
	<note>press</note>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Reinforcement learning: a survey</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">P</forename><surname>Kaelbling</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">M</forename><surname>Littman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">W</forename><surname>Moore</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Artificial Intelligence Research</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="237" to="285" />
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Local search for the asymmetric traveling salesman problem</title>
		<author>
			<persName><forename type="first">P-C</forename><surname>Kanellakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">H</forename><surname>Papadimitriou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Operations Research</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="1087" to="1099" />
			<date type="published" when="1980">1980</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">The traveling salesman problem</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">L</forename><surname>Lawler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">K</forename><surname>Lenstra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">H G</forename><surname>Rinnooy-Kan</surname></persName>
		</author>
		<editor>D. B. Shmoys</editor>
		<imprint>
			<date type="published" when="1985">1985</date>
			<publisher>Wiley and Sons</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Applying the genetic approach to simulated annealing in solving some NP-Hard problems</title>
		<author>
			<persName><forename type="first">F.-T</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C.-Y</forename><surname>Kao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C.-C</forename><surname>Hsu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Systems, Man, and Cybernetics</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="1752" to="1767" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Computer solutions of the traveling salesman problem</title>
		<author>
			<persName><forename type="first">S</forename><surname>Lin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bell Systems Journal</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="page" from="2245" to="2269" />
			<date type="published" when="1965">1965</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">An effective heuristic algorithm for the traveling salesman problem</title>
		<author>
			<persName><forename type="first">S</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">W</forename><surname>Kernighan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Operations Research</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="498" to="516" />
			<date type="published" when="1973">1973</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">The ant system applied to the quadratic assignment problem</title>
		<author>
			<persName><forename type="first">V</forename><surname>Maniezzo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Colorni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dorigo</surname></persName>
		</author>
		<idno>IRIDIA/94-28</idno>
		<imprint>
			<date type="published" when="1994">1994</date>
			<pubPlace>Belgium</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Université Libre de Bruxelles</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Tech. Rep.</note>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Large-step Markov chains for the TSP incorporating local search heuristics</title>
		<author>
			<persName><forename type="first">O</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">W</forename><surname>Otto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">W</forename><surname>Felten</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Operations Research Letters</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="219" to="224" />
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">The traveling salesman problem: a neural network perspective</title>
		<author>
			<persName><forename type="first">J.-Y</forename><surname>Potvin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ORSA Journal of Computing</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="328" to="347" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">The traveling salesman: computational solutions for TSP applications</title>
		<author>
			<persName><forename type="first">G</forename><surname>Reinelt</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994">1994</date>
			<publisher>Springer-Verlag</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">An analysis of several heuristics for the traveling salesman problem</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Rosenkrantz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">E</forename><surname>Stearns</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">M</forename><surname>Lewis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal on Computing</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="563" to="581" />
			<date type="published" when="1977">1977</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Ant-based load balancing in telecommunications networks</title>
		<author>
			<persName><forename type="first">R</forename><surname>Schoonderwoerd</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Holland</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Bruten</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Rothkrantz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Adaptive Behavior</title>
		<imprint/>
	</monogr>
	<note>in press</note>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Improvements on the ant system, introducing the MAX-MIN ant system</title>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Hoosa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ICANNGA97 -Third International Conference on Artificial Neural Networks and Genetic Algorithms</title>
		<meeting>ICANNGA97 -Third International Conference on Artificial Neural Networks and Genetic Algorithms<address><addrLine>Norwich, UK.</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1997">1997</date>
		</imprint>
		<respStmt>
			<orgName>University of East Anglia</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">The ant system and local search for the traveling salesman problem</title>
		<author>
			<persName><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Hoos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ICEC&apos;97 -1997 IEEE 4th International Conference on Evolutionary Computation</title>
		<meeting>ICEC&apos;97 -1997 IEEE 4th International Conference on Evolutionary Computation</meeting>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">J C H</forename><surname>Watkins</surname></persName>
		</author>
		<title level="m">Learning with delayed rewards</title>
		<imprint>
			<date type="published" when="1989">1989</date>
		</imprint>
		<respStmt>
			<orgName>Psychology Department, University of Cambridge, England</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Ph.D. dissertation</note>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Scheduling problems and travelling salesman: the genetic edge recombination operator</title>
		<author>
			<persName><forename type="first">D</forename><surname>Whitley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Starkweather</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Fuquay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Third International Conference on Genetic Algorithms</title>
		<meeting>the Third International Conference on Genetic Algorithms</meeting>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1989">1989</date>
			<biblScope unit="page" from="133" to="140" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
