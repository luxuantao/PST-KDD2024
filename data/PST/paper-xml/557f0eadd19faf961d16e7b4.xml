<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Timing Analysis of Cyclic Combinational Circuits *</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Marc</forename><forename type="middle">D</forename><surname>Riedel</surname></persName>
							<email>riedel@paradise.caltech.edu</email>
							<affiliation key="aff0">
								<orgName type="department">California Institute of Technology Mail Code</orgName>
								<address>
									<postCode>136-93, 91125</postCode>
									<settlement>Pasadena</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Jehoshua</forename><surname>Bruck</surname></persName>
							<email>bruck@paradise.caltech.edu</email>
							<affiliation key="aff0">
								<orgName type="department">California Institute of Technology Mail Code</orgName>
								<address>
									<postCode>136-93, 91125</postCode>
									<settlement>Pasadena</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Timing Analysis of Cyclic Combinational Circuits *</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">62FB6AE7320AF3DC0064D2DAF289B6DA</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T06:46+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The accepted wisdom is that combinational circuits must have acyclic (i.e., loop-free or feed-forward) topologies. And yet simple examples suggest that this need not be so. In previous work, we advocated the design of cyclic combinational circuits (i.e., circuits with loops or feedback paths). We proposed a methodology for analyzing and synthesizing such circuits, with an emphasis on the optimization of area.</p><p>In this paper, we extend our methodology into the temporal realm. We characterize the true delay of cyclic circuits through symbolic event propagation in the floating mode of operation, according to the up-bounded inertial delay model. We present analysis results for circuits optimized with our program CYCLIFY. Some benchmark circuits were optimized significantly, with simultaneous improvements of up to 10% in the area and 25% in the delay.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. Introduction</head><p>A collection of logic gates forms a combinational circuit if the outputs can be described as boolean functions of the current input values only. A common misconception is that combinational circuits must have acyclic topologies; that is to say, they must be designed without any loops or feedback paths. In fact, the idea that "combinational" and "acyclic" are synonymous terms is so thoroughly ingrained that many textbooks provide the latter as a definition of the former.</p><p>And yet, circuits with cyclic topologies can be combinational. Examples are shown in Figures <ref type="figure">1</ref> and<ref type="figure">5</ref>. How can we characterize the temporal behavior of such circuits?</p><p>In the conventional view, timing analysis is predicated on a topological ordering. The computation of arrival times proceeds from the gates at the top of the ordering -those connected only to primary inputsdown to those at the bottom -those producing the primary outputs.</p><p>With a cyclic circuit, where do we begin?</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example 1</head><p>The circuit in Figure <ref type="figure">1</ref> consists of six AND and OR gates, with two primary outputs, f 1 and f 2 , and five primary inputs a, b, c, d and x (note that the input x is repeated). Since the gates in this example are connected in a cycle, we cannot establish an ordering a priori. And yet, consider what happens when we apply specific input values. (Assume that the gates each have a delay bound of 1 time unit.)</p><p>• If x = 0, then gate g 1 produces a value of 0 after one time unit, since 0 is a controlling value for an AND gate. In this case, the gates may be ordered</p><formula xml:id="formula_0">g 1 → g 2 → g 3 → g 4 → g 5 → g 6 .</formula><p>Outputs arrive at f 1 and f 2 after at most 3 and at most 6 time units, respectively.</p><p>• If x = 1, then gate g 4 produces a value of 1 after one time unit, since 1 is a controlling value for an OR gate. In this case, the gates may be ordered g 4 → g 5 → g 6 → g 1 → g 2 → g 3 .</p><p>Outputs arrive at f 1 and f 2 after at most 6 and at most 3 time units, respectively.</p><p>In both cases the outputs may arrive earlier, depending on the values of a, b, c and d.</p><p>We conclude that the circuit is combinationalx must assume one of these two values -and that the maximum delay is 6 time units. It may be shown that the circuit implements the functions<ref type="foot" target="#foot_0">1</ref> </p><formula xml:id="formula_1">f 1 = b(a + x(d + c)), f 2 = d + c(x + b a).</formula><p>Note that both functions depend on all 5 variables. It may be shown that if we implement these functions with an acyclic circuit, at least 8 fan-in two gates are required.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Related Work</head><p>In an earlier era, theoreticians commented on the possibility of having cycles in combinational logic, and conjectured that this might be a useful property <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b6">[7]</ref>, <ref type="bibr" target="#b18">[19]</ref>. Both McCaw and Rivest presented examples of cyclic circuits with provably fewer gates than is possible with equivalent acyclic circuits <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b15">[16]</ref>. (We have extended and generalized these theoretical results. Most notably, we have constructed a family of circuits with cyclic topologies having half as many gates as is possible with acyclic topologies <ref type="bibr" target="#b14">[15]</ref>).</p><p>In a later era, practitioners observed that cycles sometimes appear in combinational circuits synthesized from high-level descriptions. Stok noted that cycles are occasionally introduced during resourcesharing optimizations at the level of functional units <ref type="bibr" target="#b19">[20]</ref>. However, most synthesis and verification tools balk when given combinational logic with cycles. The accepted strategy has been to simply disallow cycles in the high-level phases.</p><p>Motivated by Stok's observation, Malik discussed analysis techniques for cyclic circuits <ref type="bibr" target="#b9">[10]</ref>. He formu-lated a symbolic analysis algorithm based on ternaryvalued simulation. Shiple refined and formalized Malik's results, and extended the concepts to combinational logic embedded in sequential circuits <ref type="bibr" target="#b17">[18]</ref>.</p><p>Malik discussed timing analysis of cyclic circuits, but concluded that the problem of computing the true delay of sensitizable paths is unmanageable. Instead, he proposed a topological approach, beginning with a transformation from a cyclic specification to an equivalent acyclic one. Recently, Edwards presented work in a similar vein <ref type="bibr" target="#b4">[5]</ref>. However, as Malik and Edwards admitted, unraveling cyclic circuits this way is an inherently complex problem. It does not scale well, and is particularly ill-suited for circuits with deeplynested cyclic topologies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Contributions</head><p>In previous work, we advocated the design of combinational circuits with cycles, and demonstrated that such an approach permits significant optimizations of area. We discussed analysis techniques for validating cyclic circuits <ref type="bibr" target="#b12">[13]</ref>, and suggested synthesis strategies <ref type="bibr" target="#b13">[14]</ref>. In this work, we extend our methodology into the temporal realm.</p><p>We characterize the timing of circuits according to a standard model, described in Section I-C: the gates operate in the so-called floating mode, with upbounded inertial delays <ref type="bibr" target="#b3">[4]</ref>.</p><p>Instead of a path-based approach, we compute arrival times through event propagation <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b20">[21]</ref>. Of course, we do not apply this process exhaustively for all possible input assignments. Rather we perform the computation symbolically, with decision diagrams <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b8">[9]</ref>. In Section II, we describe the algorithm and illustrate its application on examples.</p><p>Our approach is not a radical departure from existing practice. In fact, the salient message of this paper is that well-developed techniques for timing analysis can readily be applied to cyclic circuits.</p><p>We have incorporated timing analysis into our cyclic optimization program, called CYCLIFY, built within the Berkeley SIS environment <ref type="bibr" target="#b16">[17]</ref>. Although not the primary focus of this paper, in Section III we discuss synthesis strategies targeting delay. Our previous work was limited to cyclic optimizations in the re-structuring and minimization phases of synthesis. In our current work, we extend these optimizations to the decomposition and technology mapping phases.</p><p>For the synthesis results in Section III, we applied the standard "script.delay" optimization sequence, followed by mapping to NAND2/NOR2 gates. In trials with benchmarks, we achieved simultaneous improvements of up to 10% in the area and 25% in the delay, as compared to the standard SIS optimizations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Circuit Model</head><p>The concepts discussed in this paper are not tied to any particular physical model or computing substrate. In our discussion of timing analysis, the exposition is at a symbolic level, that is to say, in terms of boolean expressions. However, we first discuss the circuit model in an explicit sense -in terms of signal values.</p><p>We work with the digital abstraction of zeros and ones. Nevertheless, our model recognizes that the underlying signals are, in fact, analog: each signal is a continuous real-valued function of time, corresponding to a voltage level. For analysis, we adopt a ternary framework, extending the set of boolean values = {0, 1} to the set of ternary values ¡ = {0, 1, ⊥}. Here ⊥ represents either an ambiguous value, e.g., a voltage value between logical 0 and logical 1, or else an uncertain value, i.e., a signal that might be 0 or 1 -but we do not know which.</p><p>The idea of three-valued logic for circuit analysis is well established. It was originally proposed for the analysis of hazards in combinational logic <ref type="bibr" target="#b21">[22]</ref>. Bryant popularized its use for verification <ref type="bibr" target="#b2">[3]</ref>, and it has been widely adopted for the analysis of asynchronous circuits <ref type="bibr" target="#b3">[4]</ref>. For a theoretical treatment, see <ref type="bibr" target="#b11">[12]</ref>. Malik and Shiple discuss the analysis of cyclic circuits in this framework <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b17">[18]</ref>.</p><p>Central to timing analysis is the concept of controlling values. In Riedel's Ph.D. dissertation, a formalism is presented for computing the controlling values of arbitrary logic functions using the so-called marginal operator <ref type="bibr" target="#b14">[15]</ref>. For simplicity, in this paper we assume that the network has been decomposed into primitive gates, namely AND/OR/NAND/NOR gates and inverters. Recall that 0 is the controlling value for an AND gate, as shown in Figure <ref type="figure">2</ref>. Similarly, 1 is the controlling value for an OR gate.</p><p>Our analysis characterizes the functional and temporal behavior of circuits according to the so-called floating-mode assumption <ref type="bibr" target="#b3">[4]</ref>: at the outset, all wires in a circuit are assumed to have unknown or possibly undefined values, and so assigned the value ⊥. Although conservative, this assumption ensures that the analysis does not infer stability in cases where ambiguous or unstable signals might persist.</p><p>Consider the circuit fragment in Figure <ref type="figure" target="#fig_1">3</ref>. One might be tempted to reason as follows: The output of</p><formula xml:id="formula_2">⊥ ¢ ¤£ ¦¥ ⊥ ⊥ ¢ §£ ¨¥ ¢ ¤£ ©¥ PSfrag replacements f 1 f 2 f 3 f 4 Fig. 2.</formula><p>An AND gate with 0, 1, and ⊥ inputs.</p><p>the AND gate g 1 is fed in complemented and uncomplemented form into the OR gate g 2 . Thus, one of the inputs to the OR gate must be 1, and so its output must be 1.</p><p>And yet, by definition, ⊥ designates an undefined value. For instance, it could indicate a voltage value exactly half way between logical 0 and logical 1. Within the floating-mode framework, we remain agnostic: the output of the OR gate is ⊥. We assume an idealized model for timing analysis: each gate is characterized by a single parameter, a bound on its delay t d . If a gate's inputs assume controlling values by time t, then the gate's output assumes a definite value between time t (i.e., immediately) and time t + t d . This is called the up-bounded inertial delay model. We assume that the wires have zero propagation delay.</p><formula xml:id="formula_3">⊥ ⊥ ⊥ ⊥ ⊥ PSfrag replacements f 1 f 2 f 3 f 4</formula><p>For the examples in this paper, we assign a delay bound of 1 time unit to each gate. (This is not the so-called unit-delay model, in which gate delays are assumed to be exactly 1; rather, it is the up-bounded inertial delay model with an upper bound of 1 for each gate.) More sophisticated models of temporal behavior could readily be incorporated into our algorithms; we neglect such details here in order to focus on the core issues.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. Analysis</head><p>Conceptually, the analysis is just an algorithmic implementation of the idea illustrated in Example 1. We apply definite values to the primary inputs, and track the propagation of signal values. Once we have established that a definite value has appeared on a gate output, this value persists for the duration of the analysis. The arrival time of a well-defined value at a gate output is determined either:</p><p>• by the arrival time of the earliest controlling input value;</p><p>• or by the arrival time of the latest non-controlling input value.</p><p>The analysis proceeds in time intervals. If the gates have fixed delay bounds, we can choose the interval length to match the shortest delay bound. In each time interval, we evaluate all the gates that received new input values in the previous interval. In this manner, we are assured that we know the earliest time that signal values becomes known. If definite boolean values never arrive at one or more of the primary outputs, then we conclude that the circuit is not combinational.</p><p>For most of the circuits encountered in practice, explicit analysis is not a viable option. With n inputs, there would be 2 n input assignments to consider. Instead, we tackle the problem with symbolic techniques, in which we manipulate sets of input assignments. <ref type="foot" target="#foot_1">2</ref> In our current implementation, we use binary decision diagrams <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b8">[9]</ref>. However, we note that the use of boolean satisfiability (SAT)-based techniques <ref type="bibr" target="#b7">[8]</ref> would probably be more computationally efficient.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 1: Symbolic Timing Analysis</head><p>Let X = (x 1 , . . . , x n ) be the primary inputs. We maintain a pair of characteristic sets for the output of each gate g i . The first</p><formula xml:id="formula_4">C (0) i (X),</formula><p>consists of the set of input assignments for which the gate evaluates to 0; the second,</p><formula xml:id="formula_5">C (1) i (X),</formula><p>the set for which it evaluates to 1. Implicitly, the complement of the union of these two sets is the set of assignments for which the gate evaluates to ⊥.</p><p>Thus, OR corresponds to the union, AND to the intersection, and NOT to the complement of sets.</p><p>At the outset, all wires are assumed to have undefined values, so the characteristic sets are empty,</p><formula xml:id="formula_6">C (0) i := C (1) i := 0.</formula><p>As the analysis proceeds, input assignments that induce gates to produce definite output values are added to these sets. Call the addition of input assignments to the set C (v) i , for some v ∈ {0, 1}, an arrival event valued v at gate g i .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Initialization</head><p>The initial arrival events occur at gates controlled by primary inputs. For instance, suppose that an AND gate g i is connected to the primary input x.</p><p>We have an initial arrival event</p><formula xml:id="formula_7">C (0) i := x.</formula><p>Similarly, suppose that an OR gate g j is connected to the primary input y. We have an initial arrival event</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C</head><p>(1) j := y. We compute such arrival events for all gates attached to the primary inputs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Propagation</head><p>In each interval, we compute new arrival events for gates based on the antecedent arrival events on their inputs.</p><p>1. Suppose that in the previous interval there was an arrival event valued v at gate g i ; that g i is a fan-in to gate g j ; and that v is a controlling input value for g j , producing an output value w. We compute</p><formula xml:id="formula_8">C (w) j := C (w) j + C (v) i .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>If C</head><p>(w) j changes as a result (i.e., C (v) i was not contained in C (w) j ), then we have a new arrival event valued w at g j .</p><p>2. Suppose that in the previous interval there was an arrival event valued v at gate g i ; that g i is a fan-in to gate g j ; and that v is a non-controlling input value for g j . Let g i 1 , . . . , g i k be all the gates that fan-in to g j , and let v i 1 , . . . , v i k be the non-controlling values for these fan-in gates. Suppose that these non-controlling inputs produce an output value w for g j . We compute</p><formula xml:id="formula_9">C (w) j := C (w) j + C (v i 1 ) i 1 • • • C (v i k ) i k . Again, if C (w) j</formula><p>changes as a result, then we have a new arrival event valued w at g j .</p><p>To illustrate these propagation conditions, suppose that we have an AND gate g 3 with fan-in gates g 1 and g 2 , as shown in Figure <ref type="figure" target="#fig_2">4</ref>. Suppose that the characteristic sets are</p><formula xml:id="formula_10">} , { ) 1 ( 1 ) 0 ( 1 C C } , { ) 1 ( 3 ) 0 ( 3 C C } , { ) 1 ( 2 ) 0 ( 2 C C ¡ ¢ replacements f 1 f 2 f 3 f 4</formula><formula xml:id="formula_11">C (0) 1 = x 1 , C<label>(1)</label></formula><formula xml:id="formula_12">1 = x 2 , C (0) 2 = x 3 , C<label>(1)</label></formula><formula xml:id="formula_13">2 = x 4 , C (0) 3 = x 1 + x 3 , C<label>(1) 3</label></formula><formula xml:id="formula_14">= x 2 x 4 .</formula><p>Now suppose that there is an arrival event valued 0 at g 1 setting</p><formula xml:id="formula_15">C (0) 1 = x 1 + x 5 .</formula><p>In the next interval, we compute</p><formula xml:id="formula_16">C (0) 3 := C (0) 3 + C (0) 1 = x 1 + x 3 + x 5 .</formula><p>Now suppose that there is an arrival event valued 1 at g 1 setting</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C</head><p>(1)</p><formula xml:id="formula_17">1 = x 2 + x 6 .</formula><p>In the next interval, we compute</p><formula xml:id="formula_18">C (1) 3 := C (1) 3 + C (1) 1 C (1) 2 = (x 2 + x 6 )x 4 .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Termination</head><p>Termination is guaranteed since the cardinality of the characteristic sets either increases or remains unchanged with arrival events. A characteristic set cannot grow beyond the size of the full set of input assignments.</p><p>When the algorithm terminates, the union of the characteristic sets</p><formula xml:id="formula_19">C (0) i + C (1) i</formula><p>for each gate g i specifies the input assignments for which g i produces definite values. If the complement of this union includes input assignments not in the "don't care" set for any gate producing a primary output, then we conclude that the circuit is not combinational. In particular, if there are no "don't care" input assignments, then the circuit is combinational if and only if the union consists of all input assignments for every gate producing a primary output.</p><p>Also, when the algorithm terminates, the time that has lapsed -the number of intervals times the interval length -gives a bound on the circuit delay.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Analysis of Example 1</head><p>We step through a symbolic analysis of the circuit in Figure <ref type="figure">1</ref> of the Introduction. We assume that each gate has a delay bound of 1 time unit, and that the primary inputs arrive at time 0.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Time 1</head><p>For the AND gates, controlling values of 0 on the primary inputs result in</p><formula xml:id="formula_20">C (0) 1 = x, C (0) 3 = b, C (0) 5 = c.</formula><p>For the OR gates, controlling values of 1 on the primary inputs result in</p><formula xml:id="formula_21">C (1) 2 = a, C<label>(1) 4</label></formula><formula xml:id="formula_22">= x, C<label>(1) 6</label></formula><formula xml:id="formula_23">= d.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Time 2</head><p>For the AND gates, non-controlling values of 1 from the preceding OR gates result in</p><formula xml:id="formula_24">C (1) 1 = x d, C<label>(1)</label></formula><formula xml:id="formula_25">3 = b a, C<label>(1) 5</label></formula><formula xml:id="formula_26">= c x.</formula><p>For the OR gates, non-controlling values of 0 from the preceding AND gates result in</p><formula xml:id="formula_27">C (0) 2 = ā x, C (0) 4 = x b, C (0) 6 = d c.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Time 3</head><p>For the AND gates, controlling values of 0 from the preceding OR gates result in</p><formula xml:id="formula_28">C (0) 1 = x + d c, C (0) 3 = b + ā x, C (0) 5 = c + x b.</formula><p>For the OR gates, controlling values of 1 from the preceding AND gates result in</p><formula xml:id="formula_29">C (1) 2 = a + x d, C<label>(1) 4</label></formula><formula xml:id="formula_30">= x + b a, C<label>(1) 6</label></formula><formula xml:id="formula_31">= d + c x.</formula><p>Controlling and non-controlling values continue to propagate forward, in alternate fashion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Time 6</head><p>Skipping forward, after six intervals we have:</p><formula xml:id="formula_32">C (0) 1 = x + d c, C<label>(1) 1</label></formula><formula xml:id="formula_33">= x(d + c), C (0) 2 = ā(x + d c), C<label>(1)</label></formula><formula xml:id="formula_34">2 = a + x(d + c), C (0) 3 = b + ā(x + d c), C<label>(1) 3</label></formula><formula xml:id="formula_35">= b(a + x(d + c)), C (0) 4 = x( b + ā), C<label>(1) 4</label></formula><formula xml:id="formula_36">= x + b a, C (0) 5 = c + x( b + ā), C<label>(1) 5</label></formula><formula xml:id="formula_37">= c(x + ba), C (0) 6 = d(c + x( b + ā)), C<label>(1)</label></formula><formula xml:id="formula_38">6 = d + c(x + b a).</formula><p>At this point, there are no new arrival events. Note that for each i = 1, . . . ,</p><p>Hence, all input assignments produce definite values at the outputs, and so we conclude that the circuit is combinational. Since we propagated events for 6 time units, we conclude that the circuit has delay 6. 2</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example 2</head><p>Consider the circuit shown in Figure <ref type="figure">5</ref>. It computes four output functions, f 1 , f 2 , f 3 , and f 4 of three input variables a, b, and c. The corresponding equations are:</p><formula xml:id="formula_40">f 1 = bc + b f2 f 2 = ac + b f3 f 3 = a f1 + bf 1 + c f4 f 4 = a b + f1 + b f2 PSfrag replacements f 1 f 2 f 3 f 4</formula><p>Note that there are cyclic dependencies: f 1 depends on f 2 ; f 2 depends on f 3 ; f 3 depends on f 1 and f 4 ; and f 4 depends on f 1 and f 2 . Nevertheless, this circuit is combinational with delay 8.</p><p>We do not trace through the analysis this time. The table in Figure <ref type="figure">6</ref> summarizes the results. It gives the characteristic sets C (0) i and C</p><p>(1) i for the output gates.</p><p>2</p><formula xml:id="formula_41">g 3 [bc, bc ] 2 [a bc + bc, c(b + ā) + bc ] 4 g 6 [ b(c + ā), ac ] 2 [ā(c + b) + ac, ac ] 6 [ā(c + b) + ac, ābc + ac ] 7 g 10 [ā bc, 0 ] 2 [ā bc, b(c + a) ] 4 [ā(bc + bc), b(c + a) ] 5 [ā bc + c(a b + āb), c(b + a) + ab ] 6 [ā bc + c(a b + āb), āb c + c(b + a) + ab ] 7 g 13 [0, a b ] 2 [0, bc + a b ] 3 [abc, bc + a b ] 4 [abc + āb , bc + a b ] 5 [abc + āb , b(c + ā) + a b ]<label>8</label></formula><p>Fig. <ref type="figure">6</ref>. Characteristic sets [C</p><formula xml:id="formula_42">(0) i , C<label>(1)</label></formula><p>i ] j for the circuit of Figure <ref type="figure">5</ref>, for gates g i , i = 3, 6, 10, 13, at time intervals j = 2, . . . , 8.</p><p>Timing analysis with such an idealized model is transparent. However, the devil is in the details -and with realistic timing models there are many detailed aspects to consider. Nevertheless, we conclude that, at least in a conceptual sense, the analysis of cyclic circuits is no more complicated than that of acyclic circuits. We can perform this task efficiently through symbolic event propagation, within the ternary framework.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. Results</head><p>In previous work, we discussed design strategies for cyclic circuits and described our synthesis program, called CYCLIFY <ref type="bibr" target="#b13">[14]</ref>, built within the Berkeley SIS environment <ref type="bibr" target="#b16">[17]</ref>. In our methodology, cycles are introduced in the restructuring and minimization phases, at the level of functional dependencies. Synthesis is performed through a branch-and-bound search, with analysis used to validated and rank potential solutions. In our current work, we have ex- tended the methodology to the decomposition and mapping phases.</p><p>The case for using cycles to optimize area seems to be the most compelling. However, we have also investigated cyclic optimizations jointly targeting area and delay. In the branch-and-bound search, we use a sliding scale for the relative weight of area vs. delay when ranking solutions. The timing information is provided by the algorithm described in Section II. While this is a topic of ongoing research, we present some results.</p><p>For benchmark circuits, we used the usual suspects, namely the Espresso and LGSynth93 collections. Examples were selected based on size and suitability (generally, circuits with fewer than 30 inputs and fewer than 30 outputs). For circuits with latches, we extracted the combinational part.</p><p>Beginning from a collapsed specification, we applied the sequence of optimizations called "script-.delay" and then mapped to a library of two-input NAND/NOR gates and inverters. In the library • NAND2/NOR2 gates have area 2, and inverters have area 1;</p><p>• NAND2/NOR2 gates have delay bounds 1, and inverters have delay bounds 0.5.</p><p>We compare the results obtained using the standard routines in SIS to those obtained with the corre-sponding routines from CYCLIFY. We chose a weighting of one-third for area and two-thirds for delay in the cyclic optimizations. Accordingly, the relative improvements in delay are more significant than those in area.</p><p>Figure <ref type="figure">7</ref> lists some of the benchmark circuits for which cyclic solutions were found. The area and delay of the SIS solutions are given in columns 2 and 3, respectively. The area and delay of the CYCLIFY solutions are given in columns 4 and 6, respectively. The improvements in area and delay, as percentages of the SIS solutions, are given in Columns 5 and 7, respectively.</p><p>We note that the improvements in delay were often greater than 10%. In some cases, there were simultaneous improvements in the vicinity of 10% for area and 25% for delay.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. Discussion</head><p>Early work in the 1960's and 70's established the premise of combinational circuits with cycles, and suggested the possible benefits. And yet, combinational circuits are not designed with cycles in practice. Perhaps designers have eschewed feedback due to the apparent complexity of reasoning about cyclic structures. Malik's work on the topic provided a solid foundation for analysis; however, he approached the problem of timing analysis from a topological perspective. Path-based reasoning about cyclic topologies seems tortuous and inefficient. Exact timing analysis is, of course, a difficult problem, whether circuits are cyclic or not. However, using a functional approach based on event propagation, existing techniques can be applied effectively. In principle, timing analysis is no more difficult for cyclic circuits than for acyclic circuits. In practice, many further aspects need to be addressed. For instance, existing techniques for incremental timing analysis assume a topological ordering.</p><p>In future work, we will incorporate more realistic timing models into our analysis algorithm, and implement more sophisticated search heuristics in our synthesis procedure.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>4 Fig. 1 .</head><label>41</label><figDesc>Fig. 1. A cyclic combinational circuit.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. An illustration of the floating mode.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. An illustration of the propagation conditions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>4 Fig. 5 .</head><label>45</label><figDesc>Fig. 5. A cyclic combinational circuit.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>Fig. 7. Area and Delay of Berkeley SIS vs. CYCLIFY for Benchmarks with "script.delay" optimizations, and mapping to NAND2/NOR2 gates and inverters.</figDesc><table><row><cell></cell><cell></cell><cell cols="3">Espresso Benchmarks</cell><cell></cell><cell></cell></row><row><cell></cell><cell>SIS</cell><cell></cell><cell></cell><cell cols="2">CYCLIFY</cell><cell></cell></row><row><cell></cell><cell cols="3">Area Delay Area</cell><cell></cell><cell>Delay</cell><cell></cell></row><row><cell>p82</cell><cell>175</cell><cell>19.0</cell><cell>167</cell><cell>4.6 %</cell><cell cols="2">15.0 21.1 %</cell></row><row><cell>t1</cell><cell>343</cell><cell>17.0</cell><cell>327</cell><cell>4.6 %</cell><cell cols="2">14.0 17.6 %</cell></row><row><cell>b4</cell><cell>474</cell><cell>30.0</cell><cell>464</cell><cell>2.1 %</cell><cell>29.0</cell><cell>3.4 %</cell></row><row><cell>exp</cell><cell>502</cell><cell>31.0</cell><cell>480</cell><cell>4.4 %</cell><cell>29.0</cell><cell>6.4 %</cell></row><row><cell>in3</cell><cell>599</cell><cell>40.0</cell><cell>593</cell><cell>1.0 %</cell><cell cols="2">33.0 17.5 %</cell></row><row><cell>in2</cell><cell>590</cell><cell>34.0</cell><cell>558</cell><cell>5.4 %</cell><cell cols="2">29.0 14.7 %</cell></row><row><cell>b10</cell><cell>681</cell><cell>37.0</cell><cell cols="2">691 -1.5 %</cell><cell>35.0</cell><cell>5.4 %</cell></row><row><cell>in0</cell><cell>751</cell><cell>42.0</cell><cell cols="2">777 -3.5 %</cell><cell cols="2">37.0 11.9 %</cell></row><row><cell></cell><cell cols="4">LGSynth93 Benchmarks</cell><cell></cell><cell></cell></row><row><cell></cell><cell>SIS</cell><cell></cell><cell></cell><cell cols="2">CYCLIFY</cell><cell></cell></row><row><cell></cell><cell cols="3">Area Delay Area</cell><cell></cell><cell>Delay</cell><cell></cell></row><row><cell>5xp1</cell><cell>210</cell><cell>23.0</cell><cell cols="2">180 14.3 %</cell><cell>22.0</cell><cell>4.3 %</cell></row><row><cell>planet</cell><cell>964</cell><cell>40.0</cell><cell>938</cell><cell>2.7 %</cell><cell>38.0</cell><cell>5.0 %</cell></row><row><cell>s386</cell><cell>222</cell><cell>21.0</cell><cell>217</cell><cell>2.2 %</cell><cell>20.0</cell><cell>4.7 %</cell></row><row><cell>bw</cell><cell>280</cell><cell>28.0</cell><cell>254</cell><cell>9.3 %</cell><cell cols="2">20.5 26.8 %</cell></row><row><cell>cse</cell><cell>337</cell><cell>29.5</cell><cell>333</cell><cell>1.2 %</cell><cell>27.5</cell><cell>6.7 %</cell></row><row><cell>s510</cell><cell>452</cell><cell>28.0</cell><cell>444</cell><cell>1.8 %</cell><cell cols="2">24.0 14.3 %</cell></row><row><cell>ex1</cell><cell>526</cell><cell>40.0</cell><cell>522</cell><cell>0.7 %</cell><cell cols="2">34.0 15.0 %</cell></row><row><cell>s1</cell><cell>566</cell><cell>36.0</cell><cell>542</cell><cell>4.2 %</cell><cell cols="2">31.0 13.9 %</cell></row><row><cell>duke2</cell><cell>742</cell><cell>38.0</cell><cell>716</cell><cell>3.5 %</cell><cell cols="2">34.0 10.5 %</cell></row><row><cell>styr</cell><cell>821</cell><cell>39.0</cell><cell cols="2">827 -0.7 %</cell><cell>36.0</cell><cell>7.7 %</cell></row><row><cell cols="2">s1488 1016</cell><cell>43.0</cell><cell>995</cell><cell>2.1 %</cell><cell cols="2">34.0 20.9 %</cell></row><row><cell cols="2">s1494 1090</cell><cell cols="2">46.0 1079</cell><cell>1.0 %</cell><cell cols="2">39.0 15.2 %</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>We use the standard notation: addition (+) denotes disjunction (OR), multiplication (•) denotes conjunction (AND), and an overbar (x) denotes negation (NOT).</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>In a symbolic formulation, a set of input assignments is characterized by a boolean function: the function evaluates to 1 for those assignments in the set, and to 0 for those not in the set.</p></note>
		</body>
		<back>

			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"> *   <p>This work is supported in part by a grant from the National Human Genome Research Institute (Grant no. P50 HG02370).</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Timing Analysis of Combinational Circuits Using ADD&apos;s</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">I</forename><surname>Bahar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">European Design Automation Conf</title>
		<imprint>
			<date type="published" when="1994">1994</date>
			<biblScope unit="page" from="625" to="629" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Graph-Based Algorithms For Boolean Function Manipulation</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">E</forename><surname>Bryant</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Computers</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="677" to="691" />
			<date type="published" when="1986">1986</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Boolean Analysis of MOS Circuits</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">E</forename><surname>Bryant</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Computer-Aided Design</title>
		<imprint>
			<biblScope unit="page" from="634" to="649" />
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Asynchronous Circuits</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Brzozowski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C.-J</forename><forename type="middle">H</forename><surname>Seger</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995">1995</date>
			<publisher>Springer-Verlag</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Making Cyclic Circuits Acyclic</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">A</forename><surname>Edwards</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Design Automation Conf</title>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="159" to="162" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Combinational Circuits with Feedback</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Huffman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Recent Developments in Switching Theory</title>
		<editor>
			<persName><forename type="first">A</forename><surname>Mukhopadhyay</surname></persName>
		</editor>
		<imprint>
			<date type="published" when="1971">1971</date>
			<biblScope unit="page" from="27" to="55" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The Necessity of Closed Circuit Loops in Minimal Combinational Circuits</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">H</forename><surname>Kautz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Comp</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="page" from="162" to="166" />
			<date type="published" when="1970">1970</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Test Pattern Generation Using Boolean Satisfiability</title>
		<author>
			<persName><forename type="first">T</forename><surname>Larrabee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Computer-Aided Design</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="4" to="15" />
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Representation of Switching Circuits by Binary-Decision Programs</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">Y</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bell System Technical Journal</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="page" from="985" to="999" />
			<date type="published" when="1959">1959</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Analysis of Cyclic Combinational Circuits</title>
		<author>
			<persName><forename type="first">S</forename><surname>Malik</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Computer-Aided Design</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="950" to="956" />
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Loops in Directed Combinational Switching Networks</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">R</forename><surname>Mccaw</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1963">1963</date>
			<publisher>Stanford University</publisher>
		</imprint>
	</monogr>
	<note type="report_type">Engineer&apos;s Thesis</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Ternary Simulation: A Refinement of Binary Functions or an Abstraction of Real-Time Behavior</title>
		<author>
			<persName><forename type="first">M</forename><surname>Mendler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Fairlough</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Designing Correct Circuits</title>
		<imprint>
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Cyclic Combinational Circuits: Analysis for Synthesis</title>
		<author>
			<persName><forename type="first">M</forename><surname>Riedel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Bruck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Int&apos;l Workshop Logic and Synthesis</title>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="105" to="112" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">The Synthesis of Cyclic Combinational Circuits</title>
		<author>
			<persName><forename type="first">M</forename><surname>Riedel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Bruck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Design Automation Conf</title>
		<imprint>
			<biblScope unit="page" from="163" to="168" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Cyclic Combinational Circuits</title>
		<author>
			<persName><forename type="first">M</forename><surname>Riedel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
			<publisher>Caltech</publisher>
		</imprint>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">The Necessity of Feedback in Minimal Monotone Combinational Circuits</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Rivest</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Comp</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="606" to="607" />
			<date type="published" when="1977">1977</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">SIS: A System For Sequential Circuit Synthesis</title>
		<author>
			<persName><forename type="first">E</forename><surname>Sentovich</surname></persName>
		</author>
		<ptr target="UCB/ERLM92/41" />
		<imprint>
			<date type="published" when="1992">1992</date>
		</imprint>
		<respStmt>
			<orgName>Electronics Research Lab, U. C. Berkeley</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Tech. Rep</note>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Formal Analysis of Synchronous Circuits</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">R</forename><surname>Shiple</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996">1996</date>
		</imprint>
		<respStmt>
			<orgName>U.C. Berkeley</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">A Theory of Relations Between Sequential and Combinational Realizations of Switching Functions</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Short</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1961">1961</date>
		</imprint>
		<respStmt>
			<orgName>Ph.D. Dissertation, Stanford University</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">False Loops Through Resource Sharing</title>
		<author>
			<persName><forename type="first">L</forename><surname>Stok</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Int&apos;l Conf. Computer-Aided Design</title>
		<imprint>
			<date type="published" when="1992">1992</date>
			<biblScope unit="page" from="345" to="348" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Event Propagation Conditions in Circuit Delay Computation</title>
		<author>
			<persName><forename type="first">H</forename><surname>Yalcin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hayes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Design Automation of Electronic Systems</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="249" to="280" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Application of Ternary Algebra to the Study of Static Hazards</title>
		<author>
			<persName><forename type="first">M</forename><surname>Yoeli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Rinon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the ACM</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="84" to="97" />
			<date type="published" when="1964">1964</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
