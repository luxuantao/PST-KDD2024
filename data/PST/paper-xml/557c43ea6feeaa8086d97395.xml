<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">An Exploratory Study on Self-Admitted Technical Debt</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Aniket</forename><surname>Potdar</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Software Engineering</orgName>
								<orgName type="institution">Rochester Institute of Technology Rochester</orgName>
								<address>
									<region>NY</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author role="corresp">
							<persName><forename type="first">Emad</forename><surname>Shihab</surname></persName>
							<email>eshihab@cse.concordia.ca</email>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science and Software Engineering</orgName>
								<orgName type="institution">Concordia University Montreal</orgName>
								<address>
									<region>QC</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">An Exploratory Study on Self-Admitted Technical Debt</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">DB5881FA044E7A0770534969AACB3D1A</idno>
					<idno type="DOI">10.1109/ICSME.2014.31</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T15:13+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Throughout a software development life cycle, developers knowingly commit code that is either incomplete, requires rework, produces errors, or is a temporary workaround. Such incomplete or temporary workarounds are commonly referred to as 'technical debt'. Our experience indicates that self-admitted technical debt is common in software projects and may negatively impact software maintenance, however, to date very little is known about them.</p><p>Therefore, in this paper, we use source-code comments in four large open source software projects -Eclipse, Chromium OS, Apache HTTP Server, and ArgoUML to identify self-admitted technical debt. Using the identified technical debt, we study 1) the amount of self-admitted technical debt found in these projects, 2) why this self-admitted technical debt was introduced into the software projects and 3) how likely is the self-admitted technical debt to be removed after their introduction. We find that the amount of self-admitted technical debt exists in 2.4% -31% of the files. Furthermore, we find that developers with higher experience tend to introduce most of the self-admitted technical debt and that time pressures and complexity of the code do not correlate with the amount of self-admitted technical debt. Lastly, although self-admitted technical debt is meant to be addressed or removed in the future, only between 26.3% -63.5% of self-admitted technical debt gets removed from projects after introduction.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Delivering high quality, defect-free software is the goal of all software projects. To ensure the delivery of high quality software, software project often plan their development and maintenance efforts. However, in many cases, developers are rushed into completing tasks for various reasons. A few of these reasons mentioned in prior work include, cost reduction, satisfying customers and market pressure from competition <ref type="bibr" target="#b0">[1]</ref>. Intuition and general belief indicate that such rushed development tasks (also known as technical debt) negatively impact software maintenance and overall quality <ref type="bibr" target="#b1">[2]</ref>.</p><p>A plethora of prior work proposed techniques to support software maintenance and ensure high software quality. For example, prior work focused on understanding and predicting software defects (e.g. <ref type="bibr" target="#b2">[3]</ref>), analyzing bug fix patterns (e.g. <ref type="bibr" target="#b3">[4]</ref>), and attempting to understand and eliminate rework and maintenance (e.g., <ref type="bibr" target="#b4">[5]</ref>). The majority of the aforementioned prior work used historical development data and source-code metrics to perform their studies. More recently, researchers leveraged natural language to help identify potentially problematic areas of the software. For example, work by Tan et al. <ref type="bibr" target="#b5">[6]</ref> developed natural language processing tools to find commentbug inconsistencies. Other work identified the coevolutionary relationship between source code and its associated comments (e.g., <ref type="bibr" target="#b6">[7]</ref>, <ref type="bibr" target="#b7">[8]</ref>) and used task annotations to manage productivity <ref type="bibr" target="#b8">[9]</ref>.</p><p>The majority of the prior work focused on quality issues that are due to unintentional errors by developers (i.e., errors introduced by the developers are assumed to mistakes). However, to the best of our knowledge, very few prior studies examined the impact of errors that might be introduced due to intentional (i.e., self admitted) quick or temporary fixes (i.e., technical debt). Studying this self-admitted technical debt is important since they appear frequently in some projects (as we show later in this study) and prior work indicated that they negatively impact quality <ref type="bibr" target="#b1">[2]</ref>.</p><p>Therefore, in this paper we perform an exploratory study to better understand self-admitted technical debt. Inspired by prior work (e.g., <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b10">[11]</ref>), we use sourcecode comments to detect self-admitted technical debt. We perform our study on four large open source projects -namely Eclipse, Chromium OS, ArgoUML and Apache httpd. We focus on quantifying the amount of self-admitted technical debt (RQ1), on determining why self-admitted technical debt is introduced (RQ2) and how much of self-admitted technical debt is actually removed after their introduction (RQ3).</p><p>We make the following contributions:</p><p>• Identify comment patterns that indicate self-admitted technical debt. We manually read through 101,762 code comments to determine patterns that indicated selfadmitted technical debt. In the end, we identified 62 different comment patterns that indicate self-admitted technical debt. • Measure how much self-admitted technical debt exists, why self-admitted technical debt is introduced and how much self-admitted technical debt is removed after their introduction. We find that 2.4% -31.0% of the files contain self-admitted technical debt, that more experienced developers introduce more selfadmitted technical debt and that self-admitted technical debt is introduced throughout their development activity (i.e., they do not only introduce self-admitted technical debt during the beginning or end of their development activity). Also, we find that time to release and complexity of the code are not strongly associated with self-admitted technical debt and that even after many releases only between 26.3% -63.5% of self-admitted technical debt is removed.</p><p>• Contribute a rich data set of self-admitted technical debt. In order to encourage future research in the area of self-admitted technical debt, we make our dataset from this study publicly available <ref type="foot" target="#foot_0">1</ref> . The rest of the paper is organized as follows. Sections II presents the related work. We setup our case study in Section III and describe our approach. Section IV presents our casestudy results. In section V we analyze the instances when code and comments evolve consistently and instances when either code or comments are updated inconsistently. Section VI present the threats to validity and Section VII concludes our study.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. RELATED WORK</head><p>The work that is most related to ours comes from two areas, work related that uses source-code comments and work in the area of technical debt. Work using source-code comments: Previous work on source-code comments focused on studying comment updates <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b10">[11]</ref> and how comments can assist in task assignment and task completion <ref type="bibr" target="#b8">[9]</ref>, <ref type="bibr" target="#b11">[12]</ref>, <ref type="bibr" target="#b12">[13]</ref>.</p><p>Fluri et al. <ref type="bibr" target="#b7">[8]</ref> examined the co-evolution of code and comments in ArgoUML, Azureus, and JDT Core and found that new code is rarely commented and that 97% of comment changes are done in the same revision as the code (i.e., consistently co-changed). Malik et al. <ref type="bibr" target="#b9">[10]</ref> propose techniques to predict the likelihood of a comment being updated and were able to do so with high accuracy (i.e., 80%). Tan et al. <ref type="bibr" target="#b5">[6]</ref> analyzed inconsistencies in code and corresponding comments by classifying comments as either those that would lead to bugs and comments that do not sync with the source code. They propose a tool called iComment and show that iComment can achieve an accuracy between 90.8-100%. In follow-on work, Tan et al. <ref type="bibr" target="#b10">[11]</ref> studied the inconsistencies between method bodies and Javadoc comments.</p><p>Other work used comments to assist in task assignment and completion. Storey et al. <ref type="bibr" target="#b8">[9]</ref> investigated how task annotations can assist developers achieve tasks and enhance communication about the code. They found that the use of task annotations varies from individuals to teams and if incorrectly managed, could negatively impact the maintenance of a system. Khamis et al. <ref type="bibr" target="#b11">[12]</ref> focus on assessing the quality of documentation in software and need for maintaining source-code comments for better documentation. Padioleau et al. <ref type="bibr" target="#b12">[13]</ref> manually examined 1050 comments from Linux, FreeBSD and OpenSolaris and found that 52.6% of the examined comments can be leveraged by tools to improve reliability.</p><p>Our work differs from the prior work in several ways. First, the main focus of our work is on self-admitted technical debt.</p><p>In particular, we focus on quantifying and understanding why and how much self-admitted technical debt is removed after its introduction, in contrast to the prior work which focused on the inconsistency on code and comment co-change or the examination of source-code comments to assist in task completion. Second, our work examines the personnel aspect (i.e., developers involved) of self-admitted technical debt, which is something prior work did not investigate. Lastly, our work also complements the prior work since we also examine the co-change of code and comments in Section V in order to shed light on the validity of our approach. Our findings corroborate the findings of the prior work, especially the work in <ref type="bibr" target="#b7">[8]</ref>. Work on technical debt: Zazworka et al. <ref type="bibr" target="#b13">[14]</ref> identified technical debt by asking a project team to identify technical debt items in artifacts from their software project. The goal of the study was to ascertain if automated tools find the same technical debt items as the project team and quantify the overlap of items. The technical debt items identified by both approaches were categorized under defect debt, design debt, documentation debt, testing debt and usability debt. Kruchten et al. <ref type="bibr" target="#b14">[15]</ref> present an in-depth description of technical debt. The study notes how organizations have embraced technical debt, by making technical debt visible, integrating it into planning and considering it into future risks. The study concludes that poorly managed risks can negatively affect the future of the software but properly managed risks can add value to the software "in the form of deferred investment opportunities". Guo et al. <ref type="bibr" target="#b15">[16]</ref> analyzed the effect of technical debt by tracking a single delayed task in a software project throughout its lifecycle.</p><p>In many ways, our work complements the aforementioned work on technical debt. First, our work focuses on selfadmitted technical debt, which can be thought of as intentional technical debt. Second, our work performs an exploratory study on self-admitted technical debt, hence, contributing to the body of work on technical debt. Lastly, since we share our data from this study, we believe that sharing this data will help spur new research in the area of self-admitted technical debt and technical debt in general.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. CASE-STUDY SETUP</head><p>The goal of this study is to better understand self-admitted technical debt. In particular, we focus on quantifying the amount self-admitted technical debt, examining why selfadmitted technical debt is introduced and determining the amount of self-admitted technical debt that is removed after their introduction. We formalize our study in the following research questions:</p><p>RQ1. How much self-admitted technical debt exists in the studied software projects? RQ2. Why is self-admitted technical debt introduced into the software project?  RQ3. How much self-admitted technical debt is removed after its introduction? To conduct our study, we use data from four, large opensource projects namely -Eclipse, Chromium OS, Apache httpd, and ArgoUML. When selecting our case-study projects, we wanted to have projects that are long-lived, have a large number of contributors and are well commented (since a large part of our analysis depends on the comments). We selected Eclipse, Chromium OS, Apache httpd, and ArgoUML for our study since they have large and accessible codebases with a lengthy development history. Furthermore, Ohloh.net mentions that the projects have "a well established, mature codebase" and "average" to "well-commented source code".</p><p>Figure <ref type="figure" target="#fig_0">1</ref> provides an overview of the approach used to perform our study. First, we mine the source code for the four open source projects. Then, we parse the code to distinguish comment lines and source code. We read through the comments to identify patterns in the comments that indicate selfadmitted technical debt. Then, we use these identified patterns to automatically identify self-admitted technical debt in the projects. Lastly, we use the self-admitted technical debt to perform our analysis and answer our research questions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Extracting Repository Data</head><p>To perform our analysis, we require the source code as input. We extracted the latest public releases available at the time from each project's source control systems. To assure validity of our results, we extracted data for four large open source projects -namely Eclipse, Chromium OS, ArgoUML and Apache httpd. Once we extracted the files, we found that Chromium OS files contained both Java and C++ files. Chromium OS constituted of 544 Java files and 13,784 C++ files; ArgoUML contained 1,846 Java files; Apache HTTP Server had 255 C files; Eclipse had 6,389 Java files. Table <ref type="table" target="#tab_0">I</ref> represents statistics for all the studied projects.</p><p>The source code extracted for each project was the latest release before January 2014, listed in Table <ref type="table" target="#tab_0">I</ref>. While Eclipse, Apache httpd, and ArgoUML had public releases closer to the date of extraction, the only public release by Chromium OS was a few years prior. Chromium OS uses different release channels to roll out stable updates to users roughly every six weeks <ref type="bibr" target="#b16">[17]</ref>. Hence, for Chromium OS, we extracted the latest source code available on their repository which corresponded to branch point 30.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Parsing Code Using srcML</head><p>After obtaining the source code of the software projects, we needed to discriminate between source code and comment lines. To extract the source-code comments, we utilized the srcML Toolkit <ref type="bibr" target="#b17">[18]</ref>, a command line tool that parses source code into XML files. Then, we developed a Java-based tool that parses the XML files produced by srcML, and stores the comment nodes of the code into separate text files for each project. The Chromium OS Java files contained 12,387 comments while the C++ files contained 3,944 comments. The Eclipse, ArgoUML and Apache projects contained 9,273, 62,256, and 13,902 comments, respectively. The srcML tool reads a comment block -a comment that spans multiple lines -as a single comment and hence it is important to note that the aforementioned numbers denote the number of comments and not the number of lines of comments in the source files.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Identifying self-admitted Technical Debt</head><p>Once the comments are extracted, our next step is to determine the comments that indicate self-admitted technical debt. Since comments are written in natural language, it is very difficult to automatically analyze them. Therefore, the comments were analyzed manually by reading through each of them to identify those that indicated self-admitted technical debt. In total, Potdar read through 101,762 comments. A link containing the all of the comments analyzed is provided <ref type="foot" target="#foot_1">2</ref> . Table <ref type="table" target="#tab_0">II</ref> provides a sample of comments that were identified as indicating self-admitted technical debt.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Identifying Specific Self-Admitted Technical-Debt Patterns</head><p>Once we identified all of the comments that indicate selfadmitted technical debt, we needed to further distill these comments to specific patterns that indicate self-admitted technical debt (e.g., we removed stop words). In total, we ended up with a set of 62 recurring patterns that were identified across   3 . We use the final set of 62 patterns to perform all of our analysis, which we discuss in the next section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. CASE-STUDY RESULTS</head><p>The goal of our research is to perform an exploratory study on self-admitted technical debt. We study data from four, large open source projects namely -Eclipse, Chromium OS, Apache httpd, and ArgoUML. Since, to the best of our knowledge, this is one of the first studies to focus on self-admitted technical debt, our first question is related to the quantity of selfadmitted technical debt.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>RQ1. How much self-admitted technical debt exists in the studied software projects?</head><p>Motivation: Intuitively, self-admitted technical debt is not considered to be good practice. At the same time, our experience indicates that it does exist <ref type="bibr" target="#b18">[19]</ref>. However, how common self-admitted technical debt is is still unknown. Quantifying the amount of self-admitted technical debt that exists helps us better understand how much of a problem it poses and whether it warrants more attention or not. Approach: To quantify how much self-admitted technical debt exists in the different projects, we use the 62 self-admitted technical-debt patterns described earlier in Section III. For 3 http://users.encs.concordia.ca/ eshihab/data/ICSME2014/satd.html each source-code file, we quantified the number of selfadmitted technical debt that exists using their comments. Since different projects have a different number of comments, we normalized our results by the total number of comments that the project has. For example, if a project has 100 comments in total and another has 1,000 comments in total, and 10 comments in each project match one of the 62 patterns identified earlier, then we say that 10% of the first project and 1% of the second project contains self-admitted technical debt. Since comments can be mapped at different granularities, we report the results of our analysis at the file, class and method/function level. Results: Table <ref type="table" target="#tab_0">III</ref> shows the results of our analysis at different levels of granularity. We find that at the file level, between 2.4 -31.0% of the files contained one or more instances of self-admitted technical debt. Since source-code comments and therefore self-admitted technical debt also lie outside the boundary of a class, as expected, the percentage was lower for the class level, ranging between 0.4 -3.3% and 0.3 -2.6% at the method/function level. Table III also shows the raw number of files, classes and methods/functions. The class analysis does not include results for the Apache httpd project since Apache httpd is written in C, and therefore, it does not have classes.</p><p>For Eclipse and ArgoUML a couple of anomalies were noted where the number of files with self-admitted technical debt outnumbered the number of classes with self-admitted technical debt. On further analysis, we found that there existed self-admitted technical debt in the files that were located outside the Class constructs, i.e., in constructor declarations. Parsing the source code with srcML places the constructor nodes outside the scope of the class nodes. Therefore, we also include the number and percentage of self-admitted technical debt at the bottom of Table <ref type="table" target="#tab_0">III</ref>.</p><p>To shed light on the most frequent self-admitted technical debt, we also quantified the most recurring patterns across all of the projects. Moreover, to determine whether these patterns were all by a single developer or multiple developers, we also measure the number of unique developers that use a pattern.</p><p>We found that in Eclipse, the most commonly occurring self-admitted technical debt pattern is there is a problem with 36 instances by 10 different developers followed by workaround for bug with 30 instances by 7 different developers. In ArgoUML, the most commonly occurring pattern was hack with 17 instances by 4 different developers followed by give up with 14 instances by 2 different developers. In Apache httpd, the most commonly occurring pattern was fixme with 20 instances by 17 different developers followed by kludge with 19 instances by 6 different developers. In Chromium OS, the most commonly occurring pattern was fixme with 761 instances by 212 different developers followed by hack with 89 instances by 35 different developers. This finding clearly shows that self-admitted technical debt is not only by a single developer, but is actually made by different developers. We find that 2.4 -31.0% of files, 0.4 -3.3% of classes and 0.3 -2.6% of methods/functions contain self-admitted technical debt.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>RQ2. Why is self-admitted technical debt introduced into the software project?</head><p>Motivation: After quantifying the amount of self-admitted technical debt, we want to better understand why self-admitted technical debt is introduced. To answer this research question, we investigate three types of factors that might be causing the introduction of self-admitted technical debt: experience, time and complexity. Our conjuncture is that less experienced developers do not know the codebase very well, and therefore, introduce self-admitted technical debt. For time factors, our conjuncture is that developers are pressured by tight release deadlines and are therefore introducing self-admitted technical debt close to the release dates. Finally, for the complexity factors, our conjuncture is that more complex code is harder to change, therefore, developers are more likely to introduce self-admitted technical debt. Answering this question will help us and future research better address this issue of self-admitted technical debt. Approach: To investigate whether or not experience plays a role in the introduction of self-admitted technical debt, we used the git blame (for Eclipse and Chromium OS) and svn blame (for ArgoUML and Apache) commands to know which developer introduced the self-admitted technical debt. Then, to get the developer's experience on the project, we measured the number of commits the developer made prior to the commit that introduced the self-admitted technical debt. The number of prior commits serves as a proxy for experience and has been used in a similar manner in previous work <ref type="bibr" target="#b19">[20]</ref>, <ref type="bibr" target="#b20">[21]</ref>.</p><p>We also measure when in their development experience developers introduce self-admitted technical debt. To do so, we obtained the timestamps of all commits. Then, we used the obtained timestamp to build scatter plots that superimpose the self-admitted technical debt over all the commits that a developer makes.</p><p>To investigate whether or not time pressure plays a role in the introduction of self-admitted technical debt, we quantify the number of self-admitted technical debt introduced more than 6 months before a release, between 3 and 6 months before a release, between 1 and 3 months and within less than a month before a release.</p><p>To investigate whether or not complexity plays a role in the introduction of self-admitted technical debt, we measure the Spearman correlation between the dependencies (i.e., Fanin) of files and the number of self-admitted technical debt they contain. Since larger files have more commits overall and will naturally have a higher likelihood of having more selfadmitted technical debt, we measured the partial correlations (rather than the simple Spearman correlations) between the dependencies and the number of self-admitted technical debt. The partial correlation measures the degree of association between two variables, while removing the effect of a controlling variable <ref type="bibr" target="#b21">[22]</ref>. In our case, size of a file, measured in LOC, is used as the controlling variable. Results -Developer Experience: Table <ref type="table" target="#tab_0">IV</ref> shows the top 5 contributors of self-admitted technical debt in the four studied projects. For each contributor, we provide their total number of commits, the number of self-admitted technical debt and their rank in terms of experience. We find that in Eclipse and ArgoUML, the top 5 contributors in terms of the number of self-admitted technical debt are in the top 4% (100 * 9 221 ) and 15% (100 * 8 53 ) of most experienced contributors, respectively. In Apache httpd, the top 5 contributors of self-admitted technical debt are ranked in the top 18% in terms of experience. However, the outlier here is the Chromium OS, where we find that the most experienced contributor is also the one with the most self-admitted technical debt, however, there are other contributors such as C2 and C5 who are ranked much lower. At first, the fact that someone with an experience rank as low as 232 is in the top 5 contributors to self-admitted technical debt seems out of place. However, given that Chromium OS also has a large number of contributors, we find that Chromium OS is similar to the other projects, i.e., the top 5 contributors of self-admitted technical debt are ranked in the top 13% (100 * 232 1784 ) in terms of experience. In addition, to see when in their experience developers introduce self-admitted technical debt, we plotted the commits for the top developer, in terms of their experience, of each project. Developers with higher experience tend to introduce more self-admitted technical debt into software projects. At the same time, developers introduce self-admitted technical debt throughout their project experience.</p><p>Results -Time to release: Table <ref type="table">V</ref> shows the number of selfadmitted technical debt, the total number of changes, the ratio of self-admitted technical debt to total changes, and the ratio of self-admitted technical debt to the total number of selfadmitted technical debt at different times before a release for Eclipse, ArgoUML and Apache httpd. Note that we do not include the results for Chromium OS, since there has been only one public release of the project and hence we would not be able to derive a comparative analysis.</p><p>Initially, we measured the raw number of self-admitted technical debt at different time intervals before a release, however, we realized that the number of total changes will vary at different time intervals before a release as well. Therefore, we report the ratio of self-admitted technical debt to total changes and the ratio of self-admitted technical debt to the total number of self-admitted technical debt. We find that in all of the studied projects, most of the self-admitted technical debt is introduced more than 3 months before a release. In fact, in all the studied projects, less than 15% of the selfadmitted technical debt is introduced one month before the release. This finding leads us to the conclusion that in our case-study projects, release pressure does not play a major role in the introduction of self-admitted technical debt.  Release pressure does not play a major role in the introduction of self-admitted technical debt. Less than 15% of the self-admitted technical debt is introduced within 1 month of the latest release.</p><p>Results -Complexity: Table <ref type="table" target="#tab_5">VI</ref> shows the partial correlations between the number of self-admitted technical debt in a file and the McCabe cyclomatic complexity, fan-in and fan-out of the file, while controlling for size. We also indicate the p-value of the partial correlations next to the correlation value in the table.</p><p>From Table <ref type="table" target="#tab_5">VI</ref>, we find that for all projects, there is weak positive or weak negative correlation between the complexity metrics and self-admitted technical debt. Although this finding is not conclusive, the fact that all the correlation values are low indicates that, at least in terms of correlations, self-admitted technical debt is not correlated with any complexity metrics. It is important to note here that our finding is based on correlations and in no way indicate a causation.</p><p>When controlling for size, we find a weak to very weak correlation between the number of self-admitted technical debt in a file and complexity. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>RQ3. How much self-admitted technical debt is removed after its introduction?</head><p>Motivation: In the majority of cases, when self-admitted technical debt is introduced, they are meant to be removed or addressed later on. However, whether this self-admitted technical debt is indeed removed and exactly how much of this selfadmitted technical debt is removed is not known. Therefore, in this research question, we quantify the amount of self-admitted technical debt that is removed after its introduction. Approach: To determine how much self-admitted technical debt is removed, we compute how much of the self-admitted technical debt that was introduced remains in future releases.  ) are inconsistently changed. One possible reason for the increase in inconsistent changes is that as the time between base release and the actual release increases, developers forget that a self-admitted technical-debt comment existed and just update the code or update the comment without changing the code since it might have been addressed in another way. In any case, our findings show that the majority of the self-admitted technical debt is consistently changed (i.e., either the code and comments change consistently or the code and comments both do not change).</p><p>In this paper, we look at who introduces self-admitted technical debt but it would also be interesting to further delve into why less experienced developers introduce less technical debt, or if at all they simply do not admit it. Since most technical debt is never removed and introduced without any time pressure, should developers be taking specific precautions to avoid self-admitted technical debt. These further questions can be part of future work on this topic. In this section, we discuss the possible threats to the validity of our study: Threats to Internal Validity refers specifically to whether an experimental condition makes a difference or not, and whether there is sufficient evidence to support the claim of the study. To identify self-admitted technical debt, we needed to identify the comments that would distinguish such self-admitted technical debt. Since comments are written in natural language, they had to be analyzed manually to identify those that would indicate self-admitted technical debt. Any manual process is prone to human error and/or subjectivity. On the same point, as mentioned in our discussion section (Section V), in some cases, using the comments to determine some selfadmitted technical debt may not be fully representative since comments or code may not be updated consistently. As shown in Section V, most of the self-admitted technical debt is updated consistently. Furthermore, it is important to note that our work focuses on self-admitted technical debt and not all technical debt. There may exist a variety of technical debt that is not self-admitted. Considering all technical debt is out of the scope of this work.</p><p>Through manual examination, we identified a set of 62 recurring patterns that we use to determine self-admitted technical debt. We built this set by studying source-code comments of only the four projects we selected. Our choice of recurring patterns may have an impact on our findings. To help alleviate this threat, we manually examined each comment and performed this step using four different projects.</p><p>Threats to External Validity refers to the generalizability of the outcomes of the study. Our study uses four large, well-established open source software projects with well commented source code. Our results may not necessarily generalize to all other open source or commercial projects. A large part of our analysis depends on source-code patterns detected from the four studied projects. Hence, these patterns may be different for different projects.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VII. CONCLUSION</head><p>Developers knowingly commit code that is either incomplete, requires rework, produces errors, or is a temporary workaround. These temporary fixes are often referred to as technical debt, and in many cases, developers admit when they are coding such technical debt. We call such debt selfadmitted technical debt. Although such self-admitted technical debt is common, very little empirical evidence is known about self-admitted technical debt. Therefore, in this paper we perform an exploratory study, using four large open source projects, to determine how much self-admitted technical debt code exists, why self-admitted technical debt exists and how much of this self-admitted technical debt is removed after its introduction. Our findings show that 2.4 -31.0% of the files in a project contain self-admitted technical debt, that developers with higher experience tend to introduce more selfadmitted technical debt and that time pressure and complexity do not correlate with self-admitted technical debt. Finally, we find that even after multiple releases, only between 26.3 -63.5% of the self-admitted technical debt is removed after its introduction.</p><p>Our findings shed light on the extent and existence of selfadmitted technical debt and we plan (and hope that others) will use this study as motivation to dedicate more work on this important area of software maintenance. The findings also serve as motivation to build tools that support developers so they can avoid self-admitted technical debt or at least help them track and manage such self-admitted technical debt after its introduction.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Approach Overview</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .Fig. 3 .</head><label>23</label><figDesc>Fig. 2. Eclipse: Commits by E1</figDesc><graphic coords="5,341.32,72.98,184.36,133.74" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>Figures 2, 3, 4, and 5 show the commits for the top developers of the Eclipse Platform, Chromium OS, ArgoUML and Apache httpd, respectively. The gray line shows the cumulative number of commits by the developer and the 'x' indicates a self-admitted technical debt. In all cases, we observe that developers introduce self-admitted technical debt throughout their development experience, i.e., not only at the beginning of their development or later in their development experience.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .Fig. 5 .</head><label>45</label><figDesc>Fig. 4. ArgoUML: Commits by AU1</figDesc><graphic coords="6,342.48,313.96,183.33,133.86" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 6 .Fig. 7 .</head><label>67</label><figDesc>Fig. 6. Eclipse Risky Commits</figDesc><graphic coords="9,212.83,73.27,65.42,108.21" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Apache Risky Commits</figDesc><graphic coords="9,332.53,73.39,195.52,109.80" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>TABLE I</head><label>I</label><figDesc></figDesc><table><row><cell></cell><cell></cell><cell cols="2">PROJECT STATISTICS</cell><cell></cell><cell></cell></row><row><cell>Project</cell><cell cols="2">Release Release Date</cell><cell cols="3">Code Lines Comment Lines Committers</cell></row><row><cell>Eclipse</cell><cell>4.3</cell><cell>June 2013</cell><cell>659,231</cell><cell>437,640</cell><cell>221</cell></row><row><cell cols="2">Chromium OS 30</cell><cell>November 2009</cell><cell>107,706</cell><cell>37,889</cell><cell>1,784</cell></row><row><cell>ArgoUML</cell><cell>0.34</cell><cell>December 2011</cell><cell>122,575</cell><cell>115,713</cell><cell>53</cell></row><row><cell>Apache httpd</cell><cell>2.4.6</cell><cell>July 2913</cell><cell>192,333</cell><cell>54,295</cell><cell>145</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>TABLE VI PARTIAL</head><label>VI</label><figDesc>SPEARMAN CORRELATIONS BETWEEN CYCLOMATIC COMPLEXITY, FAN-IN, FAN-OUT AND THE NO. OF SELF-ADMITTED TECHNICAL DEBT WHILE CONTROLLING FOR SIZE</figDesc><table><row><cell>Project</cell><cell>Cyclomatic Comp.</cell><cell>Fan-in</cell><cell>Fan-out</cell></row><row><cell>Eclipse</cell><cell>-0.1992618 **</cell><cell>0.3159485</cell><cell>-0.08568448</cell></row><row><cell>Chromium OS</cell><cell>0.1840126 **</cell><cell>-0.01470615 *</cell><cell>-0.2529673 *</cell></row><row><cell>ArgoUML</cell><cell>-0.03449873 *</cell><cell>-0.01459957 *</cell><cell>0.1686399</cell></row><row><cell>Apache</cell><cell>0.2386505 **</cell><cell>0.3333192 ***</cell><cell>0.1108314 *</cell></row><row><cell></cell><cell cols="2">(p &lt; 0.01 ***; p &lt; 0.1 **; p &lt; 1 *)</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Table X</head><label>X</label><figDesc></figDesc><table><row><cell cols="2">shows our findings for each case in releases</cell></row><row><cell cols="2">R3.1 and R3.7. From the Table X, we observe that in R3.1</cell></row><row><cell cols="2">approximately 8.8% ( nical debt is inconsistently changed (i.e., belong to cases 2 14+11 57+14+11+203 ) of the self-admitted tech-</cell></row><row><cell>and 3). For R3.7, approximately 27.5% (</cell><cell>60+10 73+64+10+122</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>http://users.encs.concordia.ca/ eshihab/data/ICSME2014/satd.html</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>http://users.encs.concordia.ca/ eshihab/data/ICSME2014/satd.html</p></note>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>First, we identify all the self-admitted technical debt in the first release of the project. Then, we search for each of the identified self-admitted technical debt in the future releases.</p><p>It is important to note that we used the comments in the following releases to identify the self-admitted technical debt.</p><p>We discuss the implications of using this approach later in Section V. Since we could only identify a single public release of Chromium OS, we were unable to perform this analysis for Chromium OS.</p><p>Results: We present our results on a per project basis. Table VII shows the results for Eclipse. We started by identifying all of the 301 instances of self-admitted technical debt in release 3.0 and then measuring how much of this remained in the following releases. For Table <ref type="table">VIII</ref> shows the results for ArgoUML. Release 0.20 of ArgoUML had 75 instances of self-admitted technical debt. Of that, 37.3% was removed in the immediate next release. After seven releases, 65.3% of the self-admitted technical debt was removed. In contrast to Eclipse, in ArgoUML, most of the self-admitted technical debt was removed. However, similar to Eclipse, the majority of the self-admitted technical debt was removed after the first release.</p><p>Table <ref type="table">IX</ref> shows the results for Apache httpd. Release 1.3.0 had a total of 110 instances of self-admitted technical debt. After four major releases (in 10 years), 25.45% of the selfadmitted technical debt remains in the system. Similar to ArgoUML, we observe that the majority of self-admitted technical debt is removed. Furthermore, similar to both Eclipse and ArgoUML, most of the self-admitted technical debt is removed after one release.</p><p>We find that between 26.25% to 63.45% of the selfadmitted technical debt is removed in following releases. The majority of the self-admitted technical debt is removed in the immediate next release, however, selfadmitted technical debt tends to persist in software projects over multiple releases. V. DISCUSSION</p><p>In this paper, we answer questions related to how much, by who, when, and why self-admitted technical debt exist. To identify self-admitted technical debt, we used the comments provided by the developers themselves. For example, in RQ3, we used the comments to investigate how much self-admitted technical debt is removed in the future. However, if a developer updates the code without updating the comment, then we may wrongly assume that the self-admitted technical debt still exists, where in reality it does not.</p><p>Therefore, in this section, we quantify the scenarios where code and comments are updated inconsistently <ref type="bibr" target="#b10">[11]</ref>. In particular, we consider the following four cases:</p><p>Case1.The self-admitted technical debt was removed along with change in enclosing code Case2.The self-admitted technical debt was removed but enclosing code was unchanged Case3.The self-admitted technical debt persisted despite enclosing code changing Case4.The self-admitted technical debt persisted with no change in enclosing code In the listed cases, Case 1 and Case 4 are considered to be consistent updates, i.e., the code and comments were both updated or neither the code nor the comment were updated. Case 2 and Case 3 are the two problematic cases, i.e., where the code was updated but not the code and vice versa. To verify whether using the comments to identify self-admitted technical debt is a viable approach, we are mainly interested in quantifying the frequency of Cases 2 and 3.</p><p>To quantify the amount of inconsistent changes, we select the first release from each project and use that as the base version. For the base version of each project, we measure the number of self-admitted technical debt in each file. Then, we locate the file in future releases and subsequently match the comment and code to determine the various cases. We developed a tool that navigates through the files of the base version, identify a file containing the self-admitted technical debt, search for the file in the following releases and make both files easily available for us to analyze. Once the files were procured, we manually compared the code and comments of the files of the base version against the files in the future releases and categorized them under one of the four above mentioned cases. Due to space limitations, we perform this</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A balancing act: What software practitioners have to say about technical debt</title>
		<author>
			<persName><forename type="first">Erin</forename><surname>Lim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nitin</forename><surname>Taksande</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Carolyn</forename><surname>Seaman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Softw</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="22" to="27" />
			<date type="published" when="2012-11">November 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Investigating the impact of design debt on software quality. In Proceedings of the 2Nd Workshop on Managing Technical Debt, MTD &apos;11</title>
		<author>
			<persName><forename type="first">Nico</forename><surname>Zazworka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michele</forename><forename type="middle">A</forename><surname>Shaw</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Forrest</forename><surname>Shull</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Carolyn</forename><surname>Seaman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011">2011</date>
			<publisher>ACM</publisher>
			<biblScope unit="page" from="17" to="23" />
			<pubPlace>New York, NY, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Software Evolution</title>
		<author>
			<persName><forename type="first">Thomas</forename><surname>Zimmermann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nachiappan</forename><surname>Nagappan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andreas</forename><surname>Zeller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">chapter Predicting Bugs from History</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="69" to="88" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Toward an understanding of bug fix patterns</title>
		<author>
			<persName><forename type="first">Kai</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sunghun</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">James</forename><surname>Whitehead</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jr</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Empirical Softw. Engg</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="286" to="315" />
			<date type="published" when="2009-06">June 2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Rework requirement changes in software maintenance</title>
		<author>
			<persName><forename type="first">Bee</forename><surname>Bee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chua</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2010 Fifth International Conference on Software Engineering Advances, ICSEA &apos;10</title>
		<meeting>the 2010 Fifth International Conference on Software Engineering Advances, ICSEA &apos;10<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="252" to="258" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">/*icomment: Bugs or bad comments?*</title>
		<author>
			<persName><forename type="first">Lin</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ding</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gopal</forename><surname>Krishna</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yuanyuan</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGOPS Oper. Syst. Rev</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="145" to="158" />
			<date type="published" when="2007-10">October 2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Examining the evolution of code comments in postgresql</title>
		<author>
			<persName><forename type="first">Ming</forename><surname>Zhen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ahmed</forename><forename type="middle">E</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><surname>Hassan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2006 International Workshop on Mining Software Repositories, MSR &apos;06</title>
		<meeting>the 2006 International Workshop on Mining Software Repositories, MSR &apos;06<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="179" to="180" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Do code and comments co-evolve? on the relation between source code and comment changes</title>
		<author>
			<persName><forename type="first">Beat</forename><surname>Fluri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Wursch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Harald</forename><forename type="middle">C</forename><surname>Gall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th Working Conference on Reverse Engineering, WCRE &apos;07</title>
		<meeting>the 14th Working Conference on Reverse Engineering, WCRE &apos;07<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="70" to="79" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Todo or to bug: Exploring how task annotations play a role in the work practices of software developers</title>
		<author>
			<persName><forename type="first">Margaret-Anne</forename><surname>Storey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jody</forename><surname>Ryall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">Ian</forename><surname>Bull</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Del</forename><surname>Myers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Janice</forename><surname>Singer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 30th International Conference on Software Engineering, ICSE &apos;08</title>
		<meeting>the 30th International Conference on Software Engineering, ICSE &apos;08<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="251" to="260" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Understanding the rationale for updating a function&apos;s comment</title>
		<author>
			<persName><forename type="first">Haroon</forename><surname>Malik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Istehad</forename><surname>Chowdhury</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hsiao-Ming</forename><surname>Tsou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhen</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Ming</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ahmed</forename><forename type="middle">E</forename><surname>Hassan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICSM</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="167" to="176" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">@tcomment: Testing javadoc comments to detect comment-code inconsistencies</title>
		<author>
			<persName><forename type="first">Shin</forename><surname>Hwei Tan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Darko</forename><surname>Marinov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lin</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gary</forename><forename type="middle">T</forename><surname>Leavens</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation, ICST &apos;12</title>
		<meeting>the 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation, ICST &apos;12<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="260" to="269" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Automatic quality assessment of source code comments: The javadocminer</title>
		<author>
			<persName><forename type="first">Ninus</forename><surname>Khamis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">René</forename><surname>Witte</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Juergen</forename><surname>Rilling</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Natural Language Processing and Information Systems, and 15th International Conference on Applications of Natural Language to Information Systems, NLDB&apos;10</title>
		<meeting>the Natural Language Processing and Information Systems, and 15th International Conference on Applications of Natural Language to Information Systems, NLDB&apos;10<address><addrLine>Berlin, Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="68" to="79" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Listening to programmers taxonomies and characteristics of comments in operating system code</title>
		<author>
			<persName><forename type="first">Yoann</forename><surname>Padioleau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lin</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yuanyuan</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 31st International Conference on Software Engineering, ICSE &apos;09</title>
		<meeting>the 31st International Conference on Software Engineering, ICSE &apos;09<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="331" to="341" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A case study on effectively identifying technical debt</title>
		<author>
			<persName><forename type="first">Nico</forename><surname>Zazworka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rodrigo</forename><forename type="middle">O</forename><surname>Spínola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Antonio</forename><surname>Vetro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">'</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Forrest</forename><surname>Shull</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Carolyn</forename><surname>Seaman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 17th International Conferenceon Evaluation and Assessment in Software Engineering, EASE &apos;13</title>
		<meeting>the 17th International Conferenceon Evaluation and Assessment in Software Engineering, EASE &apos;13<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="42" to="47" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Technical debt: Towards a crisper definition report on the 4th international workshop on managing technical debt</title>
		<author>
			<persName><forename type="first">Philippe</forename><surname>Kruchten</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Robert</forename><forename type="middle">L</forename><surname>Nord</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ipek</forename><surname>Ozkaya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Davide</forename><surname>Falessi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGSOFT Softw. Eng. Notes</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="51" to="54" />
			<date type="published" when="2013-08">August 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Tracking technical debt -an exploratory case study</title>
		<author>
			<persName><forename type="first">Yuepu</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Carolyn</forename><surname>Seaman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rebeka</forename><surname>Gomes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Antonio</forename><surname>Cavalcanti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Graziela</forename><surname>Tonin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><forename type="middle">B</forename><surname>Fabio</surname></persName>
		</author>
		<author>
			<persName><surname>Da</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andre</forename><forename type="middle">L M</forename><surname>Silva</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Clauirton</forename><surname>Santos</surname></persName>
		</author>
		<author>
			<persName><surname>Siebra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2011 27th IEEE International Conference on Software Maintenance, ICSM &apos;11</title>
		<meeting>the 2011 27th IEEE International Conference on Software Maintenance, ICSM &apos;11<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="528" to="531" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Chrome release channels</title>
		<author>
			<persName><surname>Google</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Lightweight transformation and fact extraction with the srcml toolkit</title>
		<author>
			<persName><forename type="first">L</forename><surname>Michael</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><forename type="middle">John</forename><surname>Collard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathan</forename><forename type="middle">I</forename><surname>Decker</surname></persName>
		</author>
		<author>
			<persName><surname>Maletic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SCAM</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="173" to="184" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Managing technical debt</title>
		<author>
			<persName><forename type="first">Eric</forename><surname>Allman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">55</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="50" to="55" />
			<date type="published" when="2012-05">May 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Don&apos;t touch my code!: Examining the effects of ownership on software quality</title>
		<author>
			<persName><forename type="first">Christian</forename><surname>Bird</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nachiappan</forename><surname>Nagappan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Brendan</forename><surname>Murphy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Harald</forename><surname>Gall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Premkumar</forename><surname>Devanbu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering, ESEC/FSE &apos;11</title>
		<meeting>the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering, ESEC/FSE &apos;11<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="4" to="14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">An industrial study on the risk of software changes</title>
		<author>
			<persName><forename type="first">Emad</forename><surname>Shihab</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ahmed</forename><forename type="middle">E</forename><surname>Hassan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bram</forename><surname>Adams</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhen</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Ming</forename><surname>Jiang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, FSE &apos;12</title>
		<meeting>the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, FSE &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="volume">62</biblScope>
			<biblScope unit="page" from="1" to="62" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m">SAS. Base sas(r) 9.2 procedures guide: Statistical procedures</title>
		<imprint/>
	</monogr>
	<note>third edition</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
