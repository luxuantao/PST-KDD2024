<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">PyTorch: An Imperative Style, High-Performance Deep Learning Library</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2019-12-03">3 Dec 2019</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Adam</forename><surname>Paszke</surname></persName>
							<email>adam.paszke@gmail.com</email>
						</author>
						<author>
							<persName><forename type="first">Sam</forename><surname>Gross</surname></persName>
							<email>sgross@fb.com</email>
						</author>
						<author>
							<persName><forename type="first">Francisco</forename><surname>Massa</surname></persName>
							<email>fmassa@fb.com</email>
						</author>
						<author>
							<persName><forename type="first">Adam</forename><surname>Lerer</surname></persName>
							<email>alerer@fb.com</email>
						</author>
						<author>
							<persName><forename type="first">James</forename><surname>Bradbury</surname></persName>
							<email>jekbradbury@gmail.com</email>
						</author>
						<author>
							<persName><forename type="first">Gregory</forename><surname>Chanan</surname></persName>
							<email>gchanan@fb.com</email>
						</author>
						<author>
							<persName><forename type="first">Trevor</forename><surname>Killeen</surname></persName>
							<email>killeent@cs.washington.edu</email>
						</author>
						<author>
							<persName><forename type="first">Zeming</forename><surname>Lin</surname></persName>
							<email>zlin@fb.com</email>
						</author>
						<author>
							<persName><forename type="first">Natalia</forename><surname>Gimelshein</surname></persName>
							<email>ngimelshein@nvidia.com</email>
						</author>
						<author>
							<persName><forename type="first">Luca</forename><surname>Antiga</surname></persName>
							<email>luca.antiga@orobix.com</email>
						</author>
						<author>
							<persName><forename type="first">Alban</forename><surname>Desmaison</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Andreas</forename><surname>KÃ¶pf</surname></persName>
							<email>andreas.koepf@xamla.com</email>
						</author>
						<author>
							<persName><forename type="first">Edward</forename><surname>Yang</surname></persName>
							<email>ezyang@fb.com</email>
						</author>
						<author>
							<persName><forename type="first">Zach</forename><surname>Devito</surname></persName>
							<email>zdevito@cs.stanford.edu</email>
						</author>
						<author>
							<persName><forename type="first">Martin</forename><surname>Raison</surname></persName>
							<email>martinraison@gmail.com</email>
						</author>
						<author>
							<persName><forename type="first">Alykhan</forename><surname>Tejani</surname></persName>
							<email>atejani@twitter.com</email>
						</author>
						<author>
							<persName><forename type="first">Sasank</forename><surname>Chilamkurthy</surname></persName>
							<email>sasankchilamkurthy@gmail.com</email>
						</author>
						<author>
							<persName><forename type="first">Benoit</forename><surname>Steiner</surname></persName>
							<email>benoitsteiner@fb.com</email>
						</author>
						<author>
							<persName><forename type="first">Lu</forename><surname>Fang</surname></persName>
							<email>lufang@fb.com</email>
						</author>
						<author>
							<persName><forename type="first">Junjie</forename><surname>Bai</surname></persName>
							<email>jbai@fb.com</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">University of Warsaw</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Facebook AI Research</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">Facebook AI Research</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<orgName type="institution">Oxford University</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff4">
								<orgName type="department">Facebook AI Research</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff5">
								<orgName type="department">Facebook AI Research</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff6">
								<orgName type="laboratory">33rd Conference on Neural Information Processing Systems</orgName>
								<address>
									<postCode>2019)</postCode>
									<settlement>Vancouver</settlement>
									<region>NeurIPS</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">PyTorch: An Imperative Style, High-Performance Deep Learning Library</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2019-12-03">3 Dec 2019</date>
						</imprint>
					</monogr>
					<idno type="arXiv">arXiv:1912.01703v1[cs.LG]</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2022-12-25T12:38+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Deep learning frameworks have often focused on either usability or speed, but not both. PyTorch is a machine learning library that shows that these two goals are in fact compatible: it provides an imperative and Pythonic programming style that supports code as a model, makes debugging easy and is consistent with other popular scientific computing libraries, while remaining efficient and supporting hardware accelerators such as GPUs. In this paper, we detail the principles that drove the implementation of PyTorch and how they are reflected in its architecture. We emphasize that every aspect of PyTorch is a regular Python program under the full control of its user. We also explain how the careful and pragmatic implementation of the key components of its runtime enables them to work together to achieve compelling performance. We demonstrate the efficiency of individual subsystems, as well as the overall speed of PyTorch on several common benchmarks.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>With the increased interest in deep learning in recent years, there has been an explosion of machine learning tools. Many popular frameworks such as Caffe <ref type="bibr" target="#b0">[1]</ref>, CNTK <ref type="bibr" target="#b1">[2]</ref>, TensorFlow <ref type="bibr" target="#b2">[3]</ref>, and Theano <ref type="bibr" target="#b3">[4]</ref>, construct a static dataflow graph that represents the computation and which can then be applied repeatedly to batches of data. This approach provides visibility into the whole computation ahead of time, and can theoretically be leveraged to improve performance and scalability. However, it comes at the cost of ease of use, ease of debugging, and flexibility of the types of computation that can be represented.</p><p>Prior work has recognized the value of dynamic eager execution for deep learning, and some recent frameworks implement this define-by-run approach, but do so either at the cost of performance (Chainer <ref type="bibr" target="#b4">[5]</ref>) or using a less expressive, faster language (Torch <ref type="bibr" target="#b5">[6]</ref>, DyNet <ref type="bibr" target="#b6">[7]</ref>), which limits their applicability.</p><p>However, with careful implementation and design choices, dynamic eager execution can be achieved largely without sacrificing performance. This paper introduces PyTorch, a Python library that performs immediate execution of dynamic tensor computations with automatic differentiation and GPU acceleration, and does so while maintaining performance comparable to the fastest current libraries for deep learning. This combination has turned out to be very popular in the research community with, for instance, 296 ICLR 2019 submissions mentioning PyTorch.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head><p>Four major trends in scientific computing have become increasingly important for deep learning.</p><p>First, starting in the 1960s, the development of domain specific languages such as APL <ref type="bibr" target="#b7">[8]</ref>, MATLAB [9], R <ref type="bibr" target="#b8">[10]</ref> and Julia <ref type="bibr" target="#b9">[11]</ref>, turned multidimensional arrays (often referred to as tensors) into first-class objects supported by a comprehensive set of mathematical primitives (or operators) to manipulate them. Separately, libraries such as NumPy <ref type="bibr" target="#b10">[12]</ref>, Torch <ref type="bibr" target="#b5">[6]</ref>, Eigen <ref type="bibr" target="#b11">[13]</ref> and Lush <ref type="bibr" target="#b12">[14]</ref> made array-based programming productive in general purpose languages such as Python, Lisp, C++ and Lua.</p><p>Second, the development of automatic differentiation <ref type="bibr" target="#b13">[15]</ref> made it possible to fully automate the daunting labor of computing derivatives. This made it significantly easier to experiment with different machine learning approaches while still allowing for efficient gradient based optimization. The autograd <ref type="bibr" target="#b14">[16]</ref> package popularized the use of this technique for NumPy arrays, and similar approaches are used in frameworks such as Chainer <ref type="bibr" target="#b4">[5]</ref>, DyNet <ref type="bibr" target="#b6">[7]</ref>, Lush <ref type="bibr" target="#b12">[14]</ref>, Torch <ref type="bibr" target="#b5">[6]</ref>, Jax <ref type="bibr" target="#b15">[17]</ref> and Flux.jl <ref type="bibr" target="#b16">[18]</ref>.</p><p>Third, with the advent of the free software movement, the scientific community moved away from closed proprietary software such as Matlab[9], and towards the open-source Python ecosystem with packages like NumPy <ref type="bibr" target="#b10">[12]</ref>, SciPy <ref type="bibr" target="#b17">[19]</ref>, and Pandas <ref type="bibr" target="#b18">[20]</ref>. This fulfilled most of the numerical analysis needs of researchers while allowing them to take advantage of a vast repository of libraries to handle dataset preprocessing, statistical analysis, plotting, and more. Moreover, the openness, interoperability, and flexibility of free software fostered the development of vibrant communities that could quickly address new or changing needs by extending the existing functionality of a library or if needed by developing and releasing brand new ones. While there is a rich offering of open-source software for neural networks in languages other than Python, starting with Lush <ref type="bibr" target="#b12">[14]</ref> in Lisp, Torch <ref type="bibr" target="#b5">[6]</ref> in C++, Objective-C and Lua, EBLearn <ref type="bibr" target="#b19">[21]</ref> in C++, Caffe <ref type="bibr" target="#b0">[1]</ref> in C++, the network effects of a large ecosystem such as Python made it an essential skill to jumpstart one's research. Hence, since 2014, most deep learning frameworks converged on a Python interface as an essential feature.</p><p>Finally, the availability and commoditization of general-purpose massively parallel hardware such as GPUs provided the computing power required by deep learning methods. Specialized libraries such as cuDNN <ref type="bibr" target="#b20">[22]</ref>, along with a body of academic work (such as <ref type="bibr" target="#b21">[23]</ref> and <ref type="bibr" target="#b22">[24]</ref>), produced a set of high-performance reusable deep learning kernels that enabled frameworks such as Caffe <ref type="bibr" target="#b0">[1]</ref>, Torch7 <ref type="bibr" target="#b23">[25]</ref>, or TensorFlow <ref type="bibr" target="#b2">[3]</ref> to take advantage of these hardware accelerators.</p><p>PyTorch builds on these trends by providing an array-based programming model accelerated by GPUs and differentiable via automatic differentiation integrated in the Python ecosystem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Design principles</head><p>PyTorch's success stems from weaving previous ideas into a design that balances speed and ease of use. There are four main principles behind our choices:</p><p>Be Pythonic Data scientists are familiar with the Python language, its programming model, and its tools. PyTorch should be a first-class member of that ecosystem. It follows the commonly established design goals of keeping interfaces simple and consistent, ideally with one idiomatic way of doing things. It also integrates naturally with standard plotting, debugging, and data processing tools.</p><p>Put researchers first PyTorch strives to make writing models, data loaders, and optimizers as easy and productive as possible. The complexity inherent to machine learning should be handled internally by the PyTorch library and hidden behind intuitive APIs free of side-effects and unexpected performance cliffs.</p><p>Provide pragmatic performance To be useful, PyTorch needs to deliver compelling performance, although not at the expense of simplicity and ease of use. Trading 10% of speed for a significantly simpler to use model is acceptable; 100% is not. Therefore, its implementation accepts added complexity in order to deliver that performance. Additionally, providing tools that allow researchers to manually control the execution of their code will empower them to find their own performance improvements independent of those that the library provides automatically.</p><p>Worse is better <ref type="bibr" target="#b24">[26]</ref> Given a fixed amount of engineering resources, and all else being equal, the time saved by keeping the internal implementation of PyTorch simple can be used to implement additional features, adapt to new situations, and keep up with the fast pace of progress in the field of AI. Therefore it is better to have a simple but slightly incomplete solution than a comprehensive but complex and hard to maintain design.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Usability centric design 4.1 Deep learning models are just Python programs</head><p>In a surprisingly short amount of time, machine learning grew from recognizing individual digits <ref type="bibr" target="#b25">[27]</ref> into autonomously playing StarCraft <ref type="bibr" target="#b26">[28]</ref>. Consequently, the neural networks themselves evolved rapidly from simple sequences of feed forward layers into incredibly varied numerical programs often composed of many loops and recursive functions. To support this growing complexity, PyTorch foregoes the potential benefits of a graph-metaprogramming based approach to preserve the imperative programming model of Python. This design was pioneered for model authoring by Chainer <ref type="bibr" target="#b4">[5]</ref> and Dynet <ref type="bibr" target="#b6">[7]</ref>. PyTorch extends this to all aspects of deep learning workflows. Defining layers, composing models, loading data, running optimizers, and parallelizing the training process are all expressed using the familiar concepts developed for general purpose programming. This solution ensures that any new potential neural network architecture can be easily implemented with PyTorch. For instance, layers (which in modern machine learning should really be understood as stateful functions with implicit parameters) are typically expressed as Python classes whose constructors create and initialize their parameters, and whose forward methods process an input activation. Similarly, models are usually represented as classes that compose individual layers, but let us state again that nothing forces the user to structure their code in that way. Listing 1 demonstrates how an entire model can be created by composing functionality provided by PyTorch such as 2d convolution, matrix multiplication, dropout, and softmax to classify gray-scale images. Note that linear layers are of course part of the library, but we show an example implementation to highlight how simple it is. This "everything is a just a program" philosophy is not limited to just the models, and applies to optimizers and data loaders as well. This facilitates the experimentation of new training techniques. For example, to implement the very popular generative adversarial networks, one needs to specify two separate models (the generator and the discriminator), and two loss functions that depend on both models at the same time. Rigid APIs would struggle with this setup, but the simple design employed in PyTorch easily adapts to this setting as shown in Listing 2. Since PyTorch programs execute eagerly, all the features of Python are available throughout the whole design process. Print statements, standard debuggers, and common visualization tools like matplotlib all work as expected. Users do not have to wait for lengthy compilation before they can start running their programs, and more importantly intermediate computations can be observed to understand how a model works and whether its results are correct.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Interoperability and extensibility</head><p>Easy and efficient interoperability is one of the top priorities for PyTorch because it opens the possibility to leverage the rich ecosystem of Python libraries as part of user programs. Hence, PyTorch allows for bidirectional exchange of data with external libraries. For example, it provides a mechanism to convert between NumPy arrays and PyTorch tensors using the torch.from_numpy() function and .numpy() tensor method. Similar functionality is also available to exchange data stored using the DLPack <ref type="bibr" target="#b27">[29]</ref> format. Note that this exchange happens in both cases without any data copying -objects on both sides only describe how to interpret a memory region which is shared among them. Hence, those operations are actually extremely cheap, and take constant time no matter how large the converted arrays are.</p><p>Moreover, many of the critical systems are designed specifically to be extensible. For instance, the automatic differentiation system allows users to add support for custom differentiable functions.</p><p>To do that users can define a new subclass of torch.autograd.Function that implements forward() and backward() methods, which specify the function and its derivative (or more formally the vector-Jacobian product). Similarly new datasets can be added by subclassing torch.utils.data.Dataset and implementing two methods: __getitem__ (the indexing operator) and __len__ (the length operator), making datasets behave like (possibly lazy) lists. How these work is completely up to the implementer, and many users leverage other Python packages for data loading. The DataLoader class consumes objects conforming to this interface and provides an iterator over the data which takes care of shuffling, batching, parallelization, and management of pinned CUDA memory to improve throughput.</p><p>Most importantly, users are free to replace any component of PyTorch that does not meet the needs or performance requirements of their project. They are all designed to be completely interchangeable, and PyTorch takes great care not to impose any particular solution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Automatic differentiation</head><p>Since gradient based optimization is vital to deep learning, PyTorch must be able to automatically compute gradients of models specified by our users, and those can be arbitrary Python programs. However, Python is a dynamic programming language that allows changing most behaviors at runtime, making ahead of time source-to-source differentiation cumbersome. Instead, PyTorch uses the operator overloading approach, which builds up a representation of the computed function every time it is executed. In its current implementation <ref type="bibr" target="#b28">[30]</ref>, PyTorch performs reverse-mode automatic differentiation, which computes the gradient of a scalar output with respect to a multivariate input. Differentiating functions with more outputs than inputs is more efficiently executed using forwardmode automatic differentiation, but this use case is less common for machine learning applications.</p><p>PyTorch can be easily extended to perform forward-mode differentiation using array-level dual numbers <ref type="bibr" target="#b29">[31,</ref><ref type="bibr" target="#b30">32]</ref>.</p><p>Another interesting and uncommon feature of our system is that it can differentiate through code employing mutation on tensors, which is one of the basic building blocks of imperative programs.</p><p>To ensure safety, we have implemented a versioning system for tensors, which lets us track their modifications and ensure that we always use the data we expect. One interesting tradeoff is that while we could utilize techniques like copy-on-write to support arbitrary programs, we chose to not go down this path, as performance-wise it is usually beneficial for the users to rewrite their code to ensure that no copies have to be performed. Hence, while most mutations are benign and can be handled automatically, the really complicated cases result in a user error, which lets them know that they likely want to restructure the program. This allows us to avoid introducing subtle and hard-to-find performance cliffs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Performance focused implementation</head><p>Running deep learning algorithms efficiently from a Python interpreter is notoriously challenging: for instance, the global interpreter lock <ref type="bibr" target="#b31">[33]</ref> effectively ensures that only one of any number of concurrent threads is running at any given time. Deep learning frameworks based on the construction of a static data-flow graph sidestep this problem by deferring the evaluation of the computation to a custom interpreter.</p><p>PyTorch solved the problem differently, by carefully optimizing every aspect of its execution while simultaneously empowering its users to easily leverage additional optimization strategies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">An efficient C++ core</head><p>Despite being closely integrated in the Python ecosystem, most of PyTorch is written in C++ to achieve high performance. This core libtorch library implements the tensor data structure, the GPU and CPU operators, and basic parallel primitives. It also provides the automatic differentiation system, including the gradient formulas for most built-in functions. This ensures that the computation of the derivatives of functions composed of core PyTorch operators is executed entirely in a multithreaded evaluator which does not require holding the Python global interpreter lock <ref type="bibr" target="#b31">[33]</ref>. Python bindings are generated using YAML meta-data files. An interesting side-effect of this approach is that it allowed our community to quickly create bindings to multiple other languages resulting in projects like NimTorch <ref type="bibr" target="#b32">[34]</ref>, hasktorch <ref type="bibr" target="#b33">[35]</ref> and others.</p><p>This design also allowed us to create first-class C++ bindings and modeling libraries that can be used in places where Python is inconvenient, such as the game engine for Starcraft <ref type="bibr" target="#b34">[36]</ref> or on mobile platforms. It is even possible to take the Python code describing a PyTorch model and run it without Python using the TorchScript engine <ref type="bibr" target="#b35">[37]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Separate control and data flow</head><p>PyTorch maintains a strict separation between its control (i.e. program branches, loops) and data flow (i.e. tensors and the operations performed on them). The resolution of the control flow is handled by Python and optimized C++ code executed on the host CPU, and result a linear sequence of operator invocations on the device. Operators can be run either on CPU or on GPU.</p><p>PyTorch is designed to execute operators asynchronously on GPU by leveraging the CUDA stream mechanism <ref type="bibr" target="#b36">[38]</ref> to queue CUDA kernel invocations to the GPUs hardware FIFO. This allows the system to overlap the execution of Python code on CPU with tensor operators on GPU. Because the tensor operations usually take a significant amount of time, this lets us saturate the GPU and reach peak performance even in an interpreted language with fairly high overhead like Python. Note that this mechanism is nearly invisible to the user. Unless they implement their own multi-stream primitives all of the CPU-GPU synchronization is handled by the library.</p><p>PyTorch could leverage a similar mechanism to also execute operators asynchronously on the CPU. However the costs of cross-thread communication and synchronization would negate the performance benefit of such an optimization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Custom caching tensor allocator</head><p>Almost every operator must dynamically allocate an output tensor to hold the result of its execution.</p><p>It is therefore critical to optimize the speed of the dynamic memory allocators. PyTorch can rely on optimized libraries <ref type="bibr" target="#b37">[39]</ref><ref type="bibr" target="#b38">[40]</ref><ref type="bibr" target="#b39">[41]</ref> to handle this task on CPU. However, on GPU the cudaFree routine may block its caller until all previously queued work on all GPUs completes. To avoid this bottleneck, PyTorch implements a custom allocator which incrementally builds up a cache of CUDA memory and reassigns it to later allocations without further use of CUDA APIs. The incremental allocation is also crucial for better interoperability, because taking up all GPU memory ahead of time would prevent the user from utilizing other GPU-enabled Python packages.</p><p>To further improve its effectiveness, this allocator was tuned for the specific memory usage patterns of deep learning. For example, it rounds up allocations to multiples of 512 bytes to avoid fragmentation issues. Moreover, it maintains a distinct pool of memory for every CUDA stream (work queue).</p><p>The one-pool-per-stream design assumption simplifies the implementation and improves the performance of the allocator: because the CPU runs ahead of the GPU, memory is freed on the CPU before its last use on the GPU finishes. Since streams serialize execution, if the free precedes the reallocation on the CPU, the same order will occur on the GPU. So the allocator can reallocate memory freed on the CPU immediately as long as the new allocation is used on the same stream as the freed region. However, if an allocation was last used on one stream and then allocated on another, additional synchronization is needed.</p><p>The one-pool-per-stream design seems limiting since the allocations end up fragmented per stream, but in practice PyTorch almost never uses multiple streams. It is notoriously hard to write CUDA kernels in a way that would let them cooperatively share the GPU because exact scheduling is hardware controlled. In practice, kernel writers usually resort to monolithic kernels that combine multiple tasks. Data loading and distributed computing utilities are exceptions to the one stream design, and they carefully insert additional synchronization to avoid bad interactions with the allocator.</p><p>While this design is susceptible to certain corner cases, it almost never exhibits unwanted behaviors in practical code. Most of our users are not aware of its existence.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Multiprocessing</head><p>Due to the global interpreter lock (GIL) Python's default implementation does not allow concurrent threads to execute in parallel. To alleviate this problem, the Python community has established a standard multiprocessing module, containing a number of utilities that allow users to easily spawn child processes and implement basic inter-process communication primitives.</p><p>However, the implementation of the primitives uses the same form of serialization used for on-disk persistence, which is inefficient when dealing with large arrays. Hence, PyTorch extends the Python multiprocessing module into torch.multiprocessing, which is a drop-in replacement for the built in package and automatically moves the data of tensors sent to other processes to shared memory instead of sending it over the communication channel.</p><p>This design greatly improves performance and makes the process isolation weaker, resulting in a programming model which more closely resembles regular threaded programs. Users can easily implement heavily parallel programs that operate on independent GPUs but later synchronize gradients using all-reduce style primitives.</p><p>Another unique feature of this system is that it transparently handles sharing of CUDA tensors, making it easy to implement techniques like Hogwild <ref type="bibr" target="#b40">[42]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Reference counting</head><p>Users often design their models to utilize all memory available during training, and increasing batch sizes is a common technique of speeding up the process. Therefore, to deliver great performance, PyTorch has to treat memory as a scarce resource that it needs to manage carefully.</p><p>Libraries with eager semantics have to manage tensor memory without knowing how it will be used in the future. Garbage collection is the typical way to handle this automatically because it has good amortized performance. In this approach, the runtime periodically investigates the state of the system, enumerates used objects and frees everything else. However, by deferring the deallocation, it causes the program to use more memory overall <ref type="bibr" target="#b41">[43]</ref>. Given the scarcity of GPU memory, these overheads are unacceptable. In fact, Torch7 utilized the garbage collector built into Lua, and a common antipattern among the users was to sprinkle the program with explicit triggers to the garbage collector, hoping that the memory errors go away.</p><p>PyTorch takes a different approach: it relies on a reference counting scheme to track the number of uses of each tensor, and frees the underlying memory immediately once this count reaches zero. Note that PyTorch tracks both references internal to the libtorch library and external references made by users in their Python code by integrating with Python's own reference counting mechanism. This ensures that memory is released exactly when tensors become unneeded.</p><p>One notable caveat is that we can only guarantee the desired performance characteristics in implementations of languages that either already utilize reference counting (CPython, Swift, but not PyPy or many scripting languages such as Lua), and those that allow for user-defined behavior for assignment, copies, and moves (e.g. C++, Rust). Bindings to implementations that do not satisfy those criteria will have to implement their own specialized memory management on top of PyTorch.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Evaluation</head><p>In this section we compare the performance of PyTorch with several other commonly-used deep learning libraries, and find that it achieves competitive performance across a range of tasks. All experiments were performed on a workstation with two Intel Xeon E5-2698 v4 CPUs and one NVIDIA Quadro GP100 GPU.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Asynchronous dataflow</head><p>We start by quantifying the ability of PyTorch to asynchronously execute dataflow on GPU. We use the built-in profiler <ref type="bibr" target="#b42">[44]</ref> to instrument various benchmarks and record a timeline of the execution of a single training step.</p><p>Figure <ref type="figure" target="#fig_2">1</ref> shows a representative timeline of execution for the first few operations of a ResNet-50 model. The host CPU which queues the work quickly outpaces the execution of the operators on the GPU. This allows PyTorch to achieve almost perfect device utilization. In this example, GPU execution takes around three times longer than CPU scheduling. The exact ratio depends on the relative performance of the host CPU and the GPU, as well as the number of elements in each tensor and the average arithmetic complexity of the floating point computations to be performed on the GPU. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Memory management</head><p>We used the NVIDIA profiler to trace the execution of the CUDA runtime as well as the execution of the CUDA kernels launched during one training iteration of the ResNet-50 model. As shown in Figure <ref type="figure" target="#fig_1">2</ref>, the behavior of the first iteration differs significantly from that of subsequent ones. At first, calls to the CUDA memory management functions (cudaMalloc and cudaFree) slow down the execution quite dramatically by blocking the CPU thread for long periods of time, hence lowering the utilization of the GPU. This effect disappears in subsequent iterations as the PyTorch caching memory allocator starts reusing previously allocated regions. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Benchmarks</head><p>Finally, we can get an overall sense of single-machine eager mode performance of PyTorch by comparing it to three popular graph-based deep learning frameworks (CNTK, MXNet and TensorFlow), a define-by-run framework (Chainer), and production oriented platform (PaddlePaddle). The Appendix details all the steps needed to reproduce our setup.</p><p>Our results are summarized in Table <ref type="table" target="#tab_0">1</ref>. On all the benchmarks, the performance of PyTorch is within 17% of that of of the fastest framework. We attribute this result to the fact that these tools offload most of the computation to the same version of the cuDNN and cuBLAS libraries. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.4">Adoption</head><p>The validity of design decisions and their impact on ease-of-use is hard to measure. As a proxy, we tried to quantify how well the machine learning community received PyTorch by counting how often various machine learning tools (including Caffe, Chainer, CNTK, Keras, MXNet, PyTorch, TensorFlow, and Theano) are mentioned on arXiv e-Prints since the initial release of PyTorch in January 2017. In Figure <ref type="figure" target="#fig_4">3</ref> we report the monthly number of mentions of the word "PyTorch" as a percentage of all mentions among these deep learning frameworks. We counted tools mentioned multiple times in a given paper only once, and made the search case insensitive to account for various spellings. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion and future work</head><p>PyTorch has become a popular tool in the deep learning research community by combining a focus on usability with careful performance considerations. In addition to continuing to support the latest trends and advances in deep learning, in the future we plan to continue to improve the speed and scalability of PyTorch. Most notably, we are working on the PyTorch JIT: a suite of tools that allow PyTorch programs to be executed outside of the Python interpreter where they can be further optimized. We also intend to improve support for distributed computation by providing efficient primitives for data parallelism as well as a Pythonic library for model parallelism based around remote procedure calls.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>nn.Module): def __init__(self, in_sz, out_sz): def __init__(self): super().__init__() super().__init__() t1 = torch.randn(in_sz, out_sz) self.conv = nn.Conv2d(1, 128, 3) self.w = nn.Parameter(t1) self.fc = LinearLayer(128, 10) t2 = torch.randn(out_sz) self.b = nn.Parameter(t2) def forward(self, x): t1 = self.conv(x) def forward(self, activations): t2 = nn.functional.relu(t1) t = torch.mm(activations, self.w) t3 = self.fc(t1) return t + self.b return nn.functional.softmax(t3) Listing 1: A custom layer used as a building block for a simple but complete neural network.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Listing 2 :</head><label>2</label><figDesc>discriminator = create_discriminator() generator = create_generator() optimD = optim.Adam(discriminator.parameters()) optimG = optim.Adam(generator.parameters()) def step(real_sample): # (1) Update Discriminator errD_real = loss(discriminator(real_sample), real_label) errD_real.backward() fake = generator(get_noise()) errD_fake = loss(discriminator(fake.detach(), fake_label) errD_fake.backward() optimD.step() # (2) Update Generator errG = loss(discriminator(fake), real_label) errG.backward() optimG.step() Simplified training of a generative adversarial networks.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: A trace of the first few operators of Resnet-50. The top row depicts the execution of the control flow running on the host CPU. The gray areas are Python code executed by its interpreter. The colored areas correspond to the work done on the host CPU to queue various operators (convolution, batch normalization, and so on). The bottom row shows the corresponding execution of those operators on the GPU. The arrows pair the two events in time.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Annotated traces of the execution of ResNet-50 on GPU.</figDesc><graphic url="image-2.png" coords="8,108.00,365.93,395.99,53.62" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Among arXiv papers each month that mention common deep learning frameworks, percentage of them that mention PyTorch.</figDesc><graphic url="image-3.png" coords="9,108.00,192.29,395.75,82.65" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Training speed for 6 models using 32bit floats. Throughput is measured in images per second for the AlexNet, VGG-19, ResNet-50, and MobileNet models, in tokens per second for the GNMTv2 model, and in samples per second for the NCF model. The fastest speed for each model is shown in bold.</figDesc><table><row><cell>Framework</cell><cell>AlexNet</cell><cell cols="4">Throughput (higher is better) VGG-19 ResNet-50 MobileNet GNMTv2</cell><cell>NCF</cell></row><row><cell>Chainer</cell><cell>778 Â± 15</cell><cell>N/A</cell><cell>219 Â± 1</cell><cell>N/A</cell><cell>N/A</cell><cell>N/A</cell></row><row><cell>CNTK</cell><cell>845 Â± 8</cell><cell>84 Â± 3</cell><cell>210 Â± 1</cell><cell>N/A</cell><cell>N/A</cell><cell>N/A</cell></row><row><cell>MXNet</cell><cell>1554 Â± 22</cell><cell>113 Â± 1</cell><cell>218 Â± 2</cell><cell>444 Â± 2</cell><cell>N/A</cell><cell>N/A</cell></row><row><cell>PaddlePaddle</cell><cell>933 Â± 123</cell><cell>112 Â± 2</cell><cell>192 Â± 4</cell><cell>557 Â± 24</cell><cell>N/A</cell><cell>N/A</cell></row><row><cell>TensorFlow</cell><cell>1422 Â± 27</cell><cell>66 Â± 2</cell><cell>200 Â± 1</cell><cell>216 Â± 15</cell><cell>9631 Â± 1.3%</cell><cell>4.8e6 Â± 2.9%</cell></row><row><cell>PyTorch</cell><cell cols="2">1547 Â± 316 119 Â± 1</cell><cell>212 Â± 2</cell><cell>463 Â± 17</cell><cell cols="2">15512 Â± 4.8% 5.4e6 Â± 3.4%</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Acknowledgements</head><p>We are grateful to the PyTorch community for their feedback and contributions that greatly influenced the design and implementation of PyTorch. We thank all the PyTorch core team members, contributors and package maintainers including Ailing Zhang, Alex Suhan, Alfredo Mendoza, Alican Bozkurt, Andrew Tulloch, Ansha Yu, Anthony Shoumikhin, Bram Wasti, Brian Vaughan, Christian Puhrsch, David Reiss, David Riazati, Davide Libenzi, Dmytro Dzhulgakov, Dwaraj Rajagopal, Edward Yang, Elias Ellison, Fritz Obermeyer, George Zhang, Hao Lu, Hong Xu, Hung Duong, Igor Fedan, Ilia Cherniavskii, Iurii Zdebskyi, Ivan Kobzarev, James Reed, Jeff Smith, Jerry Chen, Jerry Zhang, Jiakai Liu, Johannes M. Dieterich, Karl Ostmo, Lin Qiao, Martin Yuan, Michael Suo, Mike Ruberry, Mikhail Zolothukhin, Mingzhe Li, Neeraj Pradhan, Nick Korovaiko, Owen Anderson, Pavel Belevich, Peter Johnson, Pritam Damania, Raghuraman Krishnamoorthi, Richard Zou, Roy Li, Rui Zhu, Sebastian Messmer, Shen Li, Simon Wang, Supriya Rao, Tao Xu, Thomas Viehmann, Vincent Quenneville-Belair, Vishwak Srinivasan, Vitaly Fedyunin, Wanchao Liang, Wei Yang, Will Feng, Xiaomeng Yang, Xiaoqiang Zheng, Xintao Chen, Yangqing Jia, Yanli Zhao, Yinghai Lu and Zafar Takhirov.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">caffe: Convolutional architecture for fast feature embedding</title>
		<author>
			<persName><forename type="first">Evan</forename><surname>Yangqing "jia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jeff</forename><surname>Shelhamer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sergey</forename><surname>Donahue</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathan</forename><surname>Karayev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ross</forename><surname>Long</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sergio</forename><surname>Girshick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Trevor</forename><forename type="middle">"</forename><surname>Guadarrama</surname></persName>
		</author>
		<author>
			<persName><surname>Darrell</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1408.5093</idno>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Cntk: Microsoft&apos;s open-source deep-learning toolkit</title>
		<author>
			<persName><forename type="first">Frank</forename><surname>Seide</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Amit</forename><surname>Agarwal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 22Nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, KDD &apos;16</title>
				<meeting>the 22Nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, KDD &apos;16<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="2135" to="2135" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">TensorFlow: Largescale machine learning on heterogeneous systems</title>
		<author>
			<persName><forename type="first">MartÃ­n</forename><surname>Abadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ashish</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Paul</forename><surname>Barham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Eugene</forename><surname>Brevdo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhifeng</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Craig</forename><surname>Citro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Greg</forename><forename type="middle">S</forename><surname>Corrado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andy</forename><surname>Davis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jeffrey</forename><surname>Dean</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matthieu</forename><surname>Devin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sanjay</forename><surname>Ghemawat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ian</forename><surname>Goodfellow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Harp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Geoffrey</forename><surname>Irving</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Isard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yangqing</forename><surname>Jia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rafal</forename><surname>Jozefowicz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lukasz</forename><surname>Kaiser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Manjunath</forename><surname>Kudlur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Josh</forename><surname>Levenberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dandelion</forename><surname>ManÃ©</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rajat</forename><surname>Monga</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sherry</forename><surname>Moore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Derek</forename><surname>Murray</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chris</forename><surname>Olah</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mike</forename><surname>Schuster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathon</forename><surname>Shlens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Benoit</forename><surname>Steiner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kunal</forename><surname>Talwar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Paul</forename><surname>Tucker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Vincent</forename><surname>Vanhoucke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Vijay</forename><surname>Vasudevan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Fernanda</forename><surname>ViÃ©gas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Oriol</forename><surname>Vinyals</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pete</forename><surname>Warden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Martin</forename><surname>Wattenberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Martin</forename><surname>Wicke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yuan</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiaoqiang</forename><surname>Zheng</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
	<note>Software available from tensorflow.org</note>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Theano: A Python framework for fast computation of mathematical expressions</title>
		<author>
			<persName><forename type="first">Theano</forename><surname>Development</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Team</forename></persName>
		</author>
		<idno>prints, abs/1605.02688</idno>
		<imprint>
			<date type="published" when="2016-05">May 2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Chainer: a next-generation open source framework for deep learning</title>
		<author>
			<persName><forename type="first">Seiya</forename><surname>Tokui</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kenta</forename><surname>Oono</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shohei</forename><surname>Hido</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Justin</forename><surname>Clayton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Workshop on Machine Learning Systems (LearningSys) in The Twenty-ninth Annual Conference on Neural Information Processing Systems (NIPS)</title>
				<meeting>Workshop on Machine Learning Systems (LearningSys) in The Twenty-ninth Annual Conference on Neural Information Processing Systems (NIPS)</meeting>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Torch: a modular machine learning software library</title>
		<author>
			<persName><forename type="first">Ronan</forename><surname>Collobert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Samy</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Johnny</forename><surname>MariÃ©thoz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
			<pubPlace>Idiap</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">DyNet: The Dynamic Neural Network Toolkit</title>
		<author>
			<persName><forename type="first">G</forename><surname>Neubig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Dyer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Goldberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Matthews</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Ammar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Anastasopoulos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ballesteros</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Chiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Clothiaux</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Cohn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Duh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Faruqui</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Gan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Garrette</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Ji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Kong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kuncoro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Malaviya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Michel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Oda</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Richardson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Saphra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Swayamdipta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Yin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017-01">January 2017</date>
		</imprint>
	</monogr>
	<note>ArXiv e-prints</note>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">An APL Machine</title>
		<author>
			<persName><forename type="first">Philip</forename><forename type="middle">S</forename><surname>Abrams</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1970">1970</date>
		</imprint>
		<respStmt>
			<orgName>Stanford University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<author>
			<persName><forename type="first">Team</forename><surname>Core</surname></persName>
		</author>
		<title level="m">R: A Language and Environment for Statistical Computing. R Foundation for Statistical Computing</title>
				<meeting><address><addrLine>Vienna, Austria</addrLine></address></meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Julia: A fresh approach to numerical computing</title>
		<author>
			<persName><forename type="first">Jeff</forename><surname>Bezanson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alan</forename><surname>Edelman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stefan</forename><surname>Karpinski</surname></persName>
		</author>
		<author>
			<persName><surname>Shah</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM review</title>
		<imprint>
			<biblScope unit="volume">59</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="65" to="98" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">NumPy: A guide to NumPy</title>
		<author>
			<persName><forename type="first">Travis</forename><surname>Oliphant</surname></persName>
		</author>
		<ptr target="http://www.numpy.org/" />
		<imprint>
			<date type="published" when="2006">2006</date>
			<publisher>Trelgol Publishing</publisher>
			<pubPlace>USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Eigen v3</title>
		<author>
			<persName><forename type="first">GaÃ«l</forename><surname>Guennebaud</surname></persName>
		</author>
		<author>
			<persName><forename type="first">BenoÃ®t</forename><surname>Jacob</surname></persName>
		</author>
		<ptr target="http://eigen.tuxfamily.org" />
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Lush reference manual</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Lecun</surname></persName>
		</author>
		<author>
			<persName><surname>Bottou</surname></persName>
		</author>
		<ptr target="http://lush.sourceforge.net" />
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Automatic differentiation in machine learning: A survey</title>
		<author>
			<persName><forename type="first">Atilim</forename><surname>Gunes Baydin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Barak</forename><forename type="middle">A</forename><surname>Pearlmutter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alexey</forename><surname>Andreyevich Radul</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jeffrey</forename><forename type="middle">Mark</forename><surname>Siskind</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Mach. Learn. Res</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="5595" to="5637" />
			<date type="published" when="2017-01">January 2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Inference and Optimization with Composable Differentiable Procedures</title>
		<author>
			<persName><forename type="first">Dougal</forename><surname>Maclaurin</surname></persName>
		</author>
		<author>
			<persName><surname>Modeling</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016-04">April 2016</date>
		</imprint>
		<respStmt>
			<orgName>Harvard University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Matthew</forename><surname>Johnson</surname></persName>
		</author>
		<ptr target="https://github.com/google/jax" />
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">Mike</forename><surname>Innes</surname></persName>
		</author>
		<ptr target="https://github.com/FluxML/Flux.jl" />
	</analytic>
	<monogr>
		<title level="j">Flux.jl</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">SciPy: Open source scientific tools for Python</title>
		<author>
			<persName><forename type="first">Eric</forename><surname>Jones</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Travis</forename><surname>Oliphant</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pearu</forename><surname>Peterson</surname></persName>
		</author>
		<ptr target="http://www.scipy.org/" />
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Data structures for statistical computing in python</title>
		<author>
			<persName><forename type="first">Wes</forename><surname>Mckinney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th Python in Science Conference</title>
				<meeting>the 9th Python in Science Conference</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="51" to="56" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Eblearn: Open-source energy-based learning in c++</title>
		<author>
			<persName><forename type="first">Pierre</forename><surname>Sermanet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Koray</forename><surname>Kavukcuoglu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yann</forename><surname>Lecun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2009 21st IEEE International Conference on Tools with Artificial Intelligence</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="693" to="697" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">cudnn: Efficient primitives for deep learning</title>
		<author>
			<persName><forename type="first">Sharan</forename><surname>Chetlur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Cliff</forename><surname>Woolley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Philippe</forename><surname>Vandermersch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathan</forename><forename type="middle">D</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><surname>Tran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bryan</forename><surname>Catanzaro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Evan</forename><surname>Shelhamer</surname></persName>
		</author>
		<idno>CoRR, abs/1410.0759</idno>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">maxdnn: An efficient convolution kernel for deep learning with maxwell gpus</title>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Lavin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015-01">January 2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Fast algorithms for convolutional neural networks</title>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Lavin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Scott</forename><surname>Gray</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Conference on Computer Vision and Pattern Recognition (CVPR)</title>
				<imprint>
			<date type="published" when="2016">2016. 2016</date>
			<biblScope unit="page" from="4013" to="4021" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Torch7: A matlab-like environment for machine learning</title>
		<author>
			<persName><forename type="first">Ronan</forename><surname>Collobert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Koray</forename><surname>Kavukcuoglu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">ClÃ©ment</forename><surname>Farabet</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIPS 2011</title>
				<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<author>
			<persName><forename type="first">Richard</forename><surname>Gabriel</surname></persName>
		</author>
		<ptr target="http://dreamsongs.com/RiseOfWorseIsBetter.html" />
		<title level="m">The rise of worse is better</title>
				<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<author>
			<persName><forename type="first">Yann</forename><surname>Lecun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Corinna</forename><surname>Cortes</surname></persName>
		</author>
		<ptr target="http://yann.lecun.com/exdb/mnist/" />
		<title level="m">MNIST handwritten digit database</title>
				<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Starcraft II: A new challenge for reinforcement learning</title>
		<author>
			<persName><forename type="first">Oriol</forename><surname>Vinyals</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Timo</forename><surname>Ewalds</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sergey</forename><surname>Bartunov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Petko</forename><surname>Georgiev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sasha</forename><surname>Alexander</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michelle</forename><surname>Vezhnevets</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alireza</forename><surname>Yeo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Heinrich</forename><surname>Makhzani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><surname>KÃ¼ttler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Julian</forename><surname>Agapiou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><surname>Schrittwieser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stephen</forename><surname>Quan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stig</forename><surname>Gaffney</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Karen</forename><surname>Petersen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tom</forename><surname>Simonyan</surname></persName>
		</author>
		<author>
			<persName><surname>Schaul</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Hado Van Hasselt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Timothy</forename><forename type="middle">P</forename><surname>Silver</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kevin</forename><surname>Lillicrap</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Paul</forename><surname>Calderone</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Anthony</forename><surname>Keet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Brunasso</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Anders</forename><surname>Lawrence</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jacob</forename><surname>Ekermo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rodney</forename><surname>Repp</surname></persName>
		</author>
		<author>
			<persName><surname>Tsing</surname></persName>
		</author>
		<idno>CoRR, abs/1708.04782</idno>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<author>
			<persName><surname>Dmlc</surname></persName>
		</author>
		<author>
			<persName><surname>Dlpack</surname></persName>
		</author>
		<ptr target="https://github.com/dmlc/dlpack" />
		<title level="m">Open in memory tensor structure</title>
				<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Automatic differentiation in pytorch</title>
		<author>
			<persName><forename type="first">Adam</forename><surname>Paszke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sam</forename><surname>Gross</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Soumith</forename><surname>Chintala</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gregory</forename><surname>Chanan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Edward</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zachary</forename><surname>Devito</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zeming</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alban</forename><surname>Desmaison</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Luca</forename><surname>Antiga</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Adam</forename><surname>Lerer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIPS Workshop</title>
				<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Automatic differentiation, C++ templates, and photogrammetry</title>
		<author>
			<persName><forename type="first">Dan</forename><surname>Piponi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">GPU, &amp; Game Tools</title>
				<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="41" to="55" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Automatic differentiation facilitates of-integration into steering-angle-based road vehicle tracking</title>
		<author>
			<persName><forename type="first">Holger</forename><surname>Leuck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hans-Hellmut</forename><surname>Nagel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">1999 Conference on Computer Vision and Pattern Recognition (CVPR &apos;99)</title>
				<meeting><address><addrLine>Ft. Collins, CO, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-06">June 1999. 1999</date>
			<biblScope unit="page" from="2360" to="2365" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">The Python team. The cpython global interpreter lock</title>
		<ptr target="https://wiki.python.org/moin/GlobalInterpreterLock" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Giovanni</forename><surname>Petrantoni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">JÃ¶rg</forename><surname>WollenschlÃ¤ger</surname></persName>
		</author>
		<ptr target="https://github.com/fragcolor-xyz/nimtorch" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Austin</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Junji</forename><surname>Hashimoto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sam</forename><surname>Stites</surname></persName>
		</author>
		<author>
			<persName><surname>Hasktorch</surname></persName>
		</author>
		<ptr target="https://github.com/hasktorch/hasktorch" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Forward modeling for partial observation strategy games -a starcraft defogger</title>
		<author>
			<persName><forename type="first">G</forename><surname>Synnaeve</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Gehring</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Gant</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Mella</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Khalidov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Carion</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Usunier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
				<imprint>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="10761" to="10771" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<ptr target="https://pytorch.org/docs/stable/jit.html" />
		<title level="m">The PyTorch team. Torch Script</title>
				<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<author>
			<persName><forename type="first">Justin</forename><surname>Luitjens</surname></persName>
		</author>
		<title level="m">Cuda streams. GPU technology conference</title>
				<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Hoard: A scalable memory allocator for multithreaded applications</title>
		<author>
			<persName><forename type="first">D</forename><surname>Emery</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kathryn</forename><forename type="middle">S</forename><surname>Berger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Robert</forename><forename type="middle">D</forename><surname>Mckinley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Paul</forename><forename type="middle">R</forename><surname>Blumofe</surname></persName>
		</author>
		<author>
			<persName><surname>Wilson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Ninth International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS IX</title>
				<meeting>the Ninth International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS IX<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="117" to="128" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">A scalable concurrent malloc(3) implementation for freebsd</title>
		<author>
			<persName><forename type="first">J</forename><surname>Evans</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">BSDCan -The Technical BSD Conference</title>
				<imprint>
			<date type="published" when="2006-05">May 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title level="m" type="main">Tcmalloc: Thread-caching malloc</title>
		<author>
			<persName><forename type="first">S</forename><surname>Ghemawat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Menage</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Hogwild: A lock-free approach to parallelizing stochastic gradient descent</title>
		<author>
			<persName><forename type="first">Benjamin</forename><surname>Recht</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christopher</forename><surname>RÃ©</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stephen</forename><forename type="middle">J</forename><surname>Wright</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Feng</forename><surname>Niu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems 24: 25th Annual Conference on Neural Information Processing Systems</title>
				<meeting><address><addrLine>Granada, Spain</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-12">2011. December 2011. 2011</date>
			<biblScope unit="page" from="693" to="701" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Quantifying the performance of garbage collection vs. explicit memory management</title>
		<author>
			<persName><forename type="first">Matthew</forename><surname>Hertz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Emery</forename><forename type="middle">D</forename><surname>Berger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 20th Annual ACM SIGPLAN Conference on Object-oriented Programming, Systems, Languages, and Applications, OOPSLA &apos;05</title>
				<meeting>the 20th Annual ACM SIGPLAN Conference on Object-oriented Programming, Systems, Languages, and Applications, OOPSLA &apos;05<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="313" to="326" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<ptr target="https://pytorch.org/docs/1.0.1/autograd.html#profiler" />
		<title level="m">The PyTorch team. Pytorch Autograd Profiler</title>
				<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
