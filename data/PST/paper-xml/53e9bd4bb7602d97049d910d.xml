<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Confluent Reductions: Abstract Properties and Applications to Term Rewriting Systems</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Gerard</forename><surname>Huet</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">INR1A</orgName>
								<address>
									<settlement>Le Chesnay</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Domame de Voluceau-Roequencourt</orgName>
								<orgName type="institution">INRIA</orgName>
								<address>
									<postBox>B.P</postBox>
									<postCode>105-78150</postCode>
									<settlement>Le Chesnay</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Confluent Reductions: Abstract Properties and Applications to Term Rewriting Systems</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">2CEC4B43FAA6EDAE69BEFA59CC609C77</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T14:55+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper gives new results, and presents old ones m a umfied formahsm, concerning Church-Rosser theorems for rewrmng systems Abstract confluence propentes, depending solely on axioms for a binary relatton called reduction, are first presented Results of Newman and others are presented m a unified formahsm The systemattc use of a powerful mductmn pnnciple permRs the generahzauon of results of Sethl on reduction modulo eqmvalence.</p><p>Simphficatton systems operating on terms of a first-order logic are then considered. Results by Rosen and Knuth and Bendix are extended to give several new crtteria for confluence of these systems It ts then shown how these criteria yield new methods for the mechanizaUon of equattonal theories KEY WORDS AND PHRASES Church-Rosser property, confluence, combinatorial theories, equattonal theories, operauonal semantics, equality theorem prowng CR CATEGORIES. 5 21, 5 24 Permission to copy wRhout fee all or part of this material is granted provided that the copies are not made or dtstrtbuted for dtrect commerctal advantage, the ACM copyrtght nottce and the tttle of the pubhcation and its date appear, and notice is gwen that copying is by pertmsslon of the Association for Computing Machinery.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Term rewriting systems are an interesting model of computation. They may be used to represent abstract interpreters of programming languages and to model formula manipulatmg systems used in various applications, such as program optimization, program validation, and automatic theorem proving. A generalization of these systems consists in considering rewritings on equivalence classes of terms, defined by a set of equations. These equations may be used, for mstance, to define abstract data types.</p><p>A fundamental property of term rewriting systems is confluence, depicted in Figure <ref type="figure" target="#fig_33">3</ref>. In confluent systems replacements may be effected deterministically, i.e., there is no need to backtrack to consider other possible rewritmgs. Confluence is equivalent to the Church-Rosser property, which expresses the fact that mterconvertlbility of two terms can be checked by mere simplification to a common form. Confluent term rewriting systems in which every computation termmates determine a decision procedure for the corresponding equational theory, since every term possesses a unique canonical form.</p><p>We consider m this paper sufficient conditions for the confluence of a term rewriting system. The general strategy is inspired by Knuth and Bendix <ref type="bibr" target="#b15">[16]</ref>. We show that confluence is implied by the confluence of certain special cases, the critical pairs. Critical pairs are computed by a superposition algorithm, where one attempts to match in a most general way the left-hand side of some rule with a nonvariable subterm of some other lefthand side. For instance, the two rules F(G(x, y, A )) ~ H(x, y) and G(B, x, y) --~ K(y, x) determine a cnucal pair (F(K(A, x)), H(B, x)). We show that various closure conditions on the critical pairs imply the closure of corresponding diagrams in the general case. The diagrams in turn imply confluence under certain conditions. For instance, we show that a left-linear term rewriting system ~ is confluent when P ~ Q for every critical pair (P, Q }, where ~ is parallel disjoint reduction by #~, generalizing a theorem of Rosen. We show how some of these results carry over to rewritings of equational classes of terms, yielding a decision procedure for the confluence of certain equational theories.</p><p>All our results are carefully partitioned between abstract diagrammatic properties that depend solely on axiomatic conditions on the reduction relation and properties depending on the term structure. The abstract confluence properties are studied separately in Section 2, which unifies and extends results of Newman <ref type="bibr" target="#b22">[23]</ref> and Sethi <ref type="bibr" target="#b33">[34]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Abstract Reduction Properties</head><p>2.1 GENERALITIES. Let 8 be an arbitrary set. We give in this section some more or less well-known properties of a binary relation --) on 8, which we call reduction. These properties are abstract in the sense that they depend solely on axioms for the reduction relation. If x is minimal with respect to --,, i.e., ~y x ~ y, we say that x is a --)-normal form, and we let X be the set of all such elements. For x ~ 8, if there exists y E ~A:such thatx --~ y, we say that y is a -,-normal form ofx. Let P be any predicate on g. We say that P is ---)-complete iff Vx E 8 [Vy E A+(x) P(y)] =* P(x).</p><p>Our interest in noetherian relations stems from the following. Principle of Noethertan Inducnon. Let --&gt; be a noethenan relation, and let P be a -+-complete predicate. Then Vx ~ 8 P(x).</p><p>This principle is as powerful as the usual forms of transfinite reduction. It has the advantage of not requiring the construction of a (total) well ordering, using directly the partial ordering -~ instead. For its justification see <ref type="bibr" target="#b4">[5]</ref>, and for examples of its use see <ref type="bibr" target="#b2">[3]</ref>. Definition. We say that the relation ~ is confluent iff Vxy x Ty ~ x~y.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Defimtion. We say that relation</head><p>We express this property with the diagram in Figure <ref type="figure" target="#fig_33">3</ref>. In this sort of diagram, dashed arrows denote (existential) reductions depending on the (universal) reductions shown by full arrows.</p><p>The results of this section appear in Newman <ref type="bibr" target="#b22">[23]</ref>. They have been rediscovered by several authors in various contexts, where --, is interpreted as the fl-reduction relation in h-calculus <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b8">9]</ref>, the deduction relation in a formal system, or the operational semantics in a programming language.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PROOF. Trivial. []</head><p>The converse of this lemma, when ~ is such that every element possesses a normal form, is also true. This will be the case, for instance, with acyclic inductive relations (using Zorn's lemma).</p><p>The two preceding lemmas show the interest of confluent relations. The rest of this section is devoted to finding sufficient conditions for a relation to be confluent. First, R is easy to partially localize the test for confluence.</p><formula xml:id="formula_0">LEMMA 2.3 ~ is confluent iffVxyz x ---, y &amp; x -% z ~ y~z.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PROOF. By induction on n, where x--~ z. []</head><p>In the case of noetherian relations it is possible to localize the confluence test completely.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition. We say that relation ~ is locally confluent iff</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Vxyz x ~ y &amp; x ~ z ~ y ~,z.</head><p>The corresponding diagram is shown in Figure <ref type="figure" target="#fig_5">4</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>LEMMA 2.4. A noetherian relation is confluent iff it is locally confluent.</head><p>This lemma appears in various places in the literature in weaker forms: either the relation is required to be bounded (easy induction on A(x)) <ref type="bibr" target="#b10">[1,</ref><ref type="bibr" target="#b33">34]</ref>, or it is assumed to be locally finite <ref type="bibr" target="#b16">[17]</ref>, or it is proved for a specific noetherian relation <ref type="bibr" target="#b15">[16]</ref> (ad hoc induction). Several weaker forms are given in <ref type="bibr" target="#b35">[36]</ref>. It appears in its full generality in <ref type="bibr" target="#b22">[23]</ref>, but with an unnecessarily complex proof. Let us show how noetherian induction permits an easy and natural proof. PROOF OF LEMMA 2.4. The "only if" part is trivial. For the "if" part, assume ~ is a noetherian locally confluent relation. We prove P(x): Vyz x -% y &amp; x -% z =-~ y ~z t3y noetherian induction, showing that P is a-complete.</p><p>Let x ~ y and x --~ z. We show that 3t y -% t &amp; z -% t.</p><p>(i) I f m --0, we choose t = z; ifn = 0, we choose t = y .</p><p>(ii) Otherwise, let x ~ y] -%y &amp; x ~ zl -% z.</p><p>By local confluence, 3u y] -% u &amp; z] -% u. By the induction hypothesis P(YO, 3v y -% v &amp; u --~ v. By the induction hypothesis P(z]), 3t v -% t &amp; z -% t, proving P(x).</p><p>The induction step of the proof is shown in the diagram of Figure <ref type="figure" target="#fig_6">5</ref>. [] Lemma 2.4 fails if we just suppose --~ to be inductive and acyclic, as shown by the counterexample in Figure <ref type="figure">6a</ref>, due to Newman, or inductive and fmite, as shown by Figure <ref type="figure">6b</ref>, due to Hindley. Note that the two diagrams are two projections of a 3-D object.</p><p>For the relations that are not noetherian, much stronger local hypotheses are necessary to yield confluence. Definition. We say that the relation ~ is strongly confluent iff</p><formula xml:id="formula_1">Vxyz x --~ y &amp; x ~ z ~ 3u y--~ u &amp; z-.~ u.</formula><p>The corresponding diagram is shown in Figure <ref type="figure" target="#fig_27">7</ref>.</p><p>Remark. Beware of the symmetry between y and z in the definition above. It is only slightly weaker than requiring y ~ u &amp; z ~ u. For instance, the relation ---&gt; in Figure <ref type="figure">6</ref> is not strongly confluent. LEMMA 2.5. Any strongly confluent relation is confluent.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PROOF. It is easy to show by induction on n that if ~ is strongly confluent, then Vxyz x -'-&gt; y &amp; x --~ z --~ 3u y--~ u &amp; z -~ u. The result then follows from Lemma 2.3. []</head><p>It may seem that the condition of strong confluence is too restrictive to be of practical use. However, Lemma 2.5 can be used as follows. If we are able to define, from the reduction relation ---~, a strongly confluent relation ---~s with the same transitive closure as --~:--~ = --&gt;s, the confluence of ~ follows from Lemma 2.5. This is the basis of the TaR and Martin-L6f method for proving the Church-Rosser theorem in h-calculus <ref type="bibr" target="#b9">[10]</ref>. Actually, a weaker condition than ~ = --~s is sufficient: it is enough to show that --&gt;s is a compatible refinement of---* in the sense of Staples <ref type="bibr" target="#b35">[36]</ref>.</p><formula xml:id="formula_2">\ / t .\ /" I ! \ /</formula><p>--,i Various other axiomatic conditions imply confluence, for instance, using decompositions of--~ as the union of two or more relations. See in particular <ref type="bibr" target="#b22">[23,</ref><ref type="bibr" target="#b32">33,</ref><ref type="bibr" target="#b35">36]</ref>. For instance, Lemma 2.5 is a consequence of the commutativity lemma in Rosen <ref type="bibr" target="#b32">[33]</ref>.</p><p>2.3 REDUCTION MODULO EQUIVALENCE. Our motivation in studying reduction relations stems from practical problems arising in formula manipulation systems such as theorem provers, program optimizers, and algebraic simplifiers. The problem is to define some efficient operational semantics for an equational theory. This theory is usually defined by axioms of two forms: "structural" axioms such as associativlty and commutativity of operators, and "simplification rules" such as "if true then x else y ~ x." Whde the latter usually define a noetherian relation on the terms of the language, the former can often be taken into account by a specific data structure used to represent these terms.</p><p>We now model this situation by considering a reduction relation ---~, together with an equivalence relauon ~, in the same manner as <ref type="bibr">[ l, 34]</ref>.</p><p>Definition. We say that the relation ~ is confluent modulo ~ iff</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Vxyx' y" x ~ y &amp; x -% x " &amp; y-~ y" ~ 3$fi x" --% £ &amp; y ' -% fi &amp; ~ ~ y.</head><p>The corresponding diagram is given in Figure <ref type="figure">8</ref>.</p><p>Note that this condition is different from ---~/~ being confluent in 8/~, since we do not allow ~ along the --)-derivations. If ~ has the property of defining at least one normal form for every element, we get a weak form of Lemma 2.2. LEMMA 2.6.</p><formula xml:id="formula_3">Let ~ normalize 8; i.e., Vx ~ 8 3y E X x --% y. Then ~ is confluent modulo ~ iff VxyE gVuv E.Arx =-y &amp; x--% u &amp; y--% v~ u ~ v, where ~-is (~--~ O ~)*.</formula><p>PROOF. The proof is trivial and is left to the reader. [] We are now going to search for sufficient conditions for ~ to be confluent modulo ~. The first step is to generalize Lemma 2.4, assuming ~ noetherian. Lemma 2.7 below generalizes Theorem 2.2 of Sethi <ref type="bibr" target="#b33">[34]</ref>, who requires ~ to be bounded. This generalization will be useful in practice, since one frequently proves termination results using lexicographic orderings on terms that are noetherian but not bounded <ref type="bibr" target="#b15">[ 16]</ref>. But the main interest here lies in the technique of proof, based on noetherian induction.</p><p>Definition. We say that relation ~ is locally confluent modulo ~ iff conditions a and B are satisfied:  The corresponding diagrams are shown in Figure <ref type="figure">9</ref>. Property a (respectively, fl) is called P3 (respectively, PI) in [341.</p><p>We can now state the generalization of Lemma 2.4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>LEMMA 2.7. Let --* be a noetherian relation. For any equivalence ~, ~ is confluent modulo ~ tff ---~ is locally confluent modulo ~.</head><p>Before giving the proof of this lemma, let us state a preliminary technical proposition.</p><formula xml:id="formula_4">Definition ! I (x,y) -E~ ( x , y ) *-~ x-* x' &amp; y = y', (x, y} -~ (x', y') ~ x ~ x' &amp; x---, y', (x, y) ~ (x', y'} "~, x = x' &amp; y-+ y', ( x, y ) "Z~ ( x', y') *-~ y---) x' &amp; y-+ y', -~ = ~ o ~, -~ = -~ u -~, .-,=TOT. PROPOSITION 2. !. If---) is noetherian, then ~ is a noetherian relation in e 2.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PROOF. Let</head><p>First we show that ~ is noetherian. Assume the existence of an infinite -w~-sequence. Since -z~is noetherian, it must be of the form -~ --~ ~ --~ ..., which implies the existence of an Let us show that P is -,-complete. For that, let x, y, x', y' ~ csuch that x ~ y, x ---~x', y--~ y'. We show 3£, fi: x' --% £, y"--% fi, x ~ y.</p><p>If n = 0 and m = 0, the result is trivial. Otherwise, let us assume wRhout loss of generality that n &gt; 0, and let x -* x~-Z, x'. By applying property fl to x,y, x~, we get u and v such that x~---&gt; u,y--% v, u ~ v. There are two cases. 2a. v = y. We again apply property fl to y, u, yl, getting w and z such that u --~ w, y~ --~ z, w -z. Let £', ~, ~, andfi' be ---y-normal forms ofx', w, z and y', respectively. We 2b. Otherwise, let y ~ t--~ v. We now apply property a to y, y~, t, getting w and z such that t--~ w, y~ --~ z, w ~ z. Let £', ~, F, ~, ~, and fi' be normal forms, respectively, of x', u, v, w, z, and y'. We get ~' ~ tTby the induction hypothesis P(xl, x0, t7 ~ Fby P(u, v), F~ ~ by P(t, t), ~ ~ fby P(w, z), and finally, f~fi' by P(Y~,YO, completing the proof of the lemma. The diagram is shown in Figure <ref type="figure" target="#fig_32">10c</ref>.</p><p>We leave it to the reader to check that we used the hypothesis P(?~, #) only when (x, y) ~ (~, #). Actually, the definition of ~ was inspired directly by the diagrams we wished to prove, which makes this method a very natural one to use for this sort of proof. The diagrams are the same as in Sethi's proof <ref type="bibr" target="#b33">[34]</ref>. [] Next, we further localize property fl, when considering ~ as generated by a symmetric relation I'-'t; i.e., ~ --t--q.</p><p>Definition. Property 7:</p><formula xml:id="formula_5">Vxyz x ~ y &amp; x --, z =~ y ~ z with ~ = I---~.</formula><p>The corresponding diagram is shown in Figure <ref type="figure" target="#fig_32">11</ref>.  </p><formula xml:id="formula_6">2.2. If---*.--is noetherian (or, equivalently, if---y~~ is noetherian m 8/~), then ~-* is a noetherian relation in 0 .2.</formula><p>The proof follows that of Proposition 2.1, but in the quotient, set g/~. Note that we need a stronger condition than for Proposition 2.1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>LEMMA 2.8. Let H be a symmetric relation, and let ~ = ~2_~. Let--* be any relation such that ---~.~ is noetherian. Then ---&gt; is confluent modulo ~ iff properties a and y are satisfied.</head><p>Paoov. The "only if" part is obvious. For the "if" part, let us assume that ---~.~ is noethenan and that properties a and T hold. We again use noetherian induction in g2, applied to ~--*, and the same property P as in the proof of Lemma 2.7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Letx, y,x',y'Egbesuchthatx~y,x-~</head><p>' " y'.</p><p>x, y ~ We show the existence of £ and )7 such that x' --% .~, y' -% y'~ and x ~ y.</p><p>There are two cases.  2a. If n = 0 and m = 0, it is trivial. 2b. Otherwise, let us assume without loss of generality that n &gt; 0, and let x u -~, x'. Let us choose v such that x H v ~ y, with p(v, y) = p(x, y) -1. Applying property to x, v, and u, we get w and z such that u --% w, v ~ z, and w -z. We complete the proof as in case 1, applying induction hypotheses P(u, u), P(w, z), and P(v, y). Note that we always have (x,y) ~ (w, z). This concludes the proof, according to the diagram in Figure </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>"' n' .t' n' t' ' n" t"</head><p>-'~~~g' (a) (b) Figure <ref type="figure" target="#fig_2">12</ref> | I~1 ~ I (a) (b) Figure <ref type="figure" target="#fig_33">13</ref> more restrictive: he demands that ~ U ~ be bounded, because he explicttly constructs an ordinal for the induction.</p><p>Nivat shows in <ref type="bibr" target="#b23">[24]</ref> an equivalent of Lemma 2.8 for a reduction relaUon defined by word rewritings in a free monoid.</p><p>Note the symmetry between properties a and 7. Both express locahzmg the confluence check to one application of the generators of ~ and ~, respectively.</p><p>The rather strong condition that ---~.~ be noetherian is essential. For instance, Figure <ref type="figure" target="#fig_33">13</ref> gives examples (inspired by the ones in Figure <ref type="figure">6</ref>) where ~ is noetherian and a and -y are true. Still, ~ is not confluent modulo ~. The set .g-of terms is defined as the free a-graded .g-algebra generated by q&lt;" That is, a term is either a variable or is of the form FM1M2 ... M, for some F E ~ and M], M2, ..., M, E .~. We denote terms by letters M, N, P, Q. We define a few functions on terms: Vx E~ VFE 4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Applications to Term Rewriting Systems</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="807">#(M) = h(M)-v(M).</head><p>It IS easy to show that #(M) _&gt; O(M), which shows that</p><formula xml:id="formula_7">#(M) _&gt; 0 &amp; #(M) = 0 ~=* M E YC If/.t(M) = O(M),</formula><p>we say that M is linear; this means that all variable occurrences in M are distinct.</p><p>We now formalize the notion of occurrence of a subterm in a term. Let N.?-be the set of sequences of positive integers, A the empty sequence in N+*, and • the concatenation operation on sequences. We shall call the members of N+* occurrences and denote them u, v, w. We define theprefix ordering _&lt; in N+* by u _&lt; v ~=0 3w v = u.w; in this case we define v/u = w. Occurrences u and v are said to be disjoint, denoted u I v, iff "~u _&lt; v and ~v _&lt; u. Finally, we let u &lt; v lff u ~_ v and u # v.</p><p>For any M E J, we define its set of occurrences ¢9(M) C N+* and the subterm of M at u, M/u E J, for u E ¢9(M), as follows. These definitions are consistent with <ref type="bibr" target="#b32">[33]</ref>, and in the rest of the paper we shall make free use of the following proposition, which corresponds to Lemmas 4.6 and 4.7 in <ref type="bibr" target="#b32">[33]</ref>.</p><formula xml:id="formula_8">PROPOSITION 3.1 (1) vm, N, P E J, u ~ (9(m), v ~ O(N): (a) M[u ~--N]/u. v = N/v, embedding; (b) M[u ~ N][u. v ~-P] = M[u ~-N[v ~ P]],</formula><p>associatiwty.</p><p>(2) VM, N, P E J, u, v E (9(M), with u I v:</p><formula xml:id="formula_9">(a) M[u ~--N]/v = M/v, persistence; (b) M[u &lt;---N][v ~--e] = M[v &lt;--e][u &lt;---N],</formula><p>commutativay.</p><p>(3) VM, N, P E J,u, v ~ d~(M), with v ~_ u:</p><formula xml:id="formula_10">(a) M[u &lt;---N]/v = (M/v)[u/v &lt;--N], distributivity; (b) M[u ~--N][v ~--P] = M[v &lt;--P],</formula><p>dominance.  The proof of this proposition is given in <ref type="bibr" target="#b11">[12]</ref> and consists in showing that M &gt; N #(M) &gt; #(N).</p><p>Let ,~ be any bijection between 5-x 5-and ~. We define a binary operation A in 5inductively by (i) FMi ... Mn A FNi ..</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>. Nn ffi F(M~ A N~) ... (Mn ANn) VF E o~. (ii) M A N = ~M, N) in all other cases.</head><p>M A N is uniquely determined from 4, and, for distinct ,~'s, is unique up to -=. <ref type="bibr">PROPOSITION</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">M A N is a g.l.b, of M and N under the subsumption quasi-ordering.</head><p>Let ~" be the quotient set 5-/-=, completed with a maximum element T. From Propositions 3.2 and 3.3 there follows directly: THEOREM 3.1. ~ris a complete lattice.</p><p>The proof of Proposition 3.3, of Theorem 3. I and various other results concerning the structure of 5-, and of its completion by infinite terms, may be found in <ref type="bibr" target="#b11">[12]</ref>. See also <ref type="bibr" target="#b28">[29]</ref> and [3 I] for similar constructions.</p><p>A direct consequence of Theorem 3. I is the existence, for any two terms M and N that have a common instance (i.e., such that 30, o' o(M) -~ o'(N)) of an l.u.b. M V N, which is a most general such instance. The term M V N is unique modulo -= and may be found by the unification algorithm <ref type="bibr" target="#b31">[32]</ref>. Efficient ways of unifying terms are described in <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b24">25]</ref>. If such an Lu.b. exists, we write M V N and say that M and N are unifiable.</p><p>We shall need in the next sections the following propositions, whose proofs are omitted here.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PROPOSITION 3.4. do(o(M))</head><formula xml:id="formula_11">----do(M) U OM/u-x {U.V[ V E do(O(X))}.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>if M/u= N 6~ ~, then o(M)/u --o(N), VuE do(M), if M/u x~ ~, then o(M)/u.v = o(x)/v VvE do(o(x)). PROPOSITION 3.5. VM, N E J, VU E do(M), o(M)[u ~ o(N)] = o(M[u ~ N]</head><p>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">TERM REWRITING SYSTEMS AND CRITICAL PAIRS</head><p>Definition. We call a term rewriting system any set ~ of pairs of terms (~ --~ ~8), such that ~(fl) C ~0x).</p><p>We say that u is a redex occurrence of~ in term M iff u ~ d0(M) and 3(a ~ ~8) E g¢ Let M be any term, and let ul ...</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>.. un E ~(M) be all the occurrences of x m M (assumed to be dtstinct). Defining Mo = o(M) and M, = M,-l[u, ~ o'(x)] (1 _&lt; i &lt;_ n), we have M, ,-1 o'(M) (O_&lt; i_&lt; n).</head><p>PROOF. Using Proposition 3.4 we show that M,/u, = o(x), and therefore Vi 0 _&lt; i _&lt; n M, ~ M,+x. We then show that M, --o'(M) by an induction on M, using the compatibility of--~. [] We now describe a superposition algorithm, used to define critical pairs of terms in a term rewriting system. This algorithm is taken from Knuth and Bendix <ref type="bibr" target="#b15">[16]</ref>. </p><formula xml:id="formula_12">Q = oI(#0,</formula><p>where al= N:: M and ~r2 = N:: a2. In words, this means that we match in the most general way the left-hand side of some rule with a nonvariable subterm of another (or the same) left-hand side. The critical pair cons~ists of the two ways in which the common instance reduces by the two rules.</p><p>Remark. For any (a~ ~ ill), (a2 --~ f12), and u, the critical pair is unique up to a permutation. We may choose (az -* 13z) --(al ~ 131L as in Example (c) below, but in this case (and in this case only) we shall not consider the case u ffi A, which gives only trivial critical pairs (P, P ).</p><p>Examples. For convenience we use parentheses in the terms of our examples.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>(a) al = F(x, G(x, A )), 131 = H(x), a2 = G(B, x), 132 = K(x) with u ffi 2 determine the pair P = F(B, K(A)), Q = H(B). (b) al= F(x, H(x')), [31 = K(x', .c), a2 = H(G(x, x')), 132 = L(x, x') with u = 2 determine P = F(x, L(y, z)), Q = K(G(y, z), x). (c) al = c~2 --H(H(x)), 131 = 132 = K(x) with u --1 determine P = H(K(y)), Q = K(H(y)).</head><p>Remark Therefore</p><formula xml:id="formula_13">Vx E ~(al) ol(x) = pto(x)). (<label>1</label></formula><formula xml:id="formula_14">)</formula><p>Similarly, o2(a2 By hypothesis, there exists R such that P ~ R and Q ~ R. We may choose 33 = p(R), and the result follows by the stability of-o. [] Remark. Lemma 3.1 is inspired by Knuth and Bendix <ref type="bibr" target="#b15">[16]</ref>, but our proof, unlike theirs, does not reqmre ~ to be noetherian.</p><formula xml:id="formula_15">) = ~(o'(a2)) gives Vx ~ ~r(,~2) o2(x) = ~(o'(x)) = p(o'(x)). (<label>2</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example. Let ~¢ be {(F(x) ~ A), (F(x) ~ G(F(x))), (G(F(x)) ~ F(H(x))), (G(F(x)</head><p>) ~ B)}. We leave it to the reader to check that for every critical pair (P, Q) of aM we have P J, Q. Therefore ~ is locally confluent. However, ---, is not confluent, since it is not noetherian. Actually, note that the diagram of reductions from F(x) using aM is identical to Figure <ref type="figure">6a</ref>. In the case of noethenan relations we get the following theorem, essentially identical to the corollary to Theorem 5 of <ref type="bibr" target="#b15">[16]</ref>. THEOREM 3.2. Let aM be a term rewriting system such that 7 is noetherian. <ref type="bibr">Let</ref>  Remark. If ~ is noetherian, we may get )i4 from M by an arbitrary sequence of rewritings using rules in aM, termination being guaranteed. Theorem 3.2 gives us in this case an effective way of testing the confluence o f -. , provided we have only a flmte number of criucal pairs (P, Q). This will happen in particular when aM is finite.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Examples (a) Let aM = {(H(H(x)) --~ K(x))}. As we saw in Example (c) above, we have a critical pair P = H(K(y)), Q = K(H(y))</head><p>. Since P and Q are distinct --,-normal forms, aM is not a confluent system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>^ (b) I f we form aM' by adding to aM above the rule (H(K(x)) ~ K(H(x))), we now have P = Q = K(H(y)). A new critical pair appears by superposition of the two rules P' = H(K(H(y))) and Q' = K(K(y)). But e ' ~ K ( H ( H ( y ) ) ) --, K ( K ( y )</head><p>) --Q'. aM' being noetherian (we shall discuss this problem below), we have shown that it is confluent.</p><p>(c) Group theory. Let</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ffi ((F(E, x) --, x), ( F ( I ( x ) , x) ~ e ) , ( I ( E ) ~ E), (F(F(x, y), z) ~ F(x, F(y, z))) , ( F(I(x), F(x, y)) ~ y) , (F(x, E) ~ x), ( I ( I ( x ) ) ~ x), (F(x, l(x)) ~ E), (F(x, F(I(x), y)) ~ y), ( l ( F ( x , y)) ---&gt; F ( l ( y ) , I(x))) }.</head><p>We leave it to the reader to show that for all critical pairs (e, Q) we have/; = {~. We show below that ~ is noetherian. ~ is therefore a confluent system. This example is taken from <ref type="bibr" target="#b15">[16]</ref>.</p><p>Proving #t Noetherian. The main difficulty in using Theorem 3.2 consists in showing ---, to be noetherian. For that one must find a noetherian, stable, compatible strict partial order I&gt; such a I&gt; fl for every (a --~ fl) in #L Knuth and Bendix <ref type="bibr" target="#b15">[16]</ref> propose a tricky lexicographic ordering for this purpose. Providing the user specifies integer weights to the function symbols, this test can be completely mechanized. Further studies of these orderings are given in <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b26">27,</ref><ref type="bibr" target="#b27">28]</ref>.</p><p>More generally, this problem is equivalent to finding some interpretation X of our term language over some well-founded domain (~, &lt;~), such that for every F in .~,, x(F) is monotone increasing in each of its arguments. To prove --* noetherian, we have to show that for every (a --* fl) in ~, X(B) "&lt;~ X(a) is identically true for every assignment ofx(x,) in ~. This method was proposed by Manna and Ness in <ref type="bibr" target="#b21">[22]</ref> and used by Lankford in <ref type="bibr" target="#b16">[17]</ref> (where ×(F) were polynomials over N). For instance, the ten group reductions of Example (c) above may be shown to be noetherian using the interpretation</p><formula xml:id="formula_16">x(F) = ~y. x(! + 2y), X(1) = Ax. x 2, ×(E) = 2,</formula><p>over integers greater than 1.</p><p>Another method is given in [2 I]. The general problem of showing that ~ is noetherian is shown in <ref type="bibr" target="#b12">[13]</ref> to be undecidable of order 0", even for terms restricted to monadic function symbols, but to be decidable for ground systems (i.e., such that #(~x) -~ ~(B) = O for every (~ ~ ~8) in ~).</p><p>Completing ~ to a Confluent System. Theorem 3.2 also gives hints on how to complete to a confluent system when it is not: the idea is to include in ~, for every (P, Q) such that P# Q, either (P--~ Q), (Q---~ P), or (P---. M) and (Q---~ M) for some term M. Of course, one must show that the new pairs preserve termination, and there is no guarantee that the "completing" process will terminate. We shall not explain further the details of the method, which is explained in <ref type="bibr" target="#b15">[16]</ref> and illustrated by numerous examples. Note that if we consider ~ as an equational theory, the critical pairs are consequences of the original axioms. Moreover, they usually turn out to be very useful lemmas. For instance, note that in Example (a) above we know in one step that H and K must commute, from the assumption that K is the square of H. This makes this completing procedure a very efficient semidecision procedure for equational theories in the cases where it applies. If the procedure terminates, it may be viewed as the compilation of a decision procedure from the axioms of an equational theory. For instance, Knuth and Bendix mechanically generate the set ~ of Example (c) above from the three group axioms F(E, x) = x, F(l(x), x) --E, and F(F(x, y), z) = F(x, l~(y, z)). Now M = N is a consequence of these axioms if and only if M is identical to N, where M is obtained from M by an arbitrary sequence of rewritings using rules of~, until none applies.</p><p>This method may be considered as the theoretical justificauon of earlier methods for mechanizing equality theorem proving <ref type="bibr" target="#b7">[8,</ref><ref type="bibr">Il]</ref>. It is further explored in <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b16">17]</ref>, and related methods are considered in <ref type="bibr" target="#b34">[35]</ref>. We give an extension of this method in Section 3.4.</p><p>3.3 LINEAR TERM REWRITING SYSTEMS. We are now going to give sufficient conditions for confluence that do not depend on termination conditions. The idea is to impose on critical pairs (P, Q) of~ a condition stronger than P,~ Q, inspired by the strong confluency condition. There are two cases, according to the relative positions of redex occurrences ul and u2; the proof is similar to that of Lemma 3.1. We now show how Lemma 3.1 can be generalized to equational theories which will give sufficient conditions for an equational theory to be confluent, using Lemma 2.8.</p><p>Let us recall property a of Figure <ref type="figure">9</ref>: PROOF. The proof follows the same general pattern as that of Lemma 3.1. Using the notation of the superposition algorithm, a critical pair (P, Q) of 8/~ is such that ol(a~) ~ P and ol(a~) H Q, which shows the "only if" part.</p><p>For the "if" part, assume that for every critical pair (P, Q) of 8/~, P~ Q. Let M be an arbitrary term, and N1 and N2 be such that M ~ N1 and M H Ne; i.e., 3ul, u2 E (9(M), There are here three cases, according to the relative positions of the occurrences Ul and uz. still valid, provided the interpretation X chosen is such that X(a) --X(fl) is identically true for every equation (a = fl) in ¢.</p><p>Note that it is important to get termination criteria as general as possible in Lemmas 2.4, 2.7, and 2.8. For instance, the conditions of <ref type="bibr" target="#b33">[34]</ref> are too restrictive to be used with Knuth and Bendix's lexicographic ordering <ref type="bibr" target="#b15">[16]</ref>.</p><p>When Y¢ and 8 are finite, Theorem 3.3 gives us a decision procedure for the confluence of (~t, 8), since there is a finite number of critical pairs. Furthermore, it is possible to extend the Knuth and Bendix method, to attempt to complete a theory to a confluent one, as follows. We start from ~ and 8 satisfying conditions !, 2, and 3 of Theorem 3.3. We generate the set ~ of critical pairs. For ev^ery (P, ~) in c¢ such that P 7 ~ Q, we either add (P = Q) to cot one of the rules (/~--) Q) and (Q ~/~) ton. Of course we must check that all the conditions of Theorem 3.3 are still valid. If this completion succeeds for every element of c¢, we iterate the process with the new critical pairs that may have been created. The whole process may stop with success, resulting in a confluent equational theory equivalent to the initial one (i.e., with same deducibility relation ~); this may be considered as compiling axioms into simplification rules, replacing deduction by computation. The process may also fail or loop forever, generating progressively an infinite confluent equational theory.</p><p>A generalization of the Knuth and Bendix completion algorithm for handling commutative axioms is given in <ref type="bibr" target="#b17">[ 18]</ref> and extended in <ref type="bibr" target="#b18">[ 19]</ref> to a class of axioms called permutative axioms. This approach is different from ours: first because the condition checked in these papers is the confluence of--~/~, rather than the confluence of ~ modulo ~; second, because they consider arbitrary simplifications, but the equations must be such that the equwalence classes of -are finite, whereas our equations are arbitrary, but our simplifications must be left linear.</p><p>Another approach to the generalization of <ref type="bibr" target="#b15">[16]</ref> consists in embedding equations into specialized unification algorithms, in the manner of <ref type="bibr" target="#b29">[30]</ref>. This method may be used for commutative and associative axioms, as shown in <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b25">26]</ref> for Abelian groups, commutative rings, and distributive lattices.</p><p>Let us end this section with an example of the use of Theorem 3. We leave it to the reader to check that conditions l, 2, and 3 of Theorem 3.3 are fulfilled and that for every critical pair (P, Q) we have/~ ~ 0, proving that (~, ¢) is a confluent equational theory. This example suggests the use of Theorem 3.3 for the study of operational semantics of recursive programs operating on abstract data types, with modeling the computation rules, and g the axiomatic definition of the data type.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Conclusion</head><p>We have presented in Section 2 of this paper general axiomatic properties that are sufficient to prove the confluence of a reduction relation. These results permit us, under certain conditions, to localize the confluence test to simpler diagrams. We consider in Section 3 term rewriting systems and show that many closure conditions expressed by these diagrams can be spectalized to the critical pairs. These methods give us systematic ways of mechanizing an equational theory, favoring simplifications over arbitrary equality replacements. This problem arises in formula manipulating systems for various applications: program</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>Notatwn t is the identity relation on ~:, = {(x, x)I x E ~}. • is relation composition: --)a.--)b = {(x, y) 13z x ---), z &amp; z ---)b y}. ...)-1 is the inverse of relation--): ._)-i = {(x, y)lY ~ x}. For any relation ~ on 8, we now define 0 --.&gt;z~ ,-.% =--) U* = --).--) Vi&gt; 0 + --~ = U,&gt;o reflexive closure of---); /-fold composition of-*; transitive closure of ~; transitive-reflexive closure of--); symmetric closure of---).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>For a given</head><label></label><figDesc>relation ---), we let x],y~ 3zx~ z&amp;y~ z, x]'y ~ 3z z--~ x &amp; z ~ y, A(x) = max{il3y x--~ y } E N U {~}, A(x) = {ylx ---) y}, A+(x) = {ylx ~ y}, a*(x) = a÷(x) u {x}.Definition. We say that relation ~ is (i) inductive ifffor every sequence xl ~ x2 ~ ... ---&gt; x, ~ ..., there existsy such that Vi_&gt; 1 x,-% y; (ii) acyclic iff ~ is irreflexive (and then ~ is a partial ordering relation); (iii) noetherian iff there is no infinite sequence x~ ~ x2 ~ ... ~ x, ~ ... (then-~ is well founded); (iv) bounded lff Vx A(x) &lt; ~ (then-~ is of order type o~; this is called the finiteness property in !1, 34]). Every bounded relation is noetherian, and every noetherian relation is inductive and acydic.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 1 Figure 2</head><label>12</label><figDesc>Figure 1</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>~ is locally finite iff Vx ~ 8,~(x) is finite. Let ~ be a locally finite relation. For every x in 8, if A(x) --o0, then there exists an infinite sequence x = xl ~ x2 -~ .--~ xn -~ ..., using Koenig's lemma. Therefore a locally finite relation is bounded iff it is noetherian. We say that relation ~ is globally finite iff Vx E 8 A*(x) is finite. Let ~ be a locally finite relation. For every x in 8, if ~*(x) is infinite, then A(x) = o0, and, as above, there exists an infinite sequence x = x~ --&gt; x2 ~ ... -o xn --&gt; • ... Therefore a noetherian locally finite relation is globally finite. Conversely, any acydic globally finite relation is bounded. Finally, note that acychc and noetherian does not imply bounded, as shown by Figure I. Also, acyclic, inductive, and locally finite implies neither noetherian nor globally finite, as shown by the dual example in Figure 2. 2.2 CONFLUENCE PROPERTIES. Suppose we are interested in the equivalence ~ generated by a relation -+. We are going to give conditions on ~ that permit us to recogmze if x ~* y when performing only reductions (-~) from x and y.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>LEMMA 2 . 1</head><label>21</label><figDesc>If ---~ is confluent, then the followmg "Church-Rosser" property holds: Vxy x ~---~yc-~x~y.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>4 PROOF.</head><label>4</label><figDesc>Figure 3 Figure 4 PROOF. By induction on n, where x ~ y. []</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 5 ×</head><label>5</label><figDesc>Figure 5</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 7 Figure 8</head><label>78</label><figDesc>Figure 7Figure8</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head></head><label></label><figDesc>a: Vxyz x ~ y &amp; z ~ y ~-, y~z, jS: Vxyzx~y&amp;x---, z~ y~z, where y~z ~ 3uv y ~ u &amp; z -~ v &amp; u ~ v.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head></head><label></label><figDesc>sequence of its first projections, contrary to the hypothesis that ~ is noetherian. Similarly, ~ is noetberian. Therefore, any infinite -* sequence must be of the form: ~&lt;x,, y,&gt; .~ &lt;x2, yz&gt; ~ &lt;x3, y~&gt; -~ &lt;x,,ya -~ &lt;x,, ya -~ &lt;x~,ya ..., which imphes the existence of an infinite ---*-sequence, x~ ---, y2---, ya--* x4 --% xs---~ y6---* ..., a contradiction. [] PROOF or LEMMA 2.7. Let ~ be a noetherian relation locally confluent modulo ~. We shall use noetherian induction in 82, applied to ---* and to the property P(x, y): x ~ y~ [Vx', y'x-~, x' &amp; y-+ y' ~ x'~y'].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 10 Case 1 .</head><label>101</label><figDesc>Figure 10</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head></head><label></label><figDesc>get £' ~ • by the hypothesis P(xl, xl), ~ ~ ~ by P(w, z), and ~ ~ fi' by P(y~, y~), completing the proof of this case. The diagram is shown in Figure 10b.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head></head><label></label><figDesc>Figure I I Definition. If x ~ y, we define p(x, y) as the smallest k such that x ~ y. In a similar way as above, we define a relation ~ in g 2 by (x, y) ~ (x', y')</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>PROPOSITION</head><label></label><figDesc></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head></head><label></label><figDesc>Case 1. x=y. la. Ifn = 0 or m -~ 0, it is trivial. I b. Otherwise, let x ~ u ~ x' and y ~ v ~ y'. Applying property a to x, u, and v, we get the existence of w and z such that u --% w, v --% z, and w ~ z. Let .~', ~, ~, and fi' be --,-normal forms of x ', w, z, and y', respectively. We get £' ~ ~ by the induction hypothesis P(u, u), • ~ Fby hypothesis P(w, z), and ~-)7' by hypothesis P(v, v), completing the proof of case l according to the diagram in Figure12a.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Case 2 .</head><label>2</label><figDesc>p(x, y) &gt; O.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head></head><label></label><figDesc>12b. [] Remarks. Sethl's Theorem 2.3 [34] is similar to Lemma 2.8 in the special case H = ~1 U -2, where ~~ and ~2 are two equivalence relations. But his conditions are significantly x=y x</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head>3. 1</head><label>1</label><figDesc>THE SUBSUMPTION LATTICE OF FIRST-ORDER TERMS. We briefly survey properties of the set 3-of terms of a first-order language, ordered by substitution. Full proofs may be found in 112], and related results in 130, 31].Let ~/'be a denumerable set of elements called variables, denoted x, y, z ..... Let .~ be a finite or denumerable set, with ~ r3 y-= ~, graded by an arity function a: ~ ~ N. Elements in ~ are called function symbols, denoted F, G, H, .... We define ~ = {F E ~ l a(F) = n}.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_19"><head></head><label></label><figDesc>Y'(M) C y-(the set of variables of M): y-(x) = {x) Vx ~ rl Y-(FMt ... M,) = ,U a Y-(M,) VF E ~. v(M) = I Y-(M) I E N. If ~M) = 0 we say term M is a closed (or ground) term. A(M) _&gt; 1 (the length of M): A(x)----1 n A(FMi ... M,)= I + ~ )~(g,) 1--1 O(M) _&gt; 0 (the size of M): o(x) = o n O(FM~ ... M,)= I + X O(M,)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_20"><head></head><label></label><figDesc>(i) If M = x E ~ then (9(M) = {A) and M/A = M. (n) If M = FM1 ... M,, then 60(M) = {A} O {mlt &lt;_ n, u E (9(M,)), M/A =~ M, and M/iu --M,/u. We say that u is an occurrence of M/u in M. (Note that our terminology extends the traditional one.) Finally, for M E J, u E (9(M), and N E J, we define M[u ~-N] ~ J'by M[A ~ N] = N, (FM1 ... M,)[iu ~-N] = FMi ... M,-i(M,[u ~--N])M,+i ... M,, i_&lt; n.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_21"><head></head><label></label><figDesc>Definitions. A substttution is a mapping a from ~" to g, with a(x) ffi x almost everywhere. Substitutions are denoted by o, p, ~/. Substitutions are extended as morphisms of 9-by o(FMi ... M,) = Fo(M~) ... o(M,). Bijective morphisms are called permutations and are denoted by ~, $', .... Given a substitution o, the finite set ~(o) = {x E ~[o(x) # x) C "1/" is called the domain ofo.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_22"><head>For</head><label></label><figDesc>V C ~, we defme the restriction or r V of a to V as(oF V)(x) = (a(x) ff x E V, otherwise.For all o, M, and V, GI~RARD HUET ~:(M) ~ V ~ o(t) = (o t V)(M), and ~(o) n :(M) = ~ ~ o(M) = M. We define the quasi-ordering _&lt; of subsumption in 5-by M ~ N ~ 3o N = o(M). It can be shown that if such a o exists, o F ~:(M) is unique. We call it the match of N by M, and denote it by N :: M. We define M -= N ~-~ M ~_ N &amp; N _&lt; M. It can be shown that M -= N iff there exists a permutation ~ such that N = ~(M). Note that v, A, and 0 are preserved by -=. Finally, we define M&gt; N~.N_&lt; M&amp; M~gN. PROPOSITION 3.2. &gt; is a noetherian relation in ~.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_23"><head></head><label></label><figDesc>such that c~ _&lt; M/u. Taking o = (M/u)::a and N = M[u ~--o(fl)], we say that M reduces to N m u, and we write M-_~ N. Example. Let ~ = {(Ix ~ x)}, with a(I) = 1. We have IIx ~ Ix in two possible ways, with redex occurrence A or 1.Definition. Let ~ be a relation over .~. We say that ~ is(i) stable iff Vo, VM, N, M ~ N ~ a(M) --~ a(N); (ii) compatible iff VP E J, Vu E ~)(P), VM, N, M ~ N ~ P[u ~-M] ~ P[u ~-N].It is easy to show, using Propositions 3.1 and 3.4, that---~ is the smallest compatible stable relation contaimng ~.Term rewriting systems are a general model of computation. They generalize to arbitrary algebras the semi-Thue systems in free monoids. PROPOSITION 3.6. Let ~ be any compatible relation in J, and let a and a' be substitutions such that o(x) ---, a'(x), o(y) = a'(y) Vy # x.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_24"><head></head><label></label><figDesc>Superposition Algorithm. Let (al ~ fl0, (a2 ~ f12) E ~ and u E ¢9(al) such that M = al/u ~ "//'and M V a2. Let N ~ M V a2 such that "/P(N) N 'f/'(al) = ~. We say that the superposition of (a2 ~ f12) on (a~ ~ ~) in u determines the criticalpair (P, Q), defined by e = ol(al)[u ~ o~(13~)],</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_25"><head></head><label></label><figDesc>. The condition ~(N) N ~e~(al) = O may be replaced by the weaker condition ~(N) f3 (~(a0 -~(M)) = @. Example (b) shows why this condition is necessary: choosr ing the pair (F(x, L(x, x')), K(G(x, x'), x)) would be strictly less general than the pair (P, Q). If we compute N by unification of M and ~(a~), where ~ is a permutation renaming variables in ~(a~) ~ ~(ot2), we get ~(N) C (~(M) t3 ~(~(a2))), and the condition above is thus satisfied. PROPOSITION 3.7. Let (a~ ~ fl~), (o~ ~ f12) ~ Yt and u ~ do(al) such that M = a~/u or'and there exist ol and oz such that o~(M) ffi oz(o~z). Then there exist a critical pair (P, Q ) of ~ and a substitution p such that o;(ot0[u &lt;--o2(flz)] -p(P) and o~(fl~) ffi p(Q). PROOF. We know that M V ct2. Let N m M V ae such that ~/r(N) ~ ~/'(C~l) = @, and let o ~-N::M, o' ffi N::a2, as determined by the superposition algorithm, which constructs a critical pair (P, Q) with e = o(oq)[u &lt;--o'(flz)] and Q ffi o(fl~). We consider substitutions ~/ffi o2(~) :: N --o~(M) :: N and p ffi [~/[ "ff(N)] t3 [o~ ~ 3v'(a0]. (This is meaningful, since "¢(N) ~ "f/'(a~) = @.) By construction we have o~(M) --~i(o(M)), and therefore (i) ~¢x e "¢'(M) o,(x) ffi al(o(x)) = p(o(x)) because 3v'(o(x)) _C "~(N). (ii) Yx ~ #/'(aO -"f'(M) o(x) = x because @(o) C ~¢(M), and p(x) = o~(x) by definition ofp.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_26"><head></head><label></label><figDesc>)[U ~ O2(j~2)] = p(a(aO)[u &lt;---p(o'(fl2)) by (1) and (2) --p(P) by Proposition 3.5. []We arc interested in critical pairs because of the next lcmma, which shows that the test for local confluence may be restricted to critical pairs.From now on we shall generally abbreviate ~ by -*. As in Section 2, we use the notation MAN for 3P M--~ P &amp; N--% P. LEMMA 3.1. The relation-7, is locally confluent iff for every critical pair ( P, Q) of ~ we have e J, Q. PROOF. Using the notation of the supcrposition algorithm, a critical pair (P, Q) is such that ol(al) ~ P and Ol(a0 ~ Q, which shows the "only if" part.For the "if" part, assume that for every critical pair (P, Q) of~ we have P~, Q. Let M be an arbitrary term, with M ~ N~ and M ~ N2; i.e., 3u~, u2 E ~M), 3(a~ ~ riO, (a2 -* f12) ~ ~, and 3al, 02 such that M/ul = o1(al), M/U2 = 02(¢3¢2), N1 = M[ul o~(fl~)], and N2 = M[u2 ~-02(fl2)]. There are two cases, according to the relative positions of the two redex occurrences. Case 1. Disjoint redexes: u~]u2. We then have N~/u2 = 02(a2) by persistence, and similarly, N2/ul ffi o~(a~). Furthermore, we have M = Nl[u2 ~ 02~z)] = N2[uz ~-0168~)] by commutativity, and therefore N, ~ M and N2 --, ~. Case 2. Prefix redexes. Let us assume, without loss of generality, that u~ _&lt; u2. Let v = u2/m. By cancellation we get Ol(a0/v ffi 02(a2), and by distributivity we get N2/u~ = Let us show that there exists ~t such that o~(fll) ~ 3~t and N2/u~ *~ M. It will then follow that Ni ~ Nz, by compatibility of-*. According to Proposition 3.4, there are two cases. 2a. v = vl. v2, al/vl = x E ~, a2(~x2) = a~(x)/v2. Let us consider the substitution ol defined by oi(x) = o,(x)[v2 ,--a~(B~)], oi(y) = o~(y) V y ¢ x, and let 33 = oi(fll). We have o~(x) --,, oi(x), and by Proposition 3.6 we get o~(fll) ~ 33 and Ol(al)[V ¢e---O2(B2)] ~ Oi(O/l). Since ~ is stable, we get dl(al) --o 33, which concludes the proof of case 2a. 2b. a~/v q~ ~ a2(a2) = o(a~/v). Using Proposition 3.7, there exist ~/critical pair (P, Q) and a substitution p such that o~(a,)[v ~--o2(flz)] = piP) and o,(fl~) = p(Q).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_27"><head>7 .</head><label>7</label><figDesc>33 denote an arbitrary 7 -n o r m a l J o r m o f M, f o r M ~ ~. Then 7 is confluent iff f o r every critical pair (P, Q) of aM we have P = Q. PROOF For any critical pair (P, Q) o f ~, 3 M M---, P &amp; M---, Q, If--~ is confluent, then by Lemma 2.2 the term M admits a unique --,-normal form ff ffi Q. ~. /~ = Q implies P ~ Q, and ~ is locally confluent by Lemma 3.1 and therefore confluent by Lemma 3.4. []</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_28"><head></head><label></label><figDesc>Definition. A term rewriting system ~ is strongly closed iff, for every critical pair (P, Q) of #~, there exist R and S such that P --~ R ~-~ Q and P ~ S ~ Q. Note that this condition alone is not sufficient to ensure confluence, as shown by the counterexample = {(F(x, x) ---~ A), &lt;F(x, G(x)) ~ B), (C---~ G(C))), since the term F(C, C) possesses two distinct normal forms A and B. Note that ~ has no critical pair, since F(x, x)~F(x, G(x)). Note that the diagram of reductions of F(C, C) is identical to Figure 6a. Another interesting counterexample is due to Barendregt, simplifying a result of Klop [15], namely, = ((F(x, x) -.-, A), (G(x) ---~ F(x, G(x))), (C ~ G(C))}, since G(C) ..~ A andG(C) --% G(A), but A ~ G(A), although here the normal form of every term, when it exists, is unique.Both of these systems contain nonlinear terms, which mouvates the following definition. Definition. We say that ~ is left linear (respectively, right linear) iff Y(a ~ fl) E a (respectively, fl) is linear. L[MMA 3.2. If Yt is a left-and right-linear strongly closed term rewriting system, -~ is strongly confluent. PROOV. Let us assume that ~ is left and right linear and strongly closed, and let us abbreviate 7 by ---~. Let M ~ N1 and M ~ N2; i.e., 3ul, u2 ~ 0(M), (al ~ ill), (as ~ fls) E ~, and substitutions Ol and o2 such that M/u1 = o~(aO, N~ = g[ul ~ o~(fl0], M/us = 02(as), and N2 = M[u2 ~ 02(fls)]. We show that there exist Na and N4 such that N1 --~ Na ~ Ns and N1-% N4 &lt;--* Ns.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_29"><head>Case 1 .</head><label>1</label><figDesc>Disjoint redexes: ul [ u2. We take Nz = N4 = Nl[u2 ~ o~(f12)] = N2[u, ~--ol(fla)]. Case 2. Prefix redexes. Let us assume, without loss of generality, that u~ _&lt; us. Let V = U2/Ul. We have o2(aD = ol(al)/v and N2 = M[ua ~ ol(aO[v ~ os(fls)]]. 2a. os(a2) is completely introduced by Ol; i.e., 3vl, v2 v = vi.vs, al/Vl = x E ~, Ol(X)/v2 = o2(aD. We define a substitution o3 by o3(x) = o~(x)[v~ ,-o~(Bs)], o~(y) ffi °l(y) Vy ~ x, and we take N3 = N4 = M[u~ ~ o3(fll)]. Since ~ is left linear, x occurs in a~ only in occurrence v~, and we get o~(~) ffi o~(,~)[v~ ~ o3(x)] = ol(~)[v~ ~ o,(x)[vs ~ os(#s)]] = o~(a,)[v ,.--o~($~)], whence N2 = M[Ul ~--o3(aJ], which shows Ns --~ Nz. There are again two cases. (i) x ~ ~f(fl~). Then trivially o3(f10 ffi o~(flO, and therefore N3 = N~. (ii) 3w ~ ~(B1) B1/w = x. Since ~ is fight linear, w is the unique occurrence of x in fl~, and we get O3(#1) ffi Ol(fll)[W &lt;--" GI(X)[V2 &lt;-" O2(fl2)]] "~" Gt(]~I)[W ° F2 ~ 02(#2)]. Since offflO/w, v2 = o~(az), we get N~ ~ Na using redex occurrence u. w. v2. 2b. o2(as) partially exists in Otl; i.e., v ~ d?(al), al/v q~ ~, ol(al/V) ffi OS(a2). According to Proposition 3.7, there exist a critical pair (P, Q) and a substitution p such that p(P) = offa~)[v ~ o2(fl2)] and p(Q) ffi o~(fl~), and thus By the P --~ S ~ Q, and therefore we can take N3 = M[Ul ~ p(P)] and N4 = M[ul &lt;---p(Q)]. N1 = M[u~ ~ p(Q)] and N2 = M[ul ~ p(P)]. closure hypothesis, there exist R and S such that P ~ R 4-Q and [] We shall use ~ as a term rewriting system, defining -~ as above, and ,¢ as a symmetric term rewriting system, defining the symmetric relation ~7] ffi ~ U -~-~. Note that because of the condition on variables in equatmns of 8, we have ..~-1 ffi ~,-J) ; i.e., the only substitutions considered are those obtained by matching. From now on we shall abbreviate --,,, as ~ and ~. as [--t. Note that ~t-M = N ~=~ M(*-, U [.--[)*N. We say that (~, 8) is a confluent equational theory iff--~ is confluent modulo ~, where ~ ffi I * 1. In this case, provided ~ normalizes J, Lemma 2.6 gives us a way of reducing the problem .~¢1-M = N to the problem h4 ~ N, where M and N are -F-normal forms of M and N, respectively.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_30"><head>7 :LEMMA 3 . 5 .</head><label>735</label><figDesc>, N2 M---&gt;Ni&amp;M---~N2~Ni~N2, where M ~ N *-~ 3M',N' M-~-~ M' &amp; N-~.~ N' &amp; M' ~ N '. LEMMA 3.4. (~, 8) verifies property a iff for every critical pair (P, Q) of ~¢, we have PJ, Q. PROOF. The proof follows closely that of Lemma 3.1. We use the same notation and indicate here only the points that differ. Cases 1 and 2a are kept unchanged. For case 2b let (P, Q) be the critical pair of involved. By hypothesis, there exist R and S such that P-~ R, Q~* S, and R ~ S. Let us consider R ffi o(R) and S = o(S). We get oa(fl~) ffi o(Q) "~ _S, since ~ is stable and N2/u~ = o(P) -~ R as well. Therefore o~(fl~) ~ Nz/Ul, and thus N~ ~, Ns since ~ and ~ are compatible, which concludes the proof. [] We want now to get a similar result for property y, which we recall here: VM, N,P M--~N&amp;M~--~Pffi~N~P. Deflnitwn. Let (~, ~) be an equational theory. We call a eriticalpair ofd~/~ any pair (P, Q) constructed by the superposition algorithm, but now applied to a~,/~, as, f12 such that either (a~ =ill) ~ ~U ~ -I and (tIt2 "'&gt; ~2) ~ ~ or (a~ ~ ,81) E ~ and (a2 ffi f12) ~ 8U 8 -l. Let (~, 8) be an equational theory such that ~ is left linear. Then property ? holds ifffor every criticalpair (P, Q) orS/a, we have P ~ Q.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_31"><head>(</head><label></label><figDesc>al ~ ill) E ~, (a2 = f12) E 8, and substitutions ol and o2 such that M/Ul m ol(otl), g/u2 ffi oz(a2), Ni = M[m ~ m(fl~)], and N2 = g[u2 ,-os(flz)] (the symmetric case is obtained in interchanging a2 and f12 below throughout).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_32"><head>Case 1 .</head><label>1</label><figDesc>ul l u2. With ~t = Nl[u2 ~ 02(flz)] ffi N2[m ~ ol(fl0], we get N1 ~ ~t and Nz ~ ~t, and therefore Ni J, N2.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_33"><head>3 .</head><label>3</label><figDesc>Example. We use the binary symbols + and • in infix notation. Let= {(E(x + y)--~ E(x).E(y)), (E(O)--) 1), (x + O--~ x), (O + x--) x), (x.l--~ x), (l.x--* x)) and 8= {(x + y= y + x), ((x + y) + z = x + (y + z)), (x.y= y.x), ~(x.y)z = x(y.,)&gt; }.</figDesc></figure>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Using Lemma 2.5, we get COROLLARY. If ~ is a left-and right-linear strongly closed system, -~ is confluent.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example. Let ~t = { (H(F(x, y)) ~ F(H(R(x)), y)),</head><p>(F(x, K(y, z)) -, G(e(y), Q(z, x))) , (H(Q(x, y)) ~ Q(x, H(R(y)))), ( Q(x, H(R(y))) --, H(Q(x, y))),</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>(H(~(x, y))~ G(x, H(y))) }.</head><p>We have two critical pairs. First between the first two rules,</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>P = H(G(P(y), Q(z, x))), Q --F(H(R(x)), K(y, z)).</head><p>But, taking R = G(e(y), H(Q(z, x))) and S = G(P(y), Q(z, H(R(x)))), we check that P R~-S~-Q.</p><p>Finally, between the next two rules we get</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>H(R(H(R(y))))),</head><p>and taking T = H(Q(x, H(R(y)))), we check that P' ~ T ~--Q'. This shows that ~t is strongly closed and therefore confluent. Note that it is not noetherian, since the rules 3 and 4 form a loop.</p><p>If #~ is only left linear, the condition "strongly closed" is not sufficient to ensure the confluence, as shown by the following counterexample due to J.J. L6vy: Still, it is very desirable to find sufficient conditions for a term rewriting system to be confluent that do not depend on right linearity, a rather unnatural condition. One way to do this is to change the closure condition, as we shall see. Let us first give some new definitions.   This result is important in practice. It can be used, for instance, to show the consistency of operational semantics for recurslve programming languages. It is the generalizanon to schemata of the main theorem of Rosen <ref type="bibr" target="#b32">[33]</ref>, which apphes only to ground terms (no variables), and which requires the stronger closure condition (P ~ Q) ~ ~. Note that / M/u:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Defimtion.</head><p>(b) Figure <ref type="figure">15</ref> Rosen's Theorem 6.5 gives only a very particular case of Lemma 3.3 (no critical pairs). Computations in left-linear term rewriting systems with no critical pairs are further studied in <ref type="bibr" target="#b13">[14]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Examples</head><p>(a) Combinatory logic. The reduction rules of the combinators S and K may be expressed by the following term rewriting system, with A denoting the application operator:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>= {(A(A(A(S, x),y), z)) ~ A(A(x,y), A(y, z))), (A(A(K, x), y) --'&gt; x) }.</head><p>Because of the first rule, ~ is neither right linear nor noetherian (for instance, the term A(A(M, M), M), with M = A(A(S, S), S) does not admit a normal form). Still, the confluence of ~ is immediate, since it is left linear and there are no critical pairs. The same argument applies to show the consistency of operational semantics for recursive program schemes.</p><p>(b</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>( G(F(H(C, D)), x, p) ~ n(K,(x), K2(y))} , (Ki(A) -.-* C), (Kz(B) ---* O)}.</head><p>The system ~ is left linear, and there is only one critical pair (P, Q), with P -~</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F(H(Kt(A), K2(B))) and Q = F(H(C, D)).</head><p>Since P -~* Q, the system ~ is confluent.</p><p>3.4 COr~FLU~r~T EQUATIONAL TnEomv.s, We shall now use the results of Section 2.3 to extend the applicability of Lemma 3.1.</p><p>We suppose that we are interested in an equational first-order theory defined by a set of equational axioms ~ c ,.q,2. We assume that the rules of inference of substitution of terms for free variables and of replacement of equals are valid. We write ._qtl-M = N iff M = N can be deduced from ~ using these rules.</p><p>Let us now partition .~/into ~ U ~, where ~ and ~f verify </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Code optimization and finite Church-Rosser systems</title>
		<author>
			<persName><forename type="first">|</forename><surname>A~o</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Sg~'m</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Ah</surname></persName>
		</author>
		<author>
			<persName><forename type="first">'d</forename><surname>Ullu~n</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Courant Computer Science Symposmm 5, R Rustm</title>
		<meeting>Courant Computer Science Symposmm 5, R Rustm<address><addrLine>Englewood Cliffs, N.J,</addrLine></address></meeting>
		<imprint>
			<publisher>Prenttc, e Hall</publisher>
			<date type="published" when="1972">1972</date>
			<biblScope unit="page" from="89" to="105" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<author>
			<persName><forename type="first">T</forename><surname>Bgown</surname></persName>
		</author>
		<title level="m">A structured design method for spectahzed proof p~ocedures Ph D Thesis</title>
		<meeting><address><addrLine>Pasadena, Calif</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1975">1975</date>
		</imprint>
		<respStmt>
			<orgName>Cahfornta lnsUtute of TechnolOgy</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Proving properties of programs by structural induction</title>
		<author>
			<persName><forename type="first">R</forename><surname>Burstall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput J</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="41" to="48" />
			<date type="published" when="1969">1969</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Some properties of conversion</title>
		<author>
			<persName><forename type="first">A</forename><surname>Crurcti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">B</forename><surname>Rosser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Trans. AMS</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="page" from="472" to="482" />
			<date type="published" when="1936">1936</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title/>
		<author>
			<persName><surname>Col-In</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1965">1965</date>
			<publisher>P M Universal algebra. Harper and Row</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">B</forename><surname>Curry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Combmatory</forename><surname>Feys</surname></persName>
		</author>
		<author>
			<persName><surname>Logic</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1958">1958</date>
			<pubPlace>North Holland, Amsterdam</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">N</forename><surname>Dershowitz</surname></persName>
		</author>
		<author>
			<persName><surname>Manna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Z Proving termination with multiset ordermgs Commun ACM</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="465" to="476" />
			<date type="published" when="1979-08">Aug. 1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Guard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">C</forename><surname>Oglesby</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">H</forename><surname>Beiqnett</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">G</forename><surname>Settle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Semi-automated mathematics J. ACM</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="49" to="62" />
			<date type="published" when="1969">1969</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">An abstract Church-Rosser theorem Pt 1</title>
		<author>
			<persName><forename type="first">R</forename><surname>Hindley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J Symbohc Logic</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="page" from="1" to="21" />
			<date type="published" when="1969">1969. 1974</date>
		</imprint>
	</monogr>
	<note>J Symbohc Logic</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Introduction to combmatory logxc</title>
		<author>
			<persName><forename type="first">R</forename><surname>Hindley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lercher</forename></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Seldin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">London Mathematical Society Lecture Notes</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<date type="published" when="1972">1972</date>
			<publisher>Cambridge University Press</publisher>
			<pubPlace>Cambridge, England</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Experiments with an interactive prover for logic with equality Rep</title>
		<author>
			<persName><forename type="first">I</forename><surname>Huet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Jenmngs Computing Center</title>
		<imprint>
			<biblScope unit="volume">106</biblScope>
			<date type="published" when="1970">1970</date>
			<pubPlace>Case Western Reserve Unlv, Cleveland, Ohio</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">G R6solution d&apos;6quatlons dans des langages d&apos;ordre 1, 2 . . . . ~ Th~se d&apos;Etat</title>
		<author>
			<persName><surname>Hu~r</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1976-09">Sept 1976</date>
			<pubPlace>Umv Paris VII, Parts</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">On the uniform haltmg problem for term rewriting systems Lab Rep No 283</title>
		<author>
			<persName><forename type="first">G</forename><surname>Huet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Lankford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">INRIA</title>
		<imprint>
			<date type="published" when="1978-03">March 1978</date>
			<pubPlace>Le Chesnay, France</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Call by need computations in non-ambiguous linear term rewriting systems</title>
		<author>
			<persName><forename type="first">G</forename><surname>Huet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Levy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Lab. Rep. No</title>
		<imprint>
			<biblScope unit="volume">359</biblScope>
			<date type="published" when="1979-08">Aug. 1979</date>
			<pubPlace>Le Chesnay, France</pubPlace>
		</imprint>
	</monogr>
	<note>INRIA</note>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">A counter example to the Church-Rosser property for lambda calculus with subjective pairing Preprint No 102</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">W</forename><surname>Kloi~</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1978">1978</date>
			<publisher>Dep of Mathemaucs, Umv. of Utrecht</publisher>
			<pubPlace>Utrecht, The Netherlands</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Simple word problems in umversal algebras In Computational Problems in Abstract Algebra</title>
		<author>
			<persName><forename type="first">D</forename><surname>Knuth</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Bendix</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J Leech, FEd</title>
		<imprint>
			<biblScope unit="page" from="263" to="297" />
			<date type="published" when="1970">1970</date>
			<publisher>Pergamon Press</publisher>
			<pubPlace>Elmsford, N.Y,</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Canonical inference Rep ATP-25</title>
		<author>
			<persName><forename type="first">D</forename><surname>Lankfogd</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1975-12">Dec 1975</date>
			<pubPlace>Austin, Texas</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Dep. Mathematics and Computer Sciences, Univ. of Texas</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">M Decision procedures for s,mple equational theories with com-mutaUve axioms&quot; Complete sets of commutative reductmns</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Lankford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ballantyne</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Dep. Mathematics and Computer</title>
		<imprint>
			<date type="published" when="1977-03">March 1977</date>
			<pubPlace>Sc,ences, Umv of Texas, Austin, Texas</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">Rep. ATP-35</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Decision procedures for simple equational theories wRh permutatlve axioms&apos; Complete sets of permutatmve reduct,ons Rep. ATP-37</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Lankford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ballantyne</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Dep. of Mathematics and Computer Sciences</title>
		<imprint>
			<date type="published" when="1977-04">April 1977</date>
			<pubPlace>Umv of Texas, Austin, Texas</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">M DecJsmon procedures for s,mple equational theories with commutative-associative axioms: Complete sets of commutative-associative reductions Rep ATP-39</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Lankford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ballantyne</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1977-08">Aug. 1977</date>
			<pubPlace>Austin, Texas</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Dep Mathemaucs and Computer Sciences, Univ. of Texas</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">J</forename><surname>Lipton</surname></persName>
		</author>
		<author>
			<persName><surname>S~yder</surname></persName>
		</author>
		<title level="m">L On the halting of tree replacement systems Proc of Waterloo Conf. on Theoretical Computer Science</title>
		<meeting><address><addrLine>Waterloo, Ontario</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1977-08">Aug 1977</date>
			<biblScope unit="page" from="43" to="46" />
		</imprint>
		<respStmt>
			<orgName>Univ of Waterloo</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">On the termmauon of Markov algorithms</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Manna</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ness</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc 3rd Hawan Int. Conf. on System Sciences</title>
		<meeting>3rd Hawan Int. Conf. on System Sciences</meeting>
		<imprint>
			<date type="published" when="1970-01">Jan. 1970</date>
			<biblScope unit="page" from="789" to="792" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">On theories with a combmatona! defimuon of &quot;eqmvalence</title>
		<author>
			<persName><forename type="first">M</forename><surname>Newman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Ann Math</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="page" from="223" to="243" />
			<date type="published" when="1942">1942</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Congruences parfaltes et quasl-parfaRes Sdmmalre Dubreud 7, 1971-72, see also prehmmary version-On some families of |anguages related to the Dyck language. Proc 2nd Ann</title>
		<author>
			<persName><forename type="first">M</forename><surname>Nivat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Syrup on Theory of Computing</title>
		<imprint>
			<biblScope unit="page" from="221" to="225" />
			<date type="published" when="1970">1970</date>
			<pubPlace>Northampton, Mass</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">S</forename><surname>Paterson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M N Linear</forename><surname>Wegman</surname></persName>
		</author>
		<author>
			<persName><surname>Umficatmn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proc 8th Ann ACM Syrup. on Theory of Computing</title>
		<imprint>
			<biblScope unit="page" from="181" to="186" />
			<date type="published" when="1976-05">May 1976</date>
			<pubPlace>Hershey, Pa</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Complete sets of reductions for equational theories wRh complete unification algonthms Tech</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">E</forename><surname>Peterson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">E</forename><surname>Stickel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Rep., Dep. of Computer Science, Umv. of Arizona</title>
		<imprint>
			<date type="published" when="1977-09">Sept 1977</date>
			<pubPlace>Tucson, Ariz</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Well-founded ordermgs for prowng termination of systems of rewrite rules Tech Rep</title>
		<author>
			<persName><forename type="first">D</forename><surname>Plaisted</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Dep. of Computer Science, Umv. of llhnois</title>
		<imprint>
			<biblScope unit="volume">78</biblScope>
			<biblScope unit="issue">932</biblScope>
			<date type="published" when="1978-07">July 1978</date>
			<pubPlace>Urbana-Champalgn</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">A recurslvely defined ordering for proving termination of term rewriting systems Tech. Rep 78-943, Dep of Computer Science, Untv of llhnols</title>
		<author>
			<persName><forename type="first">D</forename><surname>Plaisted</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1978-09">Sept 1978</date>
			<biblScope unit="volume">111</biblScope>
			<pubPlace>Urbana-Champaign</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Lattice-theoretic properties ofsubsumption Memo MIP-R77</title>
		<author>
			<persName><forename type="first">G</forename><surname>Plotkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Univ. of Edinburgh</title>
		<imprint>
			<date type="published" when="1970">1970</date>
			<pubPlace>Edinburgh, Scotland</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Buddmg-m equational theories in Machine lntelhgence</title>
		<author>
			<persName><forename type="first">G</forename><surname>Plotkin</surname></persName>
		</author>
		<editor>B. Meltzer and D. Michie</editor>
		<imprint>
			<date type="published" when="1972">1972</date>
			<publisher>American Elsevier</publisher>
			<biblScope unit="page" from="73" to="90" />
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Transformational systems and the algebraic structure of atomic formulas</title>
		<author>
			<persName><forename type="first">J</forename><surname>Reynolds</surname></persName>
		</author>
		<editor>Machine lntelhgence .5, B Meltzer and D Michie</editor>
		<imprint>
			<date type="published" when="1970">1970</date>
			<publisher>Elsevier</publisher>
			<biblScope unit="page" from="135" to="152" />
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">A machine-oriented lbglc based on the resolution principle</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Robinson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. ACM</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="23" to="41" />
			<date type="published" when="1965-01">Jan. 1965</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Tree-mampulatmg systems and Church-Rosser theorems</title>
		<author>
			<persName><forename type="first">B</forename><surname>Rosen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. ACM</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="160" to="187" />
			<date type="published" when="1973-01">Jan. 1973</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Testing for the Church-Rosser property</title>
		<author>
			<persName><forename type="first">R</forename><surname>Sethi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Errata, J. ACM</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page">424</biblScope>
			<date type="published" when="1974-10">Oct 1974. July 1975</date>
		</imprint>
	</monogr>
	<note>J ACM</note>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Automated theorem-proving for theories with stmphfiers, commutattvity, and associativity</title>
		<author>
			<persName><forename type="first">J</forename><surname>Slagle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J ACM</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="622" to="642" />
			<date type="published" when="1974-10">Oct 1974</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Rosser theorems for replacement systems In Algebra and Logic</title>
		<author>
			<persName><forename type="first">J</forename><surname>Staples</surname></persName>
		</author>
		<author>
			<persName><surname>Church</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">Lecture Notes m Mathematics No</title>
		<editor>
			<persName><forename type="first">J</forename><surname>Crossley</surname></persName>
		</editor>
		<imprint>
			<biblScope unit="volume">450</biblScope>
			<date type="published" when="1975">1975</date>
			<publisher>Sprmger-Verlag</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">REVISED SEPTEMBER 1979; ACCEPTED JANUARY</title>
	</analytic>
	<monogr>
		<title level="j">Journal oftbe Assoclauon for Computing MachJaery</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="1978">1978. 1980. October 1980</date>
		</imprint>
	</monogr>
	<note>RECEIVED FEBRUARY</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
