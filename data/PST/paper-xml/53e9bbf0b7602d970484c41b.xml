<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Analysis and Design of an Adaptive Virtual Queue (AVQ) Algorithm for Active Queue Management *</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Srisankar</forename><surname>Kunniyur</surname></persName>
							<email>kun-niyur@comm.csl.uiuc.edu</email>
						</author>
						<author>
							<persName><forename type="first">R</forename><surname>Srikant</surname></persName>
							<email>rsrikant@uiuc.edu</email>
						</author>
						<author>
							<persName><forename type="first">†</forename><forename type="middle">S</forename><surname>Kunniyur</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Department of Electrical and Computer Engineering and Co-ordinated Science Lab</orgName>
								<orgName type="institution">Uni-versity of Illinois at Urbana-Champaign</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Department of General Engineer-ing and Co-ordinated Science Lab</orgName>
								<orgName type="institution">University of Illinois at Urbana-Champaign</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Analysis and Design of an Adaptive Virtual Queue (AVQ) Algorithm for Active Queue Management *</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">D78959C7017DB01217103507CB6198B8</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T06:47+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Virtual Queue-based marking schemes have been recently proposed for AQM (Active Queue Management) in Internet routers. We consider a particular scheme, which we call the Adaptive Virtual Queue (AVQ), and study its following properties: stability in the presence of feedback delays, its ability to maintain small queue lengths and its robustness in the presence of extremely short flows (the so-called web mice). Using a mathematical tool motivated by the earlier work of Hollot et al, we present a simple rule to design the parameters of the AVQ algorithm. We then compare its performance through simulation with several well-known AQM schemes such as RED, REM, PI controller and a nonadaptive virtual queue algorithm. With a view towards implementation, we show that AVQ can be implemented as a simple token bucket using only a few lines of code.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>In the modern day Internet, there has been a strong demand for QoS and fairness among flows. As a result, in addition to the sources, the links are also forced to play an active role in congestion control and avoidance. Random Early Discard (RED) <ref type="bibr" target="#b4">[4]</ref> was originally proposed to achieve fairness among sources with different burstiness and to control queue lengths. RED allows for dropping packets before buffer overflow. Another form of congestion notification that has been discussed since the advent of RED is Explicit Congestion Notification (ECN) <ref type="bibr" target="#b3">[3]</ref>. ECN has been proposed to allow links to help in congestion control by notifying users when it detects an onset of congestion. The links on detecting incipient congestion set a bit in the packet header that notifies the user that a link on its route is experiencing congestion. The user then reacts to the mark as if a packet has been lost. Thus, the link avoids dropping the packet (thereby enhancing goodput) and still manages to convey congestion information to the user.</p><p>To provide ECN marks or drop packets to provide fairness and control queue lengths, the routers have to select packets intelligently in a manner that conveys information about the current state of the network to the users. Algorithms which the routers employ to convey such information are called Active Queue Management (AQM) schemes. An AQM scheme might mark or drop packets depending on the policy at the router. In this paper, we use the term "marking" more generally to refer to any action taken by the router to notify the user of incipient congestion. The action can, in reality, be ECN-type marking or dropping (as in RED) depending upon the policy set for the router. As in earlier work on studying AQM schemes <ref type="bibr" target="#b14">[14,</ref><ref type="bibr" target="#b7">7,</ref><ref type="bibr">6]</ref>, this distinction is blurred in the mathematical analysis to allow for the development of simple design rules for the choice of AQM parameters. However, our simulations consider marking and dropping schemes separately.</p><p>Designing robust AQM schemes have been a very active research area in the Internet community. Some AQM schemes that have been proposed include RED <ref type="bibr" target="#b4">[4]</ref>, a virtual queuebased scheme where the virtual capacity is adapted <ref type="bibr" target="#b11">[11,</ref><ref type="bibr" target="#b12">12]</ref>, SRED <ref type="bibr" target="#b15">[15]</ref>, Blue <ref type="bibr" target="#b2">[2]</ref>, Proportional Integral (PI) controller <ref type="bibr" target="#b7">[7]</ref>, REM <ref type="bibr" target="#b1">[1]</ref>, a virtual queue based AQM scheme <ref type="bibr" target="#b5">[5]</ref> (which we refer to as the Gibbens-Kelly Virtual Queue, or the GKVQ scheme) among others. While most of the AQM schemes proposed detect congestion based on the queue lengths at the link (e.g., RED), some AQM schemes detect congestion based on the arrival rate of the packets at the link (e.g., virtual queue-based schemes) and some use a combination of both (e.g., PI). Also, most of the AQM schemes involve adapting the marking probability (as noted before we use the term marking to refer to both marking and dropping) in some way or the other. An important question is how fast should one adapt while maintaining the stability of the system? Here the system refers jointly to the TCP congestion controllers operating at the edges of the network and the AQM schemes operating in the interior of the network. Adapting too fast might make the system respond well to changing network conditions, but it might lead to large oscillatory behavior or in the worst case even instability. Adapting it too slowly might lead to sluggish behavior and more losses or marks than desired which might lead to a lower throughput.</p><p>In this paper, we start by presenting an implementation of a virtual-queue AQM scheme, namely the Adaptive Virtual Queue (AVQ). We then discuss a methodology for finding the fastest rate at which the marking probability adaptation can take place given certain system parameters like the maximum delay and the number of users so that the system remains stable. We note that, the marking probability in the AVQ is implicit, no marking probability is explicitly calculated and thus, no random number generation is required. On the other hand, we replace the marking probability calculation with the computation of the capacity of a virtual queue. Motivated by the success of the analysis and design of other AQM schemes in <ref type="bibr" target="#b14">[14,</ref><ref type="bibr" target="#b7">7,</ref><ref type="bibr">6]</ref>, we consider a single router accessed by many TCP sources with the same round-trip time (RTT) and use a control-theoretic analysis to study the stability of this system. However, unlike <ref type="bibr" target="#b14">[14,</ref><ref type="bibr" target="#b7">7,</ref><ref type="bibr">6]</ref>, we make no assumptions regarding the dynamic behavior of the linearized system. For instance, the authors in <ref type="bibr" target="#b7">[7]</ref> neglect the delay in the flow control dynamics by assuming that the flow rates are large enough which forces their system to have a small number of users. We make no such assumptions in this paper.</p><p>The AVQ algorithm maintains a virtual queue whose capacity (called virtual capacity) is less than the actual capacity of the link. When a packet arrives in the real queue, the virtual queue is also updated to reflect a new arrival. (This was originally proposed in <ref type="bibr" target="#b11">[11]</ref> as a rate-based marking scheme.) Packets in the real queue are marked/dropped when the virtual buffer overflows. The virtual capacity at each link is then modified such that total flow entering each link achieves a desired utilization of the link. It was shown in <ref type="bibr" target="#b12">[12]</ref> that a fluid-model representation of the above scheme along with the congestion-controllers at the end-hosts was semi-globally asymptotically stable when the update at the links were done sufficiently slow. A feature of the AVQ scheme that is appealing is in the absence of feedback delays, it is shown in <ref type="bibr" target="#b12">[12]</ref>, that the system is fair in the sense that it maximizes the sum of utilities of all the users in the network. Combining this with a result in <ref type="bibr" target="#b11">[11]</ref> which shows that a TCP user with an RTT of dr can be approximated by a user with a utility function -1 d 2 r xr , where xr is the rate of the TCP user, shows that the network as a whole converges to an operating point that minimizes r -1 d 2 r xr . This utility function called the potential delay was introduced as a possible fairness criterion in <ref type="bibr" target="#b13">[13]</ref>. The throughput under this utility function is given by 1/dr √ pr, where pr is the loss probability seen by User r which is consistent with the models in <ref type="bibr" target="#b14">[14,</ref><ref type="bibr" target="#b7">7,</ref><ref type="bibr">6]</ref>. While we use this simplified model for analysis in the paper, our simulations in ns-2 use TCP-Reno, including slow-start, time-out, fast retransmit, etc. A slightly more refined utility function is used in <ref type="bibr" target="#b9">[9]</ref> and the results in this paper can be easily modified to incorporate that utility function.</p><p>The starting point of this paper is the fluid-model of the TCP flow-control problem along with the AVQ scheme that was proposed in <ref type="bibr" target="#b11">[11]</ref>. However, here we explicitly consider the feedback delay due to the RTT of each user and thus, we obtain a delay-differential equation. We linearize this system and obtain conditions on d, the number of users N, the utilization γ of the link and a smoothing parameter α in the update equation of the AVQ scheme to ensure stability.</p><p>The rest of the paper is organized as follows: in Section 2, we present an implementation of the AVQ algorithm and provide design rules for the stability of the AVQ and TCP together. In Section 3, we provide detailed ns-2 to validate our design rules and also compare the AVQ algorithm with RED, REM, GKVQ and the PI controllers. The PI controller is somewhat similar to AVQ in that it adapts the marking probability in a manner similar to the virtual capacity adaptation in the AVQ scheme, but it depends on the queue size at the link. As a result, for small buffers the system tends to perform poorly. Also, since the marking probability is directly modified and this update has to be slow enough for system stability, the scheme exhibits sluggishness when short flows are introduced. This would be the subject of simulations in Section 3. In Section 4, we provide theoretical justification for the design rules in Section 2. Conclusions are provided in Section 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">THE AVQ ALGORITHM</head><p>Let C be the capacity of a link and γ be the desired utilization at the link. The AVQ scheme, as presented in <ref type="bibr" target="#b11">[11,</ref><ref type="bibr" target="#b12">12]</ref>, at a router works as follows:</p><p>• The router maintains a virtual queue whose capacity C ≤ C and whose buffer size is equal to the buffer size of the real queue. Upon each packet arrival, a fictitious packet is enqueued in the virtual queue if there is sufficient space in the buffer. If the new packet overflows the virtual buffer, then the packet is discarded in the virtual buffer and the real packet is marked by setting its ECN bit or the real packet is dropped, depending upon the congestion notification mechanism used by the router.</p><p>• At each packet arrival, the virtual queue capacity is updated according to the following differential equation:</p><formula xml:id="formula_0">Ċ = α(γC -λ), (<label>1</label></formula><formula xml:id="formula_1">)</formula><p>where λ is the arrival rate at the link. The rationale behind this is that marking has to be more aggressive when the link utilization exceeds the desired utilization and should be less aggressive when the link utilization is below the desired utilization.</p><p>We now make the following observations. No actual enqueueing or dequeuing of packets is necessary in the virtual queue, we just have to keep track of the virtual queue length. Equation ( <ref type="formula" target="#formula_0">1</ref>) can be thought of as a token bucket where tokens are generated at rate αγC up to a maximum of C and depleted by each arrival by an amount equal to α times the size of the packet. Define B = buffer size s = arrival time of previous packet t = Current time b = number of bytes in current packet V Q = Number of bytes currently in the virtual queue Then, the following pseudo-code describes an implementation of AVQ scheme:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>The AVQ Algorithm</head><p>At each packet arrival epoch do</p><formula xml:id="formula_2">V Q ← max(V Q -C(t -s), 0) / * Update Virtual Queue Size * / If V Q + b &gt; B Mark or drop packet in the real queue else V Q ← V Q + b / * Update Virtual Queue Size * / endif C = max(min( C + α * γ * C(t -s), C) -α * b, 0) / * Update Virtual Capacity * / s ← t / * Update last packet arrival time * /</formula><p>We note the following features of the AVQ scheme:</p><p>1. The implementation complexity of the AVQ scheme is comparable to RED. RED performs averaging of the queue length, dropping probability computation and the random number generation to make drop decisions.</p><p>We replace these with the virtual capacity calculation in AVQ.</p><p>2. AVQ is a primarily a rate-based marking, as opposed to queue length or average queue length based marking. This provides early feedback, the advantages of which have been explored by Hollot et al <ref type="bibr" target="#b7">[7,</ref><ref type="bibr">6]</ref>, which was also mentioned in Kelly et al <ref type="bibr" target="#b10">[10]</ref>.</p><p>3. Instead of attempting to regulate queue length as in RED, PI controller or recent versions of REM, we regulate utilization. As we will see in simulations, this is more robust to the presence of extremely short flows or variability in the number of long flows in the network. The reason is that, when utilization is equal to one, variance introduced by the short flows seems to lead to an undesirable transient behavior where excessively large queue lengths persist over long periods of time.</p><p>4. Unlike the GKVQ algorithm <ref type="bibr" target="#b5">[5]</ref>, we adapt the capacity of the virtual queue. A fixed value of C leads to a utilization that is always smaller than C/C and it could be much smaller than this depending on the number of users in the system. Our marking mechanism is also different in that we do not mark until the end of a busy period after a congestion episode.</p><p>5. There are two parameters that have to be chosen to implement AVQ: the desired utilization γ and the damping factor α. The desired utilization γ determines the robustness to the presence of uncontrollable short flows. It allows an ISP to trade-off between high levels of utilization and small queue lengths. Both the parameters α and γ determine the stability of the AVQ algorithm and we provide a simple design rule to choose these parameters.</p><p>The starting point for the analysis of such a scheme is the fluid-model of the TCP congestion-avoidance algorithm as proposed in <ref type="bibr" target="#b11">[11]</ref>. A theoretical justification of how a stochastic discrete-time equation can be approximated by a fluid-model is shown in <ref type="bibr" target="#b8">[8]</ref>. We will then incorporate the virtual capacity update equation with this model and study the stability of system under linearization.</p><p>Consider a single link of capacity of C and let the desired utilization of the link be γ ≤ 1. Let N TCP users be accessing that link and let d be the common round-trip propagation delay of each user. We will model the TCP users using the -1 d 2 x utility function as proposed in <ref type="bibr" target="#b11">[11]</ref>. For the sake of simplicity and tractability, we will neglect the slow-start and the time-out behavior when modeling the TCP users. We will later show through simulations that even with slow-start and timeouts, the result holds. The congestion-avoidance algorithm of the TCP users can be written as:</p><formula xml:id="formula_3">ẋi = 1 d 2 -βxi(t)xi(t -d)p( N j=1 xj(t -d), C(t -d)), (<label>2</label></formula><formula xml:id="formula_4">)</formula><p>where β &lt; 1 and C is the virtual-capacity of the link. A β value of 2/3 would give us the steady-state throughput of TCP as</p><formula xml:id="formula_5">1 d 3 2p *</formula><p>, where p * is the steady-state marking probability which is consistent with the results in <ref type="bibr" target="#b16">[16]</ref>. Hence, we will use β = 2/3, in all our calculations. Also, note that on substituting xi</p><formula xml:id="formula_6">≈ W i d ,</formula><p>where Wi is the window-size of user i, we recover the TCP window control algorithm <ref type="bibr" target="#b11">[11,</ref><ref type="bibr" target="#b14">14]</ref>.</p><p>The update equation at each link can now be written as:</p><formula xml:id="formula_7">Ċ = α(γC -λ),<label>(3)</label></formula><p>where λ = N j=1 xj is the total flow into the link and α &gt; 0 is the smoothing parameter. Note that α determines how fast one adapts the marking probability at the link to the changing network conditions. We will present a design rule that specifies how to choose α for a given feedback delay (d), utilization (γ) and a lower bound on the number of users (N ). In fact, as we will show in Section 4, one can arrive at bounds on any of the four parameters α, γ, N or d given the other three using the same design rule. However, in practice, it would seem most natural to choose α given the other three parameters.</p><p>The equilibrium point of the non-linear TCP/AQM model is given by:</p><formula xml:id="formula_8">i x * i = λ * = γC x * i = γC N p(γC, C * ) = N 2 β(dγC) 2</formula><p>Let us assume that</p><formula xml:id="formula_9">λ(t) = λ * + δλ(t) C(t) = C * + δ C(t).</formula><p>The linearized model of the non-linear TCP/AQM model can now be written as:</p><formula xml:id="formula_10">δ λ = -K11δλ(t) -K12δλ(t -d) + K2δ C(t -d) (4) δ C = -αδλ(t),<label>(5)</label></formula><p>where</p><formula xml:id="formula_11">K11 := N γCd 2 K12 := N γCd 2 + β γC 2 N ∂p(γC, C * ) ∂λ K2 := β γC 2 N ∂p(γC, C * ) ∂ C .</formula><p>We will now state the main result of this paper which serves as the design for the AVQ algorithm. The proof of this result is given in Section 4.</p><p>Theorem 1. Suppose that the feedback delay d, number of users N, and the utilization γ, are given. Find α * satisfying:</p><formula xml:id="formula_12">ω d + arctan ω K11 = π 2 , (<label>6</label></formula><formula xml:id="formula_13">)</formula><p>where ω is defined as:</p><formula xml:id="formula_14">ω(α, d, N, γ) = 1 √ 2 (K 2 12 -K 2 11 ) + (K 2 12 -K 2 11 ) 2 + 4K 2 2 α 2 .</formula><p>Then, for all α &lt; α * , the system is stable. Moreover, for every α &lt; α * , the system remains stable for all N &gt; N, γ &lt; γ and d &lt; d.</p><p>We note that ( <ref type="formula" target="#formula_12">6</ref>) can be easily solved using a simple numerical solver such as those found in Mathematica or Matlab.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">SIMULATIONS</head><p>In this section, we will use the packet-simulator ns-2 to simulate the adaptive virtual queue scheme. We will show that simulation results agree with the convergence results shown in the previous section. In particular, we will select an α, using Theorem 1 that will ensure stability for a given round-trip delay d, and a lower bound on the number of users, Nmin. We then present a single set out of many experiments that we did to show that α indeed stabilizes the system even in the presence of arrivals and departure of short connections. We will then compare this scheme with many other AQM schemes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Simulation Setup</head><p>Throughout this section, we consider a single link of capacity 10 Mbps that marks or drops packets according to some AQM scheme. For AVQ, we always let γ, the desired utilization, be 0.98. We use TCP-Reno as the default transport protocol and assume that packets have an average size of 1000 bytes. Each TCP connection has a propagation delay between 40 ms and 130 ms. The buffer size at the link is assumed to be 100 packets.</p><p>In the first four experiments, we assume that the link marks packets and thus, any packet loss is due to buffer overflow. In these experiments, we demonstrate that the AVQ scheme achieves high utilization and low packet loss. Further, the algorithm responds quickly to changing network conditions such as varying number of TCP flows. In the last experiment, we compare the AVQ scheme with other schemes when the link drops packets (as opposed to marking) to indicate congestion. Again, the AVQ scheme is shown to have smaller queue lengths compared to other schemes.</p><p>The maximum delay that a packet can incur is Tp + qmax C , where Tp is the round-trip propagation delay. Therefore, we design the AVQ controller for a delay of d = 210 ms. Using the design rule in Theorem 1, any α &lt; 0.17, will ensure stability. In the experiments, we let α be 0.15. In all experiments, we consider two types of flows: FTP flows that are long lived and short flows of 20 packets each.</p><p>Experiment 1: In this experiment, we study the convergence properties and buffer sizes at the queue for the AVQ scheme alone. The number of FTP flows is 180 while the short flows arrive at the link at the rate of 30 flows per second. To simulate a sudden change in network conditions, we start the experiment with only FTP flows in the system. Short flows are introduced after 100 seconds. Again, the propagation delays of the short flows are distributed in the interval <ref type="bibr">[40,</ref><ref type="bibr">130]</ref> ms. The evolution of the virtual capacity is given in Figure <ref type="figure" target="#fig_2">2</ref>. At 100 seconds, there is a drop in the virtual capacity since the AVQ algorithm adapts to the changing number of flows. Beyond 100 seconds, the virtual capacity is lower than it was before 100 seconds since the links marks packets aggressively due to the increased load. The queue length evolution for the system is given in Figure <ref type="figure">1</ref>. Except during transients introduced by load changes, the queue lengths are small, less than 20 packets. At 100 seconds, the queue length jumps up due to the short flows. However, the system stabilizes and the queue lengths are small once again. Table <ref type="table" target="#tab_0">1</ref> gives the average and the standard deviation of the queue length before and after the introduction of short flows. We can see the average queue lengths and the standard deviation are almost similar. Another important performance measure is the number of packets dropped due to buffer overflow in the system. Since ECN marking is used, we expect the number of packets lost due to buffer overflow to be small. Indeed only 10 out of roughly 250, 000 packets are dropped. These drops are primarily due to the sudden additional load brought on by the short flows. Another performance measure that is of interest is the utilization of the link. The utilization was observed to be 0.9827, which is very close to the desired utilization of 0.98.</p><p>We will now compare the AVQ scheme with other AQM schemes that have been proposed. Since there are many AQM schemes in the literature, we will compare the AVQ scheme with a representative few. In particular, we will compare the AVQ scheme with 1. Random Early Discard (RED) proposed in <ref type="bibr" target="#b4">[4]</ref>. In our experiments, we use the "gentle" version of RED. Unless otherwise stated, the parameters were chosen as recommended in http://www.aciri.org/floyd/REDparameters.txt.</p><p>2. Random Early Marking (REM) proposed in <ref type="bibr" target="#b1">[1]</ref>. The REM scheme tries to regulate the queue length to a desired value (denoted by qref ) by adapting the marking probability. The REM controller marks each packet with a probability p which is updated periodically (say, every T seconds) as</p><formula xml:id="formula_15">p[k + 1] = 1 -φ -µ[k+1] ,</formula><p>where φ is a arbitrary constant greater than one and</p><formula xml:id="formula_16">µ[k+1] = max(0, µ[k]+γ(q[k+1]-(1-α)q[k]-αqref )),</formula><p>and α and γ are constants and q[k + 1] is the queue length at the k+1 sampling instant. Since REM is very sensitive to φ, we will use the values as recommended in <ref type="bibr" target="#b1">[1]</ref>  3. The PI controller proposed in <ref type="bibr">[6]</ref>. The PI controller marks each packet with a probability p which is updated periodically (say, every T seconds) as</p><formula xml:id="formula_17">p[k + 1] = p[k] + a(q[k + 1] -qref ) -b(q[k] -qref ),</formula><p>where a &gt; 0 and b &gt; 0 are constants chosen according to the design rules given in <ref type="bibr">[6]</ref>.</p><p>4. The virtual queue based AQM scheme (GKVQ) proposed by <ref type="bibr" target="#b5">[5]</ref>. In this scheme, the link maintains a virtual queue with fixed capacity C = θC, and buffer size B = θB, where θ &lt; 1, and B is the buffer capacity of the original queue. Whenever the virtual queue overflows, all packets in the real queue and all future incoming packets are marked till the virtual queue becomes empty again. Note that this scheme cannot be used in the case where the link drops the packets instead of marking them because the throughput would be very bad due to aggressive dropping. As in <ref type="bibr" target="#b5">[5]</ref>, we will use θ = 0.90 in all our simulations using the GKVQ.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Experiment 2:</head><p>In this experiment, we compare the performance of the various AQM schemes assuming that the link "marks" packets and in the presence of long-lived FTP flows only. The queue size at the link is 100 packets and we let the desired average queuing delay be between 30ms and 60ms. As a result, the desired queue length for the REM scheme and the PI scheme is set at 50 packets and the minthresh and the maxthresh for the RED (with gentle turned on) scheme is set at 37 and 75 packets respectively. Recall that the desired utilization of the link was set to be 0.98 for the AVQ scheme. Since we use an average queue length of 50 packets for REM and the PI controller, it is natural to attempt to regu-late the queue length to 50 for the AVQ scheme also. However, the AVQ does not directly attempt to control queue size. Thus, for the AVQ scheme, we drop every packet that arrives when there are already 50 packets in the real queue. Note that this is the worst-case scenario for the AVQ scheme, since when ECN marking is used, the natural primary measure of performance is packet loss.</p><p>We summarize our simulation results below:</p><p>• Packet Losses and Link Utilization: The losses incurred by all the schemes are shown in Figure <ref type="figure">3</ref> as a function of the number of FTP flows. The AVQ scheme has fewer losses than any other scheme except the GKVQ even at high loads. The loss rate for GKVQ and AVQ are comparable; however, the GKVQ marks packets more aggressively than any other scheme and thus has lower utilization. Figure <ref type="figure">4</ref> shows the utilization of the link for all the AQM schemes. Note that, the utilization of GKVQ is as low as 75%. This can once again be attributed to the aggressive marking strategy of GKVQ. RED also results in a poor utilization of the link. We could have got a higher utilization with RED if we had increased the minthresh to a larger value, but we would have increased the packet drops at the link. REM and PI has an utilization of 1.0 as the queue is always non-empty. For the AVQ scheme, we required a desired utilization of 0.98 and we can see that the AVQ scheme tracks the desired utilization quite well. Thus, the main conclusion from this experiment is that the AVQ achieves low loss with high utilization.</p><p>• Responsiveness to changing network conditions: We measure the response of each AQM scheme to different numbers of FTP flows, by letting the number of flows be constant over a 100 second interval and then increasing it. The average queue length (over each 100 second interval) of each scheme as the number of users increase is shown in Figure <ref type="figure">5</ref>. We see from the figure that PI and REM have higher average queue lengths than the desired queue length. On the other hand, AVQ, GKVQ and RED has smaller queue sizes. This is due to the fact that it takes REM and PI have a long transient period before the queue length converges. The average queue length over each 100 second interval does not delete any transients since one of our goals in this experiment is to study the responsiveness of the AQM scheme to load changes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Experiment 3:</head><p>In this section, we will compare the responsiveness of the AQM schemes when flows are dropped and then introduced later on. Specifically, we only compare REM and the PI controller (since these are only ones among those that we have discussed that attempt to precisely regulate the queue length to a desired value) with the AVQ controller. Unless otherwise stated, all the system parameters are identical to Experiment 2. The number of FTP connections is 140 at time 0.0 At time 100, 105 FTP connections are dropped and at time 150 another 105 FTP connections are established. We will plot the evolution of the queue size for each of the AQM scheme. Figure <ref type="figure">6</ref> shows the evolution of the queue size for PI as the flows depart and come. Note that the desired queue length is 50 packets. We can see that the system takes some time to respond to either the departure of the flows or to the new arrivals. On the other hand, the queue in the AVQ scheme in Figure <ref type="figure">7</ref> responds quickly to the removal of flows at time t = 100, and to the addition of flows at time 150. Figure <ref type="figure">8</ref> gives the evolution of the queue sizes for REM. The desired queue level in the REM scheme is 50 packets and REM is very slow to bring the queue level to 50 packets. On removing flows, the queue level drops, but on addition of new flows, there is a large overshoot in REM.</p><p>Experiment 4: Till now we have been comparing AVQ and PI in the absence of short flows. However, a large part of the connections in the Internet comprise of short flows. As a result, it is important to study the performance of an AQM scheme in the presence short flows. In this experiment, we will start with 40 FTP connections that remain throughout the length of the experiment. We also allow the AQM schemes to converge to the optimal solution when there are only 40 FTP connections in the network. We then introduce short flows and study the performance of the AQM scheme as the number of short flows increases. We start with a short-flow arrival rate of 10 per second and gradually increase it to 50 short flows per second. Each short flow transfers 20 packets using TCP/Reno. The round-trip times of the short flows are also distributed uniformly between 40ms and 130ms.</p><p>We again study the following performance measures:</p><p>• Packet losses and Utilization: The losses incurred by both the schemes are shown in Figure <ref type="figure">9</ref>. Note that AVQ has lower drops than the RED, REM and the PI schemes. GKVQ incurs no significant packet drops (and hence cannot be seen in the figure) among all the schemes because of its aggressive marking scheme. However, as in Experiment 2, the utilization of GKVQ is poor as seen in Figure <ref type="figure">10</ref>. We again see that REM and PI have an utilization of one, while RED and GKVQ have poor utilization. Once again, the utiliza-tion of RED can be made higher, but this will come at the expense of higher average queue lengths and more packet losses. For the AVQ scheme, the utilization is actually slightly higher than the desired utilization at high loads, but this can be attributed to the shortflows.</p><p>• Queue length: The average queue length of each scheme as the rate of the incoming short-flows short connections are increased is shown in Figure <ref type="figure">11</ref>. We see that the the AVQ controller maintains the smallest queue length. The fairness measures of the AVQ algorithm are not shown here due to space limitations.</p><p>Note: Instead of marking or dropping a packet in the real queue when the virtual queue overflows, one can mark or drop packets in the real queue by applying RED (or any other AQM algorithm) in the virtual queue. Thus, if there are desirable features in other AQM schemes, they can be easily incorporated in the AVQ algorithm. When marking is employed, our experience is that a simple mark-tail would be sufficient as shown in Experiments 1 through 4. In the case when the link drops the packets, many successive packet drops from the same flow could cause time-outs. To avoid this, one could randomize the dropping by using a mechanism like RED in the virtual queue to prevent bursts of packets of the same flow to be dropped. Our experience has been that, if RED is employed in the virtual queue, the performance of the AQM scheme is not very sensitive to the choice of the RED parameters.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">STABILITY ANALYSIS OF THE AVQ SCHEME</head><p>In this section, we will prove the main result of the paper which was stated in Theorem 1. The starting point of the analysis is the linearized version of the TCP/AQM model derived in ( <ref type="formula">4</ref>) and <ref type="bibr" target="#b5">(5)</ref>. We summarize the main ideas behind the proof:</p><p>• The stability of a linear delay-differential equation can be analyzed using its characteristic equation. The characteristic equation of the linear delay-differential equation can be obtained by taking its Laplace Transform. For the linearized system to be stable, its characteristic equation should have all its roots in the left-half plane (i.e., if σ is a root of the characteristic equation, then Re[σ] &lt; 0).</p><p>• We will first show that for α, N, and γ fixed the system is stable in the absence of feedback delays, i.e., d = 0. This implies that all the roots of the characteristic equation lie in the left-half plane. The roots of the characteristic equation are continuous functions of its parameters. Therefore, the roots of the characteristic equation are continuous function of the feedback delay d. By increasing d, one can find the smallest feedback delay d * at which one of the roots hits the imaginary axis (if there is no such d, then the system is stable for all d.). Hence, for all d &lt; d * , the system has all its roots in the left-half plane and hence it is stable. This is the key idea and we will be using this idea frequently throughout this section.</p><p>Recall that the linearized TCP/AQM system was given in (4) and <ref type="bibr" target="#b5">(5)</ref>. For analytical tractability, we assume that</p><formula xml:id="formula_18">p(λ, C) = (λ -C) + λ . (<label>7</label></formula><formula xml:id="formula_19">)</formula><p>Note that, while this is not differentiable everywhere in λ or C, it is differentiable in the region λ &gt; C. Substituting for ∂p(γC, C * ) ∂λ , and ∂p(γC, C * )</p><formula xml:id="formula_20">∂ C</formula><p>and using the fact that p(γC, C * ) = N 2 β(dγC) 2 , we find that</p><formula xml:id="formula_21">K11 = N γCd 2 K12 = K2 = β γC N . (<label>8</label></formula><formula xml:id="formula_22">)</formula><p>Note that K 12 &gt; K11. Let Λ(s) denote the Laplace-Transform of δλ(t) and let Ψ(s) denote the Laplace-transform of δ C(t).</p><p>Taking the Laplace-transforms of ( <ref type="formula">4</ref>) and ( <ref type="formula" target="#formula_10">5</ref>), we get:</p><formula xml:id="formula_23">sΛ(s) = -K11Λ(s) -K12e -sd Λ(s) + K2e -sd Ψ(s) (9) sΨ(s) = -αΛ(s). (<label>10</label></formula><formula xml:id="formula_24">)</formula><p>Substituting <ref type="bibr" target="#b10">(10)</ref> in <ref type="bibr" target="#b9">(9)</ref>, we get the so-called characteristic equation</p><formula xml:id="formula_25">s + K11 + e -sd K12 + α K2 s = 0. (<label>11</label></formula><formula xml:id="formula_26">)</formula><p>Once again, the key idea in this approach is that roots are continuous functions of the round-trip delay d. As a result, if the system is stable with d = 0 for a fixed value of α, then the roots are strictly in the left-half plane. Therefore, we can choose d small enough such that the roots still remain in the left-half plane. This will help us to find the maximum feedback delay for which the system is stable for a given α.</p><p>We will then show that we can use the same technique to show that given a feedback delay d, one can find the maximum value of α for which the system is stable. We will then discuss the impact of the number of users on the stability of the system. We will formalize these ideas in this section.</p><p>When d = 0, i.e., there is no feedback delay in the system, the characteristic equation reduces to:</p><formula xml:id="formula_27">s + K11 + K12 + α K2 s = 0.<label>(12)</label></formula><p>Solving the quadratic equation, we get:</p><formula xml:id="formula_28">s = -(K11 + K12) ± (K11 + K12) 2 -4αK2 2 .</formula><p>If 4αK2 ≤ (K11 + K12) 2 , then the system has all real roots which lie strictly in the left half-plane. If 4αK2 &gt; (K11 + K12) 2 , then the system has complex roots that also lie strictly in the left half-plane. Thus, for all values of α &gt; 0, the system is stable.</p><p>The following theorem gives the necessary condition on the RTT for the stability of the system given by ( <ref type="formula">4</ref>) and (5).  <ref type="figure">ω(α,</ref><ref type="figure">d,</ref><ref type="figure">N,</ref><ref type="figure">γ</ref></p><formula xml:id="formula_29">) = 1 √ 2 (K 2 12 -K 2 11 ) + (K 2 12 -K 2 11 ) 2 + 4K 2 2 α2 (13) satisfies ωd + arctan α ω + arctan ω K11 = (2k + 1)π, (<label>14</label></formula><formula xml:id="formula_30">)</formula><p>for some k = 0, 1, 2, • • • . Then, the TCP/AQM system given in ( <ref type="formula">4</ref>) and ( <ref type="formula" target="#formula_10">5</ref>) is stable for all values of d &lt; d.</p><p>Proof: The characteristic equation of the TCP/AQM system (11) can be rewritten as:</p><formula xml:id="formula_31">1 + e -sd K12 + α K 2 s s + K11 = 0. (<label>15</label></formula><formula xml:id="formula_32">)</formula><p>Let jω be one of the roots of the characteristic equation at the smallest d = d * such that the roots hits the imaginary axis. Since the roots on the imaginary axis are complementary, we will concern ourselves only with ω ≥ 0. From (15), we get:</p><formula xml:id="formula_33">e -jωd K12 + α K 2 jω jω + K11 = -1.</formula><p>To satisfy the last condition, the following conditions must be met simultaneously: Condition on magnitude:</p><formula xml:id="formula_34">e -jωd K12 + α K 2 jω jω + K11 = 1</formula><p>Condition on angles:</p><formula xml:id="formula_35">∠ e -jωd K12 + α K 2 jω jω + K11 = (2k + 1)π k= 0, ±1, ±2.</formula><p>From the condition on magnitude, we get</p><formula xml:id="formula_36">K 2 12 + K 2 2 α2 ω 2 ω √ K 2 11 +ω 2 = 1 ⇒ ω(α, d, N, γ) = (K 2 12 -K 2 11 ) + (K 2 12 -K 2 11 ) 2 + 4K 2 2 α2 2 .</formula><p>From the condition on angles, we get:</p><formula xml:id="formula_37">ωd + arctan α ω + arctan ω K11 = (2k + 1)π, for k = 0, 1, 2, • • • . Since K11 is a decreasing function of d,</formula><p>and K12 and K2 are independent of d, we have ω(α, d, N, γ) as an increasing function of d. Therefore, the smallest d = d that solves <ref type="bibr" target="#b14">(14)</ref> gives the first time that at least one of the roots hit the imaginary axis. Therefore, for all d &lt; d, the system is locally asymptotically stable. REMARK: Although the above theorem provides a necessary and sufficient condition, it is hard to verify the conditions of the theorem numerically due to the following issues:</p><p>• What value of k will yield the smallest d?</p><p>• If d solves <ref type="bibr" target="#b14">(14)</ref>, how can we be sure that there exists no d, such that d solves <ref type="bibr" target="#b14">(14)</ref> and d &lt; d?</p><p>The following theorem solves these issues by giving an easily verifiable sufficient condition for stability. Theorem 3. Fix α = α, the number of TCP users, N and the utilization γ. Find any d * &gt; 0, such that</p><formula xml:id="formula_38">ωd * + arctan ω K11 = π 2 , (<label>16</label></formula><formula xml:id="formula_39">)</formula><p>where ω is as given in <ref type="bibr" target="#b13">(13)</ref>. Then for all d &lt; d ).</p><p>Thus,</p><formula xml:id="formula_40">ω(α, d, N, γ) d+ tan -1 ( ω( α, d,N,γ) K 11 ( d) ) &lt; ω(α, d * , N, γ)d * + tan -1 ( ω( α,d * ,N,γ) K 11 (d * ) ) = π 2 .</formula><p>But this contradicts (18 </p><formula xml:id="formula_41">&lt; d * 2 . Therefore, ω(α, d * 1 , N, γ)d * 1 + tan -1 ( ω( α,d * 1 ,N,γ) K 11 (d * 1 ) ) &lt; ω(α, d * 2 , N, γ)d * 2 + tan -1 ( ω( α,d * 2 ,N,γ) K 11 (d * 2 ) ) = π 2 .</formula><p>But this is a contradiction. Hence, d * is the unique solution to <ref type="bibr" target="#b16">(16)</ref>.</p><p>Example 1. Consider a single link with 10Mbps capacity and let there be 180 users accessing it. Let the average packet size be 1000 bytes and γ = 1.0. The capacity of the link can be written as 1250 packets per second. Let α = 0.1. We are interested in finding d * such that the system is stable for all d &lt; d * . Using <ref type="bibr" target="#b16">(16)</ref> to solve for d * , we get d * = 0.210. Therefore, for all d &lt; 0.210 seconds, the system is locally stable.</p><p>Till now, we have been given a fixed α and a fixed N and we were interested in finding the largest feedback delay for which this system is stable. But, a more practical question is the following: given a feedback delay d, and number of users N, how can one design α such that the system is stable? The next theorem gives a method by which one can design α such that system is stable. Note that this theorem is the main result of the paper and is also stated in Section 2. We state it again for convenience. Theorem 4. Fix the feedback delay d, the number of users N and the utilization γ. Find α * satisfying:</p><formula xml:id="formula_42">ω d + arctan ω K11 = π 2 , (<label>19</label></formula><formula xml:id="formula_43">)</formula><p>where ω is as given in <ref type="bibr" target="#b13">(13)</ref>. Then, for all α &lt; α * , the system is stable.</p><p>Proof: Fix any α &lt; α * . Let τ (α) be the d satisfying <ref type="bibr" target="#b16">(16)</ref>.</p><p>We have to show that, τ (α * ) &gt; d. We know that τ (α * ) = d. For any fixed d, we know that ω(α, d, N, γ) decreases as α decreases. Therefore, ω(α, d, N, γ) d+ tan -1 ω( α, d,N,γ)</p><formula xml:id="formula_44">K 11</formula><p>&lt; ω(α * , d, N, γ) d+ tan -1 ω(α * , d,N,γ)</p><formula xml:id="formula_45">K 11 = π 2 .</formula><p>Since ω(α, d, N, γ) is an increasing function of d, we have,</p><formula xml:id="formula_46">τ (α) &gt; d.</formula><p>Therefore, for all α &lt; α * , the system is locally stable.</p><p>Example 2. Consider the same setting as in Example 1. Let d = 0.21. We are interested in finding α * such that the system is stable for all α &lt; α * . Using (19) to solve for α * , we get α * = 0.10. Therefore, for all α &lt; 0.10, the system is locally stable.</p><p>Another important design aspect is how stability is affected as the number of users changes. In general, given an α and d, can one find the number of users required to make the system stable. The following theorem gives a lower bound on the number of users required to make the system stable.</p><p>Theorem 5. Fix the feedback delay d, the smoothing parameter α and the utilization γ. Find N satisfying:</p><formula xml:id="formula_47">ω d + arctan ω K11 = π 2 , (<label>20</label></formula><formula xml:id="formula_48">)</formula><p>where ω is as given in <ref type="bibr" target="#b13">(13)</ref>. Then, for all N &gt; N, the system is stable.</p><p>Proof: Note that in this case, K11, K12, and K2 are all functions of N. We can easily show that as N increases, K11 increases, K12 decreases, K2 decreases and ω(α, d, N, γ) decreases. Using this and following along the lines of the proof for Theorem 4, we can show that for all N &gt; N, the system is stable. Remarks: One of the most important applications of Theorem 5 comes in the design of α. The system is initially designed for a low value of N = N, and a particular d. We can now use Theorem 4 to find the value of α * that will lead to stability. However, Theorem 5 assures us that the system will still be stable when the number of users increases beyond N. We can state a similar theorem for the utilization γ of the link.</p><p>Theorem 6. Fix the feedback delay d, number of users N and the smoothing parameter α. Find γ satisfying:</p><formula xml:id="formula_49">ω d + arctan ω K11 = π 2 , (<label>21</label></formula><formula xml:id="formula_50">)</formula><p>where ω is as given in <ref type="bibr" target="#b13">(13)</ref>. Then, for all γ &lt; γ, the system is stable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">CONCLUSIONS</head><p>In this paper, we presented an easily implementable AQM called the Adaptive Virtual Queue and provided simple design rules to choose its parameters. We then showed through simulations that the AVQ controller performs better than a number of other well-known AQM schemes.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :Figure 2 :</head><label>12</label><figDesc>Figure 1: Experiment 1. Queue length vs time for the AVQ scheme</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>4Figure 3 :Figure 4 :Figure 5 :Figure 6 :Figure 7 :Figure 8 :Figure 9 :Figure 10 :Figure 11 :Figure 12 Figure 13 :Figure 14 :</head><label>34567891011121314</label><figDesc>Figure 3: Experiment 2. Losses at the link for varying number of FTP connections for the different AQM schemes</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Theorem 2 .</head><label>2</label><figDesc>Fix α = α, the number of TCP users, N and the utilization γ. Find the smallest d = d such that</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 : Experiment 1. Mean and the standard deviation of the queue size before and after the in- troduction of short flows.</head><label>1</label><figDesc></figDesc><table><row><cell></cell><cell cols="2">Before Short Flows After Short flows</cell></row><row><cell>Avg. Queue Size</cell><cell>13.11</cell><cell>10.39</cell></row><row><cell>Std. Deviation</cell><cell>20.44</cell><cell>15.17</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>). Hence d * &lt; d. Thus, any d &lt; d * also satisfies d &lt; d, and therefore, for any d &lt; d * , the system is stable from theorem 2. Suppose that d * is not unique. Let d * 1 and d * 2 be two values that satisfy (16). Without loss of generality, let us assume d * 1</figDesc><table /></figure>
		</body>
		<back>

			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>* Research supported by NSF grants NCR-9701525, ANI-9813710 and DARPA grant F30602-00-2-0542.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Experiment 5:</head><p>Till now, we have been assumed that the router marks packets upon detecting congestion. Instead one can drop packets when congestion is detected. In this experiment, we use dropping instead of marking when the links detects an incipient congestion event.</p><p>Note that, in the case of marking, the main goal of the adaptive algorithm was to match the total arrival rate to the desired utilization of the link. However, in the case of dropping, the link only serves those packets that are admitted to the real queue. As a result, in the case of dropping, one adapts the virtual capacity ( C) only when a packet has been admitted to the real queue, i.e., only the accepted arrival rate is taken into consideration.</p><p>We compare RED, REM and PI controller to the AVQ scheme. We do not use GKVQ as a dropping algorithm as the number of packets dropped on detecting congestion would be very high and it would result in negligible throughput. The buffer limit at the link is set to 100 packets and we require the average queueing delay to lie between 30ms and 60 ms. The users employ TCP NewReno. All the other parameters are as in Experiment 2. However, in this case we simulate the AVQ scheme with both γ = 1.0 and γ = 0.98. The reason for using γ = 0.98 earlier was to have small losses to get the most benefit from ECN marking. Since marking is no longer used, we also study the AVQ under full utilization.</p><p>We assume that 40 FTP connections use the link for the entire duration of the simulation. We allow the respective AQM schemes to converge and then introduce short-flows at 100s. Short-flows introduced are TCP-RENO sources with 20 packets to transmit. The rate at which short flows arrive at the link is slowly increased. The average queue length, and the utilization are shown in Figure <ref type="figure">12</ref> and Figure <ref type="figure">13</ref>. The total goodput is shown in Figure <ref type="figure">14</ref>. By goodput, we mean the number of packets successfully delivered by the link to the TCP receivers. In general, this could be different from the throughput (which is the total number of packets processed by the link) due to TCP's retransmission mechanism. Note that the average queue length, the goodput of each flow and fairness are the three performance objectives that one would use to compare different AQM schemes when dropping is employed as a congestion notification mechanism. In practice, we would like an AQM scheme that maintains a small average queue length with high utilization. However, the AQM scheme should not introduce any additional bias in the rates towards smaller round-trip flows (TCP by itself introduces a bias towards smaller round-trip flows and we do not want to add it). In this experiment, we compared the average queue length and the utilization at the link of AVQ, RED, REM and PI.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName><surname>References</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Random early marking for Internet congestion control</title>
		<author>
			<persName><forename type="first">S</forename><surname>Athuraliya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">E</forename><surname>Lapsley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">H</forename><surname>Low</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Globecom</title>
		<meeting>IEEE Globecom</meeting>
		<imprint>
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Blue: A new class of active queue management algorithms</title>
		<author>
			<persName><forename type="first">W</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Kandlur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Saha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Shin</surname></persName>
		</author>
		<idno>U. Michigan CSE-TR-387-99</idno>
		<imprint>
			<date type="published" when="1999-04">April 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">TCP and explicit congestion notification</title>
		<author>
			<persName><forename type="first">S</forename><surname>Floyd</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computer Communication Review</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="10" to="23" />
			<date type="published" when="1994-10">October 1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Random early detection gateways for congestion avoidance</title>
		<author>
			<persName><forename type="first">S</forename><surname>Floyd</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Jacobson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Transactions on Networking</title>
		<imprint>
			<date type="published" when="1993-08">August 1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Distributed connection acceptance control for a connectionless network</title>
		<author>
			<persName><forename type="first">R</forename><surname>Gibbens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Kelly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 16th Intl</title>
		<meeting>of the 16th Intl<address><addrLine>Edinburgh, Scotland</addrLine></address></meeting>
		<imprint>
			<publisher>Teletraffic Congress</publisher>
			<date type="published" when="1999-06">June 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">A control theoretic analysis of RED</title>
		<author>
			<persName><forename type="first">C</forename><surname>Hollot</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Misra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Towlsey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Gong</surname></persName>
		</author>
		<idno>00-41</idno>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
	<note type="report_type">UMass CMPSCI Technical Report</note>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">On designing improved controllers for AQM routers supporting TCP flows</title>
		<author>
			<persName><forename type="first">C</forename><surname>Hollot</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Misra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Towlsey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Gong</surname></persName>
		</author>
		<idno>00-42</idno>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
	<note type="report_type">UMass CMPSCI Technical Report</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A note on the fairness of additive increase and multiplicative decrease</title>
		<author>
			<persName><forename type="first">P</forename><surname>Hurley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J.-Y</forename><forename type="middle">L</forename><surname>Boudec</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Thiran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 16th Intl</title>
		<meeting>of the 16th Intl<address><addrLine>Edinburgh, Scotland</addrLine></address></meeting>
		<imprint>
			<publisher>Teletraffic Congress</publisher>
			<date type="published" when="1999-06">June 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Mathematical modeling of the Internet</title>
		<author>
			<persName><forename type="first">F</forename><surname>Kelly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 4th Intl</title>
		<meeting>of the 4th Intl<address><addrLine>Edinburgh, Scotland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-07">July 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Distributed admission control</title>
		<author>
			<persName><forename type="first">F</forename><surname>Kelly</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Key</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Zachary</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Journal on Selected Areas in Communications</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">End-to-end congestion control: utility functions, random losses and ECN marks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Kunniyur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Srikant</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of INFOCOM 2000</title>
		<meeting>INFOCOM 2000<address><addrLine>Tel Aviv, Israel</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000-03">March 2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A time-scale decomposition approach to adaptive ECN marking</title>
		<author>
			<persName><forename type="first">S</forename><surname>Kunniyur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Srikant</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">To be published in the Proceedings of INFOCOM</title>
		<meeting><address><addrLine>Alaska, Anchorage</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-04">2001. April 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Bandwidth sharing: Objectives and algorithms</title>
		<author>
			<persName><forename type="first">L</forename><surname>Massoulie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Roberts</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. INFOCOM</title>
		<meeting>INFOCOM<address><addrLine>New York, NY</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-03">March 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">A fluid-based analysis of a network of aqm routers supporting tcp flows with an application to red</title>
		<author>
			<persName><forename type="first">V</forename><surname>Misra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Gong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Towlsey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGCOMM 2000</title>
		<meeting>SIGCOMM 2000<address><addrLine>Stockholm, Sweden</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000-09">September 2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">SRED: Stabilized RED</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">J</forename><surname>Ott</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">V</forename><surname>Lakshman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">H</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of INFOCOM</title>
		<meeting>INFOCOM<address><addrLine>New York, NY</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-03">March 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Modeling TCP throughput: A simple model and its empirical validation</title>
		<author>
			<persName><forename type="first">J</forename><surname>Padhye</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Firoiu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Towsley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kurose</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGCOMM</title>
		<meeting>SIGCOMM<address><addrLine>Vancouver, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
