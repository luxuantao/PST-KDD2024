<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Customized Tour Recommendations in Urban Areas</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Aristides</forename><surname>Gionis</surname></persName>
							<email>aristides.gionis@aalto.fi</email>
							<affiliation key="aff0">
								<orgName type="institution">HIIT and Aalto University</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Theodoros</forename><surname>Lappas</surname></persName>
							<email>tlappas@stevens.edu</email>
							<affiliation key="aff1">
								<orgName type="institution">Stevens Institute of Technology</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Konstantinos</forename><surname>Pelechrinis</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">University of Pittsburgh</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Evimaria</forename><surname>Terzi</surname></persName>
							<email>evimaria@cs.bu.edu</email>
							<affiliation key="aff3">
								<orgName type="institution">Boston University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Customized Tour Recommendations in Urban Areas</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">0C6B79B86E058D273B241B716B05FCD0</idno>
					<idno type="DOI">10.1145/2556195.2559893</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T06:36+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>H.4 [Information Systems Applications]: Miscellaneous</term>
					<term>H.2.8 [Database Management]: Database Applications-Data Mining urban computing</term>
					<term>tour recommendations</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The ever-increasing urbanization coupled with the unprecedented capacity to collect and process large amounts of data have helped to create the vision of intelligent urban environments. One key aspect of such environments is that they allow people to effectively navigate through their city. While GPS technology and route-planning services have undoubtedly helped towards this direction, there is room for improvement in intelligent urban navigation. This vision can be fostered by the proliferation of location-based social networks, such as Foursquare or Path, which record the physical presence of users in different venues through check-ins. This information can then be used to enhance intelligent urban navigation, by generating customized path recommendations for users.</p><p>In this paper, we focus on the problem of recommending customized tours in urban settings. These tours are generated so that they consider (a) the different types of venues that the user wants to visit, as well as the order in which the user wants to visit them, (b) limitations on the time to be spent or distance to be covered, and (c) the merit of visiting the included venues. We capture these requirements in a generic definition that we refer to as the TourRec problem. We then introduce two instances of the TourRec problem, study their complexity, and propose efficient algorithmic solutions. Our experiments on real data collected from Foursquare demonstrate the efficacy of our algorithms and the practical utility of the reported recommendations.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Based on a recent report from the United Nations, more than 50% of the world's population currently lives in cities. This percentage is projected to increase to 70% by the year 2050 <ref type="bibr" target="#b2">[2]</ref>. These facts have motivated the concept of smart cities <ref type="bibr" target="#b17">[16]</ref>, that will provide intelligent services to significantly enhance the quality of urban life. One of the critical services within smart cities is urban navigation. While GPS technology has undoubtedly improved people's capability to move easily through a city, intelligent urban navigation goes beyond shortest paths. In this paper, we study how we can utilize contextual information to provide customized tour recommendations for advanced urban navigation.</p><p>In order to accomplish our goal we exploit information provided by a new class of applications: location-based social networks. These applications enable users to share their locations through check-ins to specific venues (e.g., restaurants, bars, parks, museums etc.). This interaction captures the user's physical presence within a city and results in rich datasets that encode real-world activities.</p><p>One of the main functionalities currently offered by locationbased social networks is the recommendation of venues or location-specific activities, based on user preferences. For example, Foursquare, the largest location-based social network to date, with more than 30 million users, is positioning itself as a location-recommendation engine, used to recommend venues to users based on their own check-in history, as well as that of their friends <ref type="bibr" target="#b1">[1]</ref>.</p><p>A key characteristic of such recommendation systems <ref type="bibr" target="#b9">[8,</ref><ref type="bibr" target="#b26">25,</ref><ref type="bibr" target="#b34">33]</ref> is that they evaluate each venue independently. The result of this evaluation is a personalized probability that a specific user likes the venue, or a general value representing the venue's quality or reputation. The venues with the topk highest scores are then recommended to the user. The main drawback of such ranking schemes is their inability to evaluate venues in groups, and deliver tour recommendations that obey certain thematic and spatial constraints.</p><p>As an example, consider the scenario shown in Figure <ref type="figure" target="#fig_0">1</ref>. A user must travel for business in an unfamiliar part of the megacity in which she lives (e.g., NYC). After her work is completed, she wants to explore this area further. In particular, she is interested in taking a "stroll" to visit an outdoor relaxing spot, (e.g., a nice park -Type A in the figure), before heading to a nice restaurant for lunch (Type B). From there, she wants to go to a popular place for a happy-hour drink (Type C) and then return to her initial point (marked by the bulls-eye in the figure) so she can go back home. Since there are different venues from each type scattered across the map, there are multiple potential tours that respect the given type order (such as the one marked in the figure). The tour-recommendation problem becomes even more complex if we also want to keep the total distance within a given budget, and also maximize the overall merit of the venues included in the tour, as we do in this paper.</p><p>Even though a number of tour-recommendation approaches have been recently proposed <ref type="bibr" target="#b15">[14,</ref><ref type="bibr" target="#b24">23,</ref><ref type="bibr" target="#b28">27,</ref><ref type="bibr" target="#b35">34]</ref> (for a review see Section 5), those approaches suffer from a number of limitations. These include the dependence on training data in the form of past tours or trajectories, the assumption that all venues belong to the same type and thus service the same user need, and the inability to cater to the user who wants to cover different needs in a specific order during the tour.</p><p>In this paper, we develop a framework that addresses these shortcomings by delivering tour recommendations that take into account: (i) the different types of venues, as well as the order in which the user wants to visit them; (ii) budget constraints expressed in terms of the total distance that the user is willing to traverse (or the total time the user is willing to spend); and (iii) the satisfaction that each venue can provide to the user, if included in the tour. In our work, we propose and study the computational and the qualitative effect of two alternative definitions for user satisfaction.</p><p>We capture and formalize the above requirements in our definition of the TourRec problem, which asks for a group of venues that adheres to the user constraints and also maximizes the expected user satisfaction. Depending on the way user satisfaction is measured, we define two variants of the TourRec problem: the first variant assumes a (personalized or general) expected satisfaction score for every venue, and asks for the tour with the maximum total satisfaction. The second variant captures the scenario where each venue covers certain attractions (e.g., nearby city landmarks, current location-specific events). The goal is then to find a tour that respects the constraints and covers the maximum number of distinct attractions. We study the complexity of both variants and propose efficient algorithmic solutions.</p><p>At a high level, the TourRec problem is related to variants of the traveling-salesman problem (e.g., TSP, prizecollecting TSP, orienteering). However, the partitioning of the venues into types, the ordering constraints, as well as the characteristics of our objective functions, necessitate customized algorithms for our problem. In our experiments, we demonstrate the superiority of our methods over competitive baselines via an extensive evaluation on real datasets collected from Foursquare for three major cities.</p><p>Roadmap: The rest of the paper is organized as follows: we start with the formal definition of our problems in Section 2. The algorithms we design for the different variants of the problems are described in Section 3 and they are experimentally evaluated in Section 4. We review the related work in Section 5 and conclude the paper in Section 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">PROBLEM DEFINITION</head><p>Next, we introduce our notation, define the TourRec problem and its variants, and discuss their complexity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Preliminaries</head><p>Throughout our discussion, we use the term venue to refer to locations, landmarks, restaurants, museums etc. We assume that there are n venues V = {v1, ...., vn}, and a function Dist(•) that measures the physical distance between any two venues. Our assumption is that every venue is associated with a type. Indicative types are: museum, gallery, cinema, restaurant, etc. For venue v, we use T (v) to denote its type. We assume that each venue is associated with one type and that there are m venue types T = {T1, . . . , Tm}.</p><p>We assume a function f (v) that returns a custom value for a given venue v. The value represents the expected satisfaction of the user, if the user visits the particular venue. We assume that higher values of f (v) correspond to higher satisfaction levels. In principle, different users get different satisfaction levels from different venues and therefore the values of f (v) are personalized. Although obtaining accurate estimates of such personalized values is an important problem that is beyond the scope of this paper, when such an estimation function is available (e.g., using the algorithms proposed by Bao et al. <ref type="bibr" target="#b7">[6]</ref>) it can be incorporated as it is in our framework. In our implementation we estimate expected user satisfaction using intuitive proxies, such as the total number of check-ins or the average review score.</p><p>Our goal is to find a tour R that maximizes the satisfaction of the user and obeys a set of user-specified constrains. A tour is a sequence of venues. For example, R may be equal to R = v1, v3, v5 , which means that the user is recommended to visit venue v1, then venue v3 and, finally, venue v5. We use the notation R(i) to refer to the i-th venue in the tour. In addition to the sequence of venues, the tour includes a starting point s and ending point t, which are specified by the user and can be arbitrary locations on the map. We refer to the number of venues in the tour (excluding the source and the destination) as the size of the tour.</p><p>We consider the following constraints:</p><p>Ordering constraints: We assume that the user provides a type order π, which expresses precedence constraints in the order in which the user wants to visit venues of different types. The order π is a total order over the types in T and we say that Ti ≺π Tj if the user expresses a preference of visiting venues of type Ti before venues of type Tj. Although in Section 3.3 we discuss how these total order constraints can be relaxed, for now we assume that a tour R is consistent with type order π if for every 1</p><formula xml:id="formula_0">≤ i ≤ |R| -1 we have that if v = R(i) and v ′ = R(i + 1), then T (v) ≺π T (v ′ ).</formula><p>The order constraint is motivated by the observation that daily human activities are correlated with the time of the day. For example, people typically have coffee in the morning and visit restaurants in the afternoon and early evening (lunch and dinner times). Also they cannot visit a museum in the evening since it will be most probably closed. This intuition has been repeatedly studied and verified in relevant literature <ref type="bibr" target="#b27">[26,</ref><ref type="bibr" target="#b16">15,</ref><ref type="bibr" target="#b23">22,</ref><ref type="bibr" target="#b18">17,</ref><ref type="bibr" target="#b3">3]</ref>, where it is found that tourists have a very specific opinion on when is the best time within the day for each type of activity or attraction.</p><p>In Section 3.3, we show how to extend our framework to address partial orders on types, super types and type skips, in which there is flexibility in the visiting order of venues.</p><p>Budget constraints: The budget constraints enable users to specify the total distance D they are willing to cover. In Section 3.3, we discuss how temporal or other types of constraints can also be incorporated. For now, we consider the total distance ShortestPath(R) of a tour R that starts at s, traverses the venues in R in order, and ends in t.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Multiplicity bounds:</head><p>The multiplicity bounds allow users to specify the number of venues of a particular type that they want to visit. This number is expressed as an interval. That is, the users provide a lower and an upper bound, Li and Ui, on the number of venues of type Ti they are willing to visit. The set of lower and upper bounds over all venue types is denoted by B = {(Li, Ui)} m i=1 . A tour R is consistent with multiplicity bounds B if for every type Ti the number of venues of type Ti in R are more than or equal to Li and less than or equal to Ui.</p><p>User satisfaction: We use a generic satisfaction function F (R) to measure the expected satisfaction of the user with respect to a candidate tour R. We define two variants of this satisfaction function: the additive and coverage functions, denoted by Add and Cov, respectively. Each function evaluates R in a different way as we discuss below.</p><p>The additive satisfaction function Add: Add assumes that there is a benefit b(v) associated with every venue v. 1 This benefit may be generic or a personalized probability that a particular user will like the venue. Given such venuespecific benefits, the additive satisfaction function evaluates the overall satisfaction of a tour R as Add(R) = v∈R b(v).</p><p>The coverage satisfaction function Cov: This function is appropriate when each venue is associated with a set S(v) that includes attractions that located in the vicinity of the venue (or even activities that the user can perform within or near the venue). Then, the coverage of a path R is defined as Cov(R) = |∪v∈RS(v)|, and represents the total number of distinct attractions or activities that the user will have the chance to visit or perform during the tour.</p><p>Conceptually, Add(R) is appropriate when the user wants to maximize the quality or the personalized relevance of the venues in the tour. On the other hand, Cov(R), is appropriate for more diverse routes that offer a wide range of associated attractions and activities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">The TourRec problem</head><p>Given the above notation, our goal is to solve the following generic problem.</p><p>Problem 1 (TourRec). Given a type order π, a distance budget D, multiplicity bounds B, and starting and ending locations s and t, find a a tour R such that: (i) it is consistent with the order π and type bounds B;</p><formula xml:id="formula_1">1 b(v) is essentially a specific instantiation of the f (v) func- tion mentioned earlier.</formula><p>(ii) it starts at location s and ends at location t; (iii) the total covered distance is less than D, i.e., ShortestPath(R) ≤ D;</p><p>(iv) it maximizes the user satisfaction F (R).</p><p>The different variants of the F function give rise to different variants of the TourRec problem. For example, when the total benefit is measured by Add, then we call the underlying problem the AdditiveTour problem; when the total benefit is measured by Cov, then we refer to the resulting problem as the CoveringTour problem.</p><p>We have the following NP-hardness results for the complexity of these two problems.</p><formula xml:id="formula_2">Lemma 1. The AdditiveTour problem is NP-hard.</formula><p>For the proof of the above lemma it is sufficient to observe that AdditiveTour contains the Traveling Salesman Problem (TSP) <ref type="bibr" target="#b20">[19]</ref>: let us consider the decision version of AdditiveTour, defined as follows: given V , T , B, s, t, D and a satisfaction bound M , is there a tour R that satisfies all the constraints, has total distance cost at most D and Add(R) ≥ M ? We can show that TSP can be reduced to this decision version of AdditiveTour. Indeed, consider a TSP instance on a graph G = (V, E) with distance bound D. We then define an instance of the decision Additive-Tour problem as follows. We consider a graph with the same edge distances and a single type of venues T = {T }. We also set</p><formula xml:id="formula_3">|T | = |V | = n, LT = UT = n, s = t, b(v) = 1 for all venues v ∈ V , M = n,</formula><p>and distance bound D (the same as in the TSP instance). It is easy to see that the TSP instance has a solution if and only if the transformed instance of the decision AdditiveTour problem has a solution.</p><p>Similarly, for CoveringTour we have the following.</p><p>Lemma 2. The CoveringTour problem is NP-hard.</p><p>The proof of Lemma 2 relies on the fact that the Cov-eringTour problem when there is a single type of venues</p><formula xml:id="formula_4">T = {T } such that |T | = |V | = n, B = {(L, U )} with L = U = k,</formula><p>and s = t then our problem is identical to the k-Maximum Coverage problem <ref type="bibr" target="#b20">[19]</ref>. In fact, we can show that the CoveringTour problem is NP-hard even when Li = Ui = 1 for every type i and D = ∞. In this case, CoveringTour is identical to the Maximum Coverage with Group BudgetConstraints problem <ref type="bibr" target="#b11">[10]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">ALGORITHMS</head><p>We begin this section by describing our algorithms for AdditiveTour. Then, we demonstrate how these can be adapted for solving CoveringTour.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Algorithms for AdditiveTour</head><p>First, we consider the version of the AdditiveTour problem where we specify a total order π over the venue types and we want to have exactly one venue from every type in our tour. For this case, we have the following result: Lemma 3. When π is a total order, and Li = Ui = 1 for all types Ti ∈ T , then the AdditiveTour problem can be solved optimally in time O(n 2 D).</p><p>Proof. This version of the AdditiveTour problem can be solved via dynamic programming. More specifically, we define the table B(v, d) to denote the maximum value of the Add function one can achieve with a walk consistent with π, which starts at s, ends at v, and covers a total distance which is at most d. Clearly, for n venues and maximum distance D, the size of the table B is (n + 2) × D.</p><p>First, we sort the venue types according to the order πthe ordering of the venues within each type does not matter and can be arbitrary. Then, for every v ∈ T k we can evaluate B(v, d) by following recursion</p><formula xml:id="formula_5">B(v, d) = max v ′ ∈T k-1 B(v ′ , d -Dist(v, v ′ )) + b(v) .<label>(1)</label></formula><p>The time required for evaluating Equation ( <ref type="formula" target="#formula_5">1</ref>) is O(n<ref type="foot" target="#foot_0">2</ref> D). Thus, the dynamic-programming algorithm is pseudo polynomial. For the special case where all the venues are on a graph with unit edge weights, the time required for the above recursion is polynomial in n.</p><p>We refer to the dynamic-programming algorithm that implements recursion (1) as the Rel-DP algorithm.</p><p>In addition to the exact pseudo-polynomial Rel-DP algorithm, we can also have a fully polynomial-time approximation scheme (FPTAS) for the problem. This scheme firsts scales down the instance of the input problem so that all distances are polynomial in n. It then runs the Rel-DP algorithm on the scaled-down instance and returns the solution. In more detail, given a parameter ǫ, we define K = ǫD n . We then scale down every distance by Dist</p><formula xml:id="formula_6">′ (v, v ′ ) = ⌊ Dist(v,v ′ )</formula><p>K ⌋, and we run the Rel-DP algorithm with distances Dist ′ and distance bound D ′ = ⌊ D K ⌋. The resulting dynamicprogramming table has dimensions (n+2)×⌊ n ǫ ⌋ and thus the running time of the algorithm is O(n 2 ⌊ n ǫ ⌋). It is also easy to see that the returned solution is a (1ǫ)-approximation to the optimal solution. 2 Summarizing, we have: Lemma 4. When π is a total order and Li = Ui = 1 for all types Ti ∈ T , for any ǫ &gt; 0 the AdditiveTour problem be approximated within factor</p><formula xml:id="formula_7">(1 -ǫ) in time O(n 2 ⌊ n ǫ ⌋).</formula><p>Efficiency consideration: The O(n 2 D) running times of the Rel-DP algorithm is a worst-case estimates. In practice, the running time of depends on the distribution of venues into types as well as the binning of D, i.e., the size of the step we adopt for distances when we construct the dynamicprogramming tables. Our experiments show that appropriate binning can lead to very efficient algorithms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Algorithms for CoveringTour</head><p>Again, we consider the version of the CoveringTour problem in which the user wants to visit exactly one venue from each type. We can solve this version of Covering-Tour by modifying Recursion (1) as follows:</p><formula xml:id="formula_8">C(v, d) = (2) max v ′ ∈T k-1 {C(v ′ , d -Dist(v ′ , v)) + Cov(v | R v ′ ,d-Dist(v ′ ,v) )},</formula><p>where C(v, d) keeps the best coverage of a path that ends in v and has total shortest path d, and R v ′ ,d denotes the actual path that ends in v ′ and is within the distance budget d.</p><p>We refer to the dynamic-programming algorithm that implements Recursion (2) as the Cover-DP algorithm. The time complexity of evaluating Recursion (2) is the same as the time complexity for evaluating Recursion (1), i.e., O(n 2 D). Note that the speedups discussed in the previous paragraph can be also applied here.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Extensions</head><p>In this section we present different extensions to our framework. We extend the applicability of our work and address intuitive scenarios that can emerge in urban settings.</p><p>Relaxing the total order constraint: Although the above discussion assumed a total order on the venue types, our algorithms can be easily modified for arbitrary partial type orders. In this section we provide three different ways to relax the total-order constraint: partial orders of types, super types, and type skips.</p><p>Partial orders. The first way to relax the total-order constraint is to allow the venue types to satisfy any partial order. In this scenario, our goal is to find a tour which visits venues in a way that respects a user-submitted partial order. we assume that a user provides a partial order, and the aim is to find a tour for which the ordering of the venues in the tour satisfies the partial order. A simple solution to this problem is to consider all linear extensions of the given partial order. Recall that a linear extension of a partial order is a total order that is consistent with the partial order. Therefore, we can enumerate all those total orders, solve the recommendation problem in each total order, and pick the best solution. Even though in the general case the number of linear extensions can be exponentially large, in our setting, we expect that a user specifies a small number of venue types (less than 5), so given a partial order it is possible to try all consistent total orders. Our results in Section 4.2 indicate that each total order instance can be computed very fast. Furthermore, the total number of distinct venue types in our dataset is 9, hence, the number of consistent total orders for any query is relatively small as well. In addition, each consistent total order can be evaluated independently, allowing for a naturally parallelizable implementation.</p><p>In practice, we should not expect from users to be familiar with the concept of partial orders in order to be able to specify their constraints. However, it is possible to design a system in which users specify their constraints as pair-wise precedence constraints via a simple user interface, and the constraints are represented internally as a partial order. Super-types. An alternative family of ordering constraints, simpler than partial orders, are bucket orders, or as we call them in our setting, super-types. In this case, users can specify that they could visit any type of venues among a given subset. For example, users can specify that they are interested in visiting a museum OR a gallery OR a landmark and then go for lunch to a restaurant OR to a cafe. Those type groupings are called super-types. Our algorithms can then be applied directly to satisfy any such order. The idea is to simply consider super-types as types and apply the algorithms we developed in the previous sections.</p><p>The concept of super-types, coupled with allowing to specify multiple venues from each type, which we will discuss shortly, increases the flexibility of the user by a great deal. For example, a user may specify a super-type consisting of 4 types and asking for a recommendation that contains at most 3 venues from this super-type, and the same individual type can be repeated.</p><p>Type skips. Another way to relax the total order is to allow types to be skipped. So far we have assumed that exactly one venue from every type must be included in the recommended tour (i.e., Li = Ui = 1). However, our methods can be generalized to find tours that are allowed to skip some types. For the AdditiveTour problem, this is captured by the following lemma.</p><p>Lemma 5. Consider the AdditiveTour problem where Li, Ui ∈ {0, 1} (with Li ≤ Ui) for all types Ti ∈ T . In this case, the AdditiveTour problem can be solved optimally in time O(n 3 D).</p><p>Proof. We are using the same benefit table B of dimension (n + 2) × D and the same ordering of venues as in the previous proof. However, Recursion (1) is modified to the following recursive evaluation:</p><formula xml:id="formula_9">B(v, d) = max k ′ =1...k-1 v ′ ∈T k ′ B(v ′ , d -Dist(v, v ′ )) + Add(v) .<label>(3)</label></formula><p>The main difference between Recursion (1) and ( <ref type="formula" target="#formula_9">3</ref>) is that in the latter when forming the tour that ends in venue v ∈ T k , all tours ending in venues of all types that precede type T k are examined (as opposed to only the tours that end in venues of type T k-1 ).</p><p>The complexity of recursion ( <ref type="formula" target="#formula_9">3</ref>) is O(n 3 D). A similar modification can be used to allow types to be skipped in the CoveringTour problem. Multiple venues per type: Lemmas 3 and 5 assume that exactly and at most one venue from each venue type will be added in the final tour, respectively. For the AdditiveTour problem, the variant where multiple venues of the same type are required (i.e., U k &gt; 1) can be handled by extending the dynamic programming recursion of Equation ( <ref type="formula" target="#formula_5">1</ref>). This can be done as follows: consider again the dynamic programming table B(v, d) that stores the maximum benefit solution ending at v of type T k and having total cost at most d. Then for every v ∈ T k we can evaluate B(v, d) as follows:</p><formula xml:id="formula_10">B(v, d) = max v ′ ∈T k-1 d ′ ≤d B(v ′ , d -d ′ ) + Path(v ′ , v, d -d ′ ) .<label>(4)</label></formula><p>In the above equation, Path(v ′ , v, x) is the benefit achieved by the best path that starts at v ′ ends at v, has cost at most x and visits the required a number of places in T k . Computing Path(v ′ , v, x) is in fact the orienteering problem <ref type="bibr" target="#b31">[30]</ref> and therefore known algorithms for this problem <ref type="bibr" target="#b12">[11]</ref> can be applied as a subroutine to the above recursion.</p><p>For the CoveringTour problem, we can allow for multiple venues per type by creating copies of all the venues of category Ti and treating every copy as a different category. Observe that, for this problem, picking the same venue will not improve the coverage function, while it will increase the cost of the path. Therefore, the algorithm will always prefer to pick new venues.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Time budget and venue delays:</head><p>In practice, users may have an upper bound on the time that they are willing to allocate to their tour, instead of on the distance that they are willing to cover. In this case, we can transform distance into time by multiplying with the appropriate velocity (e.g., walking speed). The pairwise distance between venues can then be measured in time units without affecting our algorithms. In addition, the time-based formulation allows us </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">EXPERIMENTS</head><p>Our experiments with real data from Foursquare demonstrate the practical utility of our formulations and the corresponding algorithms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Experimental setup</head><p>The Foursquare datasets: We obtain an initial set of venues using the publicly available dataset of Cheng et al. <ref type="bibr" target="#b14">[13]</ref>, which includes geo-tagged, user-generated content that was pushed to Twitter's public feed from Sept 2010 to Jan 2011. From this dataset, we select tweets related to Foursquare check-ins into popular venues (with at least 10 check-ins). Our final dataset consists of 6 699 516 check-ins.</p><p>The classification of venues to types in Foursquare is hierarchical. In our experiments, we use the upper level of this classification and thus each one of our venues can belong to one of the following 9 types: Arts &amp; Entertainment, College &amp; University, Food, Professional &amp; Other Places, Nightlife Spots, Great Outdoors, Shop &amp; Service, Travel &amp; Transport and Residence. The original dataset did not include the category information for the venues, so we did the mapping of venues to types by crawling Foursquare.com.</p><p>From this dataset, we generate three smaller datasets, which correspond to venues in three large cities, New York City (NYC), San Francisco (SF) and London (London). Each one of these datasets contains all the check-ins that took place within a 10-mile radius from the corresponding city center. Table <ref type="table" target="#tab_0">1</ref> shows the statistics of these datasets.</p><p>In all three datasets, we consider the venues that belong to the category Great Outdoors to be the attractions/activities that one wants to cover in the CoveringTour problem. Hence, we use the rest 8 categories as the (ordinary) venue types for both the AdditiveTour and CoveringTour problems. For our experiments, we compute a universal relevance score b(v) for every venue v. This is computed as the fraction of check-ins for venue v over the total number of check-ins in venues of type T (v). Similarly, for venue v, we compute the set of nearby activities, denoted by S(v) as the set of venues of type Greater Outdoors that are within 1 mile from v.</p><p>Baseline heuristics: We compare our algorithms with a Greedy baseline adopted from the operations research literature <ref type="bibr" target="#b30">[29]</ref>. This Greedy algorithm is iterative: at step t, it picks a venue from the t-th type Tt in the order π. More specifically, among all venues vt in Tt it identifies the four venues with the highest value of the ratio of the objective function divided by the distance Dist(vt, wt-1), where wt-1 is the venue picked at the t -1 step. Then one of these four venues is finally chosen at random with probability proportional to the corresponding value of the ratio. The algorithm proceeds until it reaches the destination or it runs out of distance budget. If the algorithm terminates before reaching the destination, it reports a failure. In all our experiments, we repeat the above process for 100 times and we report the solution with the highest value of the objective function. We refer to the Greedy algorithm that uses the Add (resp. Cov) objective as the Rel-Greedy (resp. Cov-Greedy) algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Quality evaluation</head><p>Using the above set up we evaluate the quality of the various algorithms for solving the AdditiveTour and the CoveringTour problems respectively. When evaluating the quality of our algorithms for AdditiveTour, we measure the Add of the proposed tours, while when we evaluate the algorithms for the CoveringTour problem, we measure the Cov or the output tours. In all cases, higher values of the objective mean better-quality results.</p><p>In all the experiments we present we have Li = Ui = 1 for all types. We evaluate our algorithms with regard to the distance budget (D) that a user is willing to walk and the number of venue types (k) of the requested tour. In all cases the trends are similar: the Rel-DP and the Cover-DP algorithms are clearly the best algorithms for Additi-veTour and CoveringTour respectively. In addition to giving lower-quality solutions, the Greedy heuristics often fail to find a solution, even if one exists.</p><p>Varying the distance budget D: In this experiment, we study the effect of the distance bound D on the results reported by each algorithm. We generate 10 random type orders. Each type order includes 6 (distinct) types chosen randomly from the set of available ordinary types (i.e., k = 6). We evaluate our algorithms for each value of D ∈ {5, 6, 7, 8, 9, 10} (in miles) over all generated orders.</p><p>Figures <ref type="figure" target="#fig_3">2</ref> and<ref type="figure" target="#fig_2">3</ref> show the average value achieved by the algorithms for the Add and Cov objectives, respectively. Observe that all values are averages over the 10 different type orders. Although the dynamic programming algorithms always report a solution if one exists, the greedy approaches may fail to find a solution. In such cases the reported average is taken over the type orders for which the algorithm successfully reported a tour. The number on top of the bar corresponding to a greedy algorithm represents the number of instances (out of 10) for which the algorithm reported a failure. For a fair comparison, we also report the average value of Add achieved by the dynamic programming algorithms over the instances for which the greedy baselines actually found a solution (the Rel-DP(Gr) and Cover-DP(Gr) bars for the Add and Cov objectives, respectively). The plots also include the Add value achieved by Cover-DP and the Cov value achieved by Rel-DP. Our goal is to verify that a customized approach is required for each objective function.</p><p>As can be seen in Figure <ref type="figure" target="#fig_1">2</ref>, Rel-DP finds a solutions for all instances and for all values of D. The same is also true for Rel-Greedy (and hence, Rel-DP and Rel-DP(Gr) match). However, with respect to the objective function (Add), Rel-DP consistently outperforms Rel-Greedy. Another observation is that the optimal benefit (reported by Rel-DP) peeks after the distance bound has been sufficiently relaxed, and stops increasing after that point (which differs among cities). The results for the Cov objective are shown in Figure <ref type="figure" target="#fig_2">3</ref>. While the general trends are very similar to the ones we made for Add, the figure motivates additional observations. First, we observe that Cov-Greedy fails to report a solution for a significant number of order types. For example, for the NYC dataset, the Cov-Greedy failed to find a solution for 5 out of 10 instances for D = 10. In fact, Cov-Greedy failed to report any solutions (e.g., for the D ∈ {5, 6} for London or for D = 5 for Pnyc). Due to this failures, the Cover-DP bar differs from the Cover-DP(Gr) bar -recall that the latter is the performance of Cover-DP over the instances for which Cov-Greedy was able to deliver a solution. Nevertheless, in all cases, both Cover-DP and Cover-DP(Gr) outperform Cov-Greedy. This demonstrates the inability of Cov-Greedy to leverage the overlap among the sets of attractions covered by the various venues. Finally, we observe that Cover-DP and Rel-DP failed to achieve high values for the objectives functions that they were not customized for (Add and Cov respectively). In fact, they were even outperformed by the greedy baselines in those tasks. This verifies our intuition that both problems are non-trivial, and require customized algorithms.</p><p>Varying the Tour size k: In this experiment, we evaluate the effect of the size of the tour k (i.e., the number of venue types in the tour) on the performance of the algorithms. We set D = 6 miles, and generate 10 random permutations of k (distinct) types, for k ∈ {2, 3, 4, 5, 6, 7, 8}, emulating the process that we followed in the previous experiment. The results for the NYC dataset for both the Add and Cov objectives are shown in Figure <ref type="figure" target="#fig_5">4</ref>. 3  The Rel-DP and Cover-DP algorithms outperform the greedy baselines for the Add and Cov objectives, respectively. This demonstrates that our algorithms are able to include additional venues and improve their respective objectives, while respecting the distance bound. On the other hand, the values of the greedy approaches may only increase trivially or even decrease, as k becomes larger and more types are added to the tour. In fact, for the Cov objective, Cov-Greedy often fails to find a solution, especially for larger values of k.</p><p>Binning of distances: As we have already discussed in Section 3, the running time of both the Rel-DP and Cover-DP depends on the granularity of the bins that we use to break the distance budget D. We expect that finer granularity gives better results in terms of the objective functions, yet is computationally more expensive. Tables <ref type="table">2</ref> and<ref type="table" target="#tab_1">3</ref> show the values of the objective functions Add(R) and Cov(R) as well as the corresponding running times of the Rel-DP and the Cover-DP algorithms for bins of sizes b = 0.1 and b = 0.01 miles. For the results reported here we set D = 10. From the two tables we observe that bins of size 0.1 of miles achieve the same values of the objectives while they result in 10 times faster algorithms. Observe that the running time of Cover-DP is larger than the running time of Rel-DP. The reason for that is that the former needs to evaluate a more complex objective -which in every step requires the evaluation of the intersection of two sets: the set of already-covered activities and the activities introduced by any newly-considered venue. 3 The results for the other two datasets were very similar and omitted due to space constraints as well.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Anecdotal evaluation</head><p>Here, we use visualization in order to provide some further insight on the tours output by the different algorithms as solutions to the AdditiveTour and CoveringTour problems. Due to lack of space we show here the results for a request of a tour in London -results in other cities convey similar intuition. The query we consider requires a tour of size k = 4 (i.e., four venue types) and the input type order is π={1, 3, 6, 5}, where types 1,3,6,5 correspond to the Foursquare types "Arts &amp; Entertainment", "Food", "Shop &amp; Services" and "Nightlife Spot" respectively. For the results we report here we assume that both the starting and the ending point of the tour is London's city center.</p><p>Solving the AdditiveTour problem for London with a distance bound D= 6 miles, gives the tours presented on the maps at Figure <ref type="figure" target="#fig_7">5</ref>; Rel-DP reports the solution depicted on the left, while Rel-Greedy reports the solution on the right. The point labeled "0" is the starting and ending point of the tour, while the red point-marks correspond to the venues recommended and are labeled with their type number. We also report the total benefit obtained from the two algorithms (top left corner of each map), and the benefit of each individual venue. While both tours begin with the Route Length (k) Solving the CoveringTour problem for London with the same parameters gives the tours presented on the maps at Figure <ref type="figure">6</ref>. Cover-DP reports the solution depicted on the left, while Cov-Greedy reports the solution on the right. We now present with a dotted circle centered at each venue, the area that the latter covers with respect to locales of type "Greater Outdoors", which as aforementioned are the attractions for our CoveringTour problem. Furthermore, the actual attractions covered are shown on the map as blue mark-points. As one can see, the tours that are provided by the two algorithms are completely different in this case. For instance, Cover-DP recommends Alice to start her tour from the British Museum, while Cov-Greedy recommends the Tate Museum of Modern Arts. However, again Cover-DP clearly outperforms Cov-Greedy, since the number of "blue nodes" covered by the former is 20, as compared to the 14 attractions covered by the Cov-Greedy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">RELATED WORK</head><p>The proliferation of location-based systems has given rise to literature on spatial recommendations, which is clearly relevant to our work. Related to our study are also com-binatorial problems that deal with finding tours on graphs. We review this work below. Spatial recommendations: The rapid proliferation of location-based social networks has motivated a volume of work that focuses on methods for personalized location (or venue) recommendations <ref type="bibr" target="#b9">[8,</ref><ref type="bibr" target="#b26">25,</ref><ref type="bibr" target="#b34">33]</ref> to social-network users. These methods, deploy collaborative-filtering techniques <ref type="bibr" target="#b34">[33]</ref>, geometric embeddings <ref type="bibr" target="#b9">[8]</ref> or they even incorporate features present in the users' social network <ref type="bibr" target="#b26">[25]</ref> in order to associate every venue with a score, which encodes the probability of a user liking (or visiting) a particular venue recommendation. Contrary to our own work, all these approaches evaluate each venue independently of the rest. Thus, venues are not considered as groups or as stops in a tour and therefore thematic redundancy or spatiotemporal constraints cannot be taken into consideration. This is the key difference between our work and all these described above.</p><p>Motivated by the limitation of the above methods, recent work has focused on recommending tours of locations. For instance, De Choudhury et al. <ref type="bibr" target="#b15">[14]</ref> focus on segmenting streams of spatiotemporally tagged photos into paths, and then assembling these paths into itineraries. Similar works are those by Kurashima et al. <ref type="bibr" target="#b25">[24]</ref> and Yoon et al. <ref type="bibr" target="#b35">[34]</ref>, who utilize spatiotemporal traces (e.g., photo streams, GPS trajectories) to recommend spatiotemporally affordable tours In addition to being applicable only in the presence of training sequences of spatiotemporally tagged photographs (or other similar traces), these approaches cannot handle multiple types of venues that cater to different user needs. This limitation is also shared by the relevant works on interactive tour recommendation <ref type="bibr" target="#b28">[27,</ref><ref type="bibr" target="#b19">18,</ref><ref type="bibr" target="#b24">23]</ref>, which iteratively personalize or improve a tour based on user feedback. Clearly, by not allowing for venues of multiple types, all of these approaches can also not support the user's requirement to satisfy her needs in a particular order.</p><p>The support for multiple types of venues is considered by Ardissono et al. <ref type="bibr" target="#b5">[5]</ref>. However, the proposed system expects the user to manually select a venue from each desired type. A tour traversing the selected venues is then proposed. Finally, in a recent demo paper, Xie et al. <ref type="bibr" target="#b33">[32]</ref> describe a singletype system for tour-recommendations, and briefly describe how this could be extended to handle multiple types. The proposed method is not comparable to ours, since it does not allow the user to specify the order in which the user wants to visit the different types. In addition, even though no experimental evaluation is provided, the authors suggest that multiple venues can be combined to form a spatiotemporally efficient tour via a simple greedy approach. However, our experiments on real data demonstrate the inadequacies of the greedy approach in practical scenarios.</p><p>Further, approaches that focus on reconstructing and recommending routes based on existing location trajectories (e.g., <ref type="bibr" target="#b32">[31,</ref><ref type="bibr" target="#b13">12]</ref>) are complementary to our work; the output of our methods can be used as input to such approaches. Tours in operations research: At a high level, there is a connection between our problems and the orienteering problem (OP) <ref type="bibr" target="#b31">[30]</ref> studied in operations-research and theoretical computer science. In OP the input consists of a set of locations with an associated benefit for each location, and a cost for the traversal of an edge between two locations. The goal is to visit a set of locations such that the benefit is maximized, while the total distance covered is within a bound Dmax. The first difference between our problem and  the OP is that our locations (which we call venues) are associated with types, and only a certain number of each type can be included in the tour. In addition, the user-specified ordering constraints over these types are also absent from OP. Thus, the OP-specific heuristics <ref type="bibr" target="#b12">[11,</ref><ref type="bibr" target="#b22">21,</ref><ref type="bibr" target="#b29">28]</ref> are not directly applicable to our problem.</p><p>The connection between our problems and the Traveling Salesman Problem (TSP) <ref type="bibr" target="#b4">[4]</ref> and its prize-collecting versions <ref type="bibr">[7,</ref><ref type="bibr" target="#b10">9]</ref> is equally abstract. The TSP problem considers a set of cities and distances between them and asks for the shortest possible tour that visits each city exactly ones and returns to the original city. The prize-collecting version of the same problem assumes that there is a benefit associated with visiting every city and the goal is to maximize the total benefit by visiting cities, divided by the total distance covered by the tour. The consideration of multiple venue types, the ordering constraints and the freedom to not visit all the venues (but only some from every type) make our problems distinct from all the above formulations. Moreover, the CoveringTour version of our problem is very distinct from any prize-collecting problem that has appeared in relevant literature, since the benefit induced by every venue does not depend solely on the venue itself, but also on the rest of the venues included in the tour. In short, the existing algorithms for the different TSP versions are not applicable for solving the problems that we study in our work.</p><p>Travel package recommendations: Tangential to the spatial recommendation problems, is that of travel package recommendations, where the goal is to recommend vacation packages (i.e., destination, hotels and organized activities). Although these studies (e.g., <ref type="bibr" target="#b21">[20]</ref>) also fall into the general realm of -group -recommendation systems, they are distinct from our work. First, their focus is on creating combinatorial packages that satisfy different constraints, rather than on the concept of creating ordered routes which is essential to our work. We consider such systems to be complementary to ours: once a user is in a given urban area, possibly picked by one of the package-recommendation approaches discussed above, our work provides a system that is able to provide a customized tour based on her preferences.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">CONCLUSIONS</head><p>We have presented two alternative instantiations of a framework for generating customized tour recommendations as a paradigm of an intelligent urban navigation service. The first one, AdditiveTour, assigns a benefit to each location and retrieves the sequence of venues with the maximum total benefit, constrained by a given distance budget and a preferred visitation order for the types of venues in the tour. The second formulation, CoveringTour, assigns to each venue a set of associated attractions covered by it (i.e., are within range). The goal is to maximize the total number of attractions covered, under the same set of constraints. We study the complexity of these problems and provide efficient algorithmic solutions. Furthermore, we evaluate our methods on a large dataset from Foursquare, the largest location-based social network to date. The results demonstrate the practical utility of the proposed formulations and the efficacy of the proposed algorithms.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: An example of the Tour Recommendation setting.</figDesc><graphic coords="2,95.74,54.20,155.05,100.91" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: The value of Add(R) for tours R output by the different algorithms for distance bounds D ∈ {5, 6, 7, 8, 9, 10} (in miles) for all three datasets.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: The value of Cov(R) for tours R found by the different algorithms for distance bounds D ∈ {5, 6, 7, 8, 9, 10} (in miles) for all three datasets.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Table 2 :</head><label>2</label><figDesc>Value of Add(R) and running times achieved by Rel-DP for bin sizes b = 0.1 or 0.01 miles and D = 10 miles. Add(R) Running time (ms) b = 0.01 b = 0.1 b = 0.01 b = 0.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: The Add(R) and Cov(R) for tours R output by the different algorithms for the NYC dataset and varying the tour size k ∈ {2, 3, 4, 5, 6, 7, 8}.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Anecdotal results for the London dataset when tours are obtained as solutions to the AdditiveTour problem; distance budget D = 6 miles, π = {Arts &amp; Entertainment (1), Food (3), Shop &amp; Services (6), Nightlife Spot (5)}.</figDesc><graphic coords="9,78.26,54.96,204.70,179.20" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Statistics for the NYC, SF and London datasets.</figDesc><table><row><cell cols="2">NYC</cell><cell>SF</cell><cell>London</cell></row><row><cell cols="3"># Check-ins 322 504 91 887</cell><cell>47 916</cell></row><row><cell># Venues</cell><cell>12 728</cell><cell>3 903</cell><cell>2 740</cell></row><row><cell cols="4">to consider the expected duration of a visit to a particular</cell></row><row><cell cols="4">venue. For example, a visit to MoMA (Museum of Modern</cell></row><row><cell cols="4">Art) in New York City could last a lot longer than a visit to</cell></row><row><cell cols="4">a small local gallery. Our algorithms can be easily extended</cell></row><row><cell cols="4">to account for this, by adding the temporal cost associated</cell></row><row><cell cols="4">with each venue v to the existing cost of transitioning from</cell></row><row><cell>v to any other venue v ′ .</cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="4">Multiple transportation types: In practice, the user</cell></row><row><cell cols="4">may have different options from moving from one place to</cell></row><row><cell cols="4">another, e.g., walking, taking a taxi, metro etc. Each such</cell></row><row><cell cols="4">option would incur a different time cost. This can be mod-</cell></row><row><cell cols="4">eled by considering different types of edges connecting every</cell></row><row><cell cols="4">pair of two venues. Then the dynamic-programming recur-</cell></row><row><cell cols="4">sions would simply have to iterate over all possible types of</cell></row><row><cell cols="4">edges. This would increase the computational complexity</cell></row><row><cell cols="4">of all the above algorithms by a factor of L -where L is</cell></row><row><cell cols="4">the maximum number of transportation options that can be</cell></row><row><cell cols="2">observed between two nodes.</cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 3 :</head><label>3</label><figDesc>1 Value of Cov(R) and running times achieved by Rel-DP for bin sizes b = 0.1 or 0.01 miles and D = 10 miles.</figDesc><table><row><cell>London</cell><cell>0.27</cell><cell>0.27</cell><cell>976.9</cell><cell>103.7</cell></row><row><cell>SF</cell><cell>0.36</cell><cell>0.36</cell><cell>1176.7</cell><cell>125.4</cell></row><row><cell>NYC</cell><cell>0.34</cell><cell>0.34</cell><cell>1072.5</cell><cell>139.3</cell></row><row><cell></cell><cell cols="2">Cov(R)</cell><cell cols="2">Running time (ms)</cell></row><row><cell></cell><cell cols="3">b = 0.01 b = 0.1 b = 0.01</cell><cell>b = 0.1</cell></row><row><cell>London</cell><cell>24.7</cell><cell>24.7</cell><cell>4587.6</cell><cell>384.8</cell></row><row><cell>SF</cell><cell>26.5</cell><cell>26.5</cell><cell>6596.1</cell><cell>547.6</cell></row><row><cell>NYC</cell><cell>21.3</cell><cell>21.3</cell><cell>4612.8</cell><cell>445.5</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_0"><p>Keep in mind that we are dealing with a maximization problem.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_1"><p>We defer from mentioning commercial venues for the rest of the types.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>This research was partially funded by NSF grants III 1218437 and CAREER 1253393 and gifts from Microsoft and Google.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName><surname>References</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<ptr target="https://foursquare.com/about/" />
		<title level="m">Foursquare as a recommendation engine</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">United nations-world urbanization prospects: The</title>
		<ptr target="http://esa.un.org/unup" />
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">A Companion to Tourism</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M W</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Alan</forename><forename type="middle">A</forename><surname>Lew</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">Michael</forename><surname>Hall</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
			<publisher>Wiley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">The Traveling Salesman Problem: A Computational Study</title>
		<author>
			<persName><forename type="first">D</forename><surname>Applegate</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Bixby</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Chvátal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Cook</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Intrigue: Personalized recommendation of tourist attractions for desktop and hand held devices</title>
		<author>
			<persName><forename type="first">L</forename><surname>Ardissono</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Goy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Petrone</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Segnan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Torasso</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Applied Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">8-9</biblScope>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Cov-Greedy Figure 6: Anecdotal results for the London dataset when tours are obtained as solutions to the CoveringTour problem; distance budget D = 6 miles</title>
		<author>
			<persName><forename type="first">Cover-Dp</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Shop &amp; Services</title>
		<imprint/>
	</monogr>
	<note>Nightlife Spot (5)}</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Location-based and preference-aware recommendation using sparse geo-social networking data</title>
		<author>
			<persName><forename type="first">J</forename><surname>Bao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mokbel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGSPATIAL GIS</title>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">On approximating a geometric prize-collecting traveling salesman problem with time windows</title>
		<author>
			<persName><forename type="first">R</forename><surname>Bar-Yehuda</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Even</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shahar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Algorithms</title>
		<imprint>
			<biblScope unit="volume">55</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A recommendation system for spots in location-based online social networks</title>
		<author>
			<persName><forename type="first">B</forename><surname>Berjani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Strufe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SNS</title>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A note on the prize collecting traveling salesman problem</title>
		<author>
			<persName><forename type="first">D</forename><surname>Bienstock</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">X</forename><surname>Goemans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Simchi-Levi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">P</forename><surname>Williamson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Math. Program</title>
		<imprint>
			<biblScope unit="volume">59</biblScope>
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Maximum coverage problem with group budget constraints and applications</title>
		<author>
			<persName><forename type="first">C</forename><surname>Chekuri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kumar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">APPROX-RANDOM</title>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A recursive greedy algorithm for walks in directed graphs</title>
		<author>
			<persName><forename type="first">C</forename><surname>Chekuri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Pál</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE FOCS</title>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Searching trajectories by locations: An efficiency study</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Xie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGMOD</title>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Exploring millions of footprints in location sharing services</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Caverlee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Sui</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICWSM</title>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Automatic construction of travel itineraries using social breadcrumbs</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">De</forename><surname>Choudhury</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Feldman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Amer-Yahia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Golbandi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Lempel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Yu</surname></persName>
		</author>
		<editor>HT</editor>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A day in the city: Using conjoint choice experiments to model urban tourists&apos; choice of activity packages</title>
		<author>
			<persName><forename type="first">B</forename><surname>Dellaert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Borgers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Timmermans</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Tourism Management</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="347" to="353" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Smart cities: How to build sustainable and resilient environments in an increasingly urbanized world</title>
		<author>
			<persName><forename type="first">P</forename><surname>Doherty</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">McGraw Hill Financial Global Institute White Paper</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Exploring time patterns in people&apos;s use of a metropolitan park district</title>
		<author>
			<persName><forename type="first">D</forename><surname>Scott</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Leisure Sciences</title>
		<imprint>
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">An automated itinerary planning system for holiday travel</title>
		<author>
			<persName><forename type="first">S</forename><surname>Dunstall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Horn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Kilby</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Krishnamoorthy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Owens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Sier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Thièbaux</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Journal of IT and Tourism</title>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Computers and Intractability: A Guide to the Theory of NP-Completeness</title>
		<author>
			<persName><forename type="first">M</forename><surname>Garey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Johnson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1979">1979</date>
			<publisher>W.H. Freeman</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Cost-aware travel tour recommendation</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Ge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Xiong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Tuzhilin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">KDD</title>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">The orienteering problem</title>
		<author>
			<persName><forename type="first">B</forename><surname>Golden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Levy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Vohra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Naval Research Logistics</title>
		<imprint>
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Extracting diurnal patterns of real world activity from social media</title>
		<author>
			<persName><forename type="first">N</forename><surname>Grinberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Naaman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Shaw</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Lotan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AAAI ICWSM</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Triptip: a trip planning service with tag-based recommendation</title>
		<author>
			<persName><forename type="first">K</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Ryu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CHI</title>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Travel route recommendation using geotags in photo sharing sites</title>
		<author>
			<persName><forename type="first">T</forename><surname>Kurashima</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Iwata</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Irie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Fujimura</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CIKM</title>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">A random walk around the city: New venue recommendation in location-based social networks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Noulas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Scellato</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Lathia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Mascolo</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">2012</date>
			<publisher>In SocialCom</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Tourist time-budget</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">G</forename><surname>Pearce</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals of Tourism Research</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="106" to="121" />
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Interactive itinerary planning</title>
		<author>
			<persName><forename type="first">S</forename><surname>Roy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Das</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Amer-Yahia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Yu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICDE</title>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">A personalized tourist trip design algorithm for mobile tourist guides</title>
		<author>
			<persName><forename type="first">W</forename><surname>Souffriau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Vansteenwegen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Vertommen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">V</forename><surname>Berge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">V</forename><surname>Oudheusden</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In Applied Artificial Intelligence</title>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Heuristic methods applied to orienteering</title>
		<author>
			<persName><forename type="first">T</forename><surname>Tsiligirides</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Operational Research Society</title>
		<imprint>
			<date type="published" when="1984">1984</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">The orienteering problem: A survey</title>
		<author>
			<persName><forename type="first">P</forename><surname>Vansteenwegen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Souffriau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">V</forename><surname>Oudheusden</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Operational Research</title>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Constructing popular routes from uncertain trajectories</title>
		<author>
			<persName><forename type="first">L.-Y</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W.-C</forename><surname>Peng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM KDD</title>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Comprec-trip: a composite recommendation system for travel planning</title>
		<author>
			<persName><forename type="first">M</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Lakshmanan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Wood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICDE (demo)</title>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Location recommendation for location-based social networks</title>
		<author>
			<persName><forename type="first">M</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Peifeng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W.-C</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGSPATIAL GIS</title>
		<imprint>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Social itinerary recommendation from user-generated digital trails</title>
		<author>
			<persName><forename type="first">H</forename><surname>Yoon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Woo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Personal and Ubiquitus Computing</title>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
